
STATION_F407VE_SSD1963.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f064  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000e858  0800f1f8  0800f1f8  0001f1f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801da50  0801da50  00030234  2**0
                  CONTENTS
  4 .ARM          00000008  0801da50  0801da50  0002da50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801da58  0801da58  00030234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801da58  0801da58  0002da58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801da5c  0801da5c  0002da5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  0801da60  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030234  2**0
                  CONTENTS
 10 .bss          00000f10  20000238  20000238  00030238  2**3
                  ALLOC
 11 ._user_heap_stack 00000c00  20001148  20001148  00030238  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014ccb  00000000  00000000  00030264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d4d  00000000  00000000  00044f2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001198  00000000  00000000  00047c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001088  00000000  00000000  00048e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023ee0  00000000  00000000  00049ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015e0b  00000000  00000000  0006dd80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ceb0f  00000000  00000000  00083b8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015269a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000625c  00000000  00000000  001526ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000238 	.word	0x20000238
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f1dc 	.word	0x0800f1dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000023c 	.word	0x2000023c
 80001cc:	0800f1dc 	.word	0x0800f1dc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <AT24XX_Save>:
		return 1;
	else
		return 0;
}

uint8_t AT24XX_Save(uint16_t address, void *data, size_t size_of_data) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af04      	add	r7, sp, #16
 8000ffe:	4603      	mov	r3, r0
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
 8001004:	81fb      	strh	r3, [r7, #14]
#if ((AT24XX_SIZE_KBIT == 4) || (AT24XX_SIZE_KBIT == 8) || (AT24XX_SIZE_KBIT == 16))
	if(size_of_data > 16)
		return 0;
#endif
#if ((AT24XX_SIZE_KBIT == 32) || (AT24XX_SIZE_KBIT == 64) || (AT24XX_SIZE_KBIT == 128))
	if(size_of_data > 32)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b20      	cmp	r3, #32
 800100a:	d901      	bls.n	8001010 <AT24XX_Save+0x18>
		return 0;
 800100c:	2300      	movs	r3, #0
 800100e:	e016      	b.n	800103e <AT24XX_Save+0x46>
#endif

#if ((AT24XX_SIZE_KBIT == 1) || (AT24XX_SIZE_KBIT == 2))
	if(HAL_I2C_Mem_Write(&EEPROM24XX_I2C, AT24XX_ADDRESS<<1, Address, I2C_MEMADD_SIZE_8BIT, (uint8_t*)data, size_of_data, HAL_MAX_DELAY) == HAL_OK)
#else
		if (HAL_I2C_Mem_Write(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data, size_of_data, HAL_MAX_DELAY) == HAL_OK)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	b29b      	uxth	r3, r3
 8001014:	89fa      	ldrh	r2, [r7, #14]
 8001016:	f04f 31ff 	mov.w	r1, #4294967295
 800101a:	9102      	str	r1, [sp, #8]
 800101c:	9301      	str	r3, [sp, #4]
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	2310      	movs	r3, #16
 8001024:	21ae      	movs	r1, #174	; 0xae
 8001026:	4808      	ldr	r0, [pc, #32]	; (8001048 <AT24XX_Save+0x50>)
 8001028:	f005 fc38 	bl	800689c <HAL_I2C_Mem_Write>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d104      	bne.n	800103c <AT24XX_Save+0x44>
#endif
{

			HAL_Delay(5);
 8001032:	2005      	movs	r0, #5
 8001034:	f004 fc82 	bl	800593c <HAL_Delay>
			return 1;
 8001038:	2301      	movs	r3, #1
 800103a:	e000      	b.n	800103e <AT24XX_Save+0x46>
} else
	return 0;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200002b8 	.word	0x200002b8

0800104c <AT24XX_Load>:

uint8_t AT24XX_Load(uint16_t address, void *data, size_t size_of_data) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af04      	add	r7, sp, #16
 8001052:	4603      	mov	r3, r0
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
 8001058:	81fb      	strh	r3, [r7, #14]
#if ((AT24XX_SIZE_KBIT == 1) || (AT24XX_SIZE_KBIT == 2))
	if(HAL_I2C_Mem_Read(&EEPROM24XX_I2C, AT24XX_ADDRESS<<1, Address, I2C_MEMADD_SIZE_8BIT, (uint8_t*)data, size_of_data, HAL_MAX_DELAY) == HAL_OK)
#else
		if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data, size_of_data, HAL_MAX_DELAY) == HAL_OK)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	b29b      	uxth	r3, r3
 800105e:	89fa      	ldrh	r2, [r7, #14]
 8001060:	f04f 31ff 	mov.w	r1, #4294967295
 8001064:	9102      	str	r1, [sp, #8]
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2310      	movs	r3, #16
 800106e:	21ae      	movs	r1, #174	; 0xae
 8001070:	4806      	ldr	r0, [pc, #24]	; (800108c <AT24XX_Load+0x40>)
 8001072:	f005 fd0d 	bl	8006a90 <HAL_I2C_Mem_Read>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d101      	bne.n	8001080 <AT24XX_Load+0x34>
#endif
{
	return 1;
 800107c:	2301      	movs	r3, #1
 800107e:	e000      	b.n	8001082 <AT24XX_Load+0x36>
} else
	return 0;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200002b8 	.word	0x200002b8

08001090 <AT24XX_Read>:

uint8_t AT24XX_Read(uint16_t address) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	80fb      	strh	r3, [r7, #6]
	uint16_t dt[1] = {0};
 800109a:	2300      	movs	r3, #0
 800109c:	81bb      	strh	r3, [r7, #12]
	AT24XX_Load(address, dt, 1);
 800109e:	f107 010c 	add.w	r1, r7, #12
 80010a2:	88fb      	ldrh	r3, [r7, #6]
 80010a4:	2201      	movs	r2, #1
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff ffd0 	bl	800104c <AT24XX_Load>
	return dt[0];
 80010ac:	89bb      	ldrh	r3, [r7, #12]
 80010ae:	b2db      	uxtb	r3, r3
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <AT24XX_Write>:

void AT24XX_Write(uint16_t address, uint8_t val) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	460a      	mov	r2, r1
 80010c2:	80fb      	strh	r3, [r7, #6]
 80010c4:	4613      	mov	r3, r2
 80010c6:	717b      	strb	r3, [r7, #5]
	uint8_t save[] = {val};
 80010c8:	797b      	ldrb	r3, [r7, #5]
 80010ca:	733b      	strb	r3, [r7, #12]
	AT24XX_Save(address, save, 1);
 80010cc:	f107 010c 	add.w	r1, r7, #12
 80010d0:	88fb      	ldrh	r3, [r7, #6]
 80010d2:	2201      	movs	r2, #1
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ff8f 	bl	8000ff8 <AT24XX_Save>
}
 80010da:	bf00      	nop
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <AT24XX_Update>:

void AT24XX_Update(uint16_t address, uint8_t val) {
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	4603      	mov	r3, r0
 80010ea:	460a      	mov	r2, r1
 80010ec:	80fb      	strh	r3, [r7, #6]
 80010ee:	4613      	mov	r3, r2
 80010f0:	717b      	strb	r3, [r7, #5]
	if (AT24XX_Read(address) != val) AT24XX_Write(address, val);
 80010f2:	88fb      	ldrh	r3, [r7, #6]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ffcb 	bl	8001090 <AT24XX_Read>
 80010fa:	4603      	mov	r3, r0
 80010fc:	461a      	mov	r2, r3
 80010fe:	797b      	ldrb	r3, [r7, #5]
 8001100:	4293      	cmp	r3, r2
 8001102:	d005      	beq.n	8001110 <AT24XX_Update+0x2e>
 8001104:	797a      	ldrb	r2, [r7, #5]
 8001106:	88fb      	ldrh	r3, [r7, #6]
 8001108:	4611      	mov	r1, r2
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff ffd4 	bl	80010b8 <AT24XX_Write>
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <round_eps>:
uint16_t dig_H1, dig_H3;
int16_t dig_H2, dig_H4, dig_H5, dig_H6;
int32_t t_fine;

float round_eps(double v,
                double eps) {                                                                                        // round_eps(1.234, 0.05) = 1.25
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	ed87 0b02 	vstr	d0, [r7, #8]
 8001122:	ed87 1b00 	vstr	d1, [r7]
    return floor(v / eps + 0.5) * eps;                        // round_eps(1.234, 0.01) = 1.23
 8001126:	e9d7 2300 	ldrd	r2, r3, [r7]
 800112a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800112e:	f7ff fb8d 	bl	800084c <__aeabi_ddiv>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	4610      	mov	r0, r2
 8001138:	4619      	mov	r1, r3
 800113a:	f04f 0200 	mov.w	r2, #0
 800113e:	4b10      	ldr	r3, [pc, #64]	; (8001180 <round_eps+0x68>)
 8001140:	f7ff f8a4 	bl	800028c <__adddf3>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	ec43 2b17 	vmov	d7, r2, r3
 800114c:	eeb0 0a47 	vmov.f32	s0, s14
 8001150:	eef0 0a67 	vmov.f32	s1, s15
 8001154:	f00d f8a8 	bl	800e2a8 <floor>
 8001158:	ec51 0b10 	vmov	r0, r1, d0
 800115c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001160:	f7ff fa4a 	bl	80005f8 <__aeabi_dmul>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4610      	mov	r0, r2
 800116a:	4619      	mov	r1, r3
 800116c:	f7ff fd3c 	bl	8000be8 <__aeabi_d2f>
 8001170:	4603      	mov	r3, r0
 8001172:	ee07 3a90 	vmov	s15, r3
}                                                                                        // round_eps(1.235, 0.01) = 1.24
 8001176:	eeb0 0a67 	vmov.f32	s0, s15
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	3fe00000 	.word	0x3fe00000
 8001184:	00000000 	.word	0x00000000

08001188 <round_nth>:

float round_nth(float v, int8_t n)                    // round_nth(1.235, 1) = 0.
{                                                                                        // round_nth(1.235, 0) = 1.
 8001188:	b5b0      	push	{r4, r5, r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001192:	4603      	mov	r3, r0
 8001194:	70fb      	strb	r3, [r7, #3]
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff f9d6 	bl	8000548 <__aeabi_f2d>
 800119c:	4604      	mov	r4, r0
 800119e:	460d      	mov	r5, r1
 80011a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff f9bd 	bl	8000524 <__aeabi_i2d>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	ec43 2b11 	vmov	d1, r2, r3
 80011b2:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 80011e0 <round_nth+0x58>
 80011b6:	f00d f8f7 	bl	800e3a8 <pow>
 80011ba:	eeb0 7a40 	vmov.f32	s14, s0
 80011be:	eef0 7a60 	vmov.f32	s15, s1
 80011c2:	eeb0 1a47 	vmov.f32	s2, s14
 80011c6:	eef0 1a67 	vmov.f32	s3, s15
 80011ca:	ec45 4b10 	vmov	d0, r4, r5
 80011ce:	f7ff ffa3 	bl	8001118 <round_eps>
 80011d2:	eef0 7a40 	vmov.f32	s15, s0
}                                                                                        // round_nth(1.235, -2) = 1.24
 80011d6:	eeb0 0a67 	vmov.f32	s0, s15
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bdb0      	pop	{r4, r5, r7, pc}
 80011e0:	00000000 	.word	0x00000000
 80011e4:	40240000 	.word	0x40240000

080011e8 <BME280_getTemperature>:

float BME280_getTemperature(int8_t n) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b088      	sub	sp, #32
 80011ec:	af02      	add	r7, sp, #8
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
    uint32_t temp_raw;
    float tempf;
    uint8_t cmd[4];

    cmd[0] = 0xFA; // temp_msb
 80011f2:	23fa      	movs	r3, #250	; 0xfa
 80011f4:	723b      	strb	r3, [r7, #8]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, HAL_MAX_DELAY);
 80011f6:	f107 0208 	add.w	r2, r7, #8
 80011fa:	f04f 33ff 	mov.w	r3, #4294967295
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	2301      	movs	r3, #1
 8001202:	21ec      	movs	r1, #236	; 0xec
 8001204:	482e      	ldr	r0, [pc, #184]	; (80012c0 <BME280_getTemperature+0xd8>)
 8001206:	f005 f825 	bl	8006254 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, HAL_MAX_DELAY);
 800120a:	f107 0308 	add.w	r3, r7, #8
 800120e:	1c5a      	adds	r2, r3, #1
 8001210:	f04f 33ff 	mov.w	r3, #4294967295
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	2303      	movs	r3, #3
 8001218:	21ec      	movs	r1, #236	; 0xec
 800121a:	4829      	ldr	r0, [pc, #164]	; (80012c0 <BME280_getTemperature+0xd8>)
 800121c:	f005 f918 	bl	8006450 <HAL_I2C_Master_Receive>

    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8001220:	7a7b      	ldrb	r3, [r7, #9]
 8001222:	031a      	lsls	r2, r3, #12
 8001224:	7abb      	ldrb	r3, [r7, #10]
 8001226:	011b      	lsls	r3, r3, #4
 8001228:	4313      	orrs	r3, r2
 800122a:	7afa      	ldrb	r2, [r7, #11]
 800122c:	0912      	lsrs	r2, r2, #4
 800122e:	b2d2      	uxtb	r2, r2
 8001230:	4313      	orrs	r3, r2
 8001232:	617b      	str	r3, [r7, #20]

    int32_t temp;

    temp =
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	08db      	lsrs	r3, r3, #3
 8001238:	4a22      	ldr	r2, [pc, #136]	; (80012c4 <BME280_getTemperature+0xdc>)
 800123a:	8812      	ldrh	r2, [r2, #0]
 800123c:	0052      	lsls	r2, r2, #1
 800123e:	1a9b      	subs	r3, r3, r2
 8001240:	4a21      	ldr	r2, [pc, #132]	; (80012c8 <BME280_getTemperature+0xe0>)
 8001242:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001246:	fb02 f303 	mul.w	r3, r2, r3
 800124a:	0ada      	lsrs	r2, r3, #11
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	091b      	lsrs	r3, r3, #4
 8001250:	491c      	ldr	r1, [pc, #112]	; (80012c4 <BME280_getTemperature+0xdc>)
 8001252:	8809      	ldrh	r1, [r1, #0]
 8001254:	1a5b      	subs	r3, r3, r1
 8001256:	6979      	ldr	r1, [r7, #20]
 8001258:	0909      	lsrs	r1, r1, #4
 800125a:	481a      	ldr	r0, [pc, #104]	; (80012c4 <BME280_getTemperature+0xdc>)
 800125c:	8800      	ldrh	r0, [r0, #0]
 800125e:	1a09      	subs	r1, r1, r0
 8001260:	fb01 f303 	mul.w	r3, r1, r3
 8001264:	0b1b      	lsrs	r3, r3, #12
 8001266:	4919      	ldr	r1, [pc, #100]	; (80012cc <BME280_getTemperature+0xe4>)
 8001268:	f9b1 1000 	ldrsh.w	r1, [r1]
 800126c:	fb01 f303 	mul.w	r3, r1, r3
 8001270:	0b9b      	lsrs	r3, r3, #14
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8001272:	4413      	add	r3, r2
    temp =
 8001274:	613b      	str	r3, [r7, #16]

    t_fine = temp;
 8001276:	4a16      	ldr	r2, [pc, #88]	; (80012d0 <BME280_getTemperature+0xe8>)
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	6013      	str	r3, [r2, #0]
    temp = (temp * 5 + 128) >> 8;
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	4613      	mov	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	4413      	add	r3, r2
 8001284:	3380      	adds	r3, #128	; 0x80
 8001286:	121b      	asrs	r3, r3, #8
 8001288:	613b      	str	r3, [r7, #16]
    tempf = (float) temp;
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	ee07 3a90 	vmov	s15, r3
 8001290:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001294:	edc7 7a03 	vstr	s15, [r7, #12]

    return round_nth((tempf / 100.0f), n);
 8001298:	edd7 7a03 	vldr	s15, [r7, #12]
 800129c:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80012d4 <BME280_getTemperature+0xec>
 80012a0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80012a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a8:	4618      	mov	r0, r3
 80012aa:	eeb0 0a47 	vmov.f32	s0, s14
 80012ae:	f7ff ff6b 	bl	8001188 <round_nth>
 80012b2:	eef0 7a40 	vmov.f32	s15, s0
}
 80012b6:	eeb0 0a67 	vmov.f32	s0, s15
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	200002b8 	.word	0x200002b8
 80012c4:	20000254 	.word	0x20000254
 80012c8:	20000256 	.word	0x20000256
 80012cc:	20000258 	.word	0x20000258
 80012d0:	20000278 	.word	0x20000278
 80012d4:	42c80000 	.word	0x42c80000

080012d8 <BME280_getHumidity>:

float BME280_getHumidity(int8_t n) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af02      	add	r7, sp, #8
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
    uint32_t hum_raw;
    float humf;
    uint8_t cmd[4];

    cmd[0] = 0xFD; // hum_msb
 80012e2:	23fd      	movs	r3, #253	; 0xfd
 80012e4:	723b      	strb	r3, [r7, #8]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, HAL_MAX_DELAY);
 80012e6:	f107 0208 	add.w	r2, r7, #8
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	2301      	movs	r3, #1
 80012f2:	21ec      	movs	r1, #236	; 0xec
 80012f4:	4840      	ldr	r0, [pc, #256]	; (80013f8 <BME280_getHumidity+0x120>)
 80012f6:	f004 ffad 	bl	8006254 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 2, HAL_MAX_DELAY);
 80012fa:	f107 0308 	add.w	r3, r7, #8
 80012fe:	1c5a      	adds	r2, r3, #1
 8001300:	f04f 33ff 	mov.w	r3, #4294967295
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	2302      	movs	r3, #2
 8001308:	21ec      	movs	r1, #236	; 0xec
 800130a:	483b      	ldr	r0, [pc, #236]	; (80013f8 <BME280_getHumidity+0x120>)
 800130c:	f005 f8a0 	bl	8006450 <HAL_I2C_Master_Receive>

    hum_raw = (cmd[1] << 8) | cmd[2];
 8001310:	7a7b      	ldrb	r3, [r7, #9]
 8001312:	021b      	lsls	r3, r3, #8
 8001314:	7aba      	ldrb	r2, [r7, #10]
 8001316:	4313      	orrs	r3, r2
 8001318:	617b      	str	r3, [r7, #20]

    int32_t v_x1;

    v_x1 = t_fine - 76800;
 800131a:	4b38      	ldr	r3, [pc, #224]	; (80013fc <BME280_getHumidity+0x124>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001322:	613b      	str	r3, [r7, #16]
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	039b      	lsls	r3, r3, #14
 8001328:	4a35      	ldr	r2, [pc, #212]	; (8001400 <BME280_getHumidity+0x128>)
 800132a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800132e:	0512      	lsls	r2, r2, #20
 8001330:	1a9b      	subs	r3, r3, r2
 8001332:	4a34      	ldr	r2, [pc, #208]	; (8001404 <BME280_getHumidity+0x12c>)
 8001334:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001338:	4611      	mov	r1, r2
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	fb01 f202 	mul.w	r2, r1, r2
 8001340:	1a9b      	subs	r3, r3, r2
 8001342:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8001346:	0bdb      	lsrs	r3, r3, #15
 8001348:	4a2f      	ldr	r2, [pc, #188]	; (8001408 <BME280_getHumidity+0x130>)
 800134a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800134e:	4611      	mov	r1, r2
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	fb01 f202 	mul.w	r2, r1, r2
 8001356:	1292      	asrs	r2, r2, #10
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8001358:	492c      	ldr	r1, [pc, #176]	; (800140c <BME280_getHumidity+0x134>)
 800135a:	8809      	ldrh	r1, [r1, #0]
 800135c:	4608      	mov	r0, r1
 800135e:	6939      	ldr	r1, [r7, #16]
 8001360:	fb00 f101 	mul.w	r1, r0, r1
 8001364:	12c9      	asrs	r1, r1, #11
 8001366:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 800136a:	fb01 f202 	mul.w	r2, r1, r2
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 800136e:	1292      	asrs	r2, r2, #10
 8001370:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
                                            (int32_t) dig_H2 + 8192) >> 14));
 8001374:	4926      	ldr	r1, [pc, #152]	; (8001410 <BME280_getHumidity+0x138>)
 8001376:	f9b1 1000 	ldrsh.w	r1, [r1]
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 800137a:	fb01 f202 	mul.w	r2, r1, r2
                                            (int32_t) dig_H2 + 8192) >> 14));
 800137e:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001382:	1392      	asrs	r2, r2, #14
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8001384:	fb02 f303 	mul.w	r3, r2, r3
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8001388:	613b      	str	r3, [r7, #16]
    v_x1 = (v_x1 - (((((v_x1 >> 15) * (v_x1 >> 15)) >> 7) * (int32_t) dig_H1) >> 4));
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	13db      	asrs	r3, r3, #15
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	13d2      	asrs	r2, r2, #15
 8001392:	fb02 f303 	mul.w	r3, r2, r3
 8001396:	11db      	asrs	r3, r3, #7
 8001398:	4a1e      	ldr	r2, [pc, #120]	; (8001414 <BME280_getHumidity+0x13c>)
 800139a:	8812      	ldrh	r2, [r2, #0]
 800139c:	fb02 f303 	mul.w	r3, r2, r3
 80013a0:	111b      	asrs	r3, r3, #4
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	613b      	str	r3, [r7, #16]
    v_x1 = (v_x1 < 0 ? 0 : v_x1);
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80013ae:	613b      	str	r3, [r7, #16]
    v_x1 = (v_x1 > 419430400 ? 419430400 : v_x1);
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80013b6:	bfa8      	it	ge
 80013b8:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 80013bc:	613b      	str	r3, [r7, #16]

    humf = (float) (v_x1 >> 12);
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	131b      	asrs	r3, r3, #12
 80013c2:	ee07 3a90 	vmov	s15, r3
 80013c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ca:	edc7 7a03 	vstr	s15, [r7, #12]

    return round_nth((humf / 1024.0f), n);
 80013ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80013d2:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001418 <BME280_getHumidity+0x140>
 80013d6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	4618      	mov	r0, r3
 80013e0:	eeb0 0a47 	vmov.f32	s0, s14
 80013e4:	f7ff fed0 	bl	8001188 <round_nth>
 80013e8:	eef0 7a40 	vmov.f32	s15, s0
}
 80013ec:	eeb0 0a67 	vmov.f32	s0, s15
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	200002b8 	.word	0x200002b8
 80013fc:	20000278 	.word	0x20000278
 8001400:	20000272 	.word	0x20000272
 8001404:	20000274 	.word	0x20000274
 8001408:	20000276 	.word	0x20000276
 800140c:	2000026e 	.word	0x2000026e
 8001410:	20000270 	.word	0x20000270
 8001414:	2000026c 	.word	0x2000026c
 8001418:	44800000 	.word	0x44800000

0800141c <BME280_getPressure>:

float BME280_getPressure(void) {
 800141c:	b580      	push	{r7, lr}
 800141e:	b088      	sub	sp, #32
 8001420:	af02      	add	r7, sp, #8
    uint32_t press_raw;
    float pressf;
    uint8_t cmd[4];

    cmd[0] = 0xF7; // press_msb
 8001422:	23f7      	movs	r3, #247	; 0xf7
 8001424:	703b      	strb	r3, [r7, #0]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, HAL_MAX_DELAY);
 8001426:	463a      	mov	r2, r7
 8001428:	f04f 33ff 	mov.w	r3, #4294967295
 800142c:	9300      	str	r3, [sp, #0]
 800142e:	2301      	movs	r3, #1
 8001430:	21ec      	movs	r1, #236	; 0xec
 8001432:	485d      	ldr	r0, [pc, #372]	; (80015a8 <BME280_getPressure+0x18c>)
 8001434:	f004 ff0e 	bl	8006254 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, HAL_MAX_DELAY);
 8001438:	463b      	mov	r3, r7
 800143a:	1c5a      	adds	r2, r3, #1
 800143c:	f04f 33ff 	mov.w	r3, #4294967295
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	2303      	movs	r3, #3
 8001444:	21ec      	movs	r1, #236	; 0xec
 8001446:	4858      	ldr	r0, [pc, #352]	; (80015a8 <BME280_getPressure+0x18c>)
 8001448:	f005 f802 	bl	8006450 <HAL_I2C_Master_Receive>

    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 800144c:	787b      	ldrb	r3, [r7, #1]
 800144e:	031a      	lsls	r2, r3, #12
 8001450:	78bb      	ldrb	r3, [r7, #2]
 8001452:	011b      	lsls	r3, r3, #4
 8001454:	4313      	orrs	r3, r2
 8001456:	78fa      	ldrb	r2, [r7, #3]
 8001458:	0912      	lsrs	r2, r2, #4
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	4313      	orrs	r3, r2
 800145e:	613b      	str	r3, [r7, #16]

    int32_t var1, var2;
    uint32_t press;

    var1 = (t_fine >> 1) - 64000;
 8001460:	4b52      	ldr	r3, [pc, #328]	; (80015ac <BME280_getPressure+0x190>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	105b      	asrs	r3, r3, #1
 8001466:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 800146a:	60fb      	str	r3, [r7, #12]
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	109b      	asrs	r3, r3, #2
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	1092      	asrs	r2, r2, #2
 8001474:	fb02 f303 	mul.w	r3, r2, r3
 8001478:	12db      	asrs	r3, r3, #11
 800147a:	4a4d      	ldr	r2, [pc, #308]	; (80015b0 <BME280_getPressure+0x194>)
 800147c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001480:	fb02 f303 	mul.w	r3, r2, r3
 8001484:	60bb      	str	r3, [r7, #8]
    var2 = var2 + ((var1 * dig_P5) << 1);
 8001486:	4b4b      	ldr	r3, [pc, #300]	; (80015b4 <BME280_getPressure+0x198>)
 8001488:	f9b3 3000 	ldrsh.w	r3, [r3]
 800148c:	461a      	mov	r2, r3
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	fb02 f303 	mul.w	r3, r2, r3
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	68ba      	ldr	r2, [r7, #8]
 8001498:	4413      	add	r3, r2
 800149a:	60bb      	str	r3, [r7, #8]
    var2 = (var2 >> 2) + (dig_P4 << 16);
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	109a      	asrs	r2, r3, #2
 80014a0:	4b45      	ldr	r3, [pc, #276]	; (80015b8 <BME280_getPressure+0x19c>)
 80014a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a6:	041b      	lsls	r3, r3, #16
 80014a8:	4413      	add	r3, r2
 80014aa:	60bb      	str	r3, [r7, #8]
    var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((dig_P2 * var1) >> 1)) >> 18;
 80014ac:	4b43      	ldr	r3, [pc, #268]	; (80015bc <BME280_getPressure+0x1a0>)
 80014ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b2:	4619      	mov	r1, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	109b      	asrs	r3, r3, #2
 80014b8:	68fa      	ldr	r2, [r7, #12]
 80014ba:	1092      	asrs	r2, r2, #2
 80014bc:	fb02 f303 	mul.w	r3, r2, r3
 80014c0:	135b      	asrs	r3, r3, #13
 80014c2:	fb01 f303 	mul.w	r3, r1, r3
 80014c6:	10da      	asrs	r2, r3, #3
 80014c8:	4b3d      	ldr	r3, [pc, #244]	; (80015c0 <BME280_getPressure+0x1a4>)
 80014ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ce:	4619      	mov	r1, r3
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	fb01 f303 	mul.w	r3, r1, r3
 80014d6:	105b      	asrs	r3, r3, #1
 80014d8:	4413      	add	r3, r2
 80014da:	149b      	asrs	r3, r3, #18
 80014dc:	60fb      	str	r3, [r7, #12]
    var1 = ((32768 + var1) * dig_P1) >> 15;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80014e4:	4a37      	ldr	r2, [pc, #220]	; (80015c4 <BME280_getPressure+0x1a8>)
 80014e6:	8812      	ldrh	r2, [r2, #0]
 80014e8:	fb02 f303 	mul.w	r3, r2, r3
 80014ec:	13db      	asrs	r3, r3, #15
 80014ee:	60fb      	str	r3, [r7, #12]
    if (var1 == 0) {
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d102      	bne.n	80014fc <BME280_getPressure+0xe0>
        return 0;
 80014f6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80015c8 <BME280_getPressure+0x1ac>
 80014fa:	e04e      	b.n	800159a <BME280_getPressure+0x17e>
    }
    press = (((1048576 - press_raw) - (var2 >> 12))) * 3125;
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	131b      	asrs	r3, r3, #12
 8001500:	461a      	mov	r2, r3
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	4413      	add	r3, r2
 8001506:	4a31      	ldr	r2, [pc, #196]	; (80015cc <BME280_getPressure+0x1b0>)
 8001508:	fb02 f303 	mul.w	r3, r2, r3
 800150c:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
 8001510:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
 8001514:	617b      	str	r3, [r7, #20]
    if (press < 0x80000000) {
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	2b00      	cmp	r3, #0
 800151a:	db06      	blt.n	800152a <BME280_getPressure+0x10e>
        press = (press << 1) / var1;
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	005a      	lsls	r2, r3, #1
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	fbb2 f3f3 	udiv	r3, r2, r3
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	e005      	b.n	8001536 <BME280_getPressure+0x11a>
    } else {
        press = (press / var1) * 2;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	697a      	ldr	r2, [r7, #20]
 800152e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	617b      	str	r3, [r7, #20]
    }
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 8001536:	4b26      	ldr	r3, [pc, #152]	; (80015d0 <BME280_getPressure+0x1b4>)
 8001538:	f9b3 3000 	ldrsh.w	r3, [r3]
 800153c:	4619      	mov	r1, r3
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	08db      	lsrs	r3, r3, #3
 8001542:	697a      	ldr	r2, [r7, #20]
 8001544:	08d2      	lsrs	r2, r2, #3
 8001546:	fb02 f303 	mul.w	r3, r2, r3
 800154a:	0b5b      	lsrs	r3, r3, #13
 800154c:	fb01 f303 	mul.w	r3, r1, r3
 8001550:	131b      	asrs	r3, r3, #12
 8001552:	60fb      	str	r3, [r7, #12]
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	089b      	lsrs	r3, r3, #2
 8001558:	461a      	mov	r2, r3
 800155a:	4b1e      	ldr	r3, [pc, #120]	; (80015d4 <BME280_getPressure+0x1b8>)
 800155c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001560:	fb02 f303 	mul.w	r3, r2, r3
 8001564:	135b      	asrs	r3, r3, #13
 8001566:	60bb      	str	r3, [r7, #8]
    press = (press + ((var1 + var2 + dig_P7) >> 4));
 8001568:	68fa      	ldr	r2, [r7, #12]
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	4413      	add	r3, r2
 800156e:	4a1a      	ldr	r2, [pc, #104]	; (80015d8 <BME280_getPressure+0x1bc>)
 8001570:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001574:	4413      	add	r3, r2
 8001576:	111b      	asrs	r3, r3, #4
 8001578:	461a      	mov	r2, r3
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	4413      	add	r3, r2
 800157e:	617b      	str	r3, [r7, #20]

    pressf = (float) press;
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	ee07 3a90 	vmov	s15, r3
 8001586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800158a:	edc7 7a01 	vstr	s15, [r7, #4]
    return (pressf / 100.0f);
 800158e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001592:	eddf 6a12 	vldr	s13, [pc, #72]	; 80015dc <BME280_getPressure+0x1c0>
 8001596:	ee87 7aa6 	vdiv.f32	s14, s15, s13
}
 800159a:	eef0 7a47 	vmov.f32	s15, s14
 800159e:	eeb0 0a67 	vmov.f32	s0, s15
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	200002b8 	.word	0x200002b8
 80015ac:	20000278 	.word	0x20000278
 80015b0:	20000264 	.word	0x20000264
 80015b4:	20000262 	.word	0x20000262
 80015b8:	20000260 	.word	0x20000260
 80015bc:	2000025e 	.word	0x2000025e
 80015c0:	2000025c 	.word	0x2000025c
 80015c4:	2000025a 	.word	0x2000025a
 80015c8:	00000000 	.word	0x00000000
 80015cc:	fffff3cb 	.word	0xfffff3cb
 80015d0:	2000026a 	.word	0x2000026a
 80015d4:	20000268 	.word	0x20000268
 80015d8:	20000266 	.word	0x20000266
 80015dc:	42c80000 	.word	0x42c80000

080015e0 <BME280_Init>:

void BME280_Init(void) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b088      	sub	sp, #32
 80015e4:	af02      	add	r7, sp, #8
    uint8_t cmd[18];

    cmd[0] = 0xF2; // ctrl_hum
 80015e6:	23f2      	movs	r3, #242	; 0xf2
 80015e8:	713b      	strb	r3, [r7, #4]
    cmd[1] = 0x05; // Humidity oversampling x16
 80015ea:	2305      	movs	r3, #5
 80015ec:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, HAL_MAX_DELAY);
 80015ee:	1d3a      	adds	r2, r7, #4
 80015f0:	f04f 33ff 	mov.w	r3, #4294967295
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	2302      	movs	r3, #2
 80015f8:	21ec      	movs	r1, #236	; 0xec
 80015fa:	4888      	ldr	r0, [pc, #544]	; (800181c <BME280_Init+0x23c>)
 80015fc:	f004 fe2a 	bl	8006254 <HAL_I2C_Master_Transmit>

    cmd[0] = 0xF4; // ctrl_meas
 8001600:	23f4      	movs	r3, #244	; 0xf4
 8001602:	713b      	strb	r3, [r7, #4]
    cmd[1] = 0xB7; // Temparature oversampling x16, Pressure oversampling x16, Normal mode
 8001604:	23b7      	movs	r3, #183	; 0xb7
 8001606:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, HAL_MAX_DELAY);
 8001608:	1d3a      	adds	r2, r7, #4
 800160a:	f04f 33ff 	mov.w	r3, #4294967295
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	2302      	movs	r3, #2
 8001612:	21ec      	movs	r1, #236	; 0xec
 8001614:	4881      	ldr	r0, [pc, #516]	; (800181c <BME280_Init+0x23c>)
 8001616:	f004 fe1d 	bl	8006254 <HAL_I2C_Master_Transmit>

    cmd[0] = 0xF5; // config
 800161a:	23f5      	movs	r3, #245	; 0xf5
 800161c:	713b      	strb	r3, [r7, #4]
    cmd[1] = 0xa0; // Standby HAL_MAX_DELAYms, Filter off
 800161e:	23a0      	movs	r3, #160	; 0xa0
 8001620:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, HAL_MAX_DELAY);
 8001622:	1d3a      	adds	r2, r7, #4
 8001624:	f04f 33ff 	mov.w	r3, #4294967295
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	2302      	movs	r3, #2
 800162c:	21ec      	movs	r1, #236	; 0xec
 800162e:	487b      	ldr	r0, [pc, #492]	; (800181c <BME280_Init+0x23c>)
 8001630:	f004 fe10 	bl	8006254 <HAL_I2C_Master_Transmit>

    cmd[0] = 0x88; // read dig_T regs
 8001634:	2388      	movs	r3, #136	; 0x88
 8001636:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, HAL_MAX_DELAY);
 8001638:	1d3a      	adds	r2, r7, #4
 800163a:	f04f 33ff 	mov.w	r3, #4294967295
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	2301      	movs	r3, #1
 8001642:	21ec      	movs	r1, #236	; 0xec
 8001644:	4875      	ldr	r0, [pc, #468]	; (800181c <BME280_Init+0x23c>)
 8001646:	f004 fe05 	bl	8006254 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 6, HAL_MAX_DELAY);
 800164a:	1d3a      	adds	r2, r7, #4
 800164c:	f04f 33ff 	mov.w	r3, #4294967295
 8001650:	9300      	str	r3, [sp, #0]
 8001652:	2306      	movs	r3, #6
 8001654:	21ec      	movs	r1, #236	; 0xec
 8001656:	4871      	ldr	r0, [pc, #452]	; (800181c <BME280_Init+0x23c>)
 8001658:	f004 fefa 	bl	8006450 <HAL_I2C_Master_Receive>

    dig_T1 = (cmd[1] << 8) | cmd[0];
 800165c:	797b      	ldrb	r3, [r7, #5]
 800165e:	021b      	lsls	r3, r3, #8
 8001660:	b21a      	sxth	r2, r3
 8001662:	793b      	ldrb	r3, [r7, #4]
 8001664:	b21b      	sxth	r3, r3
 8001666:	4313      	orrs	r3, r2
 8001668:	b21b      	sxth	r3, r3
 800166a:	b29a      	uxth	r2, r3
 800166c:	4b6c      	ldr	r3, [pc, #432]	; (8001820 <BME280_Init+0x240>)
 800166e:	801a      	strh	r2, [r3, #0]
    dig_T2 = (cmd[3] << 8) | cmd[2];
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	021b      	lsls	r3, r3, #8
 8001674:	b21a      	sxth	r2, r3
 8001676:	79bb      	ldrb	r3, [r7, #6]
 8001678:	b21b      	sxth	r3, r3
 800167a:	4313      	orrs	r3, r2
 800167c:	b21a      	sxth	r2, r3
 800167e:	4b69      	ldr	r3, [pc, #420]	; (8001824 <BME280_Init+0x244>)
 8001680:	801a      	strh	r2, [r3, #0]
    dig_T3 = (cmd[5] << 8) | cmd[4];
 8001682:	7a7b      	ldrb	r3, [r7, #9]
 8001684:	021b      	lsls	r3, r3, #8
 8001686:	b21a      	sxth	r2, r3
 8001688:	7a3b      	ldrb	r3, [r7, #8]
 800168a:	b21b      	sxth	r3, r3
 800168c:	4313      	orrs	r3, r2
 800168e:	b21a      	sxth	r2, r3
 8001690:	4b65      	ldr	r3, [pc, #404]	; (8001828 <BME280_Init+0x248>)
 8001692:	801a      	strh	r2, [r3, #0]

    cmd[0] = 0x8E; // read dig_P regs
 8001694:	238e      	movs	r3, #142	; 0x8e
 8001696:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, HAL_MAX_DELAY);
 8001698:	1d3a      	adds	r2, r7, #4
 800169a:	f04f 33ff 	mov.w	r3, #4294967295
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	2301      	movs	r3, #1
 80016a2:	21ec      	movs	r1, #236	; 0xec
 80016a4:	485d      	ldr	r0, [pc, #372]	; (800181c <BME280_Init+0x23c>)
 80016a6:	f004 fdd5 	bl	8006254 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 18, HAL_MAX_DELAY);
 80016aa:	1d3a      	adds	r2, r7, #4
 80016ac:	f04f 33ff 	mov.w	r3, #4294967295
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	2312      	movs	r3, #18
 80016b4:	21ec      	movs	r1, #236	; 0xec
 80016b6:	4859      	ldr	r0, [pc, #356]	; (800181c <BME280_Init+0x23c>)
 80016b8:	f004 feca 	bl	8006450 <HAL_I2C_Master_Receive>

    dig_P1 = (cmd[1] << 8) | cmd[0];
 80016bc:	797b      	ldrb	r3, [r7, #5]
 80016be:	021b      	lsls	r3, r3, #8
 80016c0:	b21a      	sxth	r2, r3
 80016c2:	793b      	ldrb	r3, [r7, #4]
 80016c4:	b21b      	sxth	r3, r3
 80016c6:	4313      	orrs	r3, r2
 80016c8:	b21b      	sxth	r3, r3
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	4b57      	ldr	r3, [pc, #348]	; (800182c <BME280_Init+0x24c>)
 80016ce:	801a      	strh	r2, [r3, #0]
    dig_P2 = (cmd[3] << 8) | cmd[2];
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	021b      	lsls	r3, r3, #8
 80016d4:	b21a      	sxth	r2, r3
 80016d6:	79bb      	ldrb	r3, [r7, #6]
 80016d8:	b21b      	sxth	r3, r3
 80016da:	4313      	orrs	r3, r2
 80016dc:	b21a      	sxth	r2, r3
 80016de:	4b54      	ldr	r3, [pc, #336]	; (8001830 <BME280_Init+0x250>)
 80016e0:	801a      	strh	r2, [r3, #0]
    dig_P3 = (cmd[5] << 8) | cmd[4];
 80016e2:	7a7b      	ldrb	r3, [r7, #9]
 80016e4:	021b      	lsls	r3, r3, #8
 80016e6:	b21a      	sxth	r2, r3
 80016e8:	7a3b      	ldrb	r3, [r7, #8]
 80016ea:	b21b      	sxth	r3, r3
 80016ec:	4313      	orrs	r3, r2
 80016ee:	b21a      	sxth	r2, r3
 80016f0:	4b50      	ldr	r3, [pc, #320]	; (8001834 <BME280_Init+0x254>)
 80016f2:	801a      	strh	r2, [r3, #0]
    dig_P4 = (cmd[7] << 8) | cmd[6];
 80016f4:	7afb      	ldrb	r3, [r7, #11]
 80016f6:	021b      	lsls	r3, r3, #8
 80016f8:	b21a      	sxth	r2, r3
 80016fa:	7abb      	ldrb	r3, [r7, #10]
 80016fc:	b21b      	sxth	r3, r3
 80016fe:	4313      	orrs	r3, r2
 8001700:	b21a      	sxth	r2, r3
 8001702:	4b4d      	ldr	r3, [pc, #308]	; (8001838 <BME280_Init+0x258>)
 8001704:	801a      	strh	r2, [r3, #0]
    dig_P5 = (cmd[9] << 8) | cmd[8];
 8001706:	7b7b      	ldrb	r3, [r7, #13]
 8001708:	021b      	lsls	r3, r3, #8
 800170a:	b21a      	sxth	r2, r3
 800170c:	7b3b      	ldrb	r3, [r7, #12]
 800170e:	b21b      	sxth	r3, r3
 8001710:	4313      	orrs	r3, r2
 8001712:	b21a      	sxth	r2, r3
 8001714:	4b49      	ldr	r3, [pc, #292]	; (800183c <BME280_Init+0x25c>)
 8001716:	801a      	strh	r2, [r3, #0]
    dig_P6 = (cmd[11] << 8) | cmd[10];
 8001718:	7bfb      	ldrb	r3, [r7, #15]
 800171a:	021b      	lsls	r3, r3, #8
 800171c:	b21a      	sxth	r2, r3
 800171e:	7bbb      	ldrb	r3, [r7, #14]
 8001720:	b21b      	sxth	r3, r3
 8001722:	4313      	orrs	r3, r2
 8001724:	b21a      	sxth	r2, r3
 8001726:	4b46      	ldr	r3, [pc, #280]	; (8001840 <BME280_Init+0x260>)
 8001728:	801a      	strh	r2, [r3, #0]
    dig_P7 = (cmd[13] << 8) | cmd[12];
 800172a:	7c7b      	ldrb	r3, [r7, #17]
 800172c:	021b      	lsls	r3, r3, #8
 800172e:	b21a      	sxth	r2, r3
 8001730:	7c3b      	ldrb	r3, [r7, #16]
 8001732:	b21b      	sxth	r3, r3
 8001734:	4313      	orrs	r3, r2
 8001736:	b21a      	sxth	r2, r3
 8001738:	4b42      	ldr	r3, [pc, #264]	; (8001844 <BME280_Init+0x264>)
 800173a:	801a      	strh	r2, [r3, #0]
    dig_P8 = (cmd[15] << 8) | cmd[14];
 800173c:	7cfb      	ldrb	r3, [r7, #19]
 800173e:	021b      	lsls	r3, r3, #8
 8001740:	b21a      	sxth	r2, r3
 8001742:	7cbb      	ldrb	r3, [r7, #18]
 8001744:	b21b      	sxth	r3, r3
 8001746:	4313      	orrs	r3, r2
 8001748:	b21a      	sxth	r2, r3
 800174a:	4b3f      	ldr	r3, [pc, #252]	; (8001848 <BME280_Init+0x268>)
 800174c:	801a      	strh	r2, [r3, #0]
    dig_P9 = (cmd[17] << 8) | cmd[16];
 800174e:	7d7b      	ldrb	r3, [r7, #21]
 8001750:	021b      	lsls	r3, r3, #8
 8001752:	b21a      	sxth	r2, r3
 8001754:	7d3b      	ldrb	r3, [r7, #20]
 8001756:	b21b      	sxth	r3, r3
 8001758:	4313      	orrs	r3, r2
 800175a:	b21a      	sxth	r2, r3
 800175c:	4b3b      	ldr	r3, [pc, #236]	; (800184c <BME280_Init+0x26c>)
 800175e:	801a      	strh	r2, [r3, #0]

    cmd[0] = 0xA1; // read dig_H regs
 8001760:	23a1      	movs	r3, #161	; 0xa1
 8001762:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, HAL_MAX_DELAY);
 8001764:	1d3a      	adds	r2, r7, #4
 8001766:	f04f 33ff 	mov.w	r3, #4294967295
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	2301      	movs	r3, #1
 800176e:	21ec      	movs	r1, #236	; 0xec
 8001770:	482a      	ldr	r0, [pc, #168]	; (800181c <BME280_Init+0x23c>)
 8001772:	f004 fd6f 	bl	8006254 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 1, HAL_MAX_DELAY);
 8001776:	1d3a      	adds	r2, r7, #4
 8001778:	f04f 33ff 	mov.w	r3, #4294967295
 800177c:	9300      	str	r3, [sp, #0]
 800177e:	2301      	movs	r3, #1
 8001780:	21ec      	movs	r1, #236	; 0xec
 8001782:	4826      	ldr	r0, [pc, #152]	; (800181c <BME280_Init+0x23c>)
 8001784:	f004 fe64 	bl	8006450 <HAL_I2C_Master_Receive>

    cmd[1] = 0xE1; // read dig_H regs
 8001788:	23e1      	movs	r3, #225	; 0xe1
 800178a:	717b      	strb	r3, [r7, #5]

    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, &cmd[1], 1, HAL_MAX_DELAY);
 800178c:	1d3b      	adds	r3, r7, #4
 800178e:	1c5a      	adds	r2, r3, #1
 8001790:	f04f 33ff 	mov.w	r3, #4294967295
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	2301      	movs	r3, #1
 8001798:	21ec      	movs	r1, #236	; 0xec
 800179a:	4820      	ldr	r0, [pc, #128]	; (800181c <BME280_Init+0x23c>)
 800179c:	f004 fd5a 	bl	8006254 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 7, HAL_MAX_DELAY);
 80017a0:	1d3b      	adds	r3, r7, #4
 80017a2:	1c5a      	adds	r2, r3, #1
 80017a4:	f04f 33ff 	mov.w	r3, #4294967295
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	2307      	movs	r3, #7
 80017ac:	21ec      	movs	r1, #236	; 0xec
 80017ae:	481b      	ldr	r0, [pc, #108]	; (800181c <BME280_Init+0x23c>)
 80017b0:	f004 fe4e 	bl	8006450 <HAL_I2C_Master_Receive>

    dig_H1 = cmd[0];
 80017b4:	793b      	ldrb	r3, [r7, #4]
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	4b25      	ldr	r3, [pc, #148]	; (8001850 <BME280_Init+0x270>)
 80017ba:	801a      	strh	r2, [r3, #0]
    dig_H2 = (cmd[2] << 8) | cmd[1];
 80017bc:	79bb      	ldrb	r3, [r7, #6]
 80017be:	021b      	lsls	r3, r3, #8
 80017c0:	b21a      	sxth	r2, r3
 80017c2:	797b      	ldrb	r3, [r7, #5]
 80017c4:	b21b      	sxth	r3, r3
 80017c6:	4313      	orrs	r3, r2
 80017c8:	b21a      	sxth	r2, r3
 80017ca:	4b22      	ldr	r3, [pc, #136]	; (8001854 <BME280_Init+0x274>)
 80017cc:	801a      	strh	r2, [r3, #0]
    dig_H3 = cmd[3];
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	4b21      	ldr	r3, [pc, #132]	; (8001858 <BME280_Init+0x278>)
 80017d4:	801a      	strh	r2, [r3, #0]
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 80017d6:	7a3b      	ldrb	r3, [r7, #8]
 80017d8:	011b      	lsls	r3, r3, #4
 80017da:	b21a      	sxth	r2, r3
 80017dc:	7a7b      	ldrb	r3, [r7, #9]
 80017de:	b21b      	sxth	r3, r3
 80017e0:	f003 030f 	and.w	r3, r3, #15
 80017e4:	b21b      	sxth	r3, r3
 80017e6:	4313      	orrs	r3, r2
 80017e8:	b21a      	sxth	r2, r3
 80017ea:	4b1c      	ldr	r3, [pc, #112]	; (800185c <BME280_Init+0x27c>)
 80017ec:	801a      	strh	r2, [r3, #0]
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 80017ee:	7abb      	ldrb	r3, [r7, #10]
 80017f0:	011b      	lsls	r3, r3, #4
 80017f2:	b21a      	sxth	r2, r3
 80017f4:	7a7b      	ldrb	r3, [r7, #9]
 80017f6:	091b      	lsrs	r3, r3, #4
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	b21b      	sxth	r3, r3
 80017fc:	f003 030f 	and.w	r3, r3, #15
 8001800:	b21b      	sxth	r3, r3
 8001802:	4313      	orrs	r3, r2
 8001804:	b21a      	sxth	r2, r3
 8001806:	4b16      	ldr	r3, [pc, #88]	; (8001860 <BME280_Init+0x280>)
 8001808:	801a      	strh	r2, [r3, #0]
    dig_H6 = cmd[7];
 800180a:	7afb      	ldrb	r3, [r7, #11]
 800180c:	b21a      	sxth	r2, r3
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <BME280_Init+0x284>)
 8001810:	801a      	strh	r2, [r3, #0]
}
 8001812:	bf00      	nop
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	200002b8 	.word	0x200002b8
 8001820:	20000254 	.word	0x20000254
 8001824:	20000256 	.word	0x20000256
 8001828:	20000258 	.word	0x20000258
 800182c:	2000025a 	.word	0x2000025a
 8001830:	2000025c 	.word	0x2000025c
 8001834:	2000025e 	.word	0x2000025e
 8001838:	20000260 	.word	0x20000260
 800183c:	20000262 	.word	0x20000262
 8001840:	20000264 	.word	0x20000264
 8001844:	20000266 	.word	0x20000266
 8001848:	20000268 	.word	0x20000268
 800184c:	2000026a 	.word	0x2000026a
 8001850:	2000026c 	.word	0x2000026c
 8001854:	20000270 	.word	0x20000270
 8001858:	2000026e 	.word	0x2000026e
 800185c:	20000272 	.word	0x20000272
 8001860:	20000274 	.word	0x20000274
 8001864:	20000276 	.word	0x20000276

08001868 <decToBcd>:

extern I2C_HandleTypeDef DS3231_I2C;

uint8_t rtcBuffer[19], rtcBufferSet[17];

uint8_t decToBcd(uint8_t val) {
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
    return ((val / 10 * 16) + (val % 10));
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	4a0c      	ldr	r2, [pc, #48]	; (80018a8 <decToBcd+0x40>)
 8001876:	fba2 2303 	umull	r2, r3, r2, r3
 800187a:	08db      	lsrs	r3, r3, #3
 800187c:	b2db      	uxtb	r3, r3
 800187e:	011b      	lsls	r3, r3, #4
 8001880:	b2d8      	uxtb	r0, r3
 8001882:	79fa      	ldrb	r2, [r7, #7]
 8001884:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <decToBcd+0x40>)
 8001886:	fba3 1302 	umull	r1, r3, r3, r2
 800188a:	08d9      	lsrs	r1, r3, #3
 800188c:	460b      	mov	r3, r1
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	440b      	add	r3, r1
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	b2db      	uxtb	r3, r3
 8001898:	4403      	add	r3, r0
 800189a:	b2db      	uxtb	r3, r3
}
 800189c:	4618      	mov	r0, r3
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	cccccccd 	.word	0xcccccccd

080018ac <bcdToDec>:

uint8_t bcdToDec(uint8_t val) {
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	71fb      	strb	r3, [r7, #7]
    return ((val / 16 * 10) + (val % 16));
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	091b      	lsrs	r3, r3, #4
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	461a      	mov	r2, r3
 80018be:	0092      	lsls	r2, r2, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	f003 030f 	and.w	r3, r3, #15
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	4413      	add	r3, r2
 80018d0:	b2db      	uxtb	r3, r3
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
	...

080018e0 <DS3231_Update>:

void DS3231_Update(void) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af02      	add	r7, sp, #8
    uint8_t cmd = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, HAL_MAX_DELAY);
 80018ea:	1dfa      	adds	r2, r7, #7
 80018ec:	f04f 33ff 	mov.w	r3, #4294967295
 80018f0:	9300      	str	r3, [sp, #0]
 80018f2:	2301      	movs	r3, #1
 80018f4:	21d0      	movs	r1, #208	; 0xd0
 80018f6:	4828      	ldr	r0, [pc, #160]	; (8001998 <DS3231_Update+0xb8>)
 80018f8:	f004 fcac 	bl	8006254 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&DS3231_I2C, DS3231_ADDRESS, rtcBuffer, 19, HAL_MAX_DELAY);
 80018fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	2313      	movs	r3, #19
 8001904:	4a25      	ldr	r2, [pc, #148]	; (800199c <DS3231_Update+0xbc>)
 8001906:	21d0      	movs	r1, #208	; 0xd0
 8001908:	4823      	ldr	r0, [pc, #140]	; (8001998 <DS3231_Update+0xb8>)
 800190a:	f004 fda1 	bl	8006450 <HAL_I2C_Master_Receive>
    rtcBufferSet[1] = rtcBuffer[0];
 800190e:	4b23      	ldr	r3, [pc, #140]	; (800199c <DS3231_Update+0xbc>)
 8001910:	781a      	ldrb	r2, [r3, #0]
 8001912:	4b23      	ldr	r3, [pc, #140]	; (80019a0 <DS3231_Update+0xc0>)
 8001914:	705a      	strb	r2, [r3, #1]
    rtcBufferSet[2] = rtcBuffer[1];
 8001916:	4b21      	ldr	r3, [pc, #132]	; (800199c <DS3231_Update+0xbc>)
 8001918:	785a      	ldrb	r2, [r3, #1]
 800191a:	4b21      	ldr	r3, [pc, #132]	; (80019a0 <DS3231_Update+0xc0>)
 800191c:	709a      	strb	r2, [r3, #2]
    rtcBufferSet[3] = rtcBuffer[2];
 800191e:	4b1f      	ldr	r3, [pc, #124]	; (800199c <DS3231_Update+0xbc>)
 8001920:	789a      	ldrb	r2, [r3, #2]
 8001922:	4b1f      	ldr	r3, [pc, #124]	; (80019a0 <DS3231_Update+0xc0>)
 8001924:	70da      	strb	r2, [r3, #3]
    rtcBufferSet[4] = rtcBuffer[3];
 8001926:	4b1d      	ldr	r3, [pc, #116]	; (800199c <DS3231_Update+0xbc>)
 8001928:	78da      	ldrb	r2, [r3, #3]
 800192a:	4b1d      	ldr	r3, [pc, #116]	; (80019a0 <DS3231_Update+0xc0>)
 800192c:	711a      	strb	r2, [r3, #4]
    rtcBufferSet[5] = rtcBuffer[4];
 800192e:	4b1b      	ldr	r3, [pc, #108]	; (800199c <DS3231_Update+0xbc>)
 8001930:	791a      	ldrb	r2, [r3, #4]
 8001932:	4b1b      	ldr	r3, [pc, #108]	; (80019a0 <DS3231_Update+0xc0>)
 8001934:	715a      	strb	r2, [r3, #5]
    rtcBufferSet[6] = rtcBuffer[5];
 8001936:	4b19      	ldr	r3, [pc, #100]	; (800199c <DS3231_Update+0xbc>)
 8001938:	795a      	ldrb	r2, [r3, #5]
 800193a:	4b19      	ldr	r3, [pc, #100]	; (80019a0 <DS3231_Update+0xc0>)
 800193c:	719a      	strb	r2, [r3, #6]
    rtcBufferSet[7] = rtcBuffer[6];
 800193e:	4b17      	ldr	r3, [pc, #92]	; (800199c <DS3231_Update+0xbc>)
 8001940:	799a      	ldrb	r2, [r3, #6]
 8001942:	4b17      	ldr	r3, [pc, #92]	; (80019a0 <DS3231_Update+0xc0>)
 8001944:	71da      	strb	r2, [r3, #7]
    rtcBufferSet[8] = rtcBuffer[7];
 8001946:	4b15      	ldr	r3, [pc, #84]	; (800199c <DS3231_Update+0xbc>)
 8001948:	79da      	ldrb	r2, [r3, #7]
 800194a:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <DS3231_Update+0xc0>)
 800194c:	721a      	strb	r2, [r3, #8]
    rtcBufferSet[9] = rtcBuffer[8];
 800194e:	4b13      	ldr	r3, [pc, #76]	; (800199c <DS3231_Update+0xbc>)
 8001950:	7a1a      	ldrb	r2, [r3, #8]
 8001952:	4b13      	ldr	r3, [pc, #76]	; (80019a0 <DS3231_Update+0xc0>)
 8001954:	725a      	strb	r2, [r3, #9]
    rtcBufferSet[10] = rtcBuffer[9];
 8001956:	4b11      	ldr	r3, [pc, #68]	; (800199c <DS3231_Update+0xbc>)
 8001958:	7a5a      	ldrb	r2, [r3, #9]
 800195a:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <DS3231_Update+0xc0>)
 800195c:	729a      	strb	r2, [r3, #10]
    rtcBufferSet[11] = rtcBuffer[10];
 800195e:	4b0f      	ldr	r3, [pc, #60]	; (800199c <DS3231_Update+0xbc>)
 8001960:	7a9a      	ldrb	r2, [r3, #10]
 8001962:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <DS3231_Update+0xc0>)
 8001964:	72da      	strb	r2, [r3, #11]
    rtcBufferSet[12] = rtcBuffer[11];
 8001966:	4b0d      	ldr	r3, [pc, #52]	; (800199c <DS3231_Update+0xbc>)
 8001968:	7ada      	ldrb	r2, [r3, #11]
 800196a:	4b0d      	ldr	r3, [pc, #52]	; (80019a0 <DS3231_Update+0xc0>)
 800196c:	731a      	strb	r2, [r3, #12]
    rtcBufferSet[13] = rtcBuffer[12];
 800196e:	4b0b      	ldr	r3, [pc, #44]	; (800199c <DS3231_Update+0xbc>)
 8001970:	7b1a      	ldrb	r2, [r3, #12]
 8001972:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <DS3231_Update+0xc0>)
 8001974:	735a      	strb	r2, [r3, #13]
    rtcBufferSet[14] = rtcBuffer[13];
 8001976:	4b09      	ldr	r3, [pc, #36]	; (800199c <DS3231_Update+0xbc>)
 8001978:	7b5a      	ldrb	r2, [r3, #13]
 800197a:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <DS3231_Update+0xc0>)
 800197c:	739a      	strb	r2, [r3, #14]
    rtcBufferSet[15] = rtcBuffer[14];
 800197e:	4b07      	ldr	r3, [pc, #28]	; (800199c <DS3231_Update+0xbc>)
 8001980:	7b9a      	ldrb	r2, [r3, #14]
 8001982:	4b07      	ldr	r3, [pc, #28]	; (80019a0 <DS3231_Update+0xc0>)
 8001984:	73da      	strb	r2, [r3, #15]
    rtcBufferSet[16] = rtcBuffer[15];
 8001986:	4b05      	ldr	r3, [pc, #20]	; (800199c <DS3231_Update+0xbc>)
 8001988:	7bda      	ldrb	r2, [r3, #15]
 800198a:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <DS3231_Update+0xc0>)
 800198c:	741a      	strb	r2, [r3, #16]
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	200002b8 	.word	0x200002b8
 800199c:	2000027c 	.word	0x2000027c
 80019a0:	20000290 	.word	0x20000290

080019a4 <DS3231_getSec>:

uint8_t DS3231_getSec(void) {
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
	DS3231_Update();
 80019a8:	f7ff ff9a 	bl	80018e0 <DS3231_Update>
    return bcdToDec(rtcBuffer[0]);
 80019ac:	4b03      	ldr	r3, [pc, #12]	; (80019bc <DS3231_getSec+0x18>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff ff7b 	bl	80018ac <bcdToDec>
 80019b6:	4603      	mov	r3, r0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	2000027c 	.word	0x2000027c

080019c0 <DS3231_getMin>:

uint8_t DS3231_getMin(void) {
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
	DS3231_Update();
 80019c4:	f7ff ff8c 	bl	80018e0 <DS3231_Update>
    return bcdToDec(rtcBuffer[1]);
 80019c8:	4b03      	ldr	r3, [pc, #12]	; (80019d8 <DS3231_getMin+0x18>)
 80019ca:	785b      	ldrb	r3, [r3, #1]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff ff6d 	bl	80018ac <bcdToDec>
 80019d2:	4603      	mov	r3, r0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	2000027c 	.word	0x2000027c

080019dc <DS3231_getHrs>:

uint8_t DS3231_getHrs(void) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
	DS3231_Update();
 80019e0:	f7ff ff7e 	bl	80018e0 <DS3231_Update>
    return bcdToDec(rtcBuffer[2]);
 80019e4:	4b03      	ldr	r3, [pc, #12]	; (80019f4 <DS3231_getHrs+0x18>)
 80019e6:	789b      	ldrb	r3, [r3, #2]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff ff5f 	bl	80018ac <bcdToDec>
 80019ee:	4603      	mov	r3, r0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	2000027c 	.word	0x2000027c

080019f8 <DS3231_getDay>:

uint8_t DS3231_getDay(void) {
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
	DS3231_Update();
 80019fc:	f7ff ff70 	bl	80018e0 <DS3231_Update>
    return bcdToDec(rtcBuffer[3]);
 8001a00:	4b03      	ldr	r3, [pc, #12]	; (8001a10 <DS3231_getDay+0x18>)
 8001a02:	78db      	ldrb	r3, [r3, #3]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff ff51 	bl	80018ac <bcdToDec>
 8001a0a:	4603      	mov	r3, r0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	2000027c 	.word	0x2000027c

08001a14 <DS3231_getDate>:

uint8_t DS3231_getDate(void) {
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
	DS3231_Update();
 8001a18:	f7ff ff62 	bl	80018e0 <DS3231_Update>
    return bcdToDec(rtcBuffer[4]);
 8001a1c:	4b03      	ldr	r3, [pc, #12]	; (8001a2c <DS3231_getDate+0x18>)
 8001a1e:	791b      	ldrb	r3, [r3, #4]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ff43 	bl	80018ac <bcdToDec>
 8001a26:	4603      	mov	r3, r0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	2000027c 	.word	0x2000027c

08001a30 <DS3231_getMonth>:

uint8_t DS3231_getMonth(void) {
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
	DS3231_Update();
 8001a34:	f7ff ff54 	bl	80018e0 <DS3231_Update>
    return bcdToDec(rtcBuffer[5]);
 8001a38:	4b03      	ldr	r3, [pc, #12]	; (8001a48 <DS3231_getMonth+0x18>)
 8001a3a:	795b      	ldrb	r3, [r3, #5]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff ff35 	bl	80018ac <bcdToDec>
 8001a42:	4603      	mov	r3, r0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	2000027c 	.word	0x2000027c

08001a4c <DS3231_getYear>:

uint8_t DS3231_getYear(void) {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
	DS3231_Update();
 8001a50:	f7ff ff46 	bl	80018e0 <DS3231_Update>
    return bcdToDec(rtcBuffer[6]);
 8001a54:	4b03      	ldr	r3, [pc, #12]	; (8001a64 <DS3231_getYear+0x18>)
 8001a56:	799b      	ldrb	r3, [r3, #6]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ff27 	bl	80018ac <bcdToDec>
 8001a5e:	4603      	mov	r3, r0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	2000027c 	.word	0x2000027c

08001a68 <DS3231_setSec>:
    t *= 0.25;
    t += tempMSB;
    return t;
}

void DS3231_setSec(uint8_t value) {
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af02      	add	r7, sp, #8
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001a72:	f7ff ff35 	bl	80018e0 <DS3231_Update>
    rtcBufferSet[1] = decToBcd(value);
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff fef5 	bl	8001868 <decToBcd>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	461a      	mov	r2, r3
 8001a82:	4b07      	ldr	r3, [pc, #28]	; (8001aa0 <DS3231_setSec+0x38>)
 8001a84:	705a      	strb	r2, [r3, #1]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, HAL_MAX_DELAY);
 8001a86:	f04f 33ff 	mov.w	r3, #4294967295
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	2311      	movs	r3, #17
 8001a8e:	4a04      	ldr	r2, [pc, #16]	; (8001aa0 <DS3231_setSec+0x38>)
 8001a90:	21d0      	movs	r1, #208	; 0xd0
 8001a92:	4804      	ldr	r0, [pc, #16]	; (8001aa4 <DS3231_setSec+0x3c>)
 8001a94:	f004 fbde 	bl	8006254 <HAL_I2C_Master_Transmit>
}
 8001a98:	bf00      	nop
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20000290 	.word	0x20000290
 8001aa4:	200002b8 	.word	0x200002b8

08001aa8 <DS3231_setMin>:

void DS3231_setMin(uint8_t value) {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af02      	add	r7, sp, #8
 8001aae:	4603      	mov	r3, r0
 8001ab0:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001ab2:	f7ff ff15 	bl	80018e0 <DS3231_Update>
    rtcBufferSet[2] = decToBcd(value);
 8001ab6:	79fb      	ldrb	r3, [r7, #7]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fed5 	bl	8001868 <decToBcd>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <DS3231_setMin+0x38>)
 8001ac4:	709a      	strb	r2, [r3, #2]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, HAL_MAX_DELAY);
 8001ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	2311      	movs	r3, #17
 8001ace:	4a04      	ldr	r2, [pc, #16]	; (8001ae0 <DS3231_setMin+0x38>)
 8001ad0:	21d0      	movs	r1, #208	; 0xd0
 8001ad2:	4804      	ldr	r0, [pc, #16]	; (8001ae4 <DS3231_setMin+0x3c>)
 8001ad4:	f004 fbbe 	bl	8006254 <HAL_I2C_Master_Transmit>
}
 8001ad8:	bf00      	nop
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20000290 	.word	0x20000290
 8001ae4:	200002b8 	.word	0x200002b8

08001ae8 <DS3231_setHrs>:

void DS3231_setHrs(uint8_t value) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af02      	add	r7, sp, #8
 8001aee:	4603      	mov	r3, r0
 8001af0:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001af2:	f7ff fef5 	bl	80018e0 <DS3231_Update>
    rtcBufferSet[3] = decToBcd(value);
 8001af6:	79fb      	ldrb	r3, [r7, #7]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff feb5 	bl	8001868 <decToBcd>
 8001afe:	4603      	mov	r3, r0
 8001b00:	461a      	mov	r2, r3
 8001b02:	4b07      	ldr	r3, [pc, #28]	; (8001b20 <DS3231_setHrs+0x38>)
 8001b04:	70da      	strb	r2, [r3, #3]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, HAL_MAX_DELAY);
 8001b06:	f04f 33ff 	mov.w	r3, #4294967295
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	2311      	movs	r3, #17
 8001b0e:	4a04      	ldr	r2, [pc, #16]	; (8001b20 <DS3231_setHrs+0x38>)
 8001b10:	21d0      	movs	r1, #208	; 0xd0
 8001b12:	4804      	ldr	r0, [pc, #16]	; (8001b24 <DS3231_setHrs+0x3c>)
 8001b14:	f004 fb9e 	bl	8006254 <HAL_I2C_Master_Transmit>
}
 8001b18:	bf00      	nop
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	20000290 	.word	0x20000290
 8001b24:	200002b8 	.word	0x200002b8

08001b28 <DS3231_setDay>:

void DS3231_setDay(uint8_t value) {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af02      	add	r7, sp, #8
 8001b2e:	4603      	mov	r3, r0
 8001b30:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001b32:	f7ff fed5 	bl	80018e0 <DS3231_Update>
    rtcBufferSet[4] = decToBcd(value);
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fe95 	bl	8001868 <decToBcd>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	461a      	mov	r2, r3
 8001b42:	4b07      	ldr	r3, [pc, #28]	; (8001b60 <DS3231_setDay+0x38>)
 8001b44:	711a      	strb	r2, [r3, #4]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, HAL_MAX_DELAY);
 8001b46:	f04f 33ff 	mov.w	r3, #4294967295
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	2311      	movs	r3, #17
 8001b4e:	4a04      	ldr	r2, [pc, #16]	; (8001b60 <DS3231_setDay+0x38>)
 8001b50:	21d0      	movs	r1, #208	; 0xd0
 8001b52:	4804      	ldr	r0, [pc, #16]	; (8001b64 <DS3231_setDay+0x3c>)
 8001b54:	f004 fb7e 	bl	8006254 <HAL_I2C_Master_Transmit>
}
 8001b58:	bf00      	nop
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20000290 	.word	0x20000290
 8001b64:	200002b8 	.word	0x200002b8

08001b68 <DS3231_setDate>:

void DS3231_setDate(uint8_t value) {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af02      	add	r7, sp, #8
 8001b6e:	4603      	mov	r3, r0
 8001b70:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001b72:	f7ff feb5 	bl	80018e0 <DS3231_Update>
    rtcBufferSet[5] = decToBcd(value);
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff fe75 	bl	8001868 <decToBcd>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	461a      	mov	r2, r3
 8001b82:	4b07      	ldr	r3, [pc, #28]	; (8001ba0 <DS3231_setDate+0x38>)
 8001b84:	715a      	strb	r2, [r3, #5]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, HAL_MAX_DELAY);
 8001b86:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	2311      	movs	r3, #17
 8001b8e:	4a04      	ldr	r2, [pc, #16]	; (8001ba0 <DS3231_setDate+0x38>)
 8001b90:	21d0      	movs	r1, #208	; 0xd0
 8001b92:	4804      	ldr	r0, [pc, #16]	; (8001ba4 <DS3231_setDate+0x3c>)
 8001b94:	f004 fb5e 	bl	8006254 <HAL_I2C_Master_Transmit>
}
 8001b98:	bf00      	nop
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	20000290 	.word	0x20000290
 8001ba4:	200002b8 	.word	0x200002b8

08001ba8 <DS3231_setMonth>:

void DS3231_setMonth(uint8_t value) {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af02      	add	r7, sp, #8
 8001bae:	4603      	mov	r3, r0
 8001bb0:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001bb2:	f7ff fe95 	bl	80018e0 <DS3231_Update>
    rtcBufferSet[6] = decToBcd(value);
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fe55 	bl	8001868 <decToBcd>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b07      	ldr	r3, [pc, #28]	; (8001be0 <DS3231_setMonth+0x38>)
 8001bc4:	719a      	strb	r2, [r3, #6]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, HAL_MAX_DELAY);
 8001bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	2311      	movs	r3, #17
 8001bce:	4a04      	ldr	r2, [pc, #16]	; (8001be0 <DS3231_setMonth+0x38>)
 8001bd0:	21d0      	movs	r1, #208	; 0xd0
 8001bd2:	4804      	ldr	r0, [pc, #16]	; (8001be4 <DS3231_setMonth+0x3c>)
 8001bd4:	f004 fb3e 	bl	8006254 <HAL_I2C_Master_Transmit>
}
 8001bd8:	bf00      	nop
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20000290 	.word	0x20000290
 8001be4:	200002b8 	.word	0x200002b8

08001be8 <DS3231_setYear>:

void DS3231_setYear(uint8_t value) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af02      	add	r7, sp, #8
 8001bee:	4603      	mov	r3, r0
 8001bf0:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001bf2:	f7ff fe75 	bl	80018e0 <DS3231_Update>
    rtcBufferSet[7] = decToBcd(value);
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fe35 	bl	8001868 <decToBcd>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	461a      	mov	r2, r3
 8001c02:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <DS3231_setYear+0x38>)
 8001c04:	71da      	strb	r2, [r3, #7]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, HAL_MAX_DELAY);
 8001c06:	f04f 33ff 	mov.w	r3, #4294967295
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	2311      	movs	r3, #17
 8001c0e:	4a04      	ldr	r2, [pc, #16]	; (8001c20 <DS3231_setYear+0x38>)
 8001c10:	21d0      	movs	r1, #208	; 0xd0
 8001c12:	4804      	ldr	r0, [pc, #16]	; (8001c24 <DS3231_setYear+0x3c>)
 8001c14:	f004 fb1e 	bl	8006254 <HAL_I2C_Master_Transmit>
}
 8001c18:	bf00      	nop
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20000290 	.word	0x20000290
 8001c24:	200002b8 	.word	0x200002b8

08001c28 <map>:
#define WAIT_REMOTE_SENSOR_SEC 100
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
double map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max) {
 8001c28:	b590      	push	{r4, r7, lr}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4604      	mov	r4, r0
 8001c30:	4608      	mov	r0, r1
 8001c32:	4611      	mov	r1, r2
 8001c34:	461a      	mov	r2, r3
 8001c36:	4623      	mov	r3, r4
 8001c38:	80fb      	strh	r3, [r7, #6]
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	80bb      	strh	r3, [r7, #4]
 8001c3e:	460b      	mov	r3, r1
 8001c40:	807b      	strh	r3, [r7, #2]
 8001c42:	4613      	mov	r3, r2
 8001c44:	803b      	strh	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001c46:	88fa      	ldrh	r2, [r7, #6]
 8001c48:	88bb      	ldrh	r3, [r7, #4]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	8b39      	ldrh	r1, [r7, #24]
 8001c4e:	883a      	ldrh	r2, [r7, #0]
 8001c50:	1a8a      	subs	r2, r1, r2
 8001c52:	fb03 f202 	mul.w	r2, r3, r2
 8001c56:	8879      	ldrh	r1, [r7, #2]
 8001c58:	88bb      	ldrh	r3, [r7, #4]
 8001c5a:	1acb      	subs	r3, r1, r3
 8001c5c:	fb92 f2f3 	sdiv	r2, r2, r3
 8001c60:	883b      	ldrh	r3, [r7, #0]
 8001c62:	4413      	add	r3, r2
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7fe fc5d 	bl	8000524 <__aeabi_i2d>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001c72:	eeb0 0a47 	vmov.f32	s0, s14
 8001c76:	eef0 0a67 	vmov.f32	s1, s15
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd90      	pop	{r4, r7, pc}

08001c80 <byteL>:

uint8_t byteL(uint16_t val) {
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	80fb      	strh	r3, [r7, #6]
	return (val & 0xFF);
 8001c8a:	88fb      	ldrh	r3, [r7, #6]
 8001c8c:	b2db      	uxtb	r3, r3
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <byteH>:

uint8_t byteH(uint16_t val) {
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	80fb      	strh	r3, [r7, #6]
	return ((val >> 8) & 0xFF);
 8001ca4:	88fb      	ldrh	r3, [r7, #6]
 8001ca6:	0a1b      	lsrs	r3, r3, #8
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	b2db      	uxtb	r3, r3
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <byteS>:

uint16_t byteS(uint8_t byteL, uint8_t byteH) {
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	460a      	mov	r2, r1
 8001cc2:	71fb      	strb	r3, [r7, #7]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	71bb      	strb	r3, [r7, #6]
	return (byteH << 8) | byteL;
 8001cc8:	79bb      	ldrb	r3, [r7, #6]
 8001cca:	021b      	lsls	r3, r3, #8
 8001ccc:	b21a      	sxth	r2, r3
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	b21b      	sxth	r3, r3
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	b21b      	sxth	r3, r3
 8001cd6:	b29b      	uxth	r3, r3
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <I2C_Scan>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void I2C_Scan(I2C_HandleTypeDef *hi2c) {
 8001ce4:	b5b0      	push	{r4, r5, r7, lr}
 8001ce6:	b09a      	sub	sp, #104	; 0x68
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
	char info[] = "SCANNING I2C BUS... \r\n";
 8001cec:	4b2c      	ldr	r3, [pc, #176]	; (8001da0 <I2C_Scan+0xbc>)
 8001cee:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8001cf2:	461d      	mov	r5, r3
 8001cf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cf8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001cfc:	6020      	str	r0, [r4, #0]
 8001cfe:	3404      	adds	r4, #4
 8001d00:	8021      	strh	r1, [r4, #0]
 8001d02:	3402      	adds	r4, #2
 8001d04:	0c0b      	lsrs	r3, r1, #16
 8001d06:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)info, strlen(info), 1000);
 8001d08:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7fe fa5f 	bl	80001d0 <strlen>
 8001d12:	4603      	mov	r3, r0
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d1e:	4821      	ldr	r0, [pc, #132]	; (8001da4 <I2C_Scan+0xc0>)
 8001d20:	f007 f987 	bl	8009032 <HAL_UART_Transmit>

	for(uint16_t i = 0; i < 128; i++) {
 8001d24:	2300      	movs	r3, #0
 8001d26:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8001d2a:	e02f      	b.n	8001d8c <I2C_Scan+0xa8>
		if(HAL_I2C_IsDeviceReady(hi2c, i << 1, 1, 100) == HAL_OK) {
 8001d2c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	b299      	uxth	r1, r3
 8001d34:	2364      	movs	r3, #100	; 0x64
 8001d36:	2201      	movs	r2, #1
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f005 f8cf 	bl	8006edc <HAL_I2C_IsDeviceReady>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d11e      	bne.n	8001d82 <I2C_Scan+0x9e>
			char msg[64] = {0,};
 8001d44:	2300      	movs	r3, #0
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	f107 0310 	add.w	r3, r7, #16
 8001d4c:	223c      	movs	r2, #60	; 0x3c
 8001d4e:	2100      	movs	r1, #0
 8001d50:	4618      	mov	r0, r3
 8001d52:	f007 fdff 	bl	8009954 <memset>
			snprintf(msg, 64, "I2C DEVICE: 0x%02X \r\n", i);
 8001d56:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001d5a:	f107 000c 	add.w	r0, r7, #12
 8001d5e:	4a12      	ldr	r2, [pc, #72]	; (8001da8 <I2C_Scan+0xc4>)
 8001d60:	2140      	movs	r1, #64	; 0x40
 8001d62:	f008 fc7f 	bl	800a664 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 1000);
 8001d66:	f107 030c 	add.w	r3, r7, #12
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe fa30 	bl	80001d0 <strlen>
 8001d70:	4603      	mov	r3, r0
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	f107 010c 	add.w	r1, r7, #12
 8001d78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d7c:	4809      	ldr	r0, [pc, #36]	; (8001da4 <I2C_Scan+0xc0>)
 8001d7e:	f007 f958 	bl	8009032 <HAL_UART_Transmit>
	for(uint16_t i = 0; i < 128; i++) {
 8001d82:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001d86:	3301      	adds	r3, #1
 8001d88:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8001d8c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001d90:	2b7f      	cmp	r3, #127	; 0x7f
 8001d92:	d9cb      	bls.n	8001d2c <I2C_Scan+0x48>
		}
	}
}
 8001d94:	bf00      	nop
 8001d96:	bf00      	nop
 8001d98:	3768      	adds	r7, #104	; 0x68
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	0800f210 	.word	0x0800f210
 8001da4:	20000414 	.word	0x20000414
 8001da8:	0800f1f8 	.word	0x0800f1f8

08001dac <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dae:	b0ad      	sub	sp, #180	; 0xb4
 8001db0:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001db2:	f003 fd51 	bl	8005858 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001db6:	f001 fed5 	bl	8003b64 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	HAL_Delay(100);
 8001dba:	2064      	movs	r0, #100	; 0x64
 8001dbc:	f003 fdbe 	bl	800593c <HAL_Delay>
	__HAL_RCC_I2C1_CLK_ENABLE();
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	667b      	str	r3, [r7, #100]	; 0x64
 8001dc4:	4b94      	ldr	r3, [pc, #592]	; (8002018 <main+0x26c>)
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc8:	4a93      	ldr	r2, [pc, #588]	; (8002018 <main+0x26c>)
 8001dca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dce:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd0:	4b91      	ldr	r3, [pc, #580]	; (8002018 <main+0x26c>)
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dd8:	667b      	str	r3, [r7, #100]	; 0x64
 8001dda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
	HAL_Delay(100);
 8001ddc:	2064      	movs	r0, #100	; 0x64
 8001dde:	f003 fdad 	bl	800593c <HAL_Delay>
	//  __HAL_RCC_I2C1_RELEASE_RESET();
	//  HAL_Delay(100);
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001de2:	f002 f857 	bl	8003e94 <MX_GPIO_Init>
	MX_FSMC_Init();
 8001de6:	f002 f92f 	bl	8004048 <MX_FSMC_Init>
	MX_USART1_UART_Init();
 8001dea:	f002 f829 	bl	8003e40 <MX_USART1_UART_Init>
	MX_SPI3_Init();
 8001dee:	f001 fff1 	bl	8003dd4 <MX_SPI3_Init>
	MX_SPI2_Init();
 8001df2:	f001 ffb9 	bl	8003d68 <MX_SPI2_Init>
	MX_DAC_Init();
 8001df6:	f001 ff1f 	bl	8003c38 <MX_DAC_Init>
	MX_SPI1_Init();
 8001dfa:	f001 ff7f 	bl	8003cfc <MX_SPI1_Init>
	MX_I2C1_Init();
 8001dfe:	f001 ff4f 	bl	8003ca0 <MX_I2C1_Init>
	//	__HAL_RCC_I2C1_FORCE_RESET();
	//	HAL_Delay(100);
	//	__HAL_RCC_I2C1_RELEASE_RESET();
	//	HAL_Delay(100);

	uint8_t uartTransmit[] = "DEBUG UART OK\r\n";
 8001e02:	4b86      	ldr	r3, [pc, #536]	; (800201c <main+0x270>)
 8001e04:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8001e08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_UART_Transmit(&huart1, uartTransmit, sizeof(uartTransmit), 100);
 8001e0e:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001e12:	2364      	movs	r3, #100	; 0x64
 8001e14:	2210      	movs	r2, #16
 8001e16:	4882      	ldr	r0, [pc, #520]	; (8002020 <main+0x274>)
 8001e18:	f007 f90b 	bl	8009032 <HAL_UART_Transmit>

	I2C_Scan(&hi2c1);
 8001e1c:	4881      	ldr	r0, [pc, #516]	; (8002024 <main+0x278>)
 8001e1e:	f7ff ff61 	bl	8001ce4 <I2C_Scan>
	BME280_Init();
 8001e22:	f7ff fbdd 	bl	80015e0 <BME280_Init>
	W25Q_Init();
 8001e26:	f003 f9af 	bl	8005188 <W25Q_Init>

	LCD_Init();
 8001e2a:	f002 fd90 	bl	800494e <LCD_Init>
	XPT2046_Init();
 8001e2e:	f003 fbf3 	bl	8005618 <XPT2046_Init>
	LCD_Rect_Fill(0, 0, 800, 480, BLUE);
 8001e32:	23ff      	movs	r3, #255	; 0xff
 8001e34:	9300      	str	r3, [sp, #0]
 8001e36:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001e3a:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001e3e:	2100      	movs	r1, #0
 8001e40:	2000      	movs	r0, #0
 8001e42:	f002 fa2f 	bl	80042a4 <LCD_Rect_Fill>
	LCD_Rect_Fill(1, 1, 798, 478, BLACK);
 8001e46:	2300      	movs	r3, #0
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 8001e4e:	f240 321e 	movw	r2, #798	; 0x31e
 8001e52:	2101      	movs	r1, #1
 8001e54:	2001      	movs	r0, #1
 8001e56:	f002 fa25 	bl	80042a4 <LCD_Rect_Fill>

	//	uint8_t flashOUT[10] = {0};
	//	W25Q_Load_Page(15, flashOUT, 10);
	//	HAL_UART_Transmit(&huart1, flashOUT, sizeof(flashOUT), 100);

	for (uint16_t i = 0; i < 499; i++) hT[i] =  byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8001e60:	e027      	b.n	8001eb2 <main+0x106>
 8001e62:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001e66:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff f90d 	bl	8001090 <AT24XX_Read>
 8001e76:	4603      	mov	r3, r0
 8001e78:	461c      	mov	r4, r3
 8001e7a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	f203 33e9 	addw	r3, r3, #1001	; 0x3e9
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff f901 	bl	8001090 <AT24XX_Read>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	4619      	mov	r1, r3
 8001e92:	4620      	mov	r0, r4
 8001e94:	f7ff ff10 	bl	8001cb8 <byteS>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001ea0:	b211      	sxth	r1, r2
 8001ea2:	4a61      	ldr	r2, [pc, #388]	; (8002028 <main+0x27c>)
 8001ea4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001ea8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001eac:	3301      	adds	r3, #1
 8001eae:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8001eb2:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001eb6:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8001eba:	d9d2      	bls.n	8001e62 <main+0xb6>
	for (uint16_t i = 0; i < 499; i++) hH[i] =  byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8001ec2:	e027      	b.n	8001f14 <main+0x168>
 8001ec4:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8001ec8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff f8dc 	bl	8001090 <AT24XX_Read>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	461c      	mov	r4, r3
 8001edc:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	f203 73d1 	addw	r3, r3, #2001	; 0x7d1
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff f8d0 	bl	8001090 <AT24XX_Read>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4620      	mov	r0, r4
 8001ef6:	f7ff fedf 	bl	8001cb8 <byteS>
 8001efa:	4603      	mov	r3, r0
 8001efc:	461a      	mov	r2, r3
 8001efe:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8001f02:	b211      	sxth	r1, r2
 8001f04:	4a49      	ldr	r2, [pc, #292]	; (800202c <main+0x280>)
 8001f06:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001f0a:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8001f0e:	3301      	adds	r3, #1
 8001f10:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8001f14:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8001f18:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8001f1c:	d9d2      	bls.n	8001ec4 <main+0x118>
	for (uint16_t i = 0; i < 499; i++) hP[i] =  byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8001f1e:	2300      	movs	r3, #0
 8001f20:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
 8001f24:	e027      	b.n	8001f76 <main+0x1ca>
 8001f26:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8001f2a:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff f8ab 	bl	8001090 <AT24XX_Read>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	461c      	mov	r4, r3
 8001f3e:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	f603 33b9 	addw	r3, r3, #3001	; 0xbb9
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff f89f 	bl	8001090 <AT24XX_Read>
 8001f52:	4603      	mov	r3, r0
 8001f54:	4619      	mov	r1, r3
 8001f56:	4620      	mov	r0, r4
 8001f58:	f7ff feae 	bl	8001cb8 <byteS>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	461a      	mov	r2, r3
 8001f60:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8001f64:	b211      	sxth	r1, r2
 8001f66:	4a32      	ldr	r2, [pc, #200]	; (8002030 <main+0x284>)
 8001f68:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001f6c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8001f70:	3301      	adds	r3, #1
 8001f72:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
 8001f76:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8001f7a:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8001f7e:	d9d2      	bls.n	8001f26 <main+0x17a>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5) == GPIO_PIN_SET) {
 8001f80:	2120      	movs	r1, #32
 8001f82:	482c      	ldr	r0, [pc, #176]	; (8002034 <main+0x288>)
 8001f84:	f003 fff0 	bl	8005f68 <HAL_GPIO_ReadPin>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d12c      	bne.n	8001fe8 <main+0x23c>

			uint16_t touchX = getX();
 8001f8e:	f003 fc05 	bl	800579c <getX>
 8001f92:	4603      	mov	r3, r0
 8001f94:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
			uint16_t touchY = getY();
 8001f98:	f003 fc1a 	bl	80057d0 <getY>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
			if (touchX && touchY && touchX != 0x0DB)
 8001fa2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d012      	beq.n	8001fd0 <main+0x224>
 8001faa:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00e      	beq.n	8001fd0 <main+0x224>
 8001fb2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8001fb6:	2bdb      	cmp	r3, #219	; 0xdb
 8001fb8:	d00a      	beq.n	8001fd0 <main+0x224>
			{
				LCD_Rect_Fill(touchX, touchY, 1, 1, WHITE);
 8001fba:	f8b7 107a 	ldrh.w	r1, [r7, #122]	; 0x7a
 8001fbe:	f8b7 007c 	ldrh.w	r0, [r7, #124]	; 0x7c
 8001fc2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	2301      	movs	r3, #1
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f002 f96a 	bl	80042a4 <LCD_Rect_Fill>
			}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	2180      	movs	r1, #128	; 0x80
 8001fd4:	4818      	ldr	r0, [pc, #96]	; (8002038 <main+0x28c>)
 8001fd6:	f003 ffdf 	bl	8005f98 <HAL_GPIO_WritePin>
			touchX = 0;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
			touchY = 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8001fe6:	e004      	b.n	8001ff2 <main+0x246>
		} else
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001fe8:	2200      	movs	r2, #0
 8001fea:	2180      	movs	r1, #128	; 0x80
 8001fec:	4812      	ldr	r0, [pc, #72]	; (8002038 <main+0x28c>)
 8001fee:	f003 ffd3 	bl	8005f98 <HAL_GPIO_WritePin>

		rtcSec = DS3231_getSec();
 8001ff2:	f7ff fcd7 	bl	80019a4 <DS3231_getSec>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4b10      	ldr	r3, [pc, #64]	; (800203c <main+0x290>)
 8001ffc:	701a      	strb	r2, [r3, #0]

		if (rtcSec % 2 == 0)
 8001ffe:	4b0f      	ldr	r3, [pc, #60]	; (800203c <main+0x290>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b00      	cmp	r3, #0
 800200a:	d119      	bne.n	8002040 <main+0x294>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800200c:	2201      	movs	r2, #1
 800200e:	2140      	movs	r1, #64	; 0x40
 8002010:	4809      	ldr	r0, [pc, #36]	; (8002038 <main+0x28c>)
 8002012:	f003 ffc1 	bl	8005f98 <HAL_GPIO_WritePin>
 8002016:	e018      	b.n	800204a <main+0x29e>
 8002018:	40023800 	.word	0x40023800
 800201c:	0800f284 	.word	0x0800f284
 8002020:	20000414 	.word	0x20000414
 8002024:	200002b8 	.word	0x200002b8
 8002028:	200004fc 	.word	0x200004fc
 800202c:	200008e4 	.word	0x200008e4
 8002030:	20000ccc 	.word	0x20000ccc
 8002034:	40020800 	.word	0x40020800
 8002038:	40020000 	.word	0x40020000
 800203c:	200004a9 	.word	0x200004a9
		else
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8002040:	2200      	movs	r2, #0
 8002042:	2140      	movs	r1, #64	; 0x40
 8002044:	4839      	ldr	r0, [pc, #228]	; (800212c <main+0x380>)
 8002046:	f003 ffa7 	bl	8005f98 <HAL_GPIO_WritePin>

		char clockPrint[13];

		if (rtcSecLast != rtcSec) {
 800204a:	4b39      	ldr	r3, [pc, #228]	; (8002130 <main+0x384>)
 800204c:	781a      	ldrb	r2, [r3, #0]
 800204e:	4b39      	ldr	r3, [pc, #228]	; (8002134 <main+0x388>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	429a      	cmp	r2, r3
 8002054:	d094      	beq.n	8001f80 <main+0x1d4>

			rtcMin = DS3231_getMin();
 8002056:	f7ff fcb3 	bl	80019c0 <DS3231_getMin>
 800205a:	4603      	mov	r3, r0
 800205c:	461a      	mov	r2, r3
 800205e:	4b36      	ldr	r3, [pc, #216]	; (8002138 <main+0x38c>)
 8002060:	701a      	strb	r2, [r3, #0]

			sprintf(clockPrint, "%02d", rtcSecLast);
 8002062:	4b33      	ldr	r3, [pc, #204]	; (8002130 <main+0x384>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	461a      	mov	r2, r3
 8002068:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800206c:	4933      	ldr	r1, [pc, #204]	; (800213c <main+0x390>)
 800206e:	4618      	mov	r0, r3
 8002070:	f008 fb2c 	bl	800a6cc <siprintf>
			LCD_Font(575, 40, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 8002074:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002078:	2300      	movs	r3, #0
 800207a:	9301      	str	r3, [sp, #4]
 800207c:	2301      	movs	r3, #1
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	4b2f      	ldr	r3, [pc, #188]	; (8002140 <main+0x394>)
 8002082:	2128      	movs	r1, #40	; 0x28
 8002084:	f240 203f 	movw	r0, #575	; 0x23f
 8002088:	f002 fbe7 	bl	800485a <LCD_Font>
			sprintf(clockPrint, "%02d", rtcSec);
 800208c:	4b29      	ldr	r3, [pc, #164]	; (8002134 <main+0x388>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	461a      	mov	r2, r3
 8002092:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002096:	4929      	ldr	r1, [pc, #164]	; (800213c <main+0x390>)
 8002098:	4618      	mov	r0, r3
 800209a:	f008 fb17 	bl	800a6cc <siprintf>
			LCD_Font(575, 40, clockPrint, &DejaVu_Sans_48, 1, ORANGE);
 800209e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80020a2:	4b28      	ldr	r3, [pc, #160]	; (8002144 <main+0x398>)
 80020a4:	9301      	str	r3, [sp, #4]
 80020a6:	2301      	movs	r3, #1
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	4b25      	ldr	r3, [pc, #148]	; (8002140 <main+0x394>)
 80020ac:	2128      	movs	r1, #40	; 0x28
 80020ae:	f240 203f 	movw	r0, #575	; 0x23f
 80020b2:	f002 fbd2 	bl	800485a <LCD_Font>

			LCD_Circle(300, 60, 10, 0, 1, ORANGE);
 80020b6:	4b23      	ldr	r3, [pc, #140]	; (8002144 <main+0x398>)
 80020b8:	9301      	str	r3, [sp, #4]
 80020ba:	2301      	movs	r3, #1
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	2300      	movs	r3, #0
 80020c0:	220a      	movs	r2, #10
 80020c2:	213c      	movs	r1, #60	; 0x3c
 80020c4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80020c8:	f002 f9f1 	bl	80044ae <LCD_Circle>
			LCD_Circle(300, 120, 10, 0, 1, ORANGE);
 80020cc:	4b1d      	ldr	r3, [pc, #116]	; (8002144 <main+0x398>)
 80020ce:	9301      	str	r3, [sp, #4]
 80020d0:	2301      	movs	r3, #1
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	2300      	movs	r3, #0
 80020d6:	220a      	movs	r2, #10
 80020d8:	2178      	movs	r1, #120	; 0x78
 80020da:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80020de:	f002 f9e6 	bl	80044ae <LCD_Circle>

			if (rtcSec % 2 != 0) {
 80020e2:	4b14      	ldr	r3, [pc, #80]	; (8002134 <main+0x388>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d02d      	beq.n	800214c <main+0x3a0>
				LCD_Circle(300, 60, 9, 1, 1, ORANGE);
 80020f0:	4b14      	ldr	r3, [pc, #80]	; (8002144 <main+0x398>)
 80020f2:	9301      	str	r3, [sp, #4]
 80020f4:	2301      	movs	r3, #1
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	2301      	movs	r3, #1
 80020fa:	2209      	movs	r2, #9
 80020fc:	213c      	movs	r1, #60	; 0x3c
 80020fe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002102:	f002 f9d4 	bl	80044ae <LCD_Circle>
				LCD_Circle(300, 120, 9, 1, 1, ORANGE);
 8002106:	4b0f      	ldr	r3, [pc, #60]	; (8002144 <main+0x398>)
 8002108:	9301      	str	r3, [sp, #4]
 800210a:	2301      	movs	r3, #1
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	2301      	movs	r3, #1
 8002110:	2209      	movs	r2, #9
 8002112:	2178      	movs	r1, #120	; 0x78
 8002114:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002118:	f002 f9c9 	bl	80044ae <LCD_Circle>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800211c:	2200      	movs	r2, #0
 800211e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002122:	4809      	ldr	r0, [pc, #36]	; (8002148 <main+0x39c>)
 8002124:	f003 ff38 	bl	8005f98 <HAL_GPIO_WritePin>
 8002128:	e02c      	b.n	8002184 <main+0x3d8>
 800212a:	bf00      	nop
 800212c:	40020000 	.word	0x40020000
 8002130:	20000000 	.word	0x20000000
 8002134:	200004a9 	.word	0x200004a9
 8002138:	200004aa 	.word	0x200004aa
 800213c:	0800f228 	.word	0x0800f228
 8002140:	08011a64 	.word	0x08011a64
 8002144:	00ffa500 	.word	0x00ffa500
 8002148:	40020800 	.word	0x40020800
			}
			else {
				LCD_Circle(300, 60, 9, 1, 1, BLACK);
 800214c:	2300      	movs	r3, #0
 800214e:	9301      	str	r3, [sp, #4]
 8002150:	2301      	movs	r3, #1
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	2301      	movs	r3, #1
 8002156:	2209      	movs	r2, #9
 8002158:	213c      	movs	r1, #60	; 0x3c
 800215a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800215e:	f002 f9a6 	bl	80044ae <LCD_Circle>
				LCD_Circle(300, 120, 9, 1, 1, BLACK);
 8002162:	2300      	movs	r3, #0
 8002164:	9301      	str	r3, [sp, #4]
 8002166:	2301      	movs	r3, #1
 8002168:	9300      	str	r3, [sp, #0]
 800216a:	2301      	movs	r3, #1
 800216c:	2209      	movs	r2, #9
 800216e:	2178      	movs	r1, #120	; 0x78
 8002170:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002174:	f002 f99b 	bl	80044ae <LCD_Circle>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8002178:	2201      	movs	r2, #1
 800217a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800217e:	48bc      	ldr	r0, [pc, #752]	; (8002470 <main+0x6c4>)
 8002180:	f003 ff0a 	bl	8005f98 <HAL_GPIO_WritePin>
			}

			if (rtcMinLast != rtcMin) {
 8002184:	4bbb      	ldr	r3, [pc, #748]	; (8002474 <main+0x6c8>)
 8002186:	781a      	ldrb	r2, [r3, #0]
 8002188:	4bbb      	ldr	r3, [pc, #748]	; (8002478 <main+0x6cc>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	429a      	cmp	r2, r3
 800218e:	f001 8027 	beq.w	80031e0 <main+0x1434>

				rtcHrs = DS3231_getHrs();
 8002192:	f7ff fc23 	bl	80019dc <DS3231_getHrs>
 8002196:	4603      	mov	r3, r0
 8002198:	461a      	mov	r2, r3
 800219a:	4bb8      	ldr	r3, [pc, #736]	; (800247c <main+0x6d0>)
 800219c:	701a      	strb	r2, [r3, #0]

				sprintf(clockPrint, "%02d", rtcMinLast);
 800219e:	4bb5      	ldr	r3, [pc, #724]	; (8002474 <main+0x6c8>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	461a      	mov	r2, r3
 80021a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80021a8:	49b5      	ldr	r1, [pc, #724]	; (8002480 <main+0x6d4>)
 80021aa:	4618      	mov	r0, r3
 80021ac:	f008 fa8e 	bl	800a6cc <siprintf>
				LCD_Font(300, 175, clockPrint, &DejaVu_Sans_112, 2, BLACK);
 80021b0:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80021b4:	2300      	movs	r3, #0
 80021b6:	9301      	str	r3, [sp, #4]
 80021b8:	2302      	movs	r3, #2
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	4bb1      	ldr	r3, [pc, #708]	; (8002484 <main+0x6d8>)
 80021be:	21af      	movs	r1, #175	; 0xaf
 80021c0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80021c4:	f002 fb49 	bl	800485a <LCD_Font>
				sprintf(clockPrint, "%02d", rtcMin);
 80021c8:	4bab      	ldr	r3, [pc, #684]	; (8002478 <main+0x6cc>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	461a      	mov	r2, r3
 80021ce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80021d2:	49ab      	ldr	r1, [pc, #684]	; (8002480 <main+0x6d4>)
 80021d4:	4618      	mov	r0, r3
 80021d6:	f008 fa79 	bl	800a6cc <siprintf>
				LCD_Font(300, 175, clockPrint, &DejaVu_Sans_112, 2, ORANGE);
 80021da:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80021de:	4baa      	ldr	r3, [pc, #680]	; (8002488 <main+0x6dc>)
 80021e0:	9301      	str	r3, [sp, #4]
 80021e2:	2302      	movs	r3, #2
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	4ba7      	ldr	r3, [pc, #668]	; (8002484 <main+0x6d8>)
 80021e8:	21af      	movs	r1, #175	; 0xaf
 80021ea:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80021ee:	f002 fb34 	bl	800485a <LCD_Font>

				if (rtcHrsLast != rtcHrs) {
 80021f2:	4ba6      	ldr	r3, [pc, #664]	; (800248c <main+0x6e0>)
 80021f4:	781a      	ldrb	r2, [r3, #0]
 80021f6:	4ba1      	ldr	r3, [pc, #644]	; (800247c <main+0x6d0>)
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	f000 8101 	beq.w	8002402 <main+0x656>

					rtcDay = DS3231_getDay();
 8002200:	f7ff fbfa 	bl	80019f8 <DS3231_getDay>
 8002204:	4603      	mov	r3, r0
 8002206:	461a      	mov	r2, r3
 8002208:	4ba1      	ldr	r3, [pc, #644]	; (8002490 <main+0x6e4>)
 800220a:	701a      	strb	r2, [r3, #0]
					rtcDate = DS3231_getDate();
 800220c:	f7ff fc02 	bl	8001a14 <DS3231_getDate>
 8002210:	4603      	mov	r3, r0
 8002212:	461a      	mov	r2, r3
 8002214:	4b9f      	ldr	r3, [pc, #636]	; (8002494 <main+0x6e8>)
 8002216:	701a      	strb	r2, [r3, #0]
					rtcMonth = DS3231_getMonth();
 8002218:	f7ff fc0a 	bl	8001a30 <DS3231_getMonth>
 800221c:	4603      	mov	r3, r0
 800221e:	461a      	mov	r2, r3
 8002220:	4b9d      	ldr	r3, [pc, #628]	; (8002498 <main+0x6ec>)
 8002222:	701a      	strb	r2, [r3, #0]
					rtcYear = DS3231_getYear();
 8002224:	f7ff fc12 	bl	8001a4c <DS3231_getYear>
 8002228:	4603      	mov	r3, r0
 800222a:	461a      	mov	r2, r3
 800222c:	4b9b      	ldr	r3, [pc, #620]	; (800249c <main+0x6f0>)
 800222e:	701a      	strb	r2, [r3, #0]

					sprintf(clockPrint, "%02d", rtcHrsLast);
 8002230:	4b96      	ldr	r3, [pc, #600]	; (800248c <main+0x6e0>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	461a      	mov	r2, r3
 8002236:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800223a:	4991      	ldr	r1, [pc, #580]	; (8002480 <main+0x6d4>)
 800223c:	4618      	mov	r0, r3
 800223e:	f008 fa45 	bl	800a6cc <siprintf>
					LCD_Font(0, 175, clockPrint, &DejaVu_Sans_112, 2, BLACK);
 8002242:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002246:	2300      	movs	r3, #0
 8002248:	9301      	str	r3, [sp, #4]
 800224a:	2302      	movs	r3, #2
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	4b8d      	ldr	r3, [pc, #564]	; (8002484 <main+0x6d8>)
 8002250:	21af      	movs	r1, #175	; 0xaf
 8002252:	2000      	movs	r0, #0
 8002254:	f002 fb01 	bl	800485a <LCD_Font>
					sprintf(clockPrint, "%02d", rtcHrs);
 8002258:	4b88      	ldr	r3, [pc, #544]	; (800247c <main+0x6d0>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	461a      	mov	r2, r3
 800225e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002262:	4987      	ldr	r1, [pc, #540]	; (8002480 <main+0x6d4>)
 8002264:	4618      	mov	r0, r3
 8002266:	f008 fa31 	bl	800a6cc <siprintf>
					LCD_Font(0, 175, clockPrint, &DejaVu_Sans_112, 2, ORANGE);
 800226a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800226e:	4b86      	ldr	r3, [pc, #536]	; (8002488 <main+0x6dc>)
 8002270:	9301      	str	r3, [sp, #4]
 8002272:	2302      	movs	r3, #2
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	4b83      	ldr	r3, [pc, #524]	; (8002484 <main+0x6d8>)
 8002278:	21af      	movs	r1, #175	; 0xaf
 800227a:	2000      	movs	r0, #0
 800227c:	f002 faed 	bl	800485a <LCD_Font>

					if (rtcDayLast != rtcDay) {
 8002280:	4b87      	ldr	r3, [pc, #540]	; (80024a0 <main+0x6f4>)
 8002282:	781a      	ldrb	r2, [r3, #0]
 8002284:	4b82      	ldr	r3, [pc, #520]	; (8002490 <main+0x6e4>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	429a      	cmp	r2, r3
 800228a:	f000 80ae 	beq.w	80023ea <main+0x63e>

						static const char* days[7] = { "MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN" };
						LCD_Font(700, 50, days[(7 + rtcDay - 2) % 7], &DejaVu_Sans_48, 1, BLACK);
 800228e:	4b80      	ldr	r3, [pc, #512]	; (8002490 <main+0x6e4>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	1d5a      	adds	r2, r3, #5
 8002294:	4b83      	ldr	r3, [pc, #524]	; (80024a4 <main+0x6f8>)
 8002296:	fb83 1302 	smull	r1, r3, r3, r2
 800229a:	4413      	add	r3, r2
 800229c:	1099      	asrs	r1, r3, #2
 800229e:	17d3      	asrs	r3, r2, #31
 80022a0:	1ac9      	subs	r1, r1, r3
 80022a2:	460b      	mov	r3, r1
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	1a5b      	subs	r3, r3, r1
 80022a8:	1ad1      	subs	r1, r2, r3
 80022aa:	4b7f      	ldr	r3, [pc, #508]	; (80024a8 <main+0x6fc>)
 80022ac:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 80022b0:	2300      	movs	r3, #0
 80022b2:	9301      	str	r3, [sp, #4]
 80022b4:	2301      	movs	r3, #1
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	4b7c      	ldr	r3, [pc, #496]	; (80024ac <main+0x700>)
 80022ba:	2132      	movs	r1, #50	; 0x32
 80022bc:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80022c0:	f002 facb 	bl	800485a <LCD_Font>
						LCD_Font(700, 50, days[(7 + rtcDay - 1) % 7], &DejaVu_Sans_48, 1, BLUE);
 80022c4:	4b72      	ldr	r3, [pc, #456]	; (8002490 <main+0x6e4>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	1d9a      	adds	r2, r3, #6
 80022ca:	4b76      	ldr	r3, [pc, #472]	; (80024a4 <main+0x6f8>)
 80022cc:	fb83 1302 	smull	r1, r3, r3, r2
 80022d0:	4413      	add	r3, r2
 80022d2:	1099      	asrs	r1, r3, #2
 80022d4:	17d3      	asrs	r3, r2, #31
 80022d6:	1ac9      	subs	r1, r1, r3
 80022d8:	460b      	mov	r3, r1
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	1a5b      	subs	r3, r3, r1
 80022de:	1ad1      	subs	r1, r2, r3
 80022e0:	4b71      	ldr	r3, [pc, #452]	; (80024a8 <main+0x6fc>)
 80022e2:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 80022e6:	23ff      	movs	r3, #255	; 0xff
 80022e8:	9301      	str	r3, [sp, #4]
 80022ea:	2301      	movs	r3, #1
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	4b6f      	ldr	r3, [pc, #444]	; (80024ac <main+0x700>)
 80022f0:	2132      	movs	r1, #50	; 0x32
 80022f2:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80022f6:	f002 fab0 	bl	800485a <LCD_Font>

						static const char* months[12] = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };

						LCD_Font(700, 100, months[(12 + rtcMonth - 2) % 12], &DejaVu_Sans_48, 1, BLACK);
 80022fa:	4b67      	ldr	r3, [pc, #412]	; (8002498 <main+0x6ec>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	f103 010a 	add.w	r1, r3, #10
 8002302:	4b6b      	ldr	r3, [pc, #428]	; (80024b0 <main+0x704>)
 8002304:	fb83 2301 	smull	r2, r3, r3, r1
 8002308:	105a      	asrs	r2, r3, #1
 800230a:	17cb      	asrs	r3, r1, #31
 800230c:	1ad2      	subs	r2, r2, r3
 800230e:	4613      	mov	r3, r2
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	4413      	add	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	1aca      	subs	r2, r1, r3
 8002318:	4b66      	ldr	r3, [pc, #408]	; (80024b4 <main+0x708>)
 800231a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800231e:	2300      	movs	r3, #0
 8002320:	9301      	str	r3, [sp, #4]
 8002322:	2301      	movs	r3, #1
 8002324:	9300      	str	r3, [sp, #0]
 8002326:	4b61      	ldr	r3, [pc, #388]	; (80024ac <main+0x700>)
 8002328:	2164      	movs	r1, #100	; 0x64
 800232a:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800232e:	f002 fa94 	bl	800485a <LCD_Font>
						LCD_Font(700, 100, months[(12 + rtcMonth - 1) % 12], &DejaVu_Sans_48, 1, CYAN);
 8002332:	4b59      	ldr	r3, [pc, #356]	; (8002498 <main+0x6ec>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	f103 010b 	add.w	r1, r3, #11
 800233a:	4b5d      	ldr	r3, [pc, #372]	; (80024b0 <main+0x704>)
 800233c:	fb83 2301 	smull	r2, r3, r3, r1
 8002340:	105a      	asrs	r2, r3, #1
 8002342:	17cb      	asrs	r3, r1, #31
 8002344:	1ad2      	subs	r2, r2, r3
 8002346:	4613      	mov	r3, r2
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	4413      	add	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	1aca      	subs	r2, r1, r3
 8002350:	4b58      	ldr	r3, [pc, #352]	; (80024b4 <main+0x708>)
 8002352:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002356:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800235a:	9301      	str	r3, [sp, #4]
 800235c:	2301      	movs	r3, #1
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	4b52      	ldr	r3, [pc, #328]	; (80024ac <main+0x700>)
 8002362:	2164      	movs	r1, #100	; 0x64
 8002364:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8002368:	f002 fa77 	bl	800485a <LCD_Font>

						sprintf(clockPrint, "%02d.%02d.%02d", rtcDateLast, rtcMonthLast, rtcYearLast);
 800236c:	4b52      	ldr	r3, [pc, #328]	; (80024b8 <main+0x70c>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	461a      	mov	r2, r3
 8002372:	4b52      	ldr	r3, [pc, #328]	; (80024bc <main+0x710>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	4619      	mov	r1, r3
 8002378:	4b51      	ldr	r3, [pc, #324]	; (80024c0 <main+0x714>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8002380:	9300      	str	r3, [sp, #0]
 8002382:	460b      	mov	r3, r1
 8002384:	494f      	ldr	r1, [pc, #316]	; (80024c4 <main+0x718>)
 8002386:	f008 f9a1 	bl	800a6cc <siprintf>
						LCD_Font(575, 175, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 800238a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800238e:	2300      	movs	r3, #0
 8002390:	9301      	str	r3, [sp, #4]
 8002392:	2301      	movs	r3, #1
 8002394:	9300      	str	r3, [sp, #0]
 8002396:	4b45      	ldr	r3, [pc, #276]	; (80024ac <main+0x700>)
 8002398:	21af      	movs	r1, #175	; 0xaf
 800239a:	f240 203f 	movw	r0, #575	; 0x23f
 800239e:	f002 fa5c 	bl	800485a <LCD_Font>
						sprintf(clockPrint, "%02d.%02d.%02d", rtcDate, rtcMonth, rtcYear);
 80023a2:	4b3c      	ldr	r3, [pc, #240]	; (8002494 <main+0x6e8>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	461a      	mov	r2, r3
 80023a8:	4b3b      	ldr	r3, [pc, #236]	; (8002498 <main+0x6ec>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	4619      	mov	r1, r3
 80023ae:	4b3b      	ldr	r3, [pc, #236]	; (800249c <main+0x6f0>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80023b6:	9300      	str	r3, [sp, #0]
 80023b8:	460b      	mov	r3, r1
 80023ba:	4942      	ldr	r1, [pc, #264]	; (80024c4 <main+0x718>)
 80023bc:	f008 f986 	bl	800a6cc <siprintf>
						LCD_Font(575, 175, clockPrint, &DejaVu_Sans_48, 1, CYAN);
 80023c0:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80023c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023c8:	9301      	str	r3, [sp, #4]
 80023ca:	2301      	movs	r3, #1
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	4b37      	ldr	r3, [pc, #220]	; (80024ac <main+0x700>)
 80023d0:	21af      	movs	r1, #175	; 0xaf
 80023d2:	f240 203f 	movw	r0, #575	; 0x23f
 80023d6:	f002 fa40 	bl	800485a <LCD_Font>

						rtcDayLast = rtcDay;
 80023da:	4b2d      	ldr	r3, [pc, #180]	; (8002490 <main+0x6e4>)
 80023dc:	781a      	ldrb	r2, [r3, #0]
 80023de:	4b30      	ldr	r3, [pc, #192]	; (80024a0 <main+0x6f4>)
 80023e0:	701a      	strb	r2, [r3, #0]
						rtcDateLast = rtcDate;
 80023e2:	4b2c      	ldr	r3, [pc, #176]	; (8002494 <main+0x6e8>)
 80023e4:	781a      	ldrb	r2, [r3, #0]
 80023e6:	4b34      	ldr	r3, [pc, #208]	; (80024b8 <main+0x70c>)
 80023e8:	701a      	strb	r2, [r3, #0]
					}
					rtcMonthLast = rtcMonth;
 80023ea:	4b2b      	ldr	r3, [pc, #172]	; (8002498 <main+0x6ec>)
 80023ec:	781a      	ldrb	r2, [r3, #0]
 80023ee:	4b33      	ldr	r3, [pc, #204]	; (80024bc <main+0x710>)
 80023f0:	701a      	strb	r2, [r3, #0]
					rtcYearLast = rtcYear;
 80023f2:	4b2a      	ldr	r3, [pc, #168]	; (800249c <main+0x6f0>)
 80023f4:	781a      	ldrb	r2, [r3, #0]
 80023f6:	4b32      	ldr	r3, [pc, #200]	; (80024c0 <main+0x714>)
 80023f8:	701a      	strb	r2, [r3, #0]
					rtcHrsLast = rtcHrs;
 80023fa:	4b20      	ldr	r3, [pc, #128]	; (800247c <main+0x6d0>)
 80023fc:	781a      	ldrb	r2, [r3, #0]
 80023fe:	4b23      	ldr	r3, [pc, #140]	; (800248c <main+0x6e0>)
 8002400:	701a      	strb	r2, [r3, #0]
				}
				rtcMinLast = rtcMin;
 8002402:	4b1d      	ldr	r3, [pc, #116]	; (8002478 <main+0x6cc>)
 8002404:	781a      	ldrb	r2, [r3, #0]
 8002406:	4b1b      	ldr	r3, [pc, #108]	; (8002474 <main+0x6c8>)
 8002408:	701a      	strb	r2, [r3, #0]
				temperature = BME280_getTemperature(-1);
 800240a:	f04f 30ff 	mov.w	r0, #4294967295
 800240e:	f7fe feeb 	bl	80011e8 <BME280_getTemperature>
 8002412:	ee10 3a10 	vmov	r3, s0
 8002416:	4618      	mov	r0, r3
 8002418:	f7fe f896 	bl	8000548 <__aeabi_f2d>
 800241c:	4602      	mov	r2, r0
 800241e:	460b      	mov	r3, r1
 8002420:	4929      	ldr	r1, [pc, #164]	; (80024c8 <main+0x71c>)
 8002422:	e9c1 2300 	strd	r2, r3, [r1]
				humidity = BME280_getHumidity(-1);
 8002426:	f04f 30ff 	mov.w	r0, #4294967295
 800242a:	f7fe ff55 	bl	80012d8 <BME280_getHumidity>
 800242e:	ee10 3a10 	vmov	r3, s0
 8002432:	4618      	mov	r0, r3
 8002434:	f7fe f888 	bl	8000548 <__aeabi_f2d>
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	4923      	ldr	r1, [pc, #140]	; (80024cc <main+0x720>)
 800243e:	e9c1 2300 	strd	r2, r3, [r1]
				pressure = (uint16_t)BME280_getPressure();
 8002442:	f7fe ffeb 	bl	800141c <BME280_getPressure>
 8002446:	eef0 7a40 	vmov.f32	s15, s0
 800244a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800244e:	ee17 3a90 	vmov	r3, s15
 8002452:	b29a      	uxth	r2, r3
 8002454:	4b1e      	ldr	r3, [pc, #120]	; (80024d0 <main+0x724>)
 8002456:	801a      	strh	r2, [r3, #0]

				if (pressure > 900 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 8002458:	4b1d      	ldr	r3, [pc, #116]	; (80024d0 <main+0x724>)
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002460:	f240 86be 	bls.w	80031e0 <main+0x1434>
 8002464:	4b1a      	ldr	r3, [pc, #104]	; (80024d0 <main+0x724>)
 8002466:	881b      	ldrh	r3, [r3, #0]
 8002468:	f240 424b 	movw	r2, #1099	; 0x44b
 800246c:	4293      	cmp	r3, r2
 800246e:	e031      	b.n	80024d4 <main+0x728>
 8002470:	40020800 	.word	0x40020800
 8002474:	20000001 	.word	0x20000001
 8002478:	200004aa 	.word	0x200004aa
 800247c:	200004ab 	.word	0x200004ab
 8002480:	0800f228 	.word	0x0800f228
 8002484:	0801d550 	.word	0x0801d550
 8002488:	00ffa500 	.word	0x00ffa500
 800248c:	20000002 	.word	0x20000002
 8002490:	200004ac 	.word	0x200004ac
 8002494:	200004ad 	.word	0x200004ad
 8002498:	200004ae 	.word	0x200004ae
 800249c:	200004af 	.word	0x200004af
 80024a0:	200004b0 	.word	0x200004b0
 80024a4:	92492493 	.word	0x92492493
 80024a8:	20000008 	.word	0x20000008
 80024ac:	08011a64 	.word	0x08011a64
 80024b0:	2aaaaaab 	.word	0x2aaaaaab
 80024b4:	20000024 	.word	0x20000024
 80024b8:	200004b1 	.word	0x200004b1
 80024bc:	200004b2 	.word	0x200004b2
 80024c0:	200004b3 	.word	0x200004b3
 80024c4:	0800f230 	.word	0x0800f230
 80024c8:	200004b8 	.word	0x200004b8
 80024cc:	200004c8 	.word	0x200004c8
 80024d0:	200004f8 	.word	0x200004f8
 80024d4:	f200 8684 	bhi.w	80031e0 <main+0x1434>
 80024d8:	4b92      	ldr	r3, [pc, #584]	; (8002724 <main+0x978>)
 80024da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024de:	f04f 0200 	mov.w	r2, #0
 80024e2:	4b91      	ldr	r3, [pc, #580]	; (8002728 <main+0x97c>)
 80024e4:	f7fe fafa 	bl	8000adc <__aeabi_dcmplt>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f000 8678 	beq.w	80031e0 <main+0x1434>
 80024f0:	4b8c      	ldr	r3, [pc, #560]	; (8002724 <main+0x978>)
 80024f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024f6:	f04f 0200 	mov.w	r2, #0
 80024fa:	4b8c      	ldr	r3, [pc, #560]	; (800272c <main+0x980>)
 80024fc:	f7fe fb0c 	bl	8000b18 <__aeabi_dcmpgt>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 866c 	beq.w	80031e0 <main+0x1434>
 8002508:	4b89      	ldr	r3, [pc, #548]	; (8002730 <main+0x984>)
 800250a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800250e:	f04f 0200 	mov.w	r2, #0
 8002512:	f04f 0300 	mov.w	r3, #0
 8002516:	f7fe faff 	bl	8000b18 <__aeabi_dcmpgt>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 865f 	beq.w	80031e0 <main+0x1434>
 8002522:	4b83      	ldr	r3, [pc, #524]	; (8002730 <main+0x984>)
 8002524:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002528:	f04f 0200 	mov.w	r2, #0
 800252c:	4b81      	ldr	r3, [pc, #516]	; (8002734 <main+0x988>)
 800252e:	f7fe fad5 	bl	8000adc <__aeabi_dcmplt>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	f000 8653 	beq.w	80031e0 <main+0x1434>

					if (temperature != temperatureLast) {
 800253a:	4b7a      	ldr	r3, [pc, #488]	; (8002724 <main+0x978>)
 800253c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002540:	4b7d      	ldr	r3, [pc, #500]	; (8002738 <main+0x98c>)
 8002542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002546:	f7fe fabf 	bl	8000ac8 <__aeabi_dcmpeq>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	f040 812d 	bne.w	80027ac <main+0xa00>

						char weatherPrintT[8];

						if (temperatureLast >= 10 || (temperatureLast < 0 && temperatureLast > -10)) {
 8002552:	4b79      	ldr	r3, [pc, #484]	; (8002738 <main+0x98c>)
 8002554:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002558:	f04f 0200 	mov.w	r2, #0
 800255c:	4b77      	ldr	r3, [pc, #476]	; (800273c <main+0x990>)
 800255e:	f7fe fad1 	bl	8000b04 <__aeabi_dcmpge>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d116      	bne.n	8002596 <main+0x7ea>
 8002568:	4b73      	ldr	r3, [pc, #460]	; (8002738 <main+0x98c>)
 800256a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800256e:	f04f 0200 	mov.w	r2, #0
 8002572:	f04f 0300 	mov.w	r3, #0
 8002576:	f7fe fab1 	bl	8000adc <__aeabi_dcmplt>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d01e      	beq.n	80025be <main+0x812>
 8002580:	4b6d      	ldr	r3, [pc, #436]	; (8002738 <main+0x98c>)
 8002582:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	4b6d      	ldr	r3, [pc, #436]	; (8002740 <main+0x994>)
 800258c:	f7fe fac4 	bl	8000b18 <__aeabi_dcmpgt>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d013      	beq.n	80025be <main+0x812>
							sprintf(weatherPrintT, "%.1f'C", temperatureLast);
 8002596:	4b68      	ldr	r3, [pc, #416]	; (8002738 <main+0x98c>)
 8002598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800259c:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80025a0:	4968      	ldr	r1, [pc, #416]	; (8002744 <main+0x998>)
 80025a2:	f008 f893 	bl	800a6cc <siprintf>
							LCD_Font(1, 220, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 80025a6:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80025aa:	2300      	movs	r3, #0
 80025ac:	9301      	str	r3, [sp, #4]
 80025ae:	2301      	movs	r3, #1
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	4b65      	ldr	r3, [pc, #404]	; (8002748 <main+0x99c>)
 80025b4:	21dc      	movs	r1, #220	; 0xdc
 80025b6:	2001      	movs	r0, #1
 80025b8:	f002 f94f 	bl	800485a <LCD_Font>
 80025bc:	e050      	b.n	8002660 <main+0x8b4>
						}
						else if (temperatureLast < 10 && temperatureLast > 0) {
 80025be:	4b5e      	ldr	r3, [pc, #376]	; (8002738 <main+0x98c>)
 80025c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025c4:	f04f 0200 	mov.w	r2, #0
 80025c8:	4b5c      	ldr	r3, [pc, #368]	; (800273c <main+0x990>)
 80025ca:	f7fe fa87 	bl	8000adc <__aeabi_dcmplt>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d01f      	beq.n	8002614 <main+0x868>
 80025d4:	4b58      	ldr	r3, [pc, #352]	; (8002738 <main+0x98c>)
 80025d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025da:	f04f 0200 	mov.w	r2, #0
 80025de:	f04f 0300 	mov.w	r3, #0
 80025e2:	f7fe fa99 	bl	8000b18 <__aeabi_dcmpgt>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d013      	beq.n	8002614 <main+0x868>
							sprintf(weatherPrintT, "%.1f'C", temperatureLast);
 80025ec:	4b52      	ldr	r3, [pc, #328]	; (8002738 <main+0x98c>)
 80025ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f2:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80025f6:	4953      	ldr	r1, [pc, #332]	; (8002744 <main+0x998>)
 80025f8:	f008 f868 	bl	800a6cc <siprintf>
							LCD_Font(27, 220, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 80025fc:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002600:	2300      	movs	r3, #0
 8002602:	9301      	str	r3, [sp, #4]
 8002604:	2301      	movs	r3, #1
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	4b4f      	ldr	r3, [pc, #316]	; (8002748 <main+0x99c>)
 800260a:	21dc      	movs	r1, #220	; 0xdc
 800260c:	201b      	movs	r0, #27
 800260e:	f002 f924 	bl	800485a <LCD_Font>
 8002612:	e025      	b.n	8002660 <main+0x8b4>
						}
						else if (temperatureLast <= -10) {
 8002614:	4b48      	ldr	r3, [pc, #288]	; (8002738 <main+0x98c>)
 8002616:	e9d3 0100 	ldrd	r0, r1, [r3]
 800261a:	f04f 0200 	mov.w	r2, #0
 800261e:	4b48      	ldr	r3, [pc, #288]	; (8002740 <main+0x994>)
 8002620:	f7fe fa66 	bl	8000af0 <__aeabi_dcmple>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d01a      	beq.n	8002660 <main+0x8b4>
							sprintf(weatherPrintT, "%2d'C", (int8_t)temperatureLast);
 800262a:	4b43      	ldr	r3, [pc, #268]	; (8002738 <main+0x98c>)
 800262c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002630:	4610      	mov	r0, r2
 8002632:	4619      	mov	r1, r3
 8002634:	f7fe fa90 	bl	8000b58 <__aeabi_d2iz>
 8002638:	4603      	mov	r3, r0
 800263a:	b25b      	sxtb	r3, r3
 800263c:	461a      	mov	r2, r3
 800263e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002642:	4942      	ldr	r1, [pc, #264]	; (800274c <main+0x9a0>)
 8002644:	4618      	mov	r0, r3
 8002646:	f008 f841 	bl	800a6cc <siprintf>
							LCD_Font(1, 220, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 800264a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800264e:	2300      	movs	r3, #0
 8002650:	9301      	str	r3, [sp, #4]
 8002652:	2301      	movs	r3, #1
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	4b3c      	ldr	r3, [pc, #240]	; (8002748 <main+0x99c>)
 8002658:	21dc      	movs	r1, #220	; 0xdc
 800265a:	2001      	movs	r0, #1
 800265c:	f002 f8fd 	bl	800485a <LCD_Font>
						}

						if (temperature >= 10 || (temperature < 0 && temperature > -10)) {
 8002660:	4b30      	ldr	r3, [pc, #192]	; (8002724 <main+0x978>)
 8002662:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002666:	f04f 0200 	mov.w	r2, #0
 800266a:	4b34      	ldr	r3, [pc, #208]	; (800273c <main+0x990>)
 800266c:	f7fe fa4a 	bl	8000b04 <__aeabi_dcmpge>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d116      	bne.n	80026a4 <main+0x8f8>
 8002676:	4b2b      	ldr	r3, [pc, #172]	; (8002724 <main+0x978>)
 8002678:	e9d3 0100 	ldrd	r0, r1, [r3]
 800267c:	f04f 0200 	mov.w	r2, #0
 8002680:	f04f 0300 	mov.w	r3, #0
 8002684:	f7fe fa2a 	bl	8000adc <__aeabi_dcmplt>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d01e      	beq.n	80026cc <main+0x920>
 800268e:	4b25      	ldr	r3, [pc, #148]	; (8002724 <main+0x978>)
 8002690:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002694:	f04f 0200 	mov.w	r2, #0
 8002698:	4b29      	ldr	r3, [pc, #164]	; (8002740 <main+0x994>)
 800269a:	f7fe fa3d 	bl	8000b18 <__aeabi_dcmpgt>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d013      	beq.n	80026cc <main+0x920>
							sprintf(weatherPrintT, "%.1f'C", temperature);
 80026a4:	4b1f      	ldr	r3, [pc, #124]	; (8002724 <main+0x978>)
 80026a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026aa:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80026ae:	4925      	ldr	r1, [pc, #148]	; (8002744 <main+0x998>)
 80026b0:	f008 f80c 	bl	800a6cc <siprintf>
							LCD_Font(1, 220, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 80026b4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80026b8:	4b25      	ldr	r3, [pc, #148]	; (8002750 <main+0x9a4>)
 80026ba:	9301      	str	r3, [sp, #4]
 80026bc:	2301      	movs	r3, #1
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	4b21      	ldr	r3, [pc, #132]	; (8002748 <main+0x99c>)
 80026c2:	21dc      	movs	r1, #220	; 0xdc
 80026c4:	2001      	movs	r0, #1
 80026c6:	f002 f8c8 	bl	800485a <LCD_Font>
 80026ca:	e069      	b.n	80027a0 <main+0x9f4>
						}
						else if (temperature < 10 && temperature > 0) {
 80026cc:	4b15      	ldr	r3, [pc, #84]	; (8002724 <main+0x978>)
 80026ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026d2:	f04f 0200 	mov.w	r2, #0
 80026d6:	4b19      	ldr	r3, [pc, #100]	; (800273c <main+0x990>)
 80026d8:	f7fe fa00 	bl	8000adc <__aeabi_dcmplt>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d038      	beq.n	8002754 <main+0x9a8>
 80026e2:	4b10      	ldr	r3, [pc, #64]	; (8002724 <main+0x978>)
 80026e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026e8:	f04f 0200 	mov.w	r2, #0
 80026ec:	f04f 0300 	mov.w	r3, #0
 80026f0:	f7fe fa12 	bl	8000b18 <__aeabi_dcmpgt>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d02c      	beq.n	8002754 <main+0x9a8>
							sprintf(weatherPrintT, "%.1f'C", temperature);
 80026fa:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <main+0x978>)
 80026fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002700:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8002704:	490f      	ldr	r1, [pc, #60]	; (8002744 <main+0x998>)
 8002706:	f007 ffe1 	bl	800a6cc <siprintf>
							LCD_Font(27, 220, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 800270a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800270e:	4b10      	ldr	r3, [pc, #64]	; (8002750 <main+0x9a4>)
 8002710:	9301      	str	r3, [sp, #4]
 8002712:	2301      	movs	r3, #1
 8002714:	9300      	str	r3, [sp, #0]
 8002716:	4b0c      	ldr	r3, [pc, #48]	; (8002748 <main+0x99c>)
 8002718:	21dc      	movs	r1, #220	; 0xdc
 800271a:	201b      	movs	r0, #27
 800271c:	f002 f89d 	bl	800485a <LCD_Font>
 8002720:	e03e      	b.n	80027a0 <main+0x9f4>
 8002722:	bf00      	nop
 8002724:	200004b8 	.word	0x200004b8
 8002728:	40554000 	.word	0x40554000
 800272c:	c0440000 	.word	0xc0440000
 8002730:	200004c8 	.word	0x200004c8
 8002734:	40590000 	.word	0x40590000
 8002738:	200004c0 	.word	0x200004c0
 800273c:	40240000 	.word	0x40240000
 8002740:	c0240000 	.word	0xc0240000
 8002744:	0800f240 	.word	0x0800f240
 8002748:	08011a64 	.word	0x08011a64
 800274c:	0800f248 	.word	0x0800f248
 8002750:	00ffa500 	.word	0x00ffa500
						}
						else if (temperature <= -10) {
 8002754:	4ba9      	ldr	r3, [pc, #676]	; (80029fc <main+0xc50>)
 8002756:	e9d3 0100 	ldrd	r0, r1, [r3]
 800275a:	f04f 0200 	mov.w	r2, #0
 800275e:	4ba8      	ldr	r3, [pc, #672]	; (8002a00 <main+0xc54>)
 8002760:	f7fe f9c6 	bl	8000af0 <__aeabi_dcmple>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d01a      	beq.n	80027a0 <main+0x9f4>
							sprintf(weatherPrintT, "%2d'C", (int8_t)temperature);
 800276a:	4ba4      	ldr	r3, [pc, #656]	; (80029fc <main+0xc50>)
 800276c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002770:	4610      	mov	r0, r2
 8002772:	4619      	mov	r1, r3
 8002774:	f7fe f9f0 	bl	8000b58 <__aeabi_d2iz>
 8002778:	4603      	mov	r3, r0
 800277a:	b25b      	sxtb	r3, r3
 800277c:	461a      	mov	r2, r3
 800277e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002782:	49a0      	ldr	r1, [pc, #640]	; (8002a04 <main+0xc58>)
 8002784:	4618      	mov	r0, r3
 8002786:	f007 ffa1 	bl	800a6cc <siprintf>
							LCD_Font(1, 220, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 800278a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800278e:	4b9e      	ldr	r3, [pc, #632]	; (8002a08 <main+0xc5c>)
 8002790:	9301      	str	r3, [sp, #4]
 8002792:	2301      	movs	r3, #1
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	4b9d      	ldr	r3, [pc, #628]	; (8002a0c <main+0xc60>)
 8002798:	21dc      	movs	r1, #220	; 0xdc
 800279a:	2001      	movs	r0, #1
 800279c:	f002 f85d 	bl	800485a <LCD_Font>
						}

						temperatureLast = temperature;
 80027a0:	4b96      	ldr	r3, [pc, #600]	; (80029fc <main+0xc50>)
 80027a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a6:	499a      	ldr	r1, [pc, #616]	; (8002a10 <main+0xc64>)
 80027a8:	e9c1 2300 	strd	r2, r3, [r1]
					}

					if (humidity != humidityLast) {
 80027ac:	4b99      	ldr	r3, [pc, #612]	; (8002a14 <main+0xc68>)
 80027ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027b2:	4b99      	ldr	r3, [pc, #612]	; (8002a18 <main+0xc6c>)
 80027b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b8:	f7fe f986 	bl	8000ac8 <__aeabi_dcmpeq>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d15b      	bne.n	800287a <main+0xace>

						char weatherPrintH[7];

						sprintf(weatherPrintH, "%.1f'H", humidityLast);
 80027c2:	4b95      	ldr	r3, [pc, #596]	; (8002a18 <main+0xc6c>)
 80027c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c8:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80027cc:	4993      	ldr	r1, [pc, #588]	; (8002a1c <main+0xc70>)
 80027ce:	f007 ff7d 	bl	800a6cc <siprintf>
						if (humidityLast >= 10)
 80027d2:	4b91      	ldr	r3, [pc, #580]	; (8002a18 <main+0xc6c>)
 80027d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027d8:	f04f 0200 	mov.w	r2, #0
 80027dc:	4b90      	ldr	r3, [pc, #576]	; (8002a20 <main+0xc74>)
 80027de:	f7fe f991 	bl	8000b04 <__aeabi_dcmpge>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00b      	beq.n	8002800 <main+0xa54>
							LCD_Font(160, 220, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 80027e8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80027ec:	2300      	movs	r3, #0
 80027ee:	9301      	str	r3, [sp, #4]
 80027f0:	2301      	movs	r3, #1
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	4b85      	ldr	r3, [pc, #532]	; (8002a0c <main+0xc60>)
 80027f6:	21dc      	movs	r1, #220	; 0xdc
 80027f8:	20a0      	movs	r0, #160	; 0xa0
 80027fa:	f002 f82e 	bl	800485a <LCD_Font>
 80027fe:	e00a      	b.n	8002816 <main+0xa6a>
						else LCD_Font(186, 220, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 8002800:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8002804:	2300      	movs	r3, #0
 8002806:	9301      	str	r3, [sp, #4]
 8002808:	2301      	movs	r3, #1
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	4b7f      	ldr	r3, [pc, #508]	; (8002a0c <main+0xc60>)
 800280e:	21dc      	movs	r1, #220	; 0xdc
 8002810:	20ba      	movs	r0, #186	; 0xba
 8002812:	f002 f822 	bl	800485a <LCD_Font>

						sprintf(weatherPrintH, "%.1f'H", humidity);
 8002816:	4b7f      	ldr	r3, [pc, #508]	; (8002a14 <main+0xc68>)
 8002818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281c:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8002820:	497e      	ldr	r1, [pc, #504]	; (8002a1c <main+0xc70>)
 8002822:	f007 ff53 	bl	800a6cc <siprintf>
						if (humidity >= 10)
 8002826:	4b7b      	ldr	r3, [pc, #492]	; (8002a14 <main+0xc68>)
 8002828:	e9d3 0100 	ldrd	r0, r1, [r3]
 800282c:	f04f 0200 	mov.w	r2, #0
 8002830:	4b7b      	ldr	r3, [pc, #492]	; (8002a20 <main+0xc74>)
 8002832:	f7fe f967 	bl	8000b04 <__aeabi_dcmpge>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00c      	beq.n	8002856 <main+0xaaa>
							LCD_Font(160, 220, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 800283c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8002840:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002844:	9301      	str	r3, [sp, #4]
 8002846:	2301      	movs	r3, #1
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	4b70      	ldr	r3, [pc, #448]	; (8002a0c <main+0xc60>)
 800284c:	21dc      	movs	r1, #220	; 0xdc
 800284e:	20a0      	movs	r0, #160	; 0xa0
 8002850:	f002 f803 	bl	800485a <LCD_Font>
 8002854:	e00b      	b.n	800286e <main+0xac2>
						else LCD_Font(186, 220, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 8002856:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800285a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800285e:	9301      	str	r3, [sp, #4]
 8002860:	2301      	movs	r3, #1
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	4b69      	ldr	r3, [pc, #420]	; (8002a0c <main+0xc60>)
 8002866:	21dc      	movs	r1, #220	; 0xdc
 8002868:	20ba      	movs	r0, #186	; 0xba
 800286a:	f001 fff6 	bl	800485a <LCD_Font>

						humidityLast = humidity;
 800286e:	4b69      	ldr	r3, [pc, #420]	; (8002a14 <main+0xc68>)
 8002870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002874:	4968      	ldr	r1, [pc, #416]	; (8002a18 <main+0xc6c>)
 8002876:	e9c1 2300 	strd	r2, r3, [r1]
					}

					if (pressureLast != pressure) {
 800287a:	4b6a      	ldr	r3, [pc, #424]	; (8002a24 <main+0xc78>)
 800287c:	881a      	ldrh	r2, [r3, #0]
 800287e:	4b6a      	ldr	r3, [pc, #424]	; (8002a28 <main+0xc7c>)
 8002880:	881b      	ldrh	r3, [r3, #0]
 8002882:	429a      	cmp	r2, r3
 8002884:	d065      	beq.n	8002952 <main+0xba6>

						char weatherPrintP[11];

						if (pressureLast >= 1000) {
 8002886:	4b67      	ldr	r3, [pc, #412]	; (8002a24 <main+0xc78>)
 8002888:	881b      	ldrh	r3, [r3, #0]
 800288a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800288e:	d315      	bcc.n	80028bc <main+0xb10>
							sprintf(weatherPrintP, "%02dP", pressureLast);
 8002890:	4b64      	ldr	r3, [pc, #400]	; (8002a24 <main+0xc78>)
 8002892:	881b      	ldrh	r3, [r3, #0]
 8002894:	461a      	mov	r2, r3
 8002896:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800289a:	4964      	ldr	r1, [pc, #400]	; (8002a2c <main+0xc80>)
 800289c:	4618      	mov	r0, r3
 800289e:	f007 ff15 	bl	800a6cc <siprintf>
							LCD_Font(320, 220, weatherPrintP, &DejaVu_Sans_48, 1, BLACK);
 80028a2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80028a6:	2300      	movs	r3, #0
 80028a8:	9301      	str	r3, [sp, #4]
 80028aa:	2301      	movs	r3, #1
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	4b57      	ldr	r3, [pc, #348]	; (8002a0c <main+0xc60>)
 80028b0:	21dc      	movs	r1, #220	; 0xdc
 80028b2:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80028b6:	f001 ffd0 	bl	800485a <LCD_Font>
 80028ba:	e014      	b.n	80028e6 <main+0xb3a>
						}
						else {
							sprintf(weatherPrintP, " %02dP", pressureLast);
 80028bc:	4b59      	ldr	r3, [pc, #356]	; (8002a24 <main+0xc78>)
 80028be:	881b      	ldrh	r3, [r3, #0]
 80028c0:	461a      	mov	r2, r3
 80028c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80028c6:	495a      	ldr	r1, [pc, #360]	; (8002a30 <main+0xc84>)
 80028c8:	4618      	mov	r0, r3
 80028ca:	f007 feff 	bl	800a6cc <siprintf>
							LCD_Font(320, 220, weatherPrintP, &DejaVu_Sans_48, 1, BLACK);
 80028ce:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80028d2:	2300      	movs	r3, #0
 80028d4:	9301      	str	r3, [sp, #4]
 80028d6:	2301      	movs	r3, #1
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	4b4c      	ldr	r3, [pc, #304]	; (8002a0c <main+0xc60>)
 80028dc:	21dc      	movs	r1, #220	; 0xdc
 80028de:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80028e2:	f001 ffba 	bl	800485a <LCD_Font>
						}

						pressureLast = pressure;
 80028e6:	4b50      	ldr	r3, [pc, #320]	; (8002a28 <main+0xc7c>)
 80028e8:	881a      	ldrh	r2, [r3, #0]
 80028ea:	4b4e      	ldr	r3, [pc, #312]	; (8002a24 <main+0xc78>)
 80028ec:	801a      	strh	r2, [r3, #0]

						if (pressureLast >= 1000) {
 80028ee:	4b4d      	ldr	r3, [pc, #308]	; (8002a24 <main+0xc78>)
 80028f0:	881b      	ldrh	r3, [r3, #0]
 80028f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028f6:	d316      	bcc.n	8002926 <main+0xb7a>
							sprintf(weatherPrintP, "%02dP", pressureLast);
 80028f8:	4b4a      	ldr	r3, [pc, #296]	; (8002a24 <main+0xc78>)
 80028fa:	881b      	ldrh	r3, [r3, #0]
 80028fc:	461a      	mov	r2, r3
 80028fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002902:	494a      	ldr	r1, [pc, #296]	; (8002a2c <main+0xc80>)
 8002904:	4618      	mov	r0, r3
 8002906:	f007 fee1 	bl	800a6cc <siprintf>
							LCD_Font(320, 220, weatherPrintP, &DejaVu_Sans_48, 1, GREEN);
 800290a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800290e:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8002912:	9301      	str	r3, [sp, #4]
 8002914:	2301      	movs	r3, #1
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	4b3c      	ldr	r3, [pc, #240]	; (8002a0c <main+0xc60>)
 800291a:	21dc      	movs	r1, #220	; 0xdc
 800291c:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8002920:	f001 ff9b 	bl	800485a <LCD_Font>
 8002924:	e015      	b.n	8002952 <main+0xba6>
						}
						else {
							sprintf(weatherPrintP, " %02dP", pressureLast);
 8002926:	4b3f      	ldr	r3, [pc, #252]	; (8002a24 <main+0xc78>)
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	461a      	mov	r2, r3
 800292c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002930:	493f      	ldr	r1, [pc, #252]	; (8002a30 <main+0xc84>)
 8002932:	4618      	mov	r0, r3
 8002934:	f007 feca 	bl	800a6cc <siprintf>
							LCD_Font(320, 220, weatherPrintP, &DejaVu_Sans_48, 1, GREEN);
 8002938:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800293c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8002940:	9301      	str	r3, [sp, #4]
 8002942:	2301      	movs	r3, #1
 8002944:	9300      	str	r3, [sp, #0]
 8002946:	4b31      	ldr	r3, [pc, #196]	; (8002a0c <main+0xc60>)
 8002948:	21dc      	movs	r1, #220	; 0xdc
 800294a:	f44f 70a0 	mov.w	r0, #320	; 0x140
 800294e:	f001 ff84 	bl	800485a <LCD_Font>
						}
					}

					if (AT24XX_Read(0) != rtcHrs) {
 8002952:	2000      	movs	r0, #0
 8002954:	f7fe fb9c 	bl	8001090 <AT24XX_Read>
 8002958:	4603      	mov	r3, r0
 800295a:	461a      	mov	r2, r3
 800295c:	4b35      	ldr	r3, [pc, #212]	; (8002a34 <main+0xc88>)
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	429a      	cmp	r2, r3
 8002962:	f000 8196 	beq.w	8002c92 <main+0xee6>

						AT24XX_Update(0, rtcHrs);
 8002966:	4b33      	ldr	r3, [pc, #204]	; (8002a34 <main+0xc88>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	4619      	mov	r1, r3
 800296c:	2000      	movs	r0, #0
 800296e:	f7fe fbb8 	bl	80010e2 <AT24XX_Update>

						for (uint16_t i = 0; i < 499; i++) hT[i] = 0; //byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8002972:	2300      	movs	r3, #0
 8002974:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
 8002978:	e00a      	b.n	8002990 <main+0xbe4>
 800297a:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800297e:	4a2e      	ldr	r2, [pc, #184]	; (8002a38 <main+0xc8c>)
 8002980:	2100      	movs	r1, #0
 8002982:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002986:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800298a:	3301      	adds	r3, #1
 800298c:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
 8002990:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8002994:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8002998:	d9ef      	bls.n	800297a <main+0xbce>
						for (uint16_t i = 498; i > 0; i--) hT[i] = hT[i - 1];
 800299a:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
 800299e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 80029a2:	e00f      	b.n	80029c4 <main+0xc18>
 80029a4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80029a8:	1e5a      	subs	r2, r3, #1
 80029aa:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80029ae:	4922      	ldr	r1, [pc, #136]	; (8002a38 <main+0xc8c>)
 80029b0:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80029b4:	4a20      	ldr	r2, [pc, #128]	; (8002a38 <main+0xc8c>)
 80029b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80029ba:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80029be:	3b01      	subs	r3, #1
 80029c0:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 80029c4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1eb      	bne.n	80029a4 <main+0xbf8>
						hT[0] = (uint16_t) (temperature * 10);
 80029cc:	4b0b      	ldr	r3, [pc, #44]	; (80029fc <main+0xc50>)
 80029ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029d2:	f04f 0200 	mov.w	r2, #0
 80029d6:	4b12      	ldr	r3, [pc, #72]	; (8002a20 <main+0xc74>)
 80029d8:	f7fd fe0e 	bl	80005f8 <__aeabi_dmul>
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
 80029e0:	4610      	mov	r0, r2
 80029e2:	4619      	mov	r1, r3
 80029e4:	f7fe f8e0 	bl	8000ba8 <__aeabi_d2uiz>
 80029e8:	4603      	mov	r3, r0
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	b21a      	sxth	r2, r3
 80029ee:	4b12      	ldr	r3, [pc, #72]	; (8002a38 <main+0xc8c>)
 80029f0:	801a      	strh	r2, [r3, #0]

						for (uint16_t i = 0; i < 499; i++) {
 80029f2:	2300      	movs	r3, #0
 80029f4:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 80029f8:	e04f      	b.n	8002a9a <main+0xcee>
 80029fa:	bf00      	nop
 80029fc:	200004b8 	.word	0x200004b8
 8002a00:	c0240000 	.word	0xc0240000
 8002a04:	0800f248 	.word	0x0800f248
 8002a08:	00ffa500 	.word	0x00ffa500
 8002a0c:	08011a64 	.word	0x08011a64
 8002a10:	200004c0 	.word	0x200004c0
 8002a14:	200004c8 	.word	0x200004c8
 8002a18:	200004d0 	.word	0x200004d0
 8002a1c:	0800f250 	.word	0x0800f250
 8002a20:	40240000 	.word	0x40240000
 8002a24:	200004fa 	.word	0x200004fa
 8002a28:	200004f8 	.word	0x200004f8
 8002a2c:	0800f258 	.word	0x0800f258
 8002a30:	0800f260 	.word	0x0800f260
 8002a34:	200004ab 	.word	0x200004ab
 8002a38:	200004fc 	.word	0x200004fc
							AT24XX_Update(i * 2 + 1000, byteL(hT[i]));
 8002a3c:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002a40:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	b29c      	uxth	r4, r3
 8002a4a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002a4e:	4a6f      	ldr	r2, [pc, #444]	; (8002c0c <main+0xe60>)
 8002a50:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff f912 	bl	8001c80 <byteL>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4620      	mov	r0, r4
 8002a62:	f7fe fb3e 	bl	80010e2 <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 1000, byteH(hT[i]));
 8002a66:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	f203 33e9 	addw	r3, r3, #1001	; 0x3e9
 8002a72:	b29c      	uxth	r4, r3
 8002a74:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002a78:	4a64      	ldr	r2, [pc, #400]	; (8002c0c <main+0xe60>)
 8002a7a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff f90a 	bl	8001c9a <byteH>
 8002a86:	4603      	mov	r3, r0
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4620      	mov	r0, r4
 8002a8c:	f7fe fb29 	bl	80010e2 <AT24XX_Update>
						for (uint16_t i = 0; i < 499; i++) {
 8002a90:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002a94:	3301      	adds	r3, #1
 8002a96:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002a9a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002a9e:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8002aa2:	d9cb      	bls.n	8002a3c <main+0xc90>
						}

						for (uint16_t i = 0; i < 499; i++) hH[i] = 0; //byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8002aaa:	e00a      	b.n	8002ac2 <main+0xd16>
 8002aac:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8002ab0:	4a57      	ldr	r2, [pc, #348]	; (8002c10 <main+0xe64>)
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002ab8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8002abc:	3301      	adds	r3, #1
 8002abe:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8002ac2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8002ac6:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8002aca:	d9ef      	bls.n	8002aac <main+0xd00>
						for (uint16_t i = 498; i > 0; i--) hH[i] = hH[i - 1];
 8002acc:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
 8002ad0:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8002ad4:	e00f      	b.n	8002af6 <main+0xd4a>
 8002ad6:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8002ada:	1e5a      	subs	r2, r3, #1
 8002adc:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8002ae0:	494b      	ldr	r1, [pc, #300]	; (8002c10 <main+0xe64>)
 8002ae2:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8002ae6:	4a4a      	ldr	r2, [pc, #296]	; (8002c10 <main+0xe64>)
 8002ae8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002aec:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8002af0:	3b01      	subs	r3, #1
 8002af2:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8002af6:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1eb      	bne.n	8002ad6 <main+0xd2a>
						hH[0] = (uint16_t) (humidity * 10);
 8002afe:	4b45      	ldr	r3, [pc, #276]	; (8002c14 <main+0xe68>)
 8002b00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	4b43      	ldr	r3, [pc, #268]	; (8002c18 <main+0xe6c>)
 8002b0a:	f7fd fd75 	bl	80005f8 <__aeabi_dmul>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	460b      	mov	r3, r1
 8002b12:	4610      	mov	r0, r2
 8002b14:	4619      	mov	r1, r3
 8002b16:	f7fe f847 	bl	8000ba8 <__aeabi_d2uiz>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	b21a      	sxth	r2, r3
 8002b20:	4b3b      	ldr	r3, [pc, #236]	; (8002c10 <main+0xe64>)
 8002b22:	801a      	strh	r2, [r3, #0]

						for (uint16_t i = 0; i < 499; i++) {
 8002b24:	2300      	movs	r3, #0
 8002b26:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8002b2a:	e02e      	b.n	8002b8a <main+0xdde>
							AT24XX_Update(i * 2 + 2000, byteL(hH[i]));
 8002b2c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002b30:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	b29c      	uxth	r4, r3
 8002b3a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002b3e:	4a34      	ldr	r2, [pc, #208]	; (8002c10 <main+0xe64>)
 8002b40:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff f89a 	bl	8001c80 <byteL>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4620      	mov	r0, r4
 8002b52:	f7fe fac6 	bl	80010e2 <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 2000, byteH(hH[i]));
 8002b56:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	f203 73d1 	addw	r3, r3, #2001	; 0x7d1
 8002b62:	b29c      	uxth	r4, r3
 8002b64:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002b68:	4a29      	ldr	r2, [pc, #164]	; (8002c10 <main+0xe64>)
 8002b6a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff f892 	bl	8001c9a <byteH>
 8002b76:	4603      	mov	r3, r0
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4620      	mov	r0, r4
 8002b7c:	f7fe fab1 	bl	80010e2 <AT24XX_Update>
						for (uint16_t i = 0; i < 499; i++) {
 8002b80:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002b84:	3301      	adds	r3, #1
 8002b86:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8002b8a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002b8e:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8002b92:	d9cb      	bls.n	8002b2c <main+0xd80>
						}

						for (uint16_t i = 0; i < 499; i++) hP[i] = 0; //byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8002b94:	2300      	movs	r3, #0
 8002b96:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8002b9a:	e00a      	b.n	8002bb2 <main+0xe06>
 8002b9c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8002ba0:	4a1e      	ldr	r2, [pc, #120]	; (8002c1c <main+0xe70>)
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002ba8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8002bac:	3301      	adds	r3, #1
 8002bae:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8002bb2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8002bb6:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8002bba:	d9ef      	bls.n	8002b9c <main+0xdf0>
						for (uint16_t i = 498; i > 0; i--) hP[i] = hP[i - 1];
 8002bbc:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
 8002bc0:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8002bc4:	e00f      	b.n	8002be6 <main+0xe3a>
 8002bc6:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002bca:	1e5a      	subs	r2, r3, #1
 8002bcc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002bd0:	4912      	ldr	r1, [pc, #72]	; (8002c1c <main+0xe70>)
 8002bd2:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8002bd6:	4a11      	ldr	r2, [pc, #68]	; (8002c1c <main+0xe70>)
 8002bd8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002bdc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002be0:	3b01      	subs	r3, #1
 8002be2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8002be6:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1eb      	bne.n	8002bc6 <main+0xe1a>
						hP[0] = (uint16_t) (pressure * 10);
 8002bee:	4b0c      	ldr	r3, [pc, #48]	; (8002c20 <main+0xe74>)
 8002bf0:	881b      	ldrh	r3, [r3, #0]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	0092      	lsls	r2, r2, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	b21a      	sxth	r2, r3
 8002bfe:	4b07      	ldr	r3, [pc, #28]	; (8002c1c <main+0xe70>)
 8002c00:	801a      	strh	r2, [r3, #0]

						for (uint16_t i = 0; i < 499; i++) {
 8002c02:	2300      	movs	r3, #0
 8002c04:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8002c08:	e03b      	b.n	8002c82 <main+0xed6>
 8002c0a:	bf00      	nop
 8002c0c:	200004fc 	.word	0x200004fc
 8002c10:	200008e4 	.word	0x200008e4
 8002c14:	200004c8 	.word	0x200004c8
 8002c18:	40240000 	.word	0x40240000
 8002c1c:	20000ccc 	.word	0x20000ccc
 8002c20:	200004f8 	.word	0x200004f8
							AT24XX_Update(i * 2 + 3000, byteL(hP[i]));
 8002c24:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8002c28:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	b29c      	uxth	r4, r3
 8002c32:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8002c36:	4ab8      	ldr	r2, [pc, #736]	; (8002f18 <main+0x116c>)
 8002c38:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff f81e 	bl	8001c80 <byteL>
 8002c44:	4603      	mov	r3, r0
 8002c46:	4619      	mov	r1, r3
 8002c48:	4620      	mov	r0, r4
 8002c4a:	f7fe fa4a 	bl	80010e2 <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 3000, byteH(hP[i]));
 8002c4e:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	f603 33b9 	addw	r3, r3, #3001	; 0xbb9
 8002c5a:	b29c      	uxth	r4, r3
 8002c5c:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8002c60:	4aad      	ldr	r2, [pc, #692]	; (8002f18 <main+0x116c>)
 8002c62:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff f816 	bl	8001c9a <byteH>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	4619      	mov	r1, r3
 8002c72:	4620      	mov	r0, r4
 8002c74:	f7fe fa35 	bl	80010e2 <AT24XX_Update>
						for (uint16_t i = 0; i < 499; i++) {
 8002c78:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8002c82:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8002c86:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8002c8a:	d9cb      	bls.n	8002c24 <main+0xe78>
						}

						viewGraphs = 0;
 8002c8c:	4ba3      	ldr	r3, [pc, #652]	; (8002f1c <main+0x1170>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	701a      	strb	r2, [r3, #0]
					}

					LCD_Rect(1, 222, 265, 256, 1, BLUE);
 8002c92:	23ff      	movs	r3, #255	; 0xff
 8002c94:	9301      	str	r3, [sp, #4]
 8002c96:	2301      	movs	r3, #1
 8002c98:	9300      	str	r3, [sp, #0]
 8002c9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c9e:	f240 1209 	movw	r2, #265	; 0x109
 8002ca2:	21de      	movs	r1, #222	; 0xde
 8002ca4:	2001      	movs	r0, #1
 8002ca6:	f001 fba9 	bl	80043fc <LCD_Rect>
					int16_t valMap = map(((int16_t)(temperature * 10)), MIN_TEMPERATURE_X10, MAX_TEMPERATURE_X10, 0, 255);
 8002caa:	4b9d      	ldr	r3, [pc, #628]	; (8002f20 <main+0x1174>)
 8002cac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002cb0:	f04f 0200 	mov.w	r2, #0
 8002cb4:	4b9b      	ldr	r3, [pc, #620]	; (8002f24 <main+0x1178>)
 8002cb6:	f7fd fc9f 	bl	80005f8 <__aeabi_dmul>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	4610      	mov	r0, r2
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	f7fd ff49 	bl	8000b58 <__aeabi_d2iz>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	b21b      	sxth	r3, r3
 8002cca:	b298      	uxth	r0, r3
 8002ccc:	23ff      	movs	r3, #255	; 0xff
 8002cce:	9300      	str	r3, [sp, #0]
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8002cd6:	21c8      	movs	r1, #200	; 0xc8
 8002cd8:	f7fe ffa6 	bl	8001c28 <map>
 8002cdc:	ec53 2b10 	vmov	r2, r3, d0
 8002ce0:	4610      	mov	r0, r2
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	f7fd ff38 	bl	8000b58 <__aeabi_d2iz>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
					if (valMap < 0) valMap = 0;
 8002cee:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	da02      	bge.n	8002cfc <main+0xf50>
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
					if (valMap > 255) valMap = 255;
 8002cfc:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 8002d00:	2bff      	cmp	r3, #255	; 0xff
 8002d02:	dd02      	ble.n	8002d0a <main+0xf5e>
 8002d04:	23ff      	movs	r3, #255	; 0xff
 8002d06:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
					LCD_Line(2 + 263, 223, 2 + 263, 477, 1, BLACK);
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	9301      	str	r3, [sp, #4]
 8002d0e:	2301      	movs	r3, #1
 8002d10:	9300      	str	r3, [sp, #0]
 8002d12:	f240 13dd 	movw	r3, #477	; 0x1dd
 8002d16:	f240 1209 	movw	r2, #265	; 0x109
 8002d1a:	21df      	movs	r1, #223	; 0xdf
 8002d1c:	f240 1009 	movw	r0, #265	; 0x109
 8002d20:	f001 fafe 	bl	8004320 <LCD_Line>
					if (valMap)
 8002d24:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d01d      	beq.n	8002d68 <main+0xfbc>
						LCD_Line(2 + 263, 223 + (255 - valMap), 2 + 263, 477, 1,
 8002d2c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002d30:	f5c3 73ef 	rsb	r3, r3, #478	; 0x1de
 8002d34:	b29c      	uxth	r4, r3
 8002d36:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002d3a:	b2d8      	uxtb	r0, r3
 8002d3c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	43db      	mvns	r3, r3
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	461a      	mov	r2, r3
 8002d48:	2100      	movs	r1, #0
 8002d4a:	f001 f9e2 	bl	8004112 <RGB>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	9301      	str	r3, [sp, #4]
 8002d52:	2301      	movs	r3, #1
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	f240 13dd 	movw	r3, #477	; 0x1dd
 8002d5a:	f240 1209 	movw	r2, #265	; 0x109
 8002d5e:	4621      	mov	r1, r4
 8002d60:	f240 1009 	movw	r0, #265	; 0x109
 8002d64:	f001 fadc 	bl	8004320 <LCD_Line>
								RGB(255 - (255 - valMap), 0, 255 - (255 - (255 - valMap))));

					LCD_Rect(267, 222, 265, 256, 1, BLUE);
 8002d68:	23ff      	movs	r3, #255	; 0xff
 8002d6a:	9301      	str	r3, [sp, #4]
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d74:	f240 1209 	movw	r2, #265	; 0x109
 8002d78:	21de      	movs	r1, #222	; 0xde
 8002d7a:	f240 100b 	movw	r0, #267	; 0x10b
 8002d7e:	f001 fb3d 	bl	80043fc <LCD_Rect>
					valMap = map(((int16_t)(humidity * 10)), MIN_HUMIDITY_X10, MAX_HUMIDITY_X10, 0, 255);
 8002d82:	4b69      	ldr	r3, [pc, #420]	; (8002f28 <main+0x117c>)
 8002d84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d88:	f04f 0200 	mov.w	r2, #0
 8002d8c:	4b65      	ldr	r3, [pc, #404]	; (8002f24 <main+0x1178>)
 8002d8e:	f7fd fc33 	bl	80005f8 <__aeabi_dmul>
 8002d92:	4602      	mov	r2, r0
 8002d94:	460b      	mov	r3, r1
 8002d96:	4610      	mov	r0, r2
 8002d98:	4619      	mov	r1, r3
 8002d9a:	f7fd fedd 	bl	8000b58 <__aeabi_d2iz>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	b21b      	sxth	r3, r3
 8002da2:	b298      	uxth	r0, r3
 8002da4:	23ff      	movs	r3, #255	; 0xff
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	2300      	movs	r3, #0
 8002daa:	f44f 7259 	mov.w	r2, #868	; 0x364
 8002dae:	2164      	movs	r1, #100	; 0x64
 8002db0:	f7fe ff3a 	bl	8001c28 <map>
 8002db4:	ec53 2b10 	vmov	r2, r3, d0
 8002db8:	4610      	mov	r0, r2
 8002dba:	4619      	mov	r1, r3
 8002dbc:	f7fd fecc 	bl	8000b58 <__aeabi_d2iz>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
					if (valMap < 0) valMap = 0;
 8002dc6:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	da02      	bge.n	8002dd4 <main+0x1028>
 8002dce:	2300      	movs	r3, #0
 8002dd0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
					if (valMap > 255) valMap = 255;
 8002dd4:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 8002dd8:	2bff      	cmp	r3, #255	; 0xff
 8002dda:	dd02      	ble.n	8002de2 <main+0x1036>
 8002ddc:	23ff      	movs	r3, #255	; 0xff
 8002dde:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
					LCD_Line(268 + 263, 223, 268 + 263, 477, 1, BLACK);
 8002de2:	2300      	movs	r3, #0
 8002de4:	9301      	str	r3, [sp, #4]
 8002de6:	2301      	movs	r3, #1
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	f240 13dd 	movw	r3, #477	; 0x1dd
 8002dee:	f240 2213 	movw	r2, #531	; 0x213
 8002df2:	21df      	movs	r1, #223	; 0xdf
 8002df4:	f240 2013 	movw	r0, #531	; 0x213
 8002df8:	f001 fa92 	bl	8004320 <LCD_Line>
					if (valMap)
 8002dfc:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d01d      	beq.n	8002e40 <main+0x1094>
						LCD_Line(268 + 263, 223 + (255 - valMap), 268 + 263, 477, 1,
 8002e04:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002e08:	f5c3 73ef 	rsb	r3, r3, #478	; 0x1de
 8002e0c:	b29c      	uxth	r4, r3
 8002e0e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002e12:	b2d8      	uxtb	r0, r3
 8002e14:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	43db      	mvns	r3, r3
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	461a      	mov	r2, r3
 8002e20:	2100      	movs	r1, #0
 8002e22:	f001 f976 	bl	8004112 <RGB>
 8002e26:	4603      	mov	r3, r0
 8002e28:	9301      	str	r3, [sp, #4]
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	9300      	str	r3, [sp, #0]
 8002e2e:	f240 13dd 	movw	r3, #477	; 0x1dd
 8002e32:	f240 2213 	movw	r2, #531	; 0x213
 8002e36:	4621      	mov	r1, r4
 8002e38:	f240 2013 	movw	r0, #531	; 0x213
 8002e3c:	f001 fa70 	bl	8004320 <LCD_Line>
								RGB(255 - (255 - valMap), 0, 255 - (255 - (255 - valMap))));

					LCD_Rect(533, 222, 265, 256, 1, BLUE);
 8002e40:	23ff      	movs	r3, #255	; 0xff
 8002e42:	9301      	str	r3, [sp, #4]
 8002e44:	2301      	movs	r3, #1
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e4c:	f240 1209 	movw	r2, #265	; 0x109
 8002e50:	21de      	movs	r1, #222	; 0xde
 8002e52:	f240 2015 	movw	r0, #533	; 0x215
 8002e56:	f001 fad1 	bl	80043fc <LCD_Rect>
					valMap = map(((int16_t)(pressure * 10)), MIN_PRESSURE_X10, MAX_PRESSURE_X10, 0, 255);
 8002e5a:	4b34      	ldr	r3, [pc, #208]	; (8002f2c <main+0x1180>)
 8002e5c:	881b      	ldrh	r3, [r3, #0]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	0092      	lsls	r2, r2, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	b298      	uxth	r0, r3
 8002e68:	23ff      	movs	r3, #255	; 0xff
 8002e6a:	9300      	str	r3, [sp, #0]
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	f642 129a 	movw	r2, #10650	; 0x299a
 8002e72:	f242 419a 	movw	r1, #9370	; 0x249a
 8002e76:	f7fe fed7 	bl	8001c28 <map>
 8002e7a:	ec53 2b10 	vmov	r2, r3, d0
 8002e7e:	4610      	mov	r0, r2
 8002e80:	4619      	mov	r1, r3
 8002e82:	f7fd fe69 	bl	8000b58 <__aeabi_d2iz>
 8002e86:	4603      	mov	r3, r0
 8002e88:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
					if (valMap < 0) valMap = 0;
 8002e8c:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	da02      	bge.n	8002e9a <main+0x10ee>
 8002e94:	2300      	movs	r3, #0
 8002e96:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
					if (valMap > 255) valMap = 255;
 8002e9a:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 8002e9e:	2bff      	cmp	r3, #255	; 0xff
 8002ea0:	dd02      	ble.n	8002ea8 <main+0x10fc>
 8002ea2:	23ff      	movs	r3, #255	; 0xff
 8002ea4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
					LCD_Line(534 + 263, 223, 534 + 263, 477, 1, BLACK);
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	9301      	str	r3, [sp, #4]
 8002eac:	2301      	movs	r3, #1
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	f240 13dd 	movw	r3, #477	; 0x1dd
 8002eb4:	f240 321d 	movw	r2, #797	; 0x31d
 8002eb8:	21df      	movs	r1, #223	; 0xdf
 8002eba:	f240 301d 	movw	r0, #797	; 0x31d
 8002ebe:	f001 fa2f 	bl	8004320 <LCD_Line>
					if (valMap)
 8002ec2:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d01d      	beq.n	8002f06 <main+0x115a>
						LCD_Line(534 + 263, 223 + (255 - valMap), 534 + 263, 477, 1,
 8002eca:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002ece:	f5c3 73ef 	rsb	r3, r3, #478	; 0x1de
 8002ed2:	b29c      	uxth	r4, r3
 8002ed4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002ed8:	b2d8      	uxtb	r0, r3
 8002eda:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	f001 f913 	bl	8004112 <RGB>
 8002eec:	4603      	mov	r3, r0
 8002eee:	9301      	str	r3, [sp, #4]
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	9300      	str	r3, [sp, #0]
 8002ef4:	f240 13dd 	movw	r3, #477	; 0x1dd
 8002ef8:	f240 321d 	movw	r2, #797	; 0x31d
 8002efc:	4621      	mov	r1, r4
 8002efe:	f240 301d 	movw	r0, #797	; 0x31d
 8002f02:	f001 fa0d 	bl	8004320 <LCD_Line>
								RGB(255 - (255 - valMap), 0, 255 - (255 - (255 - valMap))));

					if (!viewGraphs) {
 8002f06:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <main+0x1170>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f040 8168 	bne.w	80031e0 <main+0x1434>

						for (uint16_t i = 0; i < 263 ; i++) {
 8002f10:	2300      	movs	r3, #0
 8002f12:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8002f16:	e072      	b.n	8002ffe <main+0x1252>
 8002f18:	20000ccc 	.word	0x20000ccc
 8002f1c:	200004a8 	.word	0x200004a8
 8002f20:	200004b8 	.word	0x200004b8
 8002f24:	40240000 	.word	0x40240000
 8002f28:	200004c8 	.word	0x200004c8
 8002f2c:	200004f8 	.word	0x200004f8
							valMap = map(((int16_t)hT[i]), MIN_TEMPERATURE_X10, MAX_TEMPERATURE_X10, 0, 255);
 8002f30:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8002f34:	4a70      	ldr	r2, [pc, #448]	; (80030f8 <main+0x134c>)
 8002f36:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002f3a:	b298      	uxth	r0, r3
 8002f3c:	23ff      	movs	r3, #255	; 0xff
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	2300      	movs	r3, #0
 8002f42:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8002f46:	21c8      	movs	r1, #200	; 0xc8
 8002f48:	f7fe fe6e 	bl	8001c28 <map>
 8002f4c:	ec53 2b10 	vmov	r2, r3, d0
 8002f50:	4610      	mov	r0, r2
 8002f52:	4619      	mov	r1, r3
 8002f54:	f7fd fe00 	bl	8000b58 <__aeabi_d2iz>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
							if (valMap < 0) valMap = 0;
 8002f5e:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	da02      	bge.n	8002f6c <main+0x11c0>
 8002f66:	2300      	movs	r3, #0
 8002f68:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
							if (valMap > 255) valMap = 255;
 8002f6c:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 8002f70:	2bff      	cmp	r3, #255	; 0xff
 8002f72:	dd02      	ble.n	8002f7a <main+0x11ce>
 8002f74:	23ff      	movs	r3, #255	; 0xff
 8002f76:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
							LCD_Line(2 + (262 - i), 223, 2 + (262 - i), 477, 1, BLACK);
 8002f7a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8002f7e:	f5c3 7384 	rsb	r3, r3, #264	; 0x108
 8002f82:	b298      	uxth	r0, r3
 8002f84:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8002f88:	f5c3 7384 	rsb	r3, r3, #264	; 0x108
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	2300      	movs	r3, #0
 8002f90:	9301      	str	r3, [sp, #4]
 8002f92:	2301      	movs	r3, #1
 8002f94:	9300      	str	r3, [sp, #0]
 8002f96:	f240 13dd 	movw	r3, #477	; 0x1dd
 8002f9a:	21df      	movs	r1, #223	; 0xdf
 8002f9c:	f001 f9c0 	bl	8004320 <LCD_Line>
							if (valMap)
 8002fa0:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d025      	beq.n	8002ff4 <main+0x1248>
								LCD_Line(2 + (262 - i), 223 + (255 - valMap), 2 + (262 - i), 477, 1,
 8002fa8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8002fac:	f5c3 7384 	rsb	r3, r3, #264	; 0x108
 8002fb0:	b29c      	uxth	r4, r3
 8002fb2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002fb6:	f5c3 73ef 	rsb	r3, r3, #478	; 0x1de
 8002fba:	b29d      	uxth	r5, r3
 8002fbc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8002fc0:	f5c3 7384 	rsb	r3, r3, #264	; 0x108
 8002fc4:	b29e      	uxth	r6, r3
 8002fc6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002fca:	b2d8      	uxtb	r0, r3
 8002fcc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	43db      	mvns	r3, r3
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	2100      	movs	r1, #0
 8002fda:	f001 f89a 	bl	8004112 <RGB>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	9301      	str	r3, [sp, #4]
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	9300      	str	r3, [sp, #0]
 8002fe6:	f240 13dd 	movw	r3, #477	; 0x1dd
 8002fea:	4632      	mov	r2, r6
 8002fec:	4629      	mov	r1, r5
 8002fee:	4620      	mov	r0, r4
 8002ff0:	f001 f996 	bl	8004320 <LCD_Line>
						for (uint16_t i = 0; i < 263 ; i++) {
 8002ff4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8002ffe:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003002:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 8003006:	d993      	bls.n	8002f30 <main+0x1184>
										RGB(255 - (255 - valMap), 0, 255 - (255 - (255 - valMap))));
						}

						for (uint16_t i = 0; i < 263 ; i++) {
 8003008:	2300      	movs	r3, #0
 800300a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800300e:	e06a      	b.n	80030e6 <main+0x133a>
							valMap = map(((int16_t)hH[i]), MIN_HUMIDITY_X10, MAX_HUMIDITY_X10, 0, 255);
 8003010:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003014:	4a39      	ldr	r2, [pc, #228]	; (80030fc <main+0x1350>)
 8003016:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800301a:	b298      	uxth	r0, r3
 800301c:	23ff      	movs	r3, #255	; 0xff
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	2300      	movs	r3, #0
 8003022:	f44f 7259 	mov.w	r2, #868	; 0x364
 8003026:	2164      	movs	r1, #100	; 0x64
 8003028:	f7fe fdfe 	bl	8001c28 <map>
 800302c:	ec53 2b10 	vmov	r2, r3, d0
 8003030:	4610      	mov	r0, r2
 8003032:	4619      	mov	r1, r3
 8003034:	f7fd fd90 	bl	8000b58 <__aeabi_d2iz>
 8003038:	4603      	mov	r3, r0
 800303a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
							if (valMap < 0) valMap = 0;
 800303e:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 8003042:	2b00      	cmp	r3, #0
 8003044:	da02      	bge.n	800304c <main+0x12a0>
 8003046:	2300      	movs	r3, #0
 8003048:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
							if (valMap > 255) valMap = 255;
 800304c:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 8003050:	2bff      	cmp	r3, #255	; 0xff
 8003052:	dd02      	ble.n	800305a <main+0x12ae>
 8003054:	23ff      	movs	r3, #255	; 0xff
 8003056:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
							LCD_Line(268 + (262 - i), 223, 268 + (262 - i), 477, 1, BLACK);
 800305a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800305e:	f5c3 7304 	rsb	r3, r3, #528	; 0x210
 8003062:	3302      	adds	r3, #2
 8003064:	b298      	uxth	r0, r3
 8003066:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800306a:	f5c3 7304 	rsb	r3, r3, #528	; 0x210
 800306e:	3302      	adds	r3, #2
 8003070:	b29a      	uxth	r2, r3
 8003072:	2300      	movs	r3, #0
 8003074:	9301      	str	r3, [sp, #4]
 8003076:	2301      	movs	r3, #1
 8003078:	9300      	str	r3, [sp, #0]
 800307a:	f240 13dd 	movw	r3, #477	; 0x1dd
 800307e:	21df      	movs	r1, #223	; 0xdf
 8003080:	f001 f94e 	bl	8004320 <LCD_Line>
							if (valMap)
 8003084:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 8003088:	2b00      	cmp	r3, #0
 800308a:	d027      	beq.n	80030dc <main+0x1330>
								LCD_Line(268 + (262 - i), 223 + (255 - valMap), 268 + (262 - i), 477, 1,
 800308c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003090:	f5c3 7304 	rsb	r3, r3, #528	; 0x210
 8003094:	3302      	adds	r3, #2
 8003096:	b29c      	uxth	r4, r3
 8003098:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800309c:	f5c3 73ef 	rsb	r3, r3, #478	; 0x1de
 80030a0:	b29d      	uxth	r5, r3
 80030a2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80030a6:	f5c3 7304 	rsb	r3, r3, #528	; 0x210
 80030aa:	3302      	adds	r3, #2
 80030ac:	b29e      	uxth	r6, r3
 80030ae:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80030b2:	b2d8      	uxtb	r0, r3
 80030b4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	43db      	mvns	r3, r3
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	461a      	mov	r2, r3
 80030c0:	2100      	movs	r1, #0
 80030c2:	f001 f826 	bl	8004112 <RGB>
 80030c6:	4603      	mov	r3, r0
 80030c8:	9301      	str	r3, [sp, #4]
 80030ca:	2301      	movs	r3, #1
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	f240 13dd 	movw	r3, #477	; 0x1dd
 80030d2:	4632      	mov	r2, r6
 80030d4:	4629      	mov	r1, r5
 80030d6:	4620      	mov	r0, r4
 80030d8:	f001 f922 	bl	8004320 <LCD_Line>
						for (uint16_t i = 0; i < 263 ; i++) {
 80030dc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80030e0:	3301      	adds	r3, #1
 80030e2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80030e6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80030ea:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 80030ee:	d98f      	bls.n	8003010 <main+0x1264>
										RGB(255 - (255 - valMap), 0, 255 - (255 - (255 - valMap))));
						}

						for (uint16_t i = 0; i < 263 ; i++) {
 80030f0:	2300      	movs	r3, #0
 80030f2:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80030f6:	e06b      	b.n	80031d0 <main+0x1424>
 80030f8:	200004fc 	.word	0x200004fc
 80030fc:	200008e4 	.word	0x200008e4
							valMap = map(((int16_t)hP[i]), MIN_PRESSURE_X10, MAX_PRESSURE_X10, 0, 255);
 8003100:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003104:	4abb      	ldr	r2, [pc, #748]	; (80033f4 <main+0x1648>)
 8003106:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800310a:	b298      	uxth	r0, r3
 800310c:	23ff      	movs	r3, #255	; 0xff
 800310e:	9300      	str	r3, [sp, #0]
 8003110:	2300      	movs	r3, #0
 8003112:	f642 129a 	movw	r2, #10650	; 0x299a
 8003116:	f242 419a 	movw	r1, #9370	; 0x249a
 800311a:	f7fe fd85 	bl	8001c28 <map>
 800311e:	ec53 2b10 	vmov	r2, r3, d0
 8003122:	4610      	mov	r0, r2
 8003124:	4619      	mov	r1, r3
 8003126:	f7fd fd17 	bl	8000b58 <__aeabi_d2iz>
 800312a:	4603      	mov	r3, r0
 800312c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
							if (valMap < 0) valMap = 0;
 8003130:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 8003134:	2b00      	cmp	r3, #0
 8003136:	da02      	bge.n	800313e <main+0x1392>
 8003138:	2300      	movs	r3, #0
 800313a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
							if (valMap > 255) valMap = 255;
 800313e:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 8003142:	2bff      	cmp	r3, #255	; 0xff
 8003144:	dd02      	ble.n	800314c <main+0x13a0>
 8003146:	23ff      	movs	r3, #255	; 0xff
 8003148:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
							LCD_Line(534 + (262 - i), 223, 534 + (262 - i), 477, 1, BLACK);
 800314c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003150:	f5c3 7347 	rsb	r3, r3, #796	; 0x31c
 8003154:	b298      	uxth	r0, r3
 8003156:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800315a:	f5c3 7347 	rsb	r3, r3, #796	; 0x31c
 800315e:	b29a      	uxth	r2, r3
 8003160:	2300      	movs	r3, #0
 8003162:	9301      	str	r3, [sp, #4]
 8003164:	2301      	movs	r3, #1
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	f240 13dd 	movw	r3, #477	; 0x1dd
 800316c:	21df      	movs	r1, #223	; 0xdf
 800316e:	f001 f8d7 	bl	8004320 <LCD_Line>
							if (valMap)
 8003172:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 8003176:	2b00      	cmp	r3, #0
 8003178:	d025      	beq.n	80031c6 <main+0x141a>
								LCD_Line(534 + (262 - i), 223 + (255 - valMap), 534 + (262 - i), 477, 1,
 800317a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800317e:	f5c3 7347 	rsb	r3, r3, #796	; 0x31c
 8003182:	b29c      	uxth	r4, r3
 8003184:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8003188:	f5c3 73ef 	rsb	r3, r3, #478	; 0x1de
 800318c:	b29d      	uxth	r5, r3
 800318e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003192:	f5c3 7347 	rsb	r3, r3, #796	; 0x31c
 8003196:	b29e      	uxth	r6, r3
 8003198:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800319c:	b2d8      	uxtb	r0, r3
 800319e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	43db      	mvns	r3, r3
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	461a      	mov	r2, r3
 80031aa:	2100      	movs	r1, #0
 80031ac:	f000 ffb1 	bl	8004112 <RGB>
 80031b0:	4603      	mov	r3, r0
 80031b2:	9301      	str	r3, [sp, #4]
 80031b4:	2301      	movs	r3, #1
 80031b6:	9300      	str	r3, [sp, #0]
 80031b8:	f240 13dd 	movw	r3, #477	; 0x1dd
 80031bc:	4632      	mov	r2, r6
 80031be:	4629      	mov	r1, r5
 80031c0:	4620      	mov	r0, r4
 80031c2:	f001 f8ad 	bl	8004320 <LCD_Line>
						for (uint16_t i = 0; i < 263 ; i++) {
 80031c6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80031ca:	3301      	adds	r3, #1
 80031cc:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80031d0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80031d4:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 80031d8:	d992      	bls.n	8003100 <main+0x1354>
										RGB(255 - (255 - valMap), 0, 255 - (255 - (255 - valMap))));
						}

						//						for (uint32_t i = 0; i <= 65536; i++) TIM1->CCR1 = i;
						viewGraphs = 1;
 80031da:	4b87      	ldr	r3, [pc, #540]	; (80033f8 <main+0x164c>)
 80031dc:	2201      	movs	r2, #1
 80031de:	701a      	strb	r2, [r3, #0]
					}
				}
			}

			if (rx_index != 0) {
 80031e0:	4b86      	ldr	r3, [pc, #536]	; (80033fc <main+0x1650>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f000 8392 	beq.w	800390e <main+0x1b62>
				if (memcmp(rx_buffer, "TS", 2) == 0) {
 80031ea:	2202      	movs	r2, #2
 80031ec:	4984      	ldr	r1, [pc, #528]	; (8003400 <main+0x1654>)
 80031ee:	4885      	ldr	r0, [pc, #532]	; (8003404 <main+0x1658>)
 80031f0:	f006 fb92 	bl	8009918 <memcmp>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f040 808a 	bne.w	8003310 <main+0x1564>

					char val[2];

					val[0] = rx_buffer[2];
 80031fc:	4b81      	ldr	r3, [pc, #516]	; (8003404 <main+0x1658>)
 80031fe:	789b      	ldrb	r3, [r3, #2]
 8003200:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
					val[1] = rx_buffer[3];
 8003204:	4b7f      	ldr	r3, [pc, #508]	; (8003404 <main+0x1658>)
 8003206:	78db      	ldrb	r3, [r3, #3]
 8003208:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
					DS3231_setHrs(atoi(val));
 800320c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003210:	4618      	mov	r0, r3
 8003212:	f006 fb53 	bl	80098bc <atoi>
 8003216:	4603      	mov	r3, r0
 8003218:	b2db      	uxtb	r3, r3
 800321a:	4618      	mov	r0, r3
 800321c:	f7fe fc64 	bl	8001ae8 <DS3231_setHrs>

					val[0] = rx_buffer[4];
 8003220:	4b78      	ldr	r3, [pc, #480]	; (8003404 <main+0x1658>)
 8003222:	791b      	ldrb	r3, [r3, #4]
 8003224:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
					val[1] = rx_buffer[5];
 8003228:	4b76      	ldr	r3, [pc, #472]	; (8003404 <main+0x1658>)
 800322a:	795b      	ldrb	r3, [r3, #5]
 800322c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
					DS3231_setMin(atoi(val));
 8003230:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003234:	4618      	mov	r0, r3
 8003236:	f006 fb41 	bl	80098bc <atoi>
 800323a:	4603      	mov	r3, r0
 800323c:	b2db      	uxtb	r3, r3
 800323e:	4618      	mov	r0, r3
 8003240:	f7fe fc32 	bl	8001aa8 <DS3231_setMin>

					val[0] = 0;
 8003244:	2300      	movs	r3, #0
 8003246:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
					val[1] = 0;
 800324a:	2300      	movs	r3, #0
 800324c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
					DS3231_setSec(atoi(val));
 8003250:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003254:	4618      	mov	r0, r3
 8003256:	f006 fb31 	bl	80098bc <atoi>
 800325a:	4603      	mov	r3, r0
 800325c:	b2db      	uxtb	r3, r3
 800325e:	4618      	mov	r0, r3
 8003260:	f7fe fc02 	bl	8001a68 <DS3231_setSec>

					val[0] = rx_buffer[6];
 8003264:	4b67      	ldr	r3, [pc, #412]	; (8003404 <main+0x1658>)
 8003266:	799b      	ldrb	r3, [r3, #6]
 8003268:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
					val[1] = rx_buffer[7];
 800326c:	4b65      	ldr	r3, [pc, #404]	; (8003404 <main+0x1658>)
 800326e:	79db      	ldrb	r3, [r3, #7]
 8003270:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
					DS3231_setDate(atoi(val));
 8003274:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003278:	4618      	mov	r0, r3
 800327a:	f006 fb1f 	bl	80098bc <atoi>
 800327e:	4603      	mov	r3, r0
 8003280:	b2db      	uxtb	r3, r3
 8003282:	4618      	mov	r0, r3
 8003284:	f7fe fc70 	bl	8001b68 <DS3231_setDate>

					val[0] = rx_buffer[8];
 8003288:	4b5e      	ldr	r3, [pc, #376]	; (8003404 <main+0x1658>)
 800328a:	7a1b      	ldrb	r3, [r3, #8]
 800328c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
					val[1] = rx_buffer[9];
 8003290:	4b5c      	ldr	r3, [pc, #368]	; (8003404 <main+0x1658>)
 8003292:	7a5b      	ldrb	r3, [r3, #9]
 8003294:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
					DS3231_setMonth(atoi(val));
 8003298:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800329c:	4618      	mov	r0, r3
 800329e:	f006 fb0d 	bl	80098bc <atoi>
 80032a2:	4603      	mov	r3, r0
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7fe fc7e 	bl	8001ba8 <DS3231_setMonth>

					val[0] = rx_buffer[10];
 80032ac:	4b55      	ldr	r3, [pc, #340]	; (8003404 <main+0x1658>)
 80032ae:	7a9b      	ldrb	r3, [r3, #10]
 80032b0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
					val[1] = rx_buffer[11];
 80032b4:	4b53      	ldr	r3, [pc, #332]	; (8003404 <main+0x1658>)
 80032b6:	7adb      	ldrb	r3, [r3, #11]
 80032b8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
					DS3231_setYear(atoi(val));
 80032bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80032c0:	4618      	mov	r0, r3
 80032c2:	f006 fafb 	bl	80098bc <atoi>
 80032c6:	4603      	mov	r3, r0
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7fe fc8c 	bl	8001be8 <DS3231_setYear>

					val[1] = rx_buffer[12];
 80032d0:	4b4c      	ldr	r3, [pc, #304]	; (8003404 <main+0x1658>)
 80032d2:	7b1b      	ldrb	r3, [r3, #12]
 80032d4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
					DS3231_setDay(atoi(val));
 80032d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80032dc:	4618      	mov	r0, r3
 80032de:	f006 faed 	bl	80098bc <atoi>
 80032e2:	4603      	mov	r3, r0
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7fe fc1e 	bl	8001b28 <DS3231_setDay>

					for (uint32_t i = 0; i <= 65536; i++) TIM1->CCR1 = i;
 80032ec:	2300      	movs	r3, #0
 80032ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80032f2:	e008      	b.n	8003306 <main+0x155a>
 80032f4:	4a44      	ldr	r2, [pc, #272]	; (8003408 <main+0x165c>)
 80032f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032fa:	6353      	str	r3, [r2, #52]	; 0x34
 80032fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003300:	3301      	adds	r3, #1
 8003302:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003306:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800330a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800330e:	d9f1      	bls.n	80032f4 <main+0x1548>
				}

				if (memcmp(rx_buffer, "CE", 2) == 0) {
 8003310:	2202      	movs	r2, #2
 8003312:	493e      	ldr	r1, [pc, #248]	; (800340c <main+0x1660>)
 8003314:	483b      	ldr	r0, [pc, #236]	; (8003404 <main+0x1658>)
 8003316:	f006 faff 	bl	8009918 <memcmp>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d122      	bne.n	8003366 <main+0x15ba>
					for (uint16_t i = 0; i < 4096; i++) AT24XX_Update(i, 0);
 8003320:	2300      	movs	r3, #0
 8003322:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 8003326:	e00a      	b.n	800333e <main+0x1592>
 8003328:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800332c:	2100      	movs	r1, #0
 800332e:	4618      	mov	r0, r3
 8003330:	f7fd fed7 	bl	80010e2 <AT24XX_Update>
 8003334:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8003338:	3301      	adds	r3, #1
 800333a:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 800333e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8003342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003346:	d3ef      	bcc.n	8003328 <main+0x157c>
					uint8_t uartTransmit[] = "EEPROM IS CLEANED\r\n";
 8003348:	4b31      	ldr	r3, [pc, #196]	; (8003410 <main+0x1664>)
 800334a:	f107 0420 	add.w	r4, r7, #32
 800334e:	461d      	mov	r5, r3
 8003350:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003352:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003354:	682b      	ldr	r3, [r5, #0]
 8003356:	6023      	str	r3, [r4, #0]
					HAL_UART_Transmit(&huart1, uartTransmit, sizeof(uartTransmit), 100);
 8003358:	f107 0120 	add.w	r1, r7, #32
 800335c:	2364      	movs	r3, #100	; 0x64
 800335e:	2214      	movs	r2, #20
 8003360:	482c      	ldr	r0, [pc, #176]	; (8003414 <main+0x1668>)
 8003362:	f005 fe66 	bl	8009032 <HAL_UART_Transmit>
				}

				if (memcmp(rx_buffer, "RS", 2) == 0) {
 8003366:	2202      	movs	r2, #2
 8003368:	492b      	ldr	r1, [pc, #172]	; (8003418 <main+0x166c>)
 800336a:	4826      	ldr	r0, [pc, #152]	; (8003404 <main+0x1658>)
 800336c:	f006 fad4 	bl	8009918 <memcmp>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	f040 82b6 	bne.w	80038e4 <main+0x1b38>

					char valT[4] = { 0 };
 8003378:	2300      	movs	r3, #0
 800337a:	61fb      	str	r3, [r7, #28]

					for (uint8_t i = 0; i < 4; i++) valT[i] = rx_buffer[2 + i];
 800337c:	2300      	movs	r3, #0
 800337e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 8003382:	e00f      	b.n	80033a4 <main+0x15f8>
 8003384:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8003388:	1c9a      	adds	r2, r3, #2
 800338a:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800338e:	491d      	ldr	r1, [pc, #116]	; (8003404 <main+0x1658>)
 8003390:	5c8a      	ldrb	r2, [r1, r2]
 8003392:	33a8      	adds	r3, #168	; 0xa8
 8003394:	443b      	add	r3, r7
 8003396:	f803 2c8c 	strb.w	r2, [r3, #-140]
 800339a:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800339e:	3301      	adds	r3, #1
 80033a0:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 80033a4:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 80033a8:	2b03      	cmp	r3, #3
 80033aa:	d9eb      	bls.n	8003384 <main+0x15d8>

					temperatureRemote = atoi(valT);
 80033ac:	f107 031c 	add.w	r3, r7, #28
 80033b0:	4618      	mov	r0, r3
 80033b2:	f006 fa83 	bl	80098bc <atoi>
 80033b6:	4603      	mov	r3, r0
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7fd f8b3 	bl	8000524 <__aeabi_i2d>
 80033be:	4602      	mov	r2, r0
 80033c0:	460b      	mov	r3, r1
 80033c2:	4916      	ldr	r1, [pc, #88]	; (800341c <main+0x1670>)
 80033c4:	e9c1 2300 	strd	r2, r3, [r1]
					temperatureRemote = temperatureRemote / 10;
 80033c8:	4b14      	ldr	r3, [pc, #80]	; (800341c <main+0x1670>)
 80033ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033ce:	f04f 0200 	mov.w	r2, #0
 80033d2:	4b13      	ldr	r3, [pc, #76]	; (8003420 <main+0x1674>)
 80033d4:	f7fd fa3a 	bl	800084c <__aeabi_ddiv>
 80033d8:	4602      	mov	r2, r0
 80033da:	460b      	mov	r3, r1
 80033dc:	490f      	ldr	r1, [pc, #60]	; (800341c <main+0x1670>)
 80033de:	e9c1 2300 	strd	r2, r3, [r1]

					char valH[3] = { 0 };
 80033e2:	4b10      	ldr	r3, [pc, #64]	; (8003424 <main+0x1678>)
 80033e4:	881b      	ldrh	r3, [r3, #0]
 80033e6:	833b      	strh	r3, [r7, #24]
 80033e8:	2300      	movs	r3, #0
 80033ea:	76bb      	strb	r3, [r7, #26]

					for (uint8_t i = 0; i < 3; i++) valH[i] = rx_buffer[6 + i];
 80033ec:	2300      	movs	r3, #0
 80033ee:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
 80033f2:	e029      	b.n	8003448 <main+0x169c>
 80033f4:	20000ccc 	.word	0x20000ccc
 80033f8:	200004a8 	.word	0x200004a8
 80033fc:	200010c4 	.word	0x200010c4
 8003400:	0800f268 	.word	0x0800f268
 8003404:	200010b4 	.word	0x200010b4
 8003408:	40010000 	.word	0x40010000
 800340c:	0800f26c 	.word	0x0800f26c
 8003410:	0800f294 	.word	0x0800f294
 8003414:	20000414 	.word	0x20000414
 8003418:	0800f270 	.word	0x0800f270
 800341c:	200004d8 	.word	0x200004d8
 8003420:	40240000 	.word	0x40240000
 8003424:	0800f2a8 	.word	0x0800f2a8
 8003428:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800342c:	1d9a      	adds	r2, r3, #6
 800342e:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8003432:	499d      	ldr	r1, [pc, #628]	; (80036a8 <main+0x18fc>)
 8003434:	5c8a      	ldrb	r2, [r1, r2]
 8003436:	33a8      	adds	r3, #168	; 0xa8
 8003438:	443b      	add	r3, r7
 800343a:	f803 2c90 	strb.w	r2, [r3, #-144]
 800343e:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8003442:	3301      	adds	r3, #1
 8003444:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
 8003448:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800344c:	2b02      	cmp	r3, #2
 800344e:	d9eb      	bls.n	8003428 <main+0x167c>

					humidityRemote = atoi(valH);
 8003450:	f107 0318 	add.w	r3, r7, #24
 8003454:	4618      	mov	r0, r3
 8003456:	f006 fa31 	bl	80098bc <atoi>
 800345a:	4603      	mov	r3, r0
 800345c:	4618      	mov	r0, r3
 800345e:	f7fd f861 	bl	8000524 <__aeabi_i2d>
 8003462:	4602      	mov	r2, r0
 8003464:	460b      	mov	r3, r1
 8003466:	4991      	ldr	r1, [pc, #580]	; (80036ac <main+0x1900>)
 8003468:	e9c1 2300 	strd	r2, r3, [r1]
					humidityRemote = humidityRemote / 10;
 800346c:	4b8f      	ldr	r3, [pc, #572]	; (80036ac <main+0x1900>)
 800346e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003472:	f04f 0200 	mov.w	r2, #0
 8003476:	4b8e      	ldr	r3, [pc, #568]	; (80036b0 <main+0x1904>)
 8003478:	f7fd f9e8 	bl	800084c <__aeabi_ddiv>
 800347c:	4602      	mov	r2, r0
 800347e:	460b      	mov	r3, r1
 8003480:	498a      	ldr	r1, [pc, #552]	; (80036ac <main+0x1900>)
 8003482:	e9c1 2300 	strd	r2, r3, [r1]

					if ((temperatureRemote != temperatureRemoteLast && temperatureRemote < 85 && temperatureRemote > -40) ||
 8003486:	4b8b      	ldr	r3, [pc, #556]	; (80036b4 <main+0x1908>)
 8003488:	e9d3 0100 	ldrd	r0, r1, [r3]
 800348c:	4b8a      	ldr	r3, [pc, #552]	; (80036b8 <main+0x190c>)
 800348e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003492:	f7fd fb19 	bl	8000ac8 <__aeabi_dcmpeq>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d115      	bne.n	80034c8 <main+0x171c>
 800349c:	4b85      	ldr	r3, [pc, #532]	; (80036b4 <main+0x1908>)
 800349e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034a2:	f04f 0200 	mov.w	r2, #0
 80034a6:	4b85      	ldr	r3, [pc, #532]	; (80036bc <main+0x1910>)
 80034a8:	f7fd fb18 	bl	8000adc <__aeabi_dcmplt>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00a      	beq.n	80034c8 <main+0x171c>
 80034b2:	4b80      	ldr	r3, [pc, #512]	; (80036b4 <main+0x1908>)
 80034b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034b8:	f04f 0200 	mov.w	r2, #0
 80034bc:	4b80      	ldr	r3, [pc, #512]	; (80036c0 <main+0x1914>)
 80034be:	f7fd fb2b 	bl	8000b18 <__aeabi_dcmpgt>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d118      	bne.n	80034fa <main+0x174e>
							(humidityRemote != humidityRemoteLast && humidityRemote > 0)) {
 80034c8:	4b78      	ldr	r3, [pc, #480]	; (80036ac <main+0x1900>)
 80034ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034ce:	4b7d      	ldr	r3, [pc, #500]	; (80036c4 <main+0x1918>)
 80034d0:	e9d3 2300 	ldrd	r2, r3, [r3]
					if ((temperatureRemote != temperatureRemoteLast && temperatureRemote < 85 && temperatureRemote > -40) ||
 80034d4:	f7fd faf8 	bl	8000ac8 <__aeabi_dcmpeq>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f040 8202 	bne.w	80038e4 <main+0x1b38>
							(humidityRemote != humidityRemoteLast && humidityRemote > 0)) {
 80034e0:	4b72      	ldr	r3, [pc, #456]	; (80036ac <main+0x1900>)
 80034e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034e6:	f04f 0200 	mov.w	r2, #0
 80034ea:	f04f 0300 	mov.w	r3, #0
 80034ee:	f7fd fb13 	bl	8000b18 <__aeabi_dcmpgt>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f000 81f5 	beq.w	80038e4 <main+0x1b38>

						remoteSensorLastUpdate = 0;
 80034fa:	4b73      	ldr	r3, [pc, #460]	; (80036c8 <main+0x191c>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	801a      	strh	r2, [r3, #0]

						sprintf(clockPrint, "%02d", rtcSecLast);
 8003500:	4b72      	ldr	r3, [pc, #456]	; (80036cc <main+0x1920>)
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	461a      	mov	r2, r3
 8003506:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800350a:	4971      	ldr	r1, [pc, #452]	; (80036d0 <main+0x1924>)
 800350c:	4618      	mov	r0, r3
 800350e:	f007 f8dd 	bl	800a6cc <siprintf>
						LCD_Font(375, 40, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 8003512:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003516:	2300      	movs	r3, #0
 8003518:	9301      	str	r3, [sp, #4]
 800351a:	2301      	movs	r3, #1
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	4b6d      	ldr	r3, [pc, #436]	; (80036d4 <main+0x1928>)
 8003520:	2128      	movs	r1, #40	; 0x28
 8003522:	f240 1077 	movw	r0, #375	; 0x177
 8003526:	f001 f998 	bl	800485a <LCD_Font>

						char weatherPrintRemoteT[5];
						if (temperatureRemoteLast <= -10) {
 800352a:	4b63      	ldr	r3, [pc, #396]	; (80036b8 <main+0x190c>)
 800352c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003530:	f04f 0200 	mov.w	r2, #0
 8003534:	4b68      	ldr	r3, [pc, #416]	; (80036d8 <main+0x192c>)
 8003536:	f7fd fadb 	bl	8000af0 <__aeabi_dcmple>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d014      	beq.n	800356a <main+0x17be>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 8003540:	4b5d      	ldr	r3, [pc, #372]	; (80036b8 <main+0x190c>)
 8003542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003546:	f107 0010 	add.w	r0, r7, #16
 800354a:	4964      	ldr	r1, [pc, #400]	; (80036dc <main+0x1930>)
 800354c:	f007 f8be 	bl	800a6cc <siprintf>
							LCD_Font(353, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8003550:	f107 0210 	add.w	r2, r7, #16
 8003554:	2300      	movs	r3, #0
 8003556:	9301      	str	r3, [sp, #4]
 8003558:	2301      	movs	r3, #1
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	4b5d      	ldr	r3, [pc, #372]	; (80036d4 <main+0x1928>)
 800355e:	215a      	movs	r1, #90	; 0x5a
 8003560:	f240 1061 	movw	r0, #353	; 0x161
 8003564:	f001 f979 	bl	800485a <LCD_Font>
 8003568:	e076      	b.n	8003658 <main+0x18ac>
						}
						else if (temperatureRemoteLast < 0 && temperatureRemoteLast > -10) {
 800356a:	4b53      	ldr	r3, [pc, #332]	; (80036b8 <main+0x190c>)
 800356c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003570:	f04f 0200 	mov.w	r2, #0
 8003574:	f04f 0300 	mov.w	r3, #0
 8003578:	f7fd fab0 	bl	8000adc <__aeabi_dcmplt>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d01f      	beq.n	80035c2 <main+0x1816>
 8003582:	4b4d      	ldr	r3, [pc, #308]	; (80036b8 <main+0x190c>)
 8003584:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003588:	f04f 0200 	mov.w	r2, #0
 800358c:	4b52      	ldr	r3, [pc, #328]	; (80036d8 <main+0x192c>)
 800358e:	f7fd fac3 	bl	8000b18 <__aeabi_dcmpgt>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d014      	beq.n	80035c2 <main+0x1816>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 8003598:	4b47      	ldr	r3, [pc, #284]	; (80036b8 <main+0x190c>)
 800359a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359e:	f107 0010 	add.w	r0, r7, #16
 80035a2:	494e      	ldr	r1, [pc, #312]	; (80036dc <main+0x1930>)
 80035a4:	f007 f892 	bl	800a6cc <siprintf>
							LCD_Font(385, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 80035a8:	f107 0210 	add.w	r2, r7, #16
 80035ac:	2300      	movs	r3, #0
 80035ae:	9301      	str	r3, [sp, #4]
 80035b0:	2301      	movs	r3, #1
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	4b47      	ldr	r3, [pc, #284]	; (80036d4 <main+0x1928>)
 80035b6:	215a      	movs	r1, #90	; 0x5a
 80035b8:	f240 1081 	movw	r0, #385	; 0x181
 80035bc:	f001 f94d 	bl	800485a <LCD_Font>
 80035c0:	e04a      	b.n	8003658 <main+0x18ac>
						}
						else if (temperatureRemoteLast > 0 && temperatureRemoteLast < 10) {
 80035c2:	4b3d      	ldr	r3, [pc, #244]	; (80036b8 <main+0x190c>)
 80035c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035c8:	f04f 0200 	mov.w	r2, #0
 80035cc:	f04f 0300 	mov.w	r3, #0
 80035d0:	f7fd faa2 	bl	8000b18 <__aeabi_dcmpgt>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d01f      	beq.n	800361a <main+0x186e>
 80035da:	4b37      	ldr	r3, [pc, #220]	; (80036b8 <main+0x190c>)
 80035dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035e0:	f04f 0200 	mov.w	r2, #0
 80035e4:	4b32      	ldr	r3, [pc, #200]	; (80036b0 <main+0x1904>)
 80035e6:	f7fd fa79 	bl	8000adc <__aeabi_dcmplt>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d014      	beq.n	800361a <main+0x186e>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 80035f0:	4b31      	ldr	r3, [pc, #196]	; (80036b8 <main+0x190c>)
 80035f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f6:	f107 0010 	add.w	r0, r7, #16
 80035fa:	4939      	ldr	r1, [pc, #228]	; (80036e0 <main+0x1934>)
 80035fc:	f007 f866 	bl	800a6cc <siprintf>
							LCD_Font(362, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8003600:	f107 0210 	add.w	r2, r7, #16
 8003604:	2300      	movs	r3, #0
 8003606:	9301      	str	r3, [sp, #4]
 8003608:	2301      	movs	r3, #1
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	4b31      	ldr	r3, [pc, #196]	; (80036d4 <main+0x1928>)
 800360e:	215a      	movs	r1, #90	; 0x5a
 8003610:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 8003614:	f001 f921 	bl	800485a <LCD_Font>
 8003618:	e01e      	b.n	8003658 <main+0x18ac>
						}
						else if (temperatureRemoteLast >= 10) {
 800361a:	4b27      	ldr	r3, [pc, #156]	; (80036b8 <main+0x190c>)
 800361c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003620:	f04f 0200 	mov.w	r2, #0
 8003624:	4b22      	ldr	r3, [pc, #136]	; (80036b0 <main+0x1904>)
 8003626:	f7fd fa6d 	bl	8000b04 <__aeabi_dcmpge>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d013      	beq.n	8003658 <main+0x18ac>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 8003630:	4b21      	ldr	r3, [pc, #132]	; (80036b8 <main+0x190c>)
 8003632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003636:	f107 0010 	add.w	r0, r7, #16
 800363a:	4929      	ldr	r1, [pc, #164]	; (80036e0 <main+0x1934>)
 800363c:	f007 f846 	bl	800a6cc <siprintf>
							LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8003640:	f107 0210 	add.w	r2, r7, #16
 8003644:	2300      	movs	r3, #0
 8003646:	9301      	str	r3, [sp, #4]
 8003648:	2301      	movs	r3, #1
 800364a:	9300      	str	r3, [sp, #0]
 800364c:	4b21      	ldr	r3, [pc, #132]	; (80036d4 <main+0x1928>)
 800364e:	215a      	movs	r1, #90	; 0x5a
 8003650:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8003654:	f001 f901 	bl	800485a <LCD_Font>
						}
						temperatureRemoteLast = temperatureRemote;
 8003658:	4b16      	ldr	r3, [pc, #88]	; (80036b4 <main+0x1908>)
 800365a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365e:	4916      	ldr	r1, [pc, #88]	; (80036b8 <main+0x190c>)
 8003660:	e9c1 2300 	strd	r2, r3, [r1]
						if (temperatureRemoteLast <= -10) {
 8003664:	4b14      	ldr	r3, [pc, #80]	; (80036b8 <main+0x190c>)
 8003666:	e9d3 0100 	ldrd	r0, r1, [r3]
 800366a:	f04f 0200 	mov.w	r2, #0
 800366e:	4b1a      	ldr	r3, [pc, #104]	; (80036d8 <main+0x192c>)
 8003670:	f7fd fa3e 	bl	8000af0 <__aeabi_dcmple>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d034      	beq.n	80036e4 <main+0x1938>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 800367a:	4b0f      	ldr	r3, [pc, #60]	; (80036b8 <main+0x190c>)
 800367c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003680:	f107 0010 	add.w	r0, r7, #16
 8003684:	4915      	ldr	r1, [pc, #84]	; (80036dc <main+0x1930>)
 8003686:	f007 f821 	bl	800a6cc <siprintf>
							LCD_Font(353, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 800368a:	f107 0210 	add.w	r2, r7, #16
 800368e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003692:	9301      	str	r3, [sp, #4]
 8003694:	2301      	movs	r3, #1
 8003696:	9300      	str	r3, [sp, #0]
 8003698:	4b0e      	ldr	r3, [pc, #56]	; (80036d4 <main+0x1928>)
 800369a:	215a      	movs	r1, #90	; 0x5a
 800369c:	f240 1061 	movw	r0, #353	; 0x161
 80036a0:	f001 f8db 	bl	800485a <LCD_Font>
 80036a4:	e098      	b.n	80037d8 <main+0x1a2c>
 80036a6:	bf00      	nop
 80036a8:	200010b4 	.word	0x200010b4
 80036ac:	200004e8 	.word	0x200004e8
 80036b0:	40240000 	.word	0x40240000
 80036b4:	200004d8 	.word	0x200004d8
 80036b8:	200004e0 	.word	0x200004e0
 80036bc:	40554000 	.word	0x40554000
 80036c0:	c0440000 	.word	0xc0440000
 80036c4:	200004f0 	.word	0x200004f0
 80036c8:	20000004 	.word	0x20000004
 80036cc:	20000000 	.word	0x20000000
 80036d0:	0800f228 	.word	0x0800f228
 80036d4:	08011a64 	.word	0x08011a64
 80036d8:	c0240000 	.word	0xc0240000
 80036dc:	0800f274 	.word	0x0800f274
 80036e0:	0800f27c 	.word	0x0800f27c
						}
						else if (temperatureRemoteLast < 0 && temperatureRemoteLast > -10) {
 80036e4:	4bab      	ldr	r3, [pc, #684]	; (8003994 <main+0x1be8>)
 80036e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036ea:	f04f 0200 	mov.w	r2, #0
 80036ee:	f04f 0300 	mov.w	r3, #0
 80036f2:	f7fd f9f3 	bl	8000adc <__aeabi_dcmplt>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d020      	beq.n	800373e <main+0x1992>
 80036fc:	4ba5      	ldr	r3, [pc, #660]	; (8003994 <main+0x1be8>)
 80036fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003702:	f04f 0200 	mov.w	r2, #0
 8003706:	4ba4      	ldr	r3, [pc, #656]	; (8003998 <main+0x1bec>)
 8003708:	f7fd fa06 	bl	8000b18 <__aeabi_dcmpgt>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d015      	beq.n	800373e <main+0x1992>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 8003712:	4ba0      	ldr	r3, [pc, #640]	; (8003994 <main+0x1be8>)
 8003714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003718:	f107 0010 	add.w	r0, r7, #16
 800371c:	499f      	ldr	r1, [pc, #636]	; (800399c <main+0x1bf0>)
 800371e:	f006 ffd5 	bl	800a6cc <siprintf>
							LCD_Font(385, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 8003722:	f107 0210 	add.w	r2, r7, #16
 8003726:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800372a:	9301      	str	r3, [sp, #4]
 800372c:	2301      	movs	r3, #1
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	4b9b      	ldr	r3, [pc, #620]	; (80039a0 <main+0x1bf4>)
 8003732:	215a      	movs	r1, #90	; 0x5a
 8003734:	f240 1081 	movw	r0, #385	; 0x181
 8003738:	f001 f88f 	bl	800485a <LCD_Font>
 800373c:	e04c      	b.n	80037d8 <main+0x1a2c>
						}
						else if (temperatureRemoteLast > 0 && temperatureRemoteLast < 10) {
 800373e:	4b95      	ldr	r3, [pc, #596]	; (8003994 <main+0x1be8>)
 8003740:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003744:	f04f 0200 	mov.w	r2, #0
 8003748:	f04f 0300 	mov.w	r3, #0
 800374c:	f7fd f9e4 	bl	8000b18 <__aeabi_dcmpgt>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d020      	beq.n	8003798 <main+0x19ec>
 8003756:	4b8f      	ldr	r3, [pc, #572]	; (8003994 <main+0x1be8>)
 8003758:	e9d3 0100 	ldrd	r0, r1, [r3]
 800375c:	f04f 0200 	mov.w	r2, #0
 8003760:	4b90      	ldr	r3, [pc, #576]	; (80039a4 <main+0x1bf8>)
 8003762:	f7fd f9bb 	bl	8000adc <__aeabi_dcmplt>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d015      	beq.n	8003798 <main+0x19ec>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 800376c:	4b89      	ldr	r3, [pc, #548]	; (8003994 <main+0x1be8>)
 800376e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003772:	f107 0010 	add.w	r0, r7, #16
 8003776:	498c      	ldr	r1, [pc, #560]	; (80039a8 <main+0x1bfc>)
 8003778:	f006 ffa8 	bl	800a6cc <siprintf>
							LCD_Font(362, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 800377c:	f107 0210 	add.w	r2, r7, #16
 8003780:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003784:	9301      	str	r3, [sp, #4]
 8003786:	2301      	movs	r3, #1
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	4b85      	ldr	r3, [pc, #532]	; (80039a0 <main+0x1bf4>)
 800378c:	215a      	movs	r1, #90	; 0x5a
 800378e:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 8003792:	f001 f862 	bl	800485a <LCD_Font>
 8003796:	e01f      	b.n	80037d8 <main+0x1a2c>
						}
						else if (temperatureRemoteLast >= 10) {
 8003798:	4b7e      	ldr	r3, [pc, #504]	; (8003994 <main+0x1be8>)
 800379a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800379e:	f04f 0200 	mov.w	r2, #0
 80037a2:	4b80      	ldr	r3, [pc, #512]	; (80039a4 <main+0x1bf8>)
 80037a4:	f7fd f9ae 	bl	8000b04 <__aeabi_dcmpge>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d014      	beq.n	80037d8 <main+0x1a2c>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 80037ae:	4b79      	ldr	r3, [pc, #484]	; (8003994 <main+0x1be8>)
 80037b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b4:	f107 0010 	add.w	r0, r7, #16
 80037b8:	497b      	ldr	r1, [pc, #492]	; (80039a8 <main+0x1bfc>)
 80037ba:	f006 ff87 	bl	800a6cc <siprintf>
							LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 80037be:	f107 0210 	add.w	r2, r7, #16
 80037c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037c6:	9301      	str	r3, [sp, #4]
 80037c8:	2301      	movs	r3, #1
 80037ca:	9300      	str	r3, [sp, #0]
 80037cc:	4b74      	ldr	r3, [pc, #464]	; (80039a0 <main+0x1bf4>)
 80037ce:	215a      	movs	r1, #90	; 0x5a
 80037d0:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 80037d4:	f001 f841 	bl	800485a <LCD_Font>
						}


						char weatherPrintRemoteH[4];

						if (humidityRemoteLast >= 10) {
 80037d8:	4b74      	ldr	r3, [pc, #464]	; (80039ac <main+0x1c00>)
 80037da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037de:	f04f 0200 	mov.w	r2, #0
 80037e2:	4b70      	ldr	r3, [pc, #448]	; (80039a4 <main+0x1bf8>)
 80037e4:	f7fd f98e 	bl	8000b04 <__aeabi_dcmpge>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d014      	beq.n	8003818 <main+0x1a6c>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 80037ee:	4b6f      	ldr	r3, [pc, #444]	; (80039ac <main+0x1c00>)
 80037f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f4:	f107 000c 	add.w	r0, r7, #12
 80037f8:	4968      	ldr	r1, [pc, #416]	; (800399c <main+0x1bf0>)
 80037fa:	f006 ff67 	bl	800a6cc <siprintf>
							LCD_Font(371, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 80037fe:	f107 020c 	add.w	r2, r7, #12
 8003802:	2300      	movs	r3, #0
 8003804:	9301      	str	r3, [sp, #4]
 8003806:	2301      	movs	r3, #1
 8003808:	9300      	str	r3, [sp, #0]
 800380a:	4b65      	ldr	r3, [pc, #404]	; (80039a0 <main+0x1bf4>)
 800380c:	2128      	movs	r1, #40	; 0x28
 800380e:	f240 1073 	movw	r0, #371	; 0x173
 8003812:	f001 f822 	bl	800485a <LCD_Font>
 8003816:	e01e      	b.n	8003856 <main+0x1aaa>
						}
						else if (humidityRemoteLast < 10) {
 8003818:	4b64      	ldr	r3, [pc, #400]	; (80039ac <main+0x1c00>)
 800381a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800381e:	f04f 0200 	mov.w	r2, #0
 8003822:	4b60      	ldr	r3, [pc, #384]	; (80039a4 <main+0x1bf8>)
 8003824:	f7fd f95a 	bl	8000adc <__aeabi_dcmplt>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d013      	beq.n	8003856 <main+0x1aaa>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 800382e:	4b5f      	ldr	r3, [pc, #380]	; (80039ac <main+0x1c00>)
 8003830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003834:	f107 000c 	add.w	r0, r7, #12
 8003838:	4958      	ldr	r1, [pc, #352]	; (800399c <main+0x1bf0>)
 800383a:	f006 ff47 	bl	800a6cc <siprintf>
							LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 800383e:	f107 020c 	add.w	r2, r7, #12
 8003842:	2300      	movs	r3, #0
 8003844:	9301      	str	r3, [sp, #4]
 8003846:	2301      	movs	r3, #1
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	4b55      	ldr	r3, [pc, #340]	; (80039a0 <main+0x1bf4>)
 800384c:	2128      	movs	r1, #40	; 0x28
 800384e:	f240 1093 	movw	r0, #403	; 0x193
 8003852:	f001 f802 	bl	800485a <LCD_Font>
						}

						humidityRemoteLast = humidityRemote;
 8003856:	4b56      	ldr	r3, [pc, #344]	; (80039b0 <main+0x1c04>)
 8003858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800385c:	4953      	ldr	r1, [pc, #332]	; (80039ac <main+0x1c00>)
 800385e:	e9c1 2300 	strd	r2, r3, [r1]

						if (humidityRemoteLast >= 10) {
 8003862:	4b52      	ldr	r3, [pc, #328]	; (80039ac <main+0x1c00>)
 8003864:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003868:	f04f 0200 	mov.w	r2, #0
 800386c:	4b4d      	ldr	r3, [pc, #308]	; (80039a4 <main+0x1bf8>)
 800386e:	f7fd f949 	bl	8000b04 <__aeabi_dcmpge>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d015      	beq.n	80038a4 <main+0x1af8>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 8003878:	4b4c      	ldr	r3, [pc, #304]	; (80039ac <main+0x1c00>)
 800387a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800387e:	f107 000c 	add.w	r0, r7, #12
 8003882:	4946      	ldr	r1, [pc, #280]	; (800399c <main+0x1bf0>)
 8003884:	f006 ff22 	bl	800a6cc <siprintf>
							LCD_Font(371, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, CYAN);
 8003888:	f107 020c 	add.w	r2, r7, #12
 800388c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003890:	9301      	str	r3, [sp, #4]
 8003892:	2301      	movs	r3, #1
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	4b42      	ldr	r3, [pc, #264]	; (80039a0 <main+0x1bf4>)
 8003898:	2128      	movs	r1, #40	; 0x28
 800389a:	f240 1073 	movw	r0, #371	; 0x173
 800389e:	f000 ffdc 	bl	800485a <LCD_Font>
 80038a2:	e01f      	b.n	80038e4 <main+0x1b38>
						}
						else if (humidityRemoteLast < 10) {
 80038a4:	4b41      	ldr	r3, [pc, #260]	; (80039ac <main+0x1c00>)
 80038a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80038aa:	f04f 0200 	mov.w	r2, #0
 80038ae:	4b3d      	ldr	r3, [pc, #244]	; (80039a4 <main+0x1bf8>)
 80038b0:	f7fd f914 	bl	8000adc <__aeabi_dcmplt>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d014      	beq.n	80038e4 <main+0x1b38>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 80038ba:	4b3c      	ldr	r3, [pc, #240]	; (80039ac <main+0x1c00>)
 80038bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c0:	f107 000c 	add.w	r0, r7, #12
 80038c4:	4935      	ldr	r1, [pc, #212]	; (800399c <main+0x1bf0>)
 80038c6:	f006 ff01 	bl	800a6cc <siprintf>
							LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, CYAN);
 80038ca:	f107 020c 	add.w	r2, r7, #12
 80038ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038d2:	9301      	str	r3, [sp, #4]
 80038d4:	2301      	movs	r3, #1
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	4b31      	ldr	r3, [pc, #196]	; (80039a0 <main+0x1bf4>)
 80038da:	2128      	movs	r1, #40	; 0x28
 80038dc:	f240 1093 	movw	r0, #403	; 0x193
 80038e0:	f000 ffbb 	bl	800485a <LCD_Font>
						}
					}
				}
				rx_index = 0;
 80038e4:	4b33      	ldr	r3, [pc, #204]	; (80039b4 <main+0x1c08>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	701a      	strb	r2, [r3, #0]
				for (uint8_t i = 0; i < UART_RX_BUFFER_SIZE; i++) rx_buffer[i] = 0;
 80038ea:	2300      	movs	r3, #0
 80038ec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80038f0:	e009      	b.n	8003906 <main+0x1b5a>
 80038f2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80038f6:	4a30      	ldr	r2, [pc, #192]	; (80039b8 <main+0x1c0c>)
 80038f8:	2100      	movs	r1, #0
 80038fa:	54d1      	strb	r1, [r2, r3]
 80038fc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003900:	3301      	adds	r3, #1
 8003902:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003906:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800390a:	2b0f      	cmp	r3, #15
 800390c:	d9f1      	bls.n	80038f2 <main+0x1b46>
			}

			remoteSensorLastUpdate++;
 800390e:	4b2b      	ldr	r3, [pc, #172]	; (80039bc <main+0x1c10>)
 8003910:	881b      	ldrh	r3, [r3, #0]
 8003912:	3301      	adds	r3, #1
 8003914:	b29a      	uxth	r2, r3
 8003916:	4b29      	ldr	r3, [pc, #164]	; (80039bc <main+0x1c10>)
 8003918:	801a      	strh	r2, [r3, #0]

			if (remoteSensorLastUpdate > WAIT_REMOTE_SENSOR_SEC) {
 800391a:	4b28      	ldr	r3, [pc, #160]	; (80039bc <main+0x1c10>)
 800391c:	881b      	ldrh	r3, [r3, #0]
 800391e:	2b64      	cmp	r3, #100	; 0x64
 8003920:	f240 8108 	bls.w	8003b34 <main+0x1d88>

				if (temperatureRemoteLast && humidityRemoteLast) {
 8003924:	4b1b      	ldr	r3, [pc, #108]	; (8003994 <main+0x1be8>)
 8003926:	e9d3 0100 	ldrd	r0, r1, [r3]
 800392a:	f04f 0200 	mov.w	r2, #0
 800392e:	f04f 0300 	mov.w	r3, #0
 8003932:	f7fd f8c9 	bl	8000ac8 <__aeabi_dcmpeq>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	f040 80fb 	bne.w	8003b34 <main+0x1d88>
 800393e:	4b1b      	ldr	r3, [pc, #108]	; (80039ac <main+0x1c00>)
 8003940:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003944:	f04f 0200 	mov.w	r2, #0
 8003948:	f04f 0300 	mov.w	r3, #0
 800394c:	f7fd f8bc 	bl	8000ac8 <__aeabi_dcmpeq>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	f040 80ee 	bne.w	8003b34 <main+0x1d88>

					char weatherPrintRemoteT[5];
					if (temperatureRemoteLast <= -10) {
 8003958:	4b0e      	ldr	r3, [pc, #56]	; (8003994 <main+0x1be8>)
 800395a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800395e:	f04f 0200 	mov.w	r2, #0
 8003962:	4b0d      	ldr	r3, [pc, #52]	; (8003998 <main+0x1bec>)
 8003964:	f7fd f8c4 	bl	8000af0 <__aeabi_dcmple>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d028      	beq.n	80039c0 <main+0x1c14>
						sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 800396e:	4b09      	ldr	r3, [pc, #36]	; (8003994 <main+0x1be8>)
 8003970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003974:	1d38      	adds	r0, r7, #4
 8003976:	4909      	ldr	r1, [pc, #36]	; (800399c <main+0x1bf0>)
 8003978:	f006 fea8 	bl	800a6cc <siprintf>
						LCD_Font(353, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 800397c:	1d3a      	adds	r2, r7, #4
 800397e:	2300      	movs	r3, #0
 8003980:	9301      	str	r3, [sp, #4]
 8003982:	2301      	movs	r3, #1
 8003984:	9300      	str	r3, [sp, #0]
 8003986:	4b06      	ldr	r3, [pc, #24]	; (80039a0 <main+0x1bf4>)
 8003988:	215a      	movs	r1, #90	; 0x5a
 800398a:	f240 1061 	movw	r0, #353	; 0x161
 800398e:	f000 ff64 	bl	800485a <LCD_Font>
 8003992:	e086      	b.n	8003aa2 <main+0x1cf6>
 8003994:	200004e0 	.word	0x200004e0
 8003998:	c0240000 	.word	0xc0240000
 800399c:	0800f274 	.word	0x0800f274
 80039a0:	08011a64 	.word	0x08011a64
 80039a4:	40240000 	.word	0x40240000
 80039a8:	0800f27c 	.word	0x0800f27c
 80039ac:	200004f0 	.word	0x200004f0
 80039b0:	200004e8 	.word	0x200004e8
 80039b4:	200010c4 	.word	0x200010c4
 80039b8:	200010b4 	.word	0x200010b4
 80039bc:	20000004 	.word	0x20000004
					}
					else if (temperatureRemoteLast < 0 && temperatureRemoteLast > -10) {
 80039c0:	4b5f      	ldr	r3, [pc, #380]	; (8003b40 <main+0x1d94>)
 80039c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80039c6:	f04f 0200 	mov.w	r2, #0
 80039ca:	f04f 0300 	mov.w	r3, #0
 80039ce:	f7fd f885 	bl	8000adc <__aeabi_dcmplt>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d01d      	beq.n	8003a14 <main+0x1c68>
 80039d8:	4b59      	ldr	r3, [pc, #356]	; (8003b40 <main+0x1d94>)
 80039da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80039de:	f04f 0200 	mov.w	r2, #0
 80039e2:	4b58      	ldr	r3, [pc, #352]	; (8003b44 <main+0x1d98>)
 80039e4:	f7fd f898 	bl	8000b18 <__aeabi_dcmpgt>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d012      	beq.n	8003a14 <main+0x1c68>
						sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 80039ee:	4b54      	ldr	r3, [pc, #336]	; (8003b40 <main+0x1d94>)
 80039f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f4:	1d38      	adds	r0, r7, #4
 80039f6:	4954      	ldr	r1, [pc, #336]	; (8003b48 <main+0x1d9c>)
 80039f8:	f006 fe68 	bl	800a6cc <siprintf>
						LCD_Font(385, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 80039fc:	1d3a      	adds	r2, r7, #4
 80039fe:	2300      	movs	r3, #0
 8003a00:	9301      	str	r3, [sp, #4]
 8003a02:	2301      	movs	r3, #1
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	4b51      	ldr	r3, [pc, #324]	; (8003b4c <main+0x1da0>)
 8003a08:	215a      	movs	r1, #90	; 0x5a
 8003a0a:	f240 1081 	movw	r0, #385	; 0x181
 8003a0e:	f000 ff24 	bl	800485a <LCD_Font>
 8003a12:	e046      	b.n	8003aa2 <main+0x1cf6>
					}
					else if (temperatureRemoteLast > 0 && temperatureRemoteLast < 10) {
 8003a14:	4b4a      	ldr	r3, [pc, #296]	; (8003b40 <main+0x1d94>)
 8003a16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a1a:	f04f 0200 	mov.w	r2, #0
 8003a1e:	f04f 0300 	mov.w	r3, #0
 8003a22:	f7fd f879 	bl	8000b18 <__aeabi_dcmpgt>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d01d      	beq.n	8003a68 <main+0x1cbc>
 8003a2c:	4b44      	ldr	r3, [pc, #272]	; (8003b40 <main+0x1d94>)
 8003a2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a32:	f04f 0200 	mov.w	r2, #0
 8003a36:	4b46      	ldr	r3, [pc, #280]	; (8003b50 <main+0x1da4>)
 8003a38:	f7fd f850 	bl	8000adc <__aeabi_dcmplt>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d012      	beq.n	8003a68 <main+0x1cbc>
						sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 8003a42:	4b3f      	ldr	r3, [pc, #252]	; (8003b40 <main+0x1d94>)
 8003a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a48:	1d38      	adds	r0, r7, #4
 8003a4a:	4942      	ldr	r1, [pc, #264]	; (8003b54 <main+0x1da8>)
 8003a4c:	f006 fe3e 	bl	800a6cc <siprintf>
						LCD_Font(362, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8003a50:	1d3a      	adds	r2, r7, #4
 8003a52:	2300      	movs	r3, #0
 8003a54:	9301      	str	r3, [sp, #4]
 8003a56:	2301      	movs	r3, #1
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	4b3c      	ldr	r3, [pc, #240]	; (8003b4c <main+0x1da0>)
 8003a5c:	215a      	movs	r1, #90	; 0x5a
 8003a5e:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 8003a62:	f000 fefa 	bl	800485a <LCD_Font>
 8003a66:	e01c      	b.n	8003aa2 <main+0x1cf6>
					}
					else if (temperatureRemoteLast >= 10) {
 8003a68:	4b35      	ldr	r3, [pc, #212]	; (8003b40 <main+0x1d94>)
 8003a6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a6e:	f04f 0200 	mov.w	r2, #0
 8003a72:	4b37      	ldr	r3, [pc, #220]	; (8003b50 <main+0x1da4>)
 8003a74:	f7fd f846 	bl	8000b04 <__aeabi_dcmpge>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d011      	beq.n	8003aa2 <main+0x1cf6>
						sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 8003a7e:	4b30      	ldr	r3, [pc, #192]	; (8003b40 <main+0x1d94>)
 8003a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a84:	1d38      	adds	r0, r7, #4
 8003a86:	4933      	ldr	r1, [pc, #204]	; (8003b54 <main+0x1da8>)
 8003a88:	f006 fe20 	bl	800a6cc <siprintf>
						LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8003a8c:	1d3a      	adds	r2, r7, #4
 8003a8e:	2300      	movs	r3, #0
 8003a90:	9301      	str	r3, [sp, #4]
 8003a92:	2301      	movs	r3, #1
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	4b2d      	ldr	r3, [pc, #180]	; (8003b4c <main+0x1da0>)
 8003a98:	215a      	movs	r1, #90	; 0x5a
 8003a9a:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8003a9e:	f000 fedc 	bl	800485a <LCD_Font>
					}

					char weatherPrintRemoteH[4];

					if (humidityRemoteLast >= 10) {
 8003aa2:	4b2d      	ldr	r3, [pc, #180]	; (8003b58 <main+0x1dac>)
 8003aa4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003aa8:	f04f 0200 	mov.w	r2, #0
 8003aac:	4b28      	ldr	r3, [pc, #160]	; (8003b50 <main+0x1da4>)
 8003aae:	f7fd f829 	bl	8000b04 <__aeabi_dcmpge>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d012      	beq.n	8003ade <main+0x1d32>
						sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 8003ab8:	4b27      	ldr	r3, [pc, #156]	; (8003b58 <main+0x1dac>)
 8003aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003abe:	4638      	mov	r0, r7
 8003ac0:	4921      	ldr	r1, [pc, #132]	; (8003b48 <main+0x1d9c>)
 8003ac2:	f006 fe03 	bl	800a6cc <siprintf>
						LCD_Font(371, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 8003ac6:	463a      	mov	r2, r7
 8003ac8:	2300      	movs	r3, #0
 8003aca:	9301      	str	r3, [sp, #4]
 8003acc:	2301      	movs	r3, #1
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	4b1e      	ldr	r3, [pc, #120]	; (8003b4c <main+0x1da0>)
 8003ad2:	2128      	movs	r1, #40	; 0x28
 8003ad4:	f240 1073 	movw	r0, #371	; 0x173
 8003ad8:	f000 febf 	bl	800485a <LCD_Font>
 8003adc:	e01c      	b.n	8003b18 <main+0x1d6c>
					}
					else if (humidityRemoteLast < 10) {
 8003ade:	4b1e      	ldr	r3, [pc, #120]	; (8003b58 <main+0x1dac>)
 8003ae0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ae4:	f04f 0200 	mov.w	r2, #0
 8003ae8:	4b19      	ldr	r3, [pc, #100]	; (8003b50 <main+0x1da4>)
 8003aea:	f7fc fff7 	bl	8000adc <__aeabi_dcmplt>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d011      	beq.n	8003b18 <main+0x1d6c>
						sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 8003af4:	4b18      	ldr	r3, [pc, #96]	; (8003b58 <main+0x1dac>)
 8003af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afa:	4638      	mov	r0, r7
 8003afc:	4912      	ldr	r1, [pc, #72]	; (8003b48 <main+0x1d9c>)
 8003afe:	f006 fde5 	bl	800a6cc <siprintf>
						LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 8003b02:	463a      	mov	r2, r7
 8003b04:	2300      	movs	r3, #0
 8003b06:	9301      	str	r3, [sp, #4]
 8003b08:	2301      	movs	r3, #1
 8003b0a:	9300      	str	r3, [sp, #0]
 8003b0c:	4b0f      	ldr	r3, [pc, #60]	; (8003b4c <main+0x1da0>)
 8003b0e:	2128      	movs	r1, #40	; 0x28
 8003b10:	f240 1093 	movw	r0, #403	; 0x193
 8003b14:	f000 fea1 	bl	800485a <LCD_Font>
					}

					temperatureRemoteLast = 0;
 8003b18:	4909      	ldr	r1, [pc, #36]	; (8003b40 <main+0x1d94>)
 8003b1a:	f04f 0200 	mov.w	r2, #0
 8003b1e:	f04f 0300 	mov.w	r3, #0
 8003b22:	e9c1 2300 	strd	r2, r3, [r1]
					humidityRemoteLast = 0;
 8003b26:	490c      	ldr	r1, [pc, #48]	; (8003b58 <main+0x1dac>)
 8003b28:	f04f 0200 	mov.w	r2, #0
 8003b2c:	f04f 0300 	mov.w	r3, #0
 8003b30:	e9c1 2300 	strd	r2, r3, [r1]
				}
			}
			rtcSecLast = rtcSec;
 8003b34:	4b09      	ldr	r3, [pc, #36]	; (8003b5c <main+0x1db0>)
 8003b36:	781a      	ldrb	r2, [r3, #0]
 8003b38:	4b09      	ldr	r3, [pc, #36]	; (8003b60 <main+0x1db4>)
 8003b3a:	701a      	strb	r2, [r3, #0]
	while (1) {
 8003b3c:	f7fe ba20 	b.w	8001f80 <main+0x1d4>
 8003b40:	200004e0 	.word	0x200004e0
 8003b44:	c0240000 	.word	0xc0240000
 8003b48:	0800f274 	.word	0x0800f274
 8003b4c:	08011a64 	.word	0x08011a64
 8003b50:	40240000 	.word	0x40240000
 8003b54:	0800f27c 	.word	0x0800f27c
 8003b58:	200004f0 	.word	0x200004f0
 8003b5c:	200004a9 	.word	0x200004a9
 8003b60:	20000000 	.word	0x20000000

08003b64 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b094      	sub	sp, #80	; 0x50
 8003b68:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b6a:	f107 0320 	add.w	r3, r7, #32
 8003b6e:	2230      	movs	r2, #48	; 0x30
 8003b70:	2100      	movs	r1, #0
 8003b72:	4618      	mov	r0, r3
 8003b74:	f005 feee 	bl	8009954 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b78:	f107 030c 	add.w	r3, r7, #12
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]
 8003b80:	605a      	str	r2, [r3, #4]
 8003b82:	609a      	str	r2, [r3, #8]
 8003b84:	60da      	str	r2, [r3, #12]
 8003b86:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8003b88:	2300      	movs	r3, #0
 8003b8a:	60bb      	str	r3, [r7, #8]
 8003b8c:	4b28      	ldr	r3, [pc, #160]	; (8003c30 <SystemClock_Config+0xcc>)
 8003b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b90:	4a27      	ldr	r2, [pc, #156]	; (8003c30 <SystemClock_Config+0xcc>)
 8003b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b96:	6413      	str	r3, [r2, #64]	; 0x40
 8003b98:	4b25      	ldr	r3, [pc, #148]	; (8003c30 <SystemClock_Config+0xcc>)
 8003b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba0:	60bb      	str	r3, [r7, #8]
 8003ba2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	607b      	str	r3, [r7, #4]
 8003ba8:	4b22      	ldr	r3, [pc, #136]	; (8003c34 <SystemClock_Config+0xd0>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a21      	ldr	r2, [pc, #132]	; (8003c34 <SystemClock_Config+0xd0>)
 8003bae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bb2:	6013      	str	r3, [r2, #0]
 8003bb4:	4b1f      	ldr	r3, [pc, #124]	; (8003c34 <SystemClock_Config+0xd0>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bbc:	607b      	str	r3, [r7, #4]
 8003bbe:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003bc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bc8:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003bca:	2302      	movs	r3, #2
 8003bcc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003bce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8003bd4:	2304      	movs	r3, #4
 8003bd6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8003bd8:	23a8      	movs	r3, #168	; 0xa8
 8003bda:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003bdc:	2302      	movs	r3, #2
 8003bde:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8003be0:	2307      	movs	r3, #7
 8003be2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003be4:	f107 0320 	add.w	r3, r7, #32
 8003be8:	4618      	mov	r0, r3
 8003bea:	f003 ff51 	bl	8007a90 <HAL_RCC_OscConfig>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d001      	beq.n	8003bf8 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8003bf4:	f000 fa88 	bl	8004108 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003bf8:	230f      	movs	r3, #15
 8003bfa:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c00:	2300      	movs	r3, #0
 8003c02:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003c04:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003c08:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003c0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c0e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003c10:	f107 030c 	add.w	r3, r7, #12
 8003c14:	2105      	movs	r1, #5
 8003c16:	4618      	mov	r0, r3
 8003c18:	f004 f9b2 	bl	8007f80 <HAL_RCC_ClockConfig>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 8003c22:	f000 fa71 	bl	8004108 <Error_Handler>
	}
}
 8003c26:	bf00      	nop
 8003c28:	3750      	adds	r7, #80	; 0x50
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	40023800 	.word	0x40023800
 8003c34:	40007000 	.word	0x40007000

08003c38 <MX_DAC_Init>:
 * @brief DAC Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC_Init(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC_Init 0 */

	/* USER CODE END DAC_Init 0 */

	DAC_ChannelConfTypeDef sConfig = {0};
 8003c3e:	463b      	mov	r3, r7
 8003c40:	2200      	movs	r2, #0
 8003c42:	601a      	str	r2, [r3, #0]
 8003c44:	605a      	str	r2, [r3, #4]
	/* USER CODE BEGIN DAC_Init 1 */

	/* USER CODE END DAC_Init 1 */
	/** DAC Initialization
	 */
	hdac.Instance = DAC;
 8003c46:	4b14      	ldr	r3, [pc, #80]	; (8003c98 <MX_DAC_Init+0x60>)
 8003c48:	4a14      	ldr	r2, [pc, #80]	; (8003c9c <MX_DAC_Init+0x64>)
 8003c4a:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac) != HAL_OK)
 8003c4c:	4812      	ldr	r0, [pc, #72]	; (8003c98 <MX_DAC_Init+0x60>)
 8003c4e:	f001 ff7e 	bl	8005b4e <HAL_DAC_Init>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <MX_DAC_Init+0x24>
	{
		Error_Handler();
 8003c58:	f000 fa56 	bl	8004108 <Error_Handler>
	}
	/** DAC channel OUT1 config
	 */
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	603b      	str	r3, [r7, #0]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003c60:	2300      	movs	r3, #0
 8003c62:	607b      	str	r3, [r7, #4]
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003c64:	463b      	mov	r3, r7
 8003c66:	2200      	movs	r2, #0
 8003c68:	4619      	mov	r1, r3
 8003c6a:	480b      	ldr	r0, [pc, #44]	; (8003c98 <MX_DAC_Init+0x60>)
 8003c6c:	f001 ff91 	bl	8005b92 <HAL_DAC_ConfigChannel>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <MX_DAC_Init+0x42>
	{
		Error_Handler();
 8003c76:	f000 fa47 	bl	8004108 <Error_Handler>
	}
	/** DAC channel OUT2 config
	 */
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8003c7a:	463b      	mov	r3, r7
 8003c7c:	2210      	movs	r2, #16
 8003c7e:	4619      	mov	r1, r3
 8003c80:	4805      	ldr	r0, [pc, #20]	; (8003c98 <MX_DAC_Init+0x60>)
 8003c82:	f001 ff86 	bl	8005b92 <HAL_DAC_ConfigChannel>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d001      	beq.n	8003c90 <MX_DAC_Init+0x58>
	{
		Error_Handler();
 8003c8c:	f000 fa3c 	bl	8004108 <Error_Handler>
	}
	/* USER CODE BEGIN DAC_Init 2 */

	/* USER CODE END DAC_Init 2 */

}
 8003c90:	bf00      	nop
 8003c92:	3708      	adds	r7, #8
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	200002a4 	.word	0x200002a4
 8003c9c:	40007400 	.word	0x40007400

08003ca0 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8003ca4:	4b12      	ldr	r3, [pc, #72]	; (8003cf0 <MX_I2C1_Init+0x50>)
 8003ca6:	4a13      	ldr	r2, [pc, #76]	; (8003cf4 <MX_I2C1_Init+0x54>)
 8003ca8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8003caa:	4b11      	ldr	r3, [pc, #68]	; (8003cf0 <MX_I2C1_Init+0x50>)
 8003cac:	4a12      	ldr	r2, [pc, #72]	; (8003cf8 <MX_I2C1_Init+0x58>)
 8003cae:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003cb0:	4b0f      	ldr	r3, [pc, #60]	; (8003cf0 <MX_I2C1_Init+0x50>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8003cb6:	4b0e      	ldr	r3, [pc, #56]	; (8003cf0 <MX_I2C1_Init+0x50>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003cbc:	4b0c      	ldr	r3, [pc, #48]	; (8003cf0 <MX_I2C1_Init+0x50>)
 8003cbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003cc2:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003cc4:	4b0a      	ldr	r3, [pc, #40]	; (8003cf0 <MX_I2C1_Init+0x50>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8003cca:	4b09      	ldr	r3, [pc, #36]	; (8003cf0 <MX_I2C1_Init+0x50>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 8003cd0:	4b07      	ldr	r3, [pc, #28]	; (8003cf0 <MX_I2C1_Init+0x50>)
 8003cd2:	2240      	movs	r2, #64	; 0x40
 8003cd4:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003cd6:	4b06      	ldr	r3, [pc, #24]	; (8003cf0 <MX_I2C1_Init+0x50>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003cdc:	4804      	ldr	r0, [pc, #16]	; (8003cf0 <MX_I2C1_Init+0x50>)
 8003cde:	f002 f975 	bl	8005fcc <HAL_I2C_Init>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d001      	beq.n	8003cec <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8003ce8:	f000 fa0e 	bl	8004108 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8003cec:	bf00      	nop
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	200002b8 	.word	0x200002b8
 8003cf4:	40005400 	.word	0x40005400
 8003cf8:	00061a80 	.word	0x00061a80

08003cfc <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8003d00:	4b17      	ldr	r3, [pc, #92]	; (8003d60 <MX_SPI1_Init+0x64>)
 8003d02:	4a18      	ldr	r2, [pc, #96]	; (8003d64 <MX_SPI1_Init+0x68>)
 8003d04:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8003d06:	4b16      	ldr	r3, [pc, #88]	; (8003d60 <MX_SPI1_Init+0x64>)
 8003d08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003d0c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003d0e:	4b14      	ldr	r3, [pc, #80]	; (8003d60 <MX_SPI1_Init+0x64>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d14:	4b12      	ldr	r3, [pc, #72]	; (8003d60 <MX_SPI1_Init+0x64>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d1a:	4b11      	ldr	r3, [pc, #68]	; (8003d60 <MX_SPI1_Init+0x64>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003d20:	4b0f      	ldr	r3, [pc, #60]	; (8003d60 <MX_SPI1_Init+0x64>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8003d26:	4b0e      	ldr	r3, [pc, #56]	; (8003d60 <MX_SPI1_Init+0x64>)
 8003d28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d2c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d2e:	4b0c      	ldr	r3, [pc, #48]	; (8003d60 <MX_SPI1_Init+0x64>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d34:	4b0a      	ldr	r3, [pc, #40]	; (8003d60 <MX_SPI1_Init+0x64>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d3a:	4b09      	ldr	r3, [pc, #36]	; (8003d60 <MX_SPI1_Init+0x64>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d40:	4b07      	ldr	r3, [pc, #28]	; (8003d60 <MX_SPI1_Init+0x64>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8003d46:	4b06      	ldr	r3, [pc, #24]	; (8003d60 <MX_SPI1_Init+0x64>)
 8003d48:	220a      	movs	r2, #10
 8003d4a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003d4c:	4804      	ldr	r0, [pc, #16]	; (8003d60 <MX_SPI1_Init+0x64>)
 8003d4e:	f004 fb37 	bl	80083c0 <HAL_SPI_Init>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 8003d58:	f000 f9d6 	bl	8004108 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8003d5c:	bf00      	nop
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	2000030c 	.word	0x2000030c
 8003d64:	40013000 	.word	0x40013000

08003d68 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8003d6c:	4b17      	ldr	r3, [pc, #92]	; (8003dcc <MX_SPI2_Init+0x64>)
 8003d6e:	4a18      	ldr	r2, [pc, #96]	; (8003dd0 <MX_SPI2_Init+0x68>)
 8003d70:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8003d72:	4b16      	ldr	r3, [pc, #88]	; (8003dcc <MX_SPI2_Init+0x64>)
 8003d74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003d78:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003d7a:	4b14      	ldr	r3, [pc, #80]	; (8003dcc <MX_SPI2_Init+0x64>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d80:	4b12      	ldr	r3, [pc, #72]	; (8003dcc <MX_SPI2_Init+0x64>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d86:	4b11      	ldr	r3, [pc, #68]	; (8003dcc <MX_SPI2_Init+0x64>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003d8c:	4b0f      	ldr	r3, [pc, #60]	; (8003dcc <MX_SPI2_Init+0x64>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003d92:	4b0e      	ldr	r3, [pc, #56]	; (8003dcc <MX_SPI2_Init+0x64>)
 8003d94:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003d98:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003d9a:	4b0c      	ldr	r3, [pc, #48]	; (8003dcc <MX_SPI2_Init+0x64>)
 8003d9c:	2238      	movs	r2, #56	; 0x38
 8003d9e:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003da0:	4b0a      	ldr	r3, [pc, #40]	; (8003dcc <MX_SPI2_Init+0x64>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003da6:	4b09      	ldr	r3, [pc, #36]	; (8003dcc <MX_SPI2_Init+0x64>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dac:	4b07      	ldr	r3, [pc, #28]	; (8003dcc <MX_SPI2_Init+0x64>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8003db2:	4b06      	ldr	r3, [pc, #24]	; (8003dcc <MX_SPI2_Init+0x64>)
 8003db4:	220a      	movs	r2, #10
 8003db6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003db8:	4804      	ldr	r0, [pc, #16]	; (8003dcc <MX_SPI2_Init+0x64>)
 8003dba:	f004 fb01 	bl	80083c0 <HAL_SPI_Init>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d001      	beq.n	8003dc8 <MX_SPI2_Init+0x60>
	{
		Error_Handler();
 8003dc4:	f000 f9a0 	bl	8004108 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8003dc8:	bf00      	nop
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	20000364 	.word	0x20000364
 8003dd0:	40003800 	.word	0x40003800

08003dd4 <MX_SPI3_Init>:
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 8003dd8:	4b17      	ldr	r3, [pc, #92]	; (8003e38 <MX_SPI3_Init+0x64>)
 8003dda:	4a18      	ldr	r2, [pc, #96]	; (8003e3c <MX_SPI3_Init+0x68>)
 8003ddc:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 8003dde:	4b16      	ldr	r3, [pc, #88]	; (8003e38 <MX_SPI3_Init+0x64>)
 8003de0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003de4:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003de6:	4b14      	ldr	r3, [pc, #80]	; (8003e38 <MX_SPI3_Init+0x64>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003dec:	4b12      	ldr	r3, [pc, #72]	; (8003e38 <MX_SPI3_Init+0x64>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003df2:	4b11      	ldr	r3, [pc, #68]	; (8003e38 <MX_SPI3_Init+0x64>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003df8:	4b0f      	ldr	r3, [pc, #60]	; (8003e38 <MX_SPI3_Init+0x64>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003dfe:	4b0e      	ldr	r3, [pc, #56]	; (8003e38 <MX_SPI3_Init+0x64>)
 8003e00:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003e04:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003e06:	4b0c      	ldr	r3, [pc, #48]	; (8003e38 <MX_SPI3_Init+0x64>)
 8003e08:	2238      	movs	r2, #56	; 0x38
 8003e0a:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003e0c:	4b0a      	ldr	r3, [pc, #40]	; (8003e38 <MX_SPI3_Init+0x64>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003e12:	4b09      	ldr	r3, [pc, #36]	; (8003e38 <MX_SPI3_Init+0x64>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e18:	4b07      	ldr	r3, [pc, #28]	; (8003e38 <MX_SPI3_Init+0x64>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 10;
 8003e1e:	4b06      	ldr	r3, [pc, #24]	; (8003e38 <MX_SPI3_Init+0x64>)
 8003e20:	220a      	movs	r2, #10
 8003e22:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003e24:	4804      	ldr	r0, [pc, #16]	; (8003e38 <MX_SPI3_Init+0x64>)
 8003e26:	f004 facb 	bl	80083c0 <HAL_SPI_Init>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d001      	beq.n	8003e34 <MX_SPI3_Init+0x60>
	{
		Error_Handler();
 8003e30:	f000 f96a 	bl	8004108 <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 8003e34:	bf00      	nop
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	200003bc 	.word	0x200003bc
 8003e3c:	40003c00 	.word	0x40003c00

08003e40 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8003e44:	4b11      	ldr	r3, [pc, #68]	; (8003e8c <MX_USART1_UART_Init+0x4c>)
 8003e46:	4a12      	ldr	r2, [pc, #72]	; (8003e90 <MX_USART1_UART_Init+0x50>)
 8003e48:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8003e4a:	4b10      	ldr	r3, [pc, #64]	; (8003e8c <MX_USART1_UART_Init+0x4c>)
 8003e4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003e50:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003e52:	4b0e      	ldr	r3, [pc, #56]	; (8003e8c <MX_USART1_UART_Init+0x4c>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8003e58:	4b0c      	ldr	r3, [pc, #48]	; (8003e8c <MX_USART1_UART_Init+0x4c>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8003e5e:	4b0b      	ldr	r3, [pc, #44]	; (8003e8c <MX_USART1_UART_Init+0x4c>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8003e64:	4b09      	ldr	r3, [pc, #36]	; (8003e8c <MX_USART1_UART_Init+0x4c>)
 8003e66:	220c      	movs	r2, #12
 8003e68:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e6a:	4b08      	ldr	r3, [pc, #32]	; (8003e8c <MX_USART1_UART_Init+0x4c>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e70:	4b06      	ldr	r3, [pc, #24]	; (8003e8c <MX_USART1_UART_Init+0x4c>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8003e76:	4805      	ldr	r0, [pc, #20]	; (8003e8c <MX_USART1_UART_Init+0x4c>)
 8003e78:	f005 f88e 	bl	8008f98 <HAL_UART_Init>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8003e82:	f000 f941 	bl	8004108 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8003e86:	bf00      	nop
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	20000414 	.word	0x20000414
 8003e90:	40011000 	.word	0x40011000

08003e94 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b08c      	sub	sp, #48	; 0x30
 8003e98:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e9a:	f107 031c 	add.w	r3, r7, #28
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	601a      	str	r2, [r3, #0]
 8003ea2:	605a      	str	r2, [r3, #4]
 8003ea4:	609a      	str	r2, [r3, #8]
 8003ea6:	60da      	str	r2, [r3, #12]
 8003ea8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8003eaa:	2300      	movs	r3, #0
 8003eac:	61bb      	str	r3, [r7, #24]
 8003eae:	4b60      	ldr	r3, [pc, #384]	; (8004030 <MX_GPIO_Init+0x19c>)
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb2:	4a5f      	ldr	r2, [pc, #380]	; (8004030 <MX_GPIO_Init+0x19c>)
 8003eb4:	f043 0310 	orr.w	r3, r3, #16
 8003eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8003eba:	4b5d      	ldr	r3, [pc, #372]	; (8004030 <MX_GPIO_Init+0x19c>)
 8003ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebe:	f003 0310 	and.w	r3, r3, #16
 8003ec2:	61bb      	str	r3, [r7, #24]
 8003ec4:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	617b      	str	r3, [r7, #20]
 8003eca:	4b59      	ldr	r3, [pc, #356]	; (8004030 <MX_GPIO_Init+0x19c>)
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ece:	4a58      	ldr	r2, [pc, #352]	; (8004030 <MX_GPIO_Init+0x19c>)
 8003ed0:	f043 0304 	orr.w	r3, r3, #4
 8003ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ed6:	4b56      	ldr	r3, [pc, #344]	; (8004030 <MX_GPIO_Init+0x19c>)
 8003ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eda:	f003 0304 	and.w	r3, r3, #4
 8003ede:	617b      	str	r3, [r7, #20]
 8003ee0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	613b      	str	r3, [r7, #16]
 8003ee6:	4b52      	ldr	r3, [pc, #328]	; (8004030 <MX_GPIO_Init+0x19c>)
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eea:	4a51      	ldr	r2, [pc, #324]	; (8004030 <MX_GPIO_Init+0x19c>)
 8003eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ef2:	4b4f      	ldr	r3, [pc, #316]	; (8004030 <MX_GPIO_Init+0x19c>)
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003efa:	613b      	str	r3, [r7, #16]
 8003efc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003efe:	2300      	movs	r3, #0
 8003f00:	60fb      	str	r3, [r7, #12]
 8003f02:	4b4b      	ldr	r3, [pc, #300]	; (8004030 <MX_GPIO_Init+0x19c>)
 8003f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f06:	4a4a      	ldr	r2, [pc, #296]	; (8004030 <MX_GPIO_Init+0x19c>)
 8003f08:	f043 0301 	orr.w	r3, r3, #1
 8003f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f0e:	4b48      	ldr	r3, [pc, #288]	; (8004030 <MX_GPIO_Init+0x19c>)
 8003f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	60fb      	str	r3, [r7, #12]
 8003f18:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	60bb      	str	r3, [r7, #8]
 8003f1e:	4b44      	ldr	r3, [pc, #272]	; (8004030 <MX_GPIO_Init+0x19c>)
 8003f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f22:	4a43      	ldr	r2, [pc, #268]	; (8004030 <MX_GPIO_Init+0x19c>)
 8003f24:	f043 0302 	orr.w	r3, r3, #2
 8003f28:	6313      	str	r3, [r2, #48]	; 0x30
 8003f2a:	4b41      	ldr	r3, [pc, #260]	; (8004030 <MX_GPIO_Init+0x19c>)
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	60bb      	str	r3, [r7, #8]
 8003f34:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8003f36:	2300      	movs	r3, #0
 8003f38:	607b      	str	r3, [r7, #4]
 8003f3a:	4b3d      	ldr	r3, [pc, #244]	; (8004030 <MX_GPIO_Init+0x19c>)
 8003f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3e:	4a3c      	ldr	r2, [pc, #240]	; (8004030 <MX_GPIO_Init+0x19c>)
 8003f40:	f043 0308 	orr.w	r3, r3, #8
 8003f44:	6313      	str	r3, [r2, #48]	; 0x30
 8003f46:	4b3a      	ldr	r3, [pc, #232]	; (8004030 <MX_GPIO_Init+0x19c>)
 8003f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4a:	f003 0308 	and.w	r3, r3, #8
 8003f4e:	607b      	str	r3, [r7, #4]
 8003f50:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 8003f52:	2201      	movs	r2, #1
 8003f54:	2140      	movs	r1, #64	; 0x40
 8003f56:	4837      	ldr	r0, [pc, #220]	; (8004034 <MX_GPIO_Init+0x1a0>)
 8003f58:	f002 f81e 	bl	8005f98 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	2180      	movs	r1, #128	; 0x80
 8003f60:	4834      	ldr	r0, [pc, #208]	; (8004034 <MX_GPIO_Init+0x1a0>)
 8003f62:	f002 f819 	bl	8005f98 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(FLASH25Q_CS_GPIO_Port, FLASH25Q_CS_Pin, GPIO_PIN_SET);
 8003f66:	2201      	movs	r2, #1
 8003f68:	2101      	movs	r1, #1
 8003f6a:	4833      	ldr	r0, [pc, #204]	; (8004038 <MX_GPIO_Init+0x1a4>)
 8003f6c:	f002 f814 	bl	8005f98 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, SD_D0_Pin|SD_D1_Pin, GPIO_PIN_RESET);
 8003f70:	2200      	movs	r2, #0
 8003f72:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003f76:	4831      	ldr	r0, [pc, #196]	; (800403c <MX_GPIO_Init+0x1a8>)
 8003f78:	f002 f80e 	bl	8005f98 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SD_CMD_GPIO_Port, SD_CMD_Pin, GPIO_PIN_RESET);
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	2104      	movs	r1, #4
 8003f80:	482f      	ldr	r0, [pc, #188]	; (8004040 <MX_GPIO_Init+0x1ac>)
 8003f82:	f002 f809 	bl	8005f98 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : KEY_1_Pin KEY_0_Pin */
	GPIO_InitStruct.Pin = KEY_1_Pin|KEY_0_Pin;
 8003f86:	2318      	movs	r3, #24
 8003f88:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003f92:	f107 031c 	add.w	r3, r7, #28
 8003f96:	4619      	mov	r1, r3
 8003f98:	482a      	ldr	r0, [pc, #168]	; (8004044 <MX_GPIO_Init+0x1b0>)
 8003f9a:	f001 fe49 	bl	8005c30 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_A_Pin LED_B_Pin */
	GPIO_InitStruct.Pin = LED_A_Pin|LED_B_Pin;
 8003f9e:	23c0      	movs	r3, #192	; 0xc0
 8003fa0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003faa:	2300      	movs	r3, #0
 8003fac:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fae:	f107 031c 	add.w	r3, r7, #28
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	481f      	ldr	r0, [pc, #124]	; (8004034 <MX_GPIO_Init+0x1a0>)
 8003fb6:	f001 fe3b 	bl	8005c30 <HAL_GPIO_Init>

	/*Configure GPIO pin : TOUCH_IRQ_Pin */
	GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8003fba:	2320      	movs	r3, #32
 8003fbc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003fc6:	f107 031c 	add.w	r3, r7, #28
 8003fca:	4619      	mov	r1, r3
 8003fcc:	481b      	ldr	r0, [pc, #108]	; (800403c <MX_GPIO_Init+0x1a8>)
 8003fce:	f001 fe2f 	bl	8005c30 <HAL_GPIO_Init>

	/*Configure GPIO pin : FLASH25Q_CS_Pin */
	GPIO_InitStruct.Pin = FLASH25Q_CS_Pin;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(FLASH25Q_CS_GPIO_Port, &GPIO_InitStruct);
 8003fe2:	f107 031c 	add.w	r3, r7, #28
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	4813      	ldr	r0, [pc, #76]	; (8004038 <MX_GPIO_Init+0x1a4>)
 8003fea:	f001 fe21 	bl	8005c30 <HAL_GPIO_Init>

	/*Configure GPIO pins : SD_D0_Pin SD_D1_Pin */
	GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin;
 8003fee:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003ff2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004000:	f107 031c 	add.w	r3, r7, #28
 8004004:	4619      	mov	r1, r3
 8004006:	480d      	ldr	r0, [pc, #52]	; (800403c <MX_GPIO_Init+0x1a8>)
 8004008:	f001 fe12 	bl	8005c30 <HAL_GPIO_Init>

	/*Configure GPIO pin : SD_CMD_Pin */
	GPIO_InitStruct.Pin = SD_CMD_Pin;
 800400c:	2304      	movs	r3, #4
 800400e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004010:	2301      	movs	r3, #1
 8004012:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004014:	2300      	movs	r3, #0
 8004016:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004018:	2300      	movs	r3, #0
 800401a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 800401c:	f107 031c 	add.w	r3, r7, #28
 8004020:	4619      	mov	r1, r3
 8004022:	4807      	ldr	r0, [pc, #28]	; (8004040 <MX_GPIO_Init+0x1ac>)
 8004024:	f001 fe04 	bl	8005c30 <HAL_GPIO_Init>

}
 8004028:	bf00      	nop
 800402a:	3730      	adds	r7, #48	; 0x30
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	40023800 	.word	0x40023800
 8004034:	40020000 	.word	0x40020000
 8004038:	40020400 	.word	0x40020400
 800403c:	40020800 	.word	0x40020800
 8004040:	40020c00 	.word	0x40020c00
 8004044:	40021000 	.word	0x40021000

08004048 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b088      	sub	sp, #32
 800404c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FSMC_Init 0 */

	/* USER CODE END FSMC_Init 0 */

	FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800404e:	1d3b      	adds	r3, r7, #4
 8004050:	2200      	movs	r2, #0
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	605a      	str	r2, [r3, #4]
 8004056:	609a      	str	r2, [r3, #8]
 8004058:	60da      	str	r2, [r3, #12]
 800405a:	611a      	str	r2, [r3, #16]
 800405c:	615a      	str	r2, [r3, #20]
 800405e:	619a      	str	r2, [r3, #24]

	/* USER CODE END FSMC_Init 1 */

	/** Perform the SRAM1 memory initialization sequence
	 */
	hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8004060:	4b27      	ldr	r3, [pc, #156]	; (8004100 <MX_FSMC_Init+0xb8>)
 8004062:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8004066:	601a      	str	r2, [r3, #0]
	hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8004068:	4b25      	ldr	r3, [pc, #148]	; (8004100 <MX_FSMC_Init+0xb8>)
 800406a:	4a26      	ldr	r2, [pc, #152]	; (8004104 <MX_FSMC_Init+0xbc>)
 800406c:	605a      	str	r2, [r3, #4]
	/* hsram1.Init */
	hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800406e:	4b24      	ldr	r3, [pc, #144]	; (8004100 <MX_FSMC_Init+0xb8>)
 8004070:	2200      	movs	r2, #0
 8004072:	609a      	str	r2, [r3, #8]
	hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8004074:	4b22      	ldr	r3, [pc, #136]	; (8004100 <MX_FSMC_Init+0xb8>)
 8004076:	2200      	movs	r2, #0
 8004078:	60da      	str	r2, [r3, #12]
	hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800407a:	4b21      	ldr	r3, [pc, #132]	; (8004100 <MX_FSMC_Init+0xb8>)
 800407c:	2200      	movs	r2, #0
 800407e:	611a      	str	r2, [r3, #16]
	hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8004080:	4b1f      	ldr	r3, [pc, #124]	; (8004100 <MX_FSMC_Init+0xb8>)
 8004082:	2210      	movs	r2, #16
 8004084:	615a      	str	r2, [r3, #20]
	hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8004086:	4b1e      	ldr	r3, [pc, #120]	; (8004100 <MX_FSMC_Init+0xb8>)
 8004088:	2200      	movs	r2, #0
 800408a:	619a      	str	r2, [r3, #24]
	hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800408c:	4b1c      	ldr	r3, [pc, #112]	; (8004100 <MX_FSMC_Init+0xb8>)
 800408e:	2200      	movs	r2, #0
 8004090:	61da      	str	r2, [r3, #28]
	hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8004092:	4b1b      	ldr	r3, [pc, #108]	; (8004100 <MX_FSMC_Init+0xb8>)
 8004094:	2200      	movs	r2, #0
 8004096:	621a      	str	r2, [r3, #32]
	hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8004098:	4b19      	ldr	r3, [pc, #100]	; (8004100 <MX_FSMC_Init+0xb8>)
 800409a:	2200      	movs	r2, #0
 800409c:	625a      	str	r2, [r3, #36]	; 0x24
	hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800409e:	4b18      	ldr	r3, [pc, #96]	; (8004100 <MX_FSMC_Init+0xb8>)
 80040a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80040a4:	629a      	str	r2, [r3, #40]	; 0x28
	hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80040a6:	4b16      	ldr	r3, [pc, #88]	; (8004100 <MX_FSMC_Init+0xb8>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	62da      	str	r2, [r3, #44]	; 0x2c
	hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80040ac:	4b14      	ldr	r3, [pc, #80]	; (8004100 <MX_FSMC_Init+0xb8>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	631a      	str	r2, [r3, #48]	; 0x30
	hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80040b2:	4b13      	ldr	r3, [pc, #76]	; (8004100 <MX_FSMC_Init+0xb8>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	635a      	str	r2, [r3, #52]	; 0x34
	hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80040b8:	4b11      	ldr	r3, [pc, #68]	; (8004100 <MX_FSMC_Init+0xb8>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	639a      	str	r2, [r3, #56]	; 0x38
	hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80040be:	4b10      	ldr	r3, [pc, #64]	; (8004100 <MX_FSMC_Init+0xb8>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	645a      	str	r2, [r3, #68]	; 0x44
	/* Timing */
	Timing.AddressSetupTime = 2;
 80040c4:	2302      	movs	r3, #2
 80040c6:	607b      	str	r3, [r7, #4]
	Timing.AddressHoldTime = 15;
 80040c8:	230f      	movs	r3, #15
 80040ca:	60bb      	str	r3, [r7, #8]
	Timing.DataSetupTime = 5;
 80040cc:	2305      	movs	r3, #5
 80040ce:	60fb      	str	r3, [r7, #12]
	Timing.BusTurnAroundDuration = 2;
 80040d0:	2302      	movs	r3, #2
 80040d2:	613b      	str	r3, [r7, #16]
	Timing.CLKDivision = 16;
 80040d4:	2310      	movs	r3, #16
 80040d6:	617b      	str	r3, [r7, #20]
	Timing.DataLatency = 17;
 80040d8:	2311      	movs	r3, #17
 80040da:	61bb      	str	r3, [r7, #24]
	Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80040dc:	2300      	movs	r3, #0
 80040de:	61fb      	str	r3, [r7, #28]
	/* ExtTiming */

	if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80040e0:	1d3b      	adds	r3, r7, #4
 80040e2:	2200      	movs	r2, #0
 80040e4:	4619      	mov	r1, r3
 80040e6:	4806      	ldr	r0, [pc, #24]	; (8004100 <MX_FSMC_Init+0xb8>)
 80040e8:	f004 ff12 	bl	8008f10 <HAL_SRAM_Init>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <MX_FSMC_Init+0xae>
	{
		Error_Handler( );
 80040f2:	f000 f809 	bl	8004108 <Error_Handler>
	}

	/* USER CODE BEGIN FSMC_Init 2 */

	/* USER CODE END FSMC_Init 2 */
}
 80040f6:	bf00      	nop
 80040f8:	3720      	adds	r7, #32
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	20000458 	.word	0x20000458
 8004104:	a0000104 	.word	0xa0000104

08004108 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8004108:	b480      	push	{r7}
 800410a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800410c:	b672      	cpsid	i
}
 800410e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8004110:	e7fe      	b.n	8004110 <Error_Handler+0x8>

08004112 <RGB>:
#include "ssd1963.h"

uint32_t RGB(uint8_t r, uint8_t g, uint8_t b) {
 8004112:	b480      	push	{r7}
 8004114:	b083      	sub	sp, #12
 8004116:	af00      	add	r7, sp, #0
 8004118:	4603      	mov	r3, r0
 800411a:	71fb      	strb	r3, [r7, #7]
 800411c:	460b      	mov	r3, r1
 800411e:	71bb      	strb	r3, [r7, #6]
 8004120:	4613      	mov	r3, r2
 8004122:	717b      	strb	r3, [r7, #5]
    return ((r & 0xFF) << 16) + ((g & 0xFF) << 8) + (b & 0xFF);
 8004124:	79fb      	ldrb	r3, [r7, #7]
 8004126:	041a      	lsls	r2, r3, #16
 8004128:	79bb      	ldrb	r3, [r7, #6]
 800412a:	021b      	lsls	r3, r3, #8
 800412c:	441a      	add	r2, r3
 800412e:	797b      	ldrb	r3, [r7, #5]
 8004130:	4413      	add	r3, r2
}
 8004132:	4618      	mov	r0, r3
 8004134:	370c      	adds	r7, #12
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr

0800413e <H24_RGB565>:

uint16_t H24_RGB565(uint8_t reverse, uint32_t color24) {
 800413e:	b480      	push	{r7}
 8004140:	b085      	sub	sp, #20
 8004142:	af00      	add	r7, sp, #0
 8004144:	4603      	mov	r3, r0
 8004146:	6039      	str	r1, [r7, #0]
 8004148:	71fb      	strb	r3, [r7, #7]
	uint8_t b = (color24 >> 16) & 0xFF;
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	0c1b      	lsrs	r3, r3, #16
 800414e:	73fb      	strb	r3, [r7, #15]
	uint8_t g = (color24 >> 8) & 0xFF;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	0a1b      	lsrs	r3, r3, #8
 8004154:	73bb      	strb	r3, [r7, #14]
	uint8_t r = color24 & 0xFF;
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	737b      	strb	r3, [r7, #13]
	if (reverse) return ((b / 8) << 11) | ((g / 4) << 5) | (r / 8);
 800415a:	79fb      	ldrb	r3, [r7, #7]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d013      	beq.n	8004188 <H24_RGB565+0x4a>
 8004160:	7bfb      	ldrb	r3, [r7, #15]
 8004162:	08db      	lsrs	r3, r3, #3
 8004164:	b2db      	uxtb	r3, r3
 8004166:	02db      	lsls	r3, r3, #11
 8004168:	b21a      	sxth	r2, r3
 800416a:	7bbb      	ldrb	r3, [r7, #14]
 800416c:	089b      	lsrs	r3, r3, #2
 800416e:	b2db      	uxtb	r3, r3
 8004170:	015b      	lsls	r3, r3, #5
 8004172:	b21b      	sxth	r3, r3
 8004174:	4313      	orrs	r3, r2
 8004176:	b21a      	sxth	r2, r3
 8004178:	7b7b      	ldrb	r3, [r7, #13]
 800417a:	08db      	lsrs	r3, r3, #3
 800417c:	b2db      	uxtb	r3, r3
 800417e:	b21b      	sxth	r3, r3
 8004180:	4313      	orrs	r3, r2
 8004182:	b21b      	sxth	r3, r3
 8004184:	b29b      	uxth	r3, r3
 8004186:	e012      	b.n	80041ae <H24_RGB565+0x70>
	else return ((r / 8) << 11) | ((g / 4) << 5) | (b / 8);
 8004188:	7b7b      	ldrb	r3, [r7, #13]
 800418a:	08db      	lsrs	r3, r3, #3
 800418c:	b2db      	uxtb	r3, r3
 800418e:	02db      	lsls	r3, r3, #11
 8004190:	b21a      	sxth	r2, r3
 8004192:	7bbb      	ldrb	r3, [r7, #14]
 8004194:	089b      	lsrs	r3, r3, #2
 8004196:	b2db      	uxtb	r3, r3
 8004198:	015b      	lsls	r3, r3, #5
 800419a:	b21b      	sxth	r3, r3
 800419c:	4313      	orrs	r3, r2
 800419e:	b21a      	sxth	r2, r3
 80041a0:	7bfb      	ldrb	r3, [r7, #15]
 80041a2:	08db      	lsrs	r3, r3, #3
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	b21b      	sxth	r3, r3
 80041a8:	4313      	orrs	r3, r2
 80041aa:	b21b      	sxth	r3, r3
 80041ac:	b29b      	uxth	r3, r3
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3714      	adds	r7, #20
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr

080041ba <LCD_Send_Cmd>:

void LCD_Send_Cmd(uint16_t cmd) {
 80041ba:	b480      	push	{r7}
 80041bc:	b083      	sub	sp, #12
 80041be:	af00      	add	r7, sp, #0
 80041c0:	4603      	mov	r3, r0
 80041c2:	80fb      	strh	r3, [r7, #6]
	CMD = cmd;
 80041c4:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80041c8:	88fb      	ldrh	r3, [r7, #6]
 80041ca:	8013      	strh	r3, [r2, #0]
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <LCD_Send_Dat>:

void LCD_Send_Dat(uint16_t dat) {
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	4603      	mov	r3, r0
 80041e0:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i = 0; i < 1; i++)
 80041e2:	2300      	movs	r3, #0
 80041e4:	73fb      	strb	r3, [r7, #15]
 80041e6:	e005      	b.n	80041f4 <LCD_Send_Dat+0x1c>
	DAT = dat;
 80041e8:	4a07      	ldr	r2, [pc, #28]	; (8004208 <LCD_Send_Dat+0x30>)
 80041ea:	88fb      	ldrh	r3, [r7, #6]
 80041ec:	8013      	strh	r3, [r2, #0]
	for (uint8_t i = 0; i < 1; i++)
 80041ee:	7bfb      	ldrb	r3, [r7, #15]
 80041f0:	3301      	adds	r3, #1
 80041f2:	73fb      	strb	r3, [r7, #15]
 80041f4:	7bfb      	ldrb	r3, [r7, #15]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d0f6      	beq.n	80041e8 <LCD_Send_Dat+0x10>
}
 80041fa:	bf00      	nop
 80041fc:	bf00      	nop
 80041fe:	3714      	adds	r7, #20
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr
 8004208:	60080000 	.word	0x60080000

0800420c <LCD_Window>:

void LCD_Window(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 800420c:	b590      	push	{r4, r7, lr}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	4604      	mov	r4, r0
 8004214:	4608      	mov	r0, r1
 8004216:	4611      	mov	r1, r2
 8004218:	461a      	mov	r2, r3
 800421a:	4623      	mov	r3, r4
 800421c:	80fb      	strh	r3, [r7, #6]
 800421e:	4603      	mov	r3, r0
 8004220:	80bb      	strh	r3, [r7, #4]
 8004222:	460b      	mov	r3, r1
 8004224:	807b      	strh	r3, [r7, #2]
 8004226:	4613      	mov	r3, r2
 8004228:	803b      	strh	r3, [r7, #0]
	LCD_Send_Cmd(LCD_COLUMN_ADDR);
 800422a:	202a      	movs	r0, #42	; 0x2a
 800422c:	f7ff ffc5 	bl	80041ba <LCD_Send_Cmd>
	LCD_Send_Dat(y1 >> 8);
 8004230:	88bb      	ldrh	r3, [r7, #4]
 8004232:	0a1b      	lsrs	r3, r3, #8
 8004234:	b29b      	uxth	r3, r3
 8004236:	4618      	mov	r0, r3
 8004238:	f7ff ffce 	bl	80041d8 <LCD_Send_Dat>
	LCD_Send_Dat(y1 & 0x00FF);
 800423c:	88bb      	ldrh	r3, [r7, #4]
 800423e:	b2db      	uxtb	r3, r3
 8004240:	b29b      	uxth	r3, r3
 8004242:	4618      	mov	r0, r3
 8004244:	f7ff ffc8 	bl	80041d8 <LCD_Send_Dat>
	LCD_Send_Dat(y2 >> 8);
 8004248:	883b      	ldrh	r3, [r7, #0]
 800424a:	0a1b      	lsrs	r3, r3, #8
 800424c:	b29b      	uxth	r3, r3
 800424e:	4618      	mov	r0, r3
 8004250:	f7ff ffc2 	bl	80041d8 <LCD_Send_Dat>
	LCD_Send_Dat(y2 & 0x00FF);
 8004254:	883b      	ldrh	r3, [r7, #0]
 8004256:	b2db      	uxtb	r3, r3
 8004258:	b29b      	uxth	r3, r3
 800425a:	4618      	mov	r0, r3
 800425c:	f7ff ffbc 	bl	80041d8 <LCD_Send_Dat>
	LCD_Send_Cmd(LCD_PAGE_ADDR);
 8004260:	202b      	movs	r0, #43	; 0x2b
 8004262:	f7ff ffaa 	bl	80041ba <LCD_Send_Cmd>
	LCD_Send_Dat(x1 >> 8);
 8004266:	88fb      	ldrh	r3, [r7, #6]
 8004268:	0a1b      	lsrs	r3, r3, #8
 800426a:	b29b      	uxth	r3, r3
 800426c:	4618      	mov	r0, r3
 800426e:	f7ff ffb3 	bl	80041d8 <LCD_Send_Dat>
	LCD_Send_Dat(x1 & 0x00FF);
 8004272:	88fb      	ldrh	r3, [r7, #6]
 8004274:	b2db      	uxtb	r3, r3
 8004276:	b29b      	uxth	r3, r3
 8004278:	4618      	mov	r0, r3
 800427a:	f7ff ffad 	bl	80041d8 <LCD_Send_Dat>
	LCD_Send_Dat(x2 >> 8);
 800427e:	887b      	ldrh	r3, [r7, #2]
 8004280:	0a1b      	lsrs	r3, r3, #8
 8004282:	b29b      	uxth	r3, r3
 8004284:	4618      	mov	r0, r3
 8004286:	f7ff ffa7 	bl	80041d8 <LCD_Send_Dat>
	LCD_Send_Dat(x2 & 0x00FF);
 800428a:	887b      	ldrh	r3, [r7, #2]
 800428c:	b2db      	uxtb	r3, r3
 800428e:	b29b      	uxth	r3, r3
 8004290:	4618      	mov	r0, r3
 8004292:	f7ff ffa1 	bl	80041d8 <LCD_Send_Dat>
	LCD_Send_Cmd(LCD_GRAM);
 8004296:	202c      	movs	r0, #44	; 0x2c
 8004298:	f7ff ff8f 	bl	80041ba <LCD_Send_Cmd>
}
 800429c:	bf00      	nop
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd90      	pop	{r4, r7, pc}

080042a4 <LCD_Rect_Fill>:
void LCD_Pixel(uint16_t x, uint16_t y, uint32_t color24) {
	LCD_Window(x, y, x, y);
	LCD_Send_Dat(H24_RGB565(1, color24));
}

void LCD_Rect_Fill(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint32_t color24) {
 80042a4:	b590      	push	{r4, r7, lr}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	4604      	mov	r4, r0
 80042ac:	4608      	mov	r0, r1
 80042ae:	4611      	mov	r1, r2
 80042b0:	461a      	mov	r2, r3
 80042b2:	4623      	mov	r3, r4
 80042b4:	80fb      	strh	r3, [r7, #6]
 80042b6:	4603      	mov	r3, r0
 80042b8:	80bb      	strh	r3, [r7, #4]
 80042ba:	460b      	mov	r3, r1
 80042bc:	807b      	strh	r3, [r7, #2]
 80042be:	4613      	mov	r3, r2
 80042c0:	803b      	strh	r3, [r7, #0]
	uint32_t i = 0;
 80042c2:	2300      	movs	r3, #0
 80042c4:	60fb      	str	r3, [r7, #12]
	uint32_t j = (uint32_t) w * (uint32_t) h;
 80042c6:	887b      	ldrh	r3, [r7, #2]
 80042c8:	883a      	ldrh	r2, [r7, #0]
 80042ca:	fb02 f303 	mul.w	r3, r2, r3
 80042ce:	60bb      	str	r3, [r7, #8]
	LCD_Window(y, x, y + h - 1, x + w - 1);
 80042d0:	88ba      	ldrh	r2, [r7, #4]
 80042d2:	883b      	ldrh	r3, [r7, #0]
 80042d4:	4413      	add	r3, r2
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	3b01      	subs	r3, #1
 80042da:	b29c      	uxth	r4, r3
 80042dc:	88fa      	ldrh	r2, [r7, #6]
 80042de:	887b      	ldrh	r3, [r7, #2]
 80042e0:	4413      	add	r3, r2
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	3b01      	subs	r3, #1
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	88f9      	ldrh	r1, [r7, #6]
 80042ea:	88b8      	ldrh	r0, [r7, #4]
 80042ec:	4622      	mov	r2, r4
 80042ee:	f7ff ff8d 	bl	800420c <LCD_Window>
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 80042f2:	2300      	movs	r3, #0
 80042f4:	60fb      	str	r3, [r7, #12]
 80042f6:	e00a      	b.n	800430e <LCD_Rect_Fill+0x6a>
 80042f8:	6a39      	ldr	r1, [r7, #32]
 80042fa:	2001      	movs	r0, #1
 80042fc:	f7ff ff1f 	bl	800413e <H24_RGB565>
 8004300:	4603      	mov	r3, r0
 8004302:	4618      	mov	r0, r3
 8004304:	f7ff ff68 	bl	80041d8 <LCD_Send_Dat>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	3301      	adds	r3, #1
 800430c:	60fb      	str	r3, [r7, #12]
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	429a      	cmp	r2, r3
 8004314:	d3f0      	bcc.n	80042f8 <LCD_Rect_Fill+0x54>
}
 8004316:	bf00      	nop
 8004318:	bf00      	nop
 800431a:	3714      	adds	r7, #20
 800431c:	46bd      	mov	sp, r7
 800431e:	bd90      	pop	{r4, r7, pc}

08004320 <LCD_Line>:

void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24) {
 8004320:	b590      	push	{r4, r7, lr}
 8004322:	b08b      	sub	sp, #44	; 0x2c
 8004324:	af02      	add	r7, sp, #8
 8004326:	4604      	mov	r4, r0
 8004328:	4608      	mov	r0, r1
 800432a:	4611      	mov	r1, r2
 800432c:	461a      	mov	r2, r3
 800432e:	4623      	mov	r3, r4
 8004330:	80fb      	strh	r3, [r7, #6]
 8004332:	4603      	mov	r3, r0
 8004334:	80bb      	strh	r3, [r7, #4]
 8004336:	460b      	mov	r3, r1
 8004338:	807b      	strh	r3, [r7, #2]
 800433a:	4613      	mov	r3, r2
 800433c:	803b      	strh	r3, [r7, #0]
	int deltaX = abs(x2 - x1);
 800433e:	887a      	ldrh	r2, [r7, #2]
 8004340:	88fb      	ldrh	r3, [r7, #6]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	2b00      	cmp	r3, #0
 8004346:	bfb8      	it	lt
 8004348:	425b      	neglt	r3, r3
 800434a:	61bb      	str	r3, [r7, #24]
	int deltaY = abs(y2 - y1);
 800434c:	883a      	ldrh	r2, [r7, #0]
 800434e:	88bb      	ldrh	r3, [r7, #4]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	bfb8      	it	lt
 8004356:	425b      	neglt	r3, r3
 8004358:	617b      	str	r3, [r7, #20]
	int signX = x1 < x2 ? 1 : -1;
 800435a:	88fa      	ldrh	r2, [r7, #6]
 800435c:	887b      	ldrh	r3, [r7, #2]
 800435e:	429a      	cmp	r2, r3
 8004360:	d201      	bcs.n	8004366 <LCD_Line+0x46>
 8004362:	2301      	movs	r3, #1
 8004364:	e001      	b.n	800436a <LCD_Line+0x4a>
 8004366:	f04f 33ff 	mov.w	r3, #4294967295
 800436a:	613b      	str	r3, [r7, #16]
	int signY = y1 < y2 ? 1 : -1;
 800436c:	88ba      	ldrh	r2, [r7, #4]
 800436e:	883b      	ldrh	r3, [r7, #0]
 8004370:	429a      	cmp	r2, r3
 8004372:	d201      	bcs.n	8004378 <LCD_Line+0x58>
 8004374:	2301      	movs	r3, #1
 8004376:	e001      	b.n	800437c <LCD_Line+0x5c>
 8004378:	f04f 33ff 	mov.w	r3, #4294967295
 800437c:	60fb      	str	r3, [r7, #12]
	int error = deltaX - deltaY;
 800437e:	69ba      	ldr	r2, [r7, #24]
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	61fb      	str	r3, [r7, #28]
	int error2 = 0;
 8004386:	2300      	movs	r3, #0
 8004388:	60bb      	str	r3, [r7, #8]
	for (;;)
	{
		LCD_Rect_Fill(x1, y1, size, size, color24);
 800438a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800438e:	b29a      	uxth	r2, r3
 8004390:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004394:	b29c      	uxth	r4, r3
 8004396:	88b9      	ldrh	r1, [r7, #4]
 8004398:	88f8      	ldrh	r0, [r7, #6]
 800439a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800439c:	9300      	str	r3, [sp, #0]
 800439e:	4623      	mov	r3, r4
 80043a0:	f7ff ff80 	bl	80042a4 <LCD_Rect_Fill>
		if (x1 == x2 && y1 == y2)
 80043a4:	88fa      	ldrh	r2, [r7, #6]
 80043a6:	887b      	ldrh	r3, [r7, #2]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d103      	bne.n	80043b4 <LCD_Line+0x94>
 80043ac:	88ba      	ldrh	r2, [r7, #4]
 80043ae:	883b      	ldrh	r3, [r7, #0]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d01e      	beq.n	80043f2 <LCD_Line+0xd2>
		break;
		error2 = error * 2;
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	005b      	lsls	r3, r3, #1
 80043b8:	60bb      	str	r3, [r7, #8]
		if (error2 > -deltaY)
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	425b      	negs	r3, r3
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	dd08      	ble.n	80043d6 <LCD_Line+0xb6>
		{
			error -= deltaY;
 80043c4:	69fa      	ldr	r2, [r7, #28]
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	61fb      	str	r3, [r7, #28]
			x1 += signX;
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	88fb      	ldrh	r3, [r7, #6]
 80043d2:	4413      	add	r3, r2
 80043d4:	80fb      	strh	r3, [r7, #6]
		}
		if (error2 < deltaX)
 80043d6:	68ba      	ldr	r2, [r7, #8]
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	429a      	cmp	r2, r3
 80043dc:	dad5      	bge.n	800438a <LCD_Line+0x6a>
		{
			error += deltaX;
 80043de:	69fa      	ldr	r2, [r7, #28]
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	4413      	add	r3, r2
 80043e4:	61fb      	str	r3, [r7, #28]
			y1 += signY;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	88bb      	ldrh	r3, [r7, #4]
 80043ec:	4413      	add	r3, r2
 80043ee:	80bb      	strh	r3, [r7, #4]
		LCD_Rect_Fill(x1, y1, size, size, color24);
 80043f0:	e7cb      	b.n	800438a <LCD_Line+0x6a>
		break;
 80043f2:	bf00      	nop
		}
	}
}
 80043f4:	bf00      	nop
 80043f6:	3724      	adds	r7, #36	; 0x24
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd90      	pop	{r4, r7, pc}

080043fc <LCD_Rect>:
		x += xinc2;
		y += yinc2;
	}
}

void LCD_Rect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t size, uint32_t color24) {
 80043fc:	b590      	push	{r4, r7, lr}
 80043fe:	b085      	sub	sp, #20
 8004400:	af02      	add	r7, sp, #8
 8004402:	4604      	mov	r4, r0
 8004404:	4608      	mov	r0, r1
 8004406:	4611      	mov	r1, r2
 8004408:	461a      	mov	r2, r3
 800440a:	4623      	mov	r3, r4
 800440c:	80fb      	strh	r3, [r7, #6]
 800440e:	4603      	mov	r3, r0
 8004410:	80bb      	strh	r3, [r7, #4]
 8004412:	460b      	mov	r3, r1
 8004414:	807b      	strh	r3, [r7, #2]
 8004416:	4613      	mov	r3, r2
 8004418:	803b      	strh	r3, [r7, #0]
	LCD_Line(x, y, x + w, y, size, color24);
 800441a:	88fa      	ldrh	r2, [r7, #6]
 800441c:	887b      	ldrh	r3, [r7, #2]
 800441e:	4413      	add	r3, r2
 8004420:	b29a      	uxth	r2, r3
 8004422:	88bc      	ldrh	r4, [r7, #4]
 8004424:	88b9      	ldrh	r1, [r7, #4]
 8004426:	88f8      	ldrh	r0, [r7, #6]
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	9301      	str	r3, [sp, #4]
 800442c:	7e3b      	ldrb	r3, [r7, #24]
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	4623      	mov	r3, r4
 8004432:	f7ff ff75 	bl	8004320 <LCD_Line>
	LCD_Line(x, y + h, x + w, y + h, size, color24);
 8004436:	88ba      	ldrh	r2, [r7, #4]
 8004438:	883b      	ldrh	r3, [r7, #0]
 800443a:	4413      	add	r3, r2
 800443c:	b299      	uxth	r1, r3
 800443e:	88fa      	ldrh	r2, [r7, #6]
 8004440:	887b      	ldrh	r3, [r7, #2]
 8004442:	4413      	add	r3, r2
 8004444:	b29c      	uxth	r4, r3
 8004446:	88ba      	ldrh	r2, [r7, #4]
 8004448:	883b      	ldrh	r3, [r7, #0]
 800444a:	4413      	add	r3, r2
 800444c:	b29a      	uxth	r2, r3
 800444e:	88f8      	ldrh	r0, [r7, #6]
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	9301      	str	r3, [sp, #4]
 8004454:	7e3b      	ldrb	r3, [r7, #24]
 8004456:	9300      	str	r3, [sp, #0]
 8004458:	4613      	mov	r3, r2
 800445a:	4622      	mov	r2, r4
 800445c:	f7ff ff60 	bl	8004320 <LCD_Line>
	LCD_Line(x, y, x, y + h, size, color24);
 8004460:	88ba      	ldrh	r2, [r7, #4]
 8004462:	883b      	ldrh	r3, [r7, #0]
 8004464:	4413      	add	r3, r2
 8004466:	b29c      	uxth	r4, r3
 8004468:	88fa      	ldrh	r2, [r7, #6]
 800446a:	88b9      	ldrh	r1, [r7, #4]
 800446c:	88f8      	ldrh	r0, [r7, #6]
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	9301      	str	r3, [sp, #4]
 8004472:	7e3b      	ldrb	r3, [r7, #24]
 8004474:	9300      	str	r3, [sp, #0]
 8004476:	4623      	mov	r3, r4
 8004478:	f7ff ff52 	bl	8004320 <LCD_Line>
	LCD_Line(x + w, y, x + w, y + h, size, color24);
 800447c:	88fa      	ldrh	r2, [r7, #6]
 800447e:	887b      	ldrh	r3, [r7, #2]
 8004480:	4413      	add	r3, r2
 8004482:	b298      	uxth	r0, r3
 8004484:	88fa      	ldrh	r2, [r7, #6]
 8004486:	887b      	ldrh	r3, [r7, #2]
 8004488:	4413      	add	r3, r2
 800448a:	b29c      	uxth	r4, r3
 800448c:	88ba      	ldrh	r2, [r7, #4]
 800448e:	883b      	ldrh	r3, [r7, #0]
 8004490:	4413      	add	r3, r2
 8004492:	b29a      	uxth	r2, r3
 8004494:	88b9      	ldrh	r1, [r7, #4]
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	9301      	str	r3, [sp, #4]
 800449a:	7e3b      	ldrb	r3, [r7, #24]
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	4613      	mov	r3, r2
 80044a0:	4622      	mov	r2, r4
 80044a2:	f7ff ff3d 	bl	8004320 <LCD_Line>
}
 80044a6:	bf00      	nop
 80044a8:	370c      	adds	r7, #12
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd90      	pop	{r4, r7, pc}

080044ae <LCD_Circle>:
			s += rx2 * ((4 * y) + 6);
		}
	}
}

void LCD_Circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t fill, uint8_t size, uint32_t color24) {
 80044ae:	b590      	push	{r4, r7, lr}
 80044b0:	b089      	sub	sp, #36	; 0x24
 80044b2:	af02      	add	r7, sp, #8
 80044b4:	4604      	mov	r4, r0
 80044b6:	4608      	mov	r0, r1
 80044b8:	4611      	mov	r1, r2
 80044ba:	461a      	mov	r2, r3
 80044bc:	4623      	mov	r3, r4
 80044be:	80fb      	strh	r3, [r7, #6]
 80044c0:	4603      	mov	r3, r0
 80044c2:	80bb      	strh	r3, [r7, #4]
 80044c4:	460b      	mov	r3, r1
 80044c6:	70fb      	strb	r3, [r7, #3]
 80044c8:	4613      	mov	r3, r2
 80044ca:	70bb      	strb	r3, [r7, #2]
	int a_, b_, P;
	a_ = 0;
 80044cc:	2300      	movs	r3, #0
 80044ce:	617b      	str	r3, [r7, #20]
	b_ = radius;
 80044d0:	78fb      	ldrb	r3, [r7, #3]
 80044d2:	613b      	str	r3, [r7, #16]
	P = 1 - radius;
 80044d4:	78fb      	ldrb	r3, [r7, #3]
 80044d6:	f1c3 0301 	rsb	r3, r3, #1
 80044da:	60fb      	str	r3, [r7, #12]
	while (a_ <= b_)
 80044dc:	e0fc      	b.n	80046d8 <LCD_Circle+0x22a>
	{
		if (fill == 1)
 80044de:	78bb      	ldrb	r3, [r7, #2]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d136      	bne.n	8004552 <LCD_Circle+0xa4>
		{
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	88fa      	ldrh	r2, [r7, #6]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	b298      	uxth	r0, r3
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	88ba      	ldrh	r2, [r7, #4]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	b299      	uxth	r1, r3
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	005b      	lsls	r3, r3, #1
 80044fe:	b29b      	uxth	r3, r3
 8004500:	3301      	adds	r3, #1
 8004502:	b29a      	uxth	r2, r3
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	b29b      	uxth	r3, r3
 8004508:	005b      	lsls	r3, r3, #1
 800450a:	b29b      	uxth	r3, r3
 800450c:	3301      	adds	r3, #1
 800450e:	b29c      	uxth	r4, r3
 8004510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004512:	9300      	str	r3, [sp, #0]
 8004514:	4623      	mov	r3, r4
 8004516:	f7ff fec5 	bl	80042a4 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	b29b      	uxth	r3, r3
 800451e:	88fa      	ldrh	r2, [r7, #6]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	b298      	uxth	r0, r3
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	b29b      	uxth	r3, r3
 8004528:	88ba      	ldrh	r2, [r7, #4]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	b299      	uxth	r1, r3
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	b29b      	uxth	r3, r3
 8004532:	005b      	lsls	r3, r3, #1
 8004534:	b29b      	uxth	r3, r3
 8004536:	3301      	adds	r3, #1
 8004538:	b29a      	uxth	r2, r3
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	b29b      	uxth	r3, r3
 800453e:	005b      	lsls	r3, r3, #1
 8004540:	b29b      	uxth	r3, r3
 8004542:	3301      	adds	r3, #1
 8004544:	b29c      	uxth	r4, r3
 8004546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004548:	9300      	str	r3, [sp, #0]
 800454a:	4623      	mov	r3, r4
 800454c:	f7ff feaa 	bl	80042a4 <LCD_Rect_Fill>
 8004550:	e0a7      	b.n	80046a2 <LCD_Circle+0x1f4>
		}
		else
		{
			LCD_Rect_Fill(a_ + x, b_ + y, size, size, color24);
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	b29a      	uxth	r2, r3
 8004556:	88fb      	ldrh	r3, [r7, #6]
 8004558:	4413      	add	r3, r2
 800455a:	b298      	uxth	r0, r3
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	b29a      	uxth	r2, r3
 8004560:	88bb      	ldrh	r3, [r7, #4]
 8004562:	4413      	add	r3, r2
 8004564:	b299      	uxth	r1, r3
 8004566:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800456a:	b29a      	uxth	r2, r3
 800456c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004570:	b29c      	uxth	r4, r3
 8004572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004574:	9300      	str	r3, [sp, #0]
 8004576:	4623      	mov	r3, r4
 8004578:	f7ff fe94 	bl	80042a4 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, a_ + y, size, size, color24);
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	b29a      	uxth	r2, r3
 8004580:	88fb      	ldrh	r3, [r7, #6]
 8004582:	4413      	add	r3, r2
 8004584:	b298      	uxth	r0, r3
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	b29a      	uxth	r2, r3
 800458a:	88bb      	ldrh	r3, [r7, #4]
 800458c:	4413      	add	r3, r2
 800458e:	b299      	uxth	r1, r3
 8004590:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004594:	b29a      	uxth	r2, r3
 8004596:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800459a:	b29c      	uxth	r4, r3
 800459c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800459e:	9300      	str	r3, [sp, #0]
 80045a0:	4623      	mov	r3, r4
 80045a2:	f7ff fe7f 	bl	80042a4 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, b_ + y, size, size, color24);
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	88fa      	ldrh	r2, [r7, #6]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	b298      	uxth	r0, r3
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	88bb      	ldrh	r3, [r7, #4]
 80045b6:	4413      	add	r3, r2
 80045b8:	b299      	uxth	r1, r3
 80045ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80045be:	b29a      	uxth	r2, r3
 80045c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80045c4:	b29c      	uxth	r4, r3
 80045c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c8:	9300      	str	r3, [sp, #0]
 80045ca:	4623      	mov	r3, r4
 80045cc:	f7ff fe6a 	bl	80042a4 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, a_ + y, size, size, color24);
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	88fa      	ldrh	r2, [r7, #6]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	b298      	uxth	r0, r3
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	b29a      	uxth	r2, r3
 80045de:	88bb      	ldrh	r3, [r7, #4]
 80045e0:	4413      	add	r3, r2
 80045e2:	b299      	uxth	r1, r3
 80045e4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80045ee:	b29c      	uxth	r4, r3
 80045f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f2:	9300      	str	r3, [sp, #0]
 80045f4:	4623      	mov	r3, r4
 80045f6:	f7ff fe55 	bl	80042a4 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, y - a_, size, size, color24);
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	88fb      	ldrh	r3, [r7, #6]
 8004600:	4413      	add	r3, r2
 8004602:	b298      	uxth	r0, r3
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	b29b      	uxth	r3, r3
 8004608:	88ba      	ldrh	r2, [r7, #4]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	b299      	uxth	r1, r3
 800460e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004612:	b29a      	uxth	r2, r3
 8004614:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004618:	b29c      	uxth	r4, r3
 800461a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800461c:	9300      	str	r3, [sp, #0]
 800461e:	4623      	mov	r3, r4
 8004620:	f7ff fe40 	bl	80042a4 <LCD_Rect_Fill>
			LCD_Rect_Fill(a_ + x, y - b_, size, size, color24);
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	b29a      	uxth	r2, r3
 8004628:	88fb      	ldrh	r3, [r7, #6]
 800462a:	4413      	add	r3, r2
 800462c:	b298      	uxth	r0, r3
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	b29b      	uxth	r3, r3
 8004632:	88ba      	ldrh	r2, [r7, #4]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	b299      	uxth	r1, r3
 8004638:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800463c:	b29a      	uxth	r2, r3
 800463e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004642:	b29c      	uxth	r4, r3
 8004644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004646:	9300      	str	r3, [sp, #0]
 8004648:	4623      	mov	r3, r4
 800464a:	f7ff fe2b 	bl	80042a4 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, y - b_, size, size, color24);
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	b29b      	uxth	r3, r3
 8004652:	88fa      	ldrh	r2, [r7, #6]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	b298      	uxth	r0, r3
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	b29b      	uxth	r3, r3
 800465c:	88ba      	ldrh	r2, [r7, #4]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	b299      	uxth	r1, r3
 8004662:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004666:	b29a      	uxth	r2, r3
 8004668:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800466c:	b29c      	uxth	r4, r3
 800466e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	4623      	mov	r3, r4
 8004674:	f7ff fe16 	bl	80042a4 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, size, size, color24);
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	b29b      	uxth	r3, r3
 800467c:	88fa      	ldrh	r2, [r7, #6]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	b298      	uxth	r0, r3
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	b29b      	uxth	r3, r3
 8004686:	88ba      	ldrh	r2, [r7, #4]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	b299      	uxth	r1, r3
 800468c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004690:	b29a      	uxth	r2, r3
 8004692:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004696:	b29c      	uxth	r4, r3
 8004698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800469a:	9300      	str	r3, [sp, #0]
 800469c:	4623      	mov	r3, r4
 800469e:	f7ff fe01 	bl	80042a4 <LCD_Rect_Fill>
		}
		if (P < 0)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	da09      	bge.n	80046bc <LCD_Circle+0x20e>
		{
			P = (P + 3) + (2 * a_);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	1cda      	adds	r2, r3, #3
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	005b      	lsls	r3, r3, #1
 80046b0:	4413      	add	r3, r2
 80046b2:	60fb      	str	r3, [r7, #12]
			a_++;
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	3301      	adds	r3, #1
 80046b8:	617b      	str	r3, [r7, #20]
 80046ba:	e00d      	b.n	80046d8 <LCD_Circle+0x22a>
		}
		else
		{
			P = (P + 5) + (2 * (a_ - b_));
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	1d5a      	adds	r2, r3, #5
 80046c0:	6979      	ldr	r1, [r7, #20]
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	1acb      	subs	r3, r1, r3
 80046c6:	005b      	lsls	r3, r3, #1
 80046c8:	4413      	add	r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]
			a_++;
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	3301      	adds	r3, #1
 80046d0:	617b      	str	r3, [r7, #20]
			b_--;
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	3b01      	subs	r3, #1
 80046d6:	613b      	str	r3, [r7, #16]
	while (a_ <= b_)
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	429a      	cmp	r2, r3
 80046de:	f77f aefe 	ble.w	80044de <LCD_Circle+0x30>
		}
	}
}
 80046e2:	bf00      	nop
 80046e4:	bf00      	nop
 80046e6:	371c      	adds	r7, #28
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd90      	pop	{r4, r7, pc}

080046ec <LCD_Char>:
	LCD_Rect_Fill(x + r, y, length - 2 * r, width, color24);
	LCD_Circle_Fill_Helper(x + length - r - 1, y + r, r, 1, width - 2 * r - 1, color24);
	LCD_Circle_Fill_Helper(x + r, y + r, r, 2, width - 2 * r - 1, color24);
}

static void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24) {
 80046ec:	b590      	push	{r4, r7, lr}
 80046ee:	b08b      	sub	sp, #44	; 0x2c
 80046f0:	af02      	add	r7, sp, #8
 80046f2:	60ba      	str	r2, [r7, #8]
 80046f4:	607b      	str	r3, [r7, #4]
 80046f6:	4603      	mov	r3, r0
 80046f8:	81fb      	strh	r3, [r7, #14]
 80046fa:	460b      	mov	r3, r1
 80046fc:	81bb      	strh	r3, [r7, #12]
	uint8_t  *bitmap = font -> bitmap;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	617b      	str	r3, [r7, #20]
	uint16_t bo = glyph -> bitmapOffset;
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	881b      	ldrh	r3, [r3, #0]
 8004708:	83fb      	strh	r3, [r7, #30]
	uint8_t bits = 0, bit = 0;
 800470a:	2300      	movs	r3, #0
 800470c:	777b      	strb	r3, [r7, #29]
 800470e:	2300      	movs	r3, #0
 8004710:	773b      	strb	r3, [r7, #28]
	uint16_t set_pixels = 0;
 8004712:	2300      	movs	r3, #0
 8004714:	837b      	strh	r3, [r7, #26]
	uint8_t  cur_x, cur_y;
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8004716:	2300      	movs	r3, #0
 8004718:	763b      	strb	r3, [r7, #24]
 800471a:	e093      	b.n	8004844 <LCD_Char+0x158>
	{
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 800471c:	2300      	movs	r3, #0
 800471e:	767b      	strb	r3, [r7, #25]
 8004720:	e052      	b.n	80047c8 <LCD_Char+0xdc>
		{
			if(bit == 0)
 8004722:	7f3b      	ldrb	r3, [r7, #28]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d109      	bne.n	800473c <LCD_Char+0x50>
			{
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8004728:	8bfb      	ldrh	r3, [r7, #30]
 800472a:	1c5a      	adds	r2, r3, #1
 800472c:	83fa      	strh	r2, [r7, #30]
 800472e:	461a      	mov	r2, r3
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	4413      	add	r3, r2
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	777b      	strb	r3, [r7, #29]
				bit  = 0x80;
 8004738:	2380      	movs	r3, #128	; 0x80
 800473a:	773b      	strb	r3, [r7, #28]
			}
			if(bits & bit)
 800473c:	7f7a      	ldrb	r2, [r7, #29]
 800473e:	7f3b      	ldrb	r3, [r7, #28]
 8004740:	4013      	ands	r3, r2
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b00      	cmp	r3, #0
 8004746:	d003      	beq.n	8004750 <LCD_Char+0x64>
			{
				set_pixels++;
 8004748:	8b7b      	ldrh	r3, [r7, #26]
 800474a:	3301      	adds	r3, #1
 800474c:	837b      	strh	r3, [r7, #26]
 800474e:	e035      	b.n	80047bc <LCD_Char+0xd0>
			}
			else if (set_pixels > 0)
 8004750:	8b7b      	ldrh	r3, [r7, #26]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d032      	beq.n	80047bc <LCD_Char+0xd0>
			{
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800475c:	461a      	mov	r2, r3
 800475e:	7e7b      	ldrb	r3, [r7, #25]
 8004760:	441a      	add	r2, r3
 8004762:	8b7b      	ldrh	r3, [r7, #26]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	b29a      	uxth	r2, r3
 8004768:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800476c:	b29b      	uxth	r3, r3
 800476e:	fb12 f303 	smulbb	r3, r2, r3
 8004772:	b29a      	uxth	r2, r3
 8004774:	89fb      	ldrh	r3, [r7, #14]
 8004776:	4413      	add	r3, r2
 8004778:	b298      	uxth	r0, r3
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8004780:	461a      	mov	r2, r3
 8004782:	7e3b      	ldrb	r3, [r7, #24]
 8004784:	4413      	add	r3, r2
 8004786:	b29a      	uxth	r2, r3
 8004788:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800478c:	b29b      	uxth	r3, r3
 800478e:	fb12 f303 	smulbb	r3, r2, r3
 8004792:	b29a      	uxth	r2, r3
 8004794:	89bb      	ldrh	r3, [r7, #12]
 8004796:	4413      	add	r3, r2
 8004798:	b299      	uxth	r1, r3
 800479a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800479e:	b29b      	uxth	r3, r3
 80047a0:	8b7a      	ldrh	r2, [r7, #26]
 80047a2:	fb12 f303 	smulbb	r3, r2, r3
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80047ac:	b29c      	uxth	r4, r3
 80047ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	4623      	mov	r3, r4
 80047b4:	f7ff fd76 	bl	80042a4 <LCD_Rect_Fill>
				set_pixels = 0;
 80047b8:	2300      	movs	r3, #0
 80047ba:	837b      	strh	r3, [r7, #26]
			}
			bit >>= 1;
 80047bc:	7f3b      	ldrb	r3, [r7, #28]
 80047be:	085b      	lsrs	r3, r3, #1
 80047c0:	773b      	strb	r3, [r7, #28]
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 80047c2:	7e7b      	ldrb	r3, [r7, #25]
 80047c4:	3301      	adds	r3, #1
 80047c6:	767b      	strb	r3, [r7, #25]
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	789b      	ldrb	r3, [r3, #2]
 80047cc:	7e7a      	ldrb	r2, [r7, #25]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d3a7      	bcc.n	8004722 <LCD_Char+0x36>
		}
		if (set_pixels > 0)
 80047d2:	8b7b      	ldrh	r3, [r7, #26]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d032      	beq.n	800483e <LCD_Char+0x152>
		{
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80047de:	461a      	mov	r2, r3
 80047e0:	7e7b      	ldrb	r3, [r7, #25]
 80047e2:	441a      	add	r2, r3
 80047e4:	8b7b      	ldrh	r3, [r7, #26]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	b29a      	uxth	r2, r3
 80047ea:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	fb12 f303 	smulbb	r3, r2, r3
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	89fb      	ldrh	r3, [r7, #14]
 80047f8:	4413      	add	r3, r2
 80047fa:	b298      	uxth	r0, r3
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8004802:	461a      	mov	r2, r3
 8004804:	7e3b      	ldrb	r3, [r7, #24]
 8004806:	4413      	add	r3, r2
 8004808:	b29a      	uxth	r2, r3
 800480a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800480e:	b29b      	uxth	r3, r3
 8004810:	fb12 f303 	smulbb	r3, r2, r3
 8004814:	b29a      	uxth	r2, r3
 8004816:	89bb      	ldrh	r3, [r7, #12]
 8004818:	4413      	add	r3, r2
 800481a:	b299      	uxth	r1, r3
 800481c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004820:	b29b      	uxth	r3, r3
 8004822:	8b7a      	ldrh	r2, [r7, #26]
 8004824:	fb12 f303 	smulbb	r3, r2, r3
 8004828:	b29a      	uxth	r2, r3
 800482a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800482e:	b29c      	uxth	r4, r3
 8004830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	4623      	mov	r3, r4
 8004836:	f7ff fd35 	bl	80042a4 <LCD_Rect_Fill>
			set_pixels = 0;
 800483a:	2300      	movs	r3, #0
 800483c:	837b      	strh	r3, [r7, #26]
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 800483e:	7e3b      	ldrb	r3, [r7, #24]
 8004840:	3301      	adds	r3, #1
 8004842:	763b      	strb	r3, [r7, #24]
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	78db      	ldrb	r3, [r3, #3]
 8004848:	7e3a      	ldrb	r2, [r7, #24]
 800484a:	429a      	cmp	r2, r3
 800484c:	f4ff af66 	bcc.w	800471c <LCD_Char+0x30>
		}
	}
}
 8004850:	bf00      	nop
 8004852:	bf00      	nop
 8004854:	3724      	adds	r7, #36	; 0x24
 8004856:	46bd      	mov	sp, r7
 8004858:	bd90      	pop	{r4, r7, pc}

0800485a <LCD_Font>:

void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24) {
 800485a:	b590      	push	{r4, r7, lr}
 800485c:	b08f      	sub	sp, #60	; 0x3c
 800485e:	af02      	add	r7, sp, #8
 8004860:	60ba      	str	r2, [r7, #8]
 8004862:	607b      	str	r3, [r7, #4]
 8004864:	4603      	mov	r3, r0
 8004866:	81fb      	strh	r3, [r7, #14]
 8004868:	460b      	mov	r3, r1
 800486a:	81bb      	strh	r3, [r7, #12]
	int16_t cursor_x = x;
 800486c:	89fb      	ldrh	r3, [r7, #14]
 800486e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int16_t cursor_y = y;
 8004870:	89bb      	ldrh	r3, [r7, #12]
 8004872:	85bb      	strh	r3, [r7, #44]	; 0x2c
	GFXfont font;
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 8004874:	f107 031c 	add.w	r3, r7, #28
 8004878:	220c      	movs	r2, #12
 800487a:	6879      	ldr	r1, [r7, #4]
 800487c:	4618      	mov	r0, r3
 800487e:	f005 f85b 	bl	8009938 <memcpy>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004882:	2300      	movs	r3, #0
 8004884:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004886:	e056      	b.n	8004936 <LCD_Font+0xdc>
	{
		char c = text[text_pos];
 8004888:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	4413      	add	r3, r2
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		if(c == '\n')
 8004894:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004898:	2b0a      	cmp	r3, #10
 800489a:	d10f      	bne.n	80048bc <LCD_Font+0x62>
		{
			cursor_x = x;
 800489c:	89fb      	ldrh	r3, [r7, #14]
 800489e:	85fb      	strh	r3, [r7, #46]	; 0x2e
			cursor_y += font.yAdvance * size;
 80048a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	fb12 f303 	smulbb	r3, r2, r3
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80048b4:	4413      	add	r3, r2
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80048ba:	e039      	b.n	8004930 <LCD_Font+0xd6>
		}
		else if(c >= font.first && c <= font.last && c != '\r')
 80048bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80048c0:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d333      	bcc.n	8004930 <LCD_Font+0xd6>
 80048c8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80048cc:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d82d      	bhi.n	8004930 <LCD_Font+0xd6>
 80048d4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80048d8:	2b0d      	cmp	r3, #13
 80048da:	d029      	beq.n	8004930 <LCD_Font+0xd6>
		{
			GFXglyph glyph;
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80048dc:	6a3a      	ldr	r2, [r7, #32]
 80048de:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80048e2:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80048e6:	1a5b      	subs	r3, r3, r1
 80048e8:	00db      	lsls	r3, r3, #3
 80048ea:	18d1      	adds	r1, r2, r3
 80048ec:	f107 0314 	add.w	r3, r7, #20
 80048f0:	2208      	movs	r2, #8
 80048f2:	4618      	mov	r0, r3
 80048f4:	f005 f820 	bl	8009938 <memcpy>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80048f8:	f107 041c 	add.w	r4, r7, #28
 80048fc:	f107 0214 	add.w	r2, r7, #20
 8004900:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8004904:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8004908:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800490a:	9301      	str	r3, [sp, #4]
 800490c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8004910:	9300      	str	r3, [sp, #0]
 8004912:	4623      	mov	r3, r4
 8004914:	f7ff feea 	bl	80046ec <LCD_Char>
			cursor_x += glyph.xAdvance * size;
 8004918:	7e3b      	ldrb	r3, [r7, #24]
 800491a:	b29a      	uxth	r2, r3
 800491c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8004920:	b29b      	uxth	r3, r3
 8004922:	fb12 f303 	smulbb	r3, r2, r3
 8004926:	b29a      	uxth	r2, r3
 8004928:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800492a:	4413      	add	r3, r2
 800492c:	b29b      	uxth	r3, r3
 800492e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004930:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004932:	3301      	adds	r3, #1
 8004934:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004936:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8004938:	68b8      	ldr	r0, [r7, #8]
 800493a:	f7fb fc49 	bl	80001d0 <strlen>
 800493e:	4603      	mov	r3, r0
 8004940:	429c      	cmp	r4, r3
 8004942:	d3a1      	bcc.n	8004888 <LCD_Font+0x2e>
		}
	}
}
 8004944:	bf00      	nop
 8004946:	bf00      	nop
 8004948:	3734      	adds	r7, #52	; 0x34
 800494a:	46bd      	mov	sp, r7
 800494c:	bd90      	pop	{r4, r7, pc}

0800494e <LCD_Init>:

void LCD_Init(void) {
 800494e:	b580      	push	{r7, lr}
 8004950:	af00      	add	r7, sp, #0
	//		LCD_RST_SET
	//    HAL_Delay (100);
	//    LCD_RST_RESET
	//    HAL_Delay (120);
	//    LCD_RST_SET
	HAL_Delay(150);
 8004952:	2096      	movs	r0, #150	; 0x96
 8004954:	f000 fff2 	bl	800593c <HAL_Delay>
	3.  Before PLL is locked, SSD1961/2/3 is operating at input clock frequency (e.g. 10MHz), registers
	programming cannot be set faster than half of the input clock frequency (5M words/s in this example).
	Example to program SSD1961 with M = 29, N = 2, VCO = 10M x 30 = 300 MHz, PLL frequency = 300M / 3 = 100
	MHz
	******************************/
	LCD_Send_Cmd(LCD_RESET);
 8004958:	2001      	movs	r0, #1
 800495a:	f7ff fc2e 	bl	80041ba <LCD_Send_Cmd>
	LCD_Send_Cmd(LCD_DISPLAY_ON); 		
 800495e:	2029      	movs	r0, #41	; 0x29
 8004960:	f7ff fc2b 	bl	80041ba <LCD_Send_Cmd>
	LCD_Send_Cmd(0xE2);//set frequency
 8004964:	20e2      	movs	r0, #226	; 0xe2
 8004966:	f7ff fc28 	bl	80041ba <LCD_Send_Cmd>
	LCD_Send_Dat(0x1D);  // presceller(M=29) 
 800496a:	201d      	movs	r0, #29
 800496c:	f7ff fc34 	bl	80041d8 <LCD_Send_Dat>
	LCD_Send_Dat(0x02);  //multiplier(N=2) 
 8004970:	2002      	movs	r0, #2
 8004972:	f7ff fc31 	bl	80041d8 <LCD_Send_Dat>
	LCD_Send_Dat(0xFF);  //on-off multiplier and presceller
 8004976:	20ff      	movs	r0, #255	; 0xff
 8004978:	f7ff fc2e 	bl	80041d8 <LCD_Send_Dat>
	//3. Turn on the PLL 
	LCD_Send_Cmd(0xE0);
 800497c:	20e0      	movs	r0, #224	; 0xe0
 800497e:	f7ff fc1c 	bl	80041ba <LCD_Send_Cmd>
	LCD_Send_Dat(0x01);
 8004982:	2001      	movs	r0, #1
 8004984:	f7ff fc28 	bl	80041d8 <LCD_Send_Dat>
	HAL_Delay(120); // Wait for 100us to let the PLL stable and read the PLL lock status bit. 
 8004988:	2078      	movs	r0, #120	; 0x78
 800498a:	f000 ffd7 	bl	800593c <HAL_Delay>
	LCD_Send_Cmd(0xE0);
 800498e:	20e0      	movs	r0, #224	; 0xe0
 8004990:	f7ff fc13 	bl	80041ba <LCD_Send_Cmd>
	//READ COMMAND “0xE4);   (Bit 2 = 1 if PLL locked) 
	LCD_Send_Dat(0x03); // 5. Switch the clock source to PLL 
 8004994:	2003      	movs	r0, #3
 8004996:	f7ff fc1f 	bl	80041d8 <LCD_Send_Dat>
	HAL_Delay(120);
 800499a:	2078      	movs	r0, #120	; 0x78
 800499c:	f000 ffce 	bl	800593c <HAL_Delay>
	LCD_Send_Cmd(0x01); //6. Software Reset
 80049a0:	2001      	movs	r0, #1
 80049a2:	f7ff fc0a 	bl	80041ba <LCD_Send_Cmd>
	HAL_Delay(120);
 80049a6:	2078      	movs	r0, #120	; 0x78
 80049a8:	f000 ffc8 	bl	800593c <HAL_Delay>
	/*************
	Dot clock Freq = PLL Freq x (LCDC_FPR + 1) / 2^20
	For example,  22MHz = 100MHz * (LCDC_FPR+1) / 2^20
	LCDC_FPR = 230685 = 0x3851D
	********************/
	LCD_Send_Cmd(0xE6);  // 7. Configure the dot clock frequency
 80049ac:	20e6      	movs	r0, #230	; 0xe6
 80049ae:	f7ff fc04 	bl	80041ba <LCD_Send_Cmd>
	LCD_Send_Dat(0x03);
 80049b2:	2003      	movs	r0, #3
 80049b4:	f7ff fc10 	bl	80041d8 <LCD_Send_Dat>
	LCD_Send_Dat(0x85);
 80049b8:	2085      	movs	r0, #133	; 0x85
 80049ba:	f7ff fc0d 	bl	80041d8 <LCD_Send_Dat>
	LCD_Send_Dat(0x1D);
 80049be:	201d      	movs	r0, #29
 80049c0:	f7ff fc0a 	bl	80041d8 <LCD_Send_Dat>
	//8. Configure the LCD panel  
	//a. Set the panel size to 480 x 800 and polarity of LSHIFT, LLINE and LFRAME to active low 
	LCD_Send_Cmd(0xB0);
 80049c4:	20b0      	movs	r0, #176	; 0xb0
 80049c6:	f7ff fbf8 	bl	80041ba <LCD_Send_Cmd>
	if (LSHIFT) LCD_Send_Dat(0x0C); /* 0x08 0x0C 0xAE(5') */else LCD_Send_Dat(0xAE); //18bit panel, disable dithering, LSHIFT: Data latch in rising edge, LLINE and LFRAME: active low 
 80049ca:	20ae      	movs	r0, #174	; 0xae
 80049cc:	f7ff fc04 	bl	80041d8 <LCD_Send_Dat>
	LCD_Send_Dat(0x20);  /* 0x00 0x80 0x20(5') */    // TFT type 
 80049d0:	2020      	movs	r0, #32
 80049d2:	f7ff fc01 	bl	80041d8 <LCD_Send_Dat>
	LCD_Send_Dat(0x03);     // Horizontal Width:  480 - 1 = 0x031F 
 80049d6:	2003      	movs	r0, #3
 80049d8:	f7ff fbfe 	bl	80041d8 <LCD_Send_Dat>
	LCD_Send_Dat(0x1F);
 80049dc:	201f      	movs	r0, #31
 80049de:	f7ff fbfb 	bl	80041d8 <LCD_Send_Dat>
	LCD_Send_Dat(0x01);     // Vertical Width :  800 -1 = 0x01DF
 80049e2:	2001      	movs	r0, #1
 80049e4:	f7ff fbf8 	bl	80041d8 <LCD_Send_Dat>
	LCD_Send_Dat(0xDF);
 80049e8:	20df      	movs	r0, #223	; 0xdf
 80049ea:	f7ff fbf5 	bl	80041d8 <LCD_Send_Dat>
	LCD_Send_Dat(0x2D);  /* 0x00 0x2d */   // 000 = режим RGB
 80049ee:	202d      	movs	r0, #45	; 0x2d
 80049f0:	f7ff fbf2 	bl	80041d8 <LCD_Send_Dat>
											 //b. Set the horizontal period 
	LCD_Send_Cmd(0xB4); // Horizontal Display Period  
 80049f4:	20b4      	movs	r0, #180	; 0xb4
 80049f6:	f7ff fbe0 	bl	80041ba <LCD_Send_Cmd>
	LCD_Send_Dat(0x03);    // HT: horizontal total period (display + non-display) – 1 = 520-1 =  519 =0x0207
 80049fa:	2003      	movs	r0, #3
 80049fc:	f7ff fbec 	bl	80041d8 <LCD_Send_Dat>
	LCD_Send_Dat(0xA0);
 8004a00:	20a0      	movs	r0, #160	; 0xa0
 8004a02:	f7ff fbe9 	bl	80041d8 <LCD_Send_Dat>
	LCD_Send_Dat(0x00);    // HPS: Horizontal Sync Pulse Start Position = Horizontal Pulse Width + Horizontal Back Porch = 16 = 0x10 
 8004a06:	2000      	movs	r0, #0
 8004a08:	f7ff fbe6 	bl	80041d8 <LCD_Send_Dat>
	LCD_Send_Dat(0x2E);
 8004a0c:	202e      	movs	r0, #46	; 0x2e
 8004a0e:	f7ff fbe3 	bl	80041d8 <LCD_Send_Dat>
	LCD_Send_Dat(0x30);     // HPW: Horizontal Sync Pulse Width - 1=8-1=7 
 8004a12:	2030      	movs	r0, #48	; 0x30
 8004a14:	f7ff fbe0 	bl	80041d8 <LCD_Send_Dat>
	LCD_Send_Dat(0x00);    // LPS: Horizontal Display Period Start Position = 0x0000 
 8004a18:	2000      	movs	r0, #0
 8004a1a:	f7ff fbdd 	bl	80041d8 <LCD_Send_Dat>
	LCD_Send_Dat(0x0F);
 8004a1e:	200f      	movs	r0, #15
 8004a20:	f7ff fbda 	bl	80041d8 <LCD_Send_Dat>
	LCD_Send_Dat(0x00);    // LPSPP: Horizontal Sync Pulse Subpixel Start Position(for serial TFT interface).  Dummy value for TFT interface. 
 8004a24:	2000      	movs	r0, #0
 8004a26:	f7ff fbd7 	bl	80041d8 <LCD_Send_Dat>
							 //c. Set the vertical period 
	LCD_Send_Cmd(0xB6);    // Vertical Display Period  
 8004a2a:	20b6      	movs	r0, #182	; 0xb6
 8004a2c:	f7ff fbc5 	bl	80041ba <LCD_Send_Cmd>
	LCD_Send_Dat(0x02);     // VT: Vertical Total (display + non-display) Period – 1  =647=0x287 
 8004a30:	2002      	movs	r0, #2
 8004a32:	f7ff fbd1 	bl	80041d8 <LCD_Send_Dat>
	LCD_Send_Dat(0x0D);
 8004a36:	200d      	movs	r0, #13
 8004a38:	f7ff fbce 	bl	80041d8 <LCD_Send_Dat>
	LCD_Send_Dat(0x00);     // VPS: Vertical Sync Pulse Start Position  =     Vertical Pulse Width + Vertical Back Porch = 2+2=4  
 8004a3c:	2000      	movs	r0, #0
 8004a3e:	f7ff fbcb 	bl	80041d8 <LCD_Send_Dat>
	LCD_Send_Dat(0x10);
 8004a42:	2010      	movs	r0, #16
 8004a44:	f7ff fbc8 	bl	80041d8 <LCD_Send_Dat>
	LCD_Send_Dat(0x10);     //VPW: Vertical Sync Pulse Width – 1 =1 
 8004a48:	2010      	movs	r0, #16
 8004a4a:	f7ff fbc5 	bl	80041d8 <LCD_Send_Dat>
	LCD_Send_Dat(0x08);     //FPS: Vertical Display Period Start Position = 0 
 8004a4e:	2008      	movs	r0, #8
 8004a50:	f7ff fbc2 	bl	80041d8 <LCD_Send_Dat>
	LCD_Send_Dat(0x00);
 8004a54:	2000      	movs	r0, #0
 8004a56:	f7ff fbbf 	bl	80041d8 <LCD_Send_Dat>
	//9. Set the back light control PWM clock frequency
	//PWM signal frequency = PLL clock / (256 * (PWMF[7:0] + 1)) / 256
	LCD_Send_Cmd(0xBE);    // PWM configuration 
 8004a5a:	20be      	movs	r0, #190	; 0xbe
 8004a5c:	f7ff fbad 	bl	80041ba <LCD_Send_Cmd>
	LCD_Send_Dat(0x08);     // set PWM signal frequency to 170Hz when PLL frequency is 100MHz 
 8004a60:	2008      	movs	r0, #8
 8004a62:	f7ff fbb9 	bl	80041d8 <LCD_Send_Dat>
	LCD_Send_Dat(0xFF);     // PWM duty cycle  (50%) 
 8004a66:	20ff      	movs	r0, #255	; 0xff
 8004a68:	f7ff fbb6 	bl	80041d8 <LCD_Send_Dat>
	LCD_Send_Dat(0x01);     // 0x09 = enable DBC, 0x01 = disable DBC  //on
 8004a6c:	2001      	movs	r0, #1
 8004a6e:	f7ff fbb3 	bl	80041d8 <LCD_Send_Dat>
	LCD_Send_Cmd(0x36);     // set address_mode
 8004a72:	2036      	movs	r0, #54	; 0x36
 8004a74:	f7ff fba1 	bl	80041ba <LCD_Send_Cmd>
	if (MIRROR_H) LCD_Send_Dat(0x02); else if (MIRROR_V) LCD_Send_Dat(0x03);
 8004a78:	2003      	movs	r0, #3
 8004a7a:	f7ff fbad 	bl	80041d8 <LCD_Send_Dat>
	//13. Setup the MCU interface for 16-bit data write (565 RGB)
	LCD_Send_Cmd(0xF0);     // mcu interface config 
 8004a7e:	20f0      	movs	r0, #240	; 0xf0
 8004a80:	f7ff fb9b 	bl	80041ba <LCD_Send_Cmd>
	LCD_Send_Dat(0x03);     // 16 bit interface (565)
 8004a84:	2003      	movs	r0, #3
 8004a86:	f7ff fba7 	bl	80041d8 <LCD_Send_Dat>
							//10. Turn on the display 						
	LCD_Send_Cmd(LCD_DISPLAY_ON);     // display on 
 8004a8a:	2029      	movs	r0, #41	; 0x29
 8004a8c:	f7ff fb95 	bl	80041ba <LCD_Send_Cmd>
}
 8004a90:	bf00      	nop
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	607b      	str	r3, [r7, #4]
 8004a9e:	4b10      	ldr	r3, [pc, #64]	; (8004ae0 <HAL_MspInit+0x4c>)
 8004aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa2:	4a0f      	ldr	r2, [pc, #60]	; (8004ae0 <HAL_MspInit+0x4c>)
 8004aa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8004aaa:	4b0d      	ldr	r3, [pc, #52]	; (8004ae0 <HAL_MspInit+0x4c>)
 8004aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ab2:	607b      	str	r3, [r7, #4]
 8004ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	603b      	str	r3, [r7, #0]
 8004aba:	4b09      	ldr	r3, [pc, #36]	; (8004ae0 <HAL_MspInit+0x4c>)
 8004abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abe:	4a08      	ldr	r2, [pc, #32]	; (8004ae0 <HAL_MspInit+0x4c>)
 8004ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ac6:	4b06      	ldr	r3, [pc, #24]	; (8004ae0 <HAL_MspInit+0x4c>)
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ace:	603b      	str	r3, [r7, #0]
 8004ad0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ad2:	bf00      	nop
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	40023800 	.word	0x40023800

08004ae4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b08a      	sub	sp, #40	; 0x28
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004aec:	f107 0314 	add.w	r3, r7, #20
 8004af0:	2200      	movs	r2, #0
 8004af2:	601a      	str	r2, [r3, #0]
 8004af4:	605a      	str	r2, [r3, #4]
 8004af6:	609a      	str	r2, [r3, #8]
 8004af8:	60da      	str	r2, [r3, #12]
 8004afa:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a17      	ldr	r2, [pc, #92]	; (8004b60 <HAL_DAC_MspInit+0x7c>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d127      	bne.n	8004b56 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8004b06:	2300      	movs	r3, #0
 8004b08:	613b      	str	r3, [r7, #16]
 8004b0a:	4b16      	ldr	r3, [pc, #88]	; (8004b64 <HAL_DAC_MspInit+0x80>)
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0e:	4a15      	ldr	r2, [pc, #84]	; (8004b64 <HAL_DAC_MspInit+0x80>)
 8004b10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b14:	6413      	str	r3, [r2, #64]	; 0x40
 8004b16:	4b13      	ldr	r3, [pc, #76]	; (8004b64 <HAL_DAC_MspInit+0x80>)
 8004b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b1e:	613b      	str	r3, [r7, #16]
 8004b20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b22:	2300      	movs	r3, #0
 8004b24:	60fb      	str	r3, [r7, #12]
 8004b26:	4b0f      	ldr	r3, [pc, #60]	; (8004b64 <HAL_DAC_MspInit+0x80>)
 8004b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2a:	4a0e      	ldr	r2, [pc, #56]	; (8004b64 <HAL_DAC_MspInit+0x80>)
 8004b2c:	f043 0301 	orr.w	r3, r3, #1
 8004b30:	6313      	str	r3, [r2, #48]	; 0x30
 8004b32:	4b0c      	ldr	r3, [pc, #48]	; (8004b64 <HAL_DAC_MspInit+0x80>)
 8004b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	60fb      	str	r3, [r7, #12]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004b3e:	2330      	movs	r3, #48	; 0x30
 8004b40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004b42:	2303      	movs	r3, #3
 8004b44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b46:	2300      	movs	r3, #0
 8004b48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b4a:	f107 0314 	add.w	r3, r7, #20
 8004b4e:	4619      	mov	r1, r3
 8004b50:	4805      	ldr	r0, [pc, #20]	; (8004b68 <HAL_DAC_MspInit+0x84>)
 8004b52:	f001 f86d 	bl	8005c30 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8004b56:	bf00      	nop
 8004b58:	3728      	adds	r7, #40	; 0x28
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	40007400 	.word	0x40007400
 8004b64:	40023800 	.word	0x40023800
 8004b68:	40020000 	.word	0x40020000

08004b6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b08a      	sub	sp, #40	; 0x28
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b74:	f107 0314 	add.w	r3, r7, #20
 8004b78:	2200      	movs	r2, #0
 8004b7a:	601a      	str	r2, [r3, #0]
 8004b7c:	605a      	str	r2, [r3, #4]
 8004b7e:	609a      	str	r2, [r3, #8]
 8004b80:	60da      	str	r2, [r3, #12]
 8004b82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a19      	ldr	r2, [pc, #100]	; (8004bf0 <HAL_I2C_MspInit+0x84>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d12b      	bne.n	8004be6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b8e:	2300      	movs	r3, #0
 8004b90:	613b      	str	r3, [r7, #16]
 8004b92:	4b18      	ldr	r3, [pc, #96]	; (8004bf4 <HAL_I2C_MspInit+0x88>)
 8004b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b96:	4a17      	ldr	r2, [pc, #92]	; (8004bf4 <HAL_I2C_MspInit+0x88>)
 8004b98:	f043 0302 	orr.w	r3, r3, #2
 8004b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b9e:	4b15      	ldr	r3, [pc, #84]	; (8004bf4 <HAL_I2C_MspInit+0x88>)
 8004ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba2:	f003 0302 	and.w	r3, r3, #2
 8004ba6:	613b      	str	r3, [r7, #16]
 8004ba8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004baa:	23c0      	movs	r3, #192	; 0xc0
 8004bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004bae:	2312      	movs	r3, #18
 8004bb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004bba:	2304      	movs	r3, #4
 8004bbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bbe:	f107 0314 	add.w	r3, r7, #20
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	480c      	ldr	r0, [pc, #48]	; (8004bf8 <HAL_I2C_MspInit+0x8c>)
 8004bc6:	f001 f833 	bl	8005c30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004bca:	2300      	movs	r3, #0
 8004bcc:	60fb      	str	r3, [r7, #12]
 8004bce:	4b09      	ldr	r3, [pc, #36]	; (8004bf4 <HAL_I2C_MspInit+0x88>)
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd2:	4a08      	ldr	r2, [pc, #32]	; (8004bf4 <HAL_I2C_MspInit+0x88>)
 8004bd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8004bda:	4b06      	ldr	r3, [pc, #24]	; (8004bf4 <HAL_I2C_MspInit+0x88>)
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004be2:	60fb      	str	r3, [r7, #12]
 8004be4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004be6:	bf00      	nop
 8004be8:	3728      	adds	r7, #40	; 0x28
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	40005400 	.word	0x40005400
 8004bf4:	40023800 	.word	0x40023800
 8004bf8:	40020400 	.word	0x40020400

08004bfc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b08e      	sub	sp, #56	; 0x38
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c08:	2200      	movs	r2, #0
 8004c0a:	601a      	str	r2, [r3, #0]
 8004c0c:	605a      	str	r2, [r3, #4]
 8004c0e:	609a      	str	r2, [r3, #8]
 8004c10:	60da      	str	r2, [r3, #12]
 8004c12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a5b      	ldr	r2, [pc, #364]	; (8004d88 <HAL_SPI_MspInit+0x18c>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d12c      	bne.n	8004c78 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004c1e:	2300      	movs	r3, #0
 8004c20:	623b      	str	r3, [r7, #32]
 8004c22:	4b5a      	ldr	r3, [pc, #360]	; (8004d8c <HAL_SPI_MspInit+0x190>)
 8004c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c26:	4a59      	ldr	r2, [pc, #356]	; (8004d8c <HAL_SPI_MspInit+0x190>)
 8004c28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8004c2e:	4b57      	ldr	r3, [pc, #348]	; (8004d8c <HAL_SPI_MspInit+0x190>)
 8004c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c36:	623b      	str	r3, [r7, #32]
 8004c38:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	61fb      	str	r3, [r7, #28]
 8004c3e:	4b53      	ldr	r3, [pc, #332]	; (8004d8c <HAL_SPI_MspInit+0x190>)
 8004c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c42:	4a52      	ldr	r2, [pc, #328]	; (8004d8c <HAL_SPI_MspInit+0x190>)
 8004c44:	f043 0302 	orr.w	r3, r3, #2
 8004c48:	6313      	str	r3, [r2, #48]	; 0x30
 8004c4a:	4b50      	ldr	r3, [pc, #320]	; (8004d8c <HAL_SPI_MspInit+0x190>)
 8004c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	61fb      	str	r3, [r7, #28]
 8004c54:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8004c56:	2338      	movs	r3, #56	; 0x38
 8004c58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c5a:	2302      	movs	r3, #2
 8004c5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c62:	2303      	movs	r3, #3
 8004c64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004c66:	2305      	movs	r3, #5
 8004c68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c6e:	4619      	mov	r1, r3
 8004c70:	4847      	ldr	r0, [pc, #284]	; (8004d90 <HAL_SPI_MspInit+0x194>)
 8004c72:	f000 ffdd 	bl	8005c30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8004c76:	e083      	b.n	8004d80 <HAL_SPI_MspInit+0x184>
  else if(hspi->Instance==SPI2)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a45      	ldr	r2, [pc, #276]	; (8004d94 <HAL_SPI_MspInit+0x198>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d12d      	bne.n	8004cde <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004c82:	2300      	movs	r3, #0
 8004c84:	61bb      	str	r3, [r7, #24]
 8004c86:	4b41      	ldr	r3, [pc, #260]	; (8004d8c <HAL_SPI_MspInit+0x190>)
 8004c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8a:	4a40      	ldr	r2, [pc, #256]	; (8004d8c <HAL_SPI_MspInit+0x190>)
 8004c8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c90:	6413      	str	r3, [r2, #64]	; 0x40
 8004c92:	4b3e      	ldr	r3, [pc, #248]	; (8004d8c <HAL_SPI_MspInit+0x190>)
 8004c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c9a:	61bb      	str	r3, [r7, #24]
 8004c9c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	617b      	str	r3, [r7, #20]
 8004ca2:	4b3a      	ldr	r3, [pc, #232]	; (8004d8c <HAL_SPI_MspInit+0x190>)
 8004ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca6:	4a39      	ldr	r2, [pc, #228]	; (8004d8c <HAL_SPI_MspInit+0x190>)
 8004ca8:	f043 0302 	orr.w	r3, r3, #2
 8004cac:	6313      	str	r3, [r2, #48]	; 0x30
 8004cae:	4b37      	ldr	r3, [pc, #220]	; (8004d8c <HAL_SPI_MspInit+0x190>)
 8004cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	617b      	str	r3, [r7, #20]
 8004cb8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004cba:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8004cbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004ccc:	2305      	movs	r3, #5
 8004cce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	482e      	ldr	r0, [pc, #184]	; (8004d90 <HAL_SPI_MspInit+0x194>)
 8004cd8:	f000 ffaa 	bl	8005c30 <HAL_GPIO_Init>
}
 8004cdc:	e050      	b.n	8004d80 <HAL_SPI_MspInit+0x184>
  else if(hspi->Instance==SPI3)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a2d      	ldr	r2, [pc, #180]	; (8004d98 <HAL_SPI_MspInit+0x19c>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d14b      	bne.n	8004d80 <HAL_SPI_MspInit+0x184>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004ce8:	2300      	movs	r3, #0
 8004cea:	613b      	str	r3, [r7, #16]
 8004cec:	4b27      	ldr	r3, [pc, #156]	; (8004d8c <HAL_SPI_MspInit+0x190>)
 8004cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf0:	4a26      	ldr	r2, [pc, #152]	; (8004d8c <HAL_SPI_MspInit+0x190>)
 8004cf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cf6:	6413      	str	r3, [r2, #64]	; 0x40
 8004cf8:	4b24      	ldr	r3, [pc, #144]	; (8004d8c <HAL_SPI_MspInit+0x190>)
 8004cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d00:	613b      	str	r3, [r7, #16]
 8004d02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d04:	2300      	movs	r3, #0
 8004d06:	60fb      	str	r3, [r7, #12]
 8004d08:	4b20      	ldr	r3, [pc, #128]	; (8004d8c <HAL_SPI_MspInit+0x190>)
 8004d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0c:	4a1f      	ldr	r2, [pc, #124]	; (8004d8c <HAL_SPI_MspInit+0x190>)
 8004d0e:	f043 0301 	orr.w	r3, r3, #1
 8004d12:	6313      	str	r3, [r2, #48]	; 0x30
 8004d14:	4b1d      	ldr	r3, [pc, #116]	; (8004d8c <HAL_SPI_MspInit+0x190>)
 8004d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	60fb      	str	r3, [r7, #12]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d20:	2300      	movs	r3, #0
 8004d22:	60bb      	str	r3, [r7, #8]
 8004d24:	4b19      	ldr	r3, [pc, #100]	; (8004d8c <HAL_SPI_MspInit+0x190>)
 8004d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d28:	4a18      	ldr	r2, [pc, #96]	; (8004d8c <HAL_SPI_MspInit+0x190>)
 8004d2a:	f043 0304 	orr.w	r3, r3, #4
 8004d2e:	6313      	str	r3, [r2, #48]	; 0x30
 8004d30:	4b16      	ldr	r3, [pc, #88]	; (8004d8c <HAL_SPI_MspInit+0x190>)
 8004d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d34:	f003 0304 	and.w	r3, r3, #4
 8004d38:	60bb      	str	r3, [r7, #8]
 8004d3a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004d3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d42:	2302      	movs	r3, #2
 8004d44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d46:	2300      	movs	r3, #0
 8004d48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004d4e:	2306      	movs	r3, #6
 8004d50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d56:	4619      	mov	r1, r3
 8004d58:	4810      	ldr	r0, [pc, #64]	; (8004d9c <HAL_SPI_MspInit+0x1a0>)
 8004d5a:	f000 ff69 	bl	8005c30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004d5e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004d62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d64:	2302      	movs	r3, #2
 8004d66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004d70:	2306      	movs	r3, #6
 8004d72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d78:	4619      	mov	r1, r3
 8004d7a:	4809      	ldr	r0, [pc, #36]	; (8004da0 <HAL_SPI_MspInit+0x1a4>)
 8004d7c:	f000 ff58 	bl	8005c30 <HAL_GPIO_Init>
}
 8004d80:	bf00      	nop
 8004d82:	3738      	adds	r7, #56	; 0x38
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	40013000 	.word	0x40013000
 8004d8c:	40023800 	.word	0x40023800
 8004d90:	40020400 	.word	0x40020400
 8004d94:	40003800 	.word	0x40003800
 8004d98:	40003c00 	.word	0x40003c00
 8004d9c:	40020000 	.word	0x40020000
 8004da0:	40020800 	.word	0x40020800

08004da4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b08a      	sub	sp, #40	; 0x28
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dac:	f107 0314 	add.w	r3, r7, #20
 8004db0:	2200      	movs	r2, #0
 8004db2:	601a      	str	r2, [r3, #0]
 8004db4:	605a      	str	r2, [r3, #4]
 8004db6:	609a      	str	r2, [r3, #8]
 8004db8:	60da      	str	r2, [r3, #12]
 8004dba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a19      	ldr	r2, [pc, #100]	; (8004e28 <HAL_UART_MspInit+0x84>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d12c      	bne.n	8004e20 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	613b      	str	r3, [r7, #16]
 8004dca:	4b18      	ldr	r3, [pc, #96]	; (8004e2c <HAL_UART_MspInit+0x88>)
 8004dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dce:	4a17      	ldr	r2, [pc, #92]	; (8004e2c <HAL_UART_MspInit+0x88>)
 8004dd0:	f043 0310 	orr.w	r3, r3, #16
 8004dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8004dd6:	4b15      	ldr	r3, [pc, #84]	; (8004e2c <HAL_UART_MspInit+0x88>)
 8004dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dda:	f003 0310 	and.w	r3, r3, #16
 8004dde:	613b      	str	r3, [r7, #16]
 8004de0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004de2:	2300      	movs	r3, #0
 8004de4:	60fb      	str	r3, [r7, #12]
 8004de6:	4b11      	ldr	r3, [pc, #68]	; (8004e2c <HAL_UART_MspInit+0x88>)
 8004de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dea:	4a10      	ldr	r2, [pc, #64]	; (8004e2c <HAL_UART_MspInit+0x88>)
 8004dec:	f043 0301 	orr.w	r3, r3, #1
 8004df0:	6313      	str	r3, [r2, #48]	; 0x30
 8004df2:	4b0e      	ldr	r3, [pc, #56]	; (8004e2c <HAL_UART_MspInit+0x88>)
 8004df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	60fb      	str	r3, [r7, #12]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004dfe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004e02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e04:	2302      	movs	r3, #2
 8004e06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004e10:	2307      	movs	r3, #7
 8004e12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e14:	f107 0314 	add.w	r3, r7, #20
 8004e18:	4619      	mov	r1, r3
 8004e1a:	4805      	ldr	r0, [pc, #20]	; (8004e30 <HAL_UART_MspInit+0x8c>)
 8004e1c:	f000 ff08 	bl	8005c30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004e20:	bf00      	nop
 8004e22:	3728      	adds	r7, #40	; 0x28
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	40011000 	.word	0x40011000
 8004e2c:	40023800 	.word	0x40023800
 8004e30:	40020000 	.word	0x40020000

08004e34 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b086      	sub	sp, #24
 8004e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8004e3a:	1d3b      	adds	r3, r7, #4
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	601a      	str	r2, [r3, #0]
 8004e40:	605a      	str	r2, [r3, #4]
 8004e42:	609a      	str	r2, [r3, #8]
 8004e44:	60da      	str	r2, [r3, #12]
 8004e46:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8004e48:	4b1c      	ldr	r3, [pc, #112]	; (8004ebc <HAL_FSMC_MspInit+0x88>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d131      	bne.n	8004eb4 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8004e50:	4b1a      	ldr	r3, [pc, #104]	; (8004ebc <HAL_FSMC_MspInit+0x88>)
 8004e52:	2201      	movs	r2, #1
 8004e54:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8004e56:	2300      	movs	r3, #0
 8004e58:	603b      	str	r3, [r7, #0]
 8004e5a:	4b19      	ldr	r3, [pc, #100]	; (8004ec0 <HAL_FSMC_MspInit+0x8c>)
 8004e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5e:	4a18      	ldr	r2, [pc, #96]	; (8004ec0 <HAL_FSMC_MspInit+0x8c>)
 8004e60:	f043 0301 	orr.w	r3, r3, #1
 8004e64:	6393      	str	r3, [r2, #56]	; 0x38
 8004e66:	4b16      	ldr	r3, [pc, #88]	; (8004ec0 <HAL_FSMC_MspInit+0x8c>)
 8004e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	603b      	str	r3, [r7, #0]
 8004e70:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8004e72:	f64f 7380 	movw	r3, #65408	; 0xff80
 8004e76:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e78:	2302      	movs	r3, #2
 8004e7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e80:	2303      	movs	r3, #3
 8004e82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004e84:	230c      	movs	r3, #12
 8004e86:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004e88:	1d3b      	adds	r3, r7, #4
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	480d      	ldr	r0, [pc, #52]	; (8004ec4 <HAL_FSMC_MspInit+0x90>)
 8004e8e:	f000 fecf 	bl	8005c30 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8004e92:	f24e 73b3 	movw	r3, #59315	; 0xe7b3
 8004e96:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e98:	2302      	movs	r3, #2
 8004e9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004ea4:	230c      	movs	r3, #12
 8004ea6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ea8:	1d3b      	adds	r3, r7, #4
 8004eaa:	4619      	mov	r1, r3
 8004eac:	4806      	ldr	r0, [pc, #24]	; (8004ec8 <HAL_FSMC_MspInit+0x94>)
 8004eae:	f000 febf 	bl	8005c30 <HAL_GPIO_Init>
 8004eb2:	e000      	b.n	8004eb6 <HAL_FSMC_MspInit+0x82>
    return;
 8004eb4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8004eb6:	3718      	adds	r7, #24
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	200010c8 	.word	0x200010c8
 8004ec0:	40023800 	.word	0x40023800
 8004ec4:	40021000 	.word	0x40021000
 8004ec8:	40020c00 	.word	0x40020c00

08004ecc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8004ed4:	f7ff ffae 	bl	8004e34 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8004ed8:	bf00      	nop
 8004eda:	3708      	adds	r7, #8
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004ee4:	e7fe      	b.n	8004ee4 <NMI_Handler+0x4>

08004ee6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004eea:	e7fe      	b.n	8004eea <HardFault_Handler+0x4>

08004eec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004eec:	b480      	push	{r7}
 8004eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ef0:	e7fe      	b.n	8004ef0 <MemManage_Handler+0x4>

08004ef2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004ef6:	e7fe      	b.n	8004ef6 <BusFault_Handler+0x4>

08004ef8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004efc:	e7fe      	b.n	8004efc <UsageFault_Handler+0x4>

08004efe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004efe:	b480      	push	{r7}
 8004f00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004f02:	bf00      	nop
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f10:	bf00      	nop
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004f1e:	bf00      	nop
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004f2c:	f000 fce6 	bl	80058fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004f30:	bf00      	nop
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004f34:	b480      	push	{r7}
 8004f36:	af00      	add	r7, sp, #0
	return 1;
 8004f38:	2301      	movs	r3, #1
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <_kill>:

int _kill(int pid, int sig)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004f4e:	f004 fcb9 	bl	80098c4 <__errno>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2216      	movs	r2, #22
 8004f56:	601a      	str	r2, [r3, #0]
	return -1;
 8004f58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3708      	adds	r7, #8
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <_exit>:

void _exit (int status)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f7ff ffe7 	bl	8004f44 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004f76:	e7fe      	b.n	8004f76 <_exit+0x12>

08004f78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f84:	2300      	movs	r3, #0
 8004f86:	617b      	str	r3, [r7, #20]
 8004f88:	e00a      	b.n	8004fa0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004f8a:	f3af 8000 	nop.w
 8004f8e:	4601      	mov	r1, r0
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	1c5a      	adds	r2, r3, #1
 8004f94:	60ba      	str	r2, [r7, #8]
 8004f96:	b2ca      	uxtb	r2, r1
 8004f98:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	617b      	str	r3, [r7, #20]
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	dbf0      	blt.n	8004f8a <_read+0x12>
	}

return len;
 8004fa8:	687b      	ldr	r3, [r7, #4]
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3718      	adds	r7, #24
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b086      	sub	sp, #24
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	60f8      	str	r0, [r7, #12]
 8004fba:	60b9      	str	r1, [r7, #8]
 8004fbc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	617b      	str	r3, [r7, #20]
 8004fc2:	e009      	b.n	8004fd8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	1c5a      	adds	r2, r3, #1
 8004fc8:	60ba      	str	r2, [r7, #8]
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	617b      	str	r3, [r7, #20]
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	dbf1      	blt.n	8004fc4 <_write+0x12>
	}
	return len;
 8004fe0:	687b      	ldr	r3, [r7, #4]
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3718      	adds	r7, #24
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <_close>:

int _close(int file)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b083      	sub	sp, #12
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
	return -1;
 8004ff2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005002:	b480      	push	{r7}
 8005004:	b083      	sub	sp, #12
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
 800500a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005012:	605a      	str	r2, [r3, #4]
	return 0;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	370c      	adds	r7, #12
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr

08005022 <_isatty>:

int _isatty(int file)
{
 8005022:	b480      	push	{r7}
 8005024:	b083      	sub	sp, #12
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
	return 1;
 800502a:	2301      	movs	r3, #1
}
 800502c:	4618      	mov	r0, r3
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]
	return 0;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3714      	adds	r7, #20
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
	...

08005054 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800505c:	4a14      	ldr	r2, [pc, #80]	; (80050b0 <_sbrk+0x5c>)
 800505e:	4b15      	ldr	r3, [pc, #84]	; (80050b4 <_sbrk+0x60>)
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005068:	4b13      	ldr	r3, [pc, #76]	; (80050b8 <_sbrk+0x64>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d102      	bne.n	8005076 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005070:	4b11      	ldr	r3, [pc, #68]	; (80050b8 <_sbrk+0x64>)
 8005072:	4a12      	ldr	r2, [pc, #72]	; (80050bc <_sbrk+0x68>)
 8005074:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005076:	4b10      	ldr	r3, [pc, #64]	; (80050b8 <_sbrk+0x64>)
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4413      	add	r3, r2
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	429a      	cmp	r2, r3
 8005082:	d207      	bcs.n	8005094 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005084:	f004 fc1e 	bl	80098c4 <__errno>
 8005088:	4603      	mov	r3, r0
 800508a:	220c      	movs	r2, #12
 800508c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800508e:	f04f 33ff 	mov.w	r3, #4294967295
 8005092:	e009      	b.n	80050a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005094:	4b08      	ldr	r3, [pc, #32]	; (80050b8 <_sbrk+0x64>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800509a:	4b07      	ldr	r3, [pc, #28]	; (80050b8 <_sbrk+0x64>)
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4413      	add	r3, r2
 80050a2:	4a05      	ldr	r2, [pc, #20]	; (80050b8 <_sbrk+0x64>)
 80050a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80050a6:	68fb      	ldr	r3, [r7, #12]
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3718      	adds	r7, #24
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	20020000 	.word	0x20020000
 80050b4:	00000800 	.word	0x00000800
 80050b8:	200010cc 	.word	0x200010cc
 80050bc:	20001148 	.word	0x20001148

080050c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80050c0:	b480      	push	{r7}
 80050c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80050c4:	4b06      	ldr	r3, [pc, #24]	; (80050e0 <SystemInit+0x20>)
 80050c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ca:	4a05      	ldr	r2, [pc, #20]	; (80050e0 <SystemInit+0x20>)
 80050cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80050d4:	bf00      	nop
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	e000ed00 	.word	0xe000ed00

080050e4 <W25Q_Reset>:
#endif

w25_info_t  w25_info;
uint8_t buf[64] = {0};

void W25Q_Reset (void) {
 80050e4:	b580      	push	{r7, lr}
 80050e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 80050e8:	2200      	movs	r2, #0
 80050ea:	2101      	movs	r1, #1
 80050ec:	480b      	ldr	r0, [pc, #44]	; (800511c <W25Q_Reset+0x38>)
 80050ee:	f000 ff53 	bl	8005f98 <HAL_GPIO_WritePin>
	buf[0] = W25Q_ENABLE_RESET;
 80050f2:	4b0b      	ldr	r3, [pc, #44]	; (8005120 <W25Q_Reset+0x3c>)
 80050f4:	2266      	movs	r2, #102	; 0x66
 80050f6:	701a      	strb	r2, [r3, #0]
	buf[1] = W25Q_RESET;
 80050f8:	4b09      	ldr	r3, [pc, #36]	; (8005120 <W25Q_Reset+0x3c>)
 80050fa:	2299      	movs	r2, #153	; 0x99
 80050fc:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit (&W25Q_SPI, buf, 2, 1000);
 80050fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005102:	2202      	movs	r2, #2
 8005104:	4906      	ldr	r1, [pc, #24]	; (8005120 <W25Q_Reset+0x3c>)
 8005106:	4807      	ldr	r0, [pc, #28]	; (8005124 <W25Q_Reset+0x40>)
 8005108:	f003 f9e3 	bl	80084d2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
 800510c:	2201      	movs	r2, #1
 800510e:	2101      	movs	r1, #1
 8005110:	4802      	ldr	r0, [pc, #8]	; (800511c <W25Q_Reset+0x38>)
 8005112:	f000 ff41 	bl	8005f98 <HAL_GPIO_WritePin>
}
 8005116:	bf00      	nop
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	40020400 	.word	0x40020400
 8005120:	200010f4 	.word	0x200010f4
 8005124:	2000030c 	.word	0x2000030c

08005128 <W25Q_Read_ID>:
	}
	HAL_SPI_Receive (&W25Q_SPI, data, sz, 1000);
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
}

uint32_t W25Q_Read_ID(void) {
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
	uint8_t dt[4];
	buf[0] = W25Q_GET_JEDEC_ID;
 800512e:	4b13      	ldr	r3, [pc, #76]	; (800517c <W25Q_Read_ID+0x54>)
 8005130:	229f      	movs	r2, #159	; 0x9f
 8005132:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 8005134:	2200      	movs	r2, #0
 8005136:	2101      	movs	r1, #1
 8005138:	4811      	ldr	r0, [pc, #68]	; (8005180 <W25Q_Read_ID+0x58>)
 800513a:	f000 ff2d 	bl	8005f98 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&W25Q_SPI, buf, 1, 1000);
 800513e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005142:	2201      	movs	r2, #1
 8005144:	490d      	ldr	r1, [pc, #52]	; (800517c <W25Q_Read_ID+0x54>)
 8005146:	480f      	ldr	r0, [pc, #60]	; (8005184 <W25Q_Read_ID+0x5c>)
 8005148:	f003 f9c3 	bl	80084d2 <HAL_SPI_Transmit>
	HAL_SPI_Receive (&W25Q_SPI, dt, 3, 1000);
 800514c:	1d39      	adds	r1, r7, #4
 800514e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005152:	2203      	movs	r2, #3
 8005154:	480b      	ldr	r0, [pc, #44]	; (8005184 <W25Q_Read_ID+0x5c>)
 8005156:	f003 faf8 	bl	800874a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
 800515a:	2201      	movs	r2, #1
 800515c:	2101      	movs	r1, #1
 800515e:	4808      	ldr	r0, [pc, #32]	; (8005180 <W25Q_Read_ID+0x58>)
 8005160:	f000 ff1a 	bl	8005f98 <HAL_GPIO_WritePin>
	return (dt[0] << 16) | (dt[1] << 8) | dt[2];
 8005164:	793b      	ldrb	r3, [r7, #4]
 8005166:	041a      	lsls	r2, r3, #16
 8005168:	797b      	ldrb	r3, [r7, #5]
 800516a:	021b      	lsls	r3, r3, #8
 800516c:	4313      	orrs	r3, r2
 800516e:	79ba      	ldrb	r2, [r7, #6]
 8005170:	4313      	orrs	r3, r2
}
 8005172:	4618      	mov	r0, r3
 8005174:	3708      	adds	r7, #8
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	200010f4 	.word	0x200010f4
 8005180:	40020400 	.word	0x40020400
 8005184:	2000030c 	.word	0x2000030c

08005188 <W25Q_Init>:

void W25Q_Init(void) {
 8005188:	b580      	push	{r7, lr}
 800518a:	b08a      	sub	sp, #40	; 0x28
 800518c:	af00      	add	r7, sp, #0
	unsigned int id = W25Q_Read_ID();
 800518e:	f7ff ffcb 	bl	8005128 <W25Q_Read_ID>
 8005192:	6278      	str	r0, [r7, #36]	; 0x24
	HAL_Delay(100);
 8005194:	2064      	movs	r0, #100	; 0x64
 8005196:	f000 fbd1 	bl	800593c <HAL_Delay>
	W25Q_Reset();
 800519a:	f7ff ffa3 	bl	80050e4 <W25Q_Reset>
	HAL_Delay(100);
 800519e:	2064      	movs	r0, #100	; 0x64
 80051a0:	f000 fbcc 	bl	800593c <HAL_Delay>
	id &= 0x0000FFFF;
 80051a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	627b      	str	r3, [r7, #36]	; 0x24
	w25_info.high_cap = 0;
 80051aa:	4b85      	ldr	r3, [pc, #532]	; (80053c0 <W25Q_Init+0x238>)
 80051ac:	2200      	movs	r2, #0
 80051ae:	77da      	strb	r2, [r3, #31]
	switch(id)
 80051b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80051b6:	3b11      	subs	r3, #17
 80051b8:	2b09      	cmp	r3, #9
 80051ba:	f200 81e7 	bhi.w	800558c <W25Q_Init+0x404>
 80051be:	a201      	add	r2, pc, #4	; (adr r2, 80051c4 <W25Q_Init+0x3c>)
 80051c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c4:	08005247 	.word	0x08005247
 80051c8:	0800523f 	.word	0x0800523f
 80051cc:	08005237 	.word	0x08005237
 80051d0:	0800522f 	.word	0x0800522f
 80051d4:	08005227 	.word	0x08005227
 80051d8:	0800521f 	.word	0x0800521f
 80051dc:	08005217 	.word	0x08005217
 80051e0:	0800520d 	.word	0x0800520d
 80051e4:	080051fd 	.word	0x080051fd
 80051e8:	080051ed 	.word	0x080051ed
	{
	case 0x401A:
		w25_info.high_cap=1;
 80051ec:	4b74      	ldr	r3, [pc, #464]	; (80053c0 <W25Q_Init+0x238>)
 80051ee:	2201      	movs	r2, #1
 80051f0:	77da      	strb	r2, [r3, #31]
		w25_info.BlockCount=1024;
 80051f2:	4b73      	ldr	r3, [pc, #460]	; (80053c0 <W25Q_Init+0x238>)
 80051f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051f8:	615a      	str	r2, [r3, #20]
		break;
 80051fa:	e028      	b.n	800524e <W25Q_Init+0xc6>
	case 0x4019:
		w25_info.high_cap=1;
 80051fc:	4b70      	ldr	r3, [pc, #448]	; (80053c0 <W25Q_Init+0x238>)
 80051fe:	2201      	movs	r2, #1
 8005200:	77da      	strb	r2, [r3, #31]
		w25_info.BlockCount=512;
 8005202:	4b6f      	ldr	r3, [pc, #444]	; (80053c0 <W25Q_Init+0x238>)
 8005204:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005208:	615a      	str	r2, [r3, #20]
		break;
 800520a:	e020      	b.n	800524e <W25Q_Init+0xc6>
	case 0x4018:
		w25_info.BlockCount=256;
 800520c:	4b6c      	ldr	r3, [pc, #432]	; (80053c0 <W25Q_Init+0x238>)
 800520e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005212:	615a      	str	r2, [r3, #20]
		break;
 8005214:	e01b      	b.n	800524e <W25Q_Init+0xc6>
	case 0x4017:
		w25_info.BlockCount=128;
 8005216:	4b6a      	ldr	r3, [pc, #424]	; (80053c0 <W25Q_Init+0x238>)
 8005218:	2280      	movs	r2, #128	; 0x80
 800521a:	615a      	str	r2, [r3, #20]
		break;
 800521c:	e017      	b.n	800524e <W25Q_Init+0xc6>
	case 0x4016:
		w25_info.BlockCount=64;
 800521e:	4b68      	ldr	r3, [pc, #416]	; (80053c0 <W25Q_Init+0x238>)
 8005220:	2240      	movs	r2, #64	; 0x40
 8005222:	615a      	str	r2, [r3, #20]
		break;
 8005224:	e013      	b.n	800524e <W25Q_Init+0xc6>
	case 0x4015:
		w25_info.BlockCount=32;
 8005226:	4b66      	ldr	r3, [pc, #408]	; (80053c0 <W25Q_Init+0x238>)
 8005228:	2220      	movs	r2, #32
 800522a:	615a      	str	r2, [r3, #20]
		break;
 800522c:	e00f      	b.n	800524e <W25Q_Init+0xc6>
	case 0x4014:
		w25_info.BlockCount=16;
 800522e:	4b64      	ldr	r3, [pc, #400]	; (80053c0 <W25Q_Init+0x238>)
 8005230:	2210      	movs	r2, #16
 8005232:	615a      	str	r2, [r3, #20]
		break;
 8005234:	e00b      	b.n	800524e <W25Q_Init+0xc6>
	case 0x4013:
		w25_info.BlockCount=8;
 8005236:	4b62      	ldr	r3, [pc, #392]	; (80053c0 <W25Q_Init+0x238>)
 8005238:	2208      	movs	r2, #8
 800523a:	615a      	str	r2, [r3, #20]
		break;
 800523c:	e007      	b.n	800524e <W25Q_Init+0xc6>
	case 0x4012:
		w25_info.BlockCount=4;
 800523e:	4b60      	ldr	r3, [pc, #384]	; (80053c0 <W25Q_Init+0x238>)
 8005240:	2204      	movs	r2, #4
 8005242:	615a      	str	r2, [r3, #20]
		break;
 8005244:	e003      	b.n	800524e <W25Q_Init+0xc6>
	case 0x4011:
		w25_info.BlockCount=2;
 8005246:	4b5e      	ldr	r3, [pc, #376]	; (80053c0 <W25Q_Init+0x238>)
 8005248:	2202      	movs	r2, #2
 800524a:	615a      	str	r2, [r3, #20]
		break;
 800524c:	bf00      	nop
	default:
		return;
	}
	w25_info.PageSize=256;
 800524e:	4b5c      	ldr	r3, [pc, #368]	; (80053c0 <W25Q_Init+0x238>)
 8005250:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005254:	801a      	strh	r2, [r3, #0]
	w25_info.SectorSize=0x1000;
 8005256:	4b5a      	ldr	r3, [pc, #360]	; (80053c0 <W25Q_Init+0x238>)
 8005258:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800525c:	609a      	str	r2, [r3, #8]
	w25_info.SectorCount=w25_info.BlockCount*16;
 800525e:	4b58      	ldr	r3, [pc, #352]	; (80053c0 <W25Q_Init+0x238>)
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	011b      	lsls	r3, r3, #4
 8005264:	4a56      	ldr	r2, [pc, #344]	; (80053c0 <W25Q_Init+0x238>)
 8005266:	60d3      	str	r3, [r2, #12]
	w25_info.PageCount=(w25_info.SectorCount*w25_info.SectorSize)/w25_info.PageSize;
 8005268:	4b55      	ldr	r3, [pc, #340]	; (80053c0 <W25Q_Init+0x238>)
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	4a54      	ldr	r2, [pc, #336]	; (80053c0 <W25Q_Init+0x238>)
 800526e:	6892      	ldr	r2, [r2, #8]
 8005270:	fb02 f303 	mul.w	r3, r2, r3
 8005274:	4a52      	ldr	r2, [pc, #328]	; (80053c0 <W25Q_Init+0x238>)
 8005276:	8812      	ldrh	r2, [r2, #0]
 8005278:	fbb3 f3f2 	udiv	r3, r3, r2
 800527c:	4a50      	ldr	r2, [pc, #320]	; (80053c0 <W25Q_Init+0x238>)
 800527e:	6053      	str	r3, [r2, #4]
	w25_info.BlockSize=w25_info.SectorSize*16;
 8005280:	4b4f      	ldr	r3, [pc, #316]	; (80053c0 <W25Q_Init+0x238>)
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	011b      	lsls	r3, r3, #4
 8005286:	4a4e      	ldr	r2, [pc, #312]	; (80053c0 <W25Q_Init+0x238>)
 8005288:	6113      	str	r3, [r2, #16]
	w25_info.NumKB=(w25_info.SectorCount*w25_info.SectorSize)/1024;
 800528a:	4b4d      	ldr	r3, [pc, #308]	; (80053c0 <W25Q_Init+0x238>)
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	4a4c      	ldr	r2, [pc, #304]	; (80053c0 <W25Q_Init+0x238>)
 8005290:	6892      	ldr	r2, [r2, #8]
 8005292:	fb02 f303 	mul.w	r3, r2, r3
 8005296:	0a9b      	lsrs	r3, r3, #10
 8005298:	4a49      	ldr	r2, [pc, #292]	; (80053c0 <W25Q_Init+0x238>)
 800529a:	6193      	str	r3, [r2, #24]

#if (INIT_DEBUG == 1)
	char str1[30];
	sprintf(str1,"FLASH ID: 0x%X \r\n",id);
 800529c:	1d3b      	adds	r3, r7, #4
 800529e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052a0:	4948      	ldr	r1, [pc, #288]	; (80053c4 <W25Q_Init+0x23c>)
 80052a2:	4618      	mov	r0, r3
 80052a4:	f005 fa12 	bl	800a6cc <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1, strlen(str1), 0x1000);
 80052a8:	1d3b      	adds	r3, r7, #4
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7fa ff90 	bl	80001d0 <strlen>
 80052b0:	4603      	mov	r3, r0
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	1d39      	adds	r1, r7, #4
 80052b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052ba:	4843      	ldr	r0, [pc, #268]	; (80053c8 <W25Q_Init+0x240>)
 80052bc:	f003 feb9 	bl	8009032 <HAL_UART_Transmit>

	w25_info.high_cap = 0;
 80052c0:	4b3f      	ldr	r3, [pc, #252]	; (80053c0 <W25Q_Init+0x238>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	77da      	strb	r2, [r3, #31]

	switch(id)
 80052c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c8:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80052cc:	3b11      	subs	r3, #17
 80052ce:	2b09      	cmp	r3, #9
 80052d0:	f200 8090 	bhi.w	80053f4 <W25Q_Init+0x26c>
 80052d4:	a201      	add	r2, pc, #4	; (adr r2, 80052dc <W25Q_Init+0x154>)
 80052d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052da:	bf00      	nop
 80052dc:	080053ad 	.word	0x080053ad
 80052e0:	0800539b 	.word	0x0800539b
 80052e4:	08005389 	.word	0x08005389
 80052e8:	08005377 	.word	0x08005377
 80052ec:	08005365 	.word	0x08005365
 80052f0:	08005353 	.word	0x08005353
 80052f4:	08005341 	.word	0x08005341
 80052f8:	0800532d 	.word	0x0800532d
 80052fc:	08005319 	.word	0x08005319
 8005300:	08005305 	.word	0x08005305
	{
	case 0x401A:
		w25_info.BlockCount=1024;
 8005304:	4b2e      	ldr	r3, [pc, #184]	; (80053c0 <W25Q_Init+0x238>)
 8005306:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800530a:	615a      	str	r2, [r3, #20]
		sprintf(str1,"FLASH CHIP: W25Q512 \r\n");
 800530c:	1d3b      	adds	r3, r7, #4
 800530e:	492f      	ldr	r1, [pc, #188]	; (80053cc <W25Q_Init+0x244>)
 8005310:	4618      	mov	r0, r3
 8005312:	f005 f9db 	bl	800a6cc <siprintf>
		break;
 8005316:	e07f      	b.n	8005418 <W25Q_Init+0x290>
	case 0x4019:
		w25_info.BlockCount=512;
 8005318:	4b29      	ldr	r3, [pc, #164]	; (80053c0 <W25Q_Init+0x238>)
 800531a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800531e:	615a      	str	r2, [r3, #20]
		sprintf(str1,"FLASH CHIP: W25Q256 \r\n");
 8005320:	1d3b      	adds	r3, r7, #4
 8005322:	492b      	ldr	r1, [pc, #172]	; (80053d0 <W25Q_Init+0x248>)
 8005324:	4618      	mov	r0, r3
 8005326:	f005 f9d1 	bl	800a6cc <siprintf>
		break;
 800532a:	e075      	b.n	8005418 <W25Q_Init+0x290>
	case 0x4018:
		w25_info.BlockCount=256;
 800532c:	4b24      	ldr	r3, [pc, #144]	; (80053c0 <W25Q_Init+0x238>)
 800532e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005332:	615a      	str	r2, [r3, #20]
		sprintf(str1,"FLASH CHIP: W25Q128 \r\n");
 8005334:	1d3b      	adds	r3, r7, #4
 8005336:	4927      	ldr	r1, [pc, #156]	; (80053d4 <W25Q_Init+0x24c>)
 8005338:	4618      	mov	r0, r3
 800533a:	f005 f9c7 	bl	800a6cc <siprintf>
		break;
 800533e:	e06b      	b.n	8005418 <W25Q_Init+0x290>
	case 0x4017:
		w25_info.BlockCount=128;
 8005340:	4b1f      	ldr	r3, [pc, #124]	; (80053c0 <W25Q_Init+0x238>)
 8005342:	2280      	movs	r2, #128	; 0x80
 8005344:	615a      	str	r2, [r3, #20]
		sprintf(str1,"FLASH CHIP: W25Q64 \r\n");
 8005346:	1d3b      	adds	r3, r7, #4
 8005348:	4923      	ldr	r1, [pc, #140]	; (80053d8 <W25Q_Init+0x250>)
 800534a:	4618      	mov	r0, r3
 800534c:	f005 f9be 	bl	800a6cc <siprintf>
		break;
 8005350:	e062      	b.n	8005418 <W25Q_Init+0x290>
	case 0x4016:
		w25_info.BlockCount=64;
 8005352:	4b1b      	ldr	r3, [pc, #108]	; (80053c0 <W25Q_Init+0x238>)
 8005354:	2240      	movs	r2, #64	; 0x40
 8005356:	615a      	str	r2, [r3, #20]
		sprintf(str1,"FLASH CHIP: W25Q32 \r\n");
 8005358:	1d3b      	adds	r3, r7, #4
 800535a:	4920      	ldr	r1, [pc, #128]	; (80053dc <W25Q_Init+0x254>)
 800535c:	4618      	mov	r0, r3
 800535e:	f005 f9b5 	bl	800a6cc <siprintf>
		break;
 8005362:	e059      	b.n	8005418 <W25Q_Init+0x290>
	case 0x4015:
		w25_info.BlockCount=32;
 8005364:	4b16      	ldr	r3, [pc, #88]	; (80053c0 <W25Q_Init+0x238>)
 8005366:	2220      	movs	r2, #32
 8005368:	615a      	str	r2, [r3, #20]
		sprintf(str1,"FLASH CHIP: W25Q16 \r\n");
 800536a:	1d3b      	adds	r3, r7, #4
 800536c:	491c      	ldr	r1, [pc, #112]	; (80053e0 <W25Q_Init+0x258>)
 800536e:	4618      	mov	r0, r3
 8005370:	f005 f9ac 	bl	800a6cc <siprintf>
		break;
 8005374:	e050      	b.n	8005418 <W25Q_Init+0x290>
	case 0x4014:
		w25_info.BlockCount=16;
 8005376:	4b12      	ldr	r3, [pc, #72]	; (80053c0 <W25Q_Init+0x238>)
 8005378:	2210      	movs	r2, #16
 800537a:	615a      	str	r2, [r3, #20]
		sprintf(str1,"FLASH CHIP: W25Q80 \r\n");
 800537c:	1d3b      	adds	r3, r7, #4
 800537e:	4919      	ldr	r1, [pc, #100]	; (80053e4 <W25Q_Init+0x25c>)
 8005380:	4618      	mov	r0, r3
 8005382:	f005 f9a3 	bl	800a6cc <siprintf>
		break;
 8005386:	e047      	b.n	8005418 <W25Q_Init+0x290>
	case 0x4013:
		w25_info.BlockCount=8;
 8005388:	4b0d      	ldr	r3, [pc, #52]	; (80053c0 <W25Q_Init+0x238>)
 800538a:	2208      	movs	r2, #8
 800538c:	615a      	str	r2, [r3, #20]
		sprintf(str1,"FLASH CHIP: W25Q40 \r\n");
 800538e:	1d3b      	adds	r3, r7, #4
 8005390:	4915      	ldr	r1, [pc, #84]	; (80053e8 <W25Q_Init+0x260>)
 8005392:	4618      	mov	r0, r3
 8005394:	f005 f99a 	bl	800a6cc <siprintf>
		break;
 8005398:	e03e      	b.n	8005418 <W25Q_Init+0x290>
	case 0x4012:
		w25_info.BlockCount=4;
 800539a:	4b09      	ldr	r3, [pc, #36]	; (80053c0 <W25Q_Init+0x238>)
 800539c:	2204      	movs	r2, #4
 800539e:	615a      	str	r2, [r3, #20]
		sprintf(str1,"FLASH CHIP: W25Q20 \r\n");
 80053a0:	1d3b      	adds	r3, r7, #4
 80053a2:	4912      	ldr	r1, [pc, #72]	; (80053ec <W25Q_Init+0x264>)
 80053a4:	4618      	mov	r0, r3
 80053a6:	f005 f991 	bl	800a6cc <siprintf>
		break;
 80053aa:	e035      	b.n	8005418 <W25Q_Init+0x290>
	case 0x4011:
		w25_info.BlockCount=2;
 80053ac:	4b04      	ldr	r3, [pc, #16]	; (80053c0 <W25Q_Init+0x238>)
 80053ae:	2202      	movs	r2, #2
 80053b0:	615a      	str	r2, [r3, #20]
		sprintf(str1,"FLASH CHIP: W25Q10 \r\n");
 80053b2:	1d3b      	adds	r3, r7, #4
 80053b4:	490e      	ldr	r1, [pc, #56]	; (80053f0 <W25Q_Init+0x268>)
 80053b6:	4618      	mov	r0, r3
 80053b8:	f005 f988 	bl	800a6cc <siprintf>
		break;
 80053bc:	e02c      	b.n	8005418 <W25Q_Init+0x290>
 80053be:	bf00      	nop
 80053c0:	200010d0 	.word	0x200010d0
 80053c4:	0800f2f8 	.word	0x0800f2f8
 80053c8:	20000414 	.word	0x20000414
 80053cc:	0800f30c 	.word	0x0800f30c
 80053d0:	0800f324 	.word	0x0800f324
 80053d4:	0800f33c 	.word	0x0800f33c
 80053d8:	0800f354 	.word	0x0800f354
 80053dc:	0800f36c 	.word	0x0800f36c
 80053e0:	0800f384 	.word	0x0800f384
 80053e4:	0800f39c 	.word	0x0800f39c
 80053e8:	0800f3b4 	.word	0x0800f3b4
 80053ec:	0800f3cc 	.word	0x0800f3cc
 80053f0:	0800f3e4 	.word	0x0800f3e4
	default:
		sprintf(str1,"FLASH CHIP: UNKNOWN ID \r\n");
 80053f4:	1d3b      	adds	r3, r7, #4
 80053f6:	4967      	ldr	r1, [pc, #412]	; (8005594 <W25Q_Init+0x40c>)
 80053f8:	4618      	mov	r0, r3
 80053fa:	f005 f967 	bl	800a6cc <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 80053fe:	1d3b      	adds	r3, r7, #4
 8005400:	4618      	mov	r0, r3
 8005402:	f7fa fee5 	bl	80001d0 <strlen>
 8005406:	4603      	mov	r3, r0
 8005408:	b29a      	uxth	r2, r3
 800540a:	1d39      	adds	r1, r7, #4
 800540c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005410:	4861      	ldr	r0, [pc, #388]	; (8005598 <W25Q_Init+0x410>)
 8005412:	f003 fe0e 	bl	8009032 <HAL_UART_Transmit>
		break;
 8005416:	bf00      	nop
	}

	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8005418:	1d3b      	adds	r3, r7, #4
 800541a:	4618      	mov	r0, r3
 800541c:	f7fa fed8 	bl	80001d0 <strlen>
 8005420:	4603      	mov	r3, r0
 8005422:	b29a      	uxth	r2, r3
 8005424:	1d39      	adds	r1, r7, #4
 8005426:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800542a:	485b      	ldr	r0, [pc, #364]	; (8005598 <W25Q_Init+0x410>)
 800542c:	f003 fe01 	bl	8009032 <HAL_UART_Transmit>
	w25_info.PageSize=256;
 8005430:	4b5a      	ldr	r3, [pc, #360]	; (800559c <W25Q_Init+0x414>)
 8005432:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005436:	801a      	strh	r2, [r3, #0]
	w25_info.SectorSize=0x1000;
 8005438:	4b58      	ldr	r3, [pc, #352]	; (800559c <W25Q_Init+0x414>)
 800543a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800543e:	609a      	str	r2, [r3, #8]
	w25_info.SectorCount=w25_info.BlockCount*16;
 8005440:	4b56      	ldr	r3, [pc, #344]	; (800559c <W25Q_Init+0x414>)
 8005442:	695b      	ldr	r3, [r3, #20]
 8005444:	011b      	lsls	r3, r3, #4
 8005446:	4a55      	ldr	r2, [pc, #340]	; (800559c <W25Q_Init+0x414>)
 8005448:	60d3      	str	r3, [r2, #12]
	w25_info.PageCount=(w25_info.SectorCount*w25_info.SectorSize)/w25_info.PageSize;
 800544a:	4b54      	ldr	r3, [pc, #336]	; (800559c <W25Q_Init+0x414>)
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	4a53      	ldr	r2, [pc, #332]	; (800559c <W25Q_Init+0x414>)
 8005450:	6892      	ldr	r2, [r2, #8]
 8005452:	fb02 f303 	mul.w	r3, r2, r3
 8005456:	4a51      	ldr	r2, [pc, #324]	; (800559c <W25Q_Init+0x414>)
 8005458:	8812      	ldrh	r2, [r2, #0]
 800545a:	fbb3 f3f2 	udiv	r3, r3, r2
 800545e:	4a4f      	ldr	r2, [pc, #316]	; (800559c <W25Q_Init+0x414>)
 8005460:	6053      	str	r3, [r2, #4]
	w25_info.BlockSize=w25_info.SectorSize*16;
 8005462:	4b4e      	ldr	r3, [pc, #312]	; (800559c <W25Q_Init+0x414>)
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	011b      	lsls	r3, r3, #4
 8005468:	4a4c      	ldr	r2, [pc, #304]	; (800559c <W25Q_Init+0x414>)
 800546a:	6113      	str	r3, [r2, #16]
	w25_info.NumKB=(w25_info.SectorCount*w25_info.SectorSize)/1024;
 800546c:	4b4b      	ldr	r3, [pc, #300]	; (800559c <W25Q_Init+0x414>)
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	4a4a      	ldr	r2, [pc, #296]	; (800559c <W25Q_Init+0x414>)
 8005472:	6892      	ldr	r2, [r2, #8]
 8005474:	fb02 f303 	mul.w	r3, r2, r3
 8005478:	0a9b      	lsrs	r3, r3, #10
 800547a:	4a48      	ldr	r2, [pc, #288]	; (800559c <W25Q_Init+0x414>)
 800547c:	6193      	str	r3, [r2, #24]
	sprintf(str1,"FLASH PAGE SIZE: %d Bytes \r\n",(unsigned int)w25_info.PageSize);
 800547e:	4b47      	ldr	r3, [pc, #284]	; (800559c <W25Q_Init+0x414>)
 8005480:	881b      	ldrh	r3, [r3, #0]
 8005482:	461a      	mov	r2, r3
 8005484:	1d3b      	adds	r3, r7, #4
 8005486:	4946      	ldr	r1, [pc, #280]	; (80055a0 <W25Q_Init+0x418>)
 8005488:	4618      	mov	r0, r3
 800548a:	f005 f91f 	bl	800a6cc <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 800548e:	1d3b      	adds	r3, r7, #4
 8005490:	4618      	mov	r0, r3
 8005492:	f7fa fe9d 	bl	80001d0 <strlen>
 8005496:	4603      	mov	r3, r0
 8005498:	b29a      	uxth	r2, r3
 800549a:	1d39      	adds	r1, r7, #4
 800549c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054a0:	483d      	ldr	r0, [pc, #244]	; (8005598 <W25Q_Init+0x410>)
 80054a2:	f003 fdc6 	bl	8009032 <HAL_UART_Transmit>
	sprintf(str1,"FLASH PAGE COUNT: %u \r\n",(unsigned int)w25_info.PageCount);
 80054a6:	4b3d      	ldr	r3, [pc, #244]	; (800559c <W25Q_Init+0x414>)
 80054a8:	685a      	ldr	r2, [r3, #4]
 80054aa:	1d3b      	adds	r3, r7, #4
 80054ac:	493d      	ldr	r1, [pc, #244]	; (80055a4 <W25Q_Init+0x41c>)
 80054ae:	4618      	mov	r0, r3
 80054b0:	f005 f90c 	bl	800a6cc <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 80054b4:	1d3b      	adds	r3, r7, #4
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7fa fe8a 	bl	80001d0 <strlen>
 80054bc:	4603      	mov	r3, r0
 80054be:	b29a      	uxth	r2, r3
 80054c0:	1d39      	adds	r1, r7, #4
 80054c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054c6:	4834      	ldr	r0, [pc, #208]	; (8005598 <W25Q_Init+0x410>)
 80054c8:	f003 fdb3 	bl	8009032 <HAL_UART_Transmit>
	sprintf(str1,"FLASH SECTOR SIZE: %u Bytes \r\n",(unsigned int)w25_info.SectorSize);
 80054cc:	4b33      	ldr	r3, [pc, #204]	; (800559c <W25Q_Init+0x414>)
 80054ce:	689a      	ldr	r2, [r3, #8]
 80054d0:	1d3b      	adds	r3, r7, #4
 80054d2:	4935      	ldr	r1, [pc, #212]	; (80055a8 <W25Q_Init+0x420>)
 80054d4:	4618      	mov	r0, r3
 80054d6:	f005 f8f9 	bl	800a6cc <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 80054da:	1d3b      	adds	r3, r7, #4
 80054dc:	4618      	mov	r0, r3
 80054de:	f7fa fe77 	bl	80001d0 <strlen>
 80054e2:	4603      	mov	r3, r0
 80054e4:	b29a      	uxth	r2, r3
 80054e6:	1d39      	adds	r1, r7, #4
 80054e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054ec:	482a      	ldr	r0, [pc, #168]	; (8005598 <W25Q_Init+0x410>)
 80054ee:	f003 fda0 	bl	8009032 <HAL_UART_Transmit>
	sprintf(str1,"FLASH SECTOR COUNT: %u \r\n",(unsigned int)w25_info.SectorCount);
 80054f2:	4b2a      	ldr	r3, [pc, #168]	; (800559c <W25Q_Init+0x414>)
 80054f4:	68da      	ldr	r2, [r3, #12]
 80054f6:	1d3b      	adds	r3, r7, #4
 80054f8:	492c      	ldr	r1, [pc, #176]	; (80055ac <W25Q_Init+0x424>)
 80054fa:	4618      	mov	r0, r3
 80054fc:	f005 f8e6 	bl	800a6cc <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8005500:	1d3b      	adds	r3, r7, #4
 8005502:	4618      	mov	r0, r3
 8005504:	f7fa fe64 	bl	80001d0 <strlen>
 8005508:	4603      	mov	r3, r0
 800550a:	b29a      	uxth	r2, r3
 800550c:	1d39      	adds	r1, r7, #4
 800550e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005512:	4821      	ldr	r0, [pc, #132]	; (8005598 <W25Q_Init+0x410>)
 8005514:	f003 fd8d 	bl	8009032 <HAL_UART_Transmit>
	sprintf(str1,"FLASH BLOCK SIZE: %u Bytes \r\n",(unsigned int)w25_info.BlockSize);
 8005518:	4b20      	ldr	r3, [pc, #128]	; (800559c <W25Q_Init+0x414>)
 800551a:	691a      	ldr	r2, [r3, #16]
 800551c:	1d3b      	adds	r3, r7, #4
 800551e:	4924      	ldr	r1, [pc, #144]	; (80055b0 <W25Q_Init+0x428>)
 8005520:	4618      	mov	r0, r3
 8005522:	f005 f8d3 	bl	800a6cc <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8005526:	1d3b      	adds	r3, r7, #4
 8005528:	4618      	mov	r0, r3
 800552a:	f7fa fe51 	bl	80001d0 <strlen>
 800552e:	4603      	mov	r3, r0
 8005530:	b29a      	uxth	r2, r3
 8005532:	1d39      	adds	r1, r7, #4
 8005534:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005538:	4817      	ldr	r0, [pc, #92]	; (8005598 <W25Q_Init+0x410>)
 800553a:	f003 fd7a 	bl	8009032 <HAL_UART_Transmit>
	sprintf(str1,"FLASH BLOCK COUNT: %u \r\n",(unsigned int)w25_info.BlockCount);
 800553e:	4b17      	ldr	r3, [pc, #92]	; (800559c <W25Q_Init+0x414>)
 8005540:	695a      	ldr	r2, [r3, #20]
 8005542:	1d3b      	adds	r3, r7, #4
 8005544:	491b      	ldr	r1, [pc, #108]	; (80055b4 <W25Q_Init+0x42c>)
 8005546:	4618      	mov	r0, r3
 8005548:	f005 f8c0 	bl	800a6cc <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 800554c:	1d3b      	adds	r3, r7, #4
 800554e:	4618      	mov	r0, r3
 8005550:	f7fa fe3e 	bl	80001d0 <strlen>
 8005554:	4603      	mov	r3, r0
 8005556:	b29a      	uxth	r2, r3
 8005558:	1d39      	adds	r1, r7, #4
 800555a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800555e:	480e      	ldr	r0, [pc, #56]	; (8005598 <W25Q_Init+0x410>)
 8005560:	f003 fd67 	bl	8009032 <HAL_UART_Transmit>
	sprintf(str1,"FLASH CAPACITY: %u KB \r\n",(unsigned int)w25_info.NumKB);
 8005564:	4b0d      	ldr	r3, [pc, #52]	; (800559c <W25Q_Init+0x414>)
 8005566:	699a      	ldr	r2, [r3, #24]
 8005568:	1d3b      	adds	r3, r7, #4
 800556a:	4913      	ldr	r1, [pc, #76]	; (80055b8 <W25Q_Init+0x430>)
 800556c:	4618      	mov	r0, r3
 800556e:	f005 f8ad 	bl	800a6cc <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8005572:	1d3b      	adds	r3, r7, #4
 8005574:	4618      	mov	r0, r3
 8005576:	f7fa fe2b 	bl	80001d0 <strlen>
 800557a:	4603      	mov	r3, r0
 800557c:	b29a      	uxth	r2, r3
 800557e:	1d39      	adds	r1, r7, #4
 8005580:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005584:	4804      	ldr	r0, [pc, #16]	; (8005598 <W25Q_Init+0x410>)
 8005586:	f003 fd54 	bl	8009032 <HAL_UART_Transmit>
 800558a:	e000      	b.n	800558e <W25Q_Init+0x406>
		return;
 800558c:	bf00      	nop
#endif
}
 800558e:	3728      	adds	r7, #40	; 0x28
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	0800f3fc 	.word	0x0800f3fc
 8005598:	20000414 	.word	0x20000414
 800559c:	200010d0 	.word	0x200010d0
 80055a0:	0800f418 	.word	0x0800f418
 80055a4:	0800f438 	.word	0x0800f438
 80055a8:	0800f450 	.word	0x0800f450
 80055ac:	0800f470 	.word	0x0800f470
 80055b0:	0800f48c 	.word	0x0800f48c
 80055b4:	0800f4ac 	.word	0x0800f4ac
 80055b8:	0800f4c8 	.word	0x0800f4c8

080055bc <remap>:
#include "xpt2046.h"

extern SPI_HandleTypeDef XPT2046_SPI;

inline static float remap(float x, float in_min, float in_max, float out_min, float out_max)
{
 80055bc:	b480      	push	{r7}
 80055be:	b087      	sub	sp, #28
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	ed87 0a05 	vstr	s0, [r7, #20]
 80055c6:	edc7 0a04 	vstr	s1, [r7, #16]
 80055ca:	ed87 1a03 	vstr	s2, [r7, #12]
 80055ce:	edc7 1a02 	vstr	s3, [r7, #8]
 80055d2:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80055d6:	ed97 7a05 	vldr	s14, [r7, #20]
 80055da:	edd7 7a04 	vldr	s15, [r7, #16]
 80055de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80055e2:	edd7 6a01 	vldr	s13, [r7, #4]
 80055e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80055ea:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80055ee:	ee67 6a27 	vmul.f32	s13, s14, s15
 80055f2:	ed97 7a03 	vldr	s14, [r7, #12]
 80055f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80055fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005602:	edd7 7a02 	vldr	s15, [r7, #8]
 8005606:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800560a:	eeb0 0a67 	vmov.f32	s0, s15
 800560e:	371c      	adds	r7, #28
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <XPT2046_Init>:

void XPT2046_Init(void)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	af00      	add	r7, sp, #0
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&XPT2046_SPI, (uint8_t*)XPT2046_ADDR_I, 1, 1000);
 800561c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005620:	2201      	movs	r2, #1
 8005622:	2180      	movs	r1, #128	; 0x80
 8005624:	4809      	ldr	r0, [pc, #36]	; (800564c <XPT2046_Init+0x34>)
 8005626:	f002 ff54 	bl	80084d2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&XPT2046_SPI, 0x00, 1, 1000);
 800562a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800562e:	2201      	movs	r2, #1
 8005630:	2100      	movs	r1, #0
 8005632:	4806      	ldr	r0, [pc, #24]	; (800564c <XPT2046_Init+0x34>)
 8005634:	f002 ff4d 	bl	80084d2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&XPT2046_SPI, 0x00, 1, 1000);
 8005638:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800563c:	2201      	movs	r2, #1
 800563e:	2100      	movs	r1, #0
 8005640:	4802      	ldr	r0, [pc, #8]	; (800564c <XPT2046_Init+0x34>)
 8005642:	f002 ff46 	bl	80084d2 <HAL_SPI_Transmit>
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_SET);
}
 8005646:	bf00      	nop
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	20000364 	.word	0x20000364

08005650 <getRaw>:

uint16_t getRaw(uint8_t address)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b086      	sub	sp, #24
 8005654:	af02      	add	r7, sp, #8
 8005656:	4603      	mov	r3, r0
 8005658:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	uint16_t LSB, MSB;
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_RESET);
	HAL_Delay(1);
 800565a:	2001      	movs	r0, #1
 800565c:	f000 f96e 	bl	800593c <HAL_Delay>
	HAL_SPI_Transmit(&XPT2046_SPI, &address, 1, 1000);
 8005660:	1df9      	adds	r1, r7, #7
 8005662:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005666:	2201      	movs	r2, #1
 8005668:	4814      	ldr	r0, [pc, #80]	; (80056bc <getRaw+0x6c>)
 800566a:	f002 ff32 	bl	80084d2 <HAL_SPI_Transmit>
	address = 0x00;
 800566e:	2300      	movs	r3, #0
 8005670:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&XPT2046_SPI, &address, &data, sizeof(data), 1000);   
 8005672:	f107 020b 	add.w	r2, r7, #11
 8005676:	1df9      	adds	r1, r7, #7
 8005678:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800567c:	9300      	str	r3, [sp, #0]
 800567e:	2301      	movs	r3, #1
 8005680:	480e      	ldr	r0, [pc, #56]	; (80056bc <getRaw+0x6c>)
 8005682:	f003 f973 	bl	800896c <HAL_SPI_TransmitReceive>
	MSB = data;   
 8005686:	7afb      	ldrb	r3, [r7, #11]
 8005688:	81fb      	strh	r3, [r7, #14]
	address = 0x00;
 800568a:	2300      	movs	r3, #0
 800568c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&XPT2046_SPI, &address, &data, sizeof(data), 1000);   
 800568e:	f107 020b 	add.w	r2, r7, #11
 8005692:	1df9      	adds	r1, r7, #7
 8005694:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005698:	9300      	str	r3, [sp, #0]
 800569a:	2301      	movs	r3, #1
 800569c:	4807      	ldr	r0, [pc, #28]	; (80056bc <getRaw+0x6c>)
 800569e:	f003 f965 	bl	800896c <HAL_SPI_TransmitReceive>
	LSB = data;
 80056a2:	7afb      	ldrb	r3, [r7, #11]
 80056a4:	81bb      	strh	r3, [r7, #12]
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_SET);
	return ((MSB << 8) | (LSB)) >> 3;
 80056a6:	89fb      	ldrh	r3, [r7, #14]
 80056a8:	021a      	lsls	r2, r3, #8
 80056aa:	89bb      	ldrh	r3, [r7, #12]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	10db      	asrs	r3, r3, #3
 80056b0:	b29b      	uxth	r3, r3
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	20000364 	.word	0x20000364

080056c0 <X>:

inline static uint16_t X(void)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
	uint16_t x;
	x = (uint16_t) remap(getRaw(XPT2046_ADDR_X), RAW_MIN_X, RAW_MAX_X, OUT_MIN_X, OUT_MAX_X);
 80056c6:	20d0      	movs	r0, #208	; 0xd0
 80056c8:	f7ff ffc2 	bl	8005650 <getRaw>
 80056cc:	4603      	mov	r3, r0
 80056ce:	ee07 3a90 	vmov	s15, r3
 80056d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056d6:	ed9f 2a13 	vldr	s4, [pc, #76]	; 8005724 <X+0x64>
 80056da:	eddf 1a13 	vldr	s3, [pc, #76]	; 8005728 <X+0x68>
 80056de:	ed9f 1a13 	vldr	s2, [pc, #76]	; 800572c <X+0x6c>
 80056e2:	eddf 0a13 	vldr	s1, [pc, #76]	; 8005730 <X+0x70>
 80056e6:	eeb0 0a67 	vmov.f32	s0, s15
 80056ea:	f7ff ff67 	bl	80055bc <remap>
 80056ee:	eef0 7a40 	vmov.f32	s15, s0
 80056f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056f6:	ee17 3a90 	vmov	r3, s15
 80056fa:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_X) x = OUT_MAX_X - x;
 80056fc:	88fb      	ldrh	r3, [r7, #6]
 80056fe:	f5c3 7347 	rsb	r3, r3, #796	; 0x31c
 8005702:	3303      	adds	r3, #3
 8005704:	80fb      	strh	r3, [r7, #6]
	if (x > OUT_MIN_X && x < OUT_MAX_X) return x;
 8005706:	88fb      	ldrh	r3, [r7, #6]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d006      	beq.n	800571a <X+0x5a>
 800570c:	88fb      	ldrh	r3, [r7, #6]
 800570e:	f240 321e 	movw	r2, #798	; 0x31e
 8005712:	4293      	cmp	r3, r2
 8005714:	d801      	bhi.n	800571a <X+0x5a>
 8005716:	88fb      	ldrh	r3, [r7, #6]
 8005718:	e000      	b.n	800571c <X+0x5c>
	else return 0;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3708      	adds	r7, #8
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	4447c000 	.word	0x4447c000
 8005728:	00000000 	.word	0x00000000
 800572c:	457a0000 	.word	0x457a0000
 8005730:	43480000 	.word	0x43480000

08005734 <Y>:

inline static uint16_t Y(void)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
	uint16_t y;
	y = (uint16_t) remap(getRaw(XPT2046_ADDR_Y), RAW_MIN_Y, RAW_MAX_Y, OUT_MIN_Y, OUT_MAX_Y);
 800573a:	2090      	movs	r0, #144	; 0x90
 800573c:	f7ff ff88 	bl	8005650 <getRaw>
 8005740:	4603      	mov	r3, r0
 8005742:	ee07 3a90 	vmov	s15, r3
 8005746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800574a:	ed9f 2a10 	vldr	s4, [pc, #64]	; 800578c <Y+0x58>
 800574e:	eddf 1a10 	vldr	s3, [pc, #64]	; 8005790 <Y+0x5c>
 8005752:	ed9f 1a10 	vldr	s2, [pc, #64]	; 8005794 <Y+0x60>
 8005756:	eddf 0a10 	vldr	s1, [pc, #64]	; 8005798 <Y+0x64>
 800575a:	eeb0 0a67 	vmov.f32	s0, s15
 800575e:	f7ff ff2d 	bl	80055bc <remap>
 8005762:	eef0 7a40 	vmov.f32	s15, s0
 8005766:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800576a:	ee17 3a90 	vmov	r3, s15
 800576e:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_Y) y = OUT_MAX_Y - y;
	if (y > OUT_MIN_Y && y < OUT_MAX_Y) return y;
 8005770:	88fb      	ldrh	r3, [r7, #6]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d005      	beq.n	8005782 <Y+0x4e>
 8005776:	88fb      	ldrh	r3, [r7, #6]
 8005778:	f5b3 7fef 	cmp.w	r3, #478	; 0x1de
 800577c:	d801      	bhi.n	8005782 <Y+0x4e>
 800577e:	88fb      	ldrh	r3, [r7, #6]
 8005780:	e000      	b.n	8005784 <Y+0x50>
	else return 0;
 8005782:	2300      	movs	r3, #0
}
 8005784:	4618      	mov	r0, r3
 8005786:	3708      	adds	r7, #8
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	43ef8000 	.word	0x43ef8000
 8005790:	00000000 	.word	0x00000000
 8005794:	456d8000 	.word	0x456d8000
 8005798:	43480000 	.word	0x43480000

0800579c <getX>:

uint16_t getX(void)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0
	if (XPT2046_ACCURACY)
	{
		uint16_t x[2] = { 1, 2 };
 80057a2:	4b0a      	ldr	r3, [pc, #40]	; (80057cc <getX+0x30>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	607b      	str	r3, [r7, #4]
		while (x[0] != x[1])
 80057a8:	e007      	b.n	80057ba <getX+0x1e>
		{
			if (XPT2046_REVERSED) { x[0] = Y(); x[1] = Y(); }
			else { x[0] = X(); x[1] = X(); }
 80057aa:	f7ff ff89 	bl	80056c0 <X>
 80057ae:	4603      	mov	r3, r0
 80057b0:	80bb      	strh	r3, [r7, #4]
 80057b2:	f7ff ff85 	bl	80056c0 <X>
 80057b6:	4603      	mov	r3, r0
 80057b8:	80fb      	strh	r3, [r7, #6]
		while (x[0] != x[1])
 80057ba:	88ba      	ldrh	r2, [r7, #4]
 80057bc:	88fb      	ldrh	r3, [r7, #6]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d1f3      	bne.n	80057aa <getX+0xe>
		}
		return x[0];
 80057c2:	88bb      	ldrh	r3, [r7, #4]
	} 
	else if (XPT2046_REVERSED) return Y(); else return X();
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3708      	adds	r7, #8
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	0800f4e4 	.word	0x0800f4e4

080057d0 <getY>:

uint16_t getY(void)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b082      	sub	sp, #8
 80057d4:	af00      	add	r7, sp, #0
	if (XPT2046_ACCURACY)
	{
		uint16_t y[2] = { 1, 2 };
 80057d6:	4b0a      	ldr	r3, [pc, #40]	; (8005800 <getY+0x30>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	607b      	str	r3, [r7, #4]
		while (y[0] != y[1])
 80057dc:	e007      	b.n	80057ee <getY+0x1e>
		{
			if (XPT2046_REVERSED) { y[0] = X(); y[1] = X(); }
			else { y[0] = Y(); y[1] = Y(); }
 80057de:	f7ff ffa9 	bl	8005734 <Y>
 80057e2:	4603      	mov	r3, r0
 80057e4:	80bb      	strh	r3, [r7, #4]
 80057e6:	f7ff ffa5 	bl	8005734 <Y>
 80057ea:	4603      	mov	r3, r0
 80057ec:	80fb      	strh	r3, [r7, #6]
		while (y[0] != y[1])
 80057ee:	88ba      	ldrh	r2, [r7, #4]
 80057f0:	88fb      	ldrh	r3, [r7, #6]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d1f3      	bne.n	80057de <getY+0xe>
		}
		return y[0];
 80057f6:	88bb      	ldrh	r3, [r7, #4]
	}
	else if (XPT2046_REVERSED) return X(); else return Y();
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3708      	adds	r7, #8
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	0800f4e4 	.word	0x0800f4e4

08005804 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005804:	f8df d034 	ldr.w	sp, [pc, #52]	; 800583c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005808:	480d      	ldr	r0, [pc, #52]	; (8005840 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800580a:	490e      	ldr	r1, [pc, #56]	; (8005844 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800580c:	4a0e      	ldr	r2, [pc, #56]	; (8005848 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800580e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005810:	e002      	b.n	8005818 <LoopCopyDataInit>

08005812 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005812:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005814:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005816:	3304      	adds	r3, #4

08005818 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005818:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800581a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800581c:	d3f9      	bcc.n	8005812 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800581e:	4a0b      	ldr	r2, [pc, #44]	; (800584c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005820:	4c0b      	ldr	r4, [pc, #44]	; (8005850 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005822:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005824:	e001      	b.n	800582a <LoopFillZerobss>

08005826 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005826:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005828:	3204      	adds	r2, #4

0800582a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800582a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800582c:	d3fb      	bcc.n	8005826 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800582e:	f7ff fc47 	bl	80050c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005832:	f004 f84d 	bl	80098d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005836:	f7fc fab9 	bl	8001dac <main>
  bx  lr    
 800583a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800583c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005840:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005844:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 8005848:	0801da60 	.word	0x0801da60
  ldr r2, =_sbss
 800584c:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8005850:	20001148 	.word	0x20001148

08005854 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005854:	e7fe      	b.n	8005854 <ADC_IRQHandler>
	...

08005858 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800585c:	4b0e      	ldr	r3, [pc, #56]	; (8005898 <HAL_Init+0x40>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a0d      	ldr	r2, [pc, #52]	; (8005898 <HAL_Init+0x40>)
 8005862:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005866:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005868:	4b0b      	ldr	r3, [pc, #44]	; (8005898 <HAL_Init+0x40>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a0a      	ldr	r2, [pc, #40]	; (8005898 <HAL_Init+0x40>)
 800586e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005872:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005874:	4b08      	ldr	r3, [pc, #32]	; (8005898 <HAL_Init+0x40>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a07      	ldr	r2, [pc, #28]	; (8005898 <HAL_Init+0x40>)
 800587a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800587e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005880:	2003      	movs	r0, #3
 8005882:	f000 f931 	bl	8005ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005886:	2000      	movs	r0, #0
 8005888:	f000 f808 	bl	800589c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800588c:	f7ff f902 	bl	8004a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	40023c00 	.word	0x40023c00

0800589c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80058a4:	4b12      	ldr	r3, [pc, #72]	; (80058f0 <HAL_InitTick+0x54>)
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	4b12      	ldr	r3, [pc, #72]	; (80058f4 <HAL_InitTick+0x58>)
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	4619      	mov	r1, r3
 80058ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80058b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80058b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ba:	4618      	mov	r0, r3
 80058bc:	f000 f93b 	bl	8005b36 <HAL_SYSTICK_Config>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d001      	beq.n	80058ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e00e      	b.n	80058e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2b0f      	cmp	r3, #15
 80058ce:	d80a      	bhi.n	80058e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80058d0:	2200      	movs	r2, #0
 80058d2:	6879      	ldr	r1, [r7, #4]
 80058d4:	f04f 30ff 	mov.w	r0, #4294967295
 80058d8:	f000 f911 	bl	8005afe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80058dc:	4a06      	ldr	r2, [pc, #24]	; (80058f8 <HAL_InitTick+0x5c>)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
 80058e4:	e000      	b.n	80058e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3708      	adds	r7, #8
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	20000054 	.word	0x20000054
 80058f4:	2000005c 	.word	0x2000005c
 80058f8:	20000058 	.word	0x20000058

080058fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80058fc:	b480      	push	{r7}
 80058fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005900:	4b06      	ldr	r3, [pc, #24]	; (800591c <HAL_IncTick+0x20>)
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	461a      	mov	r2, r3
 8005906:	4b06      	ldr	r3, [pc, #24]	; (8005920 <HAL_IncTick+0x24>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4413      	add	r3, r2
 800590c:	4a04      	ldr	r2, [pc, #16]	; (8005920 <HAL_IncTick+0x24>)
 800590e:	6013      	str	r3, [r2, #0]
}
 8005910:	bf00      	nop
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	2000005c 	.word	0x2000005c
 8005920:	20001134 	.word	0x20001134

08005924 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005924:	b480      	push	{r7}
 8005926:	af00      	add	r7, sp, #0
  return uwTick;
 8005928:	4b03      	ldr	r3, [pc, #12]	; (8005938 <HAL_GetTick+0x14>)
 800592a:	681b      	ldr	r3, [r3, #0]
}
 800592c:	4618      	mov	r0, r3
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	20001134 	.word	0x20001134

0800593c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005944:	f7ff ffee 	bl	8005924 <HAL_GetTick>
 8005948:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005954:	d005      	beq.n	8005962 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005956:	4b0a      	ldr	r3, [pc, #40]	; (8005980 <HAL_Delay+0x44>)
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	461a      	mov	r2, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	4413      	add	r3, r2
 8005960:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005962:	bf00      	nop
 8005964:	f7ff ffde 	bl	8005924 <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	429a      	cmp	r2, r3
 8005972:	d8f7      	bhi.n	8005964 <HAL_Delay+0x28>
  {
  }
}
 8005974:	bf00      	nop
 8005976:	bf00      	nop
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	2000005c 	.word	0x2000005c

08005984 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f003 0307 	and.w	r3, r3, #7
 8005992:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005994:	4b0c      	ldr	r3, [pc, #48]	; (80059c8 <__NVIC_SetPriorityGrouping+0x44>)
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800599a:	68ba      	ldr	r2, [r7, #8]
 800599c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80059a0:	4013      	ands	r3, r2
 80059a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80059ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80059b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80059b6:	4a04      	ldr	r2, [pc, #16]	; (80059c8 <__NVIC_SetPriorityGrouping+0x44>)
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	60d3      	str	r3, [r2, #12]
}
 80059bc:	bf00      	nop
 80059be:	3714      	adds	r7, #20
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr
 80059c8:	e000ed00 	.word	0xe000ed00

080059cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80059cc:	b480      	push	{r7}
 80059ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80059d0:	4b04      	ldr	r3, [pc, #16]	; (80059e4 <__NVIC_GetPriorityGrouping+0x18>)
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	0a1b      	lsrs	r3, r3, #8
 80059d6:	f003 0307 	and.w	r3, r3, #7
}
 80059da:	4618      	mov	r0, r3
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr
 80059e4:	e000ed00 	.word	0xe000ed00

080059e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	4603      	mov	r3, r0
 80059f0:	6039      	str	r1, [r7, #0]
 80059f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	db0a      	blt.n	8005a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	490c      	ldr	r1, [pc, #48]	; (8005a34 <__NVIC_SetPriority+0x4c>)
 8005a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a06:	0112      	lsls	r2, r2, #4
 8005a08:	b2d2      	uxtb	r2, r2
 8005a0a:	440b      	add	r3, r1
 8005a0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a10:	e00a      	b.n	8005a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	b2da      	uxtb	r2, r3
 8005a16:	4908      	ldr	r1, [pc, #32]	; (8005a38 <__NVIC_SetPriority+0x50>)
 8005a18:	79fb      	ldrb	r3, [r7, #7]
 8005a1a:	f003 030f 	and.w	r3, r3, #15
 8005a1e:	3b04      	subs	r3, #4
 8005a20:	0112      	lsls	r2, r2, #4
 8005a22:	b2d2      	uxtb	r2, r2
 8005a24:	440b      	add	r3, r1
 8005a26:	761a      	strb	r2, [r3, #24]
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr
 8005a34:	e000e100 	.word	0xe000e100
 8005a38:	e000ed00 	.word	0xe000ed00

08005a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b089      	sub	sp, #36	; 0x24
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f003 0307 	and.w	r3, r3, #7
 8005a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	f1c3 0307 	rsb	r3, r3, #7
 8005a56:	2b04      	cmp	r3, #4
 8005a58:	bf28      	it	cs
 8005a5a:	2304      	movcs	r3, #4
 8005a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	3304      	adds	r3, #4
 8005a62:	2b06      	cmp	r3, #6
 8005a64:	d902      	bls.n	8005a6c <NVIC_EncodePriority+0x30>
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	3b03      	subs	r3, #3
 8005a6a:	e000      	b.n	8005a6e <NVIC_EncodePriority+0x32>
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a70:	f04f 32ff 	mov.w	r2, #4294967295
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7a:	43da      	mvns	r2, r3
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	401a      	ands	r2, r3
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a84:	f04f 31ff 	mov.w	r1, #4294967295
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a8e:	43d9      	mvns	r1, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a94:	4313      	orrs	r3, r2
         );
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3724      	adds	r7, #36	; 0x24
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
	...

08005aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ab4:	d301      	bcc.n	8005aba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e00f      	b.n	8005ada <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005aba:	4a0a      	ldr	r2, [pc, #40]	; (8005ae4 <SysTick_Config+0x40>)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005ac2:	210f      	movs	r1, #15
 8005ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ac8:	f7ff ff8e 	bl	80059e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005acc:	4b05      	ldr	r3, [pc, #20]	; (8005ae4 <SysTick_Config+0x40>)
 8005ace:	2200      	movs	r2, #0
 8005ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005ad2:	4b04      	ldr	r3, [pc, #16]	; (8005ae4 <SysTick_Config+0x40>)
 8005ad4:	2207      	movs	r2, #7
 8005ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3708      	adds	r7, #8
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	e000e010 	.word	0xe000e010

08005ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f7ff ff47 	bl	8005984 <__NVIC_SetPriorityGrouping>
}
 8005af6:	bf00      	nop
 8005af8:	3708      	adds	r7, #8
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}

08005afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005afe:	b580      	push	{r7, lr}
 8005b00:	b086      	sub	sp, #24
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	4603      	mov	r3, r0
 8005b06:	60b9      	str	r1, [r7, #8]
 8005b08:	607a      	str	r2, [r7, #4]
 8005b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005b10:	f7ff ff5c 	bl	80059cc <__NVIC_GetPriorityGrouping>
 8005b14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	68b9      	ldr	r1, [r7, #8]
 8005b1a:	6978      	ldr	r0, [r7, #20]
 8005b1c:	f7ff ff8e 	bl	8005a3c <NVIC_EncodePriority>
 8005b20:	4602      	mov	r2, r0
 8005b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b26:	4611      	mov	r1, r2
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f7ff ff5d 	bl	80059e8 <__NVIC_SetPriority>
}
 8005b2e:	bf00      	nop
 8005b30:	3718      	adds	r7, #24
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b082      	sub	sp, #8
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f7ff ffb0 	bl	8005aa4 <SysTick_Config>
 8005b44:	4603      	mov	r3, r0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3708      	adds	r7, #8
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b082      	sub	sp, #8
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d101      	bne.n	8005b60 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e014      	b.n	8005b8a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	791b      	ldrb	r3, [r3, #4]
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d105      	bne.n	8005b76 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f7fe ffb7 	bl	8004ae4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2202      	movs	r2, #2
 8005b7a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2201      	movs	r2, #1
 8005b86:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3708      	adds	r7, #8
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b087      	sub	sp, #28
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	60f8      	str	r0, [r7, #12]
 8005b9a:	60b9      	str	r1, [r7, #8]
 8005b9c:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	795b      	ldrb	r3, [r3, #5]
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d101      	bne.n	8005baa <HAL_DAC_ConfigChannel+0x18>
 8005ba6:	2302      	movs	r3, #2
 8005ba8:	e03c      	b.n	8005c24 <HAL_DAC_ConfigChannel+0x92>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2201      	movs	r2, #1
 8005bae:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2202      	movs	r2, #2
 8005bb4:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f003 0310 	and.w	r3, r3, #16
 8005bc4:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bcc:	43db      	mvns	r3, r3
 8005bce:	697a      	ldr	r2, [r7, #20]
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f003 0310 	and.w	r3, r3, #16
 8005be6:	693a      	ldr	r2, [r7, #16]
 8005be8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	6819      	ldr	r1, [r3, #0]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f003 0310 	and.w	r3, r3, #16
 8005c06:	22c0      	movs	r2, #192	; 0xc0
 8005c08:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0c:	43da      	mvns	r2, r3
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	400a      	ands	r2, r1
 8005c14:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	371c      	adds	r7, #28
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b089      	sub	sp, #36	; 0x24
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005c42:	2300      	movs	r3, #0
 8005c44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c46:	2300      	movs	r3, #0
 8005c48:	61fb      	str	r3, [r7, #28]
 8005c4a:	e16b      	b.n	8005f24 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	fa02 f303 	lsl.w	r3, r2, r3
 8005c54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	f040 815a 	bne.w	8005f1e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	f003 0303 	and.w	r3, r3, #3
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d005      	beq.n	8005c82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d130      	bne.n	8005ce4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	005b      	lsls	r3, r3, #1
 8005c8c:	2203      	movs	r2, #3
 8005c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c92:	43db      	mvns	r3, r3
 8005c94:	69ba      	ldr	r2, [r7, #24]
 8005c96:	4013      	ands	r3, r2
 8005c98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	68da      	ldr	r2, [r3, #12]
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	005b      	lsls	r3, r3, #1
 8005ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca6:	69ba      	ldr	r2, [r7, #24]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	69ba      	ldr	r2, [r7, #24]
 8005cb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005cb8:	2201      	movs	r2, #1
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc0:	43db      	mvns	r3, r3
 8005cc2:	69ba      	ldr	r2, [r7, #24]
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	091b      	lsrs	r3, r3, #4
 8005cce:	f003 0201 	and.w	r2, r3, #1
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd8:	69ba      	ldr	r2, [r7, #24]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	69ba      	ldr	r2, [r7, #24]
 8005ce2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	f003 0303 	and.w	r3, r3, #3
 8005cec:	2b03      	cmp	r3, #3
 8005cee:	d017      	beq.n	8005d20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	005b      	lsls	r3, r3, #1
 8005cfa:	2203      	movs	r2, #3
 8005cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005d00:	43db      	mvns	r3, r3
 8005d02:	69ba      	ldr	r2, [r7, #24]
 8005d04:	4013      	ands	r3, r2
 8005d06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	689a      	ldr	r2, [r3, #8]
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	005b      	lsls	r3, r3, #1
 8005d10:	fa02 f303 	lsl.w	r3, r2, r3
 8005d14:	69ba      	ldr	r2, [r7, #24]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	69ba      	ldr	r2, [r7, #24]
 8005d1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	f003 0303 	and.w	r3, r3, #3
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d123      	bne.n	8005d74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	08da      	lsrs	r2, r3, #3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	3208      	adds	r2, #8
 8005d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	f003 0307 	and.w	r3, r3, #7
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	220f      	movs	r2, #15
 8005d44:	fa02 f303 	lsl.w	r3, r2, r3
 8005d48:	43db      	mvns	r3, r3
 8005d4a:	69ba      	ldr	r2, [r7, #24]
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	691a      	ldr	r2, [r3, #16]
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	f003 0307 	and.w	r3, r3, #7
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d60:	69ba      	ldr	r2, [r7, #24]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	08da      	lsrs	r2, r3, #3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	3208      	adds	r2, #8
 8005d6e:	69b9      	ldr	r1, [r7, #24]
 8005d70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	005b      	lsls	r3, r3, #1
 8005d7e:	2203      	movs	r2, #3
 8005d80:	fa02 f303 	lsl.w	r3, r2, r3
 8005d84:	43db      	mvns	r3, r3
 8005d86:	69ba      	ldr	r2, [r7, #24]
 8005d88:	4013      	ands	r3, r2
 8005d8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	f003 0203 	and.w	r2, r3, #3
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	005b      	lsls	r3, r3, #1
 8005d98:	fa02 f303 	lsl.w	r3, r2, r3
 8005d9c:	69ba      	ldr	r2, [r7, #24]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	69ba      	ldr	r2, [r7, #24]
 8005da6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f000 80b4 	beq.w	8005f1e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005db6:	2300      	movs	r3, #0
 8005db8:	60fb      	str	r3, [r7, #12]
 8005dba:	4b60      	ldr	r3, [pc, #384]	; (8005f3c <HAL_GPIO_Init+0x30c>)
 8005dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dbe:	4a5f      	ldr	r2, [pc, #380]	; (8005f3c <HAL_GPIO_Init+0x30c>)
 8005dc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8005dc6:	4b5d      	ldr	r3, [pc, #372]	; (8005f3c <HAL_GPIO_Init+0x30c>)
 8005dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dce:	60fb      	str	r3, [r7, #12]
 8005dd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005dd2:	4a5b      	ldr	r2, [pc, #364]	; (8005f40 <HAL_GPIO_Init+0x310>)
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	089b      	lsrs	r3, r3, #2
 8005dd8:	3302      	adds	r3, #2
 8005dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	f003 0303 	and.w	r3, r3, #3
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	220f      	movs	r2, #15
 8005dea:	fa02 f303 	lsl.w	r3, r2, r3
 8005dee:	43db      	mvns	r3, r3
 8005df0:	69ba      	ldr	r2, [r7, #24]
 8005df2:	4013      	ands	r3, r2
 8005df4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a52      	ldr	r2, [pc, #328]	; (8005f44 <HAL_GPIO_Init+0x314>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d02b      	beq.n	8005e56 <HAL_GPIO_Init+0x226>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a51      	ldr	r2, [pc, #324]	; (8005f48 <HAL_GPIO_Init+0x318>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d025      	beq.n	8005e52 <HAL_GPIO_Init+0x222>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a50      	ldr	r2, [pc, #320]	; (8005f4c <HAL_GPIO_Init+0x31c>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d01f      	beq.n	8005e4e <HAL_GPIO_Init+0x21e>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a4f      	ldr	r2, [pc, #316]	; (8005f50 <HAL_GPIO_Init+0x320>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d019      	beq.n	8005e4a <HAL_GPIO_Init+0x21a>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a4e      	ldr	r2, [pc, #312]	; (8005f54 <HAL_GPIO_Init+0x324>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d013      	beq.n	8005e46 <HAL_GPIO_Init+0x216>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a4d      	ldr	r2, [pc, #308]	; (8005f58 <HAL_GPIO_Init+0x328>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d00d      	beq.n	8005e42 <HAL_GPIO_Init+0x212>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a4c      	ldr	r2, [pc, #304]	; (8005f5c <HAL_GPIO_Init+0x32c>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d007      	beq.n	8005e3e <HAL_GPIO_Init+0x20e>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a4b      	ldr	r2, [pc, #300]	; (8005f60 <HAL_GPIO_Init+0x330>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d101      	bne.n	8005e3a <HAL_GPIO_Init+0x20a>
 8005e36:	2307      	movs	r3, #7
 8005e38:	e00e      	b.n	8005e58 <HAL_GPIO_Init+0x228>
 8005e3a:	2308      	movs	r3, #8
 8005e3c:	e00c      	b.n	8005e58 <HAL_GPIO_Init+0x228>
 8005e3e:	2306      	movs	r3, #6
 8005e40:	e00a      	b.n	8005e58 <HAL_GPIO_Init+0x228>
 8005e42:	2305      	movs	r3, #5
 8005e44:	e008      	b.n	8005e58 <HAL_GPIO_Init+0x228>
 8005e46:	2304      	movs	r3, #4
 8005e48:	e006      	b.n	8005e58 <HAL_GPIO_Init+0x228>
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e004      	b.n	8005e58 <HAL_GPIO_Init+0x228>
 8005e4e:	2302      	movs	r3, #2
 8005e50:	e002      	b.n	8005e58 <HAL_GPIO_Init+0x228>
 8005e52:	2301      	movs	r3, #1
 8005e54:	e000      	b.n	8005e58 <HAL_GPIO_Init+0x228>
 8005e56:	2300      	movs	r3, #0
 8005e58:	69fa      	ldr	r2, [r7, #28]
 8005e5a:	f002 0203 	and.w	r2, r2, #3
 8005e5e:	0092      	lsls	r2, r2, #2
 8005e60:	4093      	lsls	r3, r2
 8005e62:	69ba      	ldr	r2, [r7, #24]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e68:	4935      	ldr	r1, [pc, #212]	; (8005f40 <HAL_GPIO_Init+0x310>)
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	089b      	lsrs	r3, r3, #2
 8005e6e:	3302      	adds	r3, #2
 8005e70:	69ba      	ldr	r2, [r7, #24]
 8005e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005e76:	4b3b      	ldr	r3, [pc, #236]	; (8005f64 <HAL_GPIO_Init+0x334>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	43db      	mvns	r3, r3
 8005e80:	69ba      	ldr	r2, [r7, #24]
 8005e82:	4013      	ands	r3, r2
 8005e84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d003      	beq.n	8005e9a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005e92:	69ba      	ldr	r2, [r7, #24]
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005e9a:	4a32      	ldr	r2, [pc, #200]	; (8005f64 <HAL_GPIO_Init+0x334>)
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005ea0:	4b30      	ldr	r3, [pc, #192]	; (8005f64 <HAL_GPIO_Init+0x334>)
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	43db      	mvns	r3, r3
 8005eaa:	69ba      	ldr	r2, [r7, #24]
 8005eac:	4013      	ands	r3, r2
 8005eae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d003      	beq.n	8005ec4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005ebc:	69ba      	ldr	r2, [r7, #24]
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005ec4:	4a27      	ldr	r2, [pc, #156]	; (8005f64 <HAL_GPIO_Init+0x334>)
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005eca:	4b26      	ldr	r3, [pc, #152]	; (8005f64 <HAL_GPIO_Init+0x334>)
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	43db      	mvns	r3, r3
 8005ed4:	69ba      	ldr	r2, [r7, #24]
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d003      	beq.n	8005eee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005ee6:	69ba      	ldr	r2, [r7, #24]
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005eee:	4a1d      	ldr	r2, [pc, #116]	; (8005f64 <HAL_GPIO_Init+0x334>)
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005ef4:	4b1b      	ldr	r3, [pc, #108]	; (8005f64 <HAL_GPIO_Init+0x334>)
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	43db      	mvns	r3, r3
 8005efe:	69ba      	ldr	r2, [r7, #24]
 8005f00:	4013      	ands	r3, r2
 8005f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d003      	beq.n	8005f18 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005f10:	69ba      	ldr	r2, [r7, #24]
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005f18:	4a12      	ldr	r2, [pc, #72]	; (8005f64 <HAL_GPIO_Init+0x334>)
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	3301      	adds	r3, #1
 8005f22:	61fb      	str	r3, [r7, #28]
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	2b0f      	cmp	r3, #15
 8005f28:	f67f ae90 	bls.w	8005c4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005f2c:	bf00      	nop
 8005f2e:	bf00      	nop
 8005f30:	3724      	adds	r7, #36	; 0x24
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	40023800 	.word	0x40023800
 8005f40:	40013800 	.word	0x40013800
 8005f44:	40020000 	.word	0x40020000
 8005f48:	40020400 	.word	0x40020400
 8005f4c:	40020800 	.word	0x40020800
 8005f50:	40020c00 	.word	0x40020c00
 8005f54:	40021000 	.word	0x40021000
 8005f58:	40021400 	.word	0x40021400
 8005f5c:	40021800 	.word	0x40021800
 8005f60:	40021c00 	.word	0x40021c00
 8005f64:	40013c00 	.word	0x40013c00

08005f68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	460b      	mov	r3, r1
 8005f72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	691a      	ldr	r2, [r3, #16]
 8005f78:	887b      	ldrh	r3, [r7, #2]
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d002      	beq.n	8005f86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005f80:	2301      	movs	r3, #1
 8005f82:	73fb      	strb	r3, [r7, #15]
 8005f84:	e001      	b.n	8005f8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005f86:	2300      	movs	r3, #0
 8005f88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3714      	adds	r7, #20
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	807b      	strh	r3, [r7, #2]
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005fa8:	787b      	ldrb	r3, [r7, #1]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d003      	beq.n	8005fb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005fae:	887a      	ldrh	r2, [r7, #2]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005fb4:	e003      	b.n	8005fbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005fb6:	887b      	ldrh	r3, [r7, #2]
 8005fb8:	041a      	lsls	r2, r3, #16
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	619a      	str	r2, [r3, #24]
}
 8005fbe:	bf00      	nop
 8005fc0:	370c      	adds	r7, #12
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr
	...

08005fcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d101      	bne.n	8005fde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e12b      	b.n	8006236 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d106      	bne.n	8005ff8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f7fe fdba 	bl	8004b6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2224      	movs	r2, #36	; 0x24
 8005ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f022 0201 	bic.w	r2, r2, #1
 800600e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800601e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800602e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006030:	f002 f99e 	bl	8008370 <HAL_RCC_GetPCLK1Freq>
 8006034:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	4a81      	ldr	r2, [pc, #516]	; (8006240 <HAL_I2C_Init+0x274>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d807      	bhi.n	8006050 <HAL_I2C_Init+0x84>
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	4a80      	ldr	r2, [pc, #512]	; (8006244 <HAL_I2C_Init+0x278>)
 8006044:	4293      	cmp	r3, r2
 8006046:	bf94      	ite	ls
 8006048:	2301      	movls	r3, #1
 800604a:	2300      	movhi	r3, #0
 800604c:	b2db      	uxtb	r3, r3
 800604e:	e006      	b.n	800605e <HAL_I2C_Init+0x92>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	4a7d      	ldr	r2, [pc, #500]	; (8006248 <HAL_I2C_Init+0x27c>)
 8006054:	4293      	cmp	r3, r2
 8006056:	bf94      	ite	ls
 8006058:	2301      	movls	r3, #1
 800605a:	2300      	movhi	r3, #0
 800605c:	b2db      	uxtb	r3, r3
 800605e:	2b00      	cmp	r3, #0
 8006060:	d001      	beq.n	8006066 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e0e7      	b.n	8006236 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	4a78      	ldr	r2, [pc, #480]	; (800624c <HAL_I2C_Init+0x280>)
 800606a:	fba2 2303 	umull	r2, r3, r2, r3
 800606e:	0c9b      	lsrs	r3, r3, #18
 8006070:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68ba      	ldr	r2, [r7, #8]
 8006082:	430a      	orrs	r2, r1
 8006084:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	6a1b      	ldr	r3, [r3, #32]
 800608c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	4a6a      	ldr	r2, [pc, #424]	; (8006240 <HAL_I2C_Init+0x274>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d802      	bhi.n	80060a0 <HAL_I2C_Init+0xd4>
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	3301      	adds	r3, #1
 800609e:	e009      	b.n	80060b4 <HAL_I2C_Init+0xe8>
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80060a6:	fb02 f303 	mul.w	r3, r2, r3
 80060aa:	4a69      	ldr	r2, [pc, #420]	; (8006250 <HAL_I2C_Init+0x284>)
 80060ac:	fba2 2303 	umull	r2, r3, r2, r3
 80060b0:	099b      	lsrs	r3, r3, #6
 80060b2:	3301      	adds	r3, #1
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	6812      	ldr	r2, [r2, #0]
 80060b8:	430b      	orrs	r3, r1
 80060ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	69db      	ldr	r3, [r3, #28]
 80060c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80060c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	495c      	ldr	r1, [pc, #368]	; (8006240 <HAL_I2C_Init+0x274>)
 80060d0:	428b      	cmp	r3, r1
 80060d2:	d819      	bhi.n	8006108 <HAL_I2C_Init+0x13c>
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	1e59      	subs	r1, r3, #1
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	005b      	lsls	r3, r3, #1
 80060de:	fbb1 f3f3 	udiv	r3, r1, r3
 80060e2:	1c59      	adds	r1, r3, #1
 80060e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80060e8:	400b      	ands	r3, r1
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00a      	beq.n	8006104 <HAL_I2C_Init+0x138>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	1e59      	subs	r1, r3, #1
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	005b      	lsls	r3, r3, #1
 80060f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80060fc:	3301      	adds	r3, #1
 80060fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006102:	e051      	b.n	80061a8 <HAL_I2C_Init+0x1dc>
 8006104:	2304      	movs	r3, #4
 8006106:	e04f      	b.n	80061a8 <HAL_I2C_Init+0x1dc>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d111      	bne.n	8006134 <HAL_I2C_Init+0x168>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	1e58      	subs	r0, r3, #1
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6859      	ldr	r1, [r3, #4]
 8006118:	460b      	mov	r3, r1
 800611a:	005b      	lsls	r3, r3, #1
 800611c:	440b      	add	r3, r1
 800611e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006122:	3301      	adds	r3, #1
 8006124:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006128:	2b00      	cmp	r3, #0
 800612a:	bf0c      	ite	eq
 800612c:	2301      	moveq	r3, #1
 800612e:	2300      	movne	r3, #0
 8006130:	b2db      	uxtb	r3, r3
 8006132:	e012      	b.n	800615a <HAL_I2C_Init+0x18e>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	1e58      	subs	r0, r3, #1
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6859      	ldr	r1, [r3, #4]
 800613c:	460b      	mov	r3, r1
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	440b      	add	r3, r1
 8006142:	0099      	lsls	r1, r3, #2
 8006144:	440b      	add	r3, r1
 8006146:	fbb0 f3f3 	udiv	r3, r0, r3
 800614a:	3301      	adds	r3, #1
 800614c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006150:	2b00      	cmp	r3, #0
 8006152:	bf0c      	ite	eq
 8006154:	2301      	moveq	r3, #1
 8006156:	2300      	movne	r3, #0
 8006158:	b2db      	uxtb	r3, r3
 800615a:	2b00      	cmp	r3, #0
 800615c:	d001      	beq.n	8006162 <HAL_I2C_Init+0x196>
 800615e:	2301      	movs	r3, #1
 8006160:	e022      	b.n	80061a8 <HAL_I2C_Init+0x1dc>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10e      	bne.n	8006188 <HAL_I2C_Init+0x1bc>
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	1e58      	subs	r0, r3, #1
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6859      	ldr	r1, [r3, #4]
 8006172:	460b      	mov	r3, r1
 8006174:	005b      	lsls	r3, r3, #1
 8006176:	440b      	add	r3, r1
 8006178:	fbb0 f3f3 	udiv	r3, r0, r3
 800617c:	3301      	adds	r3, #1
 800617e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006182:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006186:	e00f      	b.n	80061a8 <HAL_I2C_Init+0x1dc>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	1e58      	subs	r0, r3, #1
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6859      	ldr	r1, [r3, #4]
 8006190:	460b      	mov	r3, r1
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	440b      	add	r3, r1
 8006196:	0099      	lsls	r1, r3, #2
 8006198:	440b      	add	r3, r1
 800619a:	fbb0 f3f3 	udiv	r3, r0, r3
 800619e:	3301      	adds	r3, #1
 80061a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061a8:	6879      	ldr	r1, [r7, #4]
 80061aa:	6809      	ldr	r1, [r1, #0]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	69da      	ldr	r2, [r3, #28]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a1b      	ldr	r3, [r3, #32]
 80061c2:	431a      	orrs	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	430a      	orrs	r2, r1
 80061ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80061d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	6911      	ldr	r1, [r2, #16]
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	68d2      	ldr	r2, [r2, #12]
 80061e2:	4311      	orrs	r1, r2
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	6812      	ldr	r2, [r2, #0]
 80061e8:	430b      	orrs	r3, r1
 80061ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	695a      	ldr	r2, [r3, #20]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	699b      	ldr	r3, [r3, #24]
 80061fe:	431a      	orrs	r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	430a      	orrs	r2, r1
 8006206:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f042 0201 	orr.w	r2, r2, #1
 8006216:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2220      	movs	r2, #32
 8006222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	000186a0 	.word	0x000186a0
 8006244:	001e847f 	.word	0x001e847f
 8006248:	003d08ff 	.word	0x003d08ff
 800624c:	431bde83 	.word	0x431bde83
 8006250:	10624dd3 	.word	0x10624dd3

08006254 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b088      	sub	sp, #32
 8006258:	af02      	add	r7, sp, #8
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	607a      	str	r2, [r7, #4]
 800625e:	461a      	mov	r2, r3
 8006260:	460b      	mov	r3, r1
 8006262:	817b      	strh	r3, [r7, #10]
 8006264:	4613      	mov	r3, r2
 8006266:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006268:	f7ff fb5c 	bl	8005924 <HAL_GetTick>
 800626c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006274:	b2db      	uxtb	r3, r3
 8006276:	2b20      	cmp	r3, #32
 8006278:	f040 80e0 	bne.w	800643c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	9300      	str	r3, [sp, #0]
 8006280:	2319      	movs	r3, #25
 8006282:	2201      	movs	r2, #1
 8006284:	4970      	ldr	r1, [pc, #448]	; (8006448 <HAL_I2C_Master_Transmit+0x1f4>)
 8006286:	68f8      	ldr	r0, [r7, #12]
 8006288:	f001 fa24 	bl	80076d4 <I2C_WaitOnFlagUntilTimeout>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d001      	beq.n	8006296 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006292:	2302      	movs	r3, #2
 8006294:	e0d3      	b.n	800643e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800629c:	2b01      	cmp	r3, #1
 800629e:	d101      	bne.n	80062a4 <HAL_I2C_Master_Transmit+0x50>
 80062a0:	2302      	movs	r3, #2
 80062a2:	e0cc      	b.n	800643e <HAL_I2C_Master_Transmit+0x1ea>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0301 	and.w	r3, r3, #1
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d007      	beq.n	80062ca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f042 0201 	orr.w	r2, r2, #1
 80062c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2221      	movs	r2, #33	; 0x21
 80062de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2210      	movs	r2, #16
 80062e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2200      	movs	r2, #0
 80062ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	893a      	ldrh	r2, [r7, #8]
 80062fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006300:	b29a      	uxth	r2, r3
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	4a50      	ldr	r2, [pc, #320]	; (800644c <HAL_I2C_Master_Transmit+0x1f8>)
 800630a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800630c:	8979      	ldrh	r1, [r7, #10]
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	6a3a      	ldr	r2, [r7, #32]
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f000 ff10 	bl	8007138 <I2C_MasterRequestWrite>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d001      	beq.n	8006322 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e08d      	b.n	800643e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006322:	2300      	movs	r3, #0
 8006324:	613b      	str	r3, [r7, #16]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	695b      	ldr	r3, [r3, #20]
 800632c:	613b      	str	r3, [r7, #16]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	699b      	ldr	r3, [r3, #24]
 8006334:	613b      	str	r3, [r7, #16]
 8006336:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006338:	e066      	b.n	8006408 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800633a:	697a      	ldr	r2, [r7, #20]
 800633c:	6a39      	ldr	r1, [r7, #32]
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f001 fa9e 	bl	8007880 <I2C_WaitOnTXEFlagUntilTimeout>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00d      	beq.n	8006366 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634e:	2b04      	cmp	r3, #4
 8006350:	d107      	bne.n	8006362 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006360:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e06b      	b.n	800643e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636a:	781a      	ldrb	r2, [r3, #0]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006376:	1c5a      	adds	r2, r3, #1
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006380:	b29b      	uxth	r3, r3
 8006382:	3b01      	subs	r3, #1
 8006384:	b29a      	uxth	r2, r3
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800638e:	3b01      	subs	r3, #1
 8006390:	b29a      	uxth	r2, r3
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	695b      	ldr	r3, [r3, #20]
 800639c:	f003 0304 	and.w	r3, r3, #4
 80063a0:	2b04      	cmp	r3, #4
 80063a2:	d11b      	bne.n	80063dc <HAL_I2C_Master_Transmit+0x188>
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d017      	beq.n	80063dc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b0:	781a      	ldrb	r2, [r3, #0]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063bc:	1c5a      	adds	r2, r3, #1
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	3b01      	subs	r3, #1
 80063ca:	b29a      	uxth	r2, r3
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063d4:	3b01      	subs	r3, #1
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063dc:	697a      	ldr	r2, [r7, #20]
 80063de:	6a39      	ldr	r1, [r7, #32]
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f001 fa8e 	bl	8007902 <I2C_WaitOnBTFFlagUntilTimeout>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00d      	beq.n	8006408 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f0:	2b04      	cmp	r3, #4
 80063f2:	d107      	bne.n	8006404 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006402:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e01a      	b.n	800643e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800640c:	2b00      	cmp	r3, #0
 800640e:	d194      	bne.n	800633a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800641e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2220      	movs	r2, #32
 8006424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006438:	2300      	movs	r3, #0
 800643a:	e000      	b.n	800643e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800643c:	2302      	movs	r3, #2
  }
}
 800643e:	4618      	mov	r0, r3
 8006440:	3718      	adds	r7, #24
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	00100002 	.word	0x00100002
 800644c:	ffff0000 	.word	0xffff0000

08006450 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b08c      	sub	sp, #48	; 0x30
 8006454:	af02      	add	r7, sp, #8
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	607a      	str	r2, [r7, #4]
 800645a:	461a      	mov	r2, r3
 800645c:	460b      	mov	r3, r1
 800645e:	817b      	strh	r3, [r7, #10]
 8006460:	4613      	mov	r3, r2
 8006462:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006464:	f7ff fa5e 	bl	8005924 <HAL_GetTick>
 8006468:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006470:	b2db      	uxtb	r3, r3
 8006472:	2b20      	cmp	r3, #32
 8006474:	f040 820b 	bne.w	800688e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647a:	9300      	str	r3, [sp, #0]
 800647c:	2319      	movs	r3, #25
 800647e:	2201      	movs	r2, #1
 8006480:	497c      	ldr	r1, [pc, #496]	; (8006674 <HAL_I2C_Master_Receive+0x224>)
 8006482:	68f8      	ldr	r0, [r7, #12]
 8006484:	f001 f926 	bl	80076d4 <I2C_WaitOnFlagUntilTimeout>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d001      	beq.n	8006492 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800648e:	2302      	movs	r3, #2
 8006490:	e1fe      	b.n	8006890 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006498:	2b01      	cmp	r3, #1
 800649a:	d101      	bne.n	80064a0 <HAL_I2C_Master_Receive+0x50>
 800649c:	2302      	movs	r3, #2
 800649e:	e1f7      	b.n	8006890 <HAL_I2C_Master_Receive+0x440>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 0301 	and.w	r3, r3, #1
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d007      	beq.n	80064c6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f042 0201 	orr.w	r2, r2, #1
 80064c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2222      	movs	r2, #34	; 0x22
 80064da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2210      	movs	r2, #16
 80064e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	893a      	ldrh	r2, [r7, #8]
 80064f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	4a5c      	ldr	r2, [pc, #368]	; (8006678 <HAL_I2C_Master_Receive+0x228>)
 8006506:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006508:	8979      	ldrh	r1, [r7, #10]
 800650a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800650e:	68f8      	ldr	r0, [r7, #12]
 8006510:	f000 fe94 	bl	800723c <I2C_MasterRequestRead>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d001      	beq.n	800651e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e1b8      	b.n	8006890 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006522:	2b00      	cmp	r3, #0
 8006524:	d113      	bne.n	800654e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006526:	2300      	movs	r3, #0
 8006528:	623b      	str	r3, [r7, #32]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	695b      	ldr	r3, [r3, #20]
 8006530:	623b      	str	r3, [r7, #32]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	699b      	ldr	r3, [r3, #24]
 8006538:	623b      	str	r3, [r7, #32]
 800653a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800654a:	601a      	str	r2, [r3, #0]
 800654c:	e18c      	b.n	8006868 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006552:	2b01      	cmp	r3, #1
 8006554:	d11b      	bne.n	800658e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006564:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006566:	2300      	movs	r3, #0
 8006568:	61fb      	str	r3, [r7, #28]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	695b      	ldr	r3, [r3, #20]
 8006570:	61fb      	str	r3, [r7, #28]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	699b      	ldr	r3, [r3, #24]
 8006578:	61fb      	str	r3, [r7, #28]
 800657a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800658a:	601a      	str	r2, [r3, #0]
 800658c:	e16c      	b.n	8006868 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006592:	2b02      	cmp	r3, #2
 8006594:	d11b      	bne.n	80065ce <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065a4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065b6:	2300      	movs	r3, #0
 80065b8:	61bb      	str	r3, [r7, #24]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	695b      	ldr	r3, [r3, #20]
 80065c0:	61bb      	str	r3, [r7, #24]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	61bb      	str	r3, [r7, #24]
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	e14c      	b.n	8006868 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80065dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065de:	2300      	movs	r3, #0
 80065e0:	617b      	str	r3, [r7, #20]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	695b      	ldr	r3, [r3, #20]
 80065e8:	617b      	str	r3, [r7, #20]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	617b      	str	r3, [r7, #20]
 80065f2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80065f4:	e138      	b.n	8006868 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065fa:	2b03      	cmp	r3, #3
 80065fc:	f200 80f1 	bhi.w	80067e2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006604:	2b01      	cmp	r3, #1
 8006606:	d123      	bne.n	8006650 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800660a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f001 f9b9 	bl	8007984 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d001      	beq.n	800661c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	e139      	b.n	8006890 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	691a      	ldr	r2, [r3, #16]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006626:	b2d2      	uxtb	r2, r2
 8006628:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662e:	1c5a      	adds	r2, r3, #1
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006638:	3b01      	subs	r3, #1
 800663a:	b29a      	uxth	r2, r3
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006644:	b29b      	uxth	r3, r3
 8006646:	3b01      	subs	r3, #1
 8006648:	b29a      	uxth	r2, r3
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800664e:	e10b      	b.n	8006868 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006654:	2b02      	cmp	r3, #2
 8006656:	d14e      	bne.n	80066f6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665a:	9300      	str	r3, [sp, #0]
 800665c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665e:	2200      	movs	r2, #0
 8006660:	4906      	ldr	r1, [pc, #24]	; (800667c <HAL_I2C_Master_Receive+0x22c>)
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f001 f836 	bl	80076d4 <I2C_WaitOnFlagUntilTimeout>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d008      	beq.n	8006680 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e10e      	b.n	8006890 <HAL_I2C_Master_Receive+0x440>
 8006672:	bf00      	nop
 8006674:	00100002 	.word	0x00100002
 8006678:	ffff0000 	.word	0xffff0000
 800667c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800668e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	691a      	ldr	r2, [r3, #16]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669a:	b2d2      	uxtb	r2, r2
 800669c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a2:	1c5a      	adds	r2, r3, #1
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ac:	3b01      	subs	r3, #1
 80066ae:	b29a      	uxth	r2, r3
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	3b01      	subs	r3, #1
 80066bc:	b29a      	uxth	r2, r3
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	691a      	ldr	r2, [r3, #16]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066cc:	b2d2      	uxtb	r2, r2
 80066ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d4:	1c5a      	adds	r2, r3, #1
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066de:	3b01      	subs	r3, #1
 80066e0:	b29a      	uxth	r2, r3
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	3b01      	subs	r3, #1
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80066f4:	e0b8      	b.n	8006868 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80066f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f8:	9300      	str	r3, [sp, #0]
 80066fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fc:	2200      	movs	r2, #0
 80066fe:	4966      	ldr	r1, [pc, #408]	; (8006898 <HAL_I2C_Master_Receive+0x448>)
 8006700:	68f8      	ldr	r0, [r7, #12]
 8006702:	f000 ffe7 	bl	80076d4 <I2C_WaitOnFlagUntilTimeout>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d001      	beq.n	8006710 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e0bf      	b.n	8006890 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800671e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	691a      	ldr	r2, [r3, #16]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672a:	b2d2      	uxtb	r2, r2
 800672c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006732:	1c5a      	adds	r2, r3, #1
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800673c:	3b01      	subs	r3, #1
 800673e:	b29a      	uxth	r2, r3
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006748:	b29b      	uxth	r3, r3
 800674a:	3b01      	subs	r3, #1
 800674c:	b29a      	uxth	r2, r3
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006754:	9300      	str	r3, [sp, #0]
 8006756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006758:	2200      	movs	r2, #0
 800675a:	494f      	ldr	r1, [pc, #316]	; (8006898 <HAL_I2C_Master_Receive+0x448>)
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f000 ffb9 	bl	80076d4 <I2C_WaitOnFlagUntilTimeout>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d001      	beq.n	800676c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e091      	b.n	8006890 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800677a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	691a      	ldr	r2, [r3, #16]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006786:	b2d2      	uxtb	r2, r2
 8006788:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678e:	1c5a      	adds	r2, r3, #1
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006798:	3b01      	subs	r3, #1
 800679a:	b29a      	uxth	r2, r3
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	3b01      	subs	r3, #1
 80067a8:	b29a      	uxth	r2, r3
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	691a      	ldr	r2, [r3, #16]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b8:	b2d2      	uxtb	r2, r2
 80067ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c0:	1c5a      	adds	r2, r3, #1
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067ca:	3b01      	subs	r3, #1
 80067cc:	b29a      	uxth	r2, r3
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	3b01      	subs	r3, #1
 80067da:	b29a      	uxth	r2, r3
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80067e0:	e042      	b.n	8006868 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f001 f8cc 	bl	8007984 <I2C_WaitOnRXNEFlagUntilTimeout>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d001      	beq.n	80067f6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e04c      	b.n	8006890 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	691a      	ldr	r2, [r3, #16]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006800:	b2d2      	uxtb	r2, r2
 8006802:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006808:	1c5a      	adds	r2, r3, #1
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006812:	3b01      	subs	r3, #1
 8006814:	b29a      	uxth	r2, r3
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800681e:	b29b      	uxth	r3, r3
 8006820:	3b01      	subs	r3, #1
 8006822:	b29a      	uxth	r2, r3
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	f003 0304 	and.w	r3, r3, #4
 8006832:	2b04      	cmp	r3, #4
 8006834:	d118      	bne.n	8006868 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	691a      	ldr	r2, [r3, #16]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006840:	b2d2      	uxtb	r2, r2
 8006842:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006848:	1c5a      	adds	r2, r3, #1
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006852:	3b01      	subs	r3, #1
 8006854:	b29a      	uxth	r2, r3
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800685e:	b29b      	uxth	r3, r3
 8006860:	3b01      	subs	r3, #1
 8006862:	b29a      	uxth	r2, r3
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800686c:	2b00      	cmp	r3, #0
 800686e:	f47f aec2 	bne.w	80065f6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2220      	movs	r2, #32
 8006876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800688a:	2300      	movs	r3, #0
 800688c:	e000      	b.n	8006890 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800688e:	2302      	movs	r3, #2
  }
}
 8006890:	4618      	mov	r0, r3
 8006892:	3728      	adds	r7, #40	; 0x28
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}
 8006898:	00010004 	.word	0x00010004

0800689c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b088      	sub	sp, #32
 80068a0:	af02      	add	r7, sp, #8
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	4608      	mov	r0, r1
 80068a6:	4611      	mov	r1, r2
 80068a8:	461a      	mov	r2, r3
 80068aa:	4603      	mov	r3, r0
 80068ac:	817b      	strh	r3, [r7, #10]
 80068ae:	460b      	mov	r3, r1
 80068b0:	813b      	strh	r3, [r7, #8]
 80068b2:	4613      	mov	r3, r2
 80068b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80068b6:	f7ff f835 	bl	8005924 <HAL_GetTick>
 80068ba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	2b20      	cmp	r3, #32
 80068c6:	f040 80d9 	bne.w	8006a7c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	9300      	str	r3, [sp, #0]
 80068ce:	2319      	movs	r3, #25
 80068d0:	2201      	movs	r2, #1
 80068d2:	496d      	ldr	r1, [pc, #436]	; (8006a88 <HAL_I2C_Mem_Write+0x1ec>)
 80068d4:	68f8      	ldr	r0, [r7, #12]
 80068d6:	f000 fefd 	bl	80076d4 <I2C_WaitOnFlagUntilTimeout>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d001      	beq.n	80068e4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80068e0:	2302      	movs	r3, #2
 80068e2:	e0cc      	b.n	8006a7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d101      	bne.n	80068f2 <HAL_I2C_Mem_Write+0x56>
 80068ee:	2302      	movs	r3, #2
 80068f0:	e0c5      	b.n	8006a7e <HAL_I2C_Mem_Write+0x1e2>
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2201      	movs	r2, #1
 80068f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0301 	and.w	r3, r3, #1
 8006904:	2b01      	cmp	r3, #1
 8006906:	d007      	beq.n	8006918 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f042 0201 	orr.w	r2, r2, #1
 8006916:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006926:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2221      	movs	r2, #33	; 0x21
 800692c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2240      	movs	r2, #64	; 0x40
 8006934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2200      	movs	r2, #0
 800693c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6a3a      	ldr	r2, [r7, #32]
 8006942:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006948:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800694e:	b29a      	uxth	r2, r3
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	4a4d      	ldr	r2, [pc, #308]	; (8006a8c <HAL_I2C_Mem_Write+0x1f0>)
 8006958:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800695a:	88f8      	ldrh	r0, [r7, #6]
 800695c:	893a      	ldrh	r2, [r7, #8]
 800695e:	8979      	ldrh	r1, [r7, #10]
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	9301      	str	r3, [sp, #4]
 8006964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006966:	9300      	str	r3, [sp, #0]
 8006968:	4603      	mov	r3, r0
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	f000 fd34 	bl	80073d8 <I2C_RequestMemoryWrite>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d052      	beq.n	8006a1c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e081      	b.n	8006a7e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800697a:	697a      	ldr	r2, [r7, #20]
 800697c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800697e:	68f8      	ldr	r0, [r7, #12]
 8006980:	f000 ff7e 	bl	8007880 <I2C_WaitOnTXEFlagUntilTimeout>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00d      	beq.n	80069a6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800698e:	2b04      	cmp	r3, #4
 8006990:	d107      	bne.n	80069a2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e06b      	b.n	8006a7e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069aa:	781a      	ldrb	r2, [r3, #0]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b6:	1c5a      	adds	r2, r3, #1
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069c0:	3b01      	subs	r3, #1
 80069c2:	b29a      	uxth	r2, r3
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	3b01      	subs	r3, #1
 80069d0:	b29a      	uxth	r2, r3
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	695b      	ldr	r3, [r3, #20]
 80069dc:	f003 0304 	and.w	r3, r3, #4
 80069e0:	2b04      	cmp	r3, #4
 80069e2:	d11b      	bne.n	8006a1c <HAL_I2C_Mem_Write+0x180>
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d017      	beq.n	8006a1c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f0:	781a      	ldrb	r2, [r3, #0]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fc:	1c5a      	adds	r2, r3, #1
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a06:	3b01      	subs	r3, #1
 8006a08:	b29a      	uxth	r2, r3
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	3b01      	subs	r3, #1
 8006a16:	b29a      	uxth	r2, r3
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d1aa      	bne.n	800697a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a24:	697a      	ldr	r2, [r7, #20]
 8006a26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a28:	68f8      	ldr	r0, [r7, #12]
 8006a2a:	f000 ff6a 	bl	8007902 <I2C_WaitOnBTFFlagUntilTimeout>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00d      	beq.n	8006a50 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a38:	2b04      	cmp	r3, #4
 8006a3a:	d107      	bne.n	8006a4c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a4a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e016      	b.n	8006a7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2220      	movs	r2, #32
 8006a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	e000      	b.n	8006a7e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006a7c:	2302      	movs	r3, #2
  }
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3718      	adds	r7, #24
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	00100002 	.word	0x00100002
 8006a8c:	ffff0000 	.word	0xffff0000

08006a90 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b08c      	sub	sp, #48	; 0x30
 8006a94:	af02      	add	r7, sp, #8
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	4608      	mov	r0, r1
 8006a9a:	4611      	mov	r1, r2
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	817b      	strh	r3, [r7, #10]
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	813b      	strh	r3, [r7, #8]
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006aaa:	f7fe ff3b 	bl	8005924 <HAL_GetTick>
 8006aae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	2b20      	cmp	r3, #32
 8006aba:	f040 8208 	bne.w	8006ece <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac0:	9300      	str	r3, [sp, #0]
 8006ac2:	2319      	movs	r3, #25
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	497b      	ldr	r1, [pc, #492]	; (8006cb4 <HAL_I2C_Mem_Read+0x224>)
 8006ac8:	68f8      	ldr	r0, [r7, #12]
 8006aca:	f000 fe03 	bl	80076d4 <I2C_WaitOnFlagUntilTimeout>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d001      	beq.n	8006ad8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006ad4:	2302      	movs	r3, #2
 8006ad6:	e1fb      	b.n	8006ed0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d101      	bne.n	8006ae6 <HAL_I2C_Mem_Read+0x56>
 8006ae2:	2302      	movs	r3, #2
 8006ae4:	e1f4      	b.n	8006ed0 <HAL_I2C_Mem_Read+0x440>
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2201      	movs	r2, #1
 8006aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 0301 	and.w	r3, r3, #1
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d007      	beq.n	8006b0c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f042 0201 	orr.w	r2, r2, #1
 8006b0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2222      	movs	r2, #34	; 0x22
 8006b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2240      	movs	r2, #64	; 0x40
 8006b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006b3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	4a5b      	ldr	r2, [pc, #364]	; (8006cb8 <HAL_I2C_Mem_Read+0x228>)
 8006b4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b4e:	88f8      	ldrh	r0, [r7, #6]
 8006b50:	893a      	ldrh	r2, [r7, #8]
 8006b52:	8979      	ldrh	r1, [r7, #10]
 8006b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b56:	9301      	str	r3, [sp, #4]
 8006b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5a:	9300      	str	r3, [sp, #0]
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	68f8      	ldr	r0, [r7, #12]
 8006b60:	f000 fcd0 	bl	8007504 <I2C_RequestMemoryRead>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d001      	beq.n	8006b6e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e1b0      	b.n	8006ed0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d113      	bne.n	8006b9e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b76:	2300      	movs	r3, #0
 8006b78:	623b      	str	r3, [r7, #32]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	695b      	ldr	r3, [r3, #20]
 8006b80:	623b      	str	r3, [r7, #32]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	699b      	ldr	r3, [r3, #24]
 8006b88:	623b      	str	r3, [r7, #32]
 8006b8a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b9a:	601a      	str	r2, [r3, #0]
 8006b9c:	e184      	b.n	8006ea8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d11b      	bne.n	8006bde <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	61fb      	str	r3, [r7, #28]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	695b      	ldr	r3, [r3, #20]
 8006bc0:	61fb      	str	r3, [r7, #28]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	699b      	ldr	r3, [r3, #24]
 8006bc8:	61fb      	str	r3, [r7, #28]
 8006bca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bda:	601a      	str	r2, [r3, #0]
 8006bdc:	e164      	b.n	8006ea8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d11b      	bne.n	8006c1e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bf4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c06:	2300      	movs	r3, #0
 8006c08:	61bb      	str	r3, [r7, #24]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	695b      	ldr	r3, [r3, #20]
 8006c10:	61bb      	str	r3, [r7, #24]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	699b      	ldr	r3, [r3, #24]
 8006c18:	61bb      	str	r3, [r7, #24]
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	e144      	b.n	8006ea8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c1e:	2300      	movs	r3, #0
 8006c20:	617b      	str	r3, [r7, #20]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	695b      	ldr	r3, [r3, #20]
 8006c28:	617b      	str	r3, [r7, #20]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	699b      	ldr	r3, [r3, #24]
 8006c30:	617b      	str	r3, [r7, #20]
 8006c32:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006c34:	e138      	b.n	8006ea8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c3a:	2b03      	cmp	r3, #3
 8006c3c:	f200 80f1 	bhi.w	8006e22 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d123      	bne.n	8006c90 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f000 fe99 	bl	8007984 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d001      	beq.n	8006c5c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e139      	b.n	8006ed0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	691a      	ldr	r2, [r3, #16]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c66:	b2d2      	uxtb	r2, r2
 8006c68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6e:	1c5a      	adds	r2, r3, #1
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c78:	3b01      	subs	r3, #1
 8006c7a:	b29a      	uxth	r2, r3
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	3b01      	subs	r3, #1
 8006c88:	b29a      	uxth	r2, r3
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c8e:	e10b      	b.n	8006ea8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c94:	2b02      	cmp	r3, #2
 8006c96:	d14e      	bne.n	8006d36 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9a:	9300      	str	r3, [sp, #0]
 8006c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	4906      	ldr	r1, [pc, #24]	; (8006cbc <HAL_I2C_Mem_Read+0x22c>)
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	f000 fd16 	bl	80076d4 <I2C_WaitOnFlagUntilTimeout>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d008      	beq.n	8006cc0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e10e      	b.n	8006ed0 <HAL_I2C_Mem_Read+0x440>
 8006cb2:	bf00      	nop
 8006cb4:	00100002 	.word	0x00100002
 8006cb8:	ffff0000 	.word	0xffff0000
 8006cbc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	691a      	ldr	r2, [r3, #16]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cda:	b2d2      	uxtb	r2, r2
 8006cdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce2:	1c5a      	adds	r2, r3, #1
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cec:	3b01      	subs	r3, #1
 8006cee:	b29a      	uxth	r2, r3
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	3b01      	subs	r3, #1
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	691a      	ldr	r2, [r3, #16]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0c:	b2d2      	uxtb	r2, r2
 8006d0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d14:	1c5a      	adds	r2, r3, #1
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	b29a      	uxth	r2, r3
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	3b01      	subs	r3, #1
 8006d2e:	b29a      	uxth	r2, r3
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d34:	e0b8      	b.n	8006ea8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d38:	9300      	str	r3, [sp, #0]
 8006d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	4966      	ldr	r1, [pc, #408]	; (8006ed8 <HAL_I2C_Mem_Read+0x448>)
 8006d40:	68f8      	ldr	r0, [r7, #12]
 8006d42:	f000 fcc7 	bl	80076d4 <I2C_WaitOnFlagUntilTimeout>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d001      	beq.n	8006d50 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e0bf      	b.n	8006ed0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	691a      	ldr	r2, [r3, #16]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6a:	b2d2      	uxtb	r2, r2
 8006d6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d72:	1c5a      	adds	r2, r3, #1
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	b29a      	uxth	r2, r3
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	3b01      	subs	r3, #1
 8006d8c:	b29a      	uxth	r2, r3
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d98:	2200      	movs	r2, #0
 8006d9a:	494f      	ldr	r1, [pc, #316]	; (8006ed8 <HAL_I2C_Mem_Read+0x448>)
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f000 fc99 	bl	80076d4 <I2C_WaitOnFlagUntilTimeout>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d001      	beq.n	8006dac <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	e091      	b.n	8006ed0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	691a      	ldr	r2, [r3, #16]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc6:	b2d2      	uxtb	r2, r2
 8006dc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dce:	1c5a      	adds	r2, r3, #1
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	b29a      	uxth	r2, r3
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	3b01      	subs	r3, #1
 8006de8:	b29a      	uxth	r2, r3
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	691a      	ldr	r2, [r3, #16]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df8:	b2d2      	uxtb	r2, r2
 8006dfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e00:	1c5a      	adds	r2, r3, #1
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	b29a      	uxth	r2, r3
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	3b01      	subs	r3, #1
 8006e1a:	b29a      	uxth	r2, r3
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006e20:	e042      	b.n	8006ea8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e24:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006e26:	68f8      	ldr	r0, [r7, #12]
 8006e28:	f000 fdac 	bl	8007984 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d001      	beq.n	8006e36 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e04c      	b.n	8006ed0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	691a      	ldr	r2, [r3, #16]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e40:	b2d2      	uxtb	r2, r2
 8006e42:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e48:	1c5a      	adds	r2, r3, #1
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e52:	3b01      	subs	r3, #1
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	3b01      	subs	r3, #1
 8006e62:	b29a      	uxth	r2, r3
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	695b      	ldr	r3, [r3, #20]
 8006e6e:	f003 0304 	and.w	r3, r3, #4
 8006e72:	2b04      	cmp	r3, #4
 8006e74:	d118      	bne.n	8006ea8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	691a      	ldr	r2, [r3, #16]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e80:	b2d2      	uxtb	r2, r2
 8006e82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e88:	1c5a      	adds	r2, r3, #1
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e92:	3b01      	subs	r3, #1
 8006e94:	b29a      	uxth	r2, r3
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	3b01      	subs	r3, #1
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	f47f aec2 	bne.w	8006c36 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2220      	movs	r2, #32
 8006eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	e000      	b.n	8006ed0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006ece:	2302      	movs	r3, #2
  }
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3728      	adds	r7, #40	; 0x28
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	00010004 	.word	0x00010004

08006edc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b08a      	sub	sp, #40	; 0x28
 8006ee0:	af02      	add	r7, sp, #8
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	607a      	str	r2, [r7, #4]
 8006ee6:	603b      	str	r3, [r7, #0]
 8006ee8:	460b      	mov	r3, r1
 8006eea:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006eec:	f7fe fd1a 	bl	8005924 <HAL_GetTick>
 8006ef0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	2b20      	cmp	r3, #32
 8006f00:	f040 8111 	bne.w	8007126 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	9300      	str	r3, [sp, #0]
 8006f08:	2319      	movs	r3, #25
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	4988      	ldr	r1, [pc, #544]	; (8007130 <HAL_I2C_IsDeviceReady+0x254>)
 8006f0e:	68f8      	ldr	r0, [r7, #12]
 8006f10:	f000 fbe0 	bl	80076d4 <I2C_WaitOnFlagUntilTimeout>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d001      	beq.n	8006f1e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8006f1a:	2302      	movs	r3, #2
 8006f1c:	e104      	b.n	8007128 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d101      	bne.n	8006f2c <HAL_I2C_IsDeviceReady+0x50>
 8006f28:	2302      	movs	r3, #2
 8006f2a:	e0fd      	b.n	8007128 <HAL_I2C_IsDeviceReady+0x24c>
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0301 	and.w	r3, r3, #1
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d007      	beq.n	8006f52 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f042 0201 	orr.w	r2, r2, #1
 8006f50:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f60:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2224      	movs	r2, #36	; 0x24
 8006f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	4a70      	ldr	r2, [pc, #448]	; (8007134 <HAL_I2C_IsDeviceReady+0x258>)
 8006f74:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f84:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	9300      	str	r3, [sp, #0]
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	f000 fb9e 	bl	80076d4 <I2C_WaitOnFlagUntilTimeout>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00d      	beq.n	8006fba <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fac:	d103      	bne.n	8006fb6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fb4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	e0b6      	b.n	8007128 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006fba:	897b      	ldrh	r3, [r7, #10]
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006fc8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8006fca:	f7fe fcab 	bl	8005924 <HAL_GetTick>
 8006fce:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	695b      	ldr	r3, [r3, #20]
 8006fd6:	f003 0302 	and.w	r3, r3, #2
 8006fda:	2b02      	cmp	r3, #2
 8006fdc:	bf0c      	ite	eq
 8006fde:	2301      	moveq	r3, #1
 8006fe0:	2300      	movne	r3, #0
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	695b      	ldr	r3, [r3, #20]
 8006fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ff4:	bf0c      	ite	eq
 8006ff6:	2301      	moveq	r3, #1
 8006ff8:	2300      	movne	r3, #0
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006ffe:	e025      	b.n	800704c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007000:	f7fe fc90 	bl	8005924 <HAL_GetTick>
 8007004:	4602      	mov	r2, r0
 8007006:	69fb      	ldr	r3, [r7, #28]
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	683a      	ldr	r2, [r7, #0]
 800700c:	429a      	cmp	r2, r3
 800700e:	d302      	bcc.n	8007016 <HAL_I2C_IsDeviceReady+0x13a>
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d103      	bne.n	800701e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	22a0      	movs	r2, #160	; 0xa0
 800701a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	695b      	ldr	r3, [r3, #20]
 8007024:	f003 0302 	and.w	r3, r3, #2
 8007028:	2b02      	cmp	r3, #2
 800702a:	bf0c      	ite	eq
 800702c:	2301      	moveq	r3, #1
 800702e:	2300      	movne	r3, #0
 8007030:	b2db      	uxtb	r3, r3
 8007032:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	695b      	ldr	r3, [r3, #20]
 800703a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800703e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007042:	bf0c      	ite	eq
 8007044:	2301      	moveq	r3, #1
 8007046:	2300      	movne	r3, #0
 8007048:	b2db      	uxtb	r3, r3
 800704a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007052:	b2db      	uxtb	r3, r3
 8007054:	2ba0      	cmp	r3, #160	; 0xa0
 8007056:	d005      	beq.n	8007064 <HAL_I2C_IsDeviceReady+0x188>
 8007058:	7dfb      	ldrb	r3, [r7, #23]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d102      	bne.n	8007064 <HAL_I2C_IsDeviceReady+0x188>
 800705e:	7dbb      	ldrb	r3, [r7, #22]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d0cd      	beq.n	8007000 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2220      	movs	r2, #32
 8007068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	695b      	ldr	r3, [r3, #20]
 8007072:	f003 0302 	and.w	r3, r3, #2
 8007076:	2b02      	cmp	r3, #2
 8007078:	d129      	bne.n	80070ce <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007088:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800708a:	2300      	movs	r3, #0
 800708c:	613b      	str	r3, [r7, #16]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	695b      	ldr	r3, [r3, #20]
 8007094:	613b      	str	r3, [r7, #16]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	699b      	ldr	r3, [r3, #24]
 800709c:	613b      	str	r3, [r7, #16]
 800709e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80070a0:	69fb      	ldr	r3, [r7, #28]
 80070a2:	9300      	str	r3, [sp, #0]
 80070a4:	2319      	movs	r3, #25
 80070a6:	2201      	movs	r2, #1
 80070a8:	4921      	ldr	r1, [pc, #132]	; (8007130 <HAL_I2C_IsDeviceReady+0x254>)
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	f000 fb12 	bl	80076d4 <I2C_WaitOnFlagUntilTimeout>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d001      	beq.n	80070ba <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e036      	b.n	8007128 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2220      	movs	r2, #32
 80070be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80070ca:	2300      	movs	r3, #0
 80070cc:	e02c      	b.n	8007128 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070dc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80070e6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	9300      	str	r3, [sp, #0]
 80070ec:	2319      	movs	r3, #25
 80070ee:	2201      	movs	r2, #1
 80070f0:	490f      	ldr	r1, [pc, #60]	; (8007130 <HAL_I2C_IsDeviceReady+0x254>)
 80070f2:	68f8      	ldr	r0, [r7, #12]
 80070f4:	f000 faee 	bl	80076d4 <I2C_WaitOnFlagUntilTimeout>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d001      	beq.n	8007102 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e012      	b.n	8007128 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8007102:	69bb      	ldr	r3, [r7, #24]
 8007104:	3301      	adds	r3, #1
 8007106:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8007108:	69ba      	ldr	r2, [r7, #24]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	429a      	cmp	r2, r3
 800710e:	f4ff af32 	bcc.w	8006f76 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2220      	movs	r2, #32
 8007116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2200      	movs	r2, #0
 800711e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	e000      	b.n	8007128 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8007126:	2302      	movs	r3, #2
  }
}
 8007128:	4618      	mov	r0, r3
 800712a:	3720      	adds	r7, #32
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}
 8007130:	00100002 	.word	0x00100002
 8007134:	ffff0000 	.word	0xffff0000

08007138 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b088      	sub	sp, #32
 800713c:	af02      	add	r7, sp, #8
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	607a      	str	r2, [r7, #4]
 8007142:	603b      	str	r3, [r7, #0]
 8007144:	460b      	mov	r3, r1
 8007146:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800714c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	2b08      	cmp	r3, #8
 8007152:	d006      	beq.n	8007162 <I2C_MasterRequestWrite+0x2a>
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	2b01      	cmp	r3, #1
 8007158:	d003      	beq.n	8007162 <I2C_MasterRequestWrite+0x2a>
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007160:	d108      	bne.n	8007174 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007170:	601a      	str	r2, [r3, #0]
 8007172:	e00b      	b.n	800718c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007178:	2b12      	cmp	r3, #18
 800717a:	d107      	bne.n	800718c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800718a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	9300      	str	r3, [sp, #0]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f000 fa9b 	bl	80076d4 <I2C_WaitOnFlagUntilTimeout>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d00d      	beq.n	80071c0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071b2:	d103      	bne.n	80071bc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80071bc:	2303      	movs	r3, #3
 80071be:	e035      	b.n	800722c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	691b      	ldr	r3, [r3, #16]
 80071c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071c8:	d108      	bne.n	80071dc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80071ca:	897b      	ldrh	r3, [r7, #10]
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	461a      	mov	r2, r3
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80071d8:	611a      	str	r2, [r3, #16]
 80071da:	e01b      	b.n	8007214 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80071dc:	897b      	ldrh	r3, [r7, #10]
 80071de:	11db      	asrs	r3, r3, #7
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	f003 0306 	and.w	r3, r3, #6
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	f063 030f 	orn	r3, r3, #15
 80071ec:	b2da      	uxtb	r2, r3
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	490e      	ldr	r1, [pc, #56]	; (8007234 <I2C_MasterRequestWrite+0xfc>)
 80071fa:	68f8      	ldr	r0, [r7, #12]
 80071fc:	f000 fac1 	bl	8007782 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d001      	beq.n	800720a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	e010      	b.n	800722c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800720a:	897b      	ldrh	r3, [r7, #10]
 800720c:	b2da      	uxtb	r2, r3
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	4907      	ldr	r1, [pc, #28]	; (8007238 <I2C_MasterRequestWrite+0x100>)
 800721a:	68f8      	ldr	r0, [r7, #12]
 800721c:	f000 fab1 	bl	8007782 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007220:	4603      	mov	r3, r0
 8007222:	2b00      	cmp	r3, #0
 8007224:	d001      	beq.n	800722a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e000      	b.n	800722c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800722a:	2300      	movs	r3, #0
}
 800722c:	4618      	mov	r0, r3
 800722e:	3718      	adds	r7, #24
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}
 8007234:	00010008 	.word	0x00010008
 8007238:	00010002 	.word	0x00010002

0800723c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b088      	sub	sp, #32
 8007240:	af02      	add	r7, sp, #8
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	607a      	str	r2, [r7, #4]
 8007246:	603b      	str	r3, [r7, #0]
 8007248:	460b      	mov	r3, r1
 800724a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007250:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007260:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	2b08      	cmp	r3, #8
 8007266:	d006      	beq.n	8007276 <I2C_MasterRequestRead+0x3a>
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	2b01      	cmp	r3, #1
 800726c:	d003      	beq.n	8007276 <I2C_MasterRequestRead+0x3a>
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007274:	d108      	bne.n	8007288 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007284:	601a      	str	r2, [r3, #0]
 8007286:	e00b      	b.n	80072a0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800728c:	2b11      	cmp	r3, #17
 800728e:	d107      	bne.n	80072a0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800729e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	9300      	str	r3, [sp, #0]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80072ac:	68f8      	ldr	r0, [r7, #12]
 80072ae:	f000 fa11 	bl	80076d4 <I2C_WaitOnFlagUntilTimeout>
 80072b2:	4603      	mov	r3, r0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d00d      	beq.n	80072d4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072c6:	d103      	bne.n	80072d0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80072d0:	2303      	movs	r3, #3
 80072d2:	e079      	b.n	80073c8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072dc:	d108      	bne.n	80072f0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80072de:	897b      	ldrh	r3, [r7, #10]
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	f043 0301 	orr.w	r3, r3, #1
 80072e6:	b2da      	uxtb	r2, r3
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	611a      	str	r2, [r3, #16]
 80072ee:	e05f      	b.n	80073b0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80072f0:	897b      	ldrh	r3, [r7, #10]
 80072f2:	11db      	asrs	r3, r3, #7
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	f003 0306 	and.w	r3, r3, #6
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	f063 030f 	orn	r3, r3, #15
 8007300:	b2da      	uxtb	r2, r3
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	4930      	ldr	r1, [pc, #192]	; (80073d0 <I2C_MasterRequestRead+0x194>)
 800730e:	68f8      	ldr	r0, [r7, #12]
 8007310:	f000 fa37 	bl	8007782 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d001      	beq.n	800731e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	e054      	b.n	80073c8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800731e:	897b      	ldrh	r3, [r7, #10]
 8007320:	b2da      	uxtb	r2, r3
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	4929      	ldr	r1, [pc, #164]	; (80073d4 <I2C_MasterRequestRead+0x198>)
 800732e:	68f8      	ldr	r0, [r7, #12]
 8007330:	f000 fa27 	bl	8007782 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007334:	4603      	mov	r3, r0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d001      	beq.n	800733e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	e044      	b.n	80073c8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800733e:	2300      	movs	r3, #0
 8007340:	613b      	str	r3, [r7, #16]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	695b      	ldr	r3, [r3, #20]
 8007348:	613b      	str	r3, [r7, #16]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	699b      	ldr	r3, [r3, #24]
 8007350:	613b      	str	r3, [r7, #16]
 8007352:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007362:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	9300      	str	r3, [sp, #0]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f000 f9af 	bl	80076d4 <I2C_WaitOnFlagUntilTimeout>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d00d      	beq.n	8007398 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800738a:	d103      	bne.n	8007394 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007392:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8007394:	2303      	movs	r3, #3
 8007396:	e017      	b.n	80073c8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007398:	897b      	ldrh	r3, [r7, #10]
 800739a:	11db      	asrs	r3, r3, #7
 800739c:	b2db      	uxtb	r3, r3
 800739e:	f003 0306 	and.w	r3, r3, #6
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	f063 030e 	orn	r3, r3, #14
 80073a8:	b2da      	uxtb	r2, r3
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	4907      	ldr	r1, [pc, #28]	; (80073d4 <I2C_MasterRequestRead+0x198>)
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	f000 f9e3 	bl	8007782 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80073bc:	4603      	mov	r3, r0
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d001      	beq.n	80073c6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	e000      	b.n	80073c8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80073c6:	2300      	movs	r3, #0
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3718      	adds	r7, #24
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	00010008 	.word	0x00010008
 80073d4:	00010002 	.word	0x00010002

080073d8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b088      	sub	sp, #32
 80073dc:	af02      	add	r7, sp, #8
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	4608      	mov	r0, r1
 80073e2:	4611      	mov	r1, r2
 80073e4:	461a      	mov	r2, r3
 80073e6:	4603      	mov	r3, r0
 80073e8:	817b      	strh	r3, [r7, #10]
 80073ea:	460b      	mov	r3, r1
 80073ec:	813b      	strh	r3, [r7, #8]
 80073ee:	4613      	mov	r3, r2
 80073f0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007400:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007404:	9300      	str	r3, [sp, #0]
 8007406:	6a3b      	ldr	r3, [r7, #32]
 8007408:	2200      	movs	r2, #0
 800740a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800740e:	68f8      	ldr	r0, [r7, #12]
 8007410:	f000 f960 	bl	80076d4 <I2C_WaitOnFlagUntilTimeout>
 8007414:	4603      	mov	r3, r0
 8007416:	2b00      	cmp	r3, #0
 8007418:	d00d      	beq.n	8007436 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007424:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007428:	d103      	bne.n	8007432 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007430:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007432:	2303      	movs	r3, #3
 8007434:	e05f      	b.n	80074f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007436:	897b      	ldrh	r3, [r7, #10]
 8007438:	b2db      	uxtb	r3, r3
 800743a:	461a      	mov	r2, r3
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007444:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007448:	6a3a      	ldr	r2, [r7, #32]
 800744a:	492d      	ldr	r1, [pc, #180]	; (8007500 <I2C_RequestMemoryWrite+0x128>)
 800744c:	68f8      	ldr	r0, [r7, #12]
 800744e:	f000 f998 	bl	8007782 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007452:	4603      	mov	r3, r0
 8007454:	2b00      	cmp	r3, #0
 8007456:	d001      	beq.n	800745c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	e04c      	b.n	80074f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800745c:	2300      	movs	r3, #0
 800745e:	617b      	str	r3, [r7, #20]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	695b      	ldr	r3, [r3, #20]
 8007466:	617b      	str	r3, [r7, #20]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	699b      	ldr	r3, [r3, #24]
 800746e:	617b      	str	r3, [r7, #20]
 8007470:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007474:	6a39      	ldr	r1, [r7, #32]
 8007476:	68f8      	ldr	r0, [r7, #12]
 8007478:	f000 fa02 	bl	8007880 <I2C_WaitOnTXEFlagUntilTimeout>
 800747c:	4603      	mov	r3, r0
 800747e:	2b00      	cmp	r3, #0
 8007480:	d00d      	beq.n	800749e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007486:	2b04      	cmp	r3, #4
 8007488:	d107      	bne.n	800749a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007498:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	e02b      	b.n	80074f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800749e:	88fb      	ldrh	r3, [r7, #6]
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d105      	bne.n	80074b0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80074a4:	893b      	ldrh	r3, [r7, #8]
 80074a6:	b2da      	uxtb	r2, r3
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	611a      	str	r2, [r3, #16]
 80074ae:	e021      	b.n	80074f4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80074b0:	893b      	ldrh	r3, [r7, #8]
 80074b2:	0a1b      	lsrs	r3, r3, #8
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	b2da      	uxtb	r2, r3
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80074be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074c0:	6a39      	ldr	r1, [r7, #32]
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	f000 f9dc 	bl	8007880 <I2C_WaitOnTXEFlagUntilTimeout>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d00d      	beq.n	80074ea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d2:	2b04      	cmp	r3, #4
 80074d4:	d107      	bne.n	80074e6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	e005      	b.n	80074f6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80074ea:	893b      	ldrh	r3, [r7, #8]
 80074ec:	b2da      	uxtb	r2, r3
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3718      	adds	r7, #24
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	00010002 	.word	0x00010002

08007504 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b088      	sub	sp, #32
 8007508:	af02      	add	r7, sp, #8
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	4608      	mov	r0, r1
 800750e:	4611      	mov	r1, r2
 8007510:	461a      	mov	r2, r3
 8007512:	4603      	mov	r3, r0
 8007514:	817b      	strh	r3, [r7, #10]
 8007516:	460b      	mov	r3, r1
 8007518:	813b      	strh	r3, [r7, #8]
 800751a:	4613      	mov	r3, r2
 800751c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800752c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800753c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800753e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007540:	9300      	str	r3, [sp, #0]
 8007542:	6a3b      	ldr	r3, [r7, #32]
 8007544:	2200      	movs	r2, #0
 8007546:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800754a:	68f8      	ldr	r0, [r7, #12]
 800754c:	f000 f8c2 	bl	80076d4 <I2C_WaitOnFlagUntilTimeout>
 8007550:	4603      	mov	r3, r0
 8007552:	2b00      	cmp	r3, #0
 8007554:	d00d      	beq.n	8007572 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007560:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007564:	d103      	bne.n	800756e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f44f 7200 	mov.w	r2, #512	; 0x200
 800756c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800756e:	2303      	movs	r3, #3
 8007570:	e0aa      	b.n	80076c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007572:	897b      	ldrh	r3, [r7, #10]
 8007574:	b2db      	uxtb	r3, r3
 8007576:	461a      	mov	r2, r3
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007580:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007584:	6a3a      	ldr	r2, [r7, #32]
 8007586:	4952      	ldr	r1, [pc, #328]	; (80076d0 <I2C_RequestMemoryRead+0x1cc>)
 8007588:	68f8      	ldr	r0, [r7, #12]
 800758a:	f000 f8fa 	bl	8007782 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800758e:	4603      	mov	r3, r0
 8007590:	2b00      	cmp	r3, #0
 8007592:	d001      	beq.n	8007598 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	e097      	b.n	80076c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007598:	2300      	movs	r3, #0
 800759a:	617b      	str	r3, [r7, #20]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	695b      	ldr	r3, [r3, #20]
 80075a2:	617b      	str	r3, [r7, #20]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	699b      	ldr	r3, [r3, #24]
 80075aa:	617b      	str	r3, [r7, #20]
 80075ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80075ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075b0:	6a39      	ldr	r1, [r7, #32]
 80075b2:	68f8      	ldr	r0, [r7, #12]
 80075b4:	f000 f964 	bl	8007880 <I2C_WaitOnTXEFlagUntilTimeout>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d00d      	beq.n	80075da <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c2:	2b04      	cmp	r3, #4
 80075c4:	d107      	bne.n	80075d6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	e076      	b.n	80076c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80075da:	88fb      	ldrh	r3, [r7, #6]
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d105      	bne.n	80075ec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80075e0:	893b      	ldrh	r3, [r7, #8]
 80075e2:	b2da      	uxtb	r2, r3
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	611a      	str	r2, [r3, #16]
 80075ea:	e021      	b.n	8007630 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80075ec:	893b      	ldrh	r3, [r7, #8]
 80075ee:	0a1b      	lsrs	r3, r3, #8
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	b2da      	uxtb	r2, r3
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80075fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075fc:	6a39      	ldr	r1, [r7, #32]
 80075fe:	68f8      	ldr	r0, [r7, #12]
 8007600:	f000 f93e 	bl	8007880 <I2C_WaitOnTXEFlagUntilTimeout>
 8007604:	4603      	mov	r3, r0
 8007606:	2b00      	cmp	r3, #0
 8007608:	d00d      	beq.n	8007626 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800760e:	2b04      	cmp	r3, #4
 8007610:	d107      	bne.n	8007622 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007620:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	e050      	b.n	80076c8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007626:	893b      	ldrh	r3, [r7, #8]
 8007628:	b2da      	uxtb	r2, r3
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007632:	6a39      	ldr	r1, [r7, #32]
 8007634:	68f8      	ldr	r0, [r7, #12]
 8007636:	f000 f923 	bl	8007880 <I2C_WaitOnTXEFlagUntilTimeout>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d00d      	beq.n	800765c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007644:	2b04      	cmp	r3, #4
 8007646:	d107      	bne.n	8007658 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007656:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	e035      	b.n	80076c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800766a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800766c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766e:	9300      	str	r3, [sp, #0]
 8007670:	6a3b      	ldr	r3, [r7, #32]
 8007672:	2200      	movs	r2, #0
 8007674:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	f000 f82b 	bl	80076d4 <I2C_WaitOnFlagUntilTimeout>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d00d      	beq.n	80076a0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800768e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007692:	d103      	bne.n	800769c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f44f 7200 	mov.w	r2, #512	; 0x200
 800769a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800769c:	2303      	movs	r3, #3
 800769e:	e013      	b.n	80076c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80076a0:	897b      	ldrh	r3, [r7, #10]
 80076a2:	b2db      	uxtb	r3, r3
 80076a4:	f043 0301 	orr.w	r3, r3, #1
 80076a8:	b2da      	uxtb	r2, r3
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80076b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b2:	6a3a      	ldr	r2, [r7, #32]
 80076b4:	4906      	ldr	r1, [pc, #24]	; (80076d0 <I2C_RequestMemoryRead+0x1cc>)
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	f000 f863 	bl	8007782 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d001      	beq.n	80076c6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	e000      	b.n	80076c8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3718      	adds	r7, #24
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	00010002 	.word	0x00010002

080076d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b084      	sub	sp, #16
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	603b      	str	r3, [r7, #0]
 80076e0:	4613      	mov	r3, r2
 80076e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80076e4:	e025      	b.n	8007732 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ec:	d021      	beq.n	8007732 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076ee:	f7fe f919 	bl	8005924 <HAL_GetTick>
 80076f2:	4602      	mov	r2, r0
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	1ad3      	subs	r3, r2, r3
 80076f8:	683a      	ldr	r2, [r7, #0]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d302      	bcc.n	8007704 <I2C_WaitOnFlagUntilTimeout+0x30>
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d116      	bne.n	8007732 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2200      	movs	r2, #0
 8007708:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2220      	movs	r2, #32
 800770e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2200      	movs	r2, #0
 8007716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800771e:	f043 0220 	orr.w	r2, r3, #32
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2200      	movs	r2, #0
 800772a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	e023      	b.n	800777a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	0c1b      	lsrs	r3, r3, #16
 8007736:	b2db      	uxtb	r3, r3
 8007738:	2b01      	cmp	r3, #1
 800773a:	d10d      	bne.n	8007758 <I2C_WaitOnFlagUntilTimeout+0x84>
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	695b      	ldr	r3, [r3, #20]
 8007742:	43da      	mvns	r2, r3
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	4013      	ands	r3, r2
 8007748:	b29b      	uxth	r3, r3
 800774a:	2b00      	cmp	r3, #0
 800774c:	bf0c      	ite	eq
 800774e:	2301      	moveq	r3, #1
 8007750:	2300      	movne	r3, #0
 8007752:	b2db      	uxtb	r3, r3
 8007754:	461a      	mov	r2, r3
 8007756:	e00c      	b.n	8007772 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	699b      	ldr	r3, [r3, #24]
 800775e:	43da      	mvns	r2, r3
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	4013      	ands	r3, r2
 8007764:	b29b      	uxth	r3, r3
 8007766:	2b00      	cmp	r3, #0
 8007768:	bf0c      	ite	eq
 800776a:	2301      	moveq	r3, #1
 800776c:	2300      	movne	r3, #0
 800776e:	b2db      	uxtb	r3, r3
 8007770:	461a      	mov	r2, r3
 8007772:	79fb      	ldrb	r3, [r7, #7]
 8007774:	429a      	cmp	r2, r3
 8007776:	d0b6      	beq.n	80076e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b084      	sub	sp, #16
 8007786:	af00      	add	r7, sp, #0
 8007788:	60f8      	str	r0, [r7, #12]
 800778a:	60b9      	str	r1, [r7, #8]
 800778c:	607a      	str	r2, [r7, #4]
 800778e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007790:	e051      	b.n	8007836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	695b      	ldr	r3, [r3, #20]
 8007798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800779c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077a0:	d123      	bne.n	80077ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077b0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80077ba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2200      	movs	r2, #0
 80077c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2220      	movs	r2, #32
 80077c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d6:	f043 0204 	orr.w	r2, r3, #4
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2200      	movs	r2, #0
 80077e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	e046      	b.n	8007878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077f0:	d021      	beq.n	8007836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077f2:	f7fe f897 	bl	8005924 <HAL_GetTick>
 80077f6:	4602      	mov	r2, r0
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	1ad3      	subs	r3, r2, r3
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	429a      	cmp	r2, r3
 8007800:	d302      	bcc.n	8007808 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d116      	bne.n	8007836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2200      	movs	r2, #0
 800780c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2220      	movs	r2, #32
 8007812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2200      	movs	r2, #0
 800781a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007822:	f043 0220 	orr.w	r2, r3, #32
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2200      	movs	r2, #0
 800782e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	e020      	b.n	8007878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	0c1b      	lsrs	r3, r3, #16
 800783a:	b2db      	uxtb	r3, r3
 800783c:	2b01      	cmp	r3, #1
 800783e:	d10c      	bne.n	800785a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	695b      	ldr	r3, [r3, #20]
 8007846:	43da      	mvns	r2, r3
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	4013      	ands	r3, r2
 800784c:	b29b      	uxth	r3, r3
 800784e:	2b00      	cmp	r3, #0
 8007850:	bf14      	ite	ne
 8007852:	2301      	movne	r3, #1
 8007854:	2300      	moveq	r3, #0
 8007856:	b2db      	uxtb	r3, r3
 8007858:	e00b      	b.n	8007872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	699b      	ldr	r3, [r3, #24]
 8007860:	43da      	mvns	r2, r3
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	4013      	ands	r3, r2
 8007866:	b29b      	uxth	r3, r3
 8007868:	2b00      	cmp	r3, #0
 800786a:	bf14      	ite	ne
 800786c:	2301      	movne	r3, #1
 800786e:	2300      	moveq	r3, #0
 8007870:	b2db      	uxtb	r3, r3
 8007872:	2b00      	cmp	r3, #0
 8007874:	d18d      	bne.n	8007792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007876:	2300      	movs	r3, #0
}
 8007878:	4618      	mov	r0, r3
 800787a:	3710      	adds	r7, #16
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	60b9      	str	r1, [r7, #8]
 800788a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800788c:	e02d      	b.n	80078ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800788e:	68f8      	ldr	r0, [r7, #12]
 8007890:	f000 f8ce 	bl	8007a30 <I2C_IsAcknowledgeFailed>
 8007894:	4603      	mov	r3, r0
 8007896:	2b00      	cmp	r3, #0
 8007898:	d001      	beq.n	800789e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	e02d      	b.n	80078fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078a4:	d021      	beq.n	80078ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078a6:	f7fe f83d 	bl	8005924 <HAL_GetTick>
 80078aa:	4602      	mov	r2, r0
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	1ad3      	subs	r3, r2, r3
 80078b0:	68ba      	ldr	r2, [r7, #8]
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d302      	bcc.n	80078bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d116      	bne.n	80078ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2200      	movs	r2, #0
 80078c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2220      	movs	r2, #32
 80078c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2200      	movs	r2, #0
 80078ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d6:	f043 0220 	orr.w	r2, r3, #32
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2200      	movs	r2, #0
 80078e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	e007      	b.n	80078fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	695b      	ldr	r3, [r3, #20]
 80078f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078f4:	2b80      	cmp	r3, #128	; 0x80
 80078f6:	d1ca      	bne.n	800788e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007902:	b580      	push	{r7, lr}
 8007904:	b084      	sub	sp, #16
 8007906:	af00      	add	r7, sp, #0
 8007908:	60f8      	str	r0, [r7, #12]
 800790a:	60b9      	str	r1, [r7, #8]
 800790c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800790e:	e02d      	b.n	800796c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f000 f88d 	bl	8007a30 <I2C_IsAcknowledgeFailed>
 8007916:	4603      	mov	r3, r0
 8007918:	2b00      	cmp	r3, #0
 800791a:	d001      	beq.n	8007920 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	e02d      	b.n	800797c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007926:	d021      	beq.n	800796c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007928:	f7fd fffc 	bl	8005924 <HAL_GetTick>
 800792c:	4602      	mov	r2, r0
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	68ba      	ldr	r2, [r7, #8]
 8007934:	429a      	cmp	r2, r3
 8007936:	d302      	bcc.n	800793e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d116      	bne.n	800796c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2200      	movs	r2, #0
 8007942:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2220      	movs	r2, #32
 8007948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2200      	movs	r2, #0
 8007950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007958:	f043 0220 	orr.w	r2, r3, #32
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2200      	movs	r2, #0
 8007964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007968:	2301      	movs	r3, #1
 800796a:	e007      	b.n	800797c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	695b      	ldr	r3, [r3, #20]
 8007972:	f003 0304 	and.w	r3, r3, #4
 8007976:	2b04      	cmp	r3, #4
 8007978:	d1ca      	bne.n	8007910 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800797a:	2300      	movs	r3, #0
}
 800797c:	4618      	mov	r0, r3
 800797e:	3710      	adds	r7, #16
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007990:	e042      	b.n	8007a18 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	695b      	ldr	r3, [r3, #20]
 8007998:	f003 0310 	and.w	r3, r3, #16
 800799c:	2b10      	cmp	r3, #16
 800799e:	d119      	bne.n	80079d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f06f 0210 	mvn.w	r2, #16
 80079a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2200      	movs	r2, #0
 80079ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2220      	movs	r2, #32
 80079b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2200      	movs	r2, #0
 80079bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2200      	movs	r2, #0
 80079cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	e029      	b.n	8007a28 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079d4:	f7fd ffa6 	bl	8005924 <HAL_GetTick>
 80079d8:	4602      	mov	r2, r0
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	1ad3      	subs	r3, r2, r3
 80079de:	68ba      	ldr	r2, [r7, #8]
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d302      	bcc.n	80079ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d116      	bne.n	8007a18 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2200      	movs	r2, #0
 80079ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2220      	movs	r2, #32
 80079f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2200      	movs	r2, #0
 80079fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a04:	f043 0220 	orr.w	r2, r3, #32
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	e007      	b.n	8007a28 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	695b      	ldr	r3, [r3, #20]
 8007a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a22:	2b40      	cmp	r3, #64	; 0x40
 8007a24:	d1b5      	bne.n	8007992 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007a26:	2300      	movs	r3, #0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3710      	adds	r7, #16
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	695b      	ldr	r3, [r3, #20]
 8007a3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a46:	d11b      	bne.n	8007a80 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007a50:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2220      	movs	r2, #32
 8007a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a6c:	f043 0204 	orr.w	r2, r3, #4
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	e000      	b.n	8007a82 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	370c      	adds	r7, #12
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr
	...

08007a90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b086      	sub	sp, #24
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d101      	bne.n	8007aa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e267      	b.n	8007f72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f003 0301 	and.w	r3, r3, #1
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d075      	beq.n	8007b9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007aae:	4b88      	ldr	r3, [pc, #544]	; (8007cd0 <HAL_RCC_OscConfig+0x240>)
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	f003 030c 	and.w	r3, r3, #12
 8007ab6:	2b04      	cmp	r3, #4
 8007ab8:	d00c      	beq.n	8007ad4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007aba:	4b85      	ldr	r3, [pc, #532]	; (8007cd0 <HAL_RCC_OscConfig+0x240>)
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007ac2:	2b08      	cmp	r3, #8
 8007ac4:	d112      	bne.n	8007aec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007ac6:	4b82      	ldr	r3, [pc, #520]	; (8007cd0 <HAL_RCC_OscConfig+0x240>)
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ace:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ad2:	d10b      	bne.n	8007aec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ad4:	4b7e      	ldr	r3, [pc, #504]	; (8007cd0 <HAL_RCC_OscConfig+0x240>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d05b      	beq.n	8007b98 <HAL_RCC_OscConfig+0x108>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d157      	bne.n	8007b98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	e242      	b.n	8007f72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007af4:	d106      	bne.n	8007b04 <HAL_RCC_OscConfig+0x74>
 8007af6:	4b76      	ldr	r3, [pc, #472]	; (8007cd0 <HAL_RCC_OscConfig+0x240>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a75      	ldr	r2, [pc, #468]	; (8007cd0 <HAL_RCC_OscConfig+0x240>)
 8007afc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b00:	6013      	str	r3, [r2, #0]
 8007b02:	e01d      	b.n	8007b40 <HAL_RCC_OscConfig+0xb0>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b0c:	d10c      	bne.n	8007b28 <HAL_RCC_OscConfig+0x98>
 8007b0e:	4b70      	ldr	r3, [pc, #448]	; (8007cd0 <HAL_RCC_OscConfig+0x240>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a6f      	ldr	r2, [pc, #444]	; (8007cd0 <HAL_RCC_OscConfig+0x240>)
 8007b14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b18:	6013      	str	r3, [r2, #0]
 8007b1a:	4b6d      	ldr	r3, [pc, #436]	; (8007cd0 <HAL_RCC_OscConfig+0x240>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a6c      	ldr	r2, [pc, #432]	; (8007cd0 <HAL_RCC_OscConfig+0x240>)
 8007b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b24:	6013      	str	r3, [r2, #0]
 8007b26:	e00b      	b.n	8007b40 <HAL_RCC_OscConfig+0xb0>
 8007b28:	4b69      	ldr	r3, [pc, #420]	; (8007cd0 <HAL_RCC_OscConfig+0x240>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a68      	ldr	r2, [pc, #416]	; (8007cd0 <HAL_RCC_OscConfig+0x240>)
 8007b2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b32:	6013      	str	r3, [r2, #0]
 8007b34:	4b66      	ldr	r3, [pc, #408]	; (8007cd0 <HAL_RCC_OscConfig+0x240>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a65      	ldr	r2, [pc, #404]	; (8007cd0 <HAL_RCC_OscConfig+0x240>)
 8007b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d013      	beq.n	8007b70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b48:	f7fd feec 	bl	8005924 <HAL_GetTick>
 8007b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b4e:	e008      	b.n	8007b62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007b50:	f7fd fee8 	bl	8005924 <HAL_GetTick>
 8007b54:	4602      	mov	r2, r0
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	1ad3      	subs	r3, r2, r3
 8007b5a:	2b64      	cmp	r3, #100	; 0x64
 8007b5c:	d901      	bls.n	8007b62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007b5e:	2303      	movs	r3, #3
 8007b60:	e207      	b.n	8007f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b62:	4b5b      	ldr	r3, [pc, #364]	; (8007cd0 <HAL_RCC_OscConfig+0x240>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d0f0      	beq.n	8007b50 <HAL_RCC_OscConfig+0xc0>
 8007b6e:	e014      	b.n	8007b9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b70:	f7fd fed8 	bl	8005924 <HAL_GetTick>
 8007b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b76:	e008      	b.n	8007b8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007b78:	f7fd fed4 	bl	8005924 <HAL_GetTick>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	1ad3      	subs	r3, r2, r3
 8007b82:	2b64      	cmp	r3, #100	; 0x64
 8007b84:	d901      	bls.n	8007b8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007b86:	2303      	movs	r3, #3
 8007b88:	e1f3      	b.n	8007f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b8a:	4b51      	ldr	r3, [pc, #324]	; (8007cd0 <HAL_RCC_OscConfig+0x240>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d1f0      	bne.n	8007b78 <HAL_RCC_OscConfig+0xe8>
 8007b96:	e000      	b.n	8007b9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f003 0302 	and.w	r3, r3, #2
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d063      	beq.n	8007c6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007ba6:	4b4a      	ldr	r3, [pc, #296]	; (8007cd0 <HAL_RCC_OscConfig+0x240>)
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	f003 030c 	and.w	r3, r3, #12
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d00b      	beq.n	8007bca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007bb2:	4b47      	ldr	r3, [pc, #284]	; (8007cd0 <HAL_RCC_OscConfig+0x240>)
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007bba:	2b08      	cmp	r3, #8
 8007bbc:	d11c      	bne.n	8007bf8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007bbe:	4b44      	ldr	r3, [pc, #272]	; (8007cd0 <HAL_RCC_OscConfig+0x240>)
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d116      	bne.n	8007bf8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007bca:	4b41      	ldr	r3, [pc, #260]	; (8007cd0 <HAL_RCC_OscConfig+0x240>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f003 0302 	and.w	r3, r3, #2
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d005      	beq.n	8007be2 <HAL_RCC_OscConfig+0x152>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d001      	beq.n	8007be2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007bde:	2301      	movs	r3, #1
 8007be0:	e1c7      	b.n	8007f72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007be2:	4b3b      	ldr	r3, [pc, #236]	; (8007cd0 <HAL_RCC_OscConfig+0x240>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	691b      	ldr	r3, [r3, #16]
 8007bee:	00db      	lsls	r3, r3, #3
 8007bf0:	4937      	ldr	r1, [pc, #220]	; (8007cd0 <HAL_RCC_OscConfig+0x240>)
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007bf6:	e03a      	b.n	8007c6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d020      	beq.n	8007c42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007c00:	4b34      	ldr	r3, [pc, #208]	; (8007cd4 <HAL_RCC_OscConfig+0x244>)
 8007c02:	2201      	movs	r2, #1
 8007c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c06:	f7fd fe8d 	bl	8005924 <HAL_GetTick>
 8007c0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c0c:	e008      	b.n	8007c20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007c0e:	f7fd fe89 	bl	8005924 <HAL_GetTick>
 8007c12:	4602      	mov	r2, r0
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	1ad3      	subs	r3, r2, r3
 8007c18:	2b02      	cmp	r3, #2
 8007c1a:	d901      	bls.n	8007c20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007c1c:	2303      	movs	r3, #3
 8007c1e:	e1a8      	b.n	8007f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c20:	4b2b      	ldr	r3, [pc, #172]	; (8007cd0 <HAL_RCC_OscConfig+0x240>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f003 0302 	and.w	r3, r3, #2
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d0f0      	beq.n	8007c0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c2c:	4b28      	ldr	r3, [pc, #160]	; (8007cd0 <HAL_RCC_OscConfig+0x240>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	691b      	ldr	r3, [r3, #16]
 8007c38:	00db      	lsls	r3, r3, #3
 8007c3a:	4925      	ldr	r1, [pc, #148]	; (8007cd0 <HAL_RCC_OscConfig+0x240>)
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	600b      	str	r3, [r1, #0]
 8007c40:	e015      	b.n	8007c6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007c42:	4b24      	ldr	r3, [pc, #144]	; (8007cd4 <HAL_RCC_OscConfig+0x244>)
 8007c44:	2200      	movs	r2, #0
 8007c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c48:	f7fd fe6c 	bl	8005924 <HAL_GetTick>
 8007c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c4e:	e008      	b.n	8007c62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007c50:	f7fd fe68 	bl	8005924 <HAL_GetTick>
 8007c54:	4602      	mov	r2, r0
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	1ad3      	subs	r3, r2, r3
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	d901      	bls.n	8007c62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007c5e:	2303      	movs	r3, #3
 8007c60:	e187      	b.n	8007f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c62:	4b1b      	ldr	r3, [pc, #108]	; (8007cd0 <HAL_RCC_OscConfig+0x240>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f003 0302 	and.w	r3, r3, #2
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d1f0      	bne.n	8007c50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f003 0308 	and.w	r3, r3, #8
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d036      	beq.n	8007ce8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	695b      	ldr	r3, [r3, #20]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d016      	beq.n	8007cb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c82:	4b15      	ldr	r3, [pc, #84]	; (8007cd8 <HAL_RCC_OscConfig+0x248>)
 8007c84:	2201      	movs	r2, #1
 8007c86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c88:	f7fd fe4c 	bl	8005924 <HAL_GetTick>
 8007c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c8e:	e008      	b.n	8007ca2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007c90:	f7fd fe48 	bl	8005924 <HAL_GetTick>
 8007c94:	4602      	mov	r2, r0
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	1ad3      	subs	r3, r2, r3
 8007c9a:	2b02      	cmp	r3, #2
 8007c9c:	d901      	bls.n	8007ca2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007c9e:	2303      	movs	r3, #3
 8007ca0:	e167      	b.n	8007f72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ca2:	4b0b      	ldr	r3, [pc, #44]	; (8007cd0 <HAL_RCC_OscConfig+0x240>)
 8007ca4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ca6:	f003 0302 	and.w	r3, r3, #2
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d0f0      	beq.n	8007c90 <HAL_RCC_OscConfig+0x200>
 8007cae:	e01b      	b.n	8007ce8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007cb0:	4b09      	ldr	r3, [pc, #36]	; (8007cd8 <HAL_RCC_OscConfig+0x248>)
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007cb6:	f7fd fe35 	bl	8005924 <HAL_GetTick>
 8007cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007cbc:	e00e      	b.n	8007cdc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007cbe:	f7fd fe31 	bl	8005924 <HAL_GetTick>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	1ad3      	subs	r3, r2, r3
 8007cc8:	2b02      	cmp	r3, #2
 8007cca:	d907      	bls.n	8007cdc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007ccc:	2303      	movs	r3, #3
 8007cce:	e150      	b.n	8007f72 <HAL_RCC_OscConfig+0x4e2>
 8007cd0:	40023800 	.word	0x40023800
 8007cd4:	42470000 	.word	0x42470000
 8007cd8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007cdc:	4b88      	ldr	r3, [pc, #544]	; (8007f00 <HAL_RCC_OscConfig+0x470>)
 8007cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ce0:	f003 0302 	and.w	r3, r3, #2
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d1ea      	bne.n	8007cbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f003 0304 	and.w	r3, r3, #4
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	f000 8097 	beq.w	8007e24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007cfa:	4b81      	ldr	r3, [pc, #516]	; (8007f00 <HAL_RCC_OscConfig+0x470>)
 8007cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d10f      	bne.n	8007d26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d06:	2300      	movs	r3, #0
 8007d08:	60bb      	str	r3, [r7, #8]
 8007d0a:	4b7d      	ldr	r3, [pc, #500]	; (8007f00 <HAL_RCC_OscConfig+0x470>)
 8007d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d0e:	4a7c      	ldr	r2, [pc, #496]	; (8007f00 <HAL_RCC_OscConfig+0x470>)
 8007d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d14:	6413      	str	r3, [r2, #64]	; 0x40
 8007d16:	4b7a      	ldr	r3, [pc, #488]	; (8007f00 <HAL_RCC_OscConfig+0x470>)
 8007d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d1e:	60bb      	str	r3, [r7, #8]
 8007d20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d22:	2301      	movs	r3, #1
 8007d24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d26:	4b77      	ldr	r3, [pc, #476]	; (8007f04 <HAL_RCC_OscConfig+0x474>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d118      	bne.n	8007d64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007d32:	4b74      	ldr	r3, [pc, #464]	; (8007f04 <HAL_RCC_OscConfig+0x474>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a73      	ldr	r2, [pc, #460]	; (8007f04 <HAL_RCC_OscConfig+0x474>)
 8007d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d3e:	f7fd fdf1 	bl	8005924 <HAL_GetTick>
 8007d42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d44:	e008      	b.n	8007d58 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d46:	f7fd fded 	bl	8005924 <HAL_GetTick>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	1ad3      	subs	r3, r2, r3
 8007d50:	2b02      	cmp	r3, #2
 8007d52:	d901      	bls.n	8007d58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007d54:	2303      	movs	r3, #3
 8007d56:	e10c      	b.n	8007f72 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d58:	4b6a      	ldr	r3, [pc, #424]	; (8007f04 <HAL_RCC_OscConfig+0x474>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d0f0      	beq.n	8007d46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d106      	bne.n	8007d7a <HAL_RCC_OscConfig+0x2ea>
 8007d6c:	4b64      	ldr	r3, [pc, #400]	; (8007f00 <HAL_RCC_OscConfig+0x470>)
 8007d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d70:	4a63      	ldr	r2, [pc, #396]	; (8007f00 <HAL_RCC_OscConfig+0x470>)
 8007d72:	f043 0301 	orr.w	r3, r3, #1
 8007d76:	6713      	str	r3, [r2, #112]	; 0x70
 8007d78:	e01c      	b.n	8007db4 <HAL_RCC_OscConfig+0x324>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	2b05      	cmp	r3, #5
 8007d80:	d10c      	bne.n	8007d9c <HAL_RCC_OscConfig+0x30c>
 8007d82:	4b5f      	ldr	r3, [pc, #380]	; (8007f00 <HAL_RCC_OscConfig+0x470>)
 8007d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d86:	4a5e      	ldr	r2, [pc, #376]	; (8007f00 <HAL_RCC_OscConfig+0x470>)
 8007d88:	f043 0304 	orr.w	r3, r3, #4
 8007d8c:	6713      	str	r3, [r2, #112]	; 0x70
 8007d8e:	4b5c      	ldr	r3, [pc, #368]	; (8007f00 <HAL_RCC_OscConfig+0x470>)
 8007d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d92:	4a5b      	ldr	r2, [pc, #364]	; (8007f00 <HAL_RCC_OscConfig+0x470>)
 8007d94:	f043 0301 	orr.w	r3, r3, #1
 8007d98:	6713      	str	r3, [r2, #112]	; 0x70
 8007d9a:	e00b      	b.n	8007db4 <HAL_RCC_OscConfig+0x324>
 8007d9c:	4b58      	ldr	r3, [pc, #352]	; (8007f00 <HAL_RCC_OscConfig+0x470>)
 8007d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007da0:	4a57      	ldr	r2, [pc, #348]	; (8007f00 <HAL_RCC_OscConfig+0x470>)
 8007da2:	f023 0301 	bic.w	r3, r3, #1
 8007da6:	6713      	str	r3, [r2, #112]	; 0x70
 8007da8:	4b55      	ldr	r3, [pc, #340]	; (8007f00 <HAL_RCC_OscConfig+0x470>)
 8007daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dac:	4a54      	ldr	r2, [pc, #336]	; (8007f00 <HAL_RCC_OscConfig+0x470>)
 8007dae:	f023 0304 	bic.w	r3, r3, #4
 8007db2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d015      	beq.n	8007de8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dbc:	f7fd fdb2 	bl	8005924 <HAL_GetTick>
 8007dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007dc2:	e00a      	b.n	8007dda <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007dc4:	f7fd fdae 	bl	8005924 <HAL_GetTick>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	1ad3      	subs	r3, r2, r3
 8007dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d901      	bls.n	8007dda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007dd6:	2303      	movs	r3, #3
 8007dd8:	e0cb      	b.n	8007f72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007dda:	4b49      	ldr	r3, [pc, #292]	; (8007f00 <HAL_RCC_OscConfig+0x470>)
 8007ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dde:	f003 0302 	and.w	r3, r3, #2
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d0ee      	beq.n	8007dc4 <HAL_RCC_OscConfig+0x334>
 8007de6:	e014      	b.n	8007e12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007de8:	f7fd fd9c 	bl	8005924 <HAL_GetTick>
 8007dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007dee:	e00a      	b.n	8007e06 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007df0:	f7fd fd98 	bl	8005924 <HAL_GetTick>
 8007df4:	4602      	mov	r2, r0
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	1ad3      	subs	r3, r2, r3
 8007dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d901      	bls.n	8007e06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007e02:	2303      	movs	r3, #3
 8007e04:	e0b5      	b.n	8007f72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e06:	4b3e      	ldr	r3, [pc, #248]	; (8007f00 <HAL_RCC_OscConfig+0x470>)
 8007e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e0a:	f003 0302 	and.w	r3, r3, #2
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1ee      	bne.n	8007df0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007e12:	7dfb      	ldrb	r3, [r7, #23]
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d105      	bne.n	8007e24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e18:	4b39      	ldr	r3, [pc, #228]	; (8007f00 <HAL_RCC_OscConfig+0x470>)
 8007e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e1c:	4a38      	ldr	r2, [pc, #224]	; (8007f00 <HAL_RCC_OscConfig+0x470>)
 8007e1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	699b      	ldr	r3, [r3, #24]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f000 80a1 	beq.w	8007f70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007e2e:	4b34      	ldr	r3, [pc, #208]	; (8007f00 <HAL_RCC_OscConfig+0x470>)
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	f003 030c 	and.w	r3, r3, #12
 8007e36:	2b08      	cmp	r3, #8
 8007e38:	d05c      	beq.n	8007ef4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	699b      	ldr	r3, [r3, #24]
 8007e3e:	2b02      	cmp	r3, #2
 8007e40:	d141      	bne.n	8007ec6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e42:	4b31      	ldr	r3, [pc, #196]	; (8007f08 <HAL_RCC_OscConfig+0x478>)
 8007e44:	2200      	movs	r2, #0
 8007e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e48:	f7fd fd6c 	bl	8005924 <HAL_GetTick>
 8007e4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e4e:	e008      	b.n	8007e62 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e50:	f7fd fd68 	bl	8005924 <HAL_GetTick>
 8007e54:	4602      	mov	r2, r0
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	1ad3      	subs	r3, r2, r3
 8007e5a:	2b02      	cmp	r3, #2
 8007e5c:	d901      	bls.n	8007e62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007e5e:	2303      	movs	r3, #3
 8007e60:	e087      	b.n	8007f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e62:	4b27      	ldr	r3, [pc, #156]	; (8007f00 <HAL_RCC_OscConfig+0x470>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d1f0      	bne.n	8007e50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	69da      	ldr	r2, [r3, #28]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6a1b      	ldr	r3, [r3, #32]
 8007e76:	431a      	orrs	r2, r3
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7c:	019b      	lsls	r3, r3, #6
 8007e7e:	431a      	orrs	r2, r3
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e84:	085b      	lsrs	r3, r3, #1
 8007e86:	3b01      	subs	r3, #1
 8007e88:	041b      	lsls	r3, r3, #16
 8007e8a:	431a      	orrs	r2, r3
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e90:	061b      	lsls	r3, r3, #24
 8007e92:	491b      	ldr	r1, [pc, #108]	; (8007f00 <HAL_RCC_OscConfig+0x470>)
 8007e94:	4313      	orrs	r3, r2
 8007e96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e98:	4b1b      	ldr	r3, [pc, #108]	; (8007f08 <HAL_RCC_OscConfig+0x478>)
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e9e:	f7fd fd41 	bl	8005924 <HAL_GetTick>
 8007ea2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ea4:	e008      	b.n	8007eb8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ea6:	f7fd fd3d 	bl	8005924 <HAL_GetTick>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	1ad3      	subs	r3, r2, r3
 8007eb0:	2b02      	cmp	r3, #2
 8007eb2:	d901      	bls.n	8007eb8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007eb4:	2303      	movs	r3, #3
 8007eb6:	e05c      	b.n	8007f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007eb8:	4b11      	ldr	r3, [pc, #68]	; (8007f00 <HAL_RCC_OscConfig+0x470>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d0f0      	beq.n	8007ea6 <HAL_RCC_OscConfig+0x416>
 8007ec4:	e054      	b.n	8007f70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ec6:	4b10      	ldr	r3, [pc, #64]	; (8007f08 <HAL_RCC_OscConfig+0x478>)
 8007ec8:	2200      	movs	r2, #0
 8007eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ecc:	f7fd fd2a 	bl	8005924 <HAL_GetTick>
 8007ed0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ed2:	e008      	b.n	8007ee6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ed4:	f7fd fd26 	bl	8005924 <HAL_GetTick>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	1ad3      	subs	r3, r2, r3
 8007ede:	2b02      	cmp	r3, #2
 8007ee0:	d901      	bls.n	8007ee6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007ee2:	2303      	movs	r3, #3
 8007ee4:	e045      	b.n	8007f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ee6:	4b06      	ldr	r3, [pc, #24]	; (8007f00 <HAL_RCC_OscConfig+0x470>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d1f0      	bne.n	8007ed4 <HAL_RCC_OscConfig+0x444>
 8007ef2:	e03d      	b.n	8007f70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	699b      	ldr	r3, [r3, #24]
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d107      	bne.n	8007f0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	e038      	b.n	8007f72 <HAL_RCC_OscConfig+0x4e2>
 8007f00:	40023800 	.word	0x40023800
 8007f04:	40007000 	.word	0x40007000
 8007f08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007f0c:	4b1b      	ldr	r3, [pc, #108]	; (8007f7c <HAL_RCC_OscConfig+0x4ec>)
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	699b      	ldr	r3, [r3, #24]
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d028      	beq.n	8007f6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d121      	bne.n	8007f6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f32:	429a      	cmp	r2, r3
 8007f34:	d11a      	bne.n	8007f6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007f36:	68fa      	ldr	r2, [r7, #12]
 8007f38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007f3c:	4013      	ands	r3, r2
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007f42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d111      	bne.n	8007f6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f52:	085b      	lsrs	r3, r3, #1
 8007f54:	3b01      	subs	r3, #1
 8007f56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d107      	bne.n	8007f6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d001      	beq.n	8007f70 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	e000      	b.n	8007f72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3718      	adds	r7, #24
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	40023800 	.word	0x40023800

08007f80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d101      	bne.n	8007f94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007f90:	2301      	movs	r3, #1
 8007f92:	e0cc      	b.n	800812e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007f94:	4b68      	ldr	r3, [pc, #416]	; (8008138 <HAL_RCC_ClockConfig+0x1b8>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f003 0307 	and.w	r3, r3, #7
 8007f9c:	683a      	ldr	r2, [r7, #0]
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d90c      	bls.n	8007fbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fa2:	4b65      	ldr	r3, [pc, #404]	; (8008138 <HAL_RCC_ClockConfig+0x1b8>)
 8007fa4:	683a      	ldr	r2, [r7, #0]
 8007fa6:	b2d2      	uxtb	r2, r2
 8007fa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007faa:	4b63      	ldr	r3, [pc, #396]	; (8008138 <HAL_RCC_ClockConfig+0x1b8>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f003 0307 	and.w	r3, r3, #7
 8007fb2:	683a      	ldr	r2, [r7, #0]
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d001      	beq.n	8007fbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e0b8      	b.n	800812e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f003 0302 	and.w	r3, r3, #2
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d020      	beq.n	800800a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f003 0304 	and.w	r3, r3, #4
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d005      	beq.n	8007fe0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007fd4:	4b59      	ldr	r3, [pc, #356]	; (800813c <HAL_RCC_ClockConfig+0x1bc>)
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	4a58      	ldr	r2, [pc, #352]	; (800813c <HAL_RCC_ClockConfig+0x1bc>)
 8007fda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007fde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f003 0308 	and.w	r3, r3, #8
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d005      	beq.n	8007ff8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007fec:	4b53      	ldr	r3, [pc, #332]	; (800813c <HAL_RCC_ClockConfig+0x1bc>)
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	4a52      	ldr	r2, [pc, #328]	; (800813c <HAL_RCC_ClockConfig+0x1bc>)
 8007ff2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007ff6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ff8:	4b50      	ldr	r3, [pc, #320]	; (800813c <HAL_RCC_ClockConfig+0x1bc>)
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	494d      	ldr	r1, [pc, #308]	; (800813c <HAL_RCC_ClockConfig+0x1bc>)
 8008006:	4313      	orrs	r3, r2
 8008008:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f003 0301 	and.w	r3, r3, #1
 8008012:	2b00      	cmp	r3, #0
 8008014:	d044      	beq.n	80080a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	2b01      	cmp	r3, #1
 800801c:	d107      	bne.n	800802e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800801e:	4b47      	ldr	r3, [pc, #284]	; (800813c <HAL_RCC_ClockConfig+0x1bc>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008026:	2b00      	cmp	r3, #0
 8008028:	d119      	bne.n	800805e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800802a:	2301      	movs	r3, #1
 800802c:	e07f      	b.n	800812e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	2b02      	cmp	r3, #2
 8008034:	d003      	beq.n	800803e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800803a:	2b03      	cmp	r3, #3
 800803c:	d107      	bne.n	800804e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800803e:	4b3f      	ldr	r3, [pc, #252]	; (800813c <HAL_RCC_ClockConfig+0x1bc>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008046:	2b00      	cmp	r3, #0
 8008048:	d109      	bne.n	800805e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	e06f      	b.n	800812e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800804e:	4b3b      	ldr	r3, [pc, #236]	; (800813c <HAL_RCC_ClockConfig+0x1bc>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f003 0302 	and.w	r3, r3, #2
 8008056:	2b00      	cmp	r3, #0
 8008058:	d101      	bne.n	800805e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800805a:	2301      	movs	r3, #1
 800805c:	e067      	b.n	800812e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800805e:	4b37      	ldr	r3, [pc, #220]	; (800813c <HAL_RCC_ClockConfig+0x1bc>)
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	f023 0203 	bic.w	r2, r3, #3
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	4934      	ldr	r1, [pc, #208]	; (800813c <HAL_RCC_ClockConfig+0x1bc>)
 800806c:	4313      	orrs	r3, r2
 800806e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008070:	f7fd fc58 	bl	8005924 <HAL_GetTick>
 8008074:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008076:	e00a      	b.n	800808e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008078:	f7fd fc54 	bl	8005924 <HAL_GetTick>
 800807c:	4602      	mov	r2, r0
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	1ad3      	subs	r3, r2, r3
 8008082:	f241 3288 	movw	r2, #5000	; 0x1388
 8008086:	4293      	cmp	r3, r2
 8008088:	d901      	bls.n	800808e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800808a:	2303      	movs	r3, #3
 800808c:	e04f      	b.n	800812e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800808e:	4b2b      	ldr	r3, [pc, #172]	; (800813c <HAL_RCC_ClockConfig+0x1bc>)
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	f003 020c 	and.w	r2, r3, #12
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	429a      	cmp	r2, r3
 800809e:	d1eb      	bne.n	8008078 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80080a0:	4b25      	ldr	r3, [pc, #148]	; (8008138 <HAL_RCC_ClockConfig+0x1b8>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f003 0307 	and.w	r3, r3, #7
 80080a8:	683a      	ldr	r2, [r7, #0]
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d20c      	bcs.n	80080c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080ae:	4b22      	ldr	r3, [pc, #136]	; (8008138 <HAL_RCC_ClockConfig+0x1b8>)
 80080b0:	683a      	ldr	r2, [r7, #0]
 80080b2:	b2d2      	uxtb	r2, r2
 80080b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80080b6:	4b20      	ldr	r3, [pc, #128]	; (8008138 <HAL_RCC_ClockConfig+0x1b8>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f003 0307 	and.w	r3, r3, #7
 80080be:	683a      	ldr	r2, [r7, #0]
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d001      	beq.n	80080c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80080c4:	2301      	movs	r3, #1
 80080c6:	e032      	b.n	800812e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f003 0304 	and.w	r3, r3, #4
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d008      	beq.n	80080e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80080d4:	4b19      	ldr	r3, [pc, #100]	; (800813c <HAL_RCC_ClockConfig+0x1bc>)
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	4916      	ldr	r1, [pc, #88]	; (800813c <HAL_RCC_ClockConfig+0x1bc>)
 80080e2:	4313      	orrs	r3, r2
 80080e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f003 0308 	and.w	r3, r3, #8
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d009      	beq.n	8008106 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80080f2:	4b12      	ldr	r3, [pc, #72]	; (800813c <HAL_RCC_ClockConfig+0x1bc>)
 80080f4:	689b      	ldr	r3, [r3, #8]
 80080f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	691b      	ldr	r3, [r3, #16]
 80080fe:	00db      	lsls	r3, r3, #3
 8008100:	490e      	ldr	r1, [pc, #56]	; (800813c <HAL_RCC_ClockConfig+0x1bc>)
 8008102:	4313      	orrs	r3, r2
 8008104:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008106:	f000 f821 	bl	800814c <HAL_RCC_GetSysClockFreq>
 800810a:	4602      	mov	r2, r0
 800810c:	4b0b      	ldr	r3, [pc, #44]	; (800813c <HAL_RCC_ClockConfig+0x1bc>)
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	091b      	lsrs	r3, r3, #4
 8008112:	f003 030f 	and.w	r3, r3, #15
 8008116:	490a      	ldr	r1, [pc, #40]	; (8008140 <HAL_RCC_ClockConfig+0x1c0>)
 8008118:	5ccb      	ldrb	r3, [r1, r3]
 800811a:	fa22 f303 	lsr.w	r3, r2, r3
 800811e:	4a09      	ldr	r2, [pc, #36]	; (8008144 <HAL_RCC_ClockConfig+0x1c4>)
 8008120:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008122:	4b09      	ldr	r3, [pc, #36]	; (8008148 <HAL_RCC_ClockConfig+0x1c8>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4618      	mov	r0, r3
 8008128:	f7fd fbb8 	bl	800589c <HAL_InitTick>

  return HAL_OK;
 800812c:	2300      	movs	r3, #0
}
 800812e:	4618      	mov	r0, r3
 8008130:	3710      	adds	r7, #16
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	40023c00 	.word	0x40023c00
 800813c:	40023800 	.word	0x40023800
 8008140:	0801d55c 	.word	0x0801d55c
 8008144:	20000054 	.word	0x20000054
 8008148:	20000058 	.word	0x20000058

0800814c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800814c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008150:	b094      	sub	sp, #80	; 0x50
 8008152:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008154:	2300      	movs	r3, #0
 8008156:	647b      	str	r3, [r7, #68]	; 0x44
 8008158:	2300      	movs	r3, #0
 800815a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800815c:	2300      	movs	r3, #0
 800815e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008160:	2300      	movs	r3, #0
 8008162:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008164:	4b79      	ldr	r3, [pc, #484]	; (800834c <HAL_RCC_GetSysClockFreq+0x200>)
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	f003 030c 	and.w	r3, r3, #12
 800816c:	2b08      	cmp	r3, #8
 800816e:	d00d      	beq.n	800818c <HAL_RCC_GetSysClockFreq+0x40>
 8008170:	2b08      	cmp	r3, #8
 8008172:	f200 80e1 	bhi.w	8008338 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008176:	2b00      	cmp	r3, #0
 8008178:	d002      	beq.n	8008180 <HAL_RCC_GetSysClockFreq+0x34>
 800817a:	2b04      	cmp	r3, #4
 800817c:	d003      	beq.n	8008186 <HAL_RCC_GetSysClockFreq+0x3a>
 800817e:	e0db      	b.n	8008338 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008180:	4b73      	ldr	r3, [pc, #460]	; (8008350 <HAL_RCC_GetSysClockFreq+0x204>)
 8008182:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008184:	e0db      	b.n	800833e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008186:	4b73      	ldr	r3, [pc, #460]	; (8008354 <HAL_RCC_GetSysClockFreq+0x208>)
 8008188:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800818a:	e0d8      	b.n	800833e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800818c:	4b6f      	ldr	r3, [pc, #444]	; (800834c <HAL_RCC_GetSysClockFreq+0x200>)
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008194:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008196:	4b6d      	ldr	r3, [pc, #436]	; (800834c <HAL_RCC_GetSysClockFreq+0x200>)
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d063      	beq.n	800826a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80081a2:	4b6a      	ldr	r3, [pc, #424]	; (800834c <HAL_RCC_GetSysClockFreq+0x200>)
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	099b      	lsrs	r3, r3, #6
 80081a8:	2200      	movs	r2, #0
 80081aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80081ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80081ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081b4:	633b      	str	r3, [r7, #48]	; 0x30
 80081b6:	2300      	movs	r3, #0
 80081b8:	637b      	str	r3, [r7, #52]	; 0x34
 80081ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80081be:	4622      	mov	r2, r4
 80081c0:	462b      	mov	r3, r5
 80081c2:	f04f 0000 	mov.w	r0, #0
 80081c6:	f04f 0100 	mov.w	r1, #0
 80081ca:	0159      	lsls	r1, r3, #5
 80081cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80081d0:	0150      	lsls	r0, r2, #5
 80081d2:	4602      	mov	r2, r0
 80081d4:	460b      	mov	r3, r1
 80081d6:	4621      	mov	r1, r4
 80081d8:	1a51      	subs	r1, r2, r1
 80081da:	6139      	str	r1, [r7, #16]
 80081dc:	4629      	mov	r1, r5
 80081de:	eb63 0301 	sbc.w	r3, r3, r1
 80081e2:	617b      	str	r3, [r7, #20]
 80081e4:	f04f 0200 	mov.w	r2, #0
 80081e8:	f04f 0300 	mov.w	r3, #0
 80081ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80081f0:	4659      	mov	r1, fp
 80081f2:	018b      	lsls	r3, r1, #6
 80081f4:	4651      	mov	r1, sl
 80081f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80081fa:	4651      	mov	r1, sl
 80081fc:	018a      	lsls	r2, r1, #6
 80081fe:	4651      	mov	r1, sl
 8008200:	ebb2 0801 	subs.w	r8, r2, r1
 8008204:	4659      	mov	r1, fp
 8008206:	eb63 0901 	sbc.w	r9, r3, r1
 800820a:	f04f 0200 	mov.w	r2, #0
 800820e:	f04f 0300 	mov.w	r3, #0
 8008212:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008216:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800821a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800821e:	4690      	mov	r8, r2
 8008220:	4699      	mov	r9, r3
 8008222:	4623      	mov	r3, r4
 8008224:	eb18 0303 	adds.w	r3, r8, r3
 8008228:	60bb      	str	r3, [r7, #8]
 800822a:	462b      	mov	r3, r5
 800822c:	eb49 0303 	adc.w	r3, r9, r3
 8008230:	60fb      	str	r3, [r7, #12]
 8008232:	f04f 0200 	mov.w	r2, #0
 8008236:	f04f 0300 	mov.w	r3, #0
 800823a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800823e:	4629      	mov	r1, r5
 8008240:	024b      	lsls	r3, r1, #9
 8008242:	4621      	mov	r1, r4
 8008244:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008248:	4621      	mov	r1, r4
 800824a:	024a      	lsls	r2, r1, #9
 800824c:	4610      	mov	r0, r2
 800824e:	4619      	mov	r1, r3
 8008250:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008252:	2200      	movs	r2, #0
 8008254:	62bb      	str	r3, [r7, #40]	; 0x28
 8008256:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008258:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800825c:	f7f8 fd14 	bl	8000c88 <__aeabi_uldivmod>
 8008260:	4602      	mov	r2, r0
 8008262:	460b      	mov	r3, r1
 8008264:	4613      	mov	r3, r2
 8008266:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008268:	e058      	b.n	800831c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800826a:	4b38      	ldr	r3, [pc, #224]	; (800834c <HAL_RCC_GetSysClockFreq+0x200>)
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	099b      	lsrs	r3, r3, #6
 8008270:	2200      	movs	r2, #0
 8008272:	4618      	mov	r0, r3
 8008274:	4611      	mov	r1, r2
 8008276:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800827a:	623b      	str	r3, [r7, #32]
 800827c:	2300      	movs	r3, #0
 800827e:	627b      	str	r3, [r7, #36]	; 0x24
 8008280:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008284:	4642      	mov	r2, r8
 8008286:	464b      	mov	r3, r9
 8008288:	f04f 0000 	mov.w	r0, #0
 800828c:	f04f 0100 	mov.w	r1, #0
 8008290:	0159      	lsls	r1, r3, #5
 8008292:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008296:	0150      	lsls	r0, r2, #5
 8008298:	4602      	mov	r2, r0
 800829a:	460b      	mov	r3, r1
 800829c:	4641      	mov	r1, r8
 800829e:	ebb2 0a01 	subs.w	sl, r2, r1
 80082a2:	4649      	mov	r1, r9
 80082a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80082a8:	f04f 0200 	mov.w	r2, #0
 80082ac:	f04f 0300 	mov.w	r3, #0
 80082b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80082b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80082b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80082bc:	ebb2 040a 	subs.w	r4, r2, sl
 80082c0:	eb63 050b 	sbc.w	r5, r3, fp
 80082c4:	f04f 0200 	mov.w	r2, #0
 80082c8:	f04f 0300 	mov.w	r3, #0
 80082cc:	00eb      	lsls	r3, r5, #3
 80082ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80082d2:	00e2      	lsls	r2, r4, #3
 80082d4:	4614      	mov	r4, r2
 80082d6:	461d      	mov	r5, r3
 80082d8:	4643      	mov	r3, r8
 80082da:	18e3      	adds	r3, r4, r3
 80082dc:	603b      	str	r3, [r7, #0]
 80082de:	464b      	mov	r3, r9
 80082e0:	eb45 0303 	adc.w	r3, r5, r3
 80082e4:	607b      	str	r3, [r7, #4]
 80082e6:	f04f 0200 	mov.w	r2, #0
 80082ea:	f04f 0300 	mov.w	r3, #0
 80082ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80082f2:	4629      	mov	r1, r5
 80082f4:	028b      	lsls	r3, r1, #10
 80082f6:	4621      	mov	r1, r4
 80082f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80082fc:	4621      	mov	r1, r4
 80082fe:	028a      	lsls	r2, r1, #10
 8008300:	4610      	mov	r0, r2
 8008302:	4619      	mov	r1, r3
 8008304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008306:	2200      	movs	r2, #0
 8008308:	61bb      	str	r3, [r7, #24]
 800830a:	61fa      	str	r2, [r7, #28]
 800830c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008310:	f7f8 fcba 	bl	8000c88 <__aeabi_uldivmod>
 8008314:	4602      	mov	r2, r0
 8008316:	460b      	mov	r3, r1
 8008318:	4613      	mov	r3, r2
 800831a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800831c:	4b0b      	ldr	r3, [pc, #44]	; (800834c <HAL_RCC_GetSysClockFreq+0x200>)
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	0c1b      	lsrs	r3, r3, #16
 8008322:	f003 0303 	and.w	r3, r3, #3
 8008326:	3301      	adds	r3, #1
 8008328:	005b      	lsls	r3, r3, #1
 800832a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800832c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800832e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008330:	fbb2 f3f3 	udiv	r3, r2, r3
 8008334:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008336:	e002      	b.n	800833e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008338:	4b05      	ldr	r3, [pc, #20]	; (8008350 <HAL_RCC_GetSysClockFreq+0x204>)
 800833a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800833c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800833e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008340:	4618      	mov	r0, r3
 8008342:	3750      	adds	r7, #80	; 0x50
 8008344:	46bd      	mov	sp, r7
 8008346:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800834a:	bf00      	nop
 800834c:	40023800 	.word	0x40023800
 8008350:	00f42400 	.word	0x00f42400
 8008354:	007a1200 	.word	0x007a1200

08008358 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008358:	b480      	push	{r7}
 800835a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800835c:	4b03      	ldr	r3, [pc, #12]	; (800836c <HAL_RCC_GetHCLKFreq+0x14>)
 800835e:	681b      	ldr	r3, [r3, #0]
}
 8008360:	4618      	mov	r0, r3
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr
 800836a:	bf00      	nop
 800836c:	20000054 	.word	0x20000054

08008370 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008374:	f7ff fff0 	bl	8008358 <HAL_RCC_GetHCLKFreq>
 8008378:	4602      	mov	r2, r0
 800837a:	4b05      	ldr	r3, [pc, #20]	; (8008390 <HAL_RCC_GetPCLK1Freq+0x20>)
 800837c:	689b      	ldr	r3, [r3, #8]
 800837e:	0a9b      	lsrs	r3, r3, #10
 8008380:	f003 0307 	and.w	r3, r3, #7
 8008384:	4903      	ldr	r1, [pc, #12]	; (8008394 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008386:	5ccb      	ldrb	r3, [r1, r3]
 8008388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800838c:	4618      	mov	r0, r3
 800838e:	bd80      	pop	{r7, pc}
 8008390:	40023800 	.word	0x40023800
 8008394:	0801d56c 	.word	0x0801d56c

08008398 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800839c:	f7ff ffdc 	bl	8008358 <HAL_RCC_GetHCLKFreq>
 80083a0:	4602      	mov	r2, r0
 80083a2:	4b05      	ldr	r3, [pc, #20]	; (80083b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	0b5b      	lsrs	r3, r3, #13
 80083a8:	f003 0307 	and.w	r3, r3, #7
 80083ac:	4903      	ldr	r1, [pc, #12]	; (80083bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80083ae:	5ccb      	ldrb	r3, [r1, r3]
 80083b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	bd80      	pop	{r7, pc}
 80083b8:	40023800 	.word	0x40023800
 80083bc:	0801d56c 	.word	0x0801d56c

080083c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d101      	bne.n	80083d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80083ce:	2301      	movs	r3, #1
 80083d0:	e07b      	b.n	80084ca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d108      	bne.n	80083ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80083e2:	d009      	beq.n	80083f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	61da      	str	r2, [r3, #28]
 80083ea:	e005      	b.n	80083f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2200      	movs	r2, #0
 80083f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2200      	movs	r2, #0
 80083f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008404:	b2db      	uxtb	r3, r3
 8008406:	2b00      	cmp	r3, #0
 8008408:	d106      	bne.n	8008418 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f7fc fbf2 	bl	8004bfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2202      	movs	r2, #2
 800841c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800842e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008440:	431a      	orrs	r2, r3
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800844a:	431a      	orrs	r2, r3
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	691b      	ldr	r3, [r3, #16]
 8008450:	f003 0302 	and.w	r3, r3, #2
 8008454:	431a      	orrs	r2, r3
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	695b      	ldr	r3, [r3, #20]
 800845a:	f003 0301 	and.w	r3, r3, #1
 800845e:	431a      	orrs	r2, r3
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	699b      	ldr	r3, [r3, #24]
 8008464:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008468:	431a      	orrs	r2, r3
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	69db      	ldr	r3, [r3, #28]
 800846e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008472:	431a      	orrs	r2, r3
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6a1b      	ldr	r3, [r3, #32]
 8008478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800847c:	ea42 0103 	orr.w	r1, r2, r3
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008484:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	430a      	orrs	r2, r1
 800848e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	699b      	ldr	r3, [r3, #24]
 8008494:	0c1b      	lsrs	r3, r3, #16
 8008496:	f003 0104 	and.w	r1, r3, #4
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849e:	f003 0210 	and.w	r2, r3, #16
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	430a      	orrs	r2, r1
 80084a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	69da      	ldr	r2, [r3, #28]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80084b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2201      	movs	r2, #1
 80084c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80084c8:	2300      	movs	r3, #0
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3708      	adds	r7, #8
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}

080084d2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084d2:	b580      	push	{r7, lr}
 80084d4:	b088      	sub	sp, #32
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	60f8      	str	r0, [r7, #12]
 80084da:	60b9      	str	r1, [r7, #8]
 80084dc:	603b      	str	r3, [r7, #0]
 80084de:	4613      	mov	r3, r2
 80084e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80084e2:	2300      	movs	r3, #0
 80084e4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d101      	bne.n	80084f4 <HAL_SPI_Transmit+0x22>
 80084f0:	2302      	movs	r3, #2
 80084f2:	e126      	b.n	8008742 <HAL_SPI_Transmit+0x270>
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2201      	movs	r2, #1
 80084f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80084fc:	f7fd fa12 	bl	8005924 <HAL_GetTick>
 8008500:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008502:	88fb      	ldrh	r3, [r7, #6]
 8008504:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800850c:	b2db      	uxtb	r3, r3
 800850e:	2b01      	cmp	r3, #1
 8008510:	d002      	beq.n	8008518 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008512:	2302      	movs	r3, #2
 8008514:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008516:	e10b      	b.n	8008730 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d002      	beq.n	8008524 <HAL_SPI_Transmit+0x52>
 800851e:	88fb      	ldrh	r3, [r7, #6]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d102      	bne.n	800852a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008524:	2301      	movs	r3, #1
 8008526:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008528:	e102      	b.n	8008730 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2203      	movs	r2, #3
 800852e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2200      	movs	r2, #0
 8008536:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	68ba      	ldr	r2, [r7, #8]
 800853c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	88fa      	ldrh	r2, [r7, #6]
 8008542:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	88fa      	ldrh	r2, [r7, #6]
 8008548:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2200      	movs	r2, #0
 800854e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2200      	movs	r2, #0
 8008554:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2200      	movs	r2, #0
 800855a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2200      	movs	r2, #0
 8008560:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2200      	movs	r2, #0
 8008566:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008570:	d10f      	bne.n	8008592 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008580:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008590:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800859c:	2b40      	cmp	r3, #64	; 0x40
 800859e:	d007      	beq.n	80085b0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	68db      	ldr	r3, [r3, #12]
 80085b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085b8:	d14b      	bne.n	8008652 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d002      	beq.n	80085c8 <HAL_SPI_Transmit+0xf6>
 80085c2:	8afb      	ldrh	r3, [r7, #22]
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d13e      	bne.n	8008646 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085cc:	881a      	ldrh	r2, [r3, #0]
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085d8:	1c9a      	adds	r2, r3, #2
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	3b01      	subs	r3, #1
 80085e6:	b29a      	uxth	r2, r3
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80085ec:	e02b      	b.n	8008646 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	f003 0302 	and.w	r3, r3, #2
 80085f8:	2b02      	cmp	r3, #2
 80085fa:	d112      	bne.n	8008622 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008600:	881a      	ldrh	r2, [r3, #0]
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800860c:	1c9a      	adds	r2, r3, #2
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008616:	b29b      	uxth	r3, r3
 8008618:	3b01      	subs	r3, #1
 800861a:	b29a      	uxth	r2, r3
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	86da      	strh	r2, [r3, #54]	; 0x36
 8008620:	e011      	b.n	8008646 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008622:	f7fd f97f 	bl	8005924 <HAL_GetTick>
 8008626:	4602      	mov	r2, r0
 8008628:	69bb      	ldr	r3, [r7, #24]
 800862a:	1ad3      	subs	r3, r2, r3
 800862c:	683a      	ldr	r2, [r7, #0]
 800862e:	429a      	cmp	r2, r3
 8008630:	d803      	bhi.n	800863a <HAL_SPI_Transmit+0x168>
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008638:	d102      	bne.n	8008640 <HAL_SPI_Transmit+0x16e>
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d102      	bne.n	8008646 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008640:	2303      	movs	r3, #3
 8008642:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008644:	e074      	b.n	8008730 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800864a:	b29b      	uxth	r3, r3
 800864c:	2b00      	cmp	r3, #0
 800864e:	d1ce      	bne.n	80085ee <HAL_SPI_Transmit+0x11c>
 8008650:	e04c      	b.n	80086ec <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d002      	beq.n	8008660 <HAL_SPI_Transmit+0x18e>
 800865a:	8afb      	ldrh	r3, [r7, #22]
 800865c:	2b01      	cmp	r3, #1
 800865e:	d140      	bne.n	80086e2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	330c      	adds	r3, #12
 800866a:	7812      	ldrb	r2, [r2, #0]
 800866c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008672:	1c5a      	adds	r2, r3, #1
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800867c:	b29b      	uxth	r3, r3
 800867e:	3b01      	subs	r3, #1
 8008680:	b29a      	uxth	r2, r3
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008686:	e02c      	b.n	80086e2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	f003 0302 	and.w	r3, r3, #2
 8008692:	2b02      	cmp	r3, #2
 8008694:	d113      	bne.n	80086be <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	330c      	adds	r3, #12
 80086a0:	7812      	ldrb	r2, [r2, #0]
 80086a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086a8:	1c5a      	adds	r2, r3, #1
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	3b01      	subs	r3, #1
 80086b6:	b29a      	uxth	r2, r3
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	86da      	strh	r2, [r3, #54]	; 0x36
 80086bc:	e011      	b.n	80086e2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80086be:	f7fd f931 	bl	8005924 <HAL_GetTick>
 80086c2:	4602      	mov	r2, r0
 80086c4:	69bb      	ldr	r3, [r7, #24]
 80086c6:	1ad3      	subs	r3, r2, r3
 80086c8:	683a      	ldr	r2, [r7, #0]
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d803      	bhi.n	80086d6 <HAL_SPI_Transmit+0x204>
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086d4:	d102      	bne.n	80086dc <HAL_SPI_Transmit+0x20a>
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d102      	bne.n	80086e2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80086dc:	2303      	movs	r3, #3
 80086de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80086e0:	e026      	b.n	8008730 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d1cd      	bne.n	8008688 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80086ec:	69ba      	ldr	r2, [r7, #24]
 80086ee:	6839      	ldr	r1, [r7, #0]
 80086f0:	68f8      	ldr	r0, [r7, #12]
 80086f2:	f000 fbcb 	bl	8008e8c <SPI_EndRxTxTransaction>
 80086f6:	4603      	mov	r3, r0
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d002      	beq.n	8008702 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2220      	movs	r2, #32
 8008700:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d10a      	bne.n	8008720 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800870a:	2300      	movs	r3, #0
 800870c:	613b      	str	r3, [r7, #16]
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	613b      	str	r3, [r7, #16]
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	613b      	str	r3, [r7, #16]
 800871e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008724:	2b00      	cmp	r3, #0
 8008726:	d002      	beq.n	800872e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008728:	2301      	movs	r3, #1
 800872a:	77fb      	strb	r3, [r7, #31]
 800872c:	e000      	b.n	8008730 <HAL_SPI_Transmit+0x25e>
  }

error:
 800872e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2201      	movs	r2, #1
 8008734:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2200      	movs	r2, #0
 800873c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008740:	7ffb      	ldrb	r3, [r7, #31]
}
 8008742:	4618      	mov	r0, r3
 8008744:	3720      	adds	r7, #32
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800874a:	b580      	push	{r7, lr}
 800874c:	b088      	sub	sp, #32
 800874e:	af02      	add	r7, sp, #8
 8008750:	60f8      	str	r0, [r7, #12]
 8008752:	60b9      	str	r1, [r7, #8]
 8008754:	603b      	str	r3, [r7, #0]
 8008756:	4613      	mov	r3, r2
 8008758:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800875a:	2300      	movs	r3, #0
 800875c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008766:	d112      	bne.n	800878e <HAL_SPI_Receive+0x44>
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	689b      	ldr	r3, [r3, #8]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d10e      	bne.n	800878e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2204      	movs	r2, #4
 8008774:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008778:	88fa      	ldrh	r2, [r7, #6]
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	9300      	str	r3, [sp, #0]
 800877e:	4613      	mov	r3, r2
 8008780:	68ba      	ldr	r2, [r7, #8]
 8008782:	68b9      	ldr	r1, [r7, #8]
 8008784:	68f8      	ldr	r0, [r7, #12]
 8008786:	f000 f8f1 	bl	800896c <HAL_SPI_TransmitReceive>
 800878a:	4603      	mov	r3, r0
 800878c:	e0ea      	b.n	8008964 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008794:	2b01      	cmp	r3, #1
 8008796:	d101      	bne.n	800879c <HAL_SPI_Receive+0x52>
 8008798:	2302      	movs	r3, #2
 800879a:	e0e3      	b.n	8008964 <HAL_SPI_Receive+0x21a>
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80087a4:	f7fd f8be 	bl	8005924 <HAL_GetTick>
 80087a8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	d002      	beq.n	80087bc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80087b6:	2302      	movs	r3, #2
 80087b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80087ba:	e0ca      	b.n	8008952 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d002      	beq.n	80087c8 <HAL_SPI_Receive+0x7e>
 80087c2:	88fb      	ldrh	r3, [r7, #6]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d102      	bne.n	80087ce <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80087c8:	2301      	movs	r3, #1
 80087ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80087cc:	e0c1      	b.n	8008952 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2204      	movs	r2, #4
 80087d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2200      	movs	r2, #0
 80087da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	68ba      	ldr	r2, [r7, #8]
 80087e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	88fa      	ldrh	r2, [r7, #6]
 80087e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	88fa      	ldrh	r2, [r7, #6]
 80087ec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2200      	movs	r2, #0
 80087f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2200      	movs	r2, #0
 80087f8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2200      	movs	r2, #0
 80087fe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2200      	movs	r2, #0
 8008804:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2200      	movs	r2, #0
 800880a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	689b      	ldr	r3, [r3, #8]
 8008810:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008814:	d10f      	bne.n	8008836 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008824:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008834:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008840:	2b40      	cmp	r3, #64	; 0x40
 8008842:	d007      	beq.n	8008854 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008852:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d162      	bne.n	8008922 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800885c:	e02e      	b.n	80088bc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	f003 0301 	and.w	r3, r3, #1
 8008868:	2b01      	cmp	r3, #1
 800886a:	d115      	bne.n	8008898 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f103 020c 	add.w	r2, r3, #12
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008878:	7812      	ldrb	r2, [r2, #0]
 800887a:	b2d2      	uxtb	r2, r2
 800887c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008882:	1c5a      	adds	r2, r3, #1
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800888c:	b29b      	uxth	r3, r3
 800888e:	3b01      	subs	r3, #1
 8008890:	b29a      	uxth	r2, r3
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008896:	e011      	b.n	80088bc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008898:	f7fd f844 	bl	8005924 <HAL_GetTick>
 800889c:	4602      	mov	r2, r0
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	1ad3      	subs	r3, r2, r3
 80088a2:	683a      	ldr	r2, [r7, #0]
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d803      	bhi.n	80088b0 <HAL_SPI_Receive+0x166>
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ae:	d102      	bne.n	80088b6 <HAL_SPI_Receive+0x16c>
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d102      	bne.n	80088bc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80088b6:	2303      	movs	r3, #3
 80088b8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80088ba:	e04a      	b.n	8008952 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d1cb      	bne.n	800885e <HAL_SPI_Receive+0x114>
 80088c6:	e031      	b.n	800892c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	689b      	ldr	r3, [r3, #8]
 80088ce:	f003 0301 	and.w	r3, r3, #1
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	d113      	bne.n	80088fe <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	68da      	ldr	r2, [r3, #12]
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e0:	b292      	uxth	r2, r2
 80088e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e8:	1c9a      	adds	r2, r3, #2
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	3b01      	subs	r3, #1
 80088f6:	b29a      	uxth	r2, r3
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80088fc:	e011      	b.n	8008922 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088fe:	f7fd f811 	bl	8005924 <HAL_GetTick>
 8008902:	4602      	mov	r2, r0
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	1ad3      	subs	r3, r2, r3
 8008908:	683a      	ldr	r2, [r7, #0]
 800890a:	429a      	cmp	r2, r3
 800890c:	d803      	bhi.n	8008916 <HAL_SPI_Receive+0x1cc>
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008914:	d102      	bne.n	800891c <HAL_SPI_Receive+0x1d2>
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d102      	bne.n	8008922 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800891c:	2303      	movs	r3, #3
 800891e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008920:	e017      	b.n	8008952 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008926:	b29b      	uxth	r3, r3
 8008928:	2b00      	cmp	r3, #0
 800892a:	d1cd      	bne.n	80088c8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800892c:	693a      	ldr	r2, [r7, #16]
 800892e:	6839      	ldr	r1, [r7, #0]
 8008930:	68f8      	ldr	r0, [r7, #12]
 8008932:	f000 fa45 	bl	8008dc0 <SPI_EndRxTransaction>
 8008936:	4603      	mov	r3, r0
 8008938:	2b00      	cmp	r3, #0
 800893a:	d002      	beq.n	8008942 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2220      	movs	r2, #32
 8008940:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008946:	2b00      	cmp	r3, #0
 8008948:	d002      	beq.n	8008950 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800894a:	2301      	movs	r3, #1
 800894c:	75fb      	strb	r3, [r7, #23]
 800894e:	e000      	b.n	8008952 <HAL_SPI_Receive+0x208>
  }

error :
 8008950:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2201      	movs	r2, #1
 8008956:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2200      	movs	r2, #0
 800895e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008962:	7dfb      	ldrb	r3, [r7, #23]
}
 8008964:	4618      	mov	r0, r3
 8008966:	3718      	adds	r7, #24
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b08c      	sub	sp, #48	; 0x30
 8008970:	af00      	add	r7, sp, #0
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	607a      	str	r2, [r7, #4]
 8008978:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800897a:	2301      	movs	r3, #1
 800897c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800897e:	2300      	movs	r3, #0
 8008980:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800898a:	2b01      	cmp	r3, #1
 800898c:	d101      	bne.n	8008992 <HAL_SPI_TransmitReceive+0x26>
 800898e:	2302      	movs	r3, #2
 8008990:	e18a      	b.n	8008ca8 <HAL_SPI_TransmitReceive+0x33c>
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2201      	movs	r2, #1
 8008996:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800899a:	f7fc ffc3 	bl	8005924 <HAL_GetTick>
 800899e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80089a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80089b0:	887b      	ldrh	r3, [r7, #2]
 80089b2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80089b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d00f      	beq.n	80089dc <HAL_SPI_TransmitReceive+0x70>
 80089bc:	69fb      	ldr	r3, [r7, #28]
 80089be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089c2:	d107      	bne.n	80089d4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d103      	bne.n	80089d4 <HAL_SPI_TransmitReceive+0x68>
 80089cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80089d0:	2b04      	cmp	r3, #4
 80089d2:	d003      	beq.n	80089dc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80089d4:	2302      	movs	r3, #2
 80089d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80089da:	e15b      	b.n	8008c94 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d005      	beq.n	80089ee <HAL_SPI_TransmitReceive+0x82>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d002      	beq.n	80089ee <HAL_SPI_TransmitReceive+0x82>
 80089e8:	887b      	ldrh	r3, [r7, #2]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d103      	bne.n	80089f6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80089f4:	e14e      	b.n	8008c94 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	2b04      	cmp	r3, #4
 8008a00:	d003      	beq.n	8008a0a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2205      	movs	r2, #5
 8008a06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	887a      	ldrh	r2, [r7, #2]
 8008a1a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	887a      	ldrh	r2, [r7, #2]
 8008a20:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	68ba      	ldr	r2, [r7, #8]
 8008a26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	887a      	ldrh	r2, [r7, #2]
 8008a2c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	887a      	ldrh	r2, [r7, #2]
 8008a32:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2200      	movs	r2, #0
 8008a38:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a4a:	2b40      	cmp	r3, #64	; 0x40
 8008a4c:	d007      	beq.n	8008a5e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a5c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	68db      	ldr	r3, [r3, #12]
 8008a62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a66:	d178      	bne.n	8008b5a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d002      	beq.n	8008a76 <HAL_SPI_TransmitReceive+0x10a>
 8008a70:	8b7b      	ldrh	r3, [r7, #26]
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	d166      	bne.n	8008b44 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a7a:	881a      	ldrh	r2, [r3, #0]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a86:	1c9a      	adds	r2, r3, #2
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	3b01      	subs	r3, #1
 8008a94:	b29a      	uxth	r2, r3
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a9a:	e053      	b.n	8008b44 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	f003 0302 	and.w	r3, r3, #2
 8008aa6:	2b02      	cmp	r3, #2
 8008aa8:	d11b      	bne.n	8008ae2 <HAL_SPI_TransmitReceive+0x176>
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d016      	beq.n	8008ae2 <HAL_SPI_TransmitReceive+0x176>
 8008ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	d113      	bne.n	8008ae2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008abe:	881a      	ldrh	r2, [r3, #0]
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aca:	1c9a      	adds	r2, r3, #2
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	3b01      	subs	r3, #1
 8008ad8:	b29a      	uxth	r2, r3
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	f003 0301 	and.w	r3, r3, #1
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d119      	bne.n	8008b24 <HAL_SPI_TransmitReceive+0x1b8>
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d014      	beq.n	8008b24 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	68da      	ldr	r2, [r3, #12]
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b04:	b292      	uxth	r2, r2
 8008b06:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b0c:	1c9a      	adds	r2, r3, #2
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	3b01      	subs	r3, #1
 8008b1a:	b29a      	uxth	r2, r3
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008b20:	2301      	movs	r3, #1
 8008b22:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008b24:	f7fc fefe 	bl	8005924 <HAL_GetTick>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2c:	1ad3      	subs	r3, r2, r3
 8008b2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d807      	bhi.n	8008b44 <HAL_SPI_TransmitReceive+0x1d8>
 8008b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b3a:	d003      	beq.n	8008b44 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008b3c:	2303      	movs	r3, #3
 8008b3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008b42:	e0a7      	b.n	8008c94 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d1a6      	bne.n	8008a9c <HAL_SPI_TransmitReceive+0x130>
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d1a1      	bne.n	8008a9c <HAL_SPI_TransmitReceive+0x130>
 8008b58:	e07c      	b.n	8008c54 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d002      	beq.n	8008b68 <HAL_SPI_TransmitReceive+0x1fc>
 8008b62:	8b7b      	ldrh	r3, [r7, #26]
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d16b      	bne.n	8008c40 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	330c      	adds	r3, #12
 8008b72:	7812      	ldrb	r2, [r2, #0]
 8008b74:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b7a:	1c5a      	adds	r2, r3, #1
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	3b01      	subs	r3, #1
 8008b88:	b29a      	uxth	r2, r3
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b8e:	e057      	b.n	8008c40 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	f003 0302 	and.w	r3, r3, #2
 8008b9a:	2b02      	cmp	r3, #2
 8008b9c:	d11c      	bne.n	8008bd8 <HAL_SPI_TransmitReceive+0x26c>
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d017      	beq.n	8008bd8 <HAL_SPI_TransmitReceive+0x26c>
 8008ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d114      	bne.n	8008bd8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	330c      	adds	r3, #12
 8008bb8:	7812      	ldrb	r2, [r2, #0]
 8008bba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bc0:	1c5a      	adds	r2, r3, #1
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	3b01      	subs	r3, #1
 8008bce:	b29a      	uxth	r2, r3
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	689b      	ldr	r3, [r3, #8]
 8008bde:	f003 0301 	and.w	r3, r3, #1
 8008be2:	2b01      	cmp	r3, #1
 8008be4:	d119      	bne.n	8008c1a <HAL_SPI_TransmitReceive+0x2ae>
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d014      	beq.n	8008c1a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	68da      	ldr	r2, [r3, #12]
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bfa:	b2d2      	uxtb	r2, r2
 8008bfc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c02:	1c5a      	adds	r2, r3, #1
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c0c:	b29b      	uxth	r3, r3
 8008c0e:	3b01      	subs	r3, #1
 8008c10:	b29a      	uxth	r2, r3
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008c16:	2301      	movs	r3, #1
 8008c18:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008c1a:	f7fc fe83 	bl	8005924 <HAL_GetTick>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c22:	1ad3      	subs	r3, r2, r3
 8008c24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d803      	bhi.n	8008c32 <HAL_SPI_TransmitReceive+0x2c6>
 8008c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c30:	d102      	bne.n	8008c38 <HAL_SPI_TransmitReceive+0x2cc>
 8008c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d103      	bne.n	8008c40 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008c38:	2303      	movs	r3, #3
 8008c3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008c3e:	e029      	b.n	8008c94 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d1a2      	bne.n	8008b90 <HAL_SPI_TransmitReceive+0x224>
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d19d      	bne.n	8008b90 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008c58:	68f8      	ldr	r0, [r7, #12]
 8008c5a:	f000 f917 	bl	8008e8c <SPI_EndRxTxTransaction>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d006      	beq.n	8008c72 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008c64:	2301      	movs	r3, #1
 8008c66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2220      	movs	r2, #32
 8008c6e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008c70:	e010      	b.n	8008c94 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d10b      	bne.n	8008c92 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	617b      	str	r3, [r7, #20]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	68db      	ldr	r3, [r3, #12]
 8008c84:	617b      	str	r3, [r7, #20]
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	617b      	str	r3, [r7, #20]
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	e000      	b.n	8008c94 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008c92:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2201      	movs	r2, #1
 8008c98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008ca4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3730      	adds	r7, #48	; 0x30
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b088      	sub	sp, #32
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	60f8      	str	r0, [r7, #12]
 8008cb8:	60b9      	str	r1, [r7, #8]
 8008cba:	603b      	str	r3, [r7, #0]
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008cc0:	f7fc fe30 	bl	8005924 <HAL_GetTick>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc8:	1a9b      	subs	r3, r3, r2
 8008cca:	683a      	ldr	r2, [r7, #0]
 8008ccc:	4413      	add	r3, r2
 8008cce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008cd0:	f7fc fe28 	bl	8005924 <HAL_GetTick>
 8008cd4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008cd6:	4b39      	ldr	r3, [pc, #228]	; (8008dbc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	015b      	lsls	r3, r3, #5
 8008cdc:	0d1b      	lsrs	r3, r3, #20
 8008cde:	69fa      	ldr	r2, [r7, #28]
 8008ce0:	fb02 f303 	mul.w	r3, r2, r3
 8008ce4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008ce6:	e054      	b.n	8008d92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cee:	d050      	beq.n	8008d92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008cf0:	f7fc fe18 	bl	8005924 <HAL_GetTick>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	69bb      	ldr	r3, [r7, #24]
 8008cf8:	1ad3      	subs	r3, r2, r3
 8008cfa:	69fa      	ldr	r2, [r7, #28]
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d902      	bls.n	8008d06 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008d00:	69fb      	ldr	r3, [r7, #28]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d13d      	bne.n	8008d82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	685a      	ldr	r2, [r3, #4]
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008d14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d1e:	d111      	bne.n	8008d44 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d28:	d004      	beq.n	8008d34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d32:	d107      	bne.n	8008d44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	681a      	ldr	r2, [r3, #0]
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d4c:	d10f      	bne.n	8008d6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008d5c:	601a      	str	r2, [r3, #0]
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008d6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	2201      	movs	r2, #1
 8008d72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008d7e:	2303      	movs	r3, #3
 8008d80:	e017      	b.n	8008db2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d101      	bne.n	8008d8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	3b01      	subs	r3, #1
 8008d90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	689a      	ldr	r2, [r3, #8]
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	4013      	ands	r3, r2
 8008d9c:	68ba      	ldr	r2, [r7, #8]
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	bf0c      	ite	eq
 8008da2:	2301      	moveq	r3, #1
 8008da4:	2300      	movne	r3, #0
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	461a      	mov	r2, r3
 8008daa:	79fb      	ldrb	r3, [r7, #7]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d19b      	bne.n	8008ce8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008db0:	2300      	movs	r3, #0
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3720      	adds	r7, #32
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}
 8008dba:	bf00      	nop
 8008dbc:	20000054 	.word	0x20000054

08008dc0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b086      	sub	sp, #24
 8008dc4:	af02      	add	r7, sp, #8
 8008dc6:	60f8      	str	r0, [r7, #12]
 8008dc8:	60b9      	str	r1, [r7, #8]
 8008dca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008dd4:	d111      	bne.n	8008dfa <SPI_EndRxTransaction+0x3a>
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	689b      	ldr	r3, [r3, #8]
 8008dda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dde:	d004      	beq.n	8008dea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008de8:	d107      	bne.n	8008dfa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	681a      	ldr	r2, [r3, #0]
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008df8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e02:	d12a      	bne.n	8008e5a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	689b      	ldr	r3, [r3, #8]
 8008e08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e0c:	d012      	beq.n	8008e34 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	9300      	str	r3, [sp, #0]
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	2200      	movs	r2, #0
 8008e16:	2180      	movs	r1, #128	; 0x80
 8008e18:	68f8      	ldr	r0, [r7, #12]
 8008e1a:	f7ff ff49 	bl	8008cb0 <SPI_WaitFlagStateUntilTimeout>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d02d      	beq.n	8008e80 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e28:	f043 0220 	orr.w	r2, r3, #32
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008e30:	2303      	movs	r3, #3
 8008e32:	e026      	b.n	8008e82 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	9300      	str	r3, [sp, #0]
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	2101      	movs	r1, #1
 8008e3e:	68f8      	ldr	r0, [r7, #12]
 8008e40:	f7ff ff36 	bl	8008cb0 <SPI_WaitFlagStateUntilTimeout>
 8008e44:	4603      	mov	r3, r0
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d01a      	beq.n	8008e80 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e4e:	f043 0220 	orr.w	r2, r3, #32
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008e56:	2303      	movs	r3, #3
 8008e58:	e013      	b.n	8008e82 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	9300      	str	r3, [sp, #0]
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	2200      	movs	r2, #0
 8008e62:	2101      	movs	r1, #1
 8008e64:	68f8      	ldr	r0, [r7, #12]
 8008e66:	f7ff ff23 	bl	8008cb0 <SPI_WaitFlagStateUntilTimeout>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d007      	beq.n	8008e80 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e74:	f043 0220 	orr.w	r2, r3, #32
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008e7c:	2303      	movs	r3, #3
 8008e7e:	e000      	b.n	8008e82 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008e80:	2300      	movs	r3, #0
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3710      	adds	r7, #16
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
	...

08008e8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b088      	sub	sp, #32
 8008e90:	af02      	add	r7, sp, #8
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	60b9      	str	r1, [r7, #8]
 8008e96:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008e98:	4b1b      	ldr	r3, [pc, #108]	; (8008f08 <SPI_EndRxTxTransaction+0x7c>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a1b      	ldr	r2, [pc, #108]	; (8008f0c <SPI_EndRxTxTransaction+0x80>)
 8008e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8008ea2:	0d5b      	lsrs	r3, r3, #21
 8008ea4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008ea8:	fb02 f303 	mul.w	r3, r2, r3
 8008eac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008eb6:	d112      	bne.n	8008ede <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	9300      	str	r3, [sp, #0]
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	2180      	movs	r1, #128	; 0x80
 8008ec2:	68f8      	ldr	r0, [r7, #12]
 8008ec4:	f7ff fef4 	bl	8008cb0 <SPI_WaitFlagStateUntilTimeout>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d016      	beq.n	8008efc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ed2:	f043 0220 	orr.w	r2, r3, #32
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008eda:	2303      	movs	r3, #3
 8008edc:	e00f      	b.n	8008efe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d00a      	beq.n	8008efa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	3b01      	subs	r3, #1
 8008ee8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ef4:	2b80      	cmp	r3, #128	; 0x80
 8008ef6:	d0f2      	beq.n	8008ede <SPI_EndRxTxTransaction+0x52>
 8008ef8:	e000      	b.n	8008efc <SPI_EndRxTxTransaction+0x70>
        break;
 8008efa:	bf00      	nop
  }

  return HAL_OK;
 8008efc:	2300      	movs	r3, #0
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3718      	adds	r7, #24
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
 8008f06:	bf00      	nop
 8008f08:	20000054 	.word	0x20000054
 8008f0c:	165e9f81 	.word	0x165e9f81

08008f10 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b084      	sub	sp, #16
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	60f8      	str	r0, [r7, #12]
 8008f18:	60b9      	str	r1, [r7, #8]
 8008f1a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d101      	bne.n	8008f26 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8008f22:	2301      	movs	r3, #1
 8008f24:	e034      	b.n	8008f90 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d106      	bne.n	8008f40 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2200      	movs	r2, #0
 8008f36:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8008f3a:	68f8      	ldr	r0, [r7, #12]
 8008f3c:	f7fb ffc6 	bl	8004ecc <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681a      	ldr	r2, [r3, #0]
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	3308      	adds	r3, #8
 8008f48:	4619      	mov	r1, r3
 8008f4a:	4610      	mov	r0, r2
 8008f4c:	f000 fbe6 	bl	800971c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	6818      	ldr	r0, [r3, #0]
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	689b      	ldr	r3, [r3, #8]
 8008f58:	461a      	mov	r2, r3
 8008f5a:	68b9      	ldr	r1, [r7, #8]
 8008f5c:	f000 fc30 	bl	80097c0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	6858      	ldr	r0, [r3, #4]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	689a      	ldr	r2, [r3, #8]
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f6c:	6879      	ldr	r1, [r7, #4]
 8008f6e:	f000 fc65 	bl	800983c <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	68fa      	ldr	r2, [r7, #12]
 8008f78:	6892      	ldr	r2, [r2, #8]
 8008f7a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	68fa      	ldr	r2, [r7, #12]
 8008f84:	6892      	ldr	r2, [r2, #8]
 8008f86:	f041 0101 	orr.w	r1, r1, #1
 8008f8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8008f8e:	2300      	movs	r3, #0
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3710      	adds	r7, #16
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b082      	sub	sp, #8
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d101      	bne.n	8008faa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	e03f      	b.n	800902a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d106      	bne.n	8008fc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f7fb fef0 	bl	8004da4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2224      	movs	r2, #36	; 0x24
 8008fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	68da      	ldr	r2, [r3, #12]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008fda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 f929 	bl	8009234 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	691a      	ldr	r2, [r3, #16]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008ff0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	695a      	ldr	r2, [r3, #20]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009000:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	68da      	ldr	r2, [r3, #12]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009010:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2200      	movs	r2, #0
 8009016:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2220      	movs	r2, #32
 800901c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2220      	movs	r2, #32
 8009024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009028:	2300      	movs	r3, #0
}
 800902a:	4618      	mov	r0, r3
 800902c:	3708      	adds	r7, #8
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}

08009032 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009032:	b580      	push	{r7, lr}
 8009034:	b08a      	sub	sp, #40	; 0x28
 8009036:	af02      	add	r7, sp, #8
 8009038:	60f8      	str	r0, [r7, #12]
 800903a:	60b9      	str	r1, [r7, #8]
 800903c:	603b      	str	r3, [r7, #0]
 800903e:	4613      	mov	r3, r2
 8009040:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009042:	2300      	movs	r3, #0
 8009044:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800904c:	b2db      	uxtb	r3, r3
 800904e:	2b20      	cmp	r3, #32
 8009050:	d17c      	bne.n	800914c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d002      	beq.n	800905e <HAL_UART_Transmit+0x2c>
 8009058:	88fb      	ldrh	r3, [r7, #6]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d101      	bne.n	8009062 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800905e:	2301      	movs	r3, #1
 8009060:	e075      	b.n	800914e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009068:	2b01      	cmp	r3, #1
 800906a:	d101      	bne.n	8009070 <HAL_UART_Transmit+0x3e>
 800906c:	2302      	movs	r3, #2
 800906e:	e06e      	b.n	800914e <HAL_UART_Transmit+0x11c>
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2201      	movs	r2, #1
 8009074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2200      	movs	r2, #0
 800907c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2221      	movs	r2, #33	; 0x21
 8009082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009086:	f7fc fc4d 	bl	8005924 <HAL_GetTick>
 800908a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	88fa      	ldrh	r2, [r7, #6]
 8009090:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	88fa      	ldrh	r2, [r7, #6]
 8009096:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090a0:	d108      	bne.n	80090b4 <HAL_UART_Transmit+0x82>
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	691b      	ldr	r3, [r3, #16]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d104      	bne.n	80090b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80090aa:	2300      	movs	r3, #0
 80090ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	61bb      	str	r3, [r7, #24]
 80090b2:	e003      	b.n	80090bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80090b8:	2300      	movs	r3, #0
 80090ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	2200      	movs	r2, #0
 80090c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80090c4:	e02a      	b.n	800911c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	9300      	str	r3, [sp, #0]
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	2200      	movs	r2, #0
 80090ce:	2180      	movs	r1, #128	; 0x80
 80090d0:	68f8      	ldr	r0, [r7, #12]
 80090d2:	f000 f840 	bl	8009156 <UART_WaitOnFlagUntilTimeout>
 80090d6:	4603      	mov	r3, r0
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d001      	beq.n	80090e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80090dc:	2303      	movs	r3, #3
 80090de:	e036      	b.n	800914e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80090e0:	69fb      	ldr	r3, [r7, #28]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d10b      	bne.n	80090fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80090e6:	69bb      	ldr	r3, [r7, #24]
 80090e8:	881b      	ldrh	r3, [r3, #0]
 80090ea:	461a      	mov	r2, r3
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80090f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80090f6:	69bb      	ldr	r3, [r7, #24]
 80090f8:	3302      	adds	r3, #2
 80090fa:	61bb      	str	r3, [r7, #24]
 80090fc:	e007      	b.n	800910e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80090fe:	69fb      	ldr	r3, [r7, #28]
 8009100:	781a      	ldrb	r2, [r3, #0]
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009108:	69fb      	ldr	r3, [r7, #28]
 800910a:	3301      	adds	r3, #1
 800910c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009112:	b29b      	uxth	r3, r3
 8009114:	3b01      	subs	r3, #1
 8009116:	b29a      	uxth	r2, r3
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009120:	b29b      	uxth	r3, r3
 8009122:	2b00      	cmp	r3, #0
 8009124:	d1cf      	bne.n	80090c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	9300      	str	r3, [sp, #0]
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	2200      	movs	r2, #0
 800912e:	2140      	movs	r1, #64	; 0x40
 8009130:	68f8      	ldr	r0, [r7, #12]
 8009132:	f000 f810 	bl	8009156 <UART_WaitOnFlagUntilTimeout>
 8009136:	4603      	mov	r3, r0
 8009138:	2b00      	cmp	r3, #0
 800913a:	d001      	beq.n	8009140 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800913c:	2303      	movs	r3, #3
 800913e:	e006      	b.n	800914e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2220      	movs	r2, #32
 8009144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009148:	2300      	movs	r3, #0
 800914a:	e000      	b.n	800914e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800914c:	2302      	movs	r3, #2
  }
}
 800914e:	4618      	mov	r0, r3
 8009150:	3720      	adds	r7, #32
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}

08009156 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009156:	b580      	push	{r7, lr}
 8009158:	b090      	sub	sp, #64	; 0x40
 800915a:	af00      	add	r7, sp, #0
 800915c:	60f8      	str	r0, [r7, #12]
 800915e:	60b9      	str	r1, [r7, #8]
 8009160:	603b      	str	r3, [r7, #0]
 8009162:	4613      	mov	r3, r2
 8009164:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009166:	e050      	b.n	800920a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009168:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800916a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800916e:	d04c      	beq.n	800920a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009170:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009172:	2b00      	cmp	r3, #0
 8009174:	d007      	beq.n	8009186 <UART_WaitOnFlagUntilTimeout+0x30>
 8009176:	f7fc fbd5 	bl	8005924 <HAL_GetTick>
 800917a:	4602      	mov	r2, r0
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	1ad3      	subs	r3, r2, r3
 8009180:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009182:	429a      	cmp	r2, r3
 8009184:	d241      	bcs.n	800920a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	330c      	adds	r3, #12
 800918c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800918e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009190:	e853 3f00 	ldrex	r3, [r3]
 8009194:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009198:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800919c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	330c      	adds	r3, #12
 80091a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80091a6:	637a      	str	r2, [r7, #52]	; 0x34
 80091a8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80091ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091ae:	e841 2300 	strex	r3, r2, [r1]
 80091b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80091b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d1e5      	bne.n	8009186 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	3314      	adds	r3, #20
 80091c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	e853 3f00 	ldrex	r3, [r3]
 80091c8:	613b      	str	r3, [r7, #16]
   return(result);
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	f023 0301 	bic.w	r3, r3, #1
 80091d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	3314      	adds	r3, #20
 80091d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091da:	623a      	str	r2, [r7, #32]
 80091dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091de:	69f9      	ldr	r1, [r7, #28]
 80091e0:	6a3a      	ldr	r2, [r7, #32]
 80091e2:	e841 2300 	strex	r3, r2, [r1]
 80091e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80091e8:	69bb      	ldr	r3, [r7, #24]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d1e5      	bne.n	80091ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2220      	movs	r2, #32
 80091f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2220      	movs	r2, #32
 80091fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2200      	movs	r2, #0
 8009202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009206:	2303      	movs	r3, #3
 8009208:	e00f      	b.n	800922a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	681a      	ldr	r2, [r3, #0]
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	4013      	ands	r3, r2
 8009214:	68ba      	ldr	r2, [r7, #8]
 8009216:	429a      	cmp	r2, r3
 8009218:	bf0c      	ite	eq
 800921a:	2301      	moveq	r3, #1
 800921c:	2300      	movne	r3, #0
 800921e:	b2db      	uxtb	r3, r3
 8009220:	461a      	mov	r2, r3
 8009222:	79fb      	ldrb	r3, [r7, #7]
 8009224:	429a      	cmp	r2, r3
 8009226:	d09f      	beq.n	8009168 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009228:	2300      	movs	r3, #0
}
 800922a:	4618      	mov	r0, r3
 800922c:	3740      	adds	r7, #64	; 0x40
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
	...

08009234 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009234:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009238:	b0c0      	sub	sp, #256	; 0x100
 800923a:	af00      	add	r7, sp, #0
 800923c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	691b      	ldr	r3, [r3, #16]
 8009248:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800924c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009250:	68d9      	ldr	r1, [r3, #12]
 8009252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	ea40 0301 	orr.w	r3, r0, r1
 800925c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800925e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009262:	689a      	ldr	r2, [r3, #8]
 8009264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009268:	691b      	ldr	r3, [r3, #16]
 800926a:	431a      	orrs	r2, r3
 800926c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009270:	695b      	ldr	r3, [r3, #20]
 8009272:	431a      	orrs	r2, r3
 8009274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009278:	69db      	ldr	r3, [r3, #28]
 800927a:	4313      	orrs	r3, r2
 800927c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	68db      	ldr	r3, [r3, #12]
 8009288:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800928c:	f021 010c 	bic.w	r1, r1, #12
 8009290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800929a:	430b      	orrs	r3, r1
 800929c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800929e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	695b      	ldr	r3, [r3, #20]
 80092a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80092aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092ae:	6999      	ldr	r1, [r3, #24]
 80092b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	ea40 0301 	orr.w	r3, r0, r1
 80092ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80092bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092c0:	681a      	ldr	r2, [r3, #0]
 80092c2:	4b8f      	ldr	r3, [pc, #572]	; (8009500 <UART_SetConfig+0x2cc>)
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d005      	beq.n	80092d4 <UART_SetConfig+0xa0>
 80092c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	4b8d      	ldr	r3, [pc, #564]	; (8009504 <UART_SetConfig+0x2d0>)
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d104      	bne.n	80092de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80092d4:	f7ff f860 	bl	8008398 <HAL_RCC_GetPCLK2Freq>
 80092d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80092dc:	e003      	b.n	80092e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80092de:	f7ff f847 	bl	8008370 <HAL_RCC_GetPCLK1Freq>
 80092e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80092e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092ea:	69db      	ldr	r3, [r3, #28]
 80092ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092f0:	f040 810c 	bne.w	800950c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80092f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092f8:	2200      	movs	r2, #0
 80092fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80092fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009302:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009306:	4622      	mov	r2, r4
 8009308:	462b      	mov	r3, r5
 800930a:	1891      	adds	r1, r2, r2
 800930c:	65b9      	str	r1, [r7, #88]	; 0x58
 800930e:	415b      	adcs	r3, r3
 8009310:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009312:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009316:	4621      	mov	r1, r4
 8009318:	eb12 0801 	adds.w	r8, r2, r1
 800931c:	4629      	mov	r1, r5
 800931e:	eb43 0901 	adc.w	r9, r3, r1
 8009322:	f04f 0200 	mov.w	r2, #0
 8009326:	f04f 0300 	mov.w	r3, #0
 800932a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800932e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009332:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009336:	4690      	mov	r8, r2
 8009338:	4699      	mov	r9, r3
 800933a:	4623      	mov	r3, r4
 800933c:	eb18 0303 	adds.w	r3, r8, r3
 8009340:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009344:	462b      	mov	r3, r5
 8009346:	eb49 0303 	adc.w	r3, r9, r3
 800934a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800934e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	2200      	movs	r2, #0
 8009356:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800935a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800935e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009362:	460b      	mov	r3, r1
 8009364:	18db      	adds	r3, r3, r3
 8009366:	653b      	str	r3, [r7, #80]	; 0x50
 8009368:	4613      	mov	r3, r2
 800936a:	eb42 0303 	adc.w	r3, r2, r3
 800936e:	657b      	str	r3, [r7, #84]	; 0x54
 8009370:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009374:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009378:	f7f7 fc86 	bl	8000c88 <__aeabi_uldivmod>
 800937c:	4602      	mov	r2, r0
 800937e:	460b      	mov	r3, r1
 8009380:	4b61      	ldr	r3, [pc, #388]	; (8009508 <UART_SetConfig+0x2d4>)
 8009382:	fba3 2302 	umull	r2, r3, r3, r2
 8009386:	095b      	lsrs	r3, r3, #5
 8009388:	011c      	lsls	r4, r3, #4
 800938a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800938e:	2200      	movs	r2, #0
 8009390:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009394:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009398:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800939c:	4642      	mov	r2, r8
 800939e:	464b      	mov	r3, r9
 80093a0:	1891      	adds	r1, r2, r2
 80093a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80093a4:	415b      	adcs	r3, r3
 80093a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80093ac:	4641      	mov	r1, r8
 80093ae:	eb12 0a01 	adds.w	sl, r2, r1
 80093b2:	4649      	mov	r1, r9
 80093b4:	eb43 0b01 	adc.w	fp, r3, r1
 80093b8:	f04f 0200 	mov.w	r2, #0
 80093bc:	f04f 0300 	mov.w	r3, #0
 80093c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80093c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80093c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80093cc:	4692      	mov	sl, r2
 80093ce:	469b      	mov	fp, r3
 80093d0:	4643      	mov	r3, r8
 80093d2:	eb1a 0303 	adds.w	r3, sl, r3
 80093d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80093da:	464b      	mov	r3, r9
 80093dc:	eb4b 0303 	adc.w	r3, fp, r3
 80093e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80093e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	2200      	movs	r2, #0
 80093ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80093f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80093f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80093f8:	460b      	mov	r3, r1
 80093fa:	18db      	adds	r3, r3, r3
 80093fc:	643b      	str	r3, [r7, #64]	; 0x40
 80093fe:	4613      	mov	r3, r2
 8009400:	eb42 0303 	adc.w	r3, r2, r3
 8009404:	647b      	str	r3, [r7, #68]	; 0x44
 8009406:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800940a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800940e:	f7f7 fc3b 	bl	8000c88 <__aeabi_uldivmod>
 8009412:	4602      	mov	r2, r0
 8009414:	460b      	mov	r3, r1
 8009416:	4611      	mov	r1, r2
 8009418:	4b3b      	ldr	r3, [pc, #236]	; (8009508 <UART_SetConfig+0x2d4>)
 800941a:	fba3 2301 	umull	r2, r3, r3, r1
 800941e:	095b      	lsrs	r3, r3, #5
 8009420:	2264      	movs	r2, #100	; 0x64
 8009422:	fb02 f303 	mul.w	r3, r2, r3
 8009426:	1acb      	subs	r3, r1, r3
 8009428:	00db      	lsls	r3, r3, #3
 800942a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800942e:	4b36      	ldr	r3, [pc, #216]	; (8009508 <UART_SetConfig+0x2d4>)
 8009430:	fba3 2302 	umull	r2, r3, r3, r2
 8009434:	095b      	lsrs	r3, r3, #5
 8009436:	005b      	lsls	r3, r3, #1
 8009438:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800943c:	441c      	add	r4, r3
 800943e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009442:	2200      	movs	r2, #0
 8009444:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009448:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800944c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009450:	4642      	mov	r2, r8
 8009452:	464b      	mov	r3, r9
 8009454:	1891      	adds	r1, r2, r2
 8009456:	63b9      	str	r1, [r7, #56]	; 0x38
 8009458:	415b      	adcs	r3, r3
 800945a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800945c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009460:	4641      	mov	r1, r8
 8009462:	1851      	adds	r1, r2, r1
 8009464:	6339      	str	r1, [r7, #48]	; 0x30
 8009466:	4649      	mov	r1, r9
 8009468:	414b      	adcs	r3, r1
 800946a:	637b      	str	r3, [r7, #52]	; 0x34
 800946c:	f04f 0200 	mov.w	r2, #0
 8009470:	f04f 0300 	mov.w	r3, #0
 8009474:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009478:	4659      	mov	r1, fp
 800947a:	00cb      	lsls	r3, r1, #3
 800947c:	4651      	mov	r1, sl
 800947e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009482:	4651      	mov	r1, sl
 8009484:	00ca      	lsls	r2, r1, #3
 8009486:	4610      	mov	r0, r2
 8009488:	4619      	mov	r1, r3
 800948a:	4603      	mov	r3, r0
 800948c:	4642      	mov	r2, r8
 800948e:	189b      	adds	r3, r3, r2
 8009490:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009494:	464b      	mov	r3, r9
 8009496:	460a      	mov	r2, r1
 8009498:	eb42 0303 	adc.w	r3, r2, r3
 800949c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80094a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094a4:	685b      	ldr	r3, [r3, #4]
 80094a6:	2200      	movs	r2, #0
 80094a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80094ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80094b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80094b4:	460b      	mov	r3, r1
 80094b6:	18db      	adds	r3, r3, r3
 80094b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80094ba:	4613      	mov	r3, r2
 80094bc:	eb42 0303 	adc.w	r3, r2, r3
 80094c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80094c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80094c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80094ca:	f7f7 fbdd 	bl	8000c88 <__aeabi_uldivmod>
 80094ce:	4602      	mov	r2, r0
 80094d0:	460b      	mov	r3, r1
 80094d2:	4b0d      	ldr	r3, [pc, #52]	; (8009508 <UART_SetConfig+0x2d4>)
 80094d4:	fba3 1302 	umull	r1, r3, r3, r2
 80094d8:	095b      	lsrs	r3, r3, #5
 80094da:	2164      	movs	r1, #100	; 0x64
 80094dc:	fb01 f303 	mul.w	r3, r1, r3
 80094e0:	1ad3      	subs	r3, r2, r3
 80094e2:	00db      	lsls	r3, r3, #3
 80094e4:	3332      	adds	r3, #50	; 0x32
 80094e6:	4a08      	ldr	r2, [pc, #32]	; (8009508 <UART_SetConfig+0x2d4>)
 80094e8:	fba2 2303 	umull	r2, r3, r2, r3
 80094ec:	095b      	lsrs	r3, r3, #5
 80094ee:	f003 0207 	and.w	r2, r3, #7
 80094f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4422      	add	r2, r4
 80094fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80094fc:	e105      	b.n	800970a <UART_SetConfig+0x4d6>
 80094fe:	bf00      	nop
 8009500:	40011000 	.word	0x40011000
 8009504:	40011400 	.word	0x40011400
 8009508:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800950c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009510:	2200      	movs	r2, #0
 8009512:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009516:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800951a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800951e:	4642      	mov	r2, r8
 8009520:	464b      	mov	r3, r9
 8009522:	1891      	adds	r1, r2, r2
 8009524:	6239      	str	r1, [r7, #32]
 8009526:	415b      	adcs	r3, r3
 8009528:	627b      	str	r3, [r7, #36]	; 0x24
 800952a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800952e:	4641      	mov	r1, r8
 8009530:	1854      	adds	r4, r2, r1
 8009532:	4649      	mov	r1, r9
 8009534:	eb43 0501 	adc.w	r5, r3, r1
 8009538:	f04f 0200 	mov.w	r2, #0
 800953c:	f04f 0300 	mov.w	r3, #0
 8009540:	00eb      	lsls	r3, r5, #3
 8009542:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009546:	00e2      	lsls	r2, r4, #3
 8009548:	4614      	mov	r4, r2
 800954a:	461d      	mov	r5, r3
 800954c:	4643      	mov	r3, r8
 800954e:	18e3      	adds	r3, r4, r3
 8009550:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009554:	464b      	mov	r3, r9
 8009556:	eb45 0303 	adc.w	r3, r5, r3
 800955a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800955e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	2200      	movs	r2, #0
 8009566:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800956a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800956e:	f04f 0200 	mov.w	r2, #0
 8009572:	f04f 0300 	mov.w	r3, #0
 8009576:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800957a:	4629      	mov	r1, r5
 800957c:	008b      	lsls	r3, r1, #2
 800957e:	4621      	mov	r1, r4
 8009580:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009584:	4621      	mov	r1, r4
 8009586:	008a      	lsls	r2, r1, #2
 8009588:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800958c:	f7f7 fb7c 	bl	8000c88 <__aeabi_uldivmod>
 8009590:	4602      	mov	r2, r0
 8009592:	460b      	mov	r3, r1
 8009594:	4b60      	ldr	r3, [pc, #384]	; (8009718 <UART_SetConfig+0x4e4>)
 8009596:	fba3 2302 	umull	r2, r3, r3, r2
 800959a:	095b      	lsrs	r3, r3, #5
 800959c:	011c      	lsls	r4, r3, #4
 800959e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095a2:	2200      	movs	r2, #0
 80095a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80095a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80095ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80095b0:	4642      	mov	r2, r8
 80095b2:	464b      	mov	r3, r9
 80095b4:	1891      	adds	r1, r2, r2
 80095b6:	61b9      	str	r1, [r7, #24]
 80095b8:	415b      	adcs	r3, r3
 80095ba:	61fb      	str	r3, [r7, #28]
 80095bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80095c0:	4641      	mov	r1, r8
 80095c2:	1851      	adds	r1, r2, r1
 80095c4:	6139      	str	r1, [r7, #16]
 80095c6:	4649      	mov	r1, r9
 80095c8:	414b      	adcs	r3, r1
 80095ca:	617b      	str	r3, [r7, #20]
 80095cc:	f04f 0200 	mov.w	r2, #0
 80095d0:	f04f 0300 	mov.w	r3, #0
 80095d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80095d8:	4659      	mov	r1, fp
 80095da:	00cb      	lsls	r3, r1, #3
 80095dc:	4651      	mov	r1, sl
 80095de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80095e2:	4651      	mov	r1, sl
 80095e4:	00ca      	lsls	r2, r1, #3
 80095e6:	4610      	mov	r0, r2
 80095e8:	4619      	mov	r1, r3
 80095ea:	4603      	mov	r3, r0
 80095ec:	4642      	mov	r2, r8
 80095ee:	189b      	adds	r3, r3, r2
 80095f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80095f4:	464b      	mov	r3, r9
 80095f6:	460a      	mov	r2, r1
 80095f8:	eb42 0303 	adc.w	r3, r2, r3
 80095fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009604:	685b      	ldr	r3, [r3, #4]
 8009606:	2200      	movs	r2, #0
 8009608:	67bb      	str	r3, [r7, #120]	; 0x78
 800960a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800960c:	f04f 0200 	mov.w	r2, #0
 8009610:	f04f 0300 	mov.w	r3, #0
 8009614:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009618:	4649      	mov	r1, r9
 800961a:	008b      	lsls	r3, r1, #2
 800961c:	4641      	mov	r1, r8
 800961e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009622:	4641      	mov	r1, r8
 8009624:	008a      	lsls	r2, r1, #2
 8009626:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800962a:	f7f7 fb2d 	bl	8000c88 <__aeabi_uldivmod>
 800962e:	4602      	mov	r2, r0
 8009630:	460b      	mov	r3, r1
 8009632:	4b39      	ldr	r3, [pc, #228]	; (8009718 <UART_SetConfig+0x4e4>)
 8009634:	fba3 1302 	umull	r1, r3, r3, r2
 8009638:	095b      	lsrs	r3, r3, #5
 800963a:	2164      	movs	r1, #100	; 0x64
 800963c:	fb01 f303 	mul.w	r3, r1, r3
 8009640:	1ad3      	subs	r3, r2, r3
 8009642:	011b      	lsls	r3, r3, #4
 8009644:	3332      	adds	r3, #50	; 0x32
 8009646:	4a34      	ldr	r2, [pc, #208]	; (8009718 <UART_SetConfig+0x4e4>)
 8009648:	fba2 2303 	umull	r2, r3, r2, r3
 800964c:	095b      	lsrs	r3, r3, #5
 800964e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009652:	441c      	add	r4, r3
 8009654:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009658:	2200      	movs	r2, #0
 800965a:	673b      	str	r3, [r7, #112]	; 0x70
 800965c:	677a      	str	r2, [r7, #116]	; 0x74
 800965e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009662:	4642      	mov	r2, r8
 8009664:	464b      	mov	r3, r9
 8009666:	1891      	adds	r1, r2, r2
 8009668:	60b9      	str	r1, [r7, #8]
 800966a:	415b      	adcs	r3, r3
 800966c:	60fb      	str	r3, [r7, #12]
 800966e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009672:	4641      	mov	r1, r8
 8009674:	1851      	adds	r1, r2, r1
 8009676:	6039      	str	r1, [r7, #0]
 8009678:	4649      	mov	r1, r9
 800967a:	414b      	adcs	r3, r1
 800967c:	607b      	str	r3, [r7, #4]
 800967e:	f04f 0200 	mov.w	r2, #0
 8009682:	f04f 0300 	mov.w	r3, #0
 8009686:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800968a:	4659      	mov	r1, fp
 800968c:	00cb      	lsls	r3, r1, #3
 800968e:	4651      	mov	r1, sl
 8009690:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009694:	4651      	mov	r1, sl
 8009696:	00ca      	lsls	r2, r1, #3
 8009698:	4610      	mov	r0, r2
 800969a:	4619      	mov	r1, r3
 800969c:	4603      	mov	r3, r0
 800969e:	4642      	mov	r2, r8
 80096a0:	189b      	adds	r3, r3, r2
 80096a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80096a4:	464b      	mov	r3, r9
 80096a6:	460a      	mov	r2, r1
 80096a8:	eb42 0303 	adc.w	r3, r2, r3
 80096ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80096ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	2200      	movs	r2, #0
 80096b6:	663b      	str	r3, [r7, #96]	; 0x60
 80096b8:	667a      	str	r2, [r7, #100]	; 0x64
 80096ba:	f04f 0200 	mov.w	r2, #0
 80096be:	f04f 0300 	mov.w	r3, #0
 80096c2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80096c6:	4649      	mov	r1, r9
 80096c8:	008b      	lsls	r3, r1, #2
 80096ca:	4641      	mov	r1, r8
 80096cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80096d0:	4641      	mov	r1, r8
 80096d2:	008a      	lsls	r2, r1, #2
 80096d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80096d8:	f7f7 fad6 	bl	8000c88 <__aeabi_uldivmod>
 80096dc:	4602      	mov	r2, r0
 80096de:	460b      	mov	r3, r1
 80096e0:	4b0d      	ldr	r3, [pc, #52]	; (8009718 <UART_SetConfig+0x4e4>)
 80096e2:	fba3 1302 	umull	r1, r3, r3, r2
 80096e6:	095b      	lsrs	r3, r3, #5
 80096e8:	2164      	movs	r1, #100	; 0x64
 80096ea:	fb01 f303 	mul.w	r3, r1, r3
 80096ee:	1ad3      	subs	r3, r2, r3
 80096f0:	011b      	lsls	r3, r3, #4
 80096f2:	3332      	adds	r3, #50	; 0x32
 80096f4:	4a08      	ldr	r2, [pc, #32]	; (8009718 <UART_SetConfig+0x4e4>)
 80096f6:	fba2 2303 	umull	r2, r3, r2, r3
 80096fa:	095b      	lsrs	r3, r3, #5
 80096fc:	f003 020f 	and.w	r2, r3, #15
 8009700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	4422      	add	r2, r4
 8009708:	609a      	str	r2, [r3, #8]
}
 800970a:	bf00      	nop
 800970c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009710:	46bd      	mov	sp, r7
 8009712:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009716:	bf00      	nop
 8009718:	51eb851f 	.word	0x51eb851f

0800971c <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800971c:	b480      	push	{r7}
 800971e:	b085      	sub	sp, #20
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8009726:	2300      	movs	r3, #0
 8009728:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	681a      	ldr	r2, [r3, #0]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009734:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8009736:	68fa      	ldr	r2, [r7, #12]
 8009738:	4b20      	ldr	r3, [pc, #128]	; (80097bc <FSMC_NORSRAM_Init+0xa0>)
 800973a:	4013      	ands	r3, r2
 800973c:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8009746:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800974c:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8009752:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8009758:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800975e:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8009764:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800976a:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8009770:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8009776:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800977c:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8009782:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8009788:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800978a:	68fa      	ldr	r2, [r7, #12]
 800978c:	4313      	orrs	r3, r2
 800978e:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	689b      	ldr	r3, [r3, #8]
 8009794:	2b08      	cmp	r3, #8
 8009796:	d103      	bne.n	80097a0 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800979e:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	681a      	ldr	r2, [r3, #0]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	68f9      	ldr	r1, [r7, #12]
 80097a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80097ac:	2300      	movs	r3, #0
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3714      	adds	r7, #20
 80097b2:	46bd      	mov	sp, r7
 80097b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b8:	4770      	bx	lr
 80097ba:	bf00      	nop
 80097bc:	fff00080 	.word	0xfff00080

080097c0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b087      	sub	sp, #28
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	60f8      	str	r0, [r7, #12]
 80097c8:	60b9      	str	r1, [r7, #8]
 80097ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80097cc:	2300      	movs	r3, #0
 80097ce:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	1c5a      	adds	r2, r3, #1
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097da:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80097e2:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	685b      	ldr	r3, [r3, #4]
 80097ec:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80097ee:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	689b      	ldr	r3, [r3, #8]
 80097f4:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80097f6:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	68db      	ldr	r3, [r3, #12]
 80097fc:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80097fe:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	691b      	ldr	r3, [r3, #16]
 8009804:	3b01      	subs	r3, #1
 8009806:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8009808:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	695b      	ldr	r3, [r3, #20]
 800980e:	3b02      	subs	r3, #2
 8009810:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8009812:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009818:	4313      	orrs	r3, r2
 800981a:	697a      	ldr	r2, [r7, #20]
 800981c:	4313      	orrs	r3, r2
 800981e:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	1c5a      	adds	r2, r3, #1
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	6979      	ldr	r1, [r7, #20]
 8009828:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800982c:	2300      	movs	r3, #0
}
 800982e:	4618      	mov	r0, r3
 8009830:	371c      	adds	r7, #28
 8009832:	46bd      	mov	sp, r7
 8009834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009838:	4770      	bx	lr
	...

0800983c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800983c:	b480      	push	{r7}
 800983e:	b087      	sub	sp, #28
 8009840:	af00      	add	r7, sp, #0
 8009842:	60f8      	str	r0, [r7, #12]
 8009844:	60b9      	str	r1, [r7, #8]
 8009846:	607a      	str	r2, [r7, #4]
 8009848:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800984a:	2300      	movs	r3, #0
 800984c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009854:	d122      	bne.n	800989c <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	687a      	ldr	r2, [r7, #4]
 800985a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800985e:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8009860:	697a      	ldr	r2, [r7, #20]
 8009862:	4b15      	ldr	r3, [pc, #84]	; (80098b8 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8009864:	4013      	ands	r3, r2
 8009866:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009872:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800987a:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	68db      	ldr	r3, [r3, #12]
 8009880:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8009882:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8009888:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800988a:	697a      	ldr	r2, [r7, #20]
 800988c:	4313      	orrs	r3, r2
 800988e:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	687a      	ldr	r2, [r7, #4]
 8009894:	6979      	ldr	r1, [r7, #20]
 8009896:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800989a:	e005      	b.n	80098a8 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80098a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80098a8:	2300      	movs	r3, #0
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	371c      	adds	r7, #28
 80098ae:	46bd      	mov	sp, r7
 80098b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b4:	4770      	bx	lr
 80098b6:	bf00      	nop
 80098b8:	cff00000 	.word	0xcff00000

080098bc <atoi>:
 80098bc:	220a      	movs	r2, #10
 80098be:	2100      	movs	r1, #0
 80098c0:	f001 bdd2 	b.w	800b468 <strtol>

080098c4 <__errno>:
 80098c4:	4b01      	ldr	r3, [pc, #4]	; (80098cc <__errno+0x8>)
 80098c6:	6818      	ldr	r0, [r3, #0]
 80098c8:	4770      	bx	lr
 80098ca:	bf00      	nop
 80098cc:	20000060 	.word	0x20000060

080098d0 <__libc_init_array>:
 80098d0:	b570      	push	{r4, r5, r6, lr}
 80098d2:	4d0d      	ldr	r5, [pc, #52]	; (8009908 <__libc_init_array+0x38>)
 80098d4:	4c0d      	ldr	r4, [pc, #52]	; (800990c <__libc_init_array+0x3c>)
 80098d6:	1b64      	subs	r4, r4, r5
 80098d8:	10a4      	asrs	r4, r4, #2
 80098da:	2600      	movs	r6, #0
 80098dc:	42a6      	cmp	r6, r4
 80098de:	d109      	bne.n	80098f4 <__libc_init_array+0x24>
 80098e0:	4d0b      	ldr	r5, [pc, #44]	; (8009910 <__libc_init_array+0x40>)
 80098e2:	4c0c      	ldr	r4, [pc, #48]	; (8009914 <__libc_init_array+0x44>)
 80098e4:	f005 fc7a 	bl	800f1dc <_init>
 80098e8:	1b64      	subs	r4, r4, r5
 80098ea:	10a4      	asrs	r4, r4, #2
 80098ec:	2600      	movs	r6, #0
 80098ee:	42a6      	cmp	r6, r4
 80098f0:	d105      	bne.n	80098fe <__libc_init_array+0x2e>
 80098f2:	bd70      	pop	{r4, r5, r6, pc}
 80098f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80098f8:	4798      	blx	r3
 80098fa:	3601      	adds	r6, #1
 80098fc:	e7ee      	b.n	80098dc <__libc_init_array+0xc>
 80098fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009902:	4798      	blx	r3
 8009904:	3601      	adds	r6, #1
 8009906:	e7f2      	b.n	80098ee <__libc_init_array+0x1e>
 8009908:	0801da58 	.word	0x0801da58
 800990c:	0801da58 	.word	0x0801da58
 8009910:	0801da58 	.word	0x0801da58
 8009914:	0801da5c 	.word	0x0801da5c

08009918 <memcmp>:
 8009918:	b510      	push	{r4, lr}
 800991a:	3901      	subs	r1, #1
 800991c:	4402      	add	r2, r0
 800991e:	4290      	cmp	r0, r2
 8009920:	d101      	bne.n	8009926 <memcmp+0xe>
 8009922:	2000      	movs	r0, #0
 8009924:	e005      	b.n	8009932 <memcmp+0x1a>
 8009926:	7803      	ldrb	r3, [r0, #0]
 8009928:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800992c:	42a3      	cmp	r3, r4
 800992e:	d001      	beq.n	8009934 <memcmp+0x1c>
 8009930:	1b18      	subs	r0, r3, r4
 8009932:	bd10      	pop	{r4, pc}
 8009934:	3001      	adds	r0, #1
 8009936:	e7f2      	b.n	800991e <memcmp+0x6>

08009938 <memcpy>:
 8009938:	440a      	add	r2, r1
 800993a:	4291      	cmp	r1, r2
 800993c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009940:	d100      	bne.n	8009944 <memcpy+0xc>
 8009942:	4770      	bx	lr
 8009944:	b510      	push	{r4, lr}
 8009946:	f811 4b01 	ldrb.w	r4, [r1], #1
 800994a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800994e:	4291      	cmp	r1, r2
 8009950:	d1f9      	bne.n	8009946 <memcpy+0xe>
 8009952:	bd10      	pop	{r4, pc}

08009954 <memset>:
 8009954:	4402      	add	r2, r0
 8009956:	4603      	mov	r3, r0
 8009958:	4293      	cmp	r3, r2
 800995a:	d100      	bne.n	800995e <memset+0xa>
 800995c:	4770      	bx	lr
 800995e:	f803 1b01 	strb.w	r1, [r3], #1
 8009962:	e7f9      	b.n	8009958 <memset+0x4>

08009964 <__cvt>:
 8009964:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009968:	ec55 4b10 	vmov	r4, r5, d0
 800996c:	2d00      	cmp	r5, #0
 800996e:	460e      	mov	r6, r1
 8009970:	4619      	mov	r1, r3
 8009972:	462b      	mov	r3, r5
 8009974:	bfbb      	ittet	lt
 8009976:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800997a:	461d      	movlt	r5, r3
 800997c:	2300      	movge	r3, #0
 800997e:	232d      	movlt	r3, #45	; 0x2d
 8009980:	700b      	strb	r3, [r1, #0]
 8009982:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009984:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009988:	4691      	mov	r9, r2
 800998a:	f023 0820 	bic.w	r8, r3, #32
 800998e:	bfbc      	itt	lt
 8009990:	4622      	movlt	r2, r4
 8009992:	4614      	movlt	r4, r2
 8009994:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009998:	d005      	beq.n	80099a6 <__cvt+0x42>
 800999a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800999e:	d100      	bne.n	80099a2 <__cvt+0x3e>
 80099a0:	3601      	adds	r6, #1
 80099a2:	2102      	movs	r1, #2
 80099a4:	e000      	b.n	80099a8 <__cvt+0x44>
 80099a6:	2103      	movs	r1, #3
 80099a8:	ab03      	add	r3, sp, #12
 80099aa:	9301      	str	r3, [sp, #4]
 80099ac:	ab02      	add	r3, sp, #8
 80099ae:	9300      	str	r3, [sp, #0]
 80099b0:	ec45 4b10 	vmov	d0, r4, r5
 80099b4:	4653      	mov	r3, sl
 80099b6:	4632      	mov	r2, r6
 80099b8:	f001 fdee 	bl	800b598 <_dtoa_r>
 80099bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80099c0:	4607      	mov	r7, r0
 80099c2:	d102      	bne.n	80099ca <__cvt+0x66>
 80099c4:	f019 0f01 	tst.w	r9, #1
 80099c8:	d022      	beq.n	8009a10 <__cvt+0xac>
 80099ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80099ce:	eb07 0906 	add.w	r9, r7, r6
 80099d2:	d110      	bne.n	80099f6 <__cvt+0x92>
 80099d4:	783b      	ldrb	r3, [r7, #0]
 80099d6:	2b30      	cmp	r3, #48	; 0x30
 80099d8:	d10a      	bne.n	80099f0 <__cvt+0x8c>
 80099da:	2200      	movs	r2, #0
 80099dc:	2300      	movs	r3, #0
 80099de:	4620      	mov	r0, r4
 80099e0:	4629      	mov	r1, r5
 80099e2:	f7f7 f871 	bl	8000ac8 <__aeabi_dcmpeq>
 80099e6:	b918      	cbnz	r0, 80099f0 <__cvt+0x8c>
 80099e8:	f1c6 0601 	rsb	r6, r6, #1
 80099ec:	f8ca 6000 	str.w	r6, [sl]
 80099f0:	f8da 3000 	ldr.w	r3, [sl]
 80099f4:	4499      	add	r9, r3
 80099f6:	2200      	movs	r2, #0
 80099f8:	2300      	movs	r3, #0
 80099fa:	4620      	mov	r0, r4
 80099fc:	4629      	mov	r1, r5
 80099fe:	f7f7 f863 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a02:	b108      	cbz	r0, 8009a08 <__cvt+0xa4>
 8009a04:	f8cd 900c 	str.w	r9, [sp, #12]
 8009a08:	2230      	movs	r2, #48	; 0x30
 8009a0a:	9b03      	ldr	r3, [sp, #12]
 8009a0c:	454b      	cmp	r3, r9
 8009a0e:	d307      	bcc.n	8009a20 <__cvt+0xbc>
 8009a10:	9b03      	ldr	r3, [sp, #12]
 8009a12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a14:	1bdb      	subs	r3, r3, r7
 8009a16:	4638      	mov	r0, r7
 8009a18:	6013      	str	r3, [r2, #0]
 8009a1a:	b004      	add	sp, #16
 8009a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a20:	1c59      	adds	r1, r3, #1
 8009a22:	9103      	str	r1, [sp, #12]
 8009a24:	701a      	strb	r2, [r3, #0]
 8009a26:	e7f0      	b.n	8009a0a <__cvt+0xa6>

08009a28 <__exponent>:
 8009a28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	2900      	cmp	r1, #0
 8009a2e:	bfb8      	it	lt
 8009a30:	4249      	neglt	r1, r1
 8009a32:	f803 2b02 	strb.w	r2, [r3], #2
 8009a36:	bfb4      	ite	lt
 8009a38:	222d      	movlt	r2, #45	; 0x2d
 8009a3a:	222b      	movge	r2, #43	; 0x2b
 8009a3c:	2909      	cmp	r1, #9
 8009a3e:	7042      	strb	r2, [r0, #1]
 8009a40:	dd2a      	ble.n	8009a98 <__exponent+0x70>
 8009a42:	f10d 0407 	add.w	r4, sp, #7
 8009a46:	46a4      	mov	ip, r4
 8009a48:	270a      	movs	r7, #10
 8009a4a:	46a6      	mov	lr, r4
 8009a4c:	460a      	mov	r2, r1
 8009a4e:	fb91 f6f7 	sdiv	r6, r1, r7
 8009a52:	fb07 1516 	mls	r5, r7, r6, r1
 8009a56:	3530      	adds	r5, #48	; 0x30
 8009a58:	2a63      	cmp	r2, #99	; 0x63
 8009a5a:	f104 34ff 	add.w	r4, r4, #4294967295
 8009a5e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009a62:	4631      	mov	r1, r6
 8009a64:	dcf1      	bgt.n	8009a4a <__exponent+0x22>
 8009a66:	3130      	adds	r1, #48	; 0x30
 8009a68:	f1ae 0502 	sub.w	r5, lr, #2
 8009a6c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009a70:	1c44      	adds	r4, r0, #1
 8009a72:	4629      	mov	r1, r5
 8009a74:	4561      	cmp	r1, ip
 8009a76:	d30a      	bcc.n	8009a8e <__exponent+0x66>
 8009a78:	f10d 0209 	add.w	r2, sp, #9
 8009a7c:	eba2 020e 	sub.w	r2, r2, lr
 8009a80:	4565      	cmp	r5, ip
 8009a82:	bf88      	it	hi
 8009a84:	2200      	movhi	r2, #0
 8009a86:	4413      	add	r3, r2
 8009a88:	1a18      	subs	r0, r3, r0
 8009a8a:	b003      	add	sp, #12
 8009a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a92:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009a96:	e7ed      	b.n	8009a74 <__exponent+0x4c>
 8009a98:	2330      	movs	r3, #48	; 0x30
 8009a9a:	3130      	adds	r1, #48	; 0x30
 8009a9c:	7083      	strb	r3, [r0, #2]
 8009a9e:	70c1      	strb	r1, [r0, #3]
 8009aa0:	1d03      	adds	r3, r0, #4
 8009aa2:	e7f1      	b.n	8009a88 <__exponent+0x60>

08009aa4 <_printf_float>:
 8009aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aa8:	ed2d 8b02 	vpush	{d8}
 8009aac:	b08d      	sub	sp, #52	; 0x34
 8009aae:	460c      	mov	r4, r1
 8009ab0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009ab4:	4616      	mov	r6, r2
 8009ab6:	461f      	mov	r7, r3
 8009ab8:	4605      	mov	r5, r0
 8009aba:	f002 fecb 	bl	800c854 <_localeconv_r>
 8009abe:	f8d0 a000 	ldr.w	sl, [r0]
 8009ac2:	4650      	mov	r0, sl
 8009ac4:	f7f6 fb84 	bl	80001d0 <strlen>
 8009ac8:	2300      	movs	r3, #0
 8009aca:	930a      	str	r3, [sp, #40]	; 0x28
 8009acc:	6823      	ldr	r3, [r4, #0]
 8009ace:	9305      	str	r3, [sp, #20]
 8009ad0:	f8d8 3000 	ldr.w	r3, [r8]
 8009ad4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009ad8:	3307      	adds	r3, #7
 8009ada:	f023 0307 	bic.w	r3, r3, #7
 8009ade:	f103 0208 	add.w	r2, r3, #8
 8009ae2:	f8c8 2000 	str.w	r2, [r8]
 8009ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009aee:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009af2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009af6:	9307      	str	r3, [sp, #28]
 8009af8:	f8cd 8018 	str.w	r8, [sp, #24]
 8009afc:	ee08 0a10 	vmov	s16, r0
 8009b00:	4b9f      	ldr	r3, [pc, #636]	; (8009d80 <_printf_float+0x2dc>)
 8009b02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b06:	f04f 32ff 	mov.w	r2, #4294967295
 8009b0a:	f7f7 f80f 	bl	8000b2c <__aeabi_dcmpun>
 8009b0e:	bb88      	cbnz	r0, 8009b74 <_printf_float+0xd0>
 8009b10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b14:	4b9a      	ldr	r3, [pc, #616]	; (8009d80 <_printf_float+0x2dc>)
 8009b16:	f04f 32ff 	mov.w	r2, #4294967295
 8009b1a:	f7f6 ffe9 	bl	8000af0 <__aeabi_dcmple>
 8009b1e:	bb48      	cbnz	r0, 8009b74 <_printf_float+0xd0>
 8009b20:	2200      	movs	r2, #0
 8009b22:	2300      	movs	r3, #0
 8009b24:	4640      	mov	r0, r8
 8009b26:	4649      	mov	r1, r9
 8009b28:	f7f6 ffd8 	bl	8000adc <__aeabi_dcmplt>
 8009b2c:	b110      	cbz	r0, 8009b34 <_printf_float+0x90>
 8009b2e:	232d      	movs	r3, #45	; 0x2d
 8009b30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b34:	4b93      	ldr	r3, [pc, #588]	; (8009d84 <_printf_float+0x2e0>)
 8009b36:	4894      	ldr	r0, [pc, #592]	; (8009d88 <_printf_float+0x2e4>)
 8009b38:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009b3c:	bf94      	ite	ls
 8009b3e:	4698      	movls	r8, r3
 8009b40:	4680      	movhi	r8, r0
 8009b42:	2303      	movs	r3, #3
 8009b44:	6123      	str	r3, [r4, #16]
 8009b46:	9b05      	ldr	r3, [sp, #20]
 8009b48:	f023 0204 	bic.w	r2, r3, #4
 8009b4c:	6022      	str	r2, [r4, #0]
 8009b4e:	f04f 0900 	mov.w	r9, #0
 8009b52:	9700      	str	r7, [sp, #0]
 8009b54:	4633      	mov	r3, r6
 8009b56:	aa0b      	add	r2, sp, #44	; 0x2c
 8009b58:	4621      	mov	r1, r4
 8009b5a:	4628      	mov	r0, r5
 8009b5c:	f000 f9d8 	bl	8009f10 <_printf_common>
 8009b60:	3001      	adds	r0, #1
 8009b62:	f040 8090 	bne.w	8009c86 <_printf_float+0x1e2>
 8009b66:	f04f 30ff 	mov.w	r0, #4294967295
 8009b6a:	b00d      	add	sp, #52	; 0x34
 8009b6c:	ecbd 8b02 	vpop	{d8}
 8009b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b74:	4642      	mov	r2, r8
 8009b76:	464b      	mov	r3, r9
 8009b78:	4640      	mov	r0, r8
 8009b7a:	4649      	mov	r1, r9
 8009b7c:	f7f6 ffd6 	bl	8000b2c <__aeabi_dcmpun>
 8009b80:	b140      	cbz	r0, 8009b94 <_printf_float+0xf0>
 8009b82:	464b      	mov	r3, r9
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	bfbc      	itt	lt
 8009b88:	232d      	movlt	r3, #45	; 0x2d
 8009b8a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009b8e:	487f      	ldr	r0, [pc, #508]	; (8009d8c <_printf_float+0x2e8>)
 8009b90:	4b7f      	ldr	r3, [pc, #508]	; (8009d90 <_printf_float+0x2ec>)
 8009b92:	e7d1      	b.n	8009b38 <_printf_float+0x94>
 8009b94:	6863      	ldr	r3, [r4, #4]
 8009b96:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009b9a:	9206      	str	r2, [sp, #24]
 8009b9c:	1c5a      	adds	r2, r3, #1
 8009b9e:	d13f      	bne.n	8009c20 <_printf_float+0x17c>
 8009ba0:	2306      	movs	r3, #6
 8009ba2:	6063      	str	r3, [r4, #4]
 8009ba4:	9b05      	ldr	r3, [sp, #20]
 8009ba6:	6861      	ldr	r1, [r4, #4]
 8009ba8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009bac:	2300      	movs	r3, #0
 8009bae:	9303      	str	r3, [sp, #12]
 8009bb0:	ab0a      	add	r3, sp, #40	; 0x28
 8009bb2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009bb6:	ab09      	add	r3, sp, #36	; 0x24
 8009bb8:	ec49 8b10 	vmov	d0, r8, r9
 8009bbc:	9300      	str	r3, [sp, #0]
 8009bbe:	6022      	str	r2, [r4, #0]
 8009bc0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009bc4:	4628      	mov	r0, r5
 8009bc6:	f7ff fecd 	bl	8009964 <__cvt>
 8009bca:	9b06      	ldr	r3, [sp, #24]
 8009bcc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009bce:	2b47      	cmp	r3, #71	; 0x47
 8009bd0:	4680      	mov	r8, r0
 8009bd2:	d108      	bne.n	8009be6 <_printf_float+0x142>
 8009bd4:	1cc8      	adds	r0, r1, #3
 8009bd6:	db02      	blt.n	8009bde <_printf_float+0x13a>
 8009bd8:	6863      	ldr	r3, [r4, #4]
 8009bda:	4299      	cmp	r1, r3
 8009bdc:	dd41      	ble.n	8009c62 <_printf_float+0x1be>
 8009bde:	f1ab 0b02 	sub.w	fp, fp, #2
 8009be2:	fa5f fb8b 	uxtb.w	fp, fp
 8009be6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009bea:	d820      	bhi.n	8009c2e <_printf_float+0x18a>
 8009bec:	3901      	subs	r1, #1
 8009bee:	465a      	mov	r2, fp
 8009bf0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009bf4:	9109      	str	r1, [sp, #36]	; 0x24
 8009bf6:	f7ff ff17 	bl	8009a28 <__exponent>
 8009bfa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009bfc:	1813      	adds	r3, r2, r0
 8009bfe:	2a01      	cmp	r2, #1
 8009c00:	4681      	mov	r9, r0
 8009c02:	6123      	str	r3, [r4, #16]
 8009c04:	dc02      	bgt.n	8009c0c <_printf_float+0x168>
 8009c06:	6822      	ldr	r2, [r4, #0]
 8009c08:	07d2      	lsls	r2, r2, #31
 8009c0a:	d501      	bpl.n	8009c10 <_printf_float+0x16c>
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	6123      	str	r3, [r4, #16]
 8009c10:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d09c      	beq.n	8009b52 <_printf_float+0xae>
 8009c18:	232d      	movs	r3, #45	; 0x2d
 8009c1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c1e:	e798      	b.n	8009b52 <_printf_float+0xae>
 8009c20:	9a06      	ldr	r2, [sp, #24]
 8009c22:	2a47      	cmp	r2, #71	; 0x47
 8009c24:	d1be      	bne.n	8009ba4 <_printf_float+0x100>
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d1bc      	bne.n	8009ba4 <_printf_float+0x100>
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	e7b9      	b.n	8009ba2 <_printf_float+0xfe>
 8009c2e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009c32:	d118      	bne.n	8009c66 <_printf_float+0x1c2>
 8009c34:	2900      	cmp	r1, #0
 8009c36:	6863      	ldr	r3, [r4, #4]
 8009c38:	dd0b      	ble.n	8009c52 <_printf_float+0x1ae>
 8009c3a:	6121      	str	r1, [r4, #16]
 8009c3c:	b913      	cbnz	r3, 8009c44 <_printf_float+0x1a0>
 8009c3e:	6822      	ldr	r2, [r4, #0]
 8009c40:	07d0      	lsls	r0, r2, #31
 8009c42:	d502      	bpl.n	8009c4a <_printf_float+0x1a6>
 8009c44:	3301      	adds	r3, #1
 8009c46:	440b      	add	r3, r1
 8009c48:	6123      	str	r3, [r4, #16]
 8009c4a:	65a1      	str	r1, [r4, #88]	; 0x58
 8009c4c:	f04f 0900 	mov.w	r9, #0
 8009c50:	e7de      	b.n	8009c10 <_printf_float+0x16c>
 8009c52:	b913      	cbnz	r3, 8009c5a <_printf_float+0x1b6>
 8009c54:	6822      	ldr	r2, [r4, #0]
 8009c56:	07d2      	lsls	r2, r2, #31
 8009c58:	d501      	bpl.n	8009c5e <_printf_float+0x1ba>
 8009c5a:	3302      	adds	r3, #2
 8009c5c:	e7f4      	b.n	8009c48 <_printf_float+0x1a4>
 8009c5e:	2301      	movs	r3, #1
 8009c60:	e7f2      	b.n	8009c48 <_printf_float+0x1a4>
 8009c62:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009c66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c68:	4299      	cmp	r1, r3
 8009c6a:	db05      	blt.n	8009c78 <_printf_float+0x1d4>
 8009c6c:	6823      	ldr	r3, [r4, #0]
 8009c6e:	6121      	str	r1, [r4, #16]
 8009c70:	07d8      	lsls	r0, r3, #31
 8009c72:	d5ea      	bpl.n	8009c4a <_printf_float+0x1a6>
 8009c74:	1c4b      	adds	r3, r1, #1
 8009c76:	e7e7      	b.n	8009c48 <_printf_float+0x1a4>
 8009c78:	2900      	cmp	r1, #0
 8009c7a:	bfd4      	ite	le
 8009c7c:	f1c1 0202 	rsble	r2, r1, #2
 8009c80:	2201      	movgt	r2, #1
 8009c82:	4413      	add	r3, r2
 8009c84:	e7e0      	b.n	8009c48 <_printf_float+0x1a4>
 8009c86:	6823      	ldr	r3, [r4, #0]
 8009c88:	055a      	lsls	r2, r3, #21
 8009c8a:	d407      	bmi.n	8009c9c <_printf_float+0x1f8>
 8009c8c:	6923      	ldr	r3, [r4, #16]
 8009c8e:	4642      	mov	r2, r8
 8009c90:	4631      	mov	r1, r6
 8009c92:	4628      	mov	r0, r5
 8009c94:	47b8      	blx	r7
 8009c96:	3001      	adds	r0, #1
 8009c98:	d12c      	bne.n	8009cf4 <_printf_float+0x250>
 8009c9a:	e764      	b.n	8009b66 <_printf_float+0xc2>
 8009c9c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009ca0:	f240 80e0 	bls.w	8009e64 <_printf_float+0x3c0>
 8009ca4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ca8:	2200      	movs	r2, #0
 8009caa:	2300      	movs	r3, #0
 8009cac:	f7f6 ff0c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009cb0:	2800      	cmp	r0, #0
 8009cb2:	d034      	beq.n	8009d1e <_printf_float+0x27a>
 8009cb4:	4a37      	ldr	r2, [pc, #220]	; (8009d94 <_printf_float+0x2f0>)
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	4631      	mov	r1, r6
 8009cba:	4628      	mov	r0, r5
 8009cbc:	47b8      	blx	r7
 8009cbe:	3001      	adds	r0, #1
 8009cc0:	f43f af51 	beq.w	8009b66 <_printf_float+0xc2>
 8009cc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	db02      	blt.n	8009cd2 <_printf_float+0x22e>
 8009ccc:	6823      	ldr	r3, [r4, #0]
 8009cce:	07d8      	lsls	r0, r3, #31
 8009cd0:	d510      	bpl.n	8009cf4 <_printf_float+0x250>
 8009cd2:	ee18 3a10 	vmov	r3, s16
 8009cd6:	4652      	mov	r2, sl
 8009cd8:	4631      	mov	r1, r6
 8009cda:	4628      	mov	r0, r5
 8009cdc:	47b8      	blx	r7
 8009cde:	3001      	adds	r0, #1
 8009ce0:	f43f af41 	beq.w	8009b66 <_printf_float+0xc2>
 8009ce4:	f04f 0800 	mov.w	r8, #0
 8009ce8:	f104 091a 	add.w	r9, r4, #26
 8009cec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cee:	3b01      	subs	r3, #1
 8009cf0:	4543      	cmp	r3, r8
 8009cf2:	dc09      	bgt.n	8009d08 <_printf_float+0x264>
 8009cf4:	6823      	ldr	r3, [r4, #0]
 8009cf6:	079b      	lsls	r3, r3, #30
 8009cf8:	f100 8105 	bmi.w	8009f06 <_printf_float+0x462>
 8009cfc:	68e0      	ldr	r0, [r4, #12]
 8009cfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d00:	4298      	cmp	r0, r3
 8009d02:	bfb8      	it	lt
 8009d04:	4618      	movlt	r0, r3
 8009d06:	e730      	b.n	8009b6a <_printf_float+0xc6>
 8009d08:	2301      	movs	r3, #1
 8009d0a:	464a      	mov	r2, r9
 8009d0c:	4631      	mov	r1, r6
 8009d0e:	4628      	mov	r0, r5
 8009d10:	47b8      	blx	r7
 8009d12:	3001      	adds	r0, #1
 8009d14:	f43f af27 	beq.w	8009b66 <_printf_float+0xc2>
 8009d18:	f108 0801 	add.w	r8, r8, #1
 8009d1c:	e7e6      	b.n	8009cec <_printf_float+0x248>
 8009d1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	dc39      	bgt.n	8009d98 <_printf_float+0x2f4>
 8009d24:	4a1b      	ldr	r2, [pc, #108]	; (8009d94 <_printf_float+0x2f0>)
 8009d26:	2301      	movs	r3, #1
 8009d28:	4631      	mov	r1, r6
 8009d2a:	4628      	mov	r0, r5
 8009d2c:	47b8      	blx	r7
 8009d2e:	3001      	adds	r0, #1
 8009d30:	f43f af19 	beq.w	8009b66 <_printf_float+0xc2>
 8009d34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	d102      	bne.n	8009d42 <_printf_float+0x29e>
 8009d3c:	6823      	ldr	r3, [r4, #0]
 8009d3e:	07d9      	lsls	r1, r3, #31
 8009d40:	d5d8      	bpl.n	8009cf4 <_printf_float+0x250>
 8009d42:	ee18 3a10 	vmov	r3, s16
 8009d46:	4652      	mov	r2, sl
 8009d48:	4631      	mov	r1, r6
 8009d4a:	4628      	mov	r0, r5
 8009d4c:	47b8      	blx	r7
 8009d4e:	3001      	adds	r0, #1
 8009d50:	f43f af09 	beq.w	8009b66 <_printf_float+0xc2>
 8009d54:	f04f 0900 	mov.w	r9, #0
 8009d58:	f104 0a1a 	add.w	sl, r4, #26
 8009d5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d5e:	425b      	negs	r3, r3
 8009d60:	454b      	cmp	r3, r9
 8009d62:	dc01      	bgt.n	8009d68 <_printf_float+0x2c4>
 8009d64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d66:	e792      	b.n	8009c8e <_printf_float+0x1ea>
 8009d68:	2301      	movs	r3, #1
 8009d6a:	4652      	mov	r2, sl
 8009d6c:	4631      	mov	r1, r6
 8009d6e:	4628      	mov	r0, r5
 8009d70:	47b8      	blx	r7
 8009d72:	3001      	adds	r0, #1
 8009d74:	f43f aef7 	beq.w	8009b66 <_printf_float+0xc2>
 8009d78:	f109 0901 	add.w	r9, r9, #1
 8009d7c:	e7ee      	b.n	8009d5c <_printf_float+0x2b8>
 8009d7e:	bf00      	nop
 8009d80:	7fefffff 	.word	0x7fefffff
 8009d84:	0801d578 	.word	0x0801d578
 8009d88:	0801d57c 	.word	0x0801d57c
 8009d8c:	0801d584 	.word	0x0801d584
 8009d90:	0801d580 	.word	0x0801d580
 8009d94:	0801d588 	.word	0x0801d588
 8009d98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	bfa8      	it	ge
 8009da0:	461a      	movge	r2, r3
 8009da2:	2a00      	cmp	r2, #0
 8009da4:	4691      	mov	r9, r2
 8009da6:	dc37      	bgt.n	8009e18 <_printf_float+0x374>
 8009da8:	f04f 0b00 	mov.w	fp, #0
 8009dac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009db0:	f104 021a 	add.w	r2, r4, #26
 8009db4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009db6:	9305      	str	r3, [sp, #20]
 8009db8:	eba3 0309 	sub.w	r3, r3, r9
 8009dbc:	455b      	cmp	r3, fp
 8009dbe:	dc33      	bgt.n	8009e28 <_printf_float+0x384>
 8009dc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	db3b      	blt.n	8009e40 <_printf_float+0x39c>
 8009dc8:	6823      	ldr	r3, [r4, #0]
 8009dca:	07da      	lsls	r2, r3, #31
 8009dcc:	d438      	bmi.n	8009e40 <_printf_float+0x39c>
 8009dce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dd0:	9a05      	ldr	r2, [sp, #20]
 8009dd2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009dd4:	1a9a      	subs	r2, r3, r2
 8009dd6:	eba3 0901 	sub.w	r9, r3, r1
 8009dda:	4591      	cmp	r9, r2
 8009ddc:	bfa8      	it	ge
 8009dde:	4691      	movge	r9, r2
 8009de0:	f1b9 0f00 	cmp.w	r9, #0
 8009de4:	dc35      	bgt.n	8009e52 <_printf_float+0x3ae>
 8009de6:	f04f 0800 	mov.w	r8, #0
 8009dea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009dee:	f104 0a1a 	add.w	sl, r4, #26
 8009df2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009df6:	1a9b      	subs	r3, r3, r2
 8009df8:	eba3 0309 	sub.w	r3, r3, r9
 8009dfc:	4543      	cmp	r3, r8
 8009dfe:	f77f af79 	ble.w	8009cf4 <_printf_float+0x250>
 8009e02:	2301      	movs	r3, #1
 8009e04:	4652      	mov	r2, sl
 8009e06:	4631      	mov	r1, r6
 8009e08:	4628      	mov	r0, r5
 8009e0a:	47b8      	blx	r7
 8009e0c:	3001      	adds	r0, #1
 8009e0e:	f43f aeaa 	beq.w	8009b66 <_printf_float+0xc2>
 8009e12:	f108 0801 	add.w	r8, r8, #1
 8009e16:	e7ec      	b.n	8009df2 <_printf_float+0x34e>
 8009e18:	4613      	mov	r3, r2
 8009e1a:	4631      	mov	r1, r6
 8009e1c:	4642      	mov	r2, r8
 8009e1e:	4628      	mov	r0, r5
 8009e20:	47b8      	blx	r7
 8009e22:	3001      	adds	r0, #1
 8009e24:	d1c0      	bne.n	8009da8 <_printf_float+0x304>
 8009e26:	e69e      	b.n	8009b66 <_printf_float+0xc2>
 8009e28:	2301      	movs	r3, #1
 8009e2a:	4631      	mov	r1, r6
 8009e2c:	4628      	mov	r0, r5
 8009e2e:	9205      	str	r2, [sp, #20]
 8009e30:	47b8      	blx	r7
 8009e32:	3001      	adds	r0, #1
 8009e34:	f43f ae97 	beq.w	8009b66 <_printf_float+0xc2>
 8009e38:	9a05      	ldr	r2, [sp, #20]
 8009e3a:	f10b 0b01 	add.w	fp, fp, #1
 8009e3e:	e7b9      	b.n	8009db4 <_printf_float+0x310>
 8009e40:	ee18 3a10 	vmov	r3, s16
 8009e44:	4652      	mov	r2, sl
 8009e46:	4631      	mov	r1, r6
 8009e48:	4628      	mov	r0, r5
 8009e4a:	47b8      	blx	r7
 8009e4c:	3001      	adds	r0, #1
 8009e4e:	d1be      	bne.n	8009dce <_printf_float+0x32a>
 8009e50:	e689      	b.n	8009b66 <_printf_float+0xc2>
 8009e52:	9a05      	ldr	r2, [sp, #20]
 8009e54:	464b      	mov	r3, r9
 8009e56:	4442      	add	r2, r8
 8009e58:	4631      	mov	r1, r6
 8009e5a:	4628      	mov	r0, r5
 8009e5c:	47b8      	blx	r7
 8009e5e:	3001      	adds	r0, #1
 8009e60:	d1c1      	bne.n	8009de6 <_printf_float+0x342>
 8009e62:	e680      	b.n	8009b66 <_printf_float+0xc2>
 8009e64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e66:	2a01      	cmp	r2, #1
 8009e68:	dc01      	bgt.n	8009e6e <_printf_float+0x3ca>
 8009e6a:	07db      	lsls	r3, r3, #31
 8009e6c:	d538      	bpl.n	8009ee0 <_printf_float+0x43c>
 8009e6e:	2301      	movs	r3, #1
 8009e70:	4642      	mov	r2, r8
 8009e72:	4631      	mov	r1, r6
 8009e74:	4628      	mov	r0, r5
 8009e76:	47b8      	blx	r7
 8009e78:	3001      	adds	r0, #1
 8009e7a:	f43f ae74 	beq.w	8009b66 <_printf_float+0xc2>
 8009e7e:	ee18 3a10 	vmov	r3, s16
 8009e82:	4652      	mov	r2, sl
 8009e84:	4631      	mov	r1, r6
 8009e86:	4628      	mov	r0, r5
 8009e88:	47b8      	blx	r7
 8009e8a:	3001      	adds	r0, #1
 8009e8c:	f43f ae6b 	beq.w	8009b66 <_printf_float+0xc2>
 8009e90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009e94:	2200      	movs	r2, #0
 8009e96:	2300      	movs	r3, #0
 8009e98:	f7f6 fe16 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e9c:	b9d8      	cbnz	r0, 8009ed6 <_printf_float+0x432>
 8009e9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ea0:	f108 0201 	add.w	r2, r8, #1
 8009ea4:	3b01      	subs	r3, #1
 8009ea6:	4631      	mov	r1, r6
 8009ea8:	4628      	mov	r0, r5
 8009eaa:	47b8      	blx	r7
 8009eac:	3001      	adds	r0, #1
 8009eae:	d10e      	bne.n	8009ece <_printf_float+0x42a>
 8009eb0:	e659      	b.n	8009b66 <_printf_float+0xc2>
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	4652      	mov	r2, sl
 8009eb6:	4631      	mov	r1, r6
 8009eb8:	4628      	mov	r0, r5
 8009eba:	47b8      	blx	r7
 8009ebc:	3001      	adds	r0, #1
 8009ebe:	f43f ae52 	beq.w	8009b66 <_printf_float+0xc2>
 8009ec2:	f108 0801 	add.w	r8, r8, #1
 8009ec6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ec8:	3b01      	subs	r3, #1
 8009eca:	4543      	cmp	r3, r8
 8009ecc:	dcf1      	bgt.n	8009eb2 <_printf_float+0x40e>
 8009ece:	464b      	mov	r3, r9
 8009ed0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009ed4:	e6dc      	b.n	8009c90 <_printf_float+0x1ec>
 8009ed6:	f04f 0800 	mov.w	r8, #0
 8009eda:	f104 0a1a 	add.w	sl, r4, #26
 8009ede:	e7f2      	b.n	8009ec6 <_printf_float+0x422>
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	4642      	mov	r2, r8
 8009ee4:	e7df      	b.n	8009ea6 <_printf_float+0x402>
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	464a      	mov	r2, r9
 8009eea:	4631      	mov	r1, r6
 8009eec:	4628      	mov	r0, r5
 8009eee:	47b8      	blx	r7
 8009ef0:	3001      	adds	r0, #1
 8009ef2:	f43f ae38 	beq.w	8009b66 <_printf_float+0xc2>
 8009ef6:	f108 0801 	add.w	r8, r8, #1
 8009efa:	68e3      	ldr	r3, [r4, #12]
 8009efc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009efe:	1a5b      	subs	r3, r3, r1
 8009f00:	4543      	cmp	r3, r8
 8009f02:	dcf0      	bgt.n	8009ee6 <_printf_float+0x442>
 8009f04:	e6fa      	b.n	8009cfc <_printf_float+0x258>
 8009f06:	f04f 0800 	mov.w	r8, #0
 8009f0a:	f104 0919 	add.w	r9, r4, #25
 8009f0e:	e7f4      	b.n	8009efa <_printf_float+0x456>

08009f10 <_printf_common>:
 8009f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f14:	4616      	mov	r6, r2
 8009f16:	4699      	mov	r9, r3
 8009f18:	688a      	ldr	r2, [r1, #8]
 8009f1a:	690b      	ldr	r3, [r1, #16]
 8009f1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f20:	4293      	cmp	r3, r2
 8009f22:	bfb8      	it	lt
 8009f24:	4613      	movlt	r3, r2
 8009f26:	6033      	str	r3, [r6, #0]
 8009f28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f2c:	4607      	mov	r7, r0
 8009f2e:	460c      	mov	r4, r1
 8009f30:	b10a      	cbz	r2, 8009f36 <_printf_common+0x26>
 8009f32:	3301      	adds	r3, #1
 8009f34:	6033      	str	r3, [r6, #0]
 8009f36:	6823      	ldr	r3, [r4, #0]
 8009f38:	0699      	lsls	r1, r3, #26
 8009f3a:	bf42      	ittt	mi
 8009f3c:	6833      	ldrmi	r3, [r6, #0]
 8009f3e:	3302      	addmi	r3, #2
 8009f40:	6033      	strmi	r3, [r6, #0]
 8009f42:	6825      	ldr	r5, [r4, #0]
 8009f44:	f015 0506 	ands.w	r5, r5, #6
 8009f48:	d106      	bne.n	8009f58 <_printf_common+0x48>
 8009f4a:	f104 0a19 	add.w	sl, r4, #25
 8009f4e:	68e3      	ldr	r3, [r4, #12]
 8009f50:	6832      	ldr	r2, [r6, #0]
 8009f52:	1a9b      	subs	r3, r3, r2
 8009f54:	42ab      	cmp	r3, r5
 8009f56:	dc26      	bgt.n	8009fa6 <_printf_common+0x96>
 8009f58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009f5c:	1e13      	subs	r3, r2, #0
 8009f5e:	6822      	ldr	r2, [r4, #0]
 8009f60:	bf18      	it	ne
 8009f62:	2301      	movne	r3, #1
 8009f64:	0692      	lsls	r2, r2, #26
 8009f66:	d42b      	bmi.n	8009fc0 <_printf_common+0xb0>
 8009f68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f6c:	4649      	mov	r1, r9
 8009f6e:	4638      	mov	r0, r7
 8009f70:	47c0      	blx	r8
 8009f72:	3001      	adds	r0, #1
 8009f74:	d01e      	beq.n	8009fb4 <_printf_common+0xa4>
 8009f76:	6823      	ldr	r3, [r4, #0]
 8009f78:	68e5      	ldr	r5, [r4, #12]
 8009f7a:	6832      	ldr	r2, [r6, #0]
 8009f7c:	f003 0306 	and.w	r3, r3, #6
 8009f80:	2b04      	cmp	r3, #4
 8009f82:	bf08      	it	eq
 8009f84:	1aad      	subeq	r5, r5, r2
 8009f86:	68a3      	ldr	r3, [r4, #8]
 8009f88:	6922      	ldr	r2, [r4, #16]
 8009f8a:	bf0c      	ite	eq
 8009f8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f90:	2500      	movne	r5, #0
 8009f92:	4293      	cmp	r3, r2
 8009f94:	bfc4      	itt	gt
 8009f96:	1a9b      	subgt	r3, r3, r2
 8009f98:	18ed      	addgt	r5, r5, r3
 8009f9a:	2600      	movs	r6, #0
 8009f9c:	341a      	adds	r4, #26
 8009f9e:	42b5      	cmp	r5, r6
 8009fa0:	d11a      	bne.n	8009fd8 <_printf_common+0xc8>
 8009fa2:	2000      	movs	r0, #0
 8009fa4:	e008      	b.n	8009fb8 <_printf_common+0xa8>
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	4652      	mov	r2, sl
 8009faa:	4649      	mov	r1, r9
 8009fac:	4638      	mov	r0, r7
 8009fae:	47c0      	blx	r8
 8009fb0:	3001      	adds	r0, #1
 8009fb2:	d103      	bne.n	8009fbc <_printf_common+0xac>
 8009fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fbc:	3501      	adds	r5, #1
 8009fbe:	e7c6      	b.n	8009f4e <_printf_common+0x3e>
 8009fc0:	18e1      	adds	r1, r4, r3
 8009fc2:	1c5a      	adds	r2, r3, #1
 8009fc4:	2030      	movs	r0, #48	; 0x30
 8009fc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009fca:	4422      	add	r2, r4
 8009fcc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009fd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009fd4:	3302      	adds	r3, #2
 8009fd6:	e7c7      	b.n	8009f68 <_printf_common+0x58>
 8009fd8:	2301      	movs	r3, #1
 8009fda:	4622      	mov	r2, r4
 8009fdc:	4649      	mov	r1, r9
 8009fde:	4638      	mov	r0, r7
 8009fe0:	47c0      	blx	r8
 8009fe2:	3001      	adds	r0, #1
 8009fe4:	d0e6      	beq.n	8009fb4 <_printf_common+0xa4>
 8009fe6:	3601      	adds	r6, #1
 8009fe8:	e7d9      	b.n	8009f9e <_printf_common+0x8e>
	...

08009fec <_printf_i>:
 8009fec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ff0:	7e0f      	ldrb	r7, [r1, #24]
 8009ff2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009ff4:	2f78      	cmp	r7, #120	; 0x78
 8009ff6:	4691      	mov	r9, r2
 8009ff8:	4680      	mov	r8, r0
 8009ffa:	460c      	mov	r4, r1
 8009ffc:	469a      	mov	sl, r3
 8009ffe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a002:	d807      	bhi.n	800a014 <_printf_i+0x28>
 800a004:	2f62      	cmp	r7, #98	; 0x62
 800a006:	d80a      	bhi.n	800a01e <_printf_i+0x32>
 800a008:	2f00      	cmp	r7, #0
 800a00a:	f000 80d8 	beq.w	800a1be <_printf_i+0x1d2>
 800a00e:	2f58      	cmp	r7, #88	; 0x58
 800a010:	f000 80a3 	beq.w	800a15a <_printf_i+0x16e>
 800a014:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a018:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a01c:	e03a      	b.n	800a094 <_printf_i+0xa8>
 800a01e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a022:	2b15      	cmp	r3, #21
 800a024:	d8f6      	bhi.n	800a014 <_printf_i+0x28>
 800a026:	a101      	add	r1, pc, #4	; (adr r1, 800a02c <_printf_i+0x40>)
 800a028:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a02c:	0800a085 	.word	0x0800a085
 800a030:	0800a099 	.word	0x0800a099
 800a034:	0800a015 	.word	0x0800a015
 800a038:	0800a015 	.word	0x0800a015
 800a03c:	0800a015 	.word	0x0800a015
 800a040:	0800a015 	.word	0x0800a015
 800a044:	0800a099 	.word	0x0800a099
 800a048:	0800a015 	.word	0x0800a015
 800a04c:	0800a015 	.word	0x0800a015
 800a050:	0800a015 	.word	0x0800a015
 800a054:	0800a015 	.word	0x0800a015
 800a058:	0800a1a5 	.word	0x0800a1a5
 800a05c:	0800a0c9 	.word	0x0800a0c9
 800a060:	0800a187 	.word	0x0800a187
 800a064:	0800a015 	.word	0x0800a015
 800a068:	0800a015 	.word	0x0800a015
 800a06c:	0800a1c7 	.word	0x0800a1c7
 800a070:	0800a015 	.word	0x0800a015
 800a074:	0800a0c9 	.word	0x0800a0c9
 800a078:	0800a015 	.word	0x0800a015
 800a07c:	0800a015 	.word	0x0800a015
 800a080:	0800a18f 	.word	0x0800a18f
 800a084:	682b      	ldr	r3, [r5, #0]
 800a086:	1d1a      	adds	r2, r3, #4
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	602a      	str	r2, [r5, #0]
 800a08c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a090:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a094:	2301      	movs	r3, #1
 800a096:	e0a3      	b.n	800a1e0 <_printf_i+0x1f4>
 800a098:	6820      	ldr	r0, [r4, #0]
 800a09a:	6829      	ldr	r1, [r5, #0]
 800a09c:	0606      	lsls	r6, r0, #24
 800a09e:	f101 0304 	add.w	r3, r1, #4
 800a0a2:	d50a      	bpl.n	800a0ba <_printf_i+0xce>
 800a0a4:	680e      	ldr	r6, [r1, #0]
 800a0a6:	602b      	str	r3, [r5, #0]
 800a0a8:	2e00      	cmp	r6, #0
 800a0aa:	da03      	bge.n	800a0b4 <_printf_i+0xc8>
 800a0ac:	232d      	movs	r3, #45	; 0x2d
 800a0ae:	4276      	negs	r6, r6
 800a0b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0b4:	485e      	ldr	r0, [pc, #376]	; (800a230 <_printf_i+0x244>)
 800a0b6:	230a      	movs	r3, #10
 800a0b8:	e019      	b.n	800a0ee <_printf_i+0x102>
 800a0ba:	680e      	ldr	r6, [r1, #0]
 800a0bc:	602b      	str	r3, [r5, #0]
 800a0be:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a0c2:	bf18      	it	ne
 800a0c4:	b236      	sxthne	r6, r6
 800a0c6:	e7ef      	b.n	800a0a8 <_printf_i+0xbc>
 800a0c8:	682b      	ldr	r3, [r5, #0]
 800a0ca:	6820      	ldr	r0, [r4, #0]
 800a0cc:	1d19      	adds	r1, r3, #4
 800a0ce:	6029      	str	r1, [r5, #0]
 800a0d0:	0601      	lsls	r1, r0, #24
 800a0d2:	d501      	bpl.n	800a0d8 <_printf_i+0xec>
 800a0d4:	681e      	ldr	r6, [r3, #0]
 800a0d6:	e002      	b.n	800a0de <_printf_i+0xf2>
 800a0d8:	0646      	lsls	r6, r0, #25
 800a0da:	d5fb      	bpl.n	800a0d4 <_printf_i+0xe8>
 800a0dc:	881e      	ldrh	r6, [r3, #0]
 800a0de:	4854      	ldr	r0, [pc, #336]	; (800a230 <_printf_i+0x244>)
 800a0e0:	2f6f      	cmp	r7, #111	; 0x6f
 800a0e2:	bf0c      	ite	eq
 800a0e4:	2308      	moveq	r3, #8
 800a0e6:	230a      	movne	r3, #10
 800a0e8:	2100      	movs	r1, #0
 800a0ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a0ee:	6865      	ldr	r5, [r4, #4]
 800a0f0:	60a5      	str	r5, [r4, #8]
 800a0f2:	2d00      	cmp	r5, #0
 800a0f4:	bfa2      	ittt	ge
 800a0f6:	6821      	ldrge	r1, [r4, #0]
 800a0f8:	f021 0104 	bicge.w	r1, r1, #4
 800a0fc:	6021      	strge	r1, [r4, #0]
 800a0fe:	b90e      	cbnz	r6, 800a104 <_printf_i+0x118>
 800a100:	2d00      	cmp	r5, #0
 800a102:	d04d      	beq.n	800a1a0 <_printf_i+0x1b4>
 800a104:	4615      	mov	r5, r2
 800a106:	fbb6 f1f3 	udiv	r1, r6, r3
 800a10a:	fb03 6711 	mls	r7, r3, r1, r6
 800a10e:	5dc7      	ldrb	r7, [r0, r7]
 800a110:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a114:	4637      	mov	r7, r6
 800a116:	42bb      	cmp	r3, r7
 800a118:	460e      	mov	r6, r1
 800a11a:	d9f4      	bls.n	800a106 <_printf_i+0x11a>
 800a11c:	2b08      	cmp	r3, #8
 800a11e:	d10b      	bne.n	800a138 <_printf_i+0x14c>
 800a120:	6823      	ldr	r3, [r4, #0]
 800a122:	07de      	lsls	r6, r3, #31
 800a124:	d508      	bpl.n	800a138 <_printf_i+0x14c>
 800a126:	6923      	ldr	r3, [r4, #16]
 800a128:	6861      	ldr	r1, [r4, #4]
 800a12a:	4299      	cmp	r1, r3
 800a12c:	bfde      	ittt	le
 800a12e:	2330      	movle	r3, #48	; 0x30
 800a130:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a134:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a138:	1b52      	subs	r2, r2, r5
 800a13a:	6122      	str	r2, [r4, #16]
 800a13c:	f8cd a000 	str.w	sl, [sp]
 800a140:	464b      	mov	r3, r9
 800a142:	aa03      	add	r2, sp, #12
 800a144:	4621      	mov	r1, r4
 800a146:	4640      	mov	r0, r8
 800a148:	f7ff fee2 	bl	8009f10 <_printf_common>
 800a14c:	3001      	adds	r0, #1
 800a14e:	d14c      	bne.n	800a1ea <_printf_i+0x1fe>
 800a150:	f04f 30ff 	mov.w	r0, #4294967295
 800a154:	b004      	add	sp, #16
 800a156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a15a:	4835      	ldr	r0, [pc, #212]	; (800a230 <_printf_i+0x244>)
 800a15c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a160:	6829      	ldr	r1, [r5, #0]
 800a162:	6823      	ldr	r3, [r4, #0]
 800a164:	f851 6b04 	ldr.w	r6, [r1], #4
 800a168:	6029      	str	r1, [r5, #0]
 800a16a:	061d      	lsls	r5, r3, #24
 800a16c:	d514      	bpl.n	800a198 <_printf_i+0x1ac>
 800a16e:	07df      	lsls	r7, r3, #31
 800a170:	bf44      	itt	mi
 800a172:	f043 0320 	orrmi.w	r3, r3, #32
 800a176:	6023      	strmi	r3, [r4, #0]
 800a178:	b91e      	cbnz	r6, 800a182 <_printf_i+0x196>
 800a17a:	6823      	ldr	r3, [r4, #0]
 800a17c:	f023 0320 	bic.w	r3, r3, #32
 800a180:	6023      	str	r3, [r4, #0]
 800a182:	2310      	movs	r3, #16
 800a184:	e7b0      	b.n	800a0e8 <_printf_i+0xfc>
 800a186:	6823      	ldr	r3, [r4, #0]
 800a188:	f043 0320 	orr.w	r3, r3, #32
 800a18c:	6023      	str	r3, [r4, #0]
 800a18e:	2378      	movs	r3, #120	; 0x78
 800a190:	4828      	ldr	r0, [pc, #160]	; (800a234 <_printf_i+0x248>)
 800a192:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a196:	e7e3      	b.n	800a160 <_printf_i+0x174>
 800a198:	0659      	lsls	r1, r3, #25
 800a19a:	bf48      	it	mi
 800a19c:	b2b6      	uxthmi	r6, r6
 800a19e:	e7e6      	b.n	800a16e <_printf_i+0x182>
 800a1a0:	4615      	mov	r5, r2
 800a1a2:	e7bb      	b.n	800a11c <_printf_i+0x130>
 800a1a4:	682b      	ldr	r3, [r5, #0]
 800a1a6:	6826      	ldr	r6, [r4, #0]
 800a1a8:	6961      	ldr	r1, [r4, #20]
 800a1aa:	1d18      	adds	r0, r3, #4
 800a1ac:	6028      	str	r0, [r5, #0]
 800a1ae:	0635      	lsls	r5, r6, #24
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	d501      	bpl.n	800a1b8 <_printf_i+0x1cc>
 800a1b4:	6019      	str	r1, [r3, #0]
 800a1b6:	e002      	b.n	800a1be <_printf_i+0x1d2>
 800a1b8:	0670      	lsls	r0, r6, #25
 800a1ba:	d5fb      	bpl.n	800a1b4 <_printf_i+0x1c8>
 800a1bc:	8019      	strh	r1, [r3, #0]
 800a1be:	2300      	movs	r3, #0
 800a1c0:	6123      	str	r3, [r4, #16]
 800a1c2:	4615      	mov	r5, r2
 800a1c4:	e7ba      	b.n	800a13c <_printf_i+0x150>
 800a1c6:	682b      	ldr	r3, [r5, #0]
 800a1c8:	1d1a      	adds	r2, r3, #4
 800a1ca:	602a      	str	r2, [r5, #0]
 800a1cc:	681d      	ldr	r5, [r3, #0]
 800a1ce:	6862      	ldr	r2, [r4, #4]
 800a1d0:	2100      	movs	r1, #0
 800a1d2:	4628      	mov	r0, r5
 800a1d4:	f7f6 f804 	bl	80001e0 <memchr>
 800a1d8:	b108      	cbz	r0, 800a1de <_printf_i+0x1f2>
 800a1da:	1b40      	subs	r0, r0, r5
 800a1dc:	6060      	str	r0, [r4, #4]
 800a1de:	6863      	ldr	r3, [r4, #4]
 800a1e0:	6123      	str	r3, [r4, #16]
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1e8:	e7a8      	b.n	800a13c <_printf_i+0x150>
 800a1ea:	6923      	ldr	r3, [r4, #16]
 800a1ec:	462a      	mov	r2, r5
 800a1ee:	4649      	mov	r1, r9
 800a1f0:	4640      	mov	r0, r8
 800a1f2:	47d0      	blx	sl
 800a1f4:	3001      	adds	r0, #1
 800a1f6:	d0ab      	beq.n	800a150 <_printf_i+0x164>
 800a1f8:	6823      	ldr	r3, [r4, #0]
 800a1fa:	079b      	lsls	r3, r3, #30
 800a1fc:	d413      	bmi.n	800a226 <_printf_i+0x23a>
 800a1fe:	68e0      	ldr	r0, [r4, #12]
 800a200:	9b03      	ldr	r3, [sp, #12]
 800a202:	4298      	cmp	r0, r3
 800a204:	bfb8      	it	lt
 800a206:	4618      	movlt	r0, r3
 800a208:	e7a4      	b.n	800a154 <_printf_i+0x168>
 800a20a:	2301      	movs	r3, #1
 800a20c:	4632      	mov	r2, r6
 800a20e:	4649      	mov	r1, r9
 800a210:	4640      	mov	r0, r8
 800a212:	47d0      	blx	sl
 800a214:	3001      	adds	r0, #1
 800a216:	d09b      	beq.n	800a150 <_printf_i+0x164>
 800a218:	3501      	adds	r5, #1
 800a21a:	68e3      	ldr	r3, [r4, #12]
 800a21c:	9903      	ldr	r1, [sp, #12]
 800a21e:	1a5b      	subs	r3, r3, r1
 800a220:	42ab      	cmp	r3, r5
 800a222:	dcf2      	bgt.n	800a20a <_printf_i+0x21e>
 800a224:	e7eb      	b.n	800a1fe <_printf_i+0x212>
 800a226:	2500      	movs	r5, #0
 800a228:	f104 0619 	add.w	r6, r4, #25
 800a22c:	e7f5      	b.n	800a21a <_printf_i+0x22e>
 800a22e:	bf00      	nop
 800a230:	0801d58a 	.word	0x0801d58a
 800a234:	0801d59b 	.word	0x0801d59b

0800a238 <_scanf_float>:
 800a238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a23c:	b087      	sub	sp, #28
 800a23e:	4617      	mov	r7, r2
 800a240:	9303      	str	r3, [sp, #12]
 800a242:	688b      	ldr	r3, [r1, #8]
 800a244:	1e5a      	subs	r2, r3, #1
 800a246:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a24a:	bf83      	ittte	hi
 800a24c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a250:	195b      	addhi	r3, r3, r5
 800a252:	9302      	strhi	r3, [sp, #8]
 800a254:	2300      	movls	r3, #0
 800a256:	bf86      	itte	hi
 800a258:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a25c:	608b      	strhi	r3, [r1, #8]
 800a25e:	9302      	strls	r3, [sp, #8]
 800a260:	680b      	ldr	r3, [r1, #0]
 800a262:	468b      	mov	fp, r1
 800a264:	2500      	movs	r5, #0
 800a266:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a26a:	f84b 3b1c 	str.w	r3, [fp], #28
 800a26e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a272:	4680      	mov	r8, r0
 800a274:	460c      	mov	r4, r1
 800a276:	465e      	mov	r6, fp
 800a278:	46aa      	mov	sl, r5
 800a27a:	46a9      	mov	r9, r5
 800a27c:	9501      	str	r5, [sp, #4]
 800a27e:	68a2      	ldr	r2, [r4, #8]
 800a280:	b152      	cbz	r2, 800a298 <_scanf_float+0x60>
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	781b      	ldrb	r3, [r3, #0]
 800a286:	2b4e      	cmp	r3, #78	; 0x4e
 800a288:	d864      	bhi.n	800a354 <_scanf_float+0x11c>
 800a28a:	2b40      	cmp	r3, #64	; 0x40
 800a28c:	d83c      	bhi.n	800a308 <_scanf_float+0xd0>
 800a28e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a292:	b2c8      	uxtb	r0, r1
 800a294:	280e      	cmp	r0, #14
 800a296:	d93a      	bls.n	800a30e <_scanf_float+0xd6>
 800a298:	f1b9 0f00 	cmp.w	r9, #0
 800a29c:	d003      	beq.n	800a2a6 <_scanf_float+0x6e>
 800a29e:	6823      	ldr	r3, [r4, #0]
 800a2a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a2a4:	6023      	str	r3, [r4, #0]
 800a2a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a2aa:	f1ba 0f01 	cmp.w	sl, #1
 800a2ae:	f200 8113 	bhi.w	800a4d8 <_scanf_float+0x2a0>
 800a2b2:	455e      	cmp	r6, fp
 800a2b4:	f200 8105 	bhi.w	800a4c2 <_scanf_float+0x28a>
 800a2b8:	2501      	movs	r5, #1
 800a2ba:	4628      	mov	r0, r5
 800a2bc:	b007      	add	sp, #28
 800a2be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2c2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a2c6:	2a0d      	cmp	r2, #13
 800a2c8:	d8e6      	bhi.n	800a298 <_scanf_float+0x60>
 800a2ca:	a101      	add	r1, pc, #4	; (adr r1, 800a2d0 <_scanf_float+0x98>)
 800a2cc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a2d0:	0800a40f 	.word	0x0800a40f
 800a2d4:	0800a299 	.word	0x0800a299
 800a2d8:	0800a299 	.word	0x0800a299
 800a2dc:	0800a299 	.word	0x0800a299
 800a2e0:	0800a46f 	.word	0x0800a46f
 800a2e4:	0800a447 	.word	0x0800a447
 800a2e8:	0800a299 	.word	0x0800a299
 800a2ec:	0800a299 	.word	0x0800a299
 800a2f0:	0800a41d 	.word	0x0800a41d
 800a2f4:	0800a299 	.word	0x0800a299
 800a2f8:	0800a299 	.word	0x0800a299
 800a2fc:	0800a299 	.word	0x0800a299
 800a300:	0800a299 	.word	0x0800a299
 800a304:	0800a3d5 	.word	0x0800a3d5
 800a308:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a30c:	e7db      	b.n	800a2c6 <_scanf_float+0x8e>
 800a30e:	290e      	cmp	r1, #14
 800a310:	d8c2      	bhi.n	800a298 <_scanf_float+0x60>
 800a312:	a001      	add	r0, pc, #4	; (adr r0, 800a318 <_scanf_float+0xe0>)
 800a314:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a318:	0800a3c7 	.word	0x0800a3c7
 800a31c:	0800a299 	.word	0x0800a299
 800a320:	0800a3c7 	.word	0x0800a3c7
 800a324:	0800a45b 	.word	0x0800a45b
 800a328:	0800a299 	.word	0x0800a299
 800a32c:	0800a375 	.word	0x0800a375
 800a330:	0800a3b1 	.word	0x0800a3b1
 800a334:	0800a3b1 	.word	0x0800a3b1
 800a338:	0800a3b1 	.word	0x0800a3b1
 800a33c:	0800a3b1 	.word	0x0800a3b1
 800a340:	0800a3b1 	.word	0x0800a3b1
 800a344:	0800a3b1 	.word	0x0800a3b1
 800a348:	0800a3b1 	.word	0x0800a3b1
 800a34c:	0800a3b1 	.word	0x0800a3b1
 800a350:	0800a3b1 	.word	0x0800a3b1
 800a354:	2b6e      	cmp	r3, #110	; 0x6e
 800a356:	d809      	bhi.n	800a36c <_scanf_float+0x134>
 800a358:	2b60      	cmp	r3, #96	; 0x60
 800a35a:	d8b2      	bhi.n	800a2c2 <_scanf_float+0x8a>
 800a35c:	2b54      	cmp	r3, #84	; 0x54
 800a35e:	d077      	beq.n	800a450 <_scanf_float+0x218>
 800a360:	2b59      	cmp	r3, #89	; 0x59
 800a362:	d199      	bne.n	800a298 <_scanf_float+0x60>
 800a364:	2d07      	cmp	r5, #7
 800a366:	d197      	bne.n	800a298 <_scanf_float+0x60>
 800a368:	2508      	movs	r5, #8
 800a36a:	e029      	b.n	800a3c0 <_scanf_float+0x188>
 800a36c:	2b74      	cmp	r3, #116	; 0x74
 800a36e:	d06f      	beq.n	800a450 <_scanf_float+0x218>
 800a370:	2b79      	cmp	r3, #121	; 0x79
 800a372:	e7f6      	b.n	800a362 <_scanf_float+0x12a>
 800a374:	6821      	ldr	r1, [r4, #0]
 800a376:	05c8      	lsls	r0, r1, #23
 800a378:	d51a      	bpl.n	800a3b0 <_scanf_float+0x178>
 800a37a:	9b02      	ldr	r3, [sp, #8]
 800a37c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a380:	6021      	str	r1, [r4, #0]
 800a382:	f109 0901 	add.w	r9, r9, #1
 800a386:	b11b      	cbz	r3, 800a390 <_scanf_float+0x158>
 800a388:	3b01      	subs	r3, #1
 800a38a:	3201      	adds	r2, #1
 800a38c:	9302      	str	r3, [sp, #8]
 800a38e:	60a2      	str	r2, [r4, #8]
 800a390:	68a3      	ldr	r3, [r4, #8]
 800a392:	3b01      	subs	r3, #1
 800a394:	60a3      	str	r3, [r4, #8]
 800a396:	6923      	ldr	r3, [r4, #16]
 800a398:	3301      	adds	r3, #1
 800a39a:	6123      	str	r3, [r4, #16]
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	3b01      	subs	r3, #1
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	607b      	str	r3, [r7, #4]
 800a3a4:	f340 8084 	ble.w	800a4b0 <_scanf_float+0x278>
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	603b      	str	r3, [r7, #0]
 800a3ae:	e766      	b.n	800a27e <_scanf_float+0x46>
 800a3b0:	eb1a 0f05 	cmn.w	sl, r5
 800a3b4:	f47f af70 	bne.w	800a298 <_scanf_float+0x60>
 800a3b8:	6822      	ldr	r2, [r4, #0]
 800a3ba:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a3be:	6022      	str	r2, [r4, #0]
 800a3c0:	f806 3b01 	strb.w	r3, [r6], #1
 800a3c4:	e7e4      	b.n	800a390 <_scanf_float+0x158>
 800a3c6:	6822      	ldr	r2, [r4, #0]
 800a3c8:	0610      	lsls	r0, r2, #24
 800a3ca:	f57f af65 	bpl.w	800a298 <_scanf_float+0x60>
 800a3ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a3d2:	e7f4      	b.n	800a3be <_scanf_float+0x186>
 800a3d4:	f1ba 0f00 	cmp.w	sl, #0
 800a3d8:	d10e      	bne.n	800a3f8 <_scanf_float+0x1c0>
 800a3da:	f1b9 0f00 	cmp.w	r9, #0
 800a3de:	d10e      	bne.n	800a3fe <_scanf_float+0x1c6>
 800a3e0:	6822      	ldr	r2, [r4, #0]
 800a3e2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a3e6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a3ea:	d108      	bne.n	800a3fe <_scanf_float+0x1c6>
 800a3ec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a3f0:	6022      	str	r2, [r4, #0]
 800a3f2:	f04f 0a01 	mov.w	sl, #1
 800a3f6:	e7e3      	b.n	800a3c0 <_scanf_float+0x188>
 800a3f8:	f1ba 0f02 	cmp.w	sl, #2
 800a3fc:	d055      	beq.n	800a4aa <_scanf_float+0x272>
 800a3fe:	2d01      	cmp	r5, #1
 800a400:	d002      	beq.n	800a408 <_scanf_float+0x1d0>
 800a402:	2d04      	cmp	r5, #4
 800a404:	f47f af48 	bne.w	800a298 <_scanf_float+0x60>
 800a408:	3501      	adds	r5, #1
 800a40a:	b2ed      	uxtb	r5, r5
 800a40c:	e7d8      	b.n	800a3c0 <_scanf_float+0x188>
 800a40e:	f1ba 0f01 	cmp.w	sl, #1
 800a412:	f47f af41 	bne.w	800a298 <_scanf_float+0x60>
 800a416:	f04f 0a02 	mov.w	sl, #2
 800a41a:	e7d1      	b.n	800a3c0 <_scanf_float+0x188>
 800a41c:	b97d      	cbnz	r5, 800a43e <_scanf_float+0x206>
 800a41e:	f1b9 0f00 	cmp.w	r9, #0
 800a422:	f47f af3c 	bne.w	800a29e <_scanf_float+0x66>
 800a426:	6822      	ldr	r2, [r4, #0]
 800a428:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a42c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a430:	f47f af39 	bne.w	800a2a6 <_scanf_float+0x6e>
 800a434:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a438:	6022      	str	r2, [r4, #0]
 800a43a:	2501      	movs	r5, #1
 800a43c:	e7c0      	b.n	800a3c0 <_scanf_float+0x188>
 800a43e:	2d03      	cmp	r5, #3
 800a440:	d0e2      	beq.n	800a408 <_scanf_float+0x1d0>
 800a442:	2d05      	cmp	r5, #5
 800a444:	e7de      	b.n	800a404 <_scanf_float+0x1cc>
 800a446:	2d02      	cmp	r5, #2
 800a448:	f47f af26 	bne.w	800a298 <_scanf_float+0x60>
 800a44c:	2503      	movs	r5, #3
 800a44e:	e7b7      	b.n	800a3c0 <_scanf_float+0x188>
 800a450:	2d06      	cmp	r5, #6
 800a452:	f47f af21 	bne.w	800a298 <_scanf_float+0x60>
 800a456:	2507      	movs	r5, #7
 800a458:	e7b2      	b.n	800a3c0 <_scanf_float+0x188>
 800a45a:	6822      	ldr	r2, [r4, #0]
 800a45c:	0591      	lsls	r1, r2, #22
 800a45e:	f57f af1b 	bpl.w	800a298 <_scanf_float+0x60>
 800a462:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a466:	6022      	str	r2, [r4, #0]
 800a468:	f8cd 9004 	str.w	r9, [sp, #4]
 800a46c:	e7a8      	b.n	800a3c0 <_scanf_float+0x188>
 800a46e:	6822      	ldr	r2, [r4, #0]
 800a470:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a474:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a478:	d006      	beq.n	800a488 <_scanf_float+0x250>
 800a47a:	0550      	lsls	r0, r2, #21
 800a47c:	f57f af0c 	bpl.w	800a298 <_scanf_float+0x60>
 800a480:	f1b9 0f00 	cmp.w	r9, #0
 800a484:	f43f af0f 	beq.w	800a2a6 <_scanf_float+0x6e>
 800a488:	0591      	lsls	r1, r2, #22
 800a48a:	bf58      	it	pl
 800a48c:	9901      	ldrpl	r1, [sp, #4]
 800a48e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a492:	bf58      	it	pl
 800a494:	eba9 0101 	subpl.w	r1, r9, r1
 800a498:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a49c:	bf58      	it	pl
 800a49e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a4a2:	6022      	str	r2, [r4, #0]
 800a4a4:	f04f 0900 	mov.w	r9, #0
 800a4a8:	e78a      	b.n	800a3c0 <_scanf_float+0x188>
 800a4aa:	f04f 0a03 	mov.w	sl, #3
 800a4ae:	e787      	b.n	800a3c0 <_scanf_float+0x188>
 800a4b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a4b4:	4639      	mov	r1, r7
 800a4b6:	4640      	mov	r0, r8
 800a4b8:	4798      	blx	r3
 800a4ba:	2800      	cmp	r0, #0
 800a4bc:	f43f aedf 	beq.w	800a27e <_scanf_float+0x46>
 800a4c0:	e6ea      	b.n	800a298 <_scanf_float+0x60>
 800a4c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a4c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a4ca:	463a      	mov	r2, r7
 800a4cc:	4640      	mov	r0, r8
 800a4ce:	4798      	blx	r3
 800a4d0:	6923      	ldr	r3, [r4, #16]
 800a4d2:	3b01      	subs	r3, #1
 800a4d4:	6123      	str	r3, [r4, #16]
 800a4d6:	e6ec      	b.n	800a2b2 <_scanf_float+0x7a>
 800a4d8:	1e6b      	subs	r3, r5, #1
 800a4da:	2b06      	cmp	r3, #6
 800a4dc:	d825      	bhi.n	800a52a <_scanf_float+0x2f2>
 800a4de:	2d02      	cmp	r5, #2
 800a4e0:	d836      	bhi.n	800a550 <_scanf_float+0x318>
 800a4e2:	455e      	cmp	r6, fp
 800a4e4:	f67f aee8 	bls.w	800a2b8 <_scanf_float+0x80>
 800a4e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a4ec:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a4f0:	463a      	mov	r2, r7
 800a4f2:	4640      	mov	r0, r8
 800a4f4:	4798      	blx	r3
 800a4f6:	6923      	ldr	r3, [r4, #16]
 800a4f8:	3b01      	subs	r3, #1
 800a4fa:	6123      	str	r3, [r4, #16]
 800a4fc:	e7f1      	b.n	800a4e2 <_scanf_float+0x2aa>
 800a4fe:	9802      	ldr	r0, [sp, #8]
 800a500:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a504:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a508:	9002      	str	r0, [sp, #8]
 800a50a:	463a      	mov	r2, r7
 800a50c:	4640      	mov	r0, r8
 800a50e:	4798      	blx	r3
 800a510:	6923      	ldr	r3, [r4, #16]
 800a512:	3b01      	subs	r3, #1
 800a514:	6123      	str	r3, [r4, #16]
 800a516:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a51a:	fa5f fa8a 	uxtb.w	sl, sl
 800a51e:	f1ba 0f02 	cmp.w	sl, #2
 800a522:	d1ec      	bne.n	800a4fe <_scanf_float+0x2c6>
 800a524:	3d03      	subs	r5, #3
 800a526:	b2ed      	uxtb	r5, r5
 800a528:	1b76      	subs	r6, r6, r5
 800a52a:	6823      	ldr	r3, [r4, #0]
 800a52c:	05da      	lsls	r2, r3, #23
 800a52e:	d52f      	bpl.n	800a590 <_scanf_float+0x358>
 800a530:	055b      	lsls	r3, r3, #21
 800a532:	d510      	bpl.n	800a556 <_scanf_float+0x31e>
 800a534:	455e      	cmp	r6, fp
 800a536:	f67f aebf 	bls.w	800a2b8 <_scanf_float+0x80>
 800a53a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a53e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a542:	463a      	mov	r2, r7
 800a544:	4640      	mov	r0, r8
 800a546:	4798      	blx	r3
 800a548:	6923      	ldr	r3, [r4, #16]
 800a54a:	3b01      	subs	r3, #1
 800a54c:	6123      	str	r3, [r4, #16]
 800a54e:	e7f1      	b.n	800a534 <_scanf_float+0x2fc>
 800a550:	46aa      	mov	sl, r5
 800a552:	9602      	str	r6, [sp, #8]
 800a554:	e7df      	b.n	800a516 <_scanf_float+0x2de>
 800a556:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a55a:	6923      	ldr	r3, [r4, #16]
 800a55c:	2965      	cmp	r1, #101	; 0x65
 800a55e:	f103 33ff 	add.w	r3, r3, #4294967295
 800a562:	f106 35ff 	add.w	r5, r6, #4294967295
 800a566:	6123      	str	r3, [r4, #16]
 800a568:	d00c      	beq.n	800a584 <_scanf_float+0x34c>
 800a56a:	2945      	cmp	r1, #69	; 0x45
 800a56c:	d00a      	beq.n	800a584 <_scanf_float+0x34c>
 800a56e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a572:	463a      	mov	r2, r7
 800a574:	4640      	mov	r0, r8
 800a576:	4798      	blx	r3
 800a578:	6923      	ldr	r3, [r4, #16]
 800a57a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a57e:	3b01      	subs	r3, #1
 800a580:	1eb5      	subs	r5, r6, #2
 800a582:	6123      	str	r3, [r4, #16]
 800a584:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a588:	463a      	mov	r2, r7
 800a58a:	4640      	mov	r0, r8
 800a58c:	4798      	blx	r3
 800a58e:	462e      	mov	r6, r5
 800a590:	6825      	ldr	r5, [r4, #0]
 800a592:	f015 0510 	ands.w	r5, r5, #16
 800a596:	d159      	bne.n	800a64c <_scanf_float+0x414>
 800a598:	7035      	strb	r5, [r6, #0]
 800a59a:	6823      	ldr	r3, [r4, #0]
 800a59c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a5a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5a4:	d11b      	bne.n	800a5de <_scanf_float+0x3a6>
 800a5a6:	9b01      	ldr	r3, [sp, #4]
 800a5a8:	454b      	cmp	r3, r9
 800a5aa:	eba3 0209 	sub.w	r2, r3, r9
 800a5ae:	d123      	bne.n	800a5f8 <_scanf_float+0x3c0>
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	4659      	mov	r1, fp
 800a5b4:	4640      	mov	r0, r8
 800a5b6:	f000 fecd 	bl	800b354 <_strtod_r>
 800a5ba:	6822      	ldr	r2, [r4, #0]
 800a5bc:	9b03      	ldr	r3, [sp, #12]
 800a5be:	f012 0f02 	tst.w	r2, #2
 800a5c2:	ec57 6b10 	vmov	r6, r7, d0
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	d021      	beq.n	800a60e <_scanf_float+0x3d6>
 800a5ca:	9903      	ldr	r1, [sp, #12]
 800a5cc:	1d1a      	adds	r2, r3, #4
 800a5ce:	600a      	str	r2, [r1, #0]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	e9c3 6700 	strd	r6, r7, [r3]
 800a5d6:	68e3      	ldr	r3, [r4, #12]
 800a5d8:	3301      	adds	r3, #1
 800a5da:	60e3      	str	r3, [r4, #12]
 800a5dc:	e66d      	b.n	800a2ba <_scanf_float+0x82>
 800a5de:	9b04      	ldr	r3, [sp, #16]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d0e5      	beq.n	800a5b0 <_scanf_float+0x378>
 800a5e4:	9905      	ldr	r1, [sp, #20]
 800a5e6:	230a      	movs	r3, #10
 800a5e8:	462a      	mov	r2, r5
 800a5ea:	3101      	adds	r1, #1
 800a5ec:	4640      	mov	r0, r8
 800a5ee:	f000 ff39 	bl	800b464 <_strtol_r>
 800a5f2:	9b04      	ldr	r3, [sp, #16]
 800a5f4:	9e05      	ldr	r6, [sp, #20]
 800a5f6:	1ac2      	subs	r2, r0, r3
 800a5f8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a5fc:	429e      	cmp	r6, r3
 800a5fe:	bf28      	it	cs
 800a600:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a604:	4912      	ldr	r1, [pc, #72]	; (800a650 <_scanf_float+0x418>)
 800a606:	4630      	mov	r0, r6
 800a608:	f000 f860 	bl	800a6cc <siprintf>
 800a60c:	e7d0      	b.n	800a5b0 <_scanf_float+0x378>
 800a60e:	9903      	ldr	r1, [sp, #12]
 800a610:	f012 0f04 	tst.w	r2, #4
 800a614:	f103 0204 	add.w	r2, r3, #4
 800a618:	600a      	str	r2, [r1, #0]
 800a61a:	d1d9      	bne.n	800a5d0 <_scanf_float+0x398>
 800a61c:	f8d3 8000 	ldr.w	r8, [r3]
 800a620:	ee10 2a10 	vmov	r2, s0
 800a624:	ee10 0a10 	vmov	r0, s0
 800a628:	463b      	mov	r3, r7
 800a62a:	4639      	mov	r1, r7
 800a62c:	f7f6 fa7e 	bl	8000b2c <__aeabi_dcmpun>
 800a630:	b128      	cbz	r0, 800a63e <_scanf_float+0x406>
 800a632:	4808      	ldr	r0, [pc, #32]	; (800a654 <_scanf_float+0x41c>)
 800a634:	f000 f810 	bl	800a658 <nanf>
 800a638:	ed88 0a00 	vstr	s0, [r8]
 800a63c:	e7cb      	b.n	800a5d6 <_scanf_float+0x39e>
 800a63e:	4630      	mov	r0, r6
 800a640:	4639      	mov	r1, r7
 800a642:	f7f6 fad1 	bl	8000be8 <__aeabi_d2f>
 800a646:	f8c8 0000 	str.w	r0, [r8]
 800a64a:	e7c4      	b.n	800a5d6 <_scanf_float+0x39e>
 800a64c:	2500      	movs	r5, #0
 800a64e:	e634      	b.n	800a2ba <_scanf_float+0x82>
 800a650:	0801d5ac 	.word	0x0801d5ac
 800a654:	0801d9b8 	.word	0x0801d9b8

0800a658 <nanf>:
 800a658:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a660 <nanf+0x8>
 800a65c:	4770      	bx	lr
 800a65e:	bf00      	nop
 800a660:	7fc00000 	.word	0x7fc00000

0800a664 <sniprintf>:
 800a664:	b40c      	push	{r2, r3}
 800a666:	b530      	push	{r4, r5, lr}
 800a668:	4b17      	ldr	r3, [pc, #92]	; (800a6c8 <sniprintf+0x64>)
 800a66a:	1e0c      	subs	r4, r1, #0
 800a66c:	681d      	ldr	r5, [r3, #0]
 800a66e:	b09d      	sub	sp, #116	; 0x74
 800a670:	da08      	bge.n	800a684 <sniprintf+0x20>
 800a672:	238b      	movs	r3, #139	; 0x8b
 800a674:	602b      	str	r3, [r5, #0]
 800a676:	f04f 30ff 	mov.w	r0, #4294967295
 800a67a:	b01d      	add	sp, #116	; 0x74
 800a67c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a680:	b002      	add	sp, #8
 800a682:	4770      	bx	lr
 800a684:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a688:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a68c:	bf14      	ite	ne
 800a68e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a692:	4623      	moveq	r3, r4
 800a694:	9304      	str	r3, [sp, #16]
 800a696:	9307      	str	r3, [sp, #28]
 800a698:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a69c:	9002      	str	r0, [sp, #8]
 800a69e:	9006      	str	r0, [sp, #24]
 800a6a0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a6a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a6a6:	ab21      	add	r3, sp, #132	; 0x84
 800a6a8:	a902      	add	r1, sp, #8
 800a6aa:	4628      	mov	r0, r5
 800a6ac:	9301      	str	r3, [sp, #4]
 800a6ae:	f002 ff03 	bl	800d4b8 <_svfiprintf_r>
 800a6b2:	1c43      	adds	r3, r0, #1
 800a6b4:	bfbc      	itt	lt
 800a6b6:	238b      	movlt	r3, #139	; 0x8b
 800a6b8:	602b      	strlt	r3, [r5, #0]
 800a6ba:	2c00      	cmp	r4, #0
 800a6bc:	d0dd      	beq.n	800a67a <sniprintf+0x16>
 800a6be:	9b02      	ldr	r3, [sp, #8]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	701a      	strb	r2, [r3, #0]
 800a6c4:	e7d9      	b.n	800a67a <sniprintf+0x16>
 800a6c6:	bf00      	nop
 800a6c8:	20000060 	.word	0x20000060

0800a6cc <siprintf>:
 800a6cc:	b40e      	push	{r1, r2, r3}
 800a6ce:	b500      	push	{lr}
 800a6d0:	b09c      	sub	sp, #112	; 0x70
 800a6d2:	ab1d      	add	r3, sp, #116	; 0x74
 800a6d4:	9002      	str	r0, [sp, #8]
 800a6d6:	9006      	str	r0, [sp, #24]
 800a6d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a6dc:	4809      	ldr	r0, [pc, #36]	; (800a704 <siprintf+0x38>)
 800a6de:	9107      	str	r1, [sp, #28]
 800a6e0:	9104      	str	r1, [sp, #16]
 800a6e2:	4909      	ldr	r1, [pc, #36]	; (800a708 <siprintf+0x3c>)
 800a6e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6e8:	9105      	str	r1, [sp, #20]
 800a6ea:	6800      	ldr	r0, [r0, #0]
 800a6ec:	9301      	str	r3, [sp, #4]
 800a6ee:	a902      	add	r1, sp, #8
 800a6f0:	f002 fee2 	bl	800d4b8 <_svfiprintf_r>
 800a6f4:	9b02      	ldr	r3, [sp, #8]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	701a      	strb	r2, [r3, #0]
 800a6fa:	b01c      	add	sp, #112	; 0x70
 800a6fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a700:	b003      	add	sp, #12
 800a702:	4770      	bx	lr
 800a704:	20000060 	.word	0x20000060
 800a708:	ffff0208 	.word	0xffff0208

0800a70c <sulp>:
 800a70c:	b570      	push	{r4, r5, r6, lr}
 800a70e:	4604      	mov	r4, r0
 800a710:	460d      	mov	r5, r1
 800a712:	ec45 4b10 	vmov	d0, r4, r5
 800a716:	4616      	mov	r6, r2
 800a718:	f002 fc2c 	bl	800cf74 <__ulp>
 800a71c:	ec51 0b10 	vmov	r0, r1, d0
 800a720:	b17e      	cbz	r6, 800a742 <sulp+0x36>
 800a722:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a726:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	dd09      	ble.n	800a742 <sulp+0x36>
 800a72e:	051b      	lsls	r3, r3, #20
 800a730:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a734:	2400      	movs	r4, #0
 800a736:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a73a:	4622      	mov	r2, r4
 800a73c:	462b      	mov	r3, r5
 800a73e:	f7f5 ff5b 	bl	80005f8 <__aeabi_dmul>
 800a742:	bd70      	pop	{r4, r5, r6, pc}
 800a744:	0000      	movs	r0, r0
	...

0800a748 <_strtod_l>:
 800a748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a74c:	ed2d 8b02 	vpush	{d8}
 800a750:	b09d      	sub	sp, #116	; 0x74
 800a752:	461f      	mov	r7, r3
 800a754:	2300      	movs	r3, #0
 800a756:	9318      	str	r3, [sp, #96]	; 0x60
 800a758:	4ba2      	ldr	r3, [pc, #648]	; (800a9e4 <_strtod_l+0x29c>)
 800a75a:	9213      	str	r2, [sp, #76]	; 0x4c
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	9305      	str	r3, [sp, #20]
 800a760:	4604      	mov	r4, r0
 800a762:	4618      	mov	r0, r3
 800a764:	4688      	mov	r8, r1
 800a766:	f7f5 fd33 	bl	80001d0 <strlen>
 800a76a:	f04f 0a00 	mov.w	sl, #0
 800a76e:	4605      	mov	r5, r0
 800a770:	f04f 0b00 	mov.w	fp, #0
 800a774:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a778:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a77a:	781a      	ldrb	r2, [r3, #0]
 800a77c:	2a2b      	cmp	r2, #43	; 0x2b
 800a77e:	d04e      	beq.n	800a81e <_strtod_l+0xd6>
 800a780:	d83b      	bhi.n	800a7fa <_strtod_l+0xb2>
 800a782:	2a0d      	cmp	r2, #13
 800a784:	d834      	bhi.n	800a7f0 <_strtod_l+0xa8>
 800a786:	2a08      	cmp	r2, #8
 800a788:	d834      	bhi.n	800a7f4 <_strtod_l+0xac>
 800a78a:	2a00      	cmp	r2, #0
 800a78c:	d03e      	beq.n	800a80c <_strtod_l+0xc4>
 800a78e:	2300      	movs	r3, #0
 800a790:	930a      	str	r3, [sp, #40]	; 0x28
 800a792:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a794:	7833      	ldrb	r3, [r6, #0]
 800a796:	2b30      	cmp	r3, #48	; 0x30
 800a798:	f040 80b0 	bne.w	800a8fc <_strtod_l+0x1b4>
 800a79c:	7873      	ldrb	r3, [r6, #1]
 800a79e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a7a2:	2b58      	cmp	r3, #88	; 0x58
 800a7a4:	d168      	bne.n	800a878 <_strtod_l+0x130>
 800a7a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7a8:	9301      	str	r3, [sp, #4]
 800a7aa:	ab18      	add	r3, sp, #96	; 0x60
 800a7ac:	9702      	str	r7, [sp, #8]
 800a7ae:	9300      	str	r3, [sp, #0]
 800a7b0:	4a8d      	ldr	r2, [pc, #564]	; (800a9e8 <_strtod_l+0x2a0>)
 800a7b2:	ab19      	add	r3, sp, #100	; 0x64
 800a7b4:	a917      	add	r1, sp, #92	; 0x5c
 800a7b6:	4620      	mov	r0, r4
 800a7b8:	f001 fd44 	bl	800c244 <__gethex>
 800a7bc:	f010 0707 	ands.w	r7, r0, #7
 800a7c0:	4605      	mov	r5, r0
 800a7c2:	d005      	beq.n	800a7d0 <_strtod_l+0x88>
 800a7c4:	2f06      	cmp	r7, #6
 800a7c6:	d12c      	bne.n	800a822 <_strtod_l+0xda>
 800a7c8:	3601      	adds	r6, #1
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	9617      	str	r6, [sp, #92]	; 0x5c
 800a7ce:	930a      	str	r3, [sp, #40]	; 0x28
 800a7d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	f040 8590 	bne.w	800b2f8 <_strtod_l+0xbb0>
 800a7d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7da:	b1eb      	cbz	r3, 800a818 <_strtod_l+0xd0>
 800a7dc:	4652      	mov	r2, sl
 800a7de:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a7e2:	ec43 2b10 	vmov	d0, r2, r3
 800a7e6:	b01d      	add	sp, #116	; 0x74
 800a7e8:	ecbd 8b02 	vpop	{d8}
 800a7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7f0:	2a20      	cmp	r2, #32
 800a7f2:	d1cc      	bne.n	800a78e <_strtod_l+0x46>
 800a7f4:	3301      	adds	r3, #1
 800a7f6:	9317      	str	r3, [sp, #92]	; 0x5c
 800a7f8:	e7be      	b.n	800a778 <_strtod_l+0x30>
 800a7fa:	2a2d      	cmp	r2, #45	; 0x2d
 800a7fc:	d1c7      	bne.n	800a78e <_strtod_l+0x46>
 800a7fe:	2201      	movs	r2, #1
 800a800:	920a      	str	r2, [sp, #40]	; 0x28
 800a802:	1c5a      	adds	r2, r3, #1
 800a804:	9217      	str	r2, [sp, #92]	; 0x5c
 800a806:	785b      	ldrb	r3, [r3, #1]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d1c2      	bne.n	800a792 <_strtod_l+0x4a>
 800a80c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a80e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a812:	2b00      	cmp	r3, #0
 800a814:	f040 856e 	bne.w	800b2f4 <_strtod_l+0xbac>
 800a818:	4652      	mov	r2, sl
 800a81a:	465b      	mov	r3, fp
 800a81c:	e7e1      	b.n	800a7e2 <_strtod_l+0x9a>
 800a81e:	2200      	movs	r2, #0
 800a820:	e7ee      	b.n	800a800 <_strtod_l+0xb8>
 800a822:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a824:	b13a      	cbz	r2, 800a836 <_strtod_l+0xee>
 800a826:	2135      	movs	r1, #53	; 0x35
 800a828:	a81a      	add	r0, sp, #104	; 0x68
 800a82a:	f002 fcae 	bl	800d18a <__copybits>
 800a82e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a830:	4620      	mov	r0, r4
 800a832:	f002 f86d 	bl	800c910 <_Bfree>
 800a836:	3f01      	subs	r7, #1
 800a838:	2f04      	cmp	r7, #4
 800a83a:	d806      	bhi.n	800a84a <_strtod_l+0x102>
 800a83c:	e8df f007 	tbb	[pc, r7]
 800a840:	1714030a 	.word	0x1714030a
 800a844:	0a          	.byte	0x0a
 800a845:	00          	.byte	0x00
 800a846:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800a84a:	0728      	lsls	r0, r5, #28
 800a84c:	d5c0      	bpl.n	800a7d0 <_strtod_l+0x88>
 800a84e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a852:	e7bd      	b.n	800a7d0 <_strtod_l+0x88>
 800a854:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800a858:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a85a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a85e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a862:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a866:	e7f0      	b.n	800a84a <_strtod_l+0x102>
 800a868:	f8df b180 	ldr.w	fp, [pc, #384]	; 800a9ec <_strtod_l+0x2a4>
 800a86c:	e7ed      	b.n	800a84a <_strtod_l+0x102>
 800a86e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a872:	f04f 3aff 	mov.w	sl, #4294967295
 800a876:	e7e8      	b.n	800a84a <_strtod_l+0x102>
 800a878:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a87a:	1c5a      	adds	r2, r3, #1
 800a87c:	9217      	str	r2, [sp, #92]	; 0x5c
 800a87e:	785b      	ldrb	r3, [r3, #1]
 800a880:	2b30      	cmp	r3, #48	; 0x30
 800a882:	d0f9      	beq.n	800a878 <_strtod_l+0x130>
 800a884:	2b00      	cmp	r3, #0
 800a886:	d0a3      	beq.n	800a7d0 <_strtod_l+0x88>
 800a888:	2301      	movs	r3, #1
 800a88a:	f04f 0900 	mov.w	r9, #0
 800a88e:	9304      	str	r3, [sp, #16]
 800a890:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a892:	9308      	str	r3, [sp, #32]
 800a894:	f8cd 901c 	str.w	r9, [sp, #28]
 800a898:	464f      	mov	r7, r9
 800a89a:	220a      	movs	r2, #10
 800a89c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a89e:	7806      	ldrb	r6, [r0, #0]
 800a8a0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a8a4:	b2d9      	uxtb	r1, r3
 800a8a6:	2909      	cmp	r1, #9
 800a8a8:	d92a      	bls.n	800a900 <_strtod_l+0x1b8>
 800a8aa:	9905      	ldr	r1, [sp, #20]
 800a8ac:	462a      	mov	r2, r5
 800a8ae:	f002 ff1b 	bl	800d6e8 <strncmp>
 800a8b2:	b398      	cbz	r0, 800a91c <_strtod_l+0x1d4>
 800a8b4:	2000      	movs	r0, #0
 800a8b6:	4632      	mov	r2, r6
 800a8b8:	463d      	mov	r5, r7
 800a8ba:	9005      	str	r0, [sp, #20]
 800a8bc:	4603      	mov	r3, r0
 800a8be:	2a65      	cmp	r2, #101	; 0x65
 800a8c0:	d001      	beq.n	800a8c6 <_strtod_l+0x17e>
 800a8c2:	2a45      	cmp	r2, #69	; 0x45
 800a8c4:	d118      	bne.n	800a8f8 <_strtod_l+0x1b0>
 800a8c6:	b91d      	cbnz	r5, 800a8d0 <_strtod_l+0x188>
 800a8c8:	9a04      	ldr	r2, [sp, #16]
 800a8ca:	4302      	orrs	r2, r0
 800a8cc:	d09e      	beq.n	800a80c <_strtod_l+0xc4>
 800a8ce:	2500      	movs	r5, #0
 800a8d0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800a8d4:	f108 0201 	add.w	r2, r8, #1
 800a8d8:	9217      	str	r2, [sp, #92]	; 0x5c
 800a8da:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a8de:	2a2b      	cmp	r2, #43	; 0x2b
 800a8e0:	d075      	beq.n	800a9ce <_strtod_l+0x286>
 800a8e2:	2a2d      	cmp	r2, #45	; 0x2d
 800a8e4:	d07b      	beq.n	800a9de <_strtod_l+0x296>
 800a8e6:	f04f 0c00 	mov.w	ip, #0
 800a8ea:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a8ee:	2909      	cmp	r1, #9
 800a8f0:	f240 8082 	bls.w	800a9f8 <_strtod_l+0x2b0>
 800a8f4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a8f8:	2600      	movs	r6, #0
 800a8fa:	e09d      	b.n	800aa38 <_strtod_l+0x2f0>
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	e7c4      	b.n	800a88a <_strtod_l+0x142>
 800a900:	2f08      	cmp	r7, #8
 800a902:	bfd8      	it	le
 800a904:	9907      	ldrle	r1, [sp, #28]
 800a906:	f100 0001 	add.w	r0, r0, #1
 800a90a:	bfda      	itte	le
 800a90c:	fb02 3301 	mlale	r3, r2, r1, r3
 800a910:	9307      	strle	r3, [sp, #28]
 800a912:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a916:	3701      	adds	r7, #1
 800a918:	9017      	str	r0, [sp, #92]	; 0x5c
 800a91a:	e7bf      	b.n	800a89c <_strtod_l+0x154>
 800a91c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a91e:	195a      	adds	r2, r3, r5
 800a920:	9217      	str	r2, [sp, #92]	; 0x5c
 800a922:	5d5a      	ldrb	r2, [r3, r5]
 800a924:	2f00      	cmp	r7, #0
 800a926:	d037      	beq.n	800a998 <_strtod_l+0x250>
 800a928:	9005      	str	r0, [sp, #20]
 800a92a:	463d      	mov	r5, r7
 800a92c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a930:	2b09      	cmp	r3, #9
 800a932:	d912      	bls.n	800a95a <_strtod_l+0x212>
 800a934:	2301      	movs	r3, #1
 800a936:	e7c2      	b.n	800a8be <_strtod_l+0x176>
 800a938:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a93a:	1c5a      	adds	r2, r3, #1
 800a93c:	9217      	str	r2, [sp, #92]	; 0x5c
 800a93e:	785a      	ldrb	r2, [r3, #1]
 800a940:	3001      	adds	r0, #1
 800a942:	2a30      	cmp	r2, #48	; 0x30
 800a944:	d0f8      	beq.n	800a938 <_strtod_l+0x1f0>
 800a946:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a94a:	2b08      	cmp	r3, #8
 800a94c:	f200 84d9 	bhi.w	800b302 <_strtod_l+0xbba>
 800a950:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a952:	9005      	str	r0, [sp, #20]
 800a954:	2000      	movs	r0, #0
 800a956:	9308      	str	r3, [sp, #32]
 800a958:	4605      	mov	r5, r0
 800a95a:	3a30      	subs	r2, #48	; 0x30
 800a95c:	f100 0301 	add.w	r3, r0, #1
 800a960:	d014      	beq.n	800a98c <_strtod_l+0x244>
 800a962:	9905      	ldr	r1, [sp, #20]
 800a964:	4419      	add	r1, r3
 800a966:	9105      	str	r1, [sp, #20]
 800a968:	462b      	mov	r3, r5
 800a96a:	eb00 0e05 	add.w	lr, r0, r5
 800a96e:	210a      	movs	r1, #10
 800a970:	4573      	cmp	r3, lr
 800a972:	d113      	bne.n	800a99c <_strtod_l+0x254>
 800a974:	182b      	adds	r3, r5, r0
 800a976:	2b08      	cmp	r3, #8
 800a978:	f105 0501 	add.w	r5, r5, #1
 800a97c:	4405      	add	r5, r0
 800a97e:	dc1c      	bgt.n	800a9ba <_strtod_l+0x272>
 800a980:	9907      	ldr	r1, [sp, #28]
 800a982:	230a      	movs	r3, #10
 800a984:	fb03 2301 	mla	r3, r3, r1, r2
 800a988:	9307      	str	r3, [sp, #28]
 800a98a:	2300      	movs	r3, #0
 800a98c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a98e:	1c51      	adds	r1, r2, #1
 800a990:	9117      	str	r1, [sp, #92]	; 0x5c
 800a992:	7852      	ldrb	r2, [r2, #1]
 800a994:	4618      	mov	r0, r3
 800a996:	e7c9      	b.n	800a92c <_strtod_l+0x1e4>
 800a998:	4638      	mov	r0, r7
 800a99a:	e7d2      	b.n	800a942 <_strtod_l+0x1fa>
 800a99c:	2b08      	cmp	r3, #8
 800a99e:	dc04      	bgt.n	800a9aa <_strtod_l+0x262>
 800a9a0:	9e07      	ldr	r6, [sp, #28]
 800a9a2:	434e      	muls	r6, r1
 800a9a4:	9607      	str	r6, [sp, #28]
 800a9a6:	3301      	adds	r3, #1
 800a9a8:	e7e2      	b.n	800a970 <_strtod_l+0x228>
 800a9aa:	f103 0c01 	add.w	ip, r3, #1
 800a9ae:	f1bc 0f10 	cmp.w	ip, #16
 800a9b2:	bfd8      	it	le
 800a9b4:	fb01 f909 	mulle.w	r9, r1, r9
 800a9b8:	e7f5      	b.n	800a9a6 <_strtod_l+0x25e>
 800a9ba:	2d10      	cmp	r5, #16
 800a9bc:	bfdc      	itt	le
 800a9be:	230a      	movle	r3, #10
 800a9c0:	fb03 2909 	mlale	r9, r3, r9, r2
 800a9c4:	e7e1      	b.n	800a98a <_strtod_l+0x242>
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	9305      	str	r3, [sp, #20]
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	e77c      	b.n	800a8c8 <_strtod_l+0x180>
 800a9ce:	f04f 0c00 	mov.w	ip, #0
 800a9d2:	f108 0202 	add.w	r2, r8, #2
 800a9d6:	9217      	str	r2, [sp, #92]	; 0x5c
 800a9d8:	f898 2002 	ldrb.w	r2, [r8, #2]
 800a9dc:	e785      	b.n	800a8ea <_strtod_l+0x1a2>
 800a9de:	f04f 0c01 	mov.w	ip, #1
 800a9e2:	e7f6      	b.n	800a9d2 <_strtod_l+0x28a>
 800a9e4:	0801d800 	.word	0x0801d800
 800a9e8:	0801d5b4 	.word	0x0801d5b4
 800a9ec:	7ff00000 	.word	0x7ff00000
 800a9f0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a9f2:	1c51      	adds	r1, r2, #1
 800a9f4:	9117      	str	r1, [sp, #92]	; 0x5c
 800a9f6:	7852      	ldrb	r2, [r2, #1]
 800a9f8:	2a30      	cmp	r2, #48	; 0x30
 800a9fa:	d0f9      	beq.n	800a9f0 <_strtod_l+0x2a8>
 800a9fc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800aa00:	2908      	cmp	r1, #8
 800aa02:	f63f af79 	bhi.w	800a8f8 <_strtod_l+0x1b0>
 800aa06:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800aa0a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aa0c:	9206      	str	r2, [sp, #24]
 800aa0e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aa10:	1c51      	adds	r1, r2, #1
 800aa12:	9117      	str	r1, [sp, #92]	; 0x5c
 800aa14:	7852      	ldrb	r2, [r2, #1]
 800aa16:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800aa1a:	2e09      	cmp	r6, #9
 800aa1c:	d937      	bls.n	800aa8e <_strtod_l+0x346>
 800aa1e:	9e06      	ldr	r6, [sp, #24]
 800aa20:	1b89      	subs	r1, r1, r6
 800aa22:	2908      	cmp	r1, #8
 800aa24:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800aa28:	dc02      	bgt.n	800aa30 <_strtod_l+0x2e8>
 800aa2a:	4576      	cmp	r6, lr
 800aa2c:	bfa8      	it	ge
 800aa2e:	4676      	movge	r6, lr
 800aa30:	f1bc 0f00 	cmp.w	ip, #0
 800aa34:	d000      	beq.n	800aa38 <_strtod_l+0x2f0>
 800aa36:	4276      	negs	r6, r6
 800aa38:	2d00      	cmp	r5, #0
 800aa3a:	d14d      	bne.n	800aad8 <_strtod_l+0x390>
 800aa3c:	9904      	ldr	r1, [sp, #16]
 800aa3e:	4301      	orrs	r1, r0
 800aa40:	f47f aec6 	bne.w	800a7d0 <_strtod_l+0x88>
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	f47f aee1 	bne.w	800a80c <_strtod_l+0xc4>
 800aa4a:	2a69      	cmp	r2, #105	; 0x69
 800aa4c:	d027      	beq.n	800aa9e <_strtod_l+0x356>
 800aa4e:	dc24      	bgt.n	800aa9a <_strtod_l+0x352>
 800aa50:	2a49      	cmp	r2, #73	; 0x49
 800aa52:	d024      	beq.n	800aa9e <_strtod_l+0x356>
 800aa54:	2a4e      	cmp	r2, #78	; 0x4e
 800aa56:	f47f aed9 	bne.w	800a80c <_strtod_l+0xc4>
 800aa5a:	499f      	ldr	r1, [pc, #636]	; (800acd8 <_strtod_l+0x590>)
 800aa5c:	a817      	add	r0, sp, #92	; 0x5c
 800aa5e:	f001 fe49 	bl	800c6f4 <__match>
 800aa62:	2800      	cmp	r0, #0
 800aa64:	f43f aed2 	beq.w	800a80c <_strtod_l+0xc4>
 800aa68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aa6a:	781b      	ldrb	r3, [r3, #0]
 800aa6c:	2b28      	cmp	r3, #40	; 0x28
 800aa6e:	d12d      	bne.n	800aacc <_strtod_l+0x384>
 800aa70:	499a      	ldr	r1, [pc, #616]	; (800acdc <_strtod_l+0x594>)
 800aa72:	aa1a      	add	r2, sp, #104	; 0x68
 800aa74:	a817      	add	r0, sp, #92	; 0x5c
 800aa76:	f001 fe51 	bl	800c71c <__hexnan>
 800aa7a:	2805      	cmp	r0, #5
 800aa7c:	d126      	bne.n	800aacc <_strtod_l+0x384>
 800aa7e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aa80:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800aa84:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800aa88:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800aa8c:	e6a0      	b.n	800a7d0 <_strtod_l+0x88>
 800aa8e:	210a      	movs	r1, #10
 800aa90:	fb01 2e0e 	mla	lr, r1, lr, r2
 800aa94:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800aa98:	e7b9      	b.n	800aa0e <_strtod_l+0x2c6>
 800aa9a:	2a6e      	cmp	r2, #110	; 0x6e
 800aa9c:	e7db      	b.n	800aa56 <_strtod_l+0x30e>
 800aa9e:	4990      	ldr	r1, [pc, #576]	; (800ace0 <_strtod_l+0x598>)
 800aaa0:	a817      	add	r0, sp, #92	; 0x5c
 800aaa2:	f001 fe27 	bl	800c6f4 <__match>
 800aaa6:	2800      	cmp	r0, #0
 800aaa8:	f43f aeb0 	beq.w	800a80c <_strtod_l+0xc4>
 800aaac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aaae:	498d      	ldr	r1, [pc, #564]	; (800ace4 <_strtod_l+0x59c>)
 800aab0:	3b01      	subs	r3, #1
 800aab2:	a817      	add	r0, sp, #92	; 0x5c
 800aab4:	9317      	str	r3, [sp, #92]	; 0x5c
 800aab6:	f001 fe1d 	bl	800c6f4 <__match>
 800aaba:	b910      	cbnz	r0, 800aac2 <_strtod_l+0x37a>
 800aabc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aabe:	3301      	adds	r3, #1
 800aac0:	9317      	str	r3, [sp, #92]	; 0x5c
 800aac2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800acf4 <_strtod_l+0x5ac>
 800aac6:	f04f 0a00 	mov.w	sl, #0
 800aaca:	e681      	b.n	800a7d0 <_strtod_l+0x88>
 800aacc:	4886      	ldr	r0, [pc, #536]	; (800ace8 <_strtod_l+0x5a0>)
 800aace:	f002 fdf3 	bl	800d6b8 <nan>
 800aad2:	ec5b ab10 	vmov	sl, fp, d0
 800aad6:	e67b      	b.n	800a7d0 <_strtod_l+0x88>
 800aad8:	9b05      	ldr	r3, [sp, #20]
 800aada:	9807      	ldr	r0, [sp, #28]
 800aadc:	1af3      	subs	r3, r6, r3
 800aade:	2f00      	cmp	r7, #0
 800aae0:	bf08      	it	eq
 800aae2:	462f      	moveq	r7, r5
 800aae4:	2d10      	cmp	r5, #16
 800aae6:	9306      	str	r3, [sp, #24]
 800aae8:	46a8      	mov	r8, r5
 800aaea:	bfa8      	it	ge
 800aaec:	f04f 0810 	movge.w	r8, #16
 800aaf0:	f7f5 fd08 	bl	8000504 <__aeabi_ui2d>
 800aaf4:	2d09      	cmp	r5, #9
 800aaf6:	4682      	mov	sl, r0
 800aaf8:	468b      	mov	fp, r1
 800aafa:	dd13      	ble.n	800ab24 <_strtod_l+0x3dc>
 800aafc:	4b7b      	ldr	r3, [pc, #492]	; (800acec <_strtod_l+0x5a4>)
 800aafe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ab02:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ab06:	f7f5 fd77 	bl	80005f8 <__aeabi_dmul>
 800ab0a:	4682      	mov	sl, r0
 800ab0c:	4648      	mov	r0, r9
 800ab0e:	468b      	mov	fp, r1
 800ab10:	f7f5 fcf8 	bl	8000504 <__aeabi_ui2d>
 800ab14:	4602      	mov	r2, r0
 800ab16:	460b      	mov	r3, r1
 800ab18:	4650      	mov	r0, sl
 800ab1a:	4659      	mov	r1, fp
 800ab1c:	f7f5 fbb6 	bl	800028c <__adddf3>
 800ab20:	4682      	mov	sl, r0
 800ab22:	468b      	mov	fp, r1
 800ab24:	2d0f      	cmp	r5, #15
 800ab26:	dc38      	bgt.n	800ab9a <_strtod_l+0x452>
 800ab28:	9b06      	ldr	r3, [sp, #24]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	f43f ae50 	beq.w	800a7d0 <_strtod_l+0x88>
 800ab30:	dd24      	ble.n	800ab7c <_strtod_l+0x434>
 800ab32:	2b16      	cmp	r3, #22
 800ab34:	dc0b      	bgt.n	800ab4e <_strtod_l+0x406>
 800ab36:	496d      	ldr	r1, [pc, #436]	; (800acec <_strtod_l+0x5a4>)
 800ab38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ab3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab40:	4652      	mov	r2, sl
 800ab42:	465b      	mov	r3, fp
 800ab44:	f7f5 fd58 	bl	80005f8 <__aeabi_dmul>
 800ab48:	4682      	mov	sl, r0
 800ab4a:	468b      	mov	fp, r1
 800ab4c:	e640      	b.n	800a7d0 <_strtod_l+0x88>
 800ab4e:	9a06      	ldr	r2, [sp, #24]
 800ab50:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800ab54:	4293      	cmp	r3, r2
 800ab56:	db20      	blt.n	800ab9a <_strtod_l+0x452>
 800ab58:	4c64      	ldr	r4, [pc, #400]	; (800acec <_strtod_l+0x5a4>)
 800ab5a:	f1c5 050f 	rsb	r5, r5, #15
 800ab5e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ab62:	4652      	mov	r2, sl
 800ab64:	465b      	mov	r3, fp
 800ab66:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab6a:	f7f5 fd45 	bl	80005f8 <__aeabi_dmul>
 800ab6e:	9b06      	ldr	r3, [sp, #24]
 800ab70:	1b5d      	subs	r5, r3, r5
 800ab72:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ab76:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ab7a:	e7e3      	b.n	800ab44 <_strtod_l+0x3fc>
 800ab7c:	9b06      	ldr	r3, [sp, #24]
 800ab7e:	3316      	adds	r3, #22
 800ab80:	db0b      	blt.n	800ab9a <_strtod_l+0x452>
 800ab82:	9b05      	ldr	r3, [sp, #20]
 800ab84:	1b9e      	subs	r6, r3, r6
 800ab86:	4b59      	ldr	r3, [pc, #356]	; (800acec <_strtod_l+0x5a4>)
 800ab88:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800ab8c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ab90:	4650      	mov	r0, sl
 800ab92:	4659      	mov	r1, fp
 800ab94:	f7f5 fe5a 	bl	800084c <__aeabi_ddiv>
 800ab98:	e7d6      	b.n	800ab48 <_strtod_l+0x400>
 800ab9a:	9b06      	ldr	r3, [sp, #24]
 800ab9c:	eba5 0808 	sub.w	r8, r5, r8
 800aba0:	4498      	add	r8, r3
 800aba2:	f1b8 0f00 	cmp.w	r8, #0
 800aba6:	dd74      	ble.n	800ac92 <_strtod_l+0x54a>
 800aba8:	f018 030f 	ands.w	r3, r8, #15
 800abac:	d00a      	beq.n	800abc4 <_strtod_l+0x47c>
 800abae:	494f      	ldr	r1, [pc, #316]	; (800acec <_strtod_l+0x5a4>)
 800abb0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800abb4:	4652      	mov	r2, sl
 800abb6:	465b      	mov	r3, fp
 800abb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abbc:	f7f5 fd1c 	bl	80005f8 <__aeabi_dmul>
 800abc0:	4682      	mov	sl, r0
 800abc2:	468b      	mov	fp, r1
 800abc4:	f038 080f 	bics.w	r8, r8, #15
 800abc8:	d04f      	beq.n	800ac6a <_strtod_l+0x522>
 800abca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800abce:	dd22      	ble.n	800ac16 <_strtod_l+0x4ce>
 800abd0:	2500      	movs	r5, #0
 800abd2:	462e      	mov	r6, r5
 800abd4:	9507      	str	r5, [sp, #28]
 800abd6:	9505      	str	r5, [sp, #20]
 800abd8:	2322      	movs	r3, #34	; 0x22
 800abda:	f8df b118 	ldr.w	fp, [pc, #280]	; 800acf4 <_strtod_l+0x5ac>
 800abde:	6023      	str	r3, [r4, #0]
 800abe0:	f04f 0a00 	mov.w	sl, #0
 800abe4:	9b07      	ldr	r3, [sp, #28]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	f43f adf2 	beq.w	800a7d0 <_strtod_l+0x88>
 800abec:	9918      	ldr	r1, [sp, #96]	; 0x60
 800abee:	4620      	mov	r0, r4
 800abf0:	f001 fe8e 	bl	800c910 <_Bfree>
 800abf4:	9905      	ldr	r1, [sp, #20]
 800abf6:	4620      	mov	r0, r4
 800abf8:	f001 fe8a 	bl	800c910 <_Bfree>
 800abfc:	4631      	mov	r1, r6
 800abfe:	4620      	mov	r0, r4
 800ac00:	f001 fe86 	bl	800c910 <_Bfree>
 800ac04:	9907      	ldr	r1, [sp, #28]
 800ac06:	4620      	mov	r0, r4
 800ac08:	f001 fe82 	bl	800c910 <_Bfree>
 800ac0c:	4629      	mov	r1, r5
 800ac0e:	4620      	mov	r0, r4
 800ac10:	f001 fe7e 	bl	800c910 <_Bfree>
 800ac14:	e5dc      	b.n	800a7d0 <_strtod_l+0x88>
 800ac16:	4b36      	ldr	r3, [pc, #216]	; (800acf0 <_strtod_l+0x5a8>)
 800ac18:	9304      	str	r3, [sp, #16]
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800ac20:	4650      	mov	r0, sl
 800ac22:	4659      	mov	r1, fp
 800ac24:	4699      	mov	r9, r3
 800ac26:	f1b8 0f01 	cmp.w	r8, #1
 800ac2a:	dc21      	bgt.n	800ac70 <_strtod_l+0x528>
 800ac2c:	b10b      	cbz	r3, 800ac32 <_strtod_l+0x4ea>
 800ac2e:	4682      	mov	sl, r0
 800ac30:	468b      	mov	fp, r1
 800ac32:	4b2f      	ldr	r3, [pc, #188]	; (800acf0 <_strtod_l+0x5a8>)
 800ac34:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ac38:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800ac3c:	4652      	mov	r2, sl
 800ac3e:	465b      	mov	r3, fp
 800ac40:	e9d9 0100 	ldrd	r0, r1, [r9]
 800ac44:	f7f5 fcd8 	bl	80005f8 <__aeabi_dmul>
 800ac48:	4b2a      	ldr	r3, [pc, #168]	; (800acf4 <_strtod_l+0x5ac>)
 800ac4a:	460a      	mov	r2, r1
 800ac4c:	400b      	ands	r3, r1
 800ac4e:	492a      	ldr	r1, [pc, #168]	; (800acf8 <_strtod_l+0x5b0>)
 800ac50:	428b      	cmp	r3, r1
 800ac52:	4682      	mov	sl, r0
 800ac54:	d8bc      	bhi.n	800abd0 <_strtod_l+0x488>
 800ac56:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ac5a:	428b      	cmp	r3, r1
 800ac5c:	bf86      	itte	hi
 800ac5e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800acfc <_strtod_l+0x5b4>
 800ac62:	f04f 3aff 	movhi.w	sl, #4294967295
 800ac66:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	9304      	str	r3, [sp, #16]
 800ac6e:	e084      	b.n	800ad7a <_strtod_l+0x632>
 800ac70:	f018 0f01 	tst.w	r8, #1
 800ac74:	d005      	beq.n	800ac82 <_strtod_l+0x53a>
 800ac76:	9b04      	ldr	r3, [sp, #16]
 800ac78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac7c:	f7f5 fcbc 	bl	80005f8 <__aeabi_dmul>
 800ac80:	2301      	movs	r3, #1
 800ac82:	9a04      	ldr	r2, [sp, #16]
 800ac84:	3208      	adds	r2, #8
 800ac86:	f109 0901 	add.w	r9, r9, #1
 800ac8a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ac8e:	9204      	str	r2, [sp, #16]
 800ac90:	e7c9      	b.n	800ac26 <_strtod_l+0x4de>
 800ac92:	d0ea      	beq.n	800ac6a <_strtod_l+0x522>
 800ac94:	f1c8 0800 	rsb	r8, r8, #0
 800ac98:	f018 020f 	ands.w	r2, r8, #15
 800ac9c:	d00a      	beq.n	800acb4 <_strtod_l+0x56c>
 800ac9e:	4b13      	ldr	r3, [pc, #76]	; (800acec <_strtod_l+0x5a4>)
 800aca0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aca4:	4650      	mov	r0, sl
 800aca6:	4659      	mov	r1, fp
 800aca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acac:	f7f5 fdce 	bl	800084c <__aeabi_ddiv>
 800acb0:	4682      	mov	sl, r0
 800acb2:	468b      	mov	fp, r1
 800acb4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800acb8:	d0d7      	beq.n	800ac6a <_strtod_l+0x522>
 800acba:	f1b8 0f1f 	cmp.w	r8, #31
 800acbe:	dd1f      	ble.n	800ad00 <_strtod_l+0x5b8>
 800acc0:	2500      	movs	r5, #0
 800acc2:	462e      	mov	r6, r5
 800acc4:	9507      	str	r5, [sp, #28]
 800acc6:	9505      	str	r5, [sp, #20]
 800acc8:	2322      	movs	r3, #34	; 0x22
 800acca:	f04f 0a00 	mov.w	sl, #0
 800acce:	f04f 0b00 	mov.w	fp, #0
 800acd2:	6023      	str	r3, [r4, #0]
 800acd4:	e786      	b.n	800abe4 <_strtod_l+0x49c>
 800acd6:	bf00      	nop
 800acd8:	0801d585 	.word	0x0801d585
 800acdc:	0801d5c8 	.word	0x0801d5c8
 800ace0:	0801d57d 	.word	0x0801d57d
 800ace4:	0801d70c 	.word	0x0801d70c
 800ace8:	0801d9b8 	.word	0x0801d9b8
 800acec:	0801d898 	.word	0x0801d898
 800acf0:	0801d870 	.word	0x0801d870
 800acf4:	7ff00000 	.word	0x7ff00000
 800acf8:	7ca00000 	.word	0x7ca00000
 800acfc:	7fefffff 	.word	0x7fefffff
 800ad00:	f018 0310 	ands.w	r3, r8, #16
 800ad04:	bf18      	it	ne
 800ad06:	236a      	movne	r3, #106	; 0x6a
 800ad08:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800b0b8 <_strtod_l+0x970>
 800ad0c:	9304      	str	r3, [sp, #16]
 800ad0e:	4650      	mov	r0, sl
 800ad10:	4659      	mov	r1, fp
 800ad12:	2300      	movs	r3, #0
 800ad14:	f018 0f01 	tst.w	r8, #1
 800ad18:	d004      	beq.n	800ad24 <_strtod_l+0x5dc>
 800ad1a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ad1e:	f7f5 fc6b 	bl	80005f8 <__aeabi_dmul>
 800ad22:	2301      	movs	r3, #1
 800ad24:	ea5f 0868 	movs.w	r8, r8, asr #1
 800ad28:	f109 0908 	add.w	r9, r9, #8
 800ad2c:	d1f2      	bne.n	800ad14 <_strtod_l+0x5cc>
 800ad2e:	b10b      	cbz	r3, 800ad34 <_strtod_l+0x5ec>
 800ad30:	4682      	mov	sl, r0
 800ad32:	468b      	mov	fp, r1
 800ad34:	9b04      	ldr	r3, [sp, #16]
 800ad36:	b1c3      	cbz	r3, 800ad6a <_strtod_l+0x622>
 800ad38:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ad3c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	4659      	mov	r1, fp
 800ad44:	dd11      	ble.n	800ad6a <_strtod_l+0x622>
 800ad46:	2b1f      	cmp	r3, #31
 800ad48:	f340 8124 	ble.w	800af94 <_strtod_l+0x84c>
 800ad4c:	2b34      	cmp	r3, #52	; 0x34
 800ad4e:	bfde      	ittt	le
 800ad50:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800ad54:	f04f 33ff 	movle.w	r3, #4294967295
 800ad58:	fa03 f202 	lslle.w	r2, r3, r2
 800ad5c:	f04f 0a00 	mov.w	sl, #0
 800ad60:	bfcc      	ite	gt
 800ad62:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ad66:	ea02 0b01 	andle.w	fp, r2, r1
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	4650      	mov	r0, sl
 800ad70:	4659      	mov	r1, fp
 800ad72:	f7f5 fea9 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad76:	2800      	cmp	r0, #0
 800ad78:	d1a2      	bne.n	800acc0 <_strtod_l+0x578>
 800ad7a:	9b07      	ldr	r3, [sp, #28]
 800ad7c:	9300      	str	r3, [sp, #0]
 800ad7e:	9908      	ldr	r1, [sp, #32]
 800ad80:	462b      	mov	r3, r5
 800ad82:	463a      	mov	r2, r7
 800ad84:	4620      	mov	r0, r4
 800ad86:	f001 fe2b 	bl	800c9e0 <__s2b>
 800ad8a:	9007      	str	r0, [sp, #28]
 800ad8c:	2800      	cmp	r0, #0
 800ad8e:	f43f af1f 	beq.w	800abd0 <_strtod_l+0x488>
 800ad92:	9b05      	ldr	r3, [sp, #20]
 800ad94:	1b9e      	subs	r6, r3, r6
 800ad96:	9b06      	ldr	r3, [sp, #24]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	bfb4      	ite	lt
 800ad9c:	4633      	movlt	r3, r6
 800ad9e:	2300      	movge	r3, #0
 800ada0:	930c      	str	r3, [sp, #48]	; 0x30
 800ada2:	9b06      	ldr	r3, [sp, #24]
 800ada4:	2500      	movs	r5, #0
 800ada6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800adaa:	9312      	str	r3, [sp, #72]	; 0x48
 800adac:	462e      	mov	r6, r5
 800adae:	9b07      	ldr	r3, [sp, #28]
 800adb0:	4620      	mov	r0, r4
 800adb2:	6859      	ldr	r1, [r3, #4]
 800adb4:	f001 fd6c 	bl	800c890 <_Balloc>
 800adb8:	9005      	str	r0, [sp, #20]
 800adba:	2800      	cmp	r0, #0
 800adbc:	f43f af0c 	beq.w	800abd8 <_strtod_l+0x490>
 800adc0:	9b07      	ldr	r3, [sp, #28]
 800adc2:	691a      	ldr	r2, [r3, #16]
 800adc4:	3202      	adds	r2, #2
 800adc6:	f103 010c 	add.w	r1, r3, #12
 800adca:	0092      	lsls	r2, r2, #2
 800adcc:	300c      	adds	r0, #12
 800adce:	f7fe fdb3 	bl	8009938 <memcpy>
 800add2:	ec4b ab10 	vmov	d0, sl, fp
 800add6:	aa1a      	add	r2, sp, #104	; 0x68
 800add8:	a919      	add	r1, sp, #100	; 0x64
 800adda:	4620      	mov	r0, r4
 800addc:	f002 f946 	bl	800d06c <__d2b>
 800ade0:	ec4b ab18 	vmov	d8, sl, fp
 800ade4:	9018      	str	r0, [sp, #96]	; 0x60
 800ade6:	2800      	cmp	r0, #0
 800ade8:	f43f aef6 	beq.w	800abd8 <_strtod_l+0x490>
 800adec:	2101      	movs	r1, #1
 800adee:	4620      	mov	r0, r4
 800adf0:	f001 fe90 	bl	800cb14 <__i2b>
 800adf4:	4606      	mov	r6, r0
 800adf6:	2800      	cmp	r0, #0
 800adf8:	f43f aeee 	beq.w	800abd8 <_strtod_l+0x490>
 800adfc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800adfe:	9904      	ldr	r1, [sp, #16]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	bfab      	itete	ge
 800ae04:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800ae06:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800ae08:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800ae0a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800ae0e:	bfac      	ite	ge
 800ae10:	eb03 0902 	addge.w	r9, r3, r2
 800ae14:	1ad7      	sublt	r7, r2, r3
 800ae16:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ae18:	eba3 0801 	sub.w	r8, r3, r1
 800ae1c:	4490      	add	r8, r2
 800ae1e:	4ba1      	ldr	r3, [pc, #644]	; (800b0a4 <_strtod_l+0x95c>)
 800ae20:	f108 38ff 	add.w	r8, r8, #4294967295
 800ae24:	4598      	cmp	r8, r3
 800ae26:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ae2a:	f280 80c7 	bge.w	800afbc <_strtod_l+0x874>
 800ae2e:	eba3 0308 	sub.w	r3, r3, r8
 800ae32:	2b1f      	cmp	r3, #31
 800ae34:	eba2 0203 	sub.w	r2, r2, r3
 800ae38:	f04f 0101 	mov.w	r1, #1
 800ae3c:	f300 80b1 	bgt.w	800afa2 <_strtod_l+0x85a>
 800ae40:	fa01 f303 	lsl.w	r3, r1, r3
 800ae44:	930d      	str	r3, [sp, #52]	; 0x34
 800ae46:	2300      	movs	r3, #0
 800ae48:	9308      	str	r3, [sp, #32]
 800ae4a:	eb09 0802 	add.w	r8, r9, r2
 800ae4e:	9b04      	ldr	r3, [sp, #16]
 800ae50:	45c1      	cmp	r9, r8
 800ae52:	4417      	add	r7, r2
 800ae54:	441f      	add	r7, r3
 800ae56:	464b      	mov	r3, r9
 800ae58:	bfa8      	it	ge
 800ae5a:	4643      	movge	r3, r8
 800ae5c:	42bb      	cmp	r3, r7
 800ae5e:	bfa8      	it	ge
 800ae60:	463b      	movge	r3, r7
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	bfc2      	ittt	gt
 800ae66:	eba8 0803 	subgt.w	r8, r8, r3
 800ae6a:	1aff      	subgt	r7, r7, r3
 800ae6c:	eba9 0903 	subgt.w	r9, r9, r3
 800ae70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	dd17      	ble.n	800aea6 <_strtod_l+0x75e>
 800ae76:	4631      	mov	r1, r6
 800ae78:	461a      	mov	r2, r3
 800ae7a:	4620      	mov	r0, r4
 800ae7c:	f001 ff0a 	bl	800cc94 <__pow5mult>
 800ae80:	4606      	mov	r6, r0
 800ae82:	2800      	cmp	r0, #0
 800ae84:	f43f aea8 	beq.w	800abd8 <_strtod_l+0x490>
 800ae88:	4601      	mov	r1, r0
 800ae8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ae8c:	4620      	mov	r0, r4
 800ae8e:	f001 fe57 	bl	800cb40 <__multiply>
 800ae92:	900b      	str	r0, [sp, #44]	; 0x2c
 800ae94:	2800      	cmp	r0, #0
 800ae96:	f43f ae9f 	beq.w	800abd8 <_strtod_l+0x490>
 800ae9a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ae9c:	4620      	mov	r0, r4
 800ae9e:	f001 fd37 	bl	800c910 <_Bfree>
 800aea2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aea4:	9318      	str	r3, [sp, #96]	; 0x60
 800aea6:	f1b8 0f00 	cmp.w	r8, #0
 800aeaa:	f300 808c 	bgt.w	800afc6 <_strtod_l+0x87e>
 800aeae:	9b06      	ldr	r3, [sp, #24]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	dd08      	ble.n	800aec6 <_strtod_l+0x77e>
 800aeb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aeb6:	9905      	ldr	r1, [sp, #20]
 800aeb8:	4620      	mov	r0, r4
 800aeba:	f001 feeb 	bl	800cc94 <__pow5mult>
 800aebe:	9005      	str	r0, [sp, #20]
 800aec0:	2800      	cmp	r0, #0
 800aec2:	f43f ae89 	beq.w	800abd8 <_strtod_l+0x490>
 800aec6:	2f00      	cmp	r7, #0
 800aec8:	dd08      	ble.n	800aedc <_strtod_l+0x794>
 800aeca:	9905      	ldr	r1, [sp, #20]
 800aecc:	463a      	mov	r2, r7
 800aece:	4620      	mov	r0, r4
 800aed0:	f001 ff3a 	bl	800cd48 <__lshift>
 800aed4:	9005      	str	r0, [sp, #20]
 800aed6:	2800      	cmp	r0, #0
 800aed8:	f43f ae7e 	beq.w	800abd8 <_strtod_l+0x490>
 800aedc:	f1b9 0f00 	cmp.w	r9, #0
 800aee0:	dd08      	ble.n	800aef4 <_strtod_l+0x7ac>
 800aee2:	4631      	mov	r1, r6
 800aee4:	464a      	mov	r2, r9
 800aee6:	4620      	mov	r0, r4
 800aee8:	f001 ff2e 	bl	800cd48 <__lshift>
 800aeec:	4606      	mov	r6, r0
 800aeee:	2800      	cmp	r0, #0
 800aef0:	f43f ae72 	beq.w	800abd8 <_strtod_l+0x490>
 800aef4:	9a05      	ldr	r2, [sp, #20]
 800aef6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800aef8:	4620      	mov	r0, r4
 800aefa:	f001 ffb1 	bl	800ce60 <__mdiff>
 800aefe:	4605      	mov	r5, r0
 800af00:	2800      	cmp	r0, #0
 800af02:	f43f ae69 	beq.w	800abd8 <_strtod_l+0x490>
 800af06:	68c3      	ldr	r3, [r0, #12]
 800af08:	930b      	str	r3, [sp, #44]	; 0x2c
 800af0a:	2300      	movs	r3, #0
 800af0c:	60c3      	str	r3, [r0, #12]
 800af0e:	4631      	mov	r1, r6
 800af10:	f001 ff8a 	bl	800ce28 <__mcmp>
 800af14:	2800      	cmp	r0, #0
 800af16:	da60      	bge.n	800afda <_strtod_l+0x892>
 800af18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af1a:	ea53 030a 	orrs.w	r3, r3, sl
 800af1e:	f040 8082 	bne.w	800b026 <_strtod_l+0x8de>
 800af22:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800af26:	2b00      	cmp	r3, #0
 800af28:	d17d      	bne.n	800b026 <_strtod_l+0x8de>
 800af2a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800af2e:	0d1b      	lsrs	r3, r3, #20
 800af30:	051b      	lsls	r3, r3, #20
 800af32:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800af36:	d976      	bls.n	800b026 <_strtod_l+0x8de>
 800af38:	696b      	ldr	r3, [r5, #20]
 800af3a:	b913      	cbnz	r3, 800af42 <_strtod_l+0x7fa>
 800af3c:	692b      	ldr	r3, [r5, #16]
 800af3e:	2b01      	cmp	r3, #1
 800af40:	dd71      	ble.n	800b026 <_strtod_l+0x8de>
 800af42:	4629      	mov	r1, r5
 800af44:	2201      	movs	r2, #1
 800af46:	4620      	mov	r0, r4
 800af48:	f001 fefe 	bl	800cd48 <__lshift>
 800af4c:	4631      	mov	r1, r6
 800af4e:	4605      	mov	r5, r0
 800af50:	f001 ff6a 	bl	800ce28 <__mcmp>
 800af54:	2800      	cmp	r0, #0
 800af56:	dd66      	ble.n	800b026 <_strtod_l+0x8de>
 800af58:	9904      	ldr	r1, [sp, #16]
 800af5a:	4a53      	ldr	r2, [pc, #332]	; (800b0a8 <_strtod_l+0x960>)
 800af5c:	465b      	mov	r3, fp
 800af5e:	2900      	cmp	r1, #0
 800af60:	f000 8081 	beq.w	800b066 <_strtod_l+0x91e>
 800af64:	ea02 010b 	and.w	r1, r2, fp
 800af68:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800af6c:	dc7b      	bgt.n	800b066 <_strtod_l+0x91e>
 800af6e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800af72:	f77f aea9 	ble.w	800acc8 <_strtod_l+0x580>
 800af76:	4b4d      	ldr	r3, [pc, #308]	; (800b0ac <_strtod_l+0x964>)
 800af78:	4650      	mov	r0, sl
 800af7a:	4659      	mov	r1, fp
 800af7c:	2200      	movs	r2, #0
 800af7e:	f7f5 fb3b 	bl	80005f8 <__aeabi_dmul>
 800af82:	460b      	mov	r3, r1
 800af84:	4303      	orrs	r3, r0
 800af86:	bf08      	it	eq
 800af88:	2322      	moveq	r3, #34	; 0x22
 800af8a:	4682      	mov	sl, r0
 800af8c:	468b      	mov	fp, r1
 800af8e:	bf08      	it	eq
 800af90:	6023      	streq	r3, [r4, #0]
 800af92:	e62b      	b.n	800abec <_strtod_l+0x4a4>
 800af94:	f04f 32ff 	mov.w	r2, #4294967295
 800af98:	fa02 f303 	lsl.w	r3, r2, r3
 800af9c:	ea03 0a0a 	and.w	sl, r3, sl
 800afa0:	e6e3      	b.n	800ad6a <_strtod_l+0x622>
 800afa2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800afa6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800afaa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800afae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800afb2:	fa01 f308 	lsl.w	r3, r1, r8
 800afb6:	9308      	str	r3, [sp, #32]
 800afb8:	910d      	str	r1, [sp, #52]	; 0x34
 800afba:	e746      	b.n	800ae4a <_strtod_l+0x702>
 800afbc:	2300      	movs	r3, #0
 800afbe:	9308      	str	r3, [sp, #32]
 800afc0:	2301      	movs	r3, #1
 800afc2:	930d      	str	r3, [sp, #52]	; 0x34
 800afc4:	e741      	b.n	800ae4a <_strtod_l+0x702>
 800afc6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800afc8:	4642      	mov	r2, r8
 800afca:	4620      	mov	r0, r4
 800afcc:	f001 febc 	bl	800cd48 <__lshift>
 800afd0:	9018      	str	r0, [sp, #96]	; 0x60
 800afd2:	2800      	cmp	r0, #0
 800afd4:	f47f af6b 	bne.w	800aeae <_strtod_l+0x766>
 800afd8:	e5fe      	b.n	800abd8 <_strtod_l+0x490>
 800afda:	465f      	mov	r7, fp
 800afdc:	d16e      	bne.n	800b0bc <_strtod_l+0x974>
 800afde:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800afe0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800afe4:	b342      	cbz	r2, 800b038 <_strtod_l+0x8f0>
 800afe6:	4a32      	ldr	r2, [pc, #200]	; (800b0b0 <_strtod_l+0x968>)
 800afe8:	4293      	cmp	r3, r2
 800afea:	d128      	bne.n	800b03e <_strtod_l+0x8f6>
 800afec:	9b04      	ldr	r3, [sp, #16]
 800afee:	4651      	mov	r1, sl
 800aff0:	b1eb      	cbz	r3, 800b02e <_strtod_l+0x8e6>
 800aff2:	4b2d      	ldr	r3, [pc, #180]	; (800b0a8 <_strtod_l+0x960>)
 800aff4:	403b      	ands	r3, r7
 800aff6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800affa:	f04f 32ff 	mov.w	r2, #4294967295
 800affe:	d819      	bhi.n	800b034 <_strtod_l+0x8ec>
 800b000:	0d1b      	lsrs	r3, r3, #20
 800b002:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b006:	fa02 f303 	lsl.w	r3, r2, r3
 800b00a:	4299      	cmp	r1, r3
 800b00c:	d117      	bne.n	800b03e <_strtod_l+0x8f6>
 800b00e:	4b29      	ldr	r3, [pc, #164]	; (800b0b4 <_strtod_l+0x96c>)
 800b010:	429f      	cmp	r7, r3
 800b012:	d102      	bne.n	800b01a <_strtod_l+0x8d2>
 800b014:	3101      	adds	r1, #1
 800b016:	f43f addf 	beq.w	800abd8 <_strtod_l+0x490>
 800b01a:	4b23      	ldr	r3, [pc, #140]	; (800b0a8 <_strtod_l+0x960>)
 800b01c:	403b      	ands	r3, r7
 800b01e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b022:	f04f 0a00 	mov.w	sl, #0
 800b026:	9b04      	ldr	r3, [sp, #16]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d1a4      	bne.n	800af76 <_strtod_l+0x82e>
 800b02c:	e5de      	b.n	800abec <_strtod_l+0x4a4>
 800b02e:	f04f 33ff 	mov.w	r3, #4294967295
 800b032:	e7ea      	b.n	800b00a <_strtod_l+0x8c2>
 800b034:	4613      	mov	r3, r2
 800b036:	e7e8      	b.n	800b00a <_strtod_l+0x8c2>
 800b038:	ea53 030a 	orrs.w	r3, r3, sl
 800b03c:	d08c      	beq.n	800af58 <_strtod_l+0x810>
 800b03e:	9b08      	ldr	r3, [sp, #32]
 800b040:	b1db      	cbz	r3, 800b07a <_strtod_l+0x932>
 800b042:	423b      	tst	r3, r7
 800b044:	d0ef      	beq.n	800b026 <_strtod_l+0x8de>
 800b046:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b048:	9a04      	ldr	r2, [sp, #16]
 800b04a:	4650      	mov	r0, sl
 800b04c:	4659      	mov	r1, fp
 800b04e:	b1c3      	cbz	r3, 800b082 <_strtod_l+0x93a>
 800b050:	f7ff fb5c 	bl	800a70c <sulp>
 800b054:	4602      	mov	r2, r0
 800b056:	460b      	mov	r3, r1
 800b058:	ec51 0b18 	vmov	r0, r1, d8
 800b05c:	f7f5 f916 	bl	800028c <__adddf3>
 800b060:	4682      	mov	sl, r0
 800b062:	468b      	mov	fp, r1
 800b064:	e7df      	b.n	800b026 <_strtod_l+0x8de>
 800b066:	4013      	ands	r3, r2
 800b068:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b06c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b070:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b074:	f04f 3aff 	mov.w	sl, #4294967295
 800b078:	e7d5      	b.n	800b026 <_strtod_l+0x8de>
 800b07a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b07c:	ea13 0f0a 	tst.w	r3, sl
 800b080:	e7e0      	b.n	800b044 <_strtod_l+0x8fc>
 800b082:	f7ff fb43 	bl	800a70c <sulp>
 800b086:	4602      	mov	r2, r0
 800b088:	460b      	mov	r3, r1
 800b08a:	ec51 0b18 	vmov	r0, r1, d8
 800b08e:	f7f5 f8fb 	bl	8000288 <__aeabi_dsub>
 800b092:	2200      	movs	r2, #0
 800b094:	2300      	movs	r3, #0
 800b096:	4682      	mov	sl, r0
 800b098:	468b      	mov	fp, r1
 800b09a:	f7f5 fd15 	bl	8000ac8 <__aeabi_dcmpeq>
 800b09e:	2800      	cmp	r0, #0
 800b0a0:	d0c1      	beq.n	800b026 <_strtod_l+0x8de>
 800b0a2:	e611      	b.n	800acc8 <_strtod_l+0x580>
 800b0a4:	fffffc02 	.word	0xfffffc02
 800b0a8:	7ff00000 	.word	0x7ff00000
 800b0ac:	39500000 	.word	0x39500000
 800b0b0:	000fffff 	.word	0x000fffff
 800b0b4:	7fefffff 	.word	0x7fefffff
 800b0b8:	0801d5e0 	.word	0x0801d5e0
 800b0bc:	4631      	mov	r1, r6
 800b0be:	4628      	mov	r0, r5
 800b0c0:	f002 f830 	bl	800d124 <__ratio>
 800b0c4:	ec59 8b10 	vmov	r8, r9, d0
 800b0c8:	ee10 0a10 	vmov	r0, s0
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b0d2:	4649      	mov	r1, r9
 800b0d4:	f7f5 fd0c 	bl	8000af0 <__aeabi_dcmple>
 800b0d8:	2800      	cmp	r0, #0
 800b0da:	d07a      	beq.n	800b1d2 <_strtod_l+0xa8a>
 800b0dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d04a      	beq.n	800b178 <_strtod_l+0xa30>
 800b0e2:	4b95      	ldr	r3, [pc, #596]	; (800b338 <_strtod_l+0xbf0>)
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b0ea:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b338 <_strtod_l+0xbf0>
 800b0ee:	f04f 0800 	mov.w	r8, #0
 800b0f2:	4b92      	ldr	r3, [pc, #584]	; (800b33c <_strtod_l+0xbf4>)
 800b0f4:	403b      	ands	r3, r7
 800b0f6:	930d      	str	r3, [sp, #52]	; 0x34
 800b0f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b0fa:	4b91      	ldr	r3, [pc, #580]	; (800b340 <_strtod_l+0xbf8>)
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	f040 80b0 	bne.w	800b262 <_strtod_l+0xb1a>
 800b102:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b106:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b10a:	ec4b ab10 	vmov	d0, sl, fp
 800b10e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b112:	f001 ff2f 	bl	800cf74 <__ulp>
 800b116:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b11a:	ec53 2b10 	vmov	r2, r3, d0
 800b11e:	f7f5 fa6b 	bl	80005f8 <__aeabi_dmul>
 800b122:	4652      	mov	r2, sl
 800b124:	465b      	mov	r3, fp
 800b126:	f7f5 f8b1 	bl	800028c <__adddf3>
 800b12a:	460b      	mov	r3, r1
 800b12c:	4983      	ldr	r1, [pc, #524]	; (800b33c <_strtod_l+0xbf4>)
 800b12e:	4a85      	ldr	r2, [pc, #532]	; (800b344 <_strtod_l+0xbfc>)
 800b130:	4019      	ands	r1, r3
 800b132:	4291      	cmp	r1, r2
 800b134:	4682      	mov	sl, r0
 800b136:	d960      	bls.n	800b1fa <_strtod_l+0xab2>
 800b138:	ee18 3a90 	vmov	r3, s17
 800b13c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b140:	4293      	cmp	r3, r2
 800b142:	d104      	bne.n	800b14e <_strtod_l+0xa06>
 800b144:	ee18 3a10 	vmov	r3, s16
 800b148:	3301      	adds	r3, #1
 800b14a:	f43f ad45 	beq.w	800abd8 <_strtod_l+0x490>
 800b14e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800b350 <_strtod_l+0xc08>
 800b152:	f04f 3aff 	mov.w	sl, #4294967295
 800b156:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b158:	4620      	mov	r0, r4
 800b15a:	f001 fbd9 	bl	800c910 <_Bfree>
 800b15e:	9905      	ldr	r1, [sp, #20]
 800b160:	4620      	mov	r0, r4
 800b162:	f001 fbd5 	bl	800c910 <_Bfree>
 800b166:	4631      	mov	r1, r6
 800b168:	4620      	mov	r0, r4
 800b16a:	f001 fbd1 	bl	800c910 <_Bfree>
 800b16e:	4629      	mov	r1, r5
 800b170:	4620      	mov	r0, r4
 800b172:	f001 fbcd 	bl	800c910 <_Bfree>
 800b176:	e61a      	b.n	800adae <_strtod_l+0x666>
 800b178:	f1ba 0f00 	cmp.w	sl, #0
 800b17c:	d11b      	bne.n	800b1b6 <_strtod_l+0xa6e>
 800b17e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b182:	b9f3      	cbnz	r3, 800b1c2 <_strtod_l+0xa7a>
 800b184:	4b6c      	ldr	r3, [pc, #432]	; (800b338 <_strtod_l+0xbf0>)
 800b186:	2200      	movs	r2, #0
 800b188:	4640      	mov	r0, r8
 800b18a:	4649      	mov	r1, r9
 800b18c:	f7f5 fca6 	bl	8000adc <__aeabi_dcmplt>
 800b190:	b9d0      	cbnz	r0, 800b1c8 <_strtod_l+0xa80>
 800b192:	4640      	mov	r0, r8
 800b194:	4649      	mov	r1, r9
 800b196:	4b6c      	ldr	r3, [pc, #432]	; (800b348 <_strtod_l+0xc00>)
 800b198:	2200      	movs	r2, #0
 800b19a:	f7f5 fa2d 	bl	80005f8 <__aeabi_dmul>
 800b19e:	4680      	mov	r8, r0
 800b1a0:	4689      	mov	r9, r1
 800b1a2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b1a6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800b1aa:	9315      	str	r3, [sp, #84]	; 0x54
 800b1ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b1b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b1b4:	e79d      	b.n	800b0f2 <_strtod_l+0x9aa>
 800b1b6:	f1ba 0f01 	cmp.w	sl, #1
 800b1ba:	d102      	bne.n	800b1c2 <_strtod_l+0xa7a>
 800b1bc:	2f00      	cmp	r7, #0
 800b1be:	f43f ad83 	beq.w	800acc8 <_strtod_l+0x580>
 800b1c2:	4b62      	ldr	r3, [pc, #392]	; (800b34c <_strtod_l+0xc04>)
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	e78e      	b.n	800b0e6 <_strtod_l+0x99e>
 800b1c8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800b348 <_strtod_l+0xc00>
 800b1cc:	f04f 0800 	mov.w	r8, #0
 800b1d0:	e7e7      	b.n	800b1a2 <_strtod_l+0xa5a>
 800b1d2:	4b5d      	ldr	r3, [pc, #372]	; (800b348 <_strtod_l+0xc00>)
 800b1d4:	4640      	mov	r0, r8
 800b1d6:	4649      	mov	r1, r9
 800b1d8:	2200      	movs	r2, #0
 800b1da:	f7f5 fa0d 	bl	80005f8 <__aeabi_dmul>
 800b1de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1e0:	4680      	mov	r8, r0
 800b1e2:	4689      	mov	r9, r1
 800b1e4:	b933      	cbnz	r3, 800b1f4 <_strtod_l+0xaac>
 800b1e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b1ea:	900e      	str	r0, [sp, #56]	; 0x38
 800b1ec:	930f      	str	r3, [sp, #60]	; 0x3c
 800b1ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b1f2:	e7dd      	b.n	800b1b0 <_strtod_l+0xa68>
 800b1f4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800b1f8:	e7f9      	b.n	800b1ee <_strtod_l+0xaa6>
 800b1fa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b1fe:	9b04      	ldr	r3, [sp, #16]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d1a8      	bne.n	800b156 <_strtod_l+0xa0e>
 800b204:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b208:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b20a:	0d1b      	lsrs	r3, r3, #20
 800b20c:	051b      	lsls	r3, r3, #20
 800b20e:	429a      	cmp	r2, r3
 800b210:	d1a1      	bne.n	800b156 <_strtod_l+0xa0e>
 800b212:	4640      	mov	r0, r8
 800b214:	4649      	mov	r1, r9
 800b216:	f7f5 fd4f 	bl	8000cb8 <__aeabi_d2lz>
 800b21a:	f7f5 f9bf 	bl	800059c <__aeabi_l2d>
 800b21e:	4602      	mov	r2, r0
 800b220:	460b      	mov	r3, r1
 800b222:	4640      	mov	r0, r8
 800b224:	4649      	mov	r1, r9
 800b226:	f7f5 f82f 	bl	8000288 <__aeabi_dsub>
 800b22a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b22c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b230:	ea43 030a 	orr.w	r3, r3, sl
 800b234:	4313      	orrs	r3, r2
 800b236:	4680      	mov	r8, r0
 800b238:	4689      	mov	r9, r1
 800b23a:	d055      	beq.n	800b2e8 <_strtod_l+0xba0>
 800b23c:	a336      	add	r3, pc, #216	; (adr r3, 800b318 <_strtod_l+0xbd0>)
 800b23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b242:	f7f5 fc4b 	bl	8000adc <__aeabi_dcmplt>
 800b246:	2800      	cmp	r0, #0
 800b248:	f47f acd0 	bne.w	800abec <_strtod_l+0x4a4>
 800b24c:	a334      	add	r3, pc, #208	; (adr r3, 800b320 <_strtod_l+0xbd8>)
 800b24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b252:	4640      	mov	r0, r8
 800b254:	4649      	mov	r1, r9
 800b256:	f7f5 fc5f 	bl	8000b18 <__aeabi_dcmpgt>
 800b25a:	2800      	cmp	r0, #0
 800b25c:	f43f af7b 	beq.w	800b156 <_strtod_l+0xa0e>
 800b260:	e4c4      	b.n	800abec <_strtod_l+0x4a4>
 800b262:	9b04      	ldr	r3, [sp, #16]
 800b264:	b333      	cbz	r3, 800b2b4 <_strtod_l+0xb6c>
 800b266:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b268:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b26c:	d822      	bhi.n	800b2b4 <_strtod_l+0xb6c>
 800b26e:	a32e      	add	r3, pc, #184	; (adr r3, 800b328 <_strtod_l+0xbe0>)
 800b270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b274:	4640      	mov	r0, r8
 800b276:	4649      	mov	r1, r9
 800b278:	f7f5 fc3a 	bl	8000af0 <__aeabi_dcmple>
 800b27c:	b1a0      	cbz	r0, 800b2a8 <_strtod_l+0xb60>
 800b27e:	4649      	mov	r1, r9
 800b280:	4640      	mov	r0, r8
 800b282:	f7f5 fc91 	bl	8000ba8 <__aeabi_d2uiz>
 800b286:	2801      	cmp	r0, #1
 800b288:	bf38      	it	cc
 800b28a:	2001      	movcc	r0, #1
 800b28c:	f7f5 f93a 	bl	8000504 <__aeabi_ui2d>
 800b290:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b292:	4680      	mov	r8, r0
 800b294:	4689      	mov	r9, r1
 800b296:	bb23      	cbnz	r3, 800b2e2 <_strtod_l+0xb9a>
 800b298:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b29c:	9010      	str	r0, [sp, #64]	; 0x40
 800b29e:	9311      	str	r3, [sp, #68]	; 0x44
 800b2a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b2a4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b2a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b2ac:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b2b0:	1a9b      	subs	r3, r3, r2
 800b2b2:	9309      	str	r3, [sp, #36]	; 0x24
 800b2b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b2b8:	eeb0 0a48 	vmov.f32	s0, s16
 800b2bc:	eef0 0a68 	vmov.f32	s1, s17
 800b2c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b2c4:	f001 fe56 	bl	800cf74 <__ulp>
 800b2c8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b2cc:	ec53 2b10 	vmov	r2, r3, d0
 800b2d0:	f7f5 f992 	bl	80005f8 <__aeabi_dmul>
 800b2d4:	ec53 2b18 	vmov	r2, r3, d8
 800b2d8:	f7f4 ffd8 	bl	800028c <__adddf3>
 800b2dc:	4682      	mov	sl, r0
 800b2de:	468b      	mov	fp, r1
 800b2e0:	e78d      	b.n	800b1fe <_strtod_l+0xab6>
 800b2e2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800b2e6:	e7db      	b.n	800b2a0 <_strtod_l+0xb58>
 800b2e8:	a311      	add	r3, pc, #68	; (adr r3, 800b330 <_strtod_l+0xbe8>)
 800b2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ee:	f7f5 fbf5 	bl	8000adc <__aeabi_dcmplt>
 800b2f2:	e7b2      	b.n	800b25a <_strtod_l+0xb12>
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	930a      	str	r3, [sp, #40]	; 0x28
 800b2f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b2fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b2fc:	6013      	str	r3, [r2, #0]
 800b2fe:	f7ff ba6b 	b.w	800a7d8 <_strtod_l+0x90>
 800b302:	2a65      	cmp	r2, #101	; 0x65
 800b304:	f43f ab5f 	beq.w	800a9c6 <_strtod_l+0x27e>
 800b308:	2a45      	cmp	r2, #69	; 0x45
 800b30a:	f43f ab5c 	beq.w	800a9c6 <_strtod_l+0x27e>
 800b30e:	2301      	movs	r3, #1
 800b310:	f7ff bb94 	b.w	800aa3c <_strtod_l+0x2f4>
 800b314:	f3af 8000 	nop.w
 800b318:	94a03595 	.word	0x94a03595
 800b31c:	3fdfffff 	.word	0x3fdfffff
 800b320:	35afe535 	.word	0x35afe535
 800b324:	3fe00000 	.word	0x3fe00000
 800b328:	ffc00000 	.word	0xffc00000
 800b32c:	41dfffff 	.word	0x41dfffff
 800b330:	94a03595 	.word	0x94a03595
 800b334:	3fcfffff 	.word	0x3fcfffff
 800b338:	3ff00000 	.word	0x3ff00000
 800b33c:	7ff00000 	.word	0x7ff00000
 800b340:	7fe00000 	.word	0x7fe00000
 800b344:	7c9fffff 	.word	0x7c9fffff
 800b348:	3fe00000 	.word	0x3fe00000
 800b34c:	bff00000 	.word	0xbff00000
 800b350:	7fefffff 	.word	0x7fefffff

0800b354 <_strtod_r>:
 800b354:	4b01      	ldr	r3, [pc, #4]	; (800b35c <_strtod_r+0x8>)
 800b356:	f7ff b9f7 	b.w	800a748 <_strtod_l>
 800b35a:	bf00      	nop
 800b35c:	200000c8 	.word	0x200000c8

0800b360 <_strtol_l.constprop.0>:
 800b360:	2b01      	cmp	r3, #1
 800b362:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b366:	d001      	beq.n	800b36c <_strtol_l.constprop.0+0xc>
 800b368:	2b24      	cmp	r3, #36	; 0x24
 800b36a:	d906      	bls.n	800b37a <_strtol_l.constprop.0+0x1a>
 800b36c:	f7fe faaa 	bl	80098c4 <__errno>
 800b370:	2316      	movs	r3, #22
 800b372:	6003      	str	r3, [r0, #0]
 800b374:	2000      	movs	r0, #0
 800b376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b37a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b460 <_strtol_l.constprop.0+0x100>
 800b37e:	460d      	mov	r5, r1
 800b380:	462e      	mov	r6, r5
 800b382:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b386:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b38a:	f017 0708 	ands.w	r7, r7, #8
 800b38e:	d1f7      	bne.n	800b380 <_strtol_l.constprop.0+0x20>
 800b390:	2c2d      	cmp	r4, #45	; 0x2d
 800b392:	d132      	bne.n	800b3fa <_strtol_l.constprop.0+0x9a>
 800b394:	782c      	ldrb	r4, [r5, #0]
 800b396:	2701      	movs	r7, #1
 800b398:	1cb5      	adds	r5, r6, #2
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d05b      	beq.n	800b456 <_strtol_l.constprop.0+0xf6>
 800b39e:	2b10      	cmp	r3, #16
 800b3a0:	d109      	bne.n	800b3b6 <_strtol_l.constprop.0+0x56>
 800b3a2:	2c30      	cmp	r4, #48	; 0x30
 800b3a4:	d107      	bne.n	800b3b6 <_strtol_l.constprop.0+0x56>
 800b3a6:	782c      	ldrb	r4, [r5, #0]
 800b3a8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b3ac:	2c58      	cmp	r4, #88	; 0x58
 800b3ae:	d14d      	bne.n	800b44c <_strtol_l.constprop.0+0xec>
 800b3b0:	786c      	ldrb	r4, [r5, #1]
 800b3b2:	2310      	movs	r3, #16
 800b3b4:	3502      	adds	r5, #2
 800b3b6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b3ba:	f108 38ff 	add.w	r8, r8, #4294967295
 800b3be:	f04f 0c00 	mov.w	ip, #0
 800b3c2:	fbb8 f9f3 	udiv	r9, r8, r3
 800b3c6:	4666      	mov	r6, ip
 800b3c8:	fb03 8a19 	mls	sl, r3, r9, r8
 800b3cc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b3d0:	f1be 0f09 	cmp.w	lr, #9
 800b3d4:	d816      	bhi.n	800b404 <_strtol_l.constprop.0+0xa4>
 800b3d6:	4674      	mov	r4, lr
 800b3d8:	42a3      	cmp	r3, r4
 800b3da:	dd24      	ble.n	800b426 <_strtol_l.constprop.0+0xc6>
 800b3dc:	f1bc 0f00 	cmp.w	ip, #0
 800b3e0:	db1e      	blt.n	800b420 <_strtol_l.constprop.0+0xc0>
 800b3e2:	45b1      	cmp	r9, r6
 800b3e4:	d31c      	bcc.n	800b420 <_strtol_l.constprop.0+0xc0>
 800b3e6:	d101      	bne.n	800b3ec <_strtol_l.constprop.0+0x8c>
 800b3e8:	45a2      	cmp	sl, r4
 800b3ea:	db19      	blt.n	800b420 <_strtol_l.constprop.0+0xc0>
 800b3ec:	fb06 4603 	mla	r6, r6, r3, r4
 800b3f0:	f04f 0c01 	mov.w	ip, #1
 800b3f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b3f8:	e7e8      	b.n	800b3cc <_strtol_l.constprop.0+0x6c>
 800b3fa:	2c2b      	cmp	r4, #43	; 0x2b
 800b3fc:	bf04      	itt	eq
 800b3fe:	782c      	ldrbeq	r4, [r5, #0]
 800b400:	1cb5      	addeq	r5, r6, #2
 800b402:	e7ca      	b.n	800b39a <_strtol_l.constprop.0+0x3a>
 800b404:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b408:	f1be 0f19 	cmp.w	lr, #25
 800b40c:	d801      	bhi.n	800b412 <_strtol_l.constprop.0+0xb2>
 800b40e:	3c37      	subs	r4, #55	; 0x37
 800b410:	e7e2      	b.n	800b3d8 <_strtol_l.constprop.0+0x78>
 800b412:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b416:	f1be 0f19 	cmp.w	lr, #25
 800b41a:	d804      	bhi.n	800b426 <_strtol_l.constprop.0+0xc6>
 800b41c:	3c57      	subs	r4, #87	; 0x57
 800b41e:	e7db      	b.n	800b3d8 <_strtol_l.constprop.0+0x78>
 800b420:	f04f 3cff 	mov.w	ip, #4294967295
 800b424:	e7e6      	b.n	800b3f4 <_strtol_l.constprop.0+0x94>
 800b426:	f1bc 0f00 	cmp.w	ip, #0
 800b42a:	da05      	bge.n	800b438 <_strtol_l.constprop.0+0xd8>
 800b42c:	2322      	movs	r3, #34	; 0x22
 800b42e:	6003      	str	r3, [r0, #0]
 800b430:	4646      	mov	r6, r8
 800b432:	b942      	cbnz	r2, 800b446 <_strtol_l.constprop.0+0xe6>
 800b434:	4630      	mov	r0, r6
 800b436:	e79e      	b.n	800b376 <_strtol_l.constprop.0+0x16>
 800b438:	b107      	cbz	r7, 800b43c <_strtol_l.constprop.0+0xdc>
 800b43a:	4276      	negs	r6, r6
 800b43c:	2a00      	cmp	r2, #0
 800b43e:	d0f9      	beq.n	800b434 <_strtol_l.constprop.0+0xd4>
 800b440:	f1bc 0f00 	cmp.w	ip, #0
 800b444:	d000      	beq.n	800b448 <_strtol_l.constprop.0+0xe8>
 800b446:	1e69      	subs	r1, r5, #1
 800b448:	6011      	str	r1, [r2, #0]
 800b44a:	e7f3      	b.n	800b434 <_strtol_l.constprop.0+0xd4>
 800b44c:	2430      	movs	r4, #48	; 0x30
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d1b1      	bne.n	800b3b6 <_strtol_l.constprop.0+0x56>
 800b452:	2308      	movs	r3, #8
 800b454:	e7af      	b.n	800b3b6 <_strtol_l.constprop.0+0x56>
 800b456:	2c30      	cmp	r4, #48	; 0x30
 800b458:	d0a5      	beq.n	800b3a6 <_strtol_l.constprop.0+0x46>
 800b45a:	230a      	movs	r3, #10
 800b45c:	e7ab      	b.n	800b3b6 <_strtol_l.constprop.0+0x56>
 800b45e:	bf00      	nop
 800b460:	0801d609 	.word	0x0801d609

0800b464 <_strtol_r>:
 800b464:	f7ff bf7c 	b.w	800b360 <_strtol_l.constprop.0>

0800b468 <strtol>:
 800b468:	4613      	mov	r3, r2
 800b46a:	460a      	mov	r2, r1
 800b46c:	4601      	mov	r1, r0
 800b46e:	4802      	ldr	r0, [pc, #8]	; (800b478 <strtol+0x10>)
 800b470:	6800      	ldr	r0, [r0, #0]
 800b472:	f7ff bf75 	b.w	800b360 <_strtol_l.constprop.0>
 800b476:	bf00      	nop
 800b478:	20000060 	.word	0x20000060

0800b47c <quorem>:
 800b47c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b480:	6903      	ldr	r3, [r0, #16]
 800b482:	690c      	ldr	r4, [r1, #16]
 800b484:	42a3      	cmp	r3, r4
 800b486:	4607      	mov	r7, r0
 800b488:	f2c0 8081 	blt.w	800b58e <quorem+0x112>
 800b48c:	3c01      	subs	r4, #1
 800b48e:	f101 0814 	add.w	r8, r1, #20
 800b492:	f100 0514 	add.w	r5, r0, #20
 800b496:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b49a:	9301      	str	r3, [sp, #4]
 800b49c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b4a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b4a4:	3301      	adds	r3, #1
 800b4a6:	429a      	cmp	r2, r3
 800b4a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b4ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b4b0:	fbb2 f6f3 	udiv	r6, r2, r3
 800b4b4:	d331      	bcc.n	800b51a <quorem+0x9e>
 800b4b6:	f04f 0e00 	mov.w	lr, #0
 800b4ba:	4640      	mov	r0, r8
 800b4bc:	46ac      	mov	ip, r5
 800b4be:	46f2      	mov	sl, lr
 800b4c0:	f850 2b04 	ldr.w	r2, [r0], #4
 800b4c4:	b293      	uxth	r3, r2
 800b4c6:	fb06 e303 	mla	r3, r6, r3, lr
 800b4ca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b4ce:	b29b      	uxth	r3, r3
 800b4d0:	ebaa 0303 	sub.w	r3, sl, r3
 800b4d4:	f8dc a000 	ldr.w	sl, [ip]
 800b4d8:	0c12      	lsrs	r2, r2, #16
 800b4da:	fa13 f38a 	uxtah	r3, r3, sl
 800b4de:	fb06 e202 	mla	r2, r6, r2, lr
 800b4e2:	9300      	str	r3, [sp, #0]
 800b4e4:	9b00      	ldr	r3, [sp, #0]
 800b4e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b4ea:	b292      	uxth	r2, r2
 800b4ec:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b4f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b4f4:	f8bd 3000 	ldrh.w	r3, [sp]
 800b4f8:	4581      	cmp	r9, r0
 800b4fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b4fe:	f84c 3b04 	str.w	r3, [ip], #4
 800b502:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b506:	d2db      	bcs.n	800b4c0 <quorem+0x44>
 800b508:	f855 300b 	ldr.w	r3, [r5, fp]
 800b50c:	b92b      	cbnz	r3, 800b51a <quorem+0x9e>
 800b50e:	9b01      	ldr	r3, [sp, #4]
 800b510:	3b04      	subs	r3, #4
 800b512:	429d      	cmp	r5, r3
 800b514:	461a      	mov	r2, r3
 800b516:	d32e      	bcc.n	800b576 <quorem+0xfa>
 800b518:	613c      	str	r4, [r7, #16]
 800b51a:	4638      	mov	r0, r7
 800b51c:	f001 fc84 	bl	800ce28 <__mcmp>
 800b520:	2800      	cmp	r0, #0
 800b522:	db24      	blt.n	800b56e <quorem+0xf2>
 800b524:	3601      	adds	r6, #1
 800b526:	4628      	mov	r0, r5
 800b528:	f04f 0c00 	mov.w	ip, #0
 800b52c:	f858 2b04 	ldr.w	r2, [r8], #4
 800b530:	f8d0 e000 	ldr.w	lr, [r0]
 800b534:	b293      	uxth	r3, r2
 800b536:	ebac 0303 	sub.w	r3, ip, r3
 800b53a:	0c12      	lsrs	r2, r2, #16
 800b53c:	fa13 f38e 	uxtah	r3, r3, lr
 800b540:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b544:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b548:	b29b      	uxth	r3, r3
 800b54a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b54e:	45c1      	cmp	r9, r8
 800b550:	f840 3b04 	str.w	r3, [r0], #4
 800b554:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b558:	d2e8      	bcs.n	800b52c <quorem+0xb0>
 800b55a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b55e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b562:	b922      	cbnz	r2, 800b56e <quorem+0xf2>
 800b564:	3b04      	subs	r3, #4
 800b566:	429d      	cmp	r5, r3
 800b568:	461a      	mov	r2, r3
 800b56a:	d30a      	bcc.n	800b582 <quorem+0x106>
 800b56c:	613c      	str	r4, [r7, #16]
 800b56e:	4630      	mov	r0, r6
 800b570:	b003      	add	sp, #12
 800b572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b576:	6812      	ldr	r2, [r2, #0]
 800b578:	3b04      	subs	r3, #4
 800b57a:	2a00      	cmp	r2, #0
 800b57c:	d1cc      	bne.n	800b518 <quorem+0x9c>
 800b57e:	3c01      	subs	r4, #1
 800b580:	e7c7      	b.n	800b512 <quorem+0x96>
 800b582:	6812      	ldr	r2, [r2, #0]
 800b584:	3b04      	subs	r3, #4
 800b586:	2a00      	cmp	r2, #0
 800b588:	d1f0      	bne.n	800b56c <quorem+0xf0>
 800b58a:	3c01      	subs	r4, #1
 800b58c:	e7eb      	b.n	800b566 <quorem+0xea>
 800b58e:	2000      	movs	r0, #0
 800b590:	e7ee      	b.n	800b570 <quorem+0xf4>
 800b592:	0000      	movs	r0, r0
 800b594:	0000      	movs	r0, r0
	...

0800b598 <_dtoa_r>:
 800b598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b59c:	ed2d 8b04 	vpush	{d8-d9}
 800b5a0:	ec57 6b10 	vmov	r6, r7, d0
 800b5a4:	b093      	sub	sp, #76	; 0x4c
 800b5a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b5a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b5ac:	9106      	str	r1, [sp, #24]
 800b5ae:	ee10 aa10 	vmov	sl, s0
 800b5b2:	4604      	mov	r4, r0
 800b5b4:	9209      	str	r2, [sp, #36]	; 0x24
 800b5b6:	930c      	str	r3, [sp, #48]	; 0x30
 800b5b8:	46bb      	mov	fp, r7
 800b5ba:	b975      	cbnz	r5, 800b5da <_dtoa_r+0x42>
 800b5bc:	2010      	movs	r0, #16
 800b5be:	f001 f94d 	bl	800c85c <malloc>
 800b5c2:	4602      	mov	r2, r0
 800b5c4:	6260      	str	r0, [r4, #36]	; 0x24
 800b5c6:	b920      	cbnz	r0, 800b5d2 <_dtoa_r+0x3a>
 800b5c8:	4ba7      	ldr	r3, [pc, #668]	; (800b868 <_dtoa_r+0x2d0>)
 800b5ca:	21ea      	movs	r1, #234	; 0xea
 800b5cc:	48a7      	ldr	r0, [pc, #668]	; (800b86c <_dtoa_r+0x2d4>)
 800b5ce:	f002 f8ad 	bl	800d72c <__assert_func>
 800b5d2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b5d6:	6005      	str	r5, [r0, #0]
 800b5d8:	60c5      	str	r5, [r0, #12]
 800b5da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5dc:	6819      	ldr	r1, [r3, #0]
 800b5de:	b151      	cbz	r1, 800b5f6 <_dtoa_r+0x5e>
 800b5e0:	685a      	ldr	r2, [r3, #4]
 800b5e2:	604a      	str	r2, [r1, #4]
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	4093      	lsls	r3, r2
 800b5e8:	608b      	str	r3, [r1, #8]
 800b5ea:	4620      	mov	r0, r4
 800b5ec:	f001 f990 	bl	800c910 <_Bfree>
 800b5f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	601a      	str	r2, [r3, #0]
 800b5f6:	1e3b      	subs	r3, r7, #0
 800b5f8:	bfaa      	itet	ge
 800b5fa:	2300      	movge	r3, #0
 800b5fc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b600:	f8c8 3000 	strge.w	r3, [r8]
 800b604:	4b9a      	ldr	r3, [pc, #616]	; (800b870 <_dtoa_r+0x2d8>)
 800b606:	bfbc      	itt	lt
 800b608:	2201      	movlt	r2, #1
 800b60a:	f8c8 2000 	strlt.w	r2, [r8]
 800b60e:	ea33 030b 	bics.w	r3, r3, fp
 800b612:	d11b      	bne.n	800b64c <_dtoa_r+0xb4>
 800b614:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b616:	f242 730f 	movw	r3, #9999	; 0x270f
 800b61a:	6013      	str	r3, [r2, #0]
 800b61c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b620:	4333      	orrs	r3, r6
 800b622:	f000 8592 	beq.w	800c14a <_dtoa_r+0xbb2>
 800b626:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b628:	b963      	cbnz	r3, 800b644 <_dtoa_r+0xac>
 800b62a:	4b92      	ldr	r3, [pc, #584]	; (800b874 <_dtoa_r+0x2dc>)
 800b62c:	e022      	b.n	800b674 <_dtoa_r+0xdc>
 800b62e:	4b92      	ldr	r3, [pc, #584]	; (800b878 <_dtoa_r+0x2e0>)
 800b630:	9301      	str	r3, [sp, #4]
 800b632:	3308      	adds	r3, #8
 800b634:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b636:	6013      	str	r3, [r2, #0]
 800b638:	9801      	ldr	r0, [sp, #4]
 800b63a:	b013      	add	sp, #76	; 0x4c
 800b63c:	ecbd 8b04 	vpop	{d8-d9}
 800b640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b644:	4b8b      	ldr	r3, [pc, #556]	; (800b874 <_dtoa_r+0x2dc>)
 800b646:	9301      	str	r3, [sp, #4]
 800b648:	3303      	adds	r3, #3
 800b64a:	e7f3      	b.n	800b634 <_dtoa_r+0x9c>
 800b64c:	2200      	movs	r2, #0
 800b64e:	2300      	movs	r3, #0
 800b650:	4650      	mov	r0, sl
 800b652:	4659      	mov	r1, fp
 800b654:	f7f5 fa38 	bl	8000ac8 <__aeabi_dcmpeq>
 800b658:	ec4b ab19 	vmov	d9, sl, fp
 800b65c:	4680      	mov	r8, r0
 800b65e:	b158      	cbz	r0, 800b678 <_dtoa_r+0xe0>
 800b660:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b662:	2301      	movs	r3, #1
 800b664:	6013      	str	r3, [r2, #0]
 800b666:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b668:	2b00      	cmp	r3, #0
 800b66a:	f000 856b 	beq.w	800c144 <_dtoa_r+0xbac>
 800b66e:	4883      	ldr	r0, [pc, #524]	; (800b87c <_dtoa_r+0x2e4>)
 800b670:	6018      	str	r0, [r3, #0]
 800b672:	1e43      	subs	r3, r0, #1
 800b674:	9301      	str	r3, [sp, #4]
 800b676:	e7df      	b.n	800b638 <_dtoa_r+0xa0>
 800b678:	ec4b ab10 	vmov	d0, sl, fp
 800b67c:	aa10      	add	r2, sp, #64	; 0x40
 800b67e:	a911      	add	r1, sp, #68	; 0x44
 800b680:	4620      	mov	r0, r4
 800b682:	f001 fcf3 	bl	800d06c <__d2b>
 800b686:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b68a:	ee08 0a10 	vmov	s16, r0
 800b68e:	2d00      	cmp	r5, #0
 800b690:	f000 8084 	beq.w	800b79c <_dtoa_r+0x204>
 800b694:	ee19 3a90 	vmov	r3, s19
 800b698:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b69c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b6a0:	4656      	mov	r6, sl
 800b6a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b6a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b6aa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b6ae:	4b74      	ldr	r3, [pc, #464]	; (800b880 <_dtoa_r+0x2e8>)
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	4630      	mov	r0, r6
 800b6b4:	4639      	mov	r1, r7
 800b6b6:	f7f4 fde7 	bl	8000288 <__aeabi_dsub>
 800b6ba:	a365      	add	r3, pc, #404	; (adr r3, 800b850 <_dtoa_r+0x2b8>)
 800b6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c0:	f7f4 ff9a 	bl	80005f8 <__aeabi_dmul>
 800b6c4:	a364      	add	r3, pc, #400	; (adr r3, 800b858 <_dtoa_r+0x2c0>)
 800b6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ca:	f7f4 fddf 	bl	800028c <__adddf3>
 800b6ce:	4606      	mov	r6, r0
 800b6d0:	4628      	mov	r0, r5
 800b6d2:	460f      	mov	r7, r1
 800b6d4:	f7f4 ff26 	bl	8000524 <__aeabi_i2d>
 800b6d8:	a361      	add	r3, pc, #388	; (adr r3, 800b860 <_dtoa_r+0x2c8>)
 800b6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6de:	f7f4 ff8b 	bl	80005f8 <__aeabi_dmul>
 800b6e2:	4602      	mov	r2, r0
 800b6e4:	460b      	mov	r3, r1
 800b6e6:	4630      	mov	r0, r6
 800b6e8:	4639      	mov	r1, r7
 800b6ea:	f7f4 fdcf 	bl	800028c <__adddf3>
 800b6ee:	4606      	mov	r6, r0
 800b6f0:	460f      	mov	r7, r1
 800b6f2:	f7f5 fa31 	bl	8000b58 <__aeabi_d2iz>
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	9000      	str	r0, [sp, #0]
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	4630      	mov	r0, r6
 800b6fe:	4639      	mov	r1, r7
 800b700:	f7f5 f9ec 	bl	8000adc <__aeabi_dcmplt>
 800b704:	b150      	cbz	r0, 800b71c <_dtoa_r+0x184>
 800b706:	9800      	ldr	r0, [sp, #0]
 800b708:	f7f4 ff0c 	bl	8000524 <__aeabi_i2d>
 800b70c:	4632      	mov	r2, r6
 800b70e:	463b      	mov	r3, r7
 800b710:	f7f5 f9da 	bl	8000ac8 <__aeabi_dcmpeq>
 800b714:	b910      	cbnz	r0, 800b71c <_dtoa_r+0x184>
 800b716:	9b00      	ldr	r3, [sp, #0]
 800b718:	3b01      	subs	r3, #1
 800b71a:	9300      	str	r3, [sp, #0]
 800b71c:	9b00      	ldr	r3, [sp, #0]
 800b71e:	2b16      	cmp	r3, #22
 800b720:	d85a      	bhi.n	800b7d8 <_dtoa_r+0x240>
 800b722:	9a00      	ldr	r2, [sp, #0]
 800b724:	4b57      	ldr	r3, [pc, #348]	; (800b884 <_dtoa_r+0x2ec>)
 800b726:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b72e:	ec51 0b19 	vmov	r0, r1, d9
 800b732:	f7f5 f9d3 	bl	8000adc <__aeabi_dcmplt>
 800b736:	2800      	cmp	r0, #0
 800b738:	d050      	beq.n	800b7dc <_dtoa_r+0x244>
 800b73a:	9b00      	ldr	r3, [sp, #0]
 800b73c:	3b01      	subs	r3, #1
 800b73e:	9300      	str	r3, [sp, #0]
 800b740:	2300      	movs	r3, #0
 800b742:	930b      	str	r3, [sp, #44]	; 0x2c
 800b744:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b746:	1b5d      	subs	r5, r3, r5
 800b748:	1e6b      	subs	r3, r5, #1
 800b74a:	9305      	str	r3, [sp, #20]
 800b74c:	bf45      	ittet	mi
 800b74e:	f1c5 0301 	rsbmi	r3, r5, #1
 800b752:	9304      	strmi	r3, [sp, #16]
 800b754:	2300      	movpl	r3, #0
 800b756:	2300      	movmi	r3, #0
 800b758:	bf4c      	ite	mi
 800b75a:	9305      	strmi	r3, [sp, #20]
 800b75c:	9304      	strpl	r3, [sp, #16]
 800b75e:	9b00      	ldr	r3, [sp, #0]
 800b760:	2b00      	cmp	r3, #0
 800b762:	db3d      	blt.n	800b7e0 <_dtoa_r+0x248>
 800b764:	9b05      	ldr	r3, [sp, #20]
 800b766:	9a00      	ldr	r2, [sp, #0]
 800b768:	920a      	str	r2, [sp, #40]	; 0x28
 800b76a:	4413      	add	r3, r2
 800b76c:	9305      	str	r3, [sp, #20]
 800b76e:	2300      	movs	r3, #0
 800b770:	9307      	str	r3, [sp, #28]
 800b772:	9b06      	ldr	r3, [sp, #24]
 800b774:	2b09      	cmp	r3, #9
 800b776:	f200 8089 	bhi.w	800b88c <_dtoa_r+0x2f4>
 800b77a:	2b05      	cmp	r3, #5
 800b77c:	bfc4      	itt	gt
 800b77e:	3b04      	subgt	r3, #4
 800b780:	9306      	strgt	r3, [sp, #24]
 800b782:	9b06      	ldr	r3, [sp, #24]
 800b784:	f1a3 0302 	sub.w	r3, r3, #2
 800b788:	bfcc      	ite	gt
 800b78a:	2500      	movgt	r5, #0
 800b78c:	2501      	movle	r5, #1
 800b78e:	2b03      	cmp	r3, #3
 800b790:	f200 8087 	bhi.w	800b8a2 <_dtoa_r+0x30a>
 800b794:	e8df f003 	tbb	[pc, r3]
 800b798:	59383a2d 	.word	0x59383a2d
 800b79c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b7a0:	441d      	add	r5, r3
 800b7a2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b7a6:	2b20      	cmp	r3, #32
 800b7a8:	bfc1      	itttt	gt
 800b7aa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b7ae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b7b2:	fa0b f303 	lslgt.w	r3, fp, r3
 800b7b6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b7ba:	bfda      	itte	le
 800b7bc:	f1c3 0320 	rsble	r3, r3, #32
 800b7c0:	fa06 f003 	lslle.w	r0, r6, r3
 800b7c4:	4318      	orrgt	r0, r3
 800b7c6:	f7f4 fe9d 	bl	8000504 <__aeabi_ui2d>
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	4606      	mov	r6, r0
 800b7ce:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b7d2:	3d01      	subs	r5, #1
 800b7d4:	930e      	str	r3, [sp, #56]	; 0x38
 800b7d6:	e76a      	b.n	800b6ae <_dtoa_r+0x116>
 800b7d8:	2301      	movs	r3, #1
 800b7da:	e7b2      	b.n	800b742 <_dtoa_r+0x1aa>
 800b7dc:	900b      	str	r0, [sp, #44]	; 0x2c
 800b7de:	e7b1      	b.n	800b744 <_dtoa_r+0x1ac>
 800b7e0:	9b04      	ldr	r3, [sp, #16]
 800b7e2:	9a00      	ldr	r2, [sp, #0]
 800b7e4:	1a9b      	subs	r3, r3, r2
 800b7e6:	9304      	str	r3, [sp, #16]
 800b7e8:	4253      	negs	r3, r2
 800b7ea:	9307      	str	r3, [sp, #28]
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	930a      	str	r3, [sp, #40]	; 0x28
 800b7f0:	e7bf      	b.n	800b772 <_dtoa_r+0x1da>
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	9308      	str	r3, [sp, #32]
 800b7f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	dc55      	bgt.n	800b8a8 <_dtoa_r+0x310>
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b802:	461a      	mov	r2, r3
 800b804:	9209      	str	r2, [sp, #36]	; 0x24
 800b806:	e00c      	b.n	800b822 <_dtoa_r+0x28a>
 800b808:	2301      	movs	r3, #1
 800b80a:	e7f3      	b.n	800b7f4 <_dtoa_r+0x25c>
 800b80c:	2300      	movs	r3, #0
 800b80e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b810:	9308      	str	r3, [sp, #32]
 800b812:	9b00      	ldr	r3, [sp, #0]
 800b814:	4413      	add	r3, r2
 800b816:	9302      	str	r3, [sp, #8]
 800b818:	3301      	adds	r3, #1
 800b81a:	2b01      	cmp	r3, #1
 800b81c:	9303      	str	r3, [sp, #12]
 800b81e:	bfb8      	it	lt
 800b820:	2301      	movlt	r3, #1
 800b822:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b824:	2200      	movs	r2, #0
 800b826:	6042      	str	r2, [r0, #4]
 800b828:	2204      	movs	r2, #4
 800b82a:	f102 0614 	add.w	r6, r2, #20
 800b82e:	429e      	cmp	r6, r3
 800b830:	6841      	ldr	r1, [r0, #4]
 800b832:	d93d      	bls.n	800b8b0 <_dtoa_r+0x318>
 800b834:	4620      	mov	r0, r4
 800b836:	f001 f82b 	bl	800c890 <_Balloc>
 800b83a:	9001      	str	r0, [sp, #4]
 800b83c:	2800      	cmp	r0, #0
 800b83e:	d13b      	bne.n	800b8b8 <_dtoa_r+0x320>
 800b840:	4b11      	ldr	r3, [pc, #68]	; (800b888 <_dtoa_r+0x2f0>)
 800b842:	4602      	mov	r2, r0
 800b844:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b848:	e6c0      	b.n	800b5cc <_dtoa_r+0x34>
 800b84a:	2301      	movs	r3, #1
 800b84c:	e7df      	b.n	800b80e <_dtoa_r+0x276>
 800b84e:	bf00      	nop
 800b850:	636f4361 	.word	0x636f4361
 800b854:	3fd287a7 	.word	0x3fd287a7
 800b858:	8b60c8b3 	.word	0x8b60c8b3
 800b85c:	3fc68a28 	.word	0x3fc68a28
 800b860:	509f79fb 	.word	0x509f79fb
 800b864:	3fd34413 	.word	0x3fd34413
 800b868:	0801d716 	.word	0x0801d716
 800b86c:	0801d72d 	.word	0x0801d72d
 800b870:	7ff00000 	.word	0x7ff00000
 800b874:	0801d712 	.word	0x0801d712
 800b878:	0801d709 	.word	0x0801d709
 800b87c:	0801d589 	.word	0x0801d589
 800b880:	3ff80000 	.word	0x3ff80000
 800b884:	0801d898 	.word	0x0801d898
 800b888:	0801d788 	.word	0x0801d788
 800b88c:	2501      	movs	r5, #1
 800b88e:	2300      	movs	r3, #0
 800b890:	9306      	str	r3, [sp, #24]
 800b892:	9508      	str	r5, [sp, #32]
 800b894:	f04f 33ff 	mov.w	r3, #4294967295
 800b898:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b89c:	2200      	movs	r2, #0
 800b89e:	2312      	movs	r3, #18
 800b8a0:	e7b0      	b.n	800b804 <_dtoa_r+0x26c>
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	9308      	str	r3, [sp, #32]
 800b8a6:	e7f5      	b.n	800b894 <_dtoa_r+0x2fc>
 800b8a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8aa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b8ae:	e7b8      	b.n	800b822 <_dtoa_r+0x28a>
 800b8b0:	3101      	adds	r1, #1
 800b8b2:	6041      	str	r1, [r0, #4]
 800b8b4:	0052      	lsls	r2, r2, #1
 800b8b6:	e7b8      	b.n	800b82a <_dtoa_r+0x292>
 800b8b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8ba:	9a01      	ldr	r2, [sp, #4]
 800b8bc:	601a      	str	r2, [r3, #0]
 800b8be:	9b03      	ldr	r3, [sp, #12]
 800b8c0:	2b0e      	cmp	r3, #14
 800b8c2:	f200 809d 	bhi.w	800ba00 <_dtoa_r+0x468>
 800b8c6:	2d00      	cmp	r5, #0
 800b8c8:	f000 809a 	beq.w	800ba00 <_dtoa_r+0x468>
 800b8cc:	9b00      	ldr	r3, [sp, #0]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	dd32      	ble.n	800b938 <_dtoa_r+0x3a0>
 800b8d2:	4ab7      	ldr	r2, [pc, #732]	; (800bbb0 <_dtoa_r+0x618>)
 800b8d4:	f003 030f 	and.w	r3, r3, #15
 800b8d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b8dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b8e0:	9b00      	ldr	r3, [sp, #0]
 800b8e2:	05d8      	lsls	r0, r3, #23
 800b8e4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b8e8:	d516      	bpl.n	800b918 <_dtoa_r+0x380>
 800b8ea:	4bb2      	ldr	r3, [pc, #712]	; (800bbb4 <_dtoa_r+0x61c>)
 800b8ec:	ec51 0b19 	vmov	r0, r1, d9
 800b8f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b8f4:	f7f4 ffaa 	bl	800084c <__aeabi_ddiv>
 800b8f8:	f007 070f 	and.w	r7, r7, #15
 800b8fc:	4682      	mov	sl, r0
 800b8fe:	468b      	mov	fp, r1
 800b900:	2503      	movs	r5, #3
 800b902:	4eac      	ldr	r6, [pc, #688]	; (800bbb4 <_dtoa_r+0x61c>)
 800b904:	b957      	cbnz	r7, 800b91c <_dtoa_r+0x384>
 800b906:	4642      	mov	r2, r8
 800b908:	464b      	mov	r3, r9
 800b90a:	4650      	mov	r0, sl
 800b90c:	4659      	mov	r1, fp
 800b90e:	f7f4 ff9d 	bl	800084c <__aeabi_ddiv>
 800b912:	4682      	mov	sl, r0
 800b914:	468b      	mov	fp, r1
 800b916:	e028      	b.n	800b96a <_dtoa_r+0x3d2>
 800b918:	2502      	movs	r5, #2
 800b91a:	e7f2      	b.n	800b902 <_dtoa_r+0x36a>
 800b91c:	07f9      	lsls	r1, r7, #31
 800b91e:	d508      	bpl.n	800b932 <_dtoa_r+0x39a>
 800b920:	4640      	mov	r0, r8
 800b922:	4649      	mov	r1, r9
 800b924:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b928:	f7f4 fe66 	bl	80005f8 <__aeabi_dmul>
 800b92c:	3501      	adds	r5, #1
 800b92e:	4680      	mov	r8, r0
 800b930:	4689      	mov	r9, r1
 800b932:	107f      	asrs	r7, r7, #1
 800b934:	3608      	adds	r6, #8
 800b936:	e7e5      	b.n	800b904 <_dtoa_r+0x36c>
 800b938:	f000 809b 	beq.w	800ba72 <_dtoa_r+0x4da>
 800b93c:	9b00      	ldr	r3, [sp, #0]
 800b93e:	4f9d      	ldr	r7, [pc, #628]	; (800bbb4 <_dtoa_r+0x61c>)
 800b940:	425e      	negs	r6, r3
 800b942:	4b9b      	ldr	r3, [pc, #620]	; (800bbb0 <_dtoa_r+0x618>)
 800b944:	f006 020f 	and.w	r2, r6, #15
 800b948:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b950:	ec51 0b19 	vmov	r0, r1, d9
 800b954:	f7f4 fe50 	bl	80005f8 <__aeabi_dmul>
 800b958:	1136      	asrs	r6, r6, #4
 800b95a:	4682      	mov	sl, r0
 800b95c:	468b      	mov	fp, r1
 800b95e:	2300      	movs	r3, #0
 800b960:	2502      	movs	r5, #2
 800b962:	2e00      	cmp	r6, #0
 800b964:	d17a      	bne.n	800ba5c <_dtoa_r+0x4c4>
 800b966:	2b00      	cmp	r3, #0
 800b968:	d1d3      	bne.n	800b912 <_dtoa_r+0x37a>
 800b96a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	f000 8082 	beq.w	800ba76 <_dtoa_r+0x4de>
 800b972:	4b91      	ldr	r3, [pc, #580]	; (800bbb8 <_dtoa_r+0x620>)
 800b974:	2200      	movs	r2, #0
 800b976:	4650      	mov	r0, sl
 800b978:	4659      	mov	r1, fp
 800b97a:	f7f5 f8af 	bl	8000adc <__aeabi_dcmplt>
 800b97e:	2800      	cmp	r0, #0
 800b980:	d079      	beq.n	800ba76 <_dtoa_r+0x4de>
 800b982:	9b03      	ldr	r3, [sp, #12]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d076      	beq.n	800ba76 <_dtoa_r+0x4de>
 800b988:	9b02      	ldr	r3, [sp, #8]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	dd36      	ble.n	800b9fc <_dtoa_r+0x464>
 800b98e:	9b00      	ldr	r3, [sp, #0]
 800b990:	4650      	mov	r0, sl
 800b992:	4659      	mov	r1, fp
 800b994:	1e5f      	subs	r7, r3, #1
 800b996:	2200      	movs	r2, #0
 800b998:	4b88      	ldr	r3, [pc, #544]	; (800bbbc <_dtoa_r+0x624>)
 800b99a:	f7f4 fe2d 	bl	80005f8 <__aeabi_dmul>
 800b99e:	9e02      	ldr	r6, [sp, #8]
 800b9a0:	4682      	mov	sl, r0
 800b9a2:	468b      	mov	fp, r1
 800b9a4:	3501      	adds	r5, #1
 800b9a6:	4628      	mov	r0, r5
 800b9a8:	f7f4 fdbc 	bl	8000524 <__aeabi_i2d>
 800b9ac:	4652      	mov	r2, sl
 800b9ae:	465b      	mov	r3, fp
 800b9b0:	f7f4 fe22 	bl	80005f8 <__aeabi_dmul>
 800b9b4:	4b82      	ldr	r3, [pc, #520]	; (800bbc0 <_dtoa_r+0x628>)
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	f7f4 fc68 	bl	800028c <__adddf3>
 800b9bc:	46d0      	mov	r8, sl
 800b9be:	46d9      	mov	r9, fp
 800b9c0:	4682      	mov	sl, r0
 800b9c2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b9c6:	2e00      	cmp	r6, #0
 800b9c8:	d158      	bne.n	800ba7c <_dtoa_r+0x4e4>
 800b9ca:	4b7e      	ldr	r3, [pc, #504]	; (800bbc4 <_dtoa_r+0x62c>)
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	4640      	mov	r0, r8
 800b9d0:	4649      	mov	r1, r9
 800b9d2:	f7f4 fc59 	bl	8000288 <__aeabi_dsub>
 800b9d6:	4652      	mov	r2, sl
 800b9d8:	465b      	mov	r3, fp
 800b9da:	4680      	mov	r8, r0
 800b9dc:	4689      	mov	r9, r1
 800b9de:	f7f5 f89b 	bl	8000b18 <__aeabi_dcmpgt>
 800b9e2:	2800      	cmp	r0, #0
 800b9e4:	f040 8295 	bne.w	800bf12 <_dtoa_r+0x97a>
 800b9e8:	4652      	mov	r2, sl
 800b9ea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b9ee:	4640      	mov	r0, r8
 800b9f0:	4649      	mov	r1, r9
 800b9f2:	f7f5 f873 	bl	8000adc <__aeabi_dcmplt>
 800b9f6:	2800      	cmp	r0, #0
 800b9f8:	f040 8289 	bne.w	800bf0e <_dtoa_r+0x976>
 800b9fc:	ec5b ab19 	vmov	sl, fp, d9
 800ba00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	f2c0 8148 	blt.w	800bc98 <_dtoa_r+0x700>
 800ba08:	9a00      	ldr	r2, [sp, #0]
 800ba0a:	2a0e      	cmp	r2, #14
 800ba0c:	f300 8144 	bgt.w	800bc98 <_dtoa_r+0x700>
 800ba10:	4b67      	ldr	r3, [pc, #412]	; (800bbb0 <_dtoa_r+0x618>)
 800ba12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba16:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ba1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	f280 80d5 	bge.w	800bbcc <_dtoa_r+0x634>
 800ba22:	9b03      	ldr	r3, [sp, #12]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	f300 80d1 	bgt.w	800bbcc <_dtoa_r+0x634>
 800ba2a:	f040 826f 	bne.w	800bf0c <_dtoa_r+0x974>
 800ba2e:	4b65      	ldr	r3, [pc, #404]	; (800bbc4 <_dtoa_r+0x62c>)
 800ba30:	2200      	movs	r2, #0
 800ba32:	4640      	mov	r0, r8
 800ba34:	4649      	mov	r1, r9
 800ba36:	f7f4 fddf 	bl	80005f8 <__aeabi_dmul>
 800ba3a:	4652      	mov	r2, sl
 800ba3c:	465b      	mov	r3, fp
 800ba3e:	f7f5 f861 	bl	8000b04 <__aeabi_dcmpge>
 800ba42:	9e03      	ldr	r6, [sp, #12]
 800ba44:	4637      	mov	r7, r6
 800ba46:	2800      	cmp	r0, #0
 800ba48:	f040 8245 	bne.w	800bed6 <_dtoa_r+0x93e>
 800ba4c:	9d01      	ldr	r5, [sp, #4]
 800ba4e:	2331      	movs	r3, #49	; 0x31
 800ba50:	f805 3b01 	strb.w	r3, [r5], #1
 800ba54:	9b00      	ldr	r3, [sp, #0]
 800ba56:	3301      	adds	r3, #1
 800ba58:	9300      	str	r3, [sp, #0]
 800ba5a:	e240      	b.n	800bede <_dtoa_r+0x946>
 800ba5c:	07f2      	lsls	r2, r6, #31
 800ba5e:	d505      	bpl.n	800ba6c <_dtoa_r+0x4d4>
 800ba60:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba64:	f7f4 fdc8 	bl	80005f8 <__aeabi_dmul>
 800ba68:	3501      	adds	r5, #1
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	1076      	asrs	r6, r6, #1
 800ba6e:	3708      	adds	r7, #8
 800ba70:	e777      	b.n	800b962 <_dtoa_r+0x3ca>
 800ba72:	2502      	movs	r5, #2
 800ba74:	e779      	b.n	800b96a <_dtoa_r+0x3d2>
 800ba76:	9f00      	ldr	r7, [sp, #0]
 800ba78:	9e03      	ldr	r6, [sp, #12]
 800ba7a:	e794      	b.n	800b9a6 <_dtoa_r+0x40e>
 800ba7c:	9901      	ldr	r1, [sp, #4]
 800ba7e:	4b4c      	ldr	r3, [pc, #304]	; (800bbb0 <_dtoa_r+0x618>)
 800ba80:	4431      	add	r1, r6
 800ba82:	910d      	str	r1, [sp, #52]	; 0x34
 800ba84:	9908      	ldr	r1, [sp, #32]
 800ba86:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ba8a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ba8e:	2900      	cmp	r1, #0
 800ba90:	d043      	beq.n	800bb1a <_dtoa_r+0x582>
 800ba92:	494d      	ldr	r1, [pc, #308]	; (800bbc8 <_dtoa_r+0x630>)
 800ba94:	2000      	movs	r0, #0
 800ba96:	f7f4 fed9 	bl	800084c <__aeabi_ddiv>
 800ba9a:	4652      	mov	r2, sl
 800ba9c:	465b      	mov	r3, fp
 800ba9e:	f7f4 fbf3 	bl	8000288 <__aeabi_dsub>
 800baa2:	9d01      	ldr	r5, [sp, #4]
 800baa4:	4682      	mov	sl, r0
 800baa6:	468b      	mov	fp, r1
 800baa8:	4649      	mov	r1, r9
 800baaa:	4640      	mov	r0, r8
 800baac:	f7f5 f854 	bl	8000b58 <__aeabi_d2iz>
 800bab0:	4606      	mov	r6, r0
 800bab2:	f7f4 fd37 	bl	8000524 <__aeabi_i2d>
 800bab6:	4602      	mov	r2, r0
 800bab8:	460b      	mov	r3, r1
 800baba:	4640      	mov	r0, r8
 800babc:	4649      	mov	r1, r9
 800babe:	f7f4 fbe3 	bl	8000288 <__aeabi_dsub>
 800bac2:	3630      	adds	r6, #48	; 0x30
 800bac4:	f805 6b01 	strb.w	r6, [r5], #1
 800bac8:	4652      	mov	r2, sl
 800baca:	465b      	mov	r3, fp
 800bacc:	4680      	mov	r8, r0
 800bace:	4689      	mov	r9, r1
 800bad0:	f7f5 f804 	bl	8000adc <__aeabi_dcmplt>
 800bad4:	2800      	cmp	r0, #0
 800bad6:	d163      	bne.n	800bba0 <_dtoa_r+0x608>
 800bad8:	4642      	mov	r2, r8
 800bada:	464b      	mov	r3, r9
 800badc:	4936      	ldr	r1, [pc, #216]	; (800bbb8 <_dtoa_r+0x620>)
 800bade:	2000      	movs	r0, #0
 800bae0:	f7f4 fbd2 	bl	8000288 <__aeabi_dsub>
 800bae4:	4652      	mov	r2, sl
 800bae6:	465b      	mov	r3, fp
 800bae8:	f7f4 fff8 	bl	8000adc <__aeabi_dcmplt>
 800baec:	2800      	cmp	r0, #0
 800baee:	f040 80b5 	bne.w	800bc5c <_dtoa_r+0x6c4>
 800baf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800baf4:	429d      	cmp	r5, r3
 800baf6:	d081      	beq.n	800b9fc <_dtoa_r+0x464>
 800baf8:	4b30      	ldr	r3, [pc, #192]	; (800bbbc <_dtoa_r+0x624>)
 800bafa:	2200      	movs	r2, #0
 800bafc:	4650      	mov	r0, sl
 800bafe:	4659      	mov	r1, fp
 800bb00:	f7f4 fd7a 	bl	80005f8 <__aeabi_dmul>
 800bb04:	4b2d      	ldr	r3, [pc, #180]	; (800bbbc <_dtoa_r+0x624>)
 800bb06:	4682      	mov	sl, r0
 800bb08:	468b      	mov	fp, r1
 800bb0a:	4640      	mov	r0, r8
 800bb0c:	4649      	mov	r1, r9
 800bb0e:	2200      	movs	r2, #0
 800bb10:	f7f4 fd72 	bl	80005f8 <__aeabi_dmul>
 800bb14:	4680      	mov	r8, r0
 800bb16:	4689      	mov	r9, r1
 800bb18:	e7c6      	b.n	800baa8 <_dtoa_r+0x510>
 800bb1a:	4650      	mov	r0, sl
 800bb1c:	4659      	mov	r1, fp
 800bb1e:	f7f4 fd6b 	bl	80005f8 <__aeabi_dmul>
 800bb22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb24:	9d01      	ldr	r5, [sp, #4]
 800bb26:	930f      	str	r3, [sp, #60]	; 0x3c
 800bb28:	4682      	mov	sl, r0
 800bb2a:	468b      	mov	fp, r1
 800bb2c:	4649      	mov	r1, r9
 800bb2e:	4640      	mov	r0, r8
 800bb30:	f7f5 f812 	bl	8000b58 <__aeabi_d2iz>
 800bb34:	4606      	mov	r6, r0
 800bb36:	f7f4 fcf5 	bl	8000524 <__aeabi_i2d>
 800bb3a:	3630      	adds	r6, #48	; 0x30
 800bb3c:	4602      	mov	r2, r0
 800bb3e:	460b      	mov	r3, r1
 800bb40:	4640      	mov	r0, r8
 800bb42:	4649      	mov	r1, r9
 800bb44:	f7f4 fba0 	bl	8000288 <__aeabi_dsub>
 800bb48:	f805 6b01 	strb.w	r6, [r5], #1
 800bb4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb4e:	429d      	cmp	r5, r3
 800bb50:	4680      	mov	r8, r0
 800bb52:	4689      	mov	r9, r1
 800bb54:	f04f 0200 	mov.w	r2, #0
 800bb58:	d124      	bne.n	800bba4 <_dtoa_r+0x60c>
 800bb5a:	4b1b      	ldr	r3, [pc, #108]	; (800bbc8 <_dtoa_r+0x630>)
 800bb5c:	4650      	mov	r0, sl
 800bb5e:	4659      	mov	r1, fp
 800bb60:	f7f4 fb94 	bl	800028c <__adddf3>
 800bb64:	4602      	mov	r2, r0
 800bb66:	460b      	mov	r3, r1
 800bb68:	4640      	mov	r0, r8
 800bb6a:	4649      	mov	r1, r9
 800bb6c:	f7f4 ffd4 	bl	8000b18 <__aeabi_dcmpgt>
 800bb70:	2800      	cmp	r0, #0
 800bb72:	d173      	bne.n	800bc5c <_dtoa_r+0x6c4>
 800bb74:	4652      	mov	r2, sl
 800bb76:	465b      	mov	r3, fp
 800bb78:	4913      	ldr	r1, [pc, #76]	; (800bbc8 <_dtoa_r+0x630>)
 800bb7a:	2000      	movs	r0, #0
 800bb7c:	f7f4 fb84 	bl	8000288 <__aeabi_dsub>
 800bb80:	4602      	mov	r2, r0
 800bb82:	460b      	mov	r3, r1
 800bb84:	4640      	mov	r0, r8
 800bb86:	4649      	mov	r1, r9
 800bb88:	f7f4 ffa8 	bl	8000adc <__aeabi_dcmplt>
 800bb8c:	2800      	cmp	r0, #0
 800bb8e:	f43f af35 	beq.w	800b9fc <_dtoa_r+0x464>
 800bb92:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bb94:	1e6b      	subs	r3, r5, #1
 800bb96:	930f      	str	r3, [sp, #60]	; 0x3c
 800bb98:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bb9c:	2b30      	cmp	r3, #48	; 0x30
 800bb9e:	d0f8      	beq.n	800bb92 <_dtoa_r+0x5fa>
 800bba0:	9700      	str	r7, [sp, #0]
 800bba2:	e049      	b.n	800bc38 <_dtoa_r+0x6a0>
 800bba4:	4b05      	ldr	r3, [pc, #20]	; (800bbbc <_dtoa_r+0x624>)
 800bba6:	f7f4 fd27 	bl	80005f8 <__aeabi_dmul>
 800bbaa:	4680      	mov	r8, r0
 800bbac:	4689      	mov	r9, r1
 800bbae:	e7bd      	b.n	800bb2c <_dtoa_r+0x594>
 800bbb0:	0801d898 	.word	0x0801d898
 800bbb4:	0801d870 	.word	0x0801d870
 800bbb8:	3ff00000 	.word	0x3ff00000
 800bbbc:	40240000 	.word	0x40240000
 800bbc0:	401c0000 	.word	0x401c0000
 800bbc4:	40140000 	.word	0x40140000
 800bbc8:	3fe00000 	.word	0x3fe00000
 800bbcc:	9d01      	ldr	r5, [sp, #4]
 800bbce:	4656      	mov	r6, sl
 800bbd0:	465f      	mov	r7, fp
 800bbd2:	4642      	mov	r2, r8
 800bbd4:	464b      	mov	r3, r9
 800bbd6:	4630      	mov	r0, r6
 800bbd8:	4639      	mov	r1, r7
 800bbda:	f7f4 fe37 	bl	800084c <__aeabi_ddiv>
 800bbde:	f7f4 ffbb 	bl	8000b58 <__aeabi_d2iz>
 800bbe2:	4682      	mov	sl, r0
 800bbe4:	f7f4 fc9e 	bl	8000524 <__aeabi_i2d>
 800bbe8:	4642      	mov	r2, r8
 800bbea:	464b      	mov	r3, r9
 800bbec:	f7f4 fd04 	bl	80005f8 <__aeabi_dmul>
 800bbf0:	4602      	mov	r2, r0
 800bbf2:	460b      	mov	r3, r1
 800bbf4:	4630      	mov	r0, r6
 800bbf6:	4639      	mov	r1, r7
 800bbf8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800bbfc:	f7f4 fb44 	bl	8000288 <__aeabi_dsub>
 800bc00:	f805 6b01 	strb.w	r6, [r5], #1
 800bc04:	9e01      	ldr	r6, [sp, #4]
 800bc06:	9f03      	ldr	r7, [sp, #12]
 800bc08:	1bae      	subs	r6, r5, r6
 800bc0a:	42b7      	cmp	r7, r6
 800bc0c:	4602      	mov	r2, r0
 800bc0e:	460b      	mov	r3, r1
 800bc10:	d135      	bne.n	800bc7e <_dtoa_r+0x6e6>
 800bc12:	f7f4 fb3b 	bl	800028c <__adddf3>
 800bc16:	4642      	mov	r2, r8
 800bc18:	464b      	mov	r3, r9
 800bc1a:	4606      	mov	r6, r0
 800bc1c:	460f      	mov	r7, r1
 800bc1e:	f7f4 ff7b 	bl	8000b18 <__aeabi_dcmpgt>
 800bc22:	b9d0      	cbnz	r0, 800bc5a <_dtoa_r+0x6c2>
 800bc24:	4642      	mov	r2, r8
 800bc26:	464b      	mov	r3, r9
 800bc28:	4630      	mov	r0, r6
 800bc2a:	4639      	mov	r1, r7
 800bc2c:	f7f4 ff4c 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc30:	b110      	cbz	r0, 800bc38 <_dtoa_r+0x6a0>
 800bc32:	f01a 0f01 	tst.w	sl, #1
 800bc36:	d110      	bne.n	800bc5a <_dtoa_r+0x6c2>
 800bc38:	4620      	mov	r0, r4
 800bc3a:	ee18 1a10 	vmov	r1, s16
 800bc3e:	f000 fe67 	bl	800c910 <_Bfree>
 800bc42:	2300      	movs	r3, #0
 800bc44:	9800      	ldr	r0, [sp, #0]
 800bc46:	702b      	strb	r3, [r5, #0]
 800bc48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc4a:	3001      	adds	r0, #1
 800bc4c:	6018      	str	r0, [r3, #0]
 800bc4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	f43f acf1 	beq.w	800b638 <_dtoa_r+0xa0>
 800bc56:	601d      	str	r5, [r3, #0]
 800bc58:	e4ee      	b.n	800b638 <_dtoa_r+0xa0>
 800bc5a:	9f00      	ldr	r7, [sp, #0]
 800bc5c:	462b      	mov	r3, r5
 800bc5e:	461d      	mov	r5, r3
 800bc60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc64:	2a39      	cmp	r2, #57	; 0x39
 800bc66:	d106      	bne.n	800bc76 <_dtoa_r+0x6de>
 800bc68:	9a01      	ldr	r2, [sp, #4]
 800bc6a:	429a      	cmp	r2, r3
 800bc6c:	d1f7      	bne.n	800bc5e <_dtoa_r+0x6c6>
 800bc6e:	9901      	ldr	r1, [sp, #4]
 800bc70:	2230      	movs	r2, #48	; 0x30
 800bc72:	3701      	adds	r7, #1
 800bc74:	700a      	strb	r2, [r1, #0]
 800bc76:	781a      	ldrb	r2, [r3, #0]
 800bc78:	3201      	adds	r2, #1
 800bc7a:	701a      	strb	r2, [r3, #0]
 800bc7c:	e790      	b.n	800bba0 <_dtoa_r+0x608>
 800bc7e:	4ba6      	ldr	r3, [pc, #664]	; (800bf18 <_dtoa_r+0x980>)
 800bc80:	2200      	movs	r2, #0
 800bc82:	f7f4 fcb9 	bl	80005f8 <__aeabi_dmul>
 800bc86:	2200      	movs	r2, #0
 800bc88:	2300      	movs	r3, #0
 800bc8a:	4606      	mov	r6, r0
 800bc8c:	460f      	mov	r7, r1
 800bc8e:	f7f4 ff1b 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc92:	2800      	cmp	r0, #0
 800bc94:	d09d      	beq.n	800bbd2 <_dtoa_r+0x63a>
 800bc96:	e7cf      	b.n	800bc38 <_dtoa_r+0x6a0>
 800bc98:	9a08      	ldr	r2, [sp, #32]
 800bc9a:	2a00      	cmp	r2, #0
 800bc9c:	f000 80d7 	beq.w	800be4e <_dtoa_r+0x8b6>
 800bca0:	9a06      	ldr	r2, [sp, #24]
 800bca2:	2a01      	cmp	r2, #1
 800bca4:	f300 80ba 	bgt.w	800be1c <_dtoa_r+0x884>
 800bca8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bcaa:	2a00      	cmp	r2, #0
 800bcac:	f000 80b2 	beq.w	800be14 <_dtoa_r+0x87c>
 800bcb0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bcb4:	9e07      	ldr	r6, [sp, #28]
 800bcb6:	9d04      	ldr	r5, [sp, #16]
 800bcb8:	9a04      	ldr	r2, [sp, #16]
 800bcba:	441a      	add	r2, r3
 800bcbc:	9204      	str	r2, [sp, #16]
 800bcbe:	9a05      	ldr	r2, [sp, #20]
 800bcc0:	2101      	movs	r1, #1
 800bcc2:	441a      	add	r2, r3
 800bcc4:	4620      	mov	r0, r4
 800bcc6:	9205      	str	r2, [sp, #20]
 800bcc8:	f000 ff24 	bl	800cb14 <__i2b>
 800bccc:	4607      	mov	r7, r0
 800bcce:	2d00      	cmp	r5, #0
 800bcd0:	dd0c      	ble.n	800bcec <_dtoa_r+0x754>
 800bcd2:	9b05      	ldr	r3, [sp, #20]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	dd09      	ble.n	800bcec <_dtoa_r+0x754>
 800bcd8:	42ab      	cmp	r3, r5
 800bcda:	9a04      	ldr	r2, [sp, #16]
 800bcdc:	bfa8      	it	ge
 800bcde:	462b      	movge	r3, r5
 800bce0:	1ad2      	subs	r2, r2, r3
 800bce2:	9204      	str	r2, [sp, #16]
 800bce4:	9a05      	ldr	r2, [sp, #20]
 800bce6:	1aed      	subs	r5, r5, r3
 800bce8:	1ad3      	subs	r3, r2, r3
 800bcea:	9305      	str	r3, [sp, #20]
 800bcec:	9b07      	ldr	r3, [sp, #28]
 800bcee:	b31b      	cbz	r3, 800bd38 <_dtoa_r+0x7a0>
 800bcf0:	9b08      	ldr	r3, [sp, #32]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	f000 80af 	beq.w	800be56 <_dtoa_r+0x8be>
 800bcf8:	2e00      	cmp	r6, #0
 800bcfa:	dd13      	ble.n	800bd24 <_dtoa_r+0x78c>
 800bcfc:	4639      	mov	r1, r7
 800bcfe:	4632      	mov	r2, r6
 800bd00:	4620      	mov	r0, r4
 800bd02:	f000 ffc7 	bl	800cc94 <__pow5mult>
 800bd06:	ee18 2a10 	vmov	r2, s16
 800bd0a:	4601      	mov	r1, r0
 800bd0c:	4607      	mov	r7, r0
 800bd0e:	4620      	mov	r0, r4
 800bd10:	f000 ff16 	bl	800cb40 <__multiply>
 800bd14:	ee18 1a10 	vmov	r1, s16
 800bd18:	4680      	mov	r8, r0
 800bd1a:	4620      	mov	r0, r4
 800bd1c:	f000 fdf8 	bl	800c910 <_Bfree>
 800bd20:	ee08 8a10 	vmov	s16, r8
 800bd24:	9b07      	ldr	r3, [sp, #28]
 800bd26:	1b9a      	subs	r2, r3, r6
 800bd28:	d006      	beq.n	800bd38 <_dtoa_r+0x7a0>
 800bd2a:	ee18 1a10 	vmov	r1, s16
 800bd2e:	4620      	mov	r0, r4
 800bd30:	f000 ffb0 	bl	800cc94 <__pow5mult>
 800bd34:	ee08 0a10 	vmov	s16, r0
 800bd38:	2101      	movs	r1, #1
 800bd3a:	4620      	mov	r0, r4
 800bd3c:	f000 feea 	bl	800cb14 <__i2b>
 800bd40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	4606      	mov	r6, r0
 800bd46:	f340 8088 	ble.w	800be5a <_dtoa_r+0x8c2>
 800bd4a:	461a      	mov	r2, r3
 800bd4c:	4601      	mov	r1, r0
 800bd4e:	4620      	mov	r0, r4
 800bd50:	f000 ffa0 	bl	800cc94 <__pow5mult>
 800bd54:	9b06      	ldr	r3, [sp, #24]
 800bd56:	2b01      	cmp	r3, #1
 800bd58:	4606      	mov	r6, r0
 800bd5a:	f340 8081 	ble.w	800be60 <_dtoa_r+0x8c8>
 800bd5e:	f04f 0800 	mov.w	r8, #0
 800bd62:	6933      	ldr	r3, [r6, #16]
 800bd64:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bd68:	6918      	ldr	r0, [r3, #16]
 800bd6a:	f000 fe83 	bl	800ca74 <__hi0bits>
 800bd6e:	f1c0 0020 	rsb	r0, r0, #32
 800bd72:	9b05      	ldr	r3, [sp, #20]
 800bd74:	4418      	add	r0, r3
 800bd76:	f010 001f 	ands.w	r0, r0, #31
 800bd7a:	f000 8092 	beq.w	800bea2 <_dtoa_r+0x90a>
 800bd7e:	f1c0 0320 	rsb	r3, r0, #32
 800bd82:	2b04      	cmp	r3, #4
 800bd84:	f340 808a 	ble.w	800be9c <_dtoa_r+0x904>
 800bd88:	f1c0 001c 	rsb	r0, r0, #28
 800bd8c:	9b04      	ldr	r3, [sp, #16]
 800bd8e:	4403      	add	r3, r0
 800bd90:	9304      	str	r3, [sp, #16]
 800bd92:	9b05      	ldr	r3, [sp, #20]
 800bd94:	4403      	add	r3, r0
 800bd96:	4405      	add	r5, r0
 800bd98:	9305      	str	r3, [sp, #20]
 800bd9a:	9b04      	ldr	r3, [sp, #16]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	dd07      	ble.n	800bdb0 <_dtoa_r+0x818>
 800bda0:	ee18 1a10 	vmov	r1, s16
 800bda4:	461a      	mov	r2, r3
 800bda6:	4620      	mov	r0, r4
 800bda8:	f000 ffce 	bl	800cd48 <__lshift>
 800bdac:	ee08 0a10 	vmov	s16, r0
 800bdb0:	9b05      	ldr	r3, [sp, #20]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	dd05      	ble.n	800bdc2 <_dtoa_r+0x82a>
 800bdb6:	4631      	mov	r1, r6
 800bdb8:	461a      	mov	r2, r3
 800bdba:	4620      	mov	r0, r4
 800bdbc:	f000 ffc4 	bl	800cd48 <__lshift>
 800bdc0:	4606      	mov	r6, r0
 800bdc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d06e      	beq.n	800bea6 <_dtoa_r+0x90e>
 800bdc8:	ee18 0a10 	vmov	r0, s16
 800bdcc:	4631      	mov	r1, r6
 800bdce:	f001 f82b 	bl	800ce28 <__mcmp>
 800bdd2:	2800      	cmp	r0, #0
 800bdd4:	da67      	bge.n	800bea6 <_dtoa_r+0x90e>
 800bdd6:	9b00      	ldr	r3, [sp, #0]
 800bdd8:	3b01      	subs	r3, #1
 800bdda:	ee18 1a10 	vmov	r1, s16
 800bdde:	9300      	str	r3, [sp, #0]
 800bde0:	220a      	movs	r2, #10
 800bde2:	2300      	movs	r3, #0
 800bde4:	4620      	mov	r0, r4
 800bde6:	f000 fdb5 	bl	800c954 <__multadd>
 800bdea:	9b08      	ldr	r3, [sp, #32]
 800bdec:	ee08 0a10 	vmov	s16, r0
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	f000 81b1 	beq.w	800c158 <_dtoa_r+0xbc0>
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	4639      	mov	r1, r7
 800bdfa:	220a      	movs	r2, #10
 800bdfc:	4620      	mov	r0, r4
 800bdfe:	f000 fda9 	bl	800c954 <__multadd>
 800be02:	9b02      	ldr	r3, [sp, #8]
 800be04:	2b00      	cmp	r3, #0
 800be06:	4607      	mov	r7, r0
 800be08:	f300 808e 	bgt.w	800bf28 <_dtoa_r+0x990>
 800be0c:	9b06      	ldr	r3, [sp, #24]
 800be0e:	2b02      	cmp	r3, #2
 800be10:	dc51      	bgt.n	800beb6 <_dtoa_r+0x91e>
 800be12:	e089      	b.n	800bf28 <_dtoa_r+0x990>
 800be14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800be16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800be1a:	e74b      	b.n	800bcb4 <_dtoa_r+0x71c>
 800be1c:	9b03      	ldr	r3, [sp, #12]
 800be1e:	1e5e      	subs	r6, r3, #1
 800be20:	9b07      	ldr	r3, [sp, #28]
 800be22:	42b3      	cmp	r3, r6
 800be24:	bfbf      	itttt	lt
 800be26:	9b07      	ldrlt	r3, [sp, #28]
 800be28:	9607      	strlt	r6, [sp, #28]
 800be2a:	1af2      	sublt	r2, r6, r3
 800be2c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800be2e:	bfb6      	itet	lt
 800be30:	189b      	addlt	r3, r3, r2
 800be32:	1b9e      	subge	r6, r3, r6
 800be34:	930a      	strlt	r3, [sp, #40]	; 0x28
 800be36:	9b03      	ldr	r3, [sp, #12]
 800be38:	bfb8      	it	lt
 800be3a:	2600      	movlt	r6, #0
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	bfb7      	itett	lt
 800be40:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800be44:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800be48:	1a9d      	sublt	r5, r3, r2
 800be4a:	2300      	movlt	r3, #0
 800be4c:	e734      	b.n	800bcb8 <_dtoa_r+0x720>
 800be4e:	9e07      	ldr	r6, [sp, #28]
 800be50:	9d04      	ldr	r5, [sp, #16]
 800be52:	9f08      	ldr	r7, [sp, #32]
 800be54:	e73b      	b.n	800bcce <_dtoa_r+0x736>
 800be56:	9a07      	ldr	r2, [sp, #28]
 800be58:	e767      	b.n	800bd2a <_dtoa_r+0x792>
 800be5a:	9b06      	ldr	r3, [sp, #24]
 800be5c:	2b01      	cmp	r3, #1
 800be5e:	dc18      	bgt.n	800be92 <_dtoa_r+0x8fa>
 800be60:	f1ba 0f00 	cmp.w	sl, #0
 800be64:	d115      	bne.n	800be92 <_dtoa_r+0x8fa>
 800be66:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800be6a:	b993      	cbnz	r3, 800be92 <_dtoa_r+0x8fa>
 800be6c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800be70:	0d1b      	lsrs	r3, r3, #20
 800be72:	051b      	lsls	r3, r3, #20
 800be74:	b183      	cbz	r3, 800be98 <_dtoa_r+0x900>
 800be76:	9b04      	ldr	r3, [sp, #16]
 800be78:	3301      	adds	r3, #1
 800be7a:	9304      	str	r3, [sp, #16]
 800be7c:	9b05      	ldr	r3, [sp, #20]
 800be7e:	3301      	adds	r3, #1
 800be80:	9305      	str	r3, [sp, #20]
 800be82:	f04f 0801 	mov.w	r8, #1
 800be86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be88:	2b00      	cmp	r3, #0
 800be8a:	f47f af6a 	bne.w	800bd62 <_dtoa_r+0x7ca>
 800be8e:	2001      	movs	r0, #1
 800be90:	e76f      	b.n	800bd72 <_dtoa_r+0x7da>
 800be92:	f04f 0800 	mov.w	r8, #0
 800be96:	e7f6      	b.n	800be86 <_dtoa_r+0x8ee>
 800be98:	4698      	mov	r8, r3
 800be9a:	e7f4      	b.n	800be86 <_dtoa_r+0x8ee>
 800be9c:	f43f af7d 	beq.w	800bd9a <_dtoa_r+0x802>
 800bea0:	4618      	mov	r0, r3
 800bea2:	301c      	adds	r0, #28
 800bea4:	e772      	b.n	800bd8c <_dtoa_r+0x7f4>
 800bea6:	9b03      	ldr	r3, [sp, #12]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	dc37      	bgt.n	800bf1c <_dtoa_r+0x984>
 800beac:	9b06      	ldr	r3, [sp, #24]
 800beae:	2b02      	cmp	r3, #2
 800beb0:	dd34      	ble.n	800bf1c <_dtoa_r+0x984>
 800beb2:	9b03      	ldr	r3, [sp, #12]
 800beb4:	9302      	str	r3, [sp, #8]
 800beb6:	9b02      	ldr	r3, [sp, #8]
 800beb8:	b96b      	cbnz	r3, 800bed6 <_dtoa_r+0x93e>
 800beba:	4631      	mov	r1, r6
 800bebc:	2205      	movs	r2, #5
 800bebe:	4620      	mov	r0, r4
 800bec0:	f000 fd48 	bl	800c954 <__multadd>
 800bec4:	4601      	mov	r1, r0
 800bec6:	4606      	mov	r6, r0
 800bec8:	ee18 0a10 	vmov	r0, s16
 800becc:	f000 ffac 	bl	800ce28 <__mcmp>
 800bed0:	2800      	cmp	r0, #0
 800bed2:	f73f adbb 	bgt.w	800ba4c <_dtoa_r+0x4b4>
 800bed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bed8:	9d01      	ldr	r5, [sp, #4]
 800beda:	43db      	mvns	r3, r3
 800bedc:	9300      	str	r3, [sp, #0]
 800bede:	f04f 0800 	mov.w	r8, #0
 800bee2:	4631      	mov	r1, r6
 800bee4:	4620      	mov	r0, r4
 800bee6:	f000 fd13 	bl	800c910 <_Bfree>
 800beea:	2f00      	cmp	r7, #0
 800beec:	f43f aea4 	beq.w	800bc38 <_dtoa_r+0x6a0>
 800bef0:	f1b8 0f00 	cmp.w	r8, #0
 800bef4:	d005      	beq.n	800bf02 <_dtoa_r+0x96a>
 800bef6:	45b8      	cmp	r8, r7
 800bef8:	d003      	beq.n	800bf02 <_dtoa_r+0x96a>
 800befa:	4641      	mov	r1, r8
 800befc:	4620      	mov	r0, r4
 800befe:	f000 fd07 	bl	800c910 <_Bfree>
 800bf02:	4639      	mov	r1, r7
 800bf04:	4620      	mov	r0, r4
 800bf06:	f000 fd03 	bl	800c910 <_Bfree>
 800bf0a:	e695      	b.n	800bc38 <_dtoa_r+0x6a0>
 800bf0c:	2600      	movs	r6, #0
 800bf0e:	4637      	mov	r7, r6
 800bf10:	e7e1      	b.n	800bed6 <_dtoa_r+0x93e>
 800bf12:	9700      	str	r7, [sp, #0]
 800bf14:	4637      	mov	r7, r6
 800bf16:	e599      	b.n	800ba4c <_dtoa_r+0x4b4>
 800bf18:	40240000 	.word	0x40240000
 800bf1c:	9b08      	ldr	r3, [sp, #32]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	f000 80ca 	beq.w	800c0b8 <_dtoa_r+0xb20>
 800bf24:	9b03      	ldr	r3, [sp, #12]
 800bf26:	9302      	str	r3, [sp, #8]
 800bf28:	2d00      	cmp	r5, #0
 800bf2a:	dd05      	ble.n	800bf38 <_dtoa_r+0x9a0>
 800bf2c:	4639      	mov	r1, r7
 800bf2e:	462a      	mov	r2, r5
 800bf30:	4620      	mov	r0, r4
 800bf32:	f000 ff09 	bl	800cd48 <__lshift>
 800bf36:	4607      	mov	r7, r0
 800bf38:	f1b8 0f00 	cmp.w	r8, #0
 800bf3c:	d05b      	beq.n	800bff6 <_dtoa_r+0xa5e>
 800bf3e:	6879      	ldr	r1, [r7, #4]
 800bf40:	4620      	mov	r0, r4
 800bf42:	f000 fca5 	bl	800c890 <_Balloc>
 800bf46:	4605      	mov	r5, r0
 800bf48:	b928      	cbnz	r0, 800bf56 <_dtoa_r+0x9be>
 800bf4a:	4b87      	ldr	r3, [pc, #540]	; (800c168 <_dtoa_r+0xbd0>)
 800bf4c:	4602      	mov	r2, r0
 800bf4e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bf52:	f7ff bb3b 	b.w	800b5cc <_dtoa_r+0x34>
 800bf56:	693a      	ldr	r2, [r7, #16]
 800bf58:	3202      	adds	r2, #2
 800bf5a:	0092      	lsls	r2, r2, #2
 800bf5c:	f107 010c 	add.w	r1, r7, #12
 800bf60:	300c      	adds	r0, #12
 800bf62:	f7fd fce9 	bl	8009938 <memcpy>
 800bf66:	2201      	movs	r2, #1
 800bf68:	4629      	mov	r1, r5
 800bf6a:	4620      	mov	r0, r4
 800bf6c:	f000 feec 	bl	800cd48 <__lshift>
 800bf70:	9b01      	ldr	r3, [sp, #4]
 800bf72:	f103 0901 	add.w	r9, r3, #1
 800bf76:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800bf7a:	4413      	add	r3, r2
 800bf7c:	9305      	str	r3, [sp, #20]
 800bf7e:	f00a 0301 	and.w	r3, sl, #1
 800bf82:	46b8      	mov	r8, r7
 800bf84:	9304      	str	r3, [sp, #16]
 800bf86:	4607      	mov	r7, r0
 800bf88:	4631      	mov	r1, r6
 800bf8a:	ee18 0a10 	vmov	r0, s16
 800bf8e:	f7ff fa75 	bl	800b47c <quorem>
 800bf92:	4641      	mov	r1, r8
 800bf94:	9002      	str	r0, [sp, #8]
 800bf96:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bf9a:	ee18 0a10 	vmov	r0, s16
 800bf9e:	f000 ff43 	bl	800ce28 <__mcmp>
 800bfa2:	463a      	mov	r2, r7
 800bfa4:	9003      	str	r0, [sp, #12]
 800bfa6:	4631      	mov	r1, r6
 800bfa8:	4620      	mov	r0, r4
 800bfaa:	f000 ff59 	bl	800ce60 <__mdiff>
 800bfae:	68c2      	ldr	r2, [r0, #12]
 800bfb0:	f109 3bff 	add.w	fp, r9, #4294967295
 800bfb4:	4605      	mov	r5, r0
 800bfb6:	bb02      	cbnz	r2, 800bffa <_dtoa_r+0xa62>
 800bfb8:	4601      	mov	r1, r0
 800bfba:	ee18 0a10 	vmov	r0, s16
 800bfbe:	f000 ff33 	bl	800ce28 <__mcmp>
 800bfc2:	4602      	mov	r2, r0
 800bfc4:	4629      	mov	r1, r5
 800bfc6:	4620      	mov	r0, r4
 800bfc8:	9207      	str	r2, [sp, #28]
 800bfca:	f000 fca1 	bl	800c910 <_Bfree>
 800bfce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800bfd2:	ea43 0102 	orr.w	r1, r3, r2
 800bfd6:	9b04      	ldr	r3, [sp, #16]
 800bfd8:	430b      	orrs	r3, r1
 800bfda:	464d      	mov	r5, r9
 800bfdc:	d10f      	bne.n	800bffe <_dtoa_r+0xa66>
 800bfde:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bfe2:	d02a      	beq.n	800c03a <_dtoa_r+0xaa2>
 800bfe4:	9b03      	ldr	r3, [sp, #12]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	dd02      	ble.n	800bff0 <_dtoa_r+0xa58>
 800bfea:	9b02      	ldr	r3, [sp, #8]
 800bfec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bff0:	f88b a000 	strb.w	sl, [fp]
 800bff4:	e775      	b.n	800bee2 <_dtoa_r+0x94a>
 800bff6:	4638      	mov	r0, r7
 800bff8:	e7ba      	b.n	800bf70 <_dtoa_r+0x9d8>
 800bffa:	2201      	movs	r2, #1
 800bffc:	e7e2      	b.n	800bfc4 <_dtoa_r+0xa2c>
 800bffe:	9b03      	ldr	r3, [sp, #12]
 800c000:	2b00      	cmp	r3, #0
 800c002:	db04      	blt.n	800c00e <_dtoa_r+0xa76>
 800c004:	9906      	ldr	r1, [sp, #24]
 800c006:	430b      	orrs	r3, r1
 800c008:	9904      	ldr	r1, [sp, #16]
 800c00a:	430b      	orrs	r3, r1
 800c00c:	d122      	bne.n	800c054 <_dtoa_r+0xabc>
 800c00e:	2a00      	cmp	r2, #0
 800c010:	ddee      	ble.n	800bff0 <_dtoa_r+0xa58>
 800c012:	ee18 1a10 	vmov	r1, s16
 800c016:	2201      	movs	r2, #1
 800c018:	4620      	mov	r0, r4
 800c01a:	f000 fe95 	bl	800cd48 <__lshift>
 800c01e:	4631      	mov	r1, r6
 800c020:	ee08 0a10 	vmov	s16, r0
 800c024:	f000 ff00 	bl	800ce28 <__mcmp>
 800c028:	2800      	cmp	r0, #0
 800c02a:	dc03      	bgt.n	800c034 <_dtoa_r+0xa9c>
 800c02c:	d1e0      	bne.n	800bff0 <_dtoa_r+0xa58>
 800c02e:	f01a 0f01 	tst.w	sl, #1
 800c032:	d0dd      	beq.n	800bff0 <_dtoa_r+0xa58>
 800c034:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c038:	d1d7      	bne.n	800bfea <_dtoa_r+0xa52>
 800c03a:	2339      	movs	r3, #57	; 0x39
 800c03c:	f88b 3000 	strb.w	r3, [fp]
 800c040:	462b      	mov	r3, r5
 800c042:	461d      	mov	r5, r3
 800c044:	3b01      	subs	r3, #1
 800c046:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c04a:	2a39      	cmp	r2, #57	; 0x39
 800c04c:	d071      	beq.n	800c132 <_dtoa_r+0xb9a>
 800c04e:	3201      	adds	r2, #1
 800c050:	701a      	strb	r2, [r3, #0]
 800c052:	e746      	b.n	800bee2 <_dtoa_r+0x94a>
 800c054:	2a00      	cmp	r2, #0
 800c056:	dd07      	ble.n	800c068 <_dtoa_r+0xad0>
 800c058:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c05c:	d0ed      	beq.n	800c03a <_dtoa_r+0xaa2>
 800c05e:	f10a 0301 	add.w	r3, sl, #1
 800c062:	f88b 3000 	strb.w	r3, [fp]
 800c066:	e73c      	b.n	800bee2 <_dtoa_r+0x94a>
 800c068:	9b05      	ldr	r3, [sp, #20]
 800c06a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c06e:	4599      	cmp	r9, r3
 800c070:	d047      	beq.n	800c102 <_dtoa_r+0xb6a>
 800c072:	ee18 1a10 	vmov	r1, s16
 800c076:	2300      	movs	r3, #0
 800c078:	220a      	movs	r2, #10
 800c07a:	4620      	mov	r0, r4
 800c07c:	f000 fc6a 	bl	800c954 <__multadd>
 800c080:	45b8      	cmp	r8, r7
 800c082:	ee08 0a10 	vmov	s16, r0
 800c086:	f04f 0300 	mov.w	r3, #0
 800c08a:	f04f 020a 	mov.w	r2, #10
 800c08e:	4641      	mov	r1, r8
 800c090:	4620      	mov	r0, r4
 800c092:	d106      	bne.n	800c0a2 <_dtoa_r+0xb0a>
 800c094:	f000 fc5e 	bl	800c954 <__multadd>
 800c098:	4680      	mov	r8, r0
 800c09a:	4607      	mov	r7, r0
 800c09c:	f109 0901 	add.w	r9, r9, #1
 800c0a0:	e772      	b.n	800bf88 <_dtoa_r+0x9f0>
 800c0a2:	f000 fc57 	bl	800c954 <__multadd>
 800c0a6:	4639      	mov	r1, r7
 800c0a8:	4680      	mov	r8, r0
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	220a      	movs	r2, #10
 800c0ae:	4620      	mov	r0, r4
 800c0b0:	f000 fc50 	bl	800c954 <__multadd>
 800c0b4:	4607      	mov	r7, r0
 800c0b6:	e7f1      	b.n	800c09c <_dtoa_r+0xb04>
 800c0b8:	9b03      	ldr	r3, [sp, #12]
 800c0ba:	9302      	str	r3, [sp, #8]
 800c0bc:	9d01      	ldr	r5, [sp, #4]
 800c0be:	ee18 0a10 	vmov	r0, s16
 800c0c2:	4631      	mov	r1, r6
 800c0c4:	f7ff f9da 	bl	800b47c <quorem>
 800c0c8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c0cc:	9b01      	ldr	r3, [sp, #4]
 800c0ce:	f805 ab01 	strb.w	sl, [r5], #1
 800c0d2:	1aea      	subs	r2, r5, r3
 800c0d4:	9b02      	ldr	r3, [sp, #8]
 800c0d6:	4293      	cmp	r3, r2
 800c0d8:	dd09      	ble.n	800c0ee <_dtoa_r+0xb56>
 800c0da:	ee18 1a10 	vmov	r1, s16
 800c0de:	2300      	movs	r3, #0
 800c0e0:	220a      	movs	r2, #10
 800c0e2:	4620      	mov	r0, r4
 800c0e4:	f000 fc36 	bl	800c954 <__multadd>
 800c0e8:	ee08 0a10 	vmov	s16, r0
 800c0ec:	e7e7      	b.n	800c0be <_dtoa_r+0xb26>
 800c0ee:	9b02      	ldr	r3, [sp, #8]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	bfc8      	it	gt
 800c0f4:	461d      	movgt	r5, r3
 800c0f6:	9b01      	ldr	r3, [sp, #4]
 800c0f8:	bfd8      	it	le
 800c0fa:	2501      	movle	r5, #1
 800c0fc:	441d      	add	r5, r3
 800c0fe:	f04f 0800 	mov.w	r8, #0
 800c102:	ee18 1a10 	vmov	r1, s16
 800c106:	2201      	movs	r2, #1
 800c108:	4620      	mov	r0, r4
 800c10a:	f000 fe1d 	bl	800cd48 <__lshift>
 800c10e:	4631      	mov	r1, r6
 800c110:	ee08 0a10 	vmov	s16, r0
 800c114:	f000 fe88 	bl	800ce28 <__mcmp>
 800c118:	2800      	cmp	r0, #0
 800c11a:	dc91      	bgt.n	800c040 <_dtoa_r+0xaa8>
 800c11c:	d102      	bne.n	800c124 <_dtoa_r+0xb8c>
 800c11e:	f01a 0f01 	tst.w	sl, #1
 800c122:	d18d      	bne.n	800c040 <_dtoa_r+0xaa8>
 800c124:	462b      	mov	r3, r5
 800c126:	461d      	mov	r5, r3
 800c128:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c12c:	2a30      	cmp	r2, #48	; 0x30
 800c12e:	d0fa      	beq.n	800c126 <_dtoa_r+0xb8e>
 800c130:	e6d7      	b.n	800bee2 <_dtoa_r+0x94a>
 800c132:	9a01      	ldr	r2, [sp, #4]
 800c134:	429a      	cmp	r2, r3
 800c136:	d184      	bne.n	800c042 <_dtoa_r+0xaaa>
 800c138:	9b00      	ldr	r3, [sp, #0]
 800c13a:	3301      	adds	r3, #1
 800c13c:	9300      	str	r3, [sp, #0]
 800c13e:	2331      	movs	r3, #49	; 0x31
 800c140:	7013      	strb	r3, [r2, #0]
 800c142:	e6ce      	b.n	800bee2 <_dtoa_r+0x94a>
 800c144:	4b09      	ldr	r3, [pc, #36]	; (800c16c <_dtoa_r+0xbd4>)
 800c146:	f7ff ba95 	b.w	800b674 <_dtoa_r+0xdc>
 800c14a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	f47f aa6e 	bne.w	800b62e <_dtoa_r+0x96>
 800c152:	4b07      	ldr	r3, [pc, #28]	; (800c170 <_dtoa_r+0xbd8>)
 800c154:	f7ff ba8e 	b.w	800b674 <_dtoa_r+0xdc>
 800c158:	9b02      	ldr	r3, [sp, #8]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	dcae      	bgt.n	800c0bc <_dtoa_r+0xb24>
 800c15e:	9b06      	ldr	r3, [sp, #24]
 800c160:	2b02      	cmp	r3, #2
 800c162:	f73f aea8 	bgt.w	800beb6 <_dtoa_r+0x91e>
 800c166:	e7a9      	b.n	800c0bc <_dtoa_r+0xb24>
 800c168:	0801d788 	.word	0x0801d788
 800c16c:	0801d588 	.word	0x0801d588
 800c170:	0801d709 	.word	0x0801d709

0800c174 <rshift>:
 800c174:	6903      	ldr	r3, [r0, #16]
 800c176:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c17a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c17e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c182:	f100 0414 	add.w	r4, r0, #20
 800c186:	dd45      	ble.n	800c214 <rshift+0xa0>
 800c188:	f011 011f 	ands.w	r1, r1, #31
 800c18c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c190:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c194:	d10c      	bne.n	800c1b0 <rshift+0x3c>
 800c196:	f100 0710 	add.w	r7, r0, #16
 800c19a:	4629      	mov	r1, r5
 800c19c:	42b1      	cmp	r1, r6
 800c19e:	d334      	bcc.n	800c20a <rshift+0x96>
 800c1a0:	1a9b      	subs	r3, r3, r2
 800c1a2:	009b      	lsls	r3, r3, #2
 800c1a4:	1eea      	subs	r2, r5, #3
 800c1a6:	4296      	cmp	r6, r2
 800c1a8:	bf38      	it	cc
 800c1aa:	2300      	movcc	r3, #0
 800c1ac:	4423      	add	r3, r4
 800c1ae:	e015      	b.n	800c1dc <rshift+0x68>
 800c1b0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c1b4:	f1c1 0820 	rsb	r8, r1, #32
 800c1b8:	40cf      	lsrs	r7, r1
 800c1ba:	f105 0e04 	add.w	lr, r5, #4
 800c1be:	46a1      	mov	r9, r4
 800c1c0:	4576      	cmp	r6, lr
 800c1c2:	46f4      	mov	ip, lr
 800c1c4:	d815      	bhi.n	800c1f2 <rshift+0x7e>
 800c1c6:	1a9a      	subs	r2, r3, r2
 800c1c8:	0092      	lsls	r2, r2, #2
 800c1ca:	3a04      	subs	r2, #4
 800c1cc:	3501      	adds	r5, #1
 800c1ce:	42ae      	cmp	r6, r5
 800c1d0:	bf38      	it	cc
 800c1d2:	2200      	movcc	r2, #0
 800c1d4:	18a3      	adds	r3, r4, r2
 800c1d6:	50a7      	str	r7, [r4, r2]
 800c1d8:	b107      	cbz	r7, 800c1dc <rshift+0x68>
 800c1da:	3304      	adds	r3, #4
 800c1dc:	1b1a      	subs	r2, r3, r4
 800c1de:	42a3      	cmp	r3, r4
 800c1e0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c1e4:	bf08      	it	eq
 800c1e6:	2300      	moveq	r3, #0
 800c1e8:	6102      	str	r2, [r0, #16]
 800c1ea:	bf08      	it	eq
 800c1ec:	6143      	streq	r3, [r0, #20]
 800c1ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c1f2:	f8dc c000 	ldr.w	ip, [ip]
 800c1f6:	fa0c fc08 	lsl.w	ip, ip, r8
 800c1fa:	ea4c 0707 	orr.w	r7, ip, r7
 800c1fe:	f849 7b04 	str.w	r7, [r9], #4
 800c202:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c206:	40cf      	lsrs	r7, r1
 800c208:	e7da      	b.n	800c1c0 <rshift+0x4c>
 800c20a:	f851 cb04 	ldr.w	ip, [r1], #4
 800c20e:	f847 cf04 	str.w	ip, [r7, #4]!
 800c212:	e7c3      	b.n	800c19c <rshift+0x28>
 800c214:	4623      	mov	r3, r4
 800c216:	e7e1      	b.n	800c1dc <rshift+0x68>

0800c218 <__hexdig_fun>:
 800c218:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c21c:	2b09      	cmp	r3, #9
 800c21e:	d802      	bhi.n	800c226 <__hexdig_fun+0xe>
 800c220:	3820      	subs	r0, #32
 800c222:	b2c0      	uxtb	r0, r0
 800c224:	4770      	bx	lr
 800c226:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c22a:	2b05      	cmp	r3, #5
 800c22c:	d801      	bhi.n	800c232 <__hexdig_fun+0x1a>
 800c22e:	3847      	subs	r0, #71	; 0x47
 800c230:	e7f7      	b.n	800c222 <__hexdig_fun+0xa>
 800c232:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c236:	2b05      	cmp	r3, #5
 800c238:	d801      	bhi.n	800c23e <__hexdig_fun+0x26>
 800c23a:	3827      	subs	r0, #39	; 0x27
 800c23c:	e7f1      	b.n	800c222 <__hexdig_fun+0xa>
 800c23e:	2000      	movs	r0, #0
 800c240:	4770      	bx	lr
	...

0800c244 <__gethex>:
 800c244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c248:	ed2d 8b02 	vpush	{d8}
 800c24c:	b089      	sub	sp, #36	; 0x24
 800c24e:	ee08 0a10 	vmov	s16, r0
 800c252:	9304      	str	r3, [sp, #16]
 800c254:	4bb4      	ldr	r3, [pc, #720]	; (800c528 <__gethex+0x2e4>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	9301      	str	r3, [sp, #4]
 800c25a:	4618      	mov	r0, r3
 800c25c:	468b      	mov	fp, r1
 800c25e:	4690      	mov	r8, r2
 800c260:	f7f3 ffb6 	bl	80001d0 <strlen>
 800c264:	9b01      	ldr	r3, [sp, #4]
 800c266:	f8db 2000 	ldr.w	r2, [fp]
 800c26a:	4403      	add	r3, r0
 800c26c:	4682      	mov	sl, r0
 800c26e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c272:	9305      	str	r3, [sp, #20]
 800c274:	1c93      	adds	r3, r2, #2
 800c276:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c27a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c27e:	32fe      	adds	r2, #254	; 0xfe
 800c280:	18d1      	adds	r1, r2, r3
 800c282:	461f      	mov	r7, r3
 800c284:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c288:	9100      	str	r1, [sp, #0]
 800c28a:	2830      	cmp	r0, #48	; 0x30
 800c28c:	d0f8      	beq.n	800c280 <__gethex+0x3c>
 800c28e:	f7ff ffc3 	bl	800c218 <__hexdig_fun>
 800c292:	4604      	mov	r4, r0
 800c294:	2800      	cmp	r0, #0
 800c296:	d13a      	bne.n	800c30e <__gethex+0xca>
 800c298:	9901      	ldr	r1, [sp, #4]
 800c29a:	4652      	mov	r2, sl
 800c29c:	4638      	mov	r0, r7
 800c29e:	f001 fa23 	bl	800d6e8 <strncmp>
 800c2a2:	4605      	mov	r5, r0
 800c2a4:	2800      	cmp	r0, #0
 800c2a6:	d168      	bne.n	800c37a <__gethex+0x136>
 800c2a8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c2ac:	eb07 060a 	add.w	r6, r7, sl
 800c2b0:	f7ff ffb2 	bl	800c218 <__hexdig_fun>
 800c2b4:	2800      	cmp	r0, #0
 800c2b6:	d062      	beq.n	800c37e <__gethex+0x13a>
 800c2b8:	4633      	mov	r3, r6
 800c2ba:	7818      	ldrb	r0, [r3, #0]
 800c2bc:	2830      	cmp	r0, #48	; 0x30
 800c2be:	461f      	mov	r7, r3
 800c2c0:	f103 0301 	add.w	r3, r3, #1
 800c2c4:	d0f9      	beq.n	800c2ba <__gethex+0x76>
 800c2c6:	f7ff ffa7 	bl	800c218 <__hexdig_fun>
 800c2ca:	2301      	movs	r3, #1
 800c2cc:	fab0 f480 	clz	r4, r0
 800c2d0:	0964      	lsrs	r4, r4, #5
 800c2d2:	4635      	mov	r5, r6
 800c2d4:	9300      	str	r3, [sp, #0]
 800c2d6:	463a      	mov	r2, r7
 800c2d8:	4616      	mov	r6, r2
 800c2da:	3201      	adds	r2, #1
 800c2dc:	7830      	ldrb	r0, [r6, #0]
 800c2de:	f7ff ff9b 	bl	800c218 <__hexdig_fun>
 800c2e2:	2800      	cmp	r0, #0
 800c2e4:	d1f8      	bne.n	800c2d8 <__gethex+0x94>
 800c2e6:	9901      	ldr	r1, [sp, #4]
 800c2e8:	4652      	mov	r2, sl
 800c2ea:	4630      	mov	r0, r6
 800c2ec:	f001 f9fc 	bl	800d6e8 <strncmp>
 800c2f0:	b980      	cbnz	r0, 800c314 <__gethex+0xd0>
 800c2f2:	b94d      	cbnz	r5, 800c308 <__gethex+0xc4>
 800c2f4:	eb06 050a 	add.w	r5, r6, sl
 800c2f8:	462a      	mov	r2, r5
 800c2fa:	4616      	mov	r6, r2
 800c2fc:	3201      	adds	r2, #1
 800c2fe:	7830      	ldrb	r0, [r6, #0]
 800c300:	f7ff ff8a 	bl	800c218 <__hexdig_fun>
 800c304:	2800      	cmp	r0, #0
 800c306:	d1f8      	bne.n	800c2fa <__gethex+0xb6>
 800c308:	1bad      	subs	r5, r5, r6
 800c30a:	00ad      	lsls	r5, r5, #2
 800c30c:	e004      	b.n	800c318 <__gethex+0xd4>
 800c30e:	2400      	movs	r4, #0
 800c310:	4625      	mov	r5, r4
 800c312:	e7e0      	b.n	800c2d6 <__gethex+0x92>
 800c314:	2d00      	cmp	r5, #0
 800c316:	d1f7      	bne.n	800c308 <__gethex+0xc4>
 800c318:	7833      	ldrb	r3, [r6, #0]
 800c31a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c31e:	2b50      	cmp	r3, #80	; 0x50
 800c320:	d13b      	bne.n	800c39a <__gethex+0x156>
 800c322:	7873      	ldrb	r3, [r6, #1]
 800c324:	2b2b      	cmp	r3, #43	; 0x2b
 800c326:	d02c      	beq.n	800c382 <__gethex+0x13e>
 800c328:	2b2d      	cmp	r3, #45	; 0x2d
 800c32a:	d02e      	beq.n	800c38a <__gethex+0x146>
 800c32c:	1c71      	adds	r1, r6, #1
 800c32e:	f04f 0900 	mov.w	r9, #0
 800c332:	7808      	ldrb	r0, [r1, #0]
 800c334:	f7ff ff70 	bl	800c218 <__hexdig_fun>
 800c338:	1e43      	subs	r3, r0, #1
 800c33a:	b2db      	uxtb	r3, r3
 800c33c:	2b18      	cmp	r3, #24
 800c33e:	d82c      	bhi.n	800c39a <__gethex+0x156>
 800c340:	f1a0 0210 	sub.w	r2, r0, #16
 800c344:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c348:	f7ff ff66 	bl	800c218 <__hexdig_fun>
 800c34c:	1e43      	subs	r3, r0, #1
 800c34e:	b2db      	uxtb	r3, r3
 800c350:	2b18      	cmp	r3, #24
 800c352:	d91d      	bls.n	800c390 <__gethex+0x14c>
 800c354:	f1b9 0f00 	cmp.w	r9, #0
 800c358:	d000      	beq.n	800c35c <__gethex+0x118>
 800c35a:	4252      	negs	r2, r2
 800c35c:	4415      	add	r5, r2
 800c35e:	f8cb 1000 	str.w	r1, [fp]
 800c362:	b1e4      	cbz	r4, 800c39e <__gethex+0x15a>
 800c364:	9b00      	ldr	r3, [sp, #0]
 800c366:	2b00      	cmp	r3, #0
 800c368:	bf14      	ite	ne
 800c36a:	2700      	movne	r7, #0
 800c36c:	2706      	moveq	r7, #6
 800c36e:	4638      	mov	r0, r7
 800c370:	b009      	add	sp, #36	; 0x24
 800c372:	ecbd 8b02 	vpop	{d8}
 800c376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c37a:	463e      	mov	r6, r7
 800c37c:	4625      	mov	r5, r4
 800c37e:	2401      	movs	r4, #1
 800c380:	e7ca      	b.n	800c318 <__gethex+0xd4>
 800c382:	f04f 0900 	mov.w	r9, #0
 800c386:	1cb1      	adds	r1, r6, #2
 800c388:	e7d3      	b.n	800c332 <__gethex+0xee>
 800c38a:	f04f 0901 	mov.w	r9, #1
 800c38e:	e7fa      	b.n	800c386 <__gethex+0x142>
 800c390:	230a      	movs	r3, #10
 800c392:	fb03 0202 	mla	r2, r3, r2, r0
 800c396:	3a10      	subs	r2, #16
 800c398:	e7d4      	b.n	800c344 <__gethex+0x100>
 800c39a:	4631      	mov	r1, r6
 800c39c:	e7df      	b.n	800c35e <__gethex+0x11a>
 800c39e:	1bf3      	subs	r3, r6, r7
 800c3a0:	3b01      	subs	r3, #1
 800c3a2:	4621      	mov	r1, r4
 800c3a4:	2b07      	cmp	r3, #7
 800c3a6:	dc0b      	bgt.n	800c3c0 <__gethex+0x17c>
 800c3a8:	ee18 0a10 	vmov	r0, s16
 800c3ac:	f000 fa70 	bl	800c890 <_Balloc>
 800c3b0:	4604      	mov	r4, r0
 800c3b2:	b940      	cbnz	r0, 800c3c6 <__gethex+0x182>
 800c3b4:	4b5d      	ldr	r3, [pc, #372]	; (800c52c <__gethex+0x2e8>)
 800c3b6:	4602      	mov	r2, r0
 800c3b8:	21de      	movs	r1, #222	; 0xde
 800c3ba:	485d      	ldr	r0, [pc, #372]	; (800c530 <__gethex+0x2ec>)
 800c3bc:	f001 f9b6 	bl	800d72c <__assert_func>
 800c3c0:	3101      	adds	r1, #1
 800c3c2:	105b      	asrs	r3, r3, #1
 800c3c4:	e7ee      	b.n	800c3a4 <__gethex+0x160>
 800c3c6:	f100 0914 	add.w	r9, r0, #20
 800c3ca:	f04f 0b00 	mov.w	fp, #0
 800c3ce:	f1ca 0301 	rsb	r3, sl, #1
 800c3d2:	f8cd 9008 	str.w	r9, [sp, #8]
 800c3d6:	f8cd b000 	str.w	fp, [sp]
 800c3da:	9306      	str	r3, [sp, #24]
 800c3dc:	42b7      	cmp	r7, r6
 800c3de:	d340      	bcc.n	800c462 <__gethex+0x21e>
 800c3e0:	9802      	ldr	r0, [sp, #8]
 800c3e2:	9b00      	ldr	r3, [sp, #0]
 800c3e4:	f840 3b04 	str.w	r3, [r0], #4
 800c3e8:	eba0 0009 	sub.w	r0, r0, r9
 800c3ec:	1080      	asrs	r0, r0, #2
 800c3ee:	0146      	lsls	r6, r0, #5
 800c3f0:	6120      	str	r0, [r4, #16]
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f000 fb3e 	bl	800ca74 <__hi0bits>
 800c3f8:	1a30      	subs	r0, r6, r0
 800c3fa:	f8d8 6000 	ldr.w	r6, [r8]
 800c3fe:	42b0      	cmp	r0, r6
 800c400:	dd63      	ble.n	800c4ca <__gethex+0x286>
 800c402:	1b87      	subs	r7, r0, r6
 800c404:	4639      	mov	r1, r7
 800c406:	4620      	mov	r0, r4
 800c408:	f000 fee2 	bl	800d1d0 <__any_on>
 800c40c:	4682      	mov	sl, r0
 800c40e:	b1a8      	cbz	r0, 800c43c <__gethex+0x1f8>
 800c410:	1e7b      	subs	r3, r7, #1
 800c412:	1159      	asrs	r1, r3, #5
 800c414:	f003 021f 	and.w	r2, r3, #31
 800c418:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c41c:	f04f 0a01 	mov.w	sl, #1
 800c420:	fa0a f202 	lsl.w	r2, sl, r2
 800c424:	420a      	tst	r2, r1
 800c426:	d009      	beq.n	800c43c <__gethex+0x1f8>
 800c428:	4553      	cmp	r3, sl
 800c42a:	dd05      	ble.n	800c438 <__gethex+0x1f4>
 800c42c:	1eb9      	subs	r1, r7, #2
 800c42e:	4620      	mov	r0, r4
 800c430:	f000 fece 	bl	800d1d0 <__any_on>
 800c434:	2800      	cmp	r0, #0
 800c436:	d145      	bne.n	800c4c4 <__gethex+0x280>
 800c438:	f04f 0a02 	mov.w	sl, #2
 800c43c:	4639      	mov	r1, r7
 800c43e:	4620      	mov	r0, r4
 800c440:	f7ff fe98 	bl	800c174 <rshift>
 800c444:	443d      	add	r5, r7
 800c446:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c44a:	42ab      	cmp	r3, r5
 800c44c:	da4c      	bge.n	800c4e8 <__gethex+0x2a4>
 800c44e:	ee18 0a10 	vmov	r0, s16
 800c452:	4621      	mov	r1, r4
 800c454:	f000 fa5c 	bl	800c910 <_Bfree>
 800c458:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c45a:	2300      	movs	r3, #0
 800c45c:	6013      	str	r3, [r2, #0]
 800c45e:	27a3      	movs	r7, #163	; 0xa3
 800c460:	e785      	b.n	800c36e <__gethex+0x12a>
 800c462:	1e73      	subs	r3, r6, #1
 800c464:	9a05      	ldr	r2, [sp, #20]
 800c466:	9303      	str	r3, [sp, #12]
 800c468:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c46c:	4293      	cmp	r3, r2
 800c46e:	d019      	beq.n	800c4a4 <__gethex+0x260>
 800c470:	f1bb 0f20 	cmp.w	fp, #32
 800c474:	d107      	bne.n	800c486 <__gethex+0x242>
 800c476:	9b02      	ldr	r3, [sp, #8]
 800c478:	9a00      	ldr	r2, [sp, #0]
 800c47a:	f843 2b04 	str.w	r2, [r3], #4
 800c47e:	9302      	str	r3, [sp, #8]
 800c480:	2300      	movs	r3, #0
 800c482:	9300      	str	r3, [sp, #0]
 800c484:	469b      	mov	fp, r3
 800c486:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c48a:	f7ff fec5 	bl	800c218 <__hexdig_fun>
 800c48e:	9b00      	ldr	r3, [sp, #0]
 800c490:	f000 000f 	and.w	r0, r0, #15
 800c494:	fa00 f00b 	lsl.w	r0, r0, fp
 800c498:	4303      	orrs	r3, r0
 800c49a:	9300      	str	r3, [sp, #0]
 800c49c:	f10b 0b04 	add.w	fp, fp, #4
 800c4a0:	9b03      	ldr	r3, [sp, #12]
 800c4a2:	e00d      	b.n	800c4c0 <__gethex+0x27c>
 800c4a4:	9b03      	ldr	r3, [sp, #12]
 800c4a6:	9a06      	ldr	r2, [sp, #24]
 800c4a8:	4413      	add	r3, r2
 800c4aa:	42bb      	cmp	r3, r7
 800c4ac:	d3e0      	bcc.n	800c470 <__gethex+0x22c>
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	9901      	ldr	r1, [sp, #4]
 800c4b2:	9307      	str	r3, [sp, #28]
 800c4b4:	4652      	mov	r2, sl
 800c4b6:	f001 f917 	bl	800d6e8 <strncmp>
 800c4ba:	9b07      	ldr	r3, [sp, #28]
 800c4bc:	2800      	cmp	r0, #0
 800c4be:	d1d7      	bne.n	800c470 <__gethex+0x22c>
 800c4c0:	461e      	mov	r6, r3
 800c4c2:	e78b      	b.n	800c3dc <__gethex+0x198>
 800c4c4:	f04f 0a03 	mov.w	sl, #3
 800c4c8:	e7b8      	b.n	800c43c <__gethex+0x1f8>
 800c4ca:	da0a      	bge.n	800c4e2 <__gethex+0x29e>
 800c4cc:	1a37      	subs	r7, r6, r0
 800c4ce:	4621      	mov	r1, r4
 800c4d0:	ee18 0a10 	vmov	r0, s16
 800c4d4:	463a      	mov	r2, r7
 800c4d6:	f000 fc37 	bl	800cd48 <__lshift>
 800c4da:	1bed      	subs	r5, r5, r7
 800c4dc:	4604      	mov	r4, r0
 800c4de:	f100 0914 	add.w	r9, r0, #20
 800c4e2:	f04f 0a00 	mov.w	sl, #0
 800c4e6:	e7ae      	b.n	800c446 <__gethex+0x202>
 800c4e8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c4ec:	42a8      	cmp	r0, r5
 800c4ee:	dd72      	ble.n	800c5d6 <__gethex+0x392>
 800c4f0:	1b45      	subs	r5, r0, r5
 800c4f2:	42ae      	cmp	r6, r5
 800c4f4:	dc36      	bgt.n	800c564 <__gethex+0x320>
 800c4f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c4fa:	2b02      	cmp	r3, #2
 800c4fc:	d02a      	beq.n	800c554 <__gethex+0x310>
 800c4fe:	2b03      	cmp	r3, #3
 800c500:	d02c      	beq.n	800c55c <__gethex+0x318>
 800c502:	2b01      	cmp	r3, #1
 800c504:	d11c      	bne.n	800c540 <__gethex+0x2fc>
 800c506:	42ae      	cmp	r6, r5
 800c508:	d11a      	bne.n	800c540 <__gethex+0x2fc>
 800c50a:	2e01      	cmp	r6, #1
 800c50c:	d112      	bne.n	800c534 <__gethex+0x2f0>
 800c50e:	9a04      	ldr	r2, [sp, #16]
 800c510:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c514:	6013      	str	r3, [r2, #0]
 800c516:	2301      	movs	r3, #1
 800c518:	6123      	str	r3, [r4, #16]
 800c51a:	f8c9 3000 	str.w	r3, [r9]
 800c51e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c520:	2762      	movs	r7, #98	; 0x62
 800c522:	601c      	str	r4, [r3, #0]
 800c524:	e723      	b.n	800c36e <__gethex+0x12a>
 800c526:	bf00      	nop
 800c528:	0801d800 	.word	0x0801d800
 800c52c:	0801d788 	.word	0x0801d788
 800c530:	0801d799 	.word	0x0801d799
 800c534:	1e71      	subs	r1, r6, #1
 800c536:	4620      	mov	r0, r4
 800c538:	f000 fe4a 	bl	800d1d0 <__any_on>
 800c53c:	2800      	cmp	r0, #0
 800c53e:	d1e6      	bne.n	800c50e <__gethex+0x2ca>
 800c540:	ee18 0a10 	vmov	r0, s16
 800c544:	4621      	mov	r1, r4
 800c546:	f000 f9e3 	bl	800c910 <_Bfree>
 800c54a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c54c:	2300      	movs	r3, #0
 800c54e:	6013      	str	r3, [r2, #0]
 800c550:	2750      	movs	r7, #80	; 0x50
 800c552:	e70c      	b.n	800c36e <__gethex+0x12a>
 800c554:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c556:	2b00      	cmp	r3, #0
 800c558:	d1f2      	bne.n	800c540 <__gethex+0x2fc>
 800c55a:	e7d8      	b.n	800c50e <__gethex+0x2ca>
 800c55c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d1d5      	bne.n	800c50e <__gethex+0x2ca>
 800c562:	e7ed      	b.n	800c540 <__gethex+0x2fc>
 800c564:	1e6f      	subs	r7, r5, #1
 800c566:	f1ba 0f00 	cmp.w	sl, #0
 800c56a:	d131      	bne.n	800c5d0 <__gethex+0x38c>
 800c56c:	b127      	cbz	r7, 800c578 <__gethex+0x334>
 800c56e:	4639      	mov	r1, r7
 800c570:	4620      	mov	r0, r4
 800c572:	f000 fe2d 	bl	800d1d0 <__any_on>
 800c576:	4682      	mov	sl, r0
 800c578:	117b      	asrs	r3, r7, #5
 800c57a:	2101      	movs	r1, #1
 800c57c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c580:	f007 071f 	and.w	r7, r7, #31
 800c584:	fa01 f707 	lsl.w	r7, r1, r7
 800c588:	421f      	tst	r7, r3
 800c58a:	4629      	mov	r1, r5
 800c58c:	4620      	mov	r0, r4
 800c58e:	bf18      	it	ne
 800c590:	f04a 0a02 	orrne.w	sl, sl, #2
 800c594:	1b76      	subs	r6, r6, r5
 800c596:	f7ff fded 	bl	800c174 <rshift>
 800c59a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c59e:	2702      	movs	r7, #2
 800c5a0:	f1ba 0f00 	cmp.w	sl, #0
 800c5a4:	d048      	beq.n	800c638 <__gethex+0x3f4>
 800c5a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c5aa:	2b02      	cmp	r3, #2
 800c5ac:	d015      	beq.n	800c5da <__gethex+0x396>
 800c5ae:	2b03      	cmp	r3, #3
 800c5b0:	d017      	beq.n	800c5e2 <__gethex+0x39e>
 800c5b2:	2b01      	cmp	r3, #1
 800c5b4:	d109      	bne.n	800c5ca <__gethex+0x386>
 800c5b6:	f01a 0f02 	tst.w	sl, #2
 800c5ba:	d006      	beq.n	800c5ca <__gethex+0x386>
 800c5bc:	f8d9 0000 	ldr.w	r0, [r9]
 800c5c0:	ea4a 0a00 	orr.w	sl, sl, r0
 800c5c4:	f01a 0f01 	tst.w	sl, #1
 800c5c8:	d10e      	bne.n	800c5e8 <__gethex+0x3a4>
 800c5ca:	f047 0710 	orr.w	r7, r7, #16
 800c5ce:	e033      	b.n	800c638 <__gethex+0x3f4>
 800c5d0:	f04f 0a01 	mov.w	sl, #1
 800c5d4:	e7d0      	b.n	800c578 <__gethex+0x334>
 800c5d6:	2701      	movs	r7, #1
 800c5d8:	e7e2      	b.n	800c5a0 <__gethex+0x35c>
 800c5da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c5dc:	f1c3 0301 	rsb	r3, r3, #1
 800c5e0:	9315      	str	r3, [sp, #84]	; 0x54
 800c5e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d0f0      	beq.n	800c5ca <__gethex+0x386>
 800c5e8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c5ec:	f104 0314 	add.w	r3, r4, #20
 800c5f0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c5f4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c5f8:	f04f 0c00 	mov.w	ip, #0
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800c602:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c606:	d01c      	beq.n	800c642 <__gethex+0x3fe>
 800c608:	3201      	adds	r2, #1
 800c60a:	6002      	str	r2, [r0, #0]
 800c60c:	2f02      	cmp	r7, #2
 800c60e:	f104 0314 	add.w	r3, r4, #20
 800c612:	d13f      	bne.n	800c694 <__gethex+0x450>
 800c614:	f8d8 2000 	ldr.w	r2, [r8]
 800c618:	3a01      	subs	r2, #1
 800c61a:	42b2      	cmp	r2, r6
 800c61c:	d10a      	bne.n	800c634 <__gethex+0x3f0>
 800c61e:	1171      	asrs	r1, r6, #5
 800c620:	2201      	movs	r2, #1
 800c622:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c626:	f006 061f 	and.w	r6, r6, #31
 800c62a:	fa02 f606 	lsl.w	r6, r2, r6
 800c62e:	421e      	tst	r6, r3
 800c630:	bf18      	it	ne
 800c632:	4617      	movne	r7, r2
 800c634:	f047 0720 	orr.w	r7, r7, #32
 800c638:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c63a:	601c      	str	r4, [r3, #0]
 800c63c:	9b04      	ldr	r3, [sp, #16]
 800c63e:	601d      	str	r5, [r3, #0]
 800c640:	e695      	b.n	800c36e <__gethex+0x12a>
 800c642:	4299      	cmp	r1, r3
 800c644:	f843 cc04 	str.w	ip, [r3, #-4]
 800c648:	d8d8      	bhi.n	800c5fc <__gethex+0x3b8>
 800c64a:	68a3      	ldr	r3, [r4, #8]
 800c64c:	459b      	cmp	fp, r3
 800c64e:	db19      	blt.n	800c684 <__gethex+0x440>
 800c650:	6861      	ldr	r1, [r4, #4]
 800c652:	ee18 0a10 	vmov	r0, s16
 800c656:	3101      	adds	r1, #1
 800c658:	f000 f91a 	bl	800c890 <_Balloc>
 800c65c:	4681      	mov	r9, r0
 800c65e:	b918      	cbnz	r0, 800c668 <__gethex+0x424>
 800c660:	4b1a      	ldr	r3, [pc, #104]	; (800c6cc <__gethex+0x488>)
 800c662:	4602      	mov	r2, r0
 800c664:	2184      	movs	r1, #132	; 0x84
 800c666:	e6a8      	b.n	800c3ba <__gethex+0x176>
 800c668:	6922      	ldr	r2, [r4, #16]
 800c66a:	3202      	adds	r2, #2
 800c66c:	f104 010c 	add.w	r1, r4, #12
 800c670:	0092      	lsls	r2, r2, #2
 800c672:	300c      	adds	r0, #12
 800c674:	f7fd f960 	bl	8009938 <memcpy>
 800c678:	4621      	mov	r1, r4
 800c67a:	ee18 0a10 	vmov	r0, s16
 800c67e:	f000 f947 	bl	800c910 <_Bfree>
 800c682:	464c      	mov	r4, r9
 800c684:	6923      	ldr	r3, [r4, #16]
 800c686:	1c5a      	adds	r2, r3, #1
 800c688:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c68c:	6122      	str	r2, [r4, #16]
 800c68e:	2201      	movs	r2, #1
 800c690:	615a      	str	r2, [r3, #20]
 800c692:	e7bb      	b.n	800c60c <__gethex+0x3c8>
 800c694:	6922      	ldr	r2, [r4, #16]
 800c696:	455a      	cmp	r2, fp
 800c698:	dd0b      	ble.n	800c6b2 <__gethex+0x46e>
 800c69a:	2101      	movs	r1, #1
 800c69c:	4620      	mov	r0, r4
 800c69e:	f7ff fd69 	bl	800c174 <rshift>
 800c6a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c6a6:	3501      	adds	r5, #1
 800c6a8:	42ab      	cmp	r3, r5
 800c6aa:	f6ff aed0 	blt.w	800c44e <__gethex+0x20a>
 800c6ae:	2701      	movs	r7, #1
 800c6b0:	e7c0      	b.n	800c634 <__gethex+0x3f0>
 800c6b2:	f016 061f 	ands.w	r6, r6, #31
 800c6b6:	d0fa      	beq.n	800c6ae <__gethex+0x46a>
 800c6b8:	4453      	add	r3, sl
 800c6ba:	f1c6 0620 	rsb	r6, r6, #32
 800c6be:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c6c2:	f000 f9d7 	bl	800ca74 <__hi0bits>
 800c6c6:	42b0      	cmp	r0, r6
 800c6c8:	dbe7      	blt.n	800c69a <__gethex+0x456>
 800c6ca:	e7f0      	b.n	800c6ae <__gethex+0x46a>
 800c6cc:	0801d788 	.word	0x0801d788

0800c6d0 <L_shift>:
 800c6d0:	f1c2 0208 	rsb	r2, r2, #8
 800c6d4:	0092      	lsls	r2, r2, #2
 800c6d6:	b570      	push	{r4, r5, r6, lr}
 800c6d8:	f1c2 0620 	rsb	r6, r2, #32
 800c6dc:	6843      	ldr	r3, [r0, #4]
 800c6de:	6804      	ldr	r4, [r0, #0]
 800c6e0:	fa03 f506 	lsl.w	r5, r3, r6
 800c6e4:	432c      	orrs	r4, r5
 800c6e6:	40d3      	lsrs	r3, r2
 800c6e8:	6004      	str	r4, [r0, #0]
 800c6ea:	f840 3f04 	str.w	r3, [r0, #4]!
 800c6ee:	4288      	cmp	r0, r1
 800c6f0:	d3f4      	bcc.n	800c6dc <L_shift+0xc>
 800c6f2:	bd70      	pop	{r4, r5, r6, pc}

0800c6f4 <__match>:
 800c6f4:	b530      	push	{r4, r5, lr}
 800c6f6:	6803      	ldr	r3, [r0, #0]
 800c6f8:	3301      	adds	r3, #1
 800c6fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6fe:	b914      	cbnz	r4, 800c706 <__match+0x12>
 800c700:	6003      	str	r3, [r0, #0]
 800c702:	2001      	movs	r0, #1
 800c704:	bd30      	pop	{r4, r5, pc}
 800c706:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c70a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c70e:	2d19      	cmp	r5, #25
 800c710:	bf98      	it	ls
 800c712:	3220      	addls	r2, #32
 800c714:	42a2      	cmp	r2, r4
 800c716:	d0f0      	beq.n	800c6fa <__match+0x6>
 800c718:	2000      	movs	r0, #0
 800c71a:	e7f3      	b.n	800c704 <__match+0x10>

0800c71c <__hexnan>:
 800c71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c720:	680b      	ldr	r3, [r1, #0]
 800c722:	115e      	asrs	r6, r3, #5
 800c724:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c728:	f013 031f 	ands.w	r3, r3, #31
 800c72c:	b087      	sub	sp, #28
 800c72e:	bf18      	it	ne
 800c730:	3604      	addne	r6, #4
 800c732:	2500      	movs	r5, #0
 800c734:	1f37      	subs	r7, r6, #4
 800c736:	4690      	mov	r8, r2
 800c738:	6802      	ldr	r2, [r0, #0]
 800c73a:	9301      	str	r3, [sp, #4]
 800c73c:	4682      	mov	sl, r0
 800c73e:	f846 5c04 	str.w	r5, [r6, #-4]
 800c742:	46b9      	mov	r9, r7
 800c744:	463c      	mov	r4, r7
 800c746:	9502      	str	r5, [sp, #8]
 800c748:	46ab      	mov	fp, r5
 800c74a:	7851      	ldrb	r1, [r2, #1]
 800c74c:	1c53      	adds	r3, r2, #1
 800c74e:	9303      	str	r3, [sp, #12]
 800c750:	b341      	cbz	r1, 800c7a4 <__hexnan+0x88>
 800c752:	4608      	mov	r0, r1
 800c754:	9205      	str	r2, [sp, #20]
 800c756:	9104      	str	r1, [sp, #16]
 800c758:	f7ff fd5e 	bl	800c218 <__hexdig_fun>
 800c75c:	2800      	cmp	r0, #0
 800c75e:	d14f      	bne.n	800c800 <__hexnan+0xe4>
 800c760:	9904      	ldr	r1, [sp, #16]
 800c762:	9a05      	ldr	r2, [sp, #20]
 800c764:	2920      	cmp	r1, #32
 800c766:	d818      	bhi.n	800c79a <__hexnan+0x7e>
 800c768:	9b02      	ldr	r3, [sp, #8]
 800c76a:	459b      	cmp	fp, r3
 800c76c:	dd13      	ble.n	800c796 <__hexnan+0x7a>
 800c76e:	454c      	cmp	r4, r9
 800c770:	d206      	bcs.n	800c780 <__hexnan+0x64>
 800c772:	2d07      	cmp	r5, #7
 800c774:	dc04      	bgt.n	800c780 <__hexnan+0x64>
 800c776:	462a      	mov	r2, r5
 800c778:	4649      	mov	r1, r9
 800c77a:	4620      	mov	r0, r4
 800c77c:	f7ff ffa8 	bl	800c6d0 <L_shift>
 800c780:	4544      	cmp	r4, r8
 800c782:	d950      	bls.n	800c826 <__hexnan+0x10a>
 800c784:	2300      	movs	r3, #0
 800c786:	f1a4 0904 	sub.w	r9, r4, #4
 800c78a:	f844 3c04 	str.w	r3, [r4, #-4]
 800c78e:	f8cd b008 	str.w	fp, [sp, #8]
 800c792:	464c      	mov	r4, r9
 800c794:	461d      	mov	r5, r3
 800c796:	9a03      	ldr	r2, [sp, #12]
 800c798:	e7d7      	b.n	800c74a <__hexnan+0x2e>
 800c79a:	2929      	cmp	r1, #41	; 0x29
 800c79c:	d156      	bne.n	800c84c <__hexnan+0x130>
 800c79e:	3202      	adds	r2, #2
 800c7a0:	f8ca 2000 	str.w	r2, [sl]
 800c7a4:	f1bb 0f00 	cmp.w	fp, #0
 800c7a8:	d050      	beq.n	800c84c <__hexnan+0x130>
 800c7aa:	454c      	cmp	r4, r9
 800c7ac:	d206      	bcs.n	800c7bc <__hexnan+0xa0>
 800c7ae:	2d07      	cmp	r5, #7
 800c7b0:	dc04      	bgt.n	800c7bc <__hexnan+0xa0>
 800c7b2:	462a      	mov	r2, r5
 800c7b4:	4649      	mov	r1, r9
 800c7b6:	4620      	mov	r0, r4
 800c7b8:	f7ff ff8a 	bl	800c6d0 <L_shift>
 800c7bc:	4544      	cmp	r4, r8
 800c7be:	d934      	bls.n	800c82a <__hexnan+0x10e>
 800c7c0:	f1a8 0204 	sub.w	r2, r8, #4
 800c7c4:	4623      	mov	r3, r4
 800c7c6:	f853 1b04 	ldr.w	r1, [r3], #4
 800c7ca:	f842 1f04 	str.w	r1, [r2, #4]!
 800c7ce:	429f      	cmp	r7, r3
 800c7d0:	d2f9      	bcs.n	800c7c6 <__hexnan+0xaa>
 800c7d2:	1b3b      	subs	r3, r7, r4
 800c7d4:	f023 0303 	bic.w	r3, r3, #3
 800c7d8:	3304      	adds	r3, #4
 800c7da:	3401      	adds	r4, #1
 800c7dc:	3e03      	subs	r6, #3
 800c7de:	42b4      	cmp	r4, r6
 800c7e0:	bf88      	it	hi
 800c7e2:	2304      	movhi	r3, #4
 800c7e4:	4443      	add	r3, r8
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	f843 2b04 	str.w	r2, [r3], #4
 800c7ec:	429f      	cmp	r7, r3
 800c7ee:	d2fb      	bcs.n	800c7e8 <__hexnan+0xcc>
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	b91b      	cbnz	r3, 800c7fc <__hexnan+0xe0>
 800c7f4:	4547      	cmp	r7, r8
 800c7f6:	d127      	bne.n	800c848 <__hexnan+0x12c>
 800c7f8:	2301      	movs	r3, #1
 800c7fa:	603b      	str	r3, [r7, #0]
 800c7fc:	2005      	movs	r0, #5
 800c7fe:	e026      	b.n	800c84e <__hexnan+0x132>
 800c800:	3501      	adds	r5, #1
 800c802:	2d08      	cmp	r5, #8
 800c804:	f10b 0b01 	add.w	fp, fp, #1
 800c808:	dd06      	ble.n	800c818 <__hexnan+0xfc>
 800c80a:	4544      	cmp	r4, r8
 800c80c:	d9c3      	bls.n	800c796 <__hexnan+0x7a>
 800c80e:	2300      	movs	r3, #0
 800c810:	f844 3c04 	str.w	r3, [r4, #-4]
 800c814:	2501      	movs	r5, #1
 800c816:	3c04      	subs	r4, #4
 800c818:	6822      	ldr	r2, [r4, #0]
 800c81a:	f000 000f 	and.w	r0, r0, #15
 800c81e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c822:	6022      	str	r2, [r4, #0]
 800c824:	e7b7      	b.n	800c796 <__hexnan+0x7a>
 800c826:	2508      	movs	r5, #8
 800c828:	e7b5      	b.n	800c796 <__hexnan+0x7a>
 800c82a:	9b01      	ldr	r3, [sp, #4]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d0df      	beq.n	800c7f0 <__hexnan+0xd4>
 800c830:	f04f 32ff 	mov.w	r2, #4294967295
 800c834:	f1c3 0320 	rsb	r3, r3, #32
 800c838:	fa22 f303 	lsr.w	r3, r2, r3
 800c83c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c840:	401a      	ands	r2, r3
 800c842:	f846 2c04 	str.w	r2, [r6, #-4]
 800c846:	e7d3      	b.n	800c7f0 <__hexnan+0xd4>
 800c848:	3f04      	subs	r7, #4
 800c84a:	e7d1      	b.n	800c7f0 <__hexnan+0xd4>
 800c84c:	2004      	movs	r0, #4
 800c84e:	b007      	add	sp, #28
 800c850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c854 <_localeconv_r>:
 800c854:	4800      	ldr	r0, [pc, #0]	; (800c858 <_localeconv_r+0x4>)
 800c856:	4770      	bx	lr
 800c858:	200001b8 	.word	0x200001b8

0800c85c <malloc>:
 800c85c:	4b02      	ldr	r3, [pc, #8]	; (800c868 <malloc+0xc>)
 800c85e:	4601      	mov	r1, r0
 800c860:	6818      	ldr	r0, [r3, #0]
 800c862:	f000 bd59 	b.w	800d318 <_malloc_r>
 800c866:	bf00      	nop
 800c868:	20000060 	.word	0x20000060

0800c86c <__ascii_mbtowc>:
 800c86c:	b082      	sub	sp, #8
 800c86e:	b901      	cbnz	r1, 800c872 <__ascii_mbtowc+0x6>
 800c870:	a901      	add	r1, sp, #4
 800c872:	b142      	cbz	r2, 800c886 <__ascii_mbtowc+0x1a>
 800c874:	b14b      	cbz	r3, 800c88a <__ascii_mbtowc+0x1e>
 800c876:	7813      	ldrb	r3, [r2, #0]
 800c878:	600b      	str	r3, [r1, #0]
 800c87a:	7812      	ldrb	r2, [r2, #0]
 800c87c:	1e10      	subs	r0, r2, #0
 800c87e:	bf18      	it	ne
 800c880:	2001      	movne	r0, #1
 800c882:	b002      	add	sp, #8
 800c884:	4770      	bx	lr
 800c886:	4610      	mov	r0, r2
 800c888:	e7fb      	b.n	800c882 <__ascii_mbtowc+0x16>
 800c88a:	f06f 0001 	mvn.w	r0, #1
 800c88e:	e7f8      	b.n	800c882 <__ascii_mbtowc+0x16>

0800c890 <_Balloc>:
 800c890:	b570      	push	{r4, r5, r6, lr}
 800c892:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c894:	4604      	mov	r4, r0
 800c896:	460d      	mov	r5, r1
 800c898:	b976      	cbnz	r6, 800c8b8 <_Balloc+0x28>
 800c89a:	2010      	movs	r0, #16
 800c89c:	f7ff ffde 	bl	800c85c <malloc>
 800c8a0:	4602      	mov	r2, r0
 800c8a2:	6260      	str	r0, [r4, #36]	; 0x24
 800c8a4:	b920      	cbnz	r0, 800c8b0 <_Balloc+0x20>
 800c8a6:	4b18      	ldr	r3, [pc, #96]	; (800c908 <_Balloc+0x78>)
 800c8a8:	4818      	ldr	r0, [pc, #96]	; (800c90c <_Balloc+0x7c>)
 800c8aa:	2166      	movs	r1, #102	; 0x66
 800c8ac:	f000 ff3e 	bl	800d72c <__assert_func>
 800c8b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c8b4:	6006      	str	r6, [r0, #0]
 800c8b6:	60c6      	str	r6, [r0, #12]
 800c8b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c8ba:	68f3      	ldr	r3, [r6, #12]
 800c8bc:	b183      	cbz	r3, 800c8e0 <_Balloc+0x50>
 800c8be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c8c0:	68db      	ldr	r3, [r3, #12]
 800c8c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c8c6:	b9b8      	cbnz	r0, 800c8f8 <_Balloc+0x68>
 800c8c8:	2101      	movs	r1, #1
 800c8ca:	fa01 f605 	lsl.w	r6, r1, r5
 800c8ce:	1d72      	adds	r2, r6, #5
 800c8d0:	0092      	lsls	r2, r2, #2
 800c8d2:	4620      	mov	r0, r4
 800c8d4:	f000 fc9d 	bl	800d212 <_calloc_r>
 800c8d8:	b160      	cbz	r0, 800c8f4 <_Balloc+0x64>
 800c8da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c8de:	e00e      	b.n	800c8fe <_Balloc+0x6e>
 800c8e0:	2221      	movs	r2, #33	; 0x21
 800c8e2:	2104      	movs	r1, #4
 800c8e4:	4620      	mov	r0, r4
 800c8e6:	f000 fc94 	bl	800d212 <_calloc_r>
 800c8ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c8ec:	60f0      	str	r0, [r6, #12]
 800c8ee:	68db      	ldr	r3, [r3, #12]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d1e4      	bne.n	800c8be <_Balloc+0x2e>
 800c8f4:	2000      	movs	r0, #0
 800c8f6:	bd70      	pop	{r4, r5, r6, pc}
 800c8f8:	6802      	ldr	r2, [r0, #0]
 800c8fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c8fe:	2300      	movs	r3, #0
 800c900:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c904:	e7f7      	b.n	800c8f6 <_Balloc+0x66>
 800c906:	bf00      	nop
 800c908:	0801d716 	.word	0x0801d716
 800c90c:	0801d814 	.word	0x0801d814

0800c910 <_Bfree>:
 800c910:	b570      	push	{r4, r5, r6, lr}
 800c912:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c914:	4605      	mov	r5, r0
 800c916:	460c      	mov	r4, r1
 800c918:	b976      	cbnz	r6, 800c938 <_Bfree+0x28>
 800c91a:	2010      	movs	r0, #16
 800c91c:	f7ff ff9e 	bl	800c85c <malloc>
 800c920:	4602      	mov	r2, r0
 800c922:	6268      	str	r0, [r5, #36]	; 0x24
 800c924:	b920      	cbnz	r0, 800c930 <_Bfree+0x20>
 800c926:	4b09      	ldr	r3, [pc, #36]	; (800c94c <_Bfree+0x3c>)
 800c928:	4809      	ldr	r0, [pc, #36]	; (800c950 <_Bfree+0x40>)
 800c92a:	218a      	movs	r1, #138	; 0x8a
 800c92c:	f000 fefe 	bl	800d72c <__assert_func>
 800c930:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c934:	6006      	str	r6, [r0, #0]
 800c936:	60c6      	str	r6, [r0, #12]
 800c938:	b13c      	cbz	r4, 800c94a <_Bfree+0x3a>
 800c93a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c93c:	6862      	ldr	r2, [r4, #4]
 800c93e:	68db      	ldr	r3, [r3, #12]
 800c940:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c944:	6021      	str	r1, [r4, #0]
 800c946:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c94a:	bd70      	pop	{r4, r5, r6, pc}
 800c94c:	0801d716 	.word	0x0801d716
 800c950:	0801d814 	.word	0x0801d814

0800c954 <__multadd>:
 800c954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c958:	690d      	ldr	r5, [r1, #16]
 800c95a:	4607      	mov	r7, r0
 800c95c:	460c      	mov	r4, r1
 800c95e:	461e      	mov	r6, r3
 800c960:	f101 0c14 	add.w	ip, r1, #20
 800c964:	2000      	movs	r0, #0
 800c966:	f8dc 3000 	ldr.w	r3, [ip]
 800c96a:	b299      	uxth	r1, r3
 800c96c:	fb02 6101 	mla	r1, r2, r1, r6
 800c970:	0c1e      	lsrs	r6, r3, #16
 800c972:	0c0b      	lsrs	r3, r1, #16
 800c974:	fb02 3306 	mla	r3, r2, r6, r3
 800c978:	b289      	uxth	r1, r1
 800c97a:	3001      	adds	r0, #1
 800c97c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c980:	4285      	cmp	r5, r0
 800c982:	f84c 1b04 	str.w	r1, [ip], #4
 800c986:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c98a:	dcec      	bgt.n	800c966 <__multadd+0x12>
 800c98c:	b30e      	cbz	r6, 800c9d2 <__multadd+0x7e>
 800c98e:	68a3      	ldr	r3, [r4, #8]
 800c990:	42ab      	cmp	r3, r5
 800c992:	dc19      	bgt.n	800c9c8 <__multadd+0x74>
 800c994:	6861      	ldr	r1, [r4, #4]
 800c996:	4638      	mov	r0, r7
 800c998:	3101      	adds	r1, #1
 800c99a:	f7ff ff79 	bl	800c890 <_Balloc>
 800c99e:	4680      	mov	r8, r0
 800c9a0:	b928      	cbnz	r0, 800c9ae <__multadd+0x5a>
 800c9a2:	4602      	mov	r2, r0
 800c9a4:	4b0c      	ldr	r3, [pc, #48]	; (800c9d8 <__multadd+0x84>)
 800c9a6:	480d      	ldr	r0, [pc, #52]	; (800c9dc <__multadd+0x88>)
 800c9a8:	21b5      	movs	r1, #181	; 0xb5
 800c9aa:	f000 febf 	bl	800d72c <__assert_func>
 800c9ae:	6922      	ldr	r2, [r4, #16]
 800c9b0:	3202      	adds	r2, #2
 800c9b2:	f104 010c 	add.w	r1, r4, #12
 800c9b6:	0092      	lsls	r2, r2, #2
 800c9b8:	300c      	adds	r0, #12
 800c9ba:	f7fc ffbd 	bl	8009938 <memcpy>
 800c9be:	4621      	mov	r1, r4
 800c9c0:	4638      	mov	r0, r7
 800c9c2:	f7ff ffa5 	bl	800c910 <_Bfree>
 800c9c6:	4644      	mov	r4, r8
 800c9c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c9cc:	3501      	adds	r5, #1
 800c9ce:	615e      	str	r6, [r3, #20]
 800c9d0:	6125      	str	r5, [r4, #16]
 800c9d2:	4620      	mov	r0, r4
 800c9d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9d8:	0801d788 	.word	0x0801d788
 800c9dc:	0801d814 	.word	0x0801d814

0800c9e0 <__s2b>:
 800c9e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9e4:	460c      	mov	r4, r1
 800c9e6:	4615      	mov	r5, r2
 800c9e8:	461f      	mov	r7, r3
 800c9ea:	2209      	movs	r2, #9
 800c9ec:	3308      	adds	r3, #8
 800c9ee:	4606      	mov	r6, r0
 800c9f0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c9f4:	2100      	movs	r1, #0
 800c9f6:	2201      	movs	r2, #1
 800c9f8:	429a      	cmp	r2, r3
 800c9fa:	db09      	blt.n	800ca10 <__s2b+0x30>
 800c9fc:	4630      	mov	r0, r6
 800c9fe:	f7ff ff47 	bl	800c890 <_Balloc>
 800ca02:	b940      	cbnz	r0, 800ca16 <__s2b+0x36>
 800ca04:	4602      	mov	r2, r0
 800ca06:	4b19      	ldr	r3, [pc, #100]	; (800ca6c <__s2b+0x8c>)
 800ca08:	4819      	ldr	r0, [pc, #100]	; (800ca70 <__s2b+0x90>)
 800ca0a:	21ce      	movs	r1, #206	; 0xce
 800ca0c:	f000 fe8e 	bl	800d72c <__assert_func>
 800ca10:	0052      	lsls	r2, r2, #1
 800ca12:	3101      	adds	r1, #1
 800ca14:	e7f0      	b.n	800c9f8 <__s2b+0x18>
 800ca16:	9b08      	ldr	r3, [sp, #32]
 800ca18:	6143      	str	r3, [r0, #20]
 800ca1a:	2d09      	cmp	r5, #9
 800ca1c:	f04f 0301 	mov.w	r3, #1
 800ca20:	6103      	str	r3, [r0, #16]
 800ca22:	dd16      	ble.n	800ca52 <__s2b+0x72>
 800ca24:	f104 0909 	add.w	r9, r4, #9
 800ca28:	46c8      	mov	r8, r9
 800ca2a:	442c      	add	r4, r5
 800ca2c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ca30:	4601      	mov	r1, r0
 800ca32:	3b30      	subs	r3, #48	; 0x30
 800ca34:	220a      	movs	r2, #10
 800ca36:	4630      	mov	r0, r6
 800ca38:	f7ff ff8c 	bl	800c954 <__multadd>
 800ca3c:	45a0      	cmp	r8, r4
 800ca3e:	d1f5      	bne.n	800ca2c <__s2b+0x4c>
 800ca40:	f1a5 0408 	sub.w	r4, r5, #8
 800ca44:	444c      	add	r4, r9
 800ca46:	1b2d      	subs	r5, r5, r4
 800ca48:	1963      	adds	r3, r4, r5
 800ca4a:	42bb      	cmp	r3, r7
 800ca4c:	db04      	blt.n	800ca58 <__s2b+0x78>
 800ca4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca52:	340a      	adds	r4, #10
 800ca54:	2509      	movs	r5, #9
 800ca56:	e7f6      	b.n	800ca46 <__s2b+0x66>
 800ca58:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ca5c:	4601      	mov	r1, r0
 800ca5e:	3b30      	subs	r3, #48	; 0x30
 800ca60:	220a      	movs	r2, #10
 800ca62:	4630      	mov	r0, r6
 800ca64:	f7ff ff76 	bl	800c954 <__multadd>
 800ca68:	e7ee      	b.n	800ca48 <__s2b+0x68>
 800ca6a:	bf00      	nop
 800ca6c:	0801d788 	.word	0x0801d788
 800ca70:	0801d814 	.word	0x0801d814

0800ca74 <__hi0bits>:
 800ca74:	0c03      	lsrs	r3, r0, #16
 800ca76:	041b      	lsls	r3, r3, #16
 800ca78:	b9d3      	cbnz	r3, 800cab0 <__hi0bits+0x3c>
 800ca7a:	0400      	lsls	r0, r0, #16
 800ca7c:	2310      	movs	r3, #16
 800ca7e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ca82:	bf04      	itt	eq
 800ca84:	0200      	lsleq	r0, r0, #8
 800ca86:	3308      	addeq	r3, #8
 800ca88:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ca8c:	bf04      	itt	eq
 800ca8e:	0100      	lsleq	r0, r0, #4
 800ca90:	3304      	addeq	r3, #4
 800ca92:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ca96:	bf04      	itt	eq
 800ca98:	0080      	lsleq	r0, r0, #2
 800ca9a:	3302      	addeq	r3, #2
 800ca9c:	2800      	cmp	r0, #0
 800ca9e:	db05      	blt.n	800caac <__hi0bits+0x38>
 800caa0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800caa4:	f103 0301 	add.w	r3, r3, #1
 800caa8:	bf08      	it	eq
 800caaa:	2320      	moveq	r3, #32
 800caac:	4618      	mov	r0, r3
 800caae:	4770      	bx	lr
 800cab0:	2300      	movs	r3, #0
 800cab2:	e7e4      	b.n	800ca7e <__hi0bits+0xa>

0800cab4 <__lo0bits>:
 800cab4:	6803      	ldr	r3, [r0, #0]
 800cab6:	f013 0207 	ands.w	r2, r3, #7
 800caba:	4601      	mov	r1, r0
 800cabc:	d00b      	beq.n	800cad6 <__lo0bits+0x22>
 800cabe:	07da      	lsls	r2, r3, #31
 800cac0:	d423      	bmi.n	800cb0a <__lo0bits+0x56>
 800cac2:	0798      	lsls	r0, r3, #30
 800cac4:	bf49      	itett	mi
 800cac6:	085b      	lsrmi	r3, r3, #1
 800cac8:	089b      	lsrpl	r3, r3, #2
 800caca:	2001      	movmi	r0, #1
 800cacc:	600b      	strmi	r3, [r1, #0]
 800cace:	bf5c      	itt	pl
 800cad0:	600b      	strpl	r3, [r1, #0]
 800cad2:	2002      	movpl	r0, #2
 800cad4:	4770      	bx	lr
 800cad6:	b298      	uxth	r0, r3
 800cad8:	b9a8      	cbnz	r0, 800cb06 <__lo0bits+0x52>
 800cada:	0c1b      	lsrs	r3, r3, #16
 800cadc:	2010      	movs	r0, #16
 800cade:	b2da      	uxtb	r2, r3
 800cae0:	b90a      	cbnz	r2, 800cae6 <__lo0bits+0x32>
 800cae2:	3008      	adds	r0, #8
 800cae4:	0a1b      	lsrs	r3, r3, #8
 800cae6:	071a      	lsls	r2, r3, #28
 800cae8:	bf04      	itt	eq
 800caea:	091b      	lsreq	r3, r3, #4
 800caec:	3004      	addeq	r0, #4
 800caee:	079a      	lsls	r2, r3, #30
 800caf0:	bf04      	itt	eq
 800caf2:	089b      	lsreq	r3, r3, #2
 800caf4:	3002      	addeq	r0, #2
 800caf6:	07da      	lsls	r2, r3, #31
 800caf8:	d403      	bmi.n	800cb02 <__lo0bits+0x4e>
 800cafa:	085b      	lsrs	r3, r3, #1
 800cafc:	f100 0001 	add.w	r0, r0, #1
 800cb00:	d005      	beq.n	800cb0e <__lo0bits+0x5a>
 800cb02:	600b      	str	r3, [r1, #0]
 800cb04:	4770      	bx	lr
 800cb06:	4610      	mov	r0, r2
 800cb08:	e7e9      	b.n	800cade <__lo0bits+0x2a>
 800cb0a:	2000      	movs	r0, #0
 800cb0c:	4770      	bx	lr
 800cb0e:	2020      	movs	r0, #32
 800cb10:	4770      	bx	lr
	...

0800cb14 <__i2b>:
 800cb14:	b510      	push	{r4, lr}
 800cb16:	460c      	mov	r4, r1
 800cb18:	2101      	movs	r1, #1
 800cb1a:	f7ff feb9 	bl	800c890 <_Balloc>
 800cb1e:	4602      	mov	r2, r0
 800cb20:	b928      	cbnz	r0, 800cb2e <__i2b+0x1a>
 800cb22:	4b05      	ldr	r3, [pc, #20]	; (800cb38 <__i2b+0x24>)
 800cb24:	4805      	ldr	r0, [pc, #20]	; (800cb3c <__i2b+0x28>)
 800cb26:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cb2a:	f000 fdff 	bl	800d72c <__assert_func>
 800cb2e:	2301      	movs	r3, #1
 800cb30:	6144      	str	r4, [r0, #20]
 800cb32:	6103      	str	r3, [r0, #16]
 800cb34:	bd10      	pop	{r4, pc}
 800cb36:	bf00      	nop
 800cb38:	0801d788 	.word	0x0801d788
 800cb3c:	0801d814 	.word	0x0801d814

0800cb40 <__multiply>:
 800cb40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb44:	4691      	mov	r9, r2
 800cb46:	690a      	ldr	r2, [r1, #16]
 800cb48:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cb4c:	429a      	cmp	r2, r3
 800cb4e:	bfb8      	it	lt
 800cb50:	460b      	movlt	r3, r1
 800cb52:	460c      	mov	r4, r1
 800cb54:	bfbc      	itt	lt
 800cb56:	464c      	movlt	r4, r9
 800cb58:	4699      	movlt	r9, r3
 800cb5a:	6927      	ldr	r7, [r4, #16]
 800cb5c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cb60:	68a3      	ldr	r3, [r4, #8]
 800cb62:	6861      	ldr	r1, [r4, #4]
 800cb64:	eb07 060a 	add.w	r6, r7, sl
 800cb68:	42b3      	cmp	r3, r6
 800cb6a:	b085      	sub	sp, #20
 800cb6c:	bfb8      	it	lt
 800cb6e:	3101      	addlt	r1, #1
 800cb70:	f7ff fe8e 	bl	800c890 <_Balloc>
 800cb74:	b930      	cbnz	r0, 800cb84 <__multiply+0x44>
 800cb76:	4602      	mov	r2, r0
 800cb78:	4b44      	ldr	r3, [pc, #272]	; (800cc8c <__multiply+0x14c>)
 800cb7a:	4845      	ldr	r0, [pc, #276]	; (800cc90 <__multiply+0x150>)
 800cb7c:	f240 115d 	movw	r1, #349	; 0x15d
 800cb80:	f000 fdd4 	bl	800d72c <__assert_func>
 800cb84:	f100 0514 	add.w	r5, r0, #20
 800cb88:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cb8c:	462b      	mov	r3, r5
 800cb8e:	2200      	movs	r2, #0
 800cb90:	4543      	cmp	r3, r8
 800cb92:	d321      	bcc.n	800cbd8 <__multiply+0x98>
 800cb94:	f104 0314 	add.w	r3, r4, #20
 800cb98:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cb9c:	f109 0314 	add.w	r3, r9, #20
 800cba0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cba4:	9202      	str	r2, [sp, #8]
 800cba6:	1b3a      	subs	r2, r7, r4
 800cba8:	3a15      	subs	r2, #21
 800cbaa:	f022 0203 	bic.w	r2, r2, #3
 800cbae:	3204      	adds	r2, #4
 800cbb0:	f104 0115 	add.w	r1, r4, #21
 800cbb4:	428f      	cmp	r7, r1
 800cbb6:	bf38      	it	cc
 800cbb8:	2204      	movcc	r2, #4
 800cbba:	9201      	str	r2, [sp, #4]
 800cbbc:	9a02      	ldr	r2, [sp, #8]
 800cbbe:	9303      	str	r3, [sp, #12]
 800cbc0:	429a      	cmp	r2, r3
 800cbc2:	d80c      	bhi.n	800cbde <__multiply+0x9e>
 800cbc4:	2e00      	cmp	r6, #0
 800cbc6:	dd03      	ble.n	800cbd0 <__multiply+0x90>
 800cbc8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d05a      	beq.n	800cc86 <__multiply+0x146>
 800cbd0:	6106      	str	r6, [r0, #16]
 800cbd2:	b005      	add	sp, #20
 800cbd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbd8:	f843 2b04 	str.w	r2, [r3], #4
 800cbdc:	e7d8      	b.n	800cb90 <__multiply+0x50>
 800cbde:	f8b3 a000 	ldrh.w	sl, [r3]
 800cbe2:	f1ba 0f00 	cmp.w	sl, #0
 800cbe6:	d024      	beq.n	800cc32 <__multiply+0xf2>
 800cbe8:	f104 0e14 	add.w	lr, r4, #20
 800cbec:	46a9      	mov	r9, r5
 800cbee:	f04f 0c00 	mov.w	ip, #0
 800cbf2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cbf6:	f8d9 1000 	ldr.w	r1, [r9]
 800cbfa:	fa1f fb82 	uxth.w	fp, r2
 800cbfe:	b289      	uxth	r1, r1
 800cc00:	fb0a 110b 	mla	r1, sl, fp, r1
 800cc04:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cc08:	f8d9 2000 	ldr.w	r2, [r9]
 800cc0c:	4461      	add	r1, ip
 800cc0e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cc12:	fb0a c20b 	mla	r2, sl, fp, ip
 800cc16:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cc1a:	b289      	uxth	r1, r1
 800cc1c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cc20:	4577      	cmp	r7, lr
 800cc22:	f849 1b04 	str.w	r1, [r9], #4
 800cc26:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cc2a:	d8e2      	bhi.n	800cbf2 <__multiply+0xb2>
 800cc2c:	9a01      	ldr	r2, [sp, #4]
 800cc2e:	f845 c002 	str.w	ip, [r5, r2]
 800cc32:	9a03      	ldr	r2, [sp, #12]
 800cc34:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cc38:	3304      	adds	r3, #4
 800cc3a:	f1b9 0f00 	cmp.w	r9, #0
 800cc3e:	d020      	beq.n	800cc82 <__multiply+0x142>
 800cc40:	6829      	ldr	r1, [r5, #0]
 800cc42:	f104 0c14 	add.w	ip, r4, #20
 800cc46:	46ae      	mov	lr, r5
 800cc48:	f04f 0a00 	mov.w	sl, #0
 800cc4c:	f8bc b000 	ldrh.w	fp, [ip]
 800cc50:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cc54:	fb09 220b 	mla	r2, r9, fp, r2
 800cc58:	4492      	add	sl, r2
 800cc5a:	b289      	uxth	r1, r1
 800cc5c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800cc60:	f84e 1b04 	str.w	r1, [lr], #4
 800cc64:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cc68:	f8be 1000 	ldrh.w	r1, [lr]
 800cc6c:	0c12      	lsrs	r2, r2, #16
 800cc6e:	fb09 1102 	mla	r1, r9, r2, r1
 800cc72:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800cc76:	4567      	cmp	r7, ip
 800cc78:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cc7c:	d8e6      	bhi.n	800cc4c <__multiply+0x10c>
 800cc7e:	9a01      	ldr	r2, [sp, #4]
 800cc80:	50a9      	str	r1, [r5, r2]
 800cc82:	3504      	adds	r5, #4
 800cc84:	e79a      	b.n	800cbbc <__multiply+0x7c>
 800cc86:	3e01      	subs	r6, #1
 800cc88:	e79c      	b.n	800cbc4 <__multiply+0x84>
 800cc8a:	bf00      	nop
 800cc8c:	0801d788 	.word	0x0801d788
 800cc90:	0801d814 	.word	0x0801d814

0800cc94 <__pow5mult>:
 800cc94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc98:	4615      	mov	r5, r2
 800cc9a:	f012 0203 	ands.w	r2, r2, #3
 800cc9e:	4606      	mov	r6, r0
 800cca0:	460f      	mov	r7, r1
 800cca2:	d007      	beq.n	800ccb4 <__pow5mult+0x20>
 800cca4:	4c25      	ldr	r4, [pc, #148]	; (800cd3c <__pow5mult+0xa8>)
 800cca6:	3a01      	subs	r2, #1
 800cca8:	2300      	movs	r3, #0
 800ccaa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ccae:	f7ff fe51 	bl	800c954 <__multadd>
 800ccb2:	4607      	mov	r7, r0
 800ccb4:	10ad      	asrs	r5, r5, #2
 800ccb6:	d03d      	beq.n	800cd34 <__pow5mult+0xa0>
 800ccb8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ccba:	b97c      	cbnz	r4, 800ccdc <__pow5mult+0x48>
 800ccbc:	2010      	movs	r0, #16
 800ccbe:	f7ff fdcd 	bl	800c85c <malloc>
 800ccc2:	4602      	mov	r2, r0
 800ccc4:	6270      	str	r0, [r6, #36]	; 0x24
 800ccc6:	b928      	cbnz	r0, 800ccd4 <__pow5mult+0x40>
 800ccc8:	4b1d      	ldr	r3, [pc, #116]	; (800cd40 <__pow5mult+0xac>)
 800ccca:	481e      	ldr	r0, [pc, #120]	; (800cd44 <__pow5mult+0xb0>)
 800cccc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ccd0:	f000 fd2c 	bl	800d72c <__assert_func>
 800ccd4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ccd8:	6004      	str	r4, [r0, #0]
 800ccda:	60c4      	str	r4, [r0, #12]
 800ccdc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cce0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cce4:	b94c      	cbnz	r4, 800ccfa <__pow5mult+0x66>
 800cce6:	f240 2171 	movw	r1, #625	; 0x271
 800ccea:	4630      	mov	r0, r6
 800ccec:	f7ff ff12 	bl	800cb14 <__i2b>
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	f8c8 0008 	str.w	r0, [r8, #8]
 800ccf6:	4604      	mov	r4, r0
 800ccf8:	6003      	str	r3, [r0, #0]
 800ccfa:	f04f 0900 	mov.w	r9, #0
 800ccfe:	07eb      	lsls	r3, r5, #31
 800cd00:	d50a      	bpl.n	800cd18 <__pow5mult+0x84>
 800cd02:	4639      	mov	r1, r7
 800cd04:	4622      	mov	r2, r4
 800cd06:	4630      	mov	r0, r6
 800cd08:	f7ff ff1a 	bl	800cb40 <__multiply>
 800cd0c:	4639      	mov	r1, r7
 800cd0e:	4680      	mov	r8, r0
 800cd10:	4630      	mov	r0, r6
 800cd12:	f7ff fdfd 	bl	800c910 <_Bfree>
 800cd16:	4647      	mov	r7, r8
 800cd18:	106d      	asrs	r5, r5, #1
 800cd1a:	d00b      	beq.n	800cd34 <__pow5mult+0xa0>
 800cd1c:	6820      	ldr	r0, [r4, #0]
 800cd1e:	b938      	cbnz	r0, 800cd30 <__pow5mult+0x9c>
 800cd20:	4622      	mov	r2, r4
 800cd22:	4621      	mov	r1, r4
 800cd24:	4630      	mov	r0, r6
 800cd26:	f7ff ff0b 	bl	800cb40 <__multiply>
 800cd2a:	6020      	str	r0, [r4, #0]
 800cd2c:	f8c0 9000 	str.w	r9, [r0]
 800cd30:	4604      	mov	r4, r0
 800cd32:	e7e4      	b.n	800ccfe <__pow5mult+0x6a>
 800cd34:	4638      	mov	r0, r7
 800cd36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd3a:	bf00      	nop
 800cd3c:	0801d960 	.word	0x0801d960
 800cd40:	0801d716 	.word	0x0801d716
 800cd44:	0801d814 	.word	0x0801d814

0800cd48 <__lshift>:
 800cd48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd4c:	460c      	mov	r4, r1
 800cd4e:	6849      	ldr	r1, [r1, #4]
 800cd50:	6923      	ldr	r3, [r4, #16]
 800cd52:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cd56:	68a3      	ldr	r3, [r4, #8]
 800cd58:	4607      	mov	r7, r0
 800cd5a:	4691      	mov	r9, r2
 800cd5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cd60:	f108 0601 	add.w	r6, r8, #1
 800cd64:	42b3      	cmp	r3, r6
 800cd66:	db0b      	blt.n	800cd80 <__lshift+0x38>
 800cd68:	4638      	mov	r0, r7
 800cd6a:	f7ff fd91 	bl	800c890 <_Balloc>
 800cd6e:	4605      	mov	r5, r0
 800cd70:	b948      	cbnz	r0, 800cd86 <__lshift+0x3e>
 800cd72:	4602      	mov	r2, r0
 800cd74:	4b2a      	ldr	r3, [pc, #168]	; (800ce20 <__lshift+0xd8>)
 800cd76:	482b      	ldr	r0, [pc, #172]	; (800ce24 <__lshift+0xdc>)
 800cd78:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cd7c:	f000 fcd6 	bl	800d72c <__assert_func>
 800cd80:	3101      	adds	r1, #1
 800cd82:	005b      	lsls	r3, r3, #1
 800cd84:	e7ee      	b.n	800cd64 <__lshift+0x1c>
 800cd86:	2300      	movs	r3, #0
 800cd88:	f100 0114 	add.w	r1, r0, #20
 800cd8c:	f100 0210 	add.w	r2, r0, #16
 800cd90:	4618      	mov	r0, r3
 800cd92:	4553      	cmp	r3, sl
 800cd94:	db37      	blt.n	800ce06 <__lshift+0xbe>
 800cd96:	6920      	ldr	r0, [r4, #16]
 800cd98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cd9c:	f104 0314 	add.w	r3, r4, #20
 800cda0:	f019 091f 	ands.w	r9, r9, #31
 800cda4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cda8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cdac:	d02f      	beq.n	800ce0e <__lshift+0xc6>
 800cdae:	f1c9 0e20 	rsb	lr, r9, #32
 800cdb2:	468a      	mov	sl, r1
 800cdb4:	f04f 0c00 	mov.w	ip, #0
 800cdb8:	681a      	ldr	r2, [r3, #0]
 800cdba:	fa02 f209 	lsl.w	r2, r2, r9
 800cdbe:	ea42 020c 	orr.w	r2, r2, ip
 800cdc2:	f84a 2b04 	str.w	r2, [sl], #4
 800cdc6:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdca:	4298      	cmp	r0, r3
 800cdcc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800cdd0:	d8f2      	bhi.n	800cdb8 <__lshift+0x70>
 800cdd2:	1b03      	subs	r3, r0, r4
 800cdd4:	3b15      	subs	r3, #21
 800cdd6:	f023 0303 	bic.w	r3, r3, #3
 800cdda:	3304      	adds	r3, #4
 800cddc:	f104 0215 	add.w	r2, r4, #21
 800cde0:	4290      	cmp	r0, r2
 800cde2:	bf38      	it	cc
 800cde4:	2304      	movcc	r3, #4
 800cde6:	f841 c003 	str.w	ip, [r1, r3]
 800cdea:	f1bc 0f00 	cmp.w	ip, #0
 800cdee:	d001      	beq.n	800cdf4 <__lshift+0xac>
 800cdf0:	f108 0602 	add.w	r6, r8, #2
 800cdf4:	3e01      	subs	r6, #1
 800cdf6:	4638      	mov	r0, r7
 800cdf8:	612e      	str	r6, [r5, #16]
 800cdfa:	4621      	mov	r1, r4
 800cdfc:	f7ff fd88 	bl	800c910 <_Bfree>
 800ce00:	4628      	mov	r0, r5
 800ce02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce06:	f842 0f04 	str.w	r0, [r2, #4]!
 800ce0a:	3301      	adds	r3, #1
 800ce0c:	e7c1      	b.n	800cd92 <__lshift+0x4a>
 800ce0e:	3904      	subs	r1, #4
 800ce10:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce14:	f841 2f04 	str.w	r2, [r1, #4]!
 800ce18:	4298      	cmp	r0, r3
 800ce1a:	d8f9      	bhi.n	800ce10 <__lshift+0xc8>
 800ce1c:	e7ea      	b.n	800cdf4 <__lshift+0xac>
 800ce1e:	bf00      	nop
 800ce20:	0801d788 	.word	0x0801d788
 800ce24:	0801d814 	.word	0x0801d814

0800ce28 <__mcmp>:
 800ce28:	b530      	push	{r4, r5, lr}
 800ce2a:	6902      	ldr	r2, [r0, #16]
 800ce2c:	690c      	ldr	r4, [r1, #16]
 800ce2e:	1b12      	subs	r2, r2, r4
 800ce30:	d10e      	bne.n	800ce50 <__mcmp+0x28>
 800ce32:	f100 0314 	add.w	r3, r0, #20
 800ce36:	3114      	adds	r1, #20
 800ce38:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ce3c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ce40:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ce44:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ce48:	42a5      	cmp	r5, r4
 800ce4a:	d003      	beq.n	800ce54 <__mcmp+0x2c>
 800ce4c:	d305      	bcc.n	800ce5a <__mcmp+0x32>
 800ce4e:	2201      	movs	r2, #1
 800ce50:	4610      	mov	r0, r2
 800ce52:	bd30      	pop	{r4, r5, pc}
 800ce54:	4283      	cmp	r3, r0
 800ce56:	d3f3      	bcc.n	800ce40 <__mcmp+0x18>
 800ce58:	e7fa      	b.n	800ce50 <__mcmp+0x28>
 800ce5a:	f04f 32ff 	mov.w	r2, #4294967295
 800ce5e:	e7f7      	b.n	800ce50 <__mcmp+0x28>

0800ce60 <__mdiff>:
 800ce60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce64:	460c      	mov	r4, r1
 800ce66:	4606      	mov	r6, r0
 800ce68:	4611      	mov	r1, r2
 800ce6a:	4620      	mov	r0, r4
 800ce6c:	4690      	mov	r8, r2
 800ce6e:	f7ff ffdb 	bl	800ce28 <__mcmp>
 800ce72:	1e05      	subs	r5, r0, #0
 800ce74:	d110      	bne.n	800ce98 <__mdiff+0x38>
 800ce76:	4629      	mov	r1, r5
 800ce78:	4630      	mov	r0, r6
 800ce7a:	f7ff fd09 	bl	800c890 <_Balloc>
 800ce7e:	b930      	cbnz	r0, 800ce8e <__mdiff+0x2e>
 800ce80:	4b3a      	ldr	r3, [pc, #232]	; (800cf6c <__mdiff+0x10c>)
 800ce82:	4602      	mov	r2, r0
 800ce84:	f240 2132 	movw	r1, #562	; 0x232
 800ce88:	4839      	ldr	r0, [pc, #228]	; (800cf70 <__mdiff+0x110>)
 800ce8a:	f000 fc4f 	bl	800d72c <__assert_func>
 800ce8e:	2301      	movs	r3, #1
 800ce90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ce94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce98:	bfa4      	itt	ge
 800ce9a:	4643      	movge	r3, r8
 800ce9c:	46a0      	movge	r8, r4
 800ce9e:	4630      	mov	r0, r6
 800cea0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cea4:	bfa6      	itte	ge
 800cea6:	461c      	movge	r4, r3
 800cea8:	2500      	movge	r5, #0
 800ceaa:	2501      	movlt	r5, #1
 800ceac:	f7ff fcf0 	bl	800c890 <_Balloc>
 800ceb0:	b920      	cbnz	r0, 800cebc <__mdiff+0x5c>
 800ceb2:	4b2e      	ldr	r3, [pc, #184]	; (800cf6c <__mdiff+0x10c>)
 800ceb4:	4602      	mov	r2, r0
 800ceb6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ceba:	e7e5      	b.n	800ce88 <__mdiff+0x28>
 800cebc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cec0:	6926      	ldr	r6, [r4, #16]
 800cec2:	60c5      	str	r5, [r0, #12]
 800cec4:	f104 0914 	add.w	r9, r4, #20
 800cec8:	f108 0514 	add.w	r5, r8, #20
 800cecc:	f100 0e14 	add.w	lr, r0, #20
 800ced0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ced4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ced8:	f108 0210 	add.w	r2, r8, #16
 800cedc:	46f2      	mov	sl, lr
 800cede:	2100      	movs	r1, #0
 800cee0:	f859 3b04 	ldr.w	r3, [r9], #4
 800cee4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cee8:	fa1f f883 	uxth.w	r8, r3
 800ceec:	fa11 f18b 	uxtah	r1, r1, fp
 800cef0:	0c1b      	lsrs	r3, r3, #16
 800cef2:	eba1 0808 	sub.w	r8, r1, r8
 800cef6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cefa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cefe:	fa1f f888 	uxth.w	r8, r8
 800cf02:	1419      	asrs	r1, r3, #16
 800cf04:	454e      	cmp	r6, r9
 800cf06:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cf0a:	f84a 3b04 	str.w	r3, [sl], #4
 800cf0e:	d8e7      	bhi.n	800cee0 <__mdiff+0x80>
 800cf10:	1b33      	subs	r3, r6, r4
 800cf12:	3b15      	subs	r3, #21
 800cf14:	f023 0303 	bic.w	r3, r3, #3
 800cf18:	3304      	adds	r3, #4
 800cf1a:	3415      	adds	r4, #21
 800cf1c:	42a6      	cmp	r6, r4
 800cf1e:	bf38      	it	cc
 800cf20:	2304      	movcc	r3, #4
 800cf22:	441d      	add	r5, r3
 800cf24:	4473      	add	r3, lr
 800cf26:	469e      	mov	lr, r3
 800cf28:	462e      	mov	r6, r5
 800cf2a:	4566      	cmp	r6, ip
 800cf2c:	d30e      	bcc.n	800cf4c <__mdiff+0xec>
 800cf2e:	f10c 0203 	add.w	r2, ip, #3
 800cf32:	1b52      	subs	r2, r2, r5
 800cf34:	f022 0203 	bic.w	r2, r2, #3
 800cf38:	3d03      	subs	r5, #3
 800cf3a:	45ac      	cmp	ip, r5
 800cf3c:	bf38      	it	cc
 800cf3e:	2200      	movcc	r2, #0
 800cf40:	441a      	add	r2, r3
 800cf42:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cf46:	b17b      	cbz	r3, 800cf68 <__mdiff+0x108>
 800cf48:	6107      	str	r7, [r0, #16]
 800cf4a:	e7a3      	b.n	800ce94 <__mdiff+0x34>
 800cf4c:	f856 8b04 	ldr.w	r8, [r6], #4
 800cf50:	fa11 f288 	uxtah	r2, r1, r8
 800cf54:	1414      	asrs	r4, r2, #16
 800cf56:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cf5a:	b292      	uxth	r2, r2
 800cf5c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cf60:	f84e 2b04 	str.w	r2, [lr], #4
 800cf64:	1421      	asrs	r1, r4, #16
 800cf66:	e7e0      	b.n	800cf2a <__mdiff+0xca>
 800cf68:	3f01      	subs	r7, #1
 800cf6a:	e7ea      	b.n	800cf42 <__mdiff+0xe2>
 800cf6c:	0801d788 	.word	0x0801d788
 800cf70:	0801d814 	.word	0x0801d814

0800cf74 <__ulp>:
 800cf74:	b082      	sub	sp, #8
 800cf76:	ed8d 0b00 	vstr	d0, [sp]
 800cf7a:	9b01      	ldr	r3, [sp, #4]
 800cf7c:	4912      	ldr	r1, [pc, #72]	; (800cfc8 <__ulp+0x54>)
 800cf7e:	4019      	ands	r1, r3
 800cf80:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800cf84:	2900      	cmp	r1, #0
 800cf86:	dd05      	ble.n	800cf94 <__ulp+0x20>
 800cf88:	2200      	movs	r2, #0
 800cf8a:	460b      	mov	r3, r1
 800cf8c:	ec43 2b10 	vmov	d0, r2, r3
 800cf90:	b002      	add	sp, #8
 800cf92:	4770      	bx	lr
 800cf94:	4249      	negs	r1, r1
 800cf96:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800cf9a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800cf9e:	f04f 0200 	mov.w	r2, #0
 800cfa2:	f04f 0300 	mov.w	r3, #0
 800cfa6:	da04      	bge.n	800cfb2 <__ulp+0x3e>
 800cfa8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800cfac:	fa41 f300 	asr.w	r3, r1, r0
 800cfb0:	e7ec      	b.n	800cf8c <__ulp+0x18>
 800cfb2:	f1a0 0114 	sub.w	r1, r0, #20
 800cfb6:	291e      	cmp	r1, #30
 800cfb8:	bfda      	itte	le
 800cfba:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800cfbe:	fa20 f101 	lsrle.w	r1, r0, r1
 800cfc2:	2101      	movgt	r1, #1
 800cfc4:	460a      	mov	r2, r1
 800cfc6:	e7e1      	b.n	800cf8c <__ulp+0x18>
 800cfc8:	7ff00000 	.word	0x7ff00000

0800cfcc <__b2d>:
 800cfcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfce:	6905      	ldr	r5, [r0, #16]
 800cfd0:	f100 0714 	add.w	r7, r0, #20
 800cfd4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800cfd8:	1f2e      	subs	r6, r5, #4
 800cfda:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800cfde:	4620      	mov	r0, r4
 800cfe0:	f7ff fd48 	bl	800ca74 <__hi0bits>
 800cfe4:	f1c0 0320 	rsb	r3, r0, #32
 800cfe8:	280a      	cmp	r0, #10
 800cfea:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d068 <__b2d+0x9c>
 800cfee:	600b      	str	r3, [r1, #0]
 800cff0:	dc14      	bgt.n	800d01c <__b2d+0x50>
 800cff2:	f1c0 0e0b 	rsb	lr, r0, #11
 800cff6:	fa24 f10e 	lsr.w	r1, r4, lr
 800cffa:	42b7      	cmp	r7, r6
 800cffc:	ea41 030c 	orr.w	r3, r1, ip
 800d000:	bf34      	ite	cc
 800d002:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d006:	2100      	movcs	r1, #0
 800d008:	3015      	adds	r0, #21
 800d00a:	fa04 f000 	lsl.w	r0, r4, r0
 800d00e:	fa21 f10e 	lsr.w	r1, r1, lr
 800d012:	ea40 0201 	orr.w	r2, r0, r1
 800d016:	ec43 2b10 	vmov	d0, r2, r3
 800d01a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d01c:	42b7      	cmp	r7, r6
 800d01e:	bf3a      	itte	cc
 800d020:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d024:	f1a5 0608 	subcc.w	r6, r5, #8
 800d028:	2100      	movcs	r1, #0
 800d02a:	380b      	subs	r0, #11
 800d02c:	d017      	beq.n	800d05e <__b2d+0x92>
 800d02e:	f1c0 0c20 	rsb	ip, r0, #32
 800d032:	fa04 f500 	lsl.w	r5, r4, r0
 800d036:	42be      	cmp	r6, r7
 800d038:	fa21 f40c 	lsr.w	r4, r1, ip
 800d03c:	ea45 0504 	orr.w	r5, r5, r4
 800d040:	bf8c      	ite	hi
 800d042:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d046:	2400      	movls	r4, #0
 800d048:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d04c:	fa01 f000 	lsl.w	r0, r1, r0
 800d050:	fa24 f40c 	lsr.w	r4, r4, ip
 800d054:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d058:	ea40 0204 	orr.w	r2, r0, r4
 800d05c:	e7db      	b.n	800d016 <__b2d+0x4a>
 800d05e:	ea44 030c 	orr.w	r3, r4, ip
 800d062:	460a      	mov	r2, r1
 800d064:	e7d7      	b.n	800d016 <__b2d+0x4a>
 800d066:	bf00      	nop
 800d068:	3ff00000 	.word	0x3ff00000

0800d06c <__d2b>:
 800d06c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d070:	4689      	mov	r9, r1
 800d072:	2101      	movs	r1, #1
 800d074:	ec57 6b10 	vmov	r6, r7, d0
 800d078:	4690      	mov	r8, r2
 800d07a:	f7ff fc09 	bl	800c890 <_Balloc>
 800d07e:	4604      	mov	r4, r0
 800d080:	b930      	cbnz	r0, 800d090 <__d2b+0x24>
 800d082:	4602      	mov	r2, r0
 800d084:	4b25      	ldr	r3, [pc, #148]	; (800d11c <__d2b+0xb0>)
 800d086:	4826      	ldr	r0, [pc, #152]	; (800d120 <__d2b+0xb4>)
 800d088:	f240 310a 	movw	r1, #778	; 0x30a
 800d08c:	f000 fb4e 	bl	800d72c <__assert_func>
 800d090:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d094:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d098:	bb35      	cbnz	r5, 800d0e8 <__d2b+0x7c>
 800d09a:	2e00      	cmp	r6, #0
 800d09c:	9301      	str	r3, [sp, #4]
 800d09e:	d028      	beq.n	800d0f2 <__d2b+0x86>
 800d0a0:	4668      	mov	r0, sp
 800d0a2:	9600      	str	r6, [sp, #0]
 800d0a4:	f7ff fd06 	bl	800cab4 <__lo0bits>
 800d0a8:	9900      	ldr	r1, [sp, #0]
 800d0aa:	b300      	cbz	r0, 800d0ee <__d2b+0x82>
 800d0ac:	9a01      	ldr	r2, [sp, #4]
 800d0ae:	f1c0 0320 	rsb	r3, r0, #32
 800d0b2:	fa02 f303 	lsl.w	r3, r2, r3
 800d0b6:	430b      	orrs	r3, r1
 800d0b8:	40c2      	lsrs	r2, r0
 800d0ba:	6163      	str	r3, [r4, #20]
 800d0bc:	9201      	str	r2, [sp, #4]
 800d0be:	9b01      	ldr	r3, [sp, #4]
 800d0c0:	61a3      	str	r3, [r4, #24]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	bf14      	ite	ne
 800d0c6:	2202      	movne	r2, #2
 800d0c8:	2201      	moveq	r2, #1
 800d0ca:	6122      	str	r2, [r4, #16]
 800d0cc:	b1d5      	cbz	r5, 800d104 <__d2b+0x98>
 800d0ce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d0d2:	4405      	add	r5, r0
 800d0d4:	f8c9 5000 	str.w	r5, [r9]
 800d0d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d0dc:	f8c8 0000 	str.w	r0, [r8]
 800d0e0:	4620      	mov	r0, r4
 800d0e2:	b003      	add	sp, #12
 800d0e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d0e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d0ec:	e7d5      	b.n	800d09a <__d2b+0x2e>
 800d0ee:	6161      	str	r1, [r4, #20]
 800d0f0:	e7e5      	b.n	800d0be <__d2b+0x52>
 800d0f2:	a801      	add	r0, sp, #4
 800d0f4:	f7ff fcde 	bl	800cab4 <__lo0bits>
 800d0f8:	9b01      	ldr	r3, [sp, #4]
 800d0fa:	6163      	str	r3, [r4, #20]
 800d0fc:	2201      	movs	r2, #1
 800d0fe:	6122      	str	r2, [r4, #16]
 800d100:	3020      	adds	r0, #32
 800d102:	e7e3      	b.n	800d0cc <__d2b+0x60>
 800d104:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d108:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d10c:	f8c9 0000 	str.w	r0, [r9]
 800d110:	6918      	ldr	r0, [r3, #16]
 800d112:	f7ff fcaf 	bl	800ca74 <__hi0bits>
 800d116:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d11a:	e7df      	b.n	800d0dc <__d2b+0x70>
 800d11c:	0801d788 	.word	0x0801d788
 800d120:	0801d814 	.word	0x0801d814

0800d124 <__ratio>:
 800d124:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d128:	4688      	mov	r8, r1
 800d12a:	4669      	mov	r1, sp
 800d12c:	4681      	mov	r9, r0
 800d12e:	f7ff ff4d 	bl	800cfcc <__b2d>
 800d132:	a901      	add	r1, sp, #4
 800d134:	4640      	mov	r0, r8
 800d136:	ec55 4b10 	vmov	r4, r5, d0
 800d13a:	f7ff ff47 	bl	800cfcc <__b2d>
 800d13e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d142:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d146:	eba3 0c02 	sub.w	ip, r3, r2
 800d14a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d14e:	1a9b      	subs	r3, r3, r2
 800d150:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d154:	ec51 0b10 	vmov	r0, r1, d0
 800d158:	2b00      	cmp	r3, #0
 800d15a:	bfd6      	itet	le
 800d15c:	460a      	movle	r2, r1
 800d15e:	462a      	movgt	r2, r5
 800d160:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d164:	468b      	mov	fp, r1
 800d166:	462f      	mov	r7, r5
 800d168:	bfd4      	ite	le
 800d16a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d16e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d172:	4620      	mov	r0, r4
 800d174:	ee10 2a10 	vmov	r2, s0
 800d178:	465b      	mov	r3, fp
 800d17a:	4639      	mov	r1, r7
 800d17c:	f7f3 fb66 	bl	800084c <__aeabi_ddiv>
 800d180:	ec41 0b10 	vmov	d0, r0, r1
 800d184:	b003      	add	sp, #12
 800d186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d18a <__copybits>:
 800d18a:	3901      	subs	r1, #1
 800d18c:	b570      	push	{r4, r5, r6, lr}
 800d18e:	1149      	asrs	r1, r1, #5
 800d190:	6914      	ldr	r4, [r2, #16]
 800d192:	3101      	adds	r1, #1
 800d194:	f102 0314 	add.w	r3, r2, #20
 800d198:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d19c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d1a0:	1f05      	subs	r5, r0, #4
 800d1a2:	42a3      	cmp	r3, r4
 800d1a4:	d30c      	bcc.n	800d1c0 <__copybits+0x36>
 800d1a6:	1aa3      	subs	r3, r4, r2
 800d1a8:	3b11      	subs	r3, #17
 800d1aa:	f023 0303 	bic.w	r3, r3, #3
 800d1ae:	3211      	adds	r2, #17
 800d1b0:	42a2      	cmp	r2, r4
 800d1b2:	bf88      	it	hi
 800d1b4:	2300      	movhi	r3, #0
 800d1b6:	4418      	add	r0, r3
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	4288      	cmp	r0, r1
 800d1bc:	d305      	bcc.n	800d1ca <__copybits+0x40>
 800d1be:	bd70      	pop	{r4, r5, r6, pc}
 800d1c0:	f853 6b04 	ldr.w	r6, [r3], #4
 800d1c4:	f845 6f04 	str.w	r6, [r5, #4]!
 800d1c8:	e7eb      	b.n	800d1a2 <__copybits+0x18>
 800d1ca:	f840 3b04 	str.w	r3, [r0], #4
 800d1ce:	e7f4      	b.n	800d1ba <__copybits+0x30>

0800d1d0 <__any_on>:
 800d1d0:	f100 0214 	add.w	r2, r0, #20
 800d1d4:	6900      	ldr	r0, [r0, #16]
 800d1d6:	114b      	asrs	r3, r1, #5
 800d1d8:	4298      	cmp	r0, r3
 800d1da:	b510      	push	{r4, lr}
 800d1dc:	db11      	blt.n	800d202 <__any_on+0x32>
 800d1de:	dd0a      	ble.n	800d1f6 <__any_on+0x26>
 800d1e0:	f011 011f 	ands.w	r1, r1, #31
 800d1e4:	d007      	beq.n	800d1f6 <__any_on+0x26>
 800d1e6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d1ea:	fa24 f001 	lsr.w	r0, r4, r1
 800d1ee:	fa00 f101 	lsl.w	r1, r0, r1
 800d1f2:	428c      	cmp	r4, r1
 800d1f4:	d10b      	bne.n	800d20e <__any_on+0x3e>
 800d1f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d1fa:	4293      	cmp	r3, r2
 800d1fc:	d803      	bhi.n	800d206 <__any_on+0x36>
 800d1fe:	2000      	movs	r0, #0
 800d200:	bd10      	pop	{r4, pc}
 800d202:	4603      	mov	r3, r0
 800d204:	e7f7      	b.n	800d1f6 <__any_on+0x26>
 800d206:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d20a:	2900      	cmp	r1, #0
 800d20c:	d0f5      	beq.n	800d1fa <__any_on+0x2a>
 800d20e:	2001      	movs	r0, #1
 800d210:	e7f6      	b.n	800d200 <__any_on+0x30>

0800d212 <_calloc_r>:
 800d212:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d214:	fba1 2402 	umull	r2, r4, r1, r2
 800d218:	b94c      	cbnz	r4, 800d22e <_calloc_r+0x1c>
 800d21a:	4611      	mov	r1, r2
 800d21c:	9201      	str	r2, [sp, #4]
 800d21e:	f000 f87b 	bl	800d318 <_malloc_r>
 800d222:	9a01      	ldr	r2, [sp, #4]
 800d224:	4605      	mov	r5, r0
 800d226:	b930      	cbnz	r0, 800d236 <_calloc_r+0x24>
 800d228:	4628      	mov	r0, r5
 800d22a:	b003      	add	sp, #12
 800d22c:	bd30      	pop	{r4, r5, pc}
 800d22e:	220c      	movs	r2, #12
 800d230:	6002      	str	r2, [r0, #0]
 800d232:	2500      	movs	r5, #0
 800d234:	e7f8      	b.n	800d228 <_calloc_r+0x16>
 800d236:	4621      	mov	r1, r4
 800d238:	f7fc fb8c 	bl	8009954 <memset>
 800d23c:	e7f4      	b.n	800d228 <_calloc_r+0x16>
	...

0800d240 <_free_r>:
 800d240:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d242:	2900      	cmp	r1, #0
 800d244:	d044      	beq.n	800d2d0 <_free_r+0x90>
 800d246:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d24a:	9001      	str	r0, [sp, #4]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	f1a1 0404 	sub.w	r4, r1, #4
 800d252:	bfb8      	it	lt
 800d254:	18e4      	addlt	r4, r4, r3
 800d256:	f000 fab3 	bl	800d7c0 <__malloc_lock>
 800d25a:	4a1e      	ldr	r2, [pc, #120]	; (800d2d4 <_free_r+0x94>)
 800d25c:	9801      	ldr	r0, [sp, #4]
 800d25e:	6813      	ldr	r3, [r2, #0]
 800d260:	b933      	cbnz	r3, 800d270 <_free_r+0x30>
 800d262:	6063      	str	r3, [r4, #4]
 800d264:	6014      	str	r4, [r2, #0]
 800d266:	b003      	add	sp, #12
 800d268:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d26c:	f000 baae 	b.w	800d7cc <__malloc_unlock>
 800d270:	42a3      	cmp	r3, r4
 800d272:	d908      	bls.n	800d286 <_free_r+0x46>
 800d274:	6825      	ldr	r5, [r4, #0]
 800d276:	1961      	adds	r1, r4, r5
 800d278:	428b      	cmp	r3, r1
 800d27a:	bf01      	itttt	eq
 800d27c:	6819      	ldreq	r1, [r3, #0]
 800d27e:	685b      	ldreq	r3, [r3, #4]
 800d280:	1949      	addeq	r1, r1, r5
 800d282:	6021      	streq	r1, [r4, #0]
 800d284:	e7ed      	b.n	800d262 <_free_r+0x22>
 800d286:	461a      	mov	r2, r3
 800d288:	685b      	ldr	r3, [r3, #4]
 800d28a:	b10b      	cbz	r3, 800d290 <_free_r+0x50>
 800d28c:	42a3      	cmp	r3, r4
 800d28e:	d9fa      	bls.n	800d286 <_free_r+0x46>
 800d290:	6811      	ldr	r1, [r2, #0]
 800d292:	1855      	adds	r5, r2, r1
 800d294:	42a5      	cmp	r5, r4
 800d296:	d10b      	bne.n	800d2b0 <_free_r+0x70>
 800d298:	6824      	ldr	r4, [r4, #0]
 800d29a:	4421      	add	r1, r4
 800d29c:	1854      	adds	r4, r2, r1
 800d29e:	42a3      	cmp	r3, r4
 800d2a0:	6011      	str	r1, [r2, #0]
 800d2a2:	d1e0      	bne.n	800d266 <_free_r+0x26>
 800d2a4:	681c      	ldr	r4, [r3, #0]
 800d2a6:	685b      	ldr	r3, [r3, #4]
 800d2a8:	6053      	str	r3, [r2, #4]
 800d2aa:	4421      	add	r1, r4
 800d2ac:	6011      	str	r1, [r2, #0]
 800d2ae:	e7da      	b.n	800d266 <_free_r+0x26>
 800d2b0:	d902      	bls.n	800d2b8 <_free_r+0x78>
 800d2b2:	230c      	movs	r3, #12
 800d2b4:	6003      	str	r3, [r0, #0]
 800d2b6:	e7d6      	b.n	800d266 <_free_r+0x26>
 800d2b8:	6825      	ldr	r5, [r4, #0]
 800d2ba:	1961      	adds	r1, r4, r5
 800d2bc:	428b      	cmp	r3, r1
 800d2be:	bf04      	itt	eq
 800d2c0:	6819      	ldreq	r1, [r3, #0]
 800d2c2:	685b      	ldreq	r3, [r3, #4]
 800d2c4:	6063      	str	r3, [r4, #4]
 800d2c6:	bf04      	itt	eq
 800d2c8:	1949      	addeq	r1, r1, r5
 800d2ca:	6021      	streq	r1, [r4, #0]
 800d2cc:	6054      	str	r4, [r2, #4]
 800d2ce:	e7ca      	b.n	800d266 <_free_r+0x26>
 800d2d0:	b003      	add	sp, #12
 800d2d2:	bd30      	pop	{r4, r5, pc}
 800d2d4:	20001138 	.word	0x20001138

0800d2d8 <sbrk_aligned>:
 800d2d8:	b570      	push	{r4, r5, r6, lr}
 800d2da:	4e0e      	ldr	r6, [pc, #56]	; (800d314 <sbrk_aligned+0x3c>)
 800d2dc:	460c      	mov	r4, r1
 800d2de:	6831      	ldr	r1, [r6, #0]
 800d2e0:	4605      	mov	r5, r0
 800d2e2:	b911      	cbnz	r1, 800d2ea <sbrk_aligned+0x12>
 800d2e4:	f000 f9f0 	bl	800d6c8 <_sbrk_r>
 800d2e8:	6030      	str	r0, [r6, #0]
 800d2ea:	4621      	mov	r1, r4
 800d2ec:	4628      	mov	r0, r5
 800d2ee:	f000 f9eb 	bl	800d6c8 <_sbrk_r>
 800d2f2:	1c43      	adds	r3, r0, #1
 800d2f4:	d00a      	beq.n	800d30c <sbrk_aligned+0x34>
 800d2f6:	1cc4      	adds	r4, r0, #3
 800d2f8:	f024 0403 	bic.w	r4, r4, #3
 800d2fc:	42a0      	cmp	r0, r4
 800d2fe:	d007      	beq.n	800d310 <sbrk_aligned+0x38>
 800d300:	1a21      	subs	r1, r4, r0
 800d302:	4628      	mov	r0, r5
 800d304:	f000 f9e0 	bl	800d6c8 <_sbrk_r>
 800d308:	3001      	adds	r0, #1
 800d30a:	d101      	bne.n	800d310 <sbrk_aligned+0x38>
 800d30c:	f04f 34ff 	mov.w	r4, #4294967295
 800d310:	4620      	mov	r0, r4
 800d312:	bd70      	pop	{r4, r5, r6, pc}
 800d314:	2000113c 	.word	0x2000113c

0800d318 <_malloc_r>:
 800d318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d31c:	1ccd      	adds	r5, r1, #3
 800d31e:	f025 0503 	bic.w	r5, r5, #3
 800d322:	3508      	adds	r5, #8
 800d324:	2d0c      	cmp	r5, #12
 800d326:	bf38      	it	cc
 800d328:	250c      	movcc	r5, #12
 800d32a:	2d00      	cmp	r5, #0
 800d32c:	4607      	mov	r7, r0
 800d32e:	db01      	blt.n	800d334 <_malloc_r+0x1c>
 800d330:	42a9      	cmp	r1, r5
 800d332:	d905      	bls.n	800d340 <_malloc_r+0x28>
 800d334:	230c      	movs	r3, #12
 800d336:	603b      	str	r3, [r7, #0]
 800d338:	2600      	movs	r6, #0
 800d33a:	4630      	mov	r0, r6
 800d33c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d340:	4e2e      	ldr	r6, [pc, #184]	; (800d3fc <_malloc_r+0xe4>)
 800d342:	f000 fa3d 	bl	800d7c0 <__malloc_lock>
 800d346:	6833      	ldr	r3, [r6, #0]
 800d348:	461c      	mov	r4, r3
 800d34a:	bb34      	cbnz	r4, 800d39a <_malloc_r+0x82>
 800d34c:	4629      	mov	r1, r5
 800d34e:	4638      	mov	r0, r7
 800d350:	f7ff ffc2 	bl	800d2d8 <sbrk_aligned>
 800d354:	1c43      	adds	r3, r0, #1
 800d356:	4604      	mov	r4, r0
 800d358:	d14d      	bne.n	800d3f6 <_malloc_r+0xde>
 800d35a:	6834      	ldr	r4, [r6, #0]
 800d35c:	4626      	mov	r6, r4
 800d35e:	2e00      	cmp	r6, #0
 800d360:	d140      	bne.n	800d3e4 <_malloc_r+0xcc>
 800d362:	6823      	ldr	r3, [r4, #0]
 800d364:	4631      	mov	r1, r6
 800d366:	4638      	mov	r0, r7
 800d368:	eb04 0803 	add.w	r8, r4, r3
 800d36c:	f000 f9ac 	bl	800d6c8 <_sbrk_r>
 800d370:	4580      	cmp	r8, r0
 800d372:	d13a      	bne.n	800d3ea <_malloc_r+0xd2>
 800d374:	6821      	ldr	r1, [r4, #0]
 800d376:	3503      	adds	r5, #3
 800d378:	1a6d      	subs	r5, r5, r1
 800d37a:	f025 0503 	bic.w	r5, r5, #3
 800d37e:	3508      	adds	r5, #8
 800d380:	2d0c      	cmp	r5, #12
 800d382:	bf38      	it	cc
 800d384:	250c      	movcc	r5, #12
 800d386:	4629      	mov	r1, r5
 800d388:	4638      	mov	r0, r7
 800d38a:	f7ff ffa5 	bl	800d2d8 <sbrk_aligned>
 800d38e:	3001      	adds	r0, #1
 800d390:	d02b      	beq.n	800d3ea <_malloc_r+0xd2>
 800d392:	6823      	ldr	r3, [r4, #0]
 800d394:	442b      	add	r3, r5
 800d396:	6023      	str	r3, [r4, #0]
 800d398:	e00e      	b.n	800d3b8 <_malloc_r+0xa0>
 800d39a:	6822      	ldr	r2, [r4, #0]
 800d39c:	1b52      	subs	r2, r2, r5
 800d39e:	d41e      	bmi.n	800d3de <_malloc_r+0xc6>
 800d3a0:	2a0b      	cmp	r2, #11
 800d3a2:	d916      	bls.n	800d3d2 <_malloc_r+0xba>
 800d3a4:	1961      	adds	r1, r4, r5
 800d3a6:	42a3      	cmp	r3, r4
 800d3a8:	6025      	str	r5, [r4, #0]
 800d3aa:	bf18      	it	ne
 800d3ac:	6059      	strne	r1, [r3, #4]
 800d3ae:	6863      	ldr	r3, [r4, #4]
 800d3b0:	bf08      	it	eq
 800d3b2:	6031      	streq	r1, [r6, #0]
 800d3b4:	5162      	str	r2, [r4, r5]
 800d3b6:	604b      	str	r3, [r1, #4]
 800d3b8:	4638      	mov	r0, r7
 800d3ba:	f104 060b 	add.w	r6, r4, #11
 800d3be:	f000 fa05 	bl	800d7cc <__malloc_unlock>
 800d3c2:	f026 0607 	bic.w	r6, r6, #7
 800d3c6:	1d23      	adds	r3, r4, #4
 800d3c8:	1af2      	subs	r2, r6, r3
 800d3ca:	d0b6      	beq.n	800d33a <_malloc_r+0x22>
 800d3cc:	1b9b      	subs	r3, r3, r6
 800d3ce:	50a3      	str	r3, [r4, r2]
 800d3d0:	e7b3      	b.n	800d33a <_malloc_r+0x22>
 800d3d2:	6862      	ldr	r2, [r4, #4]
 800d3d4:	42a3      	cmp	r3, r4
 800d3d6:	bf0c      	ite	eq
 800d3d8:	6032      	streq	r2, [r6, #0]
 800d3da:	605a      	strne	r2, [r3, #4]
 800d3dc:	e7ec      	b.n	800d3b8 <_malloc_r+0xa0>
 800d3de:	4623      	mov	r3, r4
 800d3e0:	6864      	ldr	r4, [r4, #4]
 800d3e2:	e7b2      	b.n	800d34a <_malloc_r+0x32>
 800d3e4:	4634      	mov	r4, r6
 800d3e6:	6876      	ldr	r6, [r6, #4]
 800d3e8:	e7b9      	b.n	800d35e <_malloc_r+0x46>
 800d3ea:	230c      	movs	r3, #12
 800d3ec:	603b      	str	r3, [r7, #0]
 800d3ee:	4638      	mov	r0, r7
 800d3f0:	f000 f9ec 	bl	800d7cc <__malloc_unlock>
 800d3f4:	e7a1      	b.n	800d33a <_malloc_r+0x22>
 800d3f6:	6025      	str	r5, [r4, #0]
 800d3f8:	e7de      	b.n	800d3b8 <_malloc_r+0xa0>
 800d3fa:	bf00      	nop
 800d3fc:	20001138 	.word	0x20001138

0800d400 <__ssputs_r>:
 800d400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d404:	688e      	ldr	r6, [r1, #8]
 800d406:	429e      	cmp	r6, r3
 800d408:	4682      	mov	sl, r0
 800d40a:	460c      	mov	r4, r1
 800d40c:	4690      	mov	r8, r2
 800d40e:	461f      	mov	r7, r3
 800d410:	d838      	bhi.n	800d484 <__ssputs_r+0x84>
 800d412:	898a      	ldrh	r2, [r1, #12]
 800d414:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d418:	d032      	beq.n	800d480 <__ssputs_r+0x80>
 800d41a:	6825      	ldr	r5, [r4, #0]
 800d41c:	6909      	ldr	r1, [r1, #16]
 800d41e:	eba5 0901 	sub.w	r9, r5, r1
 800d422:	6965      	ldr	r5, [r4, #20]
 800d424:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d428:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d42c:	3301      	adds	r3, #1
 800d42e:	444b      	add	r3, r9
 800d430:	106d      	asrs	r5, r5, #1
 800d432:	429d      	cmp	r5, r3
 800d434:	bf38      	it	cc
 800d436:	461d      	movcc	r5, r3
 800d438:	0553      	lsls	r3, r2, #21
 800d43a:	d531      	bpl.n	800d4a0 <__ssputs_r+0xa0>
 800d43c:	4629      	mov	r1, r5
 800d43e:	f7ff ff6b 	bl	800d318 <_malloc_r>
 800d442:	4606      	mov	r6, r0
 800d444:	b950      	cbnz	r0, 800d45c <__ssputs_r+0x5c>
 800d446:	230c      	movs	r3, #12
 800d448:	f8ca 3000 	str.w	r3, [sl]
 800d44c:	89a3      	ldrh	r3, [r4, #12]
 800d44e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d452:	81a3      	strh	r3, [r4, #12]
 800d454:	f04f 30ff 	mov.w	r0, #4294967295
 800d458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d45c:	6921      	ldr	r1, [r4, #16]
 800d45e:	464a      	mov	r2, r9
 800d460:	f7fc fa6a 	bl	8009938 <memcpy>
 800d464:	89a3      	ldrh	r3, [r4, #12]
 800d466:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d46a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d46e:	81a3      	strh	r3, [r4, #12]
 800d470:	6126      	str	r6, [r4, #16]
 800d472:	6165      	str	r5, [r4, #20]
 800d474:	444e      	add	r6, r9
 800d476:	eba5 0509 	sub.w	r5, r5, r9
 800d47a:	6026      	str	r6, [r4, #0]
 800d47c:	60a5      	str	r5, [r4, #8]
 800d47e:	463e      	mov	r6, r7
 800d480:	42be      	cmp	r6, r7
 800d482:	d900      	bls.n	800d486 <__ssputs_r+0x86>
 800d484:	463e      	mov	r6, r7
 800d486:	6820      	ldr	r0, [r4, #0]
 800d488:	4632      	mov	r2, r6
 800d48a:	4641      	mov	r1, r8
 800d48c:	f000 f97e 	bl	800d78c <memmove>
 800d490:	68a3      	ldr	r3, [r4, #8]
 800d492:	1b9b      	subs	r3, r3, r6
 800d494:	60a3      	str	r3, [r4, #8]
 800d496:	6823      	ldr	r3, [r4, #0]
 800d498:	4433      	add	r3, r6
 800d49a:	6023      	str	r3, [r4, #0]
 800d49c:	2000      	movs	r0, #0
 800d49e:	e7db      	b.n	800d458 <__ssputs_r+0x58>
 800d4a0:	462a      	mov	r2, r5
 800d4a2:	f000 f999 	bl	800d7d8 <_realloc_r>
 800d4a6:	4606      	mov	r6, r0
 800d4a8:	2800      	cmp	r0, #0
 800d4aa:	d1e1      	bne.n	800d470 <__ssputs_r+0x70>
 800d4ac:	6921      	ldr	r1, [r4, #16]
 800d4ae:	4650      	mov	r0, sl
 800d4b0:	f7ff fec6 	bl	800d240 <_free_r>
 800d4b4:	e7c7      	b.n	800d446 <__ssputs_r+0x46>
	...

0800d4b8 <_svfiprintf_r>:
 800d4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4bc:	4698      	mov	r8, r3
 800d4be:	898b      	ldrh	r3, [r1, #12]
 800d4c0:	061b      	lsls	r3, r3, #24
 800d4c2:	b09d      	sub	sp, #116	; 0x74
 800d4c4:	4607      	mov	r7, r0
 800d4c6:	460d      	mov	r5, r1
 800d4c8:	4614      	mov	r4, r2
 800d4ca:	d50e      	bpl.n	800d4ea <_svfiprintf_r+0x32>
 800d4cc:	690b      	ldr	r3, [r1, #16]
 800d4ce:	b963      	cbnz	r3, 800d4ea <_svfiprintf_r+0x32>
 800d4d0:	2140      	movs	r1, #64	; 0x40
 800d4d2:	f7ff ff21 	bl	800d318 <_malloc_r>
 800d4d6:	6028      	str	r0, [r5, #0]
 800d4d8:	6128      	str	r0, [r5, #16]
 800d4da:	b920      	cbnz	r0, 800d4e6 <_svfiprintf_r+0x2e>
 800d4dc:	230c      	movs	r3, #12
 800d4de:	603b      	str	r3, [r7, #0]
 800d4e0:	f04f 30ff 	mov.w	r0, #4294967295
 800d4e4:	e0d1      	b.n	800d68a <_svfiprintf_r+0x1d2>
 800d4e6:	2340      	movs	r3, #64	; 0x40
 800d4e8:	616b      	str	r3, [r5, #20]
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	9309      	str	r3, [sp, #36]	; 0x24
 800d4ee:	2320      	movs	r3, #32
 800d4f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d4f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d4f8:	2330      	movs	r3, #48	; 0x30
 800d4fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d6a4 <_svfiprintf_r+0x1ec>
 800d4fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d502:	f04f 0901 	mov.w	r9, #1
 800d506:	4623      	mov	r3, r4
 800d508:	469a      	mov	sl, r3
 800d50a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d50e:	b10a      	cbz	r2, 800d514 <_svfiprintf_r+0x5c>
 800d510:	2a25      	cmp	r2, #37	; 0x25
 800d512:	d1f9      	bne.n	800d508 <_svfiprintf_r+0x50>
 800d514:	ebba 0b04 	subs.w	fp, sl, r4
 800d518:	d00b      	beq.n	800d532 <_svfiprintf_r+0x7a>
 800d51a:	465b      	mov	r3, fp
 800d51c:	4622      	mov	r2, r4
 800d51e:	4629      	mov	r1, r5
 800d520:	4638      	mov	r0, r7
 800d522:	f7ff ff6d 	bl	800d400 <__ssputs_r>
 800d526:	3001      	adds	r0, #1
 800d528:	f000 80aa 	beq.w	800d680 <_svfiprintf_r+0x1c8>
 800d52c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d52e:	445a      	add	r2, fp
 800d530:	9209      	str	r2, [sp, #36]	; 0x24
 800d532:	f89a 3000 	ldrb.w	r3, [sl]
 800d536:	2b00      	cmp	r3, #0
 800d538:	f000 80a2 	beq.w	800d680 <_svfiprintf_r+0x1c8>
 800d53c:	2300      	movs	r3, #0
 800d53e:	f04f 32ff 	mov.w	r2, #4294967295
 800d542:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d546:	f10a 0a01 	add.w	sl, sl, #1
 800d54a:	9304      	str	r3, [sp, #16]
 800d54c:	9307      	str	r3, [sp, #28]
 800d54e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d552:	931a      	str	r3, [sp, #104]	; 0x68
 800d554:	4654      	mov	r4, sl
 800d556:	2205      	movs	r2, #5
 800d558:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d55c:	4851      	ldr	r0, [pc, #324]	; (800d6a4 <_svfiprintf_r+0x1ec>)
 800d55e:	f7f2 fe3f 	bl	80001e0 <memchr>
 800d562:	9a04      	ldr	r2, [sp, #16]
 800d564:	b9d8      	cbnz	r0, 800d59e <_svfiprintf_r+0xe6>
 800d566:	06d0      	lsls	r0, r2, #27
 800d568:	bf44      	itt	mi
 800d56a:	2320      	movmi	r3, #32
 800d56c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d570:	0711      	lsls	r1, r2, #28
 800d572:	bf44      	itt	mi
 800d574:	232b      	movmi	r3, #43	; 0x2b
 800d576:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d57a:	f89a 3000 	ldrb.w	r3, [sl]
 800d57e:	2b2a      	cmp	r3, #42	; 0x2a
 800d580:	d015      	beq.n	800d5ae <_svfiprintf_r+0xf6>
 800d582:	9a07      	ldr	r2, [sp, #28]
 800d584:	4654      	mov	r4, sl
 800d586:	2000      	movs	r0, #0
 800d588:	f04f 0c0a 	mov.w	ip, #10
 800d58c:	4621      	mov	r1, r4
 800d58e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d592:	3b30      	subs	r3, #48	; 0x30
 800d594:	2b09      	cmp	r3, #9
 800d596:	d94e      	bls.n	800d636 <_svfiprintf_r+0x17e>
 800d598:	b1b0      	cbz	r0, 800d5c8 <_svfiprintf_r+0x110>
 800d59a:	9207      	str	r2, [sp, #28]
 800d59c:	e014      	b.n	800d5c8 <_svfiprintf_r+0x110>
 800d59e:	eba0 0308 	sub.w	r3, r0, r8
 800d5a2:	fa09 f303 	lsl.w	r3, r9, r3
 800d5a6:	4313      	orrs	r3, r2
 800d5a8:	9304      	str	r3, [sp, #16]
 800d5aa:	46a2      	mov	sl, r4
 800d5ac:	e7d2      	b.n	800d554 <_svfiprintf_r+0x9c>
 800d5ae:	9b03      	ldr	r3, [sp, #12]
 800d5b0:	1d19      	adds	r1, r3, #4
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	9103      	str	r1, [sp, #12]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	bfbb      	ittet	lt
 800d5ba:	425b      	neglt	r3, r3
 800d5bc:	f042 0202 	orrlt.w	r2, r2, #2
 800d5c0:	9307      	strge	r3, [sp, #28]
 800d5c2:	9307      	strlt	r3, [sp, #28]
 800d5c4:	bfb8      	it	lt
 800d5c6:	9204      	strlt	r2, [sp, #16]
 800d5c8:	7823      	ldrb	r3, [r4, #0]
 800d5ca:	2b2e      	cmp	r3, #46	; 0x2e
 800d5cc:	d10c      	bne.n	800d5e8 <_svfiprintf_r+0x130>
 800d5ce:	7863      	ldrb	r3, [r4, #1]
 800d5d0:	2b2a      	cmp	r3, #42	; 0x2a
 800d5d2:	d135      	bne.n	800d640 <_svfiprintf_r+0x188>
 800d5d4:	9b03      	ldr	r3, [sp, #12]
 800d5d6:	1d1a      	adds	r2, r3, #4
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	9203      	str	r2, [sp, #12]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	bfb8      	it	lt
 800d5e0:	f04f 33ff 	movlt.w	r3, #4294967295
 800d5e4:	3402      	adds	r4, #2
 800d5e6:	9305      	str	r3, [sp, #20]
 800d5e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d6b4 <_svfiprintf_r+0x1fc>
 800d5ec:	7821      	ldrb	r1, [r4, #0]
 800d5ee:	2203      	movs	r2, #3
 800d5f0:	4650      	mov	r0, sl
 800d5f2:	f7f2 fdf5 	bl	80001e0 <memchr>
 800d5f6:	b140      	cbz	r0, 800d60a <_svfiprintf_r+0x152>
 800d5f8:	2340      	movs	r3, #64	; 0x40
 800d5fa:	eba0 000a 	sub.w	r0, r0, sl
 800d5fe:	fa03 f000 	lsl.w	r0, r3, r0
 800d602:	9b04      	ldr	r3, [sp, #16]
 800d604:	4303      	orrs	r3, r0
 800d606:	3401      	adds	r4, #1
 800d608:	9304      	str	r3, [sp, #16]
 800d60a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d60e:	4826      	ldr	r0, [pc, #152]	; (800d6a8 <_svfiprintf_r+0x1f0>)
 800d610:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d614:	2206      	movs	r2, #6
 800d616:	f7f2 fde3 	bl	80001e0 <memchr>
 800d61a:	2800      	cmp	r0, #0
 800d61c:	d038      	beq.n	800d690 <_svfiprintf_r+0x1d8>
 800d61e:	4b23      	ldr	r3, [pc, #140]	; (800d6ac <_svfiprintf_r+0x1f4>)
 800d620:	bb1b      	cbnz	r3, 800d66a <_svfiprintf_r+0x1b2>
 800d622:	9b03      	ldr	r3, [sp, #12]
 800d624:	3307      	adds	r3, #7
 800d626:	f023 0307 	bic.w	r3, r3, #7
 800d62a:	3308      	adds	r3, #8
 800d62c:	9303      	str	r3, [sp, #12]
 800d62e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d630:	4433      	add	r3, r6
 800d632:	9309      	str	r3, [sp, #36]	; 0x24
 800d634:	e767      	b.n	800d506 <_svfiprintf_r+0x4e>
 800d636:	fb0c 3202 	mla	r2, ip, r2, r3
 800d63a:	460c      	mov	r4, r1
 800d63c:	2001      	movs	r0, #1
 800d63e:	e7a5      	b.n	800d58c <_svfiprintf_r+0xd4>
 800d640:	2300      	movs	r3, #0
 800d642:	3401      	adds	r4, #1
 800d644:	9305      	str	r3, [sp, #20]
 800d646:	4619      	mov	r1, r3
 800d648:	f04f 0c0a 	mov.w	ip, #10
 800d64c:	4620      	mov	r0, r4
 800d64e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d652:	3a30      	subs	r2, #48	; 0x30
 800d654:	2a09      	cmp	r2, #9
 800d656:	d903      	bls.n	800d660 <_svfiprintf_r+0x1a8>
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d0c5      	beq.n	800d5e8 <_svfiprintf_r+0x130>
 800d65c:	9105      	str	r1, [sp, #20]
 800d65e:	e7c3      	b.n	800d5e8 <_svfiprintf_r+0x130>
 800d660:	fb0c 2101 	mla	r1, ip, r1, r2
 800d664:	4604      	mov	r4, r0
 800d666:	2301      	movs	r3, #1
 800d668:	e7f0      	b.n	800d64c <_svfiprintf_r+0x194>
 800d66a:	ab03      	add	r3, sp, #12
 800d66c:	9300      	str	r3, [sp, #0]
 800d66e:	462a      	mov	r2, r5
 800d670:	4b0f      	ldr	r3, [pc, #60]	; (800d6b0 <_svfiprintf_r+0x1f8>)
 800d672:	a904      	add	r1, sp, #16
 800d674:	4638      	mov	r0, r7
 800d676:	f7fc fa15 	bl	8009aa4 <_printf_float>
 800d67a:	1c42      	adds	r2, r0, #1
 800d67c:	4606      	mov	r6, r0
 800d67e:	d1d6      	bne.n	800d62e <_svfiprintf_r+0x176>
 800d680:	89ab      	ldrh	r3, [r5, #12]
 800d682:	065b      	lsls	r3, r3, #25
 800d684:	f53f af2c 	bmi.w	800d4e0 <_svfiprintf_r+0x28>
 800d688:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d68a:	b01d      	add	sp, #116	; 0x74
 800d68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d690:	ab03      	add	r3, sp, #12
 800d692:	9300      	str	r3, [sp, #0]
 800d694:	462a      	mov	r2, r5
 800d696:	4b06      	ldr	r3, [pc, #24]	; (800d6b0 <_svfiprintf_r+0x1f8>)
 800d698:	a904      	add	r1, sp, #16
 800d69a:	4638      	mov	r0, r7
 800d69c:	f7fc fca6 	bl	8009fec <_printf_i>
 800d6a0:	e7eb      	b.n	800d67a <_svfiprintf_r+0x1c2>
 800d6a2:	bf00      	nop
 800d6a4:	0801d96c 	.word	0x0801d96c
 800d6a8:	0801d976 	.word	0x0801d976
 800d6ac:	08009aa5 	.word	0x08009aa5
 800d6b0:	0800d401 	.word	0x0800d401
 800d6b4:	0801d972 	.word	0x0801d972

0800d6b8 <nan>:
 800d6b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d6c0 <nan+0x8>
 800d6bc:	4770      	bx	lr
 800d6be:	bf00      	nop
 800d6c0:	00000000 	.word	0x00000000
 800d6c4:	7ff80000 	.word	0x7ff80000

0800d6c8 <_sbrk_r>:
 800d6c8:	b538      	push	{r3, r4, r5, lr}
 800d6ca:	4d06      	ldr	r5, [pc, #24]	; (800d6e4 <_sbrk_r+0x1c>)
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	4604      	mov	r4, r0
 800d6d0:	4608      	mov	r0, r1
 800d6d2:	602b      	str	r3, [r5, #0]
 800d6d4:	f7f7 fcbe 	bl	8005054 <_sbrk>
 800d6d8:	1c43      	adds	r3, r0, #1
 800d6da:	d102      	bne.n	800d6e2 <_sbrk_r+0x1a>
 800d6dc:	682b      	ldr	r3, [r5, #0]
 800d6de:	b103      	cbz	r3, 800d6e2 <_sbrk_r+0x1a>
 800d6e0:	6023      	str	r3, [r4, #0]
 800d6e2:	bd38      	pop	{r3, r4, r5, pc}
 800d6e4:	20001140 	.word	0x20001140

0800d6e8 <strncmp>:
 800d6e8:	b510      	push	{r4, lr}
 800d6ea:	b17a      	cbz	r2, 800d70c <strncmp+0x24>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	3901      	subs	r1, #1
 800d6f0:	1884      	adds	r4, r0, r2
 800d6f2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d6f6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d6fa:	4290      	cmp	r0, r2
 800d6fc:	d101      	bne.n	800d702 <strncmp+0x1a>
 800d6fe:	42a3      	cmp	r3, r4
 800d700:	d101      	bne.n	800d706 <strncmp+0x1e>
 800d702:	1a80      	subs	r0, r0, r2
 800d704:	bd10      	pop	{r4, pc}
 800d706:	2800      	cmp	r0, #0
 800d708:	d1f3      	bne.n	800d6f2 <strncmp+0xa>
 800d70a:	e7fa      	b.n	800d702 <strncmp+0x1a>
 800d70c:	4610      	mov	r0, r2
 800d70e:	e7f9      	b.n	800d704 <strncmp+0x1c>

0800d710 <__ascii_wctomb>:
 800d710:	b149      	cbz	r1, 800d726 <__ascii_wctomb+0x16>
 800d712:	2aff      	cmp	r2, #255	; 0xff
 800d714:	bf85      	ittet	hi
 800d716:	238a      	movhi	r3, #138	; 0x8a
 800d718:	6003      	strhi	r3, [r0, #0]
 800d71a:	700a      	strbls	r2, [r1, #0]
 800d71c:	f04f 30ff 	movhi.w	r0, #4294967295
 800d720:	bf98      	it	ls
 800d722:	2001      	movls	r0, #1
 800d724:	4770      	bx	lr
 800d726:	4608      	mov	r0, r1
 800d728:	4770      	bx	lr
	...

0800d72c <__assert_func>:
 800d72c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d72e:	4614      	mov	r4, r2
 800d730:	461a      	mov	r2, r3
 800d732:	4b09      	ldr	r3, [pc, #36]	; (800d758 <__assert_func+0x2c>)
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	4605      	mov	r5, r0
 800d738:	68d8      	ldr	r0, [r3, #12]
 800d73a:	b14c      	cbz	r4, 800d750 <__assert_func+0x24>
 800d73c:	4b07      	ldr	r3, [pc, #28]	; (800d75c <__assert_func+0x30>)
 800d73e:	9100      	str	r1, [sp, #0]
 800d740:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d744:	4906      	ldr	r1, [pc, #24]	; (800d760 <__assert_func+0x34>)
 800d746:	462b      	mov	r3, r5
 800d748:	f000 f80e 	bl	800d768 <fiprintf>
 800d74c:	f000 fa8c 	bl	800dc68 <abort>
 800d750:	4b04      	ldr	r3, [pc, #16]	; (800d764 <__assert_func+0x38>)
 800d752:	461c      	mov	r4, r3
 800d754:	e7f3      	b.n	800d73e <__assert_func+0x12>
 800d756:	bf00      	nop
 800d758:	20000060 	.word	0x20000060
 800d75c:	0801d97d 	.word	0x0801d97d
 800d760:	0801d98a 	.word	0x0801d98a
 800d764:	0801d9b8 	.word	0x0801d9b8

0800d768 <fiprintf>:
 800d768:	b40e      	push	{r1, r2, r3}
 800d76a:	b503      	push	{r0, r1, lr}
 800d76c:	4601      	mov	r1, r0
 800d76e:	ab03      	add	r3, sp, #12
 800d770:	4805      	ldr	r0, [pc, #20]	; (800d788 <fiprintf+0x20>)
 800d772:	f853 2b04 	ldr.w	r2, [r3], #4
 800d776:	6800      	ldr	r0, [r0, #0]
 800d778:	9301      	str	r3, [sp, #4]
 800d77a:	f000 f885 	bl	800d888 <_vfiprintf_r>
 800d77e:	b002      	add	sp, #8
 800d780:	f85d eb04 	ldr.w	lr, [sp], #4
 800d784:	b003      	add	sp, #12
 800d786:	4770      	bx	lr
 800d788:	20000060 	.word	0x20000060

0800d78c <memmove>:
 800d78c:	4288      	cmp	r0, r1
 800d78e:	b510      	push	{r4, lr}
 800d790:	eb01 0402 	add.w	r4, r1, r2
 800d794:	d902      	bls.n	800d79c <memmove+0x10>
 800d796:	4284      	cmp	r4, r0
 800d798:	4623      	mov	r3, r4
 800d79a:	d807      	bhi.n	800d7ac <memmove+0x20>
 800d79c:	1e43      	subs	r3, r0, #1
 800d79e:	42a1      	cmp	r1, r4
 800d7a0:	d008      	beq.n	800d7b4 <memmove+0x28>
 800d7a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d7a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d7aa:	e7f8      	b.n	800d79e <memmove+0x12>
 800d7ac:	4402      	add	r2, r0
 800d7ae:	4601      	mov	r1, r0
 800d7b0:	428a      	cmp	r2, r1
 800d7b2:	d100      	bne.n	800d7b6 <memmove+0x2a>
 800d7b4:	bd10      	pop	{r4, pc}
 800d7b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d7ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d7be:	e7f7      	b.n	800d7b0 <memmove+0x24>

0800d7c0 <__malloc_lock>:
 800d7c0:	4801      	ldr	r0, [pc, #4]	; (800d7c8 <__malloc_lock+0x8>)
 800d7c2:	f000 bc11 	b.w	800dfe8 <__retarget_lock_acquire_recursive>
 800d7c6:	bf00      	nop
 800d7c8:	20001144 	.word	0x20001144

0800d7cc <__malloc_unlock>:
 800d7cc:	4801      	ldr	r0, [pc, #4]	; (800d7d4 <__malloc_unlock+0x8>)
 800d7ce:	f000 bc0c 	b.w	800dfea <__retarget_lock_release_recursive>
 800d7d2:	bf00      	nop
 800d7d4:	20001144 	.word	0x20001144

0800d7d8 <_realloc_r>:
 800d7d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7dc:	4680      	mov	r8, r0
 800d7de:	4614      	mov	r4, r2
 800d7e0:	460e      	mov	r6, r1
 800d7e2:	b921      	cbnz	r1, 800d7ee <_realloc_r+0x16>
 800d7e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d7e8:	4611      	mov	r1, r2
 800d7ea:	f7ff bd95 	b.w	800d318 <_malloc_r>
 800d7ee:	b92a      	cbnz	r2, 800d7fc <_realloc_r+0x24>
 800d7f0:	f7ff fd26 	bl	800d240 <_free_r>
 800d7f4:	4625      	mov	r5, r4
 800d7f6:	4628      	mov	r0, r5
 800d7f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7fc:	f000 fc5c 	bl	800e0b8 <_malloc_usable_size_r>
 800d800:	4284      	cmp	r4, r0
 800d802:	4607      	mov	r7, r0
 800d804:	d802      	bhi.n	800d80c <_realloc_r+0x34>
 800d806:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d80a:	d812      	bhi.n	800d832 <_realloc_r+0x5a>
 800d80c:	4621      	mov	r1, r4
 800d80e:	4640      	mov	r0, r8
 800d810:	f7ff fd82 	bl	800d318 <_malloc_r>
 800d814:	4605      	mov	r5, r0
 800d816:	2800      	cmp	r0, #0
 800d818:	d0ed      	beq.n	800d7f6 <_realloc_r+0x1e>
 800d81a:	42bc      	cmp	r4, r7
 800d81c:	4622      	mov	r2, r4
 800d81e:	4631      	mov	r1, r6
 800d820:	bf28      	it	cs
 800d822:	463a      	movcs	r2, r7
 800d824:	f7fc f888 	bl	8009938 <memcpy>
 800d828:	4631      	mov	r1, r6
 800d82a:	4640      	mov	r0, r8
 800d82c:	f7ff fd08 	bl	800d240 <_free_r>
 800d830:	e7e1      	b.n	800d7f6 <_realloc_r+0x1e>
 800d832:	4635      	mov	r5, r6
 800d834:	e7df      	b.n	800d7f6 <_realloc_r+0x1e>

0800d836 <__sfputc_r>:
 800d836:	6893      	ldr	r3, [r2, #8]
 800d838:	3b01      	subs	r3, #1
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	b410      	push	{r4}
 800d83e:	6093      	str	r3, [r2, #8]
 800d840:	da08      	bge.n	800d854 <__sfputc_r+0x1e>
 800d842:	6994      	ldr	r4, [r2, #24]
 800d844:	42a3      	cmp	r3, r4
 800d846:	db01      	blt.n	800d84c <__sfputc_r+0x16>
 800d848:	290a      	cmp	r1, #10
 800d84a:	d103      	bne.n	800d854 <__sfputc_r+0x1e>
 800d84c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d850:	f000 b94a 	b.w	800dae8 <__swbuf_r>
 800d854:	6813      	ldr	r3, [r2, #0]
 800d856:	1c58      	adds	r0, r3, #1
 800d858:	6010      	str	r0, [r2, #0]
 800d85a:	7019      	strb	r1, [r3, #0]
 800d85c:	4608      	mov	r0, r1
 800d85e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d862:	4770      	bx	lr

0800d864 <__sfputs_r>:
 800d864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d866:	4606      	mov	r6, r0
 800d868:	460f      	mov	r7, r1
 800d86a:	4614      	mov	r4, r2
 800d86c:	18d5      	adds	r5, r2, r3
 800d86e:	42ac      	cmp	r4, r5
 800d870:	d101      	bne.n	800d876 <__sfputs_r+0x12>
 800d872:	2000      	movs	r0, #0
 800d874:	e007      	b.n	800d886 <__sfputs_r+0x22>
 800d876:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d87a:	463a      	mov	r2, r7
 800d87c:	4630      	mov	r0, r6
 800d87e:	f7ff ffda 	bl	800d836 <__sfputc_r>
 800d882:	1c43      	adds	r3, r0, #1
 800d884:	d1f3      	bne.n	800d86e <__sfputs_r+0xa>
 800d886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d888 <_vfiprintf_r>:
 800d888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d88c:	460d      	mov	r5, r1
 800d88e:	b09d      	sub	sp, #116	; 0x74
 800d890:	4614      	mov	r4, r2
 800d892:	4698      	mov	r8, r3
 800d894:	4606      	mov	r6, r0
 800d896:	b118      	cbz	r0, 800d8a0 <_vfiprintf_r+0x18>
 800d898:	6983      	ldr	r3, [r0, #24]
 800d89a:	b90b      	cbnz	r3, 800d8a0 <_vfiprintf_r+0x18>
 800d89c:	f000 fb06 	bl	800deac <__sinit>
 800d8a0:	4b89      	ldr	r3, [pc, #548]	; (800dac8 <_vfiprintf_r+0x240>)
 800d8a2:	429d      	cmp	r5, r3
 800d8a4:	d11b      	bne.n	800d8de <_vfiprintf_r+0x56>
 800d8a6:	6875      	ldr	r5, [r6, #4]
 800d8a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d8aa:	07d9      	lsls	r1, r3, #31
 800d8ac:	d405      	bmi.n	800d8ba <_vfiprintf_r+0x32>
 800d8ae:	89ab      	ldrh	r3, [r5, #12]
 800d8b0:	059a      	lsls	r2, r3, #22
 800d8b2:	d402      	bmi.n	800d8ba <_vfiprintf_r+0x32>
 800d8b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d8b6:	f000 fb97 	bl	800dfe8 <__retarget_lock_acquire_recursive>
 800d8ba:	89ab      	ldrh	r3, [r5, #12]
 800d8bc:	071b      	lsls	r3, r3, #28
 800d8be:	d501      	bpl.n	800d8c4 <_vfiprintf_r+0x3c>
 800d8c0:	692b      	ldr	r3, [r5, #16]
 800d8c2:	b9eb      	cbnz	r3, 800d900 <_vfiprintf_r+0x78>
 800d8c4:	4629      	mov	r1, r5
 800d8c6:	4630      	mov	r0, r6
 800d8c8:	f000 f960 	bl	800db8c <__swsetup_r>
 800d8cc:	b1c0      	cbz	r0, 800d900 <_vfiprintf_r+0x78>
 800d8ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d8d0:	07dc      	lsls	r4, r3, #31
 800d8d2:	d50e      	bpl.n	800d8f2 <_vfiprintf_r+0x6a>
 800d8d4:	f04f 30ff 	mov.w	r0, #4294967295
 800d8d8:	b01d      	add	sp, #116	; 0x74
 800d8da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8de:	4b7b      	ldr	r3, [pc, #492]	; (800dacc <_vfiprintf_r+0x244>)
 800d8e0:	429d      	cmp	r5, r3
 800d8e2:	d101      	bne.n	800d8e8 <_vfiprintf_r+0x60>
 800d8e4:	68b5      	ldr	r5, [r6, #8]
 800d8e6:	e7df      	b.n	800d8a8 <_vfiprintf_r+0x20>
 800d8e8:	4b79      	ldr	r3, [pc, #484]	; (800dad0 <_vfiprintf_r+0x248>)
 800d8ea:	429d      	cmp	r5, r3
 800d8ec:	bf08      	it	eq
 800d8ee:	68f5      	ldreq	r5, [r6, #12]
 800d8f0:	e7da      	b.n	800d8a8 <_vfiprintf_r+0x20>
 800d8f2:	89ab      	ldrh	r3, [r5, #12]
 800d8f4:	0598      	lsls	r0, r3, #22
 800d8f6:	d4ed      	bmi.n	800d8d4 <_vfiprintf_r+0x4c>
 800d8f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d8fa:	f000 fb76 	bl	800dfea <__retarget_lock_release_recursive>
 800d8fe:	e7e9      	b.n	800d8d4 <_vfiprintf_r+0x4c>
 800d900:	2300      	movs	r3, #0
 800d902:	9309      	str	r3, [sp, #36]	; 0x24
 800d904:	2320      	movs	r3, #32
 800d906:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d90a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d90e:	2330      	movs	r3, #48	; 0x30
 800d910:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dad4 <_vfiprintf_r+0x24c>
 800d914:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d918:	f04f 0901 	mov.w	r9, #1
 800d91c:	4623      	mov	r3, r4
 800d91e:	469a      	mov	sl, r3
 800d920:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d924:	b10a      	cbz	r2, 800d92a <_vfiprintf_r+0xa2>
 800d926:	2a25      	cmp	r2, #37	; 0x25
 800d928:	d1f9      	bne.n	800d91e <_vfiprintf_r+0x96>
 800d92a:	ebba 0b04 	subs.w	fp, sl, r4
 800d92e:	d00b      	beq.n	800d948 <_vfiprintf_r+0xc0>
 800d930:	465b      	mov	r3, fp
 800d932:	4622      	mov	r2, r4
 800d934:	4629      	mov	r1, r5
 800d936:	4630      	mov	r0, r6
 800d938:	f7ff ff94 	bl	800d864 <__sfputs_r>
 800d93c:	3001      	adds	r0, #1
 800d93e:	f000 80aa 	beq.w	800da96 <_vfiprintf_r+0x20e>
 800d942:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d944:	445a      	add	r2, fp
 800d946:	9209      	str	r2, [sp, #36]	; 0x24
 800d948:	f89a 3000 	ldrb.w	r3, [sl]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	f000 80a2 	beq.w	800da96 <_vfiprintf_r+0x20e>
 800d952:	2300      	movs	r3, #0
 800d954:	f04f 32ff 	mov.w	r2, #4294967295
 800d958:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d95c:	f10a 0a01 	add.w	sl, sl, #1
 800d960:	9304      	str	r3, [sp, #16]
 800d962:	9307      	str	r3, [sp, #28]
 800d964:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d968:	931a      	str	r3, [sp, #104]	; 0x68
 800d96a:	4654      	mov	r4, sl
 800d96c:	2205      	movs	r2, #5
 800d96e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d972:	4858      	ldr	r0, [pc, #352]	; (800dad4 <_vfiprintf_r+0x24c>)
 800d974:	f7f2 fc34 	bl	80001e0 <memchr>
 800d978:	9a04      	ldr	r2, [sp, #16]
 800d97a:	b9d8      	cbnz	r0, 800d9b4 <_vfiprintf_r+0x12c>
 800d97c:	06d1      	lsls	r1, r2, #27
 800d97e:	bf44      	itt	mi
 800d980:	2320      	movmi	r3, #32
 800d982:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d986:	0713      	lsls	r3, r2, #28
 800d988:	bf44      	itt	mi
 800d98a:	232b      	movmi	r3, #43	; 0x2b
 800d98c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d990:	f89a 3000 	ldrb.w	r3, [sl]
 800d994:	2b2a      	cmp	r3, #42	; 0x2a
 800d996:	d015      	beq.n	800d9c4 <_vfiprintf_r+0x13c>
 800d998:	9a07      	ldr	r2, [sp, #28]
 800d99a:	4654      	mov	r4, sl
 800d99c:	2000      	movs	r0, #0
 800d99e:	f04f 0c0a 	mov.w	ip, #10
 800d9a2:	4621      	mov	r1, r4
 800d9a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d9a8:	3b30      	subs	r3, #48	; 0x30
 800d9aa:	2b09      	cmp	r3, #9
 800d9ac:	d94e      	bls.n	800da4c <_vfiprintf_r+0x1c4>
 800d9ae:	b1b0      	cbz	r0, 800d9de <_vfiprintf_r+0x156>
 800d9b0:	9207      	str	r2, [sp, #28]
 800d9b2:	e014      	b.n	800d9de <_vfiprintf_r+0x156>
 800d9b4:	eba0 0308 	sub.w	r3, r0, r8
 800d9b8:	fa09 f303 	lsl.w	r3, r9, r3
 800d9bc:	4313      	orrs	r3, r2
 800d9be:	9304      	str	r3, [sp, #16]
 800d9c0:	46a2      	mov	sl, r4
 800d9c2:	e7d2      	b.n	800d96a <_vfiprintf_r+0xe2>
 800d9c4:	9b03      	ldr	r3, [sp, #12]
 800d9c6:	1d19      	adds	r1, r3, #4
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	9103      	str	r1, [sp, #12]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	bfbb      	ittet	lt
 800d9d0:	425b      	neglt	r3, r3
 800d9d2:	f042 0202 	orrlt.w	r2, r2, #2
 800d9d6:	9307      	strge	r3, [sp, #28]
 800d9d8:	9307      	strlt	r3, [sp, #28]
 800d9da:	bfb8      	it	lt
 800d9dc:	9204      	strlt	r2, [sp, #16]
 800d9de:	7823      	ldrb	r3, [r4, #0]
 800d9e0:	2b2e      	cmp	r3, #46	; 0x2e
 800d9e2:	d10c      	bne.n	800d9fe <_vfiprintf_r+0x176>
 800d9e4:	7863      	ldrb	r3, [r4, #1]
 800d9e6:	2b2a      	cmp	r3, #42	; 0x2a
 800d9e8:	d135      	bne.n	800da56 <_vfiprintf_r+0x1ce>
 800d9ea:	9b03      	ldr	r3, [sp, #12]
 800d9ec:	1d1a      	adds	r2, r3, #4
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	9203      	str	r2, [sp, #12]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	bfb8      	it	lt
 800d9f6:	f04f 33ff 	movlt.w	r3, #4294967295
 800d9fa:	3402      	adds	r4, #2
 800d9fc:	9305      	str	r3, [sp, #20]
 800d9fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dae4 <_vfiprintf_r+0x25c>
 800da02:	7821      	ldrb	r1, [r4, #0]
 800da04:	2203      	movs	r2, #3
 800da06:	4650      	mov	r0, sl
 800da08:	f7f2 fbea 	bl	80001e0 <memchr>
 800da0c:	b140      	cbz	r0, 800da20 <_vfiprintf_r+0x198>
 800da0e:	2340      	movs	r3, #64	; 0x40
 800da10:	eba0 000a 	sub.w	r0, r0, sl
 800da14:	fa03 f000 	lsl.w	r0, r3, r0
 800da18:	9b04      	ldr	r3, [sp, #16]
 800da1a:	4303      	orrs	r3, r0
 800da1c:	3401      	adds	r4, #1
 800da1e:	9304      	str	r3, [sp, #16]
 800da20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da24:	482c      	ldr	r0, [pc, #176]	; (800dad8 <_vfiprintf_r+0x250>)
 800da26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800da2a:	2206      	movs	r2, #6
 800da2c:	f7f2 fbd8 	bl	80001e0 <memchr>
 800da30:	2800      	cmp	r0, #0
 800da32:	d03f      	beq.n	800dab4 <_vfiprintf_r+0x22c>
 800da34:	4b29      	ldr	r3, [pc, #164]	; (800dadc <_vfiprintf_r+0x254>)
 800da36:	bb1b      	cbnz	r3, 800da80 <_vfiprintf_r+0x1f8>
 800da38:	9b03      	ldr	r3, [sp, #12]
 800da3a:	3307      	adds	r3, #7
 800da3c:	f023 0307 	bic.w	r3, r3, #7
 800da40:	3308      	adds	r3, #8
 800da42:	9303      	str	r3, [sp, #12]
 800da44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da46:	443b      	add	r3, r7
 800da48:	9309      	str	r3, [sp, #36]	; 0x24
 800da4a:	e767      	b.n	800d91c <_vfiprintf_r+0x94>
 800da4c:	fb0c 3202 	mla	r2, ip, r2, r3
 800da50:	460c      	mov	r4, r1
 800da52:	2001      	movs	r0, #1
 800da54:	e7a5      	b.n	800d9a2 <_vfiprintf_r+0x11a>
 800da56:	2300      	movs	r3, #0
 800da58:	3401      	adds	r4, #1
 800da5a:	9305      	str	r3, [sp, #20]
 800da5c:	4619      	mov	r1, r3
 800da5e:	f04f 0c0a 	mov.w	ip, #10
 800da62:	4620      	mov	r0, r4
 800da64:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da68:	3a30      	subs	r2, #48	; 0x30
 800da6a:	2a09      	cmp	r2, #9
 800da6c:	d903      	bls.n	800da76 <_vfiprintf_r+0x1ee>
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d0c5      	beq.n	800d9fe <_vfiprintf_r+0x176>
 800da72:	9105      	str	r1, [sp, #20]
 800da74:	e7c3      	b.n	800d9fe <_vfiprintf_r+0x176>
 800da76:	fb0c 2101 	mla	r1, ip, r1, r2
 800da7a:	4604      	mov	r4, r0
 800da7c:	2301      	movs	r3, #1
 800da7e:	e7f0      	b.n	800da62 <_vfiprintf_r+0x1da>
 800da80:	ab03      	add	r3, sp, #12
 800da82:	9300      	str	r3, [sp, #0]
 800da84:	462a      	mov	r2, r5
 800da86:	4b16      	ldr	r3, [pc, #88]	; (800dae0 <_vfiprintf_r+0x258>)
 800da88:	a904      	add	r1, sp, #16
 800da8a:	4630      	mov	r0, r6
 800da8c:	f7fc f80a 	bl	8009aa4 <_printf_float>
 800da90:	4607      	mov	r7, r0
 800da92:	1c78      	adds	r0, r7, #1
 800da94:	d1d6      	bne.n	800da44 <_vfiprintf_r+0x1bc>
 800da96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da98:	07d9      	lsls	r1, r3, #31
 800da9a:	d405      	bmi.n	800daa8 <_vfiprintf_r+0x220>
 800da9c:	89ab      	ldrh	r3, [r5, #12]
 800da9e:	059a      	lsls	r2, r3, #22
 800daa0:	d402      	bmi.n	800daa8 <_vfiprintf_r+0x220>
 800daa2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800daa4:	f000 faa1 	bl	800dfea <__retarget_lock_release_recursive>
 800daa8:	89ab      	ldrh	r3, [r5, #12]
 800daaa:	065b      	lsls	r3, r3, #25
 800daac:	f53f af12 	bmi.w	800d8d4 <_vfiprintf_r+0x4c>
 800dab0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dab2:	e711      	b.n	800d8d8 <_vfiprintf_r+0x50>
 800dab4:	ab03      	add	r3, sp, #12
 800dab6:	9300      	str	r3, [sp, #0]
 800dab8:	462a      	mov	r2, r5
 800daba:	4b09      	ldr	r3, [pc, #36]	; (800dae0 <_vfiprintf_r+0x258>)
 800dabc:	a904      	add	r1, sp, #16
 800dabe:	4630      	mov	r0, r6
 800dac0:	f7fc fa94 	bl	8009fec <_printf_i>
 800dac4:	e7e4      	b.n	800da90 <_vfiprintf_r+0x208>
 800dac6:	bf00      	nop
 800dac8:	0801d9dc 	.word	0x0801d9dc
 800dacc:	0801d9fc 	.word	0x0801d9fc
 800dad0:	0801d9bc 	.word	0x0801d9bc
 800dad4:	0801d96c 	.word	0x0801d96c
 800dad8:	0801d976 	.word	0x0801d976
 800dadc:	08009aa5 	.word	0x08009aa5
 800dae0:	0800d865 	.word	0x0800d865
 800dae4:	0801d972 	.word	0x0801d972

0800dae8 <__swbuf_r>:
 800dae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daea:	460e      	mov	r6, r1
 800daec:	4614      	mov	r4, r2
 800daee:	4605      	mov	r5, r0
 800daf0:	b118      	cbz	r0, 800dafa <__swbuf_r+0x12>
 800daf2:	6983      	ldr	r3, [r0, #24]
 800daf4:	b90b      	cbnz	r3, 800dafa <__swbuf_r+0x12>
 800daf6:	f000 f9d9 	bl	800deac <__sinit>
 800dafa:	4b21      	ldr	r3, [pc, #132]	; (800db80 <__swbuf_r+0x98>)
 800dafc:	429c      	cmp	r4, r3
 800dafe:	d12b      	bne.n	800db58 <__swbuf_r+0x70>
 800db00:	686c      	ldr	r4, [r5, #4]
 800db02:	69a3      	ldr	r3, [r4, #24]
 800db04:	60a3      	str	r3, [r4, #8]
 800db06:	89a3      	ldrh	r3, [r4, #12]
 800db08:	071a      	lsls	r2, r3, #28
 800db0a:	d52f      	bpl.n	800db6c <__swbuf_r+0x84>
 800db0c:	6923      	ldr	r3, [r4, #16]
 800db0e:	b36b      	cbz	r3, 800db6c <__swbuf_r+0x84>
 800db10:	6923      	ldr	r3, [r4, #16]
 800db12:	6820      	ldr	r0, [r4, #0]
 800db14:	1ac0      	subs	r0, r0, r3
 800db16:	6963      	ldr	r3, [r4, #20]
 800db18:	b2f6      	uxtb	r6, r6
 800db1a:	4283      	cmp	r3, r0
 800db1c:	4637      	mov	r7, r6
 800db1e:	dc04      	bgt.n	800db2a <__swbuf_r+0x42>
 800db20:	4621      	mov	r1, r4
 800db22:	4628      	mov	r0, r5
 800db24:	f000 f92e 	bl	800dd84 <_fflush_r>
 800db28:	bb30      	cbnz	r0, 800db78 <__swbuf_r+0x90>
 800db2a:	68a3      	ldr	r3, [r4, #8]
 800db2c:	3b01      	subs	r3, #1
 800db2e:	60a3      	str	r3, [r4, #8]
 800db30:	6823      	ldr	r3, [r4, #0]
 800db32:	1c5a      	adds	r2, r3, #1
 800db34:	6022      	str	r2, [r4, #0]
 800db36:	701e      	strb	r6, [r3, #0]
 800db38:	6963      	ldr	r3, [r4, #20]
 800db3a:	3001      	adds	r0, #1
 800db3c:	4283      	cmp	r3, r0
 800db3e:	d004      	beq.n	800db4a <__swbuf_r+0x62>
 800db40:	89a3      	ldrh	r3, [r4, #12]
 800db42:	07db      	lsls	r3, r3, #31
 800db44:	d506      	bpl.n	800db54 <__swbuf_r+0x6c>
 800db46:	2e0a      	cmp	r6, #10
 800db48:	d104      	bne.n	800db54 <__swbuf_r+0x6c>
 800db4a:	4621      	mov	r1, r4
 800db4c:	4628      	mov	r0, r5
 800db4e:	f000 f919 	bl	800dd84 <_fflush_r>
 800db52:	b988      	cbnz	r0, 800db78 <__swbuf_r+0x90>
 800db54:	4638      	mov	r0, r7
 800db56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db58:	4b0a      	ldr	r3, [pc, #40]	; (800db84 <__swbuf_r+0x9c>)
 800db5a:	429c      	cmp	r4, r3
 800db5c:	d101      	bne.n	800db62 <__swbuf_r+0x7a>
 800db5e:	68ac      	ldr	r4, [r5, #8]
 800db60:	e7cf      	b.n	800db02 <__swbuf_r+0x1a>
 800db62:	4b09      	ldr	r3, [pc, #36]	; (800db88 <__swbuf_r+0xa0>)
 800db64:	429c      	cmp	r4, r3
 800db66:	bf08      	it	eq
 800db68:	68ec      	ldreq	r4, [r5, #12]
 800db6a:	e7ca      	b.n	800db02 <__swbuf_r+0x1a>
 800db6c:	4621      	mov	r1, r4
 800db6e:	4628      	mov	r0, r5
 800db70:	f000 f80c 	bl	800db8c <__swsetup_r>
 800db74:	2800      	cmp	r0, #0
 800db76:	d0cb      	beq.n	800db10 <__swbuf_r+0x28>
 800db78:	f04f 37ff 	mov.w	r7, #4294967295
 800db7c:	e7ea      	b.n	800db54 <__swbuf_r+0x6c>
 800db7e:	bf00      	nop
 800db80:	0801d9dc 	.word	0x0801d9dc
 800db84:	0801d9fc 	.word	0x0801d9fc
 800db88:	0801d9bc 	.word	0x0801d9bc

0800db8c <__swsetup_r>:
 800db8c:	4b32      	ldr	r3, [pc, #200]	; (800dc58 <__swsetup_r+0xcc>)
 800db8e:	b570      	push	{r4, r5, r6, lr}
 800db90:	681d      	ldr	r5, [r3, #0]
 800db92:	4606      	mov	r6, r0
 800db94:	460c      	mov	r4, r1
 800db96:	b125      	cbz	r5, 800dba2 <__swsetup_r+0x16>
 800db98:	69ab      	ldr	r3, [r5, #24]
 800db9a:	b913      	cbnz	r3, 800dba2 <__swsetup_r+0x16>
 800db9c:	4628      	mov	r0, r5
 800db9e:	f000 f985 	bl	800deac <__sinit>
 800dba2:	4b2e      	ldr	r3, [pc, #184]	; (800dc5c <__swsetup_r+0xd0>)
 800dba4:	429c      	cmp	r4, r3
 800dba6:	d10f      	bne.n	800dbc8 <__swsetup_r+0x3c>
 800dba8:	686c      	ldr	r4, [r5, #4]
 800dbaa:	89a3      	ldrh	r3, [r4, #12]
 800dbac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dbb0:	0719      	lsls	r1, r3, #28
 800dbb2:	d42c      	bmi.n	800dc0e <__swsetup_r+0x82>
 800dbb4:	06dd      	lsls	r5, r3, #27
 800dbb6:	d411      	bmi.n	800dbdc <__swsetup_r+0x50>
 800dbb8:	2309      	movs	r3, #9
 800dbba:	6033      	str	r3, [r6, #0]
 800dbbc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dbc0:	81a3      	strh	r3, [r4, #12]
 800dbc2:	f04f 30ff 	mov.w	r0, #4294967295
 800dbc6:	e03e      	b.n	800dc46 <__swsetup_r+0xba>
 800dbc8:	4b25      	ldr	r3, [pc, #148]	; (800dc60 <__swsetup_r+0xd4>)
 800dbca:	429c      	cmp	r4, r3
 800dbcc:	d101      	bne.n	800dbd2 <__swsetup_r+0x46>
 800dbce:	68ac      	ldr	r4, [r5, #8]
 800dbd0:	e7eb      	b.n	800dbaa <__swsetup_r+0x1e>
 800dbd2:	4b24      	ldr	r3, [pc, #144]	; (800dc64 <__swsetup_r+0xd8>)
 800dbd4:	429c      	cmp	r4, r3
 800dbd6:	bf08      	it	eq
 800dbd8:	68ec      	ldreq	r4, [r5, #12]
 800dbda:	e7e6      	b.n	800dbaa <__swsetup_r+0x1e>
 800dbdc:	0758      	lsls	r0, r3, #29
 800dbde:	d512      	bpl.n	800dc06 <__swsetup_r+0x7a>
 800dbe0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dbe2:	b141      	cbz	r1, 800dbf6 <__swsetup_r+0x6a>
 800dbe4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dbe8:	4299      	cmp	r1, r3
 800dbea:	d002      	beq.n	800dbf2 <__swsetup_r+0x66>
 800dbec:	4630      	mov	r0, r6
 800dbee:	f7ff fb27 	bl	800d240 <_free_r>
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	6363      	str	r3, [r4, #52]	; 0x34
 800dbf6:	89a3      	ldrh	r3, [r4, #12]
 800dbf8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dbfc:	81a3      	strh	r3, [r4, #12]
 800dbfe:	2300      	movs	r3, #0
 800dc00:	6063      	str	r3, [r4, #4]
 800dc02:	6923      	ldr	r3, [r4, #16]
 800dc04:	6023      	str	r3, [r4, #0]
 800dc06:	89a3      	ldrh	r3, [r4, #12]
 800dc08:	f043 0308 	orr.w	r3, r3, #8
 800dc0c:	81a3      	strh	r3, [r4, #12]
 800dc0e:	6923      	ldr	r3, [r4, #16]
 800dc10:	b94b      	cbnz	r3, 800dc26 <__swsetup_r+0x9a>
 800dc12:	89a3      	ldrh	r3, [r4, #12]
 800dc14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dc18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dc1c:	d003      	beq.n	800dc26 <__swsetup_r+0x9a>
 800dc1e:	4621      	mov	r1, r4
 800dc20:	4630      	mov	r0, r6
 800dc22:	f000 fa09 	bl	800e038 <__smakebuf_r>
 800dc26:	89a0      	ldrh	r0, [r4, #12]
 800dc28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dc2c:	f010 0301 	ands.w	r3, r0, #1
 800dc30:	d00a      	beq.n	800dc48 <__swsetup_r+0xbc>
 800dc32:	2300      	movs	r3, #0
 800dc34:	60a3      	str	r3, [r4, #8]
 800dc36:	6963      	ldr	r3, [r4, #20]
 800dc38:	425b      	negs	r3, r3
 800dc3a:	61a3      	str	r3, [r4, #24]
 800dc3c:	6923      	ldr	r3, [r4, #16]
 800dc3e:	b943      	cbnz	r3, 800dc52 <__swsetup_r+0xc6>
 800dc40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dc44:	d1ba      	bne.n	800dbbc <__swsetup_r+0x30>
 800dc46:	bd70      	pop	{r4, r5, r6, pc}
 800dc48:	0781      	lsls	r1, r0, #30
 800dc4a:	bf58      	it	pl
 800dc4c:	6963      	ldrpl	r3, [r4, #20]
 800dc4e:	60a3      	str	r3, [r4, #8]
 800dc50:	e7f4      	b.n	800dc3c <__swsetup_r+0xb0>
 800dc52:	2000      	movs	r0, #0
 800dc54:	e7f7      	b.n	800dc46 <__swsetup_r+0xba>
 800dc56:	bf00      	nop
 800dc58:	20000060 	.word	0x20000060
 800dc5c:	0801d9dc 	.word	0x0801d9dc
 800dc60:	0801d9fc 	.word	0x0801d9fc
 800dc64:	0801d9bc 	.word	0x0801d9bc

0800dc68 <abort>:
 800dc68:	b508      	push	{r3, lr}
 800dc6a:	2006      	movs	r0, #6
 800dc6c:	f000 fa54 	bl	800e118 <raise>
 800dc70:	2001      	movs	r0, #1
 800dc72:	f7f7 f977 	bl	8004f64 <_exit>
	...

0800dc78 <__sflush_r>:
 800dc78:	898a      	ldrh	r2, [r1, #12]
 800dc7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc7e:	4605      	mov	r5, r0
 800dc80:	0710      	lsls	r0, r2, #28
 800dc82:	460c      	mov	r4, r1
 800dc84:	d458      	bmi.n	800dd38 <__sflush_r+0xc0>
 800dc86:	684b      	ldr	r3, [r1, #4]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	dc05      	bgt.n	800dc98 <__sflush_r+0x20>
 800dc8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	dc02      	bgt.n	800dc98 <__sflush_r+0x20>
 800dc92:	2000      	movs	r0, #0
 800dc94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc9a:	2e00      	cmp	r6, #0
 800dc9c:	d0f9      	beq.n	800dc92 <__sflush_r+0x1a>
 800dc9e:	2300      	movs	r3, #0
 800dca0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dca4:	682f      	ldr	r7, [r5, #0]
 800dca6:	602b      	str	r3, [r5, #0]
 800dca8:	d032      	beq.n	800dd10 <__sflush_r+0x98>
 800dcaa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dcac:	89a3      	ldrh	r3, [r4, #12]
 800dcae:	075a      	lsls	r2, r3, #29
 800dcb0:	d505      	bpl.n	800dcbe <__sflush_r+0x46>
 800dcb2:	6863      	ldr	r3, [r4, #4]
 800dcb4:	1ac0      	subs	r0, r0, r3
 800dcb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dcb8:	b10b      	cbz	r3, 800dcbe <__sflush_r+0x46>
 800dcba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dcbc:	1ac0      	subs	r0, r0, r3
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	4602      	mov	r2, r0
 800dcc2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dcc4:	6a21      	ldr	r1, [r4, #32]
 800dcc6:	4628      	mov	r0, r5
 800dcc8:	47b0      	blx	r6
 800dcca:	1c43      	adds	r3, r0, #1
 800dccc:	89a3      	ldrh	r3, [r4, #12]
 800dcce:	d106      	bne.n	800dcde <__sflush_r+0x66>
 800dcd0:	6829      	ldr	r1, [r5, #0]
 800dcd2:	291d      	cmp	r1, #29
 800dcd4:	d82c      	bhi.n	800dd30 <__sflush_r+0xb8>
 800dcd6:	4a2a      	ldr	r2, [pc, #168]	; (800dd80 <__sflush_r+0x108>)
 800dcd8:	40ca      	lsrs	r2, r1
 800dcda:	07d6      	lsls	r6, r2, #31
 800dcdc:	d528      	bpl.n	800dd30 <__sflush_r+0xb8>
 800dcde:	2200      	movs	r2, #0
 800dce0:	6062      	str	r2, [r4, #4]
 800dce2:	04d9      	lsls	r1, r3, #19
 800dce4:	6922      	ldr	r2, [r4, #16]
 800dce6:	6022      	str	r2, [r4, #0]
 800dce8:	d504      	bpl.n	800dcf4 <__sflush_r+0x7c>
 800dcea:	1c42      	adds	r2, r0, #1
 800dcec:	d101      	bne.n	800dcf2 <__sflush_r+0x7a>
 800dcee:	682b      	ldr	r3, [r5, #0]
 800dcf0:	b903      	cbnz	r3, 800dcf4 <__sflush_r+0x7c>
 800dcf2:	6560      	str	r0, [r4, #84]	; 0x54
 800dcf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dcf6:	602f      	str	r7, [r5, #0]
 800dcf8:	2900      	cmp	r1, #0
 800dcfa:	d0ca      	beq.n	800dc92 <__sflush_r+0x1a>
 800dcfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dd00:	4299      	cmp	r1, r3
 800dd02:	d002      	beq.n	800dd0a <__sflush_r+0x92>
 800dd04:	4628      	mov	r0, r5
 800dd06:	f7ff fa9b 	bl	800d240 <_free_r>
 800dd0a:	2000      	movs	r0, #0
 800dd0c:	6360      	str	r0, [r4, #52]	; 0x34
 800dd0e:	e7c1      	b.n	800dc94 <__sflush_r+0x1c>
 800dd10:	6a21      	ldr	r1, [r4, #32]
 800dd12:	2301      	movs	r3, #1
 800dd14:	4628      	mov	r0, r5
 800dd16:	47b0      	blx	r6
 800dd18:	1c41      	adds	r1, r0, #1
 800dd1a:	d1c7      	bne.n	800dcac <__sflush_r+0x34>
 800dd1c:	682b      	ldr	r3, [r5, #0]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d0c4      	beq.n	800dcac <__sflush_r+0x34>
 800dd22:	2b1d      	cmp	r3, #29
 800dd24:	d001      	beq.n	800dd2a <__sflush_r+0xb2>
 800dd26:	2b16      	cmp	r3, #22
 800dd28:	d101      	bne.n	800dd2e <__sflush_r+0xb6>
 800dd2a:	602f      	str	r7, [r5, #0]
 800dd2c:	e7b1      	b.n	800dc92 <__sflush_r+0x1a>
 800dd2e:	89a3      	ldrh	r3, [r4, #12]
 800dd30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd34:	81a3      	strh	r3, [r4, #12]
 800dd36:	e7ad      	b.n	800dc94 <__sflush_r+0x1c>
 800dd38:	690f      	ldr	r7, [r1, #16]
 800dd3a:	2f00      	cmp	r7, #0
 800dd3c:	d0a9      	beq.n	800dc92 <__sflush_r+0x1a>
 800dd3e:	0793      	lsls	r3, r2, #30
 800dd40:	680e      	ldr	r6, [r1, #0]
 800dd42:	bf08      	it	eq
 800dd44:	694b      	ldreq	r3, [r1, #20]
 800dd46:	600f      	str	r7, [r1, #0]
 800dd48:	bf18      	it	ne
 800dd4a:	2300      	movne	r3, #0
 800dd4c:	eba6 0807 	sub.w	r8, r6, r7
 800dd50:	608b      	str	r3, [r1, #8]
 800dd52:	f1b8 0f00 	cmp.w	r8, #0
 800dd56:	dd9c      	ble.n	800dc92 <__sflush_r+0x1a>
 800dd58:	6a21      	ldr	r1, [r4, #32]
 800dd5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dd5c:	4643      	mov	r3, r8
 800dd5e:	463a      	mov	r2, r7
 800dd60:	4628      	mov	r0, r5
 800dd62:	47b0      	blx	r6
 800dd64:	2800      	cmp	r0, #0
 800dd66:	dc06      	bgt.n	800dd76 <__sflush_r+0xfe>
 800dd68:	89a3      	ldrh	r3, [r4, #12]
 800dd6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd6e:	81a3      	strh	r3, [r4, #12]
 800dd70:	f04f 30ff 	mov.w	r0, #4294967295
 800dd74:	e78e      	b.n	800dc94 <__sflush_r+0x1c>
 800dd76:	4407      	add	r7, r0
 800dd78:	eba8 0800 	sub.w	r8, r8, r0
 800dd7c:	e7e9      	b.n	800dd52 <__sflush_r+0xda>
 800dd7e:	bf00      	nop
 800dd80:	20400001 	.word	0x20400001

0800dd84 <_fflush_r>:
 800dd84:	b538      	push	{r3, r4, r5, lr}
 800dd86:	690b      	ldr	r3, [r1, #16]
 800dd88:	4605      	mov	r5, r0
 800dd8a:	460c      	mov	r4, r1
 800dd8c:	b913      	cbnz	r3, 800dd94 <_fflush_r+0x10>
 800dd8e:	2500      	movs	r5, #0
 800dd90:	4628      	mov	r0, r5
 800dd92:	bd38      	pop	{r3, r4, r5, pc}
 800dd94:	b118      	cbz	r0, 800dd9e <_fflush_r+0x1a>
 800dd96:	6983      	ldr	r3, [r0, #24]
 800dd98:	b90b      	cbnz	r3, 800dd9e <_fflush_r+0x1a>
 800dd9a:	f000 f887 	bl	800deac <__sinit>
 800dd9e:	4b14      	ldr	r3, [pc, #80]	; (800ddf0 <_fflush_r+0x6c>)
 800dda0:	429c      	cmp	r4, r3
 800dda2:	d11b      	bne.n	800dddc <_fflush_r+0x58>
 800dda4:	686c      	ldr	r4, [r5, #4]
 800dda6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d0ef      	beq.n	800dd8e <_fflush_r+0xa>
 800ddae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ddb0:	07d0      	lsls	r0, r2, #31
 800ddb2:	d404      	bmi.n	800ddbe <_fflush_r+0x3a>
 800ddb4:	0599      	lsls	r1, r3, #22
 800ddb6:	d402      	bmi.n	800ddbe <_fflush_r+0x3a>
 800ddb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ddba:	f000 f915 	bl	800dfe8 <__retarget_lock_acquire_recursive>
 800ddbe:	4628      	mov	r0, r5
 800ddc0:	4621      	mov	r1, r4
 800ddc2:	f7ff ff59 	bl	800dc78 <__sflush_r>
 800ddc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ddc8:	07da      	lsls	r2, r3, #31
 800ddca:	4605      	mov	r5, r0
 800ddcc:	d4e0      	bmi.n	800dd90 <_fflush_r+0xc>
 800ddce:	89a3      	ldrh	r3, [r4, #12]
 800ddd0:	059b      	lsls	r3, r3, #22
 800ddd2:	d4dd      	bmi.n	800dd90 <_fflush_r+0xc>
 800ddd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ddd6:	f000 f908 	bl	800dfea <__retarget_lock_release_recursive>
 800ddda:	e7d9      	b.n	800dd90 <_fflush_r+0xc>
 800dddc:	4b05      	ldr	r3, [pc, #20]	; (800ddf4 <_fflush_r+0x70>)
 800ddde:	429c      	cmp	r4, r3
 800dde0:	d101      	bne.n	800dde6 <_fflush_r+0x62>
 800dde2:	68ac      	ldr	r4, [r5, #8]
 800dde4:	e7df      	b.n	800dda6 <_fflush_r+0x22>
 800dde6:	4b04      	ldr	r3, [pc, #16]	; (800ddf8 <_fflush_r+0x74>)
 800dde8:	429c      	cmp	r4, r3
 800ddea:	bf08      	it	eq
 800ddec:	68ec      	ldreq	r4, [r5, #12]
 800ddee:	e7da      	b.n	800dda6 <_fflush_r+0x22>
 800ddf0:	0801d9dc 	.word	0x0801d9dc
 800ddf4:	0801d9fc 	.word	0x0801d9fc
 800ddf8:	0801d9bc 	.word	0x0801d9bc

0800ddfc <std>:
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	b510      	push	{r4, lr}
 800de00:	4604      	mov	r4, r0
 800de02:	e9c0 3300 	strd	r3, r3, [r0]
 800de06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800de0a:	6083      	str	r3, [r0, #8]
 800de0c:	8181      	strh	r1, [r0, #12]
 800de0e:	6643      	str	r3, [r0, #100]	; 0x64
 800de10:	81c2      	strh	r2, [r0, #14]
 800de12:	6183      	str	r3, [r0, #24]
 800de14:	4619      	mov	r1, r3
 800de16:	2208      	movs	r2, #8
 800de18:	305c      	adds	r0, #92	; 0x5c
 800de1a:	f7fb fd9b 	bl	8009954 <memset>
 800de1e:	4b05      	ldr	r3, [pc, #20]	; (800de34 <std+0x38>)
 800de20:	6263      	str	r3, [r4, #36]	; 0x24
 800de22:	4b05      	ldr	r3, [pc, #20]	; (800de38 <std+0x3c>)
 800de24:	62a3      	str	r3, [r4, #40]	; 0x28
 800de26:	4b05      	ldr	r3, [pc, #20]	; (800de3c <std+0x40>)
 800de28:	62e3      	str	r3, [r4, #44]	; 0x2c
 800de2a:	4b05      	ldr	r3, [pc, #20]	; (800de40 <std+0x44>)
 800de2c:	6224      	str	r4, [r4, #32]
 800de2e:	6323      	str	r3, [r4, #48]	; 0x30
 800de30:	bd10      	pop	{r4, pc}
 800de32:	bf00      	nop
 800de34:	0800e151 	.word	0x0800e151
 800de38:	0800e173 	.word	0x0800e173
 800de3c:	0800e1ab 	.word	0x0800e1ab
 800de40:	0800e1cf 	.word	0x0800e1cf

0800de44 <_cleanup_r>:
 800de44:	4901      	ldr	r1, [pc, #4]	; (800de4c <_cleanup_r+0x8>)
 800de46:	f000 b8af 	b.w	800dfa8 <_fwalk_reent>
 800de4a:	bf00      	nop
 800de4c:	0800dd85 	.word	0x0800dd85

0800de50 <__sfmoreglue>:
 800de50:	b570      	push	{r4, r5, r6, lr}
 800de52:	2268      	movs	r2, #104	; 0x68
 800de54:	1e4d      	subs	r5, r1, #1
 800de56:	4355      	muls	r5, r2
 800de58:	460e      	mov	r6, r1
 800de5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800de5e:	f7ff fa5b 	bl	800d318 <_malloc_r>
 800de62:	4604      	mov	r4, r0
 800de64:	b140      	cbz	r0, 800de78 <__sfmoreglue+0x28>
 800de66:	2100      	movs	r1, #0
 800de68:	e9c0 1600 	strd	r1, r6, [r0]
 800de6c:	300c      	adds	r0, #12
 800de6e:	60a0      	str	r0, [r4, #8]
 800de70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800de74:	f7fb fd6e 	bl	8009954 <memset>
 800de78:	4620      	mov	r0, r4
 800de7a:	bd70      	pop	{r4, r5, r6, pc}

0800de7c <__sfp_lock_acquire>:
 800de7c:	4801      	ldr	r0, [pc, #4]	; (800de84 <__sfp_lock_acquire+0x8>)
 800de7e:	f000 b8b3 	b.w	800dfe8 <__retarget_lock_acquire_recursive>
 800de82:	bf00      	nop
 800de84:	20001145 	.word	0x20001145

0800de88 <__sfp_lock_release>:
 800de88:	4801      	ldr	r0, [pc, #4]	; (800de90 <__sfp_lock_release+0x8>)
 800de8a:	f000 b8ae 	b.w	800dfea <__retarget_lock_release_recursive>
 800de8e:	bf00      	nop
 800de90:	20001145 	.word	0x20001145

0800de94 <__sinit_lock_acquire>:
 800de94:	4801      	ldr	r0, [pc, #4]	; (800de9c <__sinit_lock_acquire+0x8>)
 800de96:	f000 b8a7 	b.w	800dfe8 <__retarget_lock_acquire_recursive>
 800de9a:	bf00      	nop
 800de9c:	20001146 	.word	0x20001146

0800dea0 <__sinit_lock_release>:
 800dea0:	4801      	ldr	r0, [pc, #4]	; (800dea8 <__sinit_lock_release+0x8>)
 800dea2:	f000 b8a2 	b.w	800dfea <__retarget_lock_release_recursive>
 800dea6:	bf00      	nop
 800dea8:	20001146 	.word	0x20001146

0800deac <__sinit>:
 800deac:	b510      	push	{r4, lr}
 800deae:	4604      	mov	r4, r0
 800deb0:	f7ff fff0 	bl	800de94 <__sinit_lock_acquire>
 800deb4:	69a3      	ldr	r3, [r4, #24]
 800deb6:	b11b      	cbz	r3, 800dec0 <__sinit+0x14>
 800deb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800debc:	f7ff bff0 	b.w	800dea0 <__sinit_lock_release>
 800dec0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800dec4:	6523      	str	r3, [r4, #80]	; 0x50
 800dec6:	4b13      	ldr	r3, [pc, #76]	; (800df14 <__sinit+0x68>)
 800dec8:	4a13      	ldr	r2, [pc, #76]	; (800df18 <__sinit+0x6c>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	62a2      	str	r2, [r4, #40]	; 0x28
 800dece:	42a3      	cmp	r3, r4
 800ded0:	bf04      	itt	eq
 800ded2:	2301      	moveq	r3, #1
 800ded4:	61a3      	streq	r3, [r4, #24]
 800ded6:	4620      	mov	r0, r4
 800ded8:	f000 f820 	bl	800df1c <__sfp>
 800dedc:	6060      	str	r0, [r4, #4]
 800dede:	4620      	mov	r0, r4
 800dee0:	f000 f81c 	bl	800df1c <__sfp>
 800dee4:	60a0      	str	r0, [r4, #8]
 800dee6:	4620      	mov	r0, r4
 800dee8:	f000 f818 	bl	800df1c <__sfp>
 800deec:	2200      	movs	r2, #0
 800deee:	60e0      	str	r0, [r4, #12]
 800def0:	2104      	movs	r1, #4
 800def2:	6860      	ldr	r0, [r4, #4]
 800def4:	f7ff ff82 	bl	800ddfc <std>
 800def8:	68a0      	ldr	r0, [r4, #8]
 800defa:	2201      	movs	r2, #1
 800defc:	2109      	movs	r1, #9
 800defe:	f7ff ff7d 	bl	800ddfc <std>
 800df02:	68e0      	ldr	r0, [r4, #12]
 800df04:	2202      	movs	r2, #2
 800df06:	2112      	movs	r1, #18
 800df08:	f7ff ff78 	bl	800ddfc <std>
 800df0c:	2301      	movs	r3, #1
 800df0e:	61a3      	str	r3, [r4, #24]
 800df10:	e7d2      	b.n	800deb8 <__sinit+0xc>
 800df12:	bf00      	nop
 800df14:	0801d574 	.word	0x0801d574
 800df18:	0800de45 	.word	0x0800de45

0800df1c <__sfp>:
 800df1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df1e:	4607      	mov	r7, r0
 800df20:	f7ff ffac 	bl	800de7c <__sfp_lock_acquire>
 800df24:	4b1e      	ldr	r3, [pc, #120]	; (800dfa0 <__sfp+0x84>)
 800df26:	681e      	ldr	r6, [r3, #0]
 800df28:	69b3      	ldr	r3, [r6, #24]
 800df2a:	b913      	cbnz	r3, 800df32 <__sfp+0x16>
 800df2c:	4630      	mov	r0, r6
 800df2e:	f7ff ffbd 	bl	800deac <__sinit>
 800df32:	3648      	adds	r6, #72	; 0x48
 800df34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800df38:	3b01      	subs	r3, #1
 800df3a:	d503      	bpl.n	800df44 <__sfp+0x28>
 800df3c:	6833      	ldr	r3, [r6, #0]
 800df3e:	b30b      	cbz	r3, 800df84 <__sfp+0x68>
 800df40:	6836      	ldr	r6, [r6, #0]
 800df42:	e7f7      	b.n	800df34 <__sfp+0x18>
 800df44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800df48:	b9d5      	cbnz	r5, 800df80 <__sfp+0x64>
 800df4a:	4b16      	ldr	r3, [pc, #88]	; (800dfa4 <__sfp+0x88>)
 800df4c:	60e3      	str	r3, [r4, #12]
 800df4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800df52:	6665      	str	r5, [r4, #100]	; 0x64
 800df54:	f000 f847 	bl	800dfe6 <__retarget_lock_init_recursive>
 800df58:	f7ff ff96 	bl	800de88 <__sfp_lock_release>
 800df5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800df60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800df64:	6025      	str	r5, [r4, #0]
 800df66:	61a5      	str	r5, [r4, #24]
 800df68:	2208      	movs	r2, #8
 800df6a:	4629      	mov	r1, r5
 800df6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800df70:	f7fb fcf0 	bl	8009954 <memset>
 800df74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800df78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800df7c:	4620      	mov	r0, r4
 800df7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df80:	3468      	adds	r4, #104	; 0x68
 800df82:	e7d9      	b.n	800df38 <__sfp+0x1c>
 800df84:	2104      	movs	r1, #4
 800df86:	4638      	mov	r0, r7
 800df88:	f7ff ff62 	bl	800de50 <__sfmoreglue>
 800df8c:	4604      	mov	r4, r0
 800df8e:	6030      	str	r0, [r6, #0]
 800df90:	2800      	cmp	r0, #0
 800df92:	d1d5      	bne.n	800df40 <__sfp+0x24>
 800df94:	f7ff ff78 	bl	800de88 <__sfp_lock_release>
 800df98:	230c      	movs	r3, #12
 800df9a:	603b      	str	r3, [r7, #0]
 800df9c:	e7ee      	b.n	800df7c <__sfp+0x60>
 800df9e:	bf00      	nop
 800dfa0:	0801d574 	.word	0x0801d574
 800dfa4:	ffff0001 	.word	0xffff0001

0800dfa8 <_fwalk_reent>:
 800dfa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfac:	4606      	mov	r6, r0
 800dfae:	4688      	mov	r8, r1
 800dfb0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800dfb4:	2700      	movs	r7, #0
 800dfb6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dfba:	f1b9 0901 	subs.w	r9, r9, #1
 800dfbe:	d505      	bpl.n	800dfcc <_fwalk_reent+0x24>
 800dfc0:	6824      	ldr	r4, [r4, #0]
 800dfc2:	2c00      	cmp	r4, #0
 800dfc4:	d1f7      	bne.n	800dfb6 <_fwalk_reent+0xe>
 800dfc6:	4638      	mov	r0, r7
 800dfc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dfcc:	89ab      	ldrh	r3, [r5, #12]
 800dfce:	2b01      	cmp	r3, #1
 800dfd0:	d907      	bls.n	800dfe2 <_fwalk_reent+0x3a>
 800dfd2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dfd6:	3301      	adds	r3, #1
 800dfd8:	d003      	beq.n	800dfe2 <_fwalk_reent+0x3a>
 800dfda:	4629      	mov	r1, r5
 800dfdc:	4630      	mov	r0, r6
 800dfde:	47c0      	blx	r8
 800dfe0:	4307      	orrs	r7, r0
 800dfe2:	3568      	adds	r5, #104	; 0x68
 800dfe4:	e7e9      	b.n	800dfba <_fwalk_reent+0x12>

0800dfe6 <__retarget_lock_init_recursive>:
 800dfe6:	4770      	bx	lr

0800dfe8 <__retarget_lock_acquire_recursive>:
 800dfe8:	4770      	bx	lr

0800dfea <__retarget_lock_release_recursive>:
 800dfea:	4770      	bx	lr

0800dfec <__swhatbuf_r>:
 800dfec:	b570      	push	{r4, r5, r6, lr}
 800dfee:	460e      	mov	r6, r1
 800dff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dff4:	2900      	cmp	r1, #0
 800dff6:	b096      	sub	sp, #88	; 0x58
 800dff8:	4614      	mov	r4, r2
 800dffa:	461d      	mov	r5, r3
 800dffc:	da08      	bge.n	800e010 <__swhatbuf_r+0x24>
 800dffe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e002:	2200      	movs	r2, #0
 800e004:	602a      	str	r2, [r5, #0]
 800e006:	061a      	lsls	r2, r3, #24
 800e008:	d410      	bmi.n	800e02c <__swhatbuf_r+0x40>
 800e00a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e00e:	e00e      	b.n	800e02e <__swhatbuf_r+0x42>
 800e010:	466a      	mov	r2, sp
 800e012:	f000 f903 	bl	800e21c <_fstat_r>
 800e016:	2800      	cmp	r0, #0
 800e018:	dbf1      	blt.n	800dffe <__swhatbuf_r+0x12>
 800e01a:	9a01      	ldr	r2, [sp, #4]
 800e01c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e020:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e024:	425a      	negs	r2, r3
 800e026:	415a      	adcs	r2, r3
 800e028:	602a      	str	r2, [r5, #0]
 800e02a:	e7ee      	b.n	800e00a <__swhatbuf_r+0x1e>
 800e02c:	2340      	movs	r3, #64	; 0x40
 800e02e:	2000      	movs	r0, #0
 800e030:	6023      	str	r3, [r4, #0]
 800e032:	b016      	add	sp, #88	; 0x58
 800e034:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e038 <__smakebuf_r>:
 800e038:	898b      	ldrh	r3, [r1, #12]
 800e03a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e03c:	079d      	lsls	r5, r3, #30
 800e03e:	4606      	mov	r6, r0
 800e040:	460c      	mov	r4, r1
 800e042:	d507      	bpl.n	800e054 <__smakebuf_r+0x1c>
 800e044:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e048:	6023      	str	r3, [r4, #0]
 800e04a:	6123      	str	r3, [r4, #16]
 800e04c:	2301      	movs	r3, #1
 800e04e:	6163      	str	r3, [r4, #20]
 800e050:	b002      	add	sp, #8
 800e052:	bd70      	pop	{r4, r5, r6, pc}
 800e054:	ab01      	add	r3, sp, #4
 800e056:	466a      	mov	r2, sp
 800e058:	f7ff ffc8 	bl	800dfec <__swhatbuf_r>
 800e05c:	9900      	ldr	r1, [sp, #0]
 800e05e:	4605      	mov	r5, r0
 800e060:	4630      	mov	r0, r6
 800e062:	f7ff f959 	bl	800d318 <_malloc_r>
 800e066:	b948      	cbnz	r0, 800e07c <__smakebuf_r+0x44>
 800e068:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e06c:	059a      	lsls	r2, r3, #22
 800e06e:	d4ef      	bmi.n	800e050 <__smakebuf_r+0x18>
 800e070:	f023 0303 	bic.w	r3, r3, #3
 800e074:	f043 0302 	orr.w	r3, r3, #2
 800e078:	81a3      	strh	r3, [r4, #12]
 800e07a:	e7e3      	b.n	800e044 <__smakebuf_r+0xc>
 800e07c:	4b0d      	ldr	r3, [pc, #52]	; (800e0b4 <__smakebuf_r+0x7c>)
 800e07e:	62b3      	str	r3, [r6, #40]	; 0x28
 800e080:	89a3      	ldrh	r3, [r4, #12]
 800e082:	6020      	str	r0, [r4, #0]
 800e084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e088:	81a3      	strh	r3, [r4, #12]
 800e08a:	9b00      	ldr	r3, [sp, #0]
 800e08c:	6163      	str	r3, [r4, #20]
 800e08e:	9b01      	ldr	r3, [sp, #4]
 800e090:	6120      	str	r0, [r4, #16]
 800e092:	b15b      	cbz	r3, 800e0ac <__smakebuf_r+0x74>
 800e094:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e098:	4630      	mov	r0, r6
 800e09a:	f000 f8d1 	bl	800e240 <_isatty_r>
 800e09e:	b128      	cbz	r0, 800e0ac <__smakebuf_r+0x74>
 800e0a0:	89a3      	ldrh	r3, [r4, #12]
 800e0a2:	f023 0303 	bic.w	r3, r3, #3
 800e0a6:	f043 0301 	orr.w	r3, r3, #1
 800e0aa:	81a3      	strh	r3, [r4, #12]
 800e0ac:	89a0      	ldrh	r0, [r4, #12]
 800e0ae:	4305      	orrs	r5, r0
 800e0b0:	81a5      	strh	r5, [r4, #12]
 800e0b2:	e7cd      	b.n	800e050 <__smakebuf_r+0x18>
 800e0b4:	0800de45 	.word	0x0800de45

0800e0b8 <_malloc_usable_size_r>:
 800e0b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0bc:	1f18      	subs	r0, r3, #4
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	bfbc      	itt	lt
 800e0c2:	580b      	ldrlt	r3, [r1, r0]
 800e0c4:	18c0      	addlt	r0, r0, r3
 800e0c6:	4770      	bx	lr

0800e0c8 <_raise_r>:
 800e0c8:	291f      	cmp	r1, #31
 800e0ca:	b538      	push	{r3, r4, r5, lr}
 800e0cc:	4604      	mov	r4, r0
 800e0ce:	460d      	mov	r5, r1
 800e0d0:	d904      	bls.n	800e0dc <_raise_r+0x14>
 800e0d2:	2316      	movs	r3, #22
 800e0d4:	6003      	str	r3, [r0, #0]
 800e0d6:	f04f 30ff 	mov.w	r0, #4294967295
 800e0da:	bd38      	pop	{r3, r4, r5, pc}
 800e0dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e0de:	b112      	cbz	r2, 800e0e6 <_raise_r+0x1e>
 800e0e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e0e4:	b94b      	cbnz	r3, 800e0fa <_raise_r+0x32>
 800e0e6:	4620      	mov	r0, r4
 800e0e8:	f000 f830 	bl	800e14c <_getpid_r>
 800e0ec:	462a      	mov	r2, r5
 800e0ee:	4601      	mov	r1, r0
 800e0f0:	4620      	mov	r0, r4
 800e0f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e0f6:	f000 b817 	b.w	800e128 <_kill_r>
 800e0fa:	2b01      	cmp	r3, #1
 800e0fc:	d00a      	beq.n	800e114 <_raise_r+0x4c>
 800e0fe:	1c59      	adds	r1, r3, #1
 800e100:	d103      	bne.n	800e10a <_raise_r+0x42>
 800e102:	2316      	movs	r3, #22
 800e104:	6003      	str	r3, [r0, #0]
 800e106:	2001      	movs	r0, #1
 800e108:	e7e7      	b.n	800e0da <_raise_r+0x12>
 800e10a:	2400      	movs	r4, #0
 800e10c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e110:	4628      	mov	r0, r5
 800e112:	4798      	blx	r3
 800e114:	2000      	movs	r0, #0
 800e116:	e7e0      	b.n	800e0da <_raise_r+0x12>

0800e118 <raise>:
 800e118:	4b02      	ldr	r3, [pc, #8]	; (800e124 <raise+0xc>)
 800e11a:	4601      	mov	r1, r0
 800e11c:	6818      	ldr	r0, [r3, #0]
 800e11e:	f7ff bfd3 	b.w	800e0c8 <_raise_r>
 800e122:	bf00      	nop
 800e124:	20000060 	.word	0x20000060

0800e128 <_kill_r>:
 800e128:	b538      	push	{r3, r4, r5, lr}
 800e12a:	4d07      	ldr	r5, [pc, #28]	; (800e148 <_kill_r+0x20>)
 800e12c:	2300      	movs	r3, #0
 800e12e:	4604      	mov	r4, r0
 800e130:	4608      	mov	r0, r1
 800e132:	4611      	mov	r1, r2
 800e134:	602b      	str	r3, [r5, #0]
 800e136:	f7f6 ff05 	bl	8004f44 <_kill>
 800e13a:	1c43      	adds	r3, r0, #1
 800e13c:	d102      	bne.n	800e144 <_kill_r+0x1c>
 800e13e:	682b      	ldr	r3, [r5, #0]
 800e140:	b103      	cbz	r3, 800e144 <_kill_r+0x1c>
 800e142:	6023      	str	r3, [r4, #0]
 800e144:	bd38      	pop	{r3, r4, r5, pc}
 800e146:	bf00      	nop
 800e148:	20001140 	.word	0x20001140

0800e14c <_getpid_r>:
 800e14c:	f7f6 bef2 	b.w	8004f34 <_getpid>

0800e150 <__sread>:
 800e150:	b510      	push	{r4, lr}
 800e152:	460c      	mov	r4, r1
 800e154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e158:	f000 f894 	bl	800e284 <_read_r>
 800e15c:	2800      	cmp	r0, #0
 800e15e:	bfab      	itete	ge
 800e160:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e162:	89a3      	ldrhlt	r3, [r4, #12]
 800e164:	181b      	addge	r3, r3, r0
 800e166:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e16a:	bfac      	ite	ge
 800e16c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e16e:	81a3      	strhlt	r3, [r4, #12]
 800e170:	bd10      	pop	{r4, pc}

0800e172 <__swrite>:
 800e172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e176:	461f      	mov	r7, r3
 800e178:	898b      	ldrh	r3, [r1, #12]
 800e17a:	05db      	lsls	r3, r3, #23
 800e17c:	4605      	mov	r5, r0
 800e17e:	460c      	mov	r4, r1
 800e180:	4616      	mov	r6, r2
 800e182:	d505      	bpl.n	800e190 <__swrite+0x1e>
 800e184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e188:	2302      	movs	r3, #2
 800e18a:	2200      	movs	r2, #0
 800e18c:	f000 f868 	bl	800e260 <_lseek_r>
 800e190:	89a3      	ldrh	r3, [r4, #12]
 800e192:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e196:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e19a:	81a3      	strh	r3, [r4, #12]
 800e19c:	4632      	mov	r2, r6
 800e19e:	463b      	mov	r3, r7
 800e1a0:	4628      	mov	r0, r5
 800e1a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e1a6:	f000 b817 	b.w	800e1d8 <_write_r>

0800e1aa <__sseek>:
 800e1aa:	b510      	push	{r4, lr}
 800e1ac:	460c      	mov	r4, r1
 800e1ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1b2:	f000 f855 	bl	800e260 <_lseek_r>
 800e1b6:	1c43      	adds	r3, r0, #1
 800e1b8:	89a3      	ldrh	r3, [r4, #12]
 800e1ba:	bf15      	itete	ne
 800e1bc:	6560      	strne	r0, [r4, #84]	; 0x54
 800e1be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e1c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e1c6:	81a3      	strheq	r3, [r4, #12]
 800e1c8:	bf18      	it	ne
 800e1ca:	81a3      	strhne	r3, [r4, #12]
 800e1cc:	bd10      	pop	{r4, pc}

0800e1ce <__sclose>:
 800e1ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1d2:	f000 b813 	b.w	800e1fc <_close_r>
	...

0800e1d8 <_write_r>:
 800e1d8:	b538      	push	{r3, r4, r5, lr}
 800e1da:	4d07      	ldr	r5, [pc, #28]	; (800e1f8 <_write_r+0x20>)
 800e1dc:	4604      	mov	r4, r0
 800e1de:	4608      	mov	r0, r1
 800e1e0:	4611      	mov	r1, r2
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	602a      	str	r2, [r5, #0]
 800e1e6:	461a      	mov	r2, r3
 800e1e8:	f7f6 fee3 	bl	8004fb2 <_write>
 800e1ec:	1c43      	adds	r3, r0, #1
 800e1ee:	d102      	bne.n	800e1f6 <_write_r+0x1e>
 800e1f0:	682b      	ldr	r3, [r5, #0]
 800e1f2:	b103      	cbz	r3, 800e1f6 <_write_r+0x1e>
 800e1f4:	6023      	str	r3, [r4, #0]
 800e1f6:	bd38      	pop	{r3, r4, r5, pc}
 800e1f8:	20001140 	.word	0x20001140

0800e1fc <_close_r>:
 800e1fc:	b538      	push	{r3, r4, r5, lr}
 800e1fe:	4d06      	ldr	r5, [pc, #24]	; (800e218 <_close_r+0x1c>)
 800e200:	2300      	movs	r3, #0
 800e202:	4604      	mov	r4, r0
 800e204:	4608      	mov	r0, r1
 800e206:	602b      	str	r3, [r5, #0]
 800e208:	f7f6 feef 	bl	8004fea <_close>
 800e20c:	1c43      	adds	r3, r0, #1
 800e20e:	d102      	bne.n	800e216 <_close_r+0x1a>
 800e210:	682b      	ldr	r3, [r5, #0]
 800e212:	b103      	cbz	r3, 800e216 <_close_r+0x1a>
 800e214:	6023      	str	r3, [r4, #0]
 800e216:	bd38      	pop	{r3, r4, r5, pc}
 800e218:	20001140 	.word	0x20001140

0800e21c <_fstat_r>:
 800e21c:	b538      	push	{r3, r4, r5, lr}
 800e21e:	4d07      	ldr	r5, [pc, #28]	; (800e23c <_fstat_r+0x20>)
 800e220:	2300      	movs	r3, #0
 800e222:	4604      	mov	r4, r0
 800e224:	4608      	mov	r0, r1
 800e226:	4611      	mov	r1, r2
 800e228:	602b      	str	r3, [r5, #0]
 800e22a:	f7f6 feea 	bl	8005002 <_fstat>
 800e22e:	1c43      	adds	r3, r0, #1
 800e230:	d102      	bne.n	800e238 <_fstat_r+0x1c>
 800e232:	682b      	ldr	r3, [r5, #0]
 800e234:	b103      	cbz	r3, 800e238 <_fstat_r+0x1c>
 800e236:	6023      	str	r3, [r4, #0]
 800e238:	bd38      	pop	{r3, r4, r5, pc}
 800e23a:	bf00      	nop
 800e23c:	20001140 	.word	0x20001140

0800e240 <_isatty_r>:
 800e240:	b538      	push	{r3, r4, r5, lr}
 800e242:	4d06      	ldr	r5, [pc, #24]	; (800e25c <_isatty_r+0x1c>)
 800e244:	2300      	movs	r3, #0
 800e246:	4604      	mov	r4, r0
 800e248:	4608      	mov	r0, r1
 800e24a:	602b      	str	r3, [r5, #0]
 800e24c:	f7f6 fee9 	bl	8005022 <_isatty>
 800e250:	1c43      	adds	r3, r0, #1
 800e252:	d102      	bne.n	800e25a <_isatty_r+0x1a>
 800e254:	682b      	ldr	r3, [r5, #0]
 800e256:	b103      	cbz	r3, 800e25a <_isatty_r+0x1a>
 800e258:	6023      	str	r3, [r4, #0]
 800e25a:	bd38      	pop	{r3, r4, r5, pc}
 800e25c:	20001140 	.word	0x20001140

0800e260 <_lseek_r>:
 800e260:	b538      	push	{r3, r4, r5, lr}
 800e262:	4d07      	ldr	r5, [pc, #28]	; (800e280 <_lseek_r+0x20>)
 800e264:	4604      	mov	r4, r0
 800e266:	4608      	mov	r0, r1
 800e268:	4611      	mov	r1, r2
 800e26a:	2200      	movs	r2, #0
 800e26c:	602a      	str	r2, [r5, #0]
 800e26e:	461a      	mov	r2, r3
 800e270:	f7f6 fee2 	bl	8005038 <_lseek>
 800e274:	1c43      	adds	r3, r0, #1
 800e276:	d102      	bne.n	800e27e <_lseek_r+0x1e>
 800e278:	682b      	ldr	r3, [r5, #0]
 800e27a:	b103      	cbz	r3, 800e27e <_lseek_r+0x1e>
 800e27c:	6023      	str	r3, [r4, #0]
 800e27e:	bd38      	pop	{r3, r4, r5, pc}
 800e280:	20001140 	.word	0x20001140

0800e284 <_read_r>:
 800e284:	b538      	push	{r3, r4, r5, lr}
 800e286:	4d07      	ldr	r5, [pc, #28]	; (800e2a4 <_read_r+0x20>)
 800e288:	4604      	mov	r4, r0
 800e28a:	4608      	mov	r0, r1
 800e28c:	4611      	mov	r1, r2
 800e28e:	2200      	movs	r2, #0
 800e290:	602a      	str	r2, [r5, #0]
 800e292:	461a      	mov	r2, r3
 800e294:	f7f6 fe70 	bl	8004f78 <_read>
 800e298:	1c43      	adds	r3, r0, #1
 800e29a:	d102      	bne.n	800e2a2 <_read_r+0x1e>
 800e29c:	682b      	ldr	r3, [r5, #0]
 800e29e:	b103      	cbz	r3, 800e2a2 <_read_r+0x1e>
 800e2a0:	6023      	str	r3, [r4, #0]
 800e2a2:	bd38      	pop	{r3, r4, r5, pc}
 800e2a4:	20001140 	.word	0x20001140

0800e2a8 <floor>:
 800e2a8:	ec51 0b10 	vmov	r0, r1, d0
 800e2ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2b0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800e2b4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800e2b8:	2e13      	cmp	r6, #19
 800e2ba:	ee10 5a10 	vmov	r5, s0
 800e2be:	ee10 8a10 	vmov	r8, s0
 800e2c2:	460c      	mov	r4, r1
 800e2c4:	dc32      	bgt.n	800e32c <floor+0x84>
 800e2c6:	2e00      	cmp	r6, #0
 800e2c8:	da14      	bge.n	800e2f4 <floor+0x4c>
 800e2ca:	a333      	add	r3, pc, #204	; (adr r3, 800e398 <floor+0xf0>)
 800e2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2d0:	f7f1 ffdc 	bl	800028c <__adddf3>
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	f7f2 fc1e 	bl	8000b18 <__aeabi_dcmpgt>
 800e2dc:	b138      	cbz	r0, 800e2ee <floor+0x46>
 800e2de:	2c00      	cmp	r4, #0
 800e2e0:	da57      	bge.n	800e392 <floor+0xea>
 800e2e2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e2e6:	431d      	orrs	r5, r3
 800e2e8:	d001      	beq.n	800e2ee <floor+0x46>
 800e2ea:	4c2d      	ldr	r4, [pc, #180]	; (800e3a0 <floor+0xf8>)
 800e2ec:	2500      	movs	r5, #0
 800e2ee:	4621      	mov	r1, r4
 800e2f0:	4628      	mov	r0, r5
 800e2f2:	e025      	b.n	800e340 <floor+0x98>
 800e2f4:	4f2b      	ldr	r7, [pc, #172]	; (800e3a4 <floor+0xfc>)
 800e2f6:	4137      	asrs	r7, r6
 800e2f8:	ea01 0307 	and.w	r3, r1, r7
 800e2fc:	4303      	orrs	r3, r0
 800e2fe:	d01f      	beq.n	800e340 <floor+0x98>
 800e300:	a325      	add	r3, pc, #148	; (adr r3, 800e398 <floor+0xf0>)
 800e302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e306:	f7f1 ffc1 	bl	800028c <__adddf3>
 800e30a:	2200      	movs	r2, #0
 800e30c:	2300      	movs	r3, #0
 800e30e:	f7f2 fc03 	bl	8000b18 <__aeabi_dcmpgt>
 800e312:	2800      	cmp	r0, #0
 800e314:	d0eb      	beq.n	800e2ee <floor+0x46>
 800e316:	2c00      	cmp	r4, #0
 800e318:	bfbe      	ittt	lt
 800e31a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e31e:	fa43 f606 	asrlt.w	r6, r3, r6
 800e322:	19a4      	addlt	r4, r4, r6
 800e324:	ea24 0407 	bic.w	r4, r4, r7
 800e328:	2500      	movs	r5, #0
 800e32a:	e7e0      	b.n	800e2ee <floor+0x46>
 800e32c:	2e33      	cmp	r6, #51	; 0x33
 800e32e:	dd0b      	ble.n	800e348 <floor+0xa0>
 800e330:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e334:	d104      	bne.n	800e340 <floor+0x98>
 800e336:	ee10 2a10 	vmov	r2, s0
 800e33a:	460b      	mov	r3, r1
 800e33c:	f7f1 ffa6 	bl	800028c <__adddf3>
 800e340:	ec41 0b10 	vmov	d0, r0, r1
 800e344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e348:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800e34c:	f04f 33ff 	mov.w	r3, #4294967295
 800e350:	fa23 f707 	lsr.w	r7, r3, r7
 800e354:	4207      	tst	r7, r0
 800e356:	d0f3      	beq.n	800e340 <floor+0x98>
 800e358:	a30f      	add	r3, pc, #60	; (adr r3, 800e398 <floor+0xf0>)
 800e35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e35e:	f7f1 ff95 	bl	800028c <__adddf3>
 800e362:	2200      	movs	r2, #0
 800e364:	2300      	movs	r3, #0
 800e366:	f7f2 fbd7 	bl	8000b18 <__aeabi_dcmpgt>
 800e36a:	2800      	cmp	r0, #0
 800e36c:	d0bf      	beq.n	800e2ee <floor+0x46>
 800e36e:	2c00      	cmp	r4, #0
 800e370:	da02      	bge.n	800e378 <floor+0xd0>
 800e372:	2e14      	cmp	r6, #20
 800e374:	d103      	bne.n	800e37e <floor+0xd6>
 800e376:	3401      	adds	r4, #1
 800e378:	ea25 0507 	bic.w	r5, r5, r7
 800e37c:	e7b7      	b.n	800e2ee <floor+0x46>
 800e37e:	2301      	movs	r3, #1
 800e380:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e384:	fa03 f606 	lsl.w	r6, r3, r6
 800e388:	4435      	add	r5, r6
 800e38a:	4545      	cmp	r5, r8
 800e38c:	bf38      	it	cc
 800e38e:	18e4      	addcc	r4, r4, r3
 800e390:	e7f2      	b.n	800e378 <floor+0xd0>
 800e392:	2500      	movs	r5, #0
 800e394:	462c      	mov	r4, r5
 800e396:	e7aa      	b.n	800e2ee <floor+0x46>
 800e398:	8800759c 	.word	0x8800759c
 800e39c:	7e37e43c 	.word	0x7e37e43c
 800e3a0:	bff00000 	.word	0xbff00000
 800e3a4:	000fffff 	.word	0x000fffff

0800e3a8 <pow>:
 800e3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3aa:	ed2d 8b02 	vpush	{d8}
 800e3ae:	eeb0 8a40 	vmov.f32	s16, s0
 800e3b2:	eef0 8a60 	vmov.f32	s17, s1
 800e3b6:	ec55 4b11 	vmov	r4, r5, d1
 800e3ba:	f000 f865 	bl	800e488 <__ieee754_pow>
 800e3be:	4622      	mov	r2, r4
 800e3c0:	462b      	mov	r3, r5
 800e3c2:	4620      	mov	r0, r4
 800e3c4:	4629      	mov	r1, r5
 800e3c6:	ec57 6b10 	vmov	r6, r7, d0
 800e3ca:	f7f2 fbaf 	bl	8000b2c <__aeabi_dcmpun>
 800e3ce:	2800      	cmp	r0, #0
 800e3d0:	d13b      	bne.n	800e44a <pow+0xa2>
 800e3d2:	ec51 0b18 	vmov	r0, r1, d8
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	2300      	movs	r3, #0
 800e3da:	f7f2 fb75 	bl	8000ac8 <__aeabi_dcmpeq>
 800e3de:	b1b8      	cbz	r0, 800e410 <pow+0x68>
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	4620      	mov	r0, r4
 800e3e6:	4629      	mov	r1, r5
 800e3e8:	f7f2 fb6e 	bl	8000ac8 <__aeabi_dcmpeq>
 800e3ec:	2800      	cmp	r0, #0
 800e3ee:	d146      	bne.n	800e47e <pow+0xd6>
 800e3f0:	ec45 4b10 	vmov	d0, r4, r5
 800e3f4:	f000 fe61 	bl	800f0ba <finite>
 800e3f8:	b338      	cbz	r0, 800e44a <pow+0xa2>
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	4620      	mov	r0, r4
 800e400:	4629      	mov	r1, r5
 800e402:	f7f2 fb6b 	bl	8000adc <__aeabi_dcmplt>
 800e406:	b300      	cbz	r0, 800e44a <pow+0xa2>
 800e408:	f7fb fa5c 	bl	80098c4 <__errno>
 800e40c:	2322      	movs	r3, #34	; 0x22
 800e40e:	e01b      	b.n	800e448 <pow+0xa0>
 800e410:	ec47 6b10 	vmov	d0, r6, r7
 800e414:	f000 fe51 	bl	800f0ba <finite>
 800e418:	b9e0      	cbnz	r0, 800e454 <pow+0xac>
 800e41a:	eeb0 0a48 	vmov.f32	s0, s16
 800e41e:	eef0 0a68 	vmov.f32	s1, s17
 800e422:	f000 fe4a 	bl	800f0ba <finite>
 800e426:	b1a8      	cbz	r0, 800e454 <pow+0xac>
 800e428:	ec45 4b10 	vmov	d0, r4, r5
 800e42c:	f000 fe45 	bl	800f0ba <finite>
 800e430:	b180      	cbz	r0, 800e454 <pow+0xac>
 800e432:	4632      	mov	r2, r6
 800e434:	463b      	mov	r3, r7
 800e436:	4630      	mov	r0, r6
 800e438:	4639      	mov	r1, r7
 800e43a:	f7f2 fb77 	bl	8000b2c <__aeabi_dcmpun>
 800e43e:	2800      	cmp	r0, #0
 800e440:	d0e2      	beq.n	800e408 <pow+0x60>
 800e442:	f7fb fa3f 	bl	80098c4 <__errno>
 800e446:	2321      	movs	r3, #33	; 0x21
 800e448:	6003      	str	r3, [r0, #0]
 800e44a:	ecbd 8b02 	vpop	{d8}
 800e44e:	ec47 6b10 	vmov	d0, r6, r7
 800e452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e454:	2200      	movs	r2, #0
 800e456:	2300      	movs	r3, #0
 800e458:	4630      	mov	r0, r6
 800e45a:	4639      	mov	r1, r7
 800e45c:	f7f2 fb34 	bl	8000ac8 <__aeabi_dcmpeq>
 800e460:	2800      	cmp	r0, #0
 800e462:	d0f2      	beq.n	800e44a <pow+0xa2>
 800e464:	eeb0 0a48 	vmov.f32	s0, s16
 800e468:	eef0 0a68 	vmov.f32	s1, s17
 800e46c:	f000 fe25 	bl	800f0ba <finite>
 800e470:	2800      	cmp	r0, #0
 800e472:	d0ea      	beq.n	800e44a <pow+0xa2>
 800e474:	ec45 4b10 	vmov	d0, r4, r5
 800e478:	f000 fe1f 	bl	800f0ba <finite>
 800e47c:	e7c3      	b.n	800e406 <pow+0x5e>
 800e47e:	4f01      	ldr	r7, [pc, #4]	; (800e484 <pow+0xdc>)
 800e480:	2600      	movs	r6, #0
 800e482:	e7e2      	b.n	800e44a <pow+0xa2>
 800e484:	3ff00000 	.word	0x3ff00000

0800e488 <__ieee754_pow>:
 800e488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e48c:	ed2d 8b06 	vpush	{d8-d10}
 800e490:	b089      	sub	sp, #36	; 0x24
 800e492:	ed8d 1b00 	vstr	d1, [sp]
 800e496:	e9dd 2900 	ldrd	r2, r9, [sp]
 800e49a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800e49e:	ea58 0102 	orrs.w	r1, r8, r2
 800e4a2:	ec57 6b10 	vmov	r6, r7, d0
 800e4a6:	d115      	bne.n	800e4d4 <__ieee754_pow+0x4c>
 800e4a8:	19b3      	adds	r3, r6, r6
 800e4aa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800e4ae:	4152      	adcs	r2, r2
 800e4b0:	4299      	cmp	r1, r3
 800e4b2:	4b89      	ldr	r3, [pc, #548]	; (800e6d8 <__ieee754_pow+0x250>)
 800e4b4:	4193      	sbcs	r3, r2
 800e4b6:	f080 84d2 	bcs.w	800ee5e <__ieee754_pow+0x9d6>
 800e4ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e4be:	4630      	mov	r0, r6
 800e4c0:	4639      	mov	r1, r7
 800e4c2:	f7f1 fee3 	bl	800028c <__adddf3>
 800e4c6:	ec41 0b10 	vmov	d0, r0, r1
 800e4ca:	b009      	add	sp, #36	; 0x24
 800e4cc:	ecbd 8b06 	vpop	{d8-d10}
 800e4d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4d4:	4b81      	ldr	r3, [pc, #516]	; (800e6dc <__ieee754_pow+0x254>)
 800e4d6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800e4da:	429c      	cmp	r4, r3
 800e4dc:	ee10 aa10 	vmov	sl, s0
 800e4e0:	463d      	mov	r5, r7
 800e4e2:	dc06      	bgt.n	800e4f2 <__ieee754_pow+0x6a>
 800e4e4:	d101      	bne.n	800e4ea <__ieee754_pow+0x62>
 800e4e6:	2e00      	cmp	r6, #0
 800e4e8:	d1e7      	bne.n	800e4ba <__ieee754_pow+0x32>
 800e4ea:	4598      	cmp	r8, r3
 800e4ec:	dc01      	bgt.n	800e4f2 <__ieee754_pow+0x6a>
 800e4ee:	d10f      	bne.n	800e510 <__ieee754_pow+0x88>
 800e4f0:	b172      	cbz	r2, 800e510 <__ieee754_pow+0x88>
 800e4f2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800e4f6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800e4fa:	ea55 050a 	orrs.w	r5, r5, sl
 800e4fe:	d1dc      	bne.n	800e4ba <__ieee754_pow+0x32>
 800e500:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e504:	18db      	adds	r3, r3, r3
 800e506:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800e50a:	4152      	adcs	r2, r2
 800e50c:	429d      	cmp	r5, r3
 800e50e:	e7d0      	b.n	800e4b2 <__ieee754_pow+0x2a>
 800e510:	2d00      	cmp	r5, #0
 800e512:	da3b      	bge.n	800e58c <__ieee754_pow+0x104>
 800e514:	4b72      	ldr	r3, [pc, #456]	; (800e6e0 <__ieee754_pow+0x258>)
 800e516:	4598      	cmp	r8, r3
 800e518:	dc51      	bgt.n	800e5be <__ieee754_pow+0x136>
 800e51a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800e51e:	4598      	cmp	r8, r3
 800e520:	f340 84ac 	ble.w	800ee7c <__ieee754_pow+0x9f4>
 800e524:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e528:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e52c:	2b14      	cmp	r3, #20
 800e52e:	dd0f      	ble.n	800e550 <__ieee754_pow+0xc8>
 800e530:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e534:	fa22 f103 	lsr.w	r1, r2, r3
 800e538:	fa01 f303 	lsl.w	r3, r1, r3
 800e53c:	4293      	cmp	r3, r2
 800e53e:	f040 849d 	bne.w	800ee7c <__ieee754_pow+0x9f4>
 800e542:	f001 0101 	and.w	r1, r1, #1
 800e546:	f1c1 0302 	rsb	r3, r1, #2
 800e54a:	9304      	str	r3, [sp, #16]
 800e54c:	b182      	cbz	r2, 800e570 <__ieee754_pow+0xe8>
 800e54e:	e05f      	b.n	800e610 <__ieee754_pow+0x188>
 800e550:	2a00      	cmp	r2, #0
 800e552:	d15b      	bne.n	800e60c <__ieee754_pow+0x184>
 800e554:	f1c3 0314 	rsb	r3, r3, #20
 800e558:	fa48 f103 	asr.w	r1, r8, r3
 800e55c:	fa01 f303 	lsl.w	r3, r1, r3
 800e560:	4543      	cmp	r3, r8
 800e562:	f040 8488 	bne.w	800ee76 <__ieee754_pow+0x9ee>
 800e566:	f001 0101 	and.w	r1, r1, #1
 800e56a:	f1c1 0302 	rsb	r3, r1, #2
 800e56e:	9304      	str	r3, [sp, #16]
 800e570:	4b5c      	ldr	r3, [pc, #368]	; (800e6e4 <__ieee754_pow+0x25c>)
 800e572:	4598      	cmp	r8, r3
 800e574:	d132      	bne.n	800e5dc <__ieee754_pow+0x154>
 800e576:	f1b9 0f00 	cmp.w	r9, #0
 800e57a:	f280 8478 	bge.w	800ee6e <__ieee754_pow+0x9e6>
 800e57e:	4959      	ldr	r1, [pc, #356]	; (800e6e4 <__ieee754_pow+0x25c>)
 800e580:	4632      	mov	r2, r6
 800e582:	463b      	mov	r3, r7
 800e584:	2000      	movs	r0, #0
 800e586:	f7f2 f961 	bl	800084c <__aeabi_ddiv>
 800e58a:	e79c      	b.n	800e4c6 <__ieee754_pow+0x3e>
 800e58c:	2300      	movs	r3, #0
 800e58e:	9304      	str	r3, [sp, #16]
 800e590:	2a00      	cmp	r2, #0
 800e592:	d13d      	bne.n	800e610 <__ieee754_pow+0x188>
 800e594:	4b51      	ldr	r3, [pc, #324]	; (800e6dc <__ieee754_pow+0x254>)
 800e596:	4598      	cmp	r8, r3
 800e598:	d1ea      	bne.n	800e570 <__ieee754_pow+0xe8>
 800e59a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e59e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e5a2:	ea53 030a 	orrs.w	r3, r3, sl
 800e5a6:	f000 845a 	beq.w	800ee5e <__ieee754_pow+0x9d6>
 800e5aa:	4b4f      	ldr	r3, [pc, #316]	; (800e6e8 <__ieee754_pow+0x260>)
 800e5ac:	429c      	cmp	r4, r3
 800e5ae:	dd08      	ble.n	800e5c2 <__ieee754_pow+0x13a>
 800e5b0:	f1b9 0f00 	cmp.w	r9, #0
 800e5b4:	f2c0 8457 	blt.w	800ee66 <__ieee754_pow+0x9de>
 800e5b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e5bc:	e783      	b.n	800e4c6 <__ieee754_pow+0x3e>
 800e5be:	2302      	movs	r3, #2
 800e5c0:	e7e5      	b.n	800e58e <__ieee754_pow+0x106>
 800e5c2:	f1b9 0f00 	cmp.w	r9, #0
 800e5c6:	f04f 0000 	mov.w	r0, #0
 800e5ca:	f04f 0100 	mov.w	r1, #0
 800e5ce:	f6bf af7a 	bge.w	800e4c6 <__ieee754_pow+0x3e>
 800e5d2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e5d6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e5da:	e774      	b.n	800e4c6 <__ieee754_pow+0x3e>
 800e5dc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800e5e0:	d106      	bne.n	800e5f0 <__ieee754_pow+0x168>
 800e5e2:	4632      	mov	r2, r6
 800e5e4:	463b      	mov	r3, r7
 800e5e6:	4630      	mov	r0, r6
 800e5e8:	4639      	mov	r1, r7
 800e5ea:	f7f2 f805 	bl	80005f8 <__aeabi_dmul>
 800e5ee:	e76a      	b.n	800e4c6 <__ieee754_pow+0x3e>
 800e5f0:	4b3e      	ldr	r3, [pc, #248]	; (800e6ec <__ieee754_pow+0x264>)
 800e5f2:	4599      	cmp	r9, r3
 800e5f4:	d10c      	bne.n	800e610 <__ieee754_pow+0x188>
 800e5f6:	2d00      	cmp	r5, #0
 800e5f8:	db0a      	blt.n	800e610 <__ieee754_pow+0x188>
 800e5fa:	ec47 6b10 	vmov	d0, r6, r7
 800e5fe:	b009      	add	sp, #36	; 0x24
 800e600:	ecbd 8b06 	vpop	{d8-d10}
 800e604:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e608:	f000 bc6c 	b.w	800eee4 <__ieee754_sqrt>
 800e60c:	2300      	movs	r3, #0
 800e60e:	9304      	str	r3, [sp, #16]
 800e610:	ec47 6b10 	vmov	d0, r6, r7
 800e614:	f000 fd48 	bl	800f0a8 <fabs>
 800e618:	ec51 0b10 	vmov	r0, r1, d0
 800e61c:	f1ba 0f00 	cmp.w	sl, #0
 800e620:	d129      	bne.n	800e676 <__ieee754_pow+0x1ee>
 800e622:	b124      	cbz	r4, 800e62e <__ieee754_pow+0x1a6>
 800e624:	4b2f      	ldr	r3, [pc, #188]	; (800e6e4 <__ieee754_pow+0x25c>)
 800e626:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800e62a:	429a      	cmp	r2, r3
 800e62c:	d123      	bne.n	800e676 <__ieee754_pow+0x1ee>
 800e62e:	f1b9 0f00 	cmp.w	r9, #0
 800e632:	da05      	bge.n	800e640 <__ieee754_pow+0x1b8>
 800e634:	4602      	mov	r2, r0
 800e636:	460b      	mov	r3, r1
 800e638:	2000      	movs	r0, #0
 800e63a:	492a      	ldr	r1, [pc, #168]	; (800e6e4 <__ieee754_pow+0x25c>)
 800e63c:	f7f2 f906 	bl	800084c <__aeabi_ddiv>
 800e640:	2d00      	cmp	r5, #0
 800e642:	f6bf af40 	bge.w	800e4c6 <__ieee754_pow+0x3e>
 800e646:	9b04      	ldr	r3, [sp, #16]
 800e648:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e64c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e650:	4323      	orrs	r3, r4
 800e652:	d108      	bne.n	800e666 <__ieee754_pow+0x1de>
 800e654:	4602      	mov	r2, r0
 800e656:	460b      	mov	r3, r1
 800e658:	4610      	mov	r0, r2
 800e65a:	4619      	mov	r1, r3
 800e65c:	f7f1 fe14 	bl	8000288 <__aeabi_dsub>
 800e660:	4602      	mov	r2, r0
 800e662:	460b      	mov	r3, r1
 800e664:	e78f      	b.n	800e586 <__ieee754_pow+0xfe>
 800e666:	9b04      	ldr	r3, [sp, #16]
 800e668:	2b01      	cmp	r3, #1
 800e66a:	f47f af2c 	bne.w	800e4c6 <__ieee754_pow+0x3e>
 800e66e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e672:	4619      	mov	r1, r3
 800e674:	e727      	b.n	800e4c6 <__ieee754_pow+0x3e>
 800e676:	0feb      	lsrs	r3, r5, #31
 800e678:	3b01      	subs	r3, #1
 800e67a:	9306      	str	r3, [sp, #24]
 800e67c:	9a06      	ldr	r2, [sp, #24]
 800e67e:	9b04      	ldr	r3, [sp, #16]
 800e680:	4313      	orrs	r3, r2
 800e682:	d102      	bne.n	800e68a <__ieee754_pow+0x202>
 800e684:	4632      	mov	r2, r6
 800e686:	463b      	mov	r3, r7
 800e688:	e7e6      	b.n	800e658 <__ieee754_pow+0x1d0>
 800e68a:	4b19      	ldr	r3, [pc, #100]	; (800e6f0 <__ieee754_pow+0x268>)
 800e68c:	4598      	cmp	r8, r3
 800e68e:	f340 80fb 	ble.w	800e888 <__ieee754_pow+0x400>
 800e692:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e696:	4598      	cmp	r8, r3
 800e698:	4b13      	ldr	r3, [pc, #76]	; (800e6e8 <__ieee754_pow+0x260>)
 800e69a:	dd0c      	ble.n	800e6b6 <__ieee754_pow+0x22e>
 800e69c:	429c      	cmp	r4, r3
 800e69e:	dc0f      	bgt.n	800e6c0 <__ieee754_pow+0x238>
 800e6a0:	f1b9 0f00 	cmp.w	r9, #0
 800e6a4:	da0f      	bge.n	800e6c6 <__ieee754_pow+0x23e>
 800e6a6:	2000      	movs	r0, #0
 800e6a8:	b009      	add	sp, #36	; 0x24
 800e6aa:	ecbd 8b06 	vpop	{d8-d10}
 800e6ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6b2:	f000 bcf0 	b.w	800f096 <__math_oflow>
 800e6b6:	429c      	cmp	r4, r3
 800e6b8:	dbf2      	blt.n	800e6a0 <__ieee754_pow+0x218>
 800e6ba:	4b0a      	ldr	r3, [pc, #40]	; (800e6e4 <__ieee754_pow+0x25c>)
 800e6bc:	429c      	cmp	r4, r3
 800e6be:	dd19      	ble.n	800e6f4 <__ieee754_pow+0x26c>
 800e6c0:	f1b9 0f00 	cmp.w	r9, #0
 800e6c4:	dcef      	bgt.n	800e6a6 <__ieee754_pow+0x21e>
 800e6c6:	2000      	movs	r0, #0
 800e6c8:	b009      	add	sp, #36	; 0x24
 800e6ca:	ecbd 8b06 	vpop	{d8-d10}
 800e6ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6d2:	f000 bcd7 	b.w	800f084 <__math_uflow>
 800e6d6:	bf00      	nop
 800e6d8:	fff00000 	.word	0xfff00000
 800e6dc:	7ff00000 	.word	0x7ff00000
 800e6e0:	433fffff 	.word	0x433fffff
 800e6e4:	3ff00000 	.word	0x3ff00000
 800e6e8:	3fefffff 	.word	0x3fefffff
 800e6ec:	3fe00000 	.word	0x3fe00000
 800e6f0:	41e00000 	.word	0x41e00000
 800e6f4:	4b60      	ldr	r3, [pc, #384]	; (800e878 <__ieee754_pow+0x3f0>)
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	f7f1 fdc6 	bl	8000288 <__aeabi_dsub>
 800e6fc:	a354      	add	r3, pc, #336	; (adr r3, 800e850 <__ieee754_pow+0x3c8>)
 800e6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e702:	4604      	mov	r4, r0
 800e704:	460d      	mov	r5, r1
 800e706:	f7f1 ff77 	bl	80005f8 <__aeabi_dmul>
 800e70a:	a353      	add	r3, pc, #332	; (adr r3, 800e858 <__ieee754_pow+0x3d0>)
 800e70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e710:	4606      	mov	r6, r0
 800e712:	460f      	mov	r7, r1
 800e714:	4620      	mov	r0, r4
 800e716:	4629      	mov	r1, r5
 800e718:	f7f1 ff6e 	bl	80005f8 <__aeabi_dmul>
 800e71c:	4b57      	ldr	r3, [pc, #348]	; (800e87c <__ieee754_pow+0x3f4>)
 800e71e:	4682      	mov	sl, r0
 800e720:	468b      	mov	fp, r1
 800e722:	2200      	movs	r2, #0
 800e724:	4620      	mov	r0, r4
 800e726:	4629      	mov	r1, r5
 800e728:	f7f1 ff66 	bl	80005f8 <__aeabi_dmul>
 800e72c:	4602      	mov	r2, r0
 800e72e:	460b      	mov	r3, r1
 800e730:	a14b      	add	r1, pc, #300	; (adr r1, 800e860 <__ieee754_pow+0x3d8>)
 800e732:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e736:	f7f1 fda7 	bl	8000288 <__aeabi_dsub>
 800e73a:	4622      	mov	r2, r4
 800e73c:	462b      	mov	r3, r5
 800e73e:	f7f1 ff5b 	bl	80005f8 <__aeabi_dmul>
 800e742:	4602      	mov	r2, r0
 800e744:	460b      	mov	r3, r1
 800e746:	2000      	movs	r0, #0
 800e748:	494d      	ldr	r1, [pc, #308]	; (800e880 <__ieee754_pow+0x3f8>)
 800e74a:	f7f1 fd9d 	bl	8000288 <__aeabi_dsub>
 800e74e:	4622      	mov	r2, r4
 800e750:	4680      	mov	r8, r0
 800e752:	4689      	mov	r9, r1
 800e754:	462b      	mov	r3, r5
 800e756:	4620      	mov	r0, r4
 800e758:	4629      	mov	r1, r5
 800e75a:	f7f1 ff4d 	bl	80005f8 <__aeabi_dmul>
 800e75e:	4602      	mov	r2, r0
 800e760:	460b      	mov	r3, r1
 800e762:	4640      	mov	r0, r8
 800e764:	4649      	mov	r1, r9
 800e766:	f7f1 ff47 	bl	80005f8 <__aeabi_dmul>
 800e76a:	a33f      	add	r3, pc, #252	; (adr r3, 800e868 <__ieee754_pow+0x3e0>)
 800e76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e770:	f7f1 ff42 	bl	80005f8 <__aeabi_dmul>
 800e774:	4602      	mov	r2, r0
 800e776:	460b      	mov	r3, r1
 800e778:	4650      	mov	r0, sl
 800e77a:	4659      	mov	r1, fp
 800e77c:	f7f1 fd84 	bl	8000288 <__aeabi_dsub>
 800e780:	4602      	mov	r2, r0
 800e782:	460b      	mov	r3, r1
 800e784:	4680      	mov	r8, r0
 800e786:	4689      	mov	r9, r1
 800e788:	4630      	mov	r0, r6
 800e78a:	4639      	mov	r1, r7
 800e78c:	f7f1 fd7e 	bl	800028c <__adddf3>
 800e790:	2000      	movs	r0, #0
 800e792:	4632      	mov	r2, r6
 800e794:	463b      	mov	r3, r7
 800e796:	4604      	mov	r4, r0
 800e798:	460d      	mov	r5, r1
 800e79a:	f7f1 fd75 	bl	8000288 <__aeabi_dsub>
 800e79e:	4602      	mov	r2, r0
 800e7a0:	460b      	mov	r3, r1
 800e7a2:	4640      	mov	r0, r8
 800e7a4:	4649      	mov	r1, r9
 800e7a6:	f7f1 fd6f 	bl	8000288 <__aeabi_dsub>
 800e7aa:	9b04      	ldr	r3, [sp, #16]
 800e7ac:	9a06      	ldr	r2, [sp, #24]
 800e7ae:	3b01      	subs	r3, #1
 800e7b0:	4313      	orrs	r3, r2
 800e7b2:	4682      	mov	sl, r0
 800e7b4:	468b      	mov	fp, r1
 800e7b6:	f040 81e7 	bne.w	800eb88 <__ieee754_pow+0x700>
 800e7ba:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800e870 <__ieee754_pow+0x3e8>
 800e7be:	eeb0 8a47 	vmov.f32	s16, s14
 800e7c2:	eef0 8a67 	vmov.f32	s17, s15
 800e7c6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e7ca:	2600      	movs	r6, #0
 800e7cc:	4632      	mov	r2, r6
 800e7ce:	463b      	mov	r3, r7
 800e7d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e7d4:	f7f1 fd58 	bl	8000288 <__aeabi_dsub>
 800e7d8:	4622      	mov	r2, r4
 800e7da:	462b      	mov	r3, r5
 800e7dc:	f7f1 ff0c 	bl	80005f8 <__aeabi_dmul>
 800e7e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e7e4:	4680      	mov	r8, r0
 800e7e6:	4689      	mov	r9, r1
 800e7e8:	4650      	mov	r0, sl
 800e7ea:	4659      	mov	r1, fp
 800e7ec:	f7f1 ff04 	bl	80005f8 <__aeabi_dmul>
 800e7f0:	4602      	mov	r2, r0
 800e7f2:	460b      	mov	r3, r1
 800e7f4:	4640      	mov	r0, r8
 800e7f6:	4649      	mov	r1, r9
 800e7f8:	f7f1 fd48 	bl	800028c <__adddf3>
 800e7fc:	4632      	mov	r2, r6
 800e7fe:	463b      	mov	r3, r7
 800e800:	4680      	mov	r8, r0
 800e802:	4689      	mov	r9, r1
 800e804:	4620      	mov	r0, r4
 800e806:	4629      	mov	r1, r5
 800e808:	f7f1 fef6 	bl	80005f8 <__aeabi_dmul>
 800e80c:	460b      	mov	r3, r1
 800e80e:	4604      	mov	r4, r0
 800e810:	460d      	mov	r5, r1
 800e812:	4602      	mov	r2, r0
 800e814:	4649      	mov	r1, r9
 800e816:	4640      	mov	r0, r8
 800e818:	f7f1 fd38 	bl	800028c <__adddf3>
 800e81c:	4b19      	ldr	r3, [pc, #100]	; (800e884 <__ieee754_pow+0x3fc>)
 800e81e:	4299      	cmp	r1, r3
 800e820:	ec45 4b19 	vmov	d9, r4, r5
 800e824:	4606      	mov	r6, r0
 800e826:	460f      	mov	r7, r1
 800e828:	468b      	mov	fp, r1
 800e82a:	f340 82f1 	ble.w	800ee10 <__ieee754_pow+0x988>
 800e82e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e832:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e836:	4303      	orrs	r3, r0
 800e838:	f000 81e4 	beq.w	800ec04 <__ieee754_pow+0x77c>
 800e83c:	ec51 0b18 	vmov	r0, r1, d8
 800e840:	2200      	movs	r2, #0
 800e842:	2300      	movs	r3, #0
 800e844:	f7f2 f94a 	bl	8000adc <__aeabi_dcmplt>
 800e848:	3800      	subs	r0, #0
 800e84a:	bf18      	it	ne
 800e84c:	2001      	movne	r0, #1
 800e84e:	e72b      	b.n	800e6a8 <__ieee754_pow+0x220>
 800e850:	60000000 	.word	0x60000000
 800e854:	3ff71547 	.word	0x3ff71547
 800e858:	f85ddf44 	.word	0xf85ddf44
 800e85c:	3e54ae0b 	.word	0x3e54ae0b
 800e860:	55555555 	.word	0x55555555
 800e864:	3fd55555 	.word	0x3fd55555
 800e868:	652b82fe 	.word	0x652b82fe
 800e86c:	3ff71547 	.word	0x3ff71547
 800e870:	00000000 	.word	0x00000000
 800e874:	bff00000 	.word	0xbff00000
 800e878:	3ff00000 	.word	0x3ff00000
 800e87c:	3fd00000 	.word	0x3fd00000
 800e880:	3fe00000 	.word	0x3fe00000
 800e884:	408fffff 	.word	0x408fffff
 800e888:	4bd5      	ldr	r3, [pc, #852]	; (800ebe0 <__ieee754_pow+0x758>)
 800e88a:	402b      	ands	r3, r5
 800e88c:	2200      	movs	r2, #0
 800e88e:	b92b      	cbnz	r3, 800e89c <__ieee754_pow+0x414>
 800e890:	4bd4      	ldr	r3, [pc, #848]	; (800ebe4 <__ieee754_pow+0x75c>)
 800e892:	f7f1 feb1 	bl	80005f8 <__aeabi_dmul>
 800e896:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e89a:	460c      	mov	r4, r1
 800e89c:	1523      	asrs	r3, r4, #20
 800e89e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e8a2:	4413      	add	r3, r2
 800e8a4:	9305      	str	r3, [sp, #20]
 800e8a6:	4bd0      	ldr	r3, [pc, #832]	; (800ebe8 <__ieee754_pow+0x760>)
 800e8a8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e8ac:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e8b0:	429c      	cmp	r4, r3
 800e8b2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e8b6:	dd08      	ble.n	800e8ca <__ieee754_pow+0x442>
 800e8b8:	4bcc      	ldr	r3, [pc, #816]	; (800ebec <__ieee754_pow+0x764>)
 800e8ba:	429c      	cmp	r4, r3
 800e8bc:	f340 8162 	ble.w	800eb84 <__ieee754_pow+0x6fc>
 800e8c0:	9b05      	ldr	r3, [sp, #20]
 800e8c2:	3301      	adds	r3, #1
 800e8c4:	9305      	str	r3, [sp, #20]
 800e8c6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e8ca:	2400      	movs	r4, #0
 800e8cc:	00e3      	lsls	r3, r4, #3
 800e8ce:	9307      	str	r3, [sp, #28]
 800e8d0:	4bc7      	ldr	r3, [pc, #796]	; (800ebf0 <__ieee754_pow+0x768>)
 800e8d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e8d6:	ed93 7b00 	vldr	d7, [r3]
 800e8da:	4629      	mov	r1, r5
 800e8dc:	ec53 2b17 	vmov	r2, r3, d7
 800e8e0:	eeb0 9a47 	vmov.f32	s18, s14
 800e8e4:	eef0 9a67 	vmov.f32	s19, s15
 800e8e8:	4682      	mov	sl, r0
 800e8ea:	f7f1 fccd 	bl	8000288 <__aeabi_dsub>
 800e8ee:	4652      	mov	r2, sl
 800e8f0:	4606      	mov	r6, r0
 800e8f2:	460f      	mov	r7, r1
 800e8f4:	462b      	mov	r3, r5
 800e8f6:	ec51 0b19 	vmov	r0, r1, d9
 800e8fa:	f7f1 fcc7 	bl	800028c <__adddf3>
 800e8fe:	4602      	mov	r2, r0
 800e900:	460b      	mov	r3, r1
 800e902:	2000      	movs	r0, #0
 800e904:	49bb      	ldr	r1, [pc, #748]	; (800ebf4 <__ieee754_pow+0x76c>)
 800e906:	f7f1 ffa1 	bl	800084c <__aeabi_ddiv>
 800e90a:	ec41 0b1a 	vmov	d10, r0, r1
 800e90e:	4602      	mov	r2, r0
 800e910:	460b      	mov	r3, r1
 800e912:	4630      	mov	r0, r6
 800e914:	4639      	mov	r1, r7
 800e916:	f7f1 fe6f 	bl	80005f8 <__aeabi_dmul>
 800e91a:	2300      	movs	r3, #0
 800e91c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e920:	9302      	str	r3, [sp, #8]
 800e922:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e926:	46ab      	mov	fp, r5
 800e928:	106d      	asrs	r5, r5, #1
 800e92a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e92e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e932:	ec41 0b18 	vmov	d8, r0, r1
 800e936:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800e93a:	2200      	movs	r2, #0
 800e93c:	4640      	mov	r0, r8
 800e93e:	4649      	mov	r1, r9
 800e940:	4614      	mov	r4, r2
 800e942:	461d      	mov	r5, r3
 800e944:	f7f1 fe58 	bl	80005f8 <__aeabi_dmul>
 800e948:	4602      	mov	r2, r0
 800e94a:	460b      	mov	r3, r1
 800e94c:	4630      	mov	r0, r6
 800e94e:	4639      	mov	r1, r7
 800e950:	f7f1 fc9a 	bl	8000288 <__aeabi_dsub>
 800e954:	ec53 2b19 	vmov	r2, r3, d9
 800e958:	4606      	mov	r6, r0
 800e95a:	460f      	mov	r7, r1
 800e95c:	4620      	mov	r0, r4
 800e95e:	4629      	mov	r1, r5
 800e960:	f7f1 fc92 	bl	8000288 <__aeabi_dsub>
 800e964:	4602      	mov	r2, r0
 800e966:	460b      	mov	r3, r1
 800e968:	4650      	mov	r0, sl
 800e96a:	4659      	mov	r1, fp
 800e96c:	f7f1 fc8c 	bl	8000288 <__aeabi_dsub>
 800e970:	4642      	mov	r2, r8
 800e972:	464b      	mov	r3, r9
 800e974:	f7f1 fe40 	bl	80005f8 <__aeabi_dmul>
 800e978:	4602      	mov	r2, r0
 800e97a:	460b      	mov	r3, r1
 800e97c:	4630      	mov	r0, r6
 800e97e:	4639      	mov	r1, r7
 800e980:	f7f1 fc82 	bl	8000288 <__aeabi_dsub>
 800e984:	ec53 2b1a 	vmov	r2, r3, d10
 800e988:	f7f1 fe36 	bl	80005f8 <__aeabi_dmul>
 800e98c:	ec53 2b18 	vmov	r2, r3, d8
 800e990:	ec41 0b19 	vmov	d9, r0, r1
 800e994:	ec51 0b18 	vmov	r0, r1, d8
 800e998:	f7f1 fe2e 	bl	80005f8 <__aeabi_dmul>
 800e99c:	a37c      	add	r3, pc, #496	; (adr r3, 800eb90 <__ieee754_pow+0x708>)
 800e99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9a2:	4604      	mov	r4, r0
 800e9a4:	460d      	mov	r5, r1
 800e9a6:	f7f1 fe27 	bl	80005f8 <__aeabi_dmul>
 800e9aa:	a37b      	add	r3, pc, #492	; (adr r3, 800eb98 <__ieee754_pow+0x710>)
 800e9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9b0:	f7f1 fc6c 	bl	800028c <__adddf3>
 800e9b4:	4622      	mov	r2, r4
 800e9b6:	462b      	mov	r3, r5
 800e9b8:	f7f1 fe1e 	bl	80005f8 <__aeabi_dmul>
 800e9bc:	a378      	add	r3, pc, #480	; (adr r3, 800eba0 <__ieee754_pow+0x718>)
 800e9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9c2:	f7f1 fc63 	bl	800028c <__adddf3>
 800e9c6:	4622      	mov	r2, r4
 800e9c8:	462b      	mov	r3, r5
 800e9ca:	f7f1 fe15 	bl	80005f8 <__aeabi_dmul>
 800e9ce:	a376      	add	r3, pc, #472	; (adr r3, 800eba8 <__ieee754_pow+0x720>)
 800e9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9d4:	f7f1 fc5a 	bl	800028c <__adddf3>
 800e9d8:	4622      	mov	r2, r4
 800e9da:	462b      	mov	r3, r5
 800e9dc:	f7f1 fe0c 	bl	80005f8 <__aeabi_dmul>
 800e9e0:	a373      	add	r3, pc, #460	; (adr r3, 800ebb0 <__ieee754_pow+0x728>)
 800e9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9e6:	f7f1 fc51 	bl	800028c <__adddf3>
 800e9ea:	4622      	mov	r2, r4
 800e9ec:	462b      	mov	r3, r5
 800e9ee:	f7f1 fe03 	bl	80005f8 <__aeabi_dmul>
 800e9f2:	a371      	add	r3, pc, #452	; (adr r3, 800ebb8 <__ieee754_pow+0x730>)
 800e9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9f8:	f7f1 fc48 	bl	800028c <__adddf3>
 800e9fc:	4622      	mov	r2, r4
 800e9fe:	4606      	mov	r6, r0
 800ea00:	460f      	mov	r7, r1
 800ea02:	462b      	mov	r3, r5
 800ea04:	4620      	mov	r0, r4
 800ea06:	4629      	mov	r1, r5
 800ea08:	f7f1 fdf6 	bl	80005f8 <__aeabi_dmul>
 800ea0c:	4602      	mov	r2, r0
 800ea0e:	460b      	mov	r3, r1
 800ea10:	4630      	mov	r0, r6
 800ea12:	4639      	mov	r1, r7
 800ea14:	f7f1 fdf0 	bl	80005f8 <__aeabi_dmul>
 800ea18:	4642      	mov	r2, r8
 800ea1a:	4604      	mov	r4, r0
 800ea1c:	460d      	mov	r5, r1
 800ea1e:	464b      	mov	r3, r9
 800ea20:	ec51 0b18 	vmov	r0, r1, d8
 800ea24:	f7f1 fc32 	bl	800028c <__adddf3>
 800ea28:	ec53 2b19 	vmov	r2, r3, d9
 800ea2c:	f7f1 fde4 	bl	80005f8 <__aeabi_dmul>
 800ea30:	4622      	mov	r2, r4
 800ea32:	462b      	mov	r3, r5
 800ea34:	f7f1 fc2a 	bl	800028c <__adddf3>
 800ea38:	4642      	mov	r2, r8
 800ea3a:	4682      	mov	sl, r0
 800ea3c:	468b      	mov	fp, r1
 800ea3e:	464b      	mov	r3, r9
 800ea40:	4640      	mov	r0, r8
 800ea42:	4649      	mov	r1, r9
 800ea44:	f7f1 fdd8 	bl	80005f8 <__aeabi_dmul>
 800ea48:	4b6b      	ldr	r3, [pc, #428]	; (800ebf8 <__ieee754_pow+0x770>)
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	4606      	mov	r6, r0
 800ea4e:	460f      	mov	r7, r1
 800ea50:	f7f1 fc1c 	bl	800028c <__adddf3>
 800ea54:	4652      	mov	r2, sl
 800ea56:	465b      	mov	r3, fp
 800ea58:	f7f1 fc18 	bl	800028c <__adddf3>
 800ea5c:	2000      	movs	r0, #0
 800ea5e:	4604      	mov	r4, r0
 800ea60:	460d      	mov	r5, r1
 800ea62:	4602      	mov	r2, r0
 800ea64:	460b      	mov	r3, r1
 800ea66:	4640      	mov	r0, r8
 800ea68:	4649      	mov	r1, r9
 800ea6a:	f7f1 fdc5 	bl	80005f8 <__aeabi_dmul>
 800ea6e:	4b62      	ldr	r3, [pc, #392]	; (800ebf8 <__ieee754_pow+0x770>)
 800ea70:	4680      	mov	r8, r0
 800ea72:	4689      	mov	r9, r1
 800ea74:	2200      	movs	r2, #0
 800ea76:	4620      	mov	r0, r4
 800ea78:	4629      	mov	r1, r5
 800ea7a:	f7f1 fc05 	bl	8000288 <__aeabi_dsub>
 800ea7e:	4632      	mov	r2, r6
 800ea80:	463b      	mov	r3, r7
 800ea82:	f7f1 fc01 	bl	8000288 <__aeabi_dsub>
 800ea86:	4602      	mov	r2, r0
 800ea88:	460b      	mov	r3, r1
 800ea8a:	4650      	mov	r0, sl
 800ea8c:	4659      	mov	r1, fp
 800ea8e:	f7f1 fbfb 	bl	8000288 <__aeabi_dsub>
 800ea92:	ec53 2b18 	vmov	r2, r3, d8
 800ea96:	f7f1 fdaf 	bl	80005f8 <__aeabi_dmul>
 800ea9a:	4622      	mov	r2, r4
 800ea9c:	4606      	mov	r6, r0
 800ea9e:	460f      	mov	r7, r1
 800eaa0:	462b      	mov	r3, r5
 800eaa2:	ec51 0b19 	vmov	r0, r1, d9
 800eaa6:	f7f1 fda7 	bl	80005f8 <__aeabi_dmul>
 800eaaa:	4602      	mov	r2, r0
 800eaac:	460b      	mov	r3, r1
 800eaae:	4630      	mov	r0, r6
 800eab0:	4639      	mov	r1, r7
 800eab2:	f7f1 fbeb 	bl	800028c <__adddf3>
 800eab6:	4606      	mov	r6, r0
 800eab8:	460f      	mov	r7, r1
 800eaba:	4602      	mov	r2, r0
 800eabc:	460b      	mov	r3, r1
 800eabe:	4640      	mov	r0, r8
 800eac0:	4649      	mov	r1, r9
 800eac2:	f7f1 fbe3 	bl	800028c <__adddf3>
 800eac6:	a33e      	add	r3, pc, #248	; (adr r3, 800ebc0 <__ieee754_pow+0x738>)
 800eac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eacc:	2000      	movs	r0, #0
 800eace:	4604      	mov	r4, r0
 800ead0:	460d      	mov	r5, r1
 800ead2:	f7f1 fd91 	bl	80005f8 <__aeabi_dmul>
 800ead6:	4642      	mov	r2, r8
 800ead8:	ec41 0b18 	vmov	d8, r0, r1
 800eadc:	464b      	mov	r3, r9
 800eade:	4620      	mov	r0, r4
 800eae0:	4629      	mov	r1, r5
 800eae2:	f7f1 fbd1 	bl	8000288 <__aeabi_dsub>
 800eae6:	4602      	mov	r2, r0
 800eae8:	460b      	mov	r3, r1
 800eaea:	4630      	mov	r0, r6
 800eaec:	4639      	mov	r1, r7
 800eaee:	f7f1 fbcb 	bl	8000288 <__aeabi_dsub>
 800eaf2:	a335      	add	r3, pc, #212	; (adr r3, 800ebc8 <__ieee754_pow+0x740>)
 800eaf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaf8:	f7f1 fd7e 	bl	80005f8 <__aeabi_dmul>
 800eafc:	a334      	add	r3, pc, #208	; (adr r3, 800ebd0 <__ieee754_pow+0x748>)
 800eafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb02:	4606      	mov	r6, r0
 800eb04:	460f      	mov	r7, r1
 800eb06:	4620      	mov	r0, r4
 800eb08:	4629      	mov	r1, r5
 800eb0a:	f7f1 fd75 	bl	80005f8 <__aeabi_dmul>
 800eb0e:	4602      	mov	r2, r0
 800eb10:	460b      	mov	r3, r1
 800eb12:	4630      	mov	r0, r6
 800eb14:	4639      	mov	r1, r7
 800eb16:	f7f1 fbb9 	bl	800028c <__adddf3>
 800eb1a:	9a07      	ldr	r2, [sp, #28]
 800eb1c:	4b37      	ldr	r3, [pc, #220]	; (800ebfc <__ieee754_pow+0x774>)
 800eb1e:	4413      	add	r3, r2
 800eb20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb24:	f7f1 fbb2 	bl	800028c <__adddf3>
 800eb28:	4682      	mov	sl, r0
 800eb2a:	9805      	ldr	r0, [sp, #20]
 800eb2c:	468b      	mov	fp, r1
 800eb2e:	f7f1 fcf9 	bl	8000524 <__aeabi_i2d>
 800eb32:	9a07      	ldr	r2, [sp, #28]
 800eb34:	4b32      	ldr	r3, [pc, #200]	; (800ec00 <__ieee754_pow+0x778>)
 800eb36:	4413      	add	r3, r2
 800eb38:	e9d3 8900 	ldrd	r8, r9, [r3]
 800eb3c:	4606      	mov	r6, r0
 800eb3e:	460f      	mov	r7, r1
 800eb40:	4652      	mov	r2, sl
 800eb42:	465b      	mov	r3, fp
 800eb44:	ec51 0b18 	vmov	r0, r1, d8
 800eb48:	f7f1 fba0 	bl	800028c <__adddf3>
 800eb4c:	4642      	mov	r2, r8
 800eb4e:	464b      	mov	r3, r9
 800eb50:	f7f1 fb9c 	bl	800028c <__adddf3>
 800eb54:	4632      	mov	r2, r6
 800eb56:	463b      	mov	r3, r7
 800eb58:	f7f1 fb98 	bl	800028c <__adddf3>
 800eb5c:	2000      	movs	r0, #0
 800eb5e:	4632      	mov	r2, r6
 800eb60:	463b      	mov	r3, r7
 800eb62:	4604      	mov	r4, r0
 800eb64:	460d      	mov	r5, r1
 800eb66:	f7f1 fb8f 	bl	8000288 <__aeabi_dsub>
 800eb6a:	4642      	mov	r2, r8
 800eb6c:	464b      	mov	r3, r9
 800eb6e:	f7f1 fb8b 	bl	8000288 <__aeabi_dsub>
 800eb72:	ec53 2b18 	vmov	r2, r3, d8
 800eb76:	f7f1 fb87 	bl	8000288 <__aeabi_dsub>
 800eb7a:	4602      	mov	r2, r0
 800eb7c:	460b      	mov	r3, r1
 800eb7e:	4650      	mov	r0, sl
 800eb80:	4659      	mov	r1, fp
 800eb82:	e610      	b.n	800e7a6 <__ieee754_pow+0x31e>
 800eb84:	2401      	movs	r4, #1
 800eb86:	e6a1      	b.n	800e8cc <__ieee754_pow+0x444>
 800eb88:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800ebd8 <__ieee754_pow+0x750>
 800eb8c:	e617      	b.n	800e7be <__ieee754_pow+0x336>
 800eb8e:	bf00      	nop
 800eb90:	4a454eef 	.word	0x4a454eef
 800eb94:	3fca7e28 	.word	0x3fca7e28
 800eb98:	93c9db65 	.word	0x93c9db65
 800eb9c:	3fcd864a 	.word	0x3fcd864a
 800eba0:	a91d4101 	.word	0xa91d4101
 800eba4:	3fd17460 	.word	0x3fd17460
 800eba8:	518f264d 	.word	0x518f264d
 800ebac:	3fd55555 	.word	0x3fd55555
 800ebb0:	db6fabff 	.word	0xdb6fabff
 800ebb4:	3fdb6db6 	.word	0x3fdb6db6
 800ebb8:	33333303 	.word	0x33333303
 800ebbc:	3fe33333 	.word	0x3fe33333
 800ebc0:	e0000000 	.word	0xe0000000
 800ebc4:	3feec709 	.word	0x3feec709
 800ebc8:	dc3a03fd 	.word	0xdc3a03fd
 800ebcc:	3feec709 	.word	0x3feec709
 800ebd0:	145b01f5 	.word	0x145b01f5
 800ebd4:	be3e2fe0 	.word	0xbe3e2fe0
 800ebd8:	00000000 	.word	0x00000000
 800ebdc:	3ff00000 	.word	0x3ff00000
 800ebe0:	7ff00000 	.word	0x7ff00000
 800ebe4:	43400000 	.word	0x43400000
 800ebe8:	0003988e 	.word	0x0003988e
 800ebec:	000bb679 	.word	0x000bb679
 800ebf0:	0801da20 	.word	0x0801da20
 800ebf4:	3ff00000 	.word	0x3ff00000
 800ebf8:	40080000 	.word	0x40080000
 800ebfc:	0801da40 	.word	0x0801da40
 800ec00:	0801da30 	.word	0x0801da30
 800ec04:	a3b5      	add	r3, pc, #724	; (adr r3, 800eedc <__ieee754_pow+0xa54>)
 800ec06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec0a:	4640      	mov	r0, r8
 800ec0c:	4649      	mov	r1, r9
 800ec0e:	f7f1 fb3d 	bl	800028c <__adddf3>
 800ec12:	4622      	mov	r2, r4
 800ec14:	ec41 0b1a 	vmov	d10, r0, r1
 800ec18:	462b      	mov	r3, r5
 800ec1a:	4630      	mov	r0, r6
 800ec1c:	4639      	mov	r1, r7
 800ec1e:	f7f1 fb33 	bl	8000288 <__aeabi_dsub>
 800ec22:	4602      	mov	r2, r0
 800ec24:	460b      	mov	r3, r1
 800ec26:	ec51 0b1a 	vmov	r0, r1, d10
 800ec2a:	f7f1 ff75 	bl	8000b18 <__aeabi_dcmpgt>
 800ec2e:	2800      	cmp	r0, #0
 800ec30:	f47f ae04 	bne.w	800e83c <__ieee754_pow+0x3b4>
 800ec34:	4aa4      	ldr	r2, [pc, #656]	; (800eec8 <__ieee754_pow+0xa40>)
 800ec36:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ec3a:	4293      	cmp	r3, r2
 800ec3c:	f340 8108 	ble.w	800ee50 <__ieee754_pow+0x9c8>
 800ec40:	151b      	asrs	r3, r3, #20
 800ec42:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ec46:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ec4a:	fa4a f303 	asr.w	r3, sl, r3
 800ec4e:	445b      	add	r3, fp
 800ec50:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ec54:	4e9d      	ldr	r6, [pc, #628]	; (800eecc <__ieee754_pow+0xa44>)
 800ec56:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ec5a:	4116      	asrs	r6, r2
 800ec5c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ec60:	2000      	movs	r0, #0
 800ec62:	ea23 0106 	bic.w	r1, r3, r6
 800ec66:	f1c2 0214 	rsb	r2, r2, #20
 800ec6a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ec6e:	fa4a fa02 	asr.w	sl, sl, r2
 800ec72:	f1bb 0f00 	cmp.w	fp, #0
 800ec76:	4602      	mov	r2, r0
 800ec78:	460b      	mov	r3, r1
 800ec7a:	4620      	mov	r0, r4
 800ec7c:	4629      	mov	r1, r5
 800ec7e:	bfb8      	it	lt
 800ec80:	f1ca 0a00 	rsblt	sl, sl, #0
 800ec84:	f7f1 fb00 	bl	8000288 <__aeabi_dsub>
 800ec88:	ec41 0b19 	vmov	d9, r0, r1
 800ec8c:	4642      	mov	r2, r8
 800ec8e:	464b      	mov	r3, r9
 800ec90:	ec51 0b19 	vmov	r0, r1, d9
 800ec94:	f7f1 fafa 	bl	800028c <__adddf3>
 800ec98:	a37b      	add	r3, pc, #492	; (adr r3, 800ee88 <__ieee754_pow+0xa00>)
 800ec9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec9e:	2000      	movs	r0, #0
 800eca0:	4604      	mov	r4, r0
 800eca2:	460d      	mov	r5, r1
 800eca4:	f7f1 fca8 	bl	80005f8 <__aeabi_dmul>
 800eca8:	ec53 2b19 	vmov	r2, r3, d9
 800ecac:	4606      	mov	r6, r0
 800ecae:	460f      	mov	r7, r1
 800ecb0:	4620      	mov	r0, r4
 800ecb2:	4629      	mov	r1, r5
 800ecb4:	f7f1 fae8 	bl	8000288 <__aeabi_dsub>
 800ecb8:	4602      	mov	r2, r0
 800ecba:	460b      	mov	r3, r1
 800ecbc:	4640      	mov	r0, r8
 800ecbe:	4649      	mov	r1, r9
 800ecc0:	f7f1 fae2 	bl	8000288 <__aeabi_dsub>
 800ecc4:	a372      	add	r3, pc, #456	; (adr r3, 800ee90 <__ieee754_pow+0xa08>)
 800ecc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecca:	f7f1 fc95 	bl	80005f8 <__aeabi_dmul>
 800ecce:	a372      	add	r3, pc, #456	; (adr r3, 800ee98 <__ieee754_pow+0xa10>)
 800ecd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecd4:	4680      	mov	r8, r0
 800ecd6:	4689      	mov	r9, r1
 800ecd8:	4620      	mov	r0, r4
 800ecda:	4629      	mov	r1, r5
 800ecdc:	f7f1 fc8c 	bl	80005f8 <__aeabi_dmul>
 800ece0:	4602      	mov	r2, r0
 800ece2:	460b      	mov	r3, r1
 800ece4:	4640      	mov	r0, r8
 800ece6:	4649      	mov	r1, r9
 800ece8:	f7f1 fad0 	bl	800028c <__adddf3>
 800ecec:	4604      	mov	r4, r0
 800ecee:	460d      	mov	r5, r1
 800ecf0:	4602      	mov	r2, r0
 800ecf2:	460b      	mov	r3, r1
 800ecf4:	4630      	mov	r0, r6
 800ecf6:	4639      	mov	r1, r7
 800ecf8:	f7f1 fac8 	bl	800028c <__adddf3>
 800ecfc:	4632      	mov	r2, r6
 800ecfe:	463b      	mov	r3, r7
 800ed00:	4680      	mov	r8, r0
 800ed02:	4689      	mov	r9, r1
 800ed04:	f7f1 fac0 	bl	8000288 <__aeabi_dsub>
 800ed08:	4602      	mov	r2, r0
 800ed0a:	460b      	mov	r3, r1
 800ed0c:	4620      	mov	r0, r4
 800ed0e:	4629      	mov	r1, r5
 800ed10:	f7f1 faba 	bl	8000288 <__aeabi_dsub>
 800ed14:	4642      	mov	r2, r8
 800ed16:	4606      	mov	r6, r0
 800ed18:	460f      	mov	r7, r1
 800ed1a:	464b      	mov	r3, r9
 800ed1c:	4640      	mov	r0, r8
 800ed1e:	4649      	mov	r1, r9
 800ed20:	f7f1 fc6a 	bl	80005f8 <__aeabi_dmul>
 800ed24:	a35e      	add	r3, pc, #376	; (adr r3, 800eea0 <__ieee754_pow+0xa18>)
 800ed26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed2a:	4604      	mov	r4, r0
 800ed2c:	460d      	mov	r5, r1
 800ed2e:	f7f1 fc63 	bl	80005f8 <__aeabi_dmul>
 800ed32:	a35d      	add	r3, pc, #372	; (adr r3, 800eea8 <__ieee754_pow+0xa20>)
 800ed34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed38:	f7f1 faa6 	bl	8000288 <__aeabi_dsub>
 800ed3c:	4622      	mov	r2, r4
 800ed3e:	462b      	mov	r3, r5
 800ed40:	f7f1 fc5a 	bl	80005f8 <__aeabi_dmul>
 800ed44:	a35a      	add	r3, pc, #360	; (adr r3, 800eeb0 <__ieee754_pow+0xa28>)
 800ed46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed4a:	f7f1 fa9f 	bl	800028c <__adddf3>
 800ed4e:	4622      	mov	r2, r4
 800ed50:	462b      	mov	r3, r5
 800ed52:	f7f1 fc51 	bl	80005f8 <__aeabi_dmul>
 800ed56:	a358      	add	r3, pc, #352	; (adr r3, 800eeb8 <__ieee754_pow+0xa30>)
 800ed58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed5c:	f7f1 fa94 	bl	8000288 <__aeabi_dsub>
 800ed60:	4622      	mov	r2, r4
 800ed62:	462b      	mov	r3, r5
 800ed64:	f7f1 fc48 	bl	80005f8 <__aeabi_dmul>
 800ed68:	a355      	add	r3, pc, #340	; (adr r3, 800eec0 <__ieee754_pow+0xa38>)
 800ed6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed6e:	f7f1 fa8d 	bl	800028c <__adddf3>
 800ed72:	4622      	mov	r2, r4
 800ed74:	462b      	mov	r3, r5
 800ed76:	f7f1 fc3f 	bl	80005f8 <__aeabi_dmul>
 800ed7a:	4602      	mov	r2, r0
 800ed7c:	460b      	mov	r3, r1
 800ed7e:	4640      	mov	r0, r8
 800ed80:	4649      	mov	r1, r9
 800ed82:	f7f1 fa81 	bl	8000288 <__aeabi_dsub>
 800ed86:	4604      	mov	r4, r0
 800ed88:	460d      	mov	r5, r1
 800ed8a:	4602      	mov	r2, r0
 800ed8c:	460b      	mov	r3, r1
 800ed8e:	4640      	mov	r0, r8
 800ed90:	4649      	mov	r1, r9
 800ed92:	f7f1 fc31 	bl	80005f8 <__aeabi_dmul>
 800ed96:	2200      	movs	r2, #0
 800ed98:	ec41 0b19 	vmov	d9, r0, r1
 800ed9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800eda0:	4620      	mov	r0, r4
 800eda2:	4629      	mov	r1, r5
 800eda4:	f7f1 fa70 	bl	8000288 <__aeabi_dsub>
 800eda8:	4602      	mov	r2, r0
 800edaa:	460b      	mov	r3, r1
 800edac:	ec51 0b19 	vmov	r0, r1, d9
 800edb0:	f7f1 fd4c 	bl	800084c <__aeabi_ddiv>
 800edb4:	4632      	mov	r2, r6
 800edb6:	4604      	mov	r4, r0
 800edb8:	460d      	mov	r5, r1
 800edba:	463b      	mov	r3, r7
 800edbc:	4640      	mov	r0, r8
 800edbe:	4649      	mov	r1, r9
 800edc0:	f7f1 fc1a 	bl	80005f8 <__aeabi_dmul>
 800edc4:	4632      	mov	r2, r6
 800edc6:	463b      	mov	r3, r7
 800edc8:	f7f1 fa60 	bl	800028c <__adddf3>
 800edcc:	4602      	mov	r2, r0
 800edce:	460b      	mov	r3, r1
 800edd0:	4620      	mov	r0, r4
 800edd2:	4629      	mov	r1, r5
 800edd4:	f7f1 fa58 	bl	8000288 <__aeabi_dsub>
 800edd8:	4642      	mov	r2, r8
 800edda:	464b      	mov	r3, r9
 800eddc:	f7f1 fa54 	bl	8000288 <__aeabi_dsub>
 800ede0:	460b      	mov	r3, r1
 800ede2:	4602      	mov	r2, r0
 800ede4:	493a      	ldr	r1, [pc, #232]	; (800eed0 <__ieee754_pow+0xa48>)
 800ede6:	2000      	movs	r0, #0
 800ede8:	f7f1 fa4e 	bl	8000288 <__aeabi_dsub>
 800edec:	ec41 0b10 	vmov	d0, r0, r1
 800edf0:	ee10 3a90 	vmov	r3, s1
 800edf4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800edf8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800edfc:	da2b      	bge.n	800ee56 <__ieee754_pow+0x9ce>
 800edfe:	4650      	mov	r0, sl
 800ee00:	f000 f966 	bl	800f0d0 <scalbn>
 800ee04:	ec51 0b10 	vmov	r0, r1, d0
 800ee08:	ec53 2b18 	vmov	r2, r3, d8
 800ee0c:	f7ff bbed 	b.w	800e5ea <__ieee754_pow+0x162>
 800ee10:	4b30      	ldr	r3, [pc, #192]	; (800eed4 <__ieee754_pow+0xa4c>)
 800ee12:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ee16:	429e      	cmp	r6, r3
 800ee18:	f77f af0c 	ble.w	800ec34 <__ieee754_pow+0x7ac>
 800ee1c:	4b2e      	ldr	r3, [pc, #184]	; (800eed8 <__ieee754_pow+0xa50>)
 800ee1e:	440b      	add	r3, r1
 800ee20:	4303      	orrs	r3, r0
 800ee22:	d009      	beq.n	800ee38 <__ieee754_pow+0x9b0>
 800ee24:	ec51 0b18 	vmov	r0, r1, d8
 800ee28:	2200      	movs	r2, #0
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	f7f1 fe56 	bl	8000adc <__aeabi_dcmplt>
 800ee30:	3800      	subs	r0, #0
 800ee32:	bf18      	it	ne
 800ee34:	2001      	movne	r0, #1
 800ee36:	e447      	b.n	800e6c8 <__ieee754_pow+0x240>
 800ee38:	4622      	mov	r2, r4
 800ee3a:	462b      	mov	r3, r5
 800ee3c:	f7f1 fa24 	bl	8000288 <__aeabi_dsub>
 800ee40:	4642      	mov	r2, r8
 800ee42:	464b      	mov	r3, r9
 800ee44:	f7f1 fe5e 	bl	8000b04 <__aeabi_dcmpge>
 800ee48:	2800      	cmp	r0, #0
 800ee4a:	f43f aef3 	beq.w	800ec34 <__ieee754_pow+0x7ac>
 800ee4e:	e7e9      	b.n	800ee24 <__ieee754_pow+0x99c>
 800ee50:	f04f 0a00 	mov.w	sl, #0
 800ee54:	e71a      	b.n	800ec8c <__ieee754_pow+0x804>
 800ee56:	ec51 0b10 	vmov	r0, r1, d0
 800ee5a:	4619      	mov	r1, r3
 800ee5c:	e7d4      	b.n	800ee08 <__ieee754_pow+0x980>
 800ee5e:	491c      	ldr	r1, [pc, #112]	; (800eed0 <__ieee754_pow+0xa48>)
 800ee60:	2000      	movs	r0, #0
 800ee62:	f7ff bb30 	b.w	800e4c6 <__ieee754_pow+0x3e>
 800ee66:	2000      	movs	r0, #0
 800ee68:	2100      	movs	r1, #0
 800ee6a:	f7ff bb2c 	b.w	800e4c6 <__ieee754_pow+0x3e>
 800ee6e:	4630      	mov	r0, r6
 800ee70:	4639      	mov	r1, r7
 800ee72:	f7ff bb28 	b.w	800e4c6 <__ieee754_pow+0x3e>
 800ee76:	9204      	str	r2, [sp, #16]
 800ee78:	f7ff bb7a 	b.w	800e570 <__ieee754_pow+0xe8>
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	f7ff bb64 	b.w	800e54a <__ieee754_pow+0xc2>
 800ee82:	bf00      	nop
 800ee84:	f3af 8000 	nop.w
 800ee88:	00000000 	.word	0x00000000
 800ee8c:	3fe62e43 	.word	0x3fe62e43
 800ee90:	fefa39ef 	.word	0xfefa39ef
 800ee94:	3fe62e42 	.word	0x3fe62e42
 800ee98:	0ca86c39 	.word	0x0ca86c39
 800ee9c:	be205c61 	.word	0xbe205c61
 800eea0:	72bea4d0 	.word	0x72bea4d0
 800eea4:	3e663769 	.word	0x3e663769
 800eea8:	c5d26bf1 	.word	0xc5d26bf1
 800eeac:	3ebbbd41 	.word	0x3ebbbd41
 800eeb0:	af25de2c 	.word	0xaf25de2c
 800eeb4:	3f11566a 	.word	0x3f11566a
 800eeb8:	16bebd93 	.word	0x16bebd93
 800eebc:	3f66c16c 	.word	0x3f66c16c
 800eec0:	5555553e 	.word	0x5555553e
 800eec4:	3fc55555 	.word	0x3fc55555
 800eec8:	3fe00000 	.word	0x3fe00000
 800eecc:	000fffff 	.word	0x000fffff
 800eed0:	3ff00000 	.word	0x3ff00000
 800eed4:	4090cbff 	.word	0x4090cbff
 800eed8:	3f6f3400 	.word	0x3f6f3400
 800eedc:	652b82fe 	.word	0x652b82fe
 800eee0:	3c971547 	.word	0x3c971547

0800eee4 <__ieee754_sqrt>:
 800eee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eee8:	ec55 4b10 	vmov	r4, r5, d0
 800eeec:	4e55      	ldr	r6, [pc, #340]	; (800f044 <__ieee754_sqrt+0x160>)
 800eeee:	43ae      	bics	r6, r5
 800eef0:	ee10 0a10 	vmov	r0, s0
 800eef4:	ee10 3a10 	vmov	r3, s0
 800eef8:	462a      	mov	r2, r5
 800eefa:	4629      	mov	r1, r5
 800eefc:	d110      	bne.n	800ef20 <__ieee754_sqrt+0x3c>
 800eefe:	ee10 2a10 	vmov	r2, s0
 800ef02:	462b      	mov	r3, r5
 800ef04:	f7f1 fb78 	bl	80005f8 <__aeabi_dmul>
 800ef08:	4602      	mov	r2, r0
 800ef0a:	460b      	mov	r3, r1
 800ef0c:	4620      	mov	r0, r4
 800ef0e:	4629      	mov	r1, r5
 800ef10:	f7f1 f9bc 	bl	800028c <__adddf3>
 800ef14:	4604      	mov	r4, r0
 800ef16:	460d      	mov	r5, r1
 800ef18:	ec45 4b10 	vmov	d0, r4, r5
 800ef1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef20:	2d00      	cmp	r5, #0
 800ef22:	dc10      	bgt.n	800ef46 <__ieee754_sqrt+0x62>
 800ef24:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ef28:	4330      	orrs	r0, r6
 800ef2a:	d0f5      	beq.n	800ef18 <__ieee754_sqrt+0x34>
 800ef2c:	b15d      	cbz	r5, 800ef46 <__ieee754_sqrt+0x62>
 800ef2e:	ee10 2a10 	vmov	r2, s0
 800ef32:	462b      	mov	r3, r5
 800ef34:	ee10 0a10 	vmov	r0, s0
 800ef38:	f7f1 f9a6 	bl	8000288 <__aeabi_dsub>
 800ef3c:	4602      	mov	r2, r0
 800ef3e:	460b      	mov	r3, r1
 800ef40:	f7f1 fc84 	bl	800084c <__aeabi_ddiv>
 800ef44:	e7e6      	b.n	800ef14 <__ieee754_sqrt+0x30>
 800ef46:	1512      	asrs	r2, r2, #20
 800ef48:	d074      	beq.n	800f034 <__ieee754_sqrt+0x150>
 800ef4a:	07d4      	lsls	r4, r2, #31
 800ef4c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ef50:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800ef54:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800ef58:	bf5e      	ittt	pl
 800ef5a:	0fda      	lsrpl	r2, r3, #31
 800ef5c:	005b      	lslpl	r3, r3, #1
 800ef5e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800ef62:	2400      	movs	r4, #0
 800ef64:	0fda      	lsrs	r2, r3, #31
 800ef66:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800ef6a:	107f      	asrs	r7, r7, #1
 800ef6c:	005b      	lsls	r3, r3, #1
 800ef6e:	2516      	movs	r5, #22
 800ef70:	4620      	mov	r0, r4
 800ef72:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ef76:	1886      	adds	r6, r0, r2
 800ef78:	428e      	cmp	r6, r1
 800ef7a:	bfde      	ittt	le
 800ef7c:	1b89      	suble	r1, r1, r6
 800ef7e:	18b0      	addle	r0, r6, r2
 800ef80:	18a4      	addle	r4, r4, r2
 800ef82:	0049      	lsls	r1, r1, #1
 800ef84:	3d01      	subs	r5, #1
 800ef86:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800ef8a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800ef8e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ef92:	d1f0      	bne.n	800ef76 <__ieee754_sqrt+0x92>
 800ef94:	462a      	mov	r2, r5
 800ef96:	f04f 0e20 	mov.w	lr, #32
 800ef9a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ef9e:	4281      	cmp	r1, r0
 800efa0:	eb06 0c05 	add.w	ip, r6, r5
 800efa4:	dc02      	bgt.n	800efac <__ieee754_sqrt+0xc8>
 800efa6:	d113      	bne.n	800efd0 <__ieee754_sqrt+0xec>
 800efa8:	459c      	cmp	ip, r3
 800efaa:	d811      	bhi.n	800efd0 <__ieee754_sqrt+0xec>
 800efac:	f1bc 0f00 	cmp.w	ip, #0
 800efb0:	eb0c 0506 	add.w	r5, ip, r6
 800efb4:	da43      	bge.n	800f03e <__ieee754_sqrt+0x15a>
 800efb6:	2d00      	cmp	r5, #0
 800efb8:	db41      	blt.n	800f03e <__ieee754_sqrt+0x15a>
 800efba:	f100 0801 	add.w	r8, r0, #1
 800efbe:	1a09      	subs	r1, r1, r0
 800efc0:	459c      	cmp	ip, r3
 800efc2:	bf88      	it	hi
 800efc4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800efc8:	eba3 030c 	sub.w	r3, r3, ip
 800efcc:	4432      	add	r2, r6
 800efce:	4640      	mov	r0, r8
 800efd0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800efd4:	f1be 0e01 	subs.w	lr, lr, #1
 800efd8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800efdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800efe0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800efe4:	d1db      	bne.n	800ef9e <__ieee754_sqrt+0xba>
 800efe6:	430b      	orrs	r3, r1
 800efe8:	d006      	beq.n	800eff8 <__ieee754_sqrt+0x114>
 800efea:	1c50      	adds	r0, r2, #1
 800efec:	bf13      	iteet	ne
 800efee:	3201      	addne	r2, #1
 800eff0:	3401      	addeq	r4, #1
 800eff2:	4672      	moveq	r2, lr
 800eff4:	f022 0201 	bicne.w	r2, r2, #1
 800eff8:	1063      	asrs	r3, r4, #1
 800effa:	0852      	lsrs	r2, r2, #1
 800effc:	07e1      	lsls	r1, r4, #31
 800effe:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800f002:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800f006:	bf48      	it	mi
 800f008:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800f00c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800f010:	4614      	mov	r4, r2
 800f012:	e781      	b.n	800ef18 <__ieee754_sqrt+0x34>
 800f014:	0ad9      	lsrs	r1, r3, #11
 800f016:	3815      	subs	r0, #21
 800f018:	055b      	lsls	r3, r3, #21
 800f01a:	2900      	cmp	r1, #0
 800f01c:	d0fa      	beq.n	800f014 <__ieee754_sqrt+0x130>
 800f01e:	02cd      	lsls	r5, r1, #11
 800f020:	d50a      	bpl.n	800f038 <__ieee754_sqrt+0x154>
 800f022:	f1c2 0420 	rsb	r4, r2, #32
 800f026:	fa23 f404 	lsr.w	r4, r3, r4
 800f02a:	1e55      	subs	r5, r2, #1
 800f02c:	4093      	lsls	r3, r2
 800f02e:	4321      	orrs	r1, r4
 800f030:	1b42      	subs	r2, r0, r5
 800f032:	e78a      	b.n	800ef4a <__ieee754_sqrt+0x66>
 800f034:	4610      	mov	r0, r2
 800f036:	e7f0      	b.n	800f01a <__ieee754_sqrt+0x136>
 800f038:	0049      	lsls	r1, r1, #1
 800f03a:	3201      	adds	r2, #1
 800f03c:	e7ef      	b.n	800f01e <__ieee754_sqrt+0x13a>
 800f03e:	4680      	mov	r8, r0
 800f040:	e7bd      	b.n	800efbe <__ieee754_sqrt+0xda>
 800f042:	bf00      	nop
 800f044:	7ff00000 	.word	0x7ff00000

0800f048 <with_errno>:
 800f048:	b570      	push	{r4, r5, r6, lr}
 800f04a:	4604      	mov	r4, r0
 800f04c:	460d      	mov	r5, r1
 800f04e:	4616      	mov	r6, r2
 800f050:	f7fa fc38 	bl	80098c4 <__errno>
 800f054:	4629      	mov	r1, r5
 800f056:	6006      	str	r6, [r0, #0]
 800f058:	4620      	mov	r0, r4
 800f05a:	bd70      	pop	{r4, r5, r6, pc}

0800f05c <xflow>:
 800f05c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f05e:	4614      	mov	r4, r2
 800f060:	461d      	mov	r5, r3
 800f062:	b108      	cbz	r0, 800f068 <xflow+0xc>
 800f064:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f068:	e9cd 2300 	strd	r2, r3, [sp]
 800f06c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f070:	4620      	mov	r0, r4
 800f072:	4629      	mov	r1, r5
 800f074:	f7f1 fac0 	bl	80005f8 <__aeabi_dmul>
 800f078:	2222      	movs	r2, #34	; 0x22
 800f07a:	b003      	add	sp, #12
 800f07c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f080:	f7ff bfe2 	b.w	800f048 <with_errno>

0800f084 <__math_uflow>:
 800f084:	b508      	push	{r3, lr}
 800f086:	2200      	movs	r2, #0
 800f088:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f08c:	f7ff ffe6 	bl	800f05c <xflow>
 800f090:	ec41 0b10 	vmov	d0, r0, r1
 800f094:	bd08      	pop	{r3, pc}

0800f096 <__math_oflow>:
 800f096:	b508      	push	{r3, lr}
 800f098:	2200      	movs	r2, #0
 800f09a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800f09e:	f7ff ffdd 	bl	800f05c <xflow>
 800f0a2:	ec41 0b10 	vmov	d0, r0, r1
 800f0a6:	bd08      	pop	{r3, pc}

0800f0a8 <fabs>:
 800f0a8:	ec51 0b10 	vmov	r0, r1, d0
 800f0ac:	ee10 2a10 	vmov	r2, s0
 800f0b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f0b4:	ec43 2b10 	vmov	d0, r2, r3
 800f0b8:	4770      	bx	lr

0800f0ba <finite>:
 800f0ba:	b082      	sub	sp, #8
 800f0bc:	ed8d 0b00 	vstr	d0, [sp]
 800f0c0:	9801      	ldr	r0, [sp, #4]
 800f0c2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800f0c6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800f0ca:	0fc0      	lsrs	r0, r0, #31
 800f0cc:	b002      	add	sp, #8
 800f0ce:	4770      	bx	lr

0800f0d0 <scalbn>:
 800f0d0:	b570      	push	{r4, r5, r6, lr}
 800f0d2:	ec55 4b10 	vmov	r4, r5, d0
 800f0d6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f0da:	4606      	mov	r6, r0
 800f0dc:	462b      	mov	r3, r5
 800f0de:	b99a      	cbnz	r2, 800f108 <scalbn+0x38>
 800f0e0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f0e4:	4323      	orrs	r3, r4
 800f0e6:	d036      	beq.n	800f156 <scalbn+0x86>
 800f0e8:	4b39      	ldr	r3, [pc, #228]	; (800f1d0 <scalbn+0x100>)
 800f0ea:	4629      	mov	r1, r5
 800f0ec:	ee10 0a10 	vmov	r0, s0
 800f0f0:	2200      	movs	r2, #0
 800f0f2:	f7f1 fa81 	bl	80005f8 <__aeabi_dmul>
 800f0f6:	4b37      	ldr	r3, [pc, #220]	; (800f1d4 <scalbn+0x104>)
 800f0f8:	429e      	cmp	r6, r3
 800f0fa:	4604      	mov	r4, r0
 800f0fc:	460d      	mov	r5, r1
 800f0fe:	da10      	bge.n	800f122 <scalbn+0x52>
 800f100:	a32b      	add	r3, pc, #172	; (adr r3, 800f1b0 <scalbn+0xe0>)
 800f102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f106:	e03a      	b.n	800f17e <scalbn+0xae>
 800f108:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f10c:	428a      	cmp	r2, r1
 800f10e:	d10c      	bne.n	800f12a <scalbn+0x5a>
 800f110:	ee10 2a10 	vmov	r2, s0
 800f114:	4620      	mov	r0, r4
 800f116:	4629      	mov	r1, r5
 800f118:	f7f1 f8b8 	bl	800028c <__adddf3>
 800f11c:	4604      	mov	r4, r0
 800f11e:	460d      	mov	r5, r1
 800f120:	e019      	b.n	800f156 <scalbn+0x86>
 800f122:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f126:	460b      	mov	r3, r1
 800f128:	3a36      	subs	r2, #54	; 0x36
 800f12a:	4432      	add	r2, r6
 800f12c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f130:	428a      	cmp	r2, r1
 800f132:	dd08      	ble.n	800f146 <scalbn+0x76>
 800f134:	2d00      	cmp	r5, #0
 800f136:	a120      	add	r1, pc, #128	; (adr r1, 800f1b8 <scalbn+0xe8>)
 800f138:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f13c:	da1c      	bge.n	800f178 <scalbn+0xa8>
 800f13e:	a120      	add	r1, pc, #128	; (adr r1, 800f1c0 <scalbn+0xf0>)
 800f140:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f144:	e018      	b.n	800f178 <scalbn+0xa8>
 800f146:	2a00      	cmp	r2, #0
 800f148:	dd08      	ble.n	800f15c <scalbn+0x8c>
 800f14a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f14e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f152:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f156:	ec45 4b10 	vmov	d0, r4, r5
 800f15a:	bd70      	pop	{r4, r5, r6, pc}
 800f15c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f160:	da19      	bge.n	800f196 <scalbn+0xc6>
 800f162:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f166:	429e      	cmp	r6, r3
 800f168:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800f16c:	dd0a      	ble.n	800f184 <scalbn+0xb4>
 800f16e:	a112      	add	r1, pc, #72	; (adr r1, 800f1b8 <scalbn+0xe8>)
 800f170:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d1e2      	bne.n	800f13e <scalbn+0x6e>
 800f178:	a30f      	add	r3, pc, #60	; (adr r3, 800f1b8 <scalbn+0xe8>)
 800f17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f17e:	f7f1 fa3b 	bl	80005f8 <__aeabi_dmul>
 800f182:	e7cb      	b.n	800f11c <scalbn+0x4c>
 800f184:	a10a      	add	r1, pc, #40	; (adr r1, 800f1b0 <scalbn+0xe0>)
 800f186:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d0b8      	beq.n	800f100 <scalbn+0x30>
 800f18e:	a10e      	add	r1, pc, #56	; (adr r1, 800f1c8 <scalbn+0xf8>)
 800f190:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f194:	e7b4      	b.n	800f100 <scalbn+0x30>
 800f196:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f19a:	3236      	adds	r2, #54	; 0x36
 800f19c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f1a0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f1a4:	4620      	mov	r0, r4
 800f1a6:	4b0c      	ldr	r3, [pc, #48]	; (800f1d8 <scalbn+0x108>)
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	e7e8      	b.n	800f17e <scalbn+0xae>
 800f1ac:	f3af 8000 	nop.w
 800f1b0:	c2f8f359 	.word	0xc2f8f359
 800f1b4:	01a56e1f 	.word	0x01a56e1f
 800f1b8:	8800759c 	.word	0x8800759c
 800f1bc:	7e37e43c 	.word	0x7e37e43c
 800f1c0:	8800759c 	.word	0x8800759c
 800f1c4:	fe37e43c 	.word	0xfe37e43c
 800f1c8:	c2f8f359 	.word	0xc2f8f359
 800f1cc:	81a56e1f 	.word	0x81a56e1f
 800f1d0:	43500000 	.word	0x43500000
 800f1d4:	ffff3cb0 	.word	0xffff3cb0
 800f1d8:	3c900000 	.word	0x3c900000

0800f1dc <_init>:
 800f1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1de:	bf00      	nop
 800f1e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1e2:	bc08      	pop	{r3}
 800f1e4:	469e      	mov	lr, r3
 800f1e6:	4770      	bx	lr

0800f1e8 <_fini>:
 800f1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1ea:	bf00      	nop
 800f1ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1ee:	bc08      	pop	{r3}
 800f1f0:	469e      	mov	lr, r3
 800f1f2:	4770      	bx	lr
