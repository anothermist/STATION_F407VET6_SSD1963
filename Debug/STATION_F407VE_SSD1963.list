
STATION_F407VE_SSD1963.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ef8c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00033568  0801f120  0801f120  0002f120  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08052688  08052688  00070238  2**0
                  CONTENTS
  4 .ARM          00000008  08052688  08052688  00062688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08052690  08052690  00070238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08052690  08052690  00062690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08052694  08052694  00062694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  08052698  00070000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00070238  2**0
                  CONTENTS
 10 .bss          00000b94  20000238  20000238  00070238  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000dcc  20000dcc  00070238  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00070238  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c892  00000000  00000000  00070268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003454  00000000  00000000  0008cafa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  0008ff50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000078  00000000  00000000  0008ff98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a1c3  00000000  00000000  00090010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfb20  00000000  00000000  000aa1d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00179cf3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c68  00000000  00000000  00179d44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00024f6c  00000000  00000000  001809ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000238 	.word	0x20000238
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801f104 	.word	0x0801f104

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000023c 	.word	0x2000023c
 80001cc:	0801f104 	.word	0x0801f104

080001d0 <AT24XX_IsConnected>:
#include "at24xx.h"

extern I2C_HandleTypeDef AT24XX_I2C;

bool AT24XX_IsConnected(void) {
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
	if (HAL_I2C_IsDeviceReady(&AT24XX_I2C, AT24XX_ADDRESS << 1, 1, AT24XX_I2C_TIMEOUT) == HAL_OK)
 80001d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d8:	2201      	movs	r2, #1
 80001da:	21ae      	movs	r1, #174	; 0xae
 80001dc:	4805      	ldr	r0, [pc, #20]	; (80001f4 <AT24XX_IsConnected+0x24>)
 80001de:	f00d fc23 	bl	800da28 <HAL_I2C_IsDeviceReady>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d101      	bne.n	80001ec <AT24XX_IsConnected+0x1c>
		return 1;
 80001e8:	2301      	movs	r3, #1
 80001ea:	e001      	b.n	80001f0 <AT24XX_IsConnected+0x20>
	else
		return 0;
 80001ec:	2300      	movs	r3, #0
 80001ee:	bf00      	nop
}
 80001f0:	4618      	mov	r0, r3
 80001f2:	bd80      	pop	{r7, pc}
 80001f4:	200002bc 	.word	0x200002bc

080001f8 <AT24XX_Save>:

bool AT24XX_Save(uint16_t address, void *data, size_t size_of_data) {
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b088      	sub	sp, #32
 80001fc:	af04      	add	r7, sp, #16
 80001fe:	4603      	mov	r3, r0
 8000200:	60b9      	str	r1, [r7, #8]
 8000202:	607a      	str	r2, [r7, #4]
 8000204:	81fb      	strh	r3, [r7, #14]
#if ((AT24XX_SIZE_KBIT == 4) || (AT24XX_SIZE_KBIT == 8) || (AT24XX_SIZE_KBIT == 16))
	if(size_of_data > 16)
		return 0;
#endif
#if ((AT24XX_SIZE_KBIT == 32) || (AT24XX_SIZE_KBIT == 64) || (AT24XX_SIZE_KBIT == 128))
	if(size_of_data > 32)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	2b20      	cmp	r3, #32
 800020a:	d901      	bls.n	8000210 <AT24XX_Save+0x18>
		return 0;
 800020c:	2300      	movs	r3, #0
 800020e:	e017      	b.n	8000240 <AT24XX_Save+0x48>
#endif

#if ((AT24XX_SIZE_KBIT == 1) || (AT24XX_SIZE_KBIT == 2))
	if(HAL_I2C_Mem_Write(&EEPROM24XX_I2C, AT24XX_ADDRESS<<1, Address, I2C_MEMADD_SIZE_8BIT, (uint8_t*)data, size_of_data, AT24XX_I2C_TIMEOUT) == HAL_OK)
#else
		if (HAL_I2C_Mem_Write(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data, size_of_data, AT24XX_I2C_TIMEOUT) == HAL_OK)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	b29b      	uxth	r3, r3
 8000214:	89fa      	ldrh	r2, [r7, #14]
 8000216:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800021a:	9102      	str	r1, [sp, #8]
 800021c:	9301      	str	r3, [sp, #4]
 800021e:	68bb      	ldr	r3, [r7, #8]
 8000220:	9300      	str	r3, [sp, #0]
 8000222:	2310      	movs	r3, #16
 8000224:	21ae      	movs	r1, #174	; 0xae
 8000226:	4808      	ldr	r0, [pc, #32]	; (8000248 <AT24XX_Save+0x50>)
 8000228:	f00c fc78 	bl	800cb1c <HAL_I2C_Mem_Write>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d104      	bne.n	800023c <AT24XX_Save+0x44>
#endif
{

			HAL_Delay(5);
 8000232:	2005      	movs	r0, #5
 8000234:	f006 fb3a 	bl	80068ac <HAL_Delay>
			return 1;
 8000238:	2301      	movs	r3, #1
 800023a:	e001      	b.n	8000240 <AT24XX_Save+0x48>
} else
	return 0;
 800023c:	2300      	movs	r3, #0
 800023e:	bf00      	nop
}
 8000240:	4618      	mov	r0, r3
 8000242:	3710      	adds	r7, #16
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	200002bc 	.word	0x200002bc

0800024c <AT24XX_Load>:

bool AT24XX_Load(uint16_t address, void *data, size_t size_of_data) {
 800024c:	b580      	push	{r7, lr}
 800024e:	b088      	sub	sp, #32
 8000250:	af04      	add	r7, sp, #16
 8000252:	4603      	mov	r3, r0
 8000254:	60b9      	str	r1, [r7, #8]
 8000256:	607a      	str	r2, [r7, #4]
 8000258:	81fb      	strh	r3, [r7, #14]
#if ((AT24XX_SIZE_KBIT == 1) || (AT24XX_SIZE_KBIT == 2))
	if(HAL_I2C_Mem_Read(&EEPROM24XX_I2C, AT24XX_ADDRESS<<1, Address, I2C_MEMADD_SIZE_8BIT, (uint8_t*)data, size_of_data, AT24XX_I2C_TIMEOUT) == HAL_OK)
#else
		if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data, size_of_data, AT24XX_I2C_TIMEOUT) == HAL_OK)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	b29b      	uxth	r3, r3
 800025e:	89fa      	ldrh	r2, [r7, #14]
 8000260:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000264:	9102      	str	r1, [sp, #8]
 8000266:	9301      	str	r3, [sp, #4]
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	9300      	str	r3, [sp, #0]
 800026c:	2310      	movs	r3, #16
 800026e:	21ae      	movs	r1, #174	; 0xae
 8000270:	4806      	ldr	r0, [pc, #24]	; (800028c <AT24XX_Load+0x40>)
 8000272:	f00c fd4d 	bl	800cd10 <HAL_I2C_Mem_Read>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d101      	bne.n	8000280 <AT24XX_Load+0x34>
#endif
{
	return 1;
 800027c:	2301      	movs	r3, #1
 800027e:	e001      	b.n	8000284 <AT24XX_Load+0x38>
} else
	return 0;
 8000280:	2300      	movs	r3, #0
 8000282:	bf00      	nop
}
 8000284:	4618      	mov	r0, r3
 8000286:	3710      	adds	r7, #16
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	200002bc 	.word	0x200002bc

08000290 <AT24XX_Read>:

uint8_t AT24XX_Read(uint16_t address) {
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	80fb      	strh	r3, [r7, #6]
	uint16_t dt[1] = {0};
 800029a:	2300      	movs	r3, #0
 800029c:	81bb      	strh	r3, [r7, #12]
	AT24XX_Load(address, dt, 1);
 800029e:	f107 010c 	add.w	r1, r7, #12
 80002a2:	88fb      	ldrh	r3, [r7, #6]
 80002a4:	2201      	movs	r2, #1
 80002a6:	4618      	mov	r0, r3
 80002a8:	f7ff ffd0 	bl	800024c <AT24XX_Load>
	return dt[0];
 80002ac:	89bb      	ldrh	r3, [r7, #12]
 80002ae:	b2db      	uxtb	r3, r3
 80002b0:	bf00      	nop
}
 80002b2:	4618      	mov	r0, r3
 80002b4:	3710      	adds	r7, #16
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}

080002ba <AT24XX_Write>:

void AT24XX_Write(uint16_t address, uint8_t val) {
 80002ba:	b580      	push	{r7, lr}
 80002bc:	b084      	sub	sp, #16
 80002be:	af00      	add	r7, sp, #0
 80002c0:	4603      	mov	r3, r0
 80002c2:	460a      	mov	r2, r1
 80002c4:	80fb      	strh	r3, [r7, #6]
 80002c6:	4613      	mov	r3, r2
 80002c8:	717b      	strb	r3, [r7, #5]
	uint8_t save[] = {val};
 80002ca:	797b      	ldrb	r3, [r7, #5]
 80002cc:	733b      	strb	r3, [r7, #12]
	AT24XX_Save(address, save, 1);
 80002ce:	f107 010c 	add.w	r1, r7, #12
 80002d2:	88fb      	ldrh	r3, [r7, #6]
 80002d4:	2201      	movs	r2, #1
 80002d6:	4618      	mov	r0, r3
 80002d8:	f7ff ff8e 	bl	80001f8 <AT24XX_Save>
}
 80002dc:	bf00      	nop
 80002de:	3710      	adds	r7, #16
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}

080002e4 <AT24XX_Update>:

void AT24XX_Update(uint16_t address, uint8_t val) {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	4603      	mov	r3, r0
 80002ec:	460a      	mov	r2, r1
 80002ee:	80fb      	strh	r3, [r7, #6]
 80002f0:	4613      	mov	r3, r2
 80002f2:	717b      	strb	r3, [r7, #5]
	if (AT24XX_Read(address) != val) AT24XX_Write(address, val);
 80002f4:	88fb      	ldrh	r3, [r7, #6]
 80002f6:	4618      	mov	r0, r3
 80002f8:	f7ff ffca 	bl	8000290 <AT24XX_Read>
 80002fc:	4603      	mov	r3, r0
 80002fe:	461a      	mov	r2, r3
 8000300:	797b      	ldrb	r3, [r7, #5]
 8000302:	4293      	cmp	r3, r2
 8000304:	d005      	beq.n	8000312 <AT24XX_Update+0x2e>
 8000306:	797a      	ldrb	r2, [r7, #5]
 8000308:	88fb      	ldrh	r3, [r7, #6]
 800030a:	4611      	mov	r1, r2
 800030c:	4618      	mov	r0, r3
 800030e:	f7ff ffd4 	bl	80002ba <AT24XX_Write>
}
 8000312:	bf00      	nop
 8000314:	3708      	adds	r7, #8
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}

0800031a <round_eps>:
uint16_t dig_H1, dig_H3;
int16_t dig_H2, dig_H4, dig_H5, dig_H6;
int32_t t_fine;

float round_eps(double v,
                double eps) {                                                                                        // round_eps(1.234, 0.05) = 1.25
 800031a:	b580      	push	{r7, lr}
 800031c:	b084      	sub	sp, #16
 800031e:	af00      	add	r7, sp, #0
 8000320:	ed87 0b02 	vstr	d0, [r7, #8]
 8000324:	ed87 1b00 	vstr	d1, [r7]
    return floor(v / eps + 0.5) * eps;                        // round_eps(1.234, 0.01) = 1.23
 8000328:	e9d7 2300 	ldrd	r2, r3, [r7]
 800032c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000330:	f018 fe8c 	bl	801904c <__aeabi_ddiv>
 8000334:	4602      	mov	r2, r0
 8000336:	460b      	mov	r3, r1
 8000338:	4610      	mov	r0, r2
 800033a:	4619      	mov	r1, r3
 800033c:	f04f 0200 	mov.w	r2, #0
 8000340:	4b10      	ldr	r3, [pc, #64]	; (8000384 <round_eps+0x6a>)
 8000342:	f018 fba3 	bl	8018a8c <__adddf3>
 8000346:	4602      	mov	r2, r0
 8000348:	460b      	mov	r3, r1
 800034a:	ec43 2b17 	vmov	d7, r2, r3
 800034e:	eeb0 0a47 	vmov.f32	s0, s14
 8000352:	eef0 0a67 	vmov.f32	s1, s15
 8000356:	f01d ff3b 	bl	801e1d0 <floor>
 800035a:	ec51 0b10 	vmov	r0, r1, d0
 800035e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000362:	f018 fd49 	bl	8018df8 <__aeabi_dmul>
 8000366:	4602      	mov	r2, r0
 8000368:	460b      	mov	r3, r1
 800036a:	4610      	mov	r0, r2
 800036c:	4619      	mov	r1, r3
 800036e:	f019 f83b 	bl	80193e8 <__aeabi_d2f>
 8000372:	4603      	mov	r3, r0
 8000374:	ee07 3a90 	vmov	s15, r3
}                                                                                        // round_eps(1.235, 0.01) = 1.24
 8000378:	eeb0 0a67 	vmov.f32	s0, s15
 800037c:	3710      	adds	r7, #16
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	3fe00000 	.word	0x3fe00000

08000388 <round_nth>:

float round_nth(float v, int8_t n)                    // round_nth(1.235, 1) = 0.
{                                                                                        // round_nth(1.235, 0) = 1.
 8000388:	b5b0      	push	{r4, r5, r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000392:	4603      	mov	r3, r0
 8000394:	70fb      	strb	r3, [r7, #3]
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 8000396:	6878      	ldr	r0, [r7, #4]
 8000398:	f018 fcd6 	bl	8018d48 <__aeabi_f2d>
 800039c:	4604      	mov	r4, r0
 800039e:	460d      	mov	r5, r1
 80003a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80003a4:	4618      	mov	r0, r3
 80003a6:	f018 fcbd 	bl	8018d24 <__aeabi_i2d>
 80003aa:	4602      	mov	r2, r0
 80003ac:	460b      	mov	r3, r1
 80003ae:	ec43 2b11 	vmov	d1, r2, r3
 80003b2:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 80003e0 <round_nth+0x58>
 80003b6:	f01d ff8b 	bl	801e2d0 <pow>
 80003ba:	eeb0 7a40 	vmov.f32	s14, s0
 80003be:	eef0 7a60 	vmov.f32	s15, s1
 80003c2:	eeb0 1a47 	vmov.f32	s2, s14
 80003c6:	eef0 1a67 	vmov.f32	s3, s15
 80003ca:	ec45 4b10 	vmov	d0, r4, r5
 80003ce:	f7ff ffa4 	bl	800031a <round_eps>
 80003d2:	eef0 7a40 	vmov.f32	s15, s0
}                                                                                        // round_nth(1.235, -2) = 1.24
 80003d6:	eeb0 0a67 	vmov.f32	s0, s15
 80003da:	3708      	adds	r7, #8
 80003dc:	46bd      	mov	sp, r7
 80003de:	bdb0      	pop	{r4, r5, r7, pc}
 80003e0:	00000000 	.word	0x00000000
 80003e4:	40240000 	.word	0x40240000

080003e8 <BME280_getTemperature>:

float BME280_getTemperature(int8_t n) {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b088      	sub	sp, #32
 80003ec:	af02      	add	r7, sp, #8
 80003ee:	4603      	mov	r3, r0
 80003f0:	71fb      	strb	r3, [r7, #7]
    uint32_t temp_raw;
    float tempf;
    uint8_t cmd[4];

    cmd[0] = 0xFA; // temp_msb
 80003f2:	23fa      	movs	r3, #250	; 0xfa
 80003f4:	723b      	strb	r3, [r7, #8]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80003f6:	f107 0208 	add.w	r2, r7, #8
 80003fa:	2364      	movs	r3, #100	; 0x64
 80003fc:	9300      	str	r3, [sp, #0]
 80003fe:	2301      	movs	r3, #1
 8000400:	21ec      	movs	r1, #236	; 0xec
 8000402:	482f      	ldr	r0, [pc, #188]	; (80004c0 <BME280_getTemperature+0xd8>)
 8000404:	f00b f80f 	bl	800b426 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 8000408:	f107 0308 	add.w	r3, r7, #8
 800040c:	1c5a      	adds	r2, r3, #1
 800040e:	2364      	movs	r3, #100	; 0x64
 8000410:	9300      	str	r3, [sp, #0]
 8000412:	2303      	movs	r3, #3
 8000414:	21ec      	movs	r1, #236	; 0xec
 8000416:	482a      	ldr	r0, [pc, #168]	; (80004c0 <BME280_getTemperature+0xd8>)
 8000418:	f00b f902 	bl	800b620 <HAL_I2C_Master_Receive>

    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 800041c:	7a7b      	ldrb	r3, [r7, #9]
 800041e:	031a      	lsls	r2, r3, #12
 8000420:	7abb      	ldrb	r3, [r7, #10]
 8000422:	011b      	lsls	r3, r3, #4
 8000424:	4313      	orrs	r3, r2
 8000426:	7afa      	ldrb	r2, [r7, #11]
 8000428:	0912      	lsrs	r2, r2, #4
 800042a:	b2d2      	uxtb	r2, r2
 800042c:	4313      	orrs	r3, r2
 800042e:	617b      	str	r3, [r7, #20]

    int32_t temp;

    temp =
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8000430:	697b      	ldr	r3, [r7, #20]
 8000432:	08db      	lsrs	r3, r3, #3
 8000434:	4a23      	ldr	r2, [pc, #140]	; (80004c4 <BME280_getTemperature+0xdc>)
 8000436:	8812      	ldrh	r2, [r2, #0]
 8000438:	0052      	lsls	r2, r2, #1
 800043a:	1a9b      	subs	r3, r3, r2
 800043c:	4a22      	ldr	r2, [pc, #136]	; (80004c8 <BME280_getTemperature+0xe0>)
 800043e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000442:	fb02 f303 	mul.w	r3, r2, r3
 8000446:	0ada      	lsrs	r2, r3, #11
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 8000448:	697b      	ldr	r3, [r7, #20]
 800044a:	091b      	lsrs	r3, r3, #4
 800044c:	491d      	ldr	r1, [pc, #116]	; (80004c4 <BME280_getTemperature+0xdc>)
 800044e:	8809      	ldrh	r1, [r1, #0]
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	6979      	ldr	r1, [r7, #20]
 8000454:	0909      	lsrs	r1, r1, #4
 8000456:	481b      	ldr	r0, [pc, #108]	; (80004c4 <BME280_getTemperature+0xdc>)
 8000458:	8800      	ldrh	r0, [r0, #0]
 800045a:	1a09      	subs	r1, r1, r0
 800045c:	fb01 f303 	mul.w	r3, r1, r3
 8000460:	0b1b      	lsrs	r3, r3, #12
 8000462:	491a      	ldr	r1, [pc, #104]	; (80004cc <BME280_getTemperature+0xe4>)
 8000464:	f9b1 1000 	ldrsh.w	r1, [r1]
 8000468:	fb01 f303 	mul.w	r3, r1, r3
 800046c:	0b9b      	lsrs	r3, r3, #14
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 800046e:	4413      	add	r3, r2
    temp =
 8000470:	613b      	str	r3, [r7, #16]

    t_fine = temp;
 8000472:	4a17      	ldr	r2, [pc, #92]	; (80004d0 <BME280_getTemperature+0xe8>)
 8000474:	693b      	ldr	r3, [r7, #16]
 8000476:	6013      	str	r3, [r2, #0]
    temp = (temp * 5 + 128) >> 8;
 8000478:	693a      	ldr	r2, [r7, #16]
 800047a:	4613      	mov	r3, r2
 800047c:	009b      	lsls	r3, r3, #2
 800047e:	4413      	add	r3, r2
 8000480:	3380      	adds	r3, #128	; 0x80
 8000482:	121b      	asrs	r3, r3, #8
 8000484:	613b      	str	r3, [r7, #16]
    tempf = (float) temp;
 8000486:	693b      	ldr	r3, [r7, #16]
 8000488:	ee07 3a90 	vmov	s15, r3
 800048c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000490:	edc7 7a03 	vstr	s15, [r7, #12]

    return round_nth((tempf / 100.0f), n);
 8000494:	edd7 7a03 	vldr	s15, [r7, #12]
 8000498:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80004d4 <BME280_getTemperature+0xec>
 800049c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80004a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004a4:	4618      	mov	r0, r3
 80004a6:	eeb0 0a47 	vmov.f32	s0, s14
 80004aa:	f7ff ff6d 	bl	8000388 <round_nth>
 80004ae:	eef0 7a40 	vmov.f32	s15, s0
 80004b2:	bf00      	nop
}
 80004b4:	eeb0 0a67 	vmov.f32	s0, s15
 80004b8:	3718      	adds	r7, #24
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	200002bc 	.word	0x200002bc
 80004c4:	20000258 	.word	0x20000258
 80004c8:	2000025a 	.word	0x2000025a
 80004cc:	2000025c 	.word	0x2000025c
 80004d0:	2000027c 	.word	0x2000027c
 80004d4:	42c80000 	.word	0x42c80000

080004d8 <BME280_getHumidity>:

float BME280_getHumidity(int8_t n) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af02      	add	r7, sp, #8
 80004de:	4603      	mov	r3, r0
 80004e0:	71fb      	strb	r3, [r7, #7]
    uint32_t hum_raw;
    float humf;
    uint8_t cmd[4];

    cmd[0] = 0xFD; // hum_msb
 80004e2:	23fd      	movs	r3, #253	; 0xfd
 80004e4:	723b      	strb	r3, [r7, #8]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80004e6:	f107 0208 	add.w	r2, r7, #8
 80004ea:	2364      	movs	r3, #100	; 0x64
 80004ec:	9300      	str	r3, [sp, #0]
 80004ee:	2301      	movs	r3, #1
 80004f0:	21ec      	movs	r1, #236	; 0xec
 80004f2:	4840      	ldr	r0, [pc, #256]	; (80005f4 <BME280_getHumidity+0x11c>)
 80004f4:	f00a ff97 	bl	800b426 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 2, BME280_I2C_TIMEOUT);
 80004f8:	f107 0308 	add.w	r3, r7, #8
 80004fc:	1c5a      	adds	r2, r3, #1
 80004fe:	2364      	movs	r3, #100	; 0x64
 8000500:	9300      	str	r3, [sp, #0]
 8000502:	2302      	movs	r3, #2
 8000504:	21ec      	movs	r1, #236	; 0xec
 8000506:	483b      	ldr	r0, [pc, #236]	; (80005f4 <BME280_getHumidity+0x11c>)
 8000508:	f00b f88a 	bl	800b620 <HAL_I2C_Master_Receive>

    hum_raw = (cmd[1] << 8) | cmd[2];
 800050c:	7a7b      	ldrb	r3, [r7, #9]
 800050e:	021b      	lsls	r3, r3, #8
 8000510:	7aba      	ldrb	r2, [r7, #10]
 8000512:	4313      	orrs	r3, r2
 8000514:	617b      	str	r3, [r7, #20]

    int32_t v_x1;

    v_x1 = t_fine - 76800;
 8000516:	4b38      	ldr	r3, [pc, #224]	; (80005f8 <BME280_getHumidity+0x120>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 800051e:	613b      	str	r3, [r7, #16]
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8000520:	697b      	ldr	r3, [r7, #20]
 8000522:	039b      	lsls	r3, r3, #14
 8000524:	4a35      	ldr	r2, [pc, #212]	; (80005fc <BME280_getHumidity+0x124>)
 8000526:	f9b2 2000 	ldrsh.w	r2, [r2]
 800052a:	0512      	lsls	r2, r2, #20
 800052c:	1a9b      	subs	r3, r3, r2
 800052e:	4a34      	ldr	r2, [pc, #208]	; (8000600 <BME280_getHumidity+0x128>)
 8000530:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000534:	4611      	mov	r1, r2
 8000536:	693a      	ldr	r2, [r7, #16]
 8000538:	fb01 f202 	mul.w	r2, r1, r2
 800053c:	1a9b      	subs	r3, r3, r2
 800053e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8000542:	0bdb      	lsrs	r3, r3, #15
 8000544:	4a2f      	ldr	r2, [pc, #188]	; (8000604 <BME280_getHumidity+0x12c>)
 8000546:	f9b2 2000 	ldrsh.w	r2, [r2]
 800054a:	4611      	mov	r1, r2
 800054c:	693a      	ldr	r2, [r7, #16]
 800054e:	fb01 f202 	mul.w	r2, r1, r2
 8000552:	1292      	asrs	r2, r2, #10
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8000554:	492c      	ldr	r1, [pc, #176]	; (8000608 <BME280_getHumidity+0x130>)
 8000556:	8809      	ldrh	r1, [r1, #0]
 8000558:	4608      	mov	r0, r1
 800055a:	6939      	ldr	r1, [r7, #16]
 800055c:	fb00 f101 	mul.w	r1, r0, r1
 8000560:	12c9      	asrs	r1, r1, #11
 8000562:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8000566:	fb01 f202 	mul.w	r2, r1, r2
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 800056a:	1292      	asrs	r2, r2, #10
 800056c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
                                            (int32_t) dig_H2 + 8192) >> 14));
 8000570:	4926      	ldr	r1, [pc, #152]	; (800060c <BME280_getHumidity+0x134>)
 8000572:	f9b1 1000 	ldrsh.w	r1, [r1]
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8000576:	fb01 f202 	mul.w	r2, r1, r2
                                            (int32_t) dig_H2 + 8192) >> 14));
 800057a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800057e:	1392      	asrs	r2, r2, #14
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8000580:	fb02 f303 	mul.w	r3, r2, r3
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8000584:	613b      	str	r3, [r7, #16]
    v_x1 = (v_x1 - (((((v_x1 >> 15) * (v_x1 >> 15)) >> 7) * (int32_t) dig_H1) >> 4));
 8000586:	693b      	ldr	r3, [r7, #16]
 8000588:	13db      	asrs	r3, r3, #15
 800058a:	693a      	ldr	r2, [r7, #16]
 800058c:	13d2      	asrs	r2, r2, #15
 800058e:	fb02 f303 	mul.w	r3, r2, r3
 8000592:	11db      	asrs	r3, r3, #7
 8000594:	4a1e      	ldr	r2, [pc, #120]	; (8000610 <BME280_getHumidity+0x138>)
 8000596:	8812      	ldrh	r2, [r2, #0]
 8000598:	fb02 f303 	mul.w	r3, r2, r3
 800059c:	111b      	asrs	r3, r3, #4
 800059e:	693a      	ldr	r2, [r7, #16]
 80005a0:	1ad3      	subs	r3, r2, r3
 80005a2:	613b      	str	r3, [r7, #16]
    v_x1 = (v_x1 < 0 ? 0 : v_x1);
 80005a4:	693b      	ldr	r3, [r7, #16]
 80005a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80005aa:	613b      	str	r3, [r7, #16]
    v_x1 = (v_x1 > 419430400 ? 419430400 : v_x1);
 80005ac:	693b      	ldr	r3, [r7, #16]
 80005ae:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80005b2:	bfa8      	it	ge
 80005b4:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 80005b8:	613b      	str	r3, [r7, #16]

    humf = (float) (v_x1 >> 12);
 80005ba:	693b      	ldr	r3, [r7, #16]
 80005bc:	131b      	asrs	r3, r3, #12
 80005be:	ee07 3a90 	vmov	s15, r3
 80005c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005c6:	edc7 7a03 	vstr	s15, [r7, #12]

    return round_nth((humf / 1024.0f), n);
 80005ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80005ce:	eddf 6a11 	vldr	s13, [pc, #68]	; 8000614 <BME280_getHumidity+0x13c>
 80005d2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80005d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005da:	4618      	mov	r0, r3
 80005dc:	eeb0 0a47 	vmov.f32	s0, s14
 80005e0:	f7ff fed2 	bl	8000388 <round_nth>
 80005e4:	eef0 7a40 	vmov.f32	s15, s0
 80005e8:	bf00      	nop
}
 80005ea:	eeb0 0a67 	vmov.f32	s0, s15
 80005ee:	3718      	adds	r7, #24
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	200002bc 	.word	0x200002bc
 80005f8:	2000027c 	.word	0x2000027c
 80005fc:	20000276 	.word	0x20000276
 8000600:	20000278 	.word	0x20000278
 8000604:	2000027a 	.word	0x2000027a
 8000608:	20000272 	.word	0x20000272
 800060c:	20000274 	.word	0x20000274
 8000610:	20000270 	.word	0x20000270
 8000614:	44800000 	.word	0x44800000

08000618 <BME280_getPressure>:

float BME280_getPressure(void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af02      	add	r7, sp, #8
    uint32_t press_raw;
    float pressf;
    uint8_t cmd[4];

    cmd[0] = 0xF7; // press_msb
 800061e:	23f7      	movs	r3, #247	; 0xf7
 8000620:	703b      	strb	r3, [r7, #0]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8000622:	463a      	mov	r2, r7
 8000624:	2364      	movs	r3, #100	; 0x64
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	2301      	movs	r3, #1
 800062a:	21ec      	movs	r1, #236	; 0xec
 800062c:	485d      	ldr	r0, [pc, #372]	; (80007a4 <BME280_getPressure+0x18c>)
 800062e:	f00a fefa 	bl	800b426 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 8000632:	463b      	mov	r3, r7
 8000634:	1c5a      	adds	r2, r3, #1
 8000636:	2364      	movs	r3, #100	; 0x64
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2303      	movs	r3, #3
 800063c:	21ec      	movs	r1, #236	; 0xec
 800063e:	4859      	ldr	r0, [pc, #356]	; (80007a4 <BME280_getPressure+0x18c>)
 8000640:	f00a ffee 	bl	800b620 <HAL_I2C_Master_Receive>

    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8000644:	787b      	ldrb	r3, [r7, #1]
 8000646:	031a      	lsls	r2, r3, #12
 8000648:	78bb      	ldrb	r3, [r7, #2]
 800064a:	011b      	lsls	r3, r3, #4
 800064c:	4313      	orrs	r3, r2
 800064e:	78fa      	ldrb	r2, [r7, #3]
 8000650:	0912      	lsrs	r2, r2, #4
 8000652:	b2d2      	uxtb	r2, r2
 8000654:	4313      	orrs	r3, r2
 8000656:	613b      	str	r3, [r7, #16]

    int32_t var1, var2;
    uint32_t press;

    var1 = (t_fine >> 1) - 64000;
 8000658:	4b53      	ldr	r3, [pc, #332]	; (80007a8 <BME280_getPressure+0x190>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	105b      	asrs	r3, r3, #1
 800065e:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 8000662:	60fb      	str	r3, [r7, #12]
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	109b      	asrs	r3, r3, #2
 8000668:	68fa      	ldr	r2, [r7, #12]
 800066a:	1092      	asrs	r2, r2, #2
 800066c:	fb02 f303 	mul.w	r3, r2, r3
 8000670:	12db      	asrs	r3, r3, #11
 8000672:	4a4e      	ldr	r2, [pc, #312]	; (80007ac <BME280_getPressure+0x194>)
 8000674:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000678:	fb02 f303 	mul.w	r3, r2, r3
 800067c:	60bb      	str	r3, [r7, #8]
    var2 = var2 + ((var1 * dig_P5) << 1);
 800067e:	4b4c      	ldr	r3, [pc, #304]	; (80007b0 <BME280_getPressure+0x198>)
 8000680:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000684:	461a      	mov	r2, r3
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	fb02 f303 	mul.w	r3, r2, r3
 800068c:	005b      	lsls	r3, r3, #1
 800068e:	68ba      	ldr	r2, [r7, #8]
 8000690:	4413      	add	r3, r2
 8000692:	60bb      	str	r3, [r7, #8]
    var2 = (var2 >> 2) + (dig_P4 << 16);
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	109a      	asrs	r2, r3, #2
 8000698:	4b46      	ldr	r3, [pc, #280]	; (80007b4 <BME280_getPressure+0x19c>)
 800069a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800069e:	041b      	lsls	r3, r3, #16
 80006a0:	4413      	add	r3, r2
 80006a2:	60bb      	str	r3, [r7, #8]
    var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((dig_P2 * var1) >> 1)) >> 18;
 80006a4:	4b44      	ldr	r3, [pc, #272]	; (80007b8 <BME280_getPressure+0x1a0>)
 80006a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006aa:	4619      	mov	r1, r3
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	109b      	asrs	r3, r3, #2
 80006b0:	68fa      	ldr	r2, [r7, #12]
 80006b2:	1092      	asrs	r2, r2, #2
 80006b4:	fb02 f303 	mul.w	r3, r2, r3
 80006b8:	135b      	asrs	r3, r3, #13
 80006ba:	fb01 f303 	mul.w	r3, r1, r3
 80006be:	10da      	asrs	r2, r3, #3
 80006c0:	4b3e      	ldr	r3, [pc, #248]	; (80007bc <BME280_getPressure+0x1a4>)
 80006c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006c6:	4619      	mov	r1, r3
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	fb01 f303 	mul.w	r3, r1, r3
 80006ce:	105b      	asrs	r3, r3, #1
 80006d0:	4413      	add	r3, r2
 80006d2:	149b      	asrs	r3, r3, #18
 80006d4:	60fb      	str	r3, [r7, #12]
    var1 = ((32768 + var1) * dig_P1) >> 15;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80006dc:	4a38      	ldr	r2, [pc, #224]	; (80007c0 <BME280_getPressure+0x1a8>)
 80006de:	8812      	ldrh	r2, [r2, #0]
 80006e0:	fb02 f303 	mul.w	r3, r2, r3
 80006e4:	13db      	asrs	r3, r3, #15
 80006e6:	60fb      	str	r3, [r7, #12]
    if (var1 == 0) {
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d102      	bne.n	80006f4 <BME280_getPressure+0xdc>
        return 0;
 80006ee:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80007c4 <BME280_getPressure+0x1ac>
 80006f2:	e04f      	b.n	8000794 <BME280_getPressure+0x17c>
    }
    press = (((1048576 - press_raw) - (var2 >> 12))) * 3125;
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	131b      	asrs	r3, r3, #12
 80006f8:	461a      	mov	r2, r3
 80006fa:	693b      	ldr	r3, [r7, #16]
 80006fc:	4413      	add	r3, r2
 80006fe:	4a32      	ldr	r2, [pc, #200]	; (80007c8 <BME280_getPressure+0x1b0>)
 8000700:	fb02 f303 	mul.w	r3, r2, r3
 8000704:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
 8000708:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
 800070c:	617b      	str	r3, [r7, #20]
    if (press < 0x80000000) {
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	2b00      	cmp	r3, #0
 8000712:	db06      	blt.n	8000722 <BME280_getPressure+0x10a>
        press = (press << 1) / var1;
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	005a      	lsls	r2, r3, #1
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	fbb2 f3f3 	udiv	r3, r2, r3
 800071e:	617b      	str	r3, [r7, #20]
 8000720:	e005      	b.n	800072e <BME280_getPressure+0x116>
    } else {
        press = (press / var1) * 2;
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	697a      	ldr	r2, [r7, #20]
 8000726:	fbb2 f3f3 	udiv	r3, r2, r3
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	617b      	str	r3, [r7, #20]
    }
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 800072e:	4b27      	ldr	r3, [pc, #156]	; (80007cc <BME280_getPressure+0x1b4>)
 8000730:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000734:	4619      	mov	r1, r3
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	08db      	lsrs	r3, r3, #3
 800073a:	697a      	ldr	r2, [r7, #20]
 800073c:	08d2      	lsrs	r2, r2, #3
 800073e:	fb02 f303 	mul.w	r3, r2, r3
 8000742:	0b5b      	lsrs	r3, r3, #13
 8000744:	fb01 f303 	mul.w	r3, r1, r3
 8000748:	131b      	asrs	r3, r3, #12
 800074a:	60fb      	str	r3, [r7, #12]
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	089b      	lsrs	r3, r3, #2
 8000750:	461a      	mov	r2, r3
 8000752:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <BME280_getPressure+0x1b8>)
 8000754:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000758:	fb02 f303 	mul.w	r3, r2, r3
 800075c:	135b      	asrs	r3, r3, #13
 800075e:	60bb      	str	r3, [r7, #8]
    press = (press + ((var1 + var2 + dig_P7) >> 4));
 8000760:	68fa      	ldr	r2, [r7, #12]
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	4413      	add	r3, r2
 8000766:	4a1b      	ldr	r2, [pc, #108]	; (80007d4 <BME280_getPressure+0x1bc>)
 8000768:	f9b2 2000 	ldrsh.w	r2, [r2]
 800076c:	4413      	add	r3, r2
 800076e:	111b      	asrs	r3, r3, #4
 8000770:	461a      	mov	r2, r3
 8000772:	697b      	ldr	r3, [r7, #20]
 8000774:	4413      	add	r3, r2
 8000776:	617b      	str	r3, [r7, #20]

    pressf = (float) press;
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	ee07 3a90 	vmov	s15, r3
 800077e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000782:	edc7 7a01 	vstr	s15, [r7, #4]
    return (pressf / 100.0f);
 8000786:	edd7 7a01 	vldr	s15, [r7, #4]
 800078a:	eddf 6a13 	vldr	s13, [pc, #76]	; 80007d8 <BME280_getPressure+0x1c0>
 800078e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000792:	bf00      	nop
}
 8000794:	eef0 7a47 	vmov.f32	s15, s14
 8000798:	eeb0 0a67 	vmov.f32	s0, s15
 800079c:	3718      	adds	r7, #24
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200002bc 	.word	0x200002bc
 80007a8:	2000027c 	.word	0x2000027c
 80007ac:	20000268 	.word	0x20000268
 80007b0:	20000266 	.word	0x20000266
 80007b4:	20000264 	.word	0x20000264
 80007b8:	20000262 	.word	0x20000262
 80007bc:	20000260 	.word	0x20000260
 80007c0:	2000025e 	.word	0x2000025e
 80007c4:	00000000 	.word	0x00000000
 80007c8:	fffff3cb 	.word	0xfffff3cb
 80007cc:	2000026e 	.word	0x2000026e
 80007d0:	2000026c 	.word	0x2000026c
 80007d4:	2000026a 	.word	0x2000026a
 80007d8:	42c80000 	.word	0x42c80000

080007dc <BME280_Init>:

void BME280_Init(void) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b088      	sub	sp, #32
 80007e0:	af02      	add	r7, sp, #8
    uint8_t cmd[18];

    cmd[0] = 0xF2; // ctrl_hum
 80007e2:	23f2      	movs	r3, #242	; 0xf2
 80007e4:	713b      	strb	r3, [r7, #4]
    cmd[1] = 0x05; // Humidity oversampling x16
 80007e6:	2305      	movs	r3, #5
 80007e8:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80007ea:	1d3a      	adds	r2, r7, #4
 80007ec:	2364      	movs	r3, #100	; 0x64
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	2302      	movs	r3, #2
 80007f2:	21ec      	movs	r1, #236	; 0xec
 80007f4:	4882      	ldr	r0, [pc, #520]	; (8000a00 <BME280_Init+0x224>)
 80007f6:	f00a fe16 	bl	800b426 <HAL_I2C_Master_Transmit>

    cmd[0] = 0xF4; // ctrl_meas
 80007fa:	23f4      	movs	r3, #244	; 0xf4
 80007fc:	713b      	strb	r3, [r7, #4]
    cmd[1] = 0xB7; // Temparature oversampling x16, Pressure oversampling x16, Normal mode
 80007fe:	23b7      	movs	r3, #183	; 0xb7
 8000800:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8000802:	1d3a      	adds	r2, r7, #4
 8000804:	2364      	movs	r3, #100	; 0x64
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2302      	movs	r3, #2
 800080a:	21ec      	movs	r1, #236	; 0xec
 800080c:	487c      	ldr	r0, [pc, #496]	; (8000a00 <BME280_Init+0x224>)
 800080e:	f00a fe0a 	bl	800b426 <HAL_I2C_Master_Transmit>

    cmd[0] = 0xF5; // config
 8000812:	23f5      	movs	r3, #245	; 0xf5
 8000814:	713b      	strb	r3, [r7, #4]
    cmd[1] = 0xa0; // Standby BME280_I2C_TIMEOUTms, Filter off
 8000816:	23a0      	movs	r3, #160	; 0xa0
 8000818:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 800081a:	1d3a      	adds	r2, r7, #4
 800081c:	2364      	movs	r3, #100	; 0x64
 800081e:	9300      	str	r3, [sp, #0]
 8000820:	2302      	movs	r3, #2
 8000822:	21ec      	movs	r1, #236	; 0xec
 8000824:	4876      	ldr	r0, [pc, #472]	; (8000a00 <BME280_Init+0x224>)
 8000826:	f00a fdfe 	bl	800b426 <HAL_I2C_Master_Transmit>

    cmd[0] = 0x88; // read dig_T regs
 800082a:	2388      	movs	r3, #136	; 0x88
 800082c:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800082e:	1d3a      	adds	r2, r7, #4
 8000830:	2364      	movs	r3, #100	; 0x64
 8000832:	9300      	str	r3, [sp, #0]
 8000834:	2301      	movs	r3, #1
 8000836:	21ec      	movs	r1, #236	; 0xec
 8000838:	4871      	ldr	r0, [pc, #452]	; (8000a00 <BME280_Init+0x224>)
 800083a:	f00a fdf4 	bl	800b426 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 6, BME280_I2C_TIMEOUT);
 800083e:	1d3a      	adds	r2, r7, #4
 8000840:	2364      	movs	r3, #100	; 0x64
 8000842:	9300      	str	r3, [sp, #0]
 8000844:	2306      	movs	r3, #6
 8000846:	21ec      	movs	r1, #236	; 0xec
 8000848:	486d      	ldr	r0, [pc, #436]	; (8000a00 <BME280_Init+0x224>)
 800084a:	f00a fee9 	bl	800b620 <HAL_I2C_Master_Receive>

    dig_T1 = (cmd[1] << 8) | cmd[0];
 800084e:	797b      	ldrb	r3, [r7, #5]
 8000850:	021b      	lsls	r3, r3, #8
 8000852:	b21a      	sxth	r2, r3
 8000854:	793b      	ldrb	r3, [r7, #4]
 8000856:	b21b      	sxth	r3, r3
 8000858:	4313      	orrs	r3, r2
 800085a:	b21b      	sxth	r3, r3
 800085c:	b29a      	uxth	r2, r3
 800085e:	4b69      	ldr	r3, [pc, #420]	; (8000a04 <BME280_Init+0x228>)
 8000860:	801a      	strh	r2, [r3, #0]
    dig_T2 = (cmd[3] << 8) | cmd[2];
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	021b      	lsls	r3, r3, #8
 8000866:	b21a      	sxth	r2, r3
 8000868:	79bb      	ldrb	r3, [r7, #6]
 800086a:	b21b      	sxth	r3, r3
 800086c:	4313      	orrs	r3, r2
 800086e:	b21a      	sxth	r2, r3
 8000870:	4b65      	ldr	r3, [pc, #404]	; (8000a08 <BME280_Init+0x22c>)
 8000872:	801a      	strh	r2, [r3, #0]
    dig_T3 = (cmd[5] << 8) | cmd[4];
 8000874:	7a7b      	ldrb	r3, [r7, #9]
 8000876:	021b      	lsls	r3, r3, #8
 8000878:	b21a      	sxth	r2, r3
 800087a:	7a3b      	ldrb	r3, [r7, #8]
 800087c:	b21b      	sxth	r3, r3
 800087e:	4313      	orrs	r3, r2
 8000880:	b21a      	sxth	r2, r3
 8000882:	4b62      	ldr	r3, [pc, #392]	; (8000a0c <BME280_Init+0x230>)
 8000884:	801a      	strh	r2, [r3, #0]

    cmd[0] = 0x8E; // read dig_P regs
 8000886:	238e      	movs	r3, #142	; 0x8e
 8000888:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800088a:	1d3a      	adds	r2, r7, #4
 800088c:	2364      	movs	r3, #100	; 0x64
 800088e:	9300      	str	r3, [sp, #0]
 8000890:	2301      	movs	r3, #1
 8000892:	21ec      	movs	r1, #236	; 0xec
 8000894:	485a      	ldr	r0, [pc, #360]	; (8000a00 <BME280_Init+0x224>)
 8000896:	f00a fdc6 	bl	800b426 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 18, BME280_I2C_TIMEOUT);
 800089a:	1d3a      	adds	r2, r7, #4
 800089c:	2364      	movs	r3, #100	; 0x64
 800089e:	9300      	str	r3, [sp, #0]
 80008a0:	2312      	movs	r3, #18
 80008a2:	21ec      	movs	r1, #236	; 0xec
 80008a4:	4856      	ldr	r0, [pc, #344]	; (8000a00 <BME280_Init+0x224>)
 80008a6:	f00a febb 	bl	800b620 <HAL_I2C_Master_Receive>

    dig_P1 = (cmd[1] << 8) | cmd[0];
 80008aa:	797b      	ldrb	r3, [r7, #5]
 80008ac:	021b      	lsls	r3, r3, #8
 80008ae:	b21a      	sxth	r2, r3
 80008b0:	793b      	ldrb	r3, [r7, #4]
 80008b2:	b21b      	sxth	r3, r3
 80008b4:	4313      	orrs	r3, r2
 80008b6:	b21b      	sxth	r3, r3
 80008b8:	b29a      	uxth	r2, r3
 80008ba:	4b55      	ldr	r3, [pc, #340]	; (8000a10 <BME280_Init+0x234>)
 80008bc:	801a      	strh	r2, [r3, #0]
    dig_P2 = (cmd[3] << 8) | cmd[2];
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	021b      	lsls	r3, r3, #8
 80008c2:	b21a      	sxth	r2, r3
 80008c4:	79bb      	ldrb	r3, [r7, #6]
 80008c6:	b21b      	sxth	r3, r3
 80008c8:	4313      	orrs	r3, r2
 80008ca:	b21a      	sxth	r2, r3
 80008cc:	4b51      	ldr	r3, [pc, #324]	; (8000a14 <BME280_Init+0x238>)
 80008ce:	801a      	strh	r2, [r3, #0]
    dig_P3 = (cmd[5] << 8) | cmd[4];
 80008d0:	7a7b      	ldrb	r3, [r7, #9]
 80008d2:	021b      	lsls	r3, r3, #8
 80008d4:	b21a      	sxth	r2, r3
 80008d6:	7a3b      	ldrb	r3, [r7, #8]
 80008d8:	b21b      	sxth	r3, r3
 80008da:	4313      	orrs	r3, r2
 80008dc:	b21a      	sxth	r2, r3
 80008de:	4b4e      	ldr	r3, [pc, #312]	; (8000a18 <BME280_Init+0x23c>)
 80008e0:	801a      	strh	r2, [r3, #0]
    dig_P4 = (cmd[7] << 8) | cmd[6];
 80008e2:	7afb      	ldrb	r3, [r7, #11]
 80008e4:	021b      	lsls	r3, r3, #8
 80008e6:	b21a      	sxth	r2, r3
 80008e8:	7abb      	ldrb	r3, [r7, #10]
 80008ea:	b21b      	sxth	r3, r3
 80008ec:	4313      	orrs	r3, r2
 80008ee:	b21a      	sxth	r2, r3
 80008f0:	4b4a      	ldr	r3, [pc, #296]	; (8000a1c <BME280_Init+0x240>)
 80008f2:	801a      	strh	r2, [r3, #0]
    dig_P5 = (cmd[9] << 8) | cmd[8];
 80008f4:	7b7b      	ldrb	r3, [r7, #13]
 80008f6:	021b      	lsls	r3, r3, #8
 80008f8:	b21a      	sxth	r2, r3
 80008fa:	7b3b      	ldrb	r3, [r7, #12]
 80008fc:	b21b      	sxth	r3, r3
 80008fe:	4313      	orrs	r3, r2
 8000900:	b21a      	sxth	r2, r3
 8000902:	4b47      	ldr	r3, [pc, #284]	; (8000a20 <BME280_Init+0x244>)
 8000904:	801a      	strh	r2, [r3, #0]
    dig_P6 = (cmd[11] << 8) | cmd[10];
 8000906:	7bfb      	ldrb	r3, [r7, #15]
 8000908:	021b      	lsls	r3, r3, #8
 800090a:	b21a      	sxth	r2, r3
 800090c:	7bbb      	ldrb	r3, [r7, #14]
 800090e:	b21b      	sxth	r3, r3
 8000910:	4313      	orrs	r3, r2
 8000912:	b21a      	sxth	r2, r3
 8000914:	4b43      	ldr	r3, [pc, #268]	; (8000a24 <BME280_Init+0x248>)
 8000916:	801a      	strh	r2, [r3, #0]
    dig_P7 = (cmd[13] << 8) | cmd[12];
 8000918:	7c7b      	ldrb	r3, [r7, #17]
 800091a:	021b      	lsls	r3, r3, #8
 800091c:	b21a      	sxth	r2, r3
 800091e:	7c3b      	ldrb	r3, [r7, #16]
 8000920:	b21b      	sxth	r3, r3
 8000922:	4313      	orrs	r3, r2
 8000924:	b21a      	sxth	r2, r3
 8000926:	4b40      	ldr	r3, [pc, #256]	; (8000a28 <BME280_Init+0x24c>)
 8000928:	801a      	strh	r2, [r3, #0]
    dig_P8 = (cmd[15] << 8) | cmd[14];
 800092a:	7cfb      	ldrb	r3, [r7, #19]
 800092c:	021b      	lsls	r3, r3, #8
 800092e:	b21a      	sxth	r2, r3
 8000930:	7cbb      	ldrb	r3, [r7, #18]
 8000932:	b21b      	sxth	r3, r3
 8000934:	4313      	orrs	r3, r2
 8000936:	b21a      	sxth	r2, r3
 8000938:	4b3c      	ldr	r3, [pc, #240]	; (8000a2c <BME280_Init+0x250>)
 800093a:	801a      	strh	r2, [r3, #0]
    dig_P9 = (cmd[17] << 8) | cmd[16];
 800093c:	7d7b      	ldrb	r3, [r7, #21]
 800093e:	021b      	lsls	r3, r3, #8
 8000940:	b21a      	sxth	r2, r3
 8000942:	7d3b      	ldrb	r3, [r7, #20]
 8000944:	b21b      	sxth	r3, r3
 8000946:	4313      	orrs	r3, r2
 8000948:	b21a      	sxth	r2, r3
 800094a:	4b39      	ldr	r3, [pc, #228]	; (8000a30 <BME280_Init+0x254>)
 800094c:	801a      	strh	r2, [r3, #0]

    cmd[0] = 0xA1; // read dig_H regs
 800094e:	23a1      	movs	r3, #161	; 0xa1
 8000950:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8000952:	1d3a      	adds	r2, r7, #4
 8000954:	2364      	movs	r3, #100	; 0x64
 8000956:	9300      	str	r3, [sp, #0]
 8000958:	2301      	movs	r3, #1
 800095a:	21ec      	movs	r1, #236	; 0xec
 800095c:	4828      	ldr	r0, [pc, #160]	; (8000a00 <BME280_Init+0x224>)
 800095e:	f00a fd62 	bl	800b426 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8000962:	1d3a      	adds	r2, r7, #4
 8000964:	2364      	movs	r3, #100	; 0x64
 8000966:	9300      	str	r3, [sp, #0]
 8000968:	2301      	movs	r3, #1
 800096a:	21ec      	movs	r1, #236	; 0xec
 800096c:	4824      	ldr	r0, [pc, #144]	; (8000a00 <BME280_Init+0x224>)
 800096e:	f00a fe57 	bl	800b620 <HAL_I2C_Master_Receive>

    cmd[1] = 0xE1; // read dig_H regs
 8000972:	23e1      	movs	r3, #225	; 0xe1
 8000974:	717b      	strb	r3, [r7, #5]

    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, &cmd[1], 1, BME280_I2C_TIMEOUT);
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	1c5a      	adds	r2, r3, #1
 800097a:	2364      	movs	r3, #100	; 0x64
 800097c:	9300      	str	r3, [sp, #0]
 800097e:	2301      	movs	r3, #1
 8000980:	21ec      	movs	r1, #236	; 0xec
 8000982:	481f      	ldr	r0, [pc, #124]	; (8000a00 <BME280_Init+0x224>)
 8000984:	f00a fd4f 	bl	800b426 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 7, BME280_I2C_TIMEOUT);
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	1c5a      	adds	r2, r3, #1
 800098c:	2364      	movs	r3, #100	; 0x64
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	2307      	movs	r3, #7
 8000992:	21ec      	movs	r1, #236	; 0xec
 8000994:	481a      	ldr	r0, [pc, #104]	; (8000a00 <BME280_Init+0x224>)
 8000996:	f00a fe43 	bl	800b620 <HAL_I2C_Master_Receive>

    dig_H1 = cmd[0];
 800099a:	793b      	ldrb	r3, [r7, #4]
 800099c:	b29a      	uxth	r2, r3
 800099e:	4b25      	ldr	r3, [pc, #148]	; (8000a34 <BME280_Init+0x258>)
 80009a0:	801a      	strh	r2, [r3, #0]
    dig_H2 = (cmd[2] << 8) | cmd[1];
 80009a2:	79bb      	ldrb	r3, [r7, #6]
 80009a4:	021b      	lsls	r3, r3, #8
 80009a6:	b21a      	sxth	r2, r3
 80009a8:	797b      	ldrb	r3, [r7, #5]
 80009aa:	b21b      	sxth	r3, r3
 80009ac:	4313      	orrs	r3, r2
 80009ae:	b21a      	sxth	r2, r3
 80009b0:	4b21      	ldr	r3, [pc, #132]	; (8000a38 <BME280_Init+0x25c>)
 80009b2:	801a      	strh	r2, [r3, #0]
    dig_H3 = cmd[3];
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	b29a      	uxth	r2, r3
 80009b8:	4b20      	ldr	r3, [pc, #128]	; (8000a3c <BME280_Init+0x260>)
 80009ba:	801a      	strh	r2, [r3, #0]
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 80009bc:	7a3b      	ldrb	r3, [r7, #8]
 80009be:	011b      	lsls	r3, r3, #4
 80009c0:	b21a      	sxth	r2, r3
 80009c2:	7a7b      	ldrb	r3, [r7, #9]
 80009c4:	b21b      	sxth	r3, r3
 80009c6:	f003 030f 	and.w	r3, r3, #15
 80009ca:	b21b      	sxth	r3, r3
 80009cc:	4313      	orrs	r3, r2
 80009ce:	b21a      	sxth	r2, r3
 80009d0:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <BME280_Init+0x264>)
 80009d2:	801a      	strh	r2, [r3, #0]
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 80009d4:	7abb      	ldrb	r3, [r7, #10]
 80009d6:	011b      	lsls	r3, r3, #4
 80009d8:	b21a      	sxth	r2, r3
 80009da:	7a7b      	ldrb	r3, [r7, #9]
 80009dc:	091b      	lsrs	r3, r3, #4
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	b21b      	sxth	r3, r3
 80009e2:	f003 030f 	and.w	r3, r3, #15
 80009e6:	b21b      	sxth	r3, r3
 80009e8:	4313      	orrs	r3, r2
 80009ea:	b21a      	sxth	r2, r3
 80009ec:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <BME280_Init+0x268>)
 80009ee:	801a      	strh	r2, [r3, #0]
    dig_H6 = cmd[7];
 80009f0:	7afb      	ldrb	r3, [r7, #11]
 80009f2:	b21a      	sxth	r2, r3
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <BME280_Init+0x26c>)
 80009f6:	801a      	strh	r2, [r3, #0]
}
 80009f8:	bf00      	nop
 80009fa:	3718      	adds	r7, #24
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	200002bc 	.word	0x200002bc
 8000a04:	20000258 	.word	0x20000258
 8000a08:	2000025a 	.word	0x2000025a
 8000a0c:	2000025c 	.word	0x2000025c
 8000a10:	2000025e 	.word	0x2000025e
 8000a14:	20000260 	.word	0x20000260
 8000a18:	20000262 	.word	0x20000262
 8000a1c:	20000264 	.word	0x20000264
 8000a20:	20000266 	.word	0x20000266
 8000a24:	20000268 	.word	0x20000268
 8000a28:	2000026a 	.word	0x2000026a
 8000a2c:	2000026c 	.word	0x2000026c
 8000a30:	2000026e 	.word	0x2000026e
 8000a34:	20000270 	.word	0x20000270
 8000a38:	20000274 	.word	0x20000274
 8000a3c:	20000272 	.word	0x20000272
 8000a40:	20000276 	.word	0x20000276
 8000a44:	20000278 	.word	0x20000278
 8000a48:	2000027a 	.word	0x2000027a

08000a4c <fahrenheit>:

float fahrenheit(float celsius) {
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	ed87 0a01 	vstr	s0, [r7, #4]
    return celsius * 9 / 5 + 32;
 8000a56:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a5a:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8000a5e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a62:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8000a66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a6a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000a80 <fahrenheit+0x34>
 8000a6e:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8000a72:	eeb0 0a67 	vmov.f32	s0, s15
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	42000000 	.word	0x42000000

08000a84 <calculate_humidex>:

double calculate_humidex(double temperature, double humidity) {
 8000a84:	b5b0      	push	{r4, r5, r7, lr}
 8000a86:	b088      	sub	sp, #32
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	ed87 0b02 	vstr	d0, [r7, #8]
 8000a8e:	ed87 1b00 	vstr	d1, [r7]
    double e;
    e = (6.112 * pow(10, (7.5 * temperature / (237.7 + temperature))) * humidity / 100);
 8000a92:	f04f 0200 	mov.w	r2, #0
 8000a96:	4b3a      	ldr	r3, [pc, #232]	; (8000b80 <calculate_humidex+0xfc>)
 8000a98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000a9c:	f018 f9ac 	bl	8018df8 <__aeabi_dmul>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	460b      	mov	r3, r1
 8000aa4:	4614      	mov	r4, r2
 8000aa6:	461d      	mov	r5, r3
 8000aa8:	a32d      	add	r3, pc, #180	; (adr r3, 8000b60 <calculate_humidex+0xdc>)
 8000aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000aae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ab2:	f017 ffeb 	bl	8018a8c <__adddf3>
 8000ab6:	4602      	mov	r2, r0
 8000ab8:	460b      	mov	r3, r1
 8000aba:	4620      	mov	r0, r4
 8000abc:	4629      	mov	r1, r5
 8000abe:	f018 fac5 	bl	801904c <__aeabi_ddiv>
 8000ac2:	4602      	mov	r2, r0
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	ec43 2b17 	vmov	d7, r2, r3
 8000aca:	eeb0 1a47 	vmov.f32	s2, s14
 8000ace:	eef0 1a67 	vmov.f32	s3, s15
 8000ad2:	ed9f 0b25 	vldr	d0, [pc, #148]	; 8000b68 <calculate_humidex+0xe4>
 8000ad6:	f01d fbfb 	bl	801e2d0 <pow>
 8000ada:	ec51 0b10 	vmov	r0, r1, d0
 8000ade:	a324      	add	r3, pc, #144	; (adr r3, 8000b70 <calculate_humidex+0xec>)
 8000ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ae4:	f018 f988 	bl	8018df8 <__aeabi_dmul>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	460b      	mov	r3, r1
 8000aec:	4610      	mov	r0, r2
 8000aee:	4619      	mov	r1, r3
 8000af0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000af4:	f018 f980 	bl	8018df8 <__aeabi_dmul>
 8000af8:	4602      	mov	r2, r0
 8000afa:	460b      	mov	r3, r1
 8000afc:	4610      	mov	r0, r2
 8000afe:	4619      	mov	r1, r3
 8000b00:	f04f 0200 	mov.w	r2, #0
 8000b04:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <calculate_humidex+0x100>)
 8000b06:	f018 faa1 	bl	801904c <__aeabi_ddiv>
 8000b0a:	4602      	mov	r2, r0
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double humidex = temperature + 0.55555555 * (e - 10.0);
 8000b12:	f04f 0200 	mov.w	r2, #0
 8000b16:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <calculate_humidex+0x104>)
 8000b18:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000b1c:	f017 ffb4 	bl	8018a88 <__aeabi_dsub>
 8000b20:	4602      	mov	r2, r0
 8000b22:	460b      	mov	r3, r1
 8000b24:	4610      	mov	r0, r2
 8000b26:	4619      	mov	r1, r3
 8000b28:	a313      	add	r3, pc, #76	; (adr r3, 8000b78 <calculate_humidex+0xf4>)
 8000b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b2e:	f018 f963 	bl	8018df8 <__aeabi_dmul>
 8000b32:	4602      	mov	r2, r0
 8000b34:	460b      	mov	r3, r1
 8000b36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000b3a:	f017 ffa7 	bl	8018a8c <__adddf3>
 8000b3e:	4602      	mov	r2, r0
 8000b40:	460b      	mov	r3, r1
 8000b42:	e9c7 2304 	strd	r2, r3, [r7, #16]
    return humidex;
 8000b46:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000b4a:	ec43 2b17 	vmov	d7, r2, r3
}
 8000b4e:	eeb0 0a47 	vmov.f32	s0, s14
 8000b52:	eef0 0a67 	vmov.f32	s1, s15
 8000b56:	3720      	adds	r7, #32
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bdb0      	pop	{r4, r5, r7, pc}
 8000b5c:	f3af 8000 	nop.w
 8000b60:	66666666 	.word	0x66666666
 8000b64:	406db666 	.word	0x406db666
 8000b68:	00000000 	.word	0x00000000
 8000b6c:	40240000 	.word	0x40240000
 8000b70:	20c49ba6 	.word	0x20c49ba6
 8000b74:	401872b0 	.word	0x401872b0
 8000b78:	6ecb8fb6 	.word	0x6ecb8fb6
 8000b7c:	3fe1c71c 	.word	0x3fe1c71c
 8000b80:	401e0000 	.word	0x401e0000
 8000b84:	40590000 	.word	0x40590000
 8000b88:	40240000 	.word	0x40240000

08000b8c <calculate_humidityAbsolute>:

double calculate_humidityAbsolute(double temperature, double humidityRelative) {
 8000b8c:	b5b0      	push	{r4, r5, r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	ed87 0b02 	vstr	d0, [r7, #8]
 8000b96:	ed87 1b00 	vstr	d1, [r7]
    return 6.112 * pow(2.71828, ((17.67 * temperature) / (temperature + 243.5)) * humidityRelative * 2.1674) /
 8000b9a:	a32f      	add	r3, pc, #188	; (adr r3, 8000c58 <calculate_humidityAbsolute+0xcc>)
 8000b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ba0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ba4:	f018 f928 	bl	8018df8 <__aeabi_dmul>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	460b      	mov	r3, r1
 8000bac:	4614      	mov	r4, r2
 8000bae:	461d      	mov	r5, r3
 8000bb0:	a32b      	add	r3, pc, #172	; (adr r3, 8000c60 <calculate_humidityAbsolute+0xd4>)
 8000bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000bba:	f017 ff67 	bl	8018a8c <__adddf3>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	4620      	mov	r0, r4
 8000bc4:	4629      	mov	r1, r5
 8000bc6:	f018 fa41 	bl	801904c <__aeabi_ddiv>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	460b      	mov	r3, r1
 8000bce:	4610      	mov	r0, r2
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000bd6:	f018 f90f 	bl	8018df8 <__aeabi_dmul>
 8000bda:	4602      	mov	r2, r0
 8000bdc:	460b      	mov	r3, r1
 8000bde:	4610      	mov	r0, r2
 8000be0:	4619      	mov	r1, r3
 8000be2:	a321      	add	r3, pc, #132	; (adr r3, 8000c68 <calculate_humidityAbsolute+0xdc>)
 8000be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000be8:	f018 f906 	bl	8018df8 <__aeabi_dmul>
 8000bec:	4602      	mov	r2, r0
 8000bee:	460b      	mov	r3, r1
 8000bf0:	ec43 2b17 	vmov	d7, r2, r3
 8000bf4:	eeb0 1a47 	vmov.f32	s2, s14
 8000bf8:	eef0 1a67 	vmov.f32	s3, s15
 8000bfc:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8000c50 <calculate_humidityAbsolute+0xc4>
 8000c00:	f01d fb66 	bl	801e2d0 <pow>
 8000c04:	ec51 0b10 	vmov	r0, r1, d0
 8000c08:	a319      	add	r3, pc, #100	; (adr r3, 8000c70 <calculate_humidityAbsolute+0xe4>)
 8000c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c0e:	f018 f8f3 	bl	8018df8 <__aeabi_dmul>
 8000c12:	4602      	mov	r2, r0
 8000c14:	460b      	mov	r3, r1
 8000c16:	4614      	mov	r4, r2
 8000c18:	461d      	mov	r5, r3
           (273.15 + temperature);
 8000c1a:	a317      	add	r3, pc, #92	; (adr r3, 8000c78 <calculate_humidityAbsolute+0xec>)
 8000c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c20:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000c24:	f017 ff32 	bl	8018a8c <__adddf3>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	460b      	mov	r3, r1
    return 6.112 * pow(2.71828, ((17.67 * temperature) / (temperature + 243.5)) * humidityRelative * 2.1674) /
 8000c2c:	4620      	mov	r0, r4
 8000c2e:	4629      	mov	r1, r5
 8000c30:	f018 fa0c 	bl	801904c <__aeabi_ddiv>
 8000c34:	4602      	mov	r2, r0
 8000c36:	460b      	mov	r3, r1
 8000c38:	ec43 2b17 	vmov	d7, r2, r3
}
 8000c3c:	eeb0 0a47 	vmov.f32	s0, s14
 8000c40:	eef0 0a67 	vmov.f32	s1, s15
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bdb0      	pop	{r4, r5, r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	f3af 8000 	nop.w
 8000c50:	95aaf790 	.word	0x95aaf790
 8000c54:	4005bf09 	.word	0x4005bf09
 8000c58:	1eb851ec 	.word	0x1eb851ec
 8000c5c:	4031ab85 	.word	0x4031ab85
 8000c60:	00000000 	.word	0x00000000
 8000c64:	406e7000 	.word	0x406e7000
 8000c68:	cfaacd9f 	.word	0xcfaacd9f
 8000c6c:	400156d5 	.word	0x400156d5
 8000c70:	20c49ba6 	.word	0x20c49ba6
 8000c74:	401872b0 	.word	0x401872b0
 8000c78:	66666666 	.word	0x66666666
 8000c7c:	40711266 	.word	0x40711266

08000c80 <decToBcd>:

extern I2C_HandleTypeDef DS3231_I2C;

uint8_t rtcBuffer[19], rtcBufferSet[17];

uint8_t decToBcd(uint8_t val) {
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
    return ((val / 10 * 16) + (val % 10));
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	4a0c      	ldr	r2, [pc, #48]	; (8000cc0 <decToBcd+0x40>)
 8000c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c92:	08db      	lsrs	r3, r3, #3
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	011b      	lsls	r3, r3, #4
 8000c98:	b2d8      	uxtb	r0, r3
 8000c9a:	79fa      	ldrb	r2, [r7, #7]
 8000c9c:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <decToBcd+0x40>)
 8000c9e:	fba3 1302 	umull	r1, r3, r3, r2
 8000ca2:	08d9      	lsrs	r1, r3, #3
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	440b      	add	r3, r1
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	4403      	add	r3, r0
 8000cb2:	b2db      	uxtb	r3, r3
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	cccccccd 	.word	0xcccccccd

08000cc4 <bcdToDec>:

uint8_t bcdToDec(uint8_t val) {
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
    return ((val / 16 * 10) + (val % 16));
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	091b      	lsrs	r3, r3, #4
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	0092      	lsls	r2, r2, #2
 8000cd8:	4413      	add	r3, r2
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	f003 030f 	and.w	r3, r3, #15
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	4413      	add	r3, r2
 8000ce8:	b2db      	uxtb	r3, r3
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <DS3231_Update>:

void DS3231_Update(void) {
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b084      	sub	sp, #16
 8000cfa:	af02      	add	r7, sp, #8
    uint8_t cmd = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
 8000d00:	1dfa      	adds	r2, r7, #7
 8000d02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2301      	movs	r3, #1
 8000d0a:	21d0      	movs	r1, #208	; 0xd0
 8000d0c:	4827      	ldr	r0, [pc, #156]	; (8000dac <DS3231_Update+0xb6>)
 8000d0e:	f00a fb8a 	bl	800b426 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&DS3231_I2C, DS3231_ADDRESS, rtcBuffer, 19, DS3231_I2C_TIMEOUT);
 8000d12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d16:	9300      	str	r3, [sp, #0]
 8000d18:	2313      	movs	r3, #19
 8000d1a:	4a25      	ldr	r2, [pc, #148]	; (8000db0 <DS3231_Update+0xba>)
 8000d1c:	21d0      	movs	r1, #208	; 0xd0
 8000d1e:	4823      	ldr	r0, [pc, #140]	; (8000dac <DS3231_Update+0xb6>)
 8000d20:	f00a fc7e 	bl	800b620 <HAL_I2C_Master_Receive>
    rtcBufferSet[1] = rtcBuffer[0];
 8000d24:	4b22      	ldr	r3, [pc, #136]	; (8000db0 <DS3231_Update+0xba>)
 8000d26:	781a      	ldrb	r2, [r3, #0]
 8000d28:	4b22      	ldr	r3, [pc, #136]	; (8000db4 <DS3231_Update+0xbe>)
 8000d2a:	705a      	strb	r2, [r3, #1]
    rtcBufferSet[2] = rtcBuffer[1];
 8000d2c:	4b20      	ldr	r3, [pc, #128]	; (8000db0 <DS3231_Update+0xba>)
 8000d2e:	785a      	ldrb	r2, [r3, #1]
 8000d30:	4b20      	ldr	r3, [pc, #128]	; (8000db4 <DS3231_Update+0xbe>)
 8000d32:	709a      	strb	r2, [r3, #2]
    rtcBufferSet[3] = rtcBuffer[2];
 8000d34:	4b1e      	ldr	r3, [pc, #120]	; (8000db0 <DS3231_Update+0xba>)
 8000d36:	789a      	ldrb	r2, [r3, #2]
 8000d38:	4b1e      	ldr	r3, [pc, #120]	; (8000db4 <DS3231_Update+0xbe>)
 8000d3a:	70da      	strb	r2, [r3, #3]
    rtcBufferSet[4] = rtcBuffer[3];
 8000d3c:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <DS3231_Update+0xba>)
 8000d3e:	78da      	ldrb	r2, [r3, #3]
 8000d40:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <DS3231_Update+0xbe>)
 8000d42:	711a      	strb	r2, [r3, #4]
    rtcBufferSet[5] = rtcBuffer[4];
 8000d44:	4b1a      	ldr	r3, [pc, #104]	; (8000db0 <DS3231_Update+0xba>)
 8000d46:	791a      	ldrb	r2, [r3, #4]
 8000d48:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <DS3231_Update+0xbe>)
 8000d4a:	715a      	strb	r2, [r3, #5]
    rtcBufferSet[6] = rtcBuffer[5];
 8000d4c:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <DS3231_Update+0xba>)
 8000d4e:	795a      	ldrb	r2, [r3, #5]
 8000d50:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <DS3231_Update+0xbe>)
 8000d52:	719a      	strb	r2, [r3, #6]
    rtcBufferSet[7] = rtcBuffer[6];
 8000d54:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <DS3231_Update+0xba>)
 8000d56:	799a      	ldrb	r2, [r3, #6]
 8000d58:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <DS3231_Update+0xbe>)
 8000d5a:	71da      	strb	r2, [r3, #7]
    rtcBufferSet[8] = rtcBuffer[7];
 8000d5c:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <DS3231_Update+0xba>)
 8000d5e:	79da      	ldrb	r2, [r3, #7]
 8000d60:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <DS3231_Update+0xbe>)
 8000d62:	721a      	strb	r2, [r3, #8]
    rtcBufferSet[9] = rtcBuffer[8];
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <DS3231_Update+0xba>)
 8000d66:	7a1a      	ldrb	r2, [r3, #8]
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <DS3231_Update+0xbe>)
 8000d6a:	725a      	strb	r2, [r3, #9]
    rtcBufferSet[10] = rtcBuffer[9];
 8000d6c:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <DS3231_Update+0xba>)
 8000d6e:	7a5a      	ldrb	r2, [r3, #9]
 8000d70:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <DS3231_Update+0xbe>)
 8000d72:	729a      	strb	r2, [r3, #10]
    rtcBufferSet[11] = rtcBuffer[10];
 8000d74:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <DS3231_Update+0xba>)
 8000d76:	7a9a      	ldrb	r2, [r3, #10]
 8000d78:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <DS3231_Update+0xbe>)
 8000d7a:	72da      	strb	r2, [r3, #11]
    rtcBufferSet[12] = rtcBuffer[11];
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <DS3231_Update+0xba>)
 8000d7e:	7ada      	ldrb	r2, [r3, #11]
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <DS3231_Update+0xbe>)
 8000d82:	731a      	strb	r2, [r3, #12]
    rtcBufferSet[13] = rtcBuffer[12];
 8000d84:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <DS3231_Update+0xba>)
 8000d86:	7b1a      	ldrb	r2, [r3, #12]
 8000d88:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <DS3231_Update+0xbe>)
 8000d8a:	735a      	strb	r2, [r3, #13]
    rtcBufferSet[14] = rtcBuffer[13];
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <DS3231_Update+0xba>)
 8000d8e:	7b5a      	ldrb	r2, [r3, #13]
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <DS3231_Update+0xbe>)
 8000d92:	739a      	strb	r2, [r3, #14]
    rtcBufferSet[15] = rtcBuffer[14];
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <DS3231_Update+0xba>)
 8000d96:	7b9a      	ldrb	r2, [r3, #14]
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <DS3231_Update+0xbe>)
 8000d9a:	73da      	strb	r2, [r3, #15]
    rtcBufferSet[16] = rtcBuffer[15];
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <DS3231_Update+0xba>)
 8000d9e:	7bda      	ldrb	r2, [r3, #15]
 8000da0:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <DS3231_Update+0xbe>)
 8000da2:	741a      	strb	r2, [r3, #16]
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	200002bc 	.word	0x200002bc
 8000db0:	20000280 	.word	0x20000280
 8000db4:	20000294 	.word	0x20000294

08000db8 <DS3231_getSec>:

uint8_t DS3231_getSec(void) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000dbc:	f7ff ff9b 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[0]);
 8000dc0:	4b03      	ldr	r3, [pc, #12]	; (8000dd0 <DS3231_getSec+0x18>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff7d 	bl	8000cc4 <bcdToDec>
 8000dca:	4603      	mov	r3, r0
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000280 	.word	0x20000280

08000dd4 <DS3231_getMin>:

uint8_t DS3231_getMin(void) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000dd8:	f7ff ff8d 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[1]);
 8000ddc:	4b03      	ldr	r3, [pc, #12]	; (8000dec <DS3231_getMin+0x18>)
 8000dde:	785b      	ldrb	r3, [r3, #1]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff6f 	bl	8000cc4 <bcdToDec>
 8000de6:	4603      	mov	r3, r0
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000280 	.word	0x20000280

08000df0 <DS3231_getHrs>:

uint8_t DS3231_getHrs(void) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000df4:	f7ff ff7f 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[2]);
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <DS3231_getHrs+0x18>)
 8000dfa:	789b      	ldrb	r3, [r3, #2]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ff61 	bl	8000cc4 <bcdToDec>
 8000e02:	4603      	mov	r3, r0
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20000280 	.word	0x20000280

08000e0c <DS3231_getDay>:

uint8_t DS3231_getDay(void) {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e10:	f7ff ff71 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[3]);
 8000e14:	4b03      	ldr	r3, [pc, #12]	; (8000e24 <DS3231_getDay+0x18>)
 8000e16:	78db      	ldrb	r3, [r3, #3]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff ff53 	bl	8000cc4 <bcdToDec>
 8000e1e:	4603      	mov	r3, r0
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000280 	.word	0x20000280

08000e28 <DS3231_getDate>:

uint8_t DS3231_getDate(void) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e2c:	f7ff ff63 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[4]);
 8000e30:	4b03      	ldr	r3, [pc, #12]	; (8000e40 <DS3231_getDate+0x18>)
 8000e32:	791b      	ldrb	r3, [r3, #4]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff45 	bl	8000cc4 <bcdToDec>
 8000e3a:	4603      	mov	r3, r0
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000280 	.word	0x20000280

08000e44 <DS3231_getMonth>:

uint8_t DS3231_getMonth(void) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e48:	f7ff ff55 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[5]);
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <DS3231_getMonth+0x18>)
 8000e4e:	795b      	ldrb	r3, [r3, #5]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff37 	bl	8000cc4 <bcdToDec>
 8000e56:	4603      	mov	r3, r0
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000280 	.word	0x20000280

08000e60 <DS3231_getYear>:

uint8_t DS3231_getYear(void) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e64:	f7ff ff47 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[6]);
 8000e68:	4b03      	ldr	r3, [pc, #12]	; (8000e78 <DS3231_getYear+0x18>)
 8000e6a:	799b      	ldrb	r3, [r3, #6]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ff29 	bl	8000cc4 <bcdToDec>
 8000e72:	4603      	mov	r3, r0
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000280 	.word	0x20000280

08000e7c <DS3231_getAlarm1Sec>:

uint8_t DS3231_getAlarm1Sec(void) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e80:	f7ff ff39 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[7]);
 8000e84:	4b03      	ldr	r3, [pc, #12]	; (8000e94 <DS3231_getAlarm1Sec+0x18>)
 8000e86:	79db      	ldrb	r3, [r3, #7]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff ff1b 	bl	8000cc4 <bcdToDec>
 8000e8e:	4603      	mov	r3, r0
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000280 	.word	0x20000280

08000e98 <DS3231_getAlarm1Min>:

uint8_t DS3231_getAlarm1Min(void) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e9c:	f7ff ff2b 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[8]);
 8000ea0:	4b03      	ldr	r3, [pc, #12]	; (8000eb0 <DS3231_getAlarm1Min+0x18>)
 8000ea2:	7a1b      	ldrb	r3, [r3, #8]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff0d 	bl	8000cc4 <bcdToDec>
 8000eaa:	4603      	mov	r3, r0
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000280 	.word	0x20000280

08000eb4 <DS3231_getAlarm1Hour>:

uint8_t DS3231_getAlarm1Hour(void) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000eb8:	f7ff ff1d 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[9]);
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <DS3231_getAlarm1Hour+0x18>)
 8000ebe:	7a5b      	ldrb	r3, [r3, #9]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff feff 	bl	8000cc4 <bcdToDec>
 8000ec6:	4603      	mov	r3, r0
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000280 	.word	0x20000280

08000ed0 <DS3231_getAlarm1Day>:

uint8_t DS3231_getAlarm1Day(void) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000ed4:	f7ff ff0f 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[10]);
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <DS3231_getAlarm1Day+0x18>)
 8000eda:	7a9b      	ldrb	r3, [r3, #10]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff fef1 	bl	8000cc4 <bcdToDec>
 8000ee2:	4603      	mov	r3, r0
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000280 	.word	0x20000280

08000eec <DS3231_getAlarm1Date>:

uint8_t DS3231_getAlarm1Date(void) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000ef0:	f7ff ff01 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[11]);
 8000ef4:	4b03      	ldr	r3, [pc, #12]	; (8000f04 <DS3231_getAlarm1Date+0x18>)
 8000ef6:	7adb      	ldrb	r3, [r3, #11]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fee3 	bl	8000cc4 <bcdToDec>
 8000efe:	4603      	mov	r3, r0
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000280 	.word	0x20000280

08000f08 <DS3231_getAlarm2Min>:

uint8_t DS3231_getAlarm2Min(void) {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000f0c:	f7ff fef3 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[12]);
 8000f10:	4b03      	ldr	r3, [pc, #12]	; (8000f20 <DS3231_getAlarm2Min+0x18>)
 8000f12:	7b1b      	ldrb	r3, [r3, #12]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff fed5 	bl	8000cc4 <bcdToDec>
 8000f1a:	4603      	mov	r3, r0
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000280 	.word	0x20000280

08000f24 <DS3231_getAlarm2Hour>:

uint8_t DS3231_getAlarm2Hour(void) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000f28:	f7ff fee5 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[13]);
 8000f2c:	4b03      	ldr	r3, [pc, #12]	; (8000f3c <DS3231_getAlarm2Hour+0x18>)
 8000f2e:	7b5b      	ldrb	r3, [r3, #13]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fec7 	bl	8000cc4 <bcdToDec>
 8000f36:	4603      	mov	r3, r0
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000280 	.word	0x20000280

08000f40 <DS3231_getAlarm2Day>:

uint8_t DS3231_getAlarm2Day(void) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000f44:	f7ff fed7 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[14]);
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <DS3231_getAlarm2Day+0x18>)
 8000f4a:	7b9b      	ldrb	r3, [r3, #14]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff feb9 	bl	8000cc4 <bcdToDec>
 8000f52:	4603      	mov	r3, r0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000280 	.word	0x20000280

08000f5c <DS3231_getAlarm2Date>:

uint8_t DS3231_getAlarm2Date(void) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000f60:	f7ff fec9 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[15]);
 8000f64:	4b03      	ldr	r3, [pc, #12]	; (8000f74 <DS3231_getAlarm2Date+0x18>)
 8000f66:	7bdb      	ldrb	r3, [r3, #15]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff feab 	bl	8000cc4 <bcdToDec>
 8000f6e:	4603      	mov	r3, r0
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000280 	.word	0x20000280

08000f78 <DS3231_getTemp>:

double DS3231_getTemp(void) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000f7e:	f7ff feba 	bl	8000cf6 <DS3231_Update>
    uint8_t tempMSB = rtcBuffer[17];
 8000f82:	4b1f      	ldr	r3, [pc, #124]	; (8001000 <DS3231_getTemp+0x88>)
 8000f84:	7c5b      	ldrb	r3, [r3, #17]
 8000f86:	73fb      	strb	r3, [r7, #15]
    uint8_t tempLSB = rtcBuffer[18];
 8000f88:	4b1d      	ldr	r3, [pc, #116]	; (8001000 <DS3231_getTemp+0x88>)
 8000f8a:	7c9b      	ldrb	r3, [r3, #18]
 8000f8c:	73bb      	strb	r3, [r7, #14]
    double t = 0.0;
 8000f8e:	f04f 0200 	mov.w	r2, #0
 8000f92:	f04f 0300 	mov.w	r3, #0
 8000f96:	e9c7 2300 	strd	r2, r3, [r7]
    tempLSB >>= 6;
 8000f9a:	7bbb      	ldrb	r3, [r7, #14]
 8000f9c:	099b      	lsrs	r3, r3, #6
 8000f9e:	73bb      	strb	r3, [r7, #14]
    tempLSB &= 0x03;
 8000fa0:	7bbb      	ldrb	r3, [r7, #14]
 8000fa2:	f003 0303 	and.w	r3, r3, #3
 8000fa6:	73bb      	strb	r3, [r7, #14]
    t = ((double) tempLSB);
 8000fa8:	7bbb      	ldrb	r3, [r7, #14]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f017 feaa 	bl	8018d04 <__aeabi_ui2d>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	e9c7 2300 	strd	r2, r3, [r7]
    t *= 0.25;
 8000fb8:	f04f 0200 	mov.w	r2, #0
 8000fbc:	4b11      	ldr	r3, [pc, #68]	; (8001004 <DS3231_getTemp+0x8c>)
 8000fbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fc2:	f017 ff19 	bl	8018df8 <__aeabi_dmul>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	e9c7 2300 	strd	r2, r3, [r7]
    t += tempMSB;
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f017 fea7 	bl	8018d24 <__aeabi_i2d>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fde:	f017 fd55 	bl	8018a8c <__adddf3>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	e9c7 2300 	strd	r2, r3, [r7]
    return t;
 8000fea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fee:	ec43 2b17 	vmov	d7, r2, r3
}
 8000ff2:	eeb0 0a47 	vmov.f32	s0, s14
 8000ff6:	eef0 0a67 	vmov.f32	s1, s15
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000280 	.word	0x20000280
 8001004:	3fd00000 	.word	0x3fd00000

08001008 <DS3231_setSec>:

void DS3231_setSec(uint8_t value) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af02      	add	r7, sp, #8
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001012:	f7ff fe70 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[1] = decToBcd(value);
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fe31 	bl	8000c80 <decToBcd>
 800101e:	4603      	mov	r3, r0
 8001020:	461a      	mov	r2, r3
 8001022:	4b07      	ldr	r3, [pc, #28]	; (8001040 <DS3231_setSec+0x38>)
 8001024:	705a      	strb	r2, [r3, #1]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2311      	movs	r3, #17
 800102e:	4a04      	ldr	r2, [pc, #16]	; (8001040 <DS3231_setSec+0x38>)
 8001030:	21d0      	movs	r1, #208	; 0xd0
 8001032:	4804      	ldr	r0, [pc, #16]	; (8001044 <DS3231_setSec+0x3c>)
 8001034:	f00a f9f7 	bl	800b426 <HAL_I2C_Master_Transmit>
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000294 	.word	0x20000294
 8001044:	200002bc 	.word	0x200002bc

08001048 <DS3231_setMin>:

void DS3231_setMin(uint8_t value) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af02      	add	r7, sp, #8
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001052:	f7ff fe50 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[2] = decToBcd(value);
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fe11 	bl	8000c80 <decToBcd>
 800105e:	4603      	mov	r3, r0
 8001060:	461a      	mov	r2, r3
 8001062:	4b07      	ldr	r3, [pc, #28]	; (8001080 <DS3231_setMin+0x38>)
 8001064:	709a      	strb	r2, [r3, #2]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001066:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2311      	movs	r3, #17
 800106e:	4a04      	ldr	r2, [pc, #16]	; (8001080 <DS3231_setMin+0x38>)
 8001070:	21d0      	movs	r1, #208	; 0xd0
 8001072:	4804      	ldr	r0, [pc, #16]	; (8001084 <DS3231_setMin+0x3c>)
 8001074:	f00a f9d7 	bl	800b426 <HAL_I2C_Master_Transmit>
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000294 	.word	0x20000294
 8001084:	200002bc 	.word	0x200002bc

08001088 <DS3231_setHrs>:

void DS3231_setHrs(uint8_t value) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af02      	add	r7, sp, #8
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001092:	f7ff fe30 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[3] = decToBcd(value);
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fdf1 	bl	8000c80 <decToBcd>
 800109e:	4603      	mov	r3, r0
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <DS3231_setHrs+0x38>)
 80010a4:	70da      	strb	r2, [r3, #3]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80010a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	2311      	movs	r3, #17
 80010ae:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <DS3231_setHrs+0x38>)
 80010b0:	21d0      	movs	r1, #208	; 0xd0
 80010b2:	4804      	ldr	r0, [pc, #16]	; (80010c4 <DS3231_setHrs+0x3c>)
 80010b4:	f00a f9b7 	bl	800b426 <HAL_I2C_Master_Transmit>
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000294 	.word	0x20000294
 80010c4:	200002bc 	.word	0x200002bc

080010c8 <DS3231_setDay>:

void DS3231_setDay(uint8_t value) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af02      	add	r7, sp, #8
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 80010d2:	f7ff fe10 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[4] = decToBcd(value);
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fdd1 	bl	8000c80 <decToBcd>
 80010de:	4603      	mov	r3, r0
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b07      	ldr	r3, [pc, #28]	; (8001100 <DS3231_setDay+0x38>)
 80010e4:	711a      	strb	r2, [r3, #4]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80010e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	2311      	movs	r3, #17
 80010ee:	4a04      	ldr	r2, [pc, #16]	; (8001100 <DS3231_setDay+0x38>)
 80010f0:	21d0      	movs	r1, #208	; 0xd0
 80010f2:	4804      	ldr	r0, [pc, #16]	; (8001104 <DS3231_setDay+0x3c>)
 80010f4:	f00a f997 	bl	800b426 <HAL_I2C_Master_Transmit>
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000294 	.word	0x20000294
 8001104:	200002bc 	.word	0x200002bc

08001108 <DS3231_setDate>:

void DS3231_setDate(uint8_t value) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af02      	add	r7, sp, #8
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001112:	f7ff fdf0 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[5] = decToBcd(value);
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fdb1 	bl	8000c80 <decToBcd>
 800111e:	4603      	mov	r3, r0
 8001120:	461a      	mov	r2, r3
 8001122:	4b07      	ldr	r3, [pc, #28]	; (8001140 <DS3231_setDate+0x38>)
 8001124:	715a      	strb	r2, [r3, #5]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	2311      	movs	r3, #17
 800112e:	4a04      	ldr	r2, [pc, #16]	; (8001140 <DS3231_setDate+0x38>)
 8001130:	21d0      	movs	r1, #208	; 0xd0
 8001132:	4804      	ldr	r0, [pc, #16]	; (8001144 <DS3231_setDate+0x3c>)
 8001134:	f00a f977 	bl	800b426 <HAL_I2C_Master_Transmit>
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000294 	.word	0x20000294
 8001144:	200002bc 	.word	0x200002bc

08001148 <DS3231_setMonth>:

void DS3231_setMonth(uint8_t value) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af02      	add	r7, sp, #8
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001152:	f7ff fdd0 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[6] = decToBcd(value);
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff fd91 	bl	8000c80 <decToBcd>
 800115e:	4603      	mov	r3, r0
 8001160:	461a      	mov	r2, r3
 8001162:	4b07      	ldr	r3, [pc, #28]	; (8001180 <DS3231_setMonth+0x38>)
 8001164:	719a      	strb	r2, [r3, #6]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001166:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	2311      	movs	r3, #17
 800116e:	4a04      	ldr	r2, [pc, #16]	; (8001180 <DS3231_setMonth+0x38>)
 8001170:	21d0      	movs	r1, #208	; 0xd0
 8001172:	4804      	ldr	r0, [pc, #16]	; (8001184 <DS3231_setMonth+0x3c>)
 8001174:	f00a f957 	bl	800b426 <HAL_I2C_Master_Transmit>
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000294 	.word	0x20000294
 8001184:	200002bc 	.word	0x200002bc

08001188 <DS3231_setYear>:

void DS3231_setYear(uint8_t value) {
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af02      	add	r7, sp, #8
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001192:	f7ff fdb0 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[7] = decToBcd(value);
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff fd71 	bl	8000c80 <decToBcd>
 800119e:	4603      	mov	r3, r0
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <DS3231_setYear+0x38>)
 80011a4:	71da      	strb	r2, [r3, #7]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80011a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	2311      	movs	r3, #17
 80011ae:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <DS3231_setYear+0x38>)
 80011b0:	21d0      	movs	r1, #208	; 0xd0
 80011b2:	4804      	ldr	r0, [pc, #16]	; (80011c4 <DS3231_setYear+0x3c>)
 80011b4:	f00a f937 	bl	800b426 <HAL_I2C_Master_Transmit>
}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000294 	.word	0x20000294
 80011c4:	200002bc 	.word	0x200002bc

080011c8 <DS3231_setAlarm1Sec>:

void DS3231_setAlarm1Sec(uint8_t value) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af02      	add	r7, sp, #8
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 80011d2:	f7ff fd90 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[8] = decToBcd(value);
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fd51 	bl	8000c80 <decToBcd>
 80011de:	4603      	mov	r3, r0
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b07      	ldr	r3, [pc, #28]	; (8001200 <DS3231_setAlarm1Sec+0x38>)
 80011e4:	721a      	strb	r2, [r3, #8]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80011e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	2311      	movs	r3, #17
 80011ee:	4a04      	ldr	r2, [pc, #16]	; (8001200 <DS3231_setAlarm1Sec+0x38>)
 80011f0:	21d0      	movs	r1, #208	; 0xd0
 80011f2:	4804      	ldr	r0, [pc, #16]	; (8001204 <DS3231_setAlarm1Sec+0x3c>)
 80011f4:	f00a f917 	bl	800b426 <HAL_I2C_Master_Transmit>
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000294 	.word	0x20000294
 8001204:	200002bc 	.word	0x200002bc

08001208 <DS3231_setAlarm1Min>:

void DS3231_setAlarm1Min(uint8_t value) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af02      	add	r7, sp, #8
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001212:	f7ff fd70 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[9] = decToBcd(value);
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fd31 	bl	8000c80 <decToBcd>
 800121e:	4603      	mov	r3, r0
 8001220:	461a      	mov	r2, r3
 8001222:	4b07      	ldr	r3, [pc, #28]	; (8001240 <DS3231_setAlarm1Min+0x38>)
 8001224:	725a      	strb	r2, [r3, #9]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122a:	9300      	str	r3, [sp, #0]
 800122c:	2311      	movs	r3, #17
 800122e:	4a04      	ldr	r2, [pc, #16]	; (8001240 <DS3231_setAlarm1Min+0x38>)
 8001230:	21d0      	movs	r1, #208	; 0xd0
 8001232:	4804      	ldr	r0, [pc, #16]	; (8001244 <DS3231_setAlarm1Min+0x3c>)
 8001234:	f00a f8f7 	bl	800b426 <HAL_I2C_Master_Transmit>
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000294 	.word	0x20000294
 8001244:	200002bc 	.word	0x200002bc

08001248 <DS3231_setAlarm1Hour>:

void DS3231_setAlarm1Hour(uint8_t value) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af02      	add	r7, sp, #8
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001252:	f7ff fd50 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[10] = decToBcd(value);
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fd11 	bl	8000c80 <decToBcd>
 800125e:	4603      	mov	r3, r0
 8001260:	461a      	mov	r2, r3
 8001262:	4b07      	ldr	r3, [pc, #28]	; (8001280 <DS3231_setAlarm1Hour+0x38>)
 8001264:	729a      	strb	r2, [r3, #10]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2311      	movs	r3, #17
 800126e:	4a04      	ldr	r2, [pc, #16]	; (8001280 <DS3231_setAlarm1Hour+0x38>)
 8001270:	21d0      	movs	r1, #208	; 0xd0
 8001272:	4804      	ldr	r0, [pc, #16]	; (8001284 <DS3231_setAlarm1Hour+0x3c>)
 8001274:	f00a f8d7 	bl	800b426 <HAL_I2C_Master_Transmit>
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000294 	.word	0x20000294
 8001284:	200002bc 	.word	0x200002bc

08001288 <DS3231_setAlarm1Day>:

void DS3231_setAlarm1Day(uint8_t value) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af02      	add	r7, sp, #8
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001292:	f7ff fd30 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[11] = decToBcd(value);
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fcf1 	bl	8000c80 <decToBcd>
 800129e:	4603      	mov	r3, r0
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <DS3231_setAlarm1Day+0x38>)
 80012a4:	72da      	strb	r2, [r3, #11]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80012a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	2311      	movs	r3, #17
 80012ae:	4a04      	ldr	r2, [pc, #16]	; (80012c0 <DS3231_setAlarm1Day+0x38>)
 80012b0:	21d0      	movs	r1, #208	; 0xd0
 80012b2:	4804      	ldr	r0, [pc, #16]	; (80012c4 <DS3231_setAlarm1Day+0x3c>)
 80012b4:	f00a f8b7 	bl	800b426 <HAL_I2C_Master_Transmit>
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000294 	.word	0x20000294
 80012c4:	200002bc 	.word	0x200002bc

080012c8 <DS3231_setAlarm1Date>:

void DS3231_setAlarm1Date(uint8_t value) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af02      	add	r7, sp, #8
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 80012d2:	f7ff fd10 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[12] = decToBcd(value);
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fcd1 	bl	8000c80 <decToBcd>
 80012de:	4603      	mov	r3, r0
 80012e0:	461a      	mov	r2, r3
 80012e2:	4b07      	ldr	r3, [pc, #28]	; (8001300 <DS3231_setAlarm1Date+0x38>)
 80012e4:	731a      	strb	r2, [r3, #12]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80012e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	2311      	movs	r3, #17
 80012ee:	4a04      	ldr	r2, [pc, #16]	; (8001300 <DS3231_setAlarm1Date+0x38>)
 80012f0:	21d0      	movs	r1, #208	; 0xd0
 80012f2:	4804      	ldr	r0, [pc, #16]	; (8001304 <DS3231_setAlarm1Date+0x3c>)
 80012f4:	f00a f897 	bl	800b426 <HAL_I2C_Master_Transmit>
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000294 	.word	0x20000294
 8001304:	200002bc 	.word	0x200002bc

08001308 <DS3231_setAlarm2Min>:

void DS3231_setAlarm2Min(uint8_t value) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af02      	add	r7, sp, #8
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001312:	f7ff fcf0 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[13] = decToBcd(value);
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fcb1 	bl	8000c80 <decToBcd>
 800131e:	4603      	mov	r3, r0
 8001320:	461a      	mov	r2, r3
 8001322:	4b07      	ldr	r3, [pc, #28]	; (8001340 <DS3231_setAlarm2Min+0x38>)
 8001324:	735a      	strb	r2, [r3, #13]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	2311      	movs	r3, #17
 800132e:	4a04      	ldr	r2, [pc, #16]	; (8001340 <DS3231_setAlarm2Min+0x38>)
 8001330:	21d0      	movs	r1, #208	; 0xd0
 8001332:	4804      	ldr	r0, [pc, #16]	; (8001344 <DS3231_setAlarm2Min+0x3c>)
 8001334:	f00a f877 	bl	800b426 <HAL_I2C_Master_Transmit>
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000294 	.word	0x20000294
 8001344:	200002bc 	.word	0x200002bc

08001348 <DS3231_setAlarm2Hour>:

void DS3231_setAlarm2Hour(uint8_t value) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af02      	add	r7, sp, #8
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001352:	f7ff fcd0 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[14] = decToBcd(value);
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fc91 	bl	8000c80 <decToBcd>
 800135e:	4603      	mov	r3, r0
 8001360:	461a      	mov	r2, r3
 8001362:	4b07      	ldr	r3, [pc, #28]	; (8001380 <DS3231_setAlarm2Hour+0x38>)
 8001364:	739a      	strb	r2, [r3, #14]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001366:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	2311      	movs	r3, #17
 800136e:	4a04      	ldr	r2, [pc, #16]	; (8001380 <DS3231_setAlarm2Hour+0x38>)
 8001370:	21d0      	movs	r1, #208	; 0xd0
 8001372:	4804      	ldr	r0, [pc, #16]	; (8001384 <DS3231_setAlarm2Hour+0x3c>)
 8001374:	f00a f857 	bl	800b426 <HAL_I2C_Master_Transmit>
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000294 	.word	0x20000294
 8001384:	200002bc 	.word	0x200002bc

08001388 <DS3231_setAlarm2Day>:

void DS3231_setAlarm2Day(uint8_t value) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af02      	add	r7, sp, #8
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001392:	f7ff fcb0 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[15] = decToBcd(value);
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff fc71 	bl	8000c80 <decToBcd>
 800139e:	4603      	mov	r3, r0
 80013a0:	461a      	mov	r2, r3
 80013a2:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <DS3231_setAlarm2Day+0x38>)
 80013a4:	73da      	strb	r2, [r3, #15]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80013a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	2311      	movs	r3, #17
 80013ae:	4a04      	ldr	r2, [pc, #16]	; (80013c0 <DS3231_setAlarm2Day+0x38>)
 80013b0:	21d0      	movs	r1, #208	; 0xd0
 80013b2:	4804      	ldr	r0, [pc, #16]	; (80013c4 <DS3231_setAlarm2Day+0x3c>)
 80013b4:	f00a f837 	bl	800b426 <HAL_I2C_Master_Transmit>
}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000294 	.word	0x20000294
 80013c4:	200002bc 	.word	0x200002bc

080013c8 <DS3231_setAlarm2Date>:

void DS3231_setAlarm2Date(uint8_t value) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af02      	add	r7, sp, #8
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 80013d2:	f7ff fc90 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[16] = decToBcd(value);
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff fc51 	bl	8000c80 <decToBcd>
 80013de:	4603      	mov	r3, r0
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b07      	ldr	r3, [pc, #28]	; (8001400 <DS3231_setAlarm2Date+0x38>)
 80013e4:	741a      	strb	r2, [r3, #16]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80013e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	2311      	movs	r3, #17
 80013ee:	4a04      	ldr	r2, [pc, #16]	; (8001400 <DS3231_setAlarm2Date+0x38>)
 80013f0:	21d0      	movs	r1, #208	; 0xd0
 80013f2:	4804      	ldr	r0, [pc, #16]	; (8001404 <DS3231_setAlarm2Date+0x3c>)
 80013f4:	f00a f817 	bl	800b426 <HAL_I2C_Master_Transmit>
}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000294 	.word	0x20000294
 8001404:	200002bc 	.word	0x200002bc

08001408 <DS3231_getUnix>:

uint64_t DS3231_getUnix(uint64_t zoneCorrection) {
 8001408:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800140c:	b088      	sub	sp, #32
 800140e:	af00      	add	r7, sp, #0
 8001410:	e9c7 0100 	strd	r0, r1, [r7]
    uint8_t timeYear = DS3231_getYear();
 8001414:	f7ff fd24 	bl	8000e60 <DS3231_getYear>
 8001418:	4603      	mov	r3, r0
 800141a:	773b      	strb	r3, [r7, #28]
    uint8_t timeMonth = DS3231_getMonth();
 800141c:	f7ff fd12 	bl	8000e44 <DS3231_getMonth>
 8001420:	4603      	mov	r3, r0
 8001422:	76fb      	strb	r3, [r7, #27]
    uint8_t timeDate = DS3231_getDate();
 8001424:	f7ff fd00 	bl	8000e28 <DS3231_getDate>
 8001428:	4603      	mov	r3, r0
 800142a:	76bb      	strb	r3, [r7, #26]
    uint8_t timeHour = DS3231_getHrs();
 800142c:	f7ff fce0 	bl	8000df0 <DS3231_getHrs>
 8001430:	4603      	mov	r3, r0
 8001432:	767b      	strb	r3, [r7, #25]
    uint8_t timeMin = DS3231_getMin();
 8001434:	f7ff fcce 	bl	8000dd4 <DS3231_getMin>
 8001438:	4603      	mov	r3, r0
 800143a:	763b      	strb	r3, [r7, #24]
    uint8_t timeSec = DS3231_getSec();
 800143c:	f7ff fcbc 	bl	8000db8 <DS3231_getSec>
 8001440:	4603      	mov	r3, r0
 8001442:	75fb      	strb	r3, [r7, #23]

    const uint8_t dim[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
 8001444:	4a35      	ldr	r2, [pc, #212]	; (800151c <DS3231_getUnix+0x114>)
 8001446:	f107 0308 	add.w	r3, r7, #8
 800144a:	ca07      	ldmia	r2, {r0, r1, r2}
 800144c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    uint16_t dc;
    dc = timeDate;
 8001450:	7ebb      	ldrb	r3, [r7, #26]
 8001452:	83fb      	strh	r3, [r7, #30]
    for (uint8_t i = 0; i < (timeMonth - 1); i++)
 8001454:	2300      	movs	r3, #0
 8001456:	777b      	strb	r3, [r7, #29]
 8001458:	e00b      	b.n	8001472 <DS3231_getUnix+0x6a>
        dc += dim[i];
 800145a:	7f7b      	ldrb	r3, [r7, #29]
 800145c:	3320      	adds	r3, #32
 800145e:	443b      	add	r3, r7
 8001460:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001464:	b29a      	uxth	r2, r3
 8001466:	8bfb      	ldrh	r3, [r7, #30]
 8001468:	4413      	add	r3, r2
 800146a:	83fb      	strh	r3, [r7, #30]
    for (uint8_t i = 0; i < (timeMonth - 1); i++)
 800146c:	7f7b      	ldrb	r3, [r7, #29]
 800146e:	3301      	adds	r3, #1
 8001470:	777b      	strb	r3, [r7, #29]
 8001472:	7f7a      	ldrb	r2, [r7, #29]
 8001474:	7efb      	ldrb	r3, [r7, #27]
 8001476:	3b01      	subs	r3, #1
 8001478:	429a      	cmp	r2, r3
 800147a:	dbee      	blt.n	800145a <DS3231_getUnix+0x52>
    if ((timeMonth > 2) && (((timeYear) % 4) == 0))
 800147c:	7efb      	ldrb	r3, [r7, #27]
 800147e:	2b02      	cmp	r3, #2
 8001480:	d908      	bls.n	8001494 <DS3231_getUnix+0x8c>
 8001482:	7f3b      	ldrb	r3, [r7, #28]
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d102      	bne.n	8001494 <DS3231_getUnix+0x8c>
        ++dc;
 800148e:	8bfb      	ldrh	r3, [r7, #30]
 8001490:	3301      	adds	r3, #1
 8001492:	83fb      	strh	r3, [r7, #30]
    dc = dc + (365 * (timeYear)) + (((timeYear) + 3) / 4) - 1;
 8001494:	7f3b      	ldrb	r3, [r7, #28]
 8001496:	b29b      	uxth	r3, r3
 8001498:	461a      	mov	r2, r3
 800149a:	00d2      	lsls	r2, r2, #3
 800149c:	441a      	add	r2, r3
 800149e:	00d2      	lsls	r2, r2, #3
 80014a0:	4413      	add	r3, r2
 80014a2:	461a      	mov	r2, r3
 80014a4:	0091      	lsls	r1, r2, #2
 80014a6:	461a      	mov	r2, r3
 80014a8:	460b      	mov	r3, r1
 80014aa:	4413      	add	r3, r2
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	8bfb      	ldrh	r3, [r7, #30]
 80014b0:	4413      	add	r3, r2
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	7f3b      	ldrb	r3, [r7, #28]
 80014b6:	3303      	adds	r3, #3
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	da00      	bge.n	80014be <DS3231_getUnix+0xb6>
 80014bc:	3303      	adds	r3, #3
 80014be:	109b      	asrs	r3, r3, #2
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	4413      	add	r3, r2
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	3b01      	subs	r3, #1
 80014c8:	83fb      	strh	r3, [r7, #30]
    return ((((((dc * 24L) + timeHour) * 60) + timeMin) * 60) + timeSec) + 946684800 + zoneCorrection;
 80014ca:	8bfa      	ldrh	r2, [r7, #30]
 80014cc:	4613      	mov	r3, r2
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	4413      	add	r3, r2
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	461a      	mov	r2, r3
 80014d6:	7e7b      	ldrb	r3, [r7, #25]
 80014d8:	441a      	add	r2, r3
 80014da:	4613      	mov	r3, r2
 80014dc:	011b      	lsls	r3, r3, #4
 80014de:	1a9b      	subs	r3, r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	461a      	mov	r2, r3
 80014e4:	7e3b      	ldrb	r3, [r7, #24]
 80014e6:	441a      	add	r2, r3
 80014e8:	4613      	mov	r3, r2
 80014ea:	011b      	lsls	r3, r3, #4
 80014ec:	1a9b      	subs	r3, r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	461a      	mov	r2, r3
 80014f2:	7dfb      	ldrb	r3, [r7, #23]
 80014f4:	441a      	add	r2, r3
 80014f6:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <DS3231_getUnix+0x118>)
 80014f8:	4413      	add	r3, r2
 80014fa:	17da      	asrs	r2, r3, #31
 80014fc:	461c      	mov	r4, r3
 80014fe:	4615      	mov	r5, r2
 8001500:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001504:	eb14 0802 	adds.w	r8, r4, r2
 8001508:	eb45 0903 	adc.w	r9, r5, r3
 800150c:	4642      	mov	r2, r8
 800150e:	464b      	mov	r3, r9
}
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	3720      	adds	r7, #32
 8001516:	46bd      	mov	sp, r7
 8001518:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800151c:	08051f1c 	.word	0x08051f1c
 8001520:	386d4380 	.word	0x386d4380

08001524 <normalize>:

double normalize(double v) {
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	ed87 0b00 	vstr	d0, [r7]
    v = v - floor(v);
 800152e:	ed97 0b00 	vldr	d0, [r7]
 8001532:	f01c fe4d 	bl	801e1d0 <floor>
 8001536:	ec53 2b10 	vmov	r2, r3, d0
 800153a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800153e:	f017 faa3 	bl	8018a88 <__aeabi_dsub>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	e9c7 2300 	strd	r2, r3, [r7]
    if (v < 0)
 800154a:	f04f 0200 	mov.w	r2, #0
 800154e:	f04f 0300 	mov.w	r3, #0
 8001552:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001556:	f017 fec1 	bl	80192dc <__aeabi_dcmplt>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d00a      	beq.n	8001576 <normalize+0x52>
        v = v + 1;
 8001560:	f04f 0200 	mov.w	r2, #0
 8001564:	4b09      	ldr	r3, [pc, #36]	; (800158c <normalize+0x68>)
 8001566:	e9d7 0100 	ldrd	r0, r1, [r7]
 800156a:	f017 fa8f 	bl	8018a8c <__adddf3>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	e9c7 2300 	strd	r2, r3, [r7]
    return v;
 8001576:	e9d7 2300 	ldrd	r2, r3, [r7]
 800157a:	ec43 2b17 	vmov	d7, r2, r3
}
 800157e:	eeb0 0a47 	vmov.f32	s0, s14
 8001582:	eef0 0a67 	vmov.f32	s1, s15
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	3ff00000 	.word	0x3ff00000

08001590 <DS3231_getMoonDay>:

float DS3231_getMoonDay(void) {
 8001590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001594:	b0a0      	sub	sp, #128	; 0x80
 8001596:	af00      	add	r7, sp, #0
    uint16_t Y = DS3231_getYear() + 2000;
 8001598:	f7ff fc62 	bl	8000e60 <DS3231_getYear>
 800159c:	4603      	mov	r3, r0
 800159e:	b29b      	uxth	r3, r3
 80015a0:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80015a4:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
    uint8_t M = DS3231_getMonth();
 80015a8:	f7ff fc4c 	bl	8000e44 <DS3231_getMonth>
 80015ac:	4603      	mov	r3, r0
 80015ae:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
    uint8_t D = DS3231_getDate();
 80015b2:	f7ff fc39 	bl	8000e28 <DS3231_getDate>
 80015b6:	4603      	mov	r3, r0
 80015b8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
    float moonDay;
    double I;
    uint64_t YY, MM, K1, K2, K3, JD;
    YY = Y - floor((12 - M) / 10);
 80015bc:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80015c0:	4618      	mov	r0, r3
 80015c2:	f017 fbaf 	bl	8018d24 <__aeabi_i2d>
 80015c6:	4604      	mov	r4, r0
 80015c8:	460d      	mov	r5, r1
 80015ca:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80015ce:	f1c3 010c 	rsb	r1, r3, #12
 80015d2:	4b99      	ldr	r3, [pc, #612]	; (8001838 <DS3231_getMoonDay+0x2a8>)
 80015d4:	fb83 2301 	smull	r2, r3, r3, r1
 80015d8:	109a      	asrs	r2, r3, #2
 80015da:	17cb      	asrs	r3, r1, #31
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	4618      	mov	r0, r3
 80015e0:	f017 fba0 	bl	8018d24 <__aeabi_i2d>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4620      	mov	r0, r4
 80015ea:	4629      	mov	r1, r5
 80015ec:	f017 fa4c 	bl	8018a88 <__aeabi_dsub>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4610      	mov	r0, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	f017 ff5e 	bl	80194b8 <__aeabi_d2ulz>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
    MM = M + 9;
 8001604:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8001608:	3309      	adds	r3, #9
 800160a:	17da      	asrs	r2, r3, #31
 800160c:	61bb      	str	r3, [r7, #24]
 800160e:	61fa      	str	r2, [r7, #28]
 8001610:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001614:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
    if (MM >= 12) {
 8001618:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800161c:	2a0c      	cmp	r2, #12
 800161e:	f173 0300 	sbcs.w	r3, r3, #0
 8001622:	d30b      	bcc.n	800163c <DS3231_getMoonDay+0xac>
        MM = MM - 12;
 8001624:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001628:	f1b2 010c 	subs.w	r1, r2, #12
 800162c:	6139      	str	r1, [r7, #16]
 800162e:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001638:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
    }
    K1 = floor(365.25 * (YY + 4712));
 800163c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001640:	f241 2168 	movw	r1, #4712	; 0x1268
 8001644:	1851      	adds	r1, r2, r1
 8001646:	6339      	str	r1, [r7, #48]	; 0x30
 8001648:	f143 0300 	adc.w	r3, r3, #0
 800164c:	637b      	str	r3, [r7, #52]	; 0x34
 800164e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001652:	f017 fb9b 	bl	8018d8c <__aeabi_ul2d>
 8001656:	a36e      	add	r3, pc, #440	; (adr r3, 8001810 <DS3231_getMoonDay+0x280>)
 8001658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165c:	f017 fbcc 	bl	8018df8 <__aeabi_dmul>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	ec43 2b17 	vmov	d7, r2, r3
 8001668:	eeb0 0a47 	vmov.f32	s0, s14
 800166c:	eef0 0a67 	vmov.f32	s1, s15
 8001670:	f01c fdae 	bl	801e1d0 <floor>
 8001674:	ec53 2b10 	vmov	r2, r3, d0
 8001678:	4610      	mov	r0, r2
 800167a:	4619      	mov	r1, r3
 800167c:	f017 ff1c 	bl	80194b8 <__aeabi_d2ulz>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    K2 = floor(30.6 * MM + 0.5);
 8001688:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800168c:	f017 fb7e 	bl	8018d8c <__aeabi_ul2d>
 8001690:	a361      	add	r3, pc, #388	; (adr r3, 8001818 <DS3231_getMoonDay+0x288>)
 8001692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001696:	f017 fbaf 	bl	8018df8 <__aeabi_dmul>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4610      	mov	r0, r2
 80016a0:	4619      	mov	r1, r3
 80016a2:	f04f 0200 	mov.w	r2, #0
 80016a6:	4b65      	ldr	r3, [pc, #404]	; (800183c <DS3231_getMoonDay+0x2ac>)
 80016a8:	f017 f9f0 	bl	8018a8c <__adddf3>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	ec43 2b17 	vmov	d7, r2, r3
 80016b4:	eeb0 0a47 	vmov.f32	s0, s14
 80016b8:	eef0 0a67 	vmov.f32	s1, s15
 80016bc:	f01c fd88 	bl	801e1d0 <floor>
 80016c0:	ec53 2b10 	vmov	r2, r3, d0
 80016c4:	4610      	mov	r0, r2
 80016c6:	4619      	mov	r1, r3
 80016c8:	f017 fef6 	bl	80194b8 <__aeabi_d2ulz>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    K3 = floor(floor((YY / 100) + 49) * 0.75) - 38;
 80016d4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80016d8:	f04f 0264 	mov.w	r2, #100	; 0x64
 80016dc:	f04f 0300 	mov.w	r3, #0
 80016e0:	f017 ff08 	bl	80194f4 <__aeabi_uldivmod>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	f112 0131 	adds.w	r1, r2, #49	; 0x31
 80016ec:	62b9      	str	r1, [r7, #40]	; 0x28
 80016ee:	f143 0300 	adc.w	r3, r3, #0
 80016f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016f4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80016f8:	f017 fb48 	bl	8018d8c <__aeabi_ul2d>
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	4b4f      	ldr	r3, [pc, #316]	; (8001840 <DS3231_getMoonDay+0x2b0>)
 8001702:	f017 fb79 	bl	8018df8 <__aeabi_dmul>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	ec43 2b17 	vmov	d7, r2, r3
 800170e:	eeb0 0a47 	vmov.f32	s0, s14
 8001712:	eef0 0a67 	vmov.f32	s1, s15
 8001716:	f01c fd5b 	bl	801e1d0 <floor>
 800171a:	ec51 0b10 	vmov	r0, r1, d0
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	4b48      	ldr	r3, [pc, #288]	; (8001844 <DS3231_getMoonDay+0x2b4>)
 8001724:	f017 f9b0 	bl	8018a88 <__aeabi_dsub>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	4610      	mov	r0, r2
 800172e:	4619      	mov	r1, r3
 8001730:	f017 fec2 	bl	80194b8 <__aeabi_d2ulz>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    JD = K1 + K2 + D + 59;
 800173c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001740:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001744:	eb10 0a02 	adds.w	sl, r0, r2
 8001748:	eb41 0b03 	adc.w	fp, r1, r3
 800174c:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8001750:	2200      	movs	r2, #0
 8001752:	623b      	str	r3, [r7, #32]
 8001754:	627a      	str	r2, [r7, #36]	; 0x24
 8001756:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800175a:	460b      	mov	r3, r1
 800175c:	eb1a 0803 	adds.w	r8, sl, r3
 8001760:	4613      	mov	r3, r2
 8001762:	eb4b 0903 	adc.w	r9, fp, r3
 8001766:	f118 033b 	adds.w	r3, r8, #59	; 0x3b
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	f149 0300 	adc.w	r3, r9, #0
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001776:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
    if (JD > 2299160) {
 800177a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800177e:	4932      	ldr	r1, [pc, #200]	; (8001848 <DS3231_getMoonDay+0x2b8>)
 8001780:	428a      	cmp	r2, r1
 8001782:	f173 0300 	sbcs.w	r3, r3, #0
 8001786:	d30c      	bcc.n	80017a2 <DS3231_getMoonDay+0x212>
        JD = JD - K3;
 8001788:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800178c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001790:	1a84      	subs	r4, r0, r2
 8001792:	603c      	str	r4, [r7, #0]
 8001794:	eb61 0303 	sbc.w	r3, r1, r3
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800179e:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
    }
    I = normalize((JD - 2451550.1) / 29.530588853);
 80017a2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80017a6:	f017 faf1 	bl	8018d8c <__aeabi_ul2d>
 80017aa:	a31d      	add	r3, pc, #116	; (adr r3, 8001820 <DS3231_getMoonDay+0x290>)
 80017ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b0:	f017 f96a 	bl	8018a88 <__aeabi_dsub>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4610      	mov	r0, r2
 80017ba:	4619      	mov	r1, r3
 80017bc:	a31a      	add	r3, pc, #104	; (adr r3, 8001828 <DS3231_getMoonDay+0x298>)
 80017be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c2:	f017 fc43 	bl	801904c <__aeabi_ddiv>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	ec43 2b17 	vmov	d7, r2, r3
 80017ce:	eeb0 0a47 	vmov.f32	s0, s14
 80017d2:	eef0 0a67 	vmov.f32	s1, s15
 80017d6:	f7ff fea5 	bl	8001524 <normalize>
 80017da:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
    moonDay = I * 29.53;
 80017de:	a314      	add	r3, pc, #80	; (adr r3, 8001830 <DS3231_getMoonDay+0x2a0>)
 80017e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80017e8:	f017 fb06 	bl	8018df8 <__aeabi_dmul>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4610      	mov	r0, r2
 80017f2:	4619      	mov	r1, r3
 80017f4:	f017 fdf8 	bl	80193e8 <__aeabi_d2f>
 80017f8:	4603      	mov	r3, r0
 80017fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    return moonDay;
 80017fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017fe:	ee07 3a90 	vmov	s15, r3
}
 8001802:	eeb0 0a67 	vmov.f32	s0, s15
 8001806:	3780      	adds	r7, #128	; 0x80
 8001808:	46bd      	mov	sp, r7
 800180a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800180e:	bf00      	nop
 8001810:	00000000 	.word	0x00000000
 8001814:	4076d400 	.word	0x4076d400
 8001818:	9999999a 	.word	0x9999999a
 800181c:	403e9999 	.word	0x403e9999
 8001820:	0ccccccd 	.word	0x0ccccccd
 8001824:	4142b42f 	.word	0x4142b42f
 8001828:	abcb41d5 	.word	0xabcb41d5
 800182c:	403d87d4 	.word	0x403d87d4
 8001830:	147ae148 	.word	0x147ae148
 8001834:	403d87ae 	.word	0x403d87ae
 8001838:	66666667 	.word	0x66666667
 800183c:	3fe00000 	.word	0x3fe00000
 8001840:	3fe80000 	.word	0x3fe80000
 8001844:	40430000 	.word	0x40430000
 8001848:	00231519 	.word	0x00231519

0800184c <map>:
#define WAIT_REMOTE_SENSOR_SEC 100
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
double map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max) {
 800184c:	b590      	push	{r4, r7, lr}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4604      	mov	r4, r0
 8001854:	4608      	mov	r0, r1
 8001856:	4611      	mov	r1, r2
 8001858:	461a      	mov	r2, r3
 800185a:	4623      	mov	r3, r4
 800185c:	80fb      	strh	r3, [r7, #6]
 800185e:	4603      	mov	r3, r0
 8001860:	80bb      	strh	r3, [r7, #4]
 8001862:	460b      	mov	r3, r1
 8001864:	807b      	strh	r3, [r7, #2]
 8001866:	4613      	mov	r3, r2
 8001868:	803b      	strh	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800186a:	88fa      	ldrh	r2, [r7, #6]
 800186c:	88bb      	ldrh	r3, [r7, #4]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	8b39      	ldrh	r1, [r7, #24]
 8001872:	883a      	ldrh	r2, [r7, #0]
 8001874:	1a8a      	subs	r2, r1, r2
 8001876:	fb03 f202 	mul.w	r2, r3, r2
 800187a:	8879      	ldrh	r1, [r7, #2]
 800187c:	88bb      	ldrh	r3, [r7, #4]
 800187e:	1acb      	subs	r3, r1, r3
 8001880:	fb92 f2f3 	sdiv	r2, r2, r3
 8001884:	883b      	ldrh	r3, [r7, #0]
 8001886:	4413      	add	r3, r2
 8001888:	4618      	mov	r0, r3
 800188a:	f017 fa4b 	bl	8018d24 <__aeabi_i2d>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	ec43 2b17 	vmov	d7, r2, r3
}
 8001896:	eeb0 0a47 	vmov.f32	s0, s14
 800189a:	eef0 0a67 	vmov.f32	s1, s15
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd90      	pop	{r4, r7, pc}

080018a4 <byteL>:

uint8_t byteL(uint16_t val) {
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	80fb      	strh	r3, [r7, #6]
	return (val & 0xFF);
 80018ae:	88fb      	ldrh	r3, [r7, #6]
 80018b0:	b2db      	uxtb	r3, r3
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <byteH>:

uint8_t byteH(uint16_t val) {
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	4603      	mov	r3, r0
 80018c6:	80fb      	strh	r3, [r7, #6]
	return ((val >> 8) & 0xFF);
 80018c8:	88fb      	ldrh	r3, [r7, #6]
 80018ca:	0a1b      	lsrs	r3, r3, #8
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	b2db      	uxtb	r3, r3
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <byteS>:

uint16_t byteS(uint8_t byteL, uint8_t byteH) {
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	460a      	mov	r2, r1
 80018e6:	71fb      	strb	r3, [r7, #7]
 80018e8:	4613      	mov	r3, r2
 80018ea:	71bb      	strb	r3, [r7, #6]
	return (byteH << 8) | byteL;
 80018ec:	79bb      	ldrb	r3, [r7, #6]
 80018ee:	021b      	lsls	r3, r3, #8
 80018f0:	b21a      	sxth	r2, r3
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	b21b      	sxth	r3, r3
 80018f6:	4313      	orrs	r3, r2
 80018f8:	b21b      	sxth	r3, r3
 80018fa:	b29b      	uxth	r3, r3
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <HAL_UART_RxCpltCallback>:

uint8_t rx_buffer[UART_RX_BUFFER_SIZE];
uint8_t rx_index = 0;
uint8_t rx_data;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a0b      	ldr	r2, [pc, #44]	; (8001944 <HAL_UART_RxCpltCallback+0x3c>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d10f      	bne.n	800193a <HAL_UART_RxCpltCallback+0x32>
		rx_buffer[rx_index++] = rx_data;
 800191a:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <HAL_UART_RxCpltCallback+0x40>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	1c5a      	adds	r2, r3, #1
 8001920:	b2d1      	uxtb	r1, r2
 8001922:	4a09      	ldr	r2, [pc, #36]	; (8001948 <HAL_UART_RxCpltCallback+0x40>)
 8001924:	7011      	strb	r1, [r2, #0]
 8001926:	461a      	mov	r2, r3
 8001928:	4b08      	ldr	r3, [pc, #32]	; (800194c <HAL_UART_RxCpltCallback+0x44>)
 800192a:	7819      	ldrb	r1, [r3, #0]
 800192c:	4b08      	ldr	r3, [pc, #32]	; (8001950 <HAL_UART_RxCpltCallback+0x48>)
 800192e:	5499      	strb	r1, [r3, r2]
		HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8001930:	2201      	movs	r2, #1
 8001932:	4906      	ldr	r1, [pc, #24]	; (800194c <HAL_UART_RxCpltCallback+0x44>)
 8001934:	4807      	ldr	r0, [pc, #28]	; (8001954 <HAL_UART_RxCpltCallback+0x4c>)
 8001936:	f014 f8f7 	bl	8015b28 <HAL_UART_Receive_IT>
		//		HAL_UART_Receive_DMA(&huart1, &rx_data, 1);
	}
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40011000 	.word	0x40011000
 8001948:	20000974 	.word	0x20000974
 800194c:	20000975 	.word	0x20000975
 8001950:	20000964 	.word	0x20000964
 8001954:	200004d8 	.word	0x200004d8

08001958 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800195a:	b0c3      	sub	sp, #268	; 0x10c
 800195c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800195e:	f004 febf 	bl	80066e0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001962:	f002 f8d5 	bl	8003b10 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001966:	f002 fa93 	bl	8003e90 <MX_GPIO_Init>
	MX_FSMC_Init();
 800196a:	f002 fb6b 	bl	8004044 <MX_FSMC_Init>
	MX_I2C1_Init();
 800196e:	f002 f96d 	bl	8003c4c <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8001972:	f002 fa3b 	bl	8003dec <MX_USART1_UART_Init>
	MX_SPI3_Init();
 8001976:	f002 fa03 	bl	8003d80 <MX_SPI3_Init>
	MX_SPI2_Init();
 800197a:	f002 f9cb 	bl	8003d14 <MX_SPI2_Init>
	MX_DMA_Init();
 800197e:	f002 fa5f 	bl	8003e40 <MX_DMA_Init>
	MX_DAC_Init();
 8001982:	f002 f92f 	bl	8003be4 <MX_DAC_Init>
	MX_SPI1_Init();
 8001986:	f002 f98f 	bl	8003ca8 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	LCD_Init();
 800198a:	f003 fe77 	bl	800567c <LCD_Init>
	XPT2046_Init();
 800198e:	f004 fdb1 	bl	80064f4 <XPT2046_Init>
	BME280_Init();
 8001992:	f7fe ff23 	bl	80007dc <BME280_Init>
	W25QXX_Init();
 8001996:	f004 fd73 	bl	8006480 <W25QXX_Init>

	LCD_Rect_Fill(0, 0, 800, 480, BLUE);
 800199a:	23ff      	movs	r3, #255	; 0xff
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80019a2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80019a6:	2100      	movs	r1, #0
 80019a8:	2000      	movs	r0, #0
 80019aa:	f002 fc93 	bl	80042d4 <LCD_Rect_Fill>
	LCD_Rect_Fill(1, 1, 798, 478, BLACK);
 80019ae:	2300      	movs	r3, #0
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 80019b6:	f240 321e 	movw	r2, #798	; 0x31e
 80019ba:	2101      	movs	r1, #1
 80019bc:	2001      	movs	r0, #1
 80019be:	f002 fc89 	bl	80042d4 <LCD_Rect_Fill>


	unsigned int id = W25QXX_Read_ID();
 80019c2:	f004 fd2d 	bl	8006420 <W25QXX_Read_ID>
 80019c6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
	char str1[30];
	sprintf(str1,"ID:0x%X\r\n",id);
 80019ca:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80019ce:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80019d2:	49da      	ldr	r1, [pc, #872]	; (8001d3c <main+0x3e4>)
 80019d4:	4618      	mov	r0, r3
 80019d6:	f018 fdef 	bl	801a5b8 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 80019da:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80019de:	4618      	mov	r0, r3
 80019e0:	f016 fff0 	bl	80189c4 <strlen>
 80019e4:	4603      	mov	r3, r0
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80019ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019f0:	48d3      	ldr	r0, [pc, #844]	; (8001d40 <main+0x3e8>)
 80019f2:	f013 ff20 	bl	8015836 <HAL_UART_Transmit>
		uint8_t   SR3;
	} w25_info_t;

	w25_info_t  w25_info;

	id &= 0x0000FFFF;
 80019f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	switch(id)
 8001a00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a04:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8001a08:	3b11      	subs	r3, #17
 8001a0a:	2b09      	cmp	r3, #9
 8001a0c:	d87d      	bhi.n	8001b0a <main+0x1b2>
 8001a0e:	a201      	add	r2, pc, #4	; (adr r2, 8001a14 <main+0xbc>)
 8001a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a14:	08001af7 	.word	0x08001af7
 8001a18:	08001ae3 	.word	0x08001ae3
 8001a1c:	08001acf 	.word	0x08001acf
 8001a20:	08001abb 	.word	0x08001abb
 8001a24:	08001aa7 	.word	0x08001aa7
 8001a28:	08001a93 	.word	0x08001a93
 8001a2c:	08001a7f 	.word	0x08001a7f
 8001a30:	08001a69 	.word	0x08001a69
 8001a34:	08001a53 	.word	0x08001a53
 8001a38:	08001a3d 	.word	0x08001a3d
	{
	case 0x401A:
		w25_info.BlockCount=1024;
 8001a3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		sprintf(str1,"w25qxx Chip: w25q512\r\n");
 8001a44:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001a48:	49be      	ldr	r1, [pc, #760]	; (8001d44 <main+0x3ec>)
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f018 fdb4 	bl	801a5b8 <siprintf>
		break;
 8001a50:	e070      	b.n	8001b34 <main+0x1dc>
	case 0x4019:
		w25_info.BlockCount=512;
 8001a52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		sprintf(str1,"w25qxx Chip: w25q256\r\n");
 8001a5a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001a5e:	49ba      	ldr	r1, [pc, #744]	; (8001d48 <main+0x3f0>)
 8001a60:	4618      	mov	r0, r3
 8001a62:	f018 fda9 	bl	801a5b8 <siprintf>
		break;
 8001a66:	e065      	b.n	8001b34 <main+0x1dc>
	case 0x4018:
		w25_info.BlockCount=256;
 8001a68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		sprintf(str1,"w25qxx Chip: w25q128\r\n");
 8001a70:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001a74:	49b5      	ldr	r1, [pc, #724]	; (8001d4c <main+0x3f4>)
 8001a76:	4618      	mov	r0, r3
 8001a78:	f018 fd9e 	bl	801a5b8 <siprintf>
		break;
 8001a7c:	e05a      	b.n	8001b34 <main+0x1dc>
	case 0x4017:
		w25_info.BlockCount=128;
 8001a7e:	2380      	movs	r3, #128	; 0x80
 8001a80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		sprintf(str1,"w25qxx Chip: w25q64\r\n");
 8001a84:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001a88:	49b1      	ldr	r1, [pc, #708]	; (8001d50 <main+0x3f8>)
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f018 fd94 	bl	801a5b8 <siprintf>
		break;
 8001a90:	e050      	b.n	8001b34 <main+0x1dc>
	case 0x4016:
		w25_info.BlockCount=64;
 8001a92:	2340      	movs	r3, #64	; 0x40
 8001a94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		sprintf(str1,"w25qxx Chip: w25q32\r\n");
 8001a98:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001a9c:	49ad      	ldr	r1, [pc, #692]	; (8001d54 <main+0x3fc>)
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f018 fd8a 	bl	801a5b8 <siprintf>
		break;
 8001aa4:	e046      	b.n	8001b34 <main+0x1dc>
	case 0x4015:
		w25_info.BlockCount=32;
 8001aa6:	2320      	movs	r3, #32
 8001aa8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		sprintf(str1,"w25qxx Chip: w25q16\r\n");
 8001aac:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001ab0:	49a9      	ldr	r1, [pc, #676]	; (8001d58 <main+0x400>)
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f018 fd80 	bl	801a5b8 <siprintf>
		break;
 8001ab8:	e03c      	b.n	8001b34 <main+0x1dc>
	case 0x4014:
		w25_info.BlockCount=16;
 8001aba:	2310      	movs	r3, #16
 8001abc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		sprintf(str1,"w25qxx Chip: w25q80\r\n");
 8001ac0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001ac4:	49a5      	ldr	r1, [pc, #660]	; (8001d5c <main+0x404>)
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f018 fd76 	bl	801a5b8 <siprintf>
		break;
 8001acc:	e032      	b.n	8001b34 <main+0x1dc>
	case 0x4013:
		w25_info.BlockCount=8;
 8001ace:	2308      	movs	r3, #8
 8001ad0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		sprintf(str1,"w25qxx Chip: w25q40\r\n");
 8001ad4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001ad8:	49a1      	ldr	r1, [pc, #644]	; (8001d60 <main+0x408>)
 8001ada:	4618      	mov	r0, r3
 8001adc:	f018 fd6c 	bl	801a5b8 <siprintf>
		break;
 8001ae0:	e028      	b.n	8001b34 <main+0x1dc>
	case 0x4012:
		w25_info.BlockCount=4;
 8001ae2:	2304      	movs	r3, #4
 8001ae4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		sprintf(str1,"w25qxx Chip: w25q20\r\n");
 8001ae8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001aec:	499d      	ldr	r1, [pc, #628]	; (8001d64 <main+0x40c>)
 8001aee:	4618      	mov	r0, r3
 8001af0:	f018 fd62 	bl	801a5b8 <siprintf>
		break;
 8001af4:	e01e      	b.n	8001b34 <main+0x1dc>
	case 0x4011:
		w25_info.BlockCount=2;
 8001af6:	2302      	movs	r3, #2
 8001af8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		sprintf(str1,"w25qxx Chip: w25q10\r\n");
 8001afc:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001b00:	4999      	ldr	r1, [pc, #612]	; (8001d68 <main+0x410>)
 8001b02:	4618      	mov	r0, r3
 8001b04:	f018 fd58 	bl	801a5b8 <siprintf>
		break;
 8001b08:	e014      	b.n	8001b34 <main+0x1dc>
	default:
		sprintf(str1,"w25qxx Unknown ID\r\n");
 8001b0a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001b0e:	4997      	ldr	r1, [pc, #604]	; (8001d6c <main+0x414>)
 8001b10:	4618      	mov	r0, r3
 8001b12:	f018 fd51 	bl	801a5b8 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001b16:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f016 ff52 	bl	80189c4 <strlen>
 8001b20:	4603      	mov	r3, r0
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001b28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b2c:	4884      	ldr	r0, [pc, #528]	; (8001d40 <main+0x3e8>)
 8001b2e:	f013 fe82 	bl	8015836 <HAL_UART_Transmit>
		break;
 8001b32:	bf00      	nop
	}

	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001b34:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f016 ff43 	bl	80189c4 <strlen>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	b29a      	uxth	r2, r3
 8001b42:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001b46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b4a:	487d      	ldr	r0, [pc, #500]	; (8001d40 <main+0x3e8>)
 8001b4c:	f013 fe73 	bl	8015836 <HAL_UART_Transmit>
	w25_info.PageSize=256;
 8001b50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b54:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
	w25_info.SectorSize=0x1000;
 8001b58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	w25_info.SectorCount=w25_info.BlockCount*16;
 8001b60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b64:	011b      	lsls	r3, r3, #4
 8001b66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	w25_info.PageCount=(w25_info.SectorCount*w25_info.SectorSize)/w25_info.PageSize;
 8001b6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b6e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001b72:	fb02 f303 	mul.w	r3, r2, r3
 8001b76:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 8001b7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	w25_info.BlockSize=w25_info.SectorSize*16;
 8001b82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b86:	011b      	lsls	r3, r3, #4
 8001b88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	w25_info.NumKB=(w25_info.SectorCount*w25_info.SectorSize)/1024;
 8001b8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b90:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001b94:	fb02 f303 	mul.w	r3, r2, r3
 8001b98:	0a9b      	lsrs	r3, r3, #10
 8001b9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	sprintf(str1,"Page Size: %d Bytes\r\n",(unsigned int)w25_info.PageSize);
 8001b9e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001ba8:	4971      	ldr	r1, [pc, #452]	; (8001d70 <main+0x418>)
 8001baa:	4618      	mov	r0, r3
 8001bac:	f018 fd04 	bl	801a5b8 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001bb0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f016 ff05 	bl	80189c4 <strlen>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001bc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bc6:	485e      	ldr	r0, [pc, #376]	; (8001d40 <main+0x3e8>)
 8001bc8:	f013 fe35 	bl	8015836 <HAL_UART_Transmit>
	sprintf(str1,"Page Count: %u\r\n",(unsigned int)w25_info.PageCount);
 8001bcc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001bd0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001bd4:	4967      	ldr	r1, [pc, #412]	; (8001d74 <main+0x41c>)
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f018 fcee 	bl	801a5b8 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001bdc:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001be0:	4618      	mov	r0, r3
 8001be2:	f016 feef 	bl	80189c4 <strlen>
 8001be6:	4603      	mov	r3, r0
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001bee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf2:	4853      	ldr	r0, [pc, #332]	; (8001d40 <main+0x3e8>)
 8001bf4:	f013 fe1f 	bl	8015836 <HAL_UART_Transmit>
	sprintf(str1,"Sector Size: %u Bytes\r\n",(unsigned int)w25_info.SectorSize);
 8001bf8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001bfc:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001c00:	495d      	ldr	r1, [pc, #372]	; (8001d78 <main+0x420>)
 8001c02:	4618      	mov	r0, r3
 8001c04:	f018 fcd8 	bl	801a5b8 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001c08:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f016 fed9 	bl	80189c4 <strlen>
 8001c12:	4603      	mov	r3, r0
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001c1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c1e:	4848      	ldr	r0, [pc, #288]	; (8001d40 <main+0x3e8>)
 8001c20:	f013 fe09 	bl	8015836 <HAL_UART_Transmit>
	sprintf(str1,"Sector Count: %u\r\n",(unsigned int)w25_info.SectorCount);
 8001c24:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001c28:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001c2c:	4953      	ldr	r1, [pc, #332]	; (8001d7c <main+0x424>)
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f018 fcc2 	bl	801a5b8 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001c34:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f016 fec3 	bl	80189c4 <strlen>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001c46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c4a:	483d      	ldr	r0, [pc, #244]	; (8001d40 <main+0x3e8>)
 8001c4c:	f013 fdf3 	bl	8015836 <HAL_UART_Transmit>
	sprintf(str1,"Block Size: %u Bytes\r\n",(unsigned int)w25_info.BlockSize);
 8001c50:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001c54:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001c58:	4949      	ldr	r1, [pc, #292]	; (8001d80 <main+0x428>)
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f018 fcac 	bl	801a5b8 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001c60:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001c64:	4618      	mov	r0, r3
 8001c66:	f016 fead 	bl	80189c4 <strlen>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001c72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c76:	4832      	ldr	r0, [pc, #200]	; (8001d40 <main+0x3e8>)
 8001c78:	f013 fddd 	bl	8015836 <HAL_UART_Transmit>
	sprintf(str1,"Block Count: %u\r\n",(unsigned int)w25_info.BlockCount);
 8001c7c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001c80:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001c84:	493f      	ldr	r1, [pc, #252]	; (8001d84 <main+0x42c>)
 8001c86:	4618      	mov	r0, r3
 8001c88:	f018 fc96 	bl	801a5b8 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001c8c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001c90:	4618      	mov	r0, r3
 8001c92:	f016 fe97 	bl	80189c4 <strlen>
 8001c96:	4603      	mov	r3, r0
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001c9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ca2:	4827      	ldr	r0, [pc, #156]	; (8001d40 <main+0x3e8>)
 8001ca4:	f013 fdc7 	bl	8015836 <HAL_UART_Transmit>
	sprintf(str1,"Capacity: %u KB\r\n",(unsigned int)w25_info.NumKB);
 8001ca8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001cac:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001cb0:	4935      	ldr	r1, [pc, #212]	; (8001d88 <main+0x430>)
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f018 fc80 	bl	801a5b8 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001cb8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f016 fe81 	bl	80189c4 <strlen>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001cca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cce:	481c      	ldr	r0, [pc, #112]	; (8001d40 <main+0x3e8>)
 8001cd0:	f013 fdb1 	bl	8015836 <HAL_UART_Transmit>

	for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8001cda:	e027      	b.n	8001d2c <main+0x3d4>
 8001cdc:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8001ce0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe fad0 	bl	8000290 <AT24XX_Read>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	461c      	mov	r4, r3
 8001cf4:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	f203 33e9 	addw	r3, r3, #1001	; 0x3e9
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7fe fac4 	bl	8000290 <AT24XX_Read>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4620      	mov	r0, r4
 8001d0e:	f7ff fde5 	bl	80018dc <byteS>
 8001d12:	4603      	mov	r3, r0
 8001d14:	461a      	mov	r2, r3
 8001d16:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8001d1a:	b211      	sxth	r1, r2
 8001d1c:	4a1b      	ldr	r2, [pc, #108]	; (8001d8c <main+0x434>)
 8001d1e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001d22:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8001d26:	3301      	adds	r3, #1
 8001d28:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8001d2c:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8001d30:	2b9a      	cmp	r3, #154	; 0x9a
 8001d32:	d9d3      	bls.n	8001cdc <main+0x384>
	for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8001d34:	2300      	movs	r3, #0
 8001d36:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
 8001d3a:	e051      	b.n	8001de0 <main+0x488>
 8001d3c:	08051f2c 	.word	0x08051f2c
 8001d40:	200004d8 	.word	0x200004d8
 8001d44:	08051f38 	.word	0x08051f38
 8001d48:	08051f50 	.word	0x08051f50
 8001d4c:	08051f68 	.word	0x08051f68
 8001d50:	08051f80 	.word	0x08051f80
 8001d54:	08051f98 	.word	0x08051f98
 8001d58:	08051fb0 	.word	0x08051fb0
 8001d5c:	08051fc8 	.word	0x08051fc8
 8001d60:	08051fe0 	.word	0x08051fe0
 8001d64:	08051ff8 	.word	0x08051ff8
 8001d68:	08052010 	.word	0x08052010
 8001d6c:	08052028 	.word	0x08052028
 8001d70:	0805203c 	.word	0x0805203c
 8001d74:	08052054 	.word	0x08052054
 8001d78:	08052068 	.word	0x08052068
 8001d7c:	08052080 	.word	0x08052080
 8001d80:	08052094 	.word	0x08052094
 8001d84:	080520ac 	.word	0x080520ac
 8001d88:	080520c0 	.word	0x080520c0
 8001d8c:	200005bc 	.word	0x200005bc
 8001d90:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 8001d94:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7fe fa76 	bl	8000290 <AT24XX_Read>
 8001da4:	4603      	mov	r3, r0
 8001da6:	461c      	mov	r4, r3
 8001da8:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	f203 73d1 	addw	r3, r3, #2001	; 0x7d1
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7fe fa6a 	bl	8000290 <AT24XX_Read>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4620      	mov	r0, r4
 8001dc2:	f7ff fd8b 	bl	80018dc <byteS>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	461a      	mov	r2, r3
 8001dca:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 8001dce:	b211      	sxth	r1, r2
 8001dd0:	4a6e      	ldr	r2, [pc, #440]	; (8001f8c <main+0x634>)
 8001dd2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001dd6:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 8001dda:	3301      	adds	r3, #1
 8001ddc:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
 8001de0:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 8001de4:	2b9a      	cmp	r3, #154	; 0x9a
 8001de6:	d9d3      	bls.n	8001d90 <main+0x438>
	for (uint16_t i = 0; i < 155; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8001de8:	2300      	movs	r3, #0
 8001dea:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
 8001dee:	e027      	b.n	8001e40 <main+0x4e8>
 8001df0:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 8001df4:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe fa46 	bl	8000290 <AT24XX_Read>
 8001e04:	4603      	mov	r3, r0
 8001e06:	461c      	mov	r4, r3
 8001e08:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	f603 33b9 	addw	r3, r3, #3001	; 0xbb9
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7fe fa3a 	bl	8000290 <AT24XX_Read>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4620      	mov	r0, r4
 8001e22:	f7ff fd5b 	bl	80018dc <byteS>
 8001e26:	4603      	mov	r3, r0
 8001e28:	461a      	mov	r2, r3
 8001e2a:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 8001e2e:	b211      	sxth	r1, r2
 8001e30:	4a57      	ldr	r2, [pc, #348]	; (8001f90 <main+0x638>)
 8001e32:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001e36:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
 8001e40:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 8001e44:	2b9a      	cmp	r3, #154	; 0x9a
 8001e46:	d9d3      	bls.n	8001df0 <main+0x498>


	//	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);

	uint8_t uartTransmit[] = "UART OK\r\n";
 8001e48:	4a52      	ldr	r2, [pc, #328]	; (8001f94 <main+0x63c>)
 8001e4a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001e4e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e50:	c303      	stmia	r3!, {r0, r1}
 8001e52:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, uartTransmit, sizeof(uartTransmit), 100);
 8001e54:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8001e58:	2364      	movs	r3, #100	; 0x64
 8001e5a:	220a      	movs	r2, #10
 8001e5c:	484e      	ldr	r0, [pc, #312]	; (8001f98 <main+0x640>)
 8001e5e:	f013 fcea 	bl	8015836 <HAL_UART_Transmit>

	uint8_t uartTransmit_IT[] = "UART INTERRUPT OK\r\n";
 8001e62:	4b4e      	ldr	r3, [pc, #312]	; (8001f9c <main+0x644>)
 8001e64:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8001e68:	461d      	mov	r5, r3
 8001e6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e6e:	682b      	ldr	r3, [r5, #0]
 8001e70:	6023      	str	r3, [r4, #0]
	HAL_UART_Transmit_IT(&huart1, uartTransmit_IT, sizeof(uartTransmit_IT));
 8001e72:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001e76:	2214      	movs	r2, #20
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4847      	ldr	r0, [pc, #284]	; (8001f98 <main+0x640>)
 8001e7c:	f013 fe0f 	bl	8015a9e <HAL_UART_Transmit_IT>

	//	uint8_t uartTransmit_DMA[] = "UART DMA OK\r\n";
	//	HAL_UART_Transmit_DMA(&huart1, uartTransmit_DMA, sizeof(uartTransmit_DMA));

	HAL_UART_Receive_IT(&huart1, &rx_data, UART_RX_BUFFER_SIZE);
 8001e80:	2210      	movs	r2, #16
 8001e82:	4947      	ldr	r1, [pc, #284]	; (8001fa0 <main+0x648>)
 8001e84:	4844      	ldr	r0, [pc, #272]	; (8001f98 <main+0x640>)
 8001e86:	f013 fe4f 	bl	8015b28 <HAL_UART_Receive_IT>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{

		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5) == GPIO_PIN_SET) {
 8001e8a:	2120      	movs	r1, #32
 8001e8c:	4845      	ldr	r0, [pc, #276]	; (8001fa4 <main+0x64c>)
 8001e8e:	f009 f8c1 	bl	800b014 <HAL_GPIO_ReadPin>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d12c      	bne.n	8001ef2 <main+0x59a>

			uint16_t touchX = getX();
 8001e98:	f004 fbee 	bl	8006678 <getX>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
			uint16_t touchY = getY();
 8001ea2:	f004 fc03 	bl	80066ac <getY>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
			if (touchX && touchY && touchX != 0x0DB)
 8001eac:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d012      	beq.n	8001eda <main+0x582>
 8001eb4:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d00e      	beq.n	8001eda <main+0x582>
 8001ebc:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8001ec0:	2bdb      	cmp	r3, #219	; 0xdb
 8001ec2:	d00a      	beq.n	8001eda <main+0x582>
			{
				LCD_Rect_Fill(touchX, touchY, 1, 1, WHITE);
 8001ec4:	f8b7 10c8 	ldrh.w	r1, [r7, #200]	; 0xc8
 8001ec8:	f8b7 00ca 	ldrh.w	r0, [r7, #202]	; 0xca
 8001ecc:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f002 f9fd 	bl	80042d4 <LCD_Rect_Fill>
			}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8001eda:	2201      	movs	r2, #1
 8001edc:	2180      	movs	r1, #128	; 0x80
 8001ede:	4832      	ldr	r0, [pc, #200]	; (8001fa8 <main+0x650>)
 8001ee0:	f009 f8b0 	bl	800b044 <HAL_GPIO_WritePin>
			touchX = 0;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
			touchY = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
 8001ef0:	e004      	b.n	8001efc <main+0x5a4>
		} else
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	2180      	movs	r1, #128	; 0x80
 8001ef6:	482c      	ldr	r0, [pc, #176]	; (8001fa8 <main+0x650>)
 8001ef8:	f009 f8a4 	bl	800b044 <HAL_GPIO_WritePin>


		//		if (millis / 1000 % 2 == 0)
		////		else
		//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
		rtcSec = DS3231_getSec();
 8001efc:	f7fe ff5c 	bl	8000db8 <DS3231_getSec>
 8001f00:	4603      	mov	r3, r0
 8001f02:	461a      	mov	r2, r3
 8001f04:	4b29      	ldr	r3, [pc, #164]	; (8001fac <main+0x654>)
 8001f06:	701a      	strb	r2, [r3, #0]

		char clockPrint[13];

		if (rtcSecLast != rtcSec) {
 8001f08:	4b29      	ldr	r3, [pc, #164]	; (8001fb0 <main+0x658>)
 8001f0a:	781a      	ldrb	r2, [r3, #0]
 8001f0c:	4b27      	ldr	r3, [pc, #156]	; (8001fac <main+0x654>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d0ba      	beq.n	8001e8a <main+0x532>

			rtcMin = DS3231_getMin();
 8001f14:	f7fe ff5e 	bl	8000dd4 <DS3231_getMin>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	4b25      	ldr	r3, [pc, #148]	; (8001fb4 <main+0x65c>)
 8001f1e:	701a      	strb	r2, [r3, #0]

			LCD_Circle(170, 35, 8, 0, 1, ORANGE);
 8001f20:	4b25      	ldr	r3, [pc, #148]	; (8001fb8 <main+0x660>)
 8001f22:	9301      	str	r3, [sp, #4]
 8001f24:	2301      	movs	r3, #1
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	2300      	movs	r3, #0
 8001f2a:	2208      	movs	r2, #8
 8001f2c:	2123      	movs	r1, #35	; 0x23
 8001f2e:	20aa      	movs	r0, #170	; 0xaa
 8001f30:	f002 fe14 	bl	8004b5c <LCD_Circle>
			LCD_Circle(170, 75, 8, 0, 1, ORANGE);
 8001f34:	4b20      	ldr	r3, [pc, #128]	; (8001fb8 <main+0x660>)
 8001f36:	9301      	str	r3, [sp, #4]
 8001f38:	2301      	movs	r3, #1
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	2208      	movs	r2, #8
 8001f40:	214b      	movs	r1, #75	; 0x4b
 8001f42:	20aa      	movs	r0, #170	; 0xaa
 8001f44:	f002 fe0a 	bl	8004b5c <LCD_Circle>

			if (rtcSec % 2 != 0) {
 8001f48:	4b18      	ldr	r3, [pc, #96]	; (8001fac <main+0x654>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d032      	beq.n	8001fbc <main+0x664>
				LCD_Circle(170, 35, 7, 1, 1, ORANGE);
 8001f56:	4b18      	ldr	r3, [pc, #96]	; (8001fb8 <main+0x660>)
 8001f58:	9301      	str	r3, [sp, #4]
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	2301      	movs	r3, #1
 8001f60:	2207      	movs	r2, #7
 8001f62:	2123      	movs	r1, #35	; 0x23
 8001f64:	20aa      	movs	r0, #170	; 0xaa
 8001f66:	f002 fdf9 	bl	8004b5c <LCD_Circle>
				LCD_Circle(170, 75, 7, 1, 1, ORANGE);
 8001f6a:	4b13      	ldr	r3, [pc, #76]	; (8001fb8 <main+0x660>)
 8001f6c:	9301      	str	r3, [sp, #4]
 8001f6e:	2301      	movs	r3, #1
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	2301      	movs	r3, #1
 8001f74:	2207      	movs	r2, #7
 8001f76:	214b      	movs	r1, #75	; 0x4b
 8001f78:	20aa      	movs	r0, #170	; 0xaa
 8001f7a:	f002 fdef 	bl	8004b5c <LCD_Circle>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f84:	4807      	ldr	r0, [pc, #28]	; (8001fa4 <main+0x64c>)
 8001f86:	f009 f85d 	bl	800b044 <HAL_GPIO_WritePin>
 8001f8a:	e031      	b.n	8001ff0 <main+0x698>
 8001f8c:	200006f4 	.word	0x200006f4
 8001f90:	2000082c 	.word	0x2000082c
 8001f94:	08052130 	.word	0x08052130
 8001f98:	200004d8 	.word	0x200004d8
 8001f9c:	0805213c 	.word	0x0805213c
 8001fa0:	20000975 	.word	0x20000975
 8001fa4:	40020800 	.word	0x40020800
 8001fa8:	40020000 	.word	0x40020000
 8001fac:	2000056d 	.word	0x2000056d
 8001fb0:	20000000 	.word	0x20000000
 8001fb4:	2000056e 	.word	0x2000056e
 8001fb8:	00ffa500 	.word	0x00ffa500
			}
			else {
				LCD_Circle(170, 35, 7, 1, 1, BLACK);
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	9301      	str	r3, [sp, #4]
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	9300      	str	r3, [sp, #0]
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	2207      	movs	r2, #7
 8001fc8:	2123      	movs	r1, #35	; 0x23
 8001fca:	20aa      	movs	r0, #170	; 0xaa
 8001fcc:	f002 fdc6 	bl	8004b5c <LCD_Circle>
				LCD_Circle(170, 75, 7, 1, 1, BLACK);
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	9301      	str	r3, [sp, #4]
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	9300      	str	r3, [sp, #0]
 8001fd8:	2301      	movs	r3, #1
 8001fda:	2207      	movs	r2, #7
 8001fdc:	214b      	movs	r1, #75	; 0x4b
 8001fde:	20aa      	movs	r0, #170	; 0xaa
 8001fe0:	f002 fdbc 	bl	8004b5c <LCD_Circle>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fea:	48bb      	ldr	r0, [pc, #748]	; (80022d8 <main+0x980>)
 8001fec:	f009 f82a 	bl	800b044 <HAL_GPIO_WritePin>
			}

			if (rtcMinLast != rtcMin) {
 8001ff0:	4bba      	ldr	r3, [pc, #744]	; (80022dc <main+0x984>)
 8001ff2:	781a      	ldrb	r2, [r3, #0]
 8001ff4:	4bba      	ldr	r3, [pc, #744]	; (80022e0 <main+0x988>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	f001 808c 	beq.w	8003116 <main+0x17be>

				rtcHrs = DS3231_getHrs();
 8001ffe:	f7fe fef7 	bl	8000df0 <DS3231_getHrs>
 8002002:	4603      	mov	r3, r0
 8002004:	461a      	mov	r2, r3
 8002006:	4bb7      	ldr	r3, [pc, #732]	; (80022e4 <main+0x98c>)
 8002008:	701a      	strb	r2, [r3, #0]

				sprintf(clockPrint, "%02d", rtcMinLast);
 800200a:	4bb4      	ldr	r3, [pc, #720]	; (80022dc <main+0x984>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	461a      	mov	r2, r3
 8002010:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002014:	49b4      	ldr	r1, [pc, #720]	; (80022e8 <main+0x990>)
 8002016:	4618      	mov	r0, r3
 8002018:	f018 face 	bl	801a5b8 <siprintf>
				LCD_Font(178, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 800201c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002020:	2300      	movs	r3, #0
 8002022:	9301      	str	r3, [sp, #4]
 8002024:	2301      	movs	r3, #1
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	4bb0      	ldr	r3, [pc, #704]	; (80022ec <main+0x994>)
 800202a:	2164      	movs	r1, #100	; 0x64
 800202c:	20b2      	movs	r0, #178	; 0xb2
 800202e:	f003 faab 	bl	8005588 <LCD_Font>
				sprintf(clockPrint, "%02d", rtcMin);
 8002032:	4bab      	ldr	r3, [pc, #684]	; (80022e0 <main+0x988>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	461a      	mov	r2, r3
 8002038:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800203c:	49aa      	ldr	r1, [pc, #680]	; (80022e8 <main+0x990>)
 800203e:	4618      	mov	r0, r3
 8002040:	f018 faba 	bl	801a5b8 <siprintf>
				LCD_Font(178, 100, clockPrint, &DejaVu_Sans_128, 1, ORANGE);
 8002044:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002048:	4ba9      	ldr	r3, [pc, #676]	; (80022f0 <main+0x998>)
 800204a:	9301      	str	r3, [sp, #4]
 800204c:	2301      	movs	r3, #1
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	4ba6      	ldr	r3, [pc, #664]	; (80022ec <main+0x994>)
 8002052:	2164      	movs	r1, #100	; 0x64
 8002054:	20b2      	movs	r0, #178	; 0xb2
 8002056:	f003 fa97 	bl	8005588 <LCD_Font>

				if (rtcHrsLast != rtcHrs) {
 800205a:	4ba6      	ldr	r3, [pc, #664]	; (80022f4 <main+0x99c>)
 800205c:	781a      	ldrb	r2, [r3, #0]
 800205e:	4ba1      	ldr	r3, [pc, #644]	; (80022e4 <main+0x98c>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	429a      	cmp	r2, r3
 8002064:	f000 80fb 	beq.w	800225e <main+0x906>

					rtcDay = DS3231_getDay();
 8002068:	f7fe fed0 	bl	8000e0c <DS3231_getDay>
 800206c:	4603      	mov	r3, r0
 800206e:	461a      	mov	r2, r3
 8002070:	4ba1      	ldr	r3, [pc, #644]	; (80022f8 <main+0x9a0>)
 8002072:	701a      	strb	r2, [r3, #0]
					rtcDate = DS3231_getDate();
 8002074:	f7fe fed8 	bl	8000e28 <DS3231_getDate>
 8002078:	4603      	mov	r3, r0
 800207a:	461a      	mov	r2, r3
 800207c:	4b9f      	ldr	r3, [pc, #636]	; (80022fc <main+0x9a4>)
 800207e:	701a      	strb	r2, [r3, #0]
					rtcMonth = DS3231_getMonth();
 8002080:	f7fe fee0 	bl	8000e44 <DS3231_getMonth>
 8002084:	4603      	mov	r3, r0
 8002086:	461a      	mov	r2, r3
 8002088:	4b9d      	ldr	r3, [pc, #628]	; (8002300 <main+0x9a8>)
 800208a:	701a      	strb	r2, [r3, #0]
					rtcYear = DS3231_getYear();
 800208c:	f7fe fee8 	bl	8000e60 <DS3231_getYear>
 8002090:	4603      	mov	r3, r0
 8002092:	461a      	mov	r2, r3
 8002094:	4b9b      	ldr	r3, [pc, #620]	; (8002304 <main+0x9ac>)
 8002096:	701a      	strb	r2, [r3, #0]

					sprintf(clockPrint, "%02d", rtcHrsLast);
 8002098:	4b96      	ldr	r3, [pc, #600]	; (80022f4 <main+0x99c>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	461a      	mov	r2, r3
 800209e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80020a2:	4991      	ldr	r1, [pc, #580]	; (80022e8 <main+0x990>)
 80020a4:	4618      	mov	r0, r3
 80020a6:	f018 fa87 	bl	801a5b8 <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 80020aa:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80020ae:	2300      	movs	r3, #0
 80020b0:	9301      	str	r3, [sp, #4]
 80020b2:	2301      	movs	r3, #1
 80020b4:	9300      	str	r3, [sp, #0]
 80020b6:	4b8d      	ldr	r3, [pc, #564]	; (80022ec <main+0x994>)
 80020b8:	2164      	movs	r1, #100	; 0x64
 80020ba:	2000      	movs	r0, #0
 80020bc:	f003 fa64 	bl	8005588 <LCD_Font>
					sprintf(clockPrint, "%02d", rtcHrs);
 80020c0:	4b88      	ldr	r3, [pc, #544]	; (80022e4 <main+0x98c>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	461a      	mov	r2, r3
 80020c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80020ca:	4987      	ldr	r1, [pc, #540]	; (80022e8 <main+0x990>)
 80020cc:	4618      	mov	r0, r3
 80020ce:	f018 fa73 	bl	801a5b8 <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, ORANGE);
 80020d2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80020d6:	4b86      	ldr	r3, [pc, #536]	; (80022f0 <main+0x998>)
 80020d8:	9301      	str	r3, [sp, #4]
 80020da:	2301      	movs	r3, #1
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	4b83      	ldr	r3, [pc, #524]	; (80022ec <main+0x994>)
 80020e0:	2164      	movs	r1, #100	; 0x64
 80020e2:	2000      	movs	r0, #0
 80020e4:	f003 fa50 	bl	8005588 <LCD_Font>

					if (rtcDayLast != rtcDay) {
 80020e8:	4b87      	ldr	r3, [pc, #540]	; (8002308 <main+0x9b0>)
 80020ea:	781a      	ldrb	r2, [r3, #0]
 80020ec:	4b82      	ldr	r3, [pc, #520]	; (80022f8 <main+0x9a0>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	f000 80a8 	beq.w	8002246 <main+0x8ee>

						static const char* days[7] = { "MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN" };
						LCD_Font(5, 140, days[(7 + rtcDay - 2) % 7], &DejaVu_Sans_48, 1, BLACK);
 80020f6:	4b80      	ldr	r3, [pc, #512]	; (80022f8 <main+0x9a0>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	1d5a      	adds	r2, r3, #5
 80020fc:	4b83      	ldr	r3, [pc, #524]	; (800230c <main+0x9b4>)
 80020fe:	fb83 1302 	smull	r1, r3, r3, r2
 8002102:	4413      	add	r3, r2
 8002104:	1099      	asrs	r1, r3, #2
 8002106:	17d3      	asrs	r3, r2, #31
 8002108:	1ac9      	subs	r1, r1, r3
 800210a:	460b      	mov	r3, r1
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	1a5b      	subs	r3, r3, r1
 8002110:	1ad1      	subs	r1, r2, r3
 8002112:	4b7f      	ldr	r3, [pc, #508]	; (8002310 <main+0x9b8>)
 8002114:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8002118:	2300      	movs	r3, #0
 800211a:	9301      	str	r3, [sp, #4]
 800211c:	2301      	movs	r3, #1
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	4b7c      	ldr	r3, [pc, #496]	; (8002314 <main+0x9bc>)
 8002122:	218c      	movs	r1, #140	; 0x8c
 8002124:	2005      	movs	r0, #5
 8002126:	f003 fa2f 	bl	8005588 <LCD_Font>
						LCD_Font(5, 140, days[(7 + rtcDay - 1) % 7], &DejaVu_Sans_48, 1, BLUE);
 800212a:	4b73      	ldr	r3, [pc, #460]	; (80022f8 <main+0x9a0>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	1d9a      	adds	r2, r3, #6
 8002130:	4b76      	ldr	r3, [pc, #472]	; (800230c <main+0x9b4>)
 8002132:	fb83 1302 	smull	r1, r3, r3, r2
 8002136:	4413      	add	r3, r2
 8002138:	1099      	asrs	r1, r3, #2
 800213a:	17d3      	asrs	r3, r2, #31
 800213c:	1ac9      	subs	r1, r1, r3
 800213e:	460b      	mov	r3, r1
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	1a5b      	subs	r3, r3, r1
 8002144:	1ad1      	subs	r1, r2, r3
 8002146:	4b72      	ldr	r3, [pc, #456]	; (8002310 <main+0x9b8>)
 8002148:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 800214c:	23ff      	movs	r3, #255	; 0xff
 800214e:	9301      	str	r3, [sp, #4]
 8002150:	2301      	movs	r3, #1
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	4b6f      	ldr	r3, [pc, #444]	; (8002314 <main+0x9bc>)
 8002156:	218c      	movs	r1, #140	; 0x8c
 8002158:	2005      	movs	r0, #5
 800215a:	f003 fa15 	bl	8005588 <LCD_Font>

						static const char* months[12] = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };

						LCD_Font(150, 140, months[(12 + rtcMonth - 2) % 12], &DejaVu_Sans_48, 1, BLACK);
 800215e:	4b68      	ldr	r3, [pc, #416]	; (8002300 <main+0x9a8>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	f103 010a 	add.w	r1, r3, #10
 8002166:	4b6c      	ldr	r3, [pc, #432]	; (8002318 <main+0x9c0>)
 8002168:	fb83 2301 	smull	r2, r3, r3, r1
 800216c:	105a      	asrs	r2, r3, #1
 800216e:	17cb      	asrs	r3, r1, #31
 8002170:	1ad2      	subs	r2, r2, r3
 8002172:	4613      	mov	r3, r2
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	4413      	add	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	1aca      	subs	r2, r1, r3
 800217c:	4b67      	ldr	r3, [pc, #412]	; (800231c <main+0x9c4>)
 800217e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002182:	2300      	movs	r3, #0
 8002184:	9301      	str	r3, [sp, #4]
 8002186:	2301      	movs	r3, #1
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	4b62      	ldr	r3, [pc, #392]	; (8002314 <main+0x9bc>)
 800218c:	218c      	movs	r1, #140	; 0x8c
 800218e:	2096      	movs	r0, #150	; 0x96
 8002190:	f003 f9fa 	bl	8005588 <LCD_Font>
						LCD_Font(150, 140, months[(12 + rtcMonth - 1) % 12], &DejaVu_Sans_48, 1, CYAN);
 8002194:	4b5a      	ldr	r3, [pc, #360]	; (8002300 <main+0x9a8>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	f103 010b 	add.w	r1, r3, #11
 800219c:	4b5e      	ldr	r3, [pc, #376]	; (8002318 <main+0x9c0>)
 800219e:	fb83 2301 	smull	r2, r3, r3, r1
 80021a2:	105a      	asrs	r2, r3, #1
 80021a4:	17cb      	asrs	r3, r1, #31
 80021a6:	1ad2      	subs	r2, r2, r3
 80021a8:	4613      	mov	r3, r2
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	4413      	add	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	1aca      	subs	r2, r1, r3
 80021b2:	4b5a      	ldr	r3, [pc, #360]	; (800231c <main+0x9c4>)
 80021b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80021b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021bc:	9301      	str	r3, [sp, #4]
 80021be:	2301      	movs	r3, #1
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	4b54      	ldr	r3, [pc, #336]	; (8002314 <main+0x9bc>)
 80021c4:	218c      	movs	r1, #140	; 0x8c
 80021c6:	2096      	movs	r0, #150	; 0x96
 80021c8:	f003 f9de 	bl	8005588 <LCD_Font>

						sprintf(clockPrint, "%02d-%02d-%02d", rtcDateLast, rtcMonthLast, rtcYearLast);
 80021cc:	4b54      	ldr	r3, [pc, #336]	; (8002320 <main+0x9c8>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	461a      	mov	r2, r3
 80021d2:	4b54      	ldr	r3, [pc, #336]	; (8002324 <main+0x9cc>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	4619      	mov	r1, r3
 80021d8:	4b53      	ldr	r3, [pc, #332]	; (8002328 <main+0x9d0>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	460b      	mov	r3, r1
 80021e4:	4951      	ldr	r1, [pc, #324]	; (800232c <main+0x9d4>)
 80021e6:	f018 f9e7 	bl	801a5b8 <siprintf>
						LCD_Font(250, 140, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 80021ea:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80021ee:	2300      	movs	r3, #0
 80021f0:	9301      	str	r3, [sp, #4]
 80021f2:	2301      	movs	r3, #1
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	4b47      	ldr	r3, [pc, #284]	; (8002314 <main+0x9bc>)
 80021f8:	218c      	movs	r1, #140	; 0x8c
 80021fa:	20fa      	movs	r0, #250	; 0xfa
 80021fc:	f003 f9c4 	bl	8005588 <LCD_Font>
						sprintf(clockPrint, "%02d-%02d-%02d", rtcDate, rtcMonth, rtcYear);
 8002200:	4b3e      	ldr	r3, [pc, #248]	; (80022fc <main+0x9a4>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	461a      	mov	r2, r3
 8002206:	4b3e      	ldr	r3, [pc, #248]	; (8002300 <main+0x9a8>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	4619      	mov	r1, r3
 800220c:	4b3d      	ldr	r3, [pc, #244]	; (8002304 <main+0x9ac>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	460b      	mov	r3, r1
 8002218:	4944      	ldr	r1, [pc, #272]	; (800232c <main+0x9d4>)
 800221a:	f018 f9cd 	bl	801a5b8 <siprintf>
						LCD_Font(250, 140, clockPrint, &DejaVu_Sans_48, 1, CYAN);
 800221e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002222:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002226:	9301      	str	r3, [sp, #4]
 8002228:	2301      	movs	r3, #1
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	4b39      	ldr	r3, [pc, #228]	; (8002314 <main+0x9bc>)
 800222e:	218c      	movs	r1, #140	; 0x8c
 8002230:	20fa      	movs	r0, #250	; 0xfa
 8002232:	f003 f9a9 	bl	8005588 <LCD_Font>

						rtcDayLast = rtcDay;
 8002236:	4b30      	ldr	r3, [pc, #192]	; (80022f8 <main+0x9a0>)
 8002238:	781a      	ldrb	r2, [r3, #0]
 800223a:	4b33      	ldr	r3, [pc, #204]	; (8002308 <main+0x9b0>)
 800223c:	701a      	strb	r2, [r3, #0]
						rtcDateLast = rtcDate;
 800223e:	4b2f      	ldr	r3, [pc, #188]	; (80022fc <main+0x9a4>)
 8002240:	781a      	ldrb	r2, [r3, #0]
 8002242:	4b37      	ldr	r3, [pc, #220]	; (8002320 <main+0x9c8>)
 8002244:	701a      	strb	r2, [r3, #0]
					}
					rtcMonthLast = rtcMonth;
 8002246:	4b2e      	ldr	r3, [pc, #184]	; (8002300 <main+0x9a8>)
 8002248:	781a      	ldrb	r2, [r3, #0]
 800224a:	4b36      	ldr	r3, [pc, #216]	; (8002324 <main+0x9cc>)
 800224c:	701a      	strb	r2, [r3, #0]
					rtcYearLast = rtcYear;
 800224e:	4b2d      	ldr	r3, [pc, #180]	; (8002304 <main+0x9ac>)
 8002250:	781a      	ldrb	r2, [r3, #0]
 8002252:	4b35      	ldr	r3, [pc, #212]	; (8002328 <main+0x9d0>)
 8002254:	701a      	strb	r2, [r3, #0]
					rtcHrsLast = rtcHrs;
 8002256:	4b23      	ldr	r3, [pc, #140]	; (80022e4 <main+0x98c>)
 8002258:	781a      	ldrb	r2, [r3, #0]
 800225a:	4b26      	ldr	r3, [pc, #152]	; (80022f4 <main+0x99c>)
 800225c:	701a      	strb	r2, [r3, #0]
				}
				rtcMinLast = rtcMin;
 800225e:	4b20      	ldr	r3, [pc, #128]	; (80022e0 <main+0x988>)
 8002260:	781a      	ldrb	r2, [r3, #0]
 8002262:	4b1e      	ldr	r3, [pc, #120]	; (80022dc <main+0x984>)
 8002264:	701a      	strb	r2, [r3, #0]
				temperature = BME280_getTemperature(-1);
 8002266:	f04f 30ff 	mov.w	r0, #4294967295
 800226a:	f7fe f8bd 	bl	80003e8 <BME280_getTemperature>
 800226e:	ee10 3a10 	vmov	r3, s0
 8002272:	4618      	mov	r0, r3
 8002274:	f016 fd68 	bl	8018d48 <__aeabi_f2d>
 8002278:	4602      	mov	r2, r0
 800227a:	460b      	mov	r3, r1
 800227c:	492c      	ldr	r1, [pc, #176]	; (8002330 <main+0x9d8>)
 800227e:	e9c1 2300 	strd	r2, r3, [r1]
				humidity = BME280_getHumidity(-1);
 8002282:	f04f 30ff 	mov.w	r0, #4294967295
 8002286:	f7fe f927 	bl	80004d8 <BME280_getHumidity>
 800228a:	ee10 3a10 	vmov	r3, s0
 800228e:	4618      	mov	r0, r3
 8002290:	f016 fd5a 	bl	8018d48 <__aeabi_f2d>
 8002294:	4602      	mov	r2, r0
 8002296:	460b      	mov	r3, r1
 8002298:	4926      	ldr	r1, [pc, #152]	; (8002334 <main+0x9dc>)
 800229a:	e9c1 2300 	strd	r2, r3, [r1]
				pressure = (uint16_t)BME280_getPressure();
 800229e:	f7fe f9bb 	bl	8000618 <BME280_getPressure>
 80022a2:	eef0 7a40 	vmov.f32	s15, s0
 80022a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022aa:	ee17 3a90 	vmov	r3, s15
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	4b21      	ldr	r3, [pc, #132]	; (8002338 <main+0x9e0>)
 80022b2:	801a      	strh	r2, [r3, #0]

				if (pressure > 900 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 80022b4:	4b20      	ldr	r3, [pc, #128]	; (8002338 <main+0x9e0>)
 80022b6:	881b      	ldrh	r3, [r3, #0]
 80022b8:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80022bc:	f240 872b 	bls.w	8003116 <main+0x17be>
 80022c0:	4b1d      	ldr	r3, [pc, #116]	; (8002338 <main+0x9e0>)
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	f240 424b 	movw	r2, #1099	; 0x44b
 80022c8:	4293      	cmp	r3, r2
 80022ca:	f200 8724 	bhi.w	8003116 <main+0x17be>
 80022ce:	4b18      	ldr	r3, [pc, #96]	; (8002330 <main+0x9d8>)
 80022d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022d4:	e032      	b.n	800233c <main+0x9e4>
 80022d6:	bf00      	nop
 80022d8:	40020800 	.word	0x40020800
 80022dc:	20000001 	.word	0x20000001
 80022e0:	2000056e 	.word	0x2000056e
 80022e4:	2000056f 	.word	0x2000056f
 80022e8:	080520d4 	.word	0x080520d4
 80022ec:	08051ee8 	.word	0x08051ee8
 80022f0:	00ffa500 	.word	0x00ffa500
 80022f4:	20000002 	.word	0x20000002
 80022f8:	20000570 	.word	0x20000570
 80022fc:	20000571 	.word	0x20000571
 8002300:	20000572 	.word	0x20000572
 8002304:	20000573 	.word	0x20000573
 8002308:	20000574 	.word	0x20000574
 800230c:	92492493 	.word	0x92492493
 8002310:	20000008 	.word	0x20000008
 8002314:	08029850 	.word	0x08029850
 8002318:	2aaaaaab 	.word	0x2aaaaaab
 800231c:	20000024 	.word	0x20000024
 8002320:	20000575 	.word	0x20000575
 8002324:	20000576 	.word	0x20000576
 8002328:	20000577 	.word	0x20000577
 800232c:	080520dc 	.word	0x080520dc
 8002330:	20000578 	.word	0x20000578
 8002334:	20000588 	.word	0x20000588
 8002338:	200005b8 	.word	0x200005b8
 800233c:	f04f 0200 	mov.w	r2, #0
 8002340:	4b8a      	ldr	r3, [pc, #552]	; (800256c <main+0xc14>)
 8002342:	f016 ffcb 	bl	80192dc <__aeabi_dcmplt>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 86e4 	beq.w	8003116 <main+0x17be>
 800234e:	4b88      	ldr	r3, [pc, #544]	; (8002570 <main+0xc18>)
 8002350:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002354:	f04f 0200 	mov.w	r2, #0
 8002358:	4b86      	ldr	r3, [pc, #536]	; (8002574 <main+0xc1c>)
 800235a:	f016 ffdd 	bl	8019318 <__aeabi_dcmpgt>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 86d8 	beq.w	8003116 <main+0x17be>
 8002366:	4b84      	ldr	r3, [pc, #528]	; (8002578 <main+0xc20>)
 8002368:	e9d3 0100 	ldrd	r0, r1, [r3]
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	f04f 0300 	mov.w	r3, #0
 8002374:	f016 ffd0 	bl	8019318 <__aeabi_dcmpgt>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 86cb 	beq.w	8003116 <main+0x17be>
 8002380:	4b7d      	ldr	r3, [pc, #500]	; (8002578 <main+0xc20>)
 8002382:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002386:	f04f 0200 	mov.w	r2, #0
 800238a:	4b7c      	ldr	r3, [pc, #496]	; (800257c <main+0xc24>)
 800238c:	f016 ffa6 	bl	80192dc <__aeabi_dcmplt>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	f000 86bf 	beq.w	8003116 <main+0x17be>

					if (temperature != temperatureLast) {
 8002398:	4b75      	ldr	r3, [pc, #468]	; (8002570 <main+0xc18>)
 800239a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800239e:	4b78      	ldr	r3, [pc, #480]	; (8002580 <main+0xc28>)
 80023a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a4:	f016 ff90 	bl	80192c8 <__aeabi_dcmpeq>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f040 8120 	bne.w	80025f0 <main+0xc98>

						char weatherPrintT[8];

						if (temperatureLast >= 10 || (temperatureLast < 0 && temperatureLast > -10)) {
 80023b0:	4b73      	ldr	r3, [pc, #460]	; (8002580 <main+0xc28>)
 80023b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023b6:	f04f 0200 	mov.w	r2, #0
 80023ba:	4b72      	ldr	r3, [pc, #456]	; (8002584 <main+0xc2c>)
 80023bc:	f016 ffa2 	bl	8019304 <__aeabi_dcmpge>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d116      	bne.n	80023f4 <main+0xa9c>
 80023c6:	4b6e      	ldr	r3, [pc, #440]	; (8002580 <main+0xc28>)
 80023c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023cc:	f04f 0200 	mov.w	r2, #0
 80023d0:	f04f 0300 	mov.w	r3, #0
 80023d4:	f016 ff82 	bl	80192dc <__aeabi_dcmplt>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d01c      	beq.n	8002418 <main+0xac0>
 80023de:	4b68      	ldr	r3, [pc, #416]	; (8002580 <main+0xc28>)
 80023e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023e4:	f04f 0200 	mov.w	r2, #0
 80023e8:	4b67      	ldr	r3, [pc, #412]	; (8002588 <main+0xc30>)
 80023ea:	f016 ff95 	bl	8019318 <__aeabi_dcmpgt>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d011      	beq.n	8002418 <main+0xac0>
							sprintf(weatherPrintT, "%.1f'C", temperatureLast);
 80023f4:	4b62      	ldr	r3, [pc, #392]	; (8002580 <main+0xc28>)
 80023f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023fa:	1d38      	adds	r0, r7, #4
 80023fc:	4963      	ldr	r1, [pc, #396]	; (800258c <main+0xc34>)
 80023fe:	f018 f8db 	bl	801a5b8 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 8002402:	1d3a      	adds	r2, r7, #4
 8002404:	2300      	movs	r3, #0
 8002406:	9301      	str	r3, [sp, #4]
 8002408:	2301      	movs	r3, #1
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	4b60      	ldr	r3, [pc, #384]	; (8002590 <main+0xc38>)
 800240e:	21bb      	movs	r1, #187	; 0xbb
 8002410:	2001      	movs	r0, #1
 8002412:	f003 f8b9 	bl	8005588 <LCD_Font>
 8002416:	e04c      	b.n	80024b2 <main+0xb5a>
						}
						else if (temperatureLast < 10 && temperatureLast > 0) {
 8002418:	4b59      	ldr	r3, [pc, #356]	; (8002580 <main+0xc28>)
 800241a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800241e:	f04f 0200 	mov.w	r2, #0
 8002422:	4b58      	ldr	r3, [pc, #352]	; (8002584 <main+0xc2c>)
 8002424:	f016 ff5a 	bl	80192dc <__aeabi_dcmplt>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d01d      	beq.n	800246a <main+0xb12>
 800242e:	4b54      	ldr	r3, [pc, #336]	; (8002580 <main+0xc28>)
 8002430:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002434:	f04f 0200 	mov.w	r2, #0
 8002438:	f04f 0300 	mov.w	r3, #0
 800243c:	f016 ff6c 	bl	8019318 <__aeabi_dcmpgt>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d011      	beq.n	800246a <main+0xb12>
							sprintf(weatherPrintT, "%.1f'C", temperatureLast);
 8002446:	4b4e      	ldr	r3, [pc, #312]	; (8002580 <main+0xc28>)
 8002448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800244c:	1d38      	adds	r0, r7, #4
 800244e:	494f      	ldr	r1, [pc, #316]	; (800258c <main+0xc34>)
 8002450:	f018 f8b2 	bl	801a5b8 <siprintf>
							LCD_Font(27, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 8002454:	1d3a      	adds	r2, r7, #4
 8002456:	2300      	movs	r3, #0
 8002458:	9301      	str	r3, [sp, #4]
 800245a:	2301      	movs	r3, #1
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	4b4c      	ldr	r3, [pc, #304]	; (8002590 <main+0xc38>)
 8002460:	21bb      	movs	r1, #187	; 0xbb
 8002462:	201b      	movs	r0, #27
 8002464:	f003 f890 	bl	8005588 <LCD_Font>
 8002468:	e023      	b.n	80024b2 <main+0xb5a>
						}
						else if (temperatureLast <= -10) {
 800246a:	4b45      	ldr	r3, [pc, #276]	; (8002580 <main+0xc28>)
 800246c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002470:	f04f 0200 	mov.w	r2, #0
 8002474:	4b44      	ldr	r3, [pc, #272]	; (8002588 <main+0xc30>)
 8002476:	f016 ff3b 	bl	80192f0 <__aeabi_dcmple>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d018      	beq.n	80024b2 <main+0xb5a>
							sprintf(weatherPrintT, "%2d'C", (int8_t)temperatureLast);
 8002480:	4b3f      	ldr	r3, [pc, #252]	; (8002580 <main+0xc28>)
 8002482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002486:	4610      	mov	r0, r2
 8002488:	4619      	mov	r1, r3
 800248a:	f016 ff65 	bl	8019358 <__aeabi_d2iz>
 800248e:	4603      	mov	r3, r0
 8002490:	b25b      	sxtb	r3, r3
 8002492:	461a      	mov	r2, r3
 8002494:	1d3b      	adds	r3, r7, #4
 8002496:	493f      	ldr	r1, [pc, #252]	; (8002594 <main+0xc3c>)
 8002498:	4618      	mov	r0, r3
 800249a:	f018 f88d 	bl	801a5b8 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 800249e:	1d3a      	adds	r2, r7, #4
 80024a0:	2300      	movs	r3, #0
 80024a2:	9301      	str	r3, [sp, #4]
 80024a4:	2301      	movs	r3, #1
 80024a6:	9300      	str	r3, [sp, #0]
 80024a8:	4b39      	ldr	r3, [pc, #228]	; (8002590 <main+0xc38>)
 80024aa:	21bb      	movs	r1, #187	; 0xbb
 80024ac:	2001      	movs	r0, #1
 80024ae:	f003 f86b 	bl	8005588 <LCD_Font>
						}

						if (temperature >= 10 || (temperature < 0 && temperature > -10)) {
 80024b2:	4b2f      	ldr	r3, [pc, #188]	; (8002570 <main+0xc18>)
 80024b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024b8:	f04f 0200 	mov.w	r2, #0
 80024bc:	4b31      	ldr	r3, [pc, #196]	; (8002584 <main+0xc2c>)
 80024be:	f016 ff21 	bl	8019304 <__aeabi_dcmpge>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d116      	bne.n	80024f6 <main+0xb9e>
 80024c8:	4b29      	ldr	r3, [pc, #164]	; (8002570 <main+0xc18>)
 80024ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024ce:	f04f 0200 	mov.w	r2, #0
 80024d2:	f04f 0300 	mov.w	r3, #0
 80024d6:	f016 ff01 	bl	80192dc <__aeabi_dcmplt>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d01c      	beq.n	800251a <main+0xbc2>
 80024e0:	4b23      	ldr	r3, [pc, #140]	; (8002570 <main+0xc18>)
 80024e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024e6:	f04f 0200 	mov.w	r2, #0
 80024ea:	4b27      	ldr	r3, [pc, #156]	; (8002588 <main+0xc30>)
 80024ec:	f016 ff14 	bl	8019318 <__aeabi_dcmpgt>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d011      	beq.n	800251a <main+0xbc2>
							sprintf(weatherPrintT, "%.1f'C", temperature);
 80024f6:	4b1e      	ldr	r3, [pc, #120]	; (8002570 <main+0xc18>)
 80024f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fc:	1d38      	adds	r0, r7, #4
 80024fe:	4923      	ldr	r1, [pc, #140]	; (800258c <main+0xc34>)
 8002500:	f018 f85a 	bl	801a5b8 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 8002504:	1d3a      	adds	r2, r7, #4
 8002506:	4b24      	ldr	r3, [pc, #144]	; (8002598 <main+0xc40>)
 8002508:	9301      	str	r3, [sp, #4]
 800250a:	2301      	movs	r3, #1
 800250c:	9300      	str	r3, [sp, #0]
 800250e:	4b20      	ldr	r3, [pc, #128]	; (8002590 <main+0xc38>)
 8002510:	21bb      	movs	r1, #187	; 0xbb
 8002512:	2001      	movs	r0, #1
 8002514:	f003 f838 	bl	8005588 <LCD_Font>
 8002518:	e064      	b.n	80025e4 <main+0xc8c>
						}
						else if (temperature < 10 && temperature > 0) {
 800251a:	4b15      	ldr	r3, [pc, #84]	; (8002570 <main+0xc18>)
 800251c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002520:	f04f 0200 	mov.w	r2, #0
 8002524:	4b17      	ldr	r3, [pc, #92]	; (8002584 <main+0xc2c>)
 8002526:	f016 fed9 	bl	80192dc <__aeabi_dcmplt>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d035      	beq.n	800259c <main+0xc44>
 8002530:	4b0f      	ldr	r3, [pc, #60]	; (8002570 <main+0xc18>)
 8002532:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002536:	f04f 0200 	mov.w	r2, #0
 800253a:	f04f 0300 	mov.w	r3, #0
 800253e:	f016 feeb 	bl	8019318 <__aeabi_dcmpgt>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d029      	beq.n	800259c <main+0xc44>
							sprintf(weatherPrintT, "%.1f'C", temperature);
 8002548:	4b09      	ldr	r3, [pc, #36]	; (8002570 <main+0xc18>)
 800254a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254e:	1d38      	adds	r0, r7, #4
 8002550:	490e      	ldr	r1, [pc, #56]	; (800258c <main+0xc34>)
 8002552:	f018 f831 	bl	801a5b8 <siprintf>
							LCD_Font(27, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 8002556:	1d3a      	adds	r2, r7, #4
 8002558:	4b0f      	ldr	r3, [pc, #60]	; (8002598 <main+0xc40>)
 800255a:	9301      	str	r3, [sp, #4]
 800255c:	2301      	movs	r3, #1
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <main+0xc38>)
 8002562:	21bb      	movs	r1, #187	; 0xbb
 8002564:	201b      	movs	r0, #27
 8002566:	f003 f80f 	bl	8005588 <LCD_Font>
 800256a:	e03b      	b.n	80025e4 <main+0xc8c>
 800256c:	40554000 	.word	0x40554000
 8002570:	20000578 	.word	0x20000578
 8002574:	c0440000 	.word	0xc0440000
 8002578:	20000588 	.word	0x20000588
 800257c:	40590000 	.word	0x40590000
 8002580:	20000580 	.word	0x20000580
 8002584:	40240000 	.word	0x40240000
 8002588:	c0240000 	.word	0xc0240000
 800258c:	080520ec 	.word	0x080520ec
 8002590:	08029850 	.word	0x08029850
 8002594:	080520f4 	.word	0x080520f4
 8002598:	00ffa500 	.word	0x00ffa500
						}
						else if (temperature <= -10) {
 800259c:	4bb5      	ldr	r3, [pc, #724]	; (8002874 <main+0xf1c>)
 800259e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025a2:	f04f 0200 	mov.w	r2, #0
 80025a6:	4bb4      	ldr	r3, [pc, #720]	; (8002878 <main+0xf20>)
 80025a8:	f016 fea2 	bl	80192f0 <__aeabi_dcmple>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d018      	beq.n	80025e4 <main+0xc8c>
							sprintf(weatherPrintT, "%2d'C", (int8_t)temperature);
 80025b2:	4bb0      	ldr	r3, [pc, #704]	; (8002874 <main+0xf1c>)
 80025b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b8:	4610      	mov	r0, r2
 80025ba:	4619      	mov	r1, r3
 80025bc:	f016 fecc 	bl	8019358 <__aeabi_d2iz>
 80025c0:	4603      	mov	r3, r0
 80025c2:	b25b      	sxtb	r3, r3
 80025c4:	461a      	mov	r2, r3
 80025c6:	1d3b      	adds	r3, r7, #4
 80025c8:	49ac      	ldr	r1, [pc, #688]	; (800287c <main+0xf24>)
 80025ca:	4618      	mov	r0, r3
 80025cc:	f017 fff4 	bl	801a5b8 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 80025d0:	1d3a      	adds	r2, r7, #4
 80025d2:	4bab      	ldr	r3, [pc, #684]	; (8002880 <main+0xf28>)
 80025d4:	9301      	str	r3, [sp, #4]
 80025d6:	2301      	movs	r3, #1
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	4baa      	ldr	r3, [pc, #680]	; (8002884 <main+0xf2c>)
 80025dc:	21bb      	movs	r1, #187	; 0xbb
 80025de:	2001      	movs	r0, #1
 80025e0:	f002 ffd2 	bl	8005588 <LCD_Font>
						}

						temperatureLast = temperature;
 80025e4:	4ba3      	ldr	r3, [pc, #652]	; (8002874 <main+0xf1c>)
 80025e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ea:	49a7      	ldr	r1, [pc, #668]	; (8002888 <main+0xf30>)
 80025ec:	e9c1 2300 	strd	r2, r3, [r1]
					}

					if (humidity != humidityLast) {
 80025f0:	4ba6      	ldr	r3, [pc, #664]	; (800288c <main+0xf34>)
 80025f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025f6:	4ba6      	ldr	r3, [pc, #664]	; (8002890 <main+0xf38>)
 80025f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025fc:	f016 fe64 	bl	80192c8 <__aeabi_dcmpeq>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d15b      	bne.n	80026be <main+0xd66>

						char weatherPrintH[7];

						sprintf(weatherPrintH, "%.1f'H", humidityLast);
 8002606:	4ba2      	ldr	r3, [pc, #648]	; (8002890 <main+0xf38>)
 8002608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260c:	f107 000c 	add.w	r0, r7, #12
 8002610:	49a0      	ldr	r1, [pc, #640]	; (8002894 <main+0xf3c>)
 8002612:	f017 ffd1 	bl	801a5b8 <siprintf>
						if (humidityLast >= 10)
 8002616:	4b9e      	ldr	r3, [pc, #632]	; (8002890 <main+0xf38>)
 8002618:	e9d3 0100 	ldrd	r0, r1, [r3]
 800261c:	f04f 0200 	mov.w	r2, #0
 8002620:	4b9d      	ldr	r3, [pc, #628]	; (8002898 <main+0xf40>)
 8002622:	f016 fe6f 	bl	8019304 <__aeabi_dcmpge>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00b      	beq.n	8002644 <main+0xcec>
							LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 800262c:	f107 020c 	add.w	r2, r7, #12
 8002630:	2300      	movs	r3, #0
 8002632:	9301      	str	r3, [sp, #4]
 8002634:	2301      	movs	r3, #1
 8002636:	9300      	str	r3, [sp, #0]
 8002638:	4b92      	ldr	r3, [pc, #584]	; (8002884 <main+0xf2c>)
 800263a:	21bb      	movs	r1, #187	; 0xbb
 800263c:	20a0      	movs	r0, #160	; 0xa0
 800263e:	f002 ffa3 	bl	8005588 <LCD_Font>
 8002642:	e00a      	b.n	800265a <main+0xd02>
						else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 8002644:	f107 020c 	add.w	r2, r7, #12
 8002648:	2300      	movs	r3, #0
 800264a:	9301      	str	r3, [sp, #4]
 800264c:	2301      	movs	r3, #1
 800264e:	9300      	str	r3, [sp, #0]
 8002650:	4b8c      	ldr	r3, [pc, #560]	; (8002884 <main+0xf2c>)
 8002652:	21bb      	movs	r1, #187	; 0xbb
 8002654:	20ba      	movs	r0, #186	; 0xba
 8002656:	f002 ff97 	bl	8005588 <LCD_Font>

						sprintf(weatherPrintH, "%.1f'H", humidity);
 800265a:	4b8c      	ldr	r3, [pc, #560]	; (800288c <main+0xf34>)
 800265c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002660:	f107 000c 	add.w	r0, r7, #12
 8002664:	498b      	ldr	r1, [pc, #556]	; (8002894 <main+0xf3c>)
 8002666:	f017 ffa7 	bl	801a5b8 <siprintf>
						if (humidity >= 10)
 800266a:	4b88      	ldr	r3, [pc, #544]	; (800288c <main+0xf34>)
 800266c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002670:	f04f 0200 	mov.w	r2, #0
 8002674:	4b88      	ldr	r3, [pc, #544]	; (8002898 <main+0xf40>)
 8002676:	f016 fe45 	bl	8019304 <__aeabi_dcmpge>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00c      	beq.n	800269a <main+0xd42>
							LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 8002680:	f107 020c 	add.w	r2, r7, #12
 8002684:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002688:	9301      	str	r3, [sp, #4]
 800268a:	2301      	movs	r3, #1
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	4b7d      	ldr	r3, [pc, #500]	; (8002884 <main+0xf2c>)
 8002690:	21bb      	movs	r1, #187	; 0xbb
 8002692:	20a0      	movs	r0, #160	; 0xa0
 8002694:	f002 ff78 	bl	8005588 <LCD_Font>
 8002698:	e00b      	b.n	80026b2 <main+0xd5a>
						else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 800269a:	f107 020c 	add.w	r2, r7, #12
 800269e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026a2:	9301      	str	r3, [sp, #4]
 80026a4:	2301      	movs	r3, #1
 80026a6:	9300      	str	r3, [sp, #0]
 80026a8:	4b76      	ldr	r3, [pc, #472]	; (8002884 <main+0xf2c>)
 80026aa:	21bb      	movs	r1, #187	; 0xbb
 80026ac:	20ba      	movs	r0, #186	; 0xba
 80026ae:	f002 ff6b 	bl	8005588 <LCD_Font>

						humidityLast = humidity;
 80026b2:	4b76      	ldr	r3, [pc, #472]	; (800288c <main+0xf34>)
 80026b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b8:	4975      	ldr	r1, [pc, #468]	; (8002890 <main+0xf38>)
 80026ba:	e9c1 2300 	strd	r2, r3, [r1]
					}

					if (pressureLast != pressure) {
 80026be:	4b77      	ldr	r3, [pc, #476]	; (800289c <main+0xf44>)
 80026c0:	881a      	ldrh	r2, [r3, #0]
 80026c2:	4b77      	ldr	r3, [pc, #476]	; (80028a0 <main+0xf48>)
 80026c4:	881b      	ldrh	r3, [r3, #0]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d065      	beq.n	8002796 <main+0xe3e>

						char weatherPrintP[11];

						if (pressureLast >= 1000) {
 80026ca:	4b74      	ldr	r3, [pc, #464]	; (800289c <main+0xf44>)
 80026cc:	881b      	ldrh	r3, [r3, #0]
 80026ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026d2:	d315      	bcc.n	8002700 <main+0xda8>
							sprintf(weatherPrintP, "%02dP", pressureLast);
 80026d4:	4b71      	ldr	r3, [pc, #452]	; (800289c <main+0xf44>)
 80026d6:	881b      	ldrh	r3, [r3, #0]
 80026d8:	461a      	mov	r2, r3
 80026da:	f107 0314 	add.w	r3, r7, #20
 80026de:	4971      	ldr	r1, [pc, #452]	; (80028a4 <main+0xf4c>)
 80026e0:	4618      	mov	r0, r3
 80026e2:	f017 ff69 	bl	801a5b8 <siprintf>
							LCD_Font(320, 187, weatherPrintP, &DejaVu_Sans_48, 1, BLACK);
 80026e6:	f107 0214 	add.w	r2, r7, #20
 80026ea:	2300      	movs	r3, #0
 80026ec:	9301      	str	r3, [sp, #4]
 80026ee:	2301      	movs	r3, #1
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	4b64      	ldr	r3, [pc, #400]	; (8002884 <main+0xf2c>)
 80026f4:	21bb      	movs	r1, #187	; 0xbb
 80026f6:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80026fa:	f002 ff45 	bl	8005588 <LCD_Font>
 80026fe:	e014      	b.n	800272a <main+0xdd2>
						}
						else {
							sprintf(weatherPrintP, " %02dP", pressureLast);
 8002700:	4b66      	ldr	r3, [pc, #408]	; (800289c <main+0xf44>)
 8002702:	881b      	ldrh	r3, [r3, #0]
 8002704:	461a      	mov	r2, r3
 8002706:	f107 0314 	add.w	r3, r7, #20
 800270a:	4967      	ldr	r1, [pc, #412]	; (80028a8 <main+0xf50>)
 800270c:	4618      	mov	r0, r3
 800270e:	f017 ff53 	bl	801a5b8 <siprintf>
							LCD_Font(320, 187, weatherPrintP, &DejaVu_Sans_48, 1, BLACK);
 8002712:	f107 0214 	add.w	r2, r7, #20
 8002716:	2300      	movs	r3, #0
 8002718:	9301      	str	r3, [sp, #4]
 800271a:	2301      	movs	r3, #1
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	4b59      	ldr	r3, [pc, #356]	; (8002884 <main+0xf2c>)
 8002720:	21bb      	movs	r1, #187	; 0xbb
 8002722:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8002726:	f002 ff2f 	bl	8005588 <LCD_Font>
						}

						pressureLast = pressure;
 800272a:	4b5d      	ldr	r3, [pc, #372]	; (80028a0 <main+0xf48>)
 800272c:	881a      	ldrh	r2, [r3, #0]
 800272e:	4b5b      	ldr	r3, [pc, #364]	; (800289c <main+0xf44>)
 8002730:	801a      	strh	r2, [r3, #0]

						if (pressureLast >= 1000) {
 8002732:	4b5a      	ldr	r3, [pc, #360]	; (800289c <main+0xf44>)
 8002734:	881b      	ldrh	r3, [r3, #0]
 8002736:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800273a:	d316      	bcc.n	800276a <main+0xe12>
							sprintf(weatherPrintP, "%02dP", pressureLast);
 800273c:	4b57      	ldr	r3, [pc, #348]	; (800289c <main+0xf44>)
 800273e:	881b      	ldrh	r3, [r3, #0]
 8002740:	461a      	mov	r2, r3
 8002742:	f107 0314 	add.w	r3, r7, #20
 8002746:	4957      	ldr	r1, [pc, #348]	; (80028a4 <main+0xf4c>)
 8002748:	4618      	mov	r0, r3
 800274a:	f017 ff35 	bl	801a5b8 <siprintf>
							LCD_Font(320, 187, weatherPrintP, &DejaVu_Sans_48, 1, GREEN);
 800274e:	f107 0214 	add.w	r2, r7, #20
 8002752:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8002756:	9301      	str	r3, [sp, #4]
 8002758:	2301      	movs	r3, #1
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	4b49      	ldr	r3, [pc, #292]	; (8002884 <main+0xf2c>)
 800275e:	21bb      	movs	r1, #187	; 0xbb
 8002760:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8002764:	f002 ff10 	bl	8005588 <LCD_Font>
 8002768:	e015      	b.n	8002796 <main+0xe3e>
						}
						else {
							sprintf(weatherPrintP, " %02dP", pressureLast);
 800276a:	4b4c      	ldr	r3, [pc, #304]	; (800289c <main+0xf44>)
 800276c:	881b      	ldrh	r3, [r3, #0]
 800276e:	461a      	mov	r2, r3
 8002770:	f107 0314 	add.w	r3, r7, #20
 8002774:	494c      	ldr	r1, [pc, #304]	; (80028a8 <main+0xf50>)
 8002776:	4618      	mov	r0, r3
 8002778:	f017 ff1e 	bl	801a5b8 <siprintf>
							LCD_Font(320, 187, weatherPrintP, &DejaVu_Sans_48, 1, GREEN);
 800277c:	f107 0214 	add.w	r2, r7, #20
 8002780:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8002784:	9301      	str	r3, [sp, #4]
 8002786:	2301      	movs	r3, #1
 8002788:	9300      	str	r3, [sp, #0]
 800278a:	4b3e      	ldr	r3, [pc, #248]	; (8002884 <main+0xf2c>)
 800278c:	21bb      	movs	r1, #187	; 0xbb
 800278e:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8002792:	f002 fef9 	bl	8005588 <LCD_Font>
						}
					}

					if (AT24XX_Read(0) != rtcHrs) {
 8002796:	2000      	movs	r0, #0
 8002798:	f7fd fd7a 	bl	8000290 <AT24XX_Read>
 800279c:	4603      	mov	r3, r0
 800279e:	461a      	mov	r2, r3
 80027a0:	4b42      	ldr	r3, [pc, #264]	; (80028ac <main+0xf54>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	f000 81dd 	beq.w	8002b64 <main+0x120c>

						AT24XX_Update(0, rtcHrs);
 80027aa:	4b40      	ldr	r3, [pc, #256]	; (80028ac <main+0xf54>)
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	4619      	mov	r1, r3
 80027b0:	2000      	movs	r0, #0
 80027b2:	f7fd fd97 	bl	80002e4 <AT24XX_Update>

						for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 80027b6:	2300      	movs	r3, #0
 80027b8:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 80027bc:	e027      	b.n	800280e <main+0xeb6>
 80027be:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80027c2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7fd fd5f 	bl	8000290 <AT24XX_Read>
 80027d2:	4603      	mov	r3, r0
 80027d4:	461c      	mov	r4, r3
 80027d6:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	b29b      	uxth	r3, r3
 80027de:	f203 33e9 	addw	r3, r3, #1001	; 0x3e9
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7fd fd53 	bl	8000290 <AT24XX_Read>
 80027ea:	4603      	mov	r3, r0
 80027ec:	4619      	mov	r1, r3
 80027ee:	4620      	mov	r0, r4
 80027f0:	f7ff f874 	bl	80018dc <byteS>
 80027f4:	4603      	mov	r3, r0
 80027f6:	461a      	mov	r2, r3
 80027f8:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80027fc:	b211      	sxth	r1, r2
 80027fe:	4a2c      	ldr	r2, [pc, #176]	; (80028b0 <main+0xf58>)
 8002800:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002804:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8002808:	3301      	adds	r3, #1
 800280a:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 800280e:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8002812:	2b9a      	cmp	r3, #154	; 0x9a
 8002814:	d9d3      	bls.n	80027be <main+0xe66>
						for (uint16_t i = 154; i > 0; i--) hT[i] = hT[i - 1];
 8002816:	239a      	movs	r3, #154	; 0x9a
 8002818:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
 800281c:	e00f      	b.n	800283e <main+0xee6>
 800281e:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8002822:	1e5a      	subs	r2, r3, #1
 8002824:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8002828:	4921      	ldr	r1, [pc, #132]	; (80028b0 <main+0xf58>)
 800282a:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 800282e:	4a20      	ldr	r2, [pc, #128]	; (80028b0 <main+0xf58>)
 8002830:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002834:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8002838:	3b01      	subs	r3, #1
 800283a:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
 800283e:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1eb      	bne.n	800281e <main+0xec6>
						hT[0] = (uint16_t) (temperature * 10);
 8002846:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <main+0xf1c>)
 8002848:	e9d3 0100 	ldrd	r0, r1, [r3]
 800284c:	f04f 0200 	mov.w	r2, #0
 8002850:	4b11      	ldr	r3, [pc, #68]	; (8002898 <main+0xf40>)
 8002852:	f016 fad1 	bl	8018df8 <__aeabi_dmul>
 8002856:	4602      	mov	r2, r0
 8002858:	460b      	mov	r3, r1
 800285a:	4610      	mov	r0, r2
 800285c:	4619      	mov	r1, r3
 800285e:	f016 fda3 	bl	80193a8 <__aeabi_d2uiz>
 8002862:	4603      	mov	r3, r0
 8002864:	b29b      	uxth	r3, r3
 8002866:	b21a      	sxth	r2, r3
 8002868:	4b11      	ldr	r3, [pc, #68]	; (80028b0 <main+0xf58>)
 800286a:	801a      	strh	r2, [r3, #0]

						for (uint16_t i = 0; i < 155; i++) {
 800286c:	2300      	movs	r3, #0
 800286e:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
 8002872:	e04e      	b.n	8002912 <main+0xfba>
 8002874:	20000578 	.word	0x20000578
 8002878:	c0240000 	.word	0xc0240000
 800287c:	080520f4 	.word	0x080520f4
 8002880:	00ffa500 	.word	0x00ffa500
 8002884:	08029850 	.word	0x08029850
 8002888:	20000580 	.word	0x20000580
 800288c:	20000588 	.word	0x20000588
 8002890:	20000590 	.word	0x20000590
 8002894:	080520fc 	.word	0x080520fc
 8002898:	40240000 	.word	0x40240000
 800289c:	200005ba 	.word	0x200005ba
 80028a0:	200005b8 	.word	0x200005b8
 80028a4:	08052104 	.word	0x08052104
 80028a8:	0805210c 	.word	0x0805210c
 80028ac:	2000056f 	.word	0x2000056f
 80028b0:	200005bc 	.word	0x200005bc
							AT24XX_Update(i * 2 + 1000, byteL(hT[i]));
 80028b4:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 80028b8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80028bc:	b29b      	uxth	r3, r3
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	b29c      	uxth	r4, r3
 80028c2:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 80028c6:	4a86      	ldr	r2, [pc, #536]	; (8002ae0 <main+0x1188>)
 80028c8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7fe ffe8 	bl	80018a4 <byteL>
 80028d4:	4603      	mov	r3, r0
 80028d6:	4619      	mov	r1, r3
 80028d8:	4620      	mov	r0, r4
 80028da:	f7fd fd03 	bl	80002e4 <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 1000, byteH(hT[i]));
 80028de:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	f203 33e9 	addw	r3, r3, #1001	; 0x3e9
 80028ea:	b29c      	uxth	r4, r3
 80028ec:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 80028f0:	4a7b      	ldr	r2, [pc, #492]	; (8002ae0 <main+0x1188>)
 80028f2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7fe ffe0 	bl	80018be <byteH>
 80028fe:	4603      	mov	r3, r0
 8002900:	4619      	mov	r1, r3
 8002902:	4620      	mov	r0, r4
 8002904:	f7fd fcee 	bl	80002e4 <AT24XX_Update>
						for (uint16_t i = 0; i < 155; i++) {
 8002908:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 800290c:	3301      	adds	r3, #1
 800290e:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
 8002912:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 8002916:	2b9a      	cmp	r3, #154	; 0x9a
 8002918:	d9cc      	bls.n	80028b4 <main+0xf5c>
						}

						for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 800291a:	2300      	movs	r3, #0
 800291c:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2
 8002920:	e027      	b.n	8002972 <main+0x101a>
 8002922:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	; 0xf2
 8002926:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800292a:	b29b      	uxth	r3, r3
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	b29b      	uxth	r3, r3
 8002930:	4618      	mov	r0, r3
 8002932:	f7fd fcad 	bl	8000290 <AT24XX_Read>
 8002936:	4603      	mov	r3, r0
 8002938:	461c      	mov	r4, r3
 800293a:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	; 0xf2
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	b29b      	uxth	r3, r3
 8002942:	f203 73d1 	addw	r3, r3, #2001	; 0x7d1
 8002946:	b29b      	uxth	r3, r3
 8002948:	4618      	mov	r0, r3
 800294a:	f7fd fca1 	bl	8000290 <AT24XX_Read>
 800294e:	4603      	mov	r3, r0
 8002950:	4619      	mov	r1, r3
 8002952:	4620      	mov	r0, r4
 8002954:	f7fe ffc2 	bl	80018dc <byteS>
 8002958:	4603      	mov	r3, r0
 800295a:	461a      	mov	r2, r3
 800295c:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	; 0xf2
 8002960:	b211      	sxth	r1, r2
 8002962:	4a60      	ldr	r2, [pc, #384]	; (8002ae4 <main+0x118c>)
 8002964:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002968:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	; 0xf2
 800296c:	3301      	adds	r3, #1
 800296e:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2
 8002972:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	; 0xf2
 8002976:	2b9a      	cmp	r3, #154	; 0x9a
 8002978:	d9d3      	bls.n	8002922 <main+0xfca>
						for (uint16_t i = 154; i > 0; i--) hH[i] = hH[i - 1];
 800297a:	239a      	movs	r3, #154	; 0x9a
 800297c:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
 8002980:	e00f      	b.n	80029a2 <main+0x104a>
 8002982:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 8002986:	1e5a      	subs	r2, r3, #1
 8002988:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 800298c:	4955      	ldr	r1, [pc, #340]	; (8002ae4 <main+0x118c>)
 800298e:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8002992:	4a54      	ldr	r2, [pc, #336]	; (8002ae4 <main+0x118c>)
 8002994:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002998:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 800299c:	3b01      	subs	r3, #1
 800299e:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
 80029a2:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1eb      	bne.n	8002982 <main+0x102a>
						hH[0] = (uint16_t) (humidity * 10);
 80029aa:	4b4f      	ldr	r3, [pc, #316]	; (8002ae8 <main+0x1190>)
 80029ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029b0:	f04f 0200 	mov.w	r2, #0
 80029b4:	4b4d      	ldr	r3, [pc, #308]	; (8002aec <main+0x1194>)
 80029b6:	f016 fa1f 	bl	8018df8 <__aeabi_dmul>
 80029ba:	4602      	mov	r2, r0
 80029bc:	460b      	mov	r3, r1
 80029be:	4610      	mov	r0, r2
 80029c0:	4619      	mov	r1, r3
 80029c2:	f016 fcf1 	bl	80193a8 <__aeabi_d2uiz>
 80029c6:	4603      	mov	r3, r0
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	b21a      	sxth	r2, r3
 80029cc:	4b45      	ldr	r3, [pc, #276]	; (8002ae4 <main+0x118c>)
 80029ce:	801a      	strh	r2, [r3, #0]

						for (uint16_t i = 0; i < 155; i++) {
 80029d0:	2300      	movs	r3, #0
 80029d2:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
 80029d6:	e02e      	b.n	8002a36 <main+0x10de>
							AT24XX_Update(i * 2 + 2000, byteL(hH[i]));
 80029d8:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 80029dc:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	b29c      	uxth	r4, r3
 80029e6:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 80029ea:	4a3e      	ldr	r2, [pc, #248]	; (8002ae4 <main+0x118c>)
 80029ec:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fe ff56 	bl	80018a4 <byteL>
 80029f8:	4603      	mov	r3, r0
 80029fa:	4619      	mov	r1, r3
 80029fc:	4620      	mov	r0, r4
 80029fe:	f7fd fc71 	bl	80002e4 <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 2000, byteH(hH[i]));
 8002a02:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	f203 73d1 	addw	r3, r3, #2001	; 0x7d1
 8002a0e:	b29c      	uxth	r4, r3
 8002a10:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8002a14:	4a33      	ldr	r2, [pc, #204]	; (8002ae4 <main+0x118c>)
 8002a16:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7fe ff4e 	bl	80018be <byteH>
 8002a22:	4603      	mov	r3, r0
 8002a24:	4619      	mov	r1, r3
 8002a26:	4620      	mov	r0, r4
 8002a28:	f7fd fc5c 	bl	80002e4 <AT24XX_Update>
						for (uint16_t i = 0; i < 155; i++) {
 8002a2c:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8002a30:	3301      	adds	r3, #1
 8002a32:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
 8002a36:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8002a3a:	2b9a      	cmp	r3, #154	; 0x9a
 8002a3c:	d9cc      	bls.n	80029d8 <main+0x1080>
						}

						for (uint16_t i = 0; i < 155; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8002a3e:	2300      	movs	r3, #0
 8002a40:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
 8002a44:	e027      	b.n	8002a96 <main+0x113e>
 8002a46:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 8002a4a:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7fd fc1b 	bl	8000290 <AT24XX_Read>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	461c      	mov	r4, r3
 8002a5e:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	f603 33b9 	addw	r3, r3, #3001	; 0xbb9
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7fd fc0f 	bl	8000290 <AT24XX_Read>
 8002a72:	4603      	mov	r3, r0
 8002a74:	4619      	mov	r1, r3
 8002a76:	4620      	mov	r0, r4
 8002a78:	f7fe ff30 	bl	80018dc <byteS>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	461a      	mov	r2, r3
 8002a80:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 8002a84:	b211      	sxth	r1, r2
 8002a86:	4a1a      	ldr	r2, [pc, #104]	; (8002af0 <main+0x1198>)
 8002a88:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002a8c:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 8002a90:	3301      	adds	r3, #1
 8002a92:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
 8002a96:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 8002a9a:	2b9a      	cmp	r3, #154	; 0x9a
 8002a9c:	d9d3      	bls.n	8002a46 <main+0x10ee>
						for (uint16_t i = 154; i > 0; i--) hP[i] = hP[i - 1];
 8002a9e:	239a      	movs	r3, #154	; 0x9a
 8002aa0:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
 8002aa4:	e00f      	b.n	8002ac6 <main+0x116e>
 8002aa6:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	; 0xea
 8002aaa:	1e5a      	subs	r2, r3, #1
 8002aac:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	; 0xea
 8002ab0:	490f      	ldr	r1, [pc, #60]	; (8002af0 <main+0x1198>)
 8002ab2:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8002ab6:	4a0e      	ldr	r2, [pc, #56]	; (8002af0 <main+0x1198>)
 8002ab8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002abc:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	; 0xea
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
 8002ac6:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	; 0xea
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1eb      	bne.n	8002aa6 <main+0x114e>
						hP[0] = (uint16_t)pressure;
 8002ace:	4b09      	ldr	r3, [pc, #36]	; (8002af4 <main+0x119c>)
 8002ad0:	881b      	ldrh	r3, [r3, #0]
 8002ad2:	b21a      	sxth	r2, r3
 8002ad4:	4b06      	ldr	r3, [pc, #24]	; (8002af0 <main+0x1198>)
 8002ad6:	801a      	strh	r2, [r3, #0]

						for (uint16_t i = 0; i < 155; i++) {
 8002ad8:	2300      	movs	r3, #0
 8002ada:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
 8002ade:	e03a      	b.n	8002b56 <main+0x11fe>
 8002ae0:	200005bc 	.word	0x200005bc
 8002ae4:	200006f4 	.word	0x200006f4
 8002ae8:	20000588 	.word	0x20000588
 8002aec:	40240000 	.word	0x40240000
 8002af0:	2000082c 	.word	0x2000082c
 8002af4:	200005b8 	.word	0x200005b8
							AT24XX_Update(i * 2 + 3000, byteL(hP[i]));
 8002af8:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8002afc:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	b29c      	uxth	r4, r3
 8002b06:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8002b0a:	4abc      	ldr	r2, [pc, #752]	; (8002dfc <main+0x14a4>)
 8002b0c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7fe fec6 	bl	80018a4 <byteL>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4620      	mov	r0, r4
 8002b1e:	f7fd fbe1 	bl	80002e4 <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 3000, byteH(hP[i]));
 8002b22:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	f603 33b9 	addw	r3, r3, #3001	; 0xbb9
 8002b2e:	b29c      	uxth	r4, r3
 8002b30:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8002b34:	4ab1      	ldr	r2, [pc, #708]	; (8002dfc <main+0x14a4>)
 8002b36:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7fe febe 	bl	80018be <byteH>
 8002b42:	4603      	mov	r3, r0
 8002b44:	4619      	mov	r1, r3
 8002b46:	4620      	mov	r0, r4
 8002b48:	f7fd fbcc 	bl	80002e4 <AT24XX_Update>
						for (uint16_t i = 0; i < 155; i++) {
 8002b4c:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8002b50:	3301      	adds	r3, #1
 8002b52:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
 8002b56:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8002b5a:	2b9a      	cmp	r3, #154	; 0x9a
 8002b5c:	d9cc      	bls.n	8002af8 <main+0x11a0>
						}

						viewGraphs = 0;
 8002b5e:	4ba8      	ldr	r3, [pc, #672]	; (8002e00 <main+0x14a8>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	701a      	strb	r2, [r3, #0]
					}

					LCD_Rect(2, 189, 157, 129, 1, BLUE);
 8002b64:	23ff      	movs	r3, #255	; 0xff
 8002b66:	9301      	str	r3, [sp, #4]
 8002b68:	2301      	movs	r3, #1
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	2381      	movs	r3, #129	; 0x81
 8002b6e:	229d      	movs	r2, #157	; 0x9d
 8002b70:	21bd      	movs	r1, #189	; 0xbd
 8002b72:	2002      	movs	r0, #2
 8002b74:	f001 fd54 	bl	8004620 <LCD_Rect>
					int16_t valMap = map(((int16_t)(temperature * 10)), MIN_TEMPERATURE_X10, MAX_TEMPERATURE_X10, 0, 128);
 8002b78:	4ba2      	ldr	r3, [pc, #648]	; (8002e04 <main+0x14ac>)
 8002b7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b7e:	f04f 0200 	mov.w	r2, #0
 8002b82:	4ba1      	ldr	r3, [pc, #644]	; (8002e08 <main+0x14b0>)
 8002b84:	f016 f938 	bl	8018df8 <__aeabi_dmul>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	4610      	mov	r0, r2
 8002b8e:	4619      	mov	r1, r3
 8002b90:	f016 fbe2 	bl	8019358 <__aeabi_d2iz>
 8002b94:	4603      	mov	r3, r0
 8002b96:	b21b      	sxth	r3, r3
 8002b98:	b298      	uxth	r0, r3
 8002b9a:	2380      	movs	r3, #128	; 0x80
 8002b9c:	9300      	str	r3, [sp, #0]
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	f44f 7291 	mov.w	r2, #290	; 0x122
 8002ba4:	21e2      	movs	r1, #226	; 0xe2
 8002ba6:	f7fe fe51 	bl	800184c <map>
 8002baa:	ec53 2b10 	vmov	r2, r3, d0
 8002bae:	4610      	mov	r0, r2
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	f016 fbd1 	bl	8019358 <__aeabi_d2iz>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
					if (valMap < 0) valMap = 0;
 8002bbc:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	da02      	bge.n	8002bca <main+0x1272>
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
					if (valMap > 127) valMap = 127;
 8002bca:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002bce:	2b7f      	cmp	r3, #127	; 0x7f
 8002bd0:	dd02      	ble.n	8002bd8 <main+0x1280>
 8002bd2:	237f      	movs	r3, #127	; 0x7f
 8002bd4:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
					LCD_Line(3 + 155, 191, 3 + 155, 317, 1, BLACK);
 8002bd8:	2300      	movs	r3, #0
 8002bda:	9301      	str	r3, [sp, #4]
 8002bdc:	2301      	movs	r3, #1
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	f240 133d 	movw	r3, #317	; 0x13d
 8002be4:	229e      	movs	r2, #158	; 0x9e
 8002be6:	21bf      	movs	r1, #191	; 0xbf
 8002be8:	209e      	movs	r0, #158	; 0x9e
 8002bea:	f001 fbb1 	bl	8004350 <LCD_Line>
					if (valMap) LCD_Line(3 + 155, 191 + (127 - valMap), 3 + 155, 317,
 8002bee:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d023      	beq.n	8002c3e <main+0x12e6>
 8002bf6:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8002bfa:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002bfe:	b29c      	uxth	r4, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002c00:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002c04:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(3 + 155, 191 + (127 - valMap), 3 + 155, 317,
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	43db      	mvns	r3, r3
 8002c10:	b2d8      	uxtb	r0, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002c12:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002c16:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(3 + 155, 191 + (127 - valMap), 3 + 155, 317,
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	461a      	mov	r2, r3
 8002c22:	2100      	movs	r1, #0
 8002c24:	f001 fa73 	bl	800410e <RGB>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	9301      	str	r3, [sp, #4]
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	f240 133d 	movw	r3, #317	; 0x13d
 8002c34:	229e      	movs	r2, #158	; 0x9e
 8002c36:	4621      	mov	r1, r4
 8002c38:	209e      	movs	r0, #158	; 0x9e
 8002c3a:	f001 fb89 	bl	8004350 <LCD_Line>

					LCD_Rect(161, 189, 157, 129, 1, BLUE);
 8002c3e:	23ff      	movs	r3, #255	; 0xff
 8002c40:	9301      	str	r3, [sp, #4]
 8002c42:	2301      	movs	r3, #1
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	2381      	movs	r3, #129	; 0x81
 8002c48:	229d      	movs	r2, #157	; 0x9d
 8002c4a:	21bd      	movs	r1, #189	; 0xbd
 8002c4c:	20a1      	movs	r0, #161	; 0xa1
 8002c4e:	f001 fce7 	bl	8004620 <LCD_Rect>
					valMap = map(((int16_t)(humidity * 10)), MIN_HUMIDITY_X10, MAX_HUMIDITY_X10, 0, 128);
 8002c52:	4b6e      	ldr	r3, [pc, #440]	; (8002e0c <main+0x14b4>)
 8002c54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c58:	f04f 0200 	mov.w	r2, #0
 8002c5c:	4b6a      	ldr	r3, [pc, #424]	; (8002e08 <main+0x14b0>)
 8002c5e:	f016 f8cb 	bl	8018df8 <__aeabi_dmul>
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	4610      	mov	r0, r2
 8002c68:	4619      	mov	r1, r3
 8002c6a:	f016 fb75 	bl	8019358 <__aeabi_d2iz>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	b21b      	sxth	r3, r3
 8002c72:	b298      	uxth	r0, r3
 8002c74:	2380      	movs	r3, #128	; 0x80
 8002c76:	9300      	str	r3, [sp, #0]
 8002c78:	2300      	movs	r3, #0
 8002c7a:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8002c7e:	2150      	movs	r1, #80	; 0x50
 8002c80:	f7fe fde4 	bl	800184c <map>
 8002c84:	ec53 2b10 	vmov	r2, r3, d0
 8002c88:	4610      	mov	r0, r2
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	f016 fb64 	bl	8019358 <__aeabi_d2iz>
 8002c90:	4603      	mov	r3, r0
 8002c92:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
					if (valMap < 0) valMap = 0;
 8002c96:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	da02      	bge.n	8002ca4 <main+0x134c>
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
					if (valMap > 127) valMap = 127;
 8002ca4:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002ca8:	2b7f      	cmp	r3, #127	; 0x7f
 8002caa:	dd02      	ble.n	8002cb2 <main+0x135a>
 8002cac:	237f      	movs	r3, #127	; 0x7f
 8002cae:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
					LCD_Line(162 + 155, 191, 162 + 155, 317, 1, BLACK);
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	9301      	str	r3, [sp, #4]
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	f240 133d 	movw	r3, #317	; 0x13d
 8002cbe:	f240 123d 	movw	r2, #317	; 0x13d
 8002cc2:	21bf      	movs	r1, #191	; 0xbf
 8002cc4:	f240 103d 	movw	r0, #317	; 0x13d
 8002cc8:	f001 fb42 	bl	8004350 <LCD_Line>
					if (valMap) LCD_Line(162 + 155, 191 + (127 - valMap), 162 + 155, 317,
 8002ccc:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d025      	beq.n	8002d20 <main+0x13c8>
 8002cd4:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8002cd8:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002cdc:	b29c      	uxth	r4, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002cde:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002ce2:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(162 + 155, 191 + (127 - valMap), 162 + 155, 317,
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	43db      	mvns	r3, r3
 8002cee:	b2d8      	uxtb	r0, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002cf0:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002cf4:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(162 + 155, 191 + (127 - valMap), 162 + 155, 317,
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	461a      	mov	r2, r3
 8002d00:	2100      	movs	r1, #0
 8002d02:	f001 fa04 	bl	800410e <RGB>
 8002d06:	4603      	mov	r3, r0
 8002d08:	9301      	str	r3, [sp, #4]
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	9300      	str	r3, [sp, #0]
 8002d0e:	f240 133d 	movw	r3, #317	; 0x13d
 8002d12:	f240 123d 	movw	r2, #317	; 0x13d
 8002d16:	4621      	mov	r1, r4
 8002d18:	f240 103d 	movw	r0, #317	; 0x13d
 8002d1c:	f001 fb18 	bl	8004350 <LCD_Line>

					LCD_Rect(320, 189, 157, 129, 1, BLUE);
 8002d20:	23ff      	movs	r3, #255	; 0xff
 8002d22:	9301      	str	r3, [sp, #4]
 8002d24:	2301      	movs	r3, #1
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	2381      	movs	r3, #129	; 0x81
 8002d2a:	229d      	movs	r2, #157	; 0x9d
 8002d2c:	21bd      	movs	r1, #189	; 0xbd
 8002d2e:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8002d32:	f001 fc75 	bl	8004620 <LCD_Rect>
					valMap = map(((int16_t)(pressure)), MIN_PRESSURE, MAX_PRESSURE, 0, 128);
 8002d36:	4b36      	ldr	r3, [pc, #216]	; (8002e10 <main+0x14b8>)
 8002d38:	8818      	ldrh	r0, [r3, #0]
 8002d3a:	2380      	movs	r3, #128	; 0x80
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	2300      	movs	r3, #0
 8002d40:	f240 4229 	movw	r2, #1065	; 0x429
 8002d44:	f240 31a9 	movw	r1, #937	; 0x3a9
 8002d48:	f7fe fd80 	bl	800184c <map>
 8002d4c:	ec53 2b10 	vmov	r2, r3, d0
 8002d50:	4610      	mov	r0, r2
 8002d52:	4619      	mov	r1, r3
 8002d54:	f016 fb00 	bl	8019358 <__aeabi_d2iz>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
					if (valMap < 0) valMap = 0;
 8002d5e:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	da02      	bge.n	8002d6c <main+0x1414>
 8002d66:	2300      	movs	r3, #0
 8002d68:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
					if (valMap > 127) valMap = 127;
 8002d6c:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002d70:	2b7f      	cmp	r3, #127	; 0x7f
 8002d72:	dd02      	ble.n	8002d7a <main+0x1422>
 8002d74:	237f      	movs	r3, #127	; 0x7f
 8002d76:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
					LCD_Line(321 + 155, 191, 321 + 155, 317, 1, BLACK);
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	9301      	str	r3, [sp, #4]
 8002d7e:	2301      	movs	r3, #1
 8002d80:	9300      	str	r3, [sp, #0]
 8002d82:	f240 133d 	movw	r3, #317	; 0x13d
 8002d86:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 8002d8a:	21bf      	movs	r1, #191	; 0xbf
 8002d8c:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 8002d90:	f001 fade 	bl	8004350 <LCD_Line>
					if (valMap) LCD_Line(321 + 155, 191 + (127 - valMap), 321 + 155, 317,
 8002d94:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d025      	beq.n	8002de8 <main+0x1490>
 8002d9c:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8002da0:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002da4:	b29c      	uxth	r4, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002da6:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002daa:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(321 + 155, 191 + (127 - valMap), 321 + 155, 317,
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	43db      	mvns	r3, r3
 8002db6:	b2d8      	uxtb	r0, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002db8:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002dbc:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(321 + 155, 191 + (127 - valMap), 321 + 155, 317,
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	2100      	movs	r1, #0
 8002dca:	f001 f9a0 	bl	800410e <RGB>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	9301      	str	r3, [sp, #4]
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	9300      	str	r3, [sp, #0]
 8002dd6:	f240 133d 	movw	r3, #317	; 0x13d
 8002dda:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 8002dde:	4621      	mov	r1, r4
 8002de0:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 8002de4:	f001 fab4 	bl	8004350 <LCD_Line>

					if (!viewGraphs) {
 8002de8:	4b05      	ldr	r3, [pc, #20]	; (8002e00 <main+0x14a8>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f040 8192 	bne.w	8003116 <main+0x17be>

						for (uint16_t i = 0; i < 155 ; i++) {
 8002df2:	2300      	movs	r3, #0
 8002df4:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
 8002df8:	e07b      	b.n	8002ef2 <main+0x159a>
 8002dfa:	bf00      	nop
 8002dfc:	2000082c 	.word	0x2000082c
 8002e00:	2000056c 	.word	0x2000056c
 8002e04:	20000578 	.word	0x20000578
 8002e08:	40240000 	.word	0x40240000
 8002e0c:	20000588 	.word	0x20000588
 8002e10:	200005b8 	.word	0x200005b8
							valMap = map(((int16_t)hT[i]), MIN_TEMPERATURE_X10, MAX_TEMPERATURE_X10, 0, 128);
 8002e14:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8002e18:	4ab3      	ldr	r2, [pc, #716]	; (80030e8 <main+0x1790>)
 8002e1a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002e1e:	b298      	uxth	r0, r3
 8002e20:	2380      	movs	r3, #128	; 0x80
 8002e22:	9300      	str	r3, [sp, #0]
 8002e24:	2300      	movs	r3, #0
 8002e26:	f44f 7291 	mov.w	r2, #290	; 0x122
 8002e2a:	21e2      	movs	r1, #226	; 0xe2
 8002e2c:	f7fe fd0e 	bl	800184c <map>
 8002e30:	ec53 2b10 	vmov	r2, r3, d0
 8002e34:	4610      	mov	r0, r2
 8002e36:	4619      	mov	r1, r3
 8002e38:	f016 fa8e 	bl	8019358 <__aeabi_d2iz>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
							if (valMap < 0) valMap = 0;
 8002e42:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	da02      	bge.n	8002e50 <main+0x14f8>
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
							if (valMap > 127) valMap = 127;
 8002e50:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002e54:	2b7f      	cmp	r3, #127	; 0x7f
 8002e56:	dd02      	ble.n	8002e5e <main+0x1506>
 8002e58:	237f      	movs	r3, #127	; 0x7f
 8002e5a:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
							LCD_Line(3 + (154-i), 191, 3 + (154-i), 317, 1, BLACK);
 8002e5e:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8002e62:	f1c3 039d 	rsb	r3, r3, #157	; 0x9d
 8002e66:	b298      	uxth	r0, r3
 8002e68:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8002e6c:	f1c3 039d 	rsb	r3, r3, #157	; 0x9d
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	2300      	movs	r3, #0
 8002e74:	9301      	str	r3, [sp, #4]
 8002e76:	2301      	movs	r3, #1
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	f240 133d 	movw	r3, #317	; 0x13d
 8002e7e:	21bf      	movs	r1, #191	; 0xbf
 8002e80:	f001 fa66 	bl	8004350 <LCD_Line>
							if (valMap) LCD_Line(3 + (154-i), 191 + (127 - valMap), 3 + (154-i), 317,
 8002e84:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d02d      	beq.n	8002ee8 <main+0x1590>
 8002e8c:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8002e90:	f1c3 039d 	rsb	r3, r3, #157	; 0x9d
 8002e94:	b29c      	uxth	r4, r3
 8002e96:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8002e9a:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002e9e:	b29d      	uxth	r5, r3
 8002ea0:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8002ea4:	f1c3 039d 	rsb	r3, r3, #157	; 0x9d
 8002ea8:	b29e      	uxth	r6, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002eaa:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002eae:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(3 + (154-i), 191 + (127 - valMap), 3 + (154-i), 317,
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	b2d8      	uxtb	r0, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002ebc:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002ec0:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(3 + (154-i), 191 + (127 - valMap), 3 + (154-i), 317,
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	461a      	mov	r2, r3
 8002ecc:	2100      	movs	r1, #0
 8002ece:	f001 f91e 	bl	800410e <RGB>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	9301      	str	r3, [sp, #4]
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	9300      	str	r3, [sp, #0]
 8002eda:	f240 133d 	movw	r3, #317	; 0x13d
 8002ede:	4632      	mov	r2, r6
 8002ee0:	4629      	mov	r1, r5
 8002ee2:	4620      	mov	r0, r4
 8002ee4:	f001 fa34 	bl	8004350 <LCD_Line>
						for (uint16_t i = 0; i < 155 ; i++) {
 8002ee8:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8002eec:	3301      	adds	r3, #1
 8002eee:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
 8002ef2:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8002ef6:	2b9a      	cmp	r3, #154	; 0x9a
 8002ef8:	d98c      	bls.n	8002e14 <main+0x14bc>
						}

						for (uint16_t i = 0; i < 155 ; i++) {
 8002efa:	2300      	movs	r3, #0
 8002efc:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
 8002f00:	e06e      	b.n	8002fe0 <main+0x1688>
							valMap = map(((int16_t)hH[i]), MIN_HUMIDITY_X10, MAX_HUMIDITY_X10, 0, 128);
 8002f02:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 8002f06:	4a79      	ldr	r2, [pc, #484]	; (80030ec <main+0x1794>)
 8002f08:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002f0c:	b298      	uxth	r0, r3
 8002f0e:	2380      	movs	r3, #128	; 0x80
 8002f10:	9300      	str	r3, [sp, #0]
 8002f12:	2300      	movs	r3, #0
 8002f14:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8002f18:	2150      	movs	r1, #80	; 0x50
 8002f1a:	f7fe fc97 	bl	800184c <map>
 8002f1e:	ec53 2b10 	vmov	r2, r3, d0
 8002f22:	4610      	mov	r0, r2
 8002f24:	4619      	mov	r1, r3
 8002f26:	f016 fa17 	bl	8019358 <__aeabi_d2iz>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
							if (valMap < 0) valMap = 0;
 8002f30:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	da02      	bge.n	8002f3e <main+0x15e6>
 8002f38:	2300      	movs	r3, #0
 8002f3a:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
							if (valMap > 127) valMap = 127;
 8002f3e:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002f42:	2b7f      	cmp	r3, #127	; 0x7f
 8002f44:	dd02      	ble.n	8002f4c <main+0x15f4>
 8002f46:	237f      	movs	r3, #127	; 0x7f
 8002f48:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
							LCD_Line(162 + (154-i), 191, 162 + (154-i), 317, 1, BLACK);
 8002f4c:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 8002f50:	f5c3 739e 	rsb	r3, r3, #316	; 0x13c
 8002f54:	b298      	uxth	r0, r3
 8002f56:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 8002f5a:	f5c3 739e 	rsb	r3, r3, #316	; 0x13c
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	2300      	movs	r3, #0
 8002f62:	9301      	str	r3, [sp, #4]
 8002f64:	2301      	movs	r3, #1
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	f240 133d 	movw	r3, #317	; 0x13d
 8002f6c:	21bf      	movs	r1, #191	; 0xbf
 8002f6e:	f001 f9ef 	bl	8004350 <LCD_Line>
							if (valMap) LCD_Line(162 + (154-i), 191 + (127 - valMap), 162 + (154-i), 317,
 8002f72:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d02d      	beq.n	8002fd6 <main+0x167e>
 8002f7a:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 8002f7e:	f5c3 739e 	rsb	r3, r3, #316	; 0x13c
 8002f82:	b29c      	uxth	r4, r3
 8002f84:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8002f88:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002f8c:	b29d      	uxth	r5, r3
 8002f8e:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 8002f92:	f5c3 739e 	rsb	r3, r3, #316	; 0x13c
 8002f96:	b29e      	uxth	r6, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002f98:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002f9c:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(162 + (154-i), 191 + (127 - valMap), 162 + (154-i), 317,
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	43db      	mvns	r3, r3
 8002fa8:	b2d8      	uxtb	r0, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002faa:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002fae:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(162 + (154-i), 191 + (127 - valMap), 162 + (154-i), 317,
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	461a      	mov	r2, r3
 8002fba:	2100      	movs	r1, #0
 8002fbc:	f001 f8a7 	bl	800410e <RGB>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	9301      	str	r3, [sp, #4]
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	9300      	str	r3, [sp, #0]
 8002fc8:	f240 133d 	movw	r3, #317	; 0x13d
 8002fcc:	4632      	mov	r2, r6
 8002fce:	4629      	mov	r1, r5
 8002fd0:	4620      	mov	r0, r4
 8002fd2:	f001 f9bd 	bl	8004350 <LCD_Line>
						for (uint16_t i = 0; i < 155 ; i++) {
 8002fd6:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 8002fda:	3301      	adds	r3, #1
 8002fdc:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
 8002fe0:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 8002fe4:	2b9a      	cmp	r3, #154	; 0x9a
 8002fe6:	d98c      	bls.n	8002f02 <main+0x15aa>
						}

						for (uint16_t i = 0; i < 155 ; i++) {
 8002fe8:	2300      	movs	r3, #0
 8002fea:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
 8002fee:	e073      	b.n	80030d8 <main+0x1780>
							valMap = map(((int16_t)hP[i]), MIN_PRESSURE, MAX_PRESSURE, 0, 128);
 8002ff0:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 8002ff4:	4a3e      	ldr	r2, [pc, #248]	; (80030f0 <main+0x1798>)
 8002ff6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002ffa:	b298      	uxth	r0, r3
 8002ffc:	2380      	movs	r3, #128	; 0x80
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	2300      	movs	r3, #0
 8003002:	f240 4229 	movw	r2, #1065	; 0x429
 8003006:	f240 31a9 	movw	r1, #937	; 0x3a9
 800300a:	f7fe fc1f 	bl	800184c <map>
 800300e:	ec53 2b10 	vmov	r2, r3, d0
 8003012:	4610      	mov	r0, r2
 8003014:	4619      	mov	r1, r3
 8003016:	f016 f99f 	bl	8019358 <__aeabi_d2iz>
 800301a:	4603      	mov	r3, r0
 800301c:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
							if (valMap < 0) valMap = 0;
 8003020:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8003024:	2b00      	cmp	r3, #0
 8003026:	da02      	bge.n	800302e <main+0x16d6>
 8003028:	2300      	movs	r3, #0
 800302a:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
							if (valMap > 127) valMap = 127;
 800302e:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8003032:	2b7f      	cmp	r3, #127	; 0x7f
 8003034:	dd02      	ble.n	800303c <main+0x16e4>
 8003036:	237f      	movs	r3, #127	; 0x7f
 8003038:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
							LCD_Line(321 + (154-i), 191, 321 + (154-i), 317, 1, BLACK);
 800303c:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 8003040:	f5c3 73ed 	rsb	r3, r3, #474	; 0x1da
 8003044:	3301      	adds	r3, #1
 8003046:	b298      	uxth	r0, r3
 8003048:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 800304c:	f5c3 73ed 	rsb	r3, r3, #474	; 0x1da
 8003050:	3301      	adds	r3, #1
 8003052:	b29a      	uxth	r2, r3
 8003054:	2300      	movs	r3, #0
 8003056:	9301      	str	r3, [sp, #4]
 8003058:	2301      	movs	r3, #1
 800305a:	9300      	str	r3, [sp, #0]
 800305c:	f240 133d 	movw	r3, #317	; 0x13d
 8003060:	21bf      	movs	r1, #191	; 0xbf
 8003062:	f001 f975 	bl	8004350 <LCD_Line>
							if (valMap) LCD_Line(321 + (154-i), 191 + (127 - valMap), 321 + (154-i), 317,
 8003066:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 800306a:	2b00      	cmp	r3, #0
 800306c:	d02f      	beq.n	80030ce <main+0x1776>
 800306e:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 8003072:	f5c3 73ed 	rsb	r3, r3, #474	; 0x1da
 8003076:	3301      	adds	r3, #1
 8003078:	b29c      	uxth	r4, r3
 800307a:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 800307e:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8003082:	b29d      	uxth	r5, r3
 8003084:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 8003088:	f5c3 73ed 	rsb	r3, r3, #474	; 0x1da
 800308c:	3301      	adds	r3, #1
 800308e:	b29e      	uxth	r6, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8003090:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8003094:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(321 + (154-i), 191 + (127 - valMap), 321 + (154-i), 317,
 8003098:	b2db      	uxtb	r3, r3
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	b2db      	uxtb	r3, r3
 800309e:	43db      	mvns	r3, r3
 80030a0:	b2d8      	uxtb	r0, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 80030a2:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 80030a6:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(321 + (154-i), 191 + (127 - valMap), 321 + (154-i), 317,
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	461a      	mov	r2, r3
 80030b2:	2100      	movs	r1, #0
 80030b4:	f001 f82b 	bl	800410e <RGB>
 80030b8:	4603      	mov	r3, r0
 80030ba:	9301      	str	r3, [sp, #4]
 80030bc:	2301      	movs	r3, #1
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	f240 133d 	movw	r3, #317	; 0x13d
 80030c4:	4632      	mov	r2, r6
 80030c6:	4629      	mov	r1, r5
 80030c8:	4620      	mov	r0, r4
 80030ca:	f001 f941 	bl	8004350 <LCD_Line>
						for (uint16_t i = 0; i < 155 ; i++) {
 80030ce:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 80030d2:	3301      	adds	r3, #1
 80030d4:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
 80030d8:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 80030dc:	2b9a      	cmp	r3, #154	; 0x9a
 80030de:	d987      	bls.n	8002ff0 <main+0x1698>
						}
						for (uint32_t i = 0; i <= 65536; i++) TIM1->CCR1 = i;
 80030e0:	2300      	movs	r3, #0
 80030e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80030e6:	e00e      	b.n	8003106 <main+0x17ae>
 80030e8:	200005bc 	.word	0x200005bc
 80030ec:	200006f4 	.word	0x200006f4
 80030f0:	2000082c 	.word	0x2000082c
 80030f4:	4a8e      	ldr	r2, [pc, #568]	; (8003330 <main+0x19d8>)
 80030f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030fa:	6353      	str	r3, [r2, #52]	; 0x34
 80030fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003100:	3301      	adds	r3, #1
 8003102:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003106:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800310a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800310e:	d9f1      	bls.n	80030f4 <main+0x179c>
						viewGraphs = 1;
 8003110:	4b88      	ldr	r3, [pc, #544]	; (8003334 <main+0x19dc>)
 8003112:	2201      	movs	r2, #1
 8003114:	701a      	strb	r2, [r3, #0]
					}
				}
			}

			if (rx_index != 0) {
 8003116:	4b88      	ldr	r3, [pc, #544]	; (8003338 <main+0x19e0>)
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	2b00      	cmp	r3, #0
 800311c:	f000 8393 	beq.w	8003846 <main+0x1eee>
				if (memcmp(rx_buffer, "TS", 2) == 0) {
 8003120:	2202      	movs	r2, #2
 8003122:	4986      	ldr	r1, [pc, #536]	; (800333c <main+0x19e4>)
 8003124:	4886      	ldr	r0, [pc, #536]	; (8003340 <main+0x19e8>)
 8003126:	f01b f843 	bl	801e1b0 <memcmp>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	f040 808a 	bne.w	8003246 <main+0x18ee>

					char val[2];

					val[0] = rx_buffer[2];
 8003132:	4b83      	ldr	r3, [pc, #524]	; (8003340 <main+0x19e8>)
 8003134:	789b      	ldrb	r3, [r3, #2]
 8003136:	f887 3020 	strb.w	r3, [r7, #32]
					val[1] = rx_buffer[3];
 800313a:	4b81      	ldr	r3, [pc, #516]	; (8003340 <main+0x19e8>)
 800313c:	78db      	ldrb	r3, [r3, #3]
 800313e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					DS3231_setHrs(atoi(val));
 8003142:	f107 0320 	add.w	r3, r7, #32
 8003146:	4618      	mov	r0, r3
 8003148:	f016 fb7f 	bl	801984a <atoi>
 800314c:	4603      	mov	r3, r0
 800314e:	b2db      	uxtb	r3, r3
 8003150:	4618      	mov	r0, r3
 8003152:	f7fd ff99 	bl	8001088 <DS3231_setHrs>

					val[0] = rx_buffer[4];
 8003156:	4b7a      	ldr	r3, [pc, #488]	; (8003340 <main+0x19e8>)
 8003158:	791b      	ldrb	r3, [r3, #4]
 800315a:	f887 3020 	strb.w	r3, [r7, #32]
					val[1] = rx_buffer[5];
 800315e:	4b78      	ldr	r3, [pc, #480]	; (8003340 <main+0x19e8>)
 8003160:	795b      	ldrb	r3, [r3, #5]
 8003162:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					DS3231_setMin(atoi(val));
 8003166:	f107 0320 	add.w	r3, r7, #32
 800316a:	4618      	mov	r0, r3
 800316c:	f016 fb6d 	bl	801984a <atoi>
 8003170:	4603      	mov	r3, r0
 8003172:	b2db      	uxtb	r3, r3
 8003174:	4618      	mov	r0, r3
 8003176:	f7fd ff67 	bl	8001048 <DS3231_setMin>

					val[0] = 0;
 800317a:	2300      	movs	r3, #0
 800317c:	f887 3020 	strb.w	r3, [r7, #32]
					val[1] = 0;
 8003180:	2300      	movs	r3, #0
 8003182:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					DS3231_setSec(atoi(val));
 8003186:	f107 0320 	add.w	r3, r7, #32
 800318a:	4618      	mov	r0, r3
 800318c:	f016 fb5d 	bl	801984a <atoi>
 8003190:	4603      	mov	r3, r0
 8003192:	b2db      	uxtb	r3, r3
 8003194:	4618      	mov	r0, r3
 8003196:	f7fd ff37 	bl	8001008 <DS3231_setSec>

					val[0] = rx_buffer[6];
 800319a:	4b69      	ldr	r3, [pc, #420]	; (8003340 <main+0x19e8>)
 800319c:	799b      	ldrb	r3, [r3, #6]
 800319e:	f887 3020 	strb.w	r3, [r7, #32]
					val[1] = rx_buffer[7];
 80031a2:	4b67      	ldr	r3, [pc, #412]	; (8003340 <main+0x19e8>)
 80031a4:	79db      	ldrb	r3, [r3, #7]
 80031a6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					DS3231_setDate(atoi(val));
 80031aa:	f107 0320 	add.w	r3, r7, #32
 80031ae:	4618      	mov	r0, r3
 80031b0:	f016 fb4b 	bl	801984a <atoi>
 80031b4:	4603      	mov	r3, r0
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7fd ffa5 	bl	8001108 <DS3231_setDate>

					val[0] = rx_buffer[8];
 80031be:	4b60      	ldr	r3, [pc, #384]	; (8003340 <main+0x19e8>)
 80031c0:	7a1b      	ldrb	r3, [r3, #8]
 80031c2:	f887 3020 	strb.w	r3, [r7, #32]
					val[1] = rx_buffer[9];
 80031c6:	4b5e      	ldr	r3, [pc, #376]	; (8003340 <main+0x19e8>)
 80031c8:	7a5b      	ldrb	r3, [r3, #9]
 80031ca:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					DS3231_setMonth(atoi(val));
 80031ce:	f107 0320 	add.w	r3, r7, #32
 80031d2:	4618      	mov	r0, r3
 80031d4:	f016 fb39 	bl	801984a <atoi>
 80031d8:	4603      	mov	r3, r0
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	4618      	mov	r0, r3
 80031de:	f7fd ffb3 	bl	8001148 <DS3231_setMonth>

					val[0] = rx_buffer[10];
 80031e2:	4b57      	ldr	r3, [pc, #348]	; (8003340 <main+0x19e8>)
 80031e4:	7a9b      	ldrb	r3, [r3, #10]
 80031e6:	f887 3020 	strb.w	r3, [r7, #32]
					val[1] = rx_buffer[11];
 80031ea:	4b55      	ldr	r3, [pc, #340]	; (8003340 <main+0x19e8>)
 80031ec:	7adb      	ldrb	r3, [r3, #11]
 80031ee:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					DS3231_setYear(atoi(val));
 80031f2:	f107 0320 	add.w	r3, r7, #32
 80031f6:	4618      	mov	r0, r3
 80031f8:	f016 fb27 	bl	801984a <atoi>
 80031fc:	4603      	mov	r3, r0
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	4618      	mov	r0, r3
 8003202:	f7fd ffc1 	bl	8001188 <DS3231_setYear>

					val[1] = rx_buffer[12];
 8003206:	4b4e      	ldr	r3, [pc, #312]	; (8003340 <main+0x19e8>)
 8003208:	7b1b      	ldrb	r3, [r3, #12]
 800320a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					DS3231_setDay(atoi(val));
 800320e:	f107 0320 	add.w	r3, r7, #32
 8003212:	4618      	mov	r0, r3
 8003214:	f016 fb19 	bl	801984a <atoi>
 8003218:	4603      	mov	r3, r0
 800321a:	b2db      	uxtb	r3, r3
 800321c:	4618      	mov	r0, r3
 800321e:	f7fd ff53 	bl	80010c8 <DS3231_setDay>

					for (uint32_t i = 0; i <= 65536; i++) TIM1->CCR1 = i;
 8003222:	2300      	movs	r3, #0
 8003224:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003228:	e008      	b.n	800323c <main+0x18e4>
 800322a:	4a41      	ldr	r2, [pc, #260]	; (8003330 <main+0x19d8>)
 800322c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003230:	6353      	str	r3, [r2, #52]	; 0x34
 8003232:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003236:	3301      	adds	r3, #1
 8003238:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800323c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003244:	d9f1      	bls.n	800322a <main+0x18d2>
				}

				if (memcmp(rx_buffer, "CE", 2) == 0) {
 8003246:	2202      	movs	r2, #2
 8003248:	493e      	ldr	r1, [pc, #248]	; (8003344 <main+0x19ec>)
 800324a:	483d      	ldr	r0, [pc, #244]	; (8003340 <main+0x19e8>)
 800324c:	f01a ffb0 	bl	801e1b0 <memcmp>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d122      	bne.n	800329c <main+0x1944>
					for (uint16_t i = 0; i < 4096; i++) AT24XX_Update(i, 0);
 8003256:	2300      	movs	r3, #0
 8003258:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
 800325c:	e00a      	b.n	8003274 <main+0x191c>
 800325e:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8003262:	2100      	movs	r1, #0
 8003264:	4618      	mov	r0, r3
 8003266:	f7fd f83d 	bl	80002e4 <AT24XX_Update>
 800326a:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 800326e:	3301      	adds	r3, #1
 8003270:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
 8003274:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8003278:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800327c:	d3ef      	bcc.n	800325e <main+0x1906>
					uint8_t uartTransmit[] = "EEPROM IS CLEANED\r\n";
 800327e:	4b32      	ldr	r3, [pc, #200]	; (8003348 <main+0x19f0>)
 8003280:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8003284:	461d      	mov	r5, r3
 8003286:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003288:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800328a:	682b      	ldr	r3, [r5, #0]
 800328c:	6023      	str	r3, [r4, #0]
					HAL_UART_Transmit(&huart1, uartTransmit, sizeof(uartTransmit), 100);
 800328e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8003292:	2364      	movs	r3, #100	; 0x64
 8003294:	2214      	movs	r2, #20
 8003296:	482d      	ldr	r0, [pc, #180]	; (800334c <main+0x19f4>)
 8003298:	f012 facd 	bl	8015836 <HAL_UART_Transmit>
				}

				if (memcmp(rx_buffer, "RS", 2) == 0) {
 800329c:	2202      	movs	r2, #2
 800329e:	492c      	ldr	r1, [pc, #176]	; (8003350 <main+0x19f8>)
 80032a0:	4827      	ldr	r0, [pc, #156]	; (8003340 <main+0x19e8>)
 80032a2:	f01a ff85 	bl	801e1b0 <memcmp>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f040 82b7 	bne.w	800381c <main+0x1ec4>

					char valT[4] = { 0 };
 80032ae:	2300      	movs	r3, #0
 80032b0:	64bb      	str	r3, [r7, #72]	; 0x48

					for (uint8_t i = 0; i < 4; i++) valT[i] = rx_buffer[2 + i];
 80032b2:	2300      	movs	r3, #0
 80032b4:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
 80032b8:	e010      	b.n	80032dc <main+0x1984>
 80032ba:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 80032be:	1c9a      	adds	r2, r3, #2
 80032c0:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 80032c4:	491e      	ldr	r1, [pc, #120]	; (8003340 <main+0x19e8>)
 80032c6:	5c8a      	ldrb	r2, [r1, r2]
 80032c8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80032cc:	443b      	add	r3, r7
 80032ce:	f803 2cb8 	strb.w	r2, [r3, #-184]
 80032d2:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 80032d6:	3301      	adds	r3, #1
 80032d8:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
 80032dc:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 80032e0:	2b03      	cmp	r3, #3
 80032e2:	d9ea      	bls.n	80032ba <main+0x1962>

					temperatureRemote = atoi(valT);
 80032e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80032e8:	4618      	mov	r0, r3
 80032ea:	f016 faae 	bl	801984a <atoi>
 80032ee:	4603      	mov	r3, r0
 80032f0:	4618      	mov	r0, r3
 80032f2:	f015 fd17 	bl	8018d24 <__aeabi_i2d>
 80032f6:	4602      	mov	r2, r0
 80032f8:	460b      	mov	r3, r1
 80032fa:	4916      	ldr	r1, [pc, #88]	; (8003354 <main+0x19fc>)
 80032fc:	e9c1 2300 	strd	r2, r3, [r1]
					temperatureRemote = temperatureRemote / 10;
 8003300:	4b14      	ldr	r3, [pc, #80]	; (8003354 <main+0x19fc>)
 8003302:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003306:	f04f 0200 	mov.w	r2, #0
 800330a:	4b13      	ldr	r3, [pc, #76]	; (8003358 <main+0x1a00>)
 800330c:	f015 fe9e 	bl	801904c <__aeabi_ddiv>
 8003310:	4602      	mov	r2, r0
 8003312:	460b      	mov	r3, r1
 8003314:	490f      	ldr	r1, [pc, #60]	; (8003354 <main+0x19fc>)
 8003316:	e9c1 2300 	strd	r2, r3, [r1]

					char valH[3] = { 0 };
 800331a:	4b10      	ldr	r3, [pc, #64]	; (800335c <main+0x1a04>)
 800331c:	881b      	ldrh	r3, [r3, #0]
 800331e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003322:	2300      	movs	r3, #0
 8003324:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

					for (uint8_t i = 0; i < 3; i++) valH[i] = rx_buffer[6 + i];
 8003328:	2300      	movs	r3, #0
 800332a:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
 800332e:	e028      	b.n	8003382 <main+0x1a2a>
 8003330:	40010000 	.word	0x40010000
 8003334:	2000056c 	.word	0x2000056c
 8003338:	20000974 	.word	0x20000974
 800333c:	08052114 	.word	0x08052114
 8003340:	20000964 	.word	0x20000964
 8003344:	08052118 	.word	0x08052118
 8003348:	08052150 	.word	0x08052150
 800334c:	200004d8 	.word	0x200004d8
 8003350:	0805211c 	.word	0x0805211c
 8003354:	20000598 	.word	0x20000598
 8003358:	40240000 	.word	0x40240000
 800335c:	08051ef4 	.word	0x08051ef4
 8003360:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8003364:	1d9a      	adds	r2, r3, #6
 8003366:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 800336a:	499d      	ldr	r1, [pc, #628]	; (80035e0 <main+0x1c88>)
 800336c:	5c8a      	ldrb	r2, [r1, r2]
 800336e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003372:	443b      	add	r3, r7
 8003374:	f803 2cbc 	strb.w	r2, [r3, #-188]
 8003378:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 800337c:	3301      	adds	r3, #1
 800337e:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
 8003382:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8003386:	2b02      	cmp	r3, #2
 8003388:	d9ea      	bls.n	8003360 <main+0x1a08>

					humidityRemote = atoi(valH);
 800338a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800338e:	4618      	mov	r0, r3
 8003390:	f016 fa5b 	bl	801984a <atoi>
 8003394:	4603      	mov	r3, r0
 8003396:	4618      	mov	r0, r3
 8003398:	f015 fcc4 	bl	8018d24 <__aeabi_i2d>
 800339c:	4602      	mov	r2, r0
 800339e:	460b      	mov	r3, r1
 80033a0:	4990      	ldr	r1, [pc, #576]	; (80035e4 <main+0x1c8c>)
 80033a2:	e9c1 2300 	strd	r2, r3, [r1]
					humidityRemote = humidityRemote / 10;
 80033a6:	4b8f      	ldr	r3, [pc, #572]	; (80035e4 <main+0x1c8c>)
 80033a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033ac:	f04f 0200 	mov.w	r2, #0
 80033b0:	4b8d      	ldr	r3, [pc, #564]	; (80035e8 <main+0x1c90>)
 80033b2:	f015 fe4b 	bl	801904c <__aeabi_ddiv>
 80033b6:	4602      	mov	r2, r0
 80033b8:	460b      	mov	r3, r1
 80033ba:	498a      	ldr	r1, [pc, #552]	; (80035e4 <main+0x1c8c>)
 80033bc:	e9c1 2300 	strd	r2, r3, [r1]

					if ((temperatureRemote != temperatureRemoteLast && temperatureRemote < 85 && temperatureRemote > -40) ||
 80033c0:	4b8a      	ldr	r3, [pc, #552]	; (80035ec <main+0x1c94>)
 80033c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033c6:	4b8a      	ldr	r3, [pc, #552]	; (80035f0 <main+0x1c98>)
 80033c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033cc:	f015 ff7c 	bl	80192c8 <__aeabi_dcmpeq>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d115      	bne.n	8003402 <main+0x1aaa>
 80033d6:	4b85      	ldr	r3, [pc, #532]	; (80035ec <main+0x1c94>)
 80033d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033dc:	f04f 0200 	mov.w	r2, #0
 80033e0:	4b84      	ldr	r3, [pc, #528]	; (80035f4 <main+0x1c9c>)
 80033e2:	f015 ff7b 	bl	80192dc <__aeabi_dcmplt>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00a      	beq.n	8003402 <main+0x1aaa>
 80033ec:	4b7f      	ldr	r3, [pc, #508]	; (80035ec <main+0x1c94>)
 80033ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033f2:	f04f 0200 	mov.w	r2, #0
 80033f6:	4b80      	ldr	r3, [pc, #512]	; (80035f8 <main+0x1ca0>)
 80033f8:	f015 ff8e 	bl	8019318 <__aeabi_dcmpgt>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d118      	bne.n	8003434 <main+0x1adc>
							(humidityRemote != humidityRemoteLast && humidityRemote > 0)) {
 8003402:	4b78      	ldr	r3, [pc, #480]	; (80035e4 <main+0x1c8c>)
 8003404:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003408:	4b7c      	ldr	r3, [pc, #496]	; (80035fc <main+0x1ca4>)
 800340a:	e9d3 2300 	ldrd	r2, r3, [r3]
					if ((temperatureRemote != temperatureRemoteLast && temperatureRemote < 85 && temperatureRemote > -40) ||
 800340e:	f015 ff5b 	bl	80192c8 <__aeabi_dcmpeq>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	f040 8201 	bne.w	800381c <main+0x1ec4>
							(humidityRemote != humidityRemoteLast && humidityRemote > 0)) {
 800341a:	4b72      	ldr	r3, [pc, #456]	; (80035e4 <main+0x1c8c>)
 800341c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003420:	f04f 0200 	mov.w	r2, #0
 8003424:	f04f 0300 	mov.w	r3, #0
 8003428:	f015 ff76 	bl	8019318 <__aeabi_dcmpgt>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	f000 81f4 	beq.w	800381c <main+0x1ec4>

						remoteSensorLastUpdate = 0;
 8003434:	4b72      	ldr	r3, [pc, #456]	; (8003600 <main+0x1ca8>)
 8003436:	2200      	movs	r2, #0
 8003438:	801a      	strh	r2, [r3, #0]

						sprintf(clockPrint, "%02d", rtcSecLast);
 800343a:	4b72      	ldr	r3, [pc, #456]	; (8003604 <main+0x1cac>)
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	461a      	mov	r2, r3
 8003440:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003444:	4970      	ldr	r1, [pc, #448]	; (8003608 <main+0x1cb0>)
 8003446:	4618      	mov	r0, r3
 8003448:	f017 f8b6 	bl	801a5b8 <siprintf>
						LCD_Font(375, 40, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 800344c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003450:	2300      	movs	r3, #0
 8003452:	9301      	str	r3, [sp, #4]
 8003454:	2301      	movs	r3, #1
 8003456:	9300      	str	r3, [sp, #0]
 8003458:	4b6c      	ldr	r3, [pc, #432]	; (800360c <main+0x1cb4>)
 800345a:	2128      	movs	r1, #40	; 0x28
 800345c:	f240 1077 	movw	r0, #375	; 0x177
 8003460:	f002 f892 	bl	8005588 <LCD_Font>

						char weatherPrintRemoteT[5];
						if (temperatureRemoteLast <= -10) {
 8003464:	4b62      	ldr	r3, [pc, #392]	; (80035f0 <main+0x1c98>)
 8003466:	e9d3 0100 	ldrd	r0, r1, [r3]
 800346a:	f04f 0200 	mov.w	r2, #0
 800346e:	4b68      	ldr	r3, [pc, #416]	; (8003610 <main+0x1cb8>)
 8003470:	f015 ff3e 	bl	80192f0 <__aeabi_dcmple>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d014      	beq.n	80034a4 <main+0x1b4c>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 800347a:	4b5d      	ldr	r3, [pc, #372]	; (80035f0 <main+0x1c98>)
 800347c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003480:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8003484:	4963      	ldr	r1, [pc, #396]	; (8003614 <main+0x1cbc>)
 8003486:	f017 f897 	bl	801a5b8 <siprintf>
							LCD_Font(353, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 800348a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800348e:	2300      	movs	r3, #0
 8003490:	9301      	str	r3, [sp, #4]
 8003492:	2301      	movs	r3, #1
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	4b5d      	ldr	r3, [pc, #372]	; (800360c <main+0x1cb4>)
 8003498:	215a      	movs	r1, #90	; 0x5a
 800349a:	f240 1061 	movw	r0, #353	; 0x161
 800349e:	f002 f873 	bl	8005588 <LCD_Font>
 80034a2:	e076      	b.n	8003592 <main+0x1c3a>
						}
						else if (temperatureRemoteLast < 0 && temperatureRemoteLast > -10) {
 80034a4:	4b52      	ldr	r3, [pc, #328]	; (80035f0 <main+0x1c98>)
 80034a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034aa:	f04f 0200 	mov.w	r2, #0
 80034ae:	f04f 0300 	mov.w	r3, #0
 80034b2:	f015 ff13 	bl	80192dc <__aeabi_dcmplt>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d01f      	beq.n	80034fc <main+0x1ba4>
 80034bc:	4b4c      	ldr	r3, [pc, #304]	; (80035f0 <main+0x1c98>)
 80034be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034c2:	f04f 0200 	mov.w	r2, #0
 80034c6:	4b52      	ldr	r3, [pc, #328]	; (8003610 <main+0x1cb8>)
 80034c8:	f015 ff26 	bl	8019318 <__aeabi_dcmpgt>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d014      	beq.n	80034fc <main+0x1ba4>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 80034d2:	4b47      	ldr	r3, [pc, #284]	; (80035f0 <main+0x1c98>)
 80034d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d8:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80034dc:	494d      	ldr	r1, [pc, #308]	; (8003614 <main+0x1cbc>)
 80034de:	f017 f86b 	bl	801a5b8 <siprintf>
							LCD_Font(385, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 80034e2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80034e6:	2300      	movs	r3, #0
 80034e8:	9301      	str	r3, [sp, #4]
 80034ea:	2301      	movs	r3, #1
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	4b47      	ldr	r3, [pc, #284]	; (800360c <main+0x1cb4>)
 80034f0:	215a      	movs	r1, #90	; 0x5a
 80034f2:	f240 1081 	movw	r0, #385	; 0x181
 80034f6:	f002 f847 	bl	8005588 <LCD_Font>
 80034fa:	e04a      	b.n	8003592 <main+0x1c3a>
						}
						else if (temperatureRemoteLast > 0 && temperatureRemoteLast < 10) {
 80034fc:	4b3c      	ldr	r3, [pc, #240]	; (80035f0 <main+0x1c98>)
 80034fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003502:	f04f 0200 	mov.w	r2, #0
 8003506:	f04f 0300 	mov.w	r3, #0
 800350a:	f015 ff05 	bl	8019318 <__aeabi_dcmpgt>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d01f      	beq.n	8003554 <main+0x1bfc>
 8003514:	4b36      	ldr	r3, [pc, #216]	; (80035f0 <main+0x1c98>)
 8003516:	e9d3 0100 	ldrd	r0, r1, [r3]
 800351a:	f04f 0200 	mov.w	r2, #0
 800351e:	4b32      	ldr	r3, [pc, #200]	; (80035e8 <main+0x1c90>)
 8003520:	f015 fedc 	bl	80192dc <__aeabi_dcmplt>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d014      	beq.n	8003554 <main+0x1bfc>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 800352a:	4b31      	ldr	r3, [pc, #196]	; (80035f0 <main+0x1c98>)
 800352c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003530:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8003534:	4938      	ldr	r1, [pc, #224]	; (8003618 <main+0x1cc0>)
 8003536:	f017 f83f 	bl	801a5b8 <siprintf>
							LCD_Font(362, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 800353a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800353e:	2300      	movs	r3, #0
 8003540:	9301      	str	r3, [sp, #4]
 8003542:	2301      	movs	r3, #1
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	4b31      	ldr	r3, [pc, #196]	; (800360c <main+0x1cb4>)
 8003548:	215a      	movs	r1, #90	; 0x5a
 800354a:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 800354e:	f002 f81b 	bl	8005588 <LCD_Font>
 8003552:	e01e      	b.n	8003592 <main+0x1c3a>
						}
						else if (temperatureRemoteLast >= 10) {
 8003554:	4b26      	ldr	r3, [pc, #152]	; (80035f0 <main+0x1c98>)
 8003556:	e9d3 0100 	ldrd	r0, r1, [r3]
 800355a:	f04f 0200 	mov.w	r2, #0
 800355e:	4b22      	ldr	r3, [pc, #136]	; (80035e8 <main+0x1c90>)
 8003560:	f015 fed0 	bl	8019304 <__aeabi_dcmpge>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d013      	beq.n	8003592 <main+0x1c3a>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 800356a:	4b21      	ldr	r3, [pc, #132]	; (80035f0 <main+0x1c98>)
 800356c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003570:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8003574:	4928      	ldr	r1, [pc, #160]	; (8003618 <main+0x1cc0>)
 8003576:	f017 f81f 	bl	801a5b8 <siprintf>
							LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 800357a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800357e:	2300      	movs	r3, #0
 8003580:	9301      	str	r3, [sp, #4]
 8003582:	2301      	movs	r3, #1
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	4b21      	ldr	r3, [pc, #132]	; (800360c <main+0x1cb4>)
 8003588:	215a      	movs	r1, #90	; 0x5a
 800358a:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 800358e:	f001 fffb 	bl	8005588 <LCD_Font>
						}
						temperatureRemoteLast = temperatureRemote;
 8003592:	4b16      	ldr	r3, [pc, #88]	; (80035ec <main+0x1c94>)
 8003594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003598:	4915      	ldr	r1, [pc, #84]	; (80035f0 <main+0x1c98>)
 800359a:	e9c1 2300 	strd	r2, r3, [r1]
						if (temperatureRemoteLast <= -10) {
 800359e:	4b14      	ldr	r3, [pc, #80]	; (80035f0 <main+0x1c98>)
 80035a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035a4:	f04f 0200 	mov.w	r2, #0
 80035a8:	4b19      	ldr	r3, [pc, #100]	; (8003610 <main+0x1cb8>)
 80035aa:	f015 fea1 	bl	80192f0 <__aeabi_dcmple>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d033      	beq.n	800361c <main+0x1cc4>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 80035b4:	4b0e      	ldr	r3, [pc, #56]	; (80035f0 <main+0x1c98>)
 80035b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ba:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80035be:	4915      	ldr	r1, [pc, #84]	; (8003614 <main+0x1cbc>)
 80035c0:	f016 fffa 	bl	801a5b8 <siprintf>
							LCD_Font(353, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 80035c4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80035c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035cc:	9301      	str	r3, [sp, #4]
 80035ce:	2301      	movs	r3, #1
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	4b0e      	ldr	r3, [pc, #56]	; (800360c <main+0x1cb4>)
 80035d4:	215a      	movs	r1, #90	; 0x5a
 80035d6:	f240 1061 	movw	r0, #353	; 0x161
 80035da:	f001 ffd5 	bl	8005588 <LCD_Font>
 80035de:	e097      	b.n	8003710 <main+0x1db8>
 80035e0:	20000964 	.word	0x20000964
 80035e4:	200005a8 	.word	0x200005a8
 80035e8:	40240000 	.word	0x40240000
 80035ec:	20000598 	.word	0x20000598
 80035f0:	200005a0 	.word	0x200005a0
 80035f4:	40554000 	.word	0x40554000
 80035f8:	c0440000 	.word	0xc0440000
 80035fc:	200005b0 	.word	0x200005b0
 8003600:	20000004 	.word	0x20000004
 8003604:	20000000 	.word	0x20000000
 8003608:	080520d4 	.word	0x080520d4
 800360c:	08029850 	.word	0x08029850
 8003610:	c0240000 	.word	0xc0240000
 8003614:	08052120 	.word	0x08052120
 8003618:	08052128 	.word	0x08052128
						}
						else if (temperatureRemoteLast < 0 && temperatureRemoteLast > -10) {
 800361c:	4bac      	ldr	r3, [pc, #688]	; (80038d0 <main+0x1f78>)
 800361e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003622:	f04f 0200 	mov.w	r2, #0
 8003626:	f04f 0300 	mov.w	r3, #0
 800362a:	f015 fe57 	bl	80192dc <__aeabi_dcmplt>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d020      	beq.n	8003676 <main+0x1d1e>
 8003634:	4ba6      	ldr	r3, [pc, #664]	; (80038d0 <main+0x1f78>)
 8003636:	e9d3 0100 	ldrd	r0, r1, [r3]
 800363a:	f04f 0200 	mov.w	r2, #0
 800363e:	4ba5      	ldr	r3, [pc, #660]	; (80038d4 <main+0x1f7c>)
 8003640:	f015 fe6a 	bl	8019318 <__aeabi_dcmpgt>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d015      	beq.n	8003676 <main+0x1d1e>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 800364a:	4ba1      	ldr	r3, [pc, #644]	; (80038d0 <main+0x1f78>)
 800364c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003650:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8003654:	49a0      	ldr	r1, [pc, #640]	; (80038d8 <main+0x1f80>)
 8003656:	f016 ffaf 	bl	801a5b8 <siprintf>
							LCD_Font(385, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 800365a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800365e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003662:	9301      	str	r3, [sp, #4]
 8003664:	2301      	movs	r3, #1
 8003666:	9300      	str	r3, [sp, #0]
 8003668:	4b9c      	ldr	r3, [pc, #624]	; (80038dc <main+0x1f84>)
 800366a:	215a      	movs	r1, #90	; 0x5a
 800366c:	f240 1081 	movw	r0, #385	; 0x181
 8003670:	f001 ff8a 	bl	8005588 <LCD_Font>
 8003674:	e04c      	b.n	8003710 <main+0x1db8>
						}
						else if (temperatureRemoteLast > 0 && temperatureRemoteLast < 10) {
 8003676:	4b96      	ldr	r3, [pc, #600]	; (80038d0 <main+0x1f78>)
 8003678:	e9d3 0100 	ldrd	r0, r1, [r3]
 800367c:	f04f 0200 	mov.w	r2, #0
 8003680:	f04f 0300 	mov.w	r3, #0
 8003684:	f015 fe48 	bl	8019318 <__aeabi_dcmpgt>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d020      	beq.n	80036d0 <main+0x1d78>
 800368e:	4b90      	ldr	r3, [pc, #576]	; (80038d0 <main+0x1f78>)
 8003690:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003694:	f04f 0200 	mov.w	r2, #0
 8003698:	4b91      	ldr	r3, [pc, #580]	; (80038e0 <main+0x1f88>)
 800369a:	f015 fe1f 	bl	80192dc <__aeabi_dcmplt>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d015      	beq.n	80036d0 <main+0x1d78>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 80036a4:	4b8a      	ldr	r3, [pc, #552]	; (80038d0 <main+0x1f78>)
 80036a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036aa:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80036ae:	498d      	ldr	r1, [pc, #564]	; (80038e4 <main+0x1f8c>)
 80036b0:	f016 ff82 	bl	801a5b8 <siprintf>
							LCD_Font(362, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 80036b4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80036b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036bc:	9301      	str	r3, [sp, #4]
 80036be:	2301      	movs	r3, #1
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	4b86      	ldr	r3, [pc, #536]	; (80038dc <main+0x1f84>)
 80036c4:	215a      	movs	r1, #90	; 0x5a
 80036c6:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 80036ca:	f001 ff5d 	bl	8005588 <LCD_Font>
 80036ce:	e01f      	b.n	8003710 <main+0x1db8>
						}
						else if (temperatureRemoteLast >= 10) {
 80036d0:	4b7f      	ldr	r3, [pc, #508]	; (80038d0 <main+0x1f78>)
 80036d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036d6:	f04f 0200 	mov.w	r2, #0
 80036da:	4b81      	ldr	r3, [pc, #516]	; (80038e0 <main+0x1f88>)
 80036dc:	f015 fe12 	bl	8019304 <__aeabi_dcmpge>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d014      	beq.n	8003710 <main+0x1db8>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 80036e6:	4b7a      	ldr	r3, [pc, #488]	; (80038d0 <main+0x1f78>)
 80036e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ec:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80036f0:	497c      	ldr	r1, [pc, #496]	; (80038e4 <main+0x1f8c>)
 80036f2:	f016 ff61 	bl	801a5b8 <siprintf>
							LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 80036f6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80036fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036fe:	9301      	str	r3, [sp, #4]
 8003700:	2301      	movs	r3, #1
 8003702:	9300      	str	r3, [sp, #0]
 8003704:	4b75      	ldr	r3, [pc, #468]	; (80038dc <main+0x1f84>)
 8003706:	215a      	movs	r1, #90	; 0x5a
 8003708:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 800370c:	f001 ff3c 	bl	8005588 <LCD_Font>
						}


						char weatherPrintRemoteH[4];

						if (humidityRemoteLast >= 10) {
 8003710:	4b75      	ldr	r3, [pc, #468]	; (80038e8 <main+0x1f90>)
 8003712:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003716:	f04f 0200 	mov.w	r2, #0
 800371a:	4b71      	ldr	r3, [pc, #452]	; (80038e0 <main+0x1f88>)
 800371c:	f015 fdf2 	bl	8019304 <__aeabi_dcmpge>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d014      	beq.n	8003750 <main+0x1df8>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 8003726:	4b70      	ldr	r3, [pc, #448]	; (80038e8 <main+0x1f90>)
 8003728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800372c:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003730:	4969      	ldr	r1, [pc, #420]	; (80038d8 <main+0x1f80>)
 8003732:	f016 ff41 	bl	801a5b8 <siprintf>
							LCD_Font(371, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 8003736:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800373a:	2300      	movs	r3, #0
 800373c:	9301      	str	r3, [sp, #4]
 800373e:	2301      	movs	r3, #1
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	4b66      	ldr	r3, [pc, #408]	; (80038dc <main+0x1f84>)
 8003744:	2128      	movs	r1, #40	; 0x28
 8003746:	f240 1073 	movw	r0, #371	; 0x173
 800374a:	f001 ff1d 	bl	8005588 <LCD_Font>
 800374e:	e01e      	b.n	800378e <main+0x1e36>
						}
						else if (humidityRemoteLast < 10) {
 8003750:	4b65      	ldr	r3, [pc, #404]	; (80038e8 <main+0x1f90>)
 8003752:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003756:	f04f 0200 	mov.w	r2, #0
 800375a:	4b61      	ldr	r3, [pc, #388]	; (80038e0 <main+0x1f88>)
 800375c:	f015 fdbe 	bl	80192dc <__aeabi_dcmplt>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d013      	beq.n	800378e <main+0x1e36>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 8003766:	4b60      	ldr	r3, [pc, #384]	; (80038e8 <main+0x1f90>)
 8003768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376c:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003770:	4959      	ldr	r1, [pc, #356]	; (80038d8 <main+0x1f80>)
 8003772:	f016 ff21 	bl	801a5b8 <siprintf>
							LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 8003776:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800377a:	2300      	movs	r3, #0
 800377c:	9301      	str	r3, [sp, #4]
 800377e:	2301      	movs	r3, #1
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	4b56      	ldr	r3, [pc, #344]	; (80038dc <main+0x1f84>)
 8003784:	2128      	movs	r1, #40	; 0x28
 8003786:	f240 1093 	movw	r0, #403	; 0x193
 800378a:	f001 fefd 	bl	8005588 <LCD_Font>
						}

						humidityRemoteLast = humidityRemote;
 800378e:	4b57      	ldr	r3, [pc, #348]	; (80038ec <main+0x1f94>)
 8003790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003794:	4954      	ldr	r1, [pc, #336]	; (80038e8 <main+0x1f90>)
 8003796:	e9c1 2300 	strd	r2, r3, [r1]

						if (humidityRemoteLast >= 10) {
 800379a:	4b53      	ldr	r3, [pc, #332]	; (80038e8 <main+0x1f90>)
 800379c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037a0:	f04f 0200 	mov.w	r2, #0
 80037a4:	4b4e      	ldr	r3, [pc, #312]	; (80038e0 <main+0x1f88>)
 80037a6:	f015 fdad 	bl	8019304 <__aeabi_dcmpge>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d015      	beq.n	80037dc <main+0x1e84>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 80037b0:	4b4d      	ldr	r3, [pc, #308]	; (80038e8 <main+0x1f90>)
 80037b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b6:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80037ba:	4947      	ldr	r1, [pc, #284]	; (80038d8 <main+0x1f80>)
 80037bc:	f016 fefc 	bl	801a5b8 <siprintf>
							LCD_Font(371, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, CYAN);
 80037c0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80037c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037c8:	9301      	str	r3, [sp, #4]
 80037ca:	2301      	movs	r3, #1
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	4b43      	ldr	r3, [pc, #268]	; (80038dc <main+0x1f84>)
 80037d0:	2128      	movs	r1, #40	; 0x28
 80037d2:	f240 1073 	movw	r0, #371	; 0x173
 80037d6:	f001 fed7 	bl	8005588 <LCD_Font>
 80037da:	e01f      	b.n	800381c <main+0x1ec4>
						}
						else if (humidityRemoteLast < 10) {
 80037dc:	4b42      	ldr	r3, [pc, #264]	; (80038e8 <main+0x1f90>)
 80037de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037e2:	f04f 0200 	mov.w	r2, #0
 80037e6:	4b3e      	ldr	r3, [pc, #248]	; (80038e0 <main+0x1f88>)
 80037e8:	f015 fd78 	bl	80192dc <__aeabi_dcmplt>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d014      	beq.n	800381c <main+0x1ec4>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 80037f2:	4b3d      	ldr	r3, [pc, #244]	; (80038e8 <main+0x1f90>)
 80037f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f8:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80037fc:	4936      	ldr	r1, [pc, #216]	; (80038d8 <main+0x1f80>)
 80037fe:	f016 fedb 	bl	801a5b8 <siprintf>
							LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, CYAN);
 8003802:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003806:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800380a:	9301      	str	r3, [sp, #4]
 800380c:	2301      	movs	r3, #1
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	4b32      	ldr	r3, [pc, #200]	; (80038dc <main+0x1f84>)
 8003812:	2128      	movs	r1, #40	; 0x28
 8003814:	f240 1093 	movw	r0, #403	; 0x193
 8003818:	f001 feb6 	bl	8005588 <LCD_Font>
						}
					}
				}
				rx_index = 0;
 800381c:	4b34      	ldr	r3, [pc, #208]	; (80038f0 <main+0x1f98>)
 800381e:	2200      	movs	r2, #0
 8003820:	701a      	strb	r2, [r3, #0]
				for (uint8_t i = 0; i < UART_RX_BUFFER_SIZE; i++) rx_buffer[i] = 0;
 8003822:	2300      	movs	r3, #0
 8003824:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
 8003828:	e009      	b.n	800383e <main+0x1ee6>
 800382a:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800382e:	4a31      	ldr	r2, [pc, #196]	; (80038f4 <main+0x1f9c>)
 8003830:	2100      	movs	r1, #0
 8003832:	54d1      	strb	r1, [r2, r3]
 8003834:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003838:	3301      	adds	r3, #1
 800383a:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
 800383e:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003842:	2b0f      	cmp	r3, #15
 8003844:	d9f1      	bls.n	800382a <main+0x1ed2>
			}

			remoteSensorLastUpdate++;
 8003846:	4b2c      	ldr	r3, [pc, #176]	; (80038f8 <main+0x1fa0>)
 8003848:	881b      	ldrh	r3, [r3, #0]
 800384a:	3301      	adds	r3, #1
 800384c:	b29a      	uxth	r2, r3
 800384e:	4b2a      	ldr	r3, [pc, #168]	; (80038f8 <main+0x1fa0>)
 8003850:	801a      	strh	r2, [r3, #0]

			if (remoteSensorLastUpdate > WAIT_REMOTE_SENSOR_SEC) {
 8003852:	4b29      	ldr	r3, [pc, #164]	; (80038f8 <main+0x1fa0>)
 8003854:	881b      	ldrh	r3, [r3, #0]
 8003856:	2b64      	cmp	r3, #100	; 0x64
 8003858:	f240 813e 	bls.w	8003ad8 <main+0x2180>

				if (temperatureRemoteLast && humidityRemoteLast) {
 800385c:	4b1c      	ldr	r3, [pc, #112]	; (80038d0 <main+0x1f78>)
 800385e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003862:	f04f 0200 	mov.w	r2, #0
 8003866:	f04f 0300 	mov.w	r3, #0
 800386a:	f015 fd2d 	bl	80192c8 <__aeabi_dcmpeq>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	f040 8107 	bne.w	8003a84 <main+0x212c>
 8003876:	4b1c      	ldr	r3, [pc, #112]	; (80038e8 <main+0x1f90>)
 8003878:	e9d3 0100 	ldrd	r0, r1, [r3]
 800387c:	f04f 0200 	mov.w	r2, #0
 8003880:	f04f 0300 	mov.w	r3, #0
 8003884:	f015 fd20 	bl	80192c8 <__aeabi_dcmpeq>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	f040 80fa 	bne.w	8003a84 <main+0x212c>

					char weatherPrintRemoteT[5];
					if (temperatureRemoteLast <= -10) {
 8003890:	4b0f      	ldr	r3, [pc, #60]	; (80038d0 <main+0x1f78>)
 8003892:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003896:	f04f 0200 	mov.w	r2, #0
 800389a:	4b0e      	ldr	r3, [pc, #56]	; (80038d4 <main+0x1f7c>)
 800389c:	f015 fd28 	bl	80192f0 <__aeabi_dcmple>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d02a      	beq.n	80038fc <main+0x1fa4>
						sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 80038a6:	4b0a      	ldr	r3, [pc, #40]	; (80038d0 <main+0x1f78>)
 80038a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ac:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80038b0:	4909      	ldr	r1, [pc, #36]	; (80038d8 <main+0x1f80>)
 80038b2:	f016 fe81 	bl	801a5b8 <siprintf>
						LCD_Font(353, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 80038b6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80038ba:	2300      	movs	r3, #0
 80038bc:	9301      	str	r3, [sp, #4]
 80038be:	2301      	movs	r3, #1
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	4b06      	ldr	r3, [pc, #24]	; (80038dc <main+0x1f84>)
 80038c4:	215a      	movs	r1, #90	; 0x5a
 80038c6:	f240 1061 	movw	r0, #353	; 0x161
 80038ca:	f001 fe5d 	bl	8005588 <LCD_Font>
 80038ce:	e08c      	b.n	80039ea <main+0x2092>
 80038d0:	200005a0 	.word	0x200005a0
 80038d4:	c0240000 	.word	0xc0240000
 80038d8:	08052120 	.word	0x08052120
 80038dc:	08029850 	.word	0x08029850
 80038e0:	40240000 	.word	0x40240000
 80038e4:	08052128 	.word	0x08052128
 80038e8:	200005b0 	.word	0x200005b0
 80038ec:	200005a8 	.word	0x200005a8
 80038f0:	20000974 	.word	0x20000974
 80038f4:	20000964 	.word	0x20000964
 80038f8:	20000004 	.word	0x20000004
					}
					else if (temperatureRemoteLast < 0 && temperatureRemoteLast > -10) {
 80038fc:	4b79      	ldr	r3, [pc, #484]	; (8003ae4 <main+0x218c>)
 80038fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003902:	f04f 0200 	mov.w	r2, #0
 8003906:	f04f 0300 	mov.w	r3, #0
 800390a:	f015 fce7 	bl	80192dc <__aeabi_dcmplt>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d01f      	beq.n	8003954 <main+0x1ffc>
 8003914:	4b73      	ldr	r3, [pc, #460]	; (8003ae4 <main+0x218c>)
 8003916:	e9d3 0100 	ldrd	r0, r1, [r3]
 800391a:	f04f 0200 	mov.w	r2, #0
 800391e:	4b72      	ldr	r3, [pc, #456]	; (8003ae8 <main+0x2190>)
 8003920:	f015 fcfa 	bl	8019318 <__aeabi_dcmpgt>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d014      	beq.n	8003954 <main+0x1ffc>
						sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 800392a:	4b6e      	ldr	r3, [pc, #440]	; (8003ae4 <main+0x218c>)
 800392c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003930:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8003934:	496d      	ldr	r1, [pc, #436]	; (8003aec <main+0x2194>)
 8003936:	f016 fe3f 	bl	801a5b8 <siprintf>
						LCD_Font(385, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 800393a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800393e:	2300      	movs	r3, #0
 8003940:	9301      	str	r3, [sp, #4]
 8003942:	2301      	movs	r3, #1
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	4b6a      	ldr	r3, [pc, #424]	; (8003af0 <main+0x2198>)
 8003948:	215a      	movs	r1, #90	; 0x5a
 800394a:	f240 1081 	movw	r0, #385	; 0x181
 800394e:	f001 fe1b 	bl	8005588 <LCD_Font>
 8003952:	e04a      	b.n	80039ea <main+0x2092>
					}
					else if (temperatureRemoteLast > 0 && temperatureRemoteLast < 10) {
 8003954:	4b63      	ldr	r3, [pc, #396]	; (8003ae4 <main+0x218c>)
 8003956:	e9d3 0100 	ldrd	r0, r1, [r3]
 800395a:	f04f 0200 	mov.w	r2, #0
 800395e:	f04f 0300 	mov.w	r3, #0
 8003962:	f015 fcd9 	bl	8019318 <__aeabi_dcmpgt>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d01f      	beq.n	80039ac <main+0x2054>
 800396c:	4b5d      	ldr	r3, [pc, #372]	; (8003ae4 <main+0x218c>)
 800396e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003972:	f04f 0200 	mov.w	r2, #0
 8003976:	4b5f      	ldr	r3, [pc, #380]	; (8003af4 <main+0x219c>)
 8003978:	f015 fcb0 	bl	80192dc <__aeabi_dcmplt>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d014      	beq.n	80039ac <main+0x2054>
						sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 8003982:	4b58      	ldr	r3, [pc, #352]	; (8003ae4 <main+0x218c>)
 8003984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003988:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800398c:	495a      	ldr	r1, [pc, #360]	; (8003af8 <main+0x21a0>)
 800398e:	f016 fe13 	bl	801a5b8 <siprintf>
						LCD_Font(362, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8003992:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003996:	2300      	movs	r3, #0
 8003998:	9301      	str	r3, [sp, #4]
 800399a:	2301      	movs	r3, #1
 800399c:	9300      	str	r3, [sp, #0]
 800399e:	4b54      	ldr	r3, [pc, #336]	; (8003af0 <main+0x2198>)
 80039a0:	215a      	movs	r1, #90	; 0x5a
 80039a2:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 80039a6:	f001 fdef 	bl	8005588 <LCD_Font>
 80039aa:	e01e      	b.n	80039ea <main+0x2092>
					}
					else if (temperatureRemoteLast >= 10) {
 80039ac:	4b4d      	ldr	r3, [pc, #308]	; (8003ae4 <main+0x218c>)
 80039ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80039b2:	f04f 0200 	mov.w	r2, #0
 80039b6:	4b4f      	ldr	r3, [pc, #316]	; (8003af4 <main+0x219c>)
 80039b8:	f015 fca4 	bl	8019304 <__aeabi_dcmpge>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d013      	beq.n	80039ea <main+0x2092>
						sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 80039c2:	4b48      	ldr	r3, [pc, #288]	; (8003ae4 <main+0x218c>)
 80039c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c8:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80039cc:	494a      	ldr	r1, [pc, #296]	; (8003af8 <main+0x21a0>)
 80039ce:	f016 fdf3 	bl	801a5b8 <siprintf>
						LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 80039d2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80039d6:	2300      	movs	r3, #0
 80039d8:	9301      	str	r3, [sp, #4]
 80039da:	2301      	movs	r3, #1
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	4b44      	ldr	r3, [pc, #272]	; (8003af0 <main+0x2198>)
 80039e0:	215a      	movs	r1, #90	; 0x5a
 80039e2:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 80039e6:	f001 fdcf 	bl	8005588 <LCD_Font>
					}

					char weatherPrintRemoteH[4];

					if (humidityRemoteLast >= 10) {
 80039ea:	4b44      	ldr	r3, [pc, #272]	; (8003afc <main+0x21a4>)
 80039ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80039f0:	f04f 0200 	mov.w	r2, #0
 80039f4:	4b3f      	ldr	r3, [pc, #252]	; (8003af4 <main+0x219c>)
 80039f6:	f015 fc85 	bl	8019304 <__aeabi_dcmpge>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d014      	beq.n	8003a2a <main+0x20d2>
						sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 8003a00:	4b3e      	ldr	r3, [pc, #248]	; (8003afc <main+0x21a4>)
 8003a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a06:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8003a0a:	4938      	ldr	r1, [pc, #224]	; (8003aec <main+0x2194>)
 8003a0c:	f016 fdd4 	bl	801a5b8 <siprintf>
						LCD_Font(371, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 8003a10:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003a14:	2300      	movs	r3, #0
 8003a16:	9301      	str	r3, [sp, #4]
 8003a18:	2301      	movs	r3, #1
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	4b34      	ldr	r3, [pc, #208]	; (8003af0 <main+0x2198>)
 8003a1e:	2128      	movs	r1, #40	; 0x28
 8003a20:	f240 1073 	movw	r0, #371	; 0x173
 8003a24:	f001 fdb0 	bl	8005588 <LCD_Font>
 8003a28:	e01e      	b.n	8003a68 <main+0x2110>
					}
					else if (humidityRemoteLast < 10) {
 8003a2a:	4b34      	ldr	r3, [pc, #208]	; (8003afc <main+0x21a4>)
 8003a2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a30:	f04f 0200 	mov.w	r2, #0
 8003a34:	4b2f      	ldr	r3, [pc, #188]	; (8003af4 <main+0x219c>)
 8003a36:	f015 fc51 	bl	80192dc <__aeabi_dcmplt>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d013      	beq.n	8003a68 <main+0x2110>
						sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 8003a40:	4b2e      	ldr	r3, [pc, #184]	; (8003afc <main+0x21a4>)
 8003a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a46:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8003a4a:	4928      	ldr	r1, [pc, #160]	; (8003aec <main+0x2194>)
 8003a4c:	f016 fdb4 	bl	801a5b8 <siprintf>
						LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 8003a50:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003a54:	2300      	movs	r3, #0
 8003a56:	9301      	str	r3, [sp, #4]
 8003a58:	2301      	movs	r3, #1
 8003a5a:	9300      	str	r3, [sp, #0]
 8003a5c:	4b24      	ldr	r3, [pc, #144]	; (8003af0 <main+0x2198>)
 8003a5e:	2128      	movs	r1, #40	; 0x28
 8003a60:	f240 1093 	movw	r0, #403	; 0x193
 8003a64:	f001 fd90 	bl	8005588 <LCD_Font>
					}

					temperatureRemoteLast = 0;
 8003a68:	491e      	ldr	r1, [pc, #120]	; (8003ae4 <main+0x218c>)
 8003a6a:	f04f 0200 	mov.w	r2, #0
 8003a6e:	f04f 0300 	mov.w	r3, #0
 8003a72:	e9c1 2300 	strd	r2, r3, [r1]
					humidityRemoteLast = 0;
 8003a76:	4921      	ldr	r1, [pc, #132]	; (8003afc <main+0x21a4>)
 8003a78:	f04f 0200 	mov.w	r2, #0
 8003a7c:	f04f 0300 	mov.w	r3, #0
 8003a80:	e9c1 2300 	strd	r2, r3, [r1]
				}

				sprintf(clockPrint, "%02d", rtcSecLast);
 8003a84:	4b1e      	ldr	r3, [pc, #120]	; (8003b00 <main+0x21a8>)
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	461a      	mov	r2, r3
 8003a8a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003a8e:	491d      	ldr	r1, [pc, #116]	; (8003b04 <main+0x21ac>)
 8003a90:	4618      	mov	r0, r3
 8003a92:	f016 fd91 	bl	801a5b8 <siprintf>
				LCD_Font(375, 40, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 8003a96:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	9301      	str	r3, [sp, #4]
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	4b13      	ldr	r3, [pc, #76]	; (8003af0 <main+0x2198>)
 8003aa4:	2128      	movs	r1, #40	; 0x28
 8003aa6:	f240 1077 	movw	r0, #375	; 0x177
 8003aaa:	f001 fd6d 	bl	8005588 <LCD_Font>
				sprintf(clockPrint, "%02d", rtcSec);
 8003aae:	4b16      	ldr	r3, [pc, #88]	; (8003b08 <main+0x21b0>)
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003ab8:	4912      	ldr	r1, [pc, #72]	; (8003b04 <main+0x21ac>)
 8003aba:	4618      	mov	r0, r3
 8003abc:	f016 fd7c 	bl	801a5b8 <siprintf>
				LCD_Font(375, 40, clockPrint, &DejaVu_Sans_48, 1, ORANGE);
 8003ac0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003ac4:	4b11      	ldr	r3, [pc, #68]	; (8003b0c <main+0x21b4>)
 8003ac6:	9301      	str	r3, [sp, #4]
 8003ac8:	2301      	movs	r3, #1
 8003aca:	9300      	str	r3, [sp, #0]
 8003acc:	4b08      	ldr	r3, [pc, #32]	; (8003af0 <main+0x2198>)
 8003ace:	2128      	movs	r1, #40	; 0x28
 8003ad0:	f240 1077 	movw	r0, #375	; 0x177
 8003ad4:	f001 fd58 	bl	8005588 <LCD_Font>
			}
			rtcSecLast = rtcSec;
 8003ad8:	4b0b      	ldr	r3, [pc, #44]	; (8003b08 <main+0x21b0>)
 8003ada:	781a      	ldrb	r2, [r3, #0]
 8003adc:	4b08      	ldr	r3, [pc, #32]	; (8003b00 <main+0x21a8>)
 8003ade:	701a      	strb	r2, [r3, #0]
	{
 8003ae0:	f7fe b9d3 	b.w	8001e8a <main+0x532>
 8003ae4:	200005a0 	.word	0x200005a0
 8003ae8:	c0240000 	.word	0xc0240000
 8003aec:	08052120 	.word	0x08052120
 8003af0:	08029850 	.word	0x08029850
 8003af4:	40240000 	.word	0x40240000
 8003af8:	08052128 	.word	0x08052128
 8003afc:	200005b0 	.word	0x200005b0
 8003b00:	20000000 	.word	0x20000000
 8003b04:	080520d4 	.word	0x080520d4
 8003b08:	2000056d 	.word	0x2000056d
 8003b0c:	00ffa500 	.word	0x00ffa500

08003b10 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b094      	sub	sp, #80	; 0x50
 8003b14:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b16:	f107 0320 	add.w	r3, r7, #32
 8003b1a:	2230      	movs	r2, #48	; 0x30
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f015 fec2 	bl	80198a8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b24:	f107 030c 	add.w	r3, r7, #12
 8003b28:	2200      	movs	r2, #0
 8003b2a:	601a      	str	r2, [r3, #0]
 8003b2c:	605a      	str	r2, [r3, #4]
 8003b2e:	609a      	str	r2, [r3, #8]
 8003b30:	60da      	str	r2, [r3, #12]
 8003b32:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8003b34:	2300      	movs	r3, #0
 8003b36:	607b      	str	r3, [r7, #4]
 8003b38:	4b28      	ldr	r3, [pc, #160]	; (8003bdc <SystemClock_Config+0xcc>)
 8003b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3c:	4a27      	ldr	r2, [pc, #156]	; (8003bdc <SystemClock_Config+0xcc>)
 8003b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b42:	6413      	str	r3, [r2, #64]	; 0x40
 8003b44:	4b25      	ldr	r3, [pc, #148]	; (8003bdc <SystemClock_Config+0xcc>)
 8003b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b4c:	607b      	str	r3, [r7, #4]
 8003b4e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b50:	2300      	movs	r3, #0
 8003b52:	60bb      	str	r3, [r7, #8]
 8003b54:	4b22      	ldr	r3, [pc, #136]	; (8003be0 <SystemClock_Config+0xd0>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a21      	ldr	r2, [pc, #132]	; (8003be0 <SystemClock_Config+0xd0>)
 8003b5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b5e:	6013      	str	r3, [r2, #0]
 8003b60:	4b1f      	ldr	r3, [pc, #124]	; (8003be0 <SystemClock_Config+0xd0>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b68:	60bb      	str	r3, [r7, #8]
 8003b6a:	68bb      	ldr	r3, [r7, #8]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003b70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b74:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b76:	2302      	movs	r3, #2
 8003b78:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003b7a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8003b80:	2304      	movs	r3, #4
 8003b82:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8003b84:	23a8      	movs	r3, #168	; 0xa8
 8003b86:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003b88:	2302      	movs	r3, #2
 8003b8a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8003b8c:	2307      	movs	r3, #7
 8003b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b90:	f107 0320 	add.w	r3, r7, #32
 8003b94:	4618      	mov	r0, r3
 8003b96:	f00d fea9 	bl	80118ec <HAL_RCC_OscConfig>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d001      	beq.n	8003ba4 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8003ba0:	f000 fab0 	bl	8004104 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ba4:	230f      	movs	r3, #15
 8003ba6:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ba8:	2302      	movs	r3, #2
 8003baa:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003bac:	2300      	movs	r3, #0
 8003bae:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003bb0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003bb4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003bb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bba:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003bbc:	f107 030c 	add.w	r3, r7, #12
 8003bc0:	2105      	movs	r1, #5
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f00e f90a 	bl	8011ddc <HAL_RCC_ClockConfig>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 8003bce:	f000 fa99 	bl	8004104 <Error_Handler>
	}
}
 8003bd2:	bf00      	nop
 8003bd4:	3750      	adds	r7, #80	; 0x50
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	40023800 	.word	0x40023800
 8003be0:	40007000 	.word	0x40007000

08003be4 <MX_DAC_Init>:
 * @brief DAC Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC_Init(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC_Init 0 */

	/* USER CODE END DAC_Init 0 */

	DAC_ChannelConfTypeDef sConfig = {0};
 8003bea:	463b      	mov	r3, r7
 8003bec:	2200      	movs	r2, #0
 8003bee:	601a      	str	r2, [r3, #0]
 8003bf0:	605a      	str	r2, [r3, #4]
	/* USER CODE BEGIN DAC_Init 1 */

	/* USER CODE END DAC_Init 1 */
	/** DAC Initialization
	 */
	hdac.Instance = DAC;
 8003bf2:	4b14      	ldr	r3, [pc, #80]	; (8003c44 <MX_DAC_Init+0x60>)
 8003bf4:	4a14      	ldr	r2, [pc, #80]	; (8003c48 <MX_DAC_Init+0x64>)
 8003bf6:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac) != HAL_OK)
 8003bf8:	4812      	ldr	r0, [pc, #72]	; (8003c44 <MX_DAC_Init+0x60>)
 8003bfa:	f003 fa92 	bl	8007122 <HAL_DAC_Init>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d001      	beq.n	8003c08 <MX_DAC_Init+0x24>
	{
		Error_Handler();
 8003c04:	f000 fa7e 	bl	8004104 <Error_Handler>
	}
	/** DAC channel OUT1 config
	 */
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	603b      	str	r3, [r7, #0]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	607b      	str	r3, [r7, #4]
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003c10:	463b      	mov	r3, r7
 8003c12:	2200      	movs	r2, #0
 8003c14:	4619      	mov	r1, r3
 8003c16:	480b      	ldr	r0, [pc, #44]	; (8003c44 <MX_DAC_Init+0x60>)
 8003c18:	f003 fd07 	bl	800762a <HAL_DAC_ConfigChannel>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <MX_DAC_Init+0x42>
	{
		Error_Handler();
 8003c22:	f000 fa6f 	bl	8004104 <Error_Handler>
	}
	/** DAC channel OUT2 config
	 */
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8003c26:	463b      	mov	r3, r7
 8003c28:	2210      	movs	r2, #16
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	4805      	ldr	r0, [pc, #20]	; (8003c44 <MX_DAC_Init+0x60>)
 8003c2e:	f003 fcfc 	bl	800762a <HAL_DAC_ConfigChannel>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d001      	beq.n	8003c3c <MX_DAC_Init+0x58>
	{
		Error_Handler();
 8003c38:	f000 fa64 	bl	8004104 <Error_Handler>
	}
	/* USER CODE BEGIN DAC_Init 2 */

	/* USER CODE END DAC_Init 2 */

}
 8003c3c:	bf00      	nop
 8003c3e:	3708      	adds	r7, #8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	200002a8 	.word	0x200002a8
 8003c48:	40007400 	.word	0x40007400

08003c4c <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8003c50:	4b12      	ldr	r3, [pc, #72]	; (8003c9c <MX_I2C1_Init+0x50>)
 8003c52:	4a13      	ldr	r2, [pc, #76]	; (8003ca0 <MX_I2C1_Init+0x54>)
 8003c54:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8003c56:	4b11      	ldr	r3, [pc, #68]	; (8003c9c <MX_I2C1_Init+0x50>)
 8003c58:	4a12      	ldr	r2, [pc, #72]	; (8003ca4 <MX_I2C1_Init+0x58>)
 8003c5a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003c5c:	4b0f      	ldr	r3, [pc, #60]	; (8003c9c <MX_I2C1_Init+0x50>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8003c62:	4b0e      	ldr	r3, [pc, #56]	; (8003c9c <MX_I2C1_Init+0x50>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c68:	4b0c      	ldr	r3, [pc, #48]	; (8003c9c <MX_I2C1_Init+0x50>)
 8003c6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003c6e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c70:	4b0a      	ldr	r3, [pc, #40]	; (8003c9c <MX_I2C1_Init+0x50>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8003c76:	4b09      	ldr	r3, [pc, #36]	; (8003c9c <MX_I2C1_Init+0x50>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c7c:	4b07      	ldr	r3, [pc, #28]	; (8003c9c <MX_I2C1_Init+0x50>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c82:	4b06      	ldr	r3, [pc, #24]	; (8003c9c <MX_I2C1_Init+0x50>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003c88:	4804      	ldr	r0, [pc, #16]	; (8003c9c <MX_I2C1_Init+0x50>)
 8003c8a:	f007 fa5a 	bl	800b142 <HAL_I2C_Init>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8003c94:	f000 fa36 	bl	8004104 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8003c98:	bf00      	nop
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	200002bc 	.word	0x200002bc
 8003ca0:	40005400 	.word	0x40005400
 8003ca4:	000186a0 	.word	0x000186a0

08003ca8 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8003cac:	4b17      	ldr	r3, [pc, #92]	; (8003d0c <MX_SPI1_Init+0x64>)
 8003cae:	4a18      	ldr	r2, [pc, #96]	; (8003d10 <MX_SPI1_Init+0x68>)
 8003cb0:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8003cb2:	4b16      	ldr	r3, [pc, #88]	; (8003d0c <MX_SPI1_Init+0x64>)
 8003cb4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003cb8:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003cba:	4b14      	ldr	r3, [pc, #80]	; (8003d0c <MX_SPI1_Init+0x64>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003cc0:	4b12      	ldr	r3, [pc, #72]	; (8003d0c <MX_SPI1_Init+0x64>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cc6:	4b11      	ldr	r3, [pc, #68]	; (8003d0c <MX_SPI1_Init+0x64>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003ccc:	4b0f      	ldr	r3, [pc, #60]	; (8003d0c <MX_SPI1_Init+0x64>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8003cd2:	4b0e      	ldr	r3, [pc, #56]	; (8003d0c <MX_SPI1_Init+0x64>)
 8003cd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cd8:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003cda:	4b0c      	ldr	r3, [pc, #48]	; (8003d0c <MX_SPI1_Init+0x64>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ce0:	4b0a      	ldr	r3, [pc, #40]	; (8003d0c <MX_SPI1_Init+0x64>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003ce6:	4b09      	ldr	r3, [pc, #36]	; (8003d0c <MX_SPI1_Init+0x64>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cec:	4b07      	ldr	r3, [pc, #28]	; (8003d0c <MX_SPI1_Init+0x64>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8003cf2:	4b06      	ldr	r3, [pc, #24]	; (8003d0c <MX_SPI1_Init+0x64>)
 8003cf4:	220a      	movs	r2, #10
 8003cf6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003cf8:	4804      	ldr	r0, [pc, #16]	; (8003d0c <MX_SPI1_Init+0x64>)
 8003cfa:	f00e fe8f 	bl	8012a1c <HAL_SPI_Init>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 8003d04:	f000 f9fe 	bl	8004104 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8003d08:	bf00      	nop
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	20000310 	.word	0x20000310
 8003d10:	40013000 	.word	0x40013000

08003d14 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8003d18:	4b17      	ldr	r3, [pc, #92]	; (8003d78 <MX_SPI2_Init+0x64>)
 8003d1a:	4a18      	ldr	r2, [pc, #96]	; (8003d7c <MX_SPI2_Init+0x68>)
 8003d1c:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8003d1e:	4b16      	ldr	r3, [pc, #88]	; (8003d78 <MX_SPI2_Init+0x64>)
 8003d20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003d24:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003d26:	4b14      	ldr	r3, [pc, #80]	; (8003d78 <MX_SPI2_Init+0x64>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d2c:	4b12      	ldr	r3, [pc, #72]	; (8003d78 <MX_SPI2_Init+0x64>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d32:	4b11      	ldr	r3, [pc, #68]	; (8003d78 <MX_SPI2_Init+0x64>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003d38:	4b0f      	ldr	r3, [pc, #60]	; (8003d78 <MX_SPI2_Init+0x64>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003d3e:	4b0e      	ldr	r3, [pc, #56]	; (8003d78 <MX_SPI2_Init+0x64>)
 8003d40:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003d44:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003d46:	4b0c      	ldr	r3, [pc, #48]	; (8003d78 <MX_SPI2_Init+0x64>)
 8003d48:	2238      	movs	r2, #56	; 0x38
 8003d4a:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d4c:	4b0a      	ldr	r3, [pc, #40]	; (8003d78 <MX_SPI2_Init+0x64>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d52:	4b09      	ldr	r3, [pc, #36]	; (8003d78 <MX_SPI2_Init+0x64>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d58:	4b07      	ldr	r3, [pc, #28]	; (8003d78 <MX_SPI2_Init+0x64>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8003d5e:	4b06      	ldr	r3, [pc, #24]	; (8003d78 <MX_SPI2_Init+0x64>)
 8003d60:	220a      	movs	r2, #10
 8003d62:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003d64:	4804      	ldr	r0, [pc, #16]	; (8003d78 <MX_SPI2_Init+0x64>)
 8003d66:	f00e fe59 	bl	8012a1c <HAL_SPI_Init>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <MX_SPI2_Init+0x60>
	{
		Error_Handler();
 8003d70:	f000 f9c8 	bl	8004104 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8003d74:	bf00      	nop
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	20000368 	.word	0x20000368
 8003d7c:	40003800 	.word	0x40003800

08003d80 <MX_SPI3_Init>:
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 8003d84:	4b17      	ldr	r3, [pc, #92]	; (8003de4 <MX_SPI3_Init+0x64>)
 8003d86:	4a18      	ldr	r2, [pc, #96]	; (8003de8 <MX_SPI3_Init+0x68>)
 8003d88:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 8003d8a:	4b16      	ldr	r3, [pc, #88]	; (8003de4 <MX_SPI3_Init+0x64>)
 8003d8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003d90:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003d92:	4b14      	ldr	r3, [pc, #80]	; (8003de4 <MX_SPI3_Init+0x64>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d98:	4b12      	ldr	r3, [pc, #72]	; (8003de4 <MX_SPI3_Init+0x64>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d9e:	4b11      	ldr	r3, [pc, #68]	; (8003de4 <MX_SPI3_Init+0x64>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003da4:	4b0f      	ldr	r3, [pc, #60]	; (8003de4 <MX_SPI3_Init+0x64>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003daa:	4b0e      	ldr	r3, [pc, #56]	; (8003de4 <MX_SPI3_Init+0x64>)
 8003dac:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003db0:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003db2:	4b0c      	ldr	r3, [pc, #48]	; (8003de4 <MX_SPI3_Init+0x64>)
 8003db4:	2238      	movs	r2, #56	; 0x38
 8003db6:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003db8:	4b0a      	ldr	r3, [pc, #40]	; (8003de4 <MX_SPI3_Init+0x64>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003dbe:	4b09      	ldr	r3, [pc, #36]	; (8003de4 <MX_SPI3_Init+0x64>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dc4:	4b07      	ldr	r3, [pc, #28]	; (8003de4 <MX_SPI3_Init+0x64>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 10;
 8003dca:	4b06      	ldr	r3, [pc, #24]	; (8003de4 <MX_SPI3_Init+0x64>)
 8003dcc:	220a      	movs	r2, #10
 8003dce:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003dd0:	4804      	ldr	r0, [pc, #16]	; (8003de4 <MX_SPI3_Init+0x64>)
 8003dd2:	f00e fe23 	bl	8012a1c <HAL_SPI_Init>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <MX_SPI3_Init+0x60>
	{
		Error_Handler();
 8003ddc:	f000 f992 	bl	8004104 <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 8003de0:	bf00      	nop
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	200003c0 	.word	0x200003c0
 8003de8:	40003c00 	.word	0x40003c00

08003dec <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8003df0:	4b11      	ldr	r3, [pc, #68]	; (8003e38 <MX_USART1_UART_Init+0x4c>)
 8003df2:	4a12      	ldr	r2, [pc, #72]	; (8003e3c <MX_USART1_UART_Init+0x50>)
 8003df4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8003df6:	4b10      	ldr	r3, [pc, #64]	; (8003e38 <MX_USART1_UART_Init+0x4c>)
 8003df8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003dfc:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003dfe:	4b0e      	ldr	r3, [pc, #56]	; (8003e38 <MX_USART1_UART_Init+0x4c>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8003e04:	4b0c      	ldr	r3, [pc, #48]	; (8003e38 <MX_USART1_UART_Init+0x4c>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8003e0a:	4b0b      	ldr	r3, [pc, #44]	; (8003e38 <MX_USART1_UART_Init+0x4c>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8003e10:	4b09      	ldr	r3, [pc, #36]	; (8003e38 <MX_USART1_UART_Init+0x4c>)
 8003e12:	220c      	movs	r2, #12
 8003e14:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e16:	4b08      	ldr	r3, [pc, #32]	; (8003e38 <MX_USART1_UART_Init+0x4c>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e1c:	4b06      	ldr	r3, [pc, #24]	; (8003e38 <MX_USART1_UART_Init+0x4c>)
 8003e1e:	2200      	movs	r2, #0
 8003e20:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8003e22:	4805      	ldr	r0, [pc, #20]	; (8003e38 <MX_USART1_UART_Init+0x4c>)
 8003e24:	f011 fb60 	bl	80154e8 <HAL_UART_Init>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8003e2e:	f000 f969 	bl	8004104 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8003e32:	bf00      	nop
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	200004d8 	.word	0x200004d8
 8003e3c:	40011000 	.word	0x40011000

08003e40 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003e46:	2300      	movs	r3, #0
 8003e48:	607b      	str	r3, [r7, #4]
 8003e4a:	4b10      	ldr	r3, [pc, #64]	; (8003e8c <MX_DMA_Init+0x4c>)
 8003e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4e:	4a0f      	ldr	r2, [pc, #60]	; (8003e8c <MX_DMA_Init+0x4c>)
 8003e50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e54:	6313      	str	r3, [r2, #48]	; 0x30
 8003e56:	4b0d      	ldr	r3, [pc, #52]	; (8003e8c <MX_DMA_Init+0x4c>)
 8003e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e5e:	607b      	str	r3, [r7, #4]
 8003e60:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8003e62:	2200      	movs	r2, #0
 8003e64:	2100      	movs	r1, #0
 8003e66:	200e      	movs	r0, #14
 8003e68:	f003 f817 	bl	8006e9a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8003e6c:	200e      	movs	r0, #14
 8003e6e:	f003 f830 	bl	8006ed2 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8003e72:	2200      	movs	r2, #0
 8003e74:	2100      	movs	r1, #0
 8003e76:	200f      	movs	r0, #15
 8003e78:	f003 f80f 	bl	8006e9a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003e7c:	200f      	movs	r0, #15
 8003e7e:	f003 f828 	bl	8006ed2 <HAL_NVIC_EnableIRQ>

}
 8003e82:	bf00      	nop
 8003e84:	3708      	adds	r7, #8
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	40023800 	.word	0x40023800

08003e90 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b08c      	sub	sp, #48	; 0x30
 8003e94:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e96:	f107 031c 	add.w	r3, r7, #28
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	601a      	str	r2, [r3, #0]
 8003e9e:	605a      	str	r2, [r3, #4]
 8003ea0:	609a      	str	r2, [r3, #8]
 8003ea2:	60da      	str	r2, [r3, #12]
 8003ea4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	607b      	str	r3, [r7, #4]
 8003eaa:	4b60      	ldr	r3, [pc, #384]	; (800402c <MX_GPIO_Init+0x19c>)
 8003eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eae:	4a5f      	ldr	r2, [pc, #380]	; (800402c <MX_GPIO_Init+0x19c>)
 8003eb0:	f043 0310 	orr.w	r3, r3, #16
 8003eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8003eb6:	4b5d      	ldr	r3, [pc, #372]	; (800402c <MX_GPIO_Init+0x19c>)
 8003eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eba:	f003 0310 	and.w	r3, r3, #16
 8003ebe:	607b      	str	r3, [r7, #4]
 8003ec0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	60bb      	str	r3, [r7, #8]
 8003ec6:	4b59      	ldr	r3, [pc, #356]	; (800402c <MX_GPIO_Init+0x19c>)
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eca:	4a58      	ldr	r2, [pc, #352]	; (800402c <MX_GPIO_Init+0x19c>)
 8003ecc:	f043 0304 	orr.w	r3, r3, #4
 8003ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ed2:	4b56      	ldr	r3, [pc, #344]	; (800402c <MX_GPIO_Init+0x19c>)
 8003ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed6:	f003 0304 	and.w	r3, r3, #4
 8003eda:	60bb      	str	r3, [r7, #8]
 8003edc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8003ede:	2300      	movs	r3, #0
 8003ee0:	60fb      	str	r3, [r7, #12]
 8003ee2:	4b52      	ldr	r3, [pc, #328]	; (800402c <MX_GPIO_Init+0x19c>)
 8003ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee6:	4a51      	ldr	r2, [pc, #324]	; (800402c <MX_GPIO_Init+0x19c>)
 8003ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eec:	6313      	str	r3, [r2, #48]	; 0x30
 8003eee:	4b4f      	ldr	r3, [pc, #316]	; (800402c <MX_GPIO_Init+0x19c>)
 8003ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef6:	60fb      	str	r3, [r7, #12]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003efa:	2300      	movs	r3, #0
 8003efc:	613b      	str	r3, [r7, #16]
 8003efe:	4b4b      	ldr	r3, [pc, #300]	; (800402c <MX_GPIO_Init+0x19c>)
 8003f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f02:	4a4a      	ldr	r2, [pc, #296]	; (800402c <MX_GPIO_Init+0x19c>)
 8003f04:	f043 0301 	orr.w	r3, r3, #1
 8003f08:	6313      	str	r3, [r2, #48]	; 0x30
 8003f0a:	4b48      	ldr	r3, [pc, #288]	; (800402c <MX_GPIO_Init+0x19c>)
 8003f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	613b      	str	r3, [r7, #16]
 8003f14:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003f16:	2300      	movs	r3, #0
 8003f18:	617b      	str	r3, [r7, #20]
 8003f1a:	4b44      	ldr	r3, [pc, #272]	; (800402c <MX_GPIO_Init+0x19c>)
 8003f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1e:	4a43      	ldr	r2, [pc, #268]	; (800402c <MX_GPIO_Init+0x19c>)
 8003f20:	f043 0302 	orr.w	r3, r3, #2
 8003f24:	6313      	str	r3, [r2, #48]	; 0x30
 8003f26:	4b41      	ldr	r3, [pc, #260]	; (800402c <MX_GPIO_Init+0x19c>)
 8003f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	617b      	str	r3, [r7, #20]
 8003f30:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8003f32:	2300      	movs	r3, #0
 8003f34:	61bb      	str	r3, [r7, #24]
 8003f36:	4b3d      	ldr	r3, [pc, #244]	; (800402c <MX_GPIO_Init+0x19c>)
 8003f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3a:	4a3c      	ldr	r2, [pc, #240]	; (800402c <MX_GPIO_Init+0x19c>)
 8003f3c:	f043 0308 	orr.w	r3, r3, #8
 8003f40:	6313      	str	r3, [r2, #48]	; 0x30
 8003f42:	4b3a      	ldr	r3, [pc, #232]	; (800402c <MX_GPIO_Init+0x19c>)
 8003f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f46:	f003 0308 	and.w	r3, r3, #8
 8003f4a:	61bb      	str	r3, [r7, #24]
 8003f4c:	69bb      	ldr	r3, [r7, #24]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 8003f4e:	2201      	movs	r2, #1
 8003f50:	2140      	movs	r1, #64	; 0x40
 8003f52:	4837      	ldr	r0, [pc, #220]	; (8004030 <MX_GPIO_Init+0x1a0>)
 8003f54:	f007 f876 	bl	800b044 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8003f58:	2200      	movs	r2, #0
 8003f5a:	2180      	movs	r1, #128	; 0x80
 8003f5c:	4834      	ldr	r0, [pc, #208]	; (8004030 <MX_GPIO_Init+0x1a0>)
 8003f5e:	f007 f871 	bl	800b044 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(FLASH25Q_CS_GPIO_Port, FLASH25Q_CS_Pin, GPIO_PIN_RESET);
 8003f62:	2200      	movs	r2, #0
 8003f64:	2101      	movs	r1, #1
 8003f66:	4833      	ldr	r0, [pc, #204]	; (8004034 <MX_GPIO_Init+0x1a4>)
 8003f68:	f007 f86c 	bl	800b044 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, SD_D0_Pin|SD_D1_Pin, GPIO_PIN_RESET);
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003f72:	4831      	ldr	r0, [pc, #196]	; (8004038 <MX_GPIO_Init+0x1a8>)
 8003f74:	f007 f866 	bl	800b044 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SD_CMD_GPIO_Port, SD_CMD_Pin, GPIO_PIN_RESET);
 8003f78:	2200      	movs	r2, #0
 8003f7a:	2104      	movs	r1, #4
 8003f7c:	482f      	ldr	r0, [pc, #188]	; (800403c <MX_GPIO_Init+0x1ac>)
 8003f7e:	f007 f861 	bl	800b044 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : KEY_1_Pin KEY_0_Pin */
	GPIO_InitStruct.Pin = KEY_1_Pin|KEY_0_Pin;
 8003f82:	2318      	movs	r3, #24
 8003f84:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f86:	2300      	movs	r3, #0
 8003f88:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003f8e:	f107 031c 	add.w	r3, r7, #28
 8003f92:	4619      	mov	r1, r3
 8003f94:	482a      	ldr	r0, [pc, #168]	; (8004040 <MX_GPIO_Init+0x1b0>)
 8003f96:	f006 fda5 	bl	800aae4 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_A_Pin LED_B_Pin */
	GPIO_InitStruct.Pin = LED_A_Pin|LED_B_Pin;
 8003f9a:	23c0      	movs	r3, #192	; 0xc0
 8003f9c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003faa:	f107 031c 	add.w	r3, r7, #28
 8003fae:	4619      	mov	r1, r3
 8003fb0:	481f      	ldr	r0, [pc, #124]	; (8004030 <MX_GPIO_Init+0x1a0>)
 8003fb2:	f006 fd97 	bl	800aae4 <HAL_GPIO_Init>

	/*Configure GPIO pin : TOUCH_IRQ_Pin */
	GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8003fb6:	2320      	movs	r3, #32
 8003fb8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003fc2:	f107 031c 	add.w	r3, r7, #28
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	481b      	ldr	r0, [pc, #108]	; (8004038 <MX_GPIO_Init+0x1a8>)
 8003fca:	f006 fd8b 	bl	800aae4 <HAL_GPIO_Init>

	/*Configure GPIO pin : FLASH25Q_CS_Pin */
	GPIO_InitStruct.Pin = FLASH25Q_CS_Pin;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(FLASH25Q_CS_GPIO_Port, &GPIO_InitStruct);
 8003fde:	f107 031c 	add.w	r3, r7, #28
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	4813      	ldr	r0, [pc, #76]	; (8004034 <MX_GPIO_Init+0x1a4>)
 8003fe6:	f006 fd7d 	bl	800aae4 <HAL_GPIO_Init>

	/*Configure GPIO pins : SD_D0_Pin SD_D1_Pin */
	GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin;
 8003fea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003fee:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ffc:	f107 031c 	add.w	r3, r7, #28
 8004000:	4619      	mov	r1, r3
 8004002:	480d      	ldr	r0, [pc, #52]	; (8004038 <MX_GPIO_Init+0x1a8>)
 8004004:	f006 fd6e 	bl	800aae4 <HAL_GPIO_Init>

	/*Configure GPIO pin : SD_CMD_Pin */
	GPIO_InitStruct.Pin = SD_CMD_Pin;
 8004008:	2304      	movs	r3, #4
 800400a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800400c:	2301      	movs	r3, #1
 800400e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004010:	2300      	movs	r3, #0
 8004012:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004014:	2300      	movs	r3, #0
 8004016:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 8004018:	f107 031c 	add.w	r3, r7, #28
 800401c:	4619      	mov	r1, r3
 800401e:	4807      	ldr	r0, [pc, #28]	; (800403c <MX_GPIO_Init+0x1ac>)
 8004020:	f006 fd60 	bl	800aae4 <HAL_GPIO_Init>

}
 8004024:	bf00      	nop
 8004026:	3730      	adds	r7, #48	; 0x30
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	40023800 	.word	0x40023800
 8004030:	40020000 	.word	0x40020000
 8004034:	40020400 	.word	0x40020400
 8004038:	40020800 	.word	0x40020800
 800403c:	40020c00 	.word	0x40020c00
 8004040:	40021000 	.word	0x40021000

08004044 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b088      	sub	sp, #32
 8004048:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FSMC_Init 0 */

	/* USER CODE END FSMC_Init 0 */

	FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800404a:	1d3b      	adds	r3, r7, #4
 800404c:	2200      	movs	r2, #0
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	605a      	str	r2, [r3, #4]
 8004052:	609a      	str	r2, [r3, #8]
 8004054:	60da      	str	r2, [r3, #12]
 8004056:	611a      	str	r2, [r3, #16]
 8004058:	615a      	str	r2, [r3, #20]
 800405a:	619a      	str	r2, [r3, #24]

	/* USER CODE END FSMC_Init 1 */

	/** Perform the SRAM1 memory initialization sequence
	 */
	hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800405c:	4b27      	ldr	r3, [pc, #156]	; (80040fc <MX_FSMC_Init+0xb8>)
 800405e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8004062:	601a      	str	r2, [r3, #0]
	hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8004064:	4b25      	ldr	r3, [pc, #148]	; (80040fc <MX_FSMC_Init+0xb8>)
 8004066:	4a26      	ldr	r2, [pc, #152]	; (8004100 <MX_FSMC_Init+0xbc>)
 8004068:	605a      	str	r2, [r3, #4]
	/* hsram1.Init */
	hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800406a:	4b24      	ldr	r3, [pc, #144]	; (80040fc <MX_FSMC_Init+0xb8>)
 800406c:	2200      	movs	r2, #0
 800406e:	609a      	str	r2, [r3, #8]
	hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8004070:	4b22      	ldr	r3, [pc, #136]	; (80040fc <MX_FSMC_Init+0xb8>)
 8004072:	2200      	movs	r2, #0
 8004074:	60da      	str	r2, [r3, #12]
	hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8004076:	4b21      	ldr	r3, [pc, #132]	; (80040fc <MX_FSMC_Init+0xb8>)
 8004078:	2200      	movs	r2, #0
 800407a:	611a      	str	r2, [r3, #16]
	hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800407c:	4b1f      	ldr	r3, [pc, #124]	; (80040fc <MX_FSMC_Init+0xb8>)
 800407e:	2210      	movs	r2, #16
 8004080:	615a      	str	r2, [r3, #20]
	hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8004082:	4b1e      	ldr	r3, [pc, #120]	; (80040fc <MX_FSMC_Init+0xb8>)
 8004084:	2200      	movs	r2, #0
 8004086:	619a      	str	r2, [r3, #24]
	hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8004088:	4b1c      	ldr	r3, [pc, #112]	; (80040fc <MX_FSMC_Init+0xb8>)
 800408a:	2200      	movs	r2, #0
 800408c:	61da      	str	r2, [r3, #28]
	hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800408e:	4b1b      	ldr	r3, [pc, #108]	; (80040fc <MX_FSMC_Init+0xb8>)
 8004090:	2200      	movs	r2, #0
 8004092:	621a      	str	r2, [r3, #32]
	hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8004094:	4b19      	ldr	r3, [pc, #100]	; (80040fc <MX_FSMC_Init+0xb8>)
 8004096:	2200      	movs	r2, #0
 8004098:	625a      	str	r2, [r3, #36]	; 0x24
	hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800409a:	4b18      	ldr	r3, [pc, #96]	; (80040fc <MX_FSMC_Init+0xb8>)
 800409c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80040a0:	629a      	str	r2, [r3, #40]	; 0x28
	hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80040a2:	4b16      	ldr	r3, [pc, #88]	; (80040fc <MX_FSMC_Init+0xb8>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	62da      	str	r2, [r3, #44]	; 0x2c
	hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80040a8:	4b14      	ldr	r3, [pc, #80]	; (80040fc <MX_FSMC_Init+0xb8>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	631a      	str	r2, [r3, #48]	; 0x30
	hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80040ae:	4b13      	ldr	r3, [pc, #76]	; (80040fc <MX_FSMC_Init+0xb8>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	635a      	str	r2, [r3, #52]	; 0x34
	hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80040b4:	4b11      	ldr	r3, [pc, #68]	; (80040fc <MX_FSMC_Init+0xb8>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	639a      	str	r2, [r3, #56]	; 0x38
	hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80040ba:	4b10      	ldr	r3, [pc, #64]	; (80040fc <MX_FSMC_Init+0xb8>)
 80040bc:	2200      	movs	r2, #0
 80040be:	645a      	str	r2, [r3, #68]	; 0x44
	/* Timing */
	Timing.AddressSetupTime = 2;
 80040c0:	2302      	movs	r3, #2
 80040c2:	607b      	str	r3, [r7, #4]
	Timing.AddressHoldTime = 15;
 80040c4:	230f      	movs	r3, #15
 80040c6:	60bb      	str	r3, [r7, #8]
	Timing.DataSetupTime = 5;
 80040c8:	2305      	movs	r3, #5
 80040ca:	60fb      	str	r3, [r7, #12]
	Timing.BusTurnAroundDuration = 2;
 80040cc:	2302      	movs	r3, #2
 80040ce:	613b      	str	r3, [r7, #16]
	Timing.CLKDivision = 16;
 80040d0:	2310      	movs	r3, #16
 80040d2:	617b      	str	r3, [r7, #20]
	Timing.DataLatency = 17;
 80040d4:	2311      	movs	r3, #17
 80040d6:	61bb      	str	r3, [r7, #24]
	Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80040d8:	2300      	movs	r3, #0
 80040da:	61fb      	str	r3, [r7, #28]
	/* ExtTiming */

	if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80040dc:	1d3b      	adds	r3, r7, #4
 80040de:	2200      	movs	r2, #0
 80040e0:	4619      	mov	r1, r3
 80040e2:	4806      	ldr	r0, [pc, #24]	; (80040fc <MX_FSMC_Init+0xb8>)
 80040e4:	f010 ff56 	bl	8014f94 <HAL_SRAM_Init>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d001      	beq.n	80040f2 <MX_FSMC_Init+0xae>
	{
		Error_Handler( );
 80040ee:	f000 f809 	bl	8004104 <Error_Handler>
	}

	/* USER CODE BEGIN FSMC_Init 2 */

	/* USER CODE END FSMC_Init 2 */
}
 80040f2:	bf00      	nop
 80040f4:	3720      	adds	r7, #32
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	2000051c 	.word	0x2000051c
 8004100:	a0000104 	.word	0xa0000104

08004104 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8004104:	b480      	push	{r7}
 8004106:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004108:	b672      	cpsid	i
}
 800410a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800410c:	e7fe      	b.n	800410c <Error_Handler+0x8>

0800410e <RGB>:
#include "ssd1963.h"

uint32_t RGB(uint8_t r, uint8_t g, uint8_t b)
{   
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	4603      	mov	r3, r0
 8004116:	71fb      	strb	r3, [r7, #7]
 8004118:	460b      	mov	r3, r1
 800411a:	71bb      	strb	r3, [r7, #6]
 800411c:	4613      	mov	r3, r2
 800411e:	717b      	strb	r3, [r7, #5]
    return ((r & 0xFF) << 16) + ((g & 0xFF) << 8) + (b & 0xFF);
 8004120:	79fb      	ldrb	r3, [r7, #7]
 8004122:	041a      	lsls	r2, r3, #16
 8004124:	79bb      	ldrb	r3, [r7, #6]
 8004126:	021b      	lsls	r3, r3, #8
 8004128:	441a      	add	r2, r3
 800412a:	797b      	ldrb	r3, [r7, #5]
 800412c:	4413      	add	r3, r2
}
 800412e:	4618      	mov	r0, r3
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr

0800413a <H24_RGB565>:

uint16_t H24_RGB565(uint8_t reverse, uint32_t color24)
{
 800413a:	b480      	push	{r7}
 800413c:	b085      	sub	sp, #20
 800413e:	af00      	add	r7, sp, #0
 8004140:	4603      	mov	r3, r0
 8004142:	6039      	str	r1, [r7, #0]
 8004144:	71fb      	strb	r3, [r7, #7]
	uint8_t b = (color24 >> 16) & 0xFF;
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	0c1b      	lsrs	r3, r3, #16
 800414a:	73fb      	strb	r3, [r7, #15]
	uint8_t g = (color24 >> 8) & 0xFF;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	0a1b      	lsrs	r3, r3, #8
 8004150:	73bb      	strb	r3, [r7, #14]
	uint8_t r = color24 & 0xFF;
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	737b      	strb	r3, [r7, #13]
	if (reverse) return ((b / 8) << 11) | ((g / 4) << 5) | (r / 8);
 8004156:	79fb      	ldrb	r3, [r7, #7]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d013      	beq.n	8004184 <H24_RGB565+0x4a>
 800415c:	7bfb      	ldrb	r3, [r7, #15]
 800415e:	08db      	lsrs	r3, r3, #3
 8004160:	b2db      	uxtb	r3, r3
 8004162:	02db      	lsls	r3, r3, #11
 8004164:	b21a      	sxth	r2, r3
 8004166:	7bbb      	ldrb	r3, [r7, #14]
 8004168:	089b      	lsrs	r3, r3, #2
 800416a:	b2db      	uxtb	r3, r3
 800416c:	015b      	lsls	r3, r3, #5
 800416e:	b21b      	sxth	r3, r3
 8004170:	4313      	orrs	r3, r2
 8004172:	b21a      	sxth	r2, r3
 8004174:	7b7b      	ldrb	r3, [r7, #13]
 8004176:	08db      	lsrs	r3, r3, #3
 8004178:	b2db      	uxtb	r3, r3
 800417a:	b21b      	sxth	r3, r3
 800417c:	4313      	orrs	r3, r2
 800417e:	b21b      	sxth	r3, r3
 8004180:	b29b      	uxth	r3, r3
 8004182:	e012      	b.n	80041aa <H24_RGB565+0x70>
	else return ((r / 8) << 11) | ((g / 4) << 5) | (b / 8);
 8004184:	7b7b      	ldrb	r3, [r7, #13]
 8004186:	08db      	lsrs	r3, r3, #3
 8004188:	b2db      	uxtb	r3, r3
 800418a:	02db      	lsls	r3, r3, #11
 800418c:	b21a      	sxth	r2, r3
 800418e:	7bbb      	ldrb	r3, [r7, #14]
 8004190:	089b      	lsrs	r3, r3, #2
 8004192:	b2db      	uxtb	r3, r3
 8004194:	015b      	lsls	r3, r3, #5
 8004196:	b21b      	sxth	r3, r3
 8004198:	4313      	orrs	r3, r2
 800419a:	b21a      	sxth	r2, r3
 800419c:	7bfb      	ldrb	r3, [r7, #15]
 800419e:	08db      	lsrs	r3, r3, #3
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	b21b      	sxth	r3, r3
 80041a4:	4313      	orrs	r3, r2
 80041a6:	b21b      	sxth	r3, r3
 80041a8:	b29b      	uxth	r3, r3
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3714      	adds	r7, #20
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <LCD_Send_Cmd>:

void LCD_Send_Cmd(uint16_t cmd)
{
 80041b6:	b480      	push	{r7}
 80041b8:	b083      	sub	sp, #12
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	4603      	mov	r3, r0
 80041be:	80fb      	strh	r3, [r7, #6]
	CMD = cmd;
 80041c0:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80041c4:	88fb      	ldrh	r3, [r7, #6]
 80041c6:	8013      	strh	r3, [r2, #0]
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <LCD_Send_Dat>:

void LCD_Send_Dat(uint16_t dat)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	4603      	mov	r3, r0
 80041dc:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i = 0; i < 1; i++)
 80041de:	2300      	movs	r3, #0
 80041e0:	73fb      	strb	r3, [r7, #15]
 80041e2:	e005      	b.n	80041f0 <LCD_Send_Dat+0x1c>
	DAT = dat;
 80041e4:	4a07      	ldr	r2, [pc, #28]	; (8004204 <LCD_Send_Dat+0x30>)
 80041e6:	88fb      	ldrh	r3, [r7, #6]
 80041e8:	8013      	strh	r3, [r2, #0]
	for (uint8_t i = 0; i < 1; i++)
 80041ea:	7bfb      	ldrb	r3, [r7, #15]
 80041ec:	3301      	adds	r3, #1
 80041ee:	73fb      	strb	r3, [r7, #15]
 80041f0:	7bfb      	ldrb	r3, [r7, #15]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d0f6      	beq.n	80041e4 <LCD_Send_Dat+0x10>
}
 80041f6:	bf00      	nop
 80041f8:	bf00      	nop
 80041fa:	3714      	adds	r7, #20
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr
 8004204:	60080000 	.word	0x60080000

08004208 <LCD_Window>:

void LCD_Window(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8004208:	b590      	push	{r4, r7, lr}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	4604      	mov	r4, r0
 8004210:	4608      	mov	r0, r1
 8004212:	4611      	mov	r1, r2
 8004214:	461a      	mov	r2, r3
 8004216:	4623      	mov	r3, r4
 8004218:	80fb      	strh	r3, [r7, #6]
 800421a:	4603      	mov	r3, r0
 800421c:	80bb      	strh	r3, [r7, #4]
 800421e:	460b      	mov	r3, r1
 8004220:	807b      	strh	r3, [r7, #2]
 8004222:	4613      	mov	r3, r2
 8004224:	803b      	strh	r3, [r7, #0]
	LCD_Send_Cmd(LCD_COLUMN_ADDR);
 8004226:	202a      	movs	r0, #42	; 0x2a
 8004228:	f7ff ffc5 	bl	80041b6 <LCD_Send_Cmd>
	LCD_Send_Dat(y1 >> 8);
 800422c:	88bb      	ldrh	r3, [r7, #4]
 800422e:	0a1b      	lsrs	r3, r3, #8
 8004230:	b29b      	uxth	r3, r3
 8004232:	4618      	mov	r0, r3
 8004234:	f7ff ffce 	bl	80041d4 <LCD_Send_Dat>
	LCD_Send_Dat(y1 & 0x00FF);
 8004238:	88bb      	ldrh	r3, [r7, #4]
 800423a:	b2db      	uxtb	r3, r3
 800423c:	b29b      	uxth	r3, r3
 800423e:	4618      	mov	r0, r3
 8004240:	f7ff ffc8 	bl	80041d4 <LCD_Send_Dat>
	LCD_Send_Dat(y2 >> 8);
 8004244:	883b      	ldrh	r3, [r7, #0]
 8004246:	0a1b      	lsrs	r3, r3, #8
 8004248:	b29b      	uxth	r3, r3
 800424a:	4618      	mov	r0, r3
 800424c:	f7ff ffc2 	bl	80041d4 <LCD_Send_Dat>
	LCD_Send_Dat(y2 & 0x00FF);
 8004250:	883b      	ldrh	r3, [r7, #0]
 8004252:	b2db      	uxtb	r3, r3
 8004254:	b29b      	uxth	r3, r3
 8004256:	4618      	mov	r0, r3
 8004258:	f7ff ffbc 	bl	80041d4 <LCD_Send_Dat>
	LCD_Send_Cmd(LCD_PAGE_ADDR);
 800425c:	202b      	movs	r0, #43	; 0x2b
 800425e:	f7ff ffaa 	bl	80041b6 <LCD_Send_Cmd>
	LCD_Send_Dat(x1 >> 8);
 8004262:	88fb      	ldrh	r3, [r7, #6]
 8004264:	0a1b      	lsrs	r3, r3, #8
 8004266:	b29b      	uxth	r3, r3
 8004268:	4618      	mov	r0, r3
 800426a:	f7ff ffb3 	bl	80041d4 <LCD_Send_Dat>
	LCD_Send_Dat(x1 & 0x00FF);
 800426e:	88fb      	ldrh	r3, [r7, #6]
 8004270:	b2db      	uxtb	r3, r3
 8004272:	b29b      	uxth	r3, r3
 8004274:	4618      	mov	r0, r3
 8004276:	f7ff ffad 	bl	80041d4 <LCD_Send_Dat>
	LCD_Send_Dat(x2 >> 8);
 800427a:	887b      	ldrh	r3, [r7, #2]
 800427c:	0a1b      	lsrs	r3, r3, #8
 800427e:	b29b      	uxth	r3, r3
 8004280:	4618      	mov	r0, r3
 8004282:	f7ff ffa7 	bl	80041d4 <LCD_Send_Dat>
	LCD_Send_Dat(x2 & 0x00FF);
 8004286:	887b      	ldrh	r3, [r7, #2]
 8004288:	b2db      	uxtb	r3, r3
 800428a:	b29b      	uxth	r3, r3
 800428c:	4618      	mov	r0, r3
 800428e:	f7ff ffa1 	bl	80041d4 <LCD_Send_Dat>
	LCD_Send_Cmd(LCD_GRAM);
 8004292:	202c      	movs	r0, #44	; 0x2c
 8004294:	f7ff ff8f 	bl	80041b6 <LCD_Send_Cmd>
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	bd90      	pop	{r4, r7, pc}

080042a0 <LCD_Pixel>:

void LCD_Pixel(uint16_t x, uint16_t y, uint32_t color24)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	4603      	mov	r3, r0
 80042a8:	603a      	str	r2, [r7, #0]
 80042aa:	80fb      	strh	r3, [r7, #6]
 80042ac:	460b      	mov	r3, r1
 80042ae:	80bb      	strh	r3, [r7, #4]
	LCD_Window(x, y, x, y);
 80042b0:	88bb      	ldrh	r3, [r7, #4]
 80042b2:	88fa      	ldrh	r2, [r7, #6]
 80042b4:	88b9      	ldrh	r1, [r7, #4]
 80042b6:	88f8      	ldrh	r0, [r7, #6]
 80042b8:	f7ff ffa6 	bl	8004208 <LCD_Window>
	LCD_Send_Dat(H24_RGB565(1, color24));
 80042bc:	6839      	ldr	r1, [r7, #0]
 80042be:	2001      	movs	r0, #1
 80042c0:	f7ff ff3b 	bl	800413a <H24_RGB565>
 80042c4:	4603      	mov	r3, r0
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7ff ff84 	bl	80041d4 <LCD_Send_Dat>
}
 80042cc:	bf00      	nop
 80042ce:	3708      	adds	r7, #8
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <LCD_Rect_Fill>:

void LCD_Rect_Fill(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint32_t color24)
{
 80042d4:	b590      	push	{r4, r7, lr}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	4604      	mov	r4, r0
 80042dc:	4608      	mov	r0, r1
 80042de:	4611      	mov	r1, r2
 80042e0:	461a      	mov	r2, r3
 80042e2:	4623      	mov	r3, r4
 80042e4:	80fb      	strh	r3, [r7, #6]
 80042e6:	4603      	mov	r3, r0
 80042e8:	80bb      	strh	r3, [r7, #4]
 80042ea:	460b      	mov	r3, r1
 80042ec:	807b      	strh	r3, [r7, #2]
 80042ee:	4613      	mov	r3, r2
 80042f0:	803b      	strh	r3, [r7, #0]
	uint32_t i = 0;
 80042f2:	2300      	movs	r3, #0
 80042f4:	60fb      	str	r3, [r7, #12]
	uint32_t j = (uint32_t) w * (uint32_t) h;
 80042f6:	887b      	ldrh	r3, [r7, #2]
 80042f8:	883a      	ldrh	r2, [r7, #0]
 80042fa:	fb02 f303 	mul.w	r3, r2, r3
 80042fe:	60bb      	str	r3, [r7, #8]
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8004300:	88ba      	ldrh	r2, [r7, #4]
 8004302:	883b      	ldrh	r3, [r7, #0]
 8004304:	4413      	add	r3, r2
 8004306:	b29b      	uxth	r3, r3
 8004308:	3b01      	subs	r3, #1
 800430a:	b29c      	uxth	r4, r3
 800430c:	88fa      	ldrh	r2, [r7, #6]
 800430e:	887b      	ldrh	r3, [r7, #2]
 8004310:	4413      	add	r3, r2
 8004312:	b29b      	uxth	r3, r3
 8004314:	3b01      	subs	r3, #1
 8004316:	b29b      	uxth	r3, r3
 8004318:	88f9      	ldrh	r1, [r7, #6]
 800431a:	88b8      	ldrh	r0, [r7, #4]
 800431c:	4622      	mov	r2, r4
 800431e:	f7ff ff73 	bl	8004208 <LCD_Window>
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 8004322:	2300      	movs	r3, #0
 8004324:	60fb      	str	r3, [r7, #12]
 8004326:	e00a      	b.n	800433e <LCD_Rect_Fill+0x6a>
 8004328:	6a39      	ldr	r1, [r7, #32]
 800432a:	2001      	movs	r0, #1
 800432c:	f7ff ff05 	bl	800413a <H24_RGB565>
 8004330:	4603      	mov	r3, r0
 8004332:	4618      	mov	r0, r3
 8004334:	f7ff ff4e 	bl	80041d4 <LCD_Send_Dat>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	3301      	adds	r3, #1
 800433c:	60fb      	str	r3, [r7, #12]
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	429a      	cmp	r2, r3
 8004344:	d3f0      	bcc.n	8004328 <LCD_Rect_Fill+0x54>
}
 8004346:	bf00      	nop
 8004348:	bf00      	nop
 800434a:	3714      	adds	r7, #20
 800434c:	46bd      	mov	sp, r7
 800434e:	bd90      	pop	{r4, r7, pc}

08004350 <LCD_Line>:

void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
{
 8004350:	b590      	push	{r4, r7, lr}
 8004352:	b08b      	sub	sp, #44	; 0x2c
 8004354:	af02      	add	r7, sp, #8
 8004356:	4604      	mov	r4, r0
 8004358:	4608      	mov	r0, r1
 800435a:	4611      	mov	r1, r2
 800435c:	461a      	mov	r2, r3
 800435e:	4623      	mov	r3, r4
 8004360:	80fb      	strh	r3, [r7, #6]
 8004362:	4603      	mov	r3, r0
 8004364:	80bb      	strh	r3, [r7, #4]
 8004366:	460b      	mov	r3, r1
 8004368:	807b      	strh	r3, [r7, #2]
 800436a:	4613      	mov	r3, r2
 800436c:	803b      	strh	r3, [r7, #0]
	int deltaX = abs(x2 - x1);
 800436e:	887a      	ldrh	r2, [r7, #2]
 8004370:	88fb      	ldrh	r3, [r7, #6]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	2b00      	cmp	r3, #0
 8004376:	bfb8      	it	lt
 8004378:	425b      	neglt	r3, r3
 800437a:	61bb      	str	r3, [r7, #24]
	int deltaY = abs(y2 - y1);
 800437c:	883a      	ldrh	r2, [r7, #0]
 800437e:	88bb      	ldrh	r3, [r7, #4]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	bfb8      	it	lt
 8004386:	425b      	neglt	r3, r3
 8004388:	617b      	str	r3, [r7, #20]
	int signX = x1 < x2 ? 1 : -1;
 800438a:	88fa      	ldrh	r2, [r7, #6]
 800438c:	887b      	ldrh	r3, [r7, #2]
 800438e:	429a      	cmp	r2, r3
 8004390:	d201      	bcs.n	8004396 <LCD_Line+0x46>
 8004392:	2301      	movs	r3, #1
 8004394:	e001      	b.n	800439a <LCD_Line+0x4a>
 8004396:	f04f 33ff 	mov.w	r3, #4294967295
 800439a:	613b      	str	r3, [r7, #16]
	int signY = y1 < y2 ? 1 : -1;
 800439c:	88ba      	ldrh	r2, [r7, #4]
 800439e:	883b      	ldrh	r3, [r7, #0]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d201      	bcs.n	80043a8 <LCD_Line+0x58>
 80043a4:	2301      	movs	r3, #1
 80043a6:	e001      	b.n	80043ac <LCD_Line+0x5c>
 80043a8:	f04f 33ff 	mov.w	r3, #4294967295
 80043ac:	60fb      	str	r3, [r7, #12]
	int error = deltaX - deltaY;
 80043ae:	69ba      	ldr	r2, [r7, #24]
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	61fb      	str	r3, [r7, #28]
	int error2 = 0;
 80043b6:	2300      	movs	r3, #0
 80043b8:	60bb      	str	r3, [r7, #8]
	for (;;)
	{
		LCD_Rect_Fill(x1, y1, size, size, color24);
 80043ba:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80043be:	b29a      	uxth	r2, r3
 80043c0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80043c4:	b29c      	uxth	r4, r3
 80043c6:	88b9      	ldrh	r1, [r7, #4]
 80043c8:	88f8      	ldrh	r0, [r7, #6]
 80043ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043cc:	9300      	str	r3, [sp, #0]
 80043ce:	4623      	mov	r3, r4
 80043d0:	f7ff ff80 	bl	80042d4 <LCD_Rect_Fill>
		if (x1 == x2 && y1 == y2)
 80043d4:	88fa      	ldrh	r2, [r7, #6]
 80043d6:	887b      	ldrh	r3, [r7, #2]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d103      	bne.n	80043e4 <LCD_Line+0x94>
 80043dc:	88ba      	ldrh	r2, [r7, #4]
 80043de:	883b      	ldrh	r3, [r7, #0]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d01e      	beq.n	8004422 <LCD_Line+0xd2>
		break;
		error2 = error * 2;
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	005b      	lsls	r3, r3, #1
 80043e8:	60bb      	str	r3, [r7, #8]
		if (error2 > -deltaY)
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	425b      	negs	r3, r3
 80043ee:	68ba      	ldr	r2, [r7, #8]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	dd08      	ble.n	8004406 <LCD_Line+0xb6>
		{
			error -= deltaY;
 80043f4:	69fa      	ldr	r2, [r7, #28]
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	61fb      	str	r3, [r7, #28]
			x1 += signX;
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	b29a      	uxth	r2, r3
 8004400:	88fb      	ldrh	r3, [r7, #6]
 8004402:	4413      	add	r3, r2
 8004404:	80fb      	strh	r3, [r7, #6]
		}
		if (error2 < deltaX)
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	429a      	cmp	r2, r3
 800440c:	dad5      	bge.n	80043ba <LCD_Line+0x6a>
		{
			error += deltaX;
 800440e:	69fa      	ldr	r2, [r7, #28]
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	4413      	add	r3, r2
 8004414:	61fb      	str	r3, [r7, #28]
			y1 += signY;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	b29a      	uxth	r2, r3
 800441a:	88bb      	ldrh	r3, [r7, #4]
 800441c:	4413      	add	r3, r2
 800441e:	80bb      	strh	r3, [r7, #4]
		LCD_Rect_Fill(x1, y1, size, size, color24);
 8004420:	e7cb      	b.n	80043ba <LCD_Line+0x6a>
		break;
 8004422:	bf00      	nop
		}
	}
}
 8004424:	bf00      	nop
 8004426:	3724      	adds	r7, #36	; 0x24
 8004428:	46bd      	mov	sp, r7
 800442a:	bd90      	pop	{r4, r7, pc}

0800442c <LCD_Triangle>:

void LCD_Triangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint8_t size, uint32_t color24)
{
 800442c:	b590      	push	{r4, r7, lr}
 800442e:	b085      	sub	sp, #20
 8004430:	af02      	add	r7, sp, #8
 8004432:	4604      	mov	r4, r0
 8004434:	4608      	mov	r0, r1
 8004436:	4611      	mov	r1, r2
 8004438:	461a      	mov	r2, r3
 800443a:	4623      	mov	r3, r4
 800443c:	80fb      	strh	r3, [r7, #6]
 800443e:	4603      	mov	r3, r0
 8004440:	80bb      	strh	r3, [r7, #4]
 8004442:	460b      	mov	r3, r1
 8004444:	807b      	strh	r3, [r7, #2]
 8004446:	4613      	mov	r3, r2
 8004448:	803b      	strh	r3, [r7, #0]
	LCD_Line(x1, y1, x2, y2, size, color24);
 800444a:	883c      	ldrh	r4, [r7, #0]
 800444c:	887a      	ldrh	r2, [r7, #2]
 800444e:	88b9      	ldrh	r1, [r7, #4]
 8004450:	88f8      	ldrh	r0, [r7, #6]
 8004452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004454:	9301      	str	r3, [sp, #4]
 8004456:	f897 3020 	ldrb.w	r3, [r7, #32]
 800445a:	9300      	str	r3, [sp, #0]
 800445c:	4623      	mov	r3, r4
 800445e:	f7ff ff77 	bl	8004350 <LCD_Line>
	LCD_Line(x2, y2, x3, y3, size, color24);
 8004462:	8bbc      	ldrh	r4, [r7, #28]
 8004464:	8b3a      	ldrh	r2, [r7, #24]
 8004466:	8839      	ldrh	r1, [r7, #0]
 8004468:	8878      	ldrh	r0, [r7, #2]
 800446a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446c:	9301      	str	r3, [sp, #4]
 800446e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	4623      	mov	r3, r4
 8004476:	f7ff ff6b 	bl	8004350 <LCD_Line>
	LCD_Line(x3, y3, x1, y1, size, color24);
 800447a:	88bc      	ldrh	r4, [r7, #4]
 800447c:	88fa      	ldrh	r2, [r7, #6]
 800447e:	8bb9      	ldrh	r1, [r7, #28]
 8004480:	8b38      	ldrh	r0, [r7, #24]
 8004482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004484:	9301      	str	r3, [sp, #4]
 8004486:	f897 3020 	ldrb.w	r3, [r7, #32]
 800448a:	9300      	str	r3, [sp, #0]
 800448c:	4623      	mov	r3, r4
 800448e:	f7ff ff5f 	bl	8004350 <LCD_Line>
}
 8004492:	bf00      	nop
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	bd90      	pop	{r4, r7, pc}

0800449a <LCD_Triangle_Fill>:

#define ABS(x) ((x) > 0 ? (x) : -(x))

void LCD_Triangle_Fill(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint32_t color24)
{
 800449a:	b590      	push	{r4, r7, lr}
 800449c:	b08d      	sub	sp, #52	; 0x34
 800449e:	af02      	add	r7, sp, #8
 80044a0:	4604      	mov	r4, r0
 80044a2:	4608      	mov	r0, r1
 80044a4:	4611      	mov	r1, r2
 80044a6:	461a      	mov	r2, r3
 80044a8:	4623      	mov	r3, r4
 80044aa:	80fb      	strh	r3, [r7, #6]
 80044ac:	4603      	mov	r3, r0
 80044ae:	80bb      	strh	r3, [r7, #4]
 80044b0:	460b      	mov	r3, r1
 80044b2:	807b      	strh	r3, [r7, #2]
 80044b4:	4613      	mov	r3, r2
 80044b6:	803b      	strh	r3, [r7, #0]
	int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 80044b8:	2300      	movs	r3, #0
 80044ba:	823b      	strh	r3, [r7, #16]
 80044bc:	2300      	movs	r3, #0
 80044be:	81fb      	strh	r3, [r7, #14]
 80044c0:	2300      	movs	r3, #0
 80044c2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80044c4:	2300      	movs	r3, #0
 80044c6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80044c8:	2300      	movs	r3, #0
 80044ca:	847b      	strh	r3, [r7, #34]	; 0x22
 80044cc:	2300      	movs	r3, #0
 80044ce:	843b      	strh	r3, [r7, #32]
	yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 80044d0:	2300      	movs	r3, #0
 80044d2:	83fb      	strh	r3, [r7, #30]
 80044d4:	2300      	movs	r3, #0
 80044d6:	83bb      	strh	r3, [r7, #28]
 80044d8:	2300      	movs	r3, #0
 80044da:	837b      	strh	r3, [r7, #26]
 80044dc:	2300      	movs	r3, #0
 80044de:	833b      	strh	r3, [r7, #24]
 80044e0:	2300      	movs	r3, #0
 80044e2:	82fb      	strh	r3, [r7, #22]
 80044e4:	2300      	movs	r3, #0
 80044e6:	82bb      	strh	r3, [r7, #20]
	curpixel = 0;
 80044e8:	2300      	movs	r3, #0
 80044ea:	827b      	strh	r3, [r7, #18]
	
	deltax = ABS(x2 - x1);
 80044ec:	887a      	ldrh	r2, [r7, #2]
 80044ee:	88fb      	ldrh	r3, [r7, #6]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	bfb8      	it	lt
 80044f6:	425b      	neglt	r3, r3
 80044f8:	823b      	strh	r3, [r7, #16]
	deltay = ABS(y2 - y1);
 80044fa:	883a      	ldrh	r2, [r7, #0]
 80044fc:	88bb      	ldrh	r3, [r7, #4]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	2b00      	cmp	r3, #0
 8004502:	bfb8      	it	lt
 8004504:	425b      	neglt	r3, r3
 8004506:	81fb      	strh	r3, [r7, #14]
	x = x1;
 8004508:	88fb      	ldrh	r3, [r7, #6]
 800450a:	84fb      	strh	r3, [r7, #38]	; 0x26
	y = y1;
 800450c:	88bb      	ldrh	r3, [r7, #4]
 800450e:	84bb      	strh	r3, [r7, #36]	; 0x24

	if (x2 >= x1)
 8004510:	887a      	ldrh	r2, [r7, #2]
 8004512:	88fb      	ldrh	r3, [r7, #6]
 8004514:	429a      	cmp	r2, r3
 8004516:	d304      	bcc.n	8004522 <LCD_Triangle_Fill+0x88>
	{
		xinc1 = 1;
 8004518:	2301      	movs	r3, #1
 800451a:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = 1;
 800451c:	2301      	movs	r3, #1
 800451e:	843b      	strh	r3, [r7, #32]
 8004520:	e005      	b.n	800452e <LCD_Triangle_Fill+0x94>
	}
	else
	{
		xinc1 = -1;
 8004522:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004526:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = -1;
 8004528:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800452c:	843b      	strh	r3, [r7, #32]
	}

	if (y2 >= y1)
 800452e:	883a      	ldrh	r2, [r7, #0]
 8004530:	88bb      	ldrh	r3, [r7, #4]
 8004532:	429a      	cmp	r2, r3
 8004534:	d304      	bcc.n	8004540 <LCD_Triangle_Fill+0xa6>
	{
		yinc1 = 1;
 8004536:	2301      	movs	r3, #1
 8004538:	83fb      	strh	r3, [r7, #30]
		yinc2 = 1;
 800453a:	2301      	movs	r3, #1
 800453c:	83bb      	strh	r3, [r7, #28]
 800453e:	e005      	b.n	800454c <LCD_Triangle_Fill+0xb2>
	}
	else
	{
		yinc1 = -1;
 8004540:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004544:	83fb      	strh	r3, [r7, #30]
		yinc2 = -1;
 8004546:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800454a:	83bb      	strh	r3, [r7, #28]
	}

	if (deltax >= deltay)
 800454c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004550:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004554:	429a      	cmp	r2, r3
 8004556:	db10      	blt.n	800457a <LCD_Triangle_Fill+0xe0>
	{
		xinc1 = 0;
 8004558:	2300      	movs	r3, #0
 800455a:	847b      	strh	r3, [r7, #34]	; 0x22
		yinc2 = 0;
 800455c:	2300      	movs	r3, #0
 800455e:	83bb      	strh	r3, [r7, #28]
		den = deltax;
 8004560:	8a3b      	ldrh	r3, [r7, #16]
 8004562:	837b      	strh	r3, [r7, #26]
		num = deltax / 2;
 8004564:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004568:	0fda      	lsrs	r2, r3, #31
 800456a:	4413      	add	r3, r2
 800456c:	105b      	asrs	r3, r3, #1
 800456e:	833b      	strh	r3, [r7, #24]
		numadd = deltay;
 8004570:	89fb      	ldrh	r3, [r7, #14]
 8004572:	82fb      	strh	r3, [r7, #22]
		numpixels = deltax;
 8004574:	8a3b      	ldrh	r3, [r7, #16]
 8004576:	82bb      	strh	r3, [r7, #20]
 8004578:	e00f      	b.n	800459a <LCD_Triangle_Fill+0x100>
	}
	else
	{
		xinc2 = 0;
 800457a:	2300      	movs	r3, #0
 800457c:	843b      	strh	r3, [r7, #32]
		yinc1 = 0;
 800457e:	2300      	movs	r3, #0
 8004580:	83fb      	strh	r3, [r7, #30]
		den = deltay;
 8004582:	89fb      	ldrh	r3, [r7, #14]
 8004584:	837b      	strh	r3, [r7, #26]
		num = deltay / 2;
 8004586:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800458a:	0fda      	lsrs	r2, r3, #31
 800458c:	4413      	add	r3, r2
 800458e:	105b      	asrs	r3, r3, #1
 8004590:	833b      	strh	r3, [r7, #24]
		numadd = deltax;
 8004592:	8a3b      	ldrh	r3, [r7, #16]
 8004594:	82fb      	strh	r3, [r7, #22]
		numpixels = deltay;
 8004596:	89fb      	ldrh	r3, [r7, #14]
 8004598:	82bb      	strh	r3, [r7, #20]
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++)
 800459a:	2300      	movs	r3, #0
 800459c:	827b      	strh	r3, [r7, #18]
 800459e:	e034      	b.n	800460a <LCD_Triangle_Fill+0x170>
	{
		LCD_Line(x, y, x3, y3, 1, color24);
 80045a0:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80045a2:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80045a4:	8fbc      	ldrh	r4, [r7, #60]	; 0x3c
 80045a6:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80045a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045aa:	9301      	str	r3, [sp, #4]
 80045ac:	2301      	movs	r3, #1
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	4623      	mov	r3, r4
 80045b2:	f7ff fecd 	bl	8004350 <LCD_Line>

		num += numadd;
 80045b6:	8b3a      	ldrh	r2, [r7, #24]
 80045b8:	8afb      	ldrh	r3, [r7, #22]
 80045ba:	4413      	add	r3, r2
 80045bc:	b29b      	uxth	r3, r3
 80045be:	833b      	strh	r3, [r7, #24]
		if (num >= den)
 80045c0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80045c4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	db0e      	blt.n	80045ea <LCD_Triangle_Fill+0x150>
		{
			num -= den;
 80045cc:	8b3a      	ldrh	r2, [r7, #24]
 80045ce:	8b7b      	ldrh	r3, [r7, #26]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	833b      	strh	r3, [r7, #24]
			x += xinc1;
 80045d6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80045d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80045da:	4413      	add	r3, r2
 80045dc:	b29b      	uxth	r3, r3
 80045de:	84fb      	strh	r3, [r7, #38]	; 0x26
			y += yinc1;
 80045e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80045e2:	8bfb      	ldrh	r3, [r7, #30]
 80045e4:	4413      	add	r3, r2
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		x += xinc2;
 80045ea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80045ec:	8c3b      	ldrh	r3, [r7, #32]
 80045ee:	4413      	add	r3, r2
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	84fb      	strh	r3, [r7, #38]	; 0x26
		y += yinc2;
 80045f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80045f6:	8bbb      	ldrh	r3, [r7, #28]
 80045f8:	4413      	add	r3, r2
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80045fe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004602:	b29b      	uxth	r3, r3
 8004604:	3301      	adds	r3, #1
 8004606:	b29b      	uxth	r3, r3
 8004608:	827b      	strh	r3, [r7, #18]
 800460a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800460e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004612:	429a      	cmp	r2, r3
 8004614:	ddc4      	ble.n	80045a0 <LCD_Triangle_Fill+0x106>
	}
}
 8004616:	bf00      	nop
 8004618:	bf00      	nop
 800461a:	372c      	adds	r7, #44	; 0x2c
 800461c:	46bd      	mov	sp, r7
 800461e:	bd90      	pop	{r4, r7, pc}

08004620 <LCD_Rect>:

void LCD_Rect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t size, uint32_t color24)
{
 8004620:	b590      	push	{r4, r7, lr}
 8004622:	b085      	sub	sp, #20
 8004624:	af02      	add	r7, sp, #8
 8004626:	4604      	mov	r4, r0
 8004628:	4608      	mov	r0, r1
 800462a:	4611      	mov	r1, r2
 800462c:	461a      	mov	r2, r3
 800462e:	4623      	mov	r3, r4
 8004630:	80fb      	strh	r3, [r7, #6]
 8004632:	4603      	mov	r3, r0
 8004634:	80bb      	strh	r3, [r7, #4]
 8004636:	460b      	mov	r3, r1
 8004638:	807b      	strh	r3, [r7, #2]
 800463a:	4613      	mov	r3, r2
 800463c:	803b      	strh	r3, [r7, #0]
	LCD_Line(x, y, x + w, y, size, color24);
 800463e:	88fa      	ldrh	r2, [r7, #6]
 8004640:	887b      	ldrh	r3, [r7, #2]
 8004642:	4413      	add	r3, r2
 8004644:	b29a      	uxth	r2, r3
 8004646:	88bc      	ldrh	r4, [r7, #4]
 8004648:	88b9      	ldrh	r1, [r7, #4]
 800464a:	88f8      	ldrh	r0, [r7, #6]
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	9301      	str	r3, [sp, #4]
 8004650:	7e3b      	ldrb	r3, [r7, #24]
 8004652:	9300      	str	r3, [sp, #0]
 8004654:	4623      	mov	r3, r4
 8004656:	f7ff fe7b 	bl	8004350 <LCD_Line>
	LCD_Line(x, y + h, x + w, y + h, size, color24);
 800465a:	88ba      	ldrh	r2, [r7, #4]
 800465c:	883b      	ldrh	r3, [r7, #0]
 800465e:	4413      	add	r3, r2
 8004660:	b299      	uxth	r1, r3
 8004662:	88fa      	ldrh	r2, [r7, #6]
 8004664:	887b      	ldrh	r3, [r7, #2]
 8004666:	4413      	add	r3, r2
 8004668:	b29c      	uxth	r4, r3
 800466a:	88ba      	ldrh	r2, [r7, #4]
 800466c:	883b      	ldrh	r3, [r7, #0]
 800466e:	4413      	add	r3, r2
 8004670:	b29a      	uxth	r2, r3
 8004672:	88f8      	ldrh	r0, [r7, #6]
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	9301      	str	r3, [sp, #4]
 8004678:	7e3b      	ldrb	r3, [r7, #24]
 800467a:	9300      	str	r3, [sp, #0]
 800467c:	4613      	mov	r3, r2
 800467e:	4622      	mov	r2, r4
 8004680:	f7ff fe66 	bl	8004350 <LCD_Line>
	LCD_Line(x, y, x, y + h, size, color24);
 8004684:	88ba      	ldrh	r2, [r7, #4]
 8004686:	883b      	ldrh	r3, [r7, #0]
 8004688:	4413      	add	r3, r2
 800468a:	b29c      	uxth	r4, r3
 800468c:	88fa      	ldrh	r2, [r7, #6]
 800468e:	88b9      	ldrh	r1, [r7, #4]
 8004690:	88f8      	ldrh	r0, [r7, #6]
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	9301      	str	r3, [sp, #4]
 8004696:	7e3b      	ldrb	r3, [r7, #24]
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	4623      	mov	r3, r4
 800469c:	f7ff fe58 	bl	8004350 <LCD_Line>
	LCD_Line(x + w, y, x + w, y + h, size, color24);
 80046a0:	88fa      	ldrh	r2, [r7, #6]
 80046a2:	887b      	ldrh	r3, [r7, #2]
 80046a4:	4413      	add	r3, r2
 80046a6:	b298      	uxth	r0, r3
 80046a8:	88fa      	ldrh	r2, [r7, #6]
 80046aa:	887b      	ldrh	r3, [r7, #2]
 80046ac:	4413      	add	r3, r2
 80046ae:	b29c      	uxth	r4, r3
 80046b0:	88ba      	ldrh	r2, [r7, #4]
 80046b2:	883b      	ldrh	r3, [r7, #0]
 80046b4:	4413      	add	r3, r2
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	88b9      	ldrh	r1, [r7, #4]
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	9301      	str	r3, [sp, #4]
 80046be:	7e3b      	ldrb	r3, [r7, #24]
 80046c0:	9300      	str	r3, [sp, #0]
 80046c2:	4613      	mov	r3, r2
 80046c4:	4622      	mov	r2, r4
 80046c6:	f7ff fe43 	bl	8004350 <LCD_Line>
}
 80046ca:	bf00      	nop
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd90      	pop	{r4, r7, pc}

080046d2 <LCD_Ellipse>:

void LCD_Ellipse(int16_t x0, int16_t y0, int16_t rx, int16_t ry, uint8_t fill, uint8_t size, uint32_t color24)
{
 80046d2:	b590      	push	{r4, r7, lr}
 80046d4:	b08b      	sub	sp, #44	; 0x2c
 80046d6:	af02      	add	r7, sp, #8
 80046d8:	4604      	mov	r4, r0
 80046da:	4608      	mov	r0, r1
 80046dc:	4611      	mov	r1, r2
 80046de:	461a      	mov	r2, r3
 80046e0:	4623      	mov	r3, r4
 80046e2:	80fb      	strh	r3, [r7, #6]
 80046e4:	4603      	mov	r3, r0
 80046e6:	80bb      	strh	r3, [r7, #4]
 80046e8:	460b      	mov	r3, r1
 80046ea:	807b      	strh	r3, [r7, #2]
 80046ec:	4613      	mov	r3, r2
 80046ee:	803b      	strh	r3, [r7, #0]
	int16_t x, y;
	int32_t rx2 = rx * rx;
 80046f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80046f4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80046f8:	fb02 f303 	mul.w	r3, r2, r3
 80046fc:	617b      	str	r3, [r7, #20]
	int32_t ry2 = ry * ry;
 80046fe:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004702:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004706:	fb02 f303 	mul.w	r3, r2, r3
 800470a:	613b      	str	r3, [r7, #16]
	int32_t fx2 = 4 * rx2;
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	60fb      	str	r3, [r7, #12]
	int32_t fy2 = 4 * ry2;
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	60bb      	str	r3, [r7, #8]
	int32_t s;
	if (fill)
 8004718:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800471c:	2b00      	cmp	r3, #0
 800471e:	f000 8101 	beq.w	8004924 <LCD_Ellipse+0x252>
	{
		for (x = 0, y = ry, s = 2 * ry2 + rx2 * (1 - 2 * ry); ry2 * x <= rx2 * y; x++)
 8004722:	2300      	movs	r3, #0
 8004724:	83fb      	strh	r3, [r7, #30]
 8004726:	883b      	ldrh	r3, [r7, #0]
 8004728:	83bb      	strh	r3, [r7, #28]
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	005a      	lsls	r2, r3, #1
 800472e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	f1c3 0301 	rsb	r3, r3, #1
 8004738:	6979      	ldr	r1, [r7, #20]
 800473a:	fb01 f303 	mul.w	r3, r1, r3
 800473e:	4413      	add	r3, r2
 8004740:	61bb      	str	r3, [r7, #24]
 8004742:	e062      	b.n	800480a <LCD_Ellipse+0x138>
		{
			LCD_Line(x0 - x, y0 - y, x0 + x + 1 - size, y0 - y, size, color24);
 8004744:	88fa      	ldrh	r2, [r7, #6]
 8004746:	8bfb      	ldrh	r3, [r7, #30]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	b298      	uxth	r0, r3
 800474c:	88ba      	ldrh	r2, [r7, #4]
 800474e:	8bbb      	ldrh	r3, [r7, #28]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	b299      	uxth	r1, r3
 8004754:	88fa      	ldrh	r2, [r7, #6]
 8004756:	8bfb      	ldrh	r3, [r7, #30]
 8004758:	4413      	add	r3, r2
 800475a:	b29a      	uxth	r2, r3
 800475c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004760:	b29b      	uxth	r3, r3
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	b29b      	uxth	r3, r3
 8004766:	3301      	adds	r3, #1
 8004768:	b29c      	uxth	r4, r3
 800476a:	88ba      	ldrh	r2, [r7, #4]
 800476c:	8bbb      	ldrh	r3, [r7, #28]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	b29a      	uxth	r2, r3
 8004772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004774:	9301      	str	r3, [sp, #4]
 8004776:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800477a:	9300      	str	r3, [sp, #0]
 800477c:	4613      	mov	r3, r2
 800477e:	4622      	mov	r2, r4
 8004780:	f7ff fde6 	bl	8004350 <LCD_Line>
			LCD_Line(x0 - x, y0 + y, x0 + x + 1 - size, y0 + y, size, color24);
 8004784:	88fa      	ldrh	r2, [r7, #6]
 8004786:	8bfb      	ldrh	r3, [r7, #30]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	b298      	uxth	r0, r3
 800478c:	88ba      	ldrh	r2, [r7, #4]
 800478e:	8bbb      	ldrh	r3, [r7, #28]
 8004790:	4413      	add	r3, r2
 8004792:	b299      	uxth	r1, r3
 8004794:	88fa      	ldrh	r2, [r7, #6]
 8004796:	8bfb      	ldrh	r3, [r7, #30]
 8004798:	4413      	add	r3, r2
 800479a:	b29a      	uxth	r2, r3
 800479c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	3301      	adds	r3, #1
 80047a8:	b29c      	uxth	r4, r3
 80047aa:	88ba      	ldrh	r2, [r7, #4]
 80047ac:	8bbb      	ldrh	r3, [r7, #28]
 80047ae:	4413      	add	r3, r2
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b4:	9301      	str	r3, [sp, #4]
 80047b6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80047ba:	9300      	str	r3, [sp, #0]
 80047bc:	4613      	mov	r3, r2
 80047be:	4622      	mov	r2, r4
 80047c0:	f7ff fdc6 	bl	8004350 <LCD_Line>
			if (s >= 0)
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	db0f      	blt.n	80047ea <LCD_Ellipse+0x118>
			{
				s += fx2 * (1 - y);
 80047ca:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80047ce:	f1c3 0301 	rsb	r3, r3, #1
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	fb02 f303 	mul.w	r3, r2, r3
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	4413      	add	r3, r2
 80047dc:	61bb      	str	r3, [r7, #24]
				y--;
 80047de:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	3b01      	subs	r3, #1
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	83bb      	strh	r3, [r7, #28]
			}
			s += ry2 * ((4 * x) + 6);
 80047ea:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	3306      	adds	r3, #6
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	fb02 f303 	mul.w	r3, r2, r3
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	4413      	add	r3, r2
 80047fc:	61bb      	str	r3, [r7, #24]
		for (x = 0, y = ry, s = 2 * ry2 + rx2 * (1 - 2 * ry); ry2 * x <= rx2 * y; x++)
 80047fe:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004802:	b29b      	uxth	r3, r3
 8004804:	3301      	adds	r3, #1
 8004806:	b29b      	uxth	r3, r3
 8004808:	83fb      	strh	r3, [r7, #30]
 800480a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	fb03 f202 	mul.w	r2, r3, r2
 8004814:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004818:	6979      	ldr	r1, [r7, #20]
 800481a:	fb01 f303 	mul.w	r3, r1, r3
 800481e:	429a      	cmp	r2, r3
 8004820:	dd90      	ble.n	8004744 <LCD_Ellipse+0x72>
		}
		for (x = rx, y = 0, s = 2 * rx2 + ry2 * (1-2 * rx); rx2 * y <= ry2 * x; y++)
 8004822:	887b      	ldrh	r3, [r7, #2]
 8004824:	83fb      	strh	r3, [r7, #30]
 8004826:	2300      	movs	r3, #0
 8004828:	83bb      	strh	r3, [r7, #28]
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	005a      	lsls	r2, r3, #1
 800482e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004832:	005b      	lsls	r3, r3, #1
 8004834:	f1c3 0301 	rsb	r3, r3, #1
 8004838:	6939      	ldr	r1, [r7, #16]
 800483a:	fb01 f303 	mul.w	r3, r1, r3
 800483e:	4413      	add	r3, r2
 8004840:	61bb      	str	r3, [r7, #24]
 8004842:	e062      	b.n	800490a <LCD_Ellipse+0x238>
		{
			LCD_Line(x0 - x, y0 - y, x0 + x + 1 - size, y0 - y, size, color24);
 8004844:	88fa      	ldrh	r2, [r7, #6]
 8004846:	8bfb      	ldrh	r3, [r7, #30]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	b298      	uxth	r0, r3
 800484c:	88ba      	ldrh	r2, [r7, #4]
 800484e:	8bbb      	ldrh	r3, [r7, #28]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	b299      	uxth	r1, r3
 8004854:	88fa      	ldrh	r2, [r7, #6]
 8004856:	8bfb      	ldrh	r3, [r7, #30]
 8004858:	4413      	add	r3, r2
 800485a:	b29a      	uxth	r2, r3
 800485c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004860:	b29b      	uxth	r3, r3
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	b29b      	uxth	r3, r3
 8004866:	3301      	adds	r3, #1
 8004868:	b29c      	uxth	r4, r3
 800486a:	88ba      	ldrh	r2, [r7, #4]
 800486c:	8bbb      	ldrh	r3, [r7, #28]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	b29a      	uxth	r2, r3
 8004872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004874:	9301      	str	r3, [sp, #4]
 8004876:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800487a:	9300      	str	r3, [sp, #0]
 800487c:	4613      	mov	r3, r2
 800487e:	4622      	mov	r2, r4
 8004880:	f7ff fd66 	bl	8004350 <LCD_Line>
			LCD_Line(x0 - x, y0 + y, x0 + x + 1 - size, y0 + y, size, color24);
 8004884:	88fa      	ldrh	r2, [r7, #6]
 8004886:	8bfb      	ldrh	r3, [r7, #30]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	b298      	uxth	r0, r3
 800488c:	88ba      	ldrh	r2, [r7, #4]
 800488e:	8bbb      	ldrh	r3, [r7, #28]
 8004890:	4413      	add	r3, r2
 8004892:	b299      	uxth	r1, r3
 8004894:	88fa      	ldrh	r2, [r7, #6]
 8004896:	8bfb      	ldrh	r3, [r7, #30]
 8004898:	4413      	add	r3, r2
 800489a:	b29a      	uxth	r2, r3
 800489c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	3301      	adds	r3, #1
 80048a8:	b29c      	uxth	r4, r3
 80048aa:	88ba      	ldrh	r2, [r7, #4]
 80048ac:	8bbb      	ldrh	r3, [r7, #28]
 80048ae:	4413      	add	r3, r2
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b4:	9301      	str	r3, [sp, #4]
 80048b6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80048ba:	9300      	str	r3, [sp, #0]
 80048bc:	4613      	mov	r3, r2
 80048be:	4622      	mov	r2, r4
 80048c0:	f7ff fd46 	bl	8004350 <LCD_Line>
			if (s >= 0)
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	db0f      	blt.n	80048ea <LCD_Ellipse+0x218>
			{
				s += fy2 * (1 - x);
 80048ca:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80048ce:	f1c3 0301 	rsb	r3, r3, #1
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	fb02 f303 	mul.w	r3, r2, r3
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	4413      	add	r3, r2
 80048dc:	61bb      	str	r3, [r7, #24]
				x--;
 80048de:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	3b01      	subs	r3, #1
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	83fb      	strh	r3, [r7, #30]
			}
			s += rx2 * ((4 * y) + 6);
 80048ea:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	3306      	adds	r3, #6
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	fb02 f303 	mul.w	r3, r2, r3
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	4413      	add	r3, r2
 80048fc:	61bb      	str	r3, [r7, #24]
		for (x = rx, y = 0, s = 2 * rx2 + ry2 * (1-2 * rx); rx2 * y <= ry2 * x; y++)
 80048fe:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004902:	b29b      	uxth	r3, r3
 8004904:	3301      	adds	r3, #1
 8004906:	b29b      	uxth	r3, r3
 8004908:	83bb      	strh	r3, [r7, #28]
 800490a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	fb03 f202 	mul.w	r2, r3, r2
 8004914:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004918:	6939      	ldr	r1, [r7, #16]
 800491a:	fb01 f303 	mul.w	r3, r1, r3
 800491e:	429a      	cmp	r2, r3
 8004920:	dd90      	ble.n	8004844 <LCD_Ellipse+0x172>
				x--;
			}
			s += rx2 * ((4 * y) + 6);
		}
	}
}
 8004922:	e117      	b.n	8004b54 <LCD_Ellipse+0x482>
		for (x = 0, y = ry, s = 2 * ry2 + rx2 * (1 - 2 * ry); ry2 * x <= rx2 * y; x++)
 8004924:	2300      	movs	r3, #0
 8004926:	83fb      	strh	r3, [r7, #30]
 8004928:	883b      	ldrh	r3, [r7, #0]
 800492a:	83bb      	strh	r3, [r7, #28]
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	005a      	lsls	r2, r3, #1
 8004930:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004934:	005b      	lsls	r3, r3, #1
 8004936:	f1c3 0301 	rsb	r3, r3, #1
 800493a:	6979      	ldr	r1, [r7, #20]
 800493c:	fb01 f303 	mul.w	r3, r1, r3
 8004940:	4413      	add	r3, r2
 8004942:	61bb      	str	r3, [r7, #24]
 8004944:	e06e      	b.n	8004a24 <LCD_Ellipse+0x352>
			LCD_Rect_Fill(x0 + x, y0 + y, size, size, color24);
 8004946:	88fa      	ldrh	r2, [r7, #6]
 8004948:	8bfb      	ldrh	r3, [r7, #30]
 800494a:	4413      	add	r3, r2
 800494c:	b298      	uxth	r0, r3
 800494e:	88ba      	ldrh	r2, [r7, #4]
 8004950:	8bbb      	ldrh	r3, [r7, #28]
 8004952:	4413      	add	r3, r2
 8004954:	b299      	uxth	r1, r3
 8004956:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800495a:	b29a      	uxth	r2, r3
 800495c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004960:	b29c      	uxth	r4, r3
 8004962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004964:	9300      	str	r3, [sp, #0]
 8004966:	4623      	mov	r3, r4
 8004968:	f7ff fcb4 	bl	80042d4 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 + y, size, size, color24);
 800496c:	88fa      	ldrh	r2, [r7, #6]
 800496e:	8bfb      	ldrh	r3, [r7, #30]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	b298      	uxth	r0, r3
 8004974:	88ba      	ldrh	r2, [r7, #4]
 8004976:	8bbb      	ldrh	r3, [r7, #28]
 8004978:	4413      	add	r3, r2
 800497a:	b299      	uxth	r1, r3
 800497c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004980:	b29a      	uxth	r2, r3
 8004982:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004986:	b29c      	uxth	r4, r3
 8004988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800498a:	9300      	str	r3, [sp, #0]
 800498c:	4623      	mov	r3, r4
 800498e:	f7ff fca1 	bl	80042d4 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + x, y0 - y, size, size, color24);
 8004992:	88fa      	ldrh	r2, [r7, #6]
 8004994:	8bfb      	ldrh	r3, [r7, #30]
 8004996:	4413      	add	r3, r2
 8004998:	b298      	uxth	r0, r3
 800499a:	88ba      	ldrh	r2, [r7, #4]
 800499c:	8bbb      	ldrh	r3, [r7, #28]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	b299      	uxth	r1, r3
 80049a2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80049ac:	b29c      	uxth	r4, r3
 80049ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b0:	9300      	str	r3, [sp, #0]
 80049b2:	4623      	mov	r3, r4
 80049b4:	f7ff fc8e 	bl	80042d4 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 - y, size, size, color24);
 80049b8:	88fa      	ldrh	r2, [r7, #6]
 80049ba:	8bfb      	ldrh	r3, [r7, #30]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	b298      	uxth	r0, r3
 80049c0:	88ba      	ldrh	r2, [r7, #4]
 80049c2:	8bbb      	ldrh	r3, [r7, #28]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	b299      	uxth	r1, r3
 80049c8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80049d2:	b29c      	uxth	r4, r3
 80049d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d6:	9300      	str	r3, [sp, #0]
 80049d8:	4623      	mov	r3, r4
 80049da:	f7ff fc7b 	bl	80042d4 <LCD_Rect_Fill>
			if (s >= 0)
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	db0f      	blt.n	8004a04 <LCD_Ellipse+0x332>
				s += fx2 * (1 - y);
 80049e4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80049e8:	f1c3 0301 	rsb	r3, r3, #1
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	fb02 f303 	mul.w	r3, r2, r3
 80049f2:	69ba      	ldr	r2, [r7, #24]
 80049f4:	4413      	add	r3, r2
 80049f6:	61bb      	str	r3, [r7, #24]
				y--;
 80049f8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	3b01      	subs	r3, #1
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	83bb      	strh	r3, [r7, #28]
			s += ry2 * ((4 * x) + 6);
 8004a04:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	3306      	adds	r3, #6
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	fb02 f303 	mul.w	r3, r2, r3
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	4413      	add	r3, r2
 8004a16:	61bb      	str	r3, [r7, #24]
		for (x = 0, y = ry, s = 2 * ry2 + rx2 * (1 - 2 * ry); ry2 * x <= rx2 * y; x++)
 8004a18:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	3301      	adds	r3, #1
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	83fb      	strh	r3, [r7, #30]
 8004a24:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	fb03 f202 	mul.w	r2, r3, r2
 8004a2e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004a32:	6979      	ldr	r1, [r7, #20]
 8004a34:	fb01 f303 	mul.w	r3, r1, r3
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	dd84      	ble.n	8004946 <LCD_Ellipse+0x274>
		for (x = rx, y = 0, s = 2 * rx2 + ry2 * (1 - 2 * rx); rx2 * y <= ry2 * x; y++)
 8004a3c:	887b      	ldrh	r3, [r7, #2]
 8004a3e:	83fb      	strh	r3, [r7, #30]
 8004a40:	2300      	movs	r3, #0
 8004a42:	83bb      	strh	r3, [r7, #28]
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	005a      	lsls	r2, r3, #1
 8004a48:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	f1c3 0301 	rsb	r3, r3, #1
 8004a52:	6939      	ldr	r1, [r7, #16]
 8004a54:	fb01 f303 	mul.w	r3, r1, r3
 8004a58:	4413      	add	r3, r2
 8004a5a:	61bb      	str	r3, [r7, #24]
 8004a5c:	e06e      	b.n	8004b3c <LCD_Ellipse+0x46a>
			LCD_Rect_Fill(x0 + x, y0 + y, size, size, color24);
 8004a5e:	88fa      	ldrh	r2, [r7, #6]
 8004a60:	8bfb      	ldrh	r3, [r7, #30]
 8004a62:	4413      	add	r3, r2
 8004a64:	b298      	uxth	r0, r3
 8004a66:	88ba      	ldrh	r2, [r7, #4]
 8004a68:	8bbb      	ldrh	r3, [r7, #28]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	b299      	uxth	r1, r3
 8004a6e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004a78:	b29c      	uxth	r4, r3
 8004a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a7c:	9300      	str	r3, [sp, #0]
 8004a7e:	4623      	mov	r3, r4
 8004a80:	f7ff fc28 	bl	80042d4 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 + y, size, size, color24);
 8004a84:	88fa      	ldrh	r2, [r7, #6]
 8004a86:	8bfb      	ldrh	r3, [r7, #30]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	b298      	uxth	r0, r3
 8004a8c:	88ba      	ldrh	r2, [r7, #4]
 8004a8e:	8bbb      	ldrh	r3, [r7, #28]
 8004a90:	4413      	add	r3, r2
 8004a92:	b299      	uxth	r1, r3
 8004a94:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004a9e:	b29c      	uxth	r4, r3
 8004aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa2:	9300      	str	r3, [sp, #0]
 8004aa4:	4623      	mov	r3, r4
 8004aa6:	f7ff fc15 	bl	80042d4 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + x, y0 - y, size, size, color24);
 8004aaa:	88fa      	ldrh	r2, [r7, #6]
 8004aac:	8bfb      	ldrh	r3, [r7, #30]
 8004aae:	4413      	add	r3, r2
 8004ab0:	b298      	uxth	r0, r3
 8004ab2:	88ba      	ldrh	r2, [r7, #4]
 8004ab4:	8bbb      	ldrh	r3, [r7, #28]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	b299      	uxth	r1, r3
 8004aba:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004ac4:	b29c      	uxth	r4, r3
 8004ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac8:	9300      	str	r3, [sp, #0]
 8004aca:	4623      	mov	r3, r4
 8004acc:	f7ff fc02 	bl	80042d4 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 - y, size, size, color24);
 8004ad0:	88fa      	ldrh	r2, [r7, #6]
 8004ad2:	8bfb      	ldrh	r3, [r7, #30]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	b298      	uxth	r0, r3
 8004ad8:	88ba      	ldrh	r2, [r7, #4]
 8004ada:	8bbb      	ldrh	r3, [r7, #28]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	b299      	uxth	r1, r3
 8004ae0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004aea:	b29c      	uxth	r4, r3
 8004aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aee:	9300      	str	r3, [sp, #0]
 8004af0:	4623      	mov	r3, r4
 8004af2:	f7ff fbef 	bl	80042d4 <LCD_Rect_Fill>
			if (s >= 0)
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	db0f      	blt.n	8004b1c <LCD_Ellipse+0x44a>
				s += fy2 * (1 - x);
 8004afc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004b00:	f1c3 0301 	rsb	r3, r3, #1
 8004b04:	68ba      	ldr	r2, [r7, #8]
 8004b06:	fb02 f303 	mul.w	r3, r2, r3
 8004b0a:	69ba      	ldr	r2, [r7, #24]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	61bb      	str	r3, [r7, #24]
				x--;
 8004b10:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	3b01      	subs	r3, #1
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	83fb      	strh	r3, [r7, #30]
			s += rx2 * ((4 * y) + 6);
 8004b1c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	3306      	adds	r3, #6
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	fb02 f303 	mul.w	r3, r2, r3
 8004b2a:	69ba      	ldr	r2, [r7, #24]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	61bb      	str	r3, [r7, #24]
		for (x = rx, y = 0, s = 2 * rx2 + ry2 * (1 - 2 * rx); rx2 * y <= ry2 * x; y++)
 8004b30:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	3301      	adds	r3, #1
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	83bb      	strh	r3, [r7, #28]
 8004b3c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004b40:	697a      	ldr	r2, [r7, #20]
 8004b42:	fb03 f202 	mul.w	r2, r3, r2
 8004b46:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004b4a:	6939      	ldr	r1, [r7, #16]
 8004b4c:	fb01 f303 	mul.w	r3, r1, r3
 8004b50:	429a      	cmp	r2, r3
 8004b52:	dd84      	ble.n	8004a5e <LCD_Ellipse+0x38c>
}
 8004b54:	bf00      	nop
 8004b56:	3724      	adds	r7, #36	; 0x24
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd90      	pop	{r4, r7, pc}

08004b5c <LCD_Circle>:

void LCD_Circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t fill, uint8_t size, uint32_t color24)
{
 8004b5c:	b590      	push	{r4, r7, lr}
 8004b5e:	b089      	sub	sp, #36	; 0x24
 8004b60:	af02      	add	r7, sp, #8
 8004b62:	4604      	mov	r4, r0
 8004b64:	4608      	mov	r0, r1
 8004b66:	4611      	mov	r1, r2
 8004b68:	461a      	mov	r2, r3
 8004b6a:	4623      	mov	r3, r4
 8004b6c:	80fb      	strh	r3, [r7, #6]
 8004b6e:	4603      	mov	r3, r0
 8004b70:	80bb      	strh	r3, [r7, #4]
 8004b72:	460b      	mov	r3, r1
 8004b74:	70fb      	strb	r3, [r7, #3]
 8004b76:	4613      	mov	r3, r2
 8004b78:	70bb      	strb	r3, [r7, #2]
	int a_, b_, P;
	a_ = 0;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	617b      	str	r3, [r7, #20]
	b_ = radius;
 8004b7e:	78fb      	ldrb	r3, [r7, #3]
 8004b80:	613b      	str	r3, [r7, #16]
	P = 1 - radius;
 8004b82:	78fb      	ldrb	r3, [r7, #3]
 8004b84:	f1c3 0301 	rsb	r3, r3, #1
 8004b88:	60fb      	str	r3, [r7, #12]
	while (a_ <= b_)
 8004b8a:	e0fc      	b.n	8004d86 <LCD_Circle+0x22a>
	{
		if (fill == 1)
 8004b8c:	78bb      	ldrb	r3, [r7, #2]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d136      	bne.n	8004c00 <LCD_Circle+0xa4>
		{
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	88fa      	ldrh	r2, [r7, #6]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	b298      	uxth	r0, r3
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	88ba      	ldrh	r2, [r7, #4]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	b299      	uxth	r1, r3
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	005b      	lsls	r3, r3, #1
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	3301      	adds	r3, #1
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	005b      	lsls	r3, r3, #1
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	3301      	adds	r3, #1
 8004bbc:	b29c      	uxth	r4, r3
 8004bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc0:	9300      	str	r3, [sp, #0]
 8004bc2:	4623      	mov	r3, r4
 8004bc4:	f7ff fb86 	bl	80042d4 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	88fa      	ldrh	r2, [r7, #6]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	b298      	uxth	r0, r3
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	88ba      	ldrh	r2, [r7, #4]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	b299      	uxth	r1, r3
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	005b      	lsls	r3, r3, #1
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	3301      	adds	r3, #1
 8004be6:	b29a      	uxth	r2, r3
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	005b      	lsls	r3, r3, #1
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	b29c      	uxth	r4, r3
 8004bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf6:	9300      	str	r3, [sp, #0]
 8004bf8:	4623      	mov	r3, r4
 8004bfa:	f7ff fb6b 	bl	80042d4 <LCD_Rect_Fill>
 8004bfe:	e0a7      	b.n	8004d50 <LCD_Circle+0x1f4>
		}
		else
		{
			LCD_Rect_Fill(a_ + x, b_ + y, size, size, color24);
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	b29a      	uxth	r2, r3
 8004c04:	88fb      	ldrh	r3, [r7, #6]
 8004c06:	4413      	add	r3, r2
 8004c08:	b298      	uxth	r0, r3
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	88bb      	ldrh	r3, [r7, #4]
 8004c10:	4413      	add	r3, r2
 8004c12:	b299      	uxth	r1, r3
 8004c14:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c18:	b29a      	uxth	r2, r3
 8004c1a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c1e:	b29c      	uxth	r4, r3
 8004c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c22:	9300      	str	r3, [sp, #0]
 8004c24:	4623      	mov	r3, r4
 8004c26:	f7ff fb55 	bl	80042d4 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, a_ + y, size, size, color24);
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	88fb      	ldrh	r3, [r7, #6]
 8004c30:	4413      	add	r3, r2
 8004c32:	b298      	uxth	r0, r3
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	88bb      	ldrh	r3, [r7, #4]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	b299      	uxth	r1, r3
 8004c3e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c42:	b29a      	uxth	r2, r3
 8004c44:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c48:	b29c      	uxth	r4, r3
 8004c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	4623      	mov	r3, r4
 8004c50:	f7ff fb40 	bl	80042d4 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, b_ + y, size, size, color24);
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	88fa      	ldrh	r2, [r7, #6]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	b298      	uxth	r0, r3
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	88bb      	ldrh	r3, [r7, #4]
 8004c64:	4413      	add	r3, r2
 8004c66:	b299      	uxth	r1, r3
 8004c68:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c72:	b29c      	uxth	r4, r3
 8004c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c76:	9300      	str	r3, [sp, #0]
 8004c78:	4623      	mov	r3, r4
 8004c7a:	f7ff fb2b 	bl	80042d4 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, a_ + y, size, size, color24);
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	88fa      	ldrh	r2, [r7, #6]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	b298      	uxth	r0, r3
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	88bb      	ldrh	r3, [r7, #4]
 8004c8e:	4413      	add	r3, r2
 8004c90:	b299      	uxth	r1, r3
 8004c92:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c9c:	b29c      	uxth	r4, r3
 8004c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca0:	9300      	str	r3, [sp, #0]
 8004ca2:	4623      	mov	r3, r4
 8004ca4:	f7ff fb16 	bl	80042d4 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, y - a_, size, size, color24);
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	88fb      	ldrh	r3, [r7, #6]
 8004cae:	4413      	add	r3, r2
 8004cb0:	b298      	uxth	r0, r3
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	88ba      	ldrh	r2, [r7, #4]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	b299      	uxth	r1, r3
 8004cbc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004cc6:	b29c      	uxth	r4, r3
 8004cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cca:	9300      	str	r3, [sp, #0]
 8004ccc:	4623      	mov	r3, r4
 8004cce:	f7ff fb01 	bl	80042d4 <LCD_Rect_Fill>
			LCD_Rect_Fill(a_ + x, y - b_, size, size, color24);
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	88fb      	ldrh	r3, [r7, #6]
 8004cd8:	4413      	add	r3, r2
 8004cda:	b298      	uxth	r0, r3
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	88ba      	ldrh	r2, [r7, #4]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	b299      	uxth	r1, r3
 8004ce6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004cf0:	b29c      	uxth	r4, r3
 8004cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	4623      	mov	r3, r4
 8004cf8:	f7ff faec 	bl	80042d4 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, y - b_, size, size, color24);
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	88fa      	ldrh	r2, [r7, #6]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	b298      	uxth	r0, r3
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	88ba      	ldrh	r2, [r7, #4]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	b299      	uxth	r1, r3
 8004d10:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d1a:	b29c      	uxth	r4, r3
 8004d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1e:	9300      	str	r3, [sp, #0]
 8004d20:	4623      	mov	r3, r4
 8004d22:	f7ff fad7 	bl	80042d4 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, size, size, color24);
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	88fa      	ldrh	r2, [r7, #6]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	b298      	uxth	r0, r3
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	88ba      	ldrh	r2, [r7, #4]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	b299      	uxth	r1, r3
 8004d3a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d44:	b29c      	uxth	r4, r3
 8004d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d48:	9300      	str	r3, [sp, #0]
 8004d4a:	4623      	mov	r3, r4
 8004d4c:	f7ff fac2 	bl	80042d4 <LCD_Rect_Fill>
		}
		if (P < 0)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	da09      	bge.n	8004d6a <LCD_Circle+0x20e>
		{
			P = (P + 3) + (2 * a_);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	1cda      	adds	r2, r3, #3
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	005b      	lsls	r3, r3, #1
 8004d5e:	4413      	add	r3, r2
 8004d60:	60fb      	str	r3, [r7, #12]
			a_++;
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	3301      	adds	r3, #1
 8004d66:	617b      	str	r3, [r7, #20]
 8004d68:	e00d      	b.n	8004d86 <LCD_Circle+0x22a>
		}
		else
		{
			P = (P + 5) + (2 * (a_ - b_));
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	1d5a      	adds	r2, r3, #5
 8004d6e:	6979      	ldr	r1, [r7, #20]
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	1acb      	subs	r3, r1, r3
 8004d74:	005b      	lsls	r3, r3, #1
 8004d76:	4413      	add	r3, r2
 8004d78:	60fb      	str	r3, [r7, #12]
			a_++;
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	617b      	str	r3, [r7, #20]
			b_--;
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	3b01      	subs	r3, #1
 8004d84:	613b      	str	r3, [r7, #16]
	while (a_ <= b_)
 8004d86:	697a      	ldr	r2, [r7, #20]
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	f77f aefe 	ble.w	8004b8c <LCD_Circle+0x30>
		}
	}
}
 8004d90:	bf00      	nop
 8004d92:	bf00      	nop
 8004d94:	371c      	adds	r7, #28
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd90      	pop	{r4, r7, pc}

08004d9a <LCD_Circle_Helper>:

void LCD_Circle_Helper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint8_t size, uint32_t color24)
{
 8004d9a:	b590      	push	{r4, r7, lr}
 8004d9c:	b089      	sub	sp, #36	; 0x24
 8004d9e:	af02      	add	r7, sp, #8
 8004da0:	4604      	mov	r4, r0
 8004da2:	4608      	mov	r0, r1
 8004da4:	4611      	mov	r1, r2
 8004da6:	461a      	mov	r2, r3
 8004da8:	4623      	mov	r3, r4
 8004daa:	80fb      	strh	r3, [r7, #6]
 8004dac:	4603      	mov	r3, r0
 8004dae:	80bb      	strh	r3, [r7, #4]
 8004db0:	460b      	mov	r3, r1
 8004db2:	807b      	strh	r3, [r7, #2]
 8004db4:	4613      	mov	r3, r2
 8004db6:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8004db8:	887b      	ldrh	r3, [r7, #2]
 8004dba:	f1c3 0301 	rsb	r3, r3, #1
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8004dc6:	887b      	ldrh	r3, [r7, #2]
 8004dc8:	461a      	mov	r2, r3
 8004dca:	03d2      	lsls	r2, r2, #15
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	005b      	lsls	r3, r3, #1
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8004dd8:	887b      	ldrh	r3, [r7, #2]
 8004dda:	81fb      	strh	r3, [r7, #14]

	while (x < y) {
 8004ddc:	e0cd      	b.n	8004f7a <LCD_Circle_Helper+0x1e0>
		if (f >= 0) {
 8004dde:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	db0e      	blt.n	8004e04 <LCD_Circle_Helper+0x6a>
			y--;
 8004de6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	3b01      	subs	r3, #1
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8004df2:	8a7b      	ldrh	r3, [r7, #18]
 8004df4:	3302      	adds	r3, #2
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8004dfa:	8afa      	ldrh	r2, [r7, #22]
 8004dfc:	8a7b      	ldrh	r3, [r7, #18]
 8004dfe:	4413      	add	r3, r2
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8004e04:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8004e10:	8abb      	ldrh	r3, [r7, #20]
 8004e12:	3302      	adds	r3, #2
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8004e18:	8afa      	ldrh	r2, [r7, #22]
 8004e1a:	8abb      	ldrh	r3, [r7, #20]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	82fb      	strh	r3, [r7, #22]
		if (cornername & 0x4) {
 8004e22:	787b      	ldrb	r3, [r7, #1]
 8004e24:	f003 0304 	and.w	r3, r3, #4
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d025      	beq.n	8004e78 <LCD_Circle_Helper+0xde>
			LCD_Rect_Fill(x0 + x, y0 + y, size, size, color24);
 8004e2c:	88fa      	ldrh	r2, [r7, #6]
 8004e2e:	8a3b      	ldrh	r3, [r7, #16]
 8004e30:	4413      	add	r3, r2
 8004e32:	b298      	uxth	r0, r3
 8004e34:	88ba      	ldrh	r2, [r7, #4]
 8004e36:	89fb      	ldrh	r3, [r7, #14]
 8004e38:	4413      	add	r3, r2
 8004e3a:	b299      	uxth	r1, r3
 8004e3c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e46:	b29c      	uxth	r4, r3
 8004e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e4a:	9300      	str	r3, [sp, #0]
 8004e4c:	4623      	mov	r3, r4
 8004e4e:	f7ff fa41 	bl	80042d4 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + y, y0 + x, size, size, color24);
 8004e52:	88fa      	ldrh	r2, [r7, #6]
 8004e54:	89fb      	ldrh	r3, [r7, #14]
 8004e56:	4413      	add	r3, r2
 8004e58:	b298      	uxth	r0, r3
 8004e5a:	88ba      	ldrh	r2, [r7, #4]
 8004e5c:	8a3b      	ldrh	r3, [r7, #16]
 8004e5e:	4413      	add	r3, r2
 8004e60:	b299      	uxth	r1, r3
 8004e62:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e6c:	b29c      	uxth	r4, r3
 8004e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e70:	9300      	str	r3, [sp, #0]
 8004e72:	4623      	mov	r3, r4
 8004e74:	f7ff fa2e 	bl	80042d4 <LCD_Rect_Fill>
		}
		if (cornername & 0x2) {
 8004e78:	787b      	ldrb	r3, [r7, #1]
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d025      	beq.n	8004ece <LCD_Circle_Helper+0x134>
			LCD_Rect_Fill(x0 + x, y0 - y, size, size, color24);
 8004e82:	88fa      	ldrh	r2, [r7, #6]
 8004e84:	8a3b      	ldrh	r3, [r7, #16]
 8004e86:	4413      	add	r3, r2
 8004e88:	b298      	uxth	r0, r3
 8004e8a:	88ba      	ldrh	r2, [r7, #4]
 8004e8c:	89fb      	ldrh	r3, [r7, #14]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	b299      	uxth	r1, r3
 8004e92:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e9c:	b29c      	uxth	r4, r3
 8004e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	4623      	mov	r3, r4
 8004ea4:	f7ff fa16 	bl	80042d4 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + y, y0 - x, size, size, color24);
 8004ea8:	88fa      	ldrh	r2, [r7, #6]
 8004eaa:	89fb      	ldrh	r3, [r7, #14]
 8004eac:	4413      	add	r3, r2
 8004eae:	b298      	uxth	r0, r3
 8004eb0:	88ba      	ldrh	r2, [r7, #4]
 8004eb2:	8a3b      	ldrh	r3, [r7, #16]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	b299      	uxth	r1, r3
 8004eb8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ec2:	b29c      	uxth	r4, r3
 8004ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec6:	9300      	str	r3, [sp, #0]
 8004ec8:	4623      	mov	r3, r4
 8004eca:	f7ff fa03 	bl	80042d4 <LCD_Rect_Fill>
		}
		if (cornername & 0x8) {
 8004ece:	787b      	ldrb	r3, [r7, #1]
 8004ed0:	f003 0308 	and.w	r3, r3, #8
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d025      	beq.n	8004f24 <LCD_Circle_Helper+0x18a>
			LCD_Rect_Fill(x0 - y, y0 + x, size, size, color24);
 8004ed8:	88fa      	ldrh	r2, [r7, #6]
 8004eda:	89fb      	ldrh	r3, [r7, #14]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	b298      	uxth	r0, r3
 8004ee0:	88ba      	ldrh	r2, [r7, #4]
 8004ee2:	8a3b      	ldrh	r3, [r7, #16]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	b299      	uxth	r1, r3
 8004ee8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004eec:	b29a      	uxth	r2, r3
 8004eee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ef2:	b29c      	uxth	r4, r3
 8004ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef6:	9300      	str	r3, [sp, #0]
 8004ef8:	4623      	mov	r3, r4
 8004efa:	f7ff f9eb 	bl	80042d4 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 + y, size, size, color24);
 8004efe:	88fa      	ldrh	r2, [r7, #6]
 8004f00:	8a3b      	ldrh	r3, [r7, #16]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	b298      	uxth	r0, r3
 8004f06:	88ba      	ldrh	r2, [r7, #4]
 8004f08:	89fb      	ldrh	r3, [r7, #14]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	b299      	uxth	r1, r3
 8004f0e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f18:	b29c      	uxth	r4, r3
 8004f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f1c:	9300      	str	r3, [sp, #0]
 8004f1e:	4623      	mov	r3, r4
 8004f20:	f7ff f9d8 	bl	80042d4 <LCD_Rect_Fill>
		}
		if (cornername & 0x1) {
 8004f24:	787b      	ldrb	r3, [r7, #1]
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d025      	beq.n	8004f7a <LCD_Circle_Helper+0x1e0>
			LCD_Rect_Fill(x0 - y, y0 - x, size, size, color24);
 8004f2e:	88fa      	ldrh	r2, [r7, #6]
 8004f30:	89fb      	ldrh	r3, [r7, #14]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	b298      	uxth	r0, r3
 8004f36:	88ba      	ldrh	r2, [r7, #4]
 8004f38:	8a3b      	ldrh	r3, [r7, #16]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	b299      	uxth	r1, r3
 8004f3e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f48:	b29c      	uxth	r4, r3
 8004f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f4c:	9300      	str	r3, [sp, #0]
 8004f4e:	4623      	mov	r3, r4
 8004f50:	f7ff f9c0 	bl	80042d4 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 - y, size, size, color24);
 8004f54:	88fa      	ldrh	r2, [r7, #6]
 8004f56:	8a3b      	ldrh	r3, [r7, #16]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	b298      	uxth	r0, r3
 8004f5c:	88ba      	ldrh	r2, [r7, #4]
 8004f5e:	89fb      	ldrh	r3, [r7, #14]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	b299      	uxth	r1, r3
 8004f64:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f6e:	b29c      	uxth	r4, r3
 8004f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f72:	9300      	str	r3, [sp, #0]
 8004f74:	4623      	mov	r3, r4
 8004f76:	f7ff f9ad 	bl	80042d4 <LCD_Rect_Fill>
	while (x < y) {
 8004f7a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004f7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	f6ff af2b 	blt.w	8004dde <LCD_Circle_Helper+0x44>
		}
	}
}
 8004f88:	bf00      	nop
 8004f8a:	bf00      	nop
 8004f8c:	371c      	adds	r7, #28
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd90      	pop	{r4, r7, pc}

08004f92 <LCD_Rect_Round>:

void LCD_Rect_Round(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t r, uint8_t size, uint32_t color24)
{
 8004f92:	b590      	push	{r4, r7, lr}
 8004f94:	b085      	sub	sp, #20
 8004f96:	af02      	add	r7, sp, #8
 8004f98:	4604      	mov	r4, r0
 8004f9a:	4608      	mov	r0, r1
 8004f9c:	4611      	mov	r1, r2
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	4623      	mov	r3, r4
 8004fa2:	80fb      	strh	r3, [r7, #6]
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	80bb      	strh	r3, [r7, #4]
 8004fa8:	460b      	mov	r3, r1
 8004faa:	807b      	strh	r3, [r7, #2]
 8004fac:	4613      	mov	r3, r2
 8004fae:	803b      	strh	r3, [r7, #0]
	LCD_Line(x + (r + 2), y, x + length + size - (r + 2), y, size, color24);
 8004fb0:	8b3a      	ldrh	r2, [r7, #24]
 8004fb2:	88fb      	ldrh	r3, [r7, #6]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	3302      	adds	r3, #2
 8004fba:	b298      	uxth	r0, r3
 8004fbc:	88fa      	ldrh	r2, [r7, #6]
 8004fbe:	887b      	ldrh	r3, [r7, #2]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	7f3b      	ldrb	r3, [r7, #28]
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	4413      	add	r3, r2
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	8b3b      	ldrh	r3, [r7, #24]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	3b02      	subs	r3, #2
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	88bc      	ldrh	r4, [r7, #4]
 8004fd8:	88b9      	ldrh	r1, [r7, #4]
 8004fda:	6a3b      	ldr	r3, [r7, #32]
 8004fdc:	9301      	str	r3, [sp, #4]
 8004fde:	7f3b      	ldrb	r3, [r7, #28]
 8004fe0:	9300      	str	r3, [sp, #0]
 8004fe2:	4623      	mov	r3, r4
 8004fe4:	f7ff f9b4 	bl	8004350 <LCD_Line>
	LCD_Line(x + (r + 2), y + width - 1, x + length + size - (r + 2), y + width - 1, size, color24);
 8004fe8:	8b3a      	ldrh	r2, [r7, #24]
 8004fea:	88fb      	ldrh	r3, [r7, #6]
 8004fec:	4413      	add	r3, r2
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	3302      	adds	r3, #2
 8004ff2:	b298      	uxth	r0, r3
 8004ff4:	88ba      	ldrh	r2, [r7, #4]
 8004ff6:	883b      	ldrh	r3, [r7, #0]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	b299      	uxth	r1, r3
 8005000:	88fa      	ldrh	r2, [r7, #6]
 8005002:	887b      	ldrh	r3, [r7, #2]
 8005004:	4413      	add	r3, r2
 8005006:	b29a      	uxth	r2, r3
 8005008:	7f3b      	ldrb	r3, [r7, #28]
 800500a:	b29b      	uxth	r3, r3
 800500c:	4413      	add	r3, r2
 800500e:	b29a      	uxth	r2, r3
 8005010:	8b3b      	ldrh	r3, [r7, #24]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	b29b      	uxth	r3, r3
 8005016:	3b02      	subs	r3, #2
 8005018:	b29c      	uxth	r4, r3
 800501a:	88ba      	ldrh	r2, [r7, #4]
 800501c:	883b      	ldrh	r3, [r7, #0]
 800501e:	4413      	add	r3, r2
 8005020:	b29b      	uxth	r3, r3
 8005022:	3b01      	subs	r3, #1
 8005024:	b29a      	uxth	r2, r3
 8005026:	6a3b      	ldr	r3, [r7, #32]
 8005028:	9301      	str	r3, [sp, #4]
 800502a:	7f3b      	ldrb	r3, [r7, #28]
 800502c:	9300      	str	r3, [sp, #0]
 800502e:	4613      	mov	r3, r2
 8005030:	4622      	mov	r2, r4
 8005032:	f7ff f98d 	bl	8004350 <LCD_Line>
	LCD_Line(x, y + (r + 2), x, y + width - size - (r + 2), size, color24);
 8005036:	8b3a      	ldrh	r2, [r7, #24]
 8005038:	88bb      	ldrh	r3, [r7, #4]
 800503a:	4413      	add	r3, r2
 800503c:	b29b      	uxth	r3, r3
 800503e:	3302      	adds	r3, #2
 8005040:	b299      	uxth	r1, r3
 8005042:	88ba      	ldrh	r2, [r7, #4]
 8005044:	883b      	ldrh	r3, [r7, #0]
 8005046:	4413      	add	r3, r2
 8005048:	b29a      	uxth	r2, r3
 800504a:	7f3b      	ldrb	r3, [r7, #28]
 800504c:	b29b      	uxth	r3, r3
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	b29a      	uxth	r2, r3
 8005052:	8b3b      	ldrh	r3, [r7, #24]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	b29b      	uxth	r3, r3
 8005058:	3b02      	subs	r3, #2
 800505a:	b29c      	uxth	r4, r3
 800505c:	88fa      	ldrh	r2, [r7, #6]
 800505e:	88f8      	ldrh	r0, [r7, #6]
 8005060:	6a3b      	ldr	r3, [r7, #32]
 8005062:	9301      	str	r3, [sp, #4]
 8005064:	7f3b      	ldrb	r3, [r7, #28]
 8005066:	9300      	str	r3, [sp, #0]
 8005068:	4623      	mov	r3, r4
 800506a:	f7ff f971 	bl	8004350 <LCD_Line>
	LCD_Line(x + length - 1, y + (r + 2), x + length - 1, y + width - size - (r + 2), size, color24);
 800506e:	88fa      	ldrh	r2, [r7, #6]
 8005070:	887b      	ldrh	r3, [r7, #2]
 8005072:	4413      	add	r3, r2
 8005074:	b29b      	uxth	r3, r3
 8005076:	3b01      	subs	r3, #1
 8005078:	b298      	uxth	r0, r3
 800507a:	8b3a      	ldrh	r2, [r7, #24]
 800507c:	88bb      	ldrh	r3, [r7, #4]
 800507e:	4413      	add	r3, r2
 8005080:	b29b      	uxth	r3, r3
 8005082:	3302      	adds	r3, #2
 8005084:	b299      	uxth	r1, r3
 8005086:	88fa      	ldrh	r2, [r7, #6]
 8005088:	887b      	ldrh	r3, [r7, #2]
 800508a:	4413      	add	r3, r2
 800508c:	b29b      	uxth	r3, r3
 800508e:	3b01      	subs	r3, #1
 8005090:	b29c      	uxth	r4, r3
 8005092:	88ba      	ldrh	r2, [r7, #4]
 8005094:	883b      	ldrh	r3, [r7, #0]
 8005096:	4413      	add	r3, r2
 8005098:	b29a      	uxth	r2, r3
 800509a:	7f3b      	ldrb	r3, [r7, #28]
 800509c:	b29b      	uxth	r3, r3
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	b29a      	uxth	r2, r3
 80050a2:	8b3b      	ldrh	r3, [r7, #24]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	3b02      	subs	r3, #2
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	6a3b      	ldr	r3, [r7, #32]
 80050ae:	9301      	str	r3, [sp, #4]
 80050b0:	7f3b      	ldrb	r3, [r7, #28]
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	4613      	mov	r3, r2
 80050b6:	4622      	mov	r2, r4
 80050b8:	f7ff f94a 	bl	8004350 <LCD_Line>

	LCD_Circle_Helper(x + (r + 2), y + (r + 2), (r + 2), 1, size, color24);
 80050bc:	8b3a      	ldrh	r2, [r7, #24]
 80050be:	88fb      	ldrh	r3, [r7, #6]
 80050c0:	4413      	add	r3, r2
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	3302      	adds	r3, #2
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	b218      	sxth	r0, r3
 80050ca:	8b3a      	ldrh	r2, [r7, #24]
 80050cc:	88bb      	ldrh	r3, [r7, #4]
 80050ce:	4413      	add	r3, r2
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	3302      	adds	r3, #2
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	b219      	sxth	r1, r3
 80050d8:	8b3b      	ldrh	r3, [r7, #24]
 80050da:	3302      	adds	r3, #2
 80050dc:	b29b      	uxth	r3, r3
 80050de:	b21a      	sxth	r2, r3
 80050e0:	6a3b      	ldr	r3, [r7, #32]
 80050e2:	9301      	str	r3, [sp, #4]
 80050e4:	7f3b      	ldrb	r3, [r7, #28]
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	2301      	movs	r3, #1
 80050ea:	f7ff fe56 	bl	8004d9a <LCD_Circle_Helper>
	LCD_Circle_Helper(x + length - (r + 2) - 1, y + (r + 2), (r + 2), 2, size, color24);
 80050ee:	88fa      	ldrh	r2, [r7, #6]
 80050f0:	887b      	ldrh	r3, [r7, #2]
 80050f2:	4413      	add	r3, r2
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	8b3b      	ldrh	r3, [r7, #24]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	3b03      	subs	r3, #3
 80050fe:	b29b      	uxth	r3, r3
 8005100:	b218      	sxth	r0, r3
 8005102:	8b3a      	ldrh	r2, [r7, #24]
 8005104:	88bb      	ldrh	r3, [r7, #4]
 8005106:	4413      	add	r3, r2
 8005108:	b29b      	uxth	r3, r3
 800510a:	3302      	adds	r3, #2
 800510c:	b29b      	uxth	r3, r3
 800510e:	b219      	sxth	r1, r3
 8005110:	8b3b      	ldrh	r3, [r7, #24]
 8005112:	3302      	adds	r3, #2
 8005114:	b29b      	uxth	r3, r3
 8005116:	b21a      	sxth	r2, r3
 8005118:	6a3b      	ldr	r3, [r7, #32]
 800511a:	9301      	str	r3, [sp, #4]
 800511c:	7f3b      	ldrb	r3, [r7, #28]
 800511e:	9300      	str	r3, [sp, #0]
 8005120:	2302      	movs	r3, #2
 8005122:	f7ff fe3a 	bl	8004d9a <LCD_Circle_Helper>
	LCD_Circle_Helper(x + length - (r + 2) - 1, y + width - (r + 2) - 1, (r + 2), 4, size, color24);
 8005126:	88fa      	ldrh	r2, [r7, #6]
 8005128:	887b      	ldrh	r3, [r7, #2]
 800512a:	4413      	add	r3, r2
 800512c:	b29a      	uxth	r2, r3
 800512e:	8b3b      	ldrh	r3, [r7, #24]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	b29b      	uxth	r3, r3
 8005134:	3b03      	subs	r3, #3
 8005136:	b29b      	uxth	r3, r3
 8005138:	b218      	sxth	r0, r3
 800513a:	88ba      	ldrh	r2, [r7, #4]
 800513c:	883b      	ldrh	r3, [r7, #0]
 800513e:	4413      	add	r3, r2
 8005140:	b29a      	uxth	r2, r3
 8005142:	8b3b      	ldrh	r3, [r7, #24]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	b29b      	uxth	r3, r3
 8005148:	3b03      	subs	r3, #3
 800514a:	b29b      	uxth	r3, r3
 800514c:	b219      	sxth	r1, r3
 800514e:	8b3b      	ldrh	r3, [r7, #24]
 8005150:	3302      	adds	r3, #2
 8005152:	b29b      	uxth	r3, r3
 8005154:	b21a      	sxth	r2, r3
 8005156:	6a3b      	ldr	r3, [r7, #32]
 8005158:	9301      	str	r3, [sp, #4]
 800515a:	7f3b      	ldrb	r3, [r7, #28]
 800515c:	9300      	str	r3, [sp, #0]
 800515e:	2304      	movs	r3, #4
 8005160:	f7ff fe1b 	bl	8004d9a <LCD_Circle_Helper>
	LCD_Circle_Helper(x + (r + 2), y + width - (r + 2) - 1, (r + 2), 8, size, color24);
 8005164:	8b3a      	ldrh	r2, [r7, #24]
 8005166:	88fb      	ldrh	r3, [r7, #6]
 8005168:	4413      	add	r3, r2
 800516a:	b29b      	uxth	r3, r3
 800516c:	3302      	adds	r3, #2
 800516e:	b29b      	uxth	r3, r3
 8005170:	b218      	sxth	r0, r3
 8005172:	88ba      	ldrh	r2, [r7, #4]
 8005174:	883b      	ldrh	r3, [r7, #0]
 8005176:	4413      	add	r3, r2
 8005178:	b29a      	uxth	r2, r3
 800517a:	8b3b      	ldrh	r3, [r7, #24]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	b29b      	uxth	r3, r3
 8005180:	3b03      	subs	r3, #3
 8005182:	b29b      	uxth	r3, r3
 8005184:	b219      	sxth	r1, r3
 8005186:	8b3b      	ldrh	r3, [r7, #24]
 8005188:	3302      	adds	r3, #2
 800518a:	b29b      	uxth	r3, r3
 800518c:	b21a      	sxth	r2, r3
 800518e:	6a3b      	ldr	r3, [r7, #32]
 8005190:	9301      	str	r3, [sp, #4]
 8005192:	7f3b      	ldrb	r3, [r7, #28]
 8005194:	9300      	str	r3, [sp, #0]
 8005196:	2308      	movs	r3, #8
 8005198:	f7ff fdff 	bl	8004d9a <LCD_Circle_Helper>
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd90      	pop	{r4, r7, pc}

080051a4 <LCD_Circle_Fill_Helper>:

void LCD_Circle_Fill_Helper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint32_t color24)
{
 80051a4:	b590      	push	{r4, r7, lr}
 80051a6:	b089      	sub	sp, #36	; 0x24
 80051a8:	af02      	add	r7, sp, #8
 80051aa:	4604      	mov	r4, r0
 80051ac:	4608      	mov	r0, r1
 80051ae:	4611      	mov	r1, r2
 80051b0:	461a      	mov	r2, r3
 80051b2:	4623      	mov	r3, r4
 80051b4:	80fb      	strh	r3, [r7, #6]
 80051b6:	4603      	mov	r3, r0
 80051b8:	80bb      	strh	r3, [r7, #4]
 80051ba:	460b      	mov	r3, r1
 80051bc:	807b      	strh	r3, [r7, #2]
 80051be:	4613      	mov	r3, r2
 80051c0:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 80051c2:	887b      	ldrh	r3, [r7, #2]
 80051c4:	f1c3 0301 	rsb	r3, r3, #1
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 80051cc:	2301      	movs	r3, #1
 80051ce:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 80051d0:	887b      	ldrh	r3, [r7, #2]
 80051d2:	461a      	mov	r2, r3
 80051d4:	03d2      	lsls	r2, r2, #15
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	005b      	lsls	r3, r3, #1
 80051da:	b29b      	uxth	r3, r3
 80051dc:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 80051de:	2300      	movs	r3, #0
 80051e0:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 80051e2:	887b      	ldrh	r3, [r7, #2]
 80051e4:	81fb      	strh	r3, [r7, #14]

	while (x < y) {
 80051e6:	e0ab      	b.n	8005340 <LCD_Circle_Fill_Helper+0x19c>
		if (f >= 0) {
 80051e8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	db0e      	blt.n	800520e <LCD_Circle_Fill_Helper+0x6a>
			y--;
 80051f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	3b01      	subs	r3, #1
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 80051fc:	8a7b      	ldrh	r3, [r7, #18]
 80051fe:	3302      	adds	r3, #2
 8005200:	b29b      	uxth	r3, r3
 8005202:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8005204:	8afa      	ldrh	r2, [r7, #22]
 8005206:	8a7b      	ldrh	r3, [r7, #18]
 8005208:	4413      	add	r3, r2
 800520a:	b29b      	uxth	r3, r3
 800520c:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 800520e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005212:	b29b      	uxth	r3, r3
 8005214:	3301      	adds	r3, #1
 8005216:	b29b      	uxth	r3, r3
 8005218:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 800521a:	8abb      	ldrh	r3, [r7, #20]
 800521c:	3302      	adds	r3, #2
 800521e:	b29b      	uxth	r3, r3
 8005220:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8005222:	8afa      	ldrh	r2, [r7, #22]
 8005224:	8abb      	ldrh	r3, [r7, #20]
 8005226:	4413      	add	r3, r2
 8005228:	b29b      	uxth	r3, r3
 800522a:	82fb      	strh	r3, [r7, #22]

		if (cornername & 0x1) {
 800522c:	787b      	ldrb	r3, [r7, #1]
 800522e:	f003 0301 	and.w	r3, r3, #1
 8005232:	2b00      	cmp	r3, #0
 8005234:	d03f      	beq.n	80052b6 <LCD_Circle_Fill_Helper+0x112>
			LCD_Line(x0 + x, y0 - y, x0 + x, y0 - y + 2 * y + delta, 1, color24);
 8005236:	88fa      	ldrh	r2, [r7, #6]
 8005238:	8a3b      	ldrh	r3, [r7, #16]
 800523a:	4413      	add	r3, r2
 800523c:	b298      	uxth	r0, r3
 800523e:	88ba      	ldrh	r2, [r7, #4]
 8005240:	89fb      	ldrh	r3, [r7, #14]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	b299      	uxth	r1, r3
 8005246:	88fa      	ldrh	r2, [r7, #6]
 8005248:	8a3b      	ldrh	r3, [r7, #16]
 800524a:	4413      	add	r3, r2
 800524c:	b29c      	uxth	r4, r3
 800524e:	88ba      	ldrh	r2, [r7, #4]
 8005250:	89fb      	ldrh	r3, [r7, #14]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	b29a      	uxth	r2, r3
 8005256:	89fb      	ldrh	r3, [r7, #14]
 8005258:	005b      	lsls	r3, r3, #1
 800525a:	b29b      	uxth	r3, r3
 800525c:	4413      	add	r3, r2
 800525e:	b29a      	uxth	r2, r3
 8005260:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005262:	4413      	add	r3, r2
 8005264:	b29a      	uxth	r2, r3
 8005266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005268:	9301      	str	r3, [sp, #4]
 800526a:	2301      	movs	r3, #1
 800526c:	9300      	str	r3, [sp, #0]
 800526e:	4613      	mov	r3, r2
 8005270:	4622      	mov	r2, r4
 8005272:	f7ff f86d 	bl	8004350 <LCD_Line>
			LCD_Line(x0 + y, y0 - x, x0 + y, y0 - x + 2 * x + delta, 1, color24);
 8005276:	88fa      	ldrh	r2, [r7, #6]
 8005278:	89fb      	ldrh	r3, [r7, #14]
 800527a:	4413      	add	r3, r2
 800527c:	b298      	uxth	r0, r3
 800527e:	88ba      	ldrh	r2, [r7, #4]
 8005280:	8a3b      	ldrh	r3, [r7, #16]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	b299      	uxth	r1, r3
 8005286:	88fa      	ldrh	r2, [r7, #6]
 8005288:	89fb      	ldrh	r3, [r7, #14]
 800528a:	4413      	add	r3, r2
 800528c:	b29c      	uxth	r4, r3
 800528e:	88ba      	ldrh	r2, [r7, #4]
 8005290:	8a3b      	ldrh	r3, [r7, #16]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	b29a      	uxth	r2, r3
 8005296:	8a3b      	ldrh	r3, [r7, #16]
 8005298:	005b      	lsls	r3, r3, #1
 800529a:	b29b      	uxth	r3, r3
 800529c:	4413      	add	r3, r2
 800529e:	b29a      	uxth	r2, r3
 80052a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80052a2:	4413      	add	r3, r2
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a8:	9301      	str	r3, [sp, #4]
 80052aa:	2301      	movs	r3, #1
 80052ac:	9300      	str	r3, [sp, #0]
 80052ae:	4613      	mov	r3, r2
 80052b0:	4622      	mov	r2, r4
 80052b2:	f7ff f84d 	bl	8004350 <LCD_Line>
		}
		if (cornername & 0x2) {
 80052b6:	787b      	ldrb	r3, [r7, #1]
 80052b8:	f003 0302 	and.w	r3, r3, #2
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d03f      	beq.n	8005340 <LCD_Circle_Fill_Helper+0x19c>
			LCD_Line(x0 - x, y0 - y, x0 - x, y0 - y + 2 * y + delta, 1, color24);
 80052c0:	88fa      	ldrh	r2, [r7, #6]
 80052c2:	8a3b      	ldrh	r3, [r7, #16]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	b298      	uxth	r0, r3
 80052c8:	88ba      	ldrh	r2, [r7, #4]
 80052ca:	89fb      	ldrh	r3, [r7, #14]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	b299      	uxth	r1, r3
 80052d0:	88fa      	ldrh	r2, [r7, #6]
 80052d2:	8a3b      	ldrh	r3, [r7, #16]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	b29c      	uxth	r4, r3
 80052d8:	88ba      	ldrh	r2, [r7, #4]
 80052da:	89fb      	ldrh	r3, [r7, #14]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	b29a      	uxth	r2, r3
 80052e0:	89fb      	ldrh	r3, [r7, #14]
 80052e2:	005b      	lsls	r3, r3, #1
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	4413      	add	r3, r2
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80052ec:	4413      	add	r3, r2
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f2:	9301      	str	r3, [sp, #4]
 80052f4:	2301      	movs	r3, #1
 80052f6:	9300      	str	r3, [sp, #0]
 80052f8:	4613      	mov	r3, r2
 80052fa:	4622      	mov	r2, r4
 80052fc:	f7ff f828 	bl	8004350 <LCD_Line>
			LCD_Line(x0 - y, y0 - x, x0 - y, y0 - x + 2 * x + delta, 1, color24);
 8005300:	88fa      	ldrh	r2, [r7, #6]
 8005302:	89fb      	ldrh	r3, [r7, #14]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	b298      	uxth	r0, r3
 8005308:	88ba      	ldrh	r2, [r7, #4]
 800530a:	8a3b      	ldrh	r3, [r7, #16]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	b299      	uxth	r1, r3
 8005310:	88fa      	ldrh	r2, [r7, #6]
 8005312:	89fb      	ldrh	r3, [r7, #14]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	b29c      	uxth	r4, r3
 8005318:	88ba      	ldrh	r2, [r7, #4]
 800531a:	8a3b      	ldrh	r3, [r7, #16]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	b29a      	uxth	r2, r3
 8005320:	8a3b      	ldrh	r3, [r7, #16]
 8005322:	005b      	lsls	r3, r3, #1
 8005324:	b29b      	uxth	r3, r3
 8005326:	4413      	add	r3, r2
 8005328:	b29a      	uxth	r2, r3
 800532a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800532c:	4413      	add	r3, r2
 800532e:	b29a      	uxth	r2, r3
 8005330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005332:	9301      	str	r3, [sp, #4]
 8005334:	2301      	movs	r3, #1
 8005336:	9300      	str	r3, [sp, #0]
 8005338:	4613      	mov	r3, r2
 800533a:	4622      	mov	r2, r4
 800533c:	f7ff f808 	bl	8004350 <LCD_Line>
	while (x < y) {
 8005340:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8005344:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005348:	429a      	cmp	r2, r3
 800534a:	f6ff af4d 	blt.w	80051e8 <LCD_Circle_Fill_Helper+0x44>
		}
	}
}
 800534e:	bf00      	nop
 8005350:	bf00      	nop
 8005352:	371c      	adds	r7, #28
 8005354:	46bd      	mov	sp, r7
 8005356:	bd90      	pop	{r4, r7, pc}

08005358 <LCD_Rect_Round_Fill>:

void LCD_Rect_Round_Fill(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t r, uint32_t color24)
{
 8005358:	b590      	push	{r4, r7, lr}
 800535a:	b085      	sub	sp, #20
 800535c:	af02      	add	r7, sp, #8
 800535e:	4604      	mov	r4, r0
 8005360:	4608      	mov	r0, r1
 8005362:	4611      	mov	r1, r2
 8005364:	461a      	mov	r2, r3
 8005366:	4623      	mov	r3, r4
 8005368:	80fb      	strh	r3, [r7, #6]
 800536a:	4603      	mov	r3, r0
 800536c:	80bb      	strh	r3, [r7, #4]
 800536e:	460b      	mov	r3, r1
 8005370:	807b      	strh	r3, [r7, #2]
 8005372:	4613      	mov	r3, r2
 8005374:	803b      	strh	r3, [r7, #0]
	LCD_Rect_Fill(x + r, y, length - 2 * r, width, color24);
 8005376:	88fa      	ldrh	r2, [r7, #6]
 8005378:	8b3b      	ldrh	r3, [r7, #24]
 800537a:	4413      	add	r3, r2
 800537c:	b298      	uxth	r0, r3
 800537e:	8b3b      	ldrh	r3, [r7, #24]
 8005380:	005b      	lsls	r3, r3, #1
 8005382:	b29b      	uxth	r3, r3
 8005384:	887a      	ldrh	r2, [r7, #2]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	b29a      	uxth	r2, r3
 800538a:	883c      	ldrh	r4, [r7, #0]
 800538c:	88b9      	ldrh	r1, [r7, #4]
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	9300      	str	r3, [sp, #0]
 8005392:	4623      	mov	r3, r4
 8005394:	f7fe ff9e 	bl	80042d4 <LCD_Rect_Fill>
	LCD_Circle_Fill_Helper(x + length - r - 1, y + r, r, 1, width - 2 * r - 1, color24);
 8005398:	88fa      	ldrh	r2, [r7, #6]
 800539a:	887b      	ldrh	r3, [r7, #2]
 800539c:	4413      	add	r3, r2
 800539e:	b29a      	uxth	r2, r3
 80053a0:	8b3b      	ldrh	r3, [r7, #24]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	3b01      	subs	r3, #1
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	b218      	sxth	r0, r3
 80053ac:	88ba      	ldrh	r2, [r7, #4]
 80053ae:	8b3b      	ldrh	r3, [r7, #24]
 80053b0:	4413      	add	r3, r2
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	b219      	sxth	r1, r3
 80053b6:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 80053ba:	8b3b      	ldrh	r3, [r7, #24]
 80053bc:	005b      	lsls	r3, r3, #1
 80053be:	b29b      	uxth	r3, r3
 80053c0:	883a      	ldrh	r2, [r7, #0]
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	3b01      	subs	r3, #1
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	b21b      	sxth	r3, r3
 80053cc:	69fa      	ldr	r2, [r7, #28]
 80053ce:	9201      	str	r2, [sp, #4]
 80053d0:	9300      	str	r3, [sp, #0]
 80053d2:	2301      	movs	r3, #1
 80053d4:	4622      	mov	r2, r4
 80053d6:	f7ff fee5 	bl	80051a4 <LCD_Circle_Fill_Helper>
	LCD_Circle_Fill_Helper(x + r, y + r, r, 2, width - 2 * r - 1, color24);
 80053da:	88fa      	ldrh	r2, [r7, #6]
 80053dc:	8b3b      	ldrh	r3, [r7, #24]
 80053de:	4413      	add	r3, r2
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	b218      	sxth	r0, r3
 80053e4:	88ba      	ldrh	r2, [r7, #4]
 80053e6:	8b3b      	ldrh	r3, [r7, #24]
 80053e8:	4413      	add	r3, r2
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	b219      	sxth	r1, r3
 80053ee:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 80053f2:	8b3b      	ldrh	r3, [r7, #24]
 80053f4:	005b      	lsls	r3, r3, #1
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	883a      	ldrh	r2, [r7, #0]
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	3b01      	subs	r3, #1
 8005400:	b29b      	uxth	r3, r3
 8005402:	b21b      	sxth	r3, r3
 8005404:	69fa      	ldr	r2, [r7, #28]
 8005406:	9201      	str	r2, [sp, #4]
 8005408:	9300      	str	r3, [sp, #0]
 800540a:	2302      	movs	r3, #2
 800540c:	4622      	mov	r2, r4
 800540e:	f7ff fec9 	bl	80051a4 <LCD_Circle_Fill_Helper>
}
 8005412:	bf00      	nop
 8005414:	370c      	adds	r7, #12
 8005416:	46bd      	mov	sp, r7
 8005418:	bd90      	pop	{r4, r7, pc}

0800541a <LCD_Char>:

static void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24)
{
 800541a:	b590      	push	{r4, r7, lr}
 800541c:	b08b      	sub	sp, #44	; 0x2c
 800541e:	af02      	add	r7, sp, #8
 8005420:	60ba      	str	r2, [r7, #8]
 8005422:	607b      	str	r3, [r7, #4]
 8005424:	4603      	mov	r3, r0
 8005426:	81fb      	strh	r3, [r7, #14]
 8005428:	460b      	mov	r3, r1
 800542a:	81bb      	strh	r3, [r7, #12]
	uint8_t  *bitmap = font -> bitmap;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	617b      	str	r3, [r7, #20]
	uint16_t bo = glyph -> bitmapOffset;
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	881b      	ldrh	r3, [r3, #0]
 8005436:	83fb      	strh	r3, [r7, #30]
	uint8_t bits = 0, bit = 0;
 8005438:	2300      	movs	r3, #0
 800543a:	777b      	strb	r3, [r7, #29]
 800543c:	2300      	movs	r3, #0
 800543e:	773b      	strb	r3, [r7, #28]
	uint16_t set_pixels = 0;
 8005440:	2300      	movs	r3, #0
 8005442:	837b      	strh	r3, [r7, #26]
	uint8_t  cur_x, cur_y;
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8005444:	2300      	movs	r3, #0
 8005446:	763b      	strb	r3, [r7, #24]
 8005448:	e093      	b.n	8005572 <LCD_Char+0x158>
	{
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 800544a:	2300      	movs	r3, #0
 800544c:	767b      	strb	r3, [r7, #25]
 800544e:	e052      	b.n	80054f6 <LCD_Char+0xdc>
		{
			if(bit == 0)
 8005450:	7f3b      	ldrb	r3, [r7, #28]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d109      	bne.n	800546a <LCD_Char+0x50>
			{
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8005456:	8bfb      	ldrh	r3, [r7, #30]
 8005458:	1c5a      	adds	r2, r3, #1
 800545a:	83fa      	strh	r2, [r7, #30]
 800545c:	461a      	mov	r2, r3
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	4413      	add	r3, r2
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	777b      	strb	r3, [r7, #29]
				bit  = 0x80;
 8005466:	2380      	movs	r3, #128	; 0x80
 8005468:	773b      	strb	r3, [r7, #28]
			}
			if(bits & bit)
 800546a:	7f7a      	ldrb	r2, [r7, #29]
 800546c:	7f3b      	ldrb	r3, [r7, #28]
 800546e:	4013      	ands	r3, r2
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d003      	beq.n	800547e <LCD_Char+0x64>
			{
				set_pixels++;
 8005476:	8b7b      	ldrh	r3, [r7, #26]
 8005478:	3301      	adds	r3, #1
 800547a:	837b      	strh	r3, [r7, #26]
 800547c:	e035      	b.n	80054ea <LCD_Char+0xd0>
			}
			else if (set_pixels > 0)
 800547e:	8b7b      	ldrh	r3, [r7, #26]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d032      	beq.n	80054ea <LCD_Char+0xd0>
			{
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800548a:	461a      	mov	r2, r3
 800548c:	7e7b      	ldrb	r3, [r7, #25]
 800548e:	441a      	add	r2, r3
 8005490:	8b7b      	ldrh	r3, [r7, #26]
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	b29a      	uxth	r2, r3
 8005496:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800549a:	b29b      	uxth	r3, r3
 800549c:	fb12 f303 	smulbb	r3, r2, r3
 80054a0:	b29a      	uxth	r2, r3
 80054a2:	89fb      	ldrh	r3, [r7, #14]
 80054a4:	4413      	add	r3, r2
 80054a6:	b298      	uxth	r0, r3
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80054ae:	461a      	mov	r2, r3
 80054b0:	7e3b      	ldrb	r3, [r7, #24]
 80054b2:	4413      	add	r3, r2
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	fb12 f303 	smulbb	r3, r2, r3
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	89bb      	ldrh	r3, [r7, #12]
 80054c4:	4413      	add	r3, r2
 80054c6:	b299      	uxth	r1, r3
 80054c8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	8b7a      	ldrh	r2, [r7, #26]
 80054d0:	fb12 f303 	smulbb	r3, r2, r3
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80054da:	b29c      	uxth	r4, r3
 80054dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054de:	9300      	str	r3, [sp, #0]
 80054e0:	4623      	mov	r3, r4
 80054e2:	f7fe fef7 	bl	80042d4 <LCD_Rect_Fill>
				set_pixels = 0;
 80054e6:	2300      	movs	r3, #0
 80054e8:	837b      	strh	r3, [r7, #26]
			}
			bit >>= 1;
 80054ea:	7f3b      	ldrb	r3, [r7, #28]
 80054ec:	085b      	lsrs	r3, r3, #1
 80054ee:	773b      	strb	r3, [r7, #28]
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 80054f0:	7e7b      	ldrb	r3, [r7, #25]
 80054f2:	3301      	adds	r3, #1
 80054f4:	767b      	strb	r3, [r7, #25]
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	789b      	ldrb	r3, [r3, #2]
 80054fa:	7e7a      	ldrb	r2, [r7, #25]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d3a7      	bcc.n	8005450 <LCD_Char+0x36>
		}
		if (set_pixels > 0)
 8005500:	8b7b      	ldrh	r3, [r7, #26]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d032      	beq.n	800556c <LCD_Char+0x152>
		{
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800550c:	461a      	mov	r2, r3
 800550e:	7e7b      	ldrb	r3, [r7, #25]
 8005510:	441a      	add	r2, r3
 8005512:	8b7b      	ldrh	r3, [r7, #26]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	b29a      	uxth	r2, r3
 8005518:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800551c:	b29b      	uxth	r3, r3
 800551e:	fb12 f303 	smulbb	r3, r2, r3
 8005522:	b29a      	uxth	r2, r3
 8005524:	89fb      	ldrh	r3, [r7, #14]
 8005526:	4413      	add	r3, r2
 8005528:	b298      	uxth	r0, r3
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8005530:	461a      	mov	r2, r3
 8005532:	7e3b      	ldrb	r3, [r7, #24]
 8005534:	4413      	add	r3, r2
 8005536:	b29a      	uxth	r2, r3
 8005538:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800553c:	b29b      	uxth	r3, r3
 800553e:	fb12 f303 	smulbb	r3, r2, r3
 8005542:	b29a      	uxth	r2, r3
 8005544:	89bb      	ldrh	r3, [r7, #12]
 8005546:	4413      	add	r3, r2
 8005548:	b299      	uxth	r1, r3
 800554a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800554e:	b29b      	uxth	r3, r3
 8005550:	8b7a      	ldrh	r2, [r7, #26]
 8005552:	fb12 f303 	smulbb	r3, r2, r3
 8005556:	b29a      	uxth	r2, r3
 8005558:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800555c:	b29c      	uxth	r4, r3
 800555e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005560:	9300      	str	r3, [sp, #0]
 8005562:	4623      	mov	r3, r4
 8005564:	f7fe feb6 	bl	80042d4 <LCD_Rect_Fill>
			set_pixels = 0;
 8005568:	2300      	movs	r3, #0
 800556a:	837b      	strh	r3, [r7, #26]
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 800556c:	7e3b      	ldrb	r3, [r7, #24]
 800556e:	3301      	adds	r3, #1
 8005570:	763b      	strb	r3, [r7, #24]
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	78db      	ldrb	r3, [r3, #3]
 8005576:	7e3a      	ldrb	r2, [r7, #24]
 8005578:	429a      	cmp	r2, r3
 800557a:	f4ff af66 	bcc.w	800544a <LCD_Char+0x30>
		}
	}
}
 800557e:	bf00      	nop
 8005580:	bf00      	nop
 8005582:	3724      	adds	r7, #36	; 0x24
 8005584:	46bd      	mov	sp, r7
 8005586:	bd90      	pop	{r4, r7, pc}

08005588 <LCD_Font>:

void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
{
 8005588:	b590      	push	{r4, r7, lr}
 800558a:	b08f      	sub	sp, #60	; 0x3c
 800558c:	af02      	add	r7, sp, #8
 800558e:	60ba      	str	r2, [r7, #8]
 8005590:	607b      	str	r3, [r7, #4]
 8005592:	4603      	mov	r3, r0
 8005594:	81fb      	strh	r3, [r7, #14]
 8005596:	460b      	mov	r3, r1
 8005598:	81bb      	strh	r3, [r7, #12]
	int16_t cursor_x = x;
 800559a:	89fb      	ldrh	r3, [r7, #14]
 800559c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int16_t cursor_y = y;
 800559e:	89bb      	ldrh	r3, [r7, #12]
 80055a0:	85bb      	strh	r3, [r7, #44]	; 0x2c
	GFXfont font;
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 80055a2:	f107 031c 	add.w	r3, r7, #28
 80055a6:	220c      	movs	r2, #12
 80055a8:	6879      	ldr	r1, [r7, #4]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f017 f8e4 	bl	801c778 <memcpy>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80055b0:	2300      	movs	r3, #0
 80055b2:	857b      	strh	r3, [r7, #42]	; 0x2a
 80055b4:	e056      	b.n	8005664 <LCD_Font+0xdc>
	{
		char c = text[text_pos];
 80055b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	4413      	add	r3, r2
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		if(c == '\n')
 80055c2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80055c6:	2b0a      	cmp	r3, #10
 80055c8:	d10f      	bne.n	80055ea <LCD_Font+0x62>
		{
			cursor_x = x;
 80055ca:	89fb      	ldrh	r3, [r7, #14]
 80055cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
			cursor_y += font.yAdvance * size;
 80055ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80055d8:	b29b      	uxth	r3, r3
 80055da:	fb12 f303 	smulbb	r3, r2, r3
 80055de:	b29a      	uxth	r2, r3
 80055e0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80055e2:	4413      	add	r3, r2
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80055e8:	e039      	b.n	800565e <LCD_Font+0xd6>
		}
		else if(c >= font.first && c <= font.last && c != '\r')
 80055ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80055ee:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d333      	bcc.n	800565e <LCD_Font+0xd6>
 80055f6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80055fa:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80055fe:	429a      	cmp	r2, r3
 8005600:	d82d      	bhi.n	800565e <LCD_Font+0xd6>
 8005602:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005606:	2b0d      	cmp	r3, #13
 8005608:	d029      	beq.n	800565e <LCD_Font+0xd6>
		{
			GFXglyph glyph;
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 800560a:	6a3a      	ldr	r2, [r7, #32]
 800560c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005610:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8005614:	1a5b      	subs	r3, r3, r1
 8005616:	00db      	lsls	r3, r3, #3
 8005618:	18d1      	adds	r1, r2, r3
 800561a:	f107 0314 	add.w	r3, r7, #20
 800561e:	2208      	movs	r2, #8
 8005620:	4618      	mov	r0, r3
 8005622:	f017 f8a9 	bl	801c778 <memcpy>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8005626:	f107 041c 	add.w	r4, r7, #28
 800562a:	f107 0214 	add.w	r2, r7, #20
 800562e:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8005632:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8005636:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005638:	9301      	str	r3, [sp, #4]
 800563a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800563e:	9300      	str	r3, [sp, #0]
 8005640:	4623      	mov	r3, r4
 8005642:	f7ff feea 	bl	800541a <LCD_Char>
			cursor_x += glyph.xAdvance * size;
 8005646:	7e3b      	ldrb	r3, [r7, #24]
 8005648:	b29a      	uxth	r2, r3
 800564a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800564e:	b29b      	uxth	r3, r3
 8005650:	fb12 f303 	smulbb	r3, r2, r3
 8005654:	b29a      	uxth	r2, r3
 8005656:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005658:	4413      	add	r3, r2
 800565a:	b29b      	uxth	r3, r3
 800565c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800565e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005660:	3301      	adds	r3, #1
 8005662:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005664:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8005666:	68b8      	ldr	r0, [r7, #8]
 8005668:	f013 f9ac 	bl	80189c4 <strlen>
 800566c:	4603      	mov	r3, r0
 800566e:	429c      	cmp	r4, r3
 8005670:	d3a1      	bcc.n	80055b6 <LCD_Font+0x2e>
		}
	}
}
 8005672:	bf00      	nop
 8005674:	bf00      	nop
 8005676:	3734      	adds	r7, #52	; 0x34
 8005678:	46bd      	mov	sp, r7
 800567a:	bd90      	pop	{r4, r7, pc}

0800567c <LCD_Init>:

void LCD_Init(void)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	af00      	add	r7, sp, #0
	//		LCD_RST_SET
	//    HAL_Delay (100);
	//    LCD_RST_RESET
	//    HAL_Delay (120);
	//    LCD_RST_SET
	HAL_Delay(150);
 8005680:	2096      	movs	r0, #150	; 0x96
 8005682:	f001 f913 	bl	80068ac <HAL_Delay>
	3.  Before PLL is locked, SSD1961/2/3 is operating at input clock frequency (e.g. 10MHz), registers
	programming cannot be set faster than half of the input clock frequency (5M words/s in this example).
	Example to program SSD1961 with M = 29, N = 2, VCO = 10M x 30 = 300 MHz, PLL frequency = 300M / 3 = 100
	MHz
	******************************/
	LCD_Send_Cmd(LCD_RESET);
 8005686:	2001      	movs	r0, #1
 8005688:	f7fe fd95 	bl	80041b6 <LCD_Send_Cmd>
	LCD_Send_Cmd(LCD_DISPLAY_ON); 		
 800568c:	2029      	movs	r0, #41	; 0x29
 800568e:	f7fe fd92 	bl	80041b6 <LCD_Send_Cmd>
	LCD_Send_Cmd(0xE2);//set frequency
 8005692:	20e2      	movs	r0, #226	; 0xe2
 8005694:	f7fe fd8f 	bl	80041b6 <LCD_Send_Cmd>
	LCD_Send_Dat(0x1D);  // presceller(M=29) 
 8005698:	201d      	movs	r0, #29
 800569a:	f7fe fd9b 	bl	80041d4 <LCD_Send_Dat>
	LCD_Send_Dat(0x02);  //multiplier(N=2) 
 800569e:	2002      	movs	r0, #2
 80056a0:	f7fe fd98 	bl	80041d4 <LCD_Send_Dat>
	LCD_Send_Dat(0xFF);  //on-off multiplier and presceller
 80056a4:	20ff      	movs	r0, #255	; 0xff
 80056a6:	f7fe fd95 	bl	80041d4 <LCD_Send_Dat>
	//3. Turn on the PLL 
	LCD_Send_Cmd(0xE0);
 80056aa:	20e0      	movs	r0, #224	; 0xe0
 80056ac:	f7fe fd83 	bl	80041b6 <LCD_Send_Cmd>
	LCD_Send_Dat(0x01);
 80056b0:	2001      	movs	r0, #1
 80056b2:	f7fe fd8f 	bl	80041d4 <LCD_Send_Dat>
	HAL_Delay(120); // Wait for 100us to let the PLL stable and read the PLL lock status bit. 
 80056b6:	2078      	movs	r0, #120	; 0x78
 80056b8:	f001 f8f8 	bl	80068ac <HAL_Delay>
	LCD_Send_Cmd(0xE0);
 80056bc:	20e0      	movs	r0, #224	; 0xe0
 80056be:	f7fe fd7a 	bl	80041b6 <LCD_Send_Cmd>
	//READ COMMAND “0xE4);   (Bit 2 = 1 if PLL locked) 
	LCD_Send_Dat(0x03); // 5. Switch the clock source to PLL 
 80056c2:	2003      	movs	r0, #3
 80056c4:	f7fe fd86 	bl	80041d4 <LCD_Send_Dat>
	HAL_Delay(120);
 80056c8:	2078      	movs	r0, #120	; 0x78
 80056ca:	f001 f8ef 	bl	80068ac <HAL_Delay>
	LCD_Send_Cmd(0x01); //6. Software Reset
 80056ce:	2001      	movs	r0, #1
 80056d0:	f7fe fd71 	bl	80041b6 <LCD_Send_Cmd>
	HAL_Delay(120);
 80056d4:	2078      	movs	r0, #120	; 0x78
 80056d6:	f001 f8e9 	bl	80068ac <HAL_Delay>
	/*************
	Dot clock Freq = PLL Freq x (LCDC_FPR + 1) / 2^20
	For example,  22MHz = 100MHz * (LCDC_FPR+1) / 2^20
	LCDC_FPR = 230685 = 0x3851D
	********************/
	LCD_Send_Cmd(0xE6);  // 7. Configure the dot clock frequency
 80056da:	20e6      	movs	r0, #230	; 0xe6
 80056dc:	f7fe fd6b 	bl	80041b6 <LCD_Send_Cmd>
	LCD_Send_Dat(0x03);
 80056e0:	2003      	movs	r0, #3
 80056e2:	f7fe fd77 	bl	80041d4 <LCD_Send_Dat>
	LCD_Send_Dat(0x85);
 80056e6:	2085      	movs	r0, #133	; 0x85
 80056e8:	f7fe fd74 	bl	80041d4 <LCD_Send_Dat>
	LCD_Send_Dat(0x1D);
 80056ec:	201d      	movs	r0, #29
 80056ee:	f7fe fd71 	bl	80041d4 <LCD_Send_Dat>
	//8. Configure the LCD panel  
	//a. Set the panel size to 480 x 800 and polarity of LSHIFT, LLINE and LFRAME to active low 
	LCD_Send_Cmd(0xB0);
 80056f2:	20b0      	movs	r0, #176	; 0xb0
 80056f4:	f7fe fd5f 	bl	80041b6 <LCD_Send_Cmd>
	if (LSHIFT) LCD_Send_Dat(0x0C); /* 0x08 0x0C 0xAE(5') */else LCD_Send_Dat(0xAE); //18bit panel, disable dithering, LSHIFT: Data latch in rising edge, LLINE and LFRAME: active low 
 80056f8:	20ae      	movs	r0, #174	; 0xae
 80056fa:	f7fe fd6b 	bl	80041d4 <LCD_Send_Dat>
	LCD_Send_Dat(0x20);  /* 0x00 0x80 0x20(5') */    // TFT type 
 80056fe:	2020      	movs	r0, #32
 8005700:	f7fe fd68 	bl	80041d4 <LCD_Send_Dat>
	LCD_Send_Dat(0x03);     // Horizontal Width:  480 - 1 = 0x031F 
 8005704:	2003      	movs	r0, #3
 8005706:	f7fe fd65 	bl	80041d4 <LCD_Send_Dat>
	LCD_Send_Dat(0x1F);
 800570a:	201f      	movs	r0, #31
 800570c:	f7fe fd62 	bl	80041d4 <LCD_Send_Dat>
	LCD_Send_Dat(0x01);     // Vertical Width :  800 -1 = 0x01DF
 8005710:	2001      	movs	r0, #1
 8005712:	f7fe fd5f 	bl	80041d4 <LCD_Send_Dat>
	LCD_Send_Dat(0xDF);
 8005716:	20df      	movs	r0, #223	; 0xdf
 8005718:	f7fe fd5c 	bl	80041d4 <LCD_Send_Dat>
	LCD_Send_Dat(0x2D);  /* 0x00 0x2d */   // 000 = режим RGB
 800571c:	202d      	movs	r0, #45	; 0x2d
 800571e:	f7fe fd59 	bl	80041d4 <LCD_Send_Dat>
											 //b. Set the horizontal period 
	LCD_Send_Cmd(0xB4); // Horizontal Display Period  
 8005722:	20b4      	movs	r0, #180	; 0xb4
 8005724:	f7fe fd47 	bl	80041b6 <LCD_Send_Cmd>
	LCD_Send_Dat(0x03);    // HT: horizontal total period (display + non-display) – 1 = 520-1 =  519 =0x0207
 8005728:	2003      	movs	r0, #3
 800572a:	f7fe fd53 	bl	80041d4 <LCD_Send_Dat>
	LCD_Send_Dat(0xA0);
 800572e:	20a0      	movs	r0, #160	; 0xa0
 8005730:	f7fe fd50 	bl	80041d4 <LCD_Send_Dat>
	LCD_Send_Dat(0x00);    // HPS: Horizontal Sync Pulse Start Position = Horizontal Pulse Width + Horizontal Back Porch = 16 = 0x10 
 8005734:	2000      	movs	r0, #0
 8005736:	f7fe fd4d 	bl	80041d4 <LCD_Send_Dat>
	LCD_Send_Dat(0x2E);
 800573a:	202e      	movs	r0, #46	; 0x2e
 800573c:	f7fe fd4a 	bl	80041d4 <LCD_Send_Dat>
	LCD_Send_Dat(0x30);     // HPW: Horizontal Sync Pulse Width - 1=8-1=7 
 8005740:	2030      	movs	r0, #48	; 0x30
 8005742:	f7fe fd47 	bl	80041d4 <LCD_Send_Dat>
	LCD_Send_Dat(0x00);    // LPS: Horizontal Display Period Start Position = 0x0000 
 8005746:	2000      	movs	r0, #0
 8005748:	f7fe fd44 	bl	80041d4 <LCD_Send_Dat>
	LCD_Send_Dat(0x0F);
 800574c:	200f      	movs	r0, #15
 800574e:	f7fe fd41 	bl	80041d4 <LCD_Send_Dat>
	LCD_Send_Dat(0x00);    // LPSPP: Horizontal Sync Pulse Subpixel Start Position(for serial TFT interface).  Dummy value for TFT interface. 
 8005752:	2000      	movs	r0, #0
 8005754:	f7fe fd3e 	bl	80041d4 <LCD_Send_Dat>
							 //c. Set the vertical period 
	LCD_Send_Cmd(0xB6);    // Vertical Display Period  
 8005758:	20b6      	movs	r0, #182	; 0xb6
 800575a:	f7fe fd2c 	bl	80041b6 <LCD_Send_Cmd>
	LCD_Send_Dat(0x02);     // VT: Vertical Total (display + non-display) Period – 1  =647=0x287 
 800575e:	2002      	movs	r0, #2
 8005760:	f7fe fd38 	bl	80041d4 <LCD_Send_Dat>
	LCD_Send_Dat(0x0D);
 8005764:	200d      	movs	r0, #13
 8005766:	f7fe fd35 	bl	80041d4 <LCD_Send_Dat>
	LCD_Send_Dat(0x00);     // VPS: Vertical Sync Pulse Start Position  =     Vertical Pulse Width + Vertical Back Porch = 2+2=4  
 800576a:	2000      	movs	r0, #0
 800576c:	f7fe fd32 	bl	80041d4 <LCD_Send_Dat>
	LCD_Send_Dat(0x10);
 8005770:	2010      	movs	r0, #16
 8005772:	f7fe fd2f 	bl	80041d4 <LCD_Send_Dat>
	LCD_Send_Dat(0x10);     //VPW: Vertical Sync Pulse Width – 1 =1 
 8005776:	2010      	movs	r0, #16
 8005778:	f7fe fd2c 	bl	80041d4 <LCD_Send_Dat>
	LCD_Send_Dat(0x08);     //FPS: Vertical Display Period Start Position = 0 
 800577c:	2008      	movs	r0, #8
 800577e:	f7fe fd29 	bl	80041d4 <LCD_Send_Dat>
	LCD_Send_Dat(0x00);
 8005782:	2000      	movs	r0, #0
 8005784:	f7fe fd26 	bl	80041d4 <LCD_Send_Dat>
	//9. Set the back light control PWM clock frequency
	//PWM signal frequency = PLL clock / (256 * (PWMF[7:0] + 1)) / 256
	LCD_Send_Cmd(0xBE);    // PWM configuration 
 8005788:	20be      	movs	r0, #190	; 0xbe
 800578a:	f7fe fd14 	bl	80041b6 <LCD_Send_Cmd>
	LCD_Send_Dat(0x08);     // set PWM signal frequency to 170Hz when PLL frequency is 100MHz 
 800578e:	2008      	movs	r0, #8
 8005790:	f7fe fd20 	bl	80041d4 <LCD_Send_Dat>
	LCD_Send_Dat(0xFF);     // PWM duty cycle  (50%) 
 8005794:	20ff      	movs	r0, #255	; 0xff
 8005796:	f7fe fd1d 	bl	80041d4 <LCD_Send_Dat>
	LCD_Send_Dat(0x01);     // 0x09 = enable DBC, 0x01 = disable DBC  //on
 800579a:	2001      	movs	r0, #1
 800579c:	f7fe fd1a 	bl	80041d4 <LCD_Send_Dat>
	LCD_Send_Cmd(0x36);     // set address_mode
 80057a0:	2036      	movs	r0, #54	; 0x36
 80057a2:	f7fe fd08 	bl	80041b6 <LCD_Send_Cmd>
	if (MIRROR_H) LCD_Send_Dat(0x02); else if (MIRROR_V) LCD_Send_Dat(0x03);
 80057a6:	2003      	movs	r0, #3
 80057a8:	f7fe fd14 	bl	80041d4 <LCD_Send_Dat>
	//13. Setup the MCU interface for 16-bit data write (565 RGB)
	LCD_Send_Cmd(0xF0);     // mcu interface config 
 80057ac:	20f0      	movs	r0, #240	; 0xf0
 80057ae:	f7fe fd02 	bl	80041b6 <LCD_Send_Cmd>
	LCD_Send_Dat(0x03);     // 16 bit interface (565)
 80057b2:	2003      	movs	r0, #3
 80057b4:	f7fe fd0e 	bl	80041d4 <LCD_Send_Dat>
							//10. Turn on the display 						
	LCD_Send_Cmd(LCD_DISPLAY_ON);     // display on 
 80057b8:	2029      	movs	r0, #41	; 0x29
 80057ba:	f7fe fcfc 	bl	80041b6 <LCD_Send_Cmd>
}
 80057be:	bf00      	nop
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <LCD_Bright>:

void LCD_Bright(uint8_t bright)
{
 80057c2:	b580      	push	{r7, lr}
 80057c4:	b082      	sub	sp, #8
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	4603      	mov	r3, r0
 80057ca:	71fb      	strb	r3, [r7, #7]
	LCD_Send_Cmd(0xBE);  // PWM configuration 
 80057cc:	20be      	movs	r0, #190	; 0xbe
 80057ce:	f7fe fcf2 	bl	80041b6 <LCD_Send_Cmd>
	LCD_Send_Dat(0x08);     // set PWM signal frequency to 170Hz when PLL frequency is 100MHz 
 80057d2:	2008      	movs	r0, #8
 80057d4:	f7fe fcfe 	bl	80041d4 <LCD_Send_Dat>
	LCD_Send_Dat(bright);   // PWM duty cycle  
 80057d8:	79fb      	ldrb	r3, [r7, #7]
 80057da:	b29b      	uxth	r3, r3
 80057dc:	4618      	mov	r0, r3
 80057de:	f7fe fcf9 	bl	80041d4 <LCD_Send_Dat>
	LCD_Send_Dat(0x01);
 80057e2:	2001      	movs	r0, #1
 80057e4:	f7fe fcf6 	bl	80041d4 <LCD_Send_Dat>
}
 80057e8:	bf00      	nop
 80057ea:	3708      	adds	r7, #8
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057f6:	2300      	movs	r3, #0
 80057f8:	603b      	str	r3, [r7, #0]
 80057fa:	4b10      	ldr	r3, [pc, #64]	; (800583c <HAL_MspInit+0x4c>)
 80057fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057fe:	4a0f      	ldr	r2, [pc, #60]	; (800583c <HAL_MspInit+0x4c>)
 8005800:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005804:	6453      	str	r3, [r2, #68]	; 0x44
 8005806:	4b0d      	ldr	r3, [pc, #52]	; (800583c <HAL_MspInit+0x4c>)
 8005808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800580a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800580e:	603b      	str	r3, [r7, #0]
 8005810:	683b      	ldr	r3, [r7, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005812:	2300      	movs	r3, #0
 8005814:	607b      	str	r3, [r7, #4]
 8005816:	4b09      	ldr	r3, [pc, #36]	; (800583c <HAL_MspInit+0x4c>)
 8005818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581a:	4a08      	ldr	r2, [pc, #32]	; (800583c <HAL_MspInit+0x4c>)
 800581c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005820:	6413      	str	r3, [r2, #64]	; 0x40
 8005822:	4b06      	ldr	r3, [pc, #24]	; (800583c <HAL_MspInit+0x4c>)
 8005824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800582a:	607b      	str	r3, [r7, #4]
 800582c:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800582e:	bf00      	nop
 8005830:	370c      	adds	r7, #12
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	40023800 	.word	0x40023800

08005840 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b08a      	sub	sp, #40	; 0x28
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005848:	f107 0314 	add.w	r3, r7, #20
 800584c:	2200      	movs	r2, #0
 800584e:	601a      	str	r2, [r3, #0]
 8005850:	605a      	str	r2, [r3, #4]
 8005852:	609a      	str	r2, [r3, #8]
 8005854:	60da      	str	r2, [r3, #12]
 8005856:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a17      	ldr	r2, [pc, #92]	; (80058bc <HAL_DAC_MspInit+0x7c>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d127      	bne.n	80058b2 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8005862:	2300      	movs	r3, #0
 8005864:	60fb      	str	r3, [r7, #12]
 8005866:	4b16      	ldr	r3, [pc, #88]	; (80058c0 <HAL_DAC_MspInit+0x80>)
 8005868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586a:	4a15      	ldr	r2, [pc, #84]	; (80058c0 <HAL_DAC_MspInit+0x80>)
 800586c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005870:	6413      	str	r3, [r2, #64]	; 0x40
 8005872:	4b13      	ldr	r3, [pc, #76]	; (80058c0 <HAL_DAC_MspInit+0x80>)
 8005874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005876:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800587a:	60fb      	str	r3, [r7, #12]
 800587c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800587e:	2300      	movs	r3, #0
 8005880:	613b      	str	r3, [r7, #16]
 8005882:	4b0f      	ldr	r3, [pc, #60]	; (80058c0 <HAL_DAC_MspInit+0x80>)
 8005884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005886:	4a0e      	ldr	r2, [pc, #56]	; (80058c0 <HAL_DAC_MspInit+0x80>)
 8005888:	f043 0301 	orr.w	r3, r3, #1
 800588c:	6313      	str	r3, [r2, #48]	; 0x30
 800588e:	4b0c      	ldr	r3, [pc, #48]	; (80058c0 <HAL_DAC_MspInit+0x80>)
 8005890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005892:	f003 0301 	and.w	r3, r3, #1
 8005896:	613b      	str	r3, [r7, #16]
 8005898:	693b      	ldr	r3, [r7, #16]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800589a:	2330      	movs	r3, #48	; 0x30
 800589c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800589e:	2303      	movs	r3, #3
 80058a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058a2:	2300      	movs	r3, #0
 80058a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058a6:	f107 0314 	add.w	r3, r7, #20
 80058aa:	4619      	mov	r1, r3
 80058ac:	4805      	ldr	r0, [pc, #20]	; (80058c4 <HAL_DAC_MspInit+0x84>)
 80058ae:	f005 f919 	bl	800aae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80058b2:	bf00      	nop
 80058b4:	3728      	adds	r7, #40	; 0x28
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	40007400 	.word	0x40007400
 80058c0:	40023800 	.word	0x40023800
 80058c4:	40020000 	.word	0x40020000

080058c8 <HAL_DAC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspDeInit(DAC_HandleTypeDef* hdac)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a08      	ldr	r2, [pc, #32]	; (80058f8 <HAL_DAC_MspDeInit+0x30>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d109      	bne.n	80058ee <HAL_DAC_MspDeInit+0x26>
  {
  /* USER CODE BEGIN DAC_MspDeInit 0 */

  /* USER CODE END DAC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DAC_CLK_DISABLE();
 80058da:	4b08      	ldr	r3, [pc, #32]	; (80058fc <HAL_DAC_MspDeInit+0x34>)
 80058dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058de:	4a07      	ldr	r2, [pc, #28]	; (80058fc <HAL_DAC_MspDeInit+0x34>)
 80058e0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80058e4:	6413      	str	r3, [r2, #64]	; 0x40

    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4|GPIO_PIN_5);
 80058e6:	2130      	movs	r1, #48	; 0x30
 80058e8:	4805      	ldr	r0, [pc, #20]	; (8005900 <HAL_DAC_MspDeInit+0x38>)
 80058ea:	f005 fa97 	bl	800ae1c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN DAC_MspDeInit 1 */

  /* USER CODE END DAC_MspDeInit 1 */
  }

}
 80058ee:	bf00      	nop
 80058f0:	3708      	adds	r7, #8
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	40007400 	.word	0x40007400
 80058fc:	40023800 	.word	0x40023800
 8005900:	40020000 	.word	0x40020000

08005904 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b08a      	sub	sp, #40	; 0x28
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800590c:	f107 0314 	add.w	r3, r7, #20
 8005910:	2200      	movs	r2, #0
 8005912:	601a      	str	r2, [r3, #0]
 8005914:	605a      	str	r2, [r3, #4]
 8005916:	609a      	str	r2, [r3, #8]
 8005918:	60da      	str	r2, [r3, #12]
 800591a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a21      	ldr	r2, [pc, #132]	; (80059a8 <HAL_I2C_MspInit+0xa4>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d13b      	bne.n	800599e <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005926:	2300      	movs	r3, #0
 8005928:	60fb      	str	r3, [r7, #12]
 800592a:	4b20      	ldr	r3, [pc, #128]	; (80059ac <HAL_I2C_MspInit+0xa8>)
 800592c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592e:	4a1f      	ldr	r2, [pc, #124]	; (80059ac <HAL_I2C_MspInit+0xa8>)
 8005930:	f043 0302 	orr.w	r3, r3, #2
 8005934:	6313      	str	r3, [r2, #48]	; 0x30
 8005936:	4b1d      	ldr	r3, [pc, #116]	; (80059ac <HAL_I2C_MspInit+0xa8>)
 8005938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593a:	f003 0302 	and.w	r3, r3, #2
 800593e:	60fb      	str	r3, [r7, #12]
 8005940:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005942:	23c0      	movs	r3, #192	; 0xc0
 8005944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005946:	2312      	movs	r3, #18
 8005948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800594a:	2301      	movs	r3, #1
 800594c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800594e:	2303      	movs	r3, #3
 8005950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005952:	2304      	movs	r3, #4
 8005954:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005956:	f107 0314 	add.w	r3, r7, #20
 800595a:	4619      	mov	r1, r3
 800595c:	4814      	ldr	r0, [pc, #80]	; (80059b0 <HAL_I2C_MspInit+0xac>)
 800595e:	f005 f8c1 	bl	800aae4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005962:	2300      	movs	r3, #0
 8005964:	613b      	str	r3, [r7, #16]
 8005966:	4b11      	ldr	r3, [pc, #68]	; (80059ac <HAL_I2C_MspInit+0xa8>)
 8005968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596a:	4a10      	ldr	r2, [pc, #64]	; (80059ac <HAL_I2C_MspInit+0xa8>)
 800596c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005970:	6413      	str	r3, [r2, #64]	; 0x40
 8005972:	4b0e      	ldr	r3, [pc, #56]	; (80059ac <HAL_I2C_MspInit+0xa8>)
 8005974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005976:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800597a:	613b      	str	r3, [r7, #16]
 800597c:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800597e:	2200      	movs	r2, #0
 8005980:	2100      	movs	r1, #0
 8005982:	201f      	movs	r0, #31
 8005984:	f001 fa89 	bl	8006e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005988:	201f      	movs	r0, #31
 800598a:	f001 faa2 	bl	8006ed2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800598e:	2200      	movs	r2, #0
 8005990:	2100      	movs	r1, #0
 8005992:	2020      	movs	r0, #32
 8005994:	f001 fa81 	bl	8006e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8005998:	2020      	movs	r0, #32
 800599a:	f001 fa9a 	bl	8006ed2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800599e:	bf00      	nop
 80059a0:	3728      	adds	r7, #40	; 0x28
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	40005400 	.word	0x40005400
 80059ac:	40023800 	.word	0x40023800
 80059b0:	40020400 	.word	0x40020400

080059b4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a0d      	ldr	r2, [pc, #52]	; (80059f8 <HAL_I2C_MspDeInit+0x44>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d113      	bne.n	80059ee <HAL_I2C_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80059c6:	4b0d      	ldr	r3, [pc, #52]	; (80059fc <HAL_I2C_MspDeInit+0x48>)
 80059c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ca:	4a0c      	ldr	r2, [pc, #48]	; (80059fc <HAL_I2C_MspDeInit+0x48>)
 80059cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80059d0:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80059d2:	2140      	movs	r1, #64	; 0x40
 80059d4:	480a      	ldr	r0, [pc, #40]	; (8005a00 <HAL_I2C_MspDeInit+0x4c>)
 80059d6:	f005 fa21 	bl	800ae1c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80059da:	2180      	movs	r1, #128	; 0x80
 80059dc:	4808      	ldr	r0, [pc, #32]	; (8005a00 <HAL_I2C_MspDeInit+0x4c>)
 80059de:	f005 fa1d 	bl	800ae1c <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 80059e2:	201f      	movs	r0, #31
 80059e4:	f001 fa83 	bl	8006eee <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 80059e8:	2020      	movs	r0, #32
 80059ea:	f001 fa80 	bl	8006eee <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80059ee:	bf00      	nop
 80059f0:	3708      	adds	r7, #8
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	40005400 	.word	0x40005400
 80059fc:	40023800 	.word	0x40023800
 8005a00:	40020400 	.word	0x40020400

08005a04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b08e      	sub	sp, #56	; 0x38
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a10:	2200      	movs	r2, #0
 8005a12:	601a      	str	r2, [r3, #0]
 8005a14:	605a      	str	r2, [r3, #4]
 8005a16:	609a      	str	r2, [r3, #8]
 8005a18:	60da      	str	r2, [r3, #12]
 8005a1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a89      	ldr	r2, [pc, #548]	; (8005c48 <HAL_SPI_MspInit+0x244>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d12c      	bne.n	8005a80 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005a26:	2300      	movs	r3, #0
 8005a28:	60bb      	str	r3, [r7, #8]
 8005a2a:	4b88      	ldr	r3, [pc, #544]	; (8005c4c <HAL_SPI_MspInit+0x248>)
 8005a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a2e:	4a87      	ldr	r2, [pc, #540]	; (8005c4c <HAL_SPI_MspInit+0x248>)
 8005a30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005a34:	6453      	str	r3, [r2, #68]	; 0x44
 8005a36:	4b85      	ldr	r3, [pc, #532]	; (8005c4c <HAL_SPI_MspInit+0x248>)
 8005a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a3e:	60bb      	str	r3, [r7, #8]
 8005a40:	68bb      	ldr	r3, [r7, #8]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a42:	2300      	movs	r3, #0
 8005a44:	60fb      	str	r3, [r7, #12]
 8005a46:	4b81      	ldr	r3, [pc, #516]	; (8005c4c <HAL_SPI_MspInit+0x248>)
 8005a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4a:	4a80      	ldr	r2, [pc, #512]	; (8005c4c <HAL_SPI_MspInit+0x248>)
 8005a4c:	f043 0302 	orr.w	r3, r3, #2
 8005a50:	6313      	str	r3, [r2, #48]	; 0x30
 8005a52:	4b7e      	ldr	r3, [pc, #504]	; (8005c4c <HAL_SPI_MspInit+0x248>)
 8005a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a56:	f003 0302 	and.w	r3, r3, #2
 8005a5a:	60fb      	str	r3, [r7, #12]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8005a5e:	2338      	movs	r3, #56	; 0x38
 8005a60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a62:	2302      	movs	r3, #2
 8005a64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a66:	2300      	movs	r3, #0
 8005a68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005a6e:	2305      	movs	r3, #5
 8005a70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a76:	4619      	mov	r1, r3
 8005a78:	4875      	ldr	r0, [pc, #468]	; (8005c50 <HAL_SPI_MspInit+0x24c>)
 8005a7a:	f005 f833 	bl	800aae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8005a7e:	e0de      	b.n	8005c3e <HAL_SPI_MspInit+0x23a>
  else if(hspi->Instance==SPI2)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a73      	ldr	r2, [pc, #460]	; (8005c54 <HAL_SPI_MspInit+0x250>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	f040 8088 	bne.w	8005b9c <HAL_SPI_MspInit+0x198>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	613b      	str	r3, [r7, #16]
 8005a90:	4b6e      	ldr	r3, [pc, #440]	; (8005c4c <HAL_SPI_MspInit+0x248>)
 8005a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a94:	4a6d      	ldr	r2, [pc, #436]	; (8005c4c <HAL_SPI_MspInit+0x248>)
 8005a96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a9a:	6413      	str	r3, [r2, #64]	; 0x40
 8005a9c:	4b6b      	ldr	r3, [pc, #428]	; (8005c4c <HAL_SPI_MspInit+0x248>)
 8005a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005aa4:	613b      	str	r3, [r7, #16]
 8005aa6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	617b      	str	r3, [r7, #20]
 8005aac:	4b67      	ldr	r3, [pc, #412]	; (8005c4c <HAL_SPI_MspInit+0x248>)
 8005aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab0:	4a66      	ldr	r2, [pc, #408]	; (8005c4c <HAL_SPI_MspInit+0x248>)
 8005ab2:	f043 0302 	orr.w	r3, r3, #2
 8005ab6:	6313      	str	r3, [r2, #48]	; 0x30
 8005ab8:	4b64      	ldr	r3, [pc, #400]	; (8005c4c <HAL_SPI_MspInit+0x248>)
 8005aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005abc:	f003 0302 	and.w	r3, r3, #2
 8005ac0:	617b      	str	r3, [r7, #20]
 8005ac2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005ac4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8005ac8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005aca:	2302      	movs	r3, #2
 8005acc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005ad6:	2305      	movs	r3, #5
 8005ad8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ada:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ade:	4619      	mov	r1, r3
 8005ae0:	485b      	ldr	r0, [pc, #364]	; (8005c50 <HAL_SPI_MspInit+0x24c>)
 8005ae2:	f004 ffff 	bl	800aae4 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8005ae6:	4b5c      	ldr	r3, [pc, #368]	; (8005c58 <HAL_SPI_MspInit+0x254>)
 8005ae8:	4a5c      	ldr	r2, [pc, #368]	; (8005c5c <HAL_SPI_MspInit+0x258>)
 8005aea:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8005aec:	4b5a      	ldr	r3, [pc, #360]	; (8005c58 <HAL_SPI_MspInit+0x254>)
 8005aee:	2200      	movs	r2, #0
 8005af0:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005af2:	4b59      	ldr	r3, [pc, #356]	; (8005c58 <HAL_SPI_MspInit+0x254>)
 8005af4:	2240      	movs	r2, #64	; 0x40
 8005af6:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005af8:	4b57      	ldr	r3, [pc, #348]	; (8005c58 <HAL_SPI_MspInit+0x254>)
 8005afa:	2200      	movs	r2, #0
 8005afc:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005afe:	4b56      	ldr	r3, [pc, #344]	; (8005c58 <HAL_SPI_MspInit+0x254>)
 8005b00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b04:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005b06:	4b54      	ldr	r3, [pc, #336]	; (8005c58 <HAL_SPI_MspInit+0x254>)
 8005b08:	2200      	movs	r2, #0
 8005b0a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005b0c:	4b52      	ldr	r3, [pc, #328]	; (8005c58 <HAL_SPI_MspInit+0x254>)
 8005b0e:	2200      	movs	r2, #0
 8005b10:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8005b12:	4b51      	ldr	r3, [pc, #324]	; (8005c58 <HAL_SPI_MspInit+0x254>)
 8005b14:	2200      	movs	r2, #0
 8005b16:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005b18:	4b4f      	ldr	r3, [pc, #316]	; (8005c58 <HAL_SPI_MspInit+0x254>)
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005b1e:	4b4e      	ldr	r3, [pc, #312]	; (8005c58 <HAL_SPI_MspInit+0x254>)
 8005b20:	2200      	movs	r2, #0
 8005b22:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8005b24:	484c      	ldr	r0, [pc, #304]	; (8005c58 <HAL_SPI_MspInit+0x254>)
 8005b26:	f001 ff97 	bl	8007a58 <HAL_DMA_Init>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d001      	beq.n	8005b34 <HAL_SPI_MspInit+0x130>
      Error_Handler();
 8005b30:	f7fe fae8 	bl	8004104 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a48      	ldr	r2, [pc, #288]	; (8005c58 <HAL_SPI_MspInit+0x254>)
 8005b38:	649a      	str	r2, [r3, #72]	; 0x48
 8005b3a:	4a47      	ldr	r2, [pc, #284]	; (8005c58 <HAL_SPI_MspInit+0x254>)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8005b40:	4b47      	ldr	r3, [pc, #284]	; (8005c60 <HAL_SPI_MspInit+0x25c>)
 8005b42:	4a48      	ldr	r2, [pc, #288]	; (8005c64 <HAL_SPI_MspInit+0x260>)
 8005b44:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8005b46:	4b46      	ldr	r3, [pc, #280]	; (8005c60 <HAL_SPI_MspInit+0x25c>)
 8005b48:	2200      	movs	r2, #0
 8005b4a:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005b4c:	4b44      	ldr	r3, [pc, #272]	; (8005c60 <HAL_SPI_MspInit+0x25c>)
 8005b4e:	2200      	movs	r2, #0
 8005b50:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b52:	4b43      	ldr	r3, [pc, #268]	; (8005c60 <HAL_SPI_MspInit+0x25c>)
 8005b54:	2200      	movs	r2, #0
 8005b56:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005b58:	4b41      	ldr	r3, [pc, #260]	; (8005c60 <HAL_SPI_MspInit+0x25c>)
 8005b5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b5e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005b60:	4b3f      	ldr	r3, [pc, #252]	; (8005c60 <HAL_SPI_MspInit+0x25c>)
 8005b62:	2200      	movs	r2, #0
 8005b64:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005b66:	4b3e      	ldr	r3, [pc, #248]	; (8005c60 <HAL_SPI_MspInit+0x25c>)
 8005b68:	2200      	movs	r2, #0
 8005b6a:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8005b6c:	4b3c      	ldr	r3, [pc, #240]	; (8005c60 <HAL_SPI_MspInit+0x25c>)
 8005b6e:	2200      	movs	r2, #0
 8005b70:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005b72:	4b3b      	ldr	r3, [pc, #236]	; (8005c60 <HAL_SPI_MspInit+0x25c>)
 8005b74:	2200      	movs	r2, #0
 8005b76:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005b78:	4b39      	ldr	r3, [pc, #228]	; (8005c60 <HAL_SPI_MspInit+0x25c>)
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8005b7e:	4838      	ldr	r0, [pc, #224]	; (8005c60 <HAL_SPI_MspInit+0x25c>)
 8005b80:	f001 ff6a 	bl	8007a58 <HAL_DMA_Init>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d001      	beq.n	8005b8e <HAL_SPI_MspInit+0x18a>
      Error_Handler();
 8005b8a:	f7fe fabb 	bl	8004104 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a33      	ldr	r2, [pc, #204]	; (8005c60 <HAL_SPI_MspInit+0x25c>)
 8005b92:	64da      	str	r2, [r3, #76]	; 0x4c
 8005b94:	4a32      	ldr	r2, [pc, #200]	; (8005c60 <HAL_SPI_MspInit+0x25c>)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6393      	str	r3, [r2, #56]	; 0x38
}
 8005b9a:	e050      	b.n	8005c3e <HAL_SPI_MspInit+0x23a>
  else if(hspi->Instance==SPI3)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a31      	ldr	r2, [pc, #196]	; (8005c68 <HAL_SPI_MspInit+0x264>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d14b      	bne.n	8005c3e <HAL_SPI_MspInit+0x23a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	61bb      	str	r3, [r7, #24]
 8005baa:	4b28      	ldr	r3, [pc, #160]	; (8005c4c <HAL_SPI_MspInit+0x248>)
 8005bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bae:	4a27      	ldr	r2, [pc, #156]	; (8005c4c <HAL_SPI_MspInit+0x248>)
 8005bb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8005bb6:	4b25      	ldr	r3, [pc, #148]	; (8005c4c <HAL_SPI_MspInit+0x248>)
 8005bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bbe:	61bb      	str	r3, [r7, #24]
 8005bc0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	61fb      	str	r3, [r7, #28]
 8005bc6:	4b21      	ldr	r3, [pc, #132]	; (8005c4c <HAL_SPI_MspInit+0x248>)
 8005bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bca:	4a20      	ldr	r2, [pc, #128]	; (8005c4c <HAL_SPI_MspInit+0x248>)
 8005bcc:	f043 0301 	orr.w	r3, r3, #1
 8005bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8005bd2:	4b1e      	ldr	r3, [pc, #120]	; (8005c4c <HAL_SPI_MspInit+0x248>)
 8005bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	61fb      	str	r3, [r7, #28]
 8005bdc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005bde:	2300      	movs	r3, #0
 8005be0:	623b      	str	r3, [r7, #32]
 8005be2:	4b1a      	ldr	r3, [pc, #104]	; (8005c4c <HAL_SPI_MspInit+0x248>)
 8005be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be6:	4a19      	ldr	r2, [pc, #100]	; (8005c4c <HAL_SPI_MspInit+0x248>)
 8005be8:	f043 0304 	orr.w	r3, r3, #4
 8005bec:	6313      	str	r3, [r2, #48]	; 0x30
 8005bee:	4b17      	ldr	r3, [pc, #92]	; (8005c4c <HAL_SPI_MspInit+0x248>)
 8005bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf2:	f003 0304 	and.w	r3, r3, #4
 8005bf6:	623b      	str	r3, [r7, #32]
 8005bf8:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005bfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c00:	2302      	movs	r3, #2
 8005c02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c04:	2300      	movs	r3, #0
 8005c06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005c0c:	2306      	movs	r3, #6
 8005c0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c14:	4619      	mov	r1, r3
 8005c16:	4815      	ldr	r0, [pc, #84]	; (8005c6c <HAL_SPI_MspInit+0x268>)
 8005c18:	f004 ff64 	bl	800aae4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8005c1c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005c20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c22:	2302      	movs	r3, #2
 8005c24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c26:	2300      	movs	r3, #0
 8005c28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005c2e:	2306      	movs	r3, #6
 8005c30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c36:	4619      	mov	r1, r3
 8005c38:	480d      	ldr	r0, [pc, #52]	; (8005c70 <HAL_SPI_MspInit+0x26c>)
 8005c3a:	f004 ff53 	bl	800aae4 <HAL_GPIO_Init>
}
 8005c3e:	bf00      	nop
 8005c40:	3738      	adds	r7, #56	; 0x38
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	40013000 	.word	0x40013000
 8005c4c:	40023800 	.word	0x40023800
 8005c50:	40020400 	.word	0x40020400
 8005c54:	40003800 	.word	0x40003800
 8005c58:	20000418 	.word	0x20000418
 8005c5c:	40026070 	.word	0x40026070
 8005c60:	20000478 	.word	0x20000478
 8005c64:	40026058 	.word	0x40026058
 8005c68:	40003c00 	.word	0x40003c00
 8005c6c:	40020000 	.word	0x40020000
 8005c70:	40020800 	.word	0x40020800

08005c74 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a20      	ldr	r2, [pc, #128]	; (8005d04 <HAL_SPI_MspDeInit+0x90>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d10a      	bne.n	8005c9c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8005c86:	4b20      	ldr	r3, [pc, #128]	; (8005d08 <HAL_SPI_MspDeInit+0x94>)
 8005c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c8a:	4a1f      	ldr	r2, [pc, #124]	; (8005d08 <HAL_SPI_MspDeInit+0x94>)
 8005c8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c90:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5);
 8005c92:	2138      	movs	r1, #56	; 0x38
 8005c94:	481d      	ldr	r0, [pc, #116]	; (8005d0c <HAL_SPI_MspDeInit+0x98>)
 8005c96:	f005 f8c1 	bl	800ae1c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 8005c9a:	e02f      	b.n	8005cfc <HAL_SPI_MspDeInit+0x88>
  else if(hspi->Instance==SPI2)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a1b      	ldr	r2, [pc, #108]	; (8005d10 <HAL_SPI_MspDeInit+0x9c>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d115      	bne.n	8005cd2 <HAL_SPI_MspDeInit+0x5e>
    __HAL_RCC_SPI2_CLK_DISABLE();
 8005ca6:	4b18      	ldr	r3, [pc, #96]	; (8005d08 <HAL_SPI_MspDeInit+0x94>)
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005caa:	4a17      	ldr	r2, [pc, #92]	; (8005d08 <HAL_SPI_MspDeInit+0x94>)
 8005cac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cb0:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 8005cb2:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8005cb6:	4815      	ldr	r0, [pc, #84]	; (8005d0c <HAL_SPI_MspDeInit+0x98>)
 8005cb8:	f005 f8b0 	bl	800ae1c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f001 ff77 	bl	8007bb4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmarx);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f001 ff72 	bl	8007bb4 <HAL_DMA_DeInit>
}
 8005cd0:	e014      	b.n	8005cfc <HAL_SPI_MspDeInit+0x88>
  else if(hspi->Instance==SPI3)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a0f      	ldr	r2, [pc, #60]	; (8005d14 <HAL_SPI_MspDeInit+0xa0>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d10f      	bne.n	8005cfc <HAL_SPI_MspDeInit+0x88>
    __HAL_RCC_SPI3_CLK_DISABLE();
 8005cdc:	4b0a      	ldr	r3, [pc, #40]	; (8005d08 <HAL_SPI_MspDeInit+0x94>)
 8005cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce0:	4a09      	ldr	r2, [pc, #36]	; (8005d08 <HAL_SPI_MspDeInit+0x94>)
 8005ce2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ce6:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_15);
 8005ce8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005cec:	480a      	ldr	r0, [pc, #40]	; (8005d18 <HAL_SPI_MspDeInit+0xa4>)
 8005cee:	f005 f895 	bl	800ae1c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);
 8005cf2:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8005cf6:	4809      	ldr	r0, [pc, #36]	; (8005d1c <HAL_SPI_MspDeInit+0xa8>)
 8005cf8:	f005 f890 	bl	800ae1c <HAL_GPIO_DeInit>
}
 8005cfc:	bf00      	nop
 8005cfe:	3708      	adds	r7, #8
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	40013000 	.word	0x40013000
 8005d08:	40023800 	.word	0x40023800
 8005d0c:	40020400 	.word	0x40020400
 8005d10:	40003800 	.word	0x40003800
 8005d14:	40003c00 	.word	0x40003c00
 8005d18:	40020000 	.word	0x40020000
 8005d1c:	40020800 	.word	0x40020800

08005d20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b08a      	sub	sp, #40	; 0x28
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d28:	f107 0314 	add.w	r3, r7, #20
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	601a      	str	r2, [r3, #0]
 8005d30:	605a      	str	r2, [r3, #4]
 8005d32:	609a      	str	r2, [r3, #8]
 8005d34:	60da      	str	r2, [r3, #12]
 8005d36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a1d      	ldr	r2, [pc, #116]	; (8005db4 <HAL_UART_MspInit+0x94>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d134      	bne.n	8005dac <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005d42:	2300      	movs	r3, #0
 8005d44:	60fb      	str	r3, [r7, #12]
 8005d46:	4b1c      	ldr	r3, [pc, #112]	; (8005db8 <HAL_UART_MspInit+0x98>)
 8005d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d4a:	4a1b      	ldr	r2, [pc, #108]	; (8005db8 <HAL_UART_MspInit+0x98>)
 8005d4c:	f043 0310 	orr.w	r3, r3, #16
 8005d50:	6453      	str	r3, [r2, #68]	; 0x44
 8005d52:	4b19      	ldr	r3, [pc, #100]	; (8005db8 <HAL_UART_MspInit+0x98>)
 8005d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d56:	f003 0310 	and.w	r3, r3, #16
 8005d5a:	60fb      	str	r3, [r7, #12]
 8005d5c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d5e:	2300      	movs	r3, #0
 8005d60:	613b      	str	r3, [r7, #16]
 8005d62:	4b15      	ldr	r3, [pc, #84]	; (8005db8 <HAL_UART_MspInit+0x98>)
 8005d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d66:	4a14      	ldr	r2, [pc, #80]	; (8005db8 <HAL_UART_MspInit+0x98>)
 8005d68:	f043 0301 	orr.w	r3, r3, #1
 8005d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8005d6e:	4b12      	ldr	r3, [pc, #72]	; (8005db8 <HAL_UART_MspInit+0x98>)
 8005d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d72:	f003 0301 	and.w	r3, r3, #1
 8005d76:	613b      	str	r3, [r7, #16]
 8005d78:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005d7a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d80:	2302      	movs	r3, #2
 8005d82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d84:	2300      	movs	r3, #0
 8005d86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005d8c:	2307      	movs	r3, #7
 8005d8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d90:	f107 0314 	add.w	r3, r7, #20
 8005d94:	4619      	mov	r1, r3
 8005d96:	4809      	ldr	r0, [pc, #36]	; (8005dbc <HAL_UART_MspInit+0x9c>)
 8005d98:	f004 fea4 	bl	800aae4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	2100      	movs	r1, #0
 8005da0:	2025      	movs	r0, #37	; 0x25
 8005da2:	f001 f87a 	bl	8006e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005da6:	2025      	movs	r0, #37	; 0x25
 8005da8:	f001 f893 	bl	8006ed2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005dac:	bf00      	nop
 8005dae:	3728      	adds	r7, #40	; 0x28
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	40011000 	.word	0x40011000
 8005db8:	40023800 	.word	0x40023800
 8005dbc:	40020000 	.word	0x40020000

08005dc0 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a0a      	ldr	r2, [pc, #40]	; (8005df8 <HAL_UART_MspDeInit+0x38>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d10d      	bne.n	8005dee <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8005dd2:	4b0a      	ldr	r3, [pc, #40]	; (8005dfc <HAL_UART_MspDeInit+0x3c>)
 8005dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dd6:	4a09      	ldr	r2, [pc, #36]	; (8005dfc <HAL_UART_MspDeInit+0x3c>)
 8005dd8:	f023 0310 	bic.w	r3, r3, #16
 8005ddc:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8005dde:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005de2:	4807      	ldr	r0, [pc, #28]	; (8005e00 <HAL_UART_MspDeInit+0x40>)
 8005de4:	f005 f81a 	bl	800ae1c <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8005de8:	2025      	movs	r0, #37	; 0x25
 8005dea:	f001 f880 	bl	8006eee <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8005dee:	bf00      	nop
 8005df0:	3708      	adds	r7, #8
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	40011000 	.word	0x40011000
 8005dfc:	40023800 	.word	0x40023800
 8005e00:	40020000 	.word	0x40020000

08005e04 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b086      	sub	sp, #24
 8005e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8005e0a:	1d3b      	adds	r3, r7, #4
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	601a      	str	r2, [r3, #0]
 8005e10:	605a      	str	r2, [r3, #4]
 8005e12:	609a      	str	r2, [r3, #8]
 8005e14:	60da      	str	r2, [r3, #12]
 8005e16:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8005e18:	4b1c      	ldr	r3, [pc, #112]	; (8005e8c <HAL_FSMC_MspInit+0x88>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d131      	bne.n	8005e84 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8005e20:	4b1a      	ldr	r3, [pc, #104]	; (8005e8c <HAL_FSMC_MspInit+0x88>)
 8005e22:	2201      	movs	r2, #1
 8005e24:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8005e26:	2300      	movs	r3, #0
 8005e28:	603b      	str	r3, [r7, #0]
 8005e2a:	4b19      	ldr	r3, [pc, #100]	; (8005e90 <HAL_FSMC_MspInit+0x8c>)
 8005e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2e:	4a18      	ldr	r2, [pc, #96]	; (8005e90 <HAL_FSMC_MspInit+0x8c>)
 8005e30:	f043 0301 	orr.w	r3, r3, #1
 8005e34:	6393      	str	r3, [r2, #56]	; 0x38
 8005e36:	4b16      	ldr	r3, [pc, #88]	; (8005e90 <HAL_FSMC_MspInit+0x8c>)
 8005e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3a:	f003 0301 	and.w	r3, r3, #1
 8005e3e:	603b      	str	r3, [r7, #0]
 8005e40:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8005e42:	f64f 7380 	movw	r3, #65408	; 0xff80
 8005e46:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e48:	2302      	movs	r3, #2
 8005e4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e50:	2303      	movs	r3, #3
 8005e52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8005e54:	230c      	movs	r3, #12
 8005e56:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005e58:	1d3b      	adds	r3, r7, #4
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	480d      	ldr	r0, [pc, #52]	; (8005e94 <HAL_FSMC_MspInit+0x90>)
 8005e5e:	f004 fe41 	bl	800aae4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8005e62:	f24e 73b3 	movw	r3, #59315	; 0xe7b3
 8005e66:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e68:	2302      	movs	r3, #2
 8005e6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e70:	2303      	movs	r3, #3
 8005e72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8005e74:	230c      	movs	r3, #12
 8005e76:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005e78:	1d3b      	adds	r3, r7, #4
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	4806      	ldr	r0, [pc, #24]	; (8005e98 <HAL_FSMC_MspInit+0x94>)
 8005e7e:	f004 fe31 	bl	800aae4 <HAL_GPIO_Init>
 8005e82:	e000      	b.n	8005e86 <HAL_FSMC_MspInit+0x82>
    return;
 8005e84:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8005e86:	3718      	adds	r7, #24
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	20000978 	.word	0x20000978
 8005e90:	40023800 	.word	0x40023800
 8005e94:	40021000 	.word	0x40021000
 8005e98:	40020c00 	.word	0x40020c00

08005e9c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8005ea4:	f7ff ffae 	bl	8005e04 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8005ea8:	bf00      	nop
 8005eaa:	3708      	adds	r7, #8
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <HAL_FSMC_MspDeInit>:

static uint32_t FSMC_DeInitialized = 0;

static void HAL_FSMC_MspDeInit(void){
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspDeInit 0 */

  /* USER CODE END FSMC_MspDeInit 0 */
  if (FSMC_DeInitialized) {
 8005eb4:	4b0c      	ldr	r3, [pc, #48]	; (8005ee8 <HAL_FSMC_MspDeInit+0x38>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d113      	bne.n	8005ee4 <HAL_FSMC_MspDeInit+0x34>
    return;
  }
  FSMC_DeInitialized = 1;
 8005ebc:	4b0a      	ldr	r3, [pc, #40]	; (8005ee8 <HAL_FSMC_MspDeInit+0x38>)
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_DISABLE();
 8005ec2:	4b0a      	ldr	r3, [pc, #40]	; (8005eec <HAL_FSMC_MspDeInit+0x3c>)
 8005ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec6:	4a09      	ldr	r2, [pc, #36]	; (8005eec <HAL_FSMC_MspDeInit+0x3c>)
 8005ec8:	f023 0301 	bic.w	r3, r3, #1
 8005ecc:	6393      	str	r3, [r2, #56]	; 0x38
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8005ece:	f64f 7180 	movw	r1, #65408	; 0xff80
 8005ed2:	4807      	ldr	r0, [pc, #28]	; (8005ef0 <HAL_FSMC_MspDeInit+0x40>)
 8005ed4:	f004 ffa2 	bl	800ae1c <HAL_GPIO_DeInit>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15);

  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8005ed8:	f24e 71b3 	movw	r1, #59315	; 0xe7b3
 8005edc:	4805      	ldr	r0, [pc, #20]	; (8005ef4 <HAL_FSMC_MspDeInit+0x44>)
 8005ede:	f004 ff9d 	bl	800ae1c <HAL_GPIO_DeInit>
 8005ee2:	e000      	b.n	8005ee6 <HAL_FSMC_MspDeInit+0x36>
    return;
 8005ee4:	bf00      	nop
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7);

  /* USER CODE BEGIN FSMC_MspDeInit 1 */

  /* USER CODE END FSMC_MspDeInit 1 */
}
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	2000097c 	.word	0x2000097c
 8005eec:	40023800 	.word	0x40023800
 8005ef0:	40021000 	.word	0x40021000
 8005ef4:	40020c00 	.word	0x40020c00

08005ef8 <HAL_SRAM_MspDeInit>:

void HAL_SRAM_MspDeInit(SRAM_HandleTypeDef* hsram){
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspDeInit 0 */

  /* USER CODE END SRAM_MspDeInit 0 */
  HAL_FSMC_MspDeInit();
 8005f00:	f7ff ffd6 	bl	8005eb0 <HAL_FSMC_MspDeInit>
  /* USER CODE BEGIN SRAM_MspDeInit 1 */

  /* USER CODE END SRAM_MspDeInit 1 */
}
 8005f04:	bf00      	nop
 8005f06:	3708      	adds	r7, #8
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005f10:	e7fe      	b.n	8005f10 <NMI_Handler+0x4>

08005f12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005f12:	b480      	push	{r7}
 8005f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005f16:	e7fe      	b.n	8005f16 <HardFault_Handler+0x4>

08005f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005f1c:	e7fe      	b.n	8005f1c <MemManage_Handler+0x4>

08005f1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005f1e:	b480      	push	{r7}
 8005f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005f22:	e7fe      	b.n	8005f22 <BusFault_Handler+0x4>

08005f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005f24:	b480      	push	{r7}
 8005f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005f28:	e7fe      	b.n	8005f28 <UsageFault_Handler+0x4>

08005f2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005f2a:	b480      	push	{r7}
 8005f2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005f2e:	bf00      	nop
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005f3c:	bf00      	nop
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr

08005f46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005f46:	b480      	push	{r7}
 8005f48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005f4a:	bf00      	nop
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005f58:	f000 fc48 	bl	80067ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005f5c:	bf00      	nop
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8005f64:	4802      	ldr	r0, [pc, #8]	; (8005f70 <DMA1_Stream3_IRQHandler+0x10>)
 8005f66:	f002 f887 	bl	8008078 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8005f6a:	bf00      	nop
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	20000478 	.word	0x20000478

08005f74 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8005f78:	4802      	ldr	r0, [pc, #8]	; (8005f84 <DMA1_Stream4_IRQHandler+0x10>)
 8005f7a:	f002 f87d 	bl	8008078 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8005f7e:	bf00      	nop
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	20000418 	.word	0x20000418

08005f88 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005f8c:	4802      	ldr	r0, [pc, #8]	; (8005f98 <I2C1_EV_IRQHandler+0x10>)
 8005f8e:	f008 ff71 	bl	800ee74 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8005f92:	bf00      	nop
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	200002bc 	.word	0x200002bc

08005f9c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005fa0:	4802      	ldr	r0, [pc, #8]	; (8005fac <I2C1_ER_IRQHandler+0x10>)
 8005fa2:	f009 f8d8 	bl	800f156 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8005fa6:	bf00      	nop
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	200002bc 	.word	0x200002bc

08005fb0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005fb4:	4802      	ldr	r0, [pc, #8]	; (8005fc0 <USART1_IRQHandler+0x10>)
 8005fb6:	f010 fe31 	bl	8016c1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005fba:	bf00      	nop
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	200004d8 	.word	0x200004d8

08005fc4 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	af00      	add	r7, sp, #0
}
 8005fc8:	bf00      	nop
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr

08005fd2 <_getpid>:

int _getpid(void)
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	af00      	add	r7, sp, #0
	return 1;
 8005fd6:	2301      	movs	r3, #1
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr

08005fe2 <_kill>:

int _kill(int pid, int sig)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b082      	sub	sp, #8
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
 8005fea:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005fec:	f013 fc32 	bl	8019854 <__errno>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2216      	movs	r2, #22
 8005ff4:	601a      	str	r2, [r3, #0]
	return -1;
 8005ff6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3708      	adds	r7, #8
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <_exit>:

void _exit (int status)
{
 8006002:	b580      	push	{r7, lr}
 8006004:	b082      	sub	sp, #8
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800600a:	f04f 31ff 	mov.w	r1, #4294967295
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f7ff ffe7 	bl	8005fe2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8006014:	e7fe      	b.n	8006014 <_exit+0x12>

08006016 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006016:	b580      	push	{r7, lr}
 8006018:	b086      	sub	sp, #24
 800601a:	af00      	add	r7, sp, #0
 800601c:	60f8      	str	r0, [r7, #12]
 800601e:	60b9      	str	r1, [r7, #8]
 8006020:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006022:	2300      	movs	r3, #0
 8006024:	617b      	str	r3, [r7, #20]
 8006026:	e00a      	b.n	800603e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006028:	f3af 8000 	nop.w
 800602c:	4601      	mov	r1, r0
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	1c5a      	adds	r2, r3, #1
 8006032:	60ba      	str	r2, [r7, #8]
 8006034:	b2ca      	uxtb	r2, r1
 8006036:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	3301      	adds	r3, #1
 800603c:	617b      	str	r3, [r7, #20]
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	429a      	cmp	r2, r3
 8006044:	dbf0      	blt.n	8006028 <_read+0x12>
	}

return len;
 8006046:	687b      	ldr	r3, [r7, #4]
}
 8006048:	4618      	mov	r0, r3
 800604a:	3718      	adds	r7, #24
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800605c:	2300      	movs	r3, #0
 800605e:	617b      	str	r3, [r7, #20]
 8006060:	e009      	b.n	8006076 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	1c5a      	adds	r2, r3, #1
 8006066:	60ba      	str	r2, [r7, #8]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	4618      	mov	r0, r3
 800606c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	3301      	adds	r3, #1
 8006074:	617b      	str	r3, [r7, #20]
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	429a      	cmp	r2, r3
 800607c:	dbf1      	blt.n	8006062 <_write+0x12>
	}
	return len;
 800607e:	687b      	ldr	r3, [r7, #4]
}
 8006080:	4618      	mov	r0, r3
 8006082:	3718      	adds	r7, #24
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <_close>:

int _close(int file)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
	return -1;
 8006090:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006094:	4618      	mov	r0, r3
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80060b0:	605a      	str	r2, [r3, #4]
	return 0;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <_isatty>:

int _isatty(int file)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
	return 1;
 80060c8:	2301      	movs	r3, #1
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	370c      	adds	r7, #12
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr

080060d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80060d6:	b480      	push	{r7}
 80060d8:	b085      	sub	sp, #20
 80060da:	af00      	add	r7, sp, #0
 80060dc:	60f8      	str	r0, [r7, #12]
 80060de:	60b9      	str	r1, [r7, #8]
 80060e0:	607a      	str	r2, [r7, #4]
	return 0;
 80060e2:	2300      	movs	r3, #0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3714      	adds	r7, #20
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <_open>:

int _open(char *path, int flags, ...)
{
 80060f0:	b40e      	push	{r1, r2, r3}
 80060f2:	b480      	push	{r7}
 80060f4:	b082      	sub	sp, #8
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 80060fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3708      	adds	r7, #8
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	b003      	add	sp, #12
 800610a:	4770      	bx	lr

0800610c <_wait>:

int _wait(int *status)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
	errno = ECHILD;
 8006114:	f013 fb9e 	bl	8019854 <__errno>
 8006118:	4603      	mov	r3, r0
 800611a:	220a      	movs	r2, #10
 800611c:	601a      	str	r2, [r3, #0]
	return -1;
 800611e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006122:	4618      	mov	r0, r3
 8006124:	3708      	adds	r7, #8
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <_unlink>:

int _unlink(char *name)
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b082      	sub	sp, #8
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
	errno = ENOENT;
 8006132:	f013 fb8f 	bl	8019854 <__errno>
 8006136:	4603      	mov	r3, r0
 8006138:	2202      	movs	r2, #2
 800613a:	601a      	str	r2, [r3, #0]
	return -1;
 800613c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006140:	4618      	mov	r0, r3
 8006142:	3708      	adds	r7, #8
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <_times>:

int _times(struct tms *buf)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
	return -1;
 8006150:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006154:	4618      	mov	r0, r3
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <_stat>:

int _stat(char *file, struct stat *st)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006170:	605a      	str	r2, [r3, #4]
	return 0;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <_link>:

int _link(char *old, char *new)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
	errno = EMLINK;
 800618a:	f013 fb63 	bl	8019854 <__errno>
 800618e:	4603      	mov	r3, r0
 8006190:	221f      	movs	r2, #31
 8006192:	601a      	str	r2, [r3, #0]
	return -1;
 8006194:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006198:	4618      	mov	r0, r3
 800619a:	3708      	adds	r7, #8
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <_fork>:

int _fork(void)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	af00      	add	r7, sp, #0
	errno = EAGAIN;
 80061a4:	f013 fb56 	bl	8019854 <__errno>
 80061a8:	4603      	mov	r3, r0
 80061aa:	220b      	movs	r2, #11
 80061ac:	601a      	str	r2, [r3, #0]
	return -1;
 80061ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <_execve>:

int _execve(char *name, char **argv, char **env)
{
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b084      	sub	sp, #16
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	60f8      	str	r0, [r7, #12]
 80061be:	60b9      	str	r1, [r7, #8]
 80061c0:	607a      	str	r2, [r7, #4]
	errno = ENOMEM;
 80061c2:	f013 fb47 	bl	8019854 <__errno>
 80061c6:	4603      	mov	r3, r0
 80061c8:	220c      	movs	r2, #12
 80061ca:	601a      	str	r2, [r3, #0]
	return -1;
 80061cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3710      	adds	r7, #16
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b086      	sub	sp, #24
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80061e0:	4a14      	ldr	r2, [pc, #80]	; (8006234 <_sbrk+0x5c>)
 80061e2:	4b15      	ldr	r3, [pc, #84]	; (8006238 <_sbrk+0x60>)
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80061ec:	4b13      	ldr	r3, [pc, #76]	; (800623c <_sbrk+0x64>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d102      	bne.n	80061fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80061f4:	4b11      	ldr	r3, [pc, #68]	; (800623c <_sbrk+0x64>)
 80061f6:	4a12      	ldr	r2, [pc, #72]	; (8006240 <_sbrk+0x68>)
 80061f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80061fa:	4b10      	ldr	r3, [pc, #64]	; (800623c <_sbrk+0x64>)
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4413      	add	r3, r2
 8006202:	693a      	ldr	r2, [r7, #16]
 8006204:	429a      	cmp	r2, r3
 8006206:	d207      	bcs.n	8006218 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006208:	f013 fb24 	bl	8019854 <__errno>
 800620c:	4603      	mov	r3, r0
 800620e:	220c      	movs	r2, #12
 8006210:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006212:	f04f 33ff 	mov.w	r3, #4294967295
 8006216:	e009      	b.n	800622c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006218:	4b08      	ldr	r3, [pc, #32]	; (800623c <_sbrk+0x64>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800621e:	4b07      	ldr	r3, [pc, #28]	; (800623c <_sbrk+0x64>)
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4413      	add	r3, r2
 8006226:	4a05      	ldr	r2, [pc, #20]	; (800623c <_sbrk+0x64>)
 8006228:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800622a:	68fb      	ldr	r3, [r7, #12]
}
 800622c:	4618      	mov	r0, r3
 800622e:	3718      	adds	r7, #24
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}
 8006234:	20020000 	.word	0x20020000
 8006238:	00000400 	.word	0x00000400
 800623c:	20000984 	.word	0x20000984
 8006240:	20000dd0 	.word	0x20000dd0

08006244 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006244:	b480      	push	{r7}
 8006246:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006248:	4b06      	ldr	r3, [pc, #24]	; (8006264 <SystemInit+0x20>)
 800624a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800624e:	4a05      	ldr	r2, [pc, #20]	; (8006264 <SystemInit+0x20>)
 8006250:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006254:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006258:	bf00      	nop
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	e000ed00 	.word	0xe000ed00

08006268 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8006268:	b480      	push	{r7}
 800626a:	b087      	sub	sp, #28
 800626c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800626e:	2300      	movs	r3, #0
 8006270:	613b      	str	r3, [r7, #16]
 8006272:	2300      	movs	r3, #0
 8006274:	617b      	str	r3, [r7, #20]
 8006276:	2302      	movs	r3, #2
 8006278:	60fb      	str	r3, [r7, #12]
 800627a:	2300      	movs	r3, #0
 800627c:	60bb      	str	r3, [r7, #8]
 800627e:	2302      	movs	r3, #2
 8006280:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8006282:	4b34      	ldr	r3, [pc, #208]	; (8006354 <SystemCoreClockUpdate+0xec>)
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	f003 030c 	and.w	r3, r3, #12
 800628a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	2b08      	cmp	r3, #8
 8006290:	d011      	beq.n	80062b6 <SystemCoreClockUpdate+0x4e>
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	2b08      	cmp	r3, #8
 8006296:	d844      	bhi.n	8006322 <SystemCoreClockUpdate+0xba>
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d003      	beq.n	80062a6 <SystemCoreClockUpdate+0x3e>
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	2b04      	cmp	r3, #4
 80062a2:	d004      	beq.n	80062ae <SystemCoreClockUpdate+0x46>
 80062a4:	e03d      	b.n	8006322 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80062a6:	4b2c      	ldr	r3, [pc, #176]	; (8006358 <SystemCoreClockUpdate+0xf0>)
 80062a8:	4a2c      	ldr	r2, [pc, #176]	; (800635c <SystemCoreClockUpdate+0xf4>)
 80062aa:	601a      	str	r2, [r3, #0]
      break;
 80062ac:	e03d      	b.n	800632a <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80062ae:	4b2a      	ldr	r3, [pc, #168]	; (8006358 <SystemCoreClockUpdate+0xf0>)
 80062b0:	4a2b      	ldr	r2, [pc, #172]	; (8006360 <SystemCoreClockUpdate+0xf8>)
 80062b2:	601a      	str	r2, [r3, #0]
      break;
 80062b4:	e039      	b.n	800632a <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80062b6:	4b27      	ldr	r3, [pc, #156]	; (8006354 <SystemCoreClockUpdate+0xec>)
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	0d9b      	lsrs	r3, r3, #22
 80062bc:	f003 0301 	and.w	r3, r3, #1
 80062c0:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80062c2:	4b24      	ldr	r3, [pc, #144]	; (8006354 <SystemCoreClockUpdate+0xec>)
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062ca:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00c      	beq.n	80062ec <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80062d2:	4a23      	ldr	r2, [pc, #140]	; (8006360 <SystemCoreClockUpdate+0xf8>)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062da:	4a1e      	ldr	r2, [pc, #120]	; (8006354 <SystemCoreClockUpdate+0xec>)
 80062dc:	6852      	ldr	r2, [r2, #4]
 80062de:	0992      	lsrs	r2, r2, #6
 80062e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062e4:	fb02 f303 	mul.w	r3, r2, r3
 80062e8:	617b      	str	r3, [r7, #20]
 80062ea:	e00b      	b.n	8006304 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80062ec:	4a1b      	ldr	r2, [pc, #108]	; (800635c <SystemCoreClockUpdate+0xf4>)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062f4:	4a17      	ldr	r2, [pc, #92]	; (8006354 <SystemCoreClockUpdate+0xec>)
 80062f6:	6852      	ldr	r2, [r2, #4]
 80062f8:	0992      	lsrs	r2, r2, #6
 80062fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062fe:	fb02 f303 	mul.w	r3, r2, r3
 8006302:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8006304:	4b13      	ldr	r3, [pc, #76]	; (8006354 <SystemCoreClockUpdate+0xec>)
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	0c1b      	lsrs	r3, r3, #16
 800630a:	f003 0303 	and.w	r3, r3, #3
 800630e:	3301      	adds	r3, #1
 8006310:	005b      	lsls	r3, r3, #1
 8006312:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8006314:	697a      	ldr	r2, [r7, #20]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	fbb2 f3f3 	udiv	r3, r2, r3
 800631c:	4a0e      	ldr	r2, [pc, #56]	; (8006358 <SystemCoreClockUpdate+0xf0>)
 800631e:	6013      	str	r3, [r2, #0]
      break;
 8006320:	e003      	b.n	800632a <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8006322:	4b0d      	ldr	r3, [pc, #52]	; (8006358 <SystemCoreClockUpdate+0xf0>)
 8006324:	4a0d      	ldr	r2, [pc, #52]	; (800635c <SystemCoreClockUpdate+0xf4>)
 8006326:	601a      	str	r2, [r3, #0]
      break;
 8006328:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800632a:	4b0a      	ldr	r3, [pc, #40]	; (8006354 <SystemCoreClockUpdate+0xec>)
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	091b      	lsrs	r3, r3, #4
 8006330:	f003 030f 	and.w	r3, r3, #15
 8006334:	4a0b      	ldr	r2, [pc, #44]	; (8006364 <SystemCoreClockUpdate+0xfc>)
 8006336:	5cd3      	ldrb	r3, [r2, r3]
 8006338:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800633a:	4b07      	ldr	r3, [pc, #28]	; (8006358 <SystemCoreClockUpdate+0xf0>)
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	fa22 f303 	lsr.w	r3, r2, r3
 8006344:	4a04      	ldr	r2, [pc, #16]	; (8006358 <SystemCoreClockUpdate+0xf0>)
 8006346:	6013      	str	r3, [r2, #0]
}
 8006348:	bf00      	nop
 800634a:	371c      	adds	r7, #28
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr
 8006354:	40023800 	.word	0x40023800
 8006358:	20000058 	.word	0x20000058
 800635c:	00f42400 	.word	0x00f42400
 8006360:	007a1200 	.word	0x007a1200
 8006364:	08051ef8 	.word	0x08051ef8

08006368 <W25QXX_Reset>:

uint8_t rx_buf[1025];
uint8_t tx_buf[10];

void W25QXX_Reset (void)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(W25QXX_NSS_PORT, W25QXX_NSS_PIN, GPIO_PIN_RESET);
 800636c:	2200      	movs	r2, #0
 800636e:	2101      	movs	r1, #1
 8006370:	480b      	ldr	r0, [pc, #44]	; (80063a0 <W25QXX_Reset+0x38>)
 8006372:	f004 fe67 	bl	800b044 <HAL_GPIO_WritePin>
	tx_buf[0] = W25QXX_ENABLE_RESET;
 8006376:	4b0b      	ldr	r3, [pc, #44]	; (80063a4 <W25QXX_Reset+0x3c>)
 8006378:	2266      	movs	r2, #102	; 0x66
 800637a:	701a      	strb	r2, [r3, #0]
	tx_buf[1] = W25QXX_RESET;
 800637c:	4b09      	ldr	r3, [pc, #36]	; (80063a4 <W25QXX_Reset+0x3c>)
 800637e:	2299      	movs	r2, #153	; 0x99
 8006380:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit (&W25QXX_SPI, tx_buf, 2, 1000);
 8006382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006386:	2202      	movs	r2, #2
 8006388:	4906      	ldr	r1, [pc, #24]	; (80063a4 <W25QXX_Reset+0x3c>)
 800638a:	4807      	ldr	r0, [pc, #28]	; (80063a8 <W25QXX_Reset+0x40>)
 800638c:	f00c fbf7 	bl	8012b7e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W25QXX_NSS_PORT, W25QXX_NSS_PIN, GPIO_PIN_SET);
 8006390:	2201      	movs	r2, #1
 8006392:	2101      	movs	r1, #1
 8006394:	4802      	ldr	r0, [pc, #8]	; (80063a0 <W25QXX_Reset+0x38>)
 8006396:	f004 fe55 	bl	800b044 <HAL_GPIO_WritePin>
}
 800639a:	bf00      	nop
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	40020400 	.word	0x40020400
 80063a4:	20000d8c 	.word	0x20000d8c
 80063a8:	20000310 	.word	0x20000310

080063ac <W25QXX_Read_Data>:

void W25QXX_Read_Data(uint32_t addr, uint8_t* data, uint32_t sz)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
	HAL_GPIO_WritePin(W25QXX_NSS_PORT, W25QXX_NSS_PIN, GPIO_PIN_RESET);
 80063b8:	2200      	movs	r2, #0
 80063ba:	2101      	movs	r1, #1
 80063bc:	4815      	ldr	r0, [pc, #84]	; (8006414 <W25QXX_Read_Data+0x68>)
 80063be:	f004 fe41 	bl	800b044 <HAL_GPIO_WritePin>
	tx_buf[0] = W25QXX_READ;
 80063c2:	4b15      	ldr	r3, [pc, #84]	; (8006418 <W25QXX_Read_Data+0x6c>)
 80063c4:	2203      	movs	r2, #3
 80063c6:	701a      	strb	r2, [r3, #0]
	tx_buf[1] = (addr >> 16) & 0xFF;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	0c1b      	lsrs	r3, r3, #16
 80063cc:	b2da      	uxtb	r2, r3
 80063ce:	4b12      	ldr	r3, [pc, #72]	; (8006418 <W25QXX_Read_Data+0x6c>)
 80063d0:	705a      	strb	r2, [r3, #1]
	tx_buf[2] = (addr >> 8) & 0xFF;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	0a1b      	lsrs	r3, r3, #8
 80063d6:	b2da      	uxtb	r2, r3
 80063d8:	4b0f      	ldr	r3, [pc, #60]	; (8006418 <W25QXX_Read_Data+0x6c>)
 80063da:	709a      	strb	r2, [r3, #2]
	tx_buf[3] = addr & 0xFF;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	b2da      	uxtb	r2, r3
 80063e0:	4b0d      	ldr	r3, [pc, #52]	; (8006418 <W25QXX_Read_Data+0x6c>)
 80063e2:	70da      	strb	r2, [r3, #3]
	HAL_SPI_Transmit (&W25QXX_SPI, tx_buf, 4, 1000);
 80063e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80063e8:	2204      	movs	r2, #4
 80063ea:	490b      	ldr	r1, [pc, #44]	; (8006418 <W25QXX_Read_Data+0x6c>)
 80063ec:	480b      	ldr	r0, [pc, #44]	; (800641c <W25QXX_Read_Data+0x70>)
 80063ee:	f00c fbc6 	bl	8012b7e <HAL_SPI_Transmit>
	HAL_SPI_Receive (&W25QXX_SPI, data, sz, 1000);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	b29a      	uxth	r2, r3
 80063f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80063fa:	68b9      	ldr	r1, [r7, #8]
 80063fc:	4807      	ldr	r0, [pc, #28]	; (800641c <W25QXX_Read_Data+0x70>)
 80063fe:	f00c fcfa 	bl	8012df6 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(W25QXX_NSS_PORT, W25QXX_NSS_PIN, GPIO_PIN_SET);
 8006402:	2201      	movs	r2, #1
 8006404:	2101      	movs	r1, #1
 8006406:	4803      	ldr	r0, [pc, #12]	; (8006414 <W25QXX_Read_Data+0x68>)
 8006408:	f004 fe1c 	bl	800b044 <HAL_GPIO_WritePin>
}
 800640c:	bf00      	nop
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	40020400 	.word	0x40020400
 8006418:	20000d8c 	.word	0x20000d8c
 800641c:	20000310 	.word	0x20000310

08006420 <W25QXX_Read_ID>:

uint32_t W25QXX_Read_ID(void)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
	uint8_t dt[4];
	tx_buf[0] = W25QXX_GET_JEDEC_ID;
 8006426:	4b13      	ldr	r3, [pc, #76]	; (8006474 <W25QXX_Read_ID+0x54>)
 8006428:	229f      	movs	r2, #159	; 0x9f
 800642a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(W25QXX_NSS_PORT, W25QXX_NSS_PIN, GPIO_PIN_RESET);
 800642c:	2200      	movs	r2, #0
 800642e:	2101      	movs	r1, #1
 8006430:	4811      	ldr	r0, [pc, #68]	; (8006478 <W25QXX_Read_ID+0x58>)
 8006432:	f004 fe07 	bl	800b044 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&W25QXX_SPI, tx_buf, 1, 1000);
 8006436:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800643a:	2201      	movs	r2, #1
 800643c:	490d      	ldr	r1, [pc, #52]	; (8006474 <W25QXX_Read_ID+0x54>)
 800643e:	480f      	ldr	r0, [pc, #60]	; (800647c <W25QXX_Read_ID+0x5c>)
 8006440:	f00c fb9d 	bl	8012b7e <HAL_SPI_Transmit>
	HAL_SPI_Receive (&W25QXX_SPI, dt, 3, 1000);
 8006444:	1d39      	adds	r1, r7, #4
 8006446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800644a:	2203      	movs	r2, #3
 800644c:	480b      	ldr	r0, [pc, #44]	; (800647c <W25QXX_Read_ID+0x5c>)
 800644e:	f00c fcd2 	bl	8012df6 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(W25QXX_NSS_PORT, W25QXX_NSS_PIN, GPIO_PIN_SET);
 8006452:	2201      	movs	r2, #1
 8006454:	2101      	movs	r1, #1
 8006456:	4808      	ldr	r0, [pc, #32]	; (8006478 <W25QXX_Read_ID+0x58>)
 8006458:	f004 fdf4 	bl	800b044 <HAL_GPIO_WritePin>
	return (dt[0] << 16) | (dt[1] << 8) | dt[2];
 800645c:	793b      	ldrb	r3, [r7, #4]
 800645e:	041a      	lsls	r2, r3, #16
 8006460:	797b      	ldrb	r3, [r7, #5]
 8006462:	021b      	lsls	r3, r3, #8
 8006464:	4313      	orrs	r3, r2
 8006466:	79ba      	ldrb	r2, [r7, #6]
 8006468:	4313      	orrs	r3, r2
 800646a:	bf00      	nop
}
 800646c:	4618      	mov	r0, r3
 800646e:	3708      	adds	r7, #8
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}
 8006474:	20000d8c 	.word	0x20000d8c
 8006478:	40020400 	.word	0x40020400
 800647c:	20000310 	.word	0x20000310

08006480 <W25QXX_Init>:

void W25QXX_Init(void)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8006484:	2064      	movs	r0, #100	; 0x64
 8006486:	f000 fa11 	bl	80068ac <HAL_Delay>
	W25QXX_Reset();
 800648a:	f7ff ff6d 	bl	8006368 <W25QXX_Reset>
	HAL_Delay(100);
 800648e:	2064      	movs	r0, #100	; 0x64
 8006490:	f000 fa0c 	bl	80068ac <HAL_Delay>
}
 8006494:	bf00      	nop
 8006496:	bd80      	pop	{r7, pc}

08006498 <remap>:
#include "xpt2046.h"

extern SPI_HandleTypeDef XPT2046_SPI;

inline static float remap(float x, float in_min, float in_max, float out_min, float out_max)
{
 8006498:	b480      	push	{r7}
 800649a:	b087      	sub	sp, #28
 800649c:	af00      	add	r7, sp, #0
 800649e:	ed87 0a05 	vstr	s0, [r7, #20]
 80064a2:	edc7 0a04 	vstr	s1, [r7, #16]
 80064a6:	ed87 1a03 	vstr	s2, [r7, #12]
 80064aa:	edc7 1a02 	vstr	s3, [r7, #8]
 80064ae:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80064b2:	ed97 7a05 	vldr	s14, [r7, #20]
 80064b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80064ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80064be:	edd7 6a01 	vldr	s13, [r7, #4]
 80064c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80064c6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80064ca:	ee67 6a27 	vmul.f32	s13, s14, s15
 80064ce:	ed97 7a03 	vldr	s14, [r7, #12]
 80064d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80064d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064de:	edd7 7a02 	vldr	s15, [r7, #8]
 80064e2:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80064e6:	eeb0 0a67 	vmov.f32	s0, s15
 80064ea:	371c      	adds	r7, #28
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <XPT2046_Init>:

void XPT2046_Init(void)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	af00      	add	r7, sp, #0
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&XPT2046_SPI, (uint8_t*)XPT2046_ADDR_I, 1, 1000);
 80064f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80064fc:	2201      	movs	r2, #1
 80064fe:	2180      	movs	r1, #128	; 0x80
 8006500:	4809      	ldr	r0, [pc, #36]	; (8006528 <XPT2046_Init+0x34>)
 8006502:	f00c fb3c 	bl	8012b7e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&XPT2046_SPI, 0x00, 1, 1000);
 8006506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800650a:	2201      	movs	r2, #1
 800650c:	2100      	movs	r1, #0
 800650e:	4806      	ldr	r0, [pc, #24]	; (8006528 <XPT2046_Init+0x34>)
 8006510:	f00c fb35 	bl	8012b7e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&XPT2046_SPI, 0x00, 1, 1000);
 8006514:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006518:	2201      	movs	r2, #1
 800651a:	2100      	movs	r1, #0
 800651c:	4802      	ldr	r0, [pc, #8]	; (8006528 <XPT2046_Init+0x34>)
 800651e:	f00c fb2e 	bl	8012b7e <HAL_SPI_Transmit>
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_SET);
}
 8006522:	bf00      	nop
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	20000368 	.word	0x20000368

0800652c <getRaw>:

uint16_t getRaw(uint8_t address)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b086      	sub	sp, #24
 8006530:	af02      	add	r7, sp, #8
 8006532:	4603      	mov	r3, r0
 8006534:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	uint16_t LSB, MSB;
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_RESET);
	HAL_Delay(1);
 8006536:	2001      	movs	r0, #1
 8006538:	f000 f9b8 	bl	80068ac <HAL_Delay>
	HAL_SPI_Transmit(&XPT2046_SPI, &address, 1, 1000);
 800653c:	1df9      	adds	r1, r7, #7
 800653e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006542:	2201      	movs	r2, #1
 8006544:	4814      	ldr	r0, [pc, #80]	; (8006598 <getRaw+0x6c>)
 8006546:	f00c fb1a 	bl	8012b7e <HAL_SPI_Transmit>
	address = 0x00;
 800654a:	2300      	movs	r3, #0
 800654c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&XPT2046_SPI, &address, &data, sizeof(data), 1000);   
 800654e:	f107 020b 	add.w	r2, r7, #11
 8006552:	1df9      	adds	r1, r7, #7
 8006554:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006558:	9300      	str	r3, [sp, #0]
 800655a:	2301      	movs	r3, #1
 800655c:	480e      	ldr	r0, [pc, #56]	; (8006598 <getRaw+0x6c>)
 800655e:	f00c fd5b 	bl	8013018 <HAL_SPI_TransmitReceive>
	MSB = data;   
 8006562:	7afb      	ldrb	r3, [r7, #11]
 8006564:	81fb      	strh	r3, [r7, #14]
	address = 0x00;
 8006566:	2300      	movs	r3, #0
 8006568:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&XPT2046_SPI, &address, &data, sizeof(data), 1000);   
 800656a:	f107 020b 	add.w	r2, r7, #11
 800656e:	1df9      	adds	r1, r7, #7
 8006570:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006574:	9300      	str	r3, [sp, #0]
 8006576:	2301      	movs	r3, #1
 8006578:	4807      	ldr	r0, [pc, #28]	; (8006598 <getRaw+0x6c>)
 800657a:	f00c fd4d 	bl	8013018 <HAL_SPI_TransmitReceive>
	LSB = data;
 800657e:	7afb      	ldrb	r3, [r7, #11]
 8006580:	81bb      	strh	r3, [r7, #12]
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_SET);
	return ((MSB << 8) | (LSB)) >> 3;
 8006582:	89fb      	ldrh	r3, [r7, #14]
 8006584:	021a      	lsls	r2, r3, #8
 8006586:	89bb      	ldrh	r3, [r7, #12]
 8006588:	4313      	orrs	r3, r2
 800658a:	10db      	asrs	r3, r3, #3
 800658c:	b29b      	uxth	r3, r3
 800658e:	bf00      	nop
}
 8006590:	4618      	mov	r0, r3
 8006592:	3710      	adds	r7, #16
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	20000368 	.word	0x20000368

0800659c <X>:

inline static uint16_t X(void)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
	uint16_t x;
	x = (uint16_t) remap(getRaw(XPT2046_ADDR_X), RAW_MIN_X, RAW_MAX_X, OUT_MIN_X, OUT_MAX_X);
 80065a2:	20d0      	movs	r0, #208	; 0xd0
 80065a4:	f7ff ffc2 	bl	800652c <getRaw>
 80065a8:	4603      	mov	r3, r0
 80065aa:	ee07 3a90 	vmov	s15, r3
 80065ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065b2:	ed9f 2a13 	vldr	s4, [pc, #76]	; 8006600 <X+0x64>
 80065b6:	eddf 1a13 	vldr	s3, [pc, #76]	; 8006604 <X+0x68>
 80065ba:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8006608 <X+0x6c>
 80065be:	eddf 0a13 	vldr	s1, [pc, #76]	; 800660c <X+0x70>
 80065c2:	eeb0 0a67 	vmov.f32	s0, s15
 80065c6:	f7ff ff67 	bl	8006498 <remap>
 80065ca:	eef0 7a40 	vmov.f32	s15, s0
 80065ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065d2:	ee17 3a90 	vmov	r3, s15
 80065d6:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_X) x = OUT_MAX_X - x;
 80065d8:	88fb      	ldrh	r3, [r7, #6]
 80065da:	f5c3 7347 	rsb	r3, r3, #796	; 0x31c
 80065de:	3303      	adds	r3, #3
 80065e0:	80fb      	strh	r3, [r7, #6]
	if (x > OUT_MIN_X && x < OUT_MAX_X) return x;
 80065e2:	88fb      	ldrh	r3, [r7, #6]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d006      	beq.n	80065f6 <X+0x5a>
 80065e8:	88fb      	ldrh	r3, [r7, #6]
 80065ea:	f240 321e 	movw	r2, #798	; 0x31e
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d801      	bhi.n	80065f6 <X+0x5a>
 80065f2:	88fb      	ldrh	r3, [r7, #6]
 80065f4:	e000      	b.n	80065f8 <X+0x5c>
	else return 0;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3708      	adds	r7, #8
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	4447c000 	.word	0x4447c000
 8006604:	00000000 	.word	0x00000000
 8006608:	457a0000 	.word	0x457a0000
 800660c:	43480000 	.word	0x43480000

08006610 <Y>:

inline static uint16_t Y(void)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
	uint16_t y;
	y = (uint16_t) remap(getRaw(XPT2046_ADDR_Y), RAW_MIN_Y, RAW_MAX_Y, OUT_MIN_Y, OUT_MAX_Y);
 8006616:	2090      	movs	r0, #144	; 0x90
 8006618:	f7ff ff88 	bl	800652c <getRaw>
 800661c:	4603      	mov	r3, r0
 800661e:	ee07 3a90 	vmov	s15, r3
 8006622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006626:	ed9f 2a10 	vldr	s4, [pc, #64]	; 8006668 <Y+0x58>
 800662a:	eddf 1a10 	vldr	s3, [pc, #64]	; 800666c <Y+0x5c>
 800662e:	ed9f 1a10 	vldr	s2, [pc, #64]	; 8006670 <Y+0x60>
 8006632:	eddf 0a10 	vldr	s1, [pc, #64]	; 8006674 <Y+0x64>
 8006636:	eeb0 0a67 	vmov.f32	s0, s15
 800663a:	f7ff ff2d 	bl	8006498 <remap>
 800663e:	eef0 7a40 	vmov.f32	s15, s0
 8006642:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006646:	ee17 3a90 	vmov	r3, s15
 800664a:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_Y) y = OUT_MAX_Y - y;
	if (y > OUT_MIN_Y && y < OUT_MAX_Y) return y;
 800664c:	88fb      	ldrh	r3, [r7, #6]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d005      	beq.n	800665e <Y+0x4e>
 8006652:	88fb      	ldrh	r3, [r7, #6]
 8006654:	f5b3 7fef 	cmp.w	r3, #478	; 0x1de
 8006658:	d801      	bhi.n	800665e <Y+0x4e>
 800665a:	88fb      	ldrh	r3, [r7, #6]
 800665c:	e000      	b.n	8006660 <Y+0x50>
	else return 0;
 800665e:	2300      	movs	r3, #0
}
 8006660:	4618      	mov	r0, r3
 8006662:	3708      	adds	r7, #8
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}
 8006668:	43ef8000 	.word	0x43ef8000
 800666c:	00000000 	.word	0x00000000
 8006670:	456d8000 	.word	0x456d8000
 8006674:	43480000 	.word	0x43480000

08006678 <getX>:

uint16_t getX(void)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
	if (XPT2046_ACCURACY)
	{
		uint16_t x[2] = { 1, 2 };
 800667e:	4b0a      	ldr	r3, [pc, #40]	; (80066a8 <getX+0x30>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	607b      	str	r3, [r7, #4]
		while (x[0] != x[1])
 8006684:	e007      	b.n	8006696 <getX+0x1e>
		{
			if (XPT2046_REVERSED) { x[0] = Y(); x[1] = Y(); }
			else { x[0] = X(); x[1] = X(); }
 8006686:	f7ff ff89 	bl	800659c <X>
 800668a:	4603      	mov	r3, r0
 800668c:	80bb      	strh	r3, [r7, #4]
 800668e:	f7ff ff85 	bl	800659c <X>
 8006692:	4603      	mov	r3, r0
 8006694:	80fb      	strh	r3, [r7, #6]
		while (x[0] != x[1])
 8006696:	88ba      	ldrh	r2, [r7, #4]
 8006698:	88fb      	ldrh	r3, [r7, #6]
 800669a:	429a      	cmp	r2, r3
 800669c:	d1f3      	bne.n	8006686 <getX+0xe>
		}
		return x[0];
 800669e:	88bb      	ldrh	r3, [r7, #4]
	} 
	else if (XPT2046_REVERSED) return Y(); else return X();
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3708      	adds	r7, #8
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	08051f10 	.word	0x08051f10

080066ac <getY>:

uint16_t getY(void)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af00      	add	r7, sp, #0
	if (XPT2046_ACCURACY)
	{
		uint16_t y[2] = { 1, 2 };
 80066b2:	4b0a      	ldr	r3, [pc, #40]	; (80066dc <getY+0x30>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	607b      	str	r3, [r7, #4]
		while (y[0] != y[1])
 80066b8:	e007      	b.n	80066ca <getY+0x1e>
		{
			if (XPT2046_REVERSED) { y[0] = X(); y[1] = X(); }
			else { y[0] = Y(); y[1] = Y(); }
 80066ba:	f7ff ffa9 	bl	8006610 <Y>
 80066be:	4603      	mov	r3, r0
 80066c0:	80bb      	strh	r3, [r7, #4]
 80066c2:	f7ff ffa5 	bl	8006610 <Y>
 80066c6:	4603      	mov	r3, r0
 80066c8:	80fb      	strh	r3, [r7, #6]
		while (y[0] != y[1])
 80066ca:	88ba      	ldrh	r2, [r7, #4]
 80066cc:	88fb      	ldrh	r3, [r7, #6]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d1f3      	bne.n	80066ba <getY+0xe>
		}
		return y[0];
 80066d2:	88bb      	ldrh	r3, [r7, #4]
	}
	else if (XPT2046_REVERSED) return X(); else return Y();
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3708      	adds	r7, #8
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	08051f10 	.word	0x08051f10

080066e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80066e4:	4b0e      	ldr	r3, [pc, #56]	; (8006720 <HAL_Init+0x40>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a0d      	ldr	r2, [pc, #52]	; (8006720 <HAL_Init+0x40>)
 80066ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80066ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80066f0:	4b0b      	ldr	r3, [pc, #44]	; (8006720 <HAL_Init+0x40>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a0a      	ldr	r2, [pc, #40]	; (8006720 <HAL_Init+0x40>)
 80066f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80066fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80066fc:	4b08      	ldr	r3, [pc, #32]	; (8006720 <HAL_Init+0x40>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a07      	ldr	r2, [pc, #28]	; (8006720 <HAL_Init+0x40>)
 8006702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006706:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006708:	2003      	movs	r0, #3
 800670a:	f000 fbbb 	bl	8006e84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800670e:	2000      	movs	r0, #0
 8006710:	f000 f83b 	bl	800678a <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006714:	f7ff f86c 	bl	80057f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	40023c00 	.word	0x40023c00

08006724 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8006728:	4b13      	ldr	r3, [pc, #76]	; (8006778 <HAL_DeInit+0x54>)
 800672a:	f04f 32ff 	mov.w	r2, #4294967295
 800672e:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8006730:	4b11      	ldr	r3, [pc, #68]	; (8006778 <HAL_DeInit+0x54>)
 8006732:	2200      	movs	r2, #0
 8006734:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8006736:	4b10      	ldr	r3, [pc, #64]	; (8006778 <HAL_DeInit+0x54>)
 8006738:	f04f 32ff 	mov.w	r2, #4294967295
 800673c:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 800673e:	4b0e      	ldr	r3, [pc, #56]	; (8006778 <HAL_DeInit+0x54>)
 8006740:	2200      	movs	r2, #0
 8006742:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8006744:	4b0c      	ldr	r3, [pc, #48]	; (8006778 <HAL_DeInit+0x54>)
 8006746:	f04f 32ff 	mov.w	r2, #4294967295
 800674a:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 800674c:	4b0a      	ldr	r3, [pc, #40]	; (8006778 <HAL_DeInit+0x54>)
 800674e:	2200      	movs	r2, #0
 8006750:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8006752:	4b09      	ldr	r3, [pc, #36]	; (8006778 <HAL_DeInit+0x54>)
 8006754:	f04f 32ff 	mov.w	r2, #4294967295
 8006758:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 800675a:	4b07      	ldr	r3, [pc, #28]	; (8006778 <HAL_DeInit+0x54>)
 800675c:	2200      	movs	r2, #0
 800675e:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8006760:	4b05      	ldr	r3, [pc, #20]	; (8006778 <HAL_DeInit+0x54>)
 8006762:	f04f 32ff 	mov.w	r2, #4294967295
 8006766:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8006768:	4b03      	ldr	r3, [pc, #12]	; (8006778 <HAL_DeInit+0x54>)
 800676a:	2200      	movs	r2, #0
 800676c:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800676e:	f000 f805 	bl	800677c <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	bd80      	pop	{r7, pc}
 8006778:	40023800 	.word	0x40023800

0800677c <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 800677c:	b480      	push	{r7}
 800677e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8006780:	bf00      	nop
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr

0800678a <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b082      	sub	sp, #8
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006792:	4b13      	ldr	r3, [pc, #76]	; (80067e0 <HAL_InitTick+0x56>)
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	4b13      	ldr	r3, [pc, #76]	; (80067e4 <HAL_InitTick+0x5a>)
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	4619      	mov	r1, r3
 800679c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80067a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80067a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067a8:	4618      	mov	r0, r3
 80067aa:	f000 fbb2 	bl	8006f12 <HAL_SYSTICK_Config>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d001      	beq.n	80067b8 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e00e      	b.n	80067d6 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2b0f      	cmp	r3, #15
 80067bc:	d80a      	bhi.n	80067d4 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80067be:	2200      	movs	r2, #0
 80067c0:	6879      	ldr	r1, [r7, #4]
 80067c2:	f04f 30ff 	mov.w	r0, #4294967295
 80067c6:	f000 fb68 	bl	8006e9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80067ca:	4a07      	ldr	r2, [pc, #28]	; (80067e8 <HAL_InitTick+0x5e>)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80067d0:	2300      	movs	r3, #0
 80067d2:	e000      	b.n	80067d6 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3708      	adds	r7, #8
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	20000058 	.word	0x20000058
 80067e4:	20000060 	.word	0x20000060
 80067e8:	2000005c 	.word	0x2000005c

080067ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80067ec:	b480      	push	{r7}
 80067ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80067f0:	4b06      	ldr	r3, [pc, #24]	; (800680c <HAL_IncTick+0x20>)
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	461a      	mov	r2, r3
 80067f6:	4b06      	ldr	r3, [pc, #24]	; (8006810 <HAL_IncTick+0x24>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4413      	add	r3, r2
 80067fc:	4a04      	ldr	r2, [pc, #16]	; (8006810 <HAL_IncTick+0x24>)
 80067fe:	6013      	str	r3, [r2, #0]
}
 8006800:	bf00      	nop
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	20000060 	.word	0x20000060
 8006810:	20000d98 	.word	0x20000d98

08006814 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006814:	b480      	push	{r7}
 8006816:	af00      	add	r7, sp, #0
  return uwTick;
 8006818:	4b03      	ldr	r3, [pc, #12]	; (8006828 <HAL_GetTick+0x14>)
 800681a:	681b      	ldr	r3, [r3, #0]
}
 800681c:	4618      	mov	r0, r3
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	20000d98 	.word	0x20000d98

0800682c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800682c:	b480      	push	{r7}
 800682e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8006830:	4b03      	ldr	r3, [pc, #12]	; (8006840 <HAL_GetTickPrio+0x14>)
 8006832:	681b      	ldr	r3, [r3, #0]
}
 8006834:	4618      	mov	r0, r3
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	2000005c 	.word	0x2000005c

08006844 <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	4603      	mov	r3, r0
 800684c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
 800684e:	2300      	movs	r3, #0
 8006850:	73fb      	strb	r3, [r7, #15]
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 8006852:	4b0e      	ldr	r3, [pc, #56]	; (800688c <HAL_SetTickFreq+0x48>)
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	79fa      	ldrb	r2, [r7, #7]
 8006858:	429a      	cmp	r2, r3
 800685a:	d012      	beq.n	8006882 <HAL_SetTickFreq+0x3e>
  {
    /* Back up uwTickFreq frequency */
    prevTickFreq = uwTickFreq;
 800685c:	4b0b      	ldr	r3, [pc, #44]	; (800688c <HAL_SetTickFreq+0x48>)
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	73bb      	strb	r3, [r7, #14]

    /* Update uwTickFreq global variable used by HAL_InitTick() */
    uwTickFreq = Freq;
 8006862:	4a0a      	ldr	r2, [pc, #40]	; (800688c <HAL_SetTickFreq+0x48>)
 8006864:	79fb      	ldrb	r3, [r7, #7]
 8006866:	7013      	strb	r3, [r2, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 8006868:	4b09      	ldr	r3, [pc, #36]	; (8006890 <HAL_SetTickFreq+0x4c>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4618      	mov	r0, r3
 800686e:	f7ff ff8c 	bl	800678a <HAL_InitTick>
 8006872:	4603      	mov	r3, r0
 8006874:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK)
 8006876:	7bfb      	ldrb	r3, [r7, #15]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d002      	beq.n	8006882 <HAL_SetTickFreq+0x3e>
    {
      /* Restore previous tick frequency */
      uwTickFreq = prevTickFreq;
 800687c:	4a03      	ldr	r2, [pc, #12]	; (800688c <HAL_SetTickFreq+0x48>)
 800687e:	7bbb      	ldrb	r3, [r7, #14]
 8006880:	7013      	strb	r3, [r2, #0]
    }
  }

  return status;
 8006882:	7bfb      	ldrb	r3, [r7, #15]
}
 8006884:	4618      	mov	r0, r3
 8006886:	3710      	adds	r7, #16
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	20000060 	.word	0x20000060
 8006890:	2000005c 	.word	0x2000005c

08006894 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8006894:	b480      	push	{r7}
 8006896:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8006898:	4b03      	ldr	r3, [pc, #12]	; (80068a8 <HAL_GetTickFreq+0x14>)
 800689a:	781b      	ldrb	r3, [r3, #0]
}
 800689c:	4618      	mov	r0, r3
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
 80068a6:	bf00      	nop
 80068a8:	20000060 	.word	0x20000060

080068ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80068b4:	f7ff ffae 	bl	8006814 <HAL_GetTick>
 80068b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c4:	d005      	beq.n	80068d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80068c6:	4b0a      	ldr	r3, [pc, #40]	; (80068f0 <HAL_Delay+0x44>)
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	461a      	mov	r2, r3
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	4413      	add	r3, r2
 80068d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80068d2:	bf00      	nop
 80068d4:	f7ff ff9e 	bl	8006814 <HAL_GetTick>
 80068d8:	4602      	mov	r2, r0
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d8f7      	bhi.n	80068d4 <HAL_Delay+0x28>
  {
  }
}
 80068e4:	bf00      	nop
 80068e6:	bf00      	nop
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	20000060 	.word	0x20000060

080068f4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80068f4:	b480      	push	{r7}
 80068f6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80068f8:	4b05      	ldr	r3, [pc, #20]	; (8006910 <HAL_SuspendTick+0x1c>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a04      	ldr	r2, [pc, #16]	; (8006910 <HAL_SuspendTick+0x1c>)
 80068fe:	f023 0302 	bic.w	r3, r3, #2
 8006902:	6013      	str	r3, [r2, #0]
}
 8006904:	bf00      	nop
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr
 800690e:	bf00      	nop
 8006910:	e000e010 	.word	0xe000e010

08006914 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8006914:	b480      	push	{r7}
 8006916:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8006918:	4b05      	ldr	r3, [pc, #20]	; (8006930 <HAL_ResumeTick+0x1c>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a04      	ldr	r2, [pc, #16]	; (8006930 <HAL_ResumeTick+0x1c>)
 800691e:	f043 0302 	orr.w	r3, r3, #2
 8006922:	6013      	str	r3, [r2, #0]
}
 8006924:	bf00      	nop
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop
 8006930:	e000e010 	.word	0xe000e010

08006934 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8006934:	b480      	push	{r7}
 8006936:	af00      	add	r7, sp, #0
  return __STM32F4xx_HAL_VERSION;
 8006938:	4b02      	ldr	r3, [pc, #8]	; (8006944 <HAL_GetHalVersion+0x10>)
}
 800693a:	4618      	mov	r0, r3
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr
 8006944:	01070d00 	.word	0x01070d00

08006948 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8006948:	b480      	push	{r7}
 800694a:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) >> 16U);
 800694c:	4b03      	ldr	r3, [pc, #12]	; (800695c <HAL_GetREVID+0x14>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	0c1b      	lsrs	r3, r3, #16
}
 8006952:	4618      	mov	r0, r3
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr
 800695c:	e0042000 	.word	0xe0042000

08006960 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8006960:	b480      	push	{r7}
 8006962:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8006964:	4b04      	ldr	r3, [pc, #16]	; (8006978 <HAL_GetDEVID+0x18>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 800696c:	4618      	mov	r0, r3
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr
 8006976:	bf00      	nop
 8006978:	e0042000 	.word	0xe0042000

0800697c <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 800697c:	b480      	push	{r7}
 800697e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8006980:	4b05      	ldr	r3, [pc, #20]	; (8006998 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	4a04      	ldr	r2, [pc, #16]	; (8006998 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8006986:	f043 0301 	orr.w	r3, r3, #1
 800698a:	6053      	str	r3, [r2, #4]
}
 800698c:	bf00      	nop
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	e0042000 	.word	0xe0042000

0800699c <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 800699c:	b480      	push	{r7}
 800699e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80069a0:	4b05      	ldr	r3, [pc, #20]	; (80069b8 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	4a04      	ldr	r2, [pc, #16]	; (80069b8 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
 80069a6:	f023 0301 	bic.w	r3, r3, #1
 80069aa:	6053      	str	r3, [r2, #4]
}
 80069ac:	bf00      	nop
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop
 80069b8:	e0042000 	.word	0xe0042000

080069bc <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80069bc:	b480      	push	{r7}
 80069be:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80069c0:	4b05      	ldr	r3, [pc, #20]	; (80069d8 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	4a04      	ldr	r2, [pc, #16]	; (80069d8 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 80069c6:	f043 0302 	orr.w	r3, r3, #2
 80069ca:	6053      	str	r3, [r2, #4]
}
 80069cc:	bf00      	nop
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	e0042000 	.word	0xe0042000

080069dc <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 80069dc:	b480      	push	{r7}
 80069de:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80069e0:	4b05      	ldr	r3, [pc, #20]	; (80069f8 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	4a04      	ldr	r2, [pc, #16]	; (80069f8 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
 80069e6:	f023 0302 	bic.w	r3, r3, #2
 80069ea:	6053      	str	r3, [r2, #4]
}
 80069ec:	bf00      	nop
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr
 80069f6:	bf00      	nop
 80069f8:	e0042000 	.word	0xe0042000

080069fc <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 80069fc:	b480      	push	{r7}
 80069fe:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8006a00:	4b05      	ldr	r3, [pc, #20]	; (8006a18 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	4a04      	ldr	r2, [pc, #16]	; (8006a18 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 8006a06:	f043 0304 	orr.w	r3, r3, #4
 8006a0a:	6053      	str	r3, [r2, #4]
}
 8006a0c:	bf00      	nop
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr
 8006a16:	bf00      	nop
 8006a18:	e0042000 	.word	0xe0042000

08006a1c <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8006a20:	4b05      	ldr	r3, [pc, #20]	; (8006a38 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	4a04      	ldr	r2, [pc, #16]	; (8006a38 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 8006a26:	f023 0304 	bic.w	r3, r3, #4
 8006a2a:	6053      	str	r3, [r2, #4]
}
 8006a2c:	bf00      	nop
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr
 8006a36:	bf00      	nop
 8006a38:	e0042000 	.word	0xe0042000

08006a3c <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)ENABLE;
 8006a40:	4b03      	ldr	r3, [pc, #12]	; (8006a50 <HAL_EnableCompensationCell+0x14>)
 8006a42:	2201      	movs	r2, #1
 8006a44:	601a      	str	r2, [r3, #0]
}
 8006a46:	bf00      	nop
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr
 8006a50:	42270400 	.word	0x42270400

08006a54 <HAL_DisableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_DisableCompensationCell(void)
{
 8006a54:	b480      	push	{r7}
 8006a56:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)DISABLE;
 8006a58:	4b03      	ldr	r3, [pc, #12]	; (8006a68 <HAL_DisableCompensationCell+0x14>)
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	601a      	str	r2, [r3, #0]
}
 8006a5e:	bf00      	nop
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr
 8006a68:	42270400 	.word	0x42270400

08006a6c <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8006a70:	4b03      	ldr	r3, [pc, #12]	; (8006a80 <HAL_GetUIDw0+0x14>)
 8006a72:	681b      	ldr	r3, [r3, #0]
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	1fff7a10 	.word	0x1fff7a10

08006a84 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8006a84:	b480      	push	{r7}
 8006a86:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8006a88:	4b03      	ldr	r3, [pc, #12]	; (8006a98 <HAL_GetUIDw1+0x14>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr
 8006a96:	bf00      	nop
 8006a98:	1fff7a14 	.word	0x1fff7a14

08006a9c <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8006aa0:	4b03      	ldr	r3, [pc, #12]	; (8006ab0 <HAL_GetUIDw2+0x14>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	1fff7a18 	.word	0x1fff7a18

08006ab4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f003 0307 	and.w	r3, r3, #7
 8006ac2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006ac4:	4b0c      	ldr	r3, [pc, #48]	; (8006af8 <__NVIC_SetPriorityGrouping+0x44>)
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006aca:	68ba      	ldr	r2, [r7, #8]
 8006acc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006adc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ae4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006ae6:	4a04      	ldr	r2, [pc, #16]	; (8006af8 <__NVIC_SetPriorityGrouping+0x44>)
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	60d3      	str	r3, [r2, #12]
}
 8006aec:	bf00      	nop
 8006aee:	3714      	adds	r7, #20
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr
 8006af8:	e000ed00 	.word	0xe000ed00

08006afc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006afc:	b480      	push	{r7}
 8006afe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006b00:	4b04      	ldr	r3, [pc, #16]	; (8006b14 <__NVIC_GetPriorityGrouping+0x18>)
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	0a1b      	lsrs	r3, r3, #8
 8006b06:	f003 0307 	and.w	r3, r3, #7
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr
 8006b14:	e000ed00 	.word	0xe000ed00

08006b18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	4603      	mov	r3, r0
 8006b20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	db0b      	blt.n	8006b42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006b2a:	79fb      	ldrb	r3, [r7, #7]
 8006b2c:	f003 021f 	and.w	r2, r3, #31
 8006b30:	4907      	ldr	r1, [pc, #28]	; (8006b50 <__NVIC_EnableIRQ+0x38>)
 8006b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b36:	095b      	lsrs	r3, r3, #5
 8006b38:	2001      	movs	r0, #1
 8006b3a:	fa00 f202 	lsl.w	r2, r0, r2
 8006b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006b42:	bf00      	nop
 8006b44:	370c      	adds	r7, #12
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr
 8006b4e:	bf00      	nop
 8006b50:	e000e100 	.word	0xe000e100

08006b54 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	db12      	blt.n	8006b8c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006b66:	79fb      	ldrb	r3, [r7, #7]
 8006b68:	f003 021f 	and.w	r2, r3, #31
 8006b6c:	490a      	ldr	r1, [pc, #40]	; (8006b98 <__NVIC_DisableIRQ+0x44>)
 8006b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b72:	095b      	lsrs	r3, r3, #5
 8006b74:	2001      	movs	r0, #1
 8006b76:	fa00 f202 	lsl.w	r2, r0, r2
 8006b7a:	3320      	adds	r3, #32
 8006b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006b80:	f3bf 8f4f 	dsb	sy
}
 8006b84:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006b86:	f3bf 8f6f 	isb	sy
}
 8006b8a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006b8c:	bf00      	nop
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr
 8006b98:	e000e100 	.word	0xe000e100

08006b9c <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	db0e      	blt.n	8006bcc <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8006bae:	4a0b      	ldr	r2, [pc, #44]	; (8006bdc <__NVIC_GetPendingIRQ+0x40>)
 8006bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bb4:	095b      	lsrs	r3, r3, #5
 8006bb6:	3340      	adds	r3, #64	; 0x40
 8006bb8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006bbc:	79fb      	ldrb	r3, [r7, #7]
 8006bbe:	f003 031f 	and.w	r3, r3, #31
 8006bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8006bc6:	f003 0301 	and.w	r3, r3, #1
 8006bca:	e000      	b.n	8006bce <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 8006bcc:	2300      	movs	r3, #0
  }
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	370c      	adds	r7, #12
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop
 8006bdc:	e000e100 	.word	0xe000e100

08006be0 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	4603      	mov	r3, r0
 8006be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	db0c      	blt.n	8006c0c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006bf2:	79fb      	ldrb	r3, [r7, #7]
 8006bf4:	f003 021f 	and.w	r2, r3, #31
 8006bf8:	4907      	ldr	r1, [pc, #28]	; (8006c18 <__NVIC_SetPendingIRQ+0x38>)
 8006bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bfe:	095b      	lsrs	r3, r3, #5
 8006c00:	2001      	movs	r0, #1
 8006c02:	fa00 f202 	lsl.w	r2, r0, r2
 8006c06:	3340      	adds	r3, #64	; 0x40
 8006c08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006c0c:	bf00      	nop
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr
 8006c18:	e000e100 	.word	0xe000e100

08006c1c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	4603      	mov	r3, r0
 8006c24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	db0c      	blt.n	8006c48 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c2e:	79fb      	ldrb	r3, [r7, #7]
 8006c30:	f003 021f 	and.w	r2, r3, #31
 8006c34:	4907      	ldr	r1, [pc, #28]	; (8006c54 <__NVIC_ClearPendingIRQ+0x38>)
 8006c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c3a:	095b      	lsrs	r3, r3, #5
 8006c3c:	2001      	movs	r0, #1
 8006c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8006c42:	3360      	adds	r3, #96	; 0x60
 8006c44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006c48:	bf00      	nop
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr
 8006c54:	e000e100 	.word	0xe000e100

08006c58 <__NVIC_GetActive>:
  \return             0  Interrupt status is not active.
  \return             1  Interrupt status is active.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	4603      	mov	r3, r0
 8006c60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	db0e      	blt.n	8006c88 <__NVIC_GetActive+0x30>
  {
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8006c6a:	4a0b      	ldr	r2, [pc, #44]	; (8006c98 <__NVIC_GetActive+0x40>)
 8006c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c70:	095b      	lsrs	r3, r3, #5
 8006c72:	3380      	adds	r3, #128	; 0x80
 8006c74:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006c78:	79fb      	ldrb	r3, [r7, #7]
 8006c7a:	f003 031f 	and.w	r3, r3, #31
 8006c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8006c82:	f003 0301 	and.w	r3, r3, #1
 8006c86:	e000      	b.n	8006c8a <__NVIC_GetActive+0x32>
  }
  else
  {
    return(0U);
 8006c88:	2300      	movs	r3, #0
  }
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	370c      	adds	r7, #12
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr
 8006c96:	bf00      	nop
 8006c98:	e000e100 	.word	0xe000e100

08006c9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	6039      	str	r1, [r7, #0]
 8006ca6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	db0a      	blt.n	8006cc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	b2da      	uxtb	r2, r3
 8006cb4:	490c      	ldr	r1, [pc, #48]	; (8006ce8 <__NVIC_SetPriority+0x4c>)
 8006cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cba:	0112      	lsls	r2, r2, #4
 8006cbc:	b2d2      	uxtb	r2, r2
 8006cbe:	440b      	add	r3, r1
 8006cc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006cc4:	e00a      	b.n	8006cdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	b2da      	uxtb	r2, r3
 8006cca:	4908      	ldr	r1, [pc, #32]	; (8006cec <__NVIC_SetPriority+0x50>)
 8006ccc:	79fb      	ldrb	r3, [r7, #7]
 8006cce:	f003 030f 	and.w	r3, r3, #15
 8006cd2:	3b04      	subs	r3, #4
 8006cd4:	0112      	lsls	r2, r2, #4
 8006cd6:	b2d2      	uxtb	r2, r2
 8006cd8:	440b      	add	r3, r1
 8006cda:	761a      	strb	r2, [r3, #24]
}
 8006cdc:	bf00      	nop
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr
 8006ce8:	e000e100 	.word	0xe000e100
 8006cec:	e000ed00 	.word	0xe000ed00

08006cf0 <__NVIC_GetPriority>:
  \param [in]   IRQn  Interrupt number.
  \return             Interrupt Priority.
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	71fb      	strb	r3, [r7, #7]

  if ((int32_t)(IRQn) >= 0)
 8006cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	db09      	blt.n	8006d16 <__NVIC_GetPriority+0x26>
  {
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 8006d02:	4a0d      	ldr	r2, [pc, #52]	; (8006d38 <__NVIC_GetPriority+0x48>)
 8006d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d08:	4413      	add	r3, r2
 8006d0a:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	091b      	lsrs	r3, r3, #4
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	e009      	b.n	8006d2a <__NVIC_GetPriority+0x3a>
  }
  else
  {
    return(((uint32_t)SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 8006d16:	4a09      	ldr	r2, [pc, #36]	; (8006d3c <__NVIC_GetPriority+0x4c>)
 8006d18:	79fb      	ldrb	r3, [r7, #7]
 8006d1a:	f003 030f 	and.w	r3, r3, #15
 8006d1e:	3b04      	subs	r3, #4
 8006d20:	4413      	add	r3, r2
 8006d22:	7e1b      	ldrb	r3, [r3, #24]
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	091b      	lsrs	r3, r3, #4
 8006d28:	b2db      	uxtb	r3, r3
  }
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	370c      	adds	r7, #12
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	e000e100 	.word	0xe000e100
 8006d3c:	e000ed00 	.word	0xe000ed00

08006d40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b089      	sub	sp, #36	; 0x24
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f003 0307 	and.w	r3, r3, #7
 8006d52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	f1c3 0307 	rsb	r3, r3, #7
 8006d5a:	2b04      	cmp	r3, #4
 8006d5c:	bf28      	it	cs
 8006d5e:	2304      	movcs	r3, #4
 8006d60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	3304      	adds	r3, #4
 8006d66:	2b06      	cmp	r3, #6
 8006d68:	d902      	bls.n	8006d70 <NVIC_EncodePriority+0x30>
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	3b03      	subs	r3, #3
 8006d6e:	e000      	b.n	8006d72 <NVIC_EncodePriority+0x32>
 8006d70:	2300      	movs	r3, #0
 8006d72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d74:	f04f 32ff 	mov.w	r2, #4294967295
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d7e:	43da      	mvns	r2, r3
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	401a      	ands	r2, r3
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006d88:	f04f 31ff 	mov.w	r1, #4294967295
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8006d92:	43d9      	mvns	r1, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d98:	4313      	orrs	r3, r2
         );
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3724      	adds	r7, #36	; 0x24
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr

08006da6 <NVIC_DecodePriority>:
  \param [in]     PriorityGroup  Used priority group.
  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
  \param [out]     pSubPriority  Subpriority value (starting from 0).
 */
__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
 8006da6:	b480      	push	{r7}
 8006da8:	b089      	sub	sp, #36	; 0x24
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	60f8      	str	r0, [r7, #12]
 8006dae:	60b9      	str	r1, [r7, #8]
 8006db0:	607a      	str	r2, [r7, #4]
 8006db2:	603b      	str	r3, [r7, #0]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	f003 0307 	and.w	r3, r3, #7
 8006dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	f1c3 0307 	rsb	r3, r3, #7
 8006dc2:	2b04      	cmp	r3, #4
 8006dc4:	bf28      	it	cs
 8006dc6:	2304      	movcs	r3, #4
 8006dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	3304      	adds	r3, #4
 8006dce:	2b06      	cmp	r3, #6
 8006dd0:	d902      	bls.n	8006dd8 <NVIC_DecodePriority+0x32>
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	3b03      	subs	r3, #3
 8006dd6:	e000      	b.n	8006dda <NVIC_DecodePriority+0x34>
 8006dd8:	2300      	movs	r3, #0
 8006dda:	617b      	str	r3, [r7, #20]

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 8006ddc:	68fa      	ldr	r2, [r7, #12]
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	40da      	lsrs	r2, r3
 8006de2:	f04f 31ff 	mov.w	r1, #4294967295
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	fa01 f303 	lsl.w	r3, r1, r3
 8006dec:	43db      	mvns	r3, r3
 8006dee:	401a      	ands	r2, r3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	601a      	str	r2, [r3, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 8006df4:	f04f 32ff 	mov.w	r2, #4294967295
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8006dfe:	43da      	mvns	r2, r3
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	401a      	ands	r2, r3
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	601a      	str	r2, [r3, #0]
}
 8006e08:	bf00      	nop
 8006e0a:	3724      	adds	r7, #36	; 0x24
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8006e14:	b480      	push	{r7}
 8006e16:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8006e18:	f3bf 8f4f 	dsb	sy
}
 8006e1c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006e1e:	4b06      	ldr	r3, [pc, #24]	; (8006e38 <__NVIC_SystemReset+0x24>)
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006e26:	4904      	ldr	r1, [pc, #16]	; (8006e38 <__NVIC_SystemReset+0x24>)
 8006e28:	4b04      	ldr	r3, [pc, #16]	; (8006e3c <__NVIC_SystemReset+0x28>)
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8006e2e:	f3bf 8f4f 	dsb	sy
}
 8006e32:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8006e34:	bf00      	nop
 8006e36:	e7fd      	b.n	8006e34 <__NVIC_SystemReset+0x20>
 8006e38:	e000ed00 	.word	0xe000ed00
 8006e3c:	05fa0004 	.word	0x05fa0004

08006e40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006e50:	d301      	bcc.n	8006e56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006e52:	2301      	movs	r3, #1
 8006e54:	e00f      	b.n	8006e76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006e56:	4a0a      	ldr	r2, [pc, #40]	; (8006e80 <SysTick_Config+0x40>)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006e5e:	210f      	movs	r1, #15
 8006e60:	f04f 30ff 	mov.w	r0, #4294967295
 8006e64:	f7ff ff1a 	bl	8006c9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006e68:	4b05      	ldr	r3, [pc, #20]	; (8006e80 <SysTick_Config+0x40>)
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006e6e:	4b04      	ldr	r3, [pc, #16]	; (8006e80 <SysTick_Config+0x40>)
 8006e70:	2207      	movs	r2, #7
 8006e72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3708      	adds	r7, #8
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	e000e010 	.word	0xe000e010

08006e84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b082      	sub	sp, #8
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f7ff fe11 	bl	8006ab4 <__NVIC_SetPriorityGrouping>
}
 8006e92:	bf00      	nop
 8006e94:	3708      	adds	r7, #8
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}

08006e9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006e9a:	b580      	push	{r7, lr}
 8006e9c:	b086      	sub	sp, #24
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	60b9      	str	r1, [r7, #8]
 8006ea4:	607a      	str	r2, [r7, #4]
 8006ea6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006eac:	f7ff fe26 	bl	8006afc <__NVIC_GetPriorityGrouping>
 8006eb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	68b9      	ldr	r1, [r7, #8]
 8006eb6:	6978      	ldr	r0, [r7, #20]
 8006eb8:	f7ff ff42 	bl	8006d40 <NVIC_EncodePriority>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ec2:	4611      	mov	r1, r2
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f7ff fee9 	bl	8006c9c <__NVIC_SetPriority>
}
 8006eca:	bf00      	nop
 8006ecc:	3718      	adds	r7, #24
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}

08006ed2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b082      	sub	sp, #8
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	4603      	mov	r3, r0
 8006eda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7ff fe19 	bl	8006b18 <__NVIC_EnableIRQ>
}
 8006ee6:	bf00      	nop
 8006ee8:	3708      	adds	r7, #8
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b082      	sub	sp, #8
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006efc:	4618      	mov	r0, r3
 8006efe:	f7ff fe29 	bl	8006b54 <__NVIC_DisableIRQ>
}
 8006f02:	bf00      	nop
 8006f04:	3708      	adds	r7, #8
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8006f0e:	f7ff ff81 	bl	8006e14 <__NVIC_SystemReset>

08006f12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b082      	sub	sp, #8
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f7ff ff90 	bl	8006e40 <SysTick_Config>
 8006f20:	4603      	mov	r3, r0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3708      	adds	r7, #8
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8006f2a:	b480      	push	{r7}
 8006f2c:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8006f2e:	f3bf 8f5f 	dmb	sy
}
 8006f32:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006f34:	4b06      	ldr	r3, [pc, #24]	; (8006f50 <HAL_MPU_Disable+0x26>)
 8006f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f38:	4a05      	ldr	r2, [pc, #20]	; (8006f50 <HAL_MPU_Disable+0x26>)
 8006f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f3e:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0U;
 8006f40:	4b04      	ldr	r3, [pc, #16]	; (8006f54 <HAL_MPU_Disable+0x2a>)
 8006f42:	2200      	movs	r2, #0
 8006f44:	605a      	str	r2, [r3, #4]
}
 8006f46:	bf00      	nop
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr
 8006f50:	e000ed00 	.word	0xe000ed00
 8006f54:	e000ed90 	.word	0xe000ed90

08006f58 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006f60:	4a0b      	ldr	r2, [pc, #44]	; (8006f90 <HAL_MPU_Enable+0x38>)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f043 0301 	orr.w	r3, r3, #1
 8006f68:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006f6a:	4b0a      	ldr	r3, [pc, #40]	; (8006f94 <HAL_MPU_Enable+0x3c>)
 8006f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6e:	4a09      	ldr	r2, [pc, #36]	; (8006f94 <HAL_MPU_Enable+0x3c>)
 8006f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f74:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006f76:	f3bf 8f4f 	dsb	sy
}
 8006f7a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006f7c:	f3bf 8f6f 	isb	sy
}
 8006f80:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006f82:	bf00      	nop
 8006f84:	370c      	adds	r7, #12
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr
 8006f8e:	bf00      	nop
 8006f90:	e000ed90 	.word	0xe000ed90
 8006f94:	e000ed00 	.word	0xe000ed00

08006f98 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	785a      	ldrb	r2, [r3, #1]
 8006fa4:	4b1d      	ldr	r3, [pc, #116]	; (800701c <HAL_MPU_ConfigRegion+0x84>)
 8006fa6:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d029      	beq.n	8007004 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8006fb0:	4a1a      	ldr	r2, [pc, #104]	; (800701c <HAL_MPU_ConfigRegion+0x84>)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	7b1b      	ldrb	r3, [r3, #12]
 8006fbc:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	7adb      	ldrb	r3, [r3, #11]
 8006fc2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006fc4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	7a9b      	ldrb	r3, [r3, #10]
 8006fca:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006fcc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	7b5b      	ldrb	r3, [r3, #13]
 8006fd2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006fd4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	7b9b      	ldrb	r3, [r3, #14]
 8006fda:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006fdc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	7bdb      	ldrb	r3, [r3, #15]
 8006fe2:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006fe4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	7a5b      	ldrb	r3, [r3, #9]
 8006fea:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006fec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	7a1b      	ldrb	r3, [r3, #8]
 8006ff2:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006ff4:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	7812      	ldrb	r2, [r2, #0]
 8006ffa:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006ffc:	4a07      	ldr	r2, [pc, #28]	; (800701c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006ffe:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007000:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00U;
    MPU->RASR = 0x00U;
  }
}
 8007002:	e005      	b.n	8007010 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00U;
 8007004:	4b05      	ldr	r3, [pc, #20]	; (800701c <HAL_MPU_ConfigRegion+0x84>)
 8007006:	2200      	movs	r2, #0
 8007008:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00U;
 800700a:	4b04      	ldr	r3, [pc, #16]	; (800701c <HAL_MPU_ConfigRegion+0x84>)
 800700c:	2200      	movs	r2, #0
 800700e:	611a      	str	r2, [r3, #16]
}
 8007010:	bf00      	nop
 8007012:	370c      	adds	r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr
 800701c:	e000ed90 	.word	0xe000ed90

08007020 <HAL_NVIC_GetPriorityGrouping>:
/**
  * @brief  Gets the priority grouping field from the NVIC Interrupt Controller.
  * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	af00      	add	r7, sp, #0
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
 8007024:	f7ff fd6a 	bl	8006afc <__NVIC_GetPriorityGrouping>
 8007028:	4603      	mov	r3, r0
}
 800702a:	4618      	mov	r0, r3
 800702c:	bd80      	pop	{r7, pc}

0800702e <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
 800702e:	b580      	push	{r7, lr}
 8007030:	b084      	sub	sp, #16
 8007032:	af00      	add	r7, sp, #0
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	607a      	str	r2, [r7, #4]
 8007038:	603b      	str	r3, [r7, #0]
 800703a:	4603      	mov	r3, r0
 800703c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
 800703e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007042:	4618      	mov	r0, r3
 8007044:	f7ff fe54 	bl	8006cf0 <__NVIC_GetPriority>
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	68b9      	ldr	r1, [r7, #8]
 800704e:	f7ff feaa 	bl	8006da6 <NVIC_DecodePriority>
}
 8007052:	bf00      	nop
 8007054:	3710      	adds	r7, #16
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}

0800705a <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800705a:	b580      	push	{r7, lr}
 800705c:	b082      	sub	sp, #8
 800705e:	af00      	add	r7, sp, #0
 8007060:	4603      	mov	r3, r0
 8007062:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8007064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007068:	4618      	mov	r0, r3
 800706a:	f7ff fdb9 	bl	8006be0 <__NVIC_SetPendingIRQ>
}
 800706e:	bf00      	nop
 8007070:	3708      	adds	r7, #8
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}

08007076 <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8007076:	b580      	push	{r7, lr}
 8007078:	b082      	sub	sp, #8
 800707a:	af00      	add	r7, sp, #0
 800707c:	4603      	mov	r3, r0
 800707e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 8007080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007084:	4618      	mov	r0, r3
 8007086:	f7ff fd89 	bl	8006b9c <__NVIC_GetPendingIRQ>
 800708a:	4603      	mov	r3, r0
}
 800708c:	4618      	mov	r0, r3
 800708e:	3708      	adds	r7, #8
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
 800709a:	4603      	mov	r3, r0
 800709c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800709e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070a2:	4618      	mov	r0, r3
 80070a4:	f7ff fdba 	bl	8006c1c <__NVIC_ClearPendingIRQ>
}
 80070a8:	bf00      	nop
 80070aa:	3708      	adds	r7, #8
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <HAL_NVIC_GetActive>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	4603      	mov	r3, r0
 80070b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
 80070ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070be:	4618      	mov	r0, r3
 80070c0:	f7ff fdca 	bl	8006c58 <__NVIC_GetActive>
 80070c4:	4603      	mov	r3, r0
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3708      	adds	r7, #8
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}

080070ce <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80070ce:	b480      	push	{r7}
 80070d0:	b083      	sub	sp, #12
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2b04      	cmp	r3, #4
 80070da:	d106      	bne.n	80070ea <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80070dc:	4b09      	ldr	r3, [pc, #36]	; (8007104 <HAL_SYSTICK_CLKSourceConfig+0x36>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a08      	ldr	r2, [pc, #32]	; (8007104 <HAL_SYSTICK_CLKSourceConfig+0x36>)
 80070e2:	f043 0304 	orr.w	r3, r3, #4
 80070e6:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80070e8:	e005      	b.n	80070f6 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80070ea:	4b06      	ldr	r3, [pc, #24]	; (8007104 <HAL_SYSTICK_CLKSourceConfig+0x36>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a05      	ldr	r2, [pc, #20]	; (8007104 <HAL_SYSTICK_CLKSourceConfig+0x36>)
 80070f0:	f023 0304 	bic.w	r3, r3, #4
 80070f4:	6013      	str	r3, [r2, #0]
}
 80070f6:	bf00      	nop
 80070f8:	370c      	adds	r7, #12
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	e000e010 	.word	0xe000e010

08007108 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800710c:	f000 f802 	bl	8007114 <HAL_SYSTICK_Callback>
}
 8007110:	bf00      	nop
 8007112:	bd80      	pop	{r7, pc}

08007114 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8007114:	b480      	push	{r7}
 8007116:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8007118:	bf00      	nop
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr

08007122 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b082      	sub	sp, #8
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d101      	bne.n	8007134 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	e014      	b.n	800715e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	791b      	ldrb	r3, [r3, #4]
 8007138:	b2db      	uxtb	r3, r3
 800713a:	2b00      	cmp	r3, #0
 800713c:	d105      	bne.n	800714a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f7fe fb7b 	bl	8005840 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2202      	movs	r2, #2
 800714e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2201      	movs	r2, #1
 800715a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3708      	adds	r7, #8
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}

08007166 <HAL_DAC_DeInit>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_DeInit(DAC_HandleTypeDef *hdac)
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b082      	sub	sp, #8
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d101      	bne.n	8007178 <HAL_DAC_DeInit+0x12>
  {
    return HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	e00f      	b.n	8007198 <HAL_DAC_DeInit+0x32>

  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2202      	movs	r2, #2
 800717c:	711a      	strb	r2, [r3, #4]
  }
  /* DeInit the low level hardware */
  hdac->MspDeInitCallback(hdac);
#else
  /* DeInit the low level hardware */
  HAL_DAC_MspDeInit(hdac);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f7fe fba2 	bl	80058c8 <HAL_DAC_MspDeInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	611a      	str	r2, [r3, #16]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_RESET;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	711a      	strb	r2, [r3, #4]

  /* Release Lock */
  __HAL_UNLOCK(hdac);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	3708      	adds	r7, #8
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	795b      	ldrb	r3, [r3, #5]
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d101      	bne.n	80071b6 <HAL_DAC_Start+0x16>
 80071b2:	2302      	movs	r3, #2
 80071b4:	e040      	b.n	8007238 <HAL_DAC_Start+0x98>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2201      	movs	r2, #1
 80071ba:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2202      	movs	r2, #2
 80071c0:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	6819      	ldr	r1, [r3, #0]
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	f003 0310 	and.w	r3, r3, #16
 80071ce:	2201      	movs	r2, #1
 80071d0:	409a      	lsls	r2, r3
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	430a      	orrs	r2, r1
 80071d8:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d10f      	bne.n	8007200 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80071ea:	2b3c      	cmp	r3, #60	; 0x3c
 80071ec:	d11d      	bne.n	800722a <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	685a      	ldr	r2, [r3, #4]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f042 0201 	orr.w	r2, r2, #1
 80071fc:	605a      	str	r2, [r3, #4]
 80071fe:	e014      	b.n	800722a <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	f003 0310 	and.w	r3, r3, #16
 8007210:	213c      	movs	r1, #60	; 0x3c
 8007212:	fa01 f303 	lsl.w	r3, r1, r3
 8007216:	429a      	cmp	r2, r3
 8007218:	d107      	bne.n	800722a <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	685a      	ldr	r2, [r3, #4]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f042 0202 	orr.w	r2, r2, #2
 8007228:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2201      	movs	r2, #1
 800722e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007236:	2300      	movs	r3, #0
}
 8007238:	4618      	mov	r0, r3
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	6819      	ldr	r1, [r3, #0]
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	f003 0310 	and.w	r3, r3, #16
 800725a:	2201      	movs	r2, #1
 800725c:	fa02 f303 	lsl.w	r3, r2, r3
 8007260:	43da      	mvns	r2, r3
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	400a      	ands	r2, r1
 8007268:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2201      	movs	r2, #1
 800726e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	370c      	adds	r7, #12
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr

0800727e <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800727e:	b580      	push	{r7, lr}
 8007280:	b086      	sub	sp, #24
 8007282:	af00      	add	r7, sp, #0
 8007284:	60f8      	str	r0, [r7, #12]
 8007286:	60b9      	str	r1, [r7, #8]
 8007288:	607a      	str	r2, [r7, #4]
 800728a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800728c:	2300      	movs	r3, #0
 800728e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 8007290:	2300      	movs	r3, #0
 8007292:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	795b      	ldrb	r3, [r3, #5]
 8007298:	2b01      	cmp	r3, #1
 800729a:	d101      	bne.n	80072a0 <HAL_DAC_Start_DMA+0x22>
 800729c:	2302      	movs	r3, #2
 800729e:	e0ab      	b.n	80073f8 <HAL_DAC_Start_DMA+0x17a>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2201      	movs	r2, #1
 80072a4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2202      	movs	r2, #2
 80072aa:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d12f      	bne.n	8007312 <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	4a52      	ldr	r2, [pc, #328]	; (8007400 <HAL_DAC_Start_DMA+0x182>)
 80072b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	4a51      	ldr	r2, [pc, #324]	; (8007404 <HAL_DAC_Start_DMA+0x186>)
 80072c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	4a50      	ldr	r2, [pc, #320]	; (8007408 <HAL_DAC_Start_DMA+0x18a>)
 80072c8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80072d8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80072da:	6a3b      	ldr	r3, [r7, #32]
 80072dc:	2b08      	cmp	r3, #8
 80072de:	d013      	beq.n	8007308 <HAL_DAC_Start_DMA+0x8a>
 80072e0:	6a3b      	ldr	r3, [r7, #32]
 80072e2:	2b08      	cmp	r3, #8
 80072e4:	d845      	bhi.n	8007372 <HAL_DAC_Start_DMA+0xf4>
 80072e6:	6a3b      	ldr	r3, [r7, #32]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d003      	beq.n	80072f4 <HAL_DAC_Start_DMA+0x76>
 80072ec:	6a3b      	ldr	r3, [r7, #32]
 80072ee:	2b04      	cmp	r3, #4
 80072f0:	d005      	beq.n	80072fe <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80072f2:	e03e      	b.n	8007372 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	3308      	adds	r3, #8
 80072fa:	613b      	str	r3, [r7, #16]
        break;
 80072fc:	e03c      	b.n	8007378 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	330c      	adds	r3, #12
 8007304:	613b      	str	r3, [r7, #16]
        break;
 8007306:	e037      	b.n	8007378 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	3310      	adds	r3, #16
 800730e:	613b      	str	r3, [r7, #16]
        break;
 8007310:	e032      	b.n	8007378 <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	4a3d      	ldr	r2, [pc, #244]	; (800740c <HAL_DAC_Start_DMA+0x18e>)
 8007318:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	4a3c      	ldr	r2, [pc, #240]	; (8007410 <HAL_DAC_Start_DMA+0x192>)
 8007320:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	4a3b      	ldr	r2, [pc, #236]	; (8007414 <HAL_DAC_Start_DMA+0x196>)
 8007328:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007338:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800733a:	6a3b      	ldr	r3, [r7, #32]
 800733c:	2b08      	cmp	r3, #8
 800733e:	d013      	beq.n	8007368 <HAL_DAC_Start_DMA+0xea>
 8007340:	6a3b      	ldr	r3, [r7, #32]
 8007342:	2b08      	cmp	r3, #8
 8007344:	d817      	bhi.n	8007376 <HAL_DAC_Start_DMA+0xf8>
 8007346:	6a3b      	ldr	r3, [r7, #32]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d003      	beq.n	8007354 <HAL_DAC_Start_DMA+0xd6>
 800734c:	6a3b      	ldr	r3, [r7, #32]
 800734e:	2b04      	cmp	r3, #4
 8007350:	d005      	beq.n	800735e <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8007352:	e010      	b.n	8007376 <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	3314      	adds	r3, #20
 800735a:	613b      	str	r3, [r7, #16]
        break;
 800735c:	e00c      	b.n	8007378 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	3318      	adds	r3, #24
 8007364:	613b      	str	r3, [r7, #16]
        break;
 8007366:	e007      	b.n	8007378 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	331c      	adds	r3, #28
 800736e:	613b      	str	r3, [r7, #16]
        break;
 8007370:	e002      	b.n	8007378 <HAL_DAC_Start_DMA+0xfa>
        break;
 8007372:	bf00      	nop
 8007374:	e000      	b.n	8007378 <HAL_DAC_Start_DMA+0xfa>
        break;
 8007376:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d111      	bne.n	80073a2 <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800738c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	6898      	ldr	r0, [r3, #8]
 8007392:	6879      	ldr	r1, [r7, #4]
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	693a      	ldr	r2, [r7, #16]
 8007398:	f000 fca5 	bl	8007ce6 <HAL_DMA_Start_IT>
 800739c:	4603      	mov	r3, r0
 800739e:	75fb      	strb	r3, [r7, #23]
 80073a0:	e010      	b.n	80073c4 <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80073b0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	68d8      	ldr	r0, [r3, #12]
 80073b6:	6879      	ldr	r1, [r7, #4]
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	693a      	ldr	r2, [r7, #16]
 80073bc:	f000 fc93 	bl	8007ce6 <HAL_DMA_Start_IT>
 80073c0:	4603      	mov	r3, r0
 80073c2:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2200      	movs	r2, #0
 80073c8:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80073ca:	7dfb      	ldrb	r3, [r7, #23]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d10c      	bne.n	80073ea <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	6819      	ldr	r1, [r3, #0]
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	f003 0310 	and.w	r3, r3, #16
 80073dc:	2201      	movs	r2, #1
 80073de:	409a      	lsls	r2, r3
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	430a      	orrs	r2, r1
 80073e6:	601a      	str	r2, [r3, #0]
 80073e8:	e005      	b.n	80073f6 <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	691b      	ldr	r3, [r3, #16]
 80073ee:	f043 0204 	orr.w	r2, r3, #4
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80073f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3718      	adds	r7, #24
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	080076fb 	.word	0x080076fb
 8007404:	0800771d 	.word	0x0800771d
 8007408:	08007739 	.word	0x08007739
 800740c:	080079ed 	.word	0x080079ed
 8007410:	08007a0f 	.word	0x08007a0f
 8007414:	08007a2b 	.word	0x08007a2b

08007418 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	6819      	ldr	r1, [r3, #0]
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	f003 0310 	and.w	r3, r3, #16
 800742e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007432:	fa02 f303 	lsl.w	r3, r2, r3
 8007436:	43da      	mvns	r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	400a      	ands	r2, r1
 800743e:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	6819      	ldr	r1, [r3, #0]
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	f003 0310 	and.w	r3, r3, #16
 800744c:	2201      	movs	r2, #1
 800744e:	fa02 f303 	lsl.w	r3, r2, r3
 8007452:	43da      	mvns	r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	400a      	ands	r2, r1
 800745a:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d10d      	bne.n	800747e <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	4618      	mov	r0, r3
 8007468:	f000 fc95 	bl	8007d96 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800747a:	601a      	str	r2, [r3, #0]
 800747c:	e00c      	b.n	8007498 <HAL_DAC_Stop_DMA+0x80>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	4618      	mov	r0, r3
 8007484:	f000 fc87 	bl	8007d96 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8007496:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3708      	adds	r7, #8
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074be:	d120      	bne.n	8007502 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074ce:	d118      	bne.n	8007502 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2204      	movs	r2, #4
 80074d4:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	f043 0201 	orr.w	r2, r3, #1
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80074ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80074fa:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 f870 	bl	80075e2 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800750c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007510:	d120      	bne.n	8007554 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007518:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800751c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007520:	d118      	bne.n	8007554 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2204      	movs	r2, #4
 8007526:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	f043 0202 	orr.w	r2, r3, #2
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800753c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800754c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 fa28 	bl	80079a4 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8007554:	bf00      	nop
 8007556:	3708      	adds	r7, #8
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800755c:	b480      	push	{r7}
 800755e:	b087      	sub	sp, #28
 8007560:	af00      	add	r7, sp, #0
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	60b9      	str	r1, [r7, #8]
 8007566:	607a      	str	r2, [r7, #4]
 8007568:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800756a:	2300      	movs	r3, #0
 800756c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d105      	bne.n	8007586 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800757a:	697a      	ldr	r2, [r7, #20]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4413      	add	r3, r2
 8007580:	3308      	adds	r3, #8
 8007582:	617b      	str	r3, [r7, #20]
 8007584:	e004      	b.n	8007590 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8007586:	697a      	ldr	r2, [r7, #20]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4413      	add	r3, r2
 800758c:	3314      	adds	r3, #20
 800758e:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	461a      	mov	r2, r3
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	371c      	adds	r7, #28
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr

080075a6 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80075a6:	b480      	push	{r7}
 80075a8:	b083      	sub	sp, #12
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80075ae:	bf00      	nop
 80075b0:	370c      	adds	r7, #12
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr

080075ba <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80075ba:	b480      	push	{r7}
 80075bc:	b083      	sub	sp, #12
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80075c2:	bf00      	nop
 80075c4:	370c      	adds	r7, #12
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr

080075ce <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80075ce:	b480      	push	{r7}
 80075d0:	b083      	sub	sp, #12
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80075d6:	bf00      	nop
 80075d8:	370c      	adds	r7, #12
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr

080075e2 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80075e2:	b480      	push	{r7}
 80075e4:	b083      	sub	sp, #12
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80075ea:	bf00      	nop
 80075ec:	370c      	adds	r7, #12
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr

080075f6 <HAL_DAC_GetValue>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80075f6:	b480      	push	{r7}
 80075f8:	b085      	sub	sp, #20
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
 80075fe:	6039      	str	r1, [r7, #0]
  uint32_t result = 0;
 8007600:	2300      	movs	r3, #0
 8007602:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  if (Channel == DAC_CHANNEL_1)
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d104      	bne.n	8007614 <HAL_DAC_GetValue+0x1e>
  {
    result = hdac->Instance->DOR1;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007610:	60fb      	str	r3, [r7, #12]
 8007612:	e003      	b.n	800761c <HAL_DAC_GetValue+0x26>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    result = hdac->Instance->DOR2;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800761a:	60fb      	str	r3, [r7, #12]
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  /* Returns the DAC channel data output register value */
  return result;
 800761c:	68fb      	ldr	r3, [r7, #12]
}
 800761e:	4618      	mov	r0, r3
 8007620:	3714      	adds	r7, #20
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr

0800762a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800762a:	b480      	push	{r7}
 800762c:	b087      	sub	sp, #28
 800762e:	af00      	add	r7, sp, #0
 8007630:	60f8      	str	r0, [r7, #12]
 8007632:	60b9      	str	r1, [r7, #8]
 8007634:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	795b      	ldrb	r3, [r3, #5]
 800763a:	2b01      	cmp	r3, #1
 800763c:	d101      	bne.n	8007642 <HAL_DAC_ConfigChannel+0x18>
 800763e:	2302      	movs	r3, #2
 8007640:	e03c      	b.n	80076bc <HAL_DAC_ConfigChannel+0x92>
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2201      	movs	r2, #1
 8007646:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2202      	movs	r2, #2
 800764c:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f003 0310 	and.w	r3, r3, #16
 800765c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8007660:	fa02 f303 	lsl.w	r3, r2, r3
 8007664:	43db      	mvns	r3, r3
 8007666:	697a      	ldr	r2, [r7, #20]
 8007668:	4013      	ands	r3, r2
 800766a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	4313      	orrs	r3, r2
 8007676:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f003 0310 	and.w	r3, r3, #16
 800767e:	693a      	ldr	r2, [r7, #16]
 8007680:	fa02 f303 	lsl.w	r3, r2, r3
 8007684:	697a      	ldr	r2, [r7, #20]
 8007686:	4313      	orrs	r3, r2
 8007688:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	697a      	ldr	r2, [r7, #20]
 8007690:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	6819      	ldr	r1, [r3, #0]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f003 0310 	and.w	r3, r3, #16
 800769e:	22c0      	movs	r2, #192	; 0xc0
 80076a0:	fa02 f303 	lsl.w	r3, r2, r3
 80076a4:	43da      	mvns	r2, r3
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	400a      	ands	r2, r1
 80076ac:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2201      	movs	r2, #1
 80076b2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2200      	movs	r2, #0
 80076b8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80076ba:	2300      	movs	r3, #0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	371c      	adds	r7, #28
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <HAL_DAC_GetState>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL state
  */
HAL_DAC_StateTypeDef HAL_DAC_GetState(DAC_HandleTypeDef *hdac)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  /* Return DAC handle state */
  return hdac->State;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	791b      	ldrb	r3, [r3, #4]
 80076d4:	b2db      	uxtb	r3, r3
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	370c      	adds	r7, #12
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr

080076e2 <HAL_DAC_GetError>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval DAC Error Code
  */
uint32_t HAL_DAC_GetError(DAC_HandleTypeDef *hdac)
{
 80076e2:	b480      	push	{r7}
 80076e4:	b083      	sub	sp, #12
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
  return hdac->ErrorCode;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	691b      	ldr	r3, [r3, #16]
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	370c      	adds	r7, #12
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr

080076fa <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b084      	sub	sp, #16
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007706:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8007708:	68f8      	ldr	r0, [r7, #12]
 800770a:	f7ff ff4c 	bl	80075a6 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2201      	movs	r2, #1
 8007712:	711a      	strb	r2, [r3, #4]
}
 8007714:	bf00      	nop
 8007716:	3710      	adds	r7, #16
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b084      	sub	sp, #16
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007728:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800772a:	68f8      	ldr	r0, [r7, #12]
 800772c:	f7ff ff45 	bl	80075ba <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007730:	bf00      	nop
 8007732:	3710      	adds	r7, #16
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007744:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	691b      	ldr	r3, [r3, #16]
 800774a:	f043 0204 	orr.w	r2, r3, #4
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8007752:	68f8      	ldr	r0, [r7, #12]
 8007754:	f7ff ff3b 	bl	80075ce <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2201      	movs	r2, #1
 800775c:	711a      	strb	r2, [r3, #4]
}
 800775e:	bf00      	nop
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <HAL_DACEx_DualStart>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_DualStart(DAC_HandleTypeDef *hdac)
{
 8007766:	b480      	push	{r7}
 8007768:	b085      	sub	sp, #20
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
  uint32_t tmp_swtrig = 0UL;
 800776e:	2300      	movs	r3, #0
 8007770:	60fb      	str	r3, [r7, #12]


  /* Process locked */
  __HAL_LOCK(hdac);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	795b      	ldrb	r3, [r3, #5]
 8007776:	2b01      	cmp	r3, #1
 8007778:	d101      	bne.n	800777e <HAL_DACEx_DualStart+0x18>
 800777a:	2302      	movs	r3, #2
 800777c:	e03b      	b.n	80077f6 <HAL_DACEx_DualStart+0x90>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2201      	movs	r2, #1
 8007782:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2202      	movs	r2, #2
 8007788:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, DAC_CHANNEL_1);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f042 0201 	orr.w	r2, r2, #1
 8007798:	601a      	str	r2, [r3, #0]
  __HAL_DAC_ENABLE(hdac, DAC_CHANNEL_2);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80077a8:	601a      	str	r2, [r3, #0]

  /* Check if software trigger enabled */
  if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80077b4:	2b3c      	cmp	r3, #60	; 0x3c
 80077b6:	d103      	bne.n	80077c0 <HAL_DACEx_DualStart+0x5a>
  {
    tmp_swtrig |= DAC_SWTRIGR_SWTRIG1;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f043 0301 	orr.w	r3, r3, #1
 80077be:	60fb      	str	r3, [r7, #12]
  }
  if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (DAC_CHANNEL_2 & 0x10UL)))
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80077ca:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 80077ce:	d103      	bne.n	80077d8 <HAL_DACEx_DualStart+0x72>
  {
    tmp_swtrig |= DAC_SWTRIGR_SWTRIG2;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f043 0302 	orr.w	r3, r3, #2
 80077d6:	60fb      	str	r3, [r7, #12]
  }
  /* Enable the selected DAC software conversion*/
  SET_BIT(hdac->Instance->SWTRIGR, tmp_swtrig);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	6859      	ldr	r1, [r3, #4]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68fa      	ldr	r2, [r7, #12]
 80077e4:	430a      	orrs	r2, r1
 80077e6:	605a      	str	r2, [r3, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3714      	adds	r7, #20
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr

08007802 <HAL_DACEx_DualStop>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_DualStop(DAC_HandleTypeDef *hdac)
{
 8007802:	b480      	push	{r7}
 8007804:	b083      	sub	sp, #12
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, DAC_CHANNEL_1);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f022 0201 	bic.w	r2, r2, #1
 8007818:	601a      	str	r2, [r3, #0]
  __HAL_DAC_DISABLE(hdac, DAC_CHANNEL_2);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007828:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2201      	movs	r2, #1
 800782e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007830:	2300      	movs	r3, #0
}
 8007832:	4618      	mov	r0, r3
 8007834:	370c      	adds	r7, #12
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr

0800783e <HAL_DACEx_TriangleWaveGenerate>:
  *            @arg DAC_TRIANGLEAMPLITUDE_2047: Select max triangle amplitude of 2047
  *            @arg DAC_TRIANGLEAMPLITUDE_4095: Select max triangle amplitude of 4095
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_TriangleWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude)
{
 800783e:	b480      	push	{r7}
 8007840:	b085      	sub	sp, #20
 8007842:	af00      	add	r7, sp, #0
 8007844:	60f8      	str	r0, [r7, #12]
 8007846:	60b9      	str	r1, [r7, #8]
 8007848:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));

  /* Process locked */
  __HAL_LOCK(hdac);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	795b      	ldrb	r3, [r3, #5]
 800784e:	2b01      	cmp	r3, #1
 8007850:	d101      	bne.n	8007856 <HAL_DACEx_TriangleWaveGenerate+0x18>
 8007852:	2302      	movs	r3, #2
 8007854:	e024      	b.n	80078a0 <HAL_DACEx_TriangleWaveGenerate+0x62>
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2201      	movs	r2, #1
 800785a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2202      	movs	r2, #2
 8007860:	711a      	strb	r2, [r3, #4]

  /* Enable the triangle wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL),
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	f003 0310 	and.w	r3, r3, #16
 800786e:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 8007872:	fa01 f303 	lsl.w	r3, r1, r3
 8007876:	43db      	mvns	r3, r3
 8007878:	ea02 0103 	and.w	r1, r2, r3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	f003 0310 	and.w	r3, r3, #16
 8007888:	409a      	lsls	r2, r3
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	430a      	orrs	r2, r1
 8007890:	601a      	str	r2, [r3, #0]
             (DAC_CR_WAVE1_1 | Amplitude) << (Channel & 0x10UL));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2201      	movs	r2, #1
 8007896:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2200      	movs	r2, #0
 800789c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800789e:	2300      	movs	r3, #0
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3714      	adds	r7, #20
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <HAL_DACEx_NoiseWaveGenerate>:
  *            @arg DAC_LFSRUNMASK_BITS10_0: Unmask DAC channel LFSR bit[10:0] for noise wave generation
  *            @arg DAC_LFSRUNMASK_BITS11_0: Unmask DAC channel LFSR bit[11:0] for noise wave generation
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_NoiseWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b085      	sub	sp, #20
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	60b9      	str	r1, [r7, #8]
 80078b6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));

  /* Process locked */
  __HAL_LOCK(hdac);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	795b      	ldrb	r3, [r3, #5]
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d101      	bne.n	80078c4 <HAL_DACEx_NoiseWaveGenerate+0x18>
 80078c0:	2302      	movs	r3, #2
 80078c2:	e024      	b.n	800790e <HAL_DACEx_NoiseWaveGenerate+0x62>
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2201      	movs	r2, #1
 80078c8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2202      	movs	r2, #2
 80078ce:	711a      	strb	r2, [r3, #4]

  /* Enable the noise wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL),
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	f003 0310 	and.w	r3, r3, #16
 80078dc:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 80078e0:	fa01 f303 	lsl.w	r3, r1, r3
 80078e4:	43db      	mvns	r3, r3
 80078e6:	ea02 0103 	and.w	r1, r2, r3
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	f003 0310 	and.w	r3, r3, #16
 80078f6:	409a      	lsls	r2, r3
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	430a      	orrs	r2, r1
 80078fe:	601a      	str	r2, [r3, #0]
             (DAC_CR_WAVE1_0 | Amplitude) << (Channel & 0x10UL));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2201      	movs	r2, #1
 8007904:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2200      	movs	r2, #0
 800790a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	3714      	adds	r7, #20
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr

0800791a <HAL_DACEx_DualSetValue>:
  * @note   In dual mode, a unique register access is required to write in both
  *          DAC channels at the same time.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_DualSetValue(DAC_HandleTypeDef *hdac, uint32_t Alignment, uint32_t Data1, uint32_t Data2)
{
 800791a:	b480      	push	{r7}
 800791c:	b087      	sub	sp, #28
 800791e:	af00      	add	r7, sp, #0
 8007920:	60f8      	str	r0, [r7, #12]
 8007922:	60b9      	str	r1, [r7, #8]
 8007924:	607a      	str	r2, [r7, #4]
 8007926:	603b      	str	r3, [r7, #0]
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));

  /* Calculate and set dual DAC data holding register value */
  if (Alignment == DAC_ALIGN_8B_R)
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	2b08      	cmp	r3, #8
 800792c:	d105      	bne.n	800793a <HAL_DACEx_DualSetValue+0x20>
  {
    data = ((uint32_t)Data2 << 8U) | Data1;
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	021b      	lsls	r3, r3, #8
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	4313      	orrs	r3, r2
 8007936:	617b      	str	r3, [r7, #20]
 8007938:	e004      	b.n	8007944 <HAL_DACEx_DualSetValue+0x2a>
  }
  else
  {
    data = ((uint32_t)Data2 << 16U) | Data1;
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	041b      	lsls	r3, r3, #16
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	4313      	orrs	r3, r2
 8007942:	617b      	str	r3, [r7, #20]
  }

  tmp = (uint32_t)hdac->Instance;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	613b      	str	r3, [r7, #16]
  tmp += DAC_DHR12RD_ALIGNMENT(Alignment);
 800794a:	68ba      	ldr	r2, [r7, #8]
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	4413      	add	r3, r2
 8007950:	3320      	adds	r3, #32
 8007952:	613b      	str	r3, [r7, #16]

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	697a      	ldr	r2, [r7, #20]
 8007958:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800795a:	2300      	movs	r3, #0
}
 800795c:	4618      	mov	r0, r3
 800795e:	371c      	adds	r7, #28
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007968:	b480      	push	{r7}
 800796a:	b083      	sub	sp, #12
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8007970:	bf00      	nop
 8007972:	370c      	adds	r7, #12
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8007984:	bf00      	nop
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8007998:	bf00      	nop
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80079ac:	bf00      	nop
 80079ae:	370c      	adds	r7, #12
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <HAL_DACEx_DualGetValue>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DACEx_DualGetValue(DAC_HandleTypeDef *hdac)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b085      	sub	sp, #20
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0UL;
 80079c0:	2300      	movs	r3, #0
 80079c2:	60fb      	str	r3, [r7, #12]

  tmp |= hdac->Instance->DOR1;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ca:	68fa      	ldr	r2, [r7, #12]
 80079cc:	4313      	orrs	r3, r2
 80079ce:	60fb      	str	r3, [r7, #12]

  tmp |= hdac->Instance->DOR2 << 16UL;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d6:	041b      	lsls	r3, r3, #16
 80079d8:	68fa      	ldr	r2, [r7, #12]
 80079da:	4313      	orrs	r3, r2
 80079dc:	60fb      	str	r3, [r7, #12]

  /* Returns the DAC channel data output register value */
  return tmp;
 80079de:	68fb      	ldr	r3, [r7, #12]
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3714      	adds	r7, #20
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80079fa:	68f8      	ldr	r0, [r7, #12]
 80079fc:	f7ff ffb4 	bl	8007968 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2201      	movs	r2, #1
 8007a04:	711a      	strb	r2, [r3, #4]
}
 8007a06:	bf00      	nop
 8007a08:	3710      	adds	r7, #16
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b084      	sub	sp, #16
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a1a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8007a1c:	68f8      	ldr	r0, [r7, #12]
 8007a1e:	f7ff ffad 	bl	800797c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007a22:	bf00      	nop
 8007a24:	3710      	adds	r7, #16
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}

08007a2a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8007a2a:	b580      	push	{r7, lr}
 8007a2c:	b084      	sub	sp, #16
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a36:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	691b      	ldr	r3, [r3, #16]
 8007a3c:	f043 0204 	orr.w	r2, r3, #4
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8007a44:	68f8      	ldr	r0, [r7, #12]
 8007a46:	f7ff ffa3 	bl	8007990 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	711a      	strb	r2, [r3, #4]
}
 8007a50:	bf00      	nop
 8007a52:	3710      	adds	r7, #16
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b086      	sub	sp, #24
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007a60:	2300      	movs	r3, #0
 8007a62:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007a64:	f7fe fed6 	bl	8006814 <HAL_GetTick>
 8007a68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d101      	bne.n	8007a74 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	e099      	b.n	8007ba8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2202      	movs	r2, #2
 8007a78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f022 0201 	bic.w	r2, r2, #1
 8007a92:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007a94:	e00f      	b.n	8007ab6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007a96:	f7fe febd 	bl	8006814 <HAL_GetTick>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	1ad3      	subs	r3, r2, r3
 8007aa0:	2b05      	cmp	r3, #5
 8007aa2:	d908      	bls.n	8007ab6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2220      	movs	r2, #32
 8007aa8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2203      	movs	r2, #3
 8007aae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	e078      	b.n	8007ba8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f003 0301 	and.w	r3, r3, #1
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d1e8      	bne.n	8007a96 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007acc:	697a      	ldr	r2, [r7, #20]
 8007ace:	4b38      	ldr	r3, [pc, #224]	; (8007bb0 <HAL_DMA_Init+0x158>)
 8007ad0:	4013      	ands	r3, r2
 8007ad2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	685a      	ldr	r2, [r3, #4]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007ae2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007aee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	699b      	ldr	r3, [r3, #24]
 8007af4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007afa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6a1b      	ldr	r3, [r3, #32]
 8007b00:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b02:	697a      	ldr	r2, [r7, #20]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0c:	2b04      	cmp	r3, #4
 8007b0e:	d107      	bne.n	8007b20 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	697a      	ldr	r2, [r7, #20]
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	697a      	ldr	r2, [r7, #20]
 8007b26:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	695b      	ldr	r3, [r3, #20]
 8007b2e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	f023 0307 	bic.w	r3, r3, #7
 8007b36:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3c:	697a      	ldr	r2, [r7, #20]
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b46:	2b04      	cmp	r3, #4
 8007b48:	d117      	bne.n	8007b7a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b4e:	697a      	ldr	r2, [r7, #20]
 8007b50:	4313      	orrs	r3, r2
 8007b52:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d00e      	beq.n	8007b7a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 fd4d 	bl	80085fc <DMA_CheckFifoParam>
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d008      	beq.n	8007b7a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2240      	movs	r2, #64	; 0x40
 8007b6c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2201      	movs	r2, #1
 8007b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007b76:	2301      	movs	r3, #1
 8007b78:	e016      	b.n	8007ba8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	697a      	ldr	r2, [r7, #20]
 8007b80:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 fd05 	bl	8008592 <DMA_CalcBaseAndBitshift>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b90:	223f      	movs	r2, #63	; 0x3f
 8007b92:	409a      	lsls	r2, r3
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007ba6:	2300      	movs	r3, #0
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3718      	adds	r7, #24
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}
 8007bb0:	f010803f 	.word	0xf010803f

08007bb4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d101      	bne.n	8007bc6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e050      	b.n	8007c68 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	d101      	bne.n	8007bd6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8007bd2:	2302      	movs	r3, #2
 8007bd4:	e048      	b.n	8007c68 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f022 0201 	bic.w	r2, r2, #1
 8007be4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2200      	movs	r2, #0
 8007bec:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	2200      	movs	r2, #0
 8007c04:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	2221      	movs	r2, #33	; 0x21
 8007c14:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 fcbb 	bl	8008592 <DMA_CalcBaseAndBitshift>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c48:	223f      	movs	r2, #63	; 0x3f
 8007c4a:	409a      	lsls	r2, r3
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007c66:	2300      	movs	r3, #0
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3710      	adds	r7, #16
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b086      	sub	sp, #24
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	60b9      	str	r1, [r7, #8]
 8007c7a:	607a      	str	r2, [r7, #4]
 8007c7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d101      	bne.n	8007c90 <HAL_DMA_Start+0x20>
 8007c8c:	2302      	movs	r3, #2
 8007c8e:	e026      	b.n	8007cde <HAL_DMA_Start+0x6e>
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d115      	bne.n	8007cd0 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2202      	movs	r2, #2
 8007ca8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	68b9      	ldr	r1, [r7, #8]
 8007cb8:	68f8      	ldr	r0, [r7, #12]
 8007cba:	f000 fc3c 	bl	8008536 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f042 0201 	orr.w	r2, r2, #1
 8007ccc:	601a      	str	r2, [r3, #0]
 8007cce:	e005      	b.n	8007cdc <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007cd8:	2302      	movs	r3, #2
 8007cda:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8007cdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3718      	adds	r7, #24
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}

08007ce6 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	b086      	sub	sp, #24
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	60f8      	str	r0, [r7, #12]
 8007cee:	60b9      	str	r1, [r7, #8]
 8007cf0:	607a      	str	r2, [r7, #4]
 8007cf2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cfc:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d101      	bne.n	8007d0c <HAL_DMA_Start_IT+0x26>
 8007d08:	2302      	movs	r3, #2
 8007d0a:	e040      	b.n	8007d8e <HAL_DMA_Start_IT+0xa8>
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d12f      	bne.n	8007d80 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2202      	movs	r2, #2
 8007d24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	68b9      	ldr	r1, [r7, #8]
 8007d34:	68f8      	ldr	r0, [r7, #12]
 8007d36:	f000 fbfe 	bl	8008536 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d3e:	223f      	movs	r2, #63	; 0x3f
 8007d40:	409a      	lsls	r2, r3
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f042 0216 	orr.w	r2, r2, #22
 8007d54:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d007      	beq.n	8007d6e <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f042 0208 	orr.w	r2, r2, #8
 8007d6c:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f042 0201 	orr.w	r2, r2, #1
 8007d7c:	601a      	str	r2, [r3, #0]
 8007d7e:	e005      	b.n	8007d8c <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2200      	movs	r2, #0
 8007d84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007d88:	2302      	movs	r3, #2
 8007d8a:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007d8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3718      	adds	r7, #24
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}

08007d96 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007d96:	b580      	push	{r7, lr}
 8007d98:	b084      	sub	sp, #16
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007da2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007da4:	f7fe fd36 	bl	8006814 <HAL_GetTick>
 8007da8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	2b02      	cmp	r3, #2
 8007db4:	d008      	beq.n	8007dc8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2280      	movs	r2, #128	; 0x80
 8007dba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e052      	b.n	8007e6e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f022 0216 	bic.w	r2, r2, #22
 8007dd6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	695a      	ldr	r2, [r3, #20]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007de6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d103      	bne.n	8007df8 <HAL_DMA_Abort+0x62>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d007      	beq.n	8007e08 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f022 0208 	bic.w	r2, r2, #8
 8007e06:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f022 0201 	bic.w	r2, r2, #1
 8007e16:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007e18:	e013      	b.n	8007e42 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007e1a:	f7fe fcfb 	bl	8006814 <HAL_GetTick>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	1ad3      	subs	r3, r2, r3
 8007e24:	2b05      	cmp	r3, #5
 8007e26:	d90c      	bls.n	8007e42 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2220      	movs	r2, #32
 8007e2c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2203      	movs	r2, #3
 8007e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007e3e:	2303      	movs	r3, #3
 8007e40:	e015      	b.n	8007e6e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f003 0301 	and.w	r3, r3, #1
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d1e4      	bne.n	8007e1a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e54:	223f      	movs	r2, #63	; 0x3f
 8007e56:	409a      	lsls	r2, r3
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007e6c:	2300      	movs	r3, #0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3710      	adds	r7, #16
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007e76:	b480      	push	{r7}
 8007e78:	b083      	sub	sp, #12
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	2b02      	cmp	r3, #2
 8007e88:	d004      	beq.n	8007e94 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2280      	movs	r2, #128	; 0x80
 8007e8e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	e00c      	b.n	8007eae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2205      	movs	r2, #5
 8007e98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f022 0201 	bic.w	r2, r2, #1
 8007eaa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007eac:	2300      	movs	r3, #0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	370c      	adds	r7, #12
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr

08007eba <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode). 
  * @param  Timeout       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b08a      	sub	sp, #40	; 0x28
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	60f8      	str	r0, [r7, #12]
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	607a      	str	r2, [r7, #4]
 8007ec6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK; 
 8007ec8:	2300      	movs	r3, #0
 8007eca:	77fb      	strb	r3, [r7, #31]
  uint32_t mask_cpltlevel;
  uint32_t tickstart = HAL_GetTick(); 
 8007ecc:	f7fe fca2 	bl	8006814 <HAL_GetTick>
 8007ed0:	61b8      	str	r0, [r7, #24]
  uint32_t tmpisr;
  
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	2b02      	cmp	r3, #2
 8007edc:	d008      	beq.n	8007ef0 <HAL_DMA_PollForTransfer+0x36>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2280      	movs	r2, #128	; 0x80
 8007ee2:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007eec:	2301      	movs	r3, #1
 8007eee:	e0bf      	b.n	8008070 <HAL_DMA_PollForTransfer+0x1b6>
  }

  /* Polling mode not supported in circular mode and double buffering mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d005      	beq.n	8007f0a <HAL_DMA_PollForTransfer+0x50>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f04:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007f06:	2301      	movs	r3, #1
 8007f08:	e0b2      	b.n	8008070 <HAL_DMA_PollForTransfer+0x1b6>
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8007f0a:	7afb      	ldrb	r3, [r7, #11]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d106      	bne.n	8007f1e <HAL_DMA_PollForTransfer+0x64>
  {
    /* Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f14:	2220      	movs	r2, #32
 8007f16:	fa02 f303 	lsl.w	r3, r2, r3
 8007f1a:	627b      	str	r3, [r7, #36]	; 0x24
 8007f1c:	e005      	b.n	8007f2a <HAL_DMA_PollForTransfer+0x70>
  }
  else
  {
    /* Half Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f22:	2210      	movs	r2, #16
 8007f24:	fa02 f303 	lsl.w	r3, r2, r3
 8007f28:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f2e:	617b      	str	r3, [r7, #20]
  tmpisr = regs->ISR;
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	623b      	str	r3, [r7, #32]
  
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 8007f36:	e05a      	b.n	8007fee <HAL_DMA_PollForTransfer+0x134>
  {
    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f3e:	d017      	beq.n	8007f70 <HAL_DMA_PollForTransfer+0xb6>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d007      	beq.n	8007f56 <HAL_DMA_PollForTransfer+0x9c>
 8007f46:	f7fe fc65 	bl	8006814 <HAL_GetTick>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	69bb      	ldr	r3, [r7, #24]
 8007f4e:	1ad3      	subs	r3, r2, r3
 8007f50:	687a      	ldr	r2, [r7, #4]
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d20c      	bcs.n	8007f70 <HAL_DMA_PollForTransfer+0xb6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2220      	movs	r2, #32
 8007f5a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007f6c:	2303      	movs	r3, #3
 8007f6e:	e07f      	b.n	8008070 <HAL_DMA_PollForTransfer+0x1b6>
      }
    }

    /* Get the ISR register value */
    tmpisr = regs->ISR;
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	623b      	str	r3, [r7, #32]

    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f7a:	2208      	movs	r2, #8
 8007f7c:	409a      	lsls	r2, r3
 8007f7e:	6a3b      	ldr	r3, [r7, #32]
 8007f80:	4013      	ands	r3, r2
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d00b      	beq.n	8007f9e <HAL_DMA_PollForTransfer+0xe4>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f8a:	f043 0201 	orr.w	r2, r3, #1
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f96:	2208      	movs	r2, #8
 8007f98:	409a      	lsls	r2, r3
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	409a      	lsls	r2, r3
 8007fa6:	6a3b      	ldr	r3, [r7, #32]
 8007fa8:	4013      	ands	r3, r2
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d00b      	beq.n	8007fc6 <HAL_DMA_PollForTransfer+0x10c>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fb2:	f043 0202 	orr.w	r2, r3, #2
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	409a      	lsls	r2, r3
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fca:	2204      	movs	r2, #4
 8007fcc:	409a      	lsls	r2, r3
 8007fce:	6a3b      	ldr	r3, [r7, #32]
 8007fd0:	4013      	ands	r3, r2
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00b      	beq.n	8007fee <HAL_DMA_PollForTransfer+0x134>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fda:	f043 0204 	orr.w	r2, r3, #4
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the Direct Mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fe6:	2204      	movs	r2, #4
 8007fe8:	409a      	lsls	r2, r3
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	609a      	str	r2, [r3, #8]
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 8007fee:	6a3a      	ldr	r2, [r7, #32]
 8007ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff2:	4013      	ands	r3, r2
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d105      	bne.n	8008004 <HAL_DMA_PollForTransfer+0x14a>
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ffc:	f003 0301 	and.w	r3, r3, #1
 8008000:	2b00      	cmp	r3, #0
 8008002:	d099      	beq.n	8007f38 <HAL_DMA_PollForTransfer+0x7e>
    }
  }
  
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008008:	2b00      	cmp	r3, #0
 800800a:	d018      	beq.n	800803e <HAL_DMA_PollForTransfer+0x184>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008010:	f003 0301 	and.w	r3, r3, #1
 8008014:	2b00      	cmp	r3, #0
 8008016:	d012      	beq.n	800803e <HAL_DMA_PollForTransfer+0x184>
    {
      HAL_DMA_Abort(hdma);
 8008018:	68f8      	ldr	r0, [r7, #12]
 800801a:	f7ff febc 	bl	8007d96 <HAL_DMA_Abort>
    
      /* Clear the half transfer and transfer complete flags */
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008022:	2230      	movs	r2, #48	; 0x30
 8008024:	409a      	lsls	r2, r3
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	609a      	str	r2, [r3, #8]
    
      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2201      	movs	r2, #1
 800802e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2200      	movs	r2, #0
 8008036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      return HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	e018      	b.n	8008070 <HAL_DMA_PollForTransfer+0x1b6>
   }
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 800803e:	7afb      	ldrb	r3, [r7, #11]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d10e      	bne.n	8008062 <HAL_DMA_PollForTransfer+0x1a8>
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008048:	2230      	movs	r2, #48	; 0x30
 800804a:	409a      	lsls	r2, r3
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	609a      	str	r2, [r3, #8]
    
    hdma->State = HAL_DMA_STATE_READY;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2201      	movs	r2, #1
 8008054:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2200      	movs	r2, #0
 800805c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8008060:	e005      	b.n	800806e <HAL_DMA_PollForTransfer+0x1b4>
  }
  else
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008066:	2210      	movs	r2, #16
 8008068:	409a      	lsls	r2, r3
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	609a      	str	r2, [r3, #8]
  }
  
  return status;
 800806e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008070:	4618      	mov	r0, r3
 8008072:	3728      	adds	r7, #40	; 0x28
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b086      	sub	sp, #24
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008080:	2300      	movs	r3, #0
 8008082:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008084:	4b8e      	ldr	r3, [pc, #568]	; (80082c0 <HAL_DMA_IRQHandler+0x248>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a8e      	ldr	r2, [pc, #568]	; (80082c4 <HAL_DMA_IRQHandler+0x24c>)
 800808a:	fba2 2303 	umull	r2, r3, r2, r3
 800808e:	0a9b      	lsrs	r3, r3, #10
 8008090:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008096:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080a2:	2208      	movs	r2, #8
 80080a4:	409a      	lsls	r2, r3
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	4013      	ands	r3, r2
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d01a      	beq.n	80080e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f003 0304 	and.w	r3, r3, #4
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d013      	beq.n	80080e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f022 0204 	bic.w	r2, r2, #4
 80080ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080d0:	2208      	movs	r2, #8
 80080d2:	409a      	lsls	r2, r3
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080dc:	f043 0201 	orr.w	r2, r3, #1
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080e8:	2201      	movs	r2, #1
 80080ea:	409a      	lsls	r2, r3
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	4013      	ands	r3, r2
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d012      	beq.n	800811a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	695b      	ldr	r3, [r3, #20]
 80080fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d00b      	beq.n	800811a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008106:	2201      	movs	r2, #1
 8008108:	409a      	lsls	r2, r3
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008112:	f043 0202 	orr.w	r2, r3, #2
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800811e:	2204      	movs	r2, #4
 8008120:	409a      	lsls	r2, r3
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	4013      	ands	r3, r2
 8008126:	2b00      	cmp	r3, #0
 8008128:	d012      	beq.n	8008150 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f003 0302 	and.w	r3, r3, #2
 8008134:	2b00      	cmp	r3, #0
 8008136:	d00b      	beq.n	8008150 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800813c:	2204      	movs	r2, #4
 800813e:	409a      	lsls	r2, r3
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008148:	f043 0204 	orr.w	r2, r3, #4
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008154:	2210      	movs	r2, #16
 8008156:	409a      	lsls	r2, r3
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	4013      	ands	r3, r2
 800815c:	2b00      	cmp	r3, #0
 800815e:	d043      	beq.n	80081e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f003 0308 	and.w	r3, r3, #8
 800816a:	2b00      	cmp	r3, #0
 800816c:	d03c      	beq.n	80081e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008172:	2210      	movs	r2, #16
 8008174:	409a      	lsls	r2, r3
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008184:	2b00      	cmp	r3, #0
 8008186:	d018      	beq.n	80081ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008192:	2b00      	cmp	r3, #0
 8008194:	d108      	bne.n	80081a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800819a:	2b00      	cmp	r3, #0
 800819c:	d024      	beq.n	80081e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	4798      	blx	r3
 80081a6:	e01f      	b.n	80081e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d01b      	beq.n	80081e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	4798      	blx	r3
 80081b8:	e016      	b.n	80081e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d107      	bne.n	80081d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f022 0208 	bic.w	r2, r2, #8
 80081d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d003      	beq.n	80081e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081ec:	2220      	movs	r2, #32
 80081ee:	409a      	lsls	r2, r3
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	4013      	ands	r3, r2
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	f000 808f 	beq.w	8008318 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f003 0310 	and.w	r3, r3, #16
 8008204:	2b00      	cmp	r3, #0
 8008206:	f000 8087 	beq.w	8008318 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800820e:	2220      	movs	r2, #32
 8008210:	409a      	lsls	r2, r3
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800821c:	b2db      	uxtb	r3, r3
 800821e:	2b05      	cmp	r3, #5
 8008220:	d136      	bne.n	8008290 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f022 0216 	bic.w	r2, r2, #22
 8008230:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	695a      	ldr	r2, [r3, #20]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008240:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008246:	2b00      	cmp	r3, #0
 8008248:	d103      	bne.n	8008252 <HAL_DMA_IRQHandler+0x1da>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800824e:	2b00      	cmp	r3, #0
 8008250:	d007      	beq.n	8008262 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f022 0208 	bic.w	r2, r2, #8
 8008260:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008266:	223f      	movs	r2, #63	; 0x3f
 8008268:	409a      	lsls	r2, r3
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2201      	movs	r2, #1
 8008272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2200      	movs	r2, #0
 800827a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008282:	2b00      	cmp	r3, #0
 8008284:	d07e      	beq.n	8008384 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	4798      	blx	r3
        }
        return;
 800828e:	e079      	b.n	8008384 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800829a:	2b00      	cmp	r3, #0
 800829c:	d01d      	beq.n	80082da <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d10d      	bne.n	80082c8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d031      	beq.n	8008318 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	4798      	blx	r3
 80082bc:	e02c      	b.n	8008318 <HAL_DMA_IRQHandler+0x2a0>
 80082be:	bf00      	nop
 80082c0:	20000058 	.word	0x20000058
 80082c4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d023      	beq.n	8008318 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	4798      	blx	r3
 80082d8:	e01e      	b.n	8008318 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d10f      	bne.n	8008308 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f022 0210 	bic.w	r2, r2, #16
 80082f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2200      	movs	r2, #0
 8008304:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800830c:	2b00      	cmp	r3, #0
 800830e:	d003      	beq.n	8008318 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800831c:	2b00      	cmp	r3, #0
 800831e:	d032      	beq.n	8008386 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008324:	f003 0301 	and.w	r3, r3, #1
 8008328:	2b00      	cmp	r3, #0
 800832a:	d022      	beq.n	8008372 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2205      	movs	r2, #5
 8008330:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f022 0201 	bic.w	r2, r2, #1
 8008342:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	3301      	adds	r3, #1
 8008348:	60bb      	str	r3, [r7, #8]
 800834a:	697a      	ldr	r2, [r7, #20]
 800834c:	429a      	cmp	r2, r3
 800834e:	d307      	bcc.n	8008360 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f003 0301 	and.w	r3, r3, #1
 800835a:	2b00      	cmp	r3, #0
 800835c:	d1f2      	bne.n	8008344 <HAL_DMA_IRQHandler+0x2cc>
 800835e:	e000      	b.n	8008362 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008360:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2201      	movs	r2, #1
 8008366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008376:	2b00      	cmp	r3, #0
 8008378:	d005      	beq.n	8008386 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	4798      	blx	r3
 8008382:	e000      	b.n	8008386 <HAL_DMA_IRQHandler+0x30e>
        return;
 8008384:	bf00      	nop
    }
  }
}
 8008386:	3718      	adds	r7, #24
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 800838c:	b480      	push	{r7}
 800838e:	b087      	sub	sp, #28
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	460b      	mov	r3, r1
 8008396:	607a      	str	r2, [r7, #4]
 8008398:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 800839a:	2300      	movs	r3, #0
 800839c:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d101      	bne.n	80083ac <HAL_DMA_RegisterCallback+0x20>
 80083a8:	2302      	movs	r3, #2
 80083aa:	e03c      	b.n	8008426 <HAL_DMA_RegisterCallback+0x9a>
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2201      	movs	r2, #1
 80083b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d129      	bne.n	8008414 <HAL_DMA_RegisterCallback+0x88>
  {
    switch (CallbackID)
 80083c0:	7afb      	ldrb	r3, [r7, #11]
 80083c2:	2b05      	cmp	r3, #5
 80083c4:	d829      	bhi.n	800841a <HAL_DMA_RegisterCallback+0x8e>
 80083c6:	a201      	add	r2, pc, #4	; (adr r2, 80083cc <HAL_DMA_RegisterCallback+0x40>)
 80083c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083cc:	080083e5 	.word	0x080083e5
 80083d0:	080083ed 	.word	0x080083ed
 80083d4:	080083f5 	.word	0x080083f5
 80083d8:	080083fd 	.word	0x080083fd
 80083dc:	08008405 	.word	0x08008405
 80083e0:	0800840d 	.word	0x0800840d
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 80083ea:	e017      	b.n	800841c <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80083f2:	e013      	b.n	800841c <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 80083fa:	e00f      	b.n	800841c <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 8008402:	e00b      	b.n	800841c <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 800840a:	e007      	b.n	800841c <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008412:	e003      	b.n	800841c <HAL_DMA_RegisterCallback+0x90>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	75fb      	strb	r3, [r7, #23]
 8008418:	e000      	b.n	800841c <HAL_DMA_RegisterCallback+0x90>
      break;
 800841a:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2200      	movs	r2, #0
 8008420:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 8008424:	7dfb      	ldrb	r3, [r7, #23]
}
 8008426:	4618      	mov	r0, r3
 8008428:	371c      	adds	r7, #28
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr

08008432 <HAL_DMA_UnRegisterCallback>:
  * @param  CallbackID           User Callback identifer
  *                               a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */              
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
 8008432:	b480      	push	{r7}
 8008434:	b085      	sub	sp, #20
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
 800843a:	460b      	mov	r3, r1
 800843c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800843e:	2300      	movs	r3, #0
 8008440:	73fb      	strb	r3, [r7, #15]
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008448:	2b01      	cmp	r3, #1
 800844a:	d101      	bne.n	8008450 <HAL_DMA_UnRegisterCallback+0x1e>
 800844c:	2302      	movs	r3, #2
 800844e:	e052      	b.n	80084f6 <HAL_DMA_UnRegisterCallback+0xc4>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2201      	movs	r2, #1
 8008454:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800845e:	b2db      	uxtb	r3, r3
 8008460:	2b01      	cmp	r3, #1
 8008462:	d141      	bne.n	80084e8 <HAL_DMA_UnRegisterCallback+0xb6>
  {
    switch (CallbackID)
 8008464:	78fb      	ldrb	r3, [r7, #3]
 8008466:	2b06      	cmp	r3, #6
 8008468:	d83b      	bhi.n	80084e2 <HAL_DMA_UnRegisterCallback+0xb0>
 800846a:	a201      	add	r2, pc, #4	; (adr r2, 8008470 <HAL_DMA_UnRegisterCallback+0x3e>)
 800846c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008470:	0800848d 	.word	0x0800848d
 8008474:	08008495 	.word	0x08008495
 8008478:	0800849d 	.word	0x0800849d
 800847c:	080084a5 	.word	0x080084a5
 8008480:	080084ad 	.word	0x080084ad
 8008484:	080084b5 	.word	0x080084b5
 8008488:	080084bd 	.word	0x080084bd
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = NULL;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8008492:	e02b      	b.n	80084ec <HAL_DMA_UnRegisterCallback+0xba>
      
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = NULL;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800849a:	e027      	b.n	80084ec <HAL_DMA_UnRegisterCallback+0xba>
      
    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = NULL;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 80084a2:	e023      	b.n	80084ec <HAL_DMA_UnRegisterCallback+0xba>
      
    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = NULL;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 80084aa:	e01f      	b.n	80084ec <HAL_DMA_UnRegisterCallback+0xba>
      
    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = NULL;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2200      	movs	r2, #0
 80084b0:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 80084b2:	e01b      	b.n	80084ec <HAL_DMA_UnRegisterCallback+0xba>
      
    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = NULL;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
 80084ba:	e017      	b.n	80084ec <HAL_DMA_UnRegisterCallback+0xba>
      
    case   HAL_DMA_XFER_ALL_CB_ID:
      hdma->XferCpltCallback = NULL;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	63da      	str	r2, [r3, #60]	; 0x3c
      hdma->XferHalfCpltCallback = NULL;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2200      	movs	r2, #0
 80084c6:	641a      	str	r2, [r3, #64]	; 0x40
      hdma->XferM1CpltCallback = NULL;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	645a      	str	r2, [r3, #68]	; 0x44
      hdma->XferM1HalfCpltCallback = NULL;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2200      	movs	r2, #0
 80084d2:	649a      	str	r2, [r3, #72]	; 0x48
      hdma->XferErrorCallback = NULL;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2200      	movs	r2, #0
 80084d8:	64da      	str	r2, [r3, #76]	; 0x4c
      hdma->XferAbortCallback = NULL;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2200      	movs	r2, #0
 80084de:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
 80084e0:	e004      	b.n	80084ec <HAL_DMA_UnRegisterCallback+0xba>
      
    default:
      status = HAL_ERROR;
 80084e2:	2301      	movs	r3, #1
 80084e4:	73fb      	strb	r3, [r7, #15]
      break;
 80084e6:	e001      	b.n	80084ec <HAL_DMA_UnRegisterCallback+0xba>
    }
  }
  else
  {
    status = HAL_ERROR;
 80084e8:	2301      	movs	r3, #1
 80084ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 80084f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3714      	adds	r7, #20
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr

08008502 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8008502:	b480      	push	{r7}
 8008504:	b083      	sub	sp, #12
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008510:	b2db      	uxtb	r3, r3
}
 8008512:	4618      	mov	r0, r3
 8008514:	370c      	adds	r7, #12
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr

0800851e <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800851e:	b480      	push	{r7}
 8008520:	b083      	sub	sp, #12
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800852a:	4618      	mov	r0, r3
 800852c:	370c      	adds	r7, #12
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr

08008536 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008536:	b480      	push	{r7}
 8008538:	b085      	sub	sp, #20
 800853a:	af00      	add	r7, sp, #0
 800853c:	60f8      	str	r0, [r7, #12]
 800853e:	60b9      	str	r1, [r7, #8]
 8008540:	607a      	str	r2, [r7, #4]
 8008542:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008552:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	683a      	ldr	r2, [r7, #0]
 800855a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	2b40      	cmp	r3, #64	; 0x40
 8008562:	d108      	bne.n	8008576 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	68ba      	ldr	r2, [r7, #8]
 8008572:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008574:	e007      	b.n	8008586 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	68ba      	ldr	r2, [r7, #8]
 800857c:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	60da      	str	r2, [r3, #12]
}
 8008586:	bf00      	nop
 8008588:	3714      	adds	r7, #20
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr

08008592 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008592:	b480      	push	{r7}
 8008594:	b085      	sub	sp, #20
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	b2db      	uxtb	r3, r3
 80085a0:	3b10      	subs	r3, #16
 80085a2:	4a14      	ldr	r2, [pc, #80]	; (80085f4 <DMA_CalcBaseAndBitshift+0x62>)
 80085a4:	fba2 2303 	umull	r2, r3, r2, r3
 80085a8:	091b      	lsrs	r3, r3, #4
 80085aa:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80085ac:	4a12      	ldr	r2, [pc, #72]	; (80085f8 <DMA_CalcBaseAndBitshift+0x66>)
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	4413      	add	r3, r2
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	461a      	mov	r2, r3
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2b03      	cmp	r3, #3
 80085be:	d909      	bls.n	80085d4 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80085c8:	f023 0303 	bic.w	r3, r3, #3
 80085cc:	1d1a      	adds	r2, r3, #4
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	659a      	str	r2, [r3, #88]	; 0x58
 80085d2:	e007      	b.n	80085e4 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80085dc:	f023 0303 	bic.w	r3, r3, #3
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3714      	adds	r7, #20
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr
 80085f4:	aaaaaaab 	.word	0xaaaaaaab
 80085f8:	08051f14 	.word	0x08051f14

080085fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b085      	sub	sp, #20
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008604:	2300      	movs	r3, #0
 8008606:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800860c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	699b      	ldr	r3, [r3, #24]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d11f      	bne.n	8008656 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	2b03      	cmp	r3, #3
 800861a:	d856      	bhi.n	80086ca <DMA_CheckFifoParam+0xce>
 800861c:	a201      	add	r2, pc, #4	; (adr r2, 8008624 <DMA_CheckFifoParam+0x28>)
 800861e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008622:	bf00      	nop
 8008624:	08008635 	.word	0x08008635
 8008628:	08008647 	.word	0x08008647
 800862c:	08008635 	.word	0x08008635
 8008630:	080086cb 	.word	0x080086cb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008638:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800863c:	2b00      	cmp	r3, #0
 800863e:	d046      	beq.n	80086ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008640:	2301      	movs	r3, #1
 8008642:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008644:	e043      	b.n	80086ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800864a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800864e:	d140      	bne.n	80086d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008650:	2301      	movs	r3, #1
 8008652:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008654:	e03d      	b.n	80086d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	699b      	ldr	r3, [r3, #24]
 800865a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800865e:	d121      	bne.n	80086a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	2b03      	cmp	r3, #3
 8008664:	d837      	bhi.n	80086d6 <DMA_CheckFifoParam+0xda>
 8008666:	a201      	add	r2, pc, #4	; (adr r2, 800866c <DMA_CheckFifoParam+0x70>)
 8008668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800866c:	0800867d 	.word	0x0800867d
 8008670:	08008683 	.word	0x08008683
 8008674:	0800867d 	.word	0x0800867d
 8008678:	08008695 	.word	0x08008695
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800867c:	2301      	movs	r3, #1
 800867e:	73fb      	strb	r3, [r7, #15]
      break;
 8008680:	e030      	b.n	80086e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008686:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800868a:	2b00      	cmp	r3, #0
 800868c:	d025      	beq.n	80086da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800868e:	2301      	movs	r3, #1
 8008690:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008692:	e022      	b.n	80086da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008698:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800869c:	d11f      	bne.n	80086de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800869e:	2301      	movs	r3, #1
 80086a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80086a2:	e01c      	b.n	80086de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	2b02      	cmp	r3, #2
 80086a8:	d903      	bls.n	80086b2 <DMA_CheckFifoParam+0xb6>
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	2b03      	cmp	r3, #3
 80086ae:	d003      	beq.n	80086b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80086b0:	e018      	b.n	80086e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	73fb      	strb	r3, [r7, #15]
      break;
 80086b6:	e015      	b.n	80086e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d00e      	beq.n	80086e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80086c4:	2301      	movs	r3, #1
 80086c6:	73fb      	strb	r3, [r7, #15]
      break;
 80086c8:	e00b      	b.n	80086e2 <DMA_CheckFifoParam+0xe6>
      break;
 80086ca:	bf00      	nop
 80086cc:	e00a      	b.n	80086e4 <DMA_CheckFifoParam+0xe8>
      break;
 80086ce:	bf00      	nop
 80086d0:	e008      	b.n	80086e4 <DMA_CheckFifoParam+0xe8>
      break;
 80086d2:	bf00      	nop
 80086d4:	e006      	b.n	80086e4 <DMA_CheckFifoParam+0xe8>
      break;
 80086d6:	bf00      	nop
 80086d8:	e004      	b.n	80086e4 <DMA_CheckFifoParam+0xe8>
      break;
 80086da:	bf00      	nop
 80086dc:	e002      	b.n	80086e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80086de:	bf00      	nop
 80086e0:	e000      	b.n	80086e4 <DMA_CheckFifoParam+0xe8>
      break;
 80086e2:	bf00      	nop
    }
  } 
  
  return status; 
 80086e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3714      	adds	r7, #20
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr

080086f2 <HAL_DMAEx_MultiBufferStart>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 80086f2:	b580      	push	{r7, lr}
 80086f4:	b086      	sub	sp, #24
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	60f8      	str	r0, [r7, #12]
 80086fa:	60b9      	str	r1, [r7, #8]
 80086fc:	607a      	str	r2, [r7, #4]
 80086fe:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008700:	2300      	movs	r3, #0
 8008702:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	2b80      	cmp	r3, #128	; 0x80
 800870a:	d106      	bne.n	800871a <HAL_DMAEx_MultiBufferStart+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008712:	655a      	str	r2, [r3, #84]	; 0x54
    status = HAL_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	75fb      	strb	r3, [r7, #23]
 8008718:	e031      	b.n	800877e <HAL_DMAEx_MultiBufferStart+0x8c>
  }
  else
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008720:	2b01      	cmp	r3, #1
 8008722:	d101      	bne.n	8008728 <HAL_DMAEx_MultiBufferStart+0x36>
 8008724:	2302      	movs	r3, #2
 8008726:	e02b      	b.n	8008780 <HAL_DMAEx_MultiBufferStart+0x8e>
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2201      	movs	r2, #1
 800872c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    if(HAL_DMA_STATE_READY == hdma->State)
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008736:	b2db      	uxtb	r3, r3
 8008738:	2b01      	cmp	r3, #1
 800873a:	d11e      	bne.n	800877a <HAL_DMAEx_MultiBufferStart+0x88>
    {
      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_BUSY; 
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2202      	movs	r2, #2
 8008740:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      /* Enable the double buffer mode */
      hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008752:	601a      	str	r2, [r3, #0]
      
      /* Configure DMA Stream destination address */
      hdma->Instance->M1AR = SecondMemAddress;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	683a      	ldr	r2, [r7, #0]
 800875a:	611a      	str	r2, [r3, #16]
      
      /* Configure the source, destination address and the data length */
      DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800875c:	6a3b      	ldr	r3, [r7, #32]
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	68b9      	ldr	r1, [r7, #8]
 8008762:	68f8      	ldr	r0, [r7, #12]
 8008764:	f001 f972 	bl	8009a4c <DMA_MultiBufferSetConfig>
      
      /* Enable the peripheral */
      __HAL_DMA_ENABLE(hdma);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f042 0201 	orr.w	r2, r2, #1
 8008776:	601a      	str	r2, [r3, #0]
 8008778:	e001      	b.n	800877e <HAL_DMAEx_MultiBufferStart+0x8c>
    }
    else
    {
      /* Return error status */
      status = HAL_BUSY;
 800877a:	2302      	movs	r3, #2
 800877c:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 800877e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008780:	4618      	mov	r0, r3
 8008782:	3718      	adds	r7, #24
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b086      	sub	sp, #24
 800878c:	af00      	add	r7, sp, #0
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	60b9      	str	r1, [r7, #8]
 8008792:	607a      	str	r2, [r7, #4]
 8008794:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008796:	2300      	movs	r3, #0
 8008798:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	689b      	ldr	r3, [r3, #8]
 800879e:	2b80      	cmp	r3, #128	; 0x80
 80087a0:	d106      	bne.n	80087b0 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80087a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	f001 b911 	b.w	80099d2 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d007      	beq.n	80087c8 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d003      	beq.n	80087c8 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d105      	bne.n	80087d4 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2240      	movs	r2, #64	; 0x40
 80087cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80087ce:	2301      	movs	r3, #1
 80087d0:	f001 b8ff 	b.w	80099d2 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d102      	bne.n	80087e4 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 80087de:	2302      	movs	r3, #2
 80087e0:	f001 b8f7 	b.w	80099d2 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2201      	movs	r2, #1
 80087e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	f041 80e5 	bne.w	80099c4 <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2202      	movs	r2, #2
 80087fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2200      	movs	r2, #0
 8008806:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	681a      	ldr	r2, [r3, #0]
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008816:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	683a      	ldr	r2, [r7, #0]
 800881e:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8008820:	6a3b      	ldr	r3, [r7, #32]
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	68b9      	ldr	r1, [r7, #8]
 8008826:	68f8      	ldr	r0, [r7, #12]
 8008828:	f001 f910 	bl	8009a4c <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	461a      	mov	r2, r3
 8008832:	4b8d      	ldr	r3, [pc, #564]	; (8008a68 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8008834:	429a      	cmp	r2, r3
 8008836:	d960      	bls.n	80088fa <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a8b      	ldr	r2, [pc, #556]	; (8008a6c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d057      	beq.n	80088f2 <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a8a      	ldr	r2, [pc, #552]	; (8008a70 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d050      	beq.n	80088ee <HAL_DMAEx_MultiBufferStart_IT+0x166>
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a88      	ldr	r2, [pc, #544]	; (8008a74 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d049      	beq.n	80088ea <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a87      	ldr	r2, [pc, #540]	; (8008a78 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d042      	beq.n	80088e6 <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a85      	ldr	r2, [pc, #532]	; (8008a7c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d03a      	beq.n	80088e0 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a84      	ldr	r2, [pc, #528]	; (8008a80 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d032      	beq.n	80088da <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a82      	ldr	r2, [pc, #520]	; (8008a84 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d02a      	beq.n	80088d4 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4a81      	ldr	r2, [pc, #516]	; (8008a88 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d022      	beq.n	80088ce <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a7f      	ldr	r2, [pc, #508]	; (8008a8c <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d01a      	beq.n	80088c8 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a7e      	ldr	r2, [pc, #504]	; (8008a90 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d012      	beq.n	80088c2 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a7c      	ldr	r2, [pc, #496]	; (8008a94 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d00a      	beq.n	80088bc <HAL_DMAEx_MultiBufferStart_IT+0x134>
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a7b      	ldr	r2, [pc, #492]	; (8008a98 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d102      	bne.n	80088b6 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 80088b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80088b4:	e01e      	b.n	80088f4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80088b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80088ba:	e01b      	b.n	80088f4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80088bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80088c0:	e018      	b.n	80088f4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80088c2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80088c6:	e015      	b.n	80088f4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80088c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80088cc:	e012      	b.n	80088f4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80088ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80088d2:	e00f      	b.n	80088f4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80088d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80088d8:	e00c      	b.n	80088f4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80088da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80088de:	e009      	b.n	80088f4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80088e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80088e4:	e006      	b.n	80088f4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80088e6:	2320      	movs	r3, #32
 80088e8:	e004      	b.n	80088f4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80088ea:	2320      	movs	r3, #32
 80088ec:	e002      	b.n	80088f4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80088ee:	2320      	movs	r3, #32
 80088f0:	e000      	b.n	80088f4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80088f2:	2320      	movs	r3, #32
 80088f4:	4a69      	ldr	r2, [pc, #420]	; (8008a9c <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80088f6:	60d3      	str	r3, [r2, #12]
 80088f8:	e14f      	b.n	8008b9a <HAL_DMAEx_MultiBufferStart_IT+0x412>
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	461a      	mov	r2, r3
 8008900:	4b67      	ldr	r3, [pc, #412]	; (8008aa0 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8008902:	429a      	cmp	r2, r3
 8008904:	d960      	bls.n	80089c8 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a58      	ldr	r2, [pc, #352]	; (8008a6c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d057      	beq.n	80089c0 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a56      	ldr	r2, [pc, #344]	; (8008a70 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d050      	beq.n	80089bc <HAL_DMAEx_MultiBufferStart_IT+0x234>
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a55      	ldr	r2, [pc, #340]	; (8008a74 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d049      	beq.n	80089b8 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a53      	ldr	r2, [pc, #332]	; (8008a78 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d042      	beq.n	80089b4 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a52      	ldr	r2, [pc, #328]	; (8008a7c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d03a      	beq.n	80089ae <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a50      	ldr	r2, [pc, #320]	; (8008a80 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d032      	beq.n	80089a8 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4a4f      	ldr	r2, [pc, #316]	; (8008a84 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d02a      	beq.n	80089a2 <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a4d      	ldr	r2, [pc, #308]	; (8008a88 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d022      	beq.n	800899c <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a4c      	ldr	r2, [pc, #304]	; (8008a8c <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d01a      	beq.n	8008996 <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a4a      	ldr	r2, [pc, #296]	; (8008a90 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d012      	beq.n	8008990 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a49      	ldr	r2, [pc, #292]	; (8008a94 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d00a      	beq.n	800898a <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a47      	ldr	r2, [pc, #284]	; (8008a98 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d102      	bne.n	8008984 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 800897e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008982:	e01e      	b.n	80089c2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8008984:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008988:	e01b      	b.n	80089c2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800898a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800898e:	e018      	b.n	80089c2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8008990:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008994:	e015      	b.n	80089c2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8008996:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800899a:	e012      	b.n	80089c2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800899c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80089a0:	e00f      	b.n	80089c2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80089a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80089a6:	e00c      	b.n	80089c2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80089a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80089ac:	e009      	b.n	80089c2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80089ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80089b2:	e006      	b.n	80089c2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80089b4:	2320      	movs	r3, #32
 80089b6:	e004      	b.n	80089c2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80089b8:	2320      	movs	r3, #32
 80089ba:	e002      	b.n	80089c2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80089bc:	2320      	movs	r3, #32
 80089be:	e000      	b.n	80089c2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80089c0:	2320      	movs	r3, #32
 80089c2:	4a36      	ldr	r2, [pc, #216]	; (8008a9c <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80089c4:	6093      	str	r3, [r2, #8]
 80089c6:	e0e8      	b.n	8008b9a <HAL_DMAEx_MultiBufferStart_IT+0x412>
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	461a      	mov	r2, r3
 80089ce:	4b35      	ldr	r3, [pc, #212]	; (8008aa4 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 80089d0:	429a      	cmp	r2, r3
 80089d2:	f240 8082 	bls.w	8008ada <HAL_DMAEx_MultiBufferStart_IT+0x352>
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a24      	ldr	r2, [pc, #144]	; (8008a6c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d078      	beq.n	8008ad2 <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a22      	ldr	r2, [pc, #136]	; (8008a70 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d071      	beq.n	8008ace <HAL_DMAEx_MultiBufferStart_IT+0x346>
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a21      	ldr	r2, [pc, #132]	; (8008a74 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d06a      	beq.n	8008aca <HAL_DMAEx_MultiBufferStart_IT+0x342>
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a1f      	ldr	r2, [pc, #124]	; (8008a78 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d063      	beq.n	8008ac6 <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a1e      	ldr	r2, [pc, #120]	; (8008a7c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d05b      	beq.n	8008ac0 <HAL_DMAEx_MultiBufferStart_IT+0x338>
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a1c      	ldr	r2, [pc, #112]	; (8008a80 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d053      	beq.n	8008aba <HAL_DMAEx_MultiBufferStart_IT+0x332>
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a1b      	ldr	r2, [pc, #108]	; (8008a84 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d04b      	beq.n	8008ab4 <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a19      	ldr	r2, [pc, #100]	; (8008a88 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d043      	beq.n	8008aae <HAL_DMAEx_MultiBufferStart_IT+0x326>
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a18      	ldr	r2, [pc, #96]	; (8008a8c <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d03b      	beq.n	8008aa8 <HAL_DMAEx_MultiBufferStart_IT+0x320>
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a16      	ldr	r2, [pc, #88]	; (8008a90 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d012      	beq.n	8008a60 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a15      	ldr	r2, [pc, #84]	; (8008a94 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d00a      	beq.n	8008a5a <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a13      	ldr	r2, [pc, #76]	; (8008a98 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d102      	bne.n	8008a54 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 8008a4e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008a52:	e03f      	b.n	8008ad4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008a54:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008a58:	e03c      	b.n	8008ad4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008a5a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008a5e:	e039      	b.n	8008ad4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008a60:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008a64:	e036      	b.n	8008ad4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008a66:	bf00      	nop
 8008a68:	40026458 	.word	0x40026458
 8008a6c:	40026010 	.word	0x40026010
 8008a70:	40026410 	.word	0x40026410
 8008a74:	40026070 	.word	0x40026070
 8008a78:	40026470 	.word	0x40026470
 8008a7c:	40026028 	.word	0x40026028
 8008a80:	40026428 	.word	0x40026428
 8008a84:	40026088 	.word	0x40026088
 8008a88:	40026488 	.word	0x40026488
 8008a8c:	40026040 	.word	0x40026040
 8008a90:	40026440 	.word	0x40026440
 8008a94:	400260a0 	.word	0x400260a0
 8008a98:	400264a0 	.word	0x400264a0
 8008a9c:	40026400 	.word	0x40026400
 8008aa0:	400260b8 	.word	0x400260b8
 8008aa4:	40026058 	.word	0x40026058
 8008aa8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008aac:	e012      	b.n	8008ad4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008aae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ab2:	e00f      	b.n	8008ad4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008ab4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ab8:	e00c      	b.n	8008ad4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008aba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008abe:	e009      	b.n	8008ad4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008ac0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ac4:	e006      	b.n	8008ad4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008ac6:	2320      	movs	r3, #32
 8008ac8:	e004      	b.n	8008ad4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008aca:	2320      	movs	r3, #32
 8008acc:	e002      	b.n	8008ad4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008ace:	2320      	movs	r3, #32
 8008ad0:	e000      	b.n	8008ad4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008ad2:	2320      	movs	r3, #32
 8008ad4:	4a8c      	ldr	r2, [pc, #560]	; (8008d08 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8008ad6:	60d3      	str	r3, [r2, #12]
 8008ad8:	e05f      	b.n	8008b9a <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a8b      	ldr	r2, [pc, #556]	; (8008d0c <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d057      	beq.n	8008b94 <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a89      	ldr	r2, [pc, #548]	; (8008d10 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d050      	beq.n	8008b90 <HAL_DMAEx_MultiBufferStart_IT+0x408>
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a88      	ldr	r2, [pc, #544]	; (8008d14 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d049      	beq.n	8008b8c <HAL_DMAEx_MultiBufferStart_IT+0x404>
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a86      	ldr	r2, [pc, #536]	; (8008d18 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d042      	beq.n	8008b88 <HAL_DMAEx_MultiBufferStart_IT+0x400>
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a85      	ldr	r2, [pc, #532]	; (8008d1c <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d03a      	beq.n	8008b82 <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a83      	ldr	r2, [pc, #524]	; (8008d20 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d032      	beq.n	8008b7c <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a82      	ldr	r2, [pc, #520]	; (8008d24 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d02a      	beq.n	8008b76 <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a80      	ldr	r2, [pc, #512]	; (8008d28 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d022      	beq.n	8008b70 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a7f      	ldr	r2, [pc, #508]	; (8008d2c <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d01a      	beq.n	8008b6a <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a7d      	ldr	r2, [pc, #500]	; (8008d30 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d012      	beq.n	8008b64 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a7c      	ldr	r2, [pc, #496]	; (8008d34 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d00a      	beq.n	8008b5e <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a7a      	ldr	r2, [pc, #488]	; (8008d38 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d102      	bne.n	8008b58 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 8008b52:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008b56:	e01e      	b.n	8008b96 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008b58:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008b5c:	e01b      	b.n	8008b96 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008b5e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008b62:	e018      	b.n	8008b96 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008b64:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008b68:	e015      	b.n	8008b96 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008b6a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008b6e:	e012      	b.n	8008b96 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008b70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b74:	e00f      	b.n	8008b96 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008b76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b7a:	e00c      	b.n	8008b96 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008b7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b80:	e009      	b.n	8008b96 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008b82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b86:	e006      	b.n	8008b96 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008b88:	2320      	movs	r3, #32
 8008b8a:	e004      	b.n	8008b96 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008b8c:	2320      	movs	r3, #32
 8008b8e:	e002      	b.n	8008b96 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008b90:	2320      	movs	r3, #32
 8008b92:	e000      	b.n	8008b96 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008b94:	2320      	movs	r3, #32
 8008b96:	4a5c      	ldr	r2, [pc, #368]	; (8008d08 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8008b98:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	4b66      	ldr	r3, [pc, #408]	; (8008d3c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	d960      	bls.n	8008c68 <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a58      	ldr	r2, [pc, #352]	; (8008d0c <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d057      	beq.n	8008c60 <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a56      	ldr	r2, [pc, #344]	; (8008d10 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d050      	beq.n	8008c5c <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a55      	ldr	r2, [pc, #340]	; (8008d14 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d049      	beq.n	8008c58 <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a53      	ldr	r2, [pc, #332]	; (8008d18 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d042      	beq.n	8008c54 <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a52      	ldr	r2, [pc, #328]	; (8008d1c <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d03a      	beq.n	8008c4e <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a50      	ldr	r2, [pc, #320]	; (8008d20 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d032      	beq.n	8008c48 <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a4f      	ldr	r2, [pc, #316]	; (8008d24 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d02a      	beq.n	8008c42 <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a4d      	ldr	r2, [pc, #308]	; (8008d28 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d022      	beq.n	8008c3c <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a4c      	ldr	r2, [pc, #304]	; (8008d2c <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d01a      	beq.n	8008c36 <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4a4a      	ldr	r2, [pc, #296]	; (8008d30 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d012      	beq.n	8008c30 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4a49      	ldr	r2, [pc, #292]	; (8008d34 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d00a      	beq.n	8008c2a <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a47      	ldr	r2, [pc, #284]	; (8008d38 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d102      	bne.n	8008c24 <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 8008c1e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008c22:	e01e      	b.n	8008c62 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008c24:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008c28:	e01b      	b.n	8008c62 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008c2a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008c2e:	e018      	b.n	8008c62 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008c30:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008c34:	e015      	b.n	8008c62 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008c36:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008c3a:	e012      	b.n	8008c62 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008c3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c40:	e00f      	b.n	8008c62 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008c42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c46:	e00c      	b.n	8008c62 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008c48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c4c:	e009      	b.n	8008c62 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008c4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c52:	e006      	b.n	8008c62 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008c54:	2310      	movs	r3, #16
 8008c56:	e004      	b.n	8008c62 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008c58:	2310      	movs	r3, #16
 8008c5a:	e002      	b.n	8008c62 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008c5c:	2310      	movs	r3, #16
 8008c5e:	e000      	b.n	8008c62 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008c60:	2310      	movs	r3, #16
 8008c62:	4a37      	ldr	r2, [pc, #220]	; (8008d40 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8008c64:	60d3      	str	r3, [r2, #12]
 8008c66:	e14f      	b.n	8008f08 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	4b35      	ldr	r3, [pc, #212]	; (8008d44 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8008c70:	429a      	cmp	r2, r3
 8008c72:	f240 8082 	bls.w	8008d7a <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a24      	ldr	r2, [pc, #144]	; (8008d0c <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d078      	beq.n	8008d72 <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a22      	ldr	r2, [pc, #136]	; (8008d10 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d071      	beq.n	8008d6e <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4a21      	ldr	r2, [pc, #132]	; (8008d14 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d06a      	beq.n	8008d6a <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a1f      	ldr	r2, [pc, #124]	; (8008d18 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d063      	beq.n	8008d66 <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a1e      	ldr	r2, [pc, #120]	; (8008d1c <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d05b      	beq.n	8008d60 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a1c      	ldr	r2, [pc, #112]	; (8008d20 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d053      	beq.n	8008d5a <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a1b      	ldr	r2, [pc, #108]	; (8008d24 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d04b      	beq.n	8008d54 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a19      	ldr	r2, [pc, #100]	; (8008d28 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d043      	beq.n	8008d4e <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a18      	ldr	r2, [pc, #96]	; (8008d2c <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d03b      	beq.n	8008d48 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a16      	ldr	r2, [pc, #88]	; (8008d30 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d012      	beq.n	8008d00 <HAL_DMAEx_MultiBufferStart_IT+0x578>
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a15      	ldr	r2, [pc, #84]	; (8008d34 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d00a      	beq.n	8008cfa <HAL_DMAEx_MultiBufferStart_IT+0x572>
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a13      	ldr	r2, [pc, #76]	; (8008d38 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d102      	bne.n	8008cf4 <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 8008cee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008cf2:	e03f      	b.n	8008d74 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008cf4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008cf8:	e03c      	b.n	8008d74 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008cfa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008cfe:	e039      	b.n	8008d74 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008d00:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008d04:	e036      	b.n	8008d74 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008d06:	bf00      	nop
 8008d08:	40026000 	.word	0x40026000
 8008d0c:	40026010 	.word	0x40026010
 8008d10:	40026410 	.word	0x40026410
 8008d14:	40026070 	.word	0x40026070
 8008d18:	40026470 	.word	0x40026470
 8008d1c:	40026028 	.word	0x40026028
 8008d20:	40026428 	.word	0x40026428
 8008d24:	40026088 	.word	0x40026088
 8008d28:	40026488 	.word	0x40026488
 8008d2c:	40026040 	.word	0x40026040
 8008d30:	40026440 	.word	0x40026440
 8008d34:	400260a0 	.word	0x400260a0
 8008d38:	400264a0 	.word	0x400264a0
 8008d3c:	40026458 	.word	0x40026458
 8008d40:	40026400 	.word	0x40026400
 8008d44:	400260b8 	.word	0x400260b8
 8008d48:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008d4c:	e012      	b.n	8008d74 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008d4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d52:	e00f      	b.n	8008d74 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008d54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d58:	e00c      	b.n	8008d74 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008d5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d5e:	e009      	b.n	8008d74 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008d60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d64:	e006      	b.n	8008d74 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008d66:	2310      	movs	r3, #16
 8008d68:	e004      	b.n	8008d74 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008d6a:	2310      	movs	r3, #16
 8008d6c:	e002      	b.n	8008d74 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008d6e:	2310      	movs	r3, #16
 8008d70:	e000      	b.n	8008d74 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008d72:	2310      	movs	r3, #16
 8008d74:	4a8c      	ldr	r2, [pc, #560]	; (8008fa8 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8008d76:	6093      	str	r3, [r2, #8]
 8008d78:	e0c6      	b.n	8008f08 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	461a      	mov	r2, r3
 8008d80:	4b8a      	ldr	r3, [pc, #552]	; (8008fac <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d960      	bls.n	8008e48 <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a89      	ldr	r2, [pc, #548]	; (8008fb0 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d057      	beq.n	8008e40 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a87      	ldr	r2, [pc, #540]	; (8008fb4 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d050      	beq.n	8008e3c <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a86      	ldr	r2, [pc, #536]	; (8008fb8 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d049      	beq.n	8008e38 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a84      	ldr	r2, [pc, #528]	; (8008fbc <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d042      	beq.n	8008e34 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4a83      	ldr	r2, [pc, #524]	; (8008fc0 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d03a      	beq.n	8008e2e <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a81      	ldr	r2, [pc, #516]	; (8008fc4 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d032      	beq.n	8008e28 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a80      	ldr	r2, [pc, #512]	; (8008fc8 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d02a      	beq.n	8008e22 <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a7e      	ldr	r2, [pc, #504]	; (8008fcc <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d022      	beq.n	8008e1c <HAL_DMAEx_MultiBufferStart_IT+0x694>
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4a7d      	ldr	r2, [pc, #500]	; (8008fd0 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d01a      	beq.n	8008e16 <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a7b      	ldr	r2, [pc, #492]	; (8008fd4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d012      	beq.n	8008e10 <HAL_DMAEx_MultiBufferStart_IT+0x688>
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4a7a      	ldr	r2, [pc, #488]	; (8008fd8 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d00a      	beq.n	8008e0a <HAL_DMAEx_MultiBufferStart_IT+0x682>
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4a78      	ldr	r2, [pc, #480]	; (8008fdc <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d102      	bne.n	8008e04 <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 8008dfe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008e02:	e01e      	b.n	8008e42 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008e04:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008e08:	e01b      	b.n	8008e42 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008e0a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008e0e:	e018      	b.n	8008e42 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008e10:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008e14:	e015      	b.n	8008e42 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008e16:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008e1a:	e012      	b.n	8008e42 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008e1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e20:	e00f      	b.n	8008e42 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008e22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e26:	e00c      	b.n	8008e42 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008e28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e2c:	e009      	b.n	8008e42 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008e2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e32:	e006      	b.n	8008e42 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008e34:	2310      	movs	r3, #16
 8008e36:	e004      	b.n	8008e42 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008e38:	2310      	movs	r3, #16
 8008e3a:	e002      	b.n	8008e42 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008e3c:	2310      	movs	r3, #16
 8008e3e:	e000      	b.n	8008e42 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008e40:	2310      	movs	r3, #16
 8008e42:	4a67      	ldr	r2, [pc, #412]	; (8008fe0 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8008e44:	60d3      	str	r3, [r2, #12]
 8008e46:	e05f      	b.n	8008f08 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a58      	ldr	r2, [pc, #352]	; (8008fb0 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d057      	beq.n	8008f02 <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a57      	ldr	r2, [pc, #348]	; (8008fb4 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d050      	beq.n	8008efe <HAL_DMAEx_MultiBufferStart_IT+0x776>
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a55      	ldr	r2, [pc, #340]	; (8008fb8 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d049      	beq.n	8008efa <HAL_DMAEx_MultiBufferStart_IT+0x772>
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a54      	ldr	r2, [pc, #336]	; (8008fbc <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d042      	beq.n	8008ef6 <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a52      	ldr	r2, [pc, #328]	; (8008fc0 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d03a      	beq.n	8008ef0 <HAL_DMAEx_MultiBufferStart_IT+0x768>
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a51      	ldr	r2, [pc, #324]	; (8008fc4 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d032      	beq.n	8008eea <HAL_DMAEx_MultiBufferStart_IT+0x762>
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a4f      	ldr	r2, [pc, #316]	; (8008fc8 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d02a      	beq.n	8008ee4 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a4e      	ldr	r2, [pc, #312]	; (8008fcc <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d022      	beq.n	8008ede <HAL_DMAEx_MultiBufferStart_IT+0x756>
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a4c      	ldr	r2, [pc, #304]	; (8008fd0 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d01a      	beq.n	8008ed8 <HAL_DMAEx_MultiBufferStart_IT+0x750>
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a4b      	ldr	r2, [pc, #300]	; (8008fd4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d012      	beq.n	8008ed2 <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a49      	ldr	r2, [pc, #292]	; (8008fd8 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d00a      	beq.n	8008ecc <HAL_DMAEx_MultiBufferStart_IT+0x744>
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a48      	ldr	r2, [pc, #288]	; (8008fdc <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d102      	bne.n	8008ec6 <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 8008ec0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008ec4:	e01e      	b.n	8008f04 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008ec6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008eca:	e01b      	b.n	8008f04 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008ecc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008ed0:	e018      	b.n	8008f04 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008ed2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008ed6:	e015      	b.n	8008f04 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008ed8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008edc:	e012      	b.n	8008f04 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008ede:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ee2:	e00f      	b.n	8008f04 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008ee4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ee8:	e00c      	b.n	8008f04 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008eea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008eee:	e009      	b.n	8008f04 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008ef0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ef4:	e006      	b.n	8008f04 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008ef6:	2310      	movs	r3, #16
 8008ef8:	e004      	b.n	8008f04 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008efa:	2310      	movs	r3, #16
 8008efc:	e002      	b.n	8008f04 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008efe:	2310      	movs	r3, #16
 8008f00:	e000      	b.n	8008f04 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008f02:	2310      	movs	r3, #16
 8008f04:	4a36      	ldr	r2, [pc, #216]	; (8008fe0 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8008f06:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	4b35      	ldr	r3, [pc, #212]	; (8008fe4 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8008f10:	429a      	cmp	r2, r3
 8008f12:	f240 8082 	bls.w	800901a <HAL_DMAEx_MultiBufferStart_IT+0x892>
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a25      	ldr	r2, [pc, #148]	; (8008fb0 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d078      	beq.n	8009012 <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a23      	ldr	r2, [pc, #140]	; (8008fb4 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d071      	beq.n	800900e <HAL_DMAEx_MultiBufferStart_IT+0x886>
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a22      	ldr	r2, [pc, #136]	; (8008fb8 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d06a      	beq.n	800900a <HAL_DMAEx_MultiBufferStart_IT+0x882>
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a20      	ldr	r2, [pc, #128]	; (8008fbc <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d063      	beq.n	8009006 <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a1f      	ldr	r2, [pc, #124]	; (8008fc0 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d05b      	beq.n	8009000 <HAL_DMAEx_MultiBufferStart_IT+0x878>
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a1d      	ldr	r2, [pc, #116]	; (8008fc4 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d053      	beq.n	8008ffa <HAL_DMAEx_MultiBufferStart_IT+0x872>
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a1c      	ldr	r2, [pc, #112]	; (8008fc8 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d04b      	beq.n	8008ff4 <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a1a      	ldr	r2, [pc, #104]	; (8008fcc <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d043      	beq.n	8008fee <HAL_DMAEx_MultiBufferStart_IT+0x866>
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a19      	ldr	r2, [pc, #100]	; (8008fd0 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d03b      	beq.n	8008fe8 <HAL_DMAEx_MultiBufferStart_IT+0x860>
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a17      	ldr	r2, [pc, #92]	; (8008fd4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d012      	beq.n	8008fa0 <HAL_DMAEx_MultiBufferStart_IT+0x818>
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a16      	ldr	r2, [pc, #88]	; (8008fd8 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d00a      	beq.n	8008f9a <HAL_DMAEx_MultiBufferStart_IT+0x812>
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a14      	ldr	r2, [pc, #80]	; (8008fdc <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d102      	bne.n	8008f94 <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 8008f8e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008f92:	e03f      	b.n	8009014 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8008f94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008f98:	e03c      	b.n	8009014 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8008f9a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008f9e:	e039      	b.n	8009014 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8008fa0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008fa4:	e036      	b.n	8009014 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8008fa6:	bf00      	nop
 8008fa8:	40026400 	.word	0x40026400
 8008fac:	40026058 	.word	0x40026058
 8008fb0:	40026010 	.word	0x40026010
 8008fb4:	40026410 	.word	0x40026410
 8008fb8:	40026070 	.word	0x40026070
 8008fbc:	40026470 	.word	0x40026470
 8008fc0:	40026028 	.word	0x40026028
 8008fc4:	40026428 	.word	0x40026428
 8008fc8:	40026088 	.word	0x40026088
 8008fcc:	40026488 	.word	0x40026488
 8008fd0:	40026040 	.word	0x40026040
 8008fd4:	40026440 	.word	0x40026440
 8008fd8:	400260a0 	.word	0x400260a0
 8008fdc:	400264a0 	.word	0x400264a0
 8008fe0:	40026000 	.word	0x40026000
 8008fe4:	40026458 	.word	0x40026458
 8008fe8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008fec:	e012      	b.n	8009014 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8008fee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ff2:	e00f      	b.n	8009014 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8008ff4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ff8:	e00c      	b.n	8009014 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8008ffa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ffe:	e009      	b.n	8009014 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8009000:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009004:	e006      	b.n	8009014 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8009006:	2308      	movs	r3, #8
 8009008:	e004      	b.n	8009014 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800900a:	2308      	movs	r3, #8
 800900c:	e002      	b.n	8009014 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800900e:	2308      	movs	r3, #8
 8009010:	e000      	b.n	8009014 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8009012:	2308      	movs	r3, #8
 8009014:	4a8c      	ldr	r2, [pc, #560]	; (8009248 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8009016:	60d3      	str	r3, [r2, #12]
 8009018:	e14e      	b.n	80092b8 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	461a      	mov	r2, r3
 8009020:	4b8a      	ldr	r3, [pc, #552]	; (800924c <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 8009022:	429a      	cmp	r2, r3
 8009024:	d960      	bls.n	80090e8 <HAL_DMAEx_MultiBufferStart_IT+0x960>
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4a89      	ldr	r2, [pc, #548]	; (8009250 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d057      	beq.n	80090e0 <HAL_DMAEx_MultiBufferStart_IT+0x958>
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4a87      	ldr	r2, [pc, #540]	; (8009254 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d050      	beq.n	80090dc <HAL_DMAEx_MultiBufferStart_IT+0x954>
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a86      	ldr	r2, [pc, #536]	; (8009258 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d049      	beq.n	80090d8 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a84      	ldr	r2, [pc, #528]	; (800925c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d042      	beq.n	80090d4 <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4a83      	ldr	r2, [pc, #524]	; (8009260 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d03a      	beq.n	80090ce <HAL_DMAEx_MultiBufferStart_IT+0x946>
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a81      	ldr	r2, [pc, #516]	; (8009264 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d032      	beq.n	80090c8 <HAL_DMAEx_MultiBufferStart_IT+0x940>
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4a80      	ldr	r2, [pc, #512]	; (8009268 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d02a      	beq.n	80090c2 <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a7e      	ldr	r2, [pc, #504]	; (800926c <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d022      	beq.n	80090bc <HAL_DMAEx_MultiBufferStart_IT+0x934>
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4a7d      	ldr	r2, [pc, #500]	; (8009270 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d01a      	beq.n	80090b6 <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a7b      	ldr	r2, [pc, #492]	; (8009274 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d012      	beq.n	80090b0 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a7a      	ldr	r2, [pc, #488]	; (8009278 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d00a      	beq.n	80090aa <HAL_DMAEx_MultiBufferStart_IT+0x922>
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a78      	ldr	r2, [pc, #480]	; (800927c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d102      	bne.n	80090a4 <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 800909e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80090a2:	e01e      	b.n	80090e2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80090a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80090a8:	e01b      	b.n	80090e2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80090aa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80090ae:	e018      	b.n	80090e2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80090b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80090b4:	e015      	b.n	80090e2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80090b6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80090ba:	e012      	b.n	80090e2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80090bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090c0:	e00f      	b.n	80090e2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80090c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090c6:	e00c      	b.n	80090e2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80090c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090cc:	e009      	b.n	80090e2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80090ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090d2:	e006      	b.n	80090e2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80090d4:	2308      	movs	r3, #8
 80090d6:	e004      	b.n	80090e2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80090d8:	2308      	movs	r3, #8
 80090da:	e002      	b.n	80090e2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80090dc:	2308      	movs	r3, #8
 80090de:	e000      	b.n	80090e2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80090e0:	2308      	movs	r3, #8
 80090e2:	4a59      	ldr	r2, [pc, #356]	; (8009248 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 80090e4:	6093      	str	r3, [r2, #8]
 80090e6:	e0e7      	b.n	80092b8 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	461a      	mov	r2, r3
 80090ee:	4b64      	ldr	r3, [pc, #400]	; (8009280 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 80090f0:	429a      	cmp	r2, r3
 80090f2:	d960      	bls.n	80091b6 <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a55      	ldr	r2, [pc, #340]	; (8009250 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d057      	beq.n	80091ae <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4a54      	ldr	r2, [pc, #336]	; (8009254 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d050      	beq.n	80091aa <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4a52      	ldr	r2, [pc, #328]	; (8009258 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d049      	beq.n	80091a6 <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4a51      	ldr	r2, [pc, #324]	; (800925c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d042      	beq.n	80091a2 <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4a4f      	ldr	r2, [pc, #316]	; (8009260 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d03a      	beq.n	800919c <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4a4e      	ldr	r2, [pc, #312]	; (8009264 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d032      	beq.n	8009196 <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	4a4c      	ldr	r2, [pc, #304]	; (8009268 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d02a      	beq.n	8009190 <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4a4b      	ldr	r2, [pc, #300]	; (800926c <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d022      	beq.n	800918a <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4a49      	ldr	r2, [pc, #292]	; (8009270 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d01a      	beq.n	8009184 <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4a48      	ldr	r2, [pc, #288]	; (8009274 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d012      	beq.n	800917e <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4a46      	ldr	r2, [pc, #280]	; (8009278 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d00a      	beq.n	8009178 <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4a45      	ldr	r2, [pc, #276]	; (800927c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d102      	bne.n	8009172 <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 800916c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009170:	e01e      	b.n	80091b0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8009172:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009176:	e01b      	b.n	80091b0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8009178:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800917c:	e018      	b.n	80091b0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800917e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009182:	e015      	b.n	80091b0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8009184:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009188:	e012      	b.n	80091b0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800918a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800918e:	e00f      	b.n	80091b0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8009190:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009194:	e00c      	b.n	80091b0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8009196:	f44f 7300 	mov.w	r3, #512	; 0x200
 800919a:	e009      	b.n	80091b0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800919c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091a0:	e006      	b.n	80091b0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80091a2:	2308      	movs	r3, #8
 80091a4:	e004      	b.n	80091b0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80091a6:	2308      	movs	r3, #8
 80091a8:	e002      	b.n	80091b0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80091aa:	2308      	movs	r3, #8
 80091ac:	e000      	b.n	80091b0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80091ae:	2308      	movs	r3, #8
 80091b0:	4a34      	ldr	r2, [pc, #208]	; (8009284 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 80091b2:	60d3      	str	r3, [r2, #12]
 80091b4:	e080      	b.n	80092b8 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4a25      	ldr	r2, [pc, #148]	; (8009250 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d078      	beq.n	80092b2 <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a23      	ldr	r2, [pc, #140]	; (8009254 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d071      	beq.n	80092ae <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4a22      	ldr	r2, [pc, #136]	; (8009258 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d06a      	beq.n	80092aa <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a20      	ldr	r2, [pc, #128]	; (800925c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d063      	beq.n	80092a6 <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	4a1f      	ldr	r2, [pc, #124]	; (8009260 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d05b      	beq.n	80092a0 <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a1d      	ldr	r2, [pc, #116]	; (8009264 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d053      	beq.n	800929a <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4a1c      	ldr	r2, [pc, #112]	; (8009268 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d04b      	beq.n	8009294 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a1a      	ldr	r2, [pc, #104]	; (800926c <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d043      	beq.n	800928e <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a19      	ldr	r2, [pc, #100]	; (8009270 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d03b      	beq.n	8009288 <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a17      	ldr	r2, [pc, #92]	; (8009274 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d012      	beq.n	8009240 <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a16      	ldr	r2, [pc, #88]	; (8009278 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d00a      	beq.n	800923a <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4a14      	ldr	r2, [pc, #80]	; (800927c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d102      	bne.n	8009234 <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 800922e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009232:	e03f      	b.n	80092b4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8009234:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009238:	e03c      	b.n	80092b4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800923a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800923e:	e039      	b.n	80092b4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8009240:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009244:	e036      	b.n	80092b4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8009246:	bf00      	nop
 8009248:	40026400 	.word	0x40026400
 800924c:	400260b8 	.word	0x400260b8
 8009250:	40026010 	.word	0x40026010
 8009254:	40026410 	.word	0x40026410
 8009258:	40026070 	.word	0x40026070
 800925c:	40026470 	.word	0x40026470
 8009260:	40026028 	.word	0x40026028
 8009264:	40026428 	.word	0x40026428
 8009268:	40026088 	.word	0x40026088
 800926c:	40026488 	.word	0x40026488
 8009270:	40026040 	.word	0x40026040
 8009274:	40026440 	.word	0x40026440
 8009278:	400260a0 	.word	0x400260a0
 800927c:	400264a0 	.word	0x400264a0
 8009280:	40026058 	.word	0x40026058
 8009284:	40026000 	.word	0x40026000
 8009288:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800928c:	e012      	b.n	80092b4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800928e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009292:	e00f      	b.n	80092b4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8009294:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009298:	e00c      	b.n	80092b4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800929a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800929e:	e009      	b.n	80092b4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80092a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092a4:	e006      	b.n	80092b4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80092a6:	2308      	movs	r3, #8
 80092a8:	e004      	b.n	80092b4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80092aa:	2308      	movs	r3, #8
 80092ac:	e002      	b.n	80092b4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80092ae:	2308      	movs	r3, #8
 80092b0:	e000      	b.n	80092b4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80092b2:	2308      	movs	r3, #8
 80092b4:	4a8a      	ldr	r2, [pc, #552]	; (80094e0 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 80092b6:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	461a      	mov	r2, r3
 80092be:	4b89      	ldr	r3, [pc, #548]	; (80094e4 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 80092c0:	429a      	cmp	r2, r3
 80092c2:	d960      	bls.n	8009386 <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a87      	ldr	r2, [pc, #540]	; (80094e8 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d057      	beq.n	800937e <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4a86      	ldr	r2, [pc, #536]	; (80094ec <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d050      	beq.n	800937a <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a84      	ldr	r2, [pc, #528]	; (80094f0 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d049      	beq.n	8009376 <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a83      	ldr	r2, [pc, #524]	; (80094f4 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d042      	beq.n	8009372 <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a81      	ldr	r2, [pc, #516]	; (80094f8 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d03a      	beq.n	800936c <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a80      	ldr	r2, [pc, #512]	; (80094fc <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d032      	beq.n	8009366 <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a7e      	ldr	r2, [pc, #504]	; (8009500 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d02a      	beq.n	8009360 <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4a7d      	ldr	r2, [pc, #500]	; (8009504 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d022      	beq.n	800935a <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4a7b      	ldr	r2, [pc, #492]	; (8009508 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d01a      	beq.n	8009354 <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4a7a      	ldr	r2, [pc, #488]	; (800950c <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d012      	beq.n	800934e <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a78      	ldr	r2, [pc, #480]	; (8009510 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d00a      	beq.n	8009348 <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	4a77      	ldr	r2, [pc, #476]	; (8009514 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d102      	bne.n	8009342 <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 800933c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009340:	e01e      	b.n	8009380 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009342:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009346:	e01b      	b.n	8009380 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009348:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800934c:	e018      	b.n	8009380 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800934e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009352:	e015      	b.n	8009380 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009354:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009358:	e012      	b.n	8009380 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800935a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800935e:	e00f      	b.n	8009380 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009360:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009364:	e00c      	b.n	8009380 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009366:	f44f 7380 	mov.w	r3, #256	; 0x100
 800936a:	e009      	b.n	8009380 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800936c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009370:	e006      	b.n	8009380 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009372:	2304      	movs	r3, #4
 8009374:	e004      	b.n	8009380 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009376:	2304      	movs	r3, #4
 8009378:	e002      	b.n	8009380 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800937a:	2304      	movs	r3, #4
 800937c:	e000      	b.n	8009380 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800937e:	2304      	movs	r3, #4
 8009380:	4a65      	ldr	r2, [pc, #404]	; (8009518 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8009382:	60d3      	str	r3, [r2, #12]
 8009384:	e150      	b.n	8009628 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	461a      	mov	r2, r3
 800938c:	4b63      	ldr	r3, [pc, #396]	; (800951c <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 800938e:	429a      	cmp	r2, r3
 8009390:	d960      	bls.n	8009454 <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	4a54      	ldr	r2, [pc, #336]	; (80094e8 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d057      	beq.n	800944c <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a52      	ldr	r2, [pc, #328]	; (80094ec <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d050      	beq.n	8009448 <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4a51      	ldr	r2, [pc, #324]	; (80094f0 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d049      	beq.n	8009444 <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4a4f      	ldr	r2, [pc, #316]	; (80094f4 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d042      	beq.n	8009440 <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4a4e      	ldr	r2, [pc, #312]	; (80094f8 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d03a      	beq.n	800943a <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a4c      	ldr	r2, [pc, #304]	; (80094fc <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d032      	beq.n	8009434 <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a4b      	ldr	r2, [pc, #300]	; (8009500 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d02a      	beq.n	800942e <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a49      	ldr	r2, [pc, #292]	; (8009504 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d022      	beq.n	8009428 <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a48      	ldr	r2, [pc, #288]	; (8009508 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d01a      	beq.n	8009422 <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a46      	ldr	r2, [pc, #280]	; (800950c <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d012      	beq.n	800941c <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4a45      	ldr	r2, [pc, #276]	; (8009510 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d00a      	beq.n	8009416 <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a43      	ldr	r2, [pc, #268]	; (8009514 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d102      	bne.n	8009410 <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 800940a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800940e:	e01e      	b.n	800944e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009410:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009414:	e01b      	b.n	800944e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009416:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800941a:	e018      	b.n	800944e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800941c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009420:	e015      	b.n	800944e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009422:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009426:	e012      	b.n	800944e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009428:	f44f 7380 	mov.w	r3, #256	; 0x100
 800942c:	e00f      	b.n	800944e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800942e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009432:	e00c      	b.n	800944e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009434:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009438:	e009      	b.n	800944e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800943a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800943e:	e006      	b.n	800944e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009440:	2304      	movs	r3, #4
 8009442:	e004      	b.n	800944e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009444:	2304      	movs	r3, #4
 8009446:	e002      	b.n	800944e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009448:	2304      	movs	r3, #4
 800944a:	e000      	b.n	800944e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800944c:	2304      	movs	r3, #4
 800944e:	4a32      	ldr	r2, [pc, #200]	; (8009518 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8009450:	6093      	str	r3, [r2, #8]
 8009452:	e0e9      	b.n	8009628 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	461a      	mov	r2, r3
 800945a:	4b31      	ldr	r3, [pc, #196]	; (8009520 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 800945c:	429a      	cmp	r2, r3
 800945e:	f240 8083 	bls.w	8009568 <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4a20      	ldr	r2, [pc, #128]	; (80094e8 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d079      	beq.n	8009560 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a1e      	ldr	r2, [pc, #120]	; (80094ec <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d072      	beq.n	800955c <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4a1d      	ldr	r2, [pc, #116]	; (80094f0 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d06b      	beq.n	8009558 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4a1b      	ldr	r2, [pc, #108]	; (80094f4 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d064      	beq.n	8009554 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4a1a      	ldr	r2, [pc, #104]	; (80094f8 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d05c      	beq.n	800954e <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4a18      	ldr	r2, [pc, #96]	; (80094fc <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d054      	beq.n	8009548 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	4a17      	ldr	r2, [pc, #92]	; (8009500 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d04c      	beq.n	8009542 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4a15      	ldr	r2, [pc, #84]	; (8009504 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d044      	beq.n	800953c <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	4a14      	ldr	r2, [pc, #80]	; (8009508 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d03c      	beq.n	8009536 <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4a12      	ldr	r2, [pc, #72]	; (800950c <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d034      	beq.n	8009530 <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4a11      	ldr	r2, [pc, #68]	; (8009510 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d02c      	beq.n	800952a <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4a0f      	ldr	r2, [pc, #60]	; (8009514 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d124      	bne.n	8009524 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 80094da:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80094de:	e040      	b.n	8009562 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80094e0:	40026000 	.word	0x40026000
 80094e4:	40026458 	.word	0x40026458
 80094e8:	40026010 	.word	0x40026010
 80094ec:	40026410 	.word	0x40026410
 80094f0:	40026070 	.word	0x40026070
 80094f4:	40026470 	.word	0x40026470
 80094f8:	40026028 	.word	0x40026028
 80094fc:	40026428 	.word	0x40026428
 8009500:	40026088 	.word	0x40026088
 8009504:	40026488 	.word	0x40026488
 8009508:	40026040 	.word	0x40026040
 800950c:	40026440 	.word	0x40026440
 8009510:	400260a0 	.word	0x400260a0
 8009514:	400264a0 	.word	0x400264a0
 8009518:	40026400 	.word	0x40026400
 800951c:	400260b8 	.word	0x400260b8
 8009520:	40026058 	.word	0x40026058
 8009524:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009528:	e01b      	b.n	8009562 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800952a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800952e:	e018      	b.n	8009562 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009530:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009534:	e015      	b.n	8009562 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009536:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800953a:	e012      	b.n	8009562 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800953c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009540:	e00f      	b.n	8009562 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009542:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009546:	e00c      	b.n	8009562 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009548:	f44f 7380 	mov.w	r3, #256	; 0x100
 800954c:	e009      	b.n	8009562 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800954e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009552:	e006      	b.n	8009562 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009554:	2304      	movs	r3, #4
 8009556:	e004      	b.n	8009562 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009558:	2304      	movs	r3, #4
 800955a:	e002      	b.n	8009562 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800955c:	2304      	movs	r3, #4
 800955e:	e000      	b.n	8009562 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009560:	2304      	movs	r3, #4
 8009562:	4a8b      	ldr	r2, [pc, #556]	; (8009790 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8009564:	60d3      	str	r3, [r2, #12]
 8009566:	e05f      	b.n	8009628 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4a89      	ldr	r2, [pc, #548]	; (8009794 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d057      	beq.n	8009622 <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	4a88      	ldr	r2, [pc, #544]	; (8009798 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d050      	beq.n	800961e <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a86      	ldr	r2, [pc, #536]	; (800979c <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d049      	beq.n	800961a <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4a85      	ldr	r2, [pc, #532]	; (80097a0 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d042      	beq.n	8009616 <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4a83      	ldr	r2, [pc, #524]	; (80097a4 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d03a      	beq.n	8009610 <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4a82      	ldr	r2, [pc, #520]	; (80097a8 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d032      	beq.n	800960a <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a80      	ldr	r2, [pc, #512]	; (80097ac <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d02a      	beq.n	8009604 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4a7f      	ldr	r2, [pc, #508]	; (80097b0 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d022      	beq.n	80095fe <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4a7d      	ldr	r2, [pc, #500]	; (80097b4 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d01a      	beq.n	80095f8 <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4a7c      	ldr	r2, [pc, #496]	; (80097b8 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d012      	beq.n	80095f2 <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a7a      	ldr	r2, [pc, #488]	; (80097bc <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d00a      	beq.n	80095ec <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a79      	ldr	r2, [pc, #484]	; (80097c0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d102      	bne.n	80095e6 <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 80095e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80095e4:	e01e      	b.n	8009624 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80095e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80095ea:	e01b      	b.n	8009624 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80095ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80095f0:	e018      	b.n	8009624 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80095f2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80095f6:	e015      	b.n	8009624 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80095f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80095fc:	e012      	b.n	8009624 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80095fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009602:	e00f      	b.n	8009624 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009604:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009608:	e00c      	b.n	8009624 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800960a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800960e:	e009      	b.n	8009624 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009610:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009614:	e006      	b.n	8009624 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009616:	2304      	movs	r3, #4
 8009618:	e004      	b.n	8009624 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800961a:	2304      	movs	r3, #4
 800961c:	e002      	b.n	8009624 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800961e:	2304      	movs	r3, #4
 8009620:	e000      	b.n	8009624 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009622:	2304      	movs	r3, #4
 8009624:	4a5a      	ldr	r2, [pc, #360]	; (8009790 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8009626:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	461a      	mov	r2, r3
 800962e:	4b65      	ldr	r3, [pc, #404]	; (80097c4 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8009630:	429a      	cmp	r2, r3
 8009632:	d95c      	bls.n	80096ee <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a56      	ldr	r2, [pc, #344]	; (8009794 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d053      	beq.n	80096e6 <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a55      	ldr	r2, [pc, #340]	; (8009798 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d04c      	beq.n	80096e2 <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a53      	ldr	r2, [pc, #332]	; (800979c <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d045      	beq.n	80096de <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a52      	ldr	r2, [pc, #328]	; (80097a0 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d03e      	beq.n	80096da <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4a50      	ldr	r2, [pc, #320]	; (80097a4 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d037      	beq.n	80096d6 <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a4f      	ldr	r2, [pc, #316]	; (80097a8 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d030      	beq.n	80096d2 <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4a4d      	ldr	r2, [pc, #308]	; (80097ac <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d029      	beq.n	80096ce <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4a4c      	ldr	r2, [pc, #304]	; (80097b0 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d022      	beq.n	80096ca <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4a4a      	ldr	r2, [pc, #296]	; (80097b4 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d01a      	beq.n	80096c4 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4a49      	ldr	r2, [pc, #292]	; (80097b8 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d012      	beq.n	80096be <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4a47      	ldr	r2, [pc, #284]	; (80097bc <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d00a      	beq.n	80096b8 <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4a46      	ldr	r2, [pc, #280]	; (80097c0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d102      	bne.n	80096b2 <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 80096ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80096b0:	e01a      	b.n	80096e8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80096b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80096b6:	e017      	b.n	80096e8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80096b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80096bc:	e014      	b.n	80096e8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80096be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80096c2:	e011      	b.n	80096e8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80096c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80096c8:	e00e      	b.n	80096e8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80096ca:	2340      	movs	r3, #64	; 0x40
 80096cc:	e00c      	b.n	80096e8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80096ce:	2340      	movs	r3, #64	; 0x40
 80096d0:	e00a      	b.n	80096e8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80096d2:	2340      	movs	r3, #64	; 0x40
 80096d4:	e008      	b.n	80096e8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80096d6:	2340      	movs	r3, #64	; 0x40
 80096d8:	e006      	b.n	80096e8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80096da:	2301      	movs	r3, #1
 80096dc:	e004      	b.n	80096e8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80096de:	2301      	movs	r3, #1
 80096e0:	e002      	b.n	80096e8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80096e2:	2301      	movs	r3, #1
 80096e4:	e000      	b.n	80096e8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80096e6:	2301      	movs	r3, #1
 80096e8:	4a37      	ldr	r2, [pc, #220]	; (80097c8 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 80096ea:	60d3      	str	r3, [r2, #12]
 80096ec:	e141      	b.n	8009972 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	461a      	mov	r2, r3
 80096f4:	4b35      	ldr	r3, [pc, #212]	; (80097cc <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d97c      	bls.n	80097f4 <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	4a25      	ldr	r2, [pc, #148]	; (8009794 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8009700:	4293      	cmp	r3, r2
 8009702:	d073      	beq.n	80097ec <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4a23      	ldr	r2, [pc, #140]	; (8009798 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d06c      	beq.n	80097e8 <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	4a22      	ldr	r2, [pc, #136]	; (800979c <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d065      	beq.n	80097e4 <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	4a20      	ldr	r2, [pc, #128]	; (80097a0 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d05e      	beq.n	80097e0 <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	4a1f      	ldr	r2, [pc, #124]	; (80097a4 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8009728:	4293      	cmp	r3, r2
 800972a:	d057      	beq.n	80097dc <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4a1d      	ldr	r2, [pc, #116]	; (80097a8 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d050      	beq.n	80097d8 <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	4a1c      	ldr	r2, [pc, #112]	; (80097ac <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d049      	beq.n	80097d4 <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4a1a      	ldr	r2, [pc, #104]	; (80097b0 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d042      	beq.n	80097d0 <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	4a19      	ldr	r2, [pc, #100]	; (80097b4 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d01a      	beq.n	800978a <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	4a17      	ldr	r2, [pc, #92]	; (80097b8 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 800975a:	4293      	cmp	r3, r2
 800975c:	d012      	beq.n	8009784 <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	4a16      	ldr	r2, [pc, #88]	; (80097bc <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d00a      	beq.n	800977e <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a14      	ldr	r2, [pc, #80]	; (80097c0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d102      	bne.n	8009778 <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 8009772:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009776:	e03a      	b.n	80097ee <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009778:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800977c:	e037      	b.n	80097ee <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800977e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009782:	e034      	b.n	80097ee <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009784:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009788:	e031      	b.n	80097ee <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800978a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800978e:	e02e      	b.n	80097ee <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009790:	40026000 	.word	0x40026000
 8009794:	40026010 	.word	0x40026010
 8009798:	40026410 	.word	0x40026410
 800979c:	40026070 	.word	0x40026070
 80097a0:	40026470 	.word	0x40026470
 80097a4:	40026028 	.word	0x40026028
 80097a8:	40026428 	.word	0x40026428
 80097ac:	40026088 	.word	0x40026088
 80097b0:	40026488 	.word	0x40026488
 80097b4:	40026040 	.word	0x40026040
 80097b8:	40026440 	.word	0x40026440
 80097bc:	400260a0 	.word	0x400260a0
 80097c0:	400264a0 	.word	0x400264a0
 80097c4:	40026458 	.word	0x40026458
 80097c8:	40026400 	.word	0x40026400
 80097cc:	400260b8 	.word	0x400260b8
 80097d0:	2340      	movs	r3, #64	; 0x40
 80097d2:	e00c      	b.n	80097ee <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80097d4:	2340      	movs	r3, #64	; 0x40
 80097d6:	e00a      	b.n	80097ee <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80097d8:	2340      	movs	r3, #64	; 0x40
 80097da:	e008      	b.n	80097ee <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80097dc:	2340      	movs	r3, #64	; 0x40
 80097de:	e006      	b.n	80097ee <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80097e0:	2301      	movs	r3, #1
 80097e2:	e004      	b.n	80097ee <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80097e4:	2301      	movs	r3, #1
 80097e6:	e002      	b.n	80097ee <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80097e8:	2301      	movs	r3, #1
 80097ea:	e000      	b.n	80097ee <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80097ec:	2301      	movs	r3, #1
 80097ee:	4a7b      	ldr	r2, [pc, #492]	; (80099dc <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 80097f0:	6093      	str	r3, [r2, #8]
 80097f2:	e0be      	b.n	8009972 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	461a      	mov	r2, r3
 80097fa:	4b79      	ldr	r3, [pc, #484]	; (80099e0 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d95c      	bls.n	80098ba <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4a77      	ldr	r2, [pc, #476]	; (80099e4 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d053      	beq.n	80098b2 <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4a76      	ldr	r2, [pc, #472]	; (80099e8 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d04c      	beq.n	80098ae <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4a74      	ldr	r2, [pc, #464]	; (80099ec <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d045      	beq.n	80098aa <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4a73      	ldr	r2, [pc, #460]	; (80099f0 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d03e      	beq.n	80098a6 <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	4a71      	ldr	r2, [pc, #452]	; (80099f4 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d037      	beq.n	80098a2 <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4a70      	ldr	r2, [pc, #448]	; (80099f8 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8009838:	4293      	cmp	r3, r2
 800983a:	d030      	beq.n	800989e <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4a6e      	ldr	r2, [pc, #440]	; (80099fc <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d029      	beq.n	800989a <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a6d      	ldr	r2, [pc, #436]	; (8009a00 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d022      	beq.n	8009896 <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4a6b      	ldr	r2, [pc, #428]	; (8009a04 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d01a      	beq.n	8009890 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	4a6a      	ldr	r2, [pc, #424]	; (8009a08 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d012      	beq.n	800988a <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	4a68      	ldr	r2, [pc, #416]	; (8009a0c <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d00a      	beq.n	8009884 <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4a67      	ldr	r2, [pc, #412]	; (8009a10 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d102      	bne.n	800987e <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 8009878:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800987c:	e01a      	b.n	80098b4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800987e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009882:	e017      	b.n	80098b4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8009884:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009888:	e014      	b.n	80098b4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800988a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800988e:	e011      	b.n	80098b4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8009890:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009894:	e00e      	b.n	80098b4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8009896:	2340      	movs	r3, #64	; 0x40
 8009898:	e00c      	b.n	80098b4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800989a:	2340      	movs	r3, #64	; 0x40
 800989c:	e00a      	b.n	80098b4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800989e:	2340      	movs	r3, #64	; 0x40
 80098a0:	e008      	b.n	80098b4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80098a2:	2340      	movs	r3, #64	; 0x40
 80098a4:	e006      	b.n	80098b4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80098a6:	2301      	movs	r3, #1
 80098a8:	e004      	b.n	80098b4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80098aa:	2301      	movs	r3, #1
 80098ac:	e002      	b.n	80098b4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80098ae:	2301      	movs	r3, #1
 80098b0:	e000      	b.n	80098b4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80098b2:	2301      	movs	r3, #1
 80098b4:	4a57      	ldr	r2, [pc, #348]	; (8009a14 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 80098b6:	60d3      	str	r3, [r2, #12]
 80098b8:	e05b      	b.n	8009972 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	4a49      	ldr	r2, [pc, #292]	; (80099e4 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d053      	beq.n	800996c <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4a47      	ldr	r2, [pc, #284]	; (80099e8 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d04c      	beq.n	8009968 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4a46      	ldr	r2, [pc, #280]	; (80099ec <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d045      	beq.n	8009964 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a44      	ldr	r2, [pc, #272]	; (80099f0 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d03e      	beq.n	8009960 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	4a43      	ldr	r2, [pc, #268]	; (80099f4 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d037      	beq.n	800995c <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	4a41      	ldr	r2, [pc, #260]	; (80099f8 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d030      	beq.n	8009958 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4a40      	ldr	r2, [pc, #256]	; (80099fc <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d029      	beq.n	8009954 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4a3e      	ldr	r2, [pc, #248]	; (8009a00 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d022      	beq.n	8009950 <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4a3d      	ldr	r2, [pc, #244]	; (8009a04 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d01a      	beq.n	800994a <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	4a3b      	ldr	r2, [pc, #236]	; (8009a08 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d012      	beq.n	8009944 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	4a3a      	ldr	r2, [pc, #232]	; (8009a0c <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d00a      	beq.n	800993e <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	4a38      	ldr	r2, [pc, #224]	; (8009a10 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d102      	bne.n	8009938 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 8009932:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009936:	e01a      	b.n	800996e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009938:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800993c:	e017      	b.n	800996e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800993e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009942:	e014      	b.n	800996e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009944:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009948:	e011      	b.n	800996e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800994a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800994e:	e00e      	b.n	800996e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009950:	2340      	movs	r3, #64	; 0x40
 8009952:	e00c      	b.n	800996e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009954:	2340      	movs	r3, #64	; 0x40
 8009956:	e00a      	b.n	800996e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009958:	2340      	movs	r3, #64	; 0x40
 800995a:	e008      	b.n	800996e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800995c:	2340      	movs	r3, #64	; 0x40
 800995e:	e006      	b.n	800996e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009960:	2301      	movs	r3, #1
 8009962:	e004      	b.n	800996e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009964:	2301      	movs	r3, #1
 8009966:	e002      	b.n	800996e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009968:	2301      	movs	r3, #1
 800996a:	e000      	b.n	800996e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800996c:	2301      	movs	r3, #1
 800996e:	4a29      	ldr	r2, [pc, #164]	; (8009a14 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8009970:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	681a      	ldr	r2, [r3, #0]
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f042 0216 	orr.w	r2, r2, #22
 8009980:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	695a      	ldr	r2, [r3, #20]
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009990:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009996:	2b00      	cmp	r3, #0
 8009998:	d103      	bne.n	80099a2 <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d007      	beq.n	80099b2 <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	681a      	ldr	r2, [r3, #0]
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f042 0208 	orr.w	r2, r2, #8
 80099b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	681a      	ldr	r2, [r3, #0]
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f042 0201 	orr.w	r2, r2, #1
 80099c0:	601a      	str	r2, [r3, #0]
 80099c2:	e005      	b.n	80099d0 <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2200      	movs	r2, #0
 80099c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80099cc:	2302      	movs	r3, #2
 80099ce:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 80099d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3718      	adds	r7, #24
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}
 80099da:	bf00      	nop
 80099dc:	40026400 	.word	0x40026400
 80099e0:	40026058 	.word	0x40026058
 80099e4:	40026010 	.word	0x40026010
 80099e8:	40026410 	.word	0x40026410
 80099ec:	40026070 	.word	0x40026070
 80099f0:	40026470 	.word	0x40026470
 80099f4:	40026028 	.word	0x40026028
 80099f8:	40026428 	.word	0x40026428
 80099fc:	40026088 	.word	0x40026088
 8009a00:	40026488 	.word	0x40026488
 8009a04:	40026040 	.word	0x40026040
 8009a08:	40026440 	.word	0x40026440
 8009a0c:	400260a0 	.word	0x400260a0
 8009a10:	400264a0 	.word	0x400264a0
 8009a14:	40026000 	.word	0x40026000

08009a18 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b085      	sub	sp, #20
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	60f8      	str	r0, [r7, #12]
 8009a20:	60b9      	str	r1, [r7, #8]
 8009a22:	4613      	mov	r3, r2
 8009a24:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 8009a26:	79fb      	ldrb	r3, [r7, #7]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d104      	bne.n	8009a36 <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	68ba      	ldr	r2, [r7, #8]
 8009a32:	60da      	str	r2, [r3, #12]
 8009a34:	e003      	b.n	8009a3e <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	68ba      	ldr	r2, [r7, #8]
 8009a3c:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009a3e:	2300      	movs	r3, #0
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3714      	adds	r7, #20
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr

08009a4c <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8009a4c:	b480      	push	{r7}
 8009a4e:	b085      	sub	sp, #20
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	60f8      	str	r0, [r7, #12]
 8009a54:	60b9      	str	r1, [r7, #8]
 8009a56:	607a      	str	r2, [r7, #4]
 8009a58:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	683a      	ldr	r2, [r7, #0]
 8009a60:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	689b      	ldr	r3, [r3, #8]
 8009a66:	2b40      	cmp	r3, #64	; 0x40
 8009a68:	d108      	bne.n	8009a7c <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	687a      	ldr	r2, [r7, #4]
 8009a70:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	68ba      	ldr	r2, [r7, #8]
 8009a78:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8009a7a:	e007      	b.n	8009a8c <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	68ba      	ldr	r2, [r7, #8]
 8009a82:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	687a      	ldr	r2, [r7, #4]
 8009a8a:	60da      	str	r2, [r3, #12]
}
 8009a8c:	bf00      	nop
 8009a8e:	3714      	adds	r7, #20
 8009a90:	46bd      	mov	sp, r7
 8009a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a96:	4770      	bx	lr

08009a98 <HAL_EXTI_SetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on EXTI configuration to be set.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_SetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b087      	sub	sp, #28
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	6039      	str	r1, [r7, #0]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d002      	beq.n	8009aae <HAL_EXTI_SetConfigLine+0x16>
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d101      	bne.n	8009ab2 <HAL_EXTI_SetConfigLine+0x1a>
  {
    return HAL_ERROR;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	e08f      	b.n	8009bd2 <HAL_EXTI_SetConfigLine+0x13a>
  /* Check parameters */
  assert_param(IS_EXTI_LINE(pExtiConfig->Line));
  assert_param(IS_EXTI_MODE(pExtiConfig->Mode));

  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	681a      	ldr	r2, [r3, #0]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	601a      	str	r2, [r3, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f003 031f 	and.w	r3, r3, #31
 8009ac2:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8009acc:	613b      	str	r3, [r7, #16]

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d052      	beq.n	8009b80 <HAL_EXTI_SetConfigLine+0xe8>
  {
    assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));

    /* Configure rising trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	689b      	ldr	r3, [r3, #8]
 8009ade:	f003 0301 	and.w	r3, r3, #1
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d006      	beq.n	8009af4 <HAL_EXTI_SetConfigLine+0x5c>
    {
      EXTI->RTSR |= maskline;
 8009ae6:	4b3e      	ldr	r3, [pc, #248]	; (8009be0 <HAL_EXTI_SetConfigLine+0x148>)
 8009ae8:	689a      	ldr	r2, [r3, #8]
 8009aea:	493d      	ldr	r1, [pc, #244]	; (8009be0 <HAL_EXTI_SetConfigLine+0x148>)
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	4313      	orrs	r3, r2
 8009af0:	608b      	str	r3, [r1, #8]
 8009af2:	e006      	b.n	8009b02 <HAL_EXTI_SetConfigLine+0x6a>
    }
    else
    {
      EXTI->RTSR &= ~maskline;
 8009af4:	4b3a      	ldr	r3, [pc, #232]	; (8009be0 <HAL_EXTI_SetConfigLine+0x148>)
 8009af6:	689a      	ldr	r2, [r3, #8]
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	43db      	mvns	r3, r3
 8009afc:	4938      	ldr	r1, [pc, #224]	; (8009be0 <HAL_EXTI_SetConfigLine+0x148>)
 8009afe:	4013      	ands	r3, r2
 8009b00:	608b      	str	r3, [r1, #8]
    }

    /* Configure falling trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	689b      	ldr	r3, [r3, #8]
 8009b06:	f003 0302 	and.w	r3, r3, #2
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d006      	beq.n	8009b1c <HAL_EXTI_SetConfigLine+0x84>
    {
      EXTI->FTSR |= maskline;
 8009b0e:	4b34      	ldr	r3, [pc, #208]	; (8009be0 <HAL_EXTI_SetConfigLine+0x148>)
 8009b10:	68da      	ldr	r2, [r3, #12]
 8009b12:	4933      	ldr	r1, [pc, #204]	; (8009be0 <HAL_EXTI_SetConfigLine+0x148>)
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	4313      	orrs	r3, r2
 8009b18:	60cb      	str	r3, [r1, #12]
 8009b1a:	e006      	b.n	8009b2a <HAL_EXTI_SetConfigLine+0x92>
    }
    else
    {
      EXTI->FTSR &= ~maskline;
 8009b1c:	4b30      	ldr	r3, [pc, #192]	; (8009be0 <HAL_EXTI_SetConfigLine+0x148>)
 8009b1e:	68da      	ldr	r2, [r3, #12]
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	43db      	mvns	r3, r3
 8009b24:	492e      	ldr	r1, [pc, #184]	; (8009be0 <HAL_EXTI_SetConfigLine+0x148>)
 8009b26:	4013      	ands	r3, r2
 8009b28:	60cb      	str	r3, [r1, #12]
    }


    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8009b32:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8009b36:	d123      	bne.n	8009b80 <HAL_EXTI_SetConfigLine+0xe8>
    {
      assert_param(IS_EXTI_GPIO_PORT(pExtiConfig->GPIOSel));
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
 8009b38:	4a2a      	ldr	r2, [pc, #168]	; (8009be4 <HAL_EXTI_SetConfigLine+0x14c>)
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	089b      	lsrs	r3, r3, #2
 8009b3e:	3302      	adds	r3, #2
 8009b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b44:	60fb      	str	r3, [r7, #12]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	f003 0303 	and.w	r3, r3, #3
 8009b4c:	009b      	lsls	r3, r3, #2
 8009b4e:	220f      	movs	r2, #15
 8009b50:	fa02 f303 	lsl.w	r3, r2, r3
 8009b54:	43db      	mvns	r3, r3
 8009b56:	68fa      	ldr	r2, [r7, #12]
 8009b58:	4013      	ands	r3, r2
 8009b5a:	60fb      	str	r3, [r7, #12]
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	68da      	ldr	r2, [r3, #12]
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	f003 0303 	and.w	r3, r3, #3
 8009b66:	009b      	lsls	r3, r3, #2
 8009b68:	fa02 f303 	lsl.w	r3, r2, r3
 8009b6c:	68fa      	ldr	r2, [r7, #12]
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	60fb      	str	r3, [r7, #12]
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 8009b72:	491c      	ldr	r1, [pc, #112]	; (8009be4 <HAL_EXTI_SetConfigLine+0x14c>)
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	089b      	lsrs	r3, r3, #2
 8009b78:	3302      	adds	r3, #2
 8009b7a:	68fa      	ldr	r2, [r7, #12]
 8009b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  /* Configure interrupt mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	f003 0301 	and.w	r3, r3, #1
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d006      	beq.n	8009b9a <HAL_EXTI_SetConfigLine+0x102>
  {
    EXTI->IMR |= maskline;
 8009b8c:	4b14      	ldr	r3, [pc, #80]	; (8009be0 <HAL_EXTI_SetConfigLine+0x148>)
 8009b8e:	681a      	ldr	r2, [r3, #0]
 8009b90:	4913      	ldr	r1, [pc, #76]	; (8009be0 <HAL_EXTI_SetConfigLine+0x148>)
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	4313      	orrs	r3, r2
 8009b96:	600b      	str	r3, [r1, #0]
 8009b98:	e006      	b.n	8009ba8 <HAL_EXTI_SetConfigLine+0x110>
  }
  else
  {
    EXTI->IMR &= ~maskline;
 8009b9a:	4b11      	ldr	r3, [pc, #68]	; (8009be0 <HAL_EXTI_SetConfigLine+0x148>)
 8009b9c:	681a      	ldr	r2, [r3, #0]
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	43db      	mvns	r3, r3
 8009ba2:	490f      	ldr	r1, [pc, #60]	; (8009be0 <HAL_EXTI_SetConfigLine+0x148>)
 8009ba4:	4013      	ands	r3, r2
 8009ba6:	600b      	str	r3, [r1, #0]
  }

  /* Configure event mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	f003 0302 	and.w	r3, r3, #2
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d006      	beq.n	8009bc2 <HAL_EXTI_SetConfigLine+0x12a>
  {
    EXTI->EMR |= maskline;
 8009bb4:	4b0a      	ldr	r3, [pc, #40]	; (8009be0 <HAL_EXTI_SetConfigLine+0x148>)
 8009bb6:	685a      	ldr	r2, [r3, #4]
 8009bb8:	4909      	ldr	r1, [pc, #36]	; (8009be0 <HAL_EXTI_SetConfigLine+0x148>)
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	604b      	str	r3, [r1, #4]
 8009bc0:	e006      	b.n	8009bd0 <HAL_EXTI_SetConfigLine+0x138>
  }
  else
  {
    EXTI->EMR &= ~maskline;
 8009bc2:	4b07      	ldr	r3, [pc, #28]	; (8009be0 <HAL_EXTI_SetConfigLine+0x148>)
 8009bc4:	685a      	ldr	r2, [r3, #4]
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	43db      	mvns	r3, r3
 8009bca:	4905      	ldr	r1, [pc, #20]	; (8009be0 <HAL_EXTI_SetConfigLine+0x148>)
 8009bcc:	4013      	ands	r3, r2
 8009bce:	604b      	str	r3, [r1, #4]
  }

  return HAL_OK;
 8009bd0:	2300      	movs	r3, #0
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	371c      	adds	r7, #28
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bdc:	4770      	bx	lr
 8009bde:	bf00      	nop
 8009be0:	40013c00 	.word	0x40013c00
 8009be4:	40013800 	.word	0x40013800

08009be8 <HAL_EXTI_GetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on structure to store Exti configuration.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b087      	sub	sp, #28
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d002      	beq.n	8009bfe <HAL_EXTI_GetConfigLine+0x16>
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d101      	bne.n	8009c02 <HAL_EXTI_GetConfigLine+0x1a>
  {
    return HAL_ERROR;
 8009bfe:	2301      	movs	r3, #1
 8009c00:	e061      	b.n	8009cc6 <HAL_EXTI_GetConfigLine+0xde>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* Store handle line number to configuration structure */
  pExtiConfig->Line = hexti->Line;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	601a      	str	r2, [r3, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f003 031f 	and.w	r3, r3, #31
 8009c12:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 8009c14:	2201      	movs	r2, #1
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	fa02 f303 	lsl.w	r3, r2, r3
 8009c1c:	613b      	str	r3, [r7, #16]

  /* 1] Get core mode : interrupt */

  /* Check if selected line is enable */
  if ((EXTI->IMR & maskline) != 0x00u)
 8009c1e:	4b2d      	ldr	r3, [pc, #180]	; (8009cd4 <HAL_EXTI_GetConfigLine+0xec>)
 8009c20:	681a      	ldr	r2, [r3, #0]
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	4013      	ands	r3, r2
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d003      	beq.n	8009c32 <HAL_EXTI_GetConfigLine+0x4a>
  {
    pExtiConfig->Mode = EXTI_MODE_INTERRUPT;
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	2201      	movs	r2, #1
 8009c2e:	605a      	str	r2, [r3, #4]
 8009c30:	e002      	b.n	8009c38 <HAL_EXTI_GetConfigLine+0x50>
  }
  else
  {
    pExtiConfig->Mode = EXTI_MODE_NONE;
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	2200      	movs	r2, #0
 8009c36:	605a      	str	r2, [r3, #4]
  }

  /* Get event mode */
  /* Check if selected line is enable */
  if ((EXTI->EMR & maskline) != 0x00u)
 8009c38:	4b26      	ldr	r3, [pc, #152]	; (8009cd4 <HAL_EXTI_GetConfigLine+0xec>)
 8009c3a:	685a      	ldr	r2, [r3, #4]
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	4013      	ands	r3, r2
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d005      	beq.n	8009c50 <HAL_EXTI_GetConfigLine+0x68>
  {
    pExtiConfig->Mode |= EXTI_MODE_EVENT;
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	f043 0202 	orr.w	r2, r3, #2
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	605a      	str	r2, [r3, #4]
  }

  /* Get default Trigger and GPIOSel configuration */
  pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	2200      	movs	r2, #0
 8009c54:	609a      	str	r2, [r3, #8]
  pExtiConfig->GPIOSel = 0x00u;
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	60da      	str	r2, [r3, #12]

  /* 2] Get trigger for configurable lines : rising */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d02d      	beq.n	8009cc4 <HAL_EXTI_GetConfigLine+0xdc>
  {
    /* Check if configuration of selected line is enable */
    if ((EXTI->RTSR & maskline) != 0x00u)
 8009c68:	4b1a      	ldr	r3, [pc, #104]	; (8009cd4 <HAL_EXTI_GetConfigLine+0xec>)
 8009c6a:	689a      	ldr	r2, [r3, #8]
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	4013      	ands	r3, r2
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d002      	beq.n	8009c7a <HAL_EXTI_GetConfigLine+0x92>
    {
      pExtiConfig->Trigger = EXTI_TRIGGER_RISING;
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	2201      	movs	r2, #1
 8009c78:	609a      	str	r2, [r3, #8]
    }

    /* Get falling configuration */
    /* Check if configuration of selected line is enable */
    if ((EXTI->FTSR & maskline) != 0x00u)
 8009c7a:	4b16      	ldr	r3, [pc, #88]	; (8009cd4 <HAL_EXTI_GetConfigLine+0xec>)
 8009c7c:	68da      	ldr	r2, [r3, #12]
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	4013      	ands	r3, r2
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d005      	beq.n	8009c92 <HAL_EXTI_GetConfigLine+0xaa>
    {
      pExtiConfig->Trigger |= EXTI_TRIGGER_FALLING;
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	689b      	ldr	r3, [r3, #8]
 8009c8a:	f043 0202 	orr.w	r2, r3, #2
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	609a      	str	r2, [r3, #8]
    }

    /* Get Gpio port selection for gpio lines */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8009c9a:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8009c9e:	d111      	bne.n	8009cc4 <HAL_EXTI_GetConfigLine+0xdc>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
 8009ca0:	4a0d      	ldr	r2, [pc, #52]	; (8009cd8 <HAL_EXTI_GetConfigLine+0xf0>)
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	089b      	lsrs	r3, r3, #2
 8009ca6:	3302      	adds	r3, #2
 8009ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009cac:	60fb      	str	r3, [r7, #12]
      pExtiConfig->GPIOSel = ((regval << (SYSCFG_EXTICR1_EXTI1_Pos * (3uL - (linepos & 0x03u)))) >> 24);
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	43db      	mvns	r3, r3
 8009cb2:	f003 0303 	and.w	r3, r3, #3
 8009cb6:	009b      	lsls	r3, r3, #2
 8009cb8:	68fa      	ldr	r2, [r7, #12]
 8009cba:	fa02 f303 	lsl.w	r3, r2, r3
 8009cbe:	0e1a      	lsrs	r2, r3, #24
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	60da      	str	r2, [r3, #12]
    }
  }

  return HAL_OK;
 8009cc4:	2300      	movs	r3, #0
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	371c      	adds	r7, #28
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd0:	4770      	bx	lr
 8009cd2:	bf00      	nop
 8009cd4:	40013c00 	.word	0x40013c00
 8009cd8:	40013800 	.word	0x40013800

08009cdc <HAL_EXTI_ClearConfigLine>:
  * @brief  Clear whole configuration of a dedicated Exti line.
  * @param  hexti Exti handle.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_ClearConfigLine(EXTI_HandleTypeDef *hexti)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b087      	sub	sp, #28
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if (hexti == NULL)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d101      	bne.n	8009cee <HAL_EXTI_ClearConfigLine+0x12>
  {
    return HAL_ERROR;
 8009cea:	2301      	movs	r3, #1
 8009cec:	e04c      	b.n	8009d88 <HAL_EXTI_ClearConfigLine+0xac>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f003 031f 	and.w	r3, r3, #31
 8009cf6:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8009d00:	613b      	str	r3, [r7, #16]

  /* 1] Clear interrupt mode */
  EXTI->IMR = (EXTI->IMR & ~maskline);
 8009d02:	4b24      	ldr	r3, [pc, #144]	; (8009d94 <HAL_EXTI_ClearConfigLine+0xb8>)
 8009d04:	681a      	ldr	r2, [r3, #0]
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	43db      	mvns	r3, r3
 8009d0a:	4922      	ldr	r1, [pc, #136]	; (8009d94 <HAL_EXTI_ClearConfigLine+0xb8>)
 8009d0c:	4013      	ands	r3, r2
 8009d0e:	600b      	str	r3, [r1, #0]

  /* 2] Clear event mode */
  EXTI->EMR = (EXTI->EMR & ~maskline);
 8009d10:	4b20      	ldr	r3, [pc, #128]	; (8009d94 <HAL_EXTI_ClearConfigLine+0xb8>)
 8009d12:	685a      	ldr	r2, [r3, #4]
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	43db      	mvns	r3, r3
 8009d18:	491e      	ldr	r1, [pc, #120]	; (8009d94 <HAL_EXTI_ClearConfigLine+0xb8>)
 8009d1a:	4013      	ands	r3, r2
 8009d1c:	604b      	str	r3, [r1, #4]

  /* 3] Clear triggers in case of configurable lines */
  if ((hexti->Line & EXTI_CONFIG) != 0x00u)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d02d      	beq.n	8009d86 <HAL_EXTI_ClearConfigLine+0xaa>
  {
    EXTI->RTSR = (EXTI->RTSR & ~maskline);
 8009d2a:	4b1a      	ldr	r3, [pc, #104]	; (8009d94 <HAL_EXTI_ClearConfigLine+0xb8>)
 8009d2c:	689a      	ldr	r2, [r3, #8]
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	43db      	mvns	r3, r3
 8009d32:	4918      	ldr	r1, [pc, #96]	; (8009d94 <HAL_EXTI_ClearConfigLine+0xb8>)
 8009d34:	4013      	ands	r3, r2
 8009d36:	608b      	str	r3, [r1, #8]
    EXTI->FTSR = (EXTI->FTSR & ~maskline);
 8009d38:	4b16      	ldr	r3, [pc, #88]	; (8009d94 <HAL_EXTI_ClearConfigLine+0xb8>)
 8009d3a:	68da      	ldr	r2, [r3, #12]
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	43db      	mvns	r3, r3
 8009d40:	4914      	ldr	r1, [pc, #80]	; (8009d94 <HAL_EXTI_ClearConfigLine+0xb8>)
 8009d42:	4013      	ands	r3, r2
 8009d44:	60cb      	str	r3, [r1, #12]

    /* Get Gpio port selection for gpio lines */
    if ((hexti->Line & EXTI_GPIO) == EXTI_GPIO)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8009d4e:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8009d52:	d118      	bne.n	8009d86 <HAL_EXTI_ClearConfigLine+0xaa>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
 8009d54:	4a10      	ldr	r2, [pc, #64]	; (8009d98 <HAL_EXTI_ClearConfigLine+0xbc>)
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	089b      	lsrs	r3, r3, #2
 8009d5a:	3302      	adds	r3, #2
 8009d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d60:	60fb      	str	r3, [r7, #12]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	f003 0303 	and.w	r3, r3, #3
 8009d68:	009b      	lsls	r3, r3, #2
 8009d6a:	220f      	movs	r2, #15
 8009d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8009d70:	43db      	mvns	r3, r3
 8009d72:	68fa      	ldr	r2, [r7, #12]
 8009d74:	4013      	ands	r3, r2
 8009d76:	60fb      	str	r3, [r7, #12]
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 8009d78:	4907      	ldr	r1, [pc, #28]	; (8009d98 <HAL_EXTI_ClearConfigLine+0xbc>)
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	089b      	lsrs	r3, r3, #2
 8009d7e:	3302      	adds	r3, #2
 8009d80:	68fa      	ldr	r2, [r7, #12]
 8009d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  return HAL_OK;
 8009d86:	2300      	movs	r3, #0
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	371c      	adds	r7, #28
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr
 8009d94:	40013c00 	.word	0x40013c00
 8009d98:	40013800 	.word	0x40013800

08009d9c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b087      	sub	sp, #28
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	60f8      	str	r0, [r7, #12]
 8009da4:	460b      	mov	r3, r1
 8009da6:	607a      	str	r2, [r7, #4]
 8009da8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009daa:	2300      	movs	r3, #0
 8009dac:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8009dae:	7afb      	ldrb	r3, [r7, #11]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d103      	bne.n	8009dbc <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	687a      	ldr	r2, [r7, #4]
 8009db8:	605a      	str	r2, [r3, #4]
      break;
 8009dba:	e002      	b.n	8009dc2 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	75fb      	strb	r3, [r7, #23]
      break;
 8009dc0:	bf00      	nop
  }

  return status;
 8009dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	371c      	adds	r7, #28
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dce:	4770      	bx	lr

08009dd0 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b083      	sub	sp, #12
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d101      	bne.n	8009de4 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8009de0:	2301      	movs	r3, #1
 8009de2:	e003      	b.n	8009dec <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	683a      	ldr	r2, [r7, #0]
 8009de8:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8009dea:	2300      	movs	r3, #0
  }
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	370c      	adds	r7, #12
 8009df0:	46bd      	mov	sp, r7
 8009df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df6:	4770      	bx	lr

08009df8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b084      	sub	sp, #16
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f003 031f 	and.w	r3, r3, #31
 8009e08:	2201      	movs	r2, #1
 8009e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8009e0e:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8009e10:	4b0a      	ldr	r3, [pc, #40]	; (8009e3c <HAL_EXTI_IRQHandler+0x44>)
 8009e12:	695b      	ldr	r3, [r3, #20]
 8009e14:	68fa      	ldr	r2, [r7, #12]
 8009e16:	4013      	ands	r3, r2
 8009e18:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d009      	beq.n	8009e34 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8009e20:	4a06      	ldr	r2, [pc, #24]	; (8009e3c <HAL_EXTI_IRQHandler+0x44>)
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d002      	beq.n	8009e34 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	4798      	blx	r3
    }
  }
}
 8009e34:	bf00      	nop
 8009e36:	3710      	adds	r7, #16
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}
 8009e3c:	40013c00 	.word	0x40013c00

08009e40 <HAL_EXTI_GetPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval 1 if interrupt is pending else 0.
  */
uint32_t HAL_EXTI_GetPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b087      	sub	sp, #28
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
 8009e48:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f003 031f 	and.w	r3, r3, #31
 8009e52:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 8009e54:	2201      	movs	r2, #1
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	fa02 f303 	lsl.w	r3, r2, r3
 8009e5c:	613b      	str	r3, [r7, #16]

  /* return 1 if bit is set else 0 */
  regval = ((EXTI->PR & maskline) >> linepos);
 8009e5e:	4b07      	ldr	r3, [pc, #28]	; (8009e7c <HAL_EXTI_GetPending+0x3c>)
 8009e60:	695a      	ldr	r2, [r3, #20]
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	401a      	ands	r2, r3
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	fa22 f303 	lsr.w	r3, r2, r3
 8009e6c:	60fb      	str	r3, [r7, #12]
  return regval;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	371c      	adds	r7, #28
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr
 8009e7c:	40013c00 	.word	0x40013c00

08009e80 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8009e80:	b480      	push	{r7}
 8009e82:	b085      	sub	sp, #20
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f003 031f 	and.w	r3, r3, #31
 8009e92:	2201      	movs	r2, #1
 8009e94:	fa02 f303 	lsl.w	r3, r2, r3
 8009e98:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 8009e9a:	4a04      	ldr	r2, [pc, #16]	; (8009eac <HAL_EXTI_ClearPending+0x2c>)
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	6153      	str	r3, [r2, #20]
}
 8009ea0:	bf00      	nop
 8009ea2:	3714      	adds	r7, #20
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr
 8009eac:	40013c00 	.word	0x40013c00

08009eb0 <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b085      	sub	sp, #20
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f003 031f 	and.w	r3, r3, #31
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ec6:	60fb      	str	r3, [r7, #12]

  /* Generate Software interrupt */
  EXTI->SWIER = maskline;
 8009ec8:	4a04      	ldr	r2, [pc, #16]	; (8009edc <HAL_EXTI_GenerateSWI+0x2c>)
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	6113      	str	r3, [r2, #16]
}
 8009ece:	bf00      	nop
 8009ed0:	3714      	adds	r7, #20
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed8:	4770      	bx	lr
 8009eda:	bf00      	nop
 8009edc:	40013c00 	.word	0x40013c00

08009ee0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b086      	sub	sp, #24
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	60f8      	str	r0, [r7, #12]
 8009ee8:	60b9      	str	r1, [r7, #8]
 8009eea:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009eee:	2301      	movs	r3, #1
 8009ef0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009ef2:	4b23      	ldr	r3, [pc, #140]	; (8009f80 <HAL_FLASH_Program+0xa0>)
 8009ef4:	7e1b      	ldrb	r3, [r3, #24]
 8009ef6:	2b01      	cmp	r3, #1
 8009ef8:	d101      	bne.n	8009efe <HAL_FLASH_Program+0x1e>
 8009efa:	2302      	movs	r3, #2
 8009efc:	e03b      	b.n	8009f76 <HAL_FLASH_Program+0x96>
 8009efe:	4b20      	ldr	r3, [pc, #128]	; (8009f80 <HAL_FLASH_Program+0xa0>)
 8009f00:	2201      	movs	r2, #1
 8009f02:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009f04:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009f08:	f000 f9be 	bl	800a288 <FLASH_WaitForLastOperation>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8009f10:	7dfb      	ldrb	r3, [r7, #23]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d12b      	bne.n	8009f6e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d105      	bne.n	8009f28 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8009f1c:	783b      	ldrb	r3, [r7, #0]
 8009f1e:	4619      	mov	r1, r3
 8009f20:	68b8      	ldr	r0, [r7, #8]
 8009f22:	f000 fa69 	bl	800a3f8 <FLASH_Program_Byte>
 8009f26:	e016      	b.n	8009f56 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2b01      	cmp	r3, #1
 8009f2c:	d105      	bne.n	8009f3a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8009f2e:	883b      	ldrh	r3, [r7, #0]
 8009f30:	4619      	mov	r1, r3
 8009f32:	68b8      	ldr	r0, [r7, #8]
 8009f34:	f000 fa3c 	bl	800a3b0 <FLASH_Program_HalfWord>
 8009f38:	e00d      	b.n	8009f56 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2b02      	cmp	r3, #2
 8009f3e:	d105      	bne.n	8009f4c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	4619      	mov	r1, r3
 8009f44:	68b8      	ldr	r0, [r7, #8]
 8009f46:	f000 fa11 	bl	800a36c <FLASH_Program_Word>
 8009f4a:	e004      	b.n	8009f56 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8009f4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f50:	68b8      	ldr	r0, [r7, #8]
 8009f52:	f000 f9d9 	bl	800a308 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009f56:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009f5a:	f000 f995 	bl	800a288 <FLASH_WaitForLastOperation>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8009f62:	4b08      	ldr	r3, [pc, #32]	; (8009f84 <HAL_FLASH_Program+0xa4>)
 8009f64:	691b      	ldr	r3, [r3, #16]
 8009f66:	4a07      	ldr	r2, [pc, #28]	; (8009f84 <HAL_FLASH_Program+0xa4>)
 8009f68:	f023 0301 	bic.w	r3, r3, #1
 8009f6c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009f6e:	4b04      	ldr	r3, [pc, #16]	; (8009f80 <HAL_FLASH_Program+0xa0>)
 8009f70:	2200      	movs	r2, #0
 8009f72:	761a      	strb	r2, [r3, #24]
  
  return status;
 8009f74:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3718      	adds	r7, #24
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}
 8009f7e:	bf00      	nop
 8009f80:	20000d9c 	.word	0x20000d9c
 8009f84:	40023c00 	.word	0x40023c00

08009f88 <HAL_FLASH_Program_IT>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b086      	sub	sp, #24
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	60f8      	str	r0, [r7, #12]
 8009f90:	60b9      	str	r1, [r7, #8]
 8009f92:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_OK;
 8009f96:	2300      	movs	r3, #0
 8009f98:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009f9a:	4b20      	ldr	r3, [pc, #128]	; (800a01c <HAL_FLASH_Program_IT+0x94>)
 8009f9c:	7e1b      	ldrb	r3, [r3, #24]
 8009f9e:	2b01      	cmp	r3, #1
 8009fa0:	d101      	bne.n	8009fa6 <HAL_FLASH_Program_IT+0x1e>
 8009fa2:	2302      	movs	r3, #2
 8009fa4:	e035      	b.n	800a012 <HAL_FLASH_Program_IT+0x8a>
 8009fa6:	4b1d      	ldr	r3, [pc, #116]	; (800a01c <HAL_FLASH_Program_IT+0x94>)
 8009fa8:	2201      	movs	r2, #1
 8009faa:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Enable End of FLASH Operation interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
 8009fac:	4b1c      	ldr	r3, [pc, #112]	; (800a020 <HAL_FLASH_Program_IT+0x98>)
 8009fae:	691b      	ldr	r3, [r3, #16]
 8009fb0:	4a1b      	ldr	r2, [pc, #108]	; (800a020 <HAL_FLASH_Program_IT+0x98>)
 8009fb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009fb6:	6113      	str	r3, [r2, #16]
  
  /* Enable Error source interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
 8009fb8:	4b19      	ldr	r3, [pc, #100]	; (800a020 <HAL_FLASH_Program_IT+0x98>)
 8009fba:	691b      	ldr	r3, [r3, #16]
 8009fbc:	4a18      	ldr	r2, [pc, #96]	; (800a020 <HAL_FLASH_Program_IT+0x98>)
 8009fbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009fc2:	6113      	str	r3, [r2, #16]

  pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM;
 8009fc4:	4b15      	ldr	r3, [pc, #84]	; (800a01c <HAL_FLASH_Program_IT+0x94>)
 8009fc6:	2203      	movs	r2, #3
 8009fc8:	701a      	strb	r2, [r3, #0]
  pFlash.Address = Address;
 8009fca:	4a14      	ldr	r2, [pc, #80]	; (800a01c <HAL_FLASH_Program_IT+0x94>)
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	6153      	str	r3, [r2, #20]

  if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d105      	bne.n	8009fe2 <HAL_FLASH_Program_IT+0x5a>
  {
    /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8009fd6:	783b      	ldrb	r3, [r7, #0]
 8009fd8:	4619      	mov	r1, r3
 8009fda:	68b8      	ldr	r0, [r7, #8]
 8009fdc:	f000 fa0c 	bl	800a3f8 <FLASH_Program_Byte>
 8009fe0:	e016      	b.n	800a010 <HAL_FLASH_Program_IT+0x88>
  }
  else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	2b01      	cmp	r3, #1
 8009fe6:	d105      	bne.n	8009ff4 <HAL_FLASH_Program_IT+0x6c>
  {
    /*Program halfword (16-bit) at a specified address.*/
    FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8009fe8:	883b      	ldrh	r3, [r7, #0]
 8009fea:	4619      	mov	r1, r3
 8009fec:	68b8      	ldr	r0, [r7, #8]
 8009fee:	f000 f9df 	bl	800a3b0 <FLASH_Program_HalfWord>
 8009ff2:	e00d      	b.n	800a010 <HAL_FLASH_Program_IT+0x88>
  }
  else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2b02      	cmp	r3, #2
 8009ff8:	d105      	bne.n	800a006 <HAL_FLASH_Program_IT+0x7e>
  {
    /*Program word (32-bit) at a specified address.*/
    FLASH_Program_Word(Address, (uint32_t) Data);
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	4619      	mov	r1, r3
 8009ffe:	68b8      	ldr	r0, [r7, #8]
 800a000:	f000 f9b4 	bl	800a36c <FLASH_Program_Word>
 800a004:	e004      	b.n	800a010 <HAL_FLASH_Program_IT+0x88>
  }
  else
  {
    /*Program double word (64-bit) at a specified address.*/
    FLASH_Program_DoubleWord(Address, Data);
 800a006:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a00a:	68b8      	ldr	r0, [r7, #8]
 800a00c:	f000 f97c 	bl	800a308 <FLASH_Program_DoubleWord>
  }

  return status;
 800a010:	7dfb      	ldrb	r3, [r7, #23]
}
 800a012:	4618      	mov	r0, r3
 800a014:	3718      	adds	r7, #24
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}
 800a01a:	bf00      	nop
 800a01c:	20000d9c 	.word	0x20000d9c
 800a020:	40023c00 	.word	0x40023c00

0800a024 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b082      	sub	sp, #8
 800a028:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 800a02a:	2300      	movs	r3, #0
 800a02c:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800a02e:	4b4b      	ldr	r3, [pc, #300]	; (800a15c <HAL_FLASH_IRQHandler+0x138>)
 800a030:	68db      	ldr	r3, [r3, #12]
 800a032:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800a036:	2b00      	cmp	r3, #0
 800a038:	d020      	beq.n	800a07c <HAL_FLASH_IRQHandler+0x58>
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800a03a:	4b49      	ldr	r3, [pc, #292]	; (800a160 <HAL_FLASH_IRQHandler+0x13c>)
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	b2db      	uxtb	r3, r3
 800a040:	2b01      	cmp	r3, #1
 800a042:	d107      	bne.n	800a054 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 800a044:	4b46      	ldr	r3, [pc, #280]	; (800a160 <HAL_FLASH_IRQHandler+0x13c>)
 800a046:	68db      	ldr	r3, [r3, #12]
 800a048:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 800a04a:	4b45      	ldr	r3, [pc, #276]	; (800a160 <HAL_FLASH_IRQHandler+0x13c>)
 800a04c:	f04f 32ff 	mov.w	r2, #4294967295
 800a050:	60da      	str	r2, [r3, #12]
 800a052:	e00b      	b.n	800a06c <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 800a054:	4b42      	ldr	r3, [pc, #264]	; (800a160 <HAL_FLASH_IRQHandler+0x13c>)
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	b2db      	uxtb	r3, r3
 800a05a:	2b02      	cmp	r3, #2
 800a05c:	d103      	bne.n	800a066 <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 800a05e:	4b40      	ldr	r3, [pc, #256]	; (800a160 <HAL_FLASH_IRQHandler+0x13c>)
 800a060:	691b      	ldr	r3, [r3, #16]
 800a062:	607b      	str	r3, [r7, #4]
 800a064:	e002      	b.n	800a06c <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 800a066:	4b3e      	ldr	r3, [pc, #248]	; (800a160 <HAL_FLASH_IRQHandler+0x13c>)
 800a068:	695b      	ldr	r3, [r3, #20]
 800a06a:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 800a06c:	f000 f9e6 	bl	800a43c <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f000 f881 	bl	800a178 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800a076:	4b3a      	ldr	r3, [pc, #232]	; (800a160 <HAL_FLASH_IRQHandler+0x13c>)
 800a078:	2200      	movs	r2, #0
 800a07a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800a07c:	4b37      	ldr	r3, [pc, #220]	; (800a15c <HAL_FLASH_IRQHandler+0x138>)
 800a07e:	68db      	ldr	r3, [r3, #12]
 800a080:	f003 0301 	and.w	r3, r3, #1
 800a084:	2b00      	cmp	r3, #0
 800a086:	d04a      	beq.n	800a11e <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800a088:	4b34      	ldr	r3, [pc, #208]	; (800a15c <HAL_FLASH_IRQHandler+0x138>)
 800a08a:	2201      	movs	r2, #1
 800a08c:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800a08e:	4b34      	ldr	r3, [pc, #208]	; (800a160 <HAL_FLASH_IRQHandler+0x13c>)
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	b2db      	uxtb	r3, r3
 800a094:	2b01      	cmp	r3, #1
 800a096:	d12d      	bne.n	800a0f4 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 800a098:	4b31      	ldr	r3, [pc, #196]	; (800a160 <HAL_FLASH_IRQHandler+0x13c>)
 800a09a:	685b      	ldr	r3, [r3, #4]
 800a09c:	3b01      	subs	r3, #1
 800a09e:	4a30      	ldr	r2, [pc, #192]	; (800a160 <HAL_FLASH_IRQHandler+0x13c>)
 800a0a0:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 800a0a2:	4b2f      	ldr	r3, [pc, #188]	; (800a160 <HAL_FLASH_IRQHandler+0x13c>)
 800a0a4:	685b      	ldr	r3, [r3, #4]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d015      	beq.n	800a0d6 <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 800a0aa:	4b2d      	ldr	r3, [pc, #180]	; (800a160 <HAL_FLASH_IRQHandler+0x13c>)
 800a0ac:	68db      	ldr	r3, [r3, #12]
 800a0ae:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f000 f857 	bl	800a164 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 800a0b6:	4b2a      	ldr	r3, [pc, #168]	; (800a160 <HAL_FLASH_IRQHandler+0x13c>)
 800a0b8:	68db      	ldr	r3, [r3, #12]
 800a0ba:	3301      	adds	r3, #1
 800a0bc:	4a28      	ldr	r2, [pc, #160]	; (800a160 <HAL_FLASH_IRQHandler+0x13c>)
 800a0be:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 800a0c0:	4b27      	ldr	r3, [pc, #156]	; (800a160 <HAL_FLASH_IRQHandler+0x13c>)
 800a0c2:	68db      	ldr	r3, [r3, #12]
 800a0c4:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 800a0c6:	4b26      	ldr	r3, [pc, #152]	; (800a160 <HAL_FLASH_IRQHandler+0x13c>)
 800a0c8:	7a1b      	ldrb	r3, [r3, #8]
 800a0ca:	b2db      	uxtb	r3, r3
 800a0cc:	4619      	mov	r1, r3
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f000 fb84 	bl	800a7dc <FLASH_Erase_Sector>
 800a0d4:	e023      	b.n	800a11e <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 800a0d6:	f04f 33ff 	mov.w	r3, #4294967295
 800a0da:	607b      	str	r3, [r7, #4]
 800a0dc:	4a20      	ldr	r2, [pc, #128]	; (800a160 <HAL_FLASH_IRQHandler+0x13c>)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800a0e2:	4b1f      	ldr	r3, [pc, #124]	; (800a160 <HAL_FLASH_IRQHandler+0x13c>)
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 800a0e8:	f000 fcb6 	bl	800aa58 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f000 f839 	bl	800a164 <HAL_FLASH_EndOfOperationCallback>
 800a0f2:	e014      	b.n	800a11e <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 800a0f4:	4b1a      	ldr	r3, [pc, #104]	; (800a160 <HAL_FLASH_IRQHandler+0x13c>)
 800a0f6:	781b      	ldrb	r3, [r3, #0]
 800a0f8:	b2db      	uxtb	r3, r3
 800a0fa:	2b02      	cmp	r3, #2
 800a0fc:	d107      	bne.n	800a10e <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 800a0fe:	f000 fcab 	bl	800aa58 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 800a102:	4b17      	ldr	r3, [pc, #92]	; (800a160 <HAL_FLASH_IRQHandler+0x13c>)
 800a104:	691b      	ldr	r3, [r3, #16]
 800a106:	4618      	mov	r0, r3
 800a108:	f000 f82c 	bl	800a164 <HAL_FLASH_EndOfOperationCallback>
 800a10c:	e004      	b.n	800a118 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 800a10e:	4b14      	ldr	r3, [pc, #80]	; (800a160 <HAL_FLASH_IRQHandler+0x13c>)
 800a110:	695b      	ldr	r3, [r3, #20]
 800a112:	4618      	mov	r0, r3
 800a114:	f000 f826 	bl	800a164 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800a118:	4b11      	ldr	r3, [pc, #68]	; (800a160 <HAL_FLASH_IRQHandler+0x13c>)
 800a11a:	2200      	movs	r2, #0
 800a11c:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 800a11e:	4b10      	ldr	r3, [pc, #64]	; (800a160 <HAL_FLASH_IRQHandler+0x13c>)
 800a120:	781b      	ldrb	r3, [r3, #0]
 800a122:	b2db      	uxtb	r3, r3
 800a124:	2b00      	cmp	r3, #0
 800a126:	d114      	bne.n	800a152 <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 800a128:	4b0c      	ldr	r3, [pc, #48]	; (800a15c <HAL_FLASH_IRQHandler+0x138>)
 800a12a:	691b      	ldr	r3, [r3, #16]
 800a12c:	4a0b      	ldr	r2, [pc, #44]	; (800a15c <HAL_FLASH_IRQHandler+0x138>)
 800a12e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a132:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 800a134:	4b09      	ldr	r3, [pc, #36]	; (800a15c <HAL_FLASH_IRQHandler+0x138>)
 800a136:	691b      	ldr	r3, [r3, #16]
 800a138:	4a08      	ldr	r2, [pc, #32]	; (800a15c <HAL_FLASH_IRQHandler+0x138>)
 800a13a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a13e:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 800a140:	4b06      	ldr	r3, [pc, #24]	; (800a15c <HAL_FLASH_IRQHandler+0x138>)
 800a142:	691b      	ldr	r3, [r3, #16]
 800a144:	4a05      	ldr	r2, [pc, #20]	; (800a15c <HAL_FLASH_IRQHandler+0x138>)
 800a146:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a14a:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800a14c:	4b04      	ldr	r3, [pc, #16]	; (800a160 <HAL_FLASH_IRQHandler+0x13c>)
 800a14e:	2200      	movs	r2, #0
 800a150:	761a      	strb	r2, [r3, #24]
  }
}
 800a152:	bf00      	nop
 800a154:	3708      	adds	r7, #8
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}
 800a15a:	bf00      	nop
 800a15c:	40023c00 	.word	0x40023c00
 800a160:	20000d9c 	.word	0x20000d9c

0800a164 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 800a164:	b480      	push	{r7}
 800a166:	b083      	sub	sp, #12
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 800a16c:	bf00      	nop
 800a16e:	370c      	adds	r7, #12
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr

0800a178 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 800a178:	b480      	push	{r7}
 800a17a:	b083      	sub	sp, #12
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 800a180:	bf00      	nop
 800a182:	370c      	adds	r7, #12
 800a184:	46bd      	mov	sp, r7
 800a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18a:	4770      	bx	lr

0800a18c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b083      	sub	sp, #12
 800a190:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800a192:	2300      	movs	r3, #0
 800a194:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800a196:	4b0b      	ldr	r3, [pc, #44]	; (800a1c4 <HAL_FLASH_Unlock+0x38>)
 800a198:	691b      	ldr	r3, [r3, #16]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	da0b      	bge.n	800a1b6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800a19e:	4b09      	ldr	r3, [pc, #36]	; (800a1c4 <HAL_FLASH_Unlock+0x38>)
 800a1a0:	4a09      	ldr	r2, [pc, #36]	; (800a1c8 <HAL_FLASH_Unlock+0x3c>)
 800a1a2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800a1a4:	4b07      	ldr	r3, [pc, #28]	; (800a1c4 <HAL_FLASH_Unlock+0x38>)
 800a1a6:	4a09      	ldr	r2, [pc, #36]	; (800a1cc <HAL_FLASH_Unlock+0x40>)
 800a1a8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800a1aa:	4b06      	ldr	r3, [pc, #24]	; (800a1c4 <HAL_FLASH_Unlock+0x38>)
 800a1ac:	691b      	ldr	r3, [r3, #16]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	da01      	bge.n	800a1b6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800a1b6:	79fb      	ldrb	r3, [r7, #7]
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	370c      	adds	r7, #12
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c2:	4770      	bx	lr
 800a1c4:	40023c00 	.word	0x40023c00
 800a1c8:	45670123 	.word	0x45670123
 800a1cc:	cdef89ab 	.word	0xcdef89ab

0800a1d0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800a1d4:	4b05      	ldr	r3, [pc, #20]	; (800a1ec <HAL_FLASH_Lock+0x1c>)
 800a1d6:	691b      	ldr	r3, [r3, #16]
 800a1d8:	4a04      	ldr	r2, [pc, #16]	; (800a1ec <HAL_FLASH_Lock+0x1c>)
 800a1da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a1de:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800a1e0:	2300      	movs	r3, #0
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr
 800a1ec:	40023c00 	.word	0x40023c00

0800a1f0 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 800a1f4:	4b09      	ldr	r3, [pc, #36]	; (800a21c <HAL_FLASH_OB_Unlock+0x2c>)
 800a1f6:	695b      	ldr	r3, [r3, #20]
 800a1f8:	f003 0301 	and.w	r3, r3, #1
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d007      	beq.n	800a210 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 800a200:	4b06      	ldr	r3, [pc, #24]	; (800a21c <HAL_FLASH_OB_Unlock+0x2c>)
 800a202:	4a07      	ldr	r2, [pc, #28]	; (800a220 <HAL_FLASH_OB_Unlock+0x30>)
 800a204:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800a206:	4b05      	ldr	r3, [pc, #20]	; (800a21c <HAL_FLASH_OB_Unlock+0x2c>)
 800a208:	4a06      	ldr	r2, [pc, #24]	; (800a224 <HAL_FLASH_OB_Unlock+0x34>)
 800a20a:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 800a20c:	2300      	movs	r3, #0
 800a20e:	e000      	b.n	800a212 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 800a210:	2301      	movs	r3, #1
}
 800a212:	4618      	mov	r0, r3
 800a214:	46bd      	mov	sp, r7
 800a216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21a:	4770      	bx	lr
 800a21c:	40023c00 	.word	0x40023c00
 800a220:	08192a3b 	.word	0x08192a3b
 800a224:	4c5d6e7f 	.word	0x4c5d6e7f

0800a228 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 800a228:	b480      	push	{r7}
 800a22a:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800a22c:	4b05      	ldr	r3, [pc, #20]	; (800a244 <HAL_FLASH_OB_Lock+0x1c>)
 800a22e:	695b      	ldr	r3, [r3, #20]
 800a230:	4a04      	ldr	r2, [pc, #16]	; (800a244 <HAL_FLASH_OB_Lock+0x1c>)
 800a232:	f043 0301 	orr.w	r3, r3, #1
 800a236:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 800a238:	2300      	movs	r3, #0
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr
 800a244:	40023c00 	.word	0x40023c00

0800a248 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	af00      	add	r7, sp, #0
  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 800a24c:	4b07      	ldr	r3, [pc, #28]	; (800a26c <HAL_FLASH_OB_Launch+0x24>)
 800a24e:	781b      	ldrb	r3, [r3, #0]
 800a250:	b2db      	uxtb	r3, r3
 800a252:	4a06      	ldr	r2, [pc, #24]	; (800a26c <HAL_FLASH_OB_Launch+0x24>)
 800a254:	f043 0302 	orr.w	r3, r3, #2
 800a258:	b2db      	uxtb	r3, r3
 800a25a:	7013      	strb	r3, [r2, #0]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE)); 
 800a25c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a260:	f000 f812 	bl	800a288 <FLASH_WaitForLastOperation>
 800a264:	4603      	mov	r3, r0
}
 800a266:	4618      	mov	r0, r3
 800a268:	bd80      	pop	{r7, pc}
 800a26a:	bf00      	nop
 800a26c:	40023c14 	.word	0x40023c14

0800a270 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 800a270:	b480      	push	{r7}
 800a272:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 800a274:	4b03      	ldr	r3, [pc, #12]	; (800a284 <HAL_FLASH_GetError+0x14>)
 800a276:	69db      	ldr	r3, [r3, #28]
}  
 800a278:	4618      	mov	r0, r3
 800a27a:	46bd      	mov	sp, r7
 800a27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a280:	4770      	bx	lr
 800a282:	bf00      	nop
 800a284:	20000d9c 	.word	0x20000d9c

0800a288 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800a288:	b580      	push	{r7, lr}
 800a28a:	b084      	sub	sp, #16
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a290:	2300      	movs	r3, #0
 800a292:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a294:	4b1a      	ldr	r3, [pc, #104]	; (800a300 <FLASH_WaitForLastOperation+0x78>)
 800a296:	2200      	movs	r2, #0
 800a298:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800a29a:	f7fc fabb 	bl	8006814 <HAL_GetTick>
 800a29e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800a2a0:	e010      	b.n	800a2c4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2a8:	d00c      	beq.n	800a2c4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d007      	beq.n	800a2c0 <FLASH_WaitForLastOperation+0x38>
 800a2b0:	f7fc fab0 	bl	8006814 <HAL_GetTick>
 800a2b4:	4602      	mov	r2, r0
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	1ad3      	subs	r3, r2, r3
 800a2ba:	687a      	ldr	r2, [r7, #4]
 800a2bc:	429a      	cmp	r2, r3
 800a2be:	d201      	bcs.n	800a2c4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800a2c0:	2303      	movs	r3, #3
 800a2c2:	e019      	b.n	800a2f8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800a2c4:	4b0f      	ldr	r3, [pc, #60]	; (800a304 <FLASH_WaitForLastOperation+0x7c>)
 800a2c6:	68db      	ldr	r3, [r3, #12]
 800a2c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d1e8      	bne.n	800a2a2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800a2d0:	4b0c      	ldr	r3, [pc, #48]	; (800a304 <FLASH_WaitForLastOperation+0x7c>)
 800a2d2:	68db      	ldr	r3, [r3, #12]
 800a2d4:	f003 0301 	and.w	r3, r3, #1
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d002      	beq.n	800a2e2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800a2dc:	4b09      	ldr	r3, [pc, #36]	; (800a304 <FLASH_WaitForLastOperation+0x7c>)
 800a2de:	2201      	movs	r2, #1
 800a2e0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800a2e2:	4b08      	ldr	r3, [pc, #32]	; (800a304 <FLASH_WaitForLastOperation+0x7c>)
 800a2e4:	68db      	ldr	r3, [r3, #12]
 800a2e6:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d003      	beq.n	800a2f6 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800a2ee:	f000 f8a5 	bl	800a43c <FLASH_SetErrorCode>
    return HAL_ERROR;
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	e000      	b.n	800a2f8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800a2f6:	2300      	movs	r3, #0
  
}  
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3710      	adds	r7, #16
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}
 800a300:	20000d9c 	.word	0x20000d9c
 800a304:	40023c00 	.word	0x40023c00

0800a308 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800a308:	b480      	push	{r7}
 800a30a:	b085      	sub	sp, #20
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	60f8      	str	r0, [r7, #12]
 800a310:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a314:	4b14      	ldr	r3, [pc, #80]	; (800a368 <FLASH_Program_DoubleWord+0x60>)
 800a316:	691b      	ldr	r3, [r3, #16]
 800a318:	4a13      	ldr	r2, [pc, #76]	; (800a368 <FLASH_Program_DoubleWord+0x60>)
 800a31a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a31e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800a320:	4b11      	ldr	r3, [pc, #68]	; (800a368 <FLASH_Program_DoubleWord+0x60>)
 800a322:	691b      	ldr	r3, [r3, #16]
 800a324:	4a10      	ldr	r2, [pc, #64]	; (800a368 <FLASH_Program_DoubleWord+0x60>)
 800a326:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a32a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a32c:	4b0e      	ldr	r3, [pc, #56]	; (800a368 <FLASH_Program_DoubleWord+0x60>)
 800a32e:	691b      	ldr	r3, [r3, #16]
 800a330:	4a0d      	ldr	r2, [pc, #52]	; (800a368 <FLASH_Program_DoubleWord+0x60>)
 800a332:	f043 0301 	orr.w	r3, r3, #1
 800a336:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	683a      	ldr	r2, [r7, #0]
 800a33c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800a33e:	f3bf 8f6f 	isb	sy
}
 800a342:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800a344:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a348:	f04f 0200 	mov.w	r2, #0
 800a34c:	f04f 0300 	mov.w	r3, #0
 800a350:	000a      	movs	r2, r1
 800a352:	2300      	movs	r3, #0
 800a354:	68f9      	ldr	r1, [r7, #12]
 800a356:	3104      	adds	r1, #4
 800a358:	4613      	mov	r3, r2
 800a35a:	600b      	str	r3, [r1, #0]
}
 800a35c:	bf00      	nop
 800a35e:	3714      	adds	r7, #20
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr
 800a368:	40023c00 	.word	0x40023c00

0800a36c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b083      	sub	sp, #12
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
 800a374:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a376:	4b0d      	ldr	r3, [pc, #52]	; (800a3ac <FLASH_Program_Word+0x40>)
 800a378:	691b      	ldr	r3, [r3, #16]
 800a37a:	4a0c      	ldr	r2, [pc, #48]	; (800a3ac <FLASH_Program_Word+0x40>)
 800a37c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a380:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800a382:	4b0a      	ldr	r3, [pc, #40]	; (800a3ac <FLASH_Program_Word+0x40>)
 800a384:	691b      	ldr	r3, [r3, #16]
 800a386:	4a09      	ldr	r2, [pc, #36]	; (800a3ac <FLASH_Program_Word+0x40>)
 800a388:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a38c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a38e:	4b07      	ldr	r3, [pc, #28]	; (800a3ac <FLASH_Program_Word+0x40>)
 800a390:	691b      	ldr	r3, [r3, #16]
 800a392:	4a06      	ldr	r2, [pc, #24]	; (800a3ac <FLASH_Program_Word+0x40>)
 800a394:	f043 0301 	orr.w	r3, r3, #1
 800a398:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	683a      	ldr	r2, [r7, #0]
 800a39e:	601a      	str	r2, [r3, #0]
}
 800a3a0:	bf00      	nop
 800a3a2:	370c      	adds	r7, #12
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr
 800a3ac:	40023c00 	.word	0x40023c00

0800a3b0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b083      	sub	sp, #12
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	460b      	mov	r3, r1
 800a3ba:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a3bc:	4b0d      	ldr	r3, [pc, #52]	; (800a3f4 <FLASH_Program_HalfWord+0x44>)
 800a3be:	691b      	ldr	r3, [r3, #16]
 800a3c0:	4a0c      	ldr	r2, [pc, #48]	; (800a3f4 <FLASH_Program_HalfWord+0x44>)
 800a3c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800a3c8:	4b0a      	ldr	r3, [pc, #40]	; (800a3f4 <FLASH_Program_HalfWord+0x44>)
 800a3ca:	691b      	ldr	r3, [r3, #16]
 800a3cc:	4a09      	ldr	r2, [pc, #36]	; (800a3f4 <FLASH_Program_HalfWord+0x44>)
 800a3ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a3d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a3d4:	4b07      	ldr	r3, [pc, #28]	; (800a3f4 <FLASH_Program_HalfWord+0x44>)
 800a3d6:	691b      	ldr	r3, [r3, #16]
 800a3d8:	4a06      	ldr	r2, [pc, #24]	; (800a3f4 <FLASH_Program_HalfWord+0x44>)
 800a3da:	f043 0301 	orr.w	r3, r3, #1
 800a3de:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	887a      	ldrh	r2, [r7, #2]
 800a3e4:	801a      	strh	r2, [r3, #0]
}
 800a3e6:	bf00      	nop
 800a3e8:	370c      	adds	r7, #12
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f0:	4770      	bx	lr
 800a3f2:	bf00      	nop
 800a3f4:	40023c00 	.word	0x40023c00

0800a3f8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b083      	sub	sp, #12
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	460b      	mov	r3, r1
 800a402:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a404:	4b0c      	ldr	r3, [pc, #48]	; (800a438 <FLASH_Program_Byte+0x40>)
 800a406:	691b      	ldr	r3, [r3, #16]
 800a408:	4a0b      	ldr	r2, [pc, #44]	; (800a438 <FLASH_Program_Byte+0x40>)
 800a40a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a40e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800a410:	4b09      	ldr	r3, [pc, #36]	; (800a438 <FLASH_Program_Byte+0x40>)
 800a412:	4a09      	ldr	r2, [pc, #36]	; (800a438 <FLASH_Program_Byte+0x40>)
 800a414:	691b      	ldr	r3, [r3, #16]
 800a416:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a418:	4b07      	ldr	r3, [pc, #28]	; (800a438 <FLASH_Program_Byte+0x40>)
 800a41a:	691b      	ldr	r3, [r3, #16]
 800a41c:	4a06      	ldr	r2, [pc, #24]	; (800a438 <FLASH_Program_Byte+0x40>)
 800a41e:	f043 0301 	orr.w	r3, r3, #1
 800a422:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	78fa      	ldrb	r2, [r7, #3]
 800a428:	701a      	strb	r2, [r3, #0]
}
 800a42a:	bf00      	nop
 800a42c:	370c      	adds	r7, #12
 800a42e:	46bd      	mov	sp, r7
 800a430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a434:	4770      	bx	lr
 800a436:	bf00      	nop
 800a438:	40023c00 	.word	0x40023c00

0800a43c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800a43c:	b480      	push	{r7}
 800a43e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800a440:	4b27      	ldr	r3, [pc, #156]	; (800a4e0 <FLASH_SetErrorCode+0xa4>)
 800a442:	68db      	ldr	r3, [r3, #12]
 800a444:	f003 0310 	and.w	r3, r3, #16
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d008      	beq.n	800a45e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800a44c:	4b25      	ldr	r3, [pc, #148]	; (800a4e4 <FLASH_SetErrorCode+0xa8>)
 800a44e:	69db      	ldr	r3, [r3, #28]
 800a450:	f043 0310 	orr.w	r3, r3, #16
 800a454:	4a23      	ldr	r2, [pc, #140]	; (800a4e4 <FLASH_SetErrorCode+0xa8>)
 800a456:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800a458:	4b21      	ldr	r3, [pc, #132]	; (800a4e0 <FLASH_SetErrorCode+0xa4>)
 800a45a:	2210      	movs	r2, #16
 800a45c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800a45e:	4b20      	ldr	r3, [pc, #128]	; (800a4e0 <FLASH_SetErrorCode+0xa4>)
 800a460:	68db      	ldr	r3, [r3, #12]
 800a462:	f003 0320 	and.w	r3, r3, #32
 800a466:	2b00      	cmp	r3, #0
 800a468:	d008      	beq.n	800a47c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800a46a:	4b1e      	ldr	r3, [pc, #120]	; (800a4e4 <FLASH_SetErrorCode+0xa8>)
 800a46c:	69db      	ldr	r3, [r3, #28]
 800a46e:	f043 0308 	orr.w	r3, r3, #8
 800a472:	4a1c      	ldr	r2, [pc, #112]	; (800a4e4 <FLASH_SetErrorCode+0xa8>)
 800a474:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800a476:	4b1a      	ldr	r3, [pc, #104]	; (800a4e0 <FLASH_SetErrorCode+0xa4>)
 800a478:	2220      	movs	r2, #32
 800a47a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800a47c:	4b18      	ldr	r3, [pc, #96]	; (800a4e0 <FLASH_SetErrorCode+0xa4>)
 800a47e:	68db      	ldr	r3, [r3, #12]
 800a480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a484:	2b00      	cmp	r3, #0
 800a486:	d008      	beq.n	800a49a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800a488:	4b16      	ldr	r3, [pc, #88]	; (800a4e4 <FLASH_SetErrorCode+0xa8>)
 800a48a:	69db      	ldr	r3, [r3, #28]
 800a48c:	f043 0304 	orr.w	r3, r3, #4
 800a490:	4a14      	ldr	r2, [pc, #80]	; (800a4e4 <FLASH_SetErrorCode+0xa8>)
 800a492:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800a494:	4b12      	ldr	r3, [pc, #72]	; (800a4e0 <FLASH_SetErrorCode+0xa4>)
 800a496:	2240      	movs	r2, #64	; 0x40
 800a498:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800a49a:	4b11      	ldr	r3, [pc, #68]	; (800a4e0 <FLASH_SetErrorCode+0xa4>)
 800a49c:	68db      	ldr	r3, [r3, #12]
 800a49e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d008      	beq.n	800a4b8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800a4a6:	4b0f      	ldr	r3, [pc, #60]	; (800a4e4 <FLASH_SetErrorCode+0xa8>)
 800a4a8:	69db      	ldr	r3, [r3, #28]
 800a4aa:	f043 0302 	orr.w	r3, r3, #2
 800a4ae:	4a0d      	ldr	r2, [pc, #52]	; (800a4e4 <FLASH_SetErrorCode+0xa8>)
 800a4b0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800a4b2:	4b0b      	ldr	r3, [pc, #44]	; (800a4e0 <FLASH_SetErrorCode+0xa4>)
 800a4b4:	2280      	movs	r2, #128	; 0x80
 800a4b6:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800a4b8:	4b09      	ldr	r3, [pc, #36]	; (800a4e0 <FLASH_SetErrorCode+0xa4>)
 800a4ba:	68db      	ldr	r3, [r3, #12]
 800a4bc:	f003 0302 	and.w	r3, r3, #2
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d008      	beq.n	800a4d6 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800a4c4:	4b07      	ldr	r3, [pc, #28]	; (800a4e4 <FLASH_SetErrorCode+0xa8>)
 800a4c6:	69db      	ldr	r3, [r3, #28]
 800a4c8:	f043 0320 	orr.w	r3, r3, #32
 800a4cc:	4a05      	ldr	r2, [pc, #20]	; (800a4e4 <FLASH_SetErrorCode+0xa8>)
 800a4ce:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800a4d0:	4b03      	ldr	r3, [pc, #12]	; (800a4e0 <FLASH_SetErrorCode+0xa4>)
 800a4d2:	2202      	movs	r2, #2
 800a4d4:	60da      	str	r2, [r3, #12]
  }
}
 800a4d6:	bf00      	nop
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr
 800a4e0:	40023c00 	.word	0x40023c00
 800a4e4:	20000d9c 	.word	0x20000d9c

0800a4e8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b084      	sub	sp, #16
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
 800a4f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a4fa:	4b31      	ldr	r3, [pc, #196]	; (800a5c0 <HAL_FLASHEx_Erase+0xd8>)
 800a4fc:	7e1b      	ldrb	r3, [r3, #24]
 800a4fe:	2b01      	cmp	r3, #1
 800a500:	d101      	bne.n	800a506 <HAL_FLASHEx_Erase+0x1e>
 800a502:	2302      	movs	r3, #2
 800a504:	e058      	b.n	800a5b8 <HAL_FLASHEx_Erase+0xd0>
 800a506:	4b2e      	ldr	r3, [pc, #184]	; (800a5c0 <HAL_FLASHEx_Erase+0xd8>)
 800a508:	2201      	movs	r2, #1
 800a50a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a50c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a510:	f7ff feba 	bl	800a288 <FLASH_WaitForLastOperation>
 800a514:	4603      	mov	r3, r0
 800a516:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800a518:	7bfb      	ldrb	r3, [r7, #15]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d148      	bne.n	800a5b0 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	f04f 32ff 	mov.w	r2, #4294967295
 800a524:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	2b01      	cmp	r3, #1
 800a52c:	d115      	bne.n	800a55a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	691b      	ldr	r3, [r3, #16]
 800a532:	b2da      	uxtb	r2, r3
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	685b      	ldr	r3, [r3, #4]
 800a538:	4619      	mov	r1, r3
 800a53a:	4610      	mov	r0, r2
 800a53c:	f000 f92b 	bl	800a796 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a540:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a544:	f7ff fea0 	bl	800a288 <FLASH_WaitForLastOperation>
 800a548:	4603      	mov	r3, r0
 800a54a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800a54c:	4b1d      	ldr	r3, [pc, #116]	; (800a5c4 <HAL_FLASHEx_Erase+0xdc>)
 800a54e:	691b      	ldr	r3, [r3, #16]
 800a550:	4a1c      	ldr	r2, [pc, #112]	; (800a5c4 <HAL_FLASHEx_Erase+0xdc>)
 800a552:	f023 0304 	bic.w	r3, r3, #4
 800a556:	6113      	str	r3, [r2, #16]
 800a558:	e028      	b.n	800a5ac <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	689b      	ldr	r3, [r3, #8]
 800a55e:	60bb      	str	r3, [r7, #8]
 800a560:	e01c      	b.n	800a59c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	691b      	ldr	r3, [r3, #16]
 800a566:	b2db      	uxtb	r3, r3
 800a568:	4619      	mov	r1, r3
 800a56a:	68b8      	ldr	r0, [r7, #8]
 800a56c:	f000 f936 	bl	800a7dc <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a570:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a574:	f7ff fe88 	bl	800a288 <FLASH_WaitForLastOperation>
 800a578:	4603      	mov	r3, r0
 800a57a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800a57c:	4b11      	ldr	r3, [pc, #68]	; (800a5c4 <HAL_FLASHEx_Erase+0xdc>)
 800a57e:	691b      	ldr	r3, [r3, #16]
 800a580:	4a10      	ldr	r2, [pc, #64]	; (800a5c4 <HAL_FLASHEx_Erase+0xdc>)
 800a582:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800a586:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800a588:	7bfb      	ldrb	r3, [r7, #15]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d003      	beq.n	800a596 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	68ba      	ldr	r2, [r7, #8]
 800a592:	601a      	str	r2, [r3, #0]
          break;
 800a594:	e00a      	b.n	800a5ac <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	3301      	adds	r3, #1
 800a59a:	60bb      	str	r3, [r7, #8]
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	68da      	ldr	r2, [r3, #12]
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	689b      	ldr	r3, [r3, #8]
 800a5a4:	4413      	add	r3, r2
 800a5a6:	68ba      	ldr	r2, [r7, #8]
 800a5a8:	429a      	cmp	r2, r3
 800a5aa:	d3da      	bcc.n	800a562 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800a5ac:	f000 fa54 	bl	800aa58 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a5b0:	4b03      	ldr	r3, [pc, #12]	; (800a5c0 <HAL_FLASHEx_Erase+0xd8>)
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	761a      	strb	r2, [r3, #24]

  return status;
 800a5b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3710      	adds	r7, #16
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}
 800a5c0:	20000d9c 	.word	0x20000d9c
 800a5c4:	40023c00 	.word	0x40023c00

0800a5c8 <HAL_FLASHEx_Erase_IT>:
  *         contains the configuration information for the erasing.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b084      	sub	sp, #16
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a5d4:	4b25      	ldr	r3, [pc, #148]	; (800a66c <HAL_FLASHEx_Erase_IT+0xa4>)
 800a5d6:	7e1b      	ldrb	r3, [r3, #24]
 800a5d8:	2b01      	cmp	r3, #1
 800a5da:	d101      	bne.n	800a5e0 <HAL_FLASHEx_Erase_IT+0x18>
 800a5dc:	2302      	movs	r3, #2
 800a5de:	e040      	b.n	800a662 <HAL_FLASHEx_Erase_IT+0x9a>
 800a5e0:	4b22      	ldr	r3, [pc, #136]	; (800a66c <HAL_FLASHEx_Erase_IT+0xa4>)
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Enable End of FLASH Operation interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
 800a5e6:	4b22      	ldr	r3, [pc, #136]	; (800a670 <HAL_FLASHEx_Erase_IT+0xa8>)
 800a5e8:	691b      	ldr	r3, [r3, #16]
 800a5ea:	4a21      	ldr	r2, [pc, #132]	; (800a670 <HAL_FLASHEx_Erase_IT+0xa8>)
 800a5ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a5f0:	6113      	str	r3, [r2, #16]

  /* Enable Error source interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
 800a5f2:	4b1f      	ldr	r3, [pc, #124]	; (800a670 <HAL_FLASHEx_Erase_IT+0xa8>)
 800a5f4:	691b      	ldr	r3, [r3, #16]
 800a5f6:	4a1e      	ldr	r2, [pc, #120]	; (800a670 <HAL_FLASHEx_Erase_IT+0xa8>)
 800a5f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a5fc:	6113      	str	r3, [r2, #16]

  /* Clear pending flags (if any) */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP    | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | \
 800a5fe:	4b1c      	ldr	r3, [pc, #112]	; (800a670 <HAL_FLASHEx_Erase_IT+0xa8>)
 800a600:	22f3      	movs	r2, #243	; 0xf3
 800a602:	60da      	str	r2, [r3, #12]
                         FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	2b01      	cmp	r3, #1
 800a60a:	d110      	bne.n	800a62e <HAL_FLASHEx_Erase_IT+0x66>
  {
    /*Mass erase to be done*/
    pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE;
 800a60c:	4b17      	ldr	r3, [pc, #92]	; (800a66c <HAL_FLASHEx_Erase_IT+0xa4>)
 800a60e:	2202      	movs	r2, #2
 800a610:	701a      	strb	r2, [r3, #0]
    pFlash.Bank = pEraseInit->Banks;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	685b      	ldr	r3, [r3, #4]
 800a616:	4a15      	ldr	r2, [pc, #84]	; (800a66c <HAL_FLASHEx_Erase_IT+0xa4>)
 800a618:	6113      	str	r3, [r2, #16]
    FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	691b      	ldr	r3, [r3, #16]
 800a61e:	b2da      	uxtb	r2, r3
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	685b      	ldr	r3, [r3, #4]
 800a624:	4619      	mov	r1, r3
 800a626:	4610      	mov	r0, r2
 800a628:	f000 f8b5 	bl	800a796 <FLASH_MassErase>
 800a62c:	e018      	b.n	800a660 <HAL_FLASHEx_Erase_IT+0x98>
    /* Erase by sector to be done*/

    /* Check the parameters */
    assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

    pFlash.ProcedureOnGoing = FLASH_PROC_SECTERASE;
 800a62e:	4b0f      	ldr	r3, [pc, #60]	; (800a66c <HAL_FLASHEx_Erase_IT+0xa4>)
 800a630:	2201      	movs	r2, #1
 800a632:	701a      	strb	r2, [r3, #0]
    pFlash.NbSectorsToErase = pEraseInit->NbSectors;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	68db      	ldr	r3, [r3, #12]
 800a638:	4a0c      	ldr	r2, [pc, #48]	; (800a66c <HAL_FLASHEx_Erase_IT+0xa4>)
 800a63a:	6053      	str	r3, [r2, #4]
    pFlash.Sector = pEraseInit->Sector;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	689b      	ldr	r3, [r3, #8]
 800a640:	4a0a      	ldr	r2, [pc, #40]	; (800a66c <HAL_FLASHEx_Erase_IT+0xa4>)
 800a642:	60d3      	str	r3, [r2, #12]
    pFlash.VoltageForErase = (uint8_t)pEraseInit->VoltageRange;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	691b      	ldr	r3, [r3, #16]
 800a648:	b2da      	uxtb	r2, r3
 800a64a:	4b08      	ldr	r3, [pc, #32]	; (800a66c <HAL_FLASHEx_Erase_IT+0xa4>)
 800a64c:	721a      	strb	r2, [r3, #8]

    /*Erase 1st sector and wait for IT*/
    FLASH_Erase_Sector(pEraseInit->Sector, pEraseInit->VoltageRange);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	689a      	ldr	r2, [r3, #8]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	691b      	ldr	r3, [r3, #16]
 800a656:	b2db      	uxtb	r3, r3
 800a658:	4619      	mov	r1, r3
 800a65a:	4610      	mov	r0, r2
 800a65c:	f000 f8be 	bl	800a7dc <FLASH_Erase_Sector>
  }

  return status;
 800a660:	7bfb      	ldrb	r3, [r7, #15]
}
 800a662:	4618      	mov	r0, r3
 800a664:	3710      	adds	r7, #16
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}
 800a66a:	bf00      	nop
 800a66c:	20000d9c 	.word	0x20000d9c
 800a670:	40023c00 	.word	0x40023c00

0800a674 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b084      	sub	sp, #16
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a67c:	2301      	movs	r3, #1
 800a67e:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a680:	4b32      	ldr	r3, [pc, #200]	; (800a74c <HAL_FLASHEx_OBProgram+0xd8>)
 800a682:	7e1b      	ldrb	r3, [r3, #24]
 800a684:	2b01      	cmp	r3, #1
 800a686:	d101      	bne.n	800a68c <HAL_FLASHEx_OBProgram+0x18>
 800a688:	2302      	movs	r3, #2
 800a68a:	e05b      	b.n	800a744 <HAL_FLASHEx_OBProgram+0xd0>
 800a68c:	4b2f      	ldr	r3, [pc, #188]	; (800a74c <HAL_FLASHEx_OBProgram+0xd8>)
 800a68e:	2201      	movs	r2, #1
 800a690:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /*Write protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f003 0301 	and.w	r3, r3, #1
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d018      	beq.n	800a6d0 <HAL_FLASHEx_OBProgram+0x5c>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	685b      	ldr	r3, [r3, #4]
 800a6a2:	2b01      	cmp	r3, #1
 800a6a4:	d10a      	bne.n	800a6bc <HAL_FLASHEx_OBProgram+0x48>
    {
      /*Enable of Write protection on the selected Sector*/
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector, pOBInit->Banks);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	689a      	ldr	r2, [r3, #8]
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	68db      	ldr	r3, [r3, #12]
 800a6ae:	4619      	mov	r1, r3
 800a6b0:	4610      	mov	r0, r2
 800a6b2:	f000 f8db 	bl	800a86c <FLASH_OB_EnableWRP>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	73fb      	strb	r3, [r7, #15]
 800a6ba:	e009      	b.n	800a6d0 <HAL_FLASHEx_OBProgram+0x5c>
    }
    else
    {
      /*Disable of Write protection on the selected Sector*/
      status = FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	689a      	ldr	r2, [r3, #8]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	68db      	ldr	r3, [r3, #12]
 800a6c4:	4619      	mov	r1, r3
 800a6c6:	4610      	mov	r0, r2
 800a6c8:	f000 f8f2 	bl	800a8b0 <FLASH_OB_DisableWRP>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	73fb      	strb	r3, [r7, #15]
    }
  }

  /*Read protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f003 0302 	and.w	r3, r3, #2
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d007      	beq.n	800a6ec <HAL_FLASHEx_OBProgram+0x78>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	691b      	ldr	r3, [r3, #16]
 800a6e0:	b2db      	uxtb	r3, r3
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f000 f904 	bl	800a8f0 <FLASH_OB_RDP_LevelConfig>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	73fb      	strb	r3, [r7, #15]
  }

  /*USER  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f003 0304 	and.w	r3, r3, #4
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d013      	beq.n	800a720 <HAL_FLASHEx_OBProgram+0xac>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	7e1b      	ldrb	r3, [r3, #24]
 800a6fc:	f003 0320 	and.w	r3, r3, #32
 800a700:	b2d8      	uxtb	r0, r3
                                 pOBInit->USERConfig & OB_STOP_NO_RST,
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 800a706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a70a:	b2d9      	uxtb	r1, r3
                                 pOBInit->USERConfig & OB_STDBY_NO_RST);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 800a710:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a714:	b2db      	uxtb	r3, r3
 800a716:	461a      	mov	r2, r3
 800a718:	f000 f904 	bl	800a924 <FLASH_OB_UserConfig>
 800a71c:	4603      	mov	r3, r0
 800a71e:	73fb      	strb	r3, [r7, #15]
  }

  /*BOR Level  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f003 0308 	and.w	r3, r3, #8
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d007      	beq.n	800a73c <HAL_FLASHEx_OBProgram+0xc8>
  {
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	695b      	ldr	r3, [r3, #20]
 800a730:	b2db      	uxtb	r3, r3
 800a732:	4618      	mov	r0, r3
 800a734:	f000 f926 	bl	800a984 <FLASH_OB_BOR_LevelConfig>
 800a738:	4603      	mov	r3, r0
 800a73a:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a73c:	4b03      	ldr	r3, [pc, #12]	; (800a74c <HAL_FLASHEx_OBProgram+0xd8>)
 800a73e:	2200      	movs	r2, #0
 800a740:	761a      	strb	r2, [r3, #24]

  return status;
 800a742:	7bfb      	ldrb	r3, [r7, #15]
}
 800a744:	4618      	mov	r0, r3
 800a746:	3710      	adds	r7, #16
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}
 800a74c:	20000d9c 	.word	0x20000d9c

0800a750 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b082      	sub	sp, #8
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	220f      	movs	r2, #15
 800a75c:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 800a75e:	f000 f93f 	bl	800a9e0 <FLASH_OB_GetWRP>
 800a762:	4603      	mov	r3, r0
 800a764:	461a      	mov	r2, r3
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 800a76a:	f000 f945 	bl	800a9f8 <FLASH_OB_GetRDP>
 800a76e:	4603      	mov	r3, r0
 800a770:	461a      	mov	r2, r3
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 800a776:	f000 f923 	bl	800a9c0 <FLASH_OB_GetUser>
 800a77a:	4603      	mov	r3, r0
 800a77c:	461a      	mov	r2, r3
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 800a782:	f000 f959 	bl	800aa38 <FLASH_OB_GetBOR>
 800a786:	4603      	mov	r3, r0
 800a788:	461a      	mov	r2, r3
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	615a      	str	r2, [r3, #20]
}
 800a78e:	bf00      	nop
 800a790:	3708      	adds	r7, #8
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}

0800a796 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800a796:	b480      	push	{r7}
 800a798:	b083      	sub	sp, #12
 800a79a:	af00      	add	r7, sp, #0
 800a79c:	4603      	mov	r3, r0
 800a79e:	6039      	str	r1, [r7, #0]
 800a7a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a7a2:	4b0d      	ldr	r3, [pc, #52]	; (800a7d8 <FLASH_MassErase+0x42>)
 800a7a4:	691b      	ldr	r3, [r3, #16]
 800a7a6:	4a0c      	ldr	r2, [pc, #48]	; (800a7d8 <FLASH_MassErase+0x42>)
 800a7a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7ac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800a7ae:	4b0a      	ldr	r3, [pc, #40]	; (800a7d8 <FLASH_MassErase+0x42>)
 800a7b0:	691b      	ldr	r3, [r3, #16]
 800a7b2:	4a09      	ldr	r2, [pc, #36]	; (800a7d8 <FLASH_MassErase+0x42>)
 800a7b4:	f043 0304 	orr.w	r3, r3, #4
 800a7b8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800a7ba:	4b07      	ldr	r3, [pc, #28]	; (800a7d8 <FLASH_MassErase+0x42>)
 800a7bc:	691a      	ldr	r2, [r3, #16]
 800a7be:	79fb      	ldrb	r3, [r7, #7]
 800a7c0:	021b      	lsls	r3, r3, #8
 800a7c2:	4313      	orrs	r3, r2
 800a7c4:	4a04      	ldr	r2, [pc, #16]	; (800a7d8 <FLASH_MassErase+0x42>)
 800a7c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a7ca:	6113      	str	r3, [r2, #16]
}
 800a7cc:	bf00      	nop
 800a7ce:	370c      	adds	r7, #12
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d6:	4770      	bx	lr
 800a7d8:	40023c00 	.word	0x40023c00

0800a7dc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b085      	sub	sp, #20
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	460b      	mov	r3, r1
 800a7e6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800a7ec:	78fb      	ldrb	r3, [r7, #3]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d102      	bne.n	800a7f8 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	60fb      	str	r3, [r7, #12]
 800a7f6:	e010      	b.n	800a81a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800a7f8:	78fb      	ldrb	r3, [r7, #3]
 800a7fa:	2b01      	cmp	r3, #1
 800a7fc:	d103      	bne.n	800a806 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800a7fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a802:	60fb      	str	r3, [r7, #12]
 800a804:	e009      	b.n	800a81a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800a806:	78fb      	ldrb	r3, [r7, #3]
 800a808:	2b02      	cmp	r3, #2
 800a80a:	d103      	bne.n	800a814 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800a80c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a810:	60fb      	str	r3, [r7, #12]
 800a812:	e002      	b.n	800a81a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800a814:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a818:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a81a:	4b13      	ldr	r3, [pc, #76]	; (800a868 <FLASH_Erase_Sector+0x8c>)
 800a81c:	691b      	ldr	r3, [r3, #16]
 800a81e:	4a12      	ldr	r2, [pc, #72]	; (800a868 <FLASH_Erase_Sector+0x8c>)
 800a820:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a824:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800a826:	4b10      	ldr	r3, [pc, #64]	; (800a868 <FLASH_Erase_Sector+0x8c>)
 800a828:	691a      	ldr	r2, [r3, #16]
 800a82a:	490f      	ldr	r1, [pc, #60]	; (800a868 <FLASH_Erase_Sector+0x8c>)
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	4313      	orrs	r3, r2
 800a830:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800a832:	4b0d      	ldr	r3, [pc, #52]	; (800a868 <FLASH_Erase_Sector+0x8c>)
 800a834:	691b      	ldr	r3, [r3, #16]
 800a836:	4a0c      	ldr	r2, [pc, #48]	; (800a868 <FLASH_Erase_Sector+0x8c>)
 800a838:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800a83c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800a83e:	4b0a      	ldr	r3, [pc, #40]	; (800a868 <FLASH_Erase_Sector+0x8c>)
 800a840:	691a      	ldr	r2, [r3, #16]
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	00db      	lsls	r3, r3, #3
 800a846:	4313      	orrs	r3, r2
 800a848:	4a07      	ldr	r2, [pc, #28]	; (800a868 <FLASH_Erase_Sector+0x8c>)
 800a84a:	f043 0302 	orr.w	r3, r3, #2
 800a84e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800a850:	4b05      	ldr	r3, [pc, #20]	; (800a868 <FLASH_Erase_Sector+0x8c>)
 800a852:	691b      	ldr	r3, [r3, #16]
 800a854:	4a04      	ldr	r2, [pc, #16]	; (800a868 <FLASH_Erase_Sector+0x8c>)
 800a856:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a85a:	6113      	str	r3, [r2, #16]
}
 800a85c:	bf00      	nop
 800a85e:	3714      	adds	r7, #20
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr
 800a868:	40023c00 	.word	0x40023c00

0800a86c <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b084      	sub	sp, #16
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
 800a874:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a876:	2300      	movs	r3, #0
 800a878:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a87a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a87e:	f7ff fd03 	bl	800a288 <FLASH_WaitForLastOperation>
 800a882:	4603      	mov	r3, r0
 800a884:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800a886:	7bfb      	ldrb	r3, [r7, #15]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d10a      	bne.n	800a8a2 <FLASH_OB_EnableWRP+0x36>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS &= (~WRPSector);
 800a88c:	4b07      	ldr	r3, [pc, #28]	; (800a8ac <FLASH_OB_EnableWRP+0x40>)
 800a88e:	881b      	ldrh	r3, [r3, #0]
 800a890:	b29a      	uxth	r2, r3
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	b29b      	uxth	r3, r3
 800a896:	43db      	mvns	r3, r3
 800a898:	b29b      	uxth	r3, r3
 800a89a:	4904      	ldr	r1, [pc, #16]	; (800a8ac <FLASH_OB_EnableWRP+0x40>)
 800a89c:	4013      	ands	r3, r2
 800a89e:	b29b      	uxth	r3, r3
 800a8a0:	800b      	strh	r3, [r1, #0]
  }

  return status;
 800a8a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3710      	adds	r7, #16
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}
 800a8ac:	40023c16 	.word	0x40023c16

0800a8b0 <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b084      	sub	sp, #16
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a8be:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a8c2:	f7ff fce1 	bl	800a288 <FLASH_WaitForLastOperation>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800a8ca:	7bfb      	ldrb	r3, [r7, #15]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d108      	bne.n	800a8e2 <FLASH_OB_DisableWRP+0x32>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS |= (uint16_t)WRPSector;
 800a8d0:	4b06      	ldr	r3, [pc, #24]	; (800a8ec <FLASH_OB_DisableWRP+0x3c>)
 800a8d2:	881b      	ldrh	r3, [r3, #0]
 800a8d4:	b29a      	uxth	r2, r3
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	b29b      	uxth	r3, r3
 800a8da:	4904      	ldr	r1, [pc, #16]	; (800a8ec <FLASH_OB_DisableWRP+0x3c>)
 800a8dc:	4313      	orrs	r3, r2
 800a8de:	b29b      	uxth	r3, r3
 800a8e0:	800b      	strh	r3, [r1, #0]
  }

  return status;
 800a8e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3710      	adds	r7, #16
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}
 800a8ec:	40023c16 	.word	0x40023c16

0800a8f0 <FLASH_OB_RDP_LevelConfig>:
  * @note WARNING: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b084      	sub	sp, #16
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a8fe:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a902:	f7ff fcc1 	bl	800a288 <FLASH_WaitForLastOperation>
 800a906:	4603      	mov	r3, r0
 800a908:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800a90a:	7bfb      	ldrb	r3, [r7, #15]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d102      	bne.n	800a916 <FLASH_OB_RDP_LevelConfig+0x26>
  {
    *(__IO uint8_t *)OPTCR_BYTE1_ADDRESS = Level;
 800a910:	4a03      	ldr	r2, [pc, #12]	; (800a920 <FLASH_OB_RDP_LevelConfig+0x30>)
 800a912:	79fb      	ldrb	r3, [r7, #7]
 800a914:	7013      	strb	r3, [r2, #0]
  }

  return status;
 800a916:	7bfb      	ldrb	r3, [r7, #15]
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3710      	adds	r7, #16
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}
 800a920:	40023c15 	.word	0x40023c15

0800a924 <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NO_RST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t Iwdg, uint8_t Stop, uint8_t Stdby)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b084      	sub	sp, #16
 800a928:	af00      	add	r7, sp, #0
 800a92a:	4603      	mov	r3, r0
 800a92c:	71fb      	strb	r3, [r7, #7]
 800a92e:	460b      	mov	r3, r1
 800a930:	71bb      	strb	r3, [r7, #6]
 800a932:	4613      	mov	r3, r2
 800a934:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
 800a936:	23ff      	movs	r3, #255	; 0xff
 800a938:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef status = HAL_OK;
 800a93a:	2300      	movs	r3, #0
 800a93c:	73bb      	strb	r3, [r7, #14]
  assert_param(IS_OB_IWDG_SOURCE(Iwdg));
  assert_param(IS_OB_STOP_SOURCE(Stop));
  assert_param(IS_OB_STDBY_SOURCE(Stdby));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a93e:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a942:	f7ff fca1 	bl	800a288 <FLASH_WaitForLastOperation>
 800a946:	4603      	mov	r3, r0
 800a948:	73bb      	strb	r3, [r7, #14]

  if (status == HAL_OK)
 800a94a:	7bbb      	ldrb	r3, [r7, #14]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d111      	bne.n	800a974 <FLASH_OB_UserConfig+0x50>
  {
    /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
    optiontmp = (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
 800a950:	4b0b      	ldr	r3, [pc, #44]	; (800a980 <FLASH_OB_UserConfig+0x5c>)
 800a952:	781b      	ldrb	r3, [r3, #0]
 800a954:	b2db      	uxtb	r3, r3
 800a956:	f003 031f 	and.w	r3, r3, #31
 800a95a:	73fb      	strb	r3, [r7, #15]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)optiontmp)));
 800a95c:	79ba      	ldrb	r2, [r7, #6]
 800a95e:	7bfb      	ldrb	r3, [r7, #15]
 800a960:	4313      	orrs	r3, r2
 800a962:	b2da      	uxtb	r2, r3
 800a964:	797b      	ldrb	r3, [r7, #5]
 800a966:	4313      	orrs	r3, r2
 800a968:	b2da      	uxtb	r2, r3
 800a96a:	4905      	ldr	r1, [pc, #20]	; (800a980 <FLASH_OB_UserConfig+0x5c>)
 800a96c:	79fb      	ldrb	r3, [r7, #7]
 800a96e:	4313      	orrs	r3, r2
 800a970:	b2db      	uxtb	r3, r3
 800a972:	700b      	strb	r3, [r1, #0]
  }

  return status;
 800a974:	7bbb      	ldrb	r3, [r7, #14]
}
 800a976:	4618      	mov	r0, r3
 800a978:	3710      	adds	r7, #16
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
 800a97e:	bf00      	nop
 800a980:	40023c14 	.word	0x40023c14

0800a984 <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
 800a984:	b480      	push	{r7}
 800a986:	b083      	sub	sp, #12
 800a988:	af00      	add	r7, sp, #0
 800a98a:	4603      	mov	r3, r0
 800a98c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 800a98e:	4b0b      	ldr	r3, [pc, #44]	; (800a9bc <FLASH_OB_BOR_LevelConfig+0x38>)
 800a990:	781b      	ldrb	r3, [r3, #0]
 800a992:	b2db      	uxtb	r3, r3
 800a994:	4a09      	ldr	r2, [pc, #36]	; (800a9bc <FLASH_OB_BOR_LevelConfig+0x38>)
 800a996:	f023 030c 	bic.w	r3, r3, #12
 800a99a:	b2db      	uxtb	r3, r3
 800a99c:	7013      	strb	r3, [r2, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= Level;
 800a99e:	4b07      	ldr	r3, [pc, #28]	; (800a9bc <FLASH_OB_BOR_LevelConfig+0x38>)
 800a9a0:	781b      	ldrb	r3, [r3, #0]
 800a9a2:	b2da      	uxtb	r2, r3
 800a9a4:	4905      	ldr	r1, [pc, #20]	; (800a9bc <FLASH_OB_BOR_LevelConfig+0x38>)
 800a9a6:	79fb      	ldrb	r3, [r7, #7]
 800a9a8:	4313      	orrs	r3, r2
 800a9aa:	b2db      	uxtb	r3, r3
 800a9ac:	700b      	strb	r3, [r1, #0]

  return HAL_OK;
 800a9ae:	2300      	movs	r3, #0

}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	370c      	adds	r7, #12
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr
 800a9bc:	40023c14 	.word	0x40023c14

0800a9c0 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 800a9c4:	4b05      	ldr	r3, [pc, #20]	; (800a9dc <FLASH_OB_GetUser+0x1c>)
 800a9c6:	695b      	ldr	r3, [r3, #20]
 800a9c8:	b2db      	uxtb	r3, r3
 800a9ca:	f023 031f 	bic.w	r3, r3, #31
 800a9ce:	b2db      	uxtb	r3, r3
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d8:	4770      	bx	lr
 800a9da:	bf00      	nop
 800a9dc:	40023c00 	.word	0x40023c00

0800a9e0 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 800a9e4:	4b03      	ldr	r3, [pc, #12]	; (800a9f4 <FLASH_OB_GetWRP+0x14>)
 800a9e6:	881b      	ldrh	r3, [r3, #0]
 800a9e8:	b29b      	uxth	r3, r3
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr
 800a9f4:	40023c16 	.word	0x40023c16

0800a9f8 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b083      	sub	sp, #12
 800a9fc:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 800a9fe:	23aa      	movs	r3, #170	; 0xaa
 800aa00:	71fb      	strb	r3, [r7, #7]

  if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2)
 800aa02:	4b0c      	ldr	r3, [pc, #48]	; (800aa34 <FLASH_OB_GetRDP+0x3c>)
 800aa04:	781b      	ldrb	r3, [r3, #0]
 800aa06:	b2db      	uxtb	r3, r3
 800aa08:	2bcc      	cmp	r3, #204	; 0xcc
 800aa0a:	d102      	bne.n	800aa12 <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 800aa0c:	23cc      	movs	r3, #204	; 0xcc
 800aa0e:	71fb      	strb	r3, [r7, #7]
 800aa10:	e009      	b.n	800aa26 <FLASH_OB_GetRDP+0x2e>
  }
  else if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0)
 800aa12:	4b08      	ldr	r3, [pc, #32]	; (800aa34 <FLASH_OB_GetRDP+0x3c>)
 800aa14:	781b      	ldrb	r3, [r3, #0]
 800aa16:	b2db      	uxtb	r3, r3
 800aa18:	2baa      	cmp	r3, #170	; 0xaa
 800aa1a:	d102      	bne.n	800aa22 <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 800aa1c:	23aa      	movs	r3, #170	; 0xaa
 800aa1e:	71fb      	strb	r3, [r7, #7]
 800aa20:	e001      	b.n	800aa26 <FLASH_OB_GetRDP+0x2e>
  }
  else
  {
    readstatus = OB_RDP_LEVEL_1;
 800aa22:	2355      	movs	r3, #85	; 0x55
 800aa24:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 800aa26:	79fb      	ldrb	r3, [r7, #7]
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	370c      	adds	r7, #12
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa32:	4770      	bx	lr
 800aa34:	40023c15 	.word	0x40023c15

0800aa38 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 800aa3c:	4b05      	ldr	r3, [pc, #20]	; (800aa54 <FLASH_OB_GetBOR+0x1c>)
 800aa3e:	781b      	ldrb	r3, [r3, #0]
 800aa40:	b2db      	uxtb	r3, r3
 800aa42:	f003 030c 	and.w	r3, r3, #12
 800aa46:	b2db      	uxtb	r3, r3
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa50:	4770      	bx	lr
 800aa52:	bf00      	nop
 800aa54:	40023c14 	.word	0x40023c14

0800aa58 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800aa58:	b480      	push	{r7}
 800aa5a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800aa5c:	4b20      	ldr	r3, [pc, #128]	; (800aae0 <FLASH_FlushCaches+0x88>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d017      	beq.n	800aa98 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800aa68:	4b1d      	ldr	r3, [pc, #116]	; (800aae0 <FLASH_FlushCaches+0x88>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	4a1c      	ldr	r2, [pc, #112]	; (800aae0 <FLASH_FlushCaches+0x88>)
 800aa6e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aa72:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800aa74:	4b1a      	ldr	r3, [pc, #104]	; (800aae0 <FLASH_FlushCaches+0x88>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	4a19      	ldr	r2, [pc, #100]	; (800aae0 <FLASH_FlushCaches+0x88>)
 800aa7a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800aa7e:	6013      	str	r3, [r2, #0]
 800aa80:	4b17      	ldr	r3, [pc, #92]	; (800aae0 <FLASH_FlushCaches+0x88>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	4a16      	ldr	r2, [pc, #88]	; (800aae0 <FLASH_FlushCaches+0x88>)
 800aa86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aa8a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800aa8c:	4b14      	ldr	r3, [pc, #80]	; (800aae0 <FLASH_FlushCaches+0x88>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	4a13      	ldr	r2, [pc, #76]	; (800aae0 <FLASH_FlushCaches+0x88>)
 800aa92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aa96:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800aa98:	4b11      	ldr	r3, [pc, #68]	; (800aae0 <FLASH_FlushCaches+0x88>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d017      	beq.n	800aad4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800aaa4:	4b0e      	ldr	r3, [pc, #56]	; (800aae0 <FLASH_FlushCaches+0x88>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4a0d      	ldr	r2, [pc, #52]	; (800aae0 <FLASH_FlushCaches+0x88>)
 800aaaa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aaae:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800aab0:	4b0b      	ldr	r3, [pc, #44]	; (800aae0 <FLASH_FlushCaches+0x88>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4a0a      	ldr	r2, [pc, #40]	; (800aae0 <FLASH_FlushCaches+0x88>)
 800aab6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800aaba:	6013      	str	r3, [r2, #0]
 800aabc:	4b08      	ldr	r3, [pc, #32]	; (800aae0 <FLASH_FlushCaches+0x88>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4a07      	ldr	r2, [pc, #28]	; (800aae0 <FLASH_FlushCaches+0x88>)
 800aac2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aac6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800aac8:	4b05      	ldr	r3, [pc, #20]	; (800aae0 <FLASH_FlushCaches+0x88>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	4a04      	ldr	r2, [pc, #16]	; (800aae0 <FLASH_FlushCaches+0x88>)
 800aace:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800aad2:	6013      	str	r3, [r2, #0]
  }
}
 800aad4:	bf00      	nop
 800aad6:	46bd      	mov	sp, r7
 800aad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aadc:	4770      	bx	lr
 800aade:	bf00      	nop
 800aae0:	40023c00 	.word	0x40023c00

0800aae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b089      	sub	sp, #36	; 0x24
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
 800aaec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800aafa:	2300      	movs	r3, #0
 800aafc:	61fb      	str	r3, [r7, #28]
 800aafe:	e16b      	b.n	800add8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800ab00:	2201      	movs	r2, #1
 800ab02:	69fb      	ldr	r3, [r7, #28]
 800ab04:	fa02 f303 	lsl.w	r3, r2, r3
 800ab08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	697a      	ldr	r2, [r7, #20]
 800ab10:	4013      	ands	r3, r2
 800ab12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800ab14:	693a      	ldr	r2, [r7, #16]
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	f040 815a 	bne.w	800add2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	685b      	ldr	r3, [r3, #4]
 800ab22:	f003 0303 	and.w	r3, r3, #3
 800ab26:	2b01      	cmp	r3, #1
 800ab28:	d005      	beq.n	800ab36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	685b      	ldr	r3, [r3, #4]
 800ab2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800ab32:	2b02      	cmp	r3, #2
 800ab34:	d130      	bne.n	800ab98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	689b      	ldr	r3, [r3, #8]
 800ab3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800ab3c:	69fb      	ldr	r3, [r7, #28]
 800ab3e:	005b      	lsls	r3, r3, #1
 800ab40:	2203      	movs	r2, #3
 800ab42:	fa02 f303 	lsl.w	r3, r2, r3
 800ab46:	43db      	mvns	r3, r3
 800ab48:	69ba      	ldr	r2, [r7, #24]
 800ab4a:	4013      	ands	r3, r2
 800ab4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	68da      	ldr	r2, [r3, #12]
 800ab52:	69fb      	ldr	r3, [r7, #28]
 800ab54:	005b      	lsls	r3, r3, #1
 800ab56:	fa02 f303 	lsl.w	r3, r2, r3
 800ab5a:	69ba      	ldr	r2, [r7, #24]
 800ab5c:	4313      	orrs	r3, r2
 800ab5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	69ba      	ldr	r2, [r7, #24]
 800ab64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	685b      	ldr	r3, [r3, #4]
 800ab6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ab6c:	2201      	movs	r2, #1
 800ab6e:	69fb      	ldr	r3, [r7, #28]
 800ab70:	fa02 f303 	lsl.w	r3, r2, r3
 800ab74:	43db      	mvns	r3, r3
 800ab76:	69ba      	ldr	r2, [r7, #24]
 800ab78:	4013      	ands	r3, r2
 800ab7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	685b      	ldr	r3, [r3, #4]
 800ab80:	091b      	lsrs	r3, r3, #4
 800ab82:	f003 0201 	and.w	r2, r3, #1
 800ab86:	69fb      	ldr	r3, [r7, #28]
 800ab88:	fa02 f303 	lsl.w	r3, r2, r3
 800ab8c:	69ba      	ldr	r2, [r7, #24]
 800ab8e:	4313      	orrs	r3, r2
 800ab90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	69ba      	ldr	r2, [r7, #24]
 800ab96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	685b      	ldr	r3, [r3, #4]
 800ab9c:	f003 0303 	and.w	r3, r3, #3
 800aba0:	2b03      	cmp	r3, #3
 800aba2:	d017      	beq.n	800abd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	68db      	ldr	r3, [r3, #12]
 800aba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800abaa:	69fb      	ldr	r3, [r7, #28]
 800abac:	005b      	lsls	r3, r3, #1
 800abae:	2203      	movs	r2, #3
 800abb0:	fa02 f303 	lsl.w	r3, r2, r3
 800abb4:	43db      	mvns	r3, r3
 800abb6:	69ba      	ldr	r2, [r7, #24]
 800abb8:	4013      	ands	r3, r2
 800abba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	689a      	ldr	r2, [r3, #8]
 800abc0:	69fb      	ldr	r3, [r7, #28]
 800abc2:	005b      	lsls	r3, r3, #1
 800abc4:	fa02 f303 	lsl.w	r3, r2, r3
 800abc8:	69ba      	ldr	r2, [r7, #24]
 800abca:	4313      	orrs	r3, r2
 800abcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	69ba      	ldr	r2, [r7, #24]
 800abd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	685b      	ldr	r3, [r3, #4]
 800abd8:	f003 0303 	and.w	r3, r3, #3
 800abdc:	2b02      	cmp	r3, #2
 800abde:	d123      	bne.n	800ac28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800abe0:	69fb      	ldr	r3, [r7, #28]
 800abe2:	08da      	lsrs	r2, r3, #3
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	3208      	adds	r2, #8
 800abe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800abee:	69fb      	ldr	r3, [r7, #28]
 800abf0:	f003 0307 	and.w	r3, r3, #7
 800abf4:	009b      	lsls	r3, r3, #2
 800abf6:	220f      	movs	r2, #15
 800abf8:	fa02 f303 	lsl.w	r3, r2, r3
 800abfc:	43db      	mvns	r3, r3
 800abfe:	69ba      	ldr	r2, [r7, #24]
 800ac00:	4013      	ands	r3, r2
 800ac02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	691a      	ldr	r2, [r3, #16]
 800ac08:	69fb      	ldr	r3, [r7, #28]
 800ac0a:	f003 0307 	and.w	r3, r3, #7
 800ac0e:	009b      	lsls	r3, r3, #2
 800ac10:	fa02 f303 	lsl.w	r3, r2, r3
 800ac14:	69ba      	ldr	r2, [r7, #24]
 800ac16:	4313      	orrs	r3, r2
 800ac18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ac1a:	69fb      	ldr	r3, [r7, #28]
 800ac1c:	08da      	lsrs	r2, r3, #3
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	3208      	adds	r2, #8
 800ac22:	69b9      	ldr	r1, [r7, #24]
 800ac24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ac2e:	69fb      	ldr	r3, [r7, #28]
 800ac30:	005b      	lsls	r3, r3, #1
 800ac32:	2203      	movs	r2, #3
 800ac34:	fa02 f303 	lsl.w	r3, r2, r3
 800ac38:	43db      	mvns	r3, r3
 800ac3a:	69ba      	ldr	r2, [r7, #24]
 800ac3c:	4013      	ands	r3, r2
 800ac3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	685b      	ldr	r3, [r3, #4]
 800ac44:	f003 0203 	and.w	r2, r3, #3
 800ac48:	69fb      	ldr	r3, [r7, #28]
 800ac4a:	005b      	lsls	r3, r3, #1
 800ac4c:	fa02 f303 	lsl.w	r3, r2, r3
 800ac50:	69ba      	ldr	r2, [r7, #24]
 800ac52:	4313      	orrs	r3, r2
 800ac54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	69ba      	ldr	r2, [r7, #24]
 800ac5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	f000 80b4 	beq.w	800add2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	60fb      	str	r3, [r7, #12]
 800ac6e:	4b60      	ldr	r3, [pc, #384]	; (800adf0 <HAL_GPIO_Init+0x30c>)
 800ac70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac72:	4a5f      	ldr	r2, [pc, #380]	; (800adf0 <HAL_GPIO_Init+0x30c>)
 800ac74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ac78:	6453      	str	r3, [r2, #68]	; 0x44
 800ac7a:	4b5d      	ldr	r3, [pc, #372]	; (800adf0 <HAL_GPIO_Init+0x30c>)
 800ac7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac82:	60fb      	str	r3, [r7, #12]
 800ac84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ac86:	4a5b      	ldr	r2, [pc, #364]	; (800adf4 <HAL_GPIO_Init+0x310>)
 800ac88:	69fb      	ldr	r3, [r7, #28]
 800ac8a:	089b      	lsrs	r3, r3, #2
 800ac8c:	3302      	adds	r3, #2
 800ac8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800ac94:	69fb      	ldr	r3, [r7, #28]
 800ac96:	f003 0303 	and.w	r3, r3, #3
 800ac9a:	009b      	lsls	r3, r3, #2
 800ac9c:	220f      	movs	r2, #15
 800ac9e:	fa02 f303 	lsl.w	r3, r2, r3
 800aca2:	43db      	mvns	r3, r3
 800aca4:	69ba      	ldr	r2, [r7, #24]
 800aca6:	4013      	ands	r3, r2
 800aca8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	4a52      	ldr	r2, [pc, #328]	; (800adf8 <HAL_GPIO_Init+0x314>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d02b      	beq.n	800ad0a <HAL_GPIO_Init+0x226>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	4a51      	ldr	r2, [pc, #324]	; (800adfc <HAL_GPIO_Init+0x318>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d025      	beq.n	800ad06 <HAL_GPIO_Init+0x222>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	4a50      	ldr	r2, [pc, #320]	; (800ae00 <HAL_GPIO_Init+0x31c>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d01f      	beq.n	800ad02 <HAL_GPIO_Init+0x21e>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	4a4f      	ldr	r2, [pc, #316]	; (800ae04 <HAL_GPIO_Init+0x320>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d019      	beq.n	800acfe <HAL_GPIO_Init+0x21a>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	4a4e      	ldr	r2, [pc, #312]	; (800ae08 <HAL_GPIO_Init+0x324>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d013      	beq.n	800acfa <HAL_GPIO_Init+0x216>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	4a4d      	ldr	r2, [pc, #308]	; (800ae0c <HAL_GPIO_Init+0x328>)
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d00d      	beq.n	800acf6 <HAL_GPIO_Init+0x212>
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	4a4c      	ldr	r2, [pc, #304]	; (800ae10 <HAL_GPIO_Init+0x32c>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d007      	beq.n	800acf2 <HAL_GPIO_Init+0x20e>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	4a4b      	ldr	r2, [pc, #300]	; (800ae14 <HAL_GPIO_Init+0x330>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d101      	bne.n	800acee <HAL_GPIO_Init+0x20a>
 800acea:	2307      	movs	r3, #7
 800acec:	e00e      	b.n	800ad0c <HAL_GPIO_Init+0x228>
 800acee:	2308      	movs	r3, #8
 800acf0:	e00c      	b.n	800ad0c <HAL_GPIO_Init+0x228>
 800acf2:	2306      	movs	r3, #6
 800acf4:	e00a      	b.n	800ad0c <HAL_GPIO_Init+0x228>
 800acf6:	2305      	movs	r3, #5
 800acf8:	e008      	b.n	800ad0c <HAL_GPIO_Init+0x228>
 800acfa:	2304      	movs	r3, #4
 800acfc:	e006      	b.n	800ad0c <HAL_GPIO_Init+0x228>
 800acfe:	2303      	movs	r3, #3
 800ad00:	e004      	b.n	800ad0c <HAL_GPIO_Init+0x228>
 800ad02:	2302      	movs	r3, #2
 800ad04:	e002      	b.n	800ad0c <HAL_GPIO_Init+0x228>
 800ad06:	2301      	movs	r3, #1
 800ad08:	e000      	b.n	800ad0c <HAL_GPIO_Init+0x228>
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	69fa      	ldr	r2, [r7, #28]
 800ad0e:	f002 0203 	and.w	r2, r2, #3
 800ad12:	0092      	lsls	r2, r2, #2
 800ad14:	4093      	lsls	r3, r2
 800ad16:	69ba      	ldr	r2, [r7, #24]
 800ad18:	4313      	orrs	r3, r2
 800ad1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ad1c:	4935      	ldr	r1, [pc, #212]	; (800adf4 <HAL_GPIO_Init+0x310>)
 800ad1e:	69fb      	ldr	r3, [r7, #28]
 800ad20:	089b      	lsrs	r3, r3, #2
 800ad22:	3302      	adds	r3, #2
 800ad24:	69ba      	ldr	r2, [r7, #24]
 800ad26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ad2a:	4b3b      	ldr	r3, [pc, #236]	; (800ae18 <HAL_GPIO_Init+0x334>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	43db      	mvns	r3, r3
 800ad34:	69ba      	ldr	r2, [r7, #24]
 800ad36:	4013      	ands	r3, r2
 800ad38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	685b      	ldr	r3, [r3, #4]
 800ad3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d003      	beq.n	800ad4e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800ad46:	69ba      	ldr	r2, [r7, #24]
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	4313      	orrs	r3, r2
 800ad4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800ad4e:	4a32      	ldr	r2, [pc, #200]	; (800ae18 <HAL_GPIO_Init+0x334>)
 800ad50:	69bb      	ldr	r3, [r7, #24]
 800ad52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800ad54:	4b30      	ldr	r3, [pc, #192]	; (800ae18 <HAL_GPIO_Init+0x334>)
 800ad56:	685b      	ldr	r3, [r3, #4]
 800ad58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ad5a:	693b      	ldr	r3, [r7, #16]
 800ad5c:	43db      	mvns	r3, r3
 800ad5e:	69ba      	ldr	r2, [r7, #24]
 800ad60:	4013      	ands	r3, r2
 800ad62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	685b      	ldr	r3, [r3, #4]
 800ad68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d003      	beq.n	800ad78 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800ad70:	69ba      	ldr	r2, [r7, #24]
 800ad72:	693b      	ldr	r3, [r7, #16]
 800ad74:	4313      	orrs	r3, r2
 800ad76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800ad78:	4a27      	ldr	r2, [pc, #156]	; (800ae18 <HAL_GPIO_Init+0x334>)
 800ad7a:	69bb      	ldr	r3, [r7, #24]
 800ad7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ad7e:	4b26      	ldr	r3, [pc, #152]	; (800ae18 <HAL_GPIO_Init+0x334>)
 800ad80:	689b      	ldr	r3, [r3, #8]
 800ad82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	43db      	mvns	r3, r3
 800ad88:	69ba      	ldr	r2, [r7, #24]
 800ad8a:	4013      	ands	r3, r2
 800ad8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	685b      	ldr	r3, [r3, #4]
 800ad92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d003      	beq.n	800ada2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800ad9a:	69ba      	ldr	r2, [r7, #24]
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	4313      	orrs	r3, r2
 800ada0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800ada2:	4a1d      	ldr	r2, [pc, #116]	; (800ae18 <HAL_GPIO_Init+0x334>)
 800ada4:	69bb      	ldr	r3, [r7, #24]
 800ada6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800ada8:	4b1b      	ldr	r3, [pc, #108]	; (800ae18 <HAL_GPIO_Init+0x334>)
 800adaa:	68db      	ldr	r3, [r3, #12]
 800adac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	43db      	mvns	r3, r3
 800adb2:	69ba      	ldr	r2, [r7, #24]
 800adb4:	4013      	ands	r3, r2
 800adb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	685b      	ldr	r3, [r3, #4]
 800adbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d003      	beq.n	800adcc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800adc4:	69ba      	ldr	r2, [r7, #24]
 800adc6:	693b      	ldr	r3, [r7, #16]
 800adc8:	4313      	orrs	r3, r2
 800adca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800adcc:	4a12      	ldr	r2, [pc, #72]	; (800ae18 <HAL_GPIO_Init+0x334>)
 800adce:	69bb      	ldr	r3, [r7, #24]
 800add0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800add2:	69fb      	ldr	r3, [r7, #28]
 800add4:	3301      	adds	r3, #1
 800add6:	61fb      	str	r3, [r7, #28]
 800add8:	69fb      	ldr	r3, [r7, #28]
 800adda:	2b0f      	cmp	r3, #15
 800addc:	f67f ae90 	bls.w	800ab00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800ade0:	bf00      	nop
 800ade2:	bf00      	nop
 800ade4:	3724      	adds	r7, #36	; 0x24
 800ade6:	46bd      	mov	sp, r7
 800ade8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adec:	4770      	bx	lr
 800adee:	bf00      	nop
 800adf0:	40023800 	.word	0x40023800
 800adf4:	40013800 	.word	0x40013800
 800adf8:	40020000 	.word	0x40020000
 800adfc:	40020400 	.word	0x40020400
 800ae00:	40020800 	.word	0x40020800
 800ae04:	40020c00 	.word	0x40020c00
 800ae08:	40021000 	.word	0x40021000
 800ae0c:	40021400 	.word	0x40021400
 800ae10:	40021800 	.word	0x40021800
 800ae14:	40021c00 	.word	0x40021c00
 800ae18:	40013c00 	.word	0x40013c00

0800ae1c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b087      	sub	sp, #28
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800ae26:	2300      	movs	r3, #0
 800ae28:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ae32:	2300      	movs	r3, #0
 800ae34:	617b      	str	r3, [r7, #20]
 800ae36:	e0cd      	b.n	800afd4 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800ae38:	2201      	movs	r2, #1
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	fa02 f303 	lsl.w	r3, r2, r3
 800ae40:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800ae42:	683a      	ldr	r2, [r7, #0]
 800ae44:	693b      	ldr	r3, [r7, #16]
 800ae46:	4013      	ands	r3, r2
 800ae48:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800ae4a:	68fa      	ldr	r2, [r7, #12]
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	429a      	cmp	r2, r3
 800ae50:	f040 80bd 	bne.w	800afce <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800ae54:	4a65      	ldr	r2, [pc, #404]	; (800afec <HAL_GPIO_DeInit+0x1d0>)
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	089b      	lsrs	r3, r3, #2
 800ae5a:	3302      	adds	r3, #2
 800ae5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae60:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	f003 0303 	and.w	r3, r3, #3
 800ae68:	009b      	lsls	r3, r3, #2
 800ae6a:	220f      	movs	r2, #15
 800ae6c:	fa02 f303 	lsl.w	r3, r2, r3
 800ae70:	68ba      	ldr	r2, [r7, #8]
 800ae72:	4013      	ands	r3, r2
 800ae74:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	4a5d      	ldr	r2, [pc, #372]	; (800aff0 <HAL_GPIO_DeInit+0x1d4>)
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d02b      	beq.n	800aed6 <HAL_GPIO_DeInit+0xba>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	4a5c      	ldr	r2, [pc, #368]	; (800aff4 <HAL_GPIO_DeInit+0x1d8>)
 800ae82:	4293      	cmp	r3, r2
 800ae84:	d025      	beq.n	800aed2 <HAL_GPIO_DeInit+0xb6>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	4a5b      	ldr	r2, [pc, #364]	; (800aff8 <HAL_GPIO_DeInit+0x1dc>)
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d01f      	beq.n	800aece <HAL_GPIO_DeInit+0xb2>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	4a5a      	ldr	r2, [pc, #360]	; (800affc <HAL_GPIO_DeInit+0x1e0>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d019      	beq.n	800aeca <HAL_GPIO_DeInit+0xae>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	4a59      	ldr	r2, [pc, #356]	; (800b000 <HAL_GPIO_DeInit+0x1e4>)
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d013      	beq.n	800aec6 <HAL_GPIO_DeInit+0xaa>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	4a58      	ldr	r2, [pc, #352]	; (800b004 <HAL_GPIO_DeInit+0x1e8>)
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d00d      	beq.n	800aec2 <HAL_GPIO_DeInit+0xa6>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	4a57      	ldr	r2, [pc, #348]	; (800b008 <HAL_GPIO_DeInit+0x1ec>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d007      	beq.n	800aebe <HAL_GPIO_DeInit+0xa2>
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	4a56      	ldr	r2, [pc, #344]	; (800b00c <HAL_GPIO_DeInit+0x1f0>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d101      	bne.n	800aeba <HAL_GPIO_DeInit+0x9e>
 800aeb6:	2307      	movs	r3, #7
 800aeb8:	e00e      	b.n	800aed8 <HAL_GPIO_DeInit+0xbc>
 800aeba:	2308      	movs	r3, #8
 800aebc:	e00c      	b.n	800aed8 <HAL_GPIO_DeInit+0xbc>
 800aebe:	2306      	movs	r3, #6
 800aec0:	e00a      	b.n	800aed8 <HAL_GPIO_DeInit+0xbc>
 800aec2:	2305      	movs	r3, #5
 800aec4:	e008      	b.n	800aed8 <HAL_GPIO_DeInit+0xbc>
 800aec6:	2304      	movs	r3, #4
 800aec8:	e006      	b.n	800aed8 <HAL_GPIO_DeInit+0xbc>
 800aeca:	2303      	movs	r3, #3
 800aecc:	e004      	b.n	800aed8 <HAL_GPIO_DeInit+0xbc>
 800aece:	2302      	movs	r3, #2
 800aed0:	e002      	b.n	800aed8 <HAL_GPIO_DeInit+0xbc>
 800aed2:	2301      	movs	r3, #1
 800aed4:	e000      	b.n	800aed8 <HAL_GPIO_DeInit+0xbc>
 800aed6:	2300      	movs	r3, #0
 800aed8:	697a      	ldr	r2, [r7, #20]
 800aeda:	f002 0203 	and.w	r2, r2, #3
 800aede:	0092      	lsls	r2, r2, #2
 800aee0:	4093      	lsls	r3, r2
 800aee2:	68ba      	ldr	r2, [r7, #8]
 800aee4:	429a      	cmp	r2, r3
 800aee6:	d132      	bne.n	800af4e <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800aee8:	4b49      	ldr	r3, [pc, #292]	; (800b010 <HAL_GPIO_DeInit+0x1f4>)
 800aeea:	681a      	ldr	r2, [r3, #0]
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	43db      	mvns	r3, r3
 800aef0:	4947      	ldr	r1, [pc, #284]	; (800b010 <HAL_GPIO_DeInit+0x1f4>)
 800aef2:	4013      	ands	r3, r2
 800aef4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800aef6:	4b46      	ldr	r3, [pc, #280]	; (800b010 <HAL_GPIO_DeInit+0x1f4>)
 800aef8:	685a      	ldr	r2, [r3, #4]
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	43db      	mvns	r3, r3
 800aefe:	4944      	ldr	r1, [pc, #272]	; (800b010 <HAL_GPIO_DeInit+0x1f4>)
 800af00:	4013      	ands	r3, r2
 800af02:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800af04:	4b42      	ldr	r3, [pc, #264]	; (800b010 <HAL_GPIO_DeInit+0x1f4>)
 800af06:	689a      	ldr	r2, [r3, #8]
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	43db      	mvns	r3, r3
 800af0c:	4940      	ldr	r1, [pc, #256]	; (800b010 <HAL_GPIO_DeInit+0x1f4>)
 800af0e:	4013      	ands	r3, r2
 800af10:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800af12:	4b3f      	ldr	r3, [pc, #252]	; (800b010 <HAL_GPIO_DeInit+0x1f4>)
 800af14:	68da      	ldr	r2, [r3, #12]
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	43db      	mvns	r3, r3
 800af1a:	493d      	ldr	r1, [pc, #244]	; (800b010 <HAL_GPIO_DeInit+0x1f4>)
 800af1c:	4013      	ands	r3, r2
 800af1e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	f003 0303 	and.w	r3, r3, #3
 800af26:	009b      	lsls	r3, r3, #2
 800af28:	220f      	movs	r2, #15
 800af2a:	fa02 f303 	lsl.w	r3, r2, r3
 800af2e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800af30:	4a2e      	ldr	r2, [pc, #184]	; (800afec <HAL_GPIO_DeInit+0x1d0>)
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	089b      	lsrs	r3, r3, #2
 800af36:	3302      	adds	r3, #2
 800af38:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	43da      	mvns	r2, r3
 800af40:	482a      	ldr	r0, [pc, #168]	; (800afec <HAL_GPIO_DeInit+0x1d0>)
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	089b      	lsrs	r3, r3, #2
 800af46:	400a      	ands	r2, r1
 800af48:	3302      	adds	r3, #2
 800af4a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681a      	ldr	r2, [r3, #0]
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	005b      	lsls	r3, r3, #1
 800af56:	2103      	movs	r1, #3
 800af58:	fa01 f303 	lsl.w	r3, r1, r3
 800af5c:	43db      	mvns	r3, r3
 800af5e:	401a      	ands	r2, r3
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	08da      	lsrs	r2, r3, #3
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	3208      	adds	r2, #8
 800af6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	f003 0307 	and.w	r3, r3, #7
 800af76:	009b      	lsls	r3, r3, #2
 800af78:	220f      	movs	r2, #15
 800af7a:	fa02 f303 	lsl.w	r3, r2, r3
 800af7e:	43db      	mvns	r3, r3
 800af80:	697a      	ldr	r2, [r7, #20]
 800af82:	08d2      	lsrs	r2, r2, #3
 800af84:	4019      	ands	r1, r3
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	3208      	adds	r2, #8
 800af8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	68da      	ldr	r2, [r3, #12]
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	005b      	lsls	r3, r3, #1
 800af96:	2103      	movs	r1, #3
 800af98:	fa01 f303 	lsl.w	r3, r1, r3
 800af9c:	43db      	mvns	r3, r3
 800af9e:	401a      	ands	r2, r3
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	685a      	ldr	r2, [r3, #4]
 800afa8:	2101      	movs	r1, #1
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	fa01 f303 	lsl.w	r3, r1, r3
 800afb0:	43db      	mvns	r3, r3
 800afb2:	401a      	ands	r2, r3
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	689a      	ldr	r2, [r3, #8]
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	005b      	lsls	r3, r3, #1
 800afc0:	2103      	movs	r1, #3
 800afc2:	fa01 f303 	lsl.w	r3, r1, r3
 800afc6:	43db      	mvns	r3, r3
 800afc8:	401a      	ands	r2, r3
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800afce:	697b      	ldr	r3, [r7, #20]
 800afd0:	3301      	adds	r3, #1
 800afd2:	617b      	str	r3, [r7, #20]
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	2b0f      	cmp	r3, #15
 800afd8:	f67f af2e 	bls.w	800ae38 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800afdc:	bf00      	nop
 800afde:	bf00      	nop
 800afe0:	371c      	adds	r7, #28
 800afe2:	46bd      	mov	sp, r7
 800afe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe8:	4770      	bx	lr
 800afea:	bf00      	nop
 800afec:	40013800 	.word	0x40013800
 800aff0:	40020000 	.word	0x40020000
 800aff4:	40020400 	.word	0x40020400
 800aff8:	40020800 	.word	0x40020800
 800affc:	40020c00 	.word	0x40020c00
 800b000:	40021000 	.word	0x40021000
 800b004:	40021400 	.word	0x40021400
 800b008:	40021800 	.word	0x40021800
 800b00c:	40021c00 	.word	0x40021c00
 800b010:	40013c00 	.word	0x40013c00

0800b014 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b014:	b480      	push	{r7}
 800b016:	b085      	sub	sp, #20
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	460b      	mov	r3, r1
 800b01e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	691a      	ldr	r2, [r3, #16]
 800b024:	887b      	ldrh	r3, [r7, #2]
 800b026:	4013      	ands	r3, r2
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d002      	beq.n	800b032 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b02c:	2301      	movs	r3, #1
 800b02e:	73fb      	strb	r3, [r7, #15]
 800b030:	e001      	b.n	800b036 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b032:	2300      	movs	r3, #0
 800b034:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b036:	7bfb      	ldrb	r3, [r7, #15]
}
 800b038:	4618      	mov	r0, r3
 800b03a:	3714      	adds	r7, #20
 800b03c:	46bd      	mov	sp, r7
 800b03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b042:	4770      	bx	lr

0800b044 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b044:	b480      	push	{r7}
 800b046:	b083      	sub	sp, #12
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
 800b04c:	460b      	mov	r3, r1
 800b04e:	807b      	strh	r3, [r7, #2]
 800b050:	4613      	mov	r3, r2
 800b052:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b054:	787b      	ldrb	r3, [r7, #1]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d003      	beq.n	800b062 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b05a:	887a      	ldrh	r2, [r7, #2]
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b060:	e003      	b.n	800b06a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b062:	887b      	ldrh	r3, [r7, #2]
 800b064:	041a      	lsls	r2, r3, #16
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	619a      	str	r2, [r3, #24]
}
 800b06a:	bf00      	nop
 800b06c:	370c      	adds	r7, #12
 800b06e:	46bd      	mov	sp, r7
 800b070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b074:	4770      	bx	lr

0800b076 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b076:	b480      	push	{r7}
 800b078:	b085      	sub	sp, #20
 800b07a:	af00      	add	r7, sp, #0
 800b07c:	6078      	str	r0, [r7, #4]
 800b07e:	460b      	mov	r3, r1
 800b080:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	695b      	ldr	r3, [r3, #20]
 800b086:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b088:	887a      	ldrh	r2, [r7, #2]
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	4013      	ands	r3, r2
 800b08e:	041a      	lsls	r2, r3, #16
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	43d9      	mvns	r1, r3
 800b094:	887b      	ldrh	r3, [r7, #2]
 800b096:	400b      	ands	r3, r1
 800b098:	431a      	orrs	r2, r3
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	619a      	str	r2, [r3, #24]
}
 800b09e:	bf00      	nop
 800b0a0:	3714      	adds	r7, #20
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a8:	4770      	bx	lr

0800b0aa <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin specifies the port bit to be locked.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b0aa:	b480      	push	{r7}
 800b0ac:	b085      	sub	sp, #20
 800b0ae:	af00      	add	r7, sp, #0
 800b0b0:	6078      	str	r0, [r7, #4]
 800b0b2:	460b      	mov	r3, r1
 800b0b4:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 800b0b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b0ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
 800b0bc:	887a      	ldrh	r2, [r7, #2]
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	4313      	orrs	r3, r2
 800b0c2:	60fb      	str	r3, [r7, #12]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 800b0c4:	68fa      	ldr	r2, [r7, #12]
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	61da      	str	r2, [r3, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 800b0ca:	887a      	ldrh	r2, [r7, #2]
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	61da      	str	r2, [r3, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 800b0d0:	68fa      	ldr	r2, [r7, #12]
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	61da      	str	r2, [r3, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  tmp = GPIOx->LCKR;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	69db      	ldr	r3, [r3, #28]
 800b0da:	60fb      	str	r3, [r7, #12]

  /* Read again in order to confirm lock is active */
 if((GPIOx->LCKR & GPIO_LCKR_LCKK) != RESET)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	69db      	ldr	r3, [r3, #28]
 800b0e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d001      	beq.n	800b0ec <HAL_GPIO_LockPin+0x42>
  {
    return HAL_OK;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	e000      	b.n	800b0ee <HAL_GPIO_LockPin+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b0ec:	2301      	movs	r3, #1
  }
}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	3714      	adds	r7, #20
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f8:	4770      	bx	lr

0800b0fa <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b0fa:	b580      	push	{r7, lr}
 800b0fc:	b082      	sub	sp, #8
 800b0fe:	af00      	add	r7, sp, #0
 800b100:	4603      	mov	r3, r0
 800b102:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800b104:	4b08      	ldr	r3, [pc, #32]	; (800b128 <HAL_GPIO_EXTI_IRQHandler+0x2e>)
 800b106:	695a      	ldr	r2, [r3, #20]
 800b108:	88fb      	ldrh	r3, [r7, #6]
 800b10a:	4013      	ands	r3, r2
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d006      	beq.n	800b11e <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b110:	4a05      	ldr	r2, [pc, #20]	; (800b128 <HAL_GPIO_EXTI_IRQHandler+0x2e>)
 800b112:	88fb      	ldrh	r3, [r7, #6]
 800b114:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b116:	88fb      	ldrh	r3, [r7, #6]
 800b118:	4618      	mov	r0, r3
 800b11a:	f000 f807 	bl	800b12c <HAL_GPIO_EXTI_Callback>
  }
}
 800b11e:	bf00      	nop
 800b120:	3708      	adds	r7, #8
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}
 800b126:	bf00      	nop
 800b128:	40013c00 	.word	0x40013c00

0800b12c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800b12c:	b480      	push	{r7}
 800b12e:	b083      	sub	sp, #12
 800b130:	af00      	add	r7, sp, #0
 800b132:	4603      	mov	r3, r0
 800b134:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800b136:	bf00      	nop
 800b138:	370c      	adds	r7, #12
 800b13a:	46bd      	mov	sp, r7
 800b13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b140:	4770      	bx	lr

0800b142 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b142:	b580      	push	{r7, lr}
 800b144:	b084      	sub	sp, #16
 800b146:	af00      	add	r7, sp, #0
 800b148:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d101      	bne.n	800b154 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b150:	2301      	movs	r3, #1
 800b152:	e12b      	b.n	800b3ac <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b15a:	b2db      	uxtb	r3, r3
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d106      	bne.n	800b16e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2200      	movs	r2, #0
 800b164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	f7fa fbcb 	bl	8005904 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2224      	movs	r2, #36	; 0x24
 800b172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	681a      	ldr	r2, [r3, #0]
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f022 0201 	bic.w	r2, r2, #1
 800b184:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	681a      	ldr	r2, [r3, #0]
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b194:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	681a      	ldr	r2, [r3, #0]
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b1a4:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b1a6:	f007 f891 	bl	80122cc <HAL_RCC_GetPCLK1Freq>
 800b1aa:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	685b      	ldr	r3, [r3, #4]
 800b1b0:	4a80      	ldr	r2, [pc, #512]	; (800b3b4 <HAL_I2C_Init+0x272>)
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	d807      	bhi.n	800b1c6 <HAL_I2C_Init+0x84>
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	4a7f      	ldr	r2, [pc, #508]	; (800b3b8 <HAL_I2C_Init+0x276>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	bf94      	ite	ls
 800b1be:	2301      	movls	r3, #1
 800b1c0:	2300      	movhi	r3, #0
 800b1c2:	b2db      	uxtb	r3, r3
 800b1c4:	e006      	b.n	800b1d4 <HAL_I2C_Init+0x92>
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	4a7c      	ldr	r2, [pc, #496]	; (800b3bc <HAL_I2C_Init+0x27a>)
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	bf94      	ite	ls
 800b1ce:	2301      	movls	r3, #1
 800b1d0:	2300      	movhi	r3, #0
 800b1d2:	b2db      	uxtb	r3, r3
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d001      	beq.n	800b1dc <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b1d8:	2301      	movs	r3, #1
 800b1da:	e0e7      	b.n	800b3ac <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	4a78      	ldr	r2, [pc, #480]	; (800b3c0 <HAL_I2C_Init+0x27e>)
 800b1e0:	fba2 2303 	umull	r2, r3, r2, r3
 800b1e4:	0c9b      	lsrs	r3, r3, #18
 800b1e6:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	685b      	ldr	r3, [r3, #4]
 800b1ee:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	68ba      	ldr	r2, [r7, #8]
 800b1f8:	430a      	orrs	r2, r1
 800b1fa:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	6a1b      	ldr	r3, [r3, #32]
 800b202:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	685b      	ldr	r3, [r3, #4]
 800b20a:	4a6a      	ldr	r2, [pc, #424]	; (800b3b4 <HAL_I2C_Init+0x272>)
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d802      	bhi.n	800b216 <HAL_I2C_Init+0xd4>
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	3301      	adds	r3, #1
 800b214:	e009      	b.n	800b22a <HAL_I2C_Init+0xe8>
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b21c:	fb02 f303 	mul.w	r3, r2, r3
 800b220:	4a68      	ldr	r2, [pc, #416]	; (800b3c4 <HAL_I2C_Init+0x282>)
 800b222:	fba2 2303 	umull	r2, r3, r2, r3
 800b226:	099b      	lsrs	r3, r3, #6
 800b228:	3301      	adds	r3, #1
 800b22a:	687a      	ldr	r2, [r7, #4]
 800b22c:	6812      	ldr	r2, [r2, #0]
 800b22e:	430b      	orrs	r3, r1
 800b230:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	69db      	ldr	r3, [r3, #28]
 800b238:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b23c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	495b      	ldr	r1, [pc, #364]	; (800b3b4 <HAL_I2C_Init+0x272>)
 800b246:	428b      	cmp	r3, r1
 800b248:	d819      	bhi.n	800b27e <HAL_I2C_Init+0x13c>
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	1e59      	subs	r1, r3, #1
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	685b      	ldr	r3, [r3, #4]
 800b252:	005b      	lsls	r3, r3, #1
 800b254:	fbb1 f3f3 	udiv	r3, r1, r3
 800b258:	1c59      	adds	r1, r3, #1
 800b25a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b25e:	400b      	ands	r3, r1
 800b260:	2b00      	cmp	r3, #0
 800b262:	d00a      	beq.n	800b27a <HAL_I2C_Init+0x138>
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	1e59      	subs	r1, r3, #1
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	685b      	ldr	r3, [r3, #4]
 800b26c:	005b      	lsls	r3, r3, #1
 800b26e:	fbb1 f3f3 	udiv	r3, r1, r3
 800b272:	3301      	adds	r3, #1
 800b274:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b278:	e051      	b.n	800b31e <HAL_I2C_Init+0x1dc>
 800b27a:	2304      	movs	r3, #4
 800b27c:	e04f      	b.n	800b31e <HAL_I2C_Init+0x1dc>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	689b      	ldr	r3, [r3, #8]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d111      	bne.n	800b2aa <HAL_I2C_Init+0x168>
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	1e58      	subs	r0, r3, #1
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6859      	ldr	r1, [r3, #4]
 800b28e:	460b      	mov	r3, r1
 800b290:	005b      	lsls	r3, r3, #1
 800b292:	440b      	add	r3, r1
 800b294:	fbb0 f3f3 	udiv	r3, r0, r3
 800b298:	3301      	adds	r3, #1
 800b29a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	bf0c      	ite	eq
 800b2a2:	2301      	moveq	r3, #1
 800b2a4:	2300      	movne	r3, #0
 800b2a6:	b2db      	uxtb	r3, r3
 800b2a8:	e012      	b.n	800b2d0 <HAL_I2C_Init+0x18e>
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	1e58      	subs	r0, r3, #1
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6859      	ldr	r1, [r3, #4]
 800b2b2:	460b      	mov	r3, r1
 800b2b4:	009b      	lsls	r3, r3, #2
 800b2b6:	440b      	add	r3, r1
 800b2b8:	0099      	lsls	r1, r3, #2
 800b2ba:	440b      	add	r3, r1
 800b2bc:	fbb0 f3f3 	udiv	r3, r0, r3
 800b2c0:	3301      	adds	r3, #1
 800b2c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	bf0c      	ite	eq
 800b2ca:	2301      	moveq	r3, #1
 800b2cc:	2300      	movne	r3, #0
 800b2ce:	b2db      	uxtb	r3, r3
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d001      	beq.n	800b2d8 <HAL_I2C_Init+0x196>
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	e022      	b.n	800b31e <HAL_I2C_Init+0x1dc>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	689b      	ldr	r3, [r3, #8]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d10e      	bne.n	800b2fe <HAL_I2C_Init+0x1bc>
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	1e58      	subs	r0, r3, #1
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6859      	ldr	r1, [r3, #4]
 800b2e8:	460b      	mov	r3, r1
 800b2ea:	005b      	lsls	r3, r3, #1
 800b2ec:	440b      	add	r3, r1
 800b2ee:	fbb0 f3f3 	udiv	r3, r0, r3
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b2f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b2fc:	e00f      	b.n	800b31e <HAL_I2C_Init+0x1dc>
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	1e58      	subs	r0, r3, #1
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6859      	ldr	r1, [r3, #4]
 800b306:	460b      	mov	r3, r1
 800b308:	009b      	lsls	r3, r3, #2
 800b30a:	440b      	add	r3, r1
 800b30c:	0099      	lsls	r1, r3, #2
 800b30e:	440b      	add	r3, r1
 800b310:	fbb0 f3f3 	udiv	r3, r0, r3
 800b314:	3301      	adds	r3, #1
 800b316:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b31a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b31e:	6879      	ldr	r1, [r7, #4]
 800b320:	6809      	ldr	r1, [r1, #0]
 800b322:	4313      	orrs	r3, r2
 800b324:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	69da      	ldr	r2, [r3, #28]
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6a1b      	ldr	r3, [r3, #32]
 800b338:	431a      	orrs	r2, r3
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	430a      	orrs	r2, r1
 800b340:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	689b      	ldr	r3, [r3, #8]
 800b348:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b34c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b350:	687a      	ldr	r2, [r7, #4]
 800b352:	6911      	ldr	r1, [r2, #16]
 800b354:	687a      	ldr	r2, [r7, #4]
 800b356:	68d2      	ldr	r2, [r2, #12]
 800b358:	4311      	orrs	r1, r2
 800b35a:	687a      	ldr	r2, [r7, #4]
 800b35c:	6812      	ldr	r2, [r2, #0]
 800b35e:	430b      	orrs	r3, r1
 800b360:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	68db      	ldr	r3, [r3, #12]
 800b368:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	695a      	ldr	r2, [r3, #20]
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	699b      	ldr	r3, [r3, #24]
 800b374:	431a      	orrs	r2, r3
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	430a      	orrs	r2, r1
 800b37c:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	681a      	ldr	r2, [r3, #0]
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	f042 0201 	orr.w	r2, r2, #1
 800b38c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2200      	movs	r2, #0
 800b392:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2220      	movs	r2, #32
 800b398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b3aa:	2300      	movs	r3, #0
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3710      	adds	r7, #16
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}
 800b3b4:	000186a0 	.word	0x000186a0
 800b3b8:	001e847f 	.word	0x001e847f
 800b3bc:	003d08ff 	.word	0x003d08ff
 800b3c0:	431bde83 	.word	0x431bde83
 800b3c4:	10624dd3 	.word	0x10624dd3

0800b3c8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b082      	sub	sp, #8
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d101      	bne.n	800b3da <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	e021      	b.n	800b41e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2224      	movs	r2, #36	; 0x24
 800b3de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	681a      	ldr	r2, [r3, #0]
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f022 0201 	bic.w	r2, r2, #1
 800b3f0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f7fa fade 	bl	80059b4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2200      	movs	r2, #0
 800b402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2200      	movs	r2, #0
 800b40a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2200      	movs	r2, #0
 800b410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2200      	movs	r2, #0
 800b418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b41c:	2300      	movs	r3, #0
}
 800b41e:	4618      	mov	r0, r3
 800b420:	3708      	adds	r7, #8
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}

0800b426 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b426:	b580      	push	{r7, lr}
 800b428:	b088      	sub	sp, #32
 800b42a:	af02      	add	r7, sp, #8
 800b42c:	60f8      	str	r0, [r7, #12]
 800b42e:	607a      	str	r2, [r7, #4]
 800b430:	461a      	mov	r2, r3
 800b432:	460b      	mov	r3, r1
 800b434:	817b      	strh	r3, [r7, #10]
 800b436:	4613      	mov	r3, r2
 800b438:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b43a:	f7fb f9eb 	bl	8006814 <HAL_GetTick>
 800b43e:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b446:	b2db      	uxtb	r3, r3
 800b448:	2b20      	cmp	r3, #32
 800b44a:	f040 80e0 	bne.w	800b60e <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	9300      	str	r3, [sp, #0]
 800b452:	2319      	movs	r3, #25
 800b454:	2201      	movs	r2, #1
 800b456:	4970      	ldr	r1, [pc, #448]	; (800b618 <HAL_I2C_Master_Transmit+0x1f2>)
 800b458:	68f8      	ldr	r0, [r7, #12]
 800b45a:	f005 fd97 	bl	8010f8c <I2C_WaitOnFlagUntilTimeout>
 800b45e:	4603      	mov	r3, r0
 800b460:	2b00      	cmp	r3, #0
 800b462:	d001      	beq.n	800b468 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800b464:	2302      	movs	r3, #2
 800b466:	e0d3      	b.n	800b610 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b46e:	2b01      	cmp	r3, #1
 800b470:	d101      	bne.n	800b476 <HAL_I2C_Master_Transmit+0x50>
 800b472:	2302      	movs	r3, #2
 800b474:	e0cc      	b.n	800b610 <HAL_I2C_Master_Transmit+0x1ea>
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	2201      	movs	r2, #1
 800b47a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f003 0301 	and.w	r3, r3, #1
 800b488:	2b01      	cmp	r3, #1
 800b48a:	d007      	beq.n	800b49c <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	681a      	ldr	r2, [r3, #0]
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f042 0201 	orr.w	r2, r2, #1
 800b49a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	681a      	ldr	r2, [r3, #0]
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b4aa:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	2221      	movs	r2, #33	; 0x21
 800b4b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	2210      	movs	r2, #16
 800b4b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	687a      	ldr	r2, [r7, #4]
 800b4c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	893a      	ldrh	r2, [r7, #8]
 800b4cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4d2:	b29a      	uxth	r2, r3
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	4a50      	ldr	r2, [pc, #320]	; (800b61c <HAL_I2C_Master_Transmit+0x1f6>)
 800b4dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b4de:	8979      	ldrh	r1, [r7, #10]
 800b4e0:	697b      	ldr	r3, [r7, #20]
 800b4e2:	6a3a      	ldr	r2, [r7, #32]
 800b4e4:	68f8      	ldr	r0, [r7, #12]
 800b4e6:	f005 f8c9 	bl	801067c <I2C_MasterRequestWrite>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d001      	beq.n	800b4f4 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b4f0:	2301      	movs	r3, #1
 800b4f2:	e08d      	b.n	800b610 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	613b      	str	r3, [r7, #16]
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	695b      	ldr	r3, [r3, #20]
 800b4fe:	613b      	str	r3, [r7, #16]
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	699b      	ldr	r3, [r3, #24]
 800b506:	613b      	str	r3, [r7, #16]
 800b508:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b50a:	e066      	b.n	800b5da <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b50c:	697a      	ldr	r2, [r7, #20]
 800b50e:	6a39      	ldr	r1, [r7, #32]
 800b510:	68f8      	ldr	r0, [r7, #12]
 800b512:	f005 fe11 	bl	8011138 <I2C_WaitOnTXEFlagUntilTimeout>
 800b516:	4603      	mov	r3, r0
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d00d      	beq.n	800b538 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b520:	2b04      	cmp	r3, #4
 800b522:	d107      	bne.n	800b534 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	681a      	ldr	r2, [r3, #0]
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b532:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b534:	2301      	movs	r3, #1
 800b536:	e06b      	b.n	800b610 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b53c:	781a      	ldrb	r2, [r3, #0]
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b548:	1c5a      	adds	r2, r3, #1
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b552:	b29b      	uxth	r3, r3
 800b554:	3b01      	subs	r3, #1
 800b556:	b29a      	uxth	r2, r3
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b560:	3b01      	subs	r3, #1
 800b562:	b29a      	uxth	r2, r3
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	695b      	ldr	r3, [r3, #20]
 800b56e:	f003 0304 	and.w	r3, r3, #4
 800b572:	2b04      	cmp	r3, #4
 800b574:	d11b      	bne.n	800b5ae <HAL_I2C_Master_Transmit+0x188>
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d017      	beq.n	800b5ae <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b582:	781a      	ldrb	r2, [r3, #0]
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b58e:	1c5a      	adds	r2, r3, #1
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b598:	b29b      	uxth	r3, r3
 800b59a:	3b01      	subs	r3, #1
 800b59c:	b29a      	uxth	r2, r3
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5a6:	3b01      	subs	r3, #1
 800b5a8:	b29a      	uxth	r2, r3
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b5ae:	697a      	ldr	r2, [r7, #20]
 800b5b0:	6a39      	ldr	r1, [r7, #32]
 800b5b2:	68f8      	ldr	r0, [r7, #12]
 800b5b4:	f005 fe01 	bl	80111ba <I2C_WaitOnBTFFlagUntilTimeout>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d00d      	beq.n	800b5da <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5c2:	2b04      	cmp	r3, #4
 800b5c4:	d107      	bne.n	800b5d6 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	681a      	ldr	r2, [r3, #0]
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b5d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	e01a      	b.n	800b610 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d194      	bne.n	800b50c <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	681a      	ldr	r2, [r3, #0]
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b5f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	2220      	movs	r2, #32
 800b5f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	2200      	movs	r2, #0
 800b606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b60a:	2300      	movs	r3, #0
 800b60c:	e000      	b.n	800b610 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b60e:	2302      	movs	r3, #2
  }
}
 800b610:	4618      	mov	r0, r3
 800b612:	3718      	adds	r7, #24
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}
 800b618:	00100002 	.word	0x00100002
 800b61c:	ffff0000 	.word	0xffff0000

0800b620 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b08c      	sub	sp, #48	; 0x30
 800b624:	af02      	add	r7, sp, #8
 800b626:	60f8      	str	r0, [r7, #12]
 800b628:	607a      	str	r2, [r7, #4]
 800b62a:	461a      	mov	r2, r3
 800b62c:	460b      	mov	r3, r1
 800b62e:	817b      	strh	r3, [r7, #10]
 800b630:	4613      	mov	r3, r2
 800b632:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b634:	f7fb f8ee 	bl	8006814 <HAL_GetTick>
 800b638:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b640:	b2db      	uxtb	r3, r3
 800b642:	2b20      	cmp	r3, #32
 800b644:	f040 820b 	bne.w	800ba5e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b64a:	9300      	str	r3, [sp, #0]
 800b64c:	2319      	movs	r3, #25
 800b64e:	2201      	movs	r2, #1
 800b650:	497c      	ldr	r1, [pc, #496]	; (800b844 <HAL_I2C_Master_Receive+0x224>)
 800b652:	68f8      	ldr	r0, [r7, #12]
 800b654:	f005 fc9a 	bl	8010f8c <I2C_WaitOnFlagUntilTimeout>
 800b658:	4603      	mov	r3, r0
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d001      	beq.n	800b662 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800b65e:	2302      	movs	r3, #2
 800b660:	e1fe      	b.n	800ba60 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b668:	2b01      	cmp	r3, #1
 800b66a:	d101      	bne.n	800b670 <HAL_I2C_Master_Receive+0x50>
 800b66c:	2302      	movs	r3, #2
 800b66e:	e1f7      	b.n	800ba60 <HAL_I2C_Master_Receive+0x440>
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	2201      	movs	r2, #1
 800b674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f003 0301 	and.w	r3, r3, #1
 800b682:	2b01      	cmp	r3, #1
 800b684:	d007      	beq.n	800b696 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	681a      	ldr	r2, [r3, #0]
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	f042 0201 	orr.w	r2, r2, #1
 800b694:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	681a      	ldr	r2, [r3, #0]
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b6a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	2222      	movs	r2, #34	; 0x22
 800b6aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	2210      	movs	r2, #16
 800b6b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	687a      	ldr	r2, [r7, #4]
 800b6c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	893a      	ldrh	r2, [r7, #8]
 800b6c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6cc:	b29a      	uxth	r2, r3
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	4a5c      	ldr	r2, [pc, #368]	; (800b848 <HAL_I2C_Master_Receive+0x228>)
 800b6d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b6d8:	8979      	ldrh	r1, [r7, #10]
 800b6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6de:	68f8      	ldr	r0, [r7, #12]
 800b6e0:	f005 f84e 	bl	8010780 <I2C_MasterRequestRead>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d001      	beq.n	800b6ee <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	e1b8      	b.n	800ba60 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d113      	bne.n	800b71e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	617b      	str	r3, [r7, #20]
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	695b      	ldr	r3, [r3, #20]
 800b700:	617b      	str	r3, [r7, #20]
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	699b      	ldr	r3, [r3, #24]
 800b708:	617b      	str	r3, [r7, #20]
 800b70a:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	681a      	ldr	r2, [r3, #0]
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b71a:	601a      	str	r2, [r3, #0]
 800b71c:	e18c      	b.n	800ba38 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b722:	2b01      	cmp	r3, #1
 800b724:	d11b      	bne.n	800b75e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	681a      	ldr	r2, [r3, #0]
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b734:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b736:	2300      	movs	r3, #0
 800b738:	61bb      	str	r3, [r7, #24]
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	695b      	ldr	r3, [r3, #20]
 800b740:	61bb      	str	r3, [r7, #24]
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	699b      	ldr	r3, [r3, #24]
 800b748:	61bb      	str	r3, [r7, #24]
 800b74a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	681a      	ldr	r2, [r3, #0]
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b75a:	601a      	str	r2, [r3, #0]
 800b75c:	e16c      	b.n	800ba38 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b762:	2b02      	cmp	r3, #2
 800b764:	d11b      	bne.n	800b79e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	681a      	ldr	r2, [r3, #0]
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b774:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	681a      	ldr	r2, [r3, #0]
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b784:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b786:	2300      	movs	r3, #0
 800b788:	61fb      	str	r3, [r7, #28]
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	695b      	ldr	r3, [r3, #20]
 800b790:	61fb      	str	r3, [r7, #28]
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	699b      	ldr	r3, [r3, #24]
 800b798:	61fb      	str	r3, [r7, #28]
 800b79a:	69fb      	ldr	r3, [r7, #28]
 800b79c:	e14c      	b.n	800ba38 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	681a      	ldr	r2, [r3, #0]
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b7ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	623b      	str	r3, [r7, #32]
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	695b      	ldr	r3, [r3, #20]
 800b7b8:	623b      	str	r3, [r7, #32]
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	699b      	ldr	r3, [r3, #24]
 800b7c0:	623b      	str	r3, [r7, #32]
 800b7c2:	6a3b      	ldr	r3, [r7, #32]
    }

    while (hi2c->XferSize > 0U)
 800b7c4:	e138      	b.n	800ba38 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7ca:	2b03      	cmp	r3, #3
 800b7cc:	f200 80f1 	bhi.w	800b9b2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7d4:	2b01      	cmp	r3, #1
 800b7d6:	d123      	bne.n	800b820 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b7d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b7dc:	68f8      	ldr	r0, [r7, #12]
 800b7de:	f005 fd9d 	bl	801131c <I2C_WaitOnRXNEFlagUntilTimeout>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d001      	beq.n	800b7ec <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	e139      	b.n	800ba60 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	691a      	ldr	r2, [r3, #16]
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7f6:	b2d2      	uxtb	r2, r2
 800b7f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7fe:	1c5a      	adds	r2, r3, #1
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b808:	3b01      	subs	r3, #1
 800b80a:	b29a      	uxth	r2, r3
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b814:	b29b      	uxth	r3, r3
 800b816:	3b01      	subs	r3, #1
 800b818:	b29a      	uxth	r2, r3
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b81e:	e10b      	b.n	800ba38 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b824:	2b02      	cmp	r3, #2
 800b826:	d14e      	bne.n	800b8c6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b82a:	9300      	str	r3, [sp, #0]
 800b82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b82e:	2200      	movs	r2, #0
 800b830:	4906      	ldr	r1, [pc, #24]	; (800b84c <HAL_I2C_Master_Receive+0x22c>)
 800b832:	68f8      	ldr	r0, [r7, #12]
 800b834:	f005 fbaa 	bl	8010f8c <I2C_WaitOnFlagUntilTimeout>
 800b838:	4603      	mov	r3, r0
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d008      	beq.n	800b850 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800b83e:	2301      	movs	r3, #1
 800b840:	e10e      	b.n	800ba60 <HAL_I2C_Master_Receive+0x440>
 800b842:	bf00      	nop
 800b844:	00100002 	.word	0x00100002
 800b848:	ffff0000 	.word	0xffff0000
 800b84c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	681a      	ldr	r2, [r3, #0]
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b85e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	691a      	ldr	r2, [r3, #16]
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b86a:	b2d2      	uxtb	r2, r2
 800b86c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b872:	1c5a      	adds	r2, r3, #1
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b87c:	3b01      	subs	r3, #1
 800b87e:	b29a      	uxth	r2, r3
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b888:	b29b      	uxth	r3, r3
 800b88a:	3b01      	subs	r3, #1
 800b88c:	b29a      	uxth	r2, r3
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	691a      	ldr	r2, [r3, #16]
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b89c:	b2d2      	uxtb	r2, r2
 800b89e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8a4:	1c5a      	adds	r2, r3, #1
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8ae:	3b01      	subs	r3, #1
 800b8b0:	b29a      	uxth	r2, r3
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8ba:	b29b      	uxth	r3, r3
 800b8bc:	3b01      	subs	r3, #1
 800b8be:	b29a      	uxth	r2, r3
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b8c4:	e0b8      	b.n	800ba38 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c8:	9300      	str	r3, [sp, #0]
 800b8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	4966      	ldr	r1, [pc, #408]	; (800ba68 <HAL_I2C_Master_Receive+0x448>)
 800b8d0:	68f8      	ldr	r0, [r7, #12]
 800b8d2:	f005 fb5b 	bl	8010f8c <I2C_WaitOnFlagUntilTimeout>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d001      	beq.n	800b8e0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800b8dc:	2301      	movs	r3, #1
 800b8de:	e0bf      	b.n	800ba60 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	681a      	ldr	r2, [r3, #0]
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b8ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	691a      	ldr	r2, [r3, #16]
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8fa:	b2d2      	uxtb	r2, r2
 800b8fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b902:	1c5a      	adds	r2, r3, #1
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b90c:	3b01      	subs	r3, #1
 800b90e:	b29a      	uxth	r2, r3
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b918:	b29b      	uxth	r3, r3
 800b91a:	3b01      	subs	r3, #1
 800b91c:	b29a      	uxth	r2, r3
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b924:	9300      	str	r3, [sp, #0]
 800b926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b928:	2200      	movs	r2, #0
 800b92a:	494f      	ldr	r1, [pc, #316]	; (800ba68 <HAL_I2C_Master_Receive+0x448>)
 800b92c:	68f8      	ldr	r0, [r7, #12]
 800b92e:	f005 fb2d 	bl	8010f8c <I2C_WaitOnFlagUntilTimeout>
 800b932:	4603      	mov	r3, r0
 800b934:	2b00      	cmp	r3, #0
 800b936:	d001      	beq.n	800b93c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800b938:	2301      	movs	r3, #1
 800b93a:	e091      	b.n	800ba60 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	681a      	ldr	r2, [r3, #0]
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b94a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	691a      	ldr	r2, [r3, #16]
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b956:	b2d2      	uxtb	r2, r2
 800b958:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b95e:	1c5a      	adds	r2, r3, #1
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b968:	3b01      	subs	r3, #1
 800b96a:	b29a      	uxth	r2, r3
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b974:	b29b      	uxth	r3, r3
 800b976:	3b01      	subs	r3, #1
 800b978:	b29a      	uxth	r2, r3
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	691a      	ldr	r2, [r3, #16]
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b988:	b2d2      	uxtb	r2, r2
 800b98a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b990:	1c5a      	adds	r2, r3, #1
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b99a:	3b01      	subs	r3, #1
 800b99c:	b29a      	uxth	r2, r3
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9a6:	b29b      	uxth	r3, r3
 800b9a8:	3b01      	subs	r3, #1
 800b9aa:	b29a      	uxth	r2, r3
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b9b0:	e042      	b.n	800ba38 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b9b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b9b6:	68f8      	ldr	r0, [r7, #12]
 800b9b8:	f005 fcb0 	bl	801131c <I2C_WaitOnRXNEFlagUntilTimeout>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d001      	beq.n	800b9c6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	e04c      	b.n	800ba60 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	691a      	ldr	r2, [r3, #16]
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d0:	b2d2      	uxtb	r2, r2
 800b9d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d8:	1c5a      	adds	r2, r3, #1
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9e2:	3b01      	subs	r3, #1
 800b9e4:	b29a      	uxth	r2, r3
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9ee:	b29b      	uxth	r3, r3
 800b9f0:	3b01      	subs	r3, #1
 800b9f2:	b29a      	uxth	r2, r3
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	695b      	ldr	r3, [r3, #20]
 800b9fe:	f003 0304 	and.w	r3, r3, #4
 800ba02:	2b04      	cmp	r3, #4
 800ba04:	d118      	bne.n	800ba38 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	691a      	ldr	r2, [r3, #16]
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba10:	b2d2      	uxtb	r2, r2
 800ba12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba18:	1c5a      	adds	r2, r3, #1
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba22:	3b01      	subs	r3, #1
 800ba24:	b29a      	uxth	r2, r3
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba2e:	b29b      	uxth	r3, r3
 800ba30:	3b01      	subs	r3, #1
 800ba32:	b29a      	uxth	r2, r3
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	f47f aec2 	bne.w	800b7c6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	2220      	movs	r2, #32
 800ba46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	2200      	movs	r2, #0
 800ba56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	e000      	b.n	800ba60 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800ba5e:	2302      	movs	r3, #2
  }
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3728      	adds	r7, #40	; 0x28
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}
 800ba68:	00010004 	.word	0x00010004

0800ba6c <HAL_I2C_Slave_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b08a      	sub	sp, #40	; 0x28
 800ba70:	af02      	add	r7, sp, #8
 800ba72:	60f8      	str	r0, [r7, #12]
 800ba74:	60b9      	str	r1, [r7, #8]
 800ba76:	603b      	str	r3, [r7, #0]
 800ba78:	4613      	mov	r3, r2
 800ba7a:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ba7c:	f7fa feca 	bl	8006814 <HAL_GetTick>
 800ba80:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba88:	b2db      	uxtb	r3, r3
 800ba8a:	2b20      	cmp	r3, #32
 800ba8c:	f040 80fb 	bne.w	800bc86 <HAL_I2C_Slave_Transmit+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d002      	beq.n	800ba9c <HAL_I2C_Slave_Transmit+0x30>
 800ba96:	88fb      	ldrh	r3, [r7, #6]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d101      	bne.n	800baa0 <HAL_I2C_Slave_Transmit+0x34>
    {
      return  HAL_ERROR;
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	e0f3      	b.n	800bc88 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800baa6:	2b01      	cmp	r3, #1
 800baa8:	d101      	bne.n	800baae <HAL_I2C_Slave_Transmit+0x42>
 800baaa:	2302      	movs	r3, #2
 800baac:	e0ec      	b.n	800bc88 <HAL_I2C_Slave_Transmit+0x21c>
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	2201      	movs	r2, #1
 800bab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f003 0301 	and.w	r3, r3, #1
 800bac0:	2b01      	cmp	r3, #1
 800bac2:	d007      	beq.n	800bad4 <HAL_I2C_Slave_Transmit+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	681a      	ldr	r2, [r3, #0]
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	f042 0201 	orr.w	r2, r2, #1
 800bad2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	681a      	ldr	r2, [r3, #0]
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bae2:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	2221      	movs	r2, #33	; 0x21
 800bae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	2220      	movs	r2, #32
 800baf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	2200      	movs	r2, #0
 800baf8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	68ba      	ldr	r2, [r7, #8]
 800bafe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	88fa      	ldrh	r2, [r7, #6]
 800bb04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb0a:	b29a      	uxth	r2, r3
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	4a5f      	ldr	r2, [pc, #380]	; (800bc90 <HAL_I2C_Slave_Transmit+0x224>)
 800bb14:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	681a      	ldr	r2, [r3, #0]
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bb24:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800bb26:	69fb      	ldr	r3, [r7, #28]
 800bb28:	9300      	str	r3, [sp, #0]
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	4959      	ldr	r1, [pc, #356]	; (800bc94 <HAL_I2C_Slave_Transmit+0x228>)
 800bb30:	68f8      	ldr	r0, [r7, #12]
 800bb32:	f005 fa2b 	bl	8010f8c <I2C_WaitOnFlagUntilTimeout>
 800bb36:	4603      	mov	r3, r0
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d001      	beq.n	800bb40 <HAL_I2C_Slave_Transmit+0xd4>
    {
      return HAL_ERROR;
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	e0a3      	b.n	800bc88 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bb40:	2300      	movs	r3, #0
 800bb42:	617b      	str	r3, [r7, #20]
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	695b      	ldr	r3, [r3, #20]
 800bb4a:	617b      	str	r3, [r7, #20]
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	699b      	ldr	r3, [r3, #24]
 800bb52:	617b      	str	r3, [r7, #20]
 800bb54:	697b      	ldr	r3, [r7, #20]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	691b      	ldr	r3, [r3, #16]
 800bb5a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800bb5e:	d165      	bne.n	800bc2c <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800bb60:	69fb      	ldr	r3, [r7, #28]
 800bb62:	9300      	str	r3, [sp, #0]
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	2200      	movs	r2, #0
 800bb68:	494a      	ldr	r1, [pc, #296]	; (800bc94 <HAL_I2C_Slave_Transmit+0x228>)
 800bb6a:	68f8      	ldr	r0, [r7, #12]
 800bb6c:	f005 fa0e 	bl	8010f8c <I2C_WaitOnFlagUntilTimeout>
 800bb70:	4603      	mov	r3, r0
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d001      	beq.n	800bb7a <HAL_I2C_Slave_Transmit+0x10e>
      {
        return HAL_ERROR;
 800bb76:	2301      	movs	r3, #1
 800bb78:	e086      	b.n	800bc88 <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	61bb      	str	r3, [r7, #24]
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	695b      	ldr	r3, [r3, #20]
 800bb84:	61bb      	str	r3, [r7, #24]
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	699b      	ldr	r3, [r3, #24]
 800bb8c:	61bb      	str	r3, [r7, #24]
 800bb8e:	69bb      	ldr	r3, [r7, #24]
    }

    while (hi2c->XferSize > 0U)
 800bb90:	e04c      	b.n	800bc2c <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bb92:	69fa      	ldr	r2, [r7, #28]
 800bb94:	6839      	ldr	r1, [r7, #0]
 800bb96:	68f8      	ldr	r0, [r7, #12]
 800bb98:	f005 face 	bl	8011138 <I2C_WaitOnTXEFlagUntilTimeout>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d009      	beq.n	800bbb6 <HAL_I2C_Slave_Transmit+0x14a>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	681a      	ldr	r2, [r3, #0]
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bbb0:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	e068      	b.n	800bc88 <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbba:	781a      	ldrb	r2, [r3, #0]
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbc6:	1c5a      	adds	r2, r3, #1
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbd0:	b29b      	uxth	r3, r3
 800bbd2:	3b01      	subs	r3, #1
 800bbd4:	b29a      	uxth	r2, r3
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbde:	3b01      	subs	r3, #1
 800bbe0:	b29a      	uxth	r2, r3
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	695b      	ldr	r3, [r3, #20]
 800bbec:	f003 0304 	and.w	r3, r3, #4
 800bbf0:	2b04      	cmp	r3, #4
 800bbf2:	d11b      	bne.n	800bc2c <HAL_I2C_Slave_Transmit+0x1c0>
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d017      	beq.n	800bc2c <HAL_I2C_Slave_Transmit+0x1c0>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc00:	781a      	ldrb	r2, [r3, #0]
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc0c:	1c5a      	adds	r2, r3, #1
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc16:	b29b      	uxth	r3, r3
 800bc18:	3b01      	subs	r3, #1
 800bc1a:	b29a      	uxth	r2, r3
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc24:	3b01      	subs	r3, #1
 800bc26:	b29a      	uxth	r2, r3
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	851a      	strh	r2, [r3, #40]	; 0x28
    while (hi2c->XferSize > 0U)
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d1ae      	bne.n	800bb92 <HAL_I2C_Slave_Transmit+0x126>
      }
    }

    /* Wait until AF flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_AF, RESET, Timeout, tickstart) != HAL_OK)
 800bc34:	69fb      	ldr	r3, [r7, #28]
 800bc36:	9300      	str	r3, [sp, #0]
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	f44f 3182 	mov.w	r1, #66560	; 0x10400
 800bc40:	68f8      	ldr	r0, [r7, #12]
 800bc42:	f005 f9a3 	bl	8010f8c <I2C_WaitOnFlagUntilTimeout>
 800bc46:	4603      	mov	r3, r0
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d001      	beq.n	800bc50 <HAL_I2C_Slave_Transmit+0x1e4>
    {
      return HAL_ERROR;
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	e01b      	b.n	800bc88 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bc58:	615a      	str	r2, [r3, #20]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	681a      	ldr	r2, [r3, #0]
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bc68:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	2220      	movs	r2, #32
 800bc6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	2200      	movs	r2, #0
 800bc76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800bc82:	2300      	movs	r3, #0
 800bc84:	e000      	b.n	800bc88 <HAL_I2C_Slave_Transmit+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800bc86:	2302      	movs	r3, #2
  }
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	3720      	adds	r7, #32
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}
 800bc90:	ffff0000 	.word	0xffff0000
 800bc94:	00010002 	.word	0x00010002

0800bc98 <HAL_I2C_Slave_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b08a      	sub	sp, #40	; 0x28
 800bc9c:	af02      	add	r7, sp, #8
 800bc9e:	60f8      	str	r0, [r7, #12]
 800bca0:	60b9      	str	r1, [r7, #8]
 800bca2:	603b      	str	r3, [r7, #0]
 800bca4:	4613      	mov	r3, r2
 800bca6:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800bca8:	f7fa fdb4 	bl	8006814 <HAL_GetTick>
 800bcac:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bcb4:	b2db      	uxtb	r3, r3
 800bcb6:	2b20      	cmp	r3, #32
 800bcb8:	f040 80ee 	bne.w	800be98 <HAL_I2C_Slave_Receive+0x200>
  {
    if ((pData == NULL) || (Size == (uint16_t)0))
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d002      	beq.n	800bcc8 <HAL_I2C_Slave_Receive+0x30>
 800bcc2:	88fb      	ldrh	r3, [r7, #6]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d101      	bne.n	800bccc <HAL_I2C_Slave_Receive+0x34>
    {
      return HAL_ERROR;
 800bcc8:	2301      	movs	r3, #1
 800bcca:	e0e6      	b.n	800be9a <HAL_I2C_Slave_Receive+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bcd2:	2b01      	cmp	r3, #1
 800bcd4:	d101      	bne.n	800bcda <HAL_I2C_Slave_Receive+0x42>
 800bcd6:	2302      	movs	r3, #2
 800bcd8:	e0df      	b.n	800be9a <HAL_I2C_Slave_Receive+0x202>
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	2201      	movs	r2, #1
 800bcde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	f003 0301 	and.w	r3, r3, #1
 800bcec:	2b01      	cmp	r3, #1
 800bcee:	d007      	beq.n	800bd00 <HAL_I2C_Slave_Receive+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	681a      	ldr	r2, [r3, #0]
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	f042 0201 	orr.w	r2, r2, #1
 800bcfe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	681a      	ldr	r2, [r3, #0]
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bd0e:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	2222      	movs	r2, #34	; 0x22
 800bd14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	2220      	movs	r2, #32
 800bd1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	2200      	movs	r2, #0
 800bd24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	68ba      	ldr	r2, [r7, #8]
 800bd2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	88fa      	ldrh	r2, [r7, #6]
 800bd30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd36:	b29a      	uxth	r2, r3
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	4a59      	ldr	r2, [pc, #356]	; (800bea4 <HAL_I2C_Slave_Receive+0x20c>)
 800bd40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	681a      	ldr	r2, [r3, #0]
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bd50:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800bd52:	69fb      	ldr	r3, [r7, #28]
 800bd54:	9300      	str	r3, [sp, #0]
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	2200      	movs	r2, #0
 800bd5a:	4953      	ldr	r1, [pc, #332]	; (800bea8 <HAL_I2C_Slave_Receive+0x210>)
 800bd5c:	68f8      	ldr	r0, [r7, #12]
 800bd5e:	f005 f915 	bl	8010f8c <I2C_WaitOnFlagUntilTimeout>
 800bd62:	4603      	mov	r3, r0
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d001      	beq.n	800bd6c <HAL_I2C_Slave_Receive+0xd4>
    {
      return HAL_ERROR;
 800bd68:	2301      	movs	r3, #1
 800bd6a:	e096      	b.n	800be9a <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	617b      	str	r3, [r7, #20]
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	695b      	ldr	r3, [r3, #20]
 800bd76:	617b      	str	r3, [r7, #20]
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	699b      	ldr	r3, [r3, #24]
 800bd7e:	617b      	str	r3, [r7, #20]
 800bd80:	697b      	ldr	r3, [r7, #20]

    while (hi2c->XferSize > 0U)
 800bd82:	e04e      	b.n	800be22 <HAL_I2C_Slave_Receive+0x18a>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bd84:	69fa      	ldr	r2, [r7, #28]
 800bd86:	6839      	ldr	r1, [r7, #0]
 800bd88:	68f8      	ldr	r0, [r7, #12]
 800bd8a:	f005 fac7 	bl	801131c <I2C_WaitOnRXNEFlagUntilTimeout>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d009      	beq.n	800bda8 <HAL_I2C_Slave_Receive+0x110>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	681a      	ldr	r2, [r3, #0]
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bda2:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 800bda4:	2301      	movs	r3, #1
 800bda6:	e078      	b.n	800be9a <HAL_I2C_Slave_Receive+0x202>
      }

      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	691a      	ldr	r2, [r3, #16]
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdb2:	b2d2      	uxtb	r2, r2
 800bdb4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdba:	1c5a      	adds	r2, r3, #1
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bdc4:	3b01      	subs	r3, #1
 800bdc6:	b29a      	uxth	r2, r3
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bdd0:	b29b      	uxth	r3, r3
 800bdd2:	3b01      	subs	r3, #1
 800bdd4:	b29a      	uxth	r2, r3
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	695b      	ldr	r3, [r3, #20]
 800bde0:	f003 0304 	and.w	r3, r3, #4
 800bde4:	2b04      	cmp	r3, #4
 800bde6:	d11c      	bne.n	800be22 <HAL_I2C_Slave_Receive+0x18a>
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d018      	beq.n	800be22 <HAL_I2C_Slave_Receive+0x18a>
      {
        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	691a      	ldr	r2, [r3, #16]
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdfa:	b2d2      	uxtb	r2, r2
 800bdfc:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be02:	1c5a      	adds	r2, r3, #1
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be0c:	3b01      	subs	r3, #1
 800be0e:	b29a      	uxth	r2, r3
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be18:	b29b      	uxth	r3, r3
 800be1a:	3b01      	subs	r3, #1
 800be1c:	b29a      	uxth	r2, r3
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be26:	2b00      	cmp	r3, #0
 800be28:	d1ac      	bne.n	800bd84 <HAL_I2C_Slave_Receive+0xec>
      }
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800be2a:	69fa      	ldr	r2, [r7, #28]
 800be2c:	6839      	ldr	r1, [r7, #0]
 800be2e:	68f8      	ldr	r0, [r7, #12]
 800be30:	f005 fa04 	bl	801123c <I2C_WaitOnSTOPFlagUntilTimeout>
 800be34:	4603      	mov	r3, r0
 800be36:	2b00      	cmp	r3, #0
 800be38:	d009      	beq.n	800be4e <HAL_I2C_Slave_Receive+0x1b6>
    {
      /* Disable Address Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	681a      	ldr	r2, [r3, #0]
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800be48:	601a      	str	r2, [r3, #0]

      return HAL_ERROR;
 800be4a:	2301      	movs	r3, #1
 800be4c:	e025      	b.n	800be9a <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800be4e:	2300      	movs	r3, #0
 800be50:	61bb      	str	r3, [r7, #24]
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	695b      	ldr	r3, [r3, #20]
 800be58:	61bb      	str	r3, [r7, #24]
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	681a      	ldr	r2, [r3, #0]
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	f042 0201 	orr.w	r2, r2, #1
 800be68:	601a      	str	r2, [r3, #0]
 800be6a:	69bb      	ldr	r3, [r7, #24]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	681a      	ldr	r2, [r3, #0]
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800be7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	2220      	movs	r2, #32
 800be80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	2200      	movs	r2, #0
 800be88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	2200      	movs	r2, #0
 800be90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800be94:	2300      	movs	r3, #0
 800be96:	e000      	b.n	800be9a <HAL_I2C_Slave_Receive+0x202>
  }
  else
  {
    return HAL_BUSY;
 800be98:	2302      	movs	r3, #2
  }
}
 800be9a:	4618      	mov	r0, r3
 800be9c:	3720      	adds	r7, #32
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}
 800bea2:	bf00      	nop
 800bea4:	ffff0000 	.word	0xffff0000
 800bea8:	00010002 	.word	0x00010002

0800beac <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800beac:	b480      	push	{r7}
 800beae:	b087      	sub	sp, #28
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	60f8      	str	r0, [r7, #12]
 800beb4:	607a      	str	r2, [r7, #4]
 800beb6:	461a      	mov	r2, r3
 800beb8:	460b      	mov	r3, r1
 800beba:	817b      	strh	r3, [r7, #10]
 800bebc:	4613      	mov	r3, r2
 800bebe:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800bec0:	2300      	movs	r3, #0
 800bec2:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800beca:	b2db      	uxtb	r3, r3
 800becc:	2b20      	cmp	r3, #32
 800bece:	f040 8085 	bne.w	800bfdc <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800bed2:	4b46      	ldr	r3, [pc, #280]	; (800bfec <HAL_I2C_Master_Transmit_IT+0x140>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	08db      	lsrs	r3, r3, #3
 800bed8:	4a45      	ldr	r2, [pc, #276]	; (800bff0 <HAL_I2C_Master_Transmit_IT+0x144>)
 800beda:	fba2 2303 	umull	r2, r3, r2, r3
 800bede:	0a1a      	lsrs	r2, r3, #8
 800bee0:	4613      	mov	r3, r2
 800bee2:	009b      	lsls	r3, r3, #2
 800bee4:	4413      	add	r3, r2
 800bee6:	009a      	lsls	r2, r3, #2
 800bee8:	4413      	add	r3, r2
 800beea:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	3b01      	subs	r3, #1
 800bef0:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800bef2:	697b      	ldr	r3, [r7, #20]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d116      	bne.n	800bf26 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	2200      	movs	r2, #0
 800befc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	2220      	movs	r2, #32
 800bf02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	2200      	movs	r2, #0
 800bf0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf12:	f043 0220 	orr.w	r2, r3, #32
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bf22:	2301      	movs	r3, #1
 800bf24:	e05b      	b.n	800bfde <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	699b      	ldr	r3, [r3, #24]
 800bf2c:	f003 0302 	and.w	r3, r3, #2
 800bf30:	2b02      	cmp	r3, #2
 800bf32:	d0db      	beq.n	800beec <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf3a:	2b01      	cmp	r3, #1
 800bf3c:	d101      	bne.n	800bf42 <HAL_I2C_Master_Transmit_IT+0x96>
 800bf3e:	2302      	movs	r3, #2
 800bf40:	e04d      	b.n	800bfde <HAL_I2C_Master_Transmit_IT+0x132>
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	2201      	movs	r2, #1
 800bf46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	f003 0301 	and.w	r3, r3, #1
 800bf54:	2b01      	cmp	r3, #1
 800bf56:	d007      	beq.n	800bf68 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	681a      	ldr	r2, [r3, #0]
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	f042 0201 	orr.w	r2, r2, #1
 800bf66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	681a      	ldr	r2, [r3, #0]
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bf76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	2221      	movs	r2, #33	; 0x21
 800bf7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	2210      	movs	r2, #16
 800bf84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	687a      	ldr	r2, [r7, #4]
 800bf92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	893a      	ldrh	r2, [r7, #8]
 800bf98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf9e:	b29a      	uxth	r2, r3
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	4a13      	ldr	r2, [pc, #76]	; (800bff4 <HAL_I2C_Master_Transmit_IT+0x148>)
 800bfa8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800bfaa:	897a      	ldrh	r2, [r7, #10]
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	685a      	ldr	r2, [r3, #4]
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800bfc6:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	681a      	ldr	r2, [r3, #0]
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bfd6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800bfd8:	2300      	movs	r3, #0
 800bfda:	e000      	b.n	800bfde <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 800bfdc:	2302      	movs	r3, #2
  }
}
 800bfde:	4618      	mov	r0, r3
 800bfe0:	371c      	adds	r7, #28
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe8:	4770      	bx	lr
 800bfea:	bf00      	nop
 800bfec:	20000058 	.word	0x20000058
 800bff0:	14f8b589 	.word	0x14f8b589
 800bff4:	ffff0000 	.word	0xffff0000

0800bff8 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800bff8:	b480      	push	{r7}
 800bffa:	b087      	sub	sp, #28
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	60f8      	str	r0, [r7, #12]
 800c000:	607a      	str	r2, [r7, #4]
 800c002:	461a      	mov	r2, r3
 800c004:	460b      	mov	r3, r1
 800c006:	817b      	strh	r3, [r7, #10]
 800c008:	4613      	mov	r3, r2
 800c00a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800c00c:	2300      	movs	r3, #0
 800c00e:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c016:	b2db      	uxtb	r3, r3
 800c018:	2b20      	cmp	r3, #32
 800c01a:	f040 808d 	bne.w	800c138 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800c01e:	4b4a      	ldr	r3, [pc, #296]	; (800c148 <HAL_I2C_Master_Receive_IT+0x150>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	08db      	lsrs	r3, r3, #3
 800c024:	4a49      	ldr	r2, [pc, #292]	; (800c14c <HAL_I2C_Master_Receive_IT+0x154>)
 800c026:	fba2 2303 	umull	r2, r3, r2, r3
 800c02a:	0a1a      	lsrs	r2, r3, #8
 800c02c:	4613      	mov	r3, r2
 800c02e:	009b      	lsls	r3, r3, #2
 800c030:	4413      	add	r3, r2
 800c032:	009a      	lsls	r2, r3, #2
 800c034:	4413      	add	r3, r2
 800c036:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800c038:	697b      	ldr	r3, [r7, #20]
 800c03a:	3b01      	subs	r3, #1
 800c03c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800c03e:	697b      	ldr	r3, [r7, #20]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d116      	bne.n	800c072 <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	2200      	movs	r2, #0
 800c048:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	2220      	movs	r2, #32
 800c04e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	2200      	movs	r2, #0
 800c056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c05e:	f043 0220 	orr.w	r2, r3, #32
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	2200      	movs	r2, #0
 800c06a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c06e:	2301      	movs	r3, #1
 800c070:	e063      	b.n	800c13a <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	699b      	ldr	r3, [r3, #24]
 800c078:	f003 0302 	and.w	r3, r3, #2
 800c07c:	2b02      	cmp	r3, #2
 800c07e:	d0db      	beq.n	800c038 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c086:	2b01      	cmp	r3, #1
 800c088:	d101      	bne.n	800c08e <HAL_I2C_Master_Receive_IT+0x96>
 800c08a:	2302      	movs	r3, #2
 800c08c:	e055      	b.n	800c13a <HAL_I2C_Master_Receive_IT+0x142>
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	2201      	movs	r2, #1
 800c092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	f003 0301 	and.w	r3, r3, #1
 800c0a0:	2b01      	cmp	r3, #1
 800c0a2:	d007      	beq.n	800c0b4 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	681a      	ldr	r2, [r3, #0]
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	f042 0201 	orr.w	r2, r2, #1
 800c0b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	681a      	ldr	r2, [r3, #0]
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c0c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	2222      	movs	r2, #34	; 0x22
 800c0c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	2210      	movs	r2, #16
 800c0d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	687a      	ldr	r2, [r7, #4]
 800c0de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	893a      	ldrh	r2, [r7, #8]
 800c0e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c0ea:	b29a      	uxth	r2, r3
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	4a17      	ldr	r2, [pc, #92]	; (800c150 <HAL_I2C_Master_Receive_IT+0x158>)
 800c0f4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800c0f6:	897a      	ldrh	r2, [r7, #10]
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	2200      	movs	r2, #0
 800c100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	685a      	ldr	r2, [r3, #4]
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800c112:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	681a      	ldr	r2, [r3, #0]
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c122:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	681a      	ldr	r2, [r3, #0]
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c132:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800c134:	2300      	movs	r3, #0
 800c136:	e000      	b.n	800c13a <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 800c138:	2302      	movs	r3, #2
  }
}
 800c13a:	4618      	mov	r0, r3
 800c13c:	371c      	adds	r7, #28
 800c13e:	46bd      	mov	sp, r7
 800c140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c144:	4770      	bx	lr
 800c146:	bf00      	nop
 800c148:	20000058 	.word	0x20000058
 800c14c:	14f8b589 	.word	0x14f8b589
 800c150:	ffff0000 	.word	0xffff0000

0800c154 <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800c154:	b480      	push	{r7}
 800c156:	b085      	sub	sp, #20
 800c158:	af00      	add	r7, sp, #0
 800c15a:	60f8      	str	r0, [r7, #12]
 800c15c:	60b9      	str	r1, [r7, #8]
 800c15e:	4613      	mov	r3, r2
 800c160:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c168:	b2db      	uxtb	r3, r3
 800c16a:	2b20      	cmp	r3, #32
 800c16c:	d158      	bne.n	800c220 <HAL_I2C_Slave_Transmit_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d002      	beq.n	800c17a <HAL_I2C_Slave_Transmit_IT+0x26>
 800c174:	88fb      	ldrh	r3, [r7, #6]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d101      	bne.n	800c17e <HAL_I2C_Slave_Transmit_IT+0x2a>
    {
      return  HAL_ERROR;
 800c17a:	2301      	movs	r3, #1
 800c17c:	e051      	b.n	800c222 <HAL_I2C_Slave_Transmit_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c184:	2b01      	cmp	r3, #1
 800c186:	d101      	bne.n	800c18c <HAL_I2C_Slave_Transmit_IT+0x38>
 800c188:	2302      	movs	r3, #2
 800c18a:	e04a      	b.n	800c222 <HAL_I2C_Slave_Transmit_IT+0xce>
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	2201      	movs	r2, #1
 800c190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	f003 0301 	and.w	r3, r3, #1
 800c19e:	2b01      	cmp	r3, #1
 800c1a0:	d007      	beq.n	800c1b2 <HAL_I2C_Slave_Transmit_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	681a      	ldr	r2, [r3, #0]
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	f042 0201 	orr.w	r2, r2, #1
 800c1b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	681a      	ldr	r2, [r3, #0]
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c1c0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	2221      	movs	r2, #33	; 0x21
 800c1c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	2220      	movs	r2, #32
 800c1ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	68ba      	ldr	r2, [r7, #8]
 800c1dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	88fa      	ldrh	r2, [r7, #6]
 800c1e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1e8:	b29a      	uxth	r2, r3
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	4a0f      	ldr	r2, [pc, #60]	; (800c230 <HAL_I2C_Slave_Transmit_IT+0xdc>)
 800c1f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	681a      	ldr	r2, [r3, #0]
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c202:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	2200      	movs	r2, #0
 800c208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	685a      	ldr	r2, [r3, #4]
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800c21a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800c21c:	2300      	movs	r3, #0
 800c21e:	e000      	b.n	800c222 <HAL_I2C_Slave_Transmit_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 800c220:	2302      	movs	r3, #2
  }
}
 800c222:	4618      	mov	r0, r3
 800c224:	3714      	adds	r7, #20
 800c226:	46bd      	mov	sp, r7
 800c228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22c:	4770      	bx	lr
 800c22e:	bf00      	nop
 800c230:	ffff0000 	.word	0xffff0000

0800c234 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800c234:	b480      	push	{r7}
 800c236:	b085      	sub	sp, #20
 800c238:	af00      	add	r7, sp, #0
 800c23a:	60f8      	str	r0, [r7, #12]
 800c23c:	60b9      	str	r1, [r7, #8]
 800c23e:	4613      	mov	r3, r2
 800c240:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c248:	b2db      	uxtb	r3, r3
 800c24a:	2b20      	cmp	r3, #32
 800c24c:	d158      	bne.n	800c300 <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d002      	beq.n	800c25a <HAL_I2C_Slave_Receive_IT+0x26>
 800c254:	88fb      	ldrh	r3, [r7, #6]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d101      	bne.n	800c25e <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 800c25a:	2301      	movs	r3, #1
 800c25c:	e051      	b.n	800c302 <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c264:	2b01      	cmp	r3, #1
 800c266:	d101      	bne.n	800c26c <HAL_I2C_Slave_Receive_IT+0x38>
 800c268:	2302      	movs	r3, #2
 800c26a:	e04a      	b.n	800c302 <HAL_I2C_Slave_Receive_IT+0xce>
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	2201      	movs	r2, #1
 800c270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f003 0301 	and.w	r3, r3, #1
 800c27e:	2b01      	cmp	r3, #1
 800c280:	d007      	beq.n	800c292 <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	681a      	ldr	r2, [r3, #0]
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	f042 0201 	orr.w	r2, r2, #1
 800c290:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	681a      	ldr	r2, [r3, #0]
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c2a0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	2222      	movs	r2, #34	; 0x22
 800c2a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	2220      	movs	r2, #32
 800c2ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	68ba      	ldr	r2, [r7, #8]
 800c2bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	88fa      	ldrh	r2, [r7, #6]
 800c2c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2c8:	b29a      	uxth	r2, r3
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	4a0f      	ldr	r2, [pc, #60]	; (800c310 <HAL_I2C_Slave_Receive_IT+0xdc>)
 800c2d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	681a      	ldr	r2, [r3, #0]
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c2e2:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	685a      	ldr	r2, [r3, #4]
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800c2fa:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	e000      	b.n	800c302 <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 800c300:	2302      	movs	r3, #2
  }
}
 800c302:	4618      	mov	r0, r3
 800c304:	3714      	adds	r7, #20
 800c306:	46bd      	mov	sp, r7
 800c308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30c:	4770      	bx	lr
 800c30e:	bf00      	nop
 800c310:	ffff0000 	.word	0xffff0000

0800c314 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b086      	sub	sp, #24
 800c318:	af00      	add	r7, sp, #0
 800c31a:	60f8      	str	r0, [r7, #12]
 800c31c:	607a      	str	r2, [r7, #4]
 800c31e:	461a      	mov	r2, r3
 800c320:	460b      	mov	r3, r1
 800c322:	817b      	strh	r3, [r7, #10]
 800c324:	4613      	mov	r3, r2
 800c326:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800c328:	2300      	movs	r3, #0
 800c32a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c332:	b2db      	uxtb	r3, r3
 800c334:	2b20      	cmp	r3, #32
 800c336:	f040 810d 	bne.w	800c554 <HAL_I2C_Master_Transmit_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800c33a:	4b89      	ldr	r3, [pc, #548]	; (800c560 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	08db      	lsrs	r3, r3, #3
 800c340:	4a88      	ldr	r2, [pc, #544]	; (800c564 <HAL_I2C_Master_Transmit_DMA+0x250>)
 800c342:	fba2 2303 	umull	r2, r3, r2, r3
 800c346:	0a1a      	lsrs	r2, r3, #8
 800c348:	4613      	mov	r3, r2
 800c34a:	009b      	lsls	r3, r3, #2
 800c34c:	4413      	add	r3, r2
 800c34e:	009a      	lsls	r2, r3, #2
 800c350:	4413      	add	r3, r2
 800c352:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	3b01      	subs	r3, #1
 800c358:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 800c35a:	693b      	ldr	r3, [r7, #16]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d116      	bne.n	800c38e <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	2200      	movs	r2, #0
 800c364:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	2220      	movs	r2, #32
 800c36a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	2200      	movs	r2, #0
 800c372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c37a:	f043 0220 	orr.w	r2, r3, #32
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	2200      	movs	r2, #0
 800c386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c38a:	2301      	movs	r3, #1
 800c38c:	e0e3      	b.n	800c556 <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	699b      	ldr	r3, [r3, #24]
 800c394:	f003 0302 	and.w	r3, r3, #2
 800c398:	2b02      	cmp	r3, #2
 800c39a:	d0db      	beq.n	800c354 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c3a2:	2b01      	cmp	r3, #1
 800c3a4:	d101      	bne.n	800c3aa <HAL_I2C_Master_Transmit_DMA+0x96>
 800c3a6:	2302      	movs	r3, #2
 800c3a8:	e0d5      	b.n	800c556 <HAL_I2C_Master_Transmit_DMA+0x242>
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	2201      	movs	r2, #1
 800c3ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	f003 0301 	and.w	r3, r3, #1
 800c3bc:	2b01      	cmp	r3, #1
 800c3be:	d007      	beq.n	800c3d0 <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	681a      	ldr	r2, [r3, #0]
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f042 0201 	orr.w	r2, r2, #1
 800c3ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	681a      	ldr	r2, [r3, #0]
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c3de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	2221      	movs	r2, #33	; 0x21
 800c3e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	2210      	movs	r2, #16
 800c3ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	687a      	ldr	r2, [r7, #4]
 800c3fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	893a      	ldrh	r2, [r7, #8]
 800c400:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c406:	b29a      	uxth	r2, r3
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	4a56      	ldr	r2, [pc, #344]	; (800c568 <HAL_I2C_Master_Transmit_DMA+0x254>)
 800c410:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800c412:	897a      	ldrh	r2, [r7, #10]
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d07b      	beq.n	800c518 <HAL_I2C_Master_Transmit_DMA+0x204>
    {
      if (hi2c->hdmatx != NULL)
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c424:	2b00      	cmp	r3, #0
 800c426:	d02a      	beq.n	800c47e <HAL_I2C_Master_Transmit_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c42c:	4a4f      	ldr	r2, [pc, #316]	; (800c56c <HAL_I2C_Master_Transmit_DMA+0x258>)
 800c42e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c434:	4a4e      	ldr	r2, [pc, #312]	; (800c570 <HAL_I2C_Master_Transmit_DMA+0x25c>)
 800c436:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c43c:	2200      	movs	r2, #0
 800c43e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c444:	2200      	movs	r2, #0
 800c446:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c44c:	2200      	movs	r2, #0
 800c44e:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c454:	2200      	movs	r2, #0
 800c456:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c460:	4619      	mov	r1, r3
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	3310      	adds	r3, #16
 800c468:	461a      	mov	r2, r3
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c46e:	f7fb fc3a 	bl	8007ce6 <HAL_DMA_Start_IT>
 800c472:	4603      	mov	r3, r0
 800c474:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800c476:	7dfb      	ldrb	r3, [r7, #23]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d139      	bne.n	800c4f0 <HAL_I2C_Master_Transmit_DMA+0x1dc>
 800c47c:	e013      	b.n	800c4a6 <HAL_I2C_Master_Transmit_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	2220      	movs	r2, #32
 800c482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	2200      	movs	r2, #0
 800c48a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c492:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	2200      	movs	r2, #0
 800c49e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	e057      	b.n	800c556 <HAL_I2C_Master_Transmit_DMA+0x242>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	685a      	ldr	r2, [r3, #4]
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800c4bc:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	685a      	ldr	r2, [r3, #4]
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c4cc:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	681a      	ldr	r2, [r3, #0]
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c4dc:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	681a      	ldr	r2, [r3, #0]
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c4ec:	601a      	str	r2, [r3, #0]
 800c4ee:	e02f      	b.n	800c550 <HAL_I2C_Master_Transmit_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	2220      	movs	r2, #32
 800c4f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c504:	f043 0210 	orr.w	r2, r3, #16
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	2200      	movs	r2, #0
 800c510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c514:	2301      	movs	r3, #1
 800c516:	e01e      	b.n	800c556 <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	681a      	ldr	r2, [r3, #0]
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c526:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	681a      	ldr	r2, [r3, #0]
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c536:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	2200      	movs	r2, #0
 800c53c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	685a      	ldr	r2, [r3, #4]
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800c54e:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 800c550:	2300      	movs	r3, #0
 800c552:	e000      	b.n	800c556 <HAL_I2C_Master_Transmit_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 800c554:	2302      	movs	r3, #2
  }
}
 800c556:	4618      	mov	r0, r3
 800c558:	3718      	adds	r7, #24
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bd80      	pop	{r7, pc}
 800c55e:	bf00      	nop
 800c560:	20000058 	.word	0x20000058
 800c564:	14f8b589 	.word	0x14f8b589
 800c568:	ffff0000 	.word	0xffff0000
 800c56c:	08010c19 	.word	0x08010c19
 800c570:	08010dc3 	.word	0x08010dc3

0800c574 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b086      	sub	sp, #24
 800c578:	af00      	add	r7, sp, #0
 800c57a:	60f8      	str	r0, [r7, #12]
 800c57c:	607a      	str	r2, [r7, #4]
 800c57e:	461a      	mov	r2, r3
 800c580:	460b      	mov	r3, r1
 800c582:	817b      	strh	r3, [r7, #10]
 800c584:	4613      	mov	r3, r2
 800c586:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800c588:	2300      	movs	r3, #0
 800c58a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c592:	b2db      	uxtb	r3, r3
 800c594:	2b20      	cmp	r3, #32
 800c596:	f040 810d 	bne.w	800c7b4 <HAL_I2C_Master_Receive_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800c59a:	4b89      	ldr	r3, [pc, #548]	; (800c7c0 <HAL_I2C_Master_Receive_DMA+0x24c>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	08db      	lsrs	r3, r3, #3
 800c5a0:	4a88      	ldr	r2, [pc, #544]	; (800c7c4 <HAL_I2C_Master_Receive_DMA+0x250>)
 800c5a2:	fba2 2303 	umull	r2, r3, r2, r3
 800c5a6:	0a1a      	lsrs	r2, r3, #8
 800c5a8:	4613      	mov	r3, r2
 800c5aa:	009b      	lsls	r3, r3, #2
 800c5ac:	4413      	add	r3, r2
 800c5ae:	009a      	lsls	r2, r3, #2
 800c5b0:	4413      	add	r3, r2
 800c5b2:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 800c5b4:	693b      	ldr	r3, [r7, #16]
 800c5b6:	3b01      	subs	r3, #1
 800c5b8:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 800c5ba:	693b      	ldr	r3, [r7, #16]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d116      	bne.n	800c5ee <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	2220      	movs	r2, #32
 800c5ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5da:	f043 0220 	orr.w	r2, r3, #32
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c5ea:	2301      	movs	r3, #1
 800c5ec:	e0e3      	b.n	800c7b6 <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	699b      	ldr	r3, [r3, #24]
 800c5f4:	f003 0302 	and.w	r3, r3, #2
 800c5f8:	2b02      	cmp	r3, #2
 800c5fa:	d0db      	beq.n	800c5b4 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c602:	2b01      	cmp	r3, #1
 800c604:	d101      	bne.n	800c60a <HAL_I2C_Master_Receive_DMA+0x96>
 800c606:	2302      	movs	r3, #2
 800c608:	e0d5      	b.n	800c7b6 <HAL_I2C_Master_Receive_DMA+0x242>
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	2201      	movs	r2, #1
 800c60e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f003 0301 	and.w	r3, r3, #1
 800c61c:	2b01      	cmp	r3, #1
 800c61e:	d007      	beq.n	800c630 <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	681a      	ldr	r2, [r3, #0]
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	f042 0201 	orr.w	r2, r2, #1
 800c62e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	681a      	ldr	r2, [r3, #0]
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c63e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	2222      	movs	r2, #34	; 0x22
 800c644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	2210      	movs	r2, #16
 800c64c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	2200      	movs	r2, #0
 800c654:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	687a      	ldr	r2, [r7, #4]
 800c65a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	893a      	ldrh	r2, [r7, #8]
 800c660:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c666:	b29a      	uxth	r2, r3
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	4a56      	ldr	r2, [pc, #344]	; (800c7c8 <HAL_I2C_Master_Receive_DMA+0x254>)
 800c670:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800c672:	897a      	ldrh	r2, [r7, #10]
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d07b      	beq.n	800c778 <HAL_I2C_Master_Receive_DMA+0x204>
    {
      if (hi2c->hdmarx != NULL)
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c684:	2b00      	cmp	r3, #0
 800c686:	d02a      	beq.n	800c6de <HAL_I2C_Master_Receive_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c68c:	4a4f      	ldr	r2, [pc, #316]	; (800c7cc <HAL_I2C_Master_Receive_DMA+0x258>)
 800c68e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c694:	4a4e      	ldr	r2, [pc, #312]	; (800c7d0 <HAL_I2C_Master_Receive_DMA+0x25c>)
 800c696:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c69c:	2200      	movs	r2, #0
 800c69e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	3310      	adds	r3, #16
 800c6c2:	4619      	mov	r1, r3
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6c8:	461a      	mov	r2, r3
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c6ce:	f7fb fb0a 	bl	8007ce6 <HAL_DMA_Start_IT>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800c6d6:	7dfb      	ldrb	r3, [r7, #23]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d139      	bne.n	800c750 <HAL_I2C_Master_Receive_DMA+0x1dc>
 800c6dc:	e013      	b.n	800c706 <HAL_I2C_Master_Receive_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	2220      	movs	r2, #32
 800c6e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6f2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800c702:	2301      	movs	r3, #1
 800c704:	e057      	b.n	800c7b6 <HAL_I2C_Master_Receive_DMA+0x242>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	681a      	ldr	r2, [r3, #0]
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c714:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	681a      	ldr	r2, [r3, #0]
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c724:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	2200      	movs	r2, #0
 800c72a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	685a      	ldr	r2, [r3, #4]
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800c73c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	685a      	ldr	r2, [r3, #4]
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c74c:	605a      	str	r2, [r3, #4]
 800c74e:	e02f      	b.n	800c7b0 <HAL_I2C_Master_Receive_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	2220      	movs	r2, #32
 800c754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	2200      	movs	r2, #0
 800c75c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c764:	f043 0210 	orr.w	r2, r3, #16
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	2200      	movs	r2, #0
 800c770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c774:	2301      	movs	r3, #1
 800c776:	e01e      	b.n	800c7b6 <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	2200      	movs	r2, #0
 800c77c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	685a      	ldr	r2, [r3, #4]
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800c78e:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	681a      	ldr	r2, [r3, #0]
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c79e:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	681a      	ldr	r2, [r3, #0]
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c7ae:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	e000      	b.n	800c7b6 <HAL_I2C_Master_Receive_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 800c7b4:	2302      	movs	r3, #2
  }
}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	3718      	adds	r7, #24
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}
 800c7be:	bf00      	nop
 800c7c0:	20000058 	.word	0x20000058
 800c7c4:	14f8b589 	.word	0x14f8b589
 800c7c8:	ffff0000 	.word	0xffff0000
 800c7cc:	08010c19 	.word	0x08010c19
 800c7d0:	08010dc3 	.word	0x08010dc3

0800c7d4 <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b086      	sub	sp, #24
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	60f8      	str	r0, [r7, #12]
 800c7dc:	60b9      	str	r1, [r7, #8]
 800c7de:	4613      	mov	r3, r2
 800c7e0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c7e8:	b2db      	uxtb	r3, r3
 800c7ea:	2b20      	cmp	r3, #32
 800c7ec:	f040 80b8 	bne.w	800c960 <HAL_I2C_Slave_Transmit_DMA+0x18c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d002      	beq.n	800c7fc <HAL_I2C_Slave_Transmit_DMA+0x28>
 800c7f6:	88fb      	ldrh	r3, [r7, #6]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d101      	bne.n	800c800 <HAL_I2C_Slave_Transmit_DMA+0x2c>
    {
      return  HAL_ERROR;
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	e0b0      	b.n	800c962 <HAL_I2C_Slave_Transmit_DMA+0x18e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c806:	2b01      	cmp	r3, #1
 800c808:	d101      	bne.n	800c80e <HAL_I2C_Slave_Transmit_DMA+0x3a>
 800c80a:	2302      	movs	r3, #2
 800c80c:	e0a9      	b.n	800c962 <HAL_I2C_Slave_Transmit_DMA+0x18e>
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	2201      	movs	r2, #1
 800c812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	f003 0301 	and.w	r3, r3, #1
 800c820:	2b01      	cmp	r3, #1
 800c822:	d007      	beq.n	800c834 <HAL_I2C_Slave_Transmit_DMA+0x60>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	681a      	ldr	r2, [r3, #0]
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	f042 0201 	orr.w	r2, r2, #1
 800c832:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	681a      	ldr	r2, [r3, #0]
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c842:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	2221      	movs	r2, #33	; 0x21
 800c848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	2220      	movs	r2, #32
 800c850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	2200      	movs	r2, #0
 800c858:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	68ba      	ldr	r2, [r7, #8]
 800c85e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	88fa      	ldrh	r2, [r7, #6]
 800c864:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c86a:	b29a      	uxth	r2, r3
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	4a3e      	ldr	r2, [pc, #248]	; (800c96c <HAL_I2C_Slave_Transmit_DMA+0x198>)
 800c874:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmatx != NULL)
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d02a      	beq.n	800c8d4 <HAL_I2C_Slave_Transmit_DMA+0x100>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c882:	4a3b      	ldr	r2, [pc, #236]	; (800c970 <HAL_I2C_Slave_Transmit_DMA+0x19c>)
 800c884:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c88a:	4a3a      	ldr	r2, [pc, #232]	; (800c974 <HAL_I2C_Slave_Transmit_DMA+0x1a0>)
 800c88c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c892:	2200      	movs	r2, #0
 800c894:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferM1CpltCallback = NULL;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c89a:	2200      	movs	r2, #0
 800c89c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmatx->XferAbortCallback = NULL;
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8b6:	4619      	mov	r1, r3
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	3310      	adds	r3, #16
 800c8be:	461a      	mov	r2, r3
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c8c4:	f7fb fa0f 	bl	8007ce6 <HAL_DMA_Start_IT>
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800c8cc:	7dfb      	ldrb	r3, [r7, #23]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d132      	bne.n	800c938 <HAL_I2C_Slave_Transmit_DMA+0x164>
 800c8d2:	e013      	b.n	800c8fc <HAL_I2C_Slave_Transmit_DMA+0x128>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	2228      	movs	r2, #40	; 0x28
 800c8d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	2200      	movs	r2, #0
 800c8e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800c8f8:	2301      	movs	r3, #1
 800c8fa:	e032      	b.n	800c962 <HAL_I2C_Slave_Transmit_DMA+0x18e>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	681a      	ldr	r2, [r3, #0]
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c90a:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	2200      	movs	r2, #0
 800c910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	685a      	ldr	r2, [r3, #4]
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800c922:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	685a      	ldr	r2, [r3, #4]
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c932:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 800c934:	2300      	movs	r3, #0
 800c936:	e014      	b.n	800c962 <HAL_I2C_Slave_Transmit_DMA+0x18e>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	2220      	movs	r2, #32
 800c93c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	2200      	movs	r2, #0
 800c944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c94c:	f043 0210 	orr.w	r2, r3, #16
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	2200      	movs	r2, #0
 800c958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c95c:	2301      	movs	r3, #1
 800c95e:	e000      	b.n	800c962 <HAL_I2C_Slave_Transmit_DMA+0x18e>
    }
  }
  else
  {
    return HAL_BUSY;
 800c960:	2302      	movs	r3, #2
  }
}
 800c962:	4618      	mov	r0, r3
 800c964:	3718      	adds	r7, #24
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}
 800c96a:	bf00      	nop
 800c96c:	ffff0000 	.word	0xffff0000
 800c970:	08010c19 	.word	0x08010c19
 800c974:	08010dc3 	.word	0x08010dc3

0800c978 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b086      	sub	sp, #24
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	60f8      	str	r0, [r7, #12]
 800c980:	60b9      	str	r1, [r7, #8]
 800c982:	4613      	mov	r3, r2
 800c984:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c98c:	b2db      	uxtb	r3, r3
 800c98e:	2b20      	cmp	r3, #32
 800c990:	f040 80b8 	bne.w	800cb04 <HAL_I2C_Slave_Receive_DMA+0x18c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c994:	68bb      	ldr	r3, [r7, #8]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d002      	beq.n	800c9a0 <HAL_I2C_Slave_Receive_DMA+0x28>
 800c99a:	88fb      	ldrh	r3, [r7, #6]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d101      	bne.n	800c9a4 <HAL_I2C_Slave_Receive_DMA+0x2c>
    {
      return  HAL_ERROR;
 800c9a0:	2301      	movs	r3, #1
 800c9a2:	e0b0      	b.n	800cb06 <HAL_I2C_Slave_Receive_DMA+0x18e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c9aa:	2b01      	cmp	r3, #1
 800c9ac:	d101      	bne.n	800c9b2 <HAL_I2C_Slave_Receive_DMA+0x3a>
 800c9ae:	2302      	movs	r3, #2
 800c9b0:	e0a9      	b.n	800cb06 <HAL_I2C_Slave_Receive_DMA+0x18e>
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	2201      	movs	r2, #1
 800c9b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	f003 0301 	and.w	r3, r3, #1
 800c9c4:	2b01      	cmp	r3, #1
 800c9c6:	d007      	beq.n	800c9d8 <HAL_I2C_Slave_Receive_DMA+0x60>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	681a      	ldr	r2, [r3, #0]
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	f042 0201 	orr.w	r2, r2, #1
 800c9d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	681a      	ldr	r2, [r3, #0]
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c9e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	2222      	movs	r2, #34	; 0x22
 800c9ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	2220      	movs	r2, #32
 800c9f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	68ba      	ldr	r2, [r7, #8]
 800ca02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	88fa      	ldrh	r2, [r7, #6]
 800ca08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca0e:	b29a      	uxth	r2, r3
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	4a3e      	ldr	r2, [pc, #248]	; (800cb10 <HAL_I2C_Slave_Receive_DMA+0x198>)
 800ca18:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmarx != NULL)
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d02a      	beq.n	800ca78 <HAL_I2C_Slave_Receive_DMA+0x100>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca26:	4a3b      	ldr	r2, [pc, #236]	; (800cb14 <HAL_I2C_Slave_Receive_DMA+0x19c>)
 800ca28:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca2e:	4a3a      	ldr	r2, [pc, #232]	; (800cb18 <HAL_I2C_Slave_Receive_DMA+0x1a0>)
 800ca30:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca36:	2200      	movs	r2, #0
 800ca38:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca3e:	2200      	movs	r2, #0
 800ca40:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca46:	2200      	movs	r2, #0
 800ca48:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca4e:	2200      	movs	r2, #0
 800ca50:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	3310      	adds	r3, #16
 800ca5c:	4619      	mov	r1, r3
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca62:	461a      	mov	r2, r3
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca68:	f7fb f93d 	bl	8007ce6 <HAL_DMA_Start_IT>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800ca70:	7dfb      	ldrb	r3, [r7, #23]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d132      	bne.n	800cadc <HAL_I2C_Slave_Receive_DMA+0x164>
 800ca76:	e013      	b.n	800caa0 <HAL_I2C_Slave_Receive_DMA+0x128>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	2228      	movs	r2, #40	; 0x28
 800ca7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	2200      	movs	r2, #0
 800ca84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca8c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	2200      	movs	r2, #0
 800ca98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800ca9c:	2301      	movs	r3, #1
 800ca9e:	e032      	b.n	800cb06 <HAL_I2C_Slave_Receive_DMA+0x18e>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	681a      	ldr	r2, [r3, #0]
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800caae:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	2200      	movs	r2, #0
 800cab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	685a      	ldr	r2, [r3, #4]
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800cac6:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	685a      	ldr	r2, [r3, #4]
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cad6:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 800cad8:	2300      	movs	r3, #0
 800cada:	e014      	b.n	800cb06 <HAL_I2C_Slave_Receive_DMA+0x18e>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	2220      	movs	r2, #32
 800cae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	2200      	movs	r2, #0
 800cae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caf0:	f043 0210 	orr.w	r2, r3, #16
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	2200      	movs	r2, #0
 800cafc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800cb00:	2301      	movs	r3, #1
 800cb02:	e000      	b.n	800cb06 <HAL_I2C_Slave_Receive_DMA+0x18e>
    }
  }
  else
  {
    return HAL_BUSY;
 800cb04:	2302      	movs	r3, #2
  }
}
 800cb06:	4618      	mov	r0, r3
 800cb08:	3718      	adds	r7, #24
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}
 800cb0e:	bf00      	nop
 800cb10:	ffff0000 	.word	0xffff0000
 800cb14:	08010c19 	.word	0x08010c19
 800cb18:	08010dc3 	.word	0x08010dc3

0800cb1c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b088      	sub	sp, #32
 800cb20:	af02      	add	r7, sp, #8
 800cb22:	60f8      	str	r0, [r7, #12]
 800cb24:	4608      	mov	r0, r1
 800cb26:	4611      	mov	r1, r2
 800cb28:	461a      	mov	r2, r3
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	817b      	strh	r3, [r7, #10]
 800cb2e:	460b      	mov	r3, r1
 800cb30:	813b      	strh	r3, [r7, #8]
 800cb32:	4613      	mov	r3, r2
 800cb34:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800cb36:	f7f9 fe6d 	bl	8006814 <HAL_GetTick>
 800cb3a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cb42:	b2db      	uxtb	r3, r3
 800cb44:	2b20      	cmp	r3, #32
 800cb46:	f040 80d9 	bne.w	800ccfc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800cb4a:	697b      	ldr	r3, [r7, #20]
 800cb4c:	9300      	str	r3, [sp, #0]
 800cb4e:	2319      	movs	r3, #25
 800cb50:	2201      	movs	r2, #1
 800cb52:	496d      	ldr	r1, [pc, #436]	; (800cd08 <HAL_I2C_Mem_Write+0x1ec>)
 800cb54:	68f8      	ldr	r0, [r7, #12]
 800cb56:	f004 fa19 	bl	8010f8c <I2C_WaitOnFlagUntilTimeout>
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d001      	beq.n	800cb64 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800cb60:	2302      	movs	r3, #2
 800cb62:	e0cc      	b.n	800ccfe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cb6a:	2b01      	cmp	r3, #1
 800cb6c:	d101      	bne.n	800cb72 <HAL_I2C_Mem_Write+0x56>
 800cb6e:	2302      	movs	r3, #2
 800cb70:	e0c5      	b.n	800ccfe <HAL_I2C_Mem_Write+0x1e2>
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	2201      	movs	r2, #1
 800cb76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	f003 0301 	and.w	r3, r3, #1
 800cb84:	2b01      	cmp	r3, #1
 800cb86:	d007      	beq.n	800cb98 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	681a      	ldr	r2, [r3, #0]
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	f042 0201 	orr.w	r2, r2, #1
 800cb96:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	681a      	ldr	r2, [r3, #0]
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cba6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	2221      	movs	r2, #33	; 0x21
 800cbac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	2240      	movs	r2, #64	; 0x40
 800cbb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	2200      	movs	r2, #0
 800cbbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	6a3a      	ldr	r2, [r7, #32]
 800cbc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cbc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cbce:	b29a      	uxth	r2, r3
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	4a4d      	ldr	r2, [pc, #308]	; (800cd0c <HAL_I2C_Mem_Write+0x1f0>)
 800cbd8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800cbda:	88f8      	ldrh	r0, [r7, #6]
 800cbdc:	893a      	ldrh	r2, [r7, #8]
 800cbde:	8979      	ldrh	r1, [r7, #10]
 800cbe0:	697b      	ldr	r3, [r7, #20]
 800cbe2:	9301      	str	r3, [sp, #4]
 800cbe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbe6:	9300      	str	r3, [sp, #0]
 800cbe8:	4603      	mov	r3, r0
 800cbea:	68f8      	ldr	r0, [r7, #12]
 800cbec:	f003 fe96 	bl	801091c <I2C_RequestMemoryWrite>
 800cbf0:	4603      	mov	r3, r0
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d052      	beq.n	800cc9c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	e081      	b.n	800ccfe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cbfa:	697a      	ldr	r2, [r7, #20]
 800cbfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cbfe:	68f8      	ldr	r0, [r7, #12]
 800cc00:	f004 fa9a 	bl	8011138 <I2C_WaitOnTXEFlagUntilTimeout>
 800cc04:	4603      	mov	r3, r0
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d00d      	beq.n	800cc26 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc0e:	2b04      	cmp	r3, #4
 800cc10:	d107      	bne.n	800cc22 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	681a      	ldr	r2, [r3, #0]
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cc20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800cc22:	2301      	movs	r3, #1
 800cc24:	e06b      	b.n	800ccfe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc2a:	781a      	ldrb	r2, [r3, #0]
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc36:	1c5a      	adds	r2, r3, #1
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc40:	3b01      	subs	r3, #1
 800cc42:	b29a      	uxth	r2, r3
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc4c:	b29b      	uxth	r3, r3
 800cc4e:	3b01      	subs	r3, #1
 800cc50:	b29a      	uxth	r2, r3
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	695b      	ldr	r3, [r3, #20]
 800cc5c:	f003 0304 	and.w	r3, r3, #4
 800cc60:	2b04      	cmp	r3, #4
 800cc62:	d11b      	bne.n	800cc9c <HAL_I2C_Mem_Write+0x180>
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d017      	beq.n	800cc9c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc70:	781a      	ldrb	r2, [r3, #0]
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc7c:	1c5a      	adds	r2, r3, #1
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc86:	3b01      	subs	r3, #1
 800cc88:	b29a      	uxth	r2, r3
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc92:	b29b      	uxth	r3, r3
 800cc94:	3b01      	subs	r3, #1
 800cc96:	b29a      	uxth	r2, r3
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d1aa      	bne.n	800cbfa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cca4:	697a      	ldr	r2, [r7, #20]
 800cca6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cca8:	68f8      	ldr	r0, [r7, #12]
 800ccaa:	f004 fa86 	bl	80111ba <I2C_WaitOnBTFFlagUntilTimeout>
 800ccae:	4603      	mov	r3, r0
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d00d      	beq.n	800ccd0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccb8:	2b04      	cmp	r3, #4
 800ccba:	d107      	bne.n	800cccc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	681a      	ldr	r2, [r3, #0]
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ccca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800cccc:	2301      	movs	r3, #1
 800ccce:	e016      	b.n	800ccfe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	681a      	ldr	r2, [r3, #0]
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ccde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	2220      	movs	r2, #32
 800cce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	2200      	movs	r2, #0
 800ccec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	e000      	b.n	800ccfe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800ccfc:	2302      	movs	r3, #2
  }
}
 800ccfe:	4618      	mov	r0, r3
 800cd00:	3718      	adds	r7, #24
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}
 800cd06:	bf00      	nop
 800cd08:	00100002 	.word	0x00100002
 800cd0c:	ffff0000 	.word	0xffff0000

0800cd10 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b08c      	sub	sp, #48	; 0x30
 800cd14:	af02      	add	r7, sp, #8
 800cd16:	60f8      	str	r0, [r7, #12]
 800cd18:	4608      	mov	r0, r1
 800cd1a:	4611      	mov	r1, r2
 800cd1c:	461a      	mov	r2, r3
 800cd1e:	4603      	mov	r3, r0
 800cd20:	817b      	strh	r3, [r7, #10]
 800cd22:	460b      	mov	r3, r1
 800cd24:	813b      	strh	r3, [r7, #8]
 800cd26:	4613      	mov	r3, r2
 800cd28:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800cd2a:	f7f9 fd73 	bl	8006814 <HAL_GetTick>
 800cd2e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd36:	b2db      	uxtb	r3, r3
 800cd38:	2b20      	cmp	r3, #32
 800cd3a:	f040 8208 	bne.w	800d14e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800cd3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd40:	9300      	str	r3, [sp, #0]
 800cd42:	2319      	movs	r3, #25
 800cd44:	2201      	movs	r2, #1
 800cd46:	497b      	ldr	r1, [pc, #492]	; (800cf34 <HAL_I2C_Mem_Read+0x224>)
 800cd48:	68f8      	ldr	r0, [r7, #12]
 800cd4a:	f004 f91f 	bl	8010f8c <I2C_WaitOnFlagUntilTimeout>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d001      	beq.n	800cd58 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800cd54:	2302      	movs	r3, #2
 800cd56:	e1fb      	b.n	800d150 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd5e:	2b01      	cmp	r3, #1
 800cd60:	d101      	bne.n	800cd66 <HAL_I2C_Mem_Read+0x56>
 800cd62:	2302      	movs	r3, #2
 800cd64:	e1f4      	b.n	800d150 <HAL_I2C_Mem_Read+0x440>
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	2201      	movs	r2, #1
 800cd6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	f003 0301 	and.w	r3, r3, #1
 800cd78:	2b01      	cmp	r3, #1
 800cd7a:	d007      	beq.n	800cd8c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	681a      	ldr	r2, [r3, #0]
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	f042 0201 	orr.w	r2, r2, #1
 800cd8a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	681a      	ldr	r2, [r3, #0]
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cd9a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	2222      	movs	r2, #34	; 0x22
 800cda0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	2240      	movs	r2, #64	; 0x40
 800cda8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	2200      	movs	r2, #0
 800cdb0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdb6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800cdbc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cdc2:	b29a      	uxth	r2, r3
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	4a5b      	ldr	r2, [pc, #364]	; (800cf38 <HAL_I2C_Mem_Read+0x228>)
 800cdcc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800cdce:	88f8      	ldrh	r0, [r7, #6]
 800cdd0:	893a      	ldrh	r2, [r7, #8]
 800cdd2:	8979      	ldrh	r1, [r7, #10]
 800cdd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdd6:	9301      	str	r3, [sp, #4]
 800cdd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdda:	9300      	str	r3, [sp, #0]
 800cddc:	4603      	mov	r3, r0
 800cdde:	68f8      	ldr	r0, [r7, #12]
 800cde0:	f003 fe32 	bl	8010a48 <I2C_RequestMemoryRead>
 800cde4:	4603      	mov	r3, r0
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d001      	beq.n	800cdee <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800cdea:	2301      	movs	r3, #1
 800cdec:	e1b0      	b.n	800d150 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d113      	bne.n	800ce1e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	617b      	str	r3, [r7, #20]
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	695b      	ldr	r3, [r3, #20]
 800ce00:	617b      	str	r3, [r7, #20]
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	699b      	ldr	r3, [r3, #24]
 800ce08:	617b      	str	r3, [r7, #20]
 800ce0a:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	681a      	ldr	r2, [r3, #0]
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ce1a:	601a      	str	r2, [r3, #0]
 800ce1c:	e184      	b.n	800d128 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce22:	2b01      	cmp	r3, #1
 800ce24:	d11b      	bne.n	800ce5e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	681a      	ldr	r2, [r3, #0]
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ce34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ce36:	2300      	movs	r3, #0
 800ce38:	61bb      	str	r3, [r7, #24]
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	695b      	ldr	r3, [r3, #20]
 800ce40:	61bb      	str	r3, [r7, #24]
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	699b      	ldr	r3, [r3, #24]
 800ce48:	61bb      	str	r3, [r7, #24]
 800ce4a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	681a      	ldr	r2, [r3, #0]
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ce5a:	601a      	str	r2, [r3, #0]
 800ce5c:	e164      	b.n	800d128 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce62:	2b02      	cmp	r3, #2
 800ce64:	d11b      	bne.n	800ce9e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	681a      	ldr	r2, [r3, #0]
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ce74:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	681a      	ldr	r2, [r3, #0]
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ce84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ce86:	2300      	movs	r3, #0
 800ce88:	61fb      	str	r3, [r7, #28]
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	695b      	ldr	r3, [r3, #20]
 800ce90:	61fb      	str	r3, [r7, #28]
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	699b      	ldr	r3, [r3, #24]
 800ce98:	61fb      	str	r3, [r7, #28]
 800ce9a:	69fb      	ldr	r3, [r7, #28]
 800ce9c:	e144      	b.n	800d128 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ce9e:	2300      	movs	r3, #0
 800cea0:	623b      	str	r3, [r7, #32]
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	695b      	ldr	r3, [r3, #20]
 800cea8:	623b      	str	r3, [r7, #32]
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	699b      	ldr	r3, [r3, #24]
 800ceb0:	623b      	str	r3, [r7, #32]
 800ceb2:	6a3b      	ldr	r3, [r7, #32]
    }

    while (hi2c->XferSize > 0U)
 800ceb4:	e138      	b.n	800d128 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ceba:	2b03      	cmp	r3, #3
 800cebc:	f200 80f1 	bhi.w	800d0a2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cec4:	2b01      	cmp	r3, #1
 800cec6:	d123      	bne.n	800cf10 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ceca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cecc:	68f8      	ldr	r0, [r7, #12]
 800cece:	f004 fa25 	bl	801131c <I2C_WaitOnRXNEFlagUntilTimeout>
 800ced2:	4603      	mov	r3, r0
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d001      	beq.n	800cedc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800ced8:	2301      	movs	r3, #1
 800ceda:	e139      	b.n	800d150 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	691a      	ldr	r2, [r3, #16]
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cee6:	b2d2      	uxtb	r2, r2
 800cee8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceee:	1c5a      	adds	r2, r3, #1
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cef8:	3b01      	subs	r3, #1
 800cefa:	b29a      	uxth	r2, r3
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf04:	b29b      	uxth	r3, r3
 800cf06:	3b01      	subs	r3, #1
 800cf08:	b29a      	uxth	r2, r3
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cf0e:	e10b      	b.n	800d128 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf14:	2b02      	cmp	r3, #2
 800cf16:	d14e      	bne.n	800cfb6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800cf18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf1a:	9300      	str	r3, [sp, #0]
 800cf1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf1e:	2200      	movs	r2, #0
 800cf20:	4906      	ldr	r1, [pc, #24]	; (800cf3c <HAL_I2C_Mem_Read+0x22c>)
 800cf22:	68f8      	ldr	r0, [r7, #12]
 800cf24:	f004 f832 	bl	8010f8c <I2C_WaitOnFlagUntilTimeout>
 800cf28:	4603      	mov	r3, r0
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d008      	beq.n	800cf40 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800cf2e:	2301      	movs	r3, #1
 800cf30:	e10e      	b.n	800d150 <HAL_I2C_Mem_Read+0x440>
 800cf32:	bf00      	nop
 800cf34:	00100002 	.word	0x00100002
 800cf38:	ffff0000 	.word	0xffff0000
 800cf3c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	681a      	ldr	r2, [r3, #0]
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cf4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	691a      	ldr	r2, [r3, #16]
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf5a:	b2d2      	uxtb	r2, r2
 800cf5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf62:	1c5a      	adds	r2, r3, #1
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf6c:	3b01      	subs	r3, #1
 800cf6e:	b29a      	uxth	r2, r3
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf78:	b29b      	uxth	r3, r3
 800cf7a:	3b01      	subs	r3, #1
 800cf7c:	b29a      	uxth	r2, r3
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	691a      	ldr	r2, [r3, #16]
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf8c:	b2d2      	uxtb	r2, r2
 800cf8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf94:	1c5a      	adds	r2, r3, #1
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf9e:	3b01      	subs	r3, #1
 800cfa0:	b29a      	uxth	r2, r3
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cfaa:	b29b      	uxth	r3, r3
 800cfac:	3b01      	subs	r3, #1
 800cfae:	b29a      	uxth	r2, r3
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cfb4:	e0b8      	b.n	800d128 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800cfb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfb8:	9300      	str	r3, [sp, #0]
 800cfba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	4966      	ldr	r1, [pc, #408]	; (800d158 <HAL_I2C_Mem_Read+0x448>)
 800cfc0:	68f8      	ldr	r0, [r7, #12]
 800cfc2:	f003 ffe3 	bl	8010f8c <I2C_WaitOnFlagUntilTimeout>
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d001      	beq.n	800cfd0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800cfcc:	2301      	movs	r3, #1
 800cfce:	e0bf      	b.n	800d150 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	681a      	ldr	r2, [r3, #0]
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cfde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	691a      	ldr	r2, [r3, #16]
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfea:	b2d2      	uxtb	r2, r2
 800cfec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cff2:	1c5a      	adds	r2, r3, #1
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cffc:	3b01      	subs	r3, #1
 800cffe:	b29a      	uxth	r2, r3
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d008:	b29b      	uxth	r3, r3
 800d00a:	3b01      	subs	r3, #1
 800d00c:	b29a      	uxth	r2, r3
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d014:	9300      	str	r3, [sp, #0]
 800d016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d018:	2200      	movs	r2, #0
 800d01a:	494f      	ldr	r1, [pc, #316]	; (800d158 <HAL_I2C_Mem_Read+0x448>)
 800d01c:	68f8      	ldr	r0, [r7, #12]
 800d01e:	f003 ffb5 	bl	8010f8c <I2C_WaitOnFlagUntilTimeout>
 800d022:	4603      	mov	r3, r0
 800d024:	2b00      	cmp	r3, #0
 800d026:	d001      	beq.n	800d02c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800d028:	2301      	movs	r3, #1
 800d02a:	e091      	b.n	800d150 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	681a      	ldr	r2, [r3, #0]
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d03a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	691a      	ldr	r2, [r3, #16]
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d046:	b2d2      	uxtb	r2, r2
 800d048:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d04e:	1c5a      	adds	r2, r3, #1
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d058:	3b01      	subs	r3, #1
 800d05a:	b29a      	uxth	r2, r3
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d064:	b29b      	uxth	r3, r3
 800d066:	3b01      	subs	r3, #1
 800d068:	b29a      	uxth	r2, r3
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	691a      	ldr	r2, [r3, #16]
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d078:	b2d2      	uxtb	r2, r2
 800d07a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d080:	1c5a      	adds	r2, r3, #1
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d08a:	3b01      	subs	r3, #1
 800d08c:	b29a      	uxth	r2, r3
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d096:	b29b      	uxth	r3, r3
 800d098:	3b01      	subs	r3, #1
 800d09a:	b29a      	uxth	r2, r3
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d0a0:	e042      	b.n	800d128 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d0a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d0a6:	68f8      	ldr	r0, [r7, #12]
 800d0a8:	f004 f938 	bl	801131c <I2C_WaitOnRXNEFlagUntilTimeout>
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d001      	beq.n	800d0b6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800d0b2:	2301      	movs	r3, #1
 800d0b4:	e04c      	b.n	800d150 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	691a      	ldr	r2, [r3, #16]
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0c0:	b2d2      	uxtb	r2, r2
 800d0c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0c8:	1c5a      	adds	r2, r3, #1
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d0d2:	3b01      	subs	r3, #1
 800d0d4:	b29a      	uxth	r2, r3
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0de:	b29b      	uxth	r3, r3
 800d0e0:	3b01      	subs	r3, #1
 800d0e2:	b29a      	uxth	r2, r3
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	695b      	ldr	r3, [r3, #20]
 800d0ee:	f003 0304 	and.w	r3, r3, #4
 800d0f2:	2b04      	cmp	r3, #4
 800d0f4:	d118      	bne.n	800d128 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	691a      	ldr	r2, [r3, #16]
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d100:	b2d2      	uxtb	r2, r2
 800d102:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d108:	1c5a      	adds	r2, r3, #1
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d112:	3b01      	subs	r3, #1
 800d114:	b29a      	uxth	r2, r3
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d11e:	b29b      	uxth	r3, r3
 800d120:	3b01      	subs	r3, #1
 800d122:	b29a      	uxth	r2, r3
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	f47f aec2 	bne.w	800ceb6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	2220      	movs	r2, #32
 800d136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	2200      	movs	r2, #0
 800d13e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	2200      	movs	r2, #0
 800d146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d14a:	2300      	movs	r3, #0
 800d14c:	e000      	b.n	800d150 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800d14e:	2302      	movs	r3, #2
  }
}
 800d150:	4618      	mov	r0, r3
 800d152:	3728      	adds	r7, #40	; 0x28
 800d154:	46bd      	mov	sp, r7
 800d156:	bd80      	pop	{r7, pc}
 800d158:	00010004 	.word	0x00010004

0800d15c <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800d15c:	b480      	push	{r7}
 800d15e:	b087      	sub	sp, #28
 800d160:	af00      	add	r7, sp, #0
 800d162:	60f8      	str	r0, [r7, #12]
 800d164:	4608      	mov	r0, r1
 800d166:	4611      	mov	r1, r2
 800d168:	461a      	mov	r2, r3
 800d16a:	4603      	mov	r3, r0
 800d16c:	817b      	strh	r3, [r7, #10]
 800d16e:	460b      	mov	r3, r1
 800d170:	813b      	strh	r3, [r7, #8]
 800d172:	4613      	mov	r3, r2
 800d174:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800d176:	2300      	movs	r3, #0
 800d178:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d180:	b2db      	uxtb	r3, r3
 800d182:	2b20      	cmp	r3, #32
 800d184:	f040 808e 	bne.w	800d2a4 <HAL_I2C_Mem_Write_IT+0x148>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800d188:	4b4a      	ldr	r3, [pc, #296]	; (800d2b4 <HAL_I2C_Mem_Write_IT+0x158>)
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	08db      	lsrs	r3, r3, #3
 800d18e:	4a4a      	ldr	r2, [pc, #296]	; (800d2b8 <HAL_I2C_Mem_Write_IT+0x15c>)
 800d190:	fba2 2303 	umull	r2, r3, r2, r3
 800d194:	0a1a      	lsrs	r2, r3, #8
 800d196:	4613      	mov	r3, r2
 800d198:	009b      	lsls	r3, r3, #2
 800d19a:	4413      	add	r3, r2
 800d19c:	009a      	lsls	r2, r3, #2
 800d19e:	4413      	add	r3, r2
 800d1a0:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800d1a2:	697b      	ldr	r3, [r7, #20]
 800d1a4:	3b01      	subs	r3, #1
 800d1a6:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800d1a8:	697b      	ldr	r3, [r7, #20]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d116      	bne.n	800d1dc <HAL_I2C_Mem_Write_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	2220      	movs	r2, #32
 800d1b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	2200      	movs	r2, #0
 800d1c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1c8:	f043 0220 	orr.w	r2, r3, #32
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d1d8:	2301      	movs	r3, #1
 800d1da:	e064      	b.n	800d2a6 <HAL_I2C_Mem_Write_IT+0x14a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	699b      	ldr	r3, [r3, #24]
 800d1e2:	f003 0302 	and.w	r3, r3, #2
 800d1e6:	2b02      	cmp	r3, #2
 800d1e8:	d0db      	beq.n	800d1a2 <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d1f0:	2b01      	cmp	r3, #1
 800d1f2:	d101      	bne.n	800d1f8 <HAL_I2C_Mem_Write_IT+0x9c>
 800d1f4:	2302      	movs	r3, #2
 800d1f6:	e056      	b.n	800d2a6 <HAL_I2C_Mem_Write_IT+0x14a>
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	2201      	movs	r2, #1
 800d1fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	f003 0301 	and.w	r3, r3, #1
 800d20a:	2b01      	cmp	r3, #1
 800d20c:	d007      	beq.n	800d21e <HAL_I2C_Mem_Write_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	681a      	ldr	r2, [r3, #0]
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	f042 0201 	orr.w	r2, r2, #1
 800d21c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	681a      	ldr	r2, [r3, #0]
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d22c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	2221      	movs	r2, #33	; 0x21
 800d232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	2240      	movs	r2, #64	; 0x40
 800d23a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	2200      	movs	r2, #0
 800d242:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	6a3a      	ldr	r2, [r7, #32]
 800d248:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d24e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d254:	b29a      	uxth	r2, r3
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	4a17      	ldr	r2, [pc, #92]	; (800d2bc <HAL_I2C_Mem_Write_IT+0x160>)
 800d25e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800d260:	897a      	ldrh	r2, [r7, #10]
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800d266:	893a      	ldrh	r2, [r7, #8]
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800d26c:	88fa      	ldrh	r2, [r7, #6]
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	2200      	movs	r2, #0
 800d276:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	681a      	ldr	r2, [r3, #0]
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d286:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	2200      	movs	r2, #0
 800d28c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	685a      	ldr	r2, [r3, #4]
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800d29e:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	e000      	b.n	800d2a6 <HAL_I2C_Mem_Write_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800d2a4:	2302      	movs	r3, #2
  }
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	371c      	adds	r7, #28
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b0:	4770      	bx	lr
 800d2b2:	bf00      	nop
 800d2b4:	20000058 	.word	0x20000058
 800d2b8:	14f8b589 	.word	0x14f8b589
 800d2bc:	ffff0000 	.word	0xffff0000

0800d2c0 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800d2c0:	b480      	push	{r7}
 800d2c2:	b087      	sub	sp, #28
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	60f8      	str	r0, [r7, #12]
 800d2c8:	4608      	mov	r0, r1
 800d2ca:	4611      	mov	r1, r2
 800d2cc:	461a      	mov	r2, r3
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	817b      	strh	r3, [r7, #10]
 800d2d2:	460b      	mov	r3, r1
 800d2d4:	813b      	strh	r3, [r7, #8]
 800d2d6:	4613      	mov	r3, r2
 800d2d8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800d2da:	2300      	movs	r3, #0
 800d2dc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d2e4:	b2db      	uxtb	r3, r3
 800d2e6:	2b20      	cmp	r3, #32
 800d2e8:	f040 809a 	bne.w	800d420 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800d2ec:	4b50      	ldr	r3, [pc, #320]	; (800d430 <HAL_I2C_Mem_Read_IT+0x170>)
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	08db      	lsrs	r3, r3, #3
 800d2f2:	4a50      	ldr	r2, [pc, #320]	; (800d434 <HAL_I2C_Mem_Read_IT+0x174>)
 800d2f4:	fba2 2303 	umull	r2, r3, r2, r3
 800d2f8:	0a1a      	lsrs	r2, r3, #8
 800d2fa:	4613      	mov	r3, r2
 800d2fc:	009b      	lsls	r3, r3, #2
 800d2fe:	4413      	add	r3, r2
 800d300:	009a      	lsls	r2, r3, #2
 800d302:	4413      	add	r3, r2
 800d304:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800d306:	697b      	ldr	r3, [r7, #20]
 800d308:	3b01      	subs	r3, #1
 800d30a:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800d30c:	697b      	ldr	r3, [r7, #20]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d116      	bne.n	800d340 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	2200      	movs	r2, #0
 800d316:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	2220      	movs	r2, #32
 800d31c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	2200      	movs	r2, #0
 800d324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d32c:	f043 0220 	orr.w	r2, r3, #32
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	2200      	movs	r2, #0
 800d338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d33c:	2301      	movs	r3, #1
 800d33e:	e070      	b.n	800d422 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	699b      	ldr	r3, [r3, #24]
 800d346:	f003 0302 	and.w	r3, r3, #2
 800d34a:	2b02      	cmp	r3, #2
 800d34c:	d0db      	beq.n	800d306 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d354:	2b01      	cmp	r3, #1
 800d356:	d101      	bne.n	800d35c <HAL_I2C_Mem_Read_IT+0x9c>
 800d358:	2302      	movs	r3, #2
 800d35a:	e062      	b.n	800d422 <HAL_I2C_Mem_Read_IT+0x162>
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	2201      	movs	r2, #1
 800d360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	f003 0301 	and.w	r3, r3, #1
 800d36e:	2b01      	cmp	r3, #1
 800d370:	d007      	beq.n	800d382 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	681a      	ldr	r2, [r3, #0]
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	f042 0201 	orr.w	r2, r2, #1
 800d380:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	681a      	ldr	r2, [r3, #0]
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d390:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	2222      	movs	r2, #34	; 0x22
 800d396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	2240      	movs	r2, #64	; 0x40
 800d39e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	6a3a      	ldr	r2, [r7, #32]
 800d3ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d3b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d3b8:	b29a      	uxth	r2, r3
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	4a1d      	ldr	r2, [pc, #116]	; (800d438 <HAL_I2C_Mem_Read_IT+0x178>)
 800d3c2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800d3c4:	897a      	ldrh	r2, [r7, #10]
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800d3ca:	893a      	ldrh	r2, [r7, #8]
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800d3d0:	88fa      	ldrh	r2, [r7, #6]
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	2200      	movs	r2, #0
 800d3da:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	681a      	ldr	r2, [r3, #0]
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d3ea:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	681a      	ldr	r2, [r3, #0]
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d3fa:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	2200      	movs	r2, #0
 800d400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d007      	beq.n	800d41c <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	685a      	ldr	r2, [r3, #4]
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800d41a:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 800d41c:	2300      	movs	r3, #0
 800d41e:	e000      	b.n	800d422 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 800d420:	2302      	movs	r3, #2
  }
}
 800d422:	4618      	mov	r0, r3
 800d424:	371c      	adds	r7, #28
 800d426:	46bd      	mov	sp, r7
 800d428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42c:	4770      	bx	lr
 800d42e:	bf00      	nop
 800d430:	20000058 	.word	0x20000058
 800d434:	14f8b589 	.word	0x14f8b589
 800d438:	ffff0000 	.word	0xffff0000

0800d43c <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b08a      	sub	sp, #40	; 0x28
 800d440:	af02      	add	r7, sp, #8
 800d442:	60f8      	str	r0, [r7, #12]
 800d444:	4608      	mov	r0, r1
 800d446:	4611      	mov	r1, r2
 800d448:	461a      	mov	r2, r3
 800d44a:	4603      	mov	r3, r0
 800d44c:	817b      	strh	r3, [r7, #10]
 800d44e:	460b      	mov	r3, r1
 800d450:	813b      	strh	r3, [r7, #8]
 800d452:	4613      	mov	r3, r2
 800d454:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800d456:	2300      	movs	r3, #0
 800d458:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d45a:	f7f9 f9db 	bl	8006814 <HAL_GetTick>
 800d45e:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d466:	b2db      	uxtb	r3, r3
 800d468:	2b20      	cmp	r3, #32
 800d46a:	f040 8145 	bne.w	800d6f8 <HAL_I2C_Mem_Write_DMA+0x2bc>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800d46e:	4b9d      	ldr	r3, [pc, #628]	; (800d6e4 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	08db      	lsrs	r3, r3, #3
 800d474:	4a9c      	ldr	r2, [pc, #624]	; (800d6e8 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 800d476:	fba2 2303 	umull	r2, r3, r2, r3
 800d47a:	0a1a      	lsrs	r2, r3, #8
 800d47c:	4613      	mov	r3, r2
 800d47e:	009b      	lsls	r3, r3, #2
 800d480:	4413      	add	r3, r2
 800d482:	009a      	lsls	r2, r3, #2
 800d484:	4413      	add	r3, r2
 800d486:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800d488:	697b      	ldr	r3, [r7, #20]
 800d48a:	3b01      	subs	r3, #1
 800d48c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800d48e:	697b      	ldr	r3, [r7, #20]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d116      	bne.n	800d4c2 <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	2200      	movs	r2, #0
 800d498:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	2220      	movs	r2, #32
 800d49e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4ae:	f043 0220 	orr.w	r2, r3, #32
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d4be:	2301      	movs	r3, #1
 800d4c0:	e11b      	b.n	800d6fa <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	699b      	ldr	r3, [r3, #24]
 800d4c8:	f003 0302 	and.w	r3, r3, #2
 800d4cc:	2b02      	cmp	r3, #2
 800d4ce:	d0db      	beq.n	800d488 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d4d6:	2b01      	cmp	r3, #1
 800d4d8:	d101      	bne.n	800d4de <HAL_I2C_Mem_Write_DMA+0xa2>
 800d4da:	2302      	movs	r3, #2
 800d4dc:	e10d      	b.n	800d6fa <HAL_I2C_Mem_Write_DMA+0x2be>
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	2201      	movs	r2, #1
 800d4e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	f003 0301 	and.w	r3, r3, #1
 800d4f0:	2b01      	cmp	r3, #1
 800d4f2:	d007      	beq.n	800d504 <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	681a      	ldr	r2, [r3, #0]
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	f042 0201 	orr.w	r2, r2, #1
 800d502:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	681a      	ldr	r2, [r3, #0]
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d512:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	2221      	movs	r2, #33	; 0x21
 800d518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	2240      	movs	r2, #64	; 0x40
 800d520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	2200      	movs	r2, #0
 800d528:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d52e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800d534:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d53a:	b29a      	uxth	r2, r3
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	4a6a      	ldr	r2, [pc, #424]	; (800d6ec <HAL_I2C_Mem_Write_DMA+0x2b0>)
 800d544:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800d546:	897a      	ldrh	r2, [r7, #10]
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800d54c:	893a      	ldrh	r2, [r7, #8]
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800d552:	88fa      	ldrh	r2, [r7, #6]
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	2200      	movs	r2, #0
 800d55c:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d562:	2b00      	cmp	r3, #0
 800d564:	f000 80a9 	beq.w	800d6ba <HAL_I2C_Mem_Write_DMA+0x27e>
    {
      if (hi2c->hdmatx != NULL)
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d02a      	beq.n	800d5c6 <HAL_I2C_Mem_Write_DMA+0x18a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d574:	4a5e      	ldr	r2, [pc, #376]	; (800d6f0 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 800d576:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d57c:	4a5d      	ldr	r2, [pc, #372]	; (800d6f4 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 800d57e:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d584:	2200      	movs	r2, #0
 800d586:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d58c:	2200      	movs	r2, #0
 800d58e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d594:	2200      	movs	r2, #0
 800d596:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d59c:	2200      	movs	r2, #0
 800d59e:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5a8:	4619      	mov	r1, r3
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	3310      	adds	r3, #16
 800d5b0:	461a      	mov	r2, r3
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d5b6:	f7fa fb96 	bl	8007ce6 <HAL_DMA_Start_IT>
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800d5be:	7efb      	ldrb	r3, [r7, #27]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d166      	bne.n	800d692 <HAL_I2C_Mem_Write_DMA+0x256>
 800d5c4:	e013      	b.n	800d5ee <HAL_I2C_Mem_Write_DMA+0x1b2>
        hi2c->State     = HAL_I2C_STATE_READY;
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	2220      	movs	r2, #32
 800d5ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5da:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800d5ea:	2301      	movs	r3, #1
 800d5ec:	e085      	b.n	800d6fa <HAL_I2C_Mem_Write_DMA+0x2be>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800d5ee:	88f8      	ldrh	r0, [r7, #6]
 800d5f0:	893a      	ldrh	r2, [r7, #8]
 800d5f2:	8979      	ldrh	r1, [r7, #10]
 800d5f4:	69fb      	ldr	r3, [r7, #28]
 800d5f6:	9301      	str	r3, [sp, #4]
 800d5f8:	2323      	movs	r3, #35	; 0x23
 800d5fa:	9300      	str	r3, [sp, #0]
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	68f8      	ldr	r0, [r7, #12]
 800d600:	f003 f98c 	bl	801091c <I2C_RequestMemoryWrite>
 800d604:	4603      	mov	r3, r0
 800d606:	2b00      	cmp	r3, #0
 800d608:	d022      	beq.n	800d650 <HAL_I2C_Mem_Write_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d60e:	4618      	mov	r0, r3
 800d610:	f7fa fc31 	bl	8007e76 <HAL_DMA_Abort_IT>
 800d614:	4603      	mov	r3, r0
 800d616:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d61c:	2200      	movs	r2, #0
 800d61e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	681a      	ldr	r2, [r3, #0]
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d62e:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	2200      	movs	r2, #0
 800d634:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	2200      	movs	r2, #0
 800d63a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	681a      	ldr	r2, [r3, #0]
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	f022 0201 	bic.w	r2, r2, #1
 800d64a:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800d64c:	2301      	movs	r3, #1
 800d64e:	e054      	b.n	800d6fa <HAL_I2C_Mem_Write_DMA+0x2be>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d650:	2300      	movs	r3, #0
 800d652:	613b      	str	r3, [r7, #16]
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	695b      	ldr	r3, [r3, #20]
 800d65a:	613b      	str	r3, [r7, #16]
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	699b      	ldr	r3, [r3, #24]
 800d662:	613b      	str	r3, [r7, #16]
 800d664:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	2200      	movs	r2, #0
 800d66a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	685a      	ldr	r2, [r3, #4]
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d67c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	685a      	ldr	r2, [r3, #4]
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d68c:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 800d68e:	2300      	movs	r3, #0
 800d690:	e033      	b.n	800d6fa <HAL_I2C_Mem_Write_DMA+0x2be>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	2220      	movs	r2, #32
 800d696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	2200      	movs	r2, #0
 800d69e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6a6:	f043 0210 	orr.w	r2, r3, #16
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d6b6:	2301      	movs	r3, #1
 800d6b8:	e01f      	b.n	800d6fa <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	2220      	movs	r2, #32
 800d6be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	2200      	movs	r2, #0
 800d6da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d6de:	2301      	movs	r3, #1
 800d6e0:	e00b      	b.n	800d6fa <HAL_I2C_Mem_Write_DMA+0x2be>
 800d6e2:	bf00      	nop
 800d6e4:	20000058 	.word	0x20000058
 800d6e8:	14f8b589 	.word	0x14f8b589
 800d6ec:	ffff0000 	.word	0xffff0000
 800d6f0:	08010c19 	.word	0x08010c19
 800d6f4:	08010dc3 	.word	0x08010dc3
    }
  }
  else
  {
    return HAL_BUSY;
 800d6f8:	2302      	movs	r3, #2
  }
}
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	3720      	adds	r7, #32
 800d6fe:	46bd      	mov	sp, r7
 800d700:	bd80      	pop	{r7, pc}

0800d702 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800d702:	b580      	push	{r7, lr}
 800d704:	b08c      	sub	sp, #48	; 0x30
 800d706:	af02      	add	r7, sp, #8
 800d708:	60f8      	str	r0, [r7, #12]
 800d70a:	4608      	mov	r0, r1
 800d70c:	4611      	mov	r1, r2
 800d70e:	461a      	mov	r2, r3
 800d710:	4603      	mov	r3, r0
 800d712:	817b      	strh	r3, [r7, #10]
 800d714:	460b      	mov	r3, r1
 800d716:	813b      	strh	r3, [r7, #8]
 800d718:	4613      	mov	r3, r2
 800d71a:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d71c:	f7f9 f87a 	bl	8006814 <HAL_GetTick>
 800d720:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 800d722:	2300      	movs	r3, #0
 800d724:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d72c:	b2db      	uxtb	r3, r3
 800d72e:	2b20      	cmp	r3, #32
 800d730:	f040 8175 	bne.w	800da1e <HAL_I2C_Mem_Read_DMA+0x31c>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800d734:	4b94      	ldr	r3, [pc, #592]	; (800d988 <HAL_I2C_Mem_Read_DMA+0x286>)
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	08db      	lsrs	r3, r3, #3
 800d73a:	4a94      	ldr	r2, [pc, #592]	; (800d98c <HAL_I2C_Mem_Read_DMA+0x28a>)
 800d73c:	fba2 2303 	umull	r2, r3, r2, r3
 800d740:	0a1a      	lsrs	r2, r3, #8
 800d742:	4613      	mov	r3, r2
 800d744:	009b      	lsls	r3, r3, #2
 800d746:	4413      	add	r3, r2
 800d748:	009a      	lsls	r2, r3, #2
 800d74a:	4413      	add	r3, r2
 800d74c:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 800d74e:	69fb      	ldr	r3, [r7, #28]
 800d750:	3b01      	subs	r3, #1
 800d752:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800d754:	69fb      	ldr	r3, [r7, #28]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d116      	bne.n	800d788 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	2200      	movs	r2, #0
 800d75e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	2220      	movs	r2, #32
 800d764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	2200      	movs	r2, #0
 800d76c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d774:	f043 0220 	orr.w	r2, r3, #32
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	2200      	movs	r2, #0
 800d780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d784:	2301      	movs	r3, #1
 800d786:	e14b      	b.n	800da20 <HAL_I2C_Mem_Read_DMA+0x31e>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	699b      	ldr	r3, [r3, #24]
 800d78e:	f003 0302 	and.w	r3, r3, #2
 800d792:	2b02      	cmp	r3, #2
 800d794:	d0db      	beq.n	800d74e <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d79c:	2b01      	cmp	r3, #1
 800d79e:	d101      	bne.n	800d7a4 <HAL_I2C_Mem_Read_DMA+0xa2>
 800d7a0:	2302      	movs	r3, #2
 800d7a2:	e13d      	b.n	800da20 <HAL_I2C_Mem_Read_DMA+0x31e>
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	2201      	movs	r2, #1
 800d7a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	f003 0301 	and.w	r3, r3, #1
 800d7b6:	2b01      	cmp	r3, #1
 800d7b8:	d007      	beq.n	800d7ca <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	681a      	ldr	r2, [r3, #0]
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	f042 0201 	orr.w	r2, r2, #1
 800d7c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	681a      	ldr	r2, [r3, #0]
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d7d8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	2222      	movs	r2, #34	; 0x22
 800d7de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	2240      	movs	r2, #64	; 0x40
 800d7e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800d7fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d800:	b29a      	uxth	r2, r3
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	4a61      	ldr	r2, [pc, #388]	; (800d990 <HAL_I2C_Mem_Read_DMA+0x28e>)
 800d80a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800d80c:	897a      	ldrh	r2, [r7, #10]
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800d812:	893a      	ldrh	r2, [r7, #8]
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800d818:	88fa      	ldrh	r2, [r7, #6]
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	2200      	movs	r2, #0
 800d822:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d828:	2b00      	cmp	r3, #0
 800d82a:	f000 80cb 	beq.w	800d9c4 <HAL_I2C_Mem_Read_DMA+0x2c2>
    {
      if (hi2c->hdmarx != NULL)
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d832:	2b00      	cmp	r3, #0
 800d834:	d02d      	beq.n	800d892 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d83a:	4a56      	ldr	r2, [pc, #344]	; (800d994 <HAL_I2C_Mem_Read_DMA+0x292>)
 800d83c:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d842:	4a55      	ldr	r2, [pc, #340]	; (800d998 <HAL_I2C_Mem_Read_DMA+0x296>)
 800d844:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d84a:	2200      	movs	r2, #0
 800d84c:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d852:	2200      	movs	r2, #0
 800d854:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d85a:	2200      	movs	r2, #0
 800d85c:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d862:	2200      	movs	r2, #0
 800d864:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	3310      	adds	r3, #16
 800d870:	4619      	mov	r1, r3
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d876:	461a      	mov	r2, r3
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d87c:	f7fa fa33 	bl	8007ce6 <HAL_DMA_Start_IT>
 800d880:	4603      	mov	r3, r0
 800d882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800d886:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	f040 8086 	bne.w	800d99c <HAL_I2C_Mem_Read_DMA+0x29a>
 800d890:	e013      	b.n	800d8ba <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	2220      	movs	r2, #32
 800d896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	2200      	movs	r2, #0
 800d89e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8a6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800d8b6:	2301      	movs	r3, #1
 800d8b8:	e0b2      	b.n	800da20 <HAL_I2C_Mem_Read_DMA+0x31e>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800d8ba:	88f8      	ldrh	r0, [r7, #6]
 800d8bc:	893a      	ldrh	r2, [r7, #8]
 800d8be:	8979      	ldrh	r1, [r7, #10]
 800d8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c2:	9301      	str	r3, [sp, #4]
 800d8c4:	2323      	movs	r3, #35	; 0x23
 800d8c6:	9300      	str	r3, [sp, #0]
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	68f8      	ldr	r0, [r7, #12]
 800d8cc:	f003 f8bc 	bl	8010a48 <I2C_RequestMemoryRead>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d023      	beq.n	800d91e <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8da:	4618      	mov	r0, r3
 800d8dc:	f7fa facb 	bl	8007e76 <HAL_DMA_Abort_IT>
 800d8e0:	4603      	mov	r3, r0
 800d8e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	681a      	ldr	r2, [r3, #0]
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d8fc:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	2200      	movs	r2, #0
 800d902:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	2200      	movs	r2, #0
 800d908:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	681a      	ldr	r2, [r3, #0]
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	f022 0201 	bic.w	r2, r2, #1
 800d918:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800d91a:	2301      	movs	r3, #1
 800d91c:	e080      	b.n	800da20 <HAL_I2C_Mem_Read_DMA+0x31e>
        }

        if (hi2c->XferSize == 1U)
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d922:	2b01      	cmp	r3, #1
 800d924:	d108      	bne.n	800d938 <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	681a      	ldr	r2, [r3, #0]
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d934:	601a      	str	r2, [r3, #0]
 800d936:	e007      	b.n	800d948 <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	685a      	ldr	r2, [r3, #4]
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d946:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d948:	2300      	movs	r3, #0
 800d94a:	617b      	str	r3, [r7, #20]
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	695b      	ldr	r3, [r3, #20]
 800d952:	617b      	str	r3, [r7, #20]
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	699b      	ldr	r3, [r3, #24]
 800d95a:	617b      	str	r3, [r7, #20]
 800d95c:	697b      	ldr	r3, [r7, #20]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	2200      	movs	r2, #0
 800d962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	685a      	ldr	r2, [r3, #4]
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d974:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	685a      	ldr	r2, [r3, #4]
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d984:	605a      	str	r2, [r3, #4]
 800d986:	e048      	b.n	800da1a <HAL_I2C_Mem_Read_DMA+0x318>
 800d988:	20000058 	.word	0x20000058
 800d98c:	14f8b589 	.word	0x14f8b589
 800d990:	ffff0000 	.word	0xffff0000
 800d994:	08010c19 	.word	0x08010c19
 800d998:	08010dc3 	.word	0x08010dc3
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	2220      	movs	r2, #32
 800d9a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9b0:	f043 0210 	orr.w	r2, r3, #16
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d9c0:	2301      	movs	r3, #1
 800d9c2:	e02d      	b.n	800da20 <HAL_I2C_Mem_Read_DMA+0x31e>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800d9c4:	88f8      	ldrh	r0, [r7, #6]
 800d9c6:	893a      	ldrh	r2, [r7, #8]
 800d9c8:	8979      	ldrh	r1, [r7, #10]
 800d9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9cc:	9301      	str	r3, [sp, #4]
 800d9ce:	2323      	movs	r3, #35	; 0x23
 800d9d0:	9300      	str	r3, [sp, #0]
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	68f8      	ldr	r0, [r7, #12]
 800d9d6:	f003 f837 	bl	8010a48 <I2C_RequestMemoryRead>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d001      	beq.n	800d9e4 <HAL_I2C_Mem_Read_DMA+0x2e2>
      {
        return HAL_ERROR;
 800d9e0:	2301      	movs	r3, #1
 800d9e2:	e01d      	b.n	800da20 <HAL_I2C_Mem_Read_DMA+0x31e>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	61bb      	str	r3, [r7, #24]
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	695b      	ldr	r3, [r3, #20]
 800d9ee:	61bb      	str	r3, [r7, #24]
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	699b      	ldr	r3, [r3, #24]
 800d9f6:	61bb      	str	r3, [r7, #24]
 800d9f8:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	681a      	ldr	r2, [r3, #0]
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800da08:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	2220      	movs	r2, #32
 800da0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	2200      	movs	r2, #0
 800da16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 800da1a:	2300      	movs	r3, #0
 800da1c:	e000      	b.n	800da20 <HAL_I2C_Mem_Read_DMA+0x31e>
  }
  else
  {
    return HAL_BUSY;
 800da1e:	2302      	movs	r3, #2
  }
}
 800da20:	4618      	mov	r0, r3
 800da22:	3728      	adds	r7, #40	; 0x28
 800da24:	46bd      	mov	sp, r7
 800da26:	bd80      	pop	{r7, pc}

0800da28 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b08a      	sub	sp, #40	; 0x28
 800da2c:	af02      	add	r7, sp, #8
 800da2e:	60f8      	str	r0, [r7, #12]
 800da30:	607a      	str	r2, [r7, #4]
 800da32:	603b      	str	r3, [r7, #0]
 800da34:	460b      	mov	r3, r1
 800da36:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800da38:	f7f8 feec 	bl	8006814 <HAL_GetTick>
 800da3c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800da3e:	2301      	movs	r3, #1
 800da40:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800da48:	b2db      	uxtb	r3, r3
 800da4a:	2b20      	cmp	r3, #32
 800da4c:	f040 8111 	bne.w	800dc72 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800da50:	69fb      	ldr	r3, [r7, #28]
 800da52:	9300      	str	r3, [sp, #0]
 800da54:	2319      	movs	r3, #25
 800da56:	2201      	movs	r2, #1
 800da58:	4988      	ldr	r1, [pc, #544]	; (800dc7c <HAL_I2C_IsDeviceReady+0x254>)
 800da5a:	68f8      	ldr	r0, [r7, #12]
 800da5c:	f003 fa96 	bl	8010f8c <I2C_WaitOnFlagUntilTimeout>
 800da60:	4603      	mov	r3, r0
 800da62:	2b00      	cmp	r3, #0
 800da64:	d001      	beq.n	800da6a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800da66:	2302      	movs	r3, #2
 800da68:	e104      	b.n	800dc74 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800da70:	2b01      	cmp	r3, #1
 800da72:	d101      	bne.n	800da78 <HAL_I2C_IsDeviceReady+0x50>
 800da74:	2302      	movs	r3, #2
 800da76:	e0fd      	b.n	800dc74 <HAL_I2C_IsDeviceReady+0x24c>
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	2201      	movs	r2, #1
 800da7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	f003 0301 	and.w	r3, r3, #1
 800da8a:	2b01      	cmp	r3, #1
 800da8c:	d007      	beq.n	800da9e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	681a      	ldr	r2, [r3, #0]
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	f042 0201 	orr.w	r2, r2, #1
 800da9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	681a      	ldr	r2, [r3, #0]
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800daac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	2224      	movs	r2, #36	; 0x24
 800dab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	2200      	movs	r2, #0
 800daba:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	4a70      	ldr	r2, [pc, #448]	; (800dc80 <HAL_I2C_IsDeviceReady+0x258>)
 800dac0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	681a      	ldr	r2, [r3, #0]
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dad0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800dad2:	69fb      	ldr	r3, [r7, #28]
 800dad4:	9300      	str	r3, [sp, #0]
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	2200      	movs	r2, #0
 800dada:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800dade:	68f8      	ldr	r0, [r7, #12]
 800dae0:	f003 fa54 	bl	8010f8c <I2C_WaitOnFlagUntilTimeout>
 800dae4:	4603      	mov	r3, r0
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d00d      	beq.n	800db06 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800daf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800daf8:	d103      	bne.n	800db02 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800db00:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800db02:	2303      	movs	r3, #3
 800db04:	e0b6      	b.n	800dc74 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800db06:	897b      	ldrh	r3, [r7, #10]
 800db08:	b2db      	uxtb	r3, r3
 800db0a:	461a      	mov	r2, r3
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800db14:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800db16:	f7f8 fe7d 	bl	8006814 <HAL_GetTick>
 800db1a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	695b      	ldr	r3, [r3, #20]
 800db22:	f003 0302 	and.w	r3, r3, #2
 800db26:	2b02      	cmp	r3, #2
 800db28:	bf0c      	ite	eq
 800db2a:	2301      	moveq	r3, #1
 800db2c:	2300      	movne	r3, #0
 800db2e:	b2db      	uxtb	r3, r3
 800db30:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	695b      	ldr	r3, [r3, #20]
 800db38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800db3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800db40:	bf0c      	ite	eq
 800db42:	2301      	moveq	r3, #1
 800db44:	2300      	movne	r3, #0
 800db46:	b2db      	uxtb	r3, r3
 800db48:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800db4a:	e025      	b.n	800db98 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800db4c:	f7f8 fe62 	bl	8006814 <HAL_GetTick>
 800db50:	4602      	mov	r2, r0
 800db52:	69fb      	ldr	r3, [r7, #28]
 800db54:	1ad3      	subs	r3, r2, r3
 800db56:	683a      	ldr	r2, [r7, #0]
 800db58:	429a      	cmp	r2, r3
 800db5a:	d302      	bcc.n	800db62 <HAL_I2C_IsDeviceReady+0x13a>
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d103      	bne.n	800db6a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	22a0      	movs	r2, #160	; 0xa0
 800db66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	695b      	ldr	r3, [r3, #20]
 800db70:	f003 0302 	and.w	r3, r3, #2
 800db74:	2b02      	cmp	r3, #2
 800db76:	bf0c      	ite	eq
 800db78:	2301      	moveq	r3, #1
 800db7a:	2300      	movne	r3, #0
 800db7c:	b2db      	uxtb	r3, r3
 800db7e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	695b      	ldr	r3, [r3, #20]
 800db86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800db8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800db8e:	bf0c      	ite	eq
 800db90:	2301      	moveq	r3, #1
 800db92:	2300      	movne	r3, #0
 800db94:	b2db      	uxtb	r3, r3
 800db96:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800db9e:	b2db      	uxtb	r3, r3
 800dba0:	2ba0      	cmp	r3, #160	; 0xa0
 800dba2:	d005      	beq.n	800dbb0 <HAL_I2C_IsDeviceReady+0x188>
 800dba4:	7dfb      	ldrb	r3, [r7, #23]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d102      	bne.n	800dbb0 <HAL_I2C_IsDeviceReady+0x188>
 800dbaa:	7dbb      	ldrb	r3, [r7, #22]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d0cd      	beq.n	800db4c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	2220      	movs	r2, #32
 800dbb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	695b      	ldr	r3, [r3, #20]
 800dbbe:	f003 0302 	and.w	r3, r3, #2
 800dbc2:	2b02      	cmp	r3, #2
 800dbc4:	d129      	bne.n	800dc1a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	681a      	ldr	r2, [r3, #0]
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dbd4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	613b      	str	r3, [r7, #16]
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	695b      	ldr	r3, [r3, #20]
 800dbe0:	613b      	str	r3, [r7, #16]
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	699b      	ldr	r3, [r3, #24]
 800dbe8:	613b      	str	r3, [r7, #16]
 800dbea:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800dbec:	69fb      	ldr	r3, [r7, #28]
 800dbee:	9300      	str	r3, [sp, #0]
 800dbf0:	2319      	movs	r3, #25
 800dbf2:	2201      	movs	r2, #1
 800dbf4:	4921      	ldr	r1, [pc, #132]	; (800dc7c <HAL_I2C_IsDeviceReady+0x254>)
 800dbf6:	68f8      	ldr	r0, [r7, #12]
 800dbf8:	f003 f9c8 	bl	8010f8c <I2C_WaitOnFlagUntilTimeout>
 800dbfc:	4603      	mov	r3, r0
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d001      	beq.n	800dc06 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800dc02:	2301      	movs	r3, #1
 800dc04:	e036      	b.n	800dc74 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	2220      	movs	r2, #32
 800dc0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	2200      	movs	r2, #0
 800dc12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800dc16:	2300      	movs	r3, #0
 800dc18:	e02c      	b.n	800dc74 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	681a      	ldr	r2, [r3, #0]
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dc28:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800dc32:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800dc34:	69fb      	ldr	r3, [r7, #28]
 800dc36:	9300      	str	r3, [sp, #0]
 800dc38:	2319      	movs	r3, #25
 800dc3a:	2201      	movs	r2, #1
 800dc3c:	490f      	ldr	r1, [pc, #60]	; (800dc7c <HAL_I2C_IsDeviceReady+0x254>)
 800dc3e:	68f8      	ldr	r0, [r7, #12]
 800dc40:	f003 f9a4 	bl	8010f8c <I2C_WaitOnFlagUntilTimeout>
 800dc44:	4603      	mov	r3, r0
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d001      	beq.n	800dc4e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800dc4a:	2301      	movs	r3, #1
 800dc4c:	e012      	b.n	800dc74 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800dc4e:	69bb      	ldr	r3, [r7, #24]
 800dc50:	3301      	adds	r3, #1
 800dc52:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800dc54:	69ba      	ldr	r2, [r7, #24]
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	429a      	cmp	r2, r3
 800dc5a:	f4ff af32 	bcc.w	800dac2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	2220      	movs	r2, #32
 800dc62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	2200      	movs	r2, #0
 800dc6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800dc6e:	2301      	movs	r3, #1
 800dc70:	e000      	b.n	800dc74 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800dc72:	2302      	movs	r3, #2
  }
}
 800dc74:	4618      	mov	r0, r3
 800dc76:	3720      	adds	r7, #32
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	bd80      	pop	{r7, pc}
 800dc7c:	00100002 	.word	0x00100002
 800dc80:	ffff0000 	.word	0xffff0000

0800dc84 <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800dc84:	b480      	push	{r7}
 800dc86:	b087      	sub	sp, #28
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	60f8      	str	r0, [r7, #12]
 800dc8c:	607a      	str	r2, [r7, #4]
 800dc8e:	461a      	mov	r2, r3
 800dc90:	460b      	mov	r3, r1
 800dc92:	817b      	strh	r3, [r7, #10]
 800dc94:	4613      	mov	r3, r2
 800dc96:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 800dc98:	2300      	movs	r3, #0
 800dc9a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count      = 0x00U;
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dca6:	b2db      	uxtb	r3, r3
 800dca8:	2b20      	cmp	r3, #32
 800dcaa:	f040 80a6 	bne.w	800ddfa <HAL_I2C_Master_Seq_Transmit_IT+0x176>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dcb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dcbc:	d005      	beq.n	800dcca <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 800dcbe:	6a3b      	ldr	r3, [r7, #32]
 800dcc0:	2b08      	cmp	r3, #8
 800dcc2:	d002      	beq.n	800dcca <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 800dcc4:	6a3b      	ldr	r3, [r7, #32]
 800dcc6:	2b01      	cmp	r3, #1
 800dcc8:	d130      	bne.n	800dd2c <HAL_I2C_Master_Seq_Transmit_IT+0xa8>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800dcca:	4b4f      	ldr	r3, [pc, #316]	; (800de08 <HAL_I2C_Master_Seq_Transmit_IT+0x184>)
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	08db      	lsrs	r3, r3, #3
 800dcd0:	4a4e      	ldr	r2, [pc, #312]	; (800de0c <HAL_I2C_Master_Seq_Transmit_IT+0x188>)
 800dcd2:	fba2 2303 	umull	r2, r3, r2, r3
 800dcd6:	0a1a      	lsrs	r2, r3, #8
 800dcd8:	4613      	mov	r3, r2
 800dcda:	009b      	lsls	r3, r3, #2
 800dcdc:	4413      	add	r3, r2
 800dcde:	009a      	lsls	r2, r3, #2
 800dce0:	4413      	add	r3, r2
 800dce2:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 800dce4:	693b      	ldr	r3, [r7, #16]
 800dce6:	3b01      	subs	r3, #1
 800dce8:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 800dcea:	693b      	ldr	r3, [r7, #16]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d116      	bne.n	800dd1e <HAL_I2C_Master_Seq_Transmit_IT+0x9a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	2220      	movs	r2, #32
 800dcfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	2200      	movs	r2, #0
 800dd02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd0a:	f043 0220 	orr.w	r2, r3, #32
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	2200      	movs	r2, #0
 800dd16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800dd1a:	2301      	movs	r3, #1
 800dd1c:	e06e      	b.n	800ddfc <HAL_I2C_Master_Seq_Transmit_IT+0x178>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	699b      	ldr	r3, [r3, #24]
 800dd24:	f003 0302 	and.w	r3, r3, #2
 800dd28:	2b02      	cmp	r3, #2
 800dd2a:	d0db      	beq.n	800dce4 <HAL_I2C_Master_Seq_Transmit_IT+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dd32:	2b01      	cmp	r3, #1
 800dd34:	d101      	bne.n	800dd3a <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
 800dd36:	2302      	movs	r3, #2
 800dd38:	e060      	b.n	800ddfc <HAL_I2C_Master_Seq_Transmit_IT+0x178>
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	2201      	movs	r2, #1
 800dd3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	f003 0301 	and.w	r3, r3, #1
 800dd4c:	2b01      	cmp	r3, #1
 800dd4e:	d007      	beq.n	800dd60 <HAL_I2C_Master_Seq_Transmit_IT+0xdc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	681a      	ldr	r2, [r3, #0]
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	f042 0201 	orr.w	r2, r2, #1
 800dd5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	681a      	ldr	r2, [r3, #0]
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dd6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	2221      	movs	r2, #33	; 0x21
 800dd74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	2210      	movs	r2, #16
 800dd7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	2200      	movs	r2, #0
 800dd84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	687a      	ldr	r2, [r7, #4]
 800dd8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	893a      	ldrh	r2, [r7, #8]
 800dd90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd96:	b29a      	uxth	r2, r3
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	6a3a      	ldr	r2, [r7, #32]
 800dda0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800dda2:	897a      	ldrh	r2, [r7, #10]
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddac:	617b      	str	r3, [r7, #20]

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800ddae:	697b      	ldr	r3, [r7, #20]
 800ddb0:	2b11      	cmp	r3, #17
 800ddb2:	d10c      	bne.n	800ddce <HAL_I2C_Master_Seq_Transmit_IT+0x14a>
 800ddb4:	6a3b      	ldr	r3, [r7, #32]
 800ddb6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800ddba:	d003      	beq.n	800ddc4 <HAL_I2C_Master_Seq_Transmit_IT+0x140>
 800ddbc:	6a3b      	ldr	r3, [r7, #32]
 800ddbe:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800ddc2:	d101      	bne.n	800ddc8 <HAL_I2C_Master_Seq_Transmit_IT+0x144>
 800ddc4:	2301      	movs	r3, #1
 800ddc6:	e000      	b.n	800ddca <HAL_I2C_Master_Seq_Transmit_IT+0x146>
 800ddc8:	2300      	movs	r3, #0
 800ddca:	2b01      	cmp	r3, #1
 800ddcc:	d107      	bne.n	800ddde <HAL_I2C_Master_Seq_Transmit_IT+0x15a>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	681a      	ldr	r2, [r3, #0]
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dddc:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	2200      	movs	r2, #0
 800dde2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	685a      	ldr	r2, [r3, #4]
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800ddf4:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	e000      	b.n	800ddfc <HAL_I2C_Master_Seq_Transmit_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 800ddfa:	2302      	movs	r3, #2
  }
}
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	371c      	adds	r7, #28
 800de00:	46bd      	mov	sp, r7
 800de02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de06:	4770      	bx	lr
 800de08:	20000058 	.word	0x20000058
 800de0c:	14f8b589 	.word	0x14f8b589

0800de10 <HAL_I2C_Master_Seq_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b088      	sub	sp, #32
 800de14:	af00      	add	r7, sp, #0
 800de16:	60f8      	str	r0, [r7, #12]
 800de18:	607a      	str	r2, [r7, #4]
 800de1a:	461a      	mov	r2, r3
 800de1c:	460b      	mov	r3, r1
 800de1e:	817b      	strh	r3, [r7, #10]
 800de20:	4613      	mov	r3, r2
 800de22:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 800de24:	2300      	movs	r3, #0
 800de26:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count      = 0x00U;
 800de28:	2300      	movs	r3, #0
 800de2a:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800de32:	b2db      	uxtb	r3, r3
 800de34:	2b20      	cmp	r3, #32
 800de36:	f040 8149 	bne.w	800e0cc <HAL_I2C_Master_Seq_Transmit_DMA+0x2bc>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800de44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de48:	d005      	beq.n	800de56 <HAL_I2C_Master_Seq_Transmit_DMA+0x46>
 800de4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de4c:	2b08      	cmp	r3, #8
 800de4e:	d002      	beq.n	800de56 <HAL_I2C_Master_Seq_Transmit_DMA+0x46>
 800de50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de52:	2b01      	cmp	r3, #1
 800de54:	d130      	bne.n	800deb8 <HAL_I2C_Master_Seq_Transmit_DMA+0xa8>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800de56:	4b99      	ldr	r3, [pc, #612]	; (800e0bc <HAL_I2C_Master_Seq_Transmit_DMA+0x2ac>)
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	08db      	lsrs	r3, r3, #3
 800de5c:	4a98      	ldr	r2, [pc, #608]	; (800e0c0 <HAL_I2C_Master_Seq_Transmit_DMA+0x2b0>)
 800de5e:	fba2 2303 	umull	r2, r3, r2, r3
 800de62:	0a1a      	lsrs	r2, r3, #8
 800de64:	4613      	mov	r3, r2
 800de66:	009b      	lsls	r3, r3, #2
 800de68:	4413      	add	r3, r2
 800de6a:	009a      	lsls	r2, r3, #2
 800de6c:	4413      	add	r3, r2
 800de6e:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 800de70:	697b      	ldr	r3, [r7, #20]
 800de72:	3b01      	subs	r3, #1
 800de74:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 800de76:	697b      	ldr	r3, [r7, #20]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d116      	bne.n	800deaa <HAL_I2C_Master_Seq_Transmit_DMA+0x9a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	2200      	movs	r2, #0
 800de80:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	2220      	movs	r2, #32
 800de86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	2200      	movs	r2, #0
 800de8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de96:	f043 0220 	orr.w	r2, r3, #32
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	2200      	movs	r2, #0
 800dea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800dea6:	2301      	movs	r3, #1
 800dea8:	e111      	b.n	800e0ce <HAL_I2C_Master_Seq_Transmit_DMA+0x2be>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	699b      	ldr	r3, [r3, #24]
 800deb0:	f003 0302 	and.w	r3, r3, #2
 800deb4:	2b02      	cmp	r3, #2
 800deb6:	d0db      	beq.n	800de70 <HAL_I2C_Master_Seq_Transmit_DMA+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800debe:	2b01      	cmp	r3, #1
 800dec0:	d101      	bne.n	800dec6 <HAL_I2C_Master_Seq_Transmit_DMA+0xb6>
 800dec2:	2302      	movs	r3, #2
 800dec4:	e103      	b.n	800e0ce <HAL_I2C_Master_Seq_Transmit_DMA+0x2be>
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	2201      	movs	r2, #1
 800deca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	f003 0301 	and.w	r3, r3, #1
 800ded8:	2b01      	cmp	r3, #1
 800deda:	d007      	beq.n	800deec <HAL_I2C_Master_Seq_Transmit_DMA+0xdc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	681a      	ldr	r2, [r3, #0]
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	f042 0201 	orr.w	r2, r2, #1
 800deea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	681a      	ldr	r2, [r3, #0]
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800defa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	2221      	movs	r2, #33	; 0x21
 800df00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	2210      	movs	r2, #16
 800df08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	2200      	movs	r2, #0
 800df10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	687a      	ldr	r2, [r7, #4]
 800df16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	893a      	ldrh	r2, [r7, #8]
 800df1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800df22:	b29a      	uxth	r2, r3
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df2c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800df2e:	897a      	ldrh	r2, [r7, #10]
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df38:	61bb      	str	r3, [r7, #24]

    if (hi2c->XferSize > 0U)
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df3e:	2b00      	cmp	r3, #0
 800df40:	f000 808d 	beq.w	800e05e <HAL_I2C_Master_Seq_Transmit_DMA+0x24e>
    {
      if (hi2c->hdmatx != NULL)
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d022      	beq.n	800df92 <HAL_I2C_Master_Seq_Transmit_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df50:	4a5c      	ldr	r2, [pc, #368]	; (800e0c4 <HAL_I2C_Master_Seq_Transmit_DMA+0x2b4>)
 800df52:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df58:	4a5b      	ldr	r2, [pc, #364]	; (800e0c8 <HAL_I2C_Master_Seq_Transmit_DMA+0x2b8>)
 800df5a:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df60:	2200      	movs	r2, #0
 800df62:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df68:	2200      	movs	r2, #0
 800df6a:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df74:	4619      	mov	r1, r3
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	3310      	adds	r3, #16
 800df7c:	461a      	mov	r2, r3
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df82:	f7f9 feb0 	bl	8007ce6 <HAL_DMA_Start_IT>
 800df86:	4603      	mov	r3, r0
 800df88:	77fb      	strb	r3, [r7, #31]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800df8a:	7ffb      	ldrb	r3, [r7, #31]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d152      	bne.n	800e036 <HAL_I2C_Master_Seq_Transmit_DMA+0x226>
 800df90:	e013      	b.n	800dfba <HAL_I2C_Master_Seq_Transmit_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	2220      	movs	r2, #32
 800df96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	2200      	movs	r2, #0
 800df9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfa6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800dfb6:	2301      	movs	r3, #1
 800dfb8:	e089      	b.n	800e0ce <HAL_I2C_Master_Seq_Transmit_DMA+0x2be>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	681a      	ldr	r2, [r3, #0]
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dfc8:	601a      	str	r2, [r3, #0]

        /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
        /* Mean Previous state is same as current state */
        if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800dfca:	69bb      	ldr	r3, [r7, #24]
 800dfcc:	2b11      	cmp	r3, #17
 800dfce:	d10c      	bne.n	800dfea <HAL_I2C_Master_Seq_Transmit_DMA+0x1da>
 800dfd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfd2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800dfd6:	d003      	beq.n	800dfe0 <HAL_I2C_Master_Seq_Transmit_DMA+0x1d0>
 800dfd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfda:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800dfde:	d101      	bne.n	800dfe4 <HAL_I2C_Master_Seq_Transmit_DMA+0x1d4>
 800dfe0:	2301      	movs	r3, #1
 800dfe2:	e000      	b.n	800dfe6 <HAL_I2C_Master_Seq_Transmit_DMA+0x1d6>
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	2b01      	cmp	r3, #1
 800dfe8:	d107      	bne.n	800dffa <HAL_I2C_Master_Seq_Transmit_DMA+0x1ea>
        {
          /* Generate Start */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	681a      	ldr	r2, [r3, #0]
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dff8:	601a      	str	r2, [r3, #0]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	2200      	movs	r2, #0
 800dffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* If XferOptions is not associated to a new frame, mean no start bit is request, enable directly the DMA request */
        /* In other cases, DMA request is enabled after Slave address treatment in IRQHandler */
        if ((XferOptions == I2C_NEXT_FRAME) || (XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 800e002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e004:	2b04      	cmp	r3, #4
 800e006:	d005      	beq.n	800e014 <HAL_I2C_Master_Seq_Transmit_DMA+0x204>
 800e008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e00a:	2b20      	cmp	r3, #32
 800e00c:	d002      	beq.n	800e014 <HAL_I2C_Master_Seq_Transmit_DMA+0x204>
 800e00e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e010:	2b10      	cmp	r3, #16
 800e012:	d107      	bne.n	800e024 <HAL_I2C_Master_Seq_Transmit_DMA+0x214>
        {
          /* Enable DMA Request */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	685a      	ldr	r2, [r3, #4]
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e022:	605a      	str	r2, [r3, #4]
        }

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	685a      	ldr	r2, [r3, #4]
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800e032:	605a      	str	r2, [r3, #4]
 800e034:	e03f      	b.n	800e0b6 <HAL_I2C_Master_Seq_Transmit_DMA+0x2a6>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	2220      	movs	r2, #32
 800e03a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	2200      	movs	r2, #0
 800e042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e04a:	f043 0210 	orr.w	r2, r3, #16
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	2200      	movs	r2, #0
 800e056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e05a:	2301      	movs	r3, #1
 800e05c:	e037      	b.n	800e0ce <HAL_I2C_Master_Seq_Transmit_DMA+0x2be>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	681a      	ldr	r2, [r3, #0]
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e06c:	601a      	str	r2, [r3, #0]

      /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
      /* Mean Previous state is same as current state */
      if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800e06e:	69bb      	ldr	r3, [r7, #24]
 800e070:	2b11      	cmp	r3, #17
 800e072:	d10c      	bne.n	800e08e <HAL_I2C_Master_Seq_Transmit_DMA+0x27e>
 800e074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e076:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800e07a:	d003      	beq.n	800e084 <HAL_I2C_Master_Seq_Transmit_DMA+0x274>
 800e07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e07e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e082:	d101      	bne.n	800e088 <HAL_I2C_Master_Seq_Transmit_DMA+0x278>
 800e084:	2301      	movs	r3, #1
 800e086:	e000      	b.n	800e08a <HAL_I2C_Master_Seq_Transmit_DMA+0x27a>
 800e088:	2300      	movs	r3, #0
 800e08a:	2b01      	cmp	r3, #1
 800e08c:	d107      	bne.n	800e09e <HAL_I2C_Master_Seq_Transmit_DMA+0x28e>
      {
        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	681a      	ldr	r2, [r3, #0]
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e09c:	601a      	str	r2, [r3, #0]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	685a      	ldr	r2, [r3, #4]
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800e0b4:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	e009      	b.n	800e0ce <HAL_I2C_Master_Seq_Transmit_DMA+0x2be>
 800e0ba:	bf00      	nop
 800e0bc:	20000058 	.word	0x20000058
 800e0c0:	14f8b589 	.word	0x14f8b589
 800e0c4:	08010c19 	.word	0x08010c19
 800e0c8:	08010dc3 	.word	0x08010dc3
  }
  else
  {
    return HAL_BUSY;
 800e0cc:	2302      	movs	r3, #2
  }
}
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	3720      	adds	r7, #32
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bd80      	pop	{r7, pc}

0800e0d6 <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800e0d6:	b480      	push	{r7}
 800e0d8:	b089      	sub	sp, #36	; 0x24
 800e0da:	af00      	add	r7, sp, #0
 800e0dc:	60f8      	str	r0, [r7, #12]
 800e0de:	607a      	str	r2, [r7, #4]
 800e0e0:	461a      	mov	r2, r3
 800e0e2:	460b      	mov	r3, r1
 800e0e4:	817b      	strh	r3, [r7, #10]
 800e0e6:	4613      	mov	r3, r2
 800e0e8:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	617b      	str	r3, [r7, #20]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e0f2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800e0f6:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e0fe:	b2db      	uxtb	r3, r3
 800e100:	2b20      	cmp	r3, #32
 800e102:	f040 80da 	bne.w	800e2ba <HAL_I2C_Master_Seq_Receive_IT+0x1e4>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e114:	d005      	beq.n	800e122 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 800e116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e118:	2b08      	cmp	r3, #8
 800e11a:	d002      	beq.n	800e122 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 800e11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e11e:	2b01      	cmp	r3, #1
 800e120:	d130      	bne.n	800e184 <HAL_I2C_Master_Seq_Receive_IT+0xae>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800e122:	4b69      	ldr	r3, [pc, #420]	; (800e2c8 <HAL_I2C_Master_Seq_Receive_IT+0x1f2>)
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	08db      	lsrs	r3, r3, #3
 800e128:	4a68      	ldr	r2, [pc, #416]	; (800e2cc <HAL_I2C_Master_Seq_Receive_IT+0x1f6>)
 800e12a:	fba2 2303 	umull	r2, r3, r2, r3
 800e12e:	0a1a      	lsrs	r2, r3, #8
 800e130:	4613      	mov	r3, r2
 800e132:	009b      	lsls	r3, r3, #2
 800e134:	4413      	add	r3, r2
 800e136:	009a      	lsls	r2, r3, #2
 800e138:	4413      	add	r3, r2
 800e13a:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 800e13c:	697b      	ldr	r3, [r7, #20]
 800e13e:	3b01      	subs	r3, #1
 800e140:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 800e142:	697b      	ldr	r3, [r7, #20]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d116      	bne.n	800e176 <HAL_I2C_Master_Seq_Receive_IT+0xa0>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	2200      	movs	r2, #0
 800e14c:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	2220      	movs	r2, #32
 800e152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	2200      	movs	r2, #0
 800e15a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e162:	f043 0220 	orr.w	r2, r3, #32
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	2200      	movs	r2, #0
 800e16e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800e172:	2301      	movs	r3, #1
 800e174:	e0a2      	b.n	800e2bc <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	699b      	ldr	r3, [r3, #24]
 800e17c:	f003 0302 	and.w	r3, r3, #2
 800e180:	2b02      	cmp	r3, #2
 800e182:	d0db      	beq.n	800e13c <HAL_I2C_Master_Seq_Receive_IT+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e18a:	2b01      	cmp	r3, #1
 800e18c:	d101      	bne.n	800e192 <HAL_I2C_Master_Seq_Receive_IT+0xbc>
 800e18e:	2302      	movs	r3, #2
 800e190:	e094      	b.n	800e2bc <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	2201      	movs	r2, #1
 800e196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	f003 0301 	and.w	r3, r3, #1
 800e1a4:	2b01      	cmp	r3, #1
 800e1a6:	d007      	beq.n	800e1b8 <HAL_I2C_Master_Seq_Receive_IT+0xe2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	681a      	ldr	r2, [r3, #0]
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	f042 0201 	orr.w	r2, r2, #1
 800e1b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	681a      	ldr	r2, [r3, #0]
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e1c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	2222      	movs	r2, #34	; 0x22
 800e1cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	2210      	movs	r2, #16
 800e1d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	2200      	movs	r2, #0
 800e1dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	687a      	ldr	r2, [r7, #4]
 800e1e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	893a      	ldrh	r2, [r7, #8]
 800e1e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e1ee:	b29a      	uxth	r2, r3
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e1f8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800e1fa:	897a      	ldrh	r2, [r7, #10]
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e204:	61bb      	str	r3, [r7, #24]

    if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e20a:	b29b      	uxth	r3, r3
 800e20c:	2b02      	cmp	r3, #2
 800e20e:	d126      	bne.n	800e25e <HAL_I2C_Master_Seq_Receive_IT+0x188>
 800e210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e212:	2b20      	cmp	r3, #32
 800e214:	d002      	beq.n	800e21c <HAL_I2C_Master_Seq_Receive_IT+0x146>
 800e216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e218:	2b10      	cmp	r3, #16
 800e21a:	d120      	bne.n	800e25e <HAL_I2C_Master_Seq_Receive_IT+0x188>
    {
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800e21c:	69bb      	ldr	r3, [r7, #24]
 800e21e:	2b12      	cmp	r3, #18
 800e220:	d114      	bne.n	800e24c <HAL_I2C_Master_Seq_Receive_IT+0x176>
      {
        /* Disable Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	681a      	ldr	r2, [r3, #0]
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e230:	601a      	str	r2, [r3, #0]

        /* Enable Pos */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	681a      	ldr	r2, [r3, #0]
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e240:	601a      	str	r2, [r3, #0]

        /* Remove Enabling of IT_BUF, mean RXNE treatment, treat the 2 bytes through BTF */
        enableIT &= ~I2C_IT_BUF;
 800e242:	69fb      	ldr	r3, [r7, #28]
 800e244:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e248:	61fb      	str	r3, [r7, #28]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800e24a:	e010      	b.n	800e26e <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	681a      	ldr	r2, [r3, #0]
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e25a:	601a      	str	r2, [r3, #0]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800e25c:	e007      	b.n	800e26e <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	681a      	ldr	r2, [r3, #0]
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e26c:	601a      	str	r2, [r3, #0]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800e26e:	69bb      	ldr	r3, [r7, #24]
 800e270:	2b12      	cmp	r3, #18
 800e272:	d10c      	bne.n	800e28e <HAL_I2C_Master_Seq_Receive_IT+0x1b8>
 800e274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e276:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800e27a:	d003      	beq.n	800e284 <HAL_I2C_Master_Seq_Receive_IT+0x1ae>
 800e27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e27e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e282:	d101      	bne.n	800e288 <HAL_I2C_Master_Seq_Receive_IT+0x1b2>
 800e284:	2301      	movs	r3, #1
 800e286:	e000      	b.n	800e28a <HAL_I2C_Master_Seq_Receive_IT+0x1b4>
 800e288:	2300      	movs	r3, #0
 800e28a:	2b01      	cmp	r3, #1
 800e28c:	d107      	bne.n	800e29e <HAL_I2C_Master_Seq_Receive_IT+0x1c8>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	681a      	ldr	r2, [r3, #0]
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e29c:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable interrupts */
    __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	6859      	ldr	r1, [r3, #4]
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	69fa      	ldr	r2, [r7, #28]
 800e2b2:	430a      	orrs	r2, r1
 800e2b4:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	e000      	b.n	800e2bc <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 800e2ba:	2302      	movs	r3, #2
  }
}
 800e2bc:	4618      	mov	r0, r3
 800e2be:	3724      	adds	r7, #36	; 0x24
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c6:	4770      	bx	lr
 800e2c8:	20000058 	.word	0x20000058
 800e2cc:	14f8b589 	.word	0x14f8b589

0800e2d0 <HAL_I2C_Master_Seq_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b088      	sub	sp, #32
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	60f8      	str	r0, [r7, #12]
 800e2d8:	607a      	str	r2, [r7, #4]
 800e2da:	461a      	mov	r2, r3
 800e2dc:	460b      	mov	r3, r1
 800e2de:	817b      	strh	r3, [r7, #10]
 800e2e0:	4613      	mov	r3, r2
 800e2e2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	613b      	str	r3, [r7, #16]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e2ec:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800e2f0:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e2f8:	b2db      	uxtb	r3, r3
 800e2fa:	2b20      	cmp	r3, #32
 800e2fc:	f040 8199 	bne.w	800e632 <HAL_I2C_Master_Seq_Receive_DMA+0x362>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e30a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e30e:	d005      	beq.n	800e31c <HAL_I2C_Master_Seq_Receive_DMA+0x4c>
 800e310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e312:	2b08      	cmp	r3, #8
 800e314:	d002      	beq.n	800e31c <HAL_I2C_Master_Seq_Receive_DMA+0x4c>
 800e316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e318:	2b01      	cmp	r3, #1
 800e31a:	d130      	bne.n	800e37e <HAL_I2C_Master_Seq_Receive_DMA+0xae>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800e31c:	4b8f      	ldr	r3, [pc, #572]	; (800e55c <HAL_I2C_Master_Seq_Receive_DMA+0x28c>)
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	08db      	lsrs	r3, r3, #3
 800e322:	4a8f      	ldr	r2, [pc, #572]	; (800e560 <HAL_I2C_Master_Seq_Receive_DMA+0x290>)
 800e324:	fba2 2303 	umull	r2, r3, r2, r3
 800e328:	0a1a      	lsrs	r2, r3, #8
 800e32a:	4613      	mov	r3, r2
 800e32c:	009b      	lsls	r3, r3, #2
 800e32e:	4413      	add	r3, r2
 800e330:	009a      	lsls	r2, r3, #2
 800e332:	4413      	add	r3, r2
 800e334:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 800e336:	693b      	ldr	r3, [r7, #16]
 800e338:	3b01      	subs	r3, #1
 800e33a:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 800e33c:	693b      	ldr	r3, [r7, #16]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d116      	bne.n	800e370 <HAL_I2C_Master_Seq_Receive_DMA+0xa0>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	2200      	movs	r2, #0
 800e346:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	2220      	movs	r2, #32
 800e34c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	2200      	movs	r2, #0
 800e354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e35c:	f043 0220 	orr.w	r2, r3, #32
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	2200      	movs	r2, #0
 800e368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800e36c:	2301      	movs	r3, #1
 800e36e:	e161      	b.n	800e634 <HAL_I2C_Master_Seq_Receive_DMA+0x364>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	699b      	ldr	r3, [r3, #24]
 800e376:	f003 0302 	and.w	r3, r3, #2
 800e37a:	2b02      	cmp	r3, #2
 800e37c:	d0db      	beq.n	800e336 <HAL_I2C_Master_Seq_Receive_DMA+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e384:	2b01      	cmp	r3, #1
 800e386:	d101      	bne.n	800e38c <HAL_I2C_Master_Seq_Receive_DMA+0xbc>
 800e388:	2302      	movs	r3, #2
 800e38a:	e153      	b.n	800e634 <HAL_I2C_Master_Seq_Receive_DMA+0x364>
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	2201      	movs	r2, #1
 800e390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	f003 0301 	and.w	r3, r3, #1
 800e39e:	2b01      	cmp	r3, #1
 800e3a0:	d007      	beq.n	800e3b2 <HAL_I2C_Master_Seq_Receive_DMA+0xe2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	681a      	ldr	r2, [r3, #0]
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	f042 0201 	orr.w	r2, r2, #1
 800e3b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	681a      	ldr	r2, [r3, #0]
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e3c0:	601a      	str	r2, [r3, #0]

    /* Clear Last DMA bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	685a      	ldr	r2, [r3, #4]
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e3d0:	605a      	str	r2, [r3, #4]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	2222      	movs	r2, #34	; 0x22
 800e3d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	2210      	movs	r2, #16
 800e3de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	687a      	ldr	r2, [r7, #4]
 800e3ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	893a      	ldrh	r2, [r7, #8]
 800e3f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e3f8:	b29a      	uxth	r2, r3
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e402:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800e404:	897a      	ldrh	r2, [r7, #10]
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e40e:	617b      	str	r3, [r7, #20]

    if (hi2c->XferSize > 0U)
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e414:	2b00      	cmp	r3, #0
 800e416:	f000 80de 	beq.w	800e5d6 <HAL_I2C_Master_Seq_Receive_DMA+0x306>
    {
      if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e41e:	b29b      	uxth	r3, r3
 800e420:	2b02      	cmp	r3, #2
 800e422:	d12a      	bne.n	800e47a <HAL_I2C_Master_Seq_Receive_DMA+0x1aa>
 800e424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e426:	2b20      	cmp	r3, #32
 800e428:	d002      	beq.n	800e430 <HAL_I2C_Master_Seq_Receive_DMA+0x160>
 800e42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e42c:	2b10      	cmp	r3, #16
 800e42e:	d124      	bne.n	800e47a <HAL_I2C_Master_Seq_Receive_DMA+0x1aa>
      {
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800e430:	697b      	ldr	r3, [r7, #20]
 800e432:	2b12      	cmp	r3, #18
 800e434:	d118      	bne.n	800e468 <HAL_I2C_Master_Seq_Receive_DMA+0x198>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	681a      	ldr	r2, [r3, #0]
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e444:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	681a      	ldr	r2, [r3, #0]
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e454:	601a      	str	r2, [r3, #0]

          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	685a      	ldr	r2, [r3, #4]
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e464:	605a      	str	r2, [r3, #4]
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800e466:	e022      	b.n	800e4ae <HAL_I2C_Master_Seq_Receive_DMA+0x1de>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	681a      	ldr	r2, [r3, #0]
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e476:	601a      	str	r2, [r3, #0]
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800e478:	e019      	b.n	800e4ae <HAL_I2C_Master_Seq_Receive_DMA+0x1de>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	681a      	ldr	r2, [r3, #0]
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e488:	601a      	str	r2, [r3, #0]

        if ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_OTHER_AND_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 800e48a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e48c:	2b20      	cmp	r3, #32
 800e48e:	d006      	beq.n	800e49e <HAL_I2C_Master_Seq_Receive_DMA+0x1ce>
 800e490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e492:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e496:	d002      	beq.n	800e49e <HAL_I2C_Master_Seq_Receive_DMA+0x1ce>
 800e498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e49a:	2b10      	cmp	r3, #16
 800e49c:	d107      	bne.n	800e4ae <HAL_I2C_Master_Seq_Receive_DMA+0x1de>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	685a      	ldr	r2, [r3, #4]
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e4ac:	605a      	str	r2, [r3, #4]
        }
      }
      if (hi2c->hdmarx != NULL)
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d022      	beq.n	800e4fc <HAL_I2C_Master_Seq_Receive_DMA+0x22c>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4ba:	4a2a      	ldr	r2, [pc, #168]	; (800e564 <HAL_I2C_Master_Seq_Receive_DMA+0x294>)
 800e4bc:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4c2:	4a29      	ldr	r2, [pc, #164]	; (800e568 <HAL_I2C_Master_Seq_Receive_DMA+0x298>)
 800e4c4:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4d2:	2200      	movs	r2, #0
 800e4d4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	3310      	adds	r3, #16
 800e4e0:	4619      	mov	r1, r3
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4e6:	461a      	mov	r2, r3
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e4ec:	f7f9 fbfb 	bl	8007ce6 <HAL_DMA_Start_IT>
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	76fb      	strb	r3, [r7, #27]
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }
      if (dmaxferstatus == HAL_OK)
 800e4f4:	7efb      	ldrb	r3, [r7, #27]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d159      	bne.n	800e5ae <HAL_I2C_Master_Seq_Receive_DMA+0x2de>
 800e4fa:	e013      	b.n	800e524 <HAL_I2C_Master_Seq_Receive_DMA+0x254>
        hi2c->State     = HAL_I2C_STATE_READY;
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	2220      	movs	r2, #32
 800e500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	2200      	movs	r2, #0
 800e508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e510:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	2200      	movs	r2, #0
 800e51c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800e520:	2301      	movs	r3, #1
 800e522:	e087      	b.n	800e634 <HAL_I2C_Master_Seq_Receive_DMA+0x364>
      {
        /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
        /* Mean Previous state is same as current state */
        if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800e524:	697b      	ldr	r3, [r7, #20]
 800e526:	2b12      	cmp	r3, #18
 800e528:	d10c      	bne.n	800e544 <HAL_I2C_Master_Seq_Receive_DMA+0x274>
 800e52a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e52c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800e530:	d003      	beq.n	800e53a <HAL_I2C_Master_Seq_Receive_DMA+0x26a>
 800e532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e534:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e538:	d101      	bne.n	800e53e <HAL_I2C_Master_Seq_Receive_DMA+0x26e>
 800e53a:	2301      	movs	r3, #1
 800e53c:	e000      	b.n	800e540 <HAL_I2C_Master_Seq_Receive_DMA+0x270>
 800e53e:	2300      	movs	r3, #0
 800e540:	2b01      	cmp	r3, #1
 800e542:	d113      	bne.n	800e56c <HAL_I2C_Master_Seq_Receive_DMA+0x29c>
        {
          /* Generate Start */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	681a      	ldr	r2, [r3, #0]
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e552:	601a      	str	r2, [r3, #0]

          /* Update interrupt for only EVT and ERR */
          enableIT = (I2C_IT_EVT | I2C_IT_ERR);
 800e554:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e558:	61fb      	str	r3, [r7, #28]
 800e55a:	e00a      	b.n	800e572 <HAL_I2C_Master_Seq_Receive_DMA+0x2a2>
 800e55c:	20000058 	.word	0x20000058
 800e560:	14f8b589 	.word	0x14f8b589
 800e564:	08010c19 	.word	0x08010c19
 800e568:	08010dc3 	.word	0x08010dc3
        }
        else
        {
          /* Update interrupt for only ERR */
          enableIT = I2C_IT_ERR;
 800e56c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e570:	61fb      	str	r3, [r7, #28]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	2200      	movs	r2, #0
 800e576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* If XferOptions is not associated to a new frame, mean no start bit is request, enable directly the DMA request */
        /* In other cases, DMA request is enabled after Slave address treatment in IRQHandler */
        if ((XferOptions == I2C_NEXT_FRAME) || (XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 800e57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e57c:	2b04      	cmp	r3, #4
 800e57e:	d005      	beq.n	800e58c <HAL_I2C_Master_Seq_Receive_DMA+0x2bc>
 800e580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e582:	2b20      	cmp	r3, #32
 800e584:	d002      	beq.n	800e58c <HAL_I2C_Master_Seq_Receive_DMA+0x2bc>
 800e586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e588:	2b10      	cmp	r3, #16
 800e58a:	d107      	bne.n	800e59c <HAL_I2C_Master_Seq_Receive_DMA+0x2cc>
        {
          /* Enable DMA Request */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	685a      	ldr	r2, [r3, #4]
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e59a:	605a      	str	r2, [r3, #4]
        }

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	6859      	ldr	r1, [r3, #4]
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	69fa      	ldr	r2, [r7, #28]
 800e5a8:	430a      	orrs	r2, r1
 800e5aa:	605a      	str	r2, [r3, #4]
 800e5ac:	e03f      	b.n	800e62e <HAL_I2C_Master_Seq_Receive_DMA+0x35e>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	2220      	movs	r2, #32
 800e5b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5c2:	f043 0210 	orr.w	r2, r3, #16
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e5d2:	2301      	movs	r3, #1
 800e5d4:	e02e      	b.n	800e634 <HAL_I2C_Master_Seq_Receive_DMA+0x364>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	681a      	ldr	r2, [r3, #0]
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e5e4:	601a      	str	r2, [r3, #0]

      /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
      /* Mean Previous state is same as current state */
      if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800e5e6:	697b      	ldr	r3, [r7, #20]
 800e5e8:	2b12      	cmp	r3, #18
 800e5ea:	d10c      	bne.n	800e606 <HAL_I2C_Master_Seq_Receive_DMA+0x336>
 800e5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5ee:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800e5f2:	d003      	beq.n	800e5fc <HAL_I2C_Master_Seq_Receive_DMA+0x32c>
 800e5f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5f6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e5fa:	d101      	bne.n	800e600 <HAL_I2C_Master_Seq_Receive_DMA+0x330>
 800e5fc:	2301      	movs	r3, #1
 800e5fe:	e000      	b.n	800e602 <HAL_I2C_Master_Seq_Receive_DMA+0x332>
 800e600:	2300      	movs	r3, #0
 800e602:	2b01      	cmp	r3, #1
 800e604:	d107      	bne.n	800e616 <HAL_I2C_Master_Seq_Receive_DMA+0x346>
      {
        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	681a      	ldr	r2, [r3, #0]
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e614:	601a      	str	r2, [r3, #0]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	2200      	movs	r2, #0
 800e61a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable interrupts */
      __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	6859      	ldr	r1, [r3, #4]
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	69fa      	ldr	r2, [r7, #28]
 800e62a:	430a      	orrs	r2, r1
 800e62c:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 800e62e:	2300      	movs	r3, #0
 800e630:	e000      	b.n	800e634 <HAL_I2C_Master_Seq_Receive_DMA+0x364>
  }
  else
  {
    return HAL_BUSY;
 800e632:	2302      	movs	r3, #2
  }
}
 800e634:	4618      	mov	r0, r3
 800e636:	3720      	adds	r7, #32
 800e638:	46bd      	mov	sp, r7
 800e63a:	bd80      	pop	{r7, pc}

0800e63c <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800e63c:	b480      	push	{r7}
 800e63e:	b087      	sub	sp, #28
 800e640:	af00      	add	r7, sp, #0
 800e642:	60f8      	str	r0, [r7, #12]
 800e644:	60b9      	str	r1, [r7, #8]
 800e646:	603b      	str	r3, [r7, #0]
 800e648:	4613      	mov	r3, r2
 800e64a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e652:	b2db      	uxtb	r3, r3
 800e654:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e658:	2b28      	cmp	r3, #40	; 0x28
 800e65a:	d15b      	bne.n	800e714 <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 800e65c:	68bb      	ldr	r3, [r7, #8]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d002      	beq.n	800e668 <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 800e662:	88fb      	ldrh	r3, [r7, #6]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d101      	bne.n	800e66c <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 800e668:	2301      	movs	r3, #1
 800e66a:	e054      	b.n	800e716 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e672:	2b01      	cmp	r3, #1
 800e674:	d101      	bne.n	800e67a <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 800e676:	2302      	movs	r3, #2
 800e678:	e04d      	b.n	800e716 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	2201      	movs	r2, #1
 800e67e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	f003 0301 	and.w	r3, r3, #1
 800e68c:	2b01      	cmp	r3, #1
 800e68e:	d007      	beq.n	800e6a0 <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	681a      	ldr	r2, [r3, #0]
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	f042 0201 	orr.w	r2, r2, #1
 800e69e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	681a      	ldr	r2, [r3, #0]
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e6ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	2229      	movs	r2, #41	; 0x29
 800e6b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	2220      	movs	r2, #32
 800e6bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	68ba      	ldr	r2, [r7, #8]
 800e6ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	88fa      	ldrh	r2, [r7, #6]
 800e6d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e6d6:	b29a      	uxth	r2, r3
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	683a      	ldr	r2, [r7, #0]
 800e6e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	617b      	str	r3, [r7, #20]
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	695b      	ldr	r3, [r3, #20]
 800e6ec:	617b      	str	r3, [r7, #20]
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	699b      	ldr	r3, [r3, #24]
 800e6f4:	617b      	str	r3, [r7, #20]
 800e6f6:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	685a      	ldr	r2, [r3, #4]
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800e70e:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800e710:	2300      	movs	r3, #0
 800e712:	e000      	b.n	800e716 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 800e714:	2302      	movs	r3, #2
  }
}
 800e716:	4618      	mov	r0, r3
 800e718:	371c      	adds	r7, #28
 800e71a:	46bd      	mov	sp, r7
 800e71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e720:	4770      	bx	lr

0800e722 <HAL_I2C_Slave_Seq_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800e722:	b580      	push	{r7, lr}
 800e724:	b086      	sub	sp, #24
 800e726:	af00      	add	r7, sp, #0
 800e728:	60f8      	str	r0, [r7, #12]
 800e72a:	60b9      	str	r1, [r7, #8]
 800e72c:	603b      	str	r3, [r7, #0]
 800e72e:	4613      	mov	r3, r2
 800e730:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e738:	b2db      	uxtb	r3, r3
 800e73a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e73e:	2b28      	cmp	r3, #40	; 0x28
 800e740:	f040 811e 	bne.w	800e980 <HAL_I2C_Slave_Seq_Transmit_DMA+0x25e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e744:	68bb      	ldr	r3, [r7, #8]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d002      	beq.n	800e750 <HAL_I2C_Slave_Seq_Transmit_DMA+0x2e>
 800e74a:	88fb      	ldrh	r3, [r7, #6]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d101      	bne.n	800e754 <HAL_I2C_Slave_Seq_Transmit_DMA+0x32>
    {
      return  HAL_ERROR;
 800e750:	2301      	movs	r3, #1
 800e752:	e116      	b.n	800e982 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e75a:	2b01      	cmp	r3, #1
 800e75c:	d101      	bne.n	800e762 <HAL_I2C_Slave_Seq_Transmit_DMA+0x40>
 800e75e:	2302      	movs	r3, #2
 800e760:	e10f      	b.n	800e982 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	2201      	movs	r2, #1
 800e766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	685a      	ldr	r2, [r3, #4]
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800e778:	605a      	str	r2, [r3, #4]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e780:	b2db      	uxtb	r3, r3
 800e782:	2b2a      	cmp	r3, #42	; 0x2a
 800e784:	d127      	bne.n	800e7d6 <HAL_I2C_Slave_Seq_Transmit_DMA+0xb4>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	685b      	ldr	r3, [r3, #4]
 800e78c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e790:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e794:	d14c      	bne.n	800e830 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d048      	beq.n	800e830 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
        {
          CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	685a      	ldr	r2, [r3, #4]
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e7ac:	605a      	str	r2, [r3, #4]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7b2:	4a76      	ldr	r2, [pc, #472]	; (800e98c <HAL_I2C_Slave_Seq_Transmit_DMA+0x26a>)
 800e7b4:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	f7f9 fb5b 	bl	8007e76 <HAL_DMA_Abort_IT>
 800e7c0:	4603      	mov	r3, r0
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d034      	beq.n	800e830 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e7cc:	68fa      	ldr	r2, [r7, #12]
 800e7ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e7d0:	4610      	mov	r0, r2
 800e7d2:	4798      	blx	r3
 800e7d4:	e02c      	b.n	800e830 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e7dc:	b2db      	uxtb	r3, r3
 800e7de:	2b29      	cmp	r3, #41	; 0x29
 800e7e0:	d126      	bne.n	800e830 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	685b      	ldr	r3, [r3, #4]
 800e7e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e7ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e7f0:	d11e      	bne.n	800e830 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
      {
        CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	685a      	ldr	r2, [r3, #4]
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e800:	605a      	str	r2, [r3, #4]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e806:	2b00      	cmp	r3, #0
 800e808:	d012      	beq.n	800e830 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e80e:	4a5f      	ldr	r2, [pc, #380]	; (800e98c <HAL_I2C_Slave_Seq_Transmit_DMA+0x26a>)
 800e810:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e816:	4618      	mov	r0, r3
 800e818:	f7f9 fb2d 	bl	8007e76 <HAL_DMA_Abort_IT>
 800e81c:	4603      	mov	r3, r0
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d006      	beq.n	800e830 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e828:	68fa      	ldr	r2, [r7, #12]
 800e82a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e82c:	4610      	mov	r0, r2
 800e82e:	4798      	blx	r3
    {
      /* Nothing to do */
    }

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	f003 0301 	and.w	r3, r3, #1
 800e83a:	2b01      	cmp	r3, #1
 800e83c:	d007      	beq.n	800e84e <HAL_I2C_Slave_Seq_Transmit_DMA+0x12c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	681a      	ldr	r2, [r3, #0]
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	f042 0201 	orr.w	r2, r2, #1
 800e84c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	681a      	ldr	r2, [r3, #0]
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e85c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	2229      	movs	r2, #41	; 0x29
 800e862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	2220      	movs	r2, #32
 800e86a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	2200      	movs	r2, #0
 800e872:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	68ba      	ldr	r2, [r7, #8]
 800e878:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	88fa      	ldrh	r2, [r7, #6]
 800e87e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e884:	b29a      	uxth	r2, r3
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	683a      	ldr	r2, [r7, #0]
 800e88e:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmatx != NULL)
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e894:	2b00      	cmp	r3, #0
 800e896:	d022      	beq.n	800e8de <HAL_I2C_Slave_Seq_Transmit_DMA+0x1bc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e89c:	4a3c      	ldr	r2, [pc, #240]	; (800e990 <HAL_I2C_Slave_Seq_Transmit_DMA+0x26e>)
 800e89e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8a4:	4a3b      	ldr	r2, [pc, #236]	; (800e994 <HAL_I2C_Slave_Seq_Transmit_DMA+0x272>)
 800e8a6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8c0:	4619      	mov	r1, r3
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	3310      	adds	r3, #16
 800e8c8:	461a      	mov	r2, r3
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e8ce:	f7f9 fa0a 	bl	8007ce6 <HAL_DMA_Start_IT>
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800e8d6:	7dfb      	ldrb	r3, [r7, #23]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d13d      	bne.n	800e958 <HAL_I2C_Slave_Seq_Transmit_DMA+0x236>
 800e8dc:	e013      	b.n	800e906 <HAL_I2C_Slave_Seq_Transmit_DMA+0x1e4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	2228      	movs	r2, #40	; 0x28
 800e8e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8f2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800e902:	2301      	movs	r3, #1
 800e904:	e03d      	b.n	800e982 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	681a      	ldr	r2, [r3, #0]
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e914:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e916:	2300      	movs	r3, #0
 800e918:	613b      	str	r3, [r7, #16]
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	695b      	ldr	r3, [r3, #20]
 800e920:	613b      	str	r3, [r7, #16]
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	699b      	ldr	r3, [r3, #24]
 800e928:	613b      	str	r3, [r7, #16]
 800e92a:	693b      	ldr	r3, [r7, #16]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	2200      	movs	r2, #0
 800e930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	685a      	ldr	r2, [r3, #4]
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800e942:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	685a      	ldr	r2, [r3, #4]
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e952:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 800e954:	2300      	movs	r3, #0
 800e956:	e014      	b.n	800e982 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	2220      	movs	r2, #32
 800e95c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	2200      	movs	r2, #0
 800e964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e96c:	f043 0210 	orr.w	r2, r3, #16
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	2200      	movs	r2, #0
 800e978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e97c:	2301      	movs	r3, #1
 800e97e:	e000      	b.n	800e982 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }
  }
  else
  {
    return HAL_BUSY;
 800e980:	2302      	movs	r3, #2
  }
}
 800e982:	4618      	mov	r0, r3
 800e984:	3718      	adds	r7, #24
 800e986:	46bd      	mov	sp, r7
 800e988:	bd80      	pop	{r7, pc}
 800e98a:	bf00      	nop
 800e98c:	08010e3d 	.word	0x08010e3d
 800e990:	08010c19 	.word	0x08010c19
 800e994:	08010dc3 	.word	0x08010dc3

0800e998 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800e998:	b480      	push	{r7}
 800e99a:	b087      	sub	sp, #28
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	60f8      	str	r0, [r7, #12]
 800e9a0:	60b9      	str	r1, [r7, #8]
 800e9a2:	603b      	str	r3, [r7, #0]
 800e9a4:	4613      	mov	r3, r2
 800e9a6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e9ae:	b2db      	uxtb	r3, r3
 800e9b0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e9b4:	2b28      	cmp	r3, #40	; 0x28
 800e9b6:	d15b      	bne.n	800ea70 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 800e9b8:	68bb      	ldr	r3, [r7, #8]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d002      	beq.n	800e9c4 <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 800e9be:	88fb      	ldrh	r3, [r7, #6]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d101      	bne.n	800e9c8 <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 800e9c4:	2301      	movs	r3, #1
 800e9c6:	e054      	b.n	800ea72 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e9ce:	2b01      	cmp	r3, #1
 800e9d0:	d101      	bne.n	800e9d6 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 800e9d2:	2302      	movs	r3, #2
 800e9d4:	e04d      	b.n	800ea72 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	2201      	movs	r2, #1
 800e9da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	f003 0301 	and.w	r3, r3, #1
 800e9e8:	2b01      	cmp	r3, #1
 800e9ea:	d007      	beq.n	800e9fc <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	681a      	ldr	r2, [r3, #0]
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	f042 0201 	orr.w	r2, r2, #1
 800e9fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	681a      	ldr	r2, [r3, #0]
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ea0a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	222a      	movs	r2, #42	; 0x2a
 800ea10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	2220      	movs	r2, #32
 800ea18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	2200      	movs	r2, #0
 800ea20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	68ba      	ldr	r2, [r7, #8]
 800ea26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	88fa      	ldrh	r2, [r7, #6]
 800ea2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ea32:	b29a      	uxth	r2, r3
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	683a      	ldr	r2, [r7, #0]
 800ea3c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ea3e:	2300      	movs	r3, #0
 800ea40:	617b      	str	r3, [r7, #20]
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	695b      	ldr	r3, [r3, #20]
 800ea48:	617b      	str	r3, [r7, #20]
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	699b      	ldr	r3, [r3, #24]
 800ea50:	617b      	str	r3, [r7, #20]
 800ea52:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	2200      	movs	r2, #0
 800ea58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	685a      	ldr	r2, [r3, #4]
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800ea6a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	e000      	b.n	800ea72 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 800ea70:	2302      	movs	r3, #2
  }
}
 800ea72:	4618      	mov	r0, r3
 800ea74:	371c      	adds	r7, #28
 800ea76:	46bd      	mov	sp, r7
 800ea78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7c:	4770      	bx	lr

0800ea7e <HAL_I2C_Slave_Seq_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800ea7e:	b580      	push	{r7, lr}
 800ea80:	b086      	sub	sp, #24
 800ea82:	af00      	add	r7, sp, #0
 800ea84:	60f8      	str	r0, [r7, #12]
 800ea86:	60b9      	str	r1, [r7, #8]
 800ea88:	603b      	str	r3, [r7, #0]
 800ea8a:	4613      	mov	r3, r2
 800ea8c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ea94:	b2db      	uxtb	r3, r3
 800ea96:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800ea9a:	2b28      	cmp	r3, #40	; 0x28
 800ea9c:	f040 811e 	bne.w	800ecdc <HAL_I2C_Slave_Seq_Receive_DMA+0x25e>
  {
    if ((pData == NULL) || (Size == 0U))
 800eaa0:	68bb      	ldr	r3, [r7, #8]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d002      	beq.n	800eaac <HAL_I2C_Slave_Seq_Receive_DMA+0x2e>
 800eaa6:	88fb      	ldrh	r3, [r7, #6]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d101      	bne.n	800eab0 <HAL_I2C_Slave_Seq_Receive_DMA+0x32>
    {
      return  HAL_ERROR;
 800eaac:	2301      	movs	r3, #1
 800eaae:	e116      	b.n	800ecde <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eab6:	2b01      	cmp	r3, #1
 800eab8:	d101      	bne.n	800eabe <HAL_I2C_Slave_Seq_Receive_DMA+0x40>
 800eaba:	2302      	movs	r3, #2
 800eabc:	e10f      	b.n	800ecde <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	2201      	movs	r2, #1
 800eac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	685a      	ldr	r2, [r3, #4]
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800ead4:	605a      	str	r2, [r3, #4]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eadc:	b2db      	uxtb	r3, r3
 800eade:	2b2a      	cmp	r3, #42	; 0x2a
 800eae0:	d127      	bne.n	800eb32 <HAL_I2C_Slave_Seq_Receive_DMA+0xb4>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	685b      	ldr	r3, [r3, #4]
 800eae8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eaec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eaf0:	d14c      	bne.n	800eb8c <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d048      	beq.n	800eb8c <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
        {
          CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	685a      	ldr	r2, [r3, #4]
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800eb08:	605a      	str	r2, [r3, #4]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb0e:	4a76      	ldr	r2, [pc, #472]	; (800ece8 <HAL_I2C_Slave_Seq_Receive_DMA+0x26a>)
 800eb10:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb16:	4618      	mov	r0, r3
 800eb18:	f7f9 f9ad 	bl	8007e76 <HAL_DMA_Abort_IT>
 800eb1c:	4603      	mov	r3, r0
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d034      	beq.n	800eb8c <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb28:	68fa      	ldr	r2, [r7, #12]
 800eb2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800eb2c:	4610      	mov	r0, r2
 800eb2e:	4798      	blx	r3
 800eb30:	e02c      	b.n	800eb8c <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eb38:	b2db      	uxtb	r3, r3
 800eb3a:	2b29      	cmp	r3, #41	; 0x29
 800eb3c:	d126      	bne.n	800eb8c <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	685b      	ldr	r3, [r3, #4]
 800eb44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eb48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eb4c:	d11e      	bne.n	800eb8c <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
      {
        CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	685a      	ldr	r2, [r3, #4]
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800eb5c:	605a      	str	r2, [r3, #4]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d012      	beq.n	800eb8c <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb6a:	4a5f      	ldr	r2, [pc, #380]	; (800ece8 <HAL_I2C_Slave_Seq_Receive_DMA+0x26a>)
 800eb6c:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb72:	4618      	mov	r0, r3
 800eb74:	f7f9 f97f 	bl	8007e76 <HAL_DMA_Abort_IT>
 800eb78:	4603      	mov	r3, r0
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d006      	beq.n	800eb8c <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb84:	68fa      	ldr	r2, [r7, #12]
 800eb86:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800eb88:	4610      	mov	r0, r2
 800eb8a:	4798      	blx	r3
    {
      /* Nothing to do */
    }

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	f003 0301 	and.w	r3, r3, #1
 800eb96:	2b01      	cmp	r3, #1
 800eb98:	d007      	beq.n	800ebaa <HAL_I2C_Slave_Seq_Receive_DMA+0x12c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	681a      	ldr	r2, [r3, #0]
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	f042 0201 	orr.w	r2, r2, #1
 800eba8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	681a      	ldr	r2, [r3, #0]
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ebb8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	222a      	movs	r2, #42	; 0x2a
 800ebbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	2220      	movs	r2, #32
 800ebc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	2200      	movs	r2, #0
 800ebce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	68ba      	ldr	r2, [r7, #8]
 800ebd4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	88fa      	ldrh	r2, [r7, #6]
 800ebda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ebe0:	b29a      	uxth	r2, r3
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	683a      	ldr	r2, [r7, #0]
 800ebea:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmarx != NULL)
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d022      	beq.n	800ec3a <HAL_I2C_Slave_Seq_Receive_DMA+0x1bc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebf8:	4a3c      	ldr	r2, [pc, #240]	; (800ecec <HAL_I2C_Slave_Seq_Receive_DMA+0x26e>)
 800ebfa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec00:	4a3b      	ldr	r2, [pc, #236]	; (800ecf0 <HAL_I2C_Slave_Seq_Receive_DMA+0x272>)
 800ec02:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec08:	2200      	movs	r2, #0
 800ec0a:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec10:	2200      	movs	r2, #0
 800ec12:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	3310      	adds	r3, #16
 800ec1e:	4619      	mov	r1, r3
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec24:	461a      	mov	r2, r3
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ec2a:	f7f9 f85c 	bl	8007ce6 <HAL_DMA_Start_IT>
 800ec2e:	4603      	mov	r3, r0
 800ec30:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800ec32:	7dfb      	ldrb	r3, [r7, #23]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d13d      	bne.n	800ecb4 <HAL_I2C_Slave_Seq_Receive_DMA+0x236>
 800ec38:	e013      	b.n	800ec62 <HAL_I2C_Slave_Seq_Receive_DMA+0x1e4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	2228      	movs	r2, #40	; 0x28
 800ec3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	2200      	movs	r2, #0
 800ec46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec4e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	2200      	movs	r2, #0
 800ec5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800ec5e:	2301      	movs	r3, #1
 800ec60:	e03d      	b.n	800ecde <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	681a      	ldr	r2, [r3, #0]
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ec70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ec72:	2300      	movs	r3, #0
 800ec74:	613b      	str	r3, [r7, #16]
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	695b      	ldr	r3, [r3, #20]
 800ec7c:	613b      	str	r3, [r7, #16]
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	699b      	ldr	r3, [r3, #24]
 800ec84:	613b      	str	r3, [r7, #16]
 800ec86:	693b      	ldr	r3, [r7, #16]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	685a      	ldr	r2, [r3, #4]
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ec9e:	605a      	str	r2, [r3, #4]

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	685a      	ldr	r2, [r3, #4]
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800ecae:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	e014      	b.n	800ecde <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	2220      	movs	r2, #32
 800ecb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecc8:	f043 0210 	orr.w	r2, r3, #16
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ecd8:	2301      	movs	r3, #1
 800ecda:	e000      	b.n	800ecde <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }
  }
  else
  {
    return HAL_BUSY;
 800ecdc:	2302      	movs	r3, #2
  }
}
 800ecde:	4618      	mov	r0, r3
 800ece0:	3718      	adds	r7, #24
 800ece2:	46bd      	mov	sp, r7
 800ece4:	bd80      	pop	{r7, pc}
 800ece6:	bf00      	nop
 800ece8:	08010e3d 	.word	0x08010e3d
 800ecec:	08010c19 	.word	0x08010c19
 800ecf0:	08010dc3 	.word	0x08010dc3

0800ecf4 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800ecf4:	b480      	push	{r7}
 800ecf6:	b083      	sub	sp, #12
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ed02:	b2db      	uxtb	r3, r3
 800ed04:	2b20      	cmp	r3, #32
 800ed06:	d124      	bne.n	800ed52 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	2228      	movs	r2, #40	; 0x28
 800ed0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	f003 0301 	and.w	r3, r3, #1
 800ed1a:	2b01      	cmp	r3, #1
 800ed1c:	d007      	beq.n	800ed2e <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	681a      	ldr	r2, [r3, #0]
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	f042 0201 	orr.w	r2, r2, #1
 800ed2c:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	681a      	ldr	r2, [r3, #0]
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ed3c:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	685a      	ldr	r2, [r3, #4]
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800ed4c:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800ed4e:	2300      	movs	r3, #0
 800ed50:	e000      	b.n	800ed54 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800ed52:	2302      	movs	r3, #2
  }
}
 800ed54:	4618      	mov	r0, r3
 800ed56:	370c      	adds	r7, #12
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5e:	4770      	bx	lr

0800ed60 <HAL_I2C_DisableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DisableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800ed60:	b480      	push	{r7}
 800ed62:	b085      	sub	sp, #20
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp;

  /* Disable Address listen mode only if a transfer is not ongoing */
  if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ed6e:	b2db      	uxtb	r3, r3
 800ed70:	2b28      	cmp	r3, #40	; 0x28
 800ed72:	d129      	bne.n	800edc8 <HAL_I2C_DisableListen_IT+0x68>
  {
    tmp = (uint32_t)(hi2c->State) & I2C_STATE_MSK;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ed7a:	b2db      	uxtb	r3, r3
 800ed7c:	f003 0303 	and.w	r3, r3, #3
 800ed80:	60fb      	str	r3, [r7, #12]
    hi2c->PreviousState = tmp | (uint32_t)(hi2c->Mode);
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ed88:	b2db      	uxtb	r3, r3
 800ed8a:	461a      	mov	r2, r3
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	431a      	orrs	r2, r3
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	2220      	movs	r2, #32
 800ed98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	2200      	movs	r2, #0
 800eda0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	681a      	ldr	r2, [r3, #0]
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800edb2:	601a      	str	r2, [r3, #0]

    /* Disable EVT and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	685a      	ldr	r2, [r3, #4]
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800edc2:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800edc4:	2300      	movs	r3, #0
 800edc6:	e000      	b.n	800edca <HAL_I2C_DisableListen_IT+0x6a>
  }
  else
  {
    return HAL_BUSY;
 800edc8:	2302      	movs	r3, #2
  }
}
 800edca:	4618      	mov	r0, r3
 800edcc:	3714      	adds	r7, #20
 800edce:	46bd      	mov	sp, r7
 800edd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd4:	4770      	bx	lr

0800edd6 <HAL_I2C_Master_Abort_IT>:
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Abort_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress)
{
 800edd6:	b580      	push	{r7, lr}
 800edd8:	b084      	sub	sp, #16
 800edda:	af00      	add	r7, sp, #0
 800eddc:	6078      	str	r0, [r7, #4]
 800edde:	460b      	mov	r3, r1
 800ede0:	807b      	strh	r3, [r7, #2]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ede8:	73fb      	strb	r3, [r7, #15]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(DevAddress);

  /* Abort Master transfer during Receive or Transmit process    */
  if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && (CurrentMode == HAL_I2C_MODE_MASTER))
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	699b      	ldr	r3, [r3, #24]
 800edf0:	f003 0302 	and.w	r3, r3, #2
 800edf4:	2b02      	cmp	r3, #2
 800edf6:	d138      	bne.n	800ee6a <HAL_I2C_Master_Abort_IT+0x94>
 800edf8:	7bfb      	ldrb	r3, [r7, #15]
 800edfa:	2b10      	cmp	r3, #16
 800edfc:	d135      	bne.n	800ee6a <HAL_I2C_Master_Abort_IT+0x94>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ee04:	2b01      	cmp	r3, #1
 800ee06:	d101      	bne.n	800ee0c <HAL_I2C_Master_Abort_IT+0x36>
 800ee08:	2302      	movs	r3, #2
 800ee0a:	e02f      	b.n	800ee6c <HAL_I2C_Master_Abort_IT+0x96>
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	2201      	movs	r2, #1
 800ee10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    hi2c->PreviousState = I2C_STATE_NONE;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	2200      	movs	r2, #0
 800ee18:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_ABORT;
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	2260      	movs	r2, #96	; 0x60
 800ee1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	681a      	ldr	r2, [r3, #0]
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ee30:	601a      	str	r2, [r3, #0]

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	681a      	ldr	r2, [r3, #0]
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ee40:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	2200      	movs	r2, #0
 800ee46:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	685a      	ldr	r2, [r3, #4]
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ee56:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800ee60:	6878      	ldr	r0, [r7, #4]
 800ee62:	f001 fad9 	bl	8010418 <I2C_ITError>

    return HAL_OK;
 800ee66:	2300      	movs	r3, #0
 800ee68:	e000      	b.n	800ee6c <HAL_I2C_Master_Abort_IT+0x96>
  else
  {
    /* Wrong usage of abort function */
    /* This function should be used only in case of abort monitored by master device */
    /* Or periphal is not in busy state, mean there is no active sequence to be abort */
    return HAL_ERROR;
 800ee6a:	2301      	movs	r3, #1
  }
}
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	3710      	adds	r7, #16
 800ee70:	46bd      	mov	sp, r7
 800ee72:	bd80      	pop	{r7, pc}

0800ee74 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b088      	sub	sp, #32
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	685b      	ldr	r3, [r3, #4]
 800ee86:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee8c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ee94:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ee9c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800ee9e:	7bfb      	ldrb	r3, [r7, #15]
 800eea0:	2b10      	cmp	r3, #16
 800eea2:	d003      	beq.n	800eeac <HAL_I2C_EV_IRQHandler+0x38>
 800eea4:	7bfb      	ldrb	r3, [r7, #15]
 800eea6:	2b40      	cmp	r3, #64	; 0x40
 800eea8:	f040 80c1 	bne.w	800f02e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	699b      	ldr	r3, [r3, #24]
 800eeb2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	695b      	ldr	r3, [r3, #20]
 800eeba:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800eebc:	69fb      	ldr	r3, [r7, #28]
 800eebe:	f003 0301 	and.w	r3, r3, #1
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d10d      	bne.n	800eee2 <HAL_I2C_EV_IRQHandler+0x6e>
 800eec6:	693b      	ldr	r3, [r7, #16]
 800eec8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800eecc:	d003      	beq.n	800eed6 <HAL_I2C_EV_IRQHandler+0x62>
 800eece:	693b      	ldr	r3, [r7, #16]
 800eed0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800eed4:	d101      	bne.n	800eeda <HAL_I2C_EV_IRQHandler+0x66>
 800eed6:	2301      	movs	r3, #1
 800eed8:	e000      	b.n	800eedc <HAL_I2C_EV_IRQHandler+0x68>
 800eeda:	2300      	movs	r3, #0
 800eedc:	2b01      	cmp	r3, #1
 800eede:	f000 8132 	beq.w	800f146 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800eee2:	69fb      	ldr	r3, [r7, #28]
 800eee4:	f003 0301 	and.w	r3, r3, #1
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d00c      	beq.n	800ef06 <HAL_I2C_EV_IRQHandler+0x92>
 800eeec:	697b      	ldr	r3, [r7, #20]
 800eeee:	0a5b      	lsrs	r3, r3, #9
 800eef0:	f003 0301 	and.w	r3, r3, #1
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d006      	beq.n	800ef06 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800eef8:	6878      	ldr	r0, [r7, #4]
 800eefa:	f002 fa94 	bl	8011426 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800eefe:	6878      	ldr	r0, [r7, #4]
 800ef00:	f000 fda1 	bl	800fa46 <I2C_Master_SB>
 800ef04:	e092      	b.n	800f02c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ef06:	69fb      	ldr	r3, [r7, #28]
 800ef08:	08db      	lsrs	r3, r3, #3
 800ef0a:	f003 0301 	and.w	r3, r3, #1
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d009      	beq.n	800ef26 <HAL_I2C_EV_IRQHandler+0xb2>
 800ef12:	697b      	ldr	r3, [r7, #20]
 800ef14:	0a5b      	lsrs	r3, r3, #9
 800ef16:	f003 0301 	and.w	r3, r3, #1
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d003      	beq.n	800ef26 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800ef1e:	6878      	ldr	r0, [r7, #4]
 800ef20:	f000 fe17 	bl	800fb52 <I2C_Master_ADD10>
 800ef24:	e082      	b.n	800f02c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ef26:	69fb      	ldr	r3, [r7, #28]
 800ef28:	085b      	lsrs	r3, r3, #1
 800ef2a:	f003 0301 	and.w	r3, r3, #1
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d009      	beq.n	800ef46 <HAL_I2C_EV_IRQHandler+0xd2>
 800ef32:	697b      	ldr	r3, [r7, #20]
 800ef34:	0a5b      	lsrs	r3, r3, #9
 800ef36:	f003 0301 	and.w	r3, r3, #1
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d003      	beq.n	800ef46 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800ef3e:	6878      	ldr	r0, [r7, #4]
 800ef40:	f000 fe31 	bl	800fba6 <I2C_Master_ADDR>
 800ef44:	e072      	b.n	800f02c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800ef46:	69bb      	ldr	r3, [r7, #24]
 800ef48:	089b      	lsrs	r3, r3, #2
 800ef4a:	f003 0301 	and.w	r3, r3, #1
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d03b      	beq.n	800efca <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	685b      	ldr	r3, [r3, #4]
 800ef58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ef5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ef60:	f000 80f3 	beq.w	800f14a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800ef64:	69fb      	ldr	r3, [r7, #28]
 800ef66:	09db      	lsrs	r3, r3, #7
 800ef68:	f003 0301 	and.w	r3, r3, #1
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d00f      	beq.n	800ef90 <HAL_I2C_EV_IRQHandler+0x11c>
 800ef70:	697b      	ldr	r3, [r7, #20]
 800ef72:	0a9b      	lsrs	r3, r3, #10
 800ef74:	f003 0301 	and.w	r3, r3, #1
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d009      	beq.n	800ef90 <HAL_I2C_EV_IRQHandler+0x11c>
 800ef7c:	69fb      	ldr	r3, [r7, #28]
 800ef7e:	089b      	lsrs	r3, r3, #2
 800ef80:	f003 0301 	and.w	r3, r3, #1
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d103      	bne.n	800ef90 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800ef88:	6878      	ldr	r0, [r7, #4]
 800ef8a:	f000 fa1b 	bl	800f3c4 <I2C_MasterTransmit_TXE>
 800ef8e:	e04d      	b.n	800f02c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ef90:	69fb      	ldr	r3, [r7, #28]
 800ef92:	089b      	lsrs	r3, r3, #2
 800ef94:	f003 0301 	and.w	r3, r3, #1
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	f000 80d6 	beq.w	800f14a <HAL_I2C_EV_IRQHandler+0x2d6>
 800ef9e:	697b      	ldr	r3, [r7, #20]
 800efa0:	0a5b      	lsrs	r3, r3, #9
 800efa2:	f003 0301 	and.w	r3, r3, #1
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	f000 80cf 	beq.w	800f14a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800efac:	7bbb      	ldrb	r3, [r7, #14]
 800efae:	2b21      	cmp	r3, #33	; 0x21
 800efb0:	d103      	bne.n	800efba <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800efb2:	6878      	ldr	r0, [r7, #4]
 800efb4:	f000 faa2 	bl	800f4fc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800efb8:	e0c7      	b.n	800f14a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800efba:	7bfb      	ldrb	r3, [r7, #15]
 800efbc:	2b40      	cmp	r3, #64	; 0x40
 800efbe:	f040 80c4 	bne.w	800f14a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800efc2:	6878      	ldr	r0, [r7, #4]
 800efc4:	f000 fb10 	bl	800f5e8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800efc8:	e0bf      	b.n	800f14a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	685b      	ldr	r3, [r3, #4]
 800efd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800efd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800efd8:	f000 80b7 	beq.w	800f14a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800efdc:	69fb      	ldr	r3, [r7, #28]
 800efde:	099b      	lsrs	r3, r3, #6
 800efe0:	f003 0301 	and.w	r3, r3, #1
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d00f      	beq.n	800f008 <HAL_I2C_EV_IRQHandler+0x194>
 800efe8:	697b      	ldr	r3, [r7, #20]
 800efea:	0a9b      	lsrs	r3, r3, #10
 800efec:	f003 0301 	and.w	r3, r3, #1
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d009      	beq.n	800f008 <HAL_I2C_EV_IRQHandler+0x194>
 800eff4:	69fb      	ldr	r3, [r7, #28]
 800eff6:	089b      	lsrs	r3, r3, #2
 800eff8:	f003 0301 	and.w	r3, r3, #1
 800effc:	2b00      	cmp	r3, #0
 800effe:	d103      	bne.n	800f008 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800f000:	6878      	ldr	r0, [r7, #4]
 800f002:	f000 fb85 	bl	800f710 <I2C_MasterReceive_RXNE>
 800f006:	e011      	b.n	800f02c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f008:	69fb      	ldr	r3, [r7, #28]
 800f00a:	089b      	lsrs	r3, r3, #2
 800f00c:	f003 0301 	and.w	r3, r3, #1
 800f010:	2b00      	cmp	r3, #0
 800f012:	f000 809a 	beq.w	800f14a <HAL_I2C_EV_IRQHandler+0x2d6>
 800f016:	697b      	ldr	r3, [r7, #20]
 800f018:	0a5b      	lsrs	r3, r3, #9
 800f01a:	f003 0301 	and.w	r3, r3, #1
 800f01e:	2b00      	cmp	r3, #0
 800f020:	f000 8093 	beq.w	800f14a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800f024:	6878      	ldr	r0, [r7, #4]
 800f026:	f000 fc24 	bl	800f872 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f02a:	e08e      	b.n	800f14a <HAL_I2C_EV_IRQHandler+0x2d6>
 800f02c:	e08d      	b.n	800f14a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f032:	2b00      	cmp	r3, #0
 800f034:	d004      	beq.n	800f040 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	695b      	ldr	r3, [r3, #20]
 800f03c:	61fb      	str	r3, [r7, #28]
 800f03e:	e007      	b.n	800f050 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	699b      	ldr	r3, [r3, #24]
 800f046:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	695b      	ldr	r3, [r3, #20]
 800f04e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f050:	69fb      	ldr	r3, [r7, #28]
 800f052:	085b      	lsrs	r3, r3, #1
 800f054:	f003 0301 	and.w	r3, r3, #1
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d012      	beq.n	800f082 <HAL_I2C_EV_IRQHandler+0x20e>
 800f05c:	697b      	ldr	r3, [r7, #20]
 800f05e:	0a5b      	lsrs	r3, r3, #9
 800f060:	f003 0301 	and.w	r3, r3, #1
 800f064:	2b00      	cmp	r3, #0
 800f066:	d00c      	beq.n	800f082 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d003      	beq.n	800f078 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	699b      	ldr	r3, [r3, #24]
 800f076:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800f078:	69b9      	ldr	r1, [r7, #24]
 800f07a:	6878      	ldr	r0, [r7, #4]
 800f07c:	f000 ffe2 	bl	8010044 <I2C_Slave_ADDR>
 800f080:	e066      	b.n	800f150 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f082:	69fb      	ldr	r3, [r7, #28]
 800f084:	091b      	lsrs	r3, r3, #4
 800f086:	f003 0301 	and.w	r3, r3, #1
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d009      	beq.n	800f0a2 <HAL_I2C_EV_IRQHandler+0x22e>
 800f08e:	697b      	ldr	r3, [r7, #20]
 800f090:	0a5b      	lsrs	r3, r3, #9
 800f092:	f003 0301 	and.w	r3, r3, #1
 800f096:	2b00      	cmp	r3, #0
 800f098:	d003      	beq.n	800f0a2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800f09a:	6878      	ldr	r0, [r7, #4]
 800f09c:	f001 f81c 	bl	80100d8 <I2C_Slave_STOPF>
 800f0a0:	e056      	b.n	800f150 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800f0a2:	7bbb      	ldrb	r3, [r7, #14]
 800f0a4:	2b21      	cmp	r3, #33	; 0x21
 800f0a6:	d002      	beq.n	800f0ae <HAL_I2C_EV_IRQHandler+0x23a>
 800f0a8:	7bbb      	ldrb	r3, [r7, #14]
 800f0aa:	2b29      	cmp	r3, #41	; 0x29
 800f0ac:	d125      	bne.n	800f0fa <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800f0ae:	69fb      	ldr	r3, [r7, #28]
 800f0b0:	09db      	lsrs	r3, r3, #7
 800f0b2:	f003 0301 	and.w	r3, r3, #1
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d00f      	beq.n	800f0da <HAL_I2C_EV_IRQHandler+0x266>
 800f0ba:	697b      	ldr	r3, [r7, #20]
 800f0bc:	0a9b      	lsrs	r3, r3, #10
 800f0be:	f003 0301 	and.w	r3, r3, #1
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d009      	beq.n	800f0da <HAL_I2C_EV_IRQHandler+0x266>
 800f0c6:	69fb      	ldr	r3, [r7, #28]
 800f0c8:	089b      	lsrs	r3, r3, #2
 800f0ca:	f003 0301 	and.w	r3, r3, #1
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d103      	bne.n	800f0da <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800f0d2:	6878      	ldr	r0, [r7, #4]
 800f0d4:	f000 fef8 	bl	800fec8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800f0d8:	e039      	b.n	800f14e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f0da:	69fb      	ldr	r3, [r7, #28]
 800f0dc:	089b      	lsrs	r3, r3, #2
 800f0de:	f003 0301 	and.w	r3, r3, #1
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d033      	beq.n	800f14e <HAL_I2C_EV_IRQHandler+0x2da>
 800f0e6:	697b      	ldr	r3, [r7, #20]
 800f0e8:	0a5b      	lsrs	r3, r3, #9
 800f0ea:	f003 0301 	and.w	r3, r3, #1
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d02d      	beq.n	800f14e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800f0f2:	6878      	ldr	r0, [r7, #4]
 800f0f4:	f000 ff25 	bl	800ff42 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800f0f8:	e029      	b.n	800f14e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800f0fa:	69fb      	ldr	r3, [r7, #28]
 800f0fc:	099b      	lsrs	r3, r3, #6
 800f0fe:	f003 0301 	and.w	r3, r3, #1
 800f102:	2b00      	cmp	r3, #0
 800f104:	d00f      	beq.n	800f126 <HAL_I2C_EV_IRQHandler+0x2b2>
 800f106:	697b      	ldr	r3, [r7, #20]
 800f108:	0a9b      	lsrs	r3, r3, #10
 800f10a:	f003 0301 	and.w	r3, r3, #1
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d009      	beq.n	800f126 <HAL_I2C_EV_IRQHandler+0x2b2>
 800f112:	69fb      	ldr	r3, [r7, #28]
 800f114:	089b      	lsrs	r3, r3, #2
 800f116:	f003 0301 	and.w	r3, r3, #1
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d103      	bne.n	800f126 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800f11e:	6878      	ldr	r0, [r7, #4]
 800f120:	f000 ff30 	bl	800ff84 <I2C_SlaveReceive_RXNE>
 800f124:	e014      	b.n	800f150 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f126:	69fb      	ldr	r3, [r7, #28]
 800f128:	089b      	lsrs	r3, r3, #2
 800f12a:	f003 0301 	and.w	r3, r3, #1
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d00e      	beq.n	800f150 <HAL_I2C_EV_IRQHandler+0x2dc>
 800f132:	697b      	ldr	r3, [r7, #20]
 800f134:	0a5b      	lsrs	r3, r3, #9
 800f136:	f003 0301 	and.w	r3, r3, #1
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d008      	beq.n	800f150 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800f13e:	6878      	ldr	r0, [r7, #4]
 800f140:	f000 ff5e 	bl	8010000 <I2C_SlaveReceive_BTF>
 800f144:	e004      	b.n	800f150 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800f146:	bf00      	nop
 800f148:	e002      	b.n	800f150 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f14a:	bf00      	nop
 800f14c:	e000      	b.n	800f150 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800f14e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800f150:	3720      	adds	r7, #32
 800f152:	46bd      	mov	sp, r7
 800f154:	bd80      	pop	{r7, pc}

0800f156 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800f156:	b580      	push	{r7, lr}
 800f158:	b08a      	sub	sp, #40	; 0x28
 800f15a:	af00      	add	r7, sp, #0
 800f15c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	695b      	ldr	r3, [r3, #20]
 800f164:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	685b      	ldr	r3, [r3, #4]
 800f16c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800f16e:	2300      	movs	r3, #0
 800f170:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f178:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800f17a:	6a3b      	ldr	r3, [r7, #32]
 800f17c:	0a1b      	lsrs	r3, r3, #8
 800f17e:	f003 0301 	and.w	r3, r3, #1
 800f182:	2b00      	cmp	r3, #0
 800f184:	d00e      	beq.n	800f1a4 <HAL_I2C_ER_IRQHandler+0x4e>
 800f186:	69fb      	ldr	r3, [r7, #28]
 800f188:	0a1b      	lsrs	r3, r3, #8
 800f18a:	f003 0301 	and.w	r3, r3, #1
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d008      	beq.n	800f1a4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800f192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f194:	f043 0301 	orr.w	r3, r3, #1
 800f198:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f1a2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800f1a4:	6a3b      	ldr	r3, [r7, #32]
 800f1a6:	0a5b      	lsrs	r3, r3, #9
 800f1a8:	f003 0301 	and.w	r3, r3, #1
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d00e      	beq.n	800f1ce <HAL_I2C_ER_IRQHandler+0x78>
 800f1b0:	69fb      	ldr	r3, [r7, #28]
 800f1b2:	0a1b      	lsrs	r3, r3, #8
 800f1b4:	f003 0301 	and.w	r3, r3, #1
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d008      	beq.n	800f1ce <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800f1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1be:	f043 0302 	orr.w	r3, r3, #2
 800f1c2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800f1cc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800f1ce:	6a3b      	ldr	r3, [r7, #32]
 800f1d0:	0a9b      	lsrs	r3, r3, #10
 800f1d2:	f003 0301 	and.w	r3, r3, #1
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d03f      	beq.n	800f25a <HAL_I2C_ER_IRQHandler+0x104>
 800f1da:	69fb      	ldr	r3, [r7, #28]
 800f1dc:	0a1b      	lsrs	r3, r3, #8
 800f1de:	f003 0301 	and.w	r3, r3, #1
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d039      	beq.n	800f25a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800f1e6:	7efb      	ldrb	r3, [r7, #27]
 800f1e8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f1ee:	b29b      	uxth	r3, r3
 800f1f0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f1f8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1fe:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800f200:	7ebb      	ldrb	r3, [r7, #26]
 800f202:	2b20      	cmp	r3, #32
 800f204:	d112      	bne.n	800f22c <HAL_I2C_ER_IRQHandler+0xd6>
 800f206:	697b      	ldr	r3, [r7, #20]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d10f      	bne.n	800f22c <HAL_I2C_ER_IRQHandler+0xd6>
 800f20c:	7cfb      	ldrb	r3, [r7, #19]
 800f20e:	2b21      	cmp	r3, #33	; 0x21
 800f210:	d008      	beq.n	800f224 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800f212:	7cfb      	ldrb	r3, [r7, #19]
 800f214:	2b29      	cmp	r3, #41	; 0x29
 800f216:	d005      	beq.n	800f224 <HAL_I2C_ER_IRQHandler+0xce>
 800f218:	7cfb      	ldrb	r3, [r7, #19]
 800f21a:	2b28      	cmp	r3, #40	; 0x28
 800f21c:	d106      	bne.n	800f22c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	2b21      	cmp	r3, #33	; 0x21
 800f222:	d103      	bne.n	800f22c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800f224:	6878      	ldr	r0, [r7, #4]
 800f226:	f001 f887 	bl	8010338 <I2C_Slave_AF>
 800f22a:	e016      	b.n	800f25a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800f234:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800f236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f238:	f043 0304 	orr.w	r3, r3, #4
 800f23c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800f23e:	7efb      	ldrb	r3, [r7, #27]
 800f240:	2b10      	cmp	r3, #16
 800f242:	d002      	beq.n	800f24a <HAL_I2C_ER_IRQHandler+0xf4>
 800f244:	7efb      	ldrb	r3, [r7, #27]
 800f246:	2b40      	cmp	r3, #64	; 0x40
 800f248:	d107      	bne.n	800f25a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	681a      	ldr	r2, [r3, #0]
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f258:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800f25a:	6a3b      	ldr	r3, [r7, #32]
 800f25c:	0adb      	lsrs	r3, r3, #11
 800f25e:	f003 0301 	and.w	r3, r3, #1
 800f262:	2b00      	cmp	r3, #0
 800f264:	d00e      	beq.n	800f284 <HAL_I2C_ER_IRQHandler+0x12e>
 800f266:	69fb      	ldr	r3, [r7, #28]
 800f268:	0a1b      	lsrs	r3, r3, #8
 800f26a:	f003 0301 	and.w	r3, r3, #1
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d008      	beq.n	800f284 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800f272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f274:	f043 0308 	orr.w	r3, r3, #8
 800f278:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800f282:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800f284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f286:	2b00      	cmp	r3, #0
 800f288:	d008      	beq.n	800f29c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f290:	431a      	orrs	r2, r3
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800f296:	6878      	ldr	r0, [r7, #4]
 800f298:	f001 f8be 	bl	8010418 <I2C_ITError>
  }
}
 800f29c:	bf00      	nop
 800f29e:	3728      	adds	r7, #40	; 0x28
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	bd80      	pop	{r7, pc}

0800f2a4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f2a4:	b480      	push	{r7}
 800f2a6:	b083      	sub	sp, #12
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800f2ac:	bf00      	nop
 800f2ae:	370c      	adds	r7, #12
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b6:	4770      	bx	lr

0800f2b8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f2b8:	b480      	push	{r7}
 800f2ba:	b083      	sub	sp, #12
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800f2c0:	bf00      	nop
 800f2c2:	370c      	adds	r7, #12
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ca:	4770      	bx	lr

0800f2cc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f2cc:	b480      	push	{r7}
 800f2ce:	b083      	sub	sp, #12
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800f2d4:	bf00      	nop
 800f2d6:	370c      	adds	r7, #12
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2de:	4770      	bx	lr

0800f2e0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f2e0:	b480      	push	{r7}
 800f2e2:	b083      	sub	sp, #12
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800f2e8:	bf00      	nop
 800f2ea:	370c      	adds	r7, #12
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f2:	4770      	bx	lr

0800f2f4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800f2f4:	b480      	push	{r7}
 800f2f6:	b083      	sub	sp, #12
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
 800f2fc:	460b      	mov	r3, r1
 800f2fe:	70fb      	strb	r3, [r7, #3]
 800f300:	4613      	mov	r3, r2
 800f302:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800f304:	bf00      	nop
 800f306:	370c      	adds	r7, #12
 800f308:	46bd      	mov	sp, r7
 800f30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30e:	4770      	bx	lr

0800f310 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f310:	b480      	push	{r7}
 800f312:	b083      	sub	sp, #12
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800f318:	bf00      	nop
 800f31a:	370c      	adds	r7, #12
 800f31c:	46bd      	mov	sp, r7
 800f31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f322:	4770      	bx	lr

0800f324 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f324:	b480      	push	{r7}
 800f326:	b083      	sub	sp, #12
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800f32c:	bf00      	nop
 800f32e:	370c      	adds	r7, #12
 800f330:	46bd      	mov	sp, r7
 800f332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f336:	4770      	bx	lr

0800f338 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f338:	b480      	push	{r7}
 800f33a:	b083      	sub	sp, #12
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800f340:	bf00      	nop
 800f342:	370c      	adds	r7, #12
 800f344:	46bd      	mov	sp, r7
 800f346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34a:	4770      	bx	lr

0800f34c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800f34c:	b480      	push	{r7}
 800f34e:	b083      	sub	sp, #12
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800f354:	bf00      	nop
 800f356:	370c      	adds	r7, #12
 800f358:	46bd      	mov	sp, r7
 800f35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35e:	4770      	bx	lr

0800f360 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f360:	b480      	push	{r7}
 800f362:	b083      	sub	sp, #12
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800f368:	bf00      	nop
 800f36a:	370c      	adds	r7, #12
 800f36c:	46bd      	mov	sp, r7
 800f36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f372:	4770      	bx	lr

0800f374 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800f374:	b480      	push	{r7}
 800f376:	b083      	sub	sp, #12
 800f378:	af00      	add	r7, sp, #0
 800f37a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f382:	b2db      	uxtb	r3, r3
}
 800f384:	4618      	mov	r0, r3
 800f386:	370c      	adds	r7, #12
 800f388:	46bd      	mov	sp, r7
 800f38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38e:	4770      	bx	lr

0800f390 <HAL_I2C_GetMode>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL mode
  */
HAL_I2C_ModeTypeDef HAL_I2C_GetMode(I2C_HandleTypeDef *hi2c)
{
 800f390:	b480      	push	{r7}
 800f392:	b083      	sub	sp, #12
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]
  return hi2c->Mode;
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f39e:	b2db      	uxtb	r3, r3
}
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	370c      	adds	r7, #12
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3aa:	4770      	bx	lr

0800f3ac <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800f3ac:	b480      	push	{r7}
 800f3ae:	b083      	sub	sp, #12
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	370c      	adds	r7, #12
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c2:	4770      	bx	lr

0800f3c4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b084      	sub	sp, #16
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f3d2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f3da:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3e0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d150      	bne.n	800f48c <I2C_MasterTransmit_TXE+0xc8>
 800f3ea:	7bfb      	ldrb	r3, [r7, #15]
 800f3ec:	2b21      	cmp	r3, #33	; 0x21
 800f3ee:	d14d      	bne.n	800f48c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800f3f0:	68bb      	ldr	r3, [r7, #8]
 800f3f2:	2b08      	cmp	r3, #8
 800f3f4:	d01d      	beq.n	800f432 <I2C_MasterTransmit_TXE+0x6e>
 800f3f6:	68bb      	ldr	r3, [r7, #8]
 800f3f8:	2b20      	cmp	r3, #32
 800f3fa:	d01a      	beq.n	800f432 <I2C_MasterTransmit_TXE+0x6e>
 800f3fc:	68bb      	ldr	r3, [r7, #8]
 800f3fe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800f402:	d016      	beq.n	800f432 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	685a      	ldr	r2, [r3, #4]
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f412:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	2211      	movs	r2, #17
 800f418:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	2200      	movs	r2, #0
 800f41e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	2220      	movs	r2, #32
 800f426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800f42a:	6878      	ldr	r0, [r7, #4]
 800f42c:	f7ff ff3a 	bl	800f2a4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800f430:	e060      	b.n	800f4f4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	685a      	ldr	r2, [r3, #4]
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f440:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	681a      	ldr	r2, [r3, #0]
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f450:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	2200      	movs	r2, #0
 800f456:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	2220      	movs	r2, #32
 800f45c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f466:	b2db      	uxtb	r3, r3
 800f468:	2b40      	cmp	r3, #64	; 0x40
 800f46a:	d107      	bne.n	800f47c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	2200      	movs	r2, #0
 800f470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800f474:	6878      	ldr	r0, [r7, #4]
 800f476:	f7ff ff55 	bl	800f324 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800f47a:	e03b      	b.n	800f4f4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	2200      	movs	r2, #0
 800f480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800f484:	6878      	ldr	r0, [r7, #4]
 800f486:	f7ff ff0d 	bl	800f2a4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800f48a:	e033      	b.n	800f4f4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800f48c:	7bfb      	ldrb	r3, [r7, #15]
 800f48e:	2b21      	cmp	r3, #33	; 0x21
 800f490:	d005      	beq.n	800f49e <I2C_MasterTransmit_TXE+0xda>
 800f492:	7bbb      	ldrb	r3, [r7, #14]
 800f494:	2b40      	cmp	r3, #64	; 0x40
 800f496:	d12d      	bne.n	800f4f4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800f498:	7bfb      	ldrb	r3, [r7, #15]
 800f49a:	2b22      	cmp	r3, #34	; 0x22
 800f49c:	d12a      	bne.n	800f4f4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f4a2:	b29b      	uxth	r3, r3
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d108      	bne.n	800f4ba <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	685a      	ldr	r2, [r3, #4]
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f4b6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800f4b8:	e01c      	b.n	800f4f4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f4c0:	b2db      	uxtb	r3, r3
 800f4c2:	2b40      	cmp	r3, #64	; 0x40
 800f4c4:	d103      	bne.n	800f4ce <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800f4c6:	6878      	ldr	r0, [r7, #4]
 800f4c8:	f000 f88e 	bl	800f5e8 <I2C_MemoryTransmit_TXE_BTF>
}
 800f4cc:	e012      	b.n	800f4f4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4d2:	781a      	ldrb	r2, [r3, #0]
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4de:	1c5a      	adds	r2, r3, #1
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f4e8:	b29b      	uxth	r3, r3
 800f4ea:	3b01      	subs	r3, #1
 800f4ec:	b29a      	uxth	r2, r3
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800f4f2:	e7ff      	b.n	800f4f4 <I2C_MasterTransmit_TXE+0x130>
 800f4f4:	bf00      	nop
 800f4f6:	3710      	adds	r7, #16
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	bd80      	pop	{r7, pc}

0800f4fc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b084      	sub	sp, #16
 800f500:	af00      	add	r7, sp, #0
 800f502:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f508:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f510:	b2db      	uxtb	r3, r3
 800f512:	2b21      	cmp	r3, #33	; 0x21
 800f514:	d164      	bne.n	800f5e0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f51a:	b29b      	uxth	r3, r3
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d012      	beq.n	800f546 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f524:	781a      	ldrb	r2, [r3, #0]
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f530:	1c5a      	adds	r2, r3, #1
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f53a:	b29b      	uxth	r3, r3
 800f53c:	3b01      	subs	r3, #1
 800f53e:	b29a      	uxth	r2, r3
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800f544:	e04c      	b.n	800f5e0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	2b08      	cmp	r3, #8
 800f54a:	d01d      	beq.n	800f588 <I2C_MasterTransmit_BTF+0x8c>
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	2b20      	cmp	r3, #32
 800f550:	d01a      	beq.n	800f588 <I2C_MasterTransmit_BTF+0x8c>
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800f558:	d016      	beq.n	800f588 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	685a      	ldr	r2, [r3, #4]
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f568:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	2211      	movs	r2, #17
 800f56e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	2200      	movs	r2, #0
 800f574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	2220      	movs	r2, #32
 800f57c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800f580:	6878      	ldr	r0, [r7, #4]
 800f582:	f7ff fe8f 	bl	800f2a4 <HAL_I2C_MasterTxCpltCallback>
}
 800f586:	e02b      	b.n	800f5e0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	685a      	ldr	r2, [r3, #4]
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f596:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	681a      	ldr	r2, [r3, #0]
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f5a6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	2220      	movs	r2, #32
 800f5b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f5bc:	b2db      	uxtb	r3, r3
 800f5be:	2b40      	cmp	r3, #64	; 0x40
 800f5c0:	d107      	bne.n	800f5d2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800f5ca:	6878      	ldr	r0, [r7, #4]
 800f5cc:	f7ff feaa 	bl	800f324 <HAL_I2C_MemTxCpltCallback>
}
 800f5d0:	e006      	b.n	800f5e0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	2200      	movs	r2, #0
 800f5d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800f5da:	6878      	ldr	r0, [r7, #4]
 800f5dc:	f7ff fe62 	bl	800f2a4 <HAL_I2C_MasterTxCpltCallback>
}
 800f5e0:	bf00      	nop
 800f5e2:	3710      	adds	r7, #16
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	bd80      	pop	{r7, pc}

0800f5e8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800f5e8:	b580      	push	{r7, lr}
 800f5ea:	b084      	sub	sp, #16
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f5f6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d11d      	bne.n	800f63c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f604:	2b01      	cmp	r3, #1
 800f606:	d10b      	bne.n	800f620 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f60c:	b2da      	uxtb	r2, r3
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f618:	1c9a      	adds	r2, r3, #2
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800f61e:	e073      	b.n	800f708 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f624:	b29b      	uxth	r3, r3
 800f626:	121b      	asrs	r3, r3, #8
 800f628:	b2da      	uxtb	r2, r3
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f634:	1c5a      	adds	r2, r3, #1
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	651a      	str	r2, [r3, #80]	; 0x50
}
 800f63a:	e065      	b.n	800f708 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f640:	2b01      	cmp	r3, #1
 800f642:	d10b      	bne.n	800f65c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f648:	b2da      	uxtb	r2, r3
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f654:	1c5a      	adds	r2, r3, #1
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	651a      	str	r2, [r3, #80]	; 0x50
}
 800f65a:	e055      	b.n	800f708 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f660:	2b02      	cmp	r3, #2
 800f662:	d151      	bne.n	800f708 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800f664:	7bfb      	ldrb	r3, [r7, #15]
 800f666:	2b22      	cmp	r3, #34	; 0x22
 800f668:	d10d      	bne.n	800f686 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	681a      	ldr	r2, [r3, #0]
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f678:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f67e:	1c5a      	adds	r2, r3, #1
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	651a      	str	r2, [r3, #80]	; 0x50
}
 800f684:	e040      	b.n	800f708 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f68a:	b29b      	uxth	r3, r3
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d015      	beq.n	800f6bc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800f690:	7bfb      	ldrb	r3, [r7, #15]
 800f692:	2b21      	cmp	r3, #33	; 0x21
 800f694:	d112      	bne.n	800f6bc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f69a:	781a      	ldrb	r2, [r3, #0]
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6a6:	1c5a      	adds	r2, r3, #1
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f6b0:	b29b      	uxth	r3, r3
 800f6b2:	3b01      	subs	r3, #1
 800f6b4:	b29a      	uxth	r2, r3
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800f6ba:	e025      	b.n	800f708 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f6c0:	b29b      	uxth	r3, r3
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d120      	bne.n	800f708 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800f6c6:	7bfb      	ldrb	r3, [r7, #15]
 800f6c8:	2b21      	cmp	r3, #33	; 0x21
 800f6ca:	d11d      	bne.n	800f708 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	685a      	ldr	r2, [r3, #4]
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f6da:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	681a      	ldr	r2, [r3, #0]
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f6ea:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	2200      	movs	r2, #0
 800f6f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	2220      	movs	r2, #32
 800f6f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800f702:	6878      	ldr	r0, [r7, #4]
 800f704:	f7ff fe0e 	bl	800f324 <HAL_I2C_MemTxCpltCallback>
}
 800f708:	bf00      	nop
 800f70a:	3710      	adds	r7, #16
 800f70c:	46bd      	mov	sp, r7
 800f70e:	bd80      	pop	{r7, pc}

0800f710 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800f710:	b580      	push	{r7, lr}
 800f712:	b084      	sub	sp, #16
 800f714:	af00      	add	r7, sp, #0
 800f716:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f71e:	b2db      	uxtb	r3, r3
 800f720:	2b22      	cmp	r3, #34	; 0x22
 800f722:	f040 80a2 	bne.w	800f86a <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f72a:	b29b      	uxth	r3, r3
 800f72c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	2b03      	cmp	r3, #3
 800f732:	d921      	bls.n	800f778 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	691a      	ldr	r2, [r3, #16]
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f73e:	b2d2      	uxtb	r2, r2
 800f740:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f746:	1c5a      	adds	r2, r3, #1
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f750:	b29b      	uxth	r3, r3
 800f752:	3b01      	subs	r3, #1
 800f754:	b29a      	uxth	r2, r3
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f75e:	b29b      	uxth	r3, r3
 800f760:	2b03      	cmp	r3, #3
 800f762:	f040 8082 	bne.w	800f86a <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	685a      	ldr	r2, [r3, #4]
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f774:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800f776:	e078      	b.n	800f86a <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f77c:	2b02      	cmp	r3, #2
 800f77e:	d074      	beq.n	800f86a <I2C_MasterReceive_RXNE+0x15a>
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	2b01      	cmp	r3, #1
 800f784:	d002      	beq.n	800f78c <I2C_MasterReceive_RXNE+0x7c>
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d16e      	bne.n	800f86a <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800f78c:	6878      	ldr	r0, [r7, #4]
 800f78e:	f001 fd92 	bl	80112b6 <I2C_WaitOnSTOPRequestThroughIT>
 800f792:	4603      	mov	r3, r0
 800f794:	2b00      	cmp	r3, #0
 800f796:	d142      	bne.n	800f81e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	681a      	ldr	r2, [r3, #0]
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f7a6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	685a      	ldr	r2, [r3, #4]
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f7b6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	691a      	ldr	r2, [r3, #16]
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7c2:	b2d2      	uxtb	r2, r2
 800f7c4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7ca:	1c5a      	adds	r2, r3, #1
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f7d4:	b29b      	uxth	r3, r3
 800f7d6:	3b01      	subs	r3, #1
 800f7d8:	b29a      	uxth	r2, r3
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	2220      	movs	r2, #32
 800f7e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f7ec:	b2db      	uxtb	r3, r3
 800f7ee:	2b40      	cmp	r3, #64	; 0x40
 800f7f0:	d10a      	bne.n	800f808 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	2200      	movs	r2, #0
 800f7f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	2200      	movs	r2, #0
 800f7fe:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800f800:	6878      	ldr	r0, [r7, #4]
 800f802:	f7ff fd99 	bl	800f338 <HAL_I2C_MemRxCpltCallback>
}
 800f806:	e030      	b.n	800f86a <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	2200      	movs	r2, #0
 800f80c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	2212      	movs	r2, #18
 800f814:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800f816:	6878      	ldr	r0, [r7, #4]
 800f818:	f7ff fd4e 	bl	800f2b8 <HAL_I2C_MasterRxCpltCallback>
}
 800f81c:	e025      	b.n	800f86a <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	685a      	ldr	r2, [r3, #4]
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f82c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	691a      	ldr	r2, [r3, #16]
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f838:	b2d2      	uxtb	r2, r2
 800f83a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f840:	1c5a      	adds	r2, r3, #1
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f84a:	b29b      	uxth	r3, r3
 800f84c:	3b01      	subs	r3, #1
 800f84e:	b29a      	uxth	r2, r3
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	2220      	movs	r2, #32
 800f858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	2200      	movs	r2, #0
 800f860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800f864:	6878      	ldr	r0, [r7, #4]
 800f866:	f7ff fd71 	bl	800f34c <HAL_I2C_ErrorCallback>
}
 800f86a:	bf00      	nop
 800f86c:	3710      	adds	r7, #16
 800f86e:	46bd      	mov	sp, r7
 800f870:	bd80      	pop	{r7, pc}

0800f872 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800f872:	b580      	push	{r7, lr}
 800f874:	b084      	sub	sp, #16
 800f876:	af00      	add	r7, sp, #0
 800f878:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f87e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f884:	b29b      	uxth	r3, r3
 800f886:	2b04      	cmp	r3, #4
 800f888:	d11b      	bne.n	800f8c2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	685a      	ldr	r2, [r3, #4]
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f898:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	691a      	ldr	r2, [r3, #16]
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8a4:	b2d2      	uxtb	r2, r2
 800f8a6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8ac:	1c5a      	adds	r2, r3, #1
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f8b6:	b29b      	uxth	r3, r3
 800f8b8:	3b01      	subs	r3, #1
 800f8ba:	b29a      	uxth	r2, r3
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800f8c0:	e0bd      	b.n	800fa3e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f8c6:	b29b      	uxth	r3, r3
 800f8c8:	2b03      	cmp	r3, #3
 800f8ca:	d129      	bne.n	800f920 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	685a      	ldr	r2, [r3, #4]
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f8da:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	2b04      	cmp	r3, #4
 800f8e0:	d00a      	beq.n	800f8f8 <I2C_MasterReceive_BTF+0x86>
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	2b02      	cmp	r3, #2
 800f8e6:	d007      	beq.n	800f8f8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	681a      	ldr	r2, [r3, #0]
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f8f6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	691a      	ldr	r2, [r3, #16]
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f902:	b2d2      	uxtb	r2, r2
 800f904:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f90a:	1c5a      	adds	r2, r3, #1
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f914:	b29b      	uxth	r3, r3
 800f916:	3b01      	subs	r3, #1
 800f918:	b29a      	uxth	r2, r3
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800f91e:	e08e      	b.n	800fa3e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f924:	b29b      	uxth	r3, r3
 800f926:	2b02      	cmp	r3, #2
 800f928:	d176      	bne.n	800fa18 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	2b01      	cmp	r3, #1
 800f92e:	d002      	beq.n	800f936 <I2C_MasterReceive_BTF+0xc4>
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	2b10      	cmp	r3, #16
 800f934:	d108      	bne.n	800f948 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	681a      	ldr	r2, [r3, #0]
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f944:	601a      	str	r2, [r3, #0]
 800f946:	e019      	b.n	800f97c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	2b04      	cmp	r3, #4
 800f94c:	d002      	beq.n	800f954 <I2C_MasterReceive_BTF+0xe2>
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	2b02      	cmp	r3, #2
 800f952:	d108      	bne.n	800f966 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	681a      	ldr	r2, [r3, #0]
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f962:	601a      	str	r2, [r3, #0]
 800f964:	e00a      	b.n	800f97c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	2b10      	cmp	r3, #16
 800f96a:	d007      	beq.n	800f97c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	681a      	ldr	r2, [r3, #0]
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f97a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	691a      	ldr	r2, [r3, #16]
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f986:	b2d2      	uxtb	r2, r2
 800f988:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f98e:	1c5a      	adds	r2, r3, #1
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f998:	b29b      	uxth	r3, r3
 800f99a:	3b01      	subs	r3, #1
 800f99c:	b29a      	uxth	r2, r3
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	691a      	ldr	r2, [r3, #16]
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9ac:	b2d2      	uxtb	r2, r2
 800f9ae:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9b4:	1c5a      	adds	r2, r3, #1
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f9be:	b29b      	uxth	r3, r3
 800f9c0:	3b01      	subs	r3, #1
 800f9c2:	b29a      	uxth	r2, r3
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	685a      	ldr	r2, [r3, #4]
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800f9d6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	2220      	movs	r2, #32
 800f9dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f9e6:	b2db      	uxtb	r3, r3
 800f9e8:	2b40      	cmp	r3, #64	; 0x40
 800f9ea:	d10a      	bne.n	800fa02 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	2200      	movs	r2, #0
 800f9f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	2200      	movs	r2, #0
 800f9f8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800f9fa:	6878      	ldr	r0, [r7, #4]
 800f9fc:	f7ff fc9c 	bl	800f338 <HAL_I2C_MemRxCpltCallback>
}
 800fa00:	e01d      	b.n	800fa3e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	2200      	movs	r2, #0
 800fa06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	2212      	movs	r2, #18
 800fa0e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800fa10:	6878      	ldr	r0, [r7, #4]
 800fa12:	f7ff fc51 	bl	800f2b8 <HAL_I2C_MasterRxCpltCallback>
}
 800fa16:	e012      	b.n	800fa3e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	691a      	ldr	r2, [r3, #16]
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa22:	b2d2      	uxtb	r2, r2
 800fa24:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa2a:	1c5a      	adds	r2, r3, #1
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fa34:	b29b      	uxth	r3, r3
 800fa36:	3b01      	subs	r3, #1
 800fa38:	b29a      	uxth	r2, r3
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800fa3e:	bf00      	nop
 800fa40:	3710      	adds	r7, #16
 800fa42:	46bd      	mov	sp, r7
 800fa44:	bd80      	pop	{r7, pc}

0800fa46 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800fa46:	b480      	push	{r7}
 800fa48:	b083      	sub	sp, #12
 800fa4a:	af00      	add	r7, sp, #0
 800fa4c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fa54:	b2db      	uxtb	r3, r3
 800fa56:	2b40      	cmp	r3, #64	; 0x40
 800fa58:	d117      	bne.n	800fa8a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d109      	bne.n	800fa76 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa66:	b2db      	uxtb	r3, r3
 800fa68:	461a      	mov	r2, r3
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800fa72:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800fa74:	e067      	b.n	800fb46 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa7a:	b2db      	uxtb	r3, r3
 800fa7c:	f043 0301 	orr.w	r3, r3, #1
 800fa80:	b2da      	uxtb	r2, r3
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	611a      	str	r2, [r3, #16]
}
 800fa88:	e05d      	b.n	800fb46 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	691b      	ldr	r3, [r3, #16]
 800fa8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fa92:	d133      	bne.n	800fafc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fa9a:	b2db      	uxtb	r3, r3
 800fa9c:	2b21      	cmp	r3, #33	; 0x21
 800fa9e:	d109      	bne.n	800fab4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800faa4:	b2db      	uxtb	r3, r3
 800faa6:	461a      	mov	r2, r3
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800fab0:	611a      	str	r2, [r3, #16]
 800fab2:	e008      	b.n	800fac6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fab8:	b2db      	uxtb	r3, r3
 800faba:	f043 0301 	orr.w	r3, r3, #1
 800fabe:	b2da      	uxtb	r2, r3
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800faca:	2b00      	cmp	r3, #0
 800facc:	d004      	beq.n	800fad8 <I2C_Master_SB+0x92>
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d108      	bne.n	800faea <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d032      	beq.n	800fb46 <I2C_Master_SB+0x100>
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d02d      	beq.n	800fb46 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	685a      	ldr	r2, [r3, #4]
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800faf8:	605a      	str	r2, [r3, #4]
}
 800fafa:	e024      	b.n	800fb46 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d10e      	bne.n	800fb22 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb08:	b29b      	uxth	r3, r3
 800fb0a:	11db      	asrs	r3, r3, #7
 800fb0c:	b2db      	uxtb	r3, r3
 800fb0e:	f003 0306 	and.w	r3, r3, #6
 800fb12:	b2db      	uxtb	r3, r3
 800fb14:	f063 030f 	orn	r3, r3, #15
 800fb18:	b2da      	uxtb	r2, r3
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	611a      	str	r2, [r3, #16]
}
 800fb20:	e011      	b.n	800fb46 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb26:	2b01      	cmp	r3, #1
 800fb28:	d10d      	bne.n	800fb46 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb2e:	b29b      	uxth	r3, r3
 800fb30:	11db      	asrs	r3, r3, #7
 800fb32:	b2db      	uxtb	r3, r3
 800fb34:	f003 0306 	and.w	r3, r3, #6
 800fb38:	b2db      	uxtb	r3, r3
 800fb3a:	f063 030e 	orn	r3, r3, #14
 800fb3e:	b2da      	uxtb	r2, r3
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	611a      	str	r2, [r3, #16]
}
 800fb46:	bf00      	nop
 800fb48:	370c      	adds	r7, #12
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb50:	4770      	bx	lr

0800fb52 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800fb52:	b480      	push	{r7}
 800fb54:	b083      	sub	sp, #12
 800fb56:	af00      	add	r7, sp, #0
 800fb58:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb5e:	b2da      	uxtb	r2, r3
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d004      	beq.n	800fb78 <I2C_Master_ADD10+0x26>
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d108      	bne.n	800fb8a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d00c      	beq.n	800fb9a <I2C_Master_ADD10+0x48>
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d007      	beq.n	800fb9a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	685a      	ldr	r2, [r3, #4]
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fb98:	605a      	str	r2, [r3, #4]
  }
}
 800fb9a:	bf00      	nop
 800fb9c:	370c      	adds	r7, #12
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba4:	4770      	bx	lr

0800fba6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800fba6:	b480      	push	{r7}
 800fba8:	b091      	sub	sp, #68	; 0x44
 800fbaa:	af00      	add	r7, sp, #0
 800fbac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fbb4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbbc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbc2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fbca:	b2db      	uxtb	r3, r3
 800fbcc:	2b22      	cmp	r3, #34	; 0x22
 800fbce:	f040 8169 	bne.w	800fea4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d10f      	bne.n	800fbfa <I2C_Master_ADDR+0x54>
 800fbda:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fbde:	2b40      	cmp	r3, #64	; 0x40
 800fbe0:	d10b      	bne.n	800fbfa <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	60fb      	str	r3, [r7, #12]
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	695b      	ldr	r3, [r3, #20]
 800fbec:	60fb      	str	r3, [r7, #12]
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	699b      	ldr	r3, [r3, #24]
 800fbf4:	60fb      	str	r3, [r7, #12]
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	e160      	b.n	800febc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d11d      	bne.n	800fc3e <I2C_Master_ADDR+0x98>
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	691b      	ldr	r3, [r3, #16]
 800fc06:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800fc0a:	d118      	bne.n	800fc3e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	613b      	str	r3, [r7, #16]
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	695b      	ldr	r3, [r3, #20]
 800fc16:	613b      	str	r3, [r7, #16]
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	699b      	ldr	r3, [r3, #24]
 800fc1e:	613b      	str	r3, [r7, #16]
 800fc20:	693b      	ldr	r3, [r7, #16]

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	681a      	ldr	r2, [r3, #0]
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fc30:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc36:	1c5a      	adds	r2, r3, #1
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	651a      	str	r2, [r3, #80]	; 0x50
 800fc3c:	e13e      	b.n	800febc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fc42:	b29b      	uxth	r3, r3
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d113      	bne.n	800fc70 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fc48:	2300      	movs	r3, #0
 800fc4a:	617b      	str	r3, [r7, #20]
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	695b      	ldr	r3, [r3, #20]
 800fc52:	617b      	str	r3, [r7, #20]
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	699b      	ldr	r3, [r3, #24]
 800fc5a:	617b      	str	r3, [r7, #20]
 800fc5c:	697b      	ldr	r3, [r7, #20]

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	681a      	ldr	r2, [r3, #0]
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fc6c:	601a      	str	r2, [r3, #0]
 800fc6e:	e115      	b.n	800fe9c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fc74:	b29b      	uxth	r3, r3
 800fc76:	2b01      	cmp	r3, #1
 800fc78:	f040 808a 	bne.w	800fd90 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800fc7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc7e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800fc82:	d137      	bne.n	800fcf4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	681a      	ldr	r2, [r3, #0]
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fc92:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	685b      	ldr	r3, [r3, #4]
 800fc9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fc9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fca2:	d113      	bne.n	800fccc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	681a      	ldr	r2, [r3, #0]
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fcb2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	61bb      	str	r3, [r7, #24]
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	695b      	ldr	r3, [r3, #20]
 800fcbe:	61bb      	str	r3, [r7, #24]
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	699b      	ldr	r3, [r3, #24]
 800fcc6:	61bb      	str	r3, [r7, #24]
 800fcc8:	69bb      	ldr	r3, [r7, #24]
 800fcca:	e0e7      	b.n	800fe9c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fccc:	2300      	movs	r3, #0
 800fcce:	61fb      	str	r3, [r7, #28]
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	695b      	ldr	r3, [r3, #20]
 800fcd6:	61fb      	str	r3, [r7, #28]
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	699b      	ldr	r3, [r3, #24]
 800fcde:	61fb      	str	r3, [r7, #28]
 800fce0:	69fb      	ldr	r3, [r7, #28]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	681a      	ldr	r2, [r3, #0]
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fcf0:	601a      	str	r2, [r3, #0]
 800fcf2:	e0d3      	b.n	800fe9c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800fcf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcf6:	2b08      	cmp	r3, #8
 800fcf8:	d02e      	beq.n	800fd58 <I2C_Master_ADDR+0x1b2>
 800fcfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcfc:	2b20      	cmp	r3, #32
 800fcfe:	d02b      	beq.n	800fd58 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800fd00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd02:	2b12      	cmp	r3, #18
 800fd04:	d102      	bne.n	800fd0c <I2C_Master_ADDR+0x166>
 800fd06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd08:	2b01      	cmp	r3, #1
 800fd0a:	d125      	bne.n	800fd58 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800fd0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd0e:	2b04      	cmp	r3, #4
 800fd10:	d00e      	beq.n	800fd30 <I2C_Master_ADDR+0x18a>
 800fd12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd14:	2b02      	cmp	r3, #2
 800fd16:	d00b      	beq.n	800fd30 <I2C_Master_ADDR+0x18a>
 800fd18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd1a:	2b10      	cmp	r3, #16
 800fd1c:	d008      	beq.n	800fd30 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	681a      	ldr	r2, [r3, #0]
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fd2c:	601a      	str	r2, [r3, #0]
 800fd2e:	e007      	b.n	800fd40 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	681a      	ldr	r2, [r3, #0]
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fd3e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fd40:	2300      	movs	r3, #0
 800fd42:	623b      	str	r3, [r7, #32]
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	695b      	ldr	r3, [r3, #20]
 800fd4a:	623b      	str	r3, [r7, #32]
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	699b      	ldr	r3, [r3, #24]
 800fd52:	623b      	str	r3, [r7, #32]
 800fd54:	6a3b      	ldr	r3, [r7, #32]
 800fd56:	e0a1      	b.n	800fe9c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	681a      	ldr	r2, [r3, #0]
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fd66:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fd68:	2300      	movs	r3, #0
 800fd6a:	627b      	str	r3, [r7, #36]	; 0x24
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	695b      	ldr	r3, [r3, #20]
 800fd72:	627b      	str	r3, [r7, #36]	; 0x24
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	699b      	ldr	r3, [r3, #24]
 800fd7a:	627b      	str	r3, [r7, #36]	; 0x24
 800fd7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	681a      	ldr	r2, [r3, #0]
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fd8c:	601a      	str	r2, [r3, #0]
 800fd8e:	e085      	b.n	800fe9c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fd94:	b29b      	uxth	r3, r3
 800fd96:	2b02      	cmp	r3, #2
 800fd98:	d14d      	bne.n	800fe36 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800fd9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd9c:	2b04      	cmp	r3, #4
 800fd9e:	d016      	beq.n	800fdce <I2C_Master_ADDR+0x228>
 800fda0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fda2:	2b02      	cmp	r3, #2
 800fda4:	d013      	beq.n	800fdce <I2C_Master_ADDR+0x228>
 800fda6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fda8:	2b10      	cmp	r3, #16
 800fdaa:	d010      	beq.n	800fdce <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	681a      	ldr	r2, [r3, #0]
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fdba:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	681a      	ldr	r2, [r3, #0]
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fdca:	601a      	str	r2, [r3, #0]
 800fdcc:	e007      	b.n	800fdde <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	681a      	ldr	r2, [r3, #0]
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fddc:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	685b      	ldr	r3, [r3, #4]
 800fde4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fde8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fdec:	d117      	bne.n	800fe1e <I2C_Master_ADDR+0x278>
 800fdee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdf0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800fdf4:	d00b      	beq.n	800fe0e <I2C_Master_ADDR+0x268>
 800fdf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdf8:	2b01      	cmp	r3, #1
 800fdfa:	d008      	beq.n	800fe0e <I2C_Master_ADDR+0x268>
 800fdfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdfe:	2b08      	cmp	r3, #8
 800fe00:	d005      	beq.n	800fe0e <I2C_Master_ADDR+0x268>
 800fe02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe04:	2b10      	cmp	r3, #16
 800fe06:	d002      	beq.n	800fe0e <I2C_Master_ADDR+0x268>
 800fe08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe0a:	2b20      	cmp	r3, #32
 800fe0c:	d107      	bne.n	800fe1e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	685a      	ldr	r2, [r3, #4]
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800fe1c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fe1e:	2300      	movs	r3, #0
 800fe20:	62bb      	str	r3, [r7, #40]	; 0x28
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	695b      	ldr	r3, [r3, #20]
 800fe28:	62bb      	str	r3, [r7, #40]	; 0x28
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	699b      	ldr	r3, [r3, #24]
 800fe30:	62bb      	str	r3, [r7, #40]	; 0x28
 800fe32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe34:	e032      	b.n	800fe9c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	681a      	ldr	r2, [r3, #0]
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fe44:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	685b      	ldr	r3, [r3, #4]
 800fe4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fe50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fe54:	d117      	bne.n	800fe86 <I2C_Master_ADDR+0x2e0>
 800fe56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800fe5c:	d00b      	beq.n	800fe76 <I2C_Master_ADDR+0x2d0>
 800fe5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe60:	2b01      	cmp	r3, #1
 800fe62:	d008      	beq.n	800fe76 <I2C_Master_ADDR+0x2d0>
 800fe64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe66:	2b08      	cmp	r3, #8
 800fe68:	d005      	beq.n	800fe76 <I2C_Master_ADDR+0x2d0>
 800fe6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe6c:	2b10      	cmp	r3, #16
 800fe6e:	d002      	beq.n	800fe76 <I2C_Master_ADDR+0x2d0>
 800fe70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe72:	2b20      	cmp	r3, #32
 800fe74:	d107      	bne.n	800fe86 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	685a      	ldr	r2, [r3, #4]
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800fe84:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fe86:	2300      	movs	r3, #0
 800fe88:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	695b      	ldr	r3, [r3, #20]
 800fe90:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	699b      	ldr	r3, [r3, #24]
 800fe98:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	2200      	movs	r2, #0
 800fea0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800fea2:	e00b      	b.n	800febc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fea4:	2300      	movs	r3, #0
 800fea6:	633b      	str	r3, [r7, #48]	; 0x30
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	695b      	ldr	r3, [r3, #20]
 800feae:	633b      	str	r3, [r7, #48]	; 0x30
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	699b      	ldr	r3, [r3, #24]
 800feb6:	633b      	str	r3, [r7, #48]	; 0x30
 800feb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800feba:	e7ff      	b.n	800febc <I2C_Master_ADDR+0x316>
 800febc:	bf00      	nop
 800febe:	3744      	adds	r7, #68	; 0x44
 800fec0:	46bd      	mov	sp, r7
 800fec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec6:	4770      	bx	lr

0800fec8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b084      	sub	sp, #16
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fed6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fedc:	b29b      	uxth	r3, r3
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d02b      	beq.n	800ff3a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fee6:	781a      	ldrb	r2, [r3, #0]
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fef2:	1c5a      	adds	r2, r3, #1
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fefc:	b29b      	uxth	r3, r3
 800fefe:	3b01      	subs	r3, #1
 800ff00:	b29a      	uxth	r2, r3
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ff0a:	b29b      	uxth	r3, r3
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d114      	bne.n	800ff3a <I2C_SlaveTransmit_TXE+0x72>
 800ff10:	7bfb      	ldrb	r3, [r7, #15]
 800ff12:	2b29      	cmp	r3, #41	; 0x29
 800ff14:	d111      	bne.n	800ff3a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	685a      	ldr	r2, [r3, #4]
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ff24:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	2221      	movs	r2, #33	; 0x21
 800ff2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	2228      	movs	r2, #40	; 0x28
 800ff30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800ff34:	6878      	ldr	r0, [r7, #4]
 800ff36:	f7ff f9c9 	bl	800f2cc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800ff3a:	bf00      	nop
 800ff3c:	3710      	adds	r7, #16
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	bd80      	pop	{r7, pc}

0800ff42 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800ff42:	b480      	push	{r7}
 800ff44:	b083      	sub	sp, #12
 800ff46:	af00      	add	r7, sp, #0
 800ff48:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ff4e:	b29b      	uxth	r3, r3
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d011      	beq.n	800ff78 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff58:	781a      	ldrb	r2, [r3, #0]
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff64:	1c5a      	adds	r2, r3, #1
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ff6e:	b29b      	uxth	r3, r3
 800ff70:	3b01      	subs	r3, #1
 800ff72:	b29a      	uxth	r2, r3
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800ff78:	bf00      	nop
 800ff7a:	370c      	adds	r7, #12
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff82:	4770      	bx	lr

0800ff84 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800ff84:	b580      	push	{r7, lr}
 800ff86:	b084      	sub	sp, #16
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ff92:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ff98:	b29b      	uxth	r3, r3
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d02c      	beq.n	800fff8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	691a      	ldr	r2, [r3, #16]
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffa8:	b2d2      	uxtb	r2, r2
 800ffaa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffb0:	1c5a      	adds	r2, r3, #1
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ffba:	b29b      	uxth	r3, r3
 800ffbc:	3b01      	subs	r3, #1
 800ffbe:	b29a      	uxth	r2, r3
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ffc8:	b29b      	uxth	r3, r3
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d114      	bne.n	800fff8 <I2C_SlaveReceive_RXNE+0x74>
 800ffce:	7bfb      	ldrb	r3, [r7, #15]
 800ffd0:	2b2a      	cmp	r3, #42	; 0x2a
 800ffd2:	d111      	bne.n	800fff8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	685a      	ldr	r2, [r3, #4]
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ffe2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	2222      	movs	r2, #34	; 0x22
 800ffe8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	2228      	movs	r2, #40	; 0x28
 800ffee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800fff2:	6878      	ldr	r0, [r7, #4]
 800fff4:	f7ff f974 	bl	800f2e0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800fff8:	bf00      	nop
 800fffa:	3710      	adds	r7, #16
 800fffc:	46bd      	mov	sp, r7
 800fffe:	bd80      	pop	{r7, pc}

08010000 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8010000:	b480      	push	{r7}
 8010002:	b083      	sub	sp, #12
 8010004:	af00      	add	r7, sp, #0
 8010006:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801000c:	b29b      	uxth	r3, r3
 801000e:	2b00      	cmp	r3, #0
 8010010:	d012      	beq.n	8010038 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	691a      	ldr	r2, [r3, #16]
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801001c:	b2d2      	uxtb	r2, r2
 801001e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010024:	1c5a      	adds	r2, r3, #1
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801002e:	b29b      	uxth	r3, r3
 8010030:	3b01      	subs	r3, #1
 8010032:	b29a      	uxth	r2, r3
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8010038:	bf00      	nop
 801003a:	370c      	adds	r7, #12
 801003c:	46bd      	mov	sp, r7
 801003e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010042:	4770      	bx	lr

08010044 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8010044:	b580      	push	{r7, lr}
 8010046:	b084      	sub	sp, #16
 8010048:	af00      	add	r7, sp, #0
 801004a:	6078      	str	r0, [r7, #4]
 801004c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 801004e:	2300      	movs	r3, #0
 8010050:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010058:	b2db      	uxtb	r3, r3
 801005a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801005e:	2b28      	cmp	r3, #40	; 0x28
 8010060:	d127      	bne.n	80100b2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	685a      	ldr	r2, [r3, #4]
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010070:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8010072:	683b      	ldr	r3, [r7, #0]
 8010074:	089b      	lsrs	r3, r3, #2
 8010076:	f003 0301 	and.w	r3, r3, #1
 801007a:	2b00      	cmp	r3, #0
 801007c:	d101      	bne.n	8010082 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 801007e:	2301      	movs	r3, #1
 8010080:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8010082:	683b      	ldr	r3, [r7, #0]
 8010084:	09db      	lsrs	r3, r3, #7
 8010086:	f003 0301 	and.w	r3, r3, #1
 801008a:	2b00      	cmp	r3, #0
 801008c:	d103      	bne.n	8010096 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	68db      	ldr	r3, [r3, #12]
 8010092:	81bb      	strh	r3, [r7, #12]
 8010094:	e002      	b.n	801009c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	699b      	ldr	r3, [r3, #24]
 801009a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	2200      	movs	r2, #0
 80100a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80100a4:	89ba      	ldrh	r2, [r7, #12]
 80100a6:	7bfb      	ldrb	r3, [r7, #15]
 80100a8:	4619      	mov	r1, r3
 80100aa:	6878      	ldr	r0, [r7, #4]
 80100ac:	f7ff f922 	bl	800f2f4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80100b0:	e00e      	b.n	80100d0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80100b2:	2300      	movs	r3, #0
 80100b4:	60bb      	str	r3, [r7, #8]
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	695b      	ldr	r3, [r3, #20]
 80100bc:	60bb      	str	r3, [r7, #8]
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	699b      	ldr	r3, [r3, #24]
 80100c4:	60bb      	str	r3, [r7, #8]
 80100c6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	2200      	movs	r2, #0
 80100cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80100d0:	bf00      	nop
 80100d2:	3710      	adds	r7, #16
 80100d4:	46bd      	mov	sp, r7
 80100d6:	bd80      	pop	{r7, pc}

080100d8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b084      	sub	sp, #16
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80100e6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	685a      	ldr	r2, [r3, #4]
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80100f6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80100f8:	2300      	movs	r3, #0
 80100fa:	60bb      	str	r3, [r7, #8]
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	695b      	ldr	r3, [r3, #20]
 8010102:	60bb      	str	r3, [r7, #8]
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	681a      	ldr	r2, [r3, #0]
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	f042 0201 	orr.w	r2, r2, #1
 8010112:	601a      	str	r2, [r3, #0]
 8010114:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	681a      	ldr	r2, [r3, #0]
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010124:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	685b      	ldr	r3, [r3, #4]
 801012c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010130:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010134:	d172      	bne.n	801021c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8010136:	7bfb      	ldrb	r3, [r7, #15]
 8010138:	2b22      	cmp	r3, #34	; 0x22
 801013a:	d002      	beq.n	8010142 <I2C_Slave_STOPF+0x6a>
 801013c:	7bfb      	ldrb	r3, [r7, #15]
 801013e:	2b2a      	cmp	r3, #42	; 0x2a
 8010140:	d135      	bne.n	80101ae <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	685b      	ldr	r3, [r3, #4]
 801014a:	b29a      	uxth	r2, r3
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010154:	b29b      	uxth	r3, r3
 8010156:	2b00      	cmp	r3, #0
 8010158:	d005      	beq.n	8010166 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801015e:	f043 0204 	orr.w	r2, r3, #4
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	685a      	ldr	r2, [r3, #4]
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010174:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801017a:	4618      	mov	r0, r3
 801017c:	f7f8 f9c1 	bl	8008502 <HAL_DMA_GetState>
 8010180:	4603      	mov	r3, r0
 8010182:	2b01      	cmp	r3, #1
 8010184:	d049      	beq.n	801021a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801018a:	4a69      	ldr	r2, [pc, #420]	; (8010330 <I2C_Slave_STOPF+0x258>)
 801018c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010192:	4618      	mov	r0, r3
 8010194:	f7f7 fe6f 	bl	8007e76 <HAL_DMA_Abort_IT>
 8010198:	4603      	mov	r3, r0
 801019a:	2b00      	cmp	r3, #0
 801019c:	d03d      	beq.n	801021a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80101a4:	687a      	ldr	r2, [r7, #4]
 80101a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80101a8:	4610      	mov	r0, r2
 80101aa:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80101ac:	e035      	b.n	801021a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	685b      	ldr	r3, [r3, #4]
 80101b6:	b29a      	uxth	r2, r3
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80101c0:	b29b      	uxth	r3, r3
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d005      	beq.n	80101d2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101ca:	f043 0204 	orr.w	r2, r3, #4
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	685a      	ldr	r2, [r3, #4]
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80101e0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101e6:	4618      	mov	r0, r3
 80101e8:	f7f8 f98b 	bl	8008502 <HAL_DMA_GetState>
 80101ec:	4603      	mov	r3, r0
 80101ee:	2b01      	cmp	r3, #1
 80101f0:	d014      	beq.n	801021c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101f6:	4a4e      	ldr	r2, [pc, #312]	; (8010330 <I2C_Slave_STOPF+0x258>)
 80101f8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101fe:	4618      	mov	r0, r3
 8010200:	f7f7 fe39 	bl	8007e76 <HAL_DMA_Abort_IT>
 8010204:	4603      	mov	r3, r0
 8010206:	2b00      	cmp	r3, #0
 8010208:	d008      	beq.n	801021c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801020e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010210:	687a      	ldr	r2, [r7, #4]
 8010212:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8010214:	4610      	mov	r0, r2
 8010216:	4798      	blx	r3
 8010218:	e000      	b.n	801021c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801021a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010220:	b29b      	uxth	r3, r3
 8010222:	2b00      	cmp	r3, #0
 8010224:	d03e      	beq.n	80102a4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	695b      	ldr	r3, [r3, #20]
 801022c:	f003 0304 	and.w	r3, r3, #4
 8010230:	2b04      	cmp	r3, #4
 8010232:	d112      	bne.n	801025a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	691a      	ldr	r2, [r3, #16]
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801023e:	b2d2      	uxtb	r2, r2
 8010240:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010246:	1c5a      	adds	r2, r3, #1
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010250:	b29b      	uxth	r3, r3
 8010252:	3b01      	subs	r3, #1
 8010254:	b29a      	uxth	r2, r3
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	695b      	ldr	r3, [r3, #20]
 8010260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010264:	2b40      	cmp	r3, #64	; 0x40
 8010266:	d112      	bne.n	801028e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	691a      	ldr	r2, [r3, #16]
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010272:	b2d2      	uxtb	r2, r2
 8010274:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801027a:	1c5a      	adds	r2, r3, #1
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010284:	b29b      	uxth	r3, r3
 8010286:	3b01      	subs	r3, #1
 8010288:	b29a      	uxth	r2, r3
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010292:	b29b      	uxth	r3, r3
 8010294:	2b00      	cmp	r3, #0
 8010296:	d005      	beq.n	80102a4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801029c:	f043 0204 	orr.w	r2, r3, #4
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d003      	beq.n	80102b4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80102ac:	6878      	ldr	r0, [r7, #4]
 80102ae:	f000 f8b3 	bl	8010418 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80102b2:	e039      	b.n	8010328 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80102b4:	7bfb      	ldrb	r3, [r7, #15]
 80102b6:	2b2a      	cmp	r3, #42	; 0x2a
 80102b8:	d109      	bne.n	80102ce <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	2200      	movs	r2, #0
 80102be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	2228      	movs	r2, #40	; 0x28
 80102c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80102c8:	6878      	ldr	r0, [r7, #4]
 80102ca:	f7ff f809 	bl	800f2e0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80102d4:	b2db      	uxtb	r3, r3
 80102d6:	2b28      	cmp	r3, #40	; 0x28
 80102d8:	d111      	bne.n	80102fe <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	4a15      	ldr	r2, [pc, #84]	; (8010334 <I2C_Slave_STOPF+0x25c>)
 80102de:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	2200      	movs	r2, #0
 80102e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	2220      	movs	r2, #32
 80102ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	2200      	movs	r2, #0
 80102f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80102f6:	6878      	ldr	r0, [r7, #4]
 80102f8:	f7ff f80a 	bl	800f310 <HAL_I2C_ListenCpltCallback>
}
 80102fc:	e014      	b.n	8010328 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010302:	2b22      	cmp	r3, #34	; 0x22
 8010304:	d002      	beq.n	801030c <I2C_Slave_STOPF+0x234>
 8010306:	7bfb      	ldrb	r3, [r7, #15]
 8010308:	2b22      	cmp	r3, #34	; 0x22
 801030a:	d10d      	bne.n	8010328 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	2200      	movs	r2, #0
 8010310:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	2220      	movs	r2, #32
 8010316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	2200      	movs	r2, #0
 801031e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8010322:	6878      	ldr	r0, [r7, #4]
 8010324:	f7fe ffdc 	bl	800f2e0 <HAL_I2C_SlaveRxCpltCallback>
}
 8010328:	bf00      	nop
 801032a:	3710      	adds	r7, #16
 801032c:	46bd      	mov	sp, r7
 801032e:	bd80      	pop	{r7, pc}
 8010330:	08010e3d 	.word	0x08010e3d
 8010334:	ffff0000 	.word	0xffff0000

08010338 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8010338:	b580      	push	{r7, lr}
 801033a:	b084      	sub	sp, #16
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010346:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801034c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 801034e:	68bb      	ldr	r3, [r7, #8]
 8010350:	2b08      	cmp	r3, #8
 8010352:	d002      	beq.n	801035a <I2C_Slave_AF+0x22>
 8010354:	68bb      	ldr	r3, [r7, #8]
 8010356:	2b20      	cmp	r3, #32
 8010358:	d129      	bne.n	80103ae <I2C_Slave_AF+0x76>
 801035a:	7bfb      	ldrb	r3, [r7, #15]
 801035c:	2b28      	cmp	r3, #40	; 0x28
 801035e:	d126      	bne.n	80103ae <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	4a2c      	ldr	r2, [pc, #176]	; (8010414 <I2C_Slave_AF+0xdc>)
 8010364:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	685a      	ldr	r2, [r3, #4]
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8010374:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801037e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	681a      	ldr	r2, [r3, #0]
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801038e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	2200      	movs	r2, #0
 8010394:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	2220      	movs	r2, #32
 801039a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	2200      	movs	r2, #0
 80103a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80103a6:	6878      	ldr	r0, [r7, #4]
 80103a8:	f7fe ffb2 	bl	800f310 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80103ac:	e02e      	b.n	801040c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80103ae:	7bfb      	ldrb	r3, [r7, #15]
 80103b0:	2b21      	cmp	r3, #33	; 0x21
 80103b2:	d126      	bne.n	8010402 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	4a17      	ldr	r2, [pc, #92]	; (8010414 <I2C_Slave_AF+0xdc>)
 80103b8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	2221      	movs	r2, #33	; 0x21
 80103be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	2220      	movs	r2, #32
 80103c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	2200      	movs	r2, #0
 80103cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	685a      	ldr	r2, [r3, #4]
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80103de:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80103e8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	681a      	ldr	r2, [r3, #0]
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80103f8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80103fa:	6878      	ldr	r0, [r7, #4]
 80103fc:	f7fe ff66 	bl	800f2cc <HAL_I2C_SlaveTxCpltCallback>
}
 8010400:	e004      	b.n	801040c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801040a:	615a      	str	r2, [r3, #20]
}
 801040c:	bf00      	nop
 801040e:	3710      	adds	r7, #16
 8010410:	46bd      	mov	sp, r7
 8010412:	bd80      	pop	{r7, pc}
 8010414:	ffff0000 	.word	0xffff0000

08010418 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8010418:	b580      	push	{r7, lr}
 801041a:	b084      	sub	sp, #16
 801041c:	af00      	add	r7, sp, #0
 801041e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010426:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801042e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8010430:	7bbb      	ldrb	r3, [r7, #14]
 8010432:	2b10      	cmp	r3, #16
 8010434:	d002      	beq.n	801043c <I2C_ITError+0x24>
 8010436:	7bbb      	ldrb	r3, [r7, #14]
 8010438:	2b40      	cmp	r3, #64	; 0x40
 801043a:	d10a      	bne.n	8010452 <I2C_ITError+0x3a>
 801043c:	7bfb      	ldrb	r3, [r7, #15]
 801043e:	2b22      	cmp	r3, #34	; 0x22
 8010440:	d107      	bne.n	8010452 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	681a      	ldr	r2, [r3, #0]
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010450:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8010452:	7bfb      	ldrb	r3, [r7, #15]
 8010454:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8010458:	2b28      	cmp	r3, #40	; 0x28
 801045a:	d107      	bne.n	801046c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	2200      	movs	r2, #0
 8010460:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	2228      	movs	r2, #40	; 0x28
 8010466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 801046a:	e015      	b.n	8010498 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	685b      	ldr	r3, [r3, #4]
 8010472:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010476:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801047a:	d00a      	beq.n	8010492 <I2C_ITError+0x7a>
 801047c:	7bfb      	ldrb	r3, [r7, #15]
 801047e:	2b60      	cmp	r3, #96	; 0x60
 8010480:	d007      	beq.n	8010492 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	2220      	movs	r2, #32
 8010486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	2200      	movs	r2, #0
 801048e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	2200      	movs	r2, #0
 8010496:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	685b      	ldr	r3, [r3, #4]
 801049e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80104a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80104a6:	d162      	bne.n	801056e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	685a      	ldr	r2, [r3, #4]
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80104b6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80104bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80104c0:	b2db      	uxtb	r3, r3
 80104c2:	2b01      	cmp	r3, #1
 80104c4:	d020      	beq.n	8010508 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80104ca:	4a6a      	ldr	r2, [pc, #424]	; (8010674 <I2C_ITError+0x25c>)
 80104cc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80104d2:	4618      	mov	r0, r3
 80104d4:	f7f7 fccf 	bl	8007e76 <HAL_DMA_Abort_IT>
 80104d8:	4603      	mov	r3, r0
 80104da:	2b00      	cmp	r3, #0
 80104dc:	f000 8089 	beq.w	80105f2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	681a      	ldr	r2, [r3, #0]
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	f022 0201 	bic.w	r2, r2, #1
 80104ee:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	2220      	movs	r2, #32
 80104f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80104fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80104fe:	687a      	ldr	r2, [r7, #4]
 8010500:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8010502:	4610      	mov	r0, r2
 8010504:	4798      	blx	r3
 8010506:	e074      	b.n	80105f2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801050c:	4a59      	ldr	r2, [pc, #356]	; (8010674 <I2C_ITError+0x25c>)
 801050e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010514:	4618      	mov	r0, r3
 8010516:	f7f7 fcae 	bl	8007e76 <HAL_DMA_Abort_IT>
 801051a:	4603      	mov	r3, r0
 801051c:	2b00      	cmp	r3, #0
 801051e:	d068      	beq.n	80105f2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	695b      	ldr	r3, [r3, #20]
 8010526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801052a:	2b40      	cmp	r3, #64	; 0x40
 801052c:	d10b      	bne.n	8010546 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	691a      	ldr	r2, [r3, #16]
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010538:	b2d2      	uxtb	r2, r2
 801053a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010540:	1c5a      	adds	r2, r3, #1
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	681a      	ldr	r2, [r3, #0]
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	f022 0201 	bic.w	r2, r2, #1
 8010554:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	2220      	movs	r2, #32
 801055a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010564:	687a      	ldr	r2, [r7, #4]
 8010566:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8010568:	4610      	mov	r0, r2
 801056a:	4798      	blx	r3
 801056c:	e041      	b.n	80105f2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010574:	b2db      	uxtb	r3, r3
 8010576:	2b60      	cmp	r3, #96	; 0x60
 8010578:	d125      	bne.n	80105c6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	2220      	movs	r2, #32
 801057e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	2200      	movs	r2, #0
 8010586:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	695b      	ldr	r3, [r3, #20]
 801058e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010592:	2b40      	cmp	r3, #64	; 0x40
 8010594:	d10b      	bne.n	80105ae <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	691a      	ldr	r2, [r3, #16]
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105a0:	b2d2      	uxtb	r2, r2
 80105a2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105a8:	1c5a      	adds	r2, r3, #1
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	681a      	ldr	r2, [r3, #0]
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	f022 0201 	bic.w	r2, r2, #1
 80105bc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80105be:	6878      	ldr	r0, [r7, #4]
 80105c0:	f7fe fece 	bl	800f360 <HAL_I2C_AbortCpltCallback>
 80105c4:	e015      	b.n	80105f2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	695b      	ldr	r3, [r3, #20]
 80105cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80105d0:	2b40      	cmp	r3, #64	; 0x40
 80105d2:	d10b      	bne.n	80105ec <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	691a      	ldr	r2, [r3, #16]
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105de:	b2d2      	uxtb	r2, r2
 80105e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105e6:	1c5a      	adds	r2, r3, #1
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80105ec:	6878      	ldr	r0, [r7, #4]
 80105ee:	f7fe fead 	bl	800f34c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105f6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80105f8:	68bb      	ldr	r3, [r7, #8]
 80105fa:	f003 0301 	and.w	r3, r3, #1
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d10e      	bne.n	8010620 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8010602:	68bb      	ldr	r3, [r7, #8]
 8010604:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8010608:	2b00      	cmp	r3, #0
 801060a:	d109      	bne.n	8010620 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 801060c:	68bb      	ldr	r3, [r7, #8]
 801060e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8010612:	2b00      	cmp	r3, #0
 8010614:	d104      	bne.n	8010620 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8010616:	68bb      	ldr	r3, [r7, #8]
 8010618:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 801061c:	2b00      	cmp	r3, #0
 801061e:	d007      	beq.n	8010630 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	685a      	ldr	r2, [r3, #4]
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801062e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010636:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801063c:	f003 0304 	and.w	r3, r3, #4
 8010640:	2b04      	cmp	r3, #4
 8010642:	d113      	bne.n	801066c <I2C_ITError+0x254>
 8010644:	7bfb      	ldrb	r3, [r7, #15]
 8010646:	2b28      	cmp	r3, #40	; 0x28
 8010648:	d110      	bne.n	801066c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	4a0a      	ldr	r2, [pc, #40]	; (8010678 <I2C_ITError+0x260>)
 801064e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	2200      	movs	r2, #0
 8010654:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	2220      	movs	r2, #32
 801065a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	2200      	movs	r2, #0
 8010662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8010666:	6878      	ldr	r0, [r7, #4]
 8010668:	f7fe fe52 	bl	800f310 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801066c:	bf00      	nop
 801066e:	3710      	adds	r7, #16
 8010670:	46bd      	mov	sp, r7
 8010672:	bd80      	pop	{r7, pc}
 8010674:	08010e3d 	.word	0x08010e3d
 8010678:	ffff0000 	.word	0xffff0000

0801067c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 801067c:	b580      	push	{r7, lr}
 801067e:	b088      	sub	sp, #32
 8010680:	af02      	add	r7, sp, #8
 8010682:	60f8      	str	r0, [r7, #12]
 8010684:	607a      	str	r2, [r7, #4]
 8010686:	603b      	str	r3, [r7, #0]
 8010688:	460b      	mov	r3, r1
 801068a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010690:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8010692:	697b      	ldr	r3, [r7, #20]
 8010694:	2b08      	cmp	r3, #8
 8010696:	d006      	beq.n	80106a6 <I2C_MasterRequestWrite+0x2a>
 8010698:	697b      	ldr	r3, [r7, #20]
 801069a:	2b01      	cmp	r3, #1
 801069c:	d003      	beq.n	80106a6 <I2C_MasterRequestWrite+0x2a>
 801069e:	697b      	ldr	r3, [r7, #20]
 80106a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80106a4:	d108      	bne.n	80106b8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	681a      	ldr	r2, [r3, #0]
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80106b4:	601a      	str	r2, [r3, #0]
 80106b6:	e00b      	b.n	80106d0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106bc:	2b12      	cmp	r3, #18
 80106be:	d107      	bne.n	80106d0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	681a      	ldr	r2, [r3, #0]
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80106ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80106d0:	683b      	ldr	r3, [r7, #0]
 80106d2:	9300      	str	r3, [sp, #0]
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	2200      	movs	r2, #0
 80106d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80106dc:	68f8      	ldr	r0, [r7, #12]
 80106de:	f000 fc55 	bl	8010f8c <I2C_WaitOnFlagUntilTimeout>
 80106e2:	4603      	mov	r3, r0
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d00d      	beq.n	8010704 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80106f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80106f6:	d103      	bne.n	8010700 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80106fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8010700:	2303      	movs	r3, #3
 8010702:	e035      	b.n	8010770 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	691b      	ldr	r3, [r3, #16]
 8010708:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801070c:	d108      	bne.n	8010720 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801070e:	897b      	ldrh	r3, [r7, #10]
 8010710:	b2db      	uxtb	r3, r3
 8010712:	461a      	mov	r2, r3
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801071c:	611a      	str	r2, [r3, #16]
 801071e:	e01b      	b.n	8010758 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8010720:	897b      	ldrh	r3, [r7, #10]
 8010722:	11db      	asrs	r3, r3, #7
 8010724:	b2db      	uxtb	r3, r3
 8010726:	f003 0306 	and.w	r3, r3, #6
 801072a:	b2db      	uxtb	r3, r3
 801072c:	f063 030f 	orn	r3, r3, #15
 8010730:	b2da      	uxtb	r2, r3
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8010738:	683b      	ldr	r3, [r7, #0]
 801073a:	687a      	ldr	r2, [r7, #4]
 801073c:	490e      	ldr	r1, [pc, #56]	; (8010778 <I2C_MasterRequestWrite+0xfc>)
 801073e:	68f8      	ldr	r0, [r7, #12]
 8010740:	f000 fc7b 	bl	801103a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010744:	4603      	mov	r3, r0
 8010746:	2b00      	cmp	r3, #0
 8010748:	d001      	beq.n	801074e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 801074a:	2301      	movs	r3, #1
 801074c:	e010      	b.n	8010770 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 801074e:	897b      	ldrh	r3, [r7, #10]
 8010750:	b2da      	uxtb	r2, r3
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8010758:	683b      	ldr	r3, [r7, #0]
 801075a:	687a      	ldr	r2, [r7, #4]
 801075c:	4907      	ldr	r1, [pc, #28]	; (801077c <I2C_MasterRequestWrite+0x100>)
 801075e:	68f8      	ldr	r0, [r7, #12]
 8010760:	f000 fc6b 	bl	801103a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010764:	4603      	mov	r3, r0
 8010766:	2b00      	cmp	r3, #0
 8010768:	d001      	beq.n	801076e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 801076a:	2301      	movs	r3, #1
 801076c:	e000      	b.n	8010770 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 801076e:	2300      	movs	r3, #0
}
 8010770:	4618      	mov	r0, r3
 8010772:	3718      	adds	r7, #24
 8010774:	46bd      	mov	sp, r7
 8010776:	bd80      	pop	{r7, pc}
 8010778:	00010008 	.word	0x00010008
 801077c:	00010002 	.word	0x00010002

08010780 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8010780:	b580      	push	{r7, lr}
 8010782:	b088      	sub	sp, #32
 8010784:	af02      	add	r7, sp, #8
 8010786:	60f8      	str	r0, [r7, #12]
 8010788:	607a      	str	r2, [r7, #4]
 801078a:	603b      	str	r3, [r7, #0]
 801078c:	460b      	mov	r3, r1
 801078e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010794:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	681a      	ldr	r2, [r3, #0]
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80107a4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80107a6:	697b      	ldr	r3, [r7, #20]
 80107a8:	2b08      	cmp	r3, #8
 80107aa:	d006      	beq.n	80107ba <I2C_MasterRequestRead+0x3a>
 80107ac:	697b      	ldr	r3, [r7, #20]
 80107ae:	2b01      	cmp	r3, #1
 80107b0:	d003      	beq.n	80107ba <I2C_MasterRequestRead+0x3a>
 80107b2:	697b      	ldr	r3, [r7, #20]
 80107b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80107b8:	d108      	bne.n	80107cc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	681a      	ldr	r2, [r3, #0]
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80107c8:	601a      	str	r2, [r3, #0]
 80107ca:	e00b      	b.n	80107e4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107d0:	2b11      	cmp	r3, #17
 80107d2:	d107      	bne.n	80107e4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	681a      	ldr	r2, [r3, #0]
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80107e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80107e4:	683b      	ldr	r3, [r7, #0]
 80107e6:	9300      	str	r3, [sp, #0]
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	2200      	movs	r2, #0
 80107ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80107f0:	68f8      	ldr	r0, [r7, #12]
 80107f2:	f000 fbcb 	bl	8010f8c <I2C_WaitOnFlagUntilTimeout>
 80107f6:	4603      	mov	r3, r0
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d00d      	beq.n	8010818 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801080a:	d103      	bne.n	8010814 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010812:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8010814:	2303      	movs	r3, #3
 8010816:	e079      	b.n	801090c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	691b      	ldr	r3, [r3, #16]
 801081c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010820:	d108      	bne.n	8010834 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8010822:	897b      	ldrh	r3, [r7, #10]
 8010824:	b2db      	uxtb	r3, r3
 8010826:	f043 0301 	orr.w	r3, r3, #1
 801082a:	b2da      	uxtb	r2, r3
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	611a      	str	r2, [r3, #16]
 8010832:	e05f      	b.n	80108f4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8010834:	897b      	ldrh	r3, [r7, #10]
 8010836:	11db      	asrs	r3, r3, #7
 8010838:	b2db      	uxtb	r3, r3
 801083a:	f003 0306 	and.w	r3, r3, #6
 801083e:	b2db      	uxtb	r3, r3
 8010840:	f063 030f 	orn	r3, r3, #15
 8010844:	b2da      	uxtb	r2, r3
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 801084c:	683b      	ldr	r3, [r7, #0]
 801084e:	687a      	ldr	r2, [r7, #4]
 8010850:	4930      	ldr	r1, [pc, #192]	; (8010914 <I2C_MasterRequestRead+0x194>)
 8010852:	68f8      	ldr	r0, [r7, #12]
 8010854:	f000 fbf1 	bl	801103a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010858:	4603      	mov	r3, r0
 801085a:	2b00      	cmp	r3, #0
 801085c:	d001      	beq.n	8010862 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 801085e:	2301      	movs	r3, #1
 8010860:	e054      	b.n	801090c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8010862:	897b      	ldrh	r3, [r7, #10]
 8010864:	b2da      	uxtb	r2, r3
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801086c:	683b      	ldr	r3, [r7, #0]
 801086e:	687a      	ldr	r2, [r7, #4]
 8010870:	4929      	ldr	r1, [pc, #164]	; (8010918 <I2C_MasterRequestRead+0x198>)
 8010872:	68f8      	ldr	r0, [r7, #12]
 8010874:	f000 fbe1 	bl	801103a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010878:	4603      	mov	r3, r0
 801087a:	2b00      	cmp	r3, #0
 801087c:	d001      	beq.n	8010882 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 801087e:	2301      	movs	r3, #1
 8010880:	e044      	b.n	801090c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8010882:	2300      	movs	r3, #0
 8010884:	613b      	str	r3, [r7, #16]
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	695b      	ldr	r3, [r3, #20]
 801088c:	613b      	str	r3, [r7, #16]
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	699b      	ldr	r3, [r3, #24]
 8010894:	613b      	str	r3, [r7, #16]
 8010896:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	681a      	ldr	r2, [r3, #0]
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80108a6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80108a8:	683b      	ldr	r3, [r7, #0]
 80108aa:	9300      	str	r3, [sp, #0]
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	2200      	movs	r2, #0
 80108b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80108b4:	68f8      	ldr	r0, [r7, #12]
 80108b6:	f000 fb69 	bl	8010f8c <I2C_WaitOnFlagUntilTimeout>
 80108ba:	4603      	mov	r3, r0
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d00d      	beq.n	80108dc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80108ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80108ce:	d103      	bne.n	80108d8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80108d6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80108d8:	2303      	movs	r3, #3
 80108da:	e017      	b.n	801090c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80108dc:	897b      	ldrh	r3, [r7, #10]
 80108de:	11db      	asrs	r3, r3, #7
 80108e0:	b2db      	uxtb	r3, r3
 80108e2:	f003 0306 	and.w	r3, r3, #6
 80108e6:	b2db      	uxtb	r3, r3
 80108e8:	f063 030e 	orn	r3, r3, #14
 80108ec:	b2da      	uxtb	r2, r3
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80108f4:	683b      	ldr	r3, [r7, #0]
 80108f6:	687a      	ldr	r2, [r7, #4]
 80108f8:	4907      	ldr	r1, [pc, #28]	; (8010918 <I2C_MasterRequestRead+0x198>)
 80108fa:	68f8      	ldr	r0, [r7, #12]
 80108fc:	f000 fb9d 	bl	801103a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010900:	4603      	mov	r3, r0
 8010902:	2b00      	cmp	r3, #0
 8010904:	d001      	beq.n	801090a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8010906:	2301      	movs	r3, #1
 8010908:	e000      	b.n	801090c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 801090a:	2300      	movs	r3, #0
}
 801090c:	4618      	mov	r0, r3
 801090e:	3718      	adds	r7, #24
 8010910:	46bd      	mov	sp, r7
 8010912:	bd80      	pop	{r7, pc}
 8010914:	00010008 	.word	0x00010008
 8010918:	00010002 	.word	0x00010002

0801091c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 801091c:	b580      	push	{r7, lr}
 801091e:	b088      	sub	sp, #32
 8010920:	af02      	add	r7, sp, #8
 8010922:	60f8      	str	r0, [r7, #12]
 8010924:	4608      	mov	r0, r1
 8010926:	4611      	mov	r1, r2
 8010928:	461a      	mov	r2, r3
 801092a:	4603      	mov	r3, r0
 801092c:	817b      	strh	r3, [r7, #10]
 801092e:	460b      	mov	r3, r1
 8010930:	813b      	strh	r3, [r7, #8]
 8010932:	4613      	mov	r3, r2
 8010934:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	681a      	ldr	r2, [r3, #0]
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010944:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8010946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010948:	9300      	str	r3, [sp, #0]
 801094a:	6a3b      	ldr	r3, [r7, #32]
 801094c:	2200      	movs	r2, #0
 801094e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8010952:	68f8      	ldr	r0, [r7, #12]
 8010954:	f000 fb1a 	bl	8010f8c <I2C_WaitOnFlagUntilTimeout>
 8010958:	4603      	mov	r3, r0
 801095a:	2b00      	cmp	r3, #0
 801095c:	d00d      	beq.n	801097a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010968:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801096c:	d103      	bne.n	8010976 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010974:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8010976:	2303      	movs	r3, #3
 8010978:	e05f      	b.n	8010a3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801097a:	897b      	ldrh	r3, [r7, #10]
 801097c:	b2db      	uxtb	r3, r3
 801097e:	461a      	mov	r2, r3
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8010988:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801098a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801098c:	6a3a      	ldr	r2, [r7, #32]
 801098e:	492d      	ldr	r1, [pc, #180]	; (8010a44 <I2C_RequestMemoryWrite+0x128>)
 8010990:	68f8      	ldr	r0, [r7, #12]
 8010992:	f000 fb52 	bl	801103a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010996:	4603      	mov	r3, r0
 8010998:	2b00      	cmp	r3, #0
 801099a:	d001      	beq.n	80109a0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 801099c:	2301      	movs	r3, #1
 801099e:	e04c      	b.n	8010a3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80109a0:	2300      	movs	r3, #0
 80109a2:	617b      	str	r3, [r7, #20]
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	695b      	ldr	r3, [r3, #20]
 80109aa:	617b      	str	r3, [r7, #20]
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	699b      	ldr	r3, [r3, #24]
 80109b2:	617b      	str	r3, [r7, #20]
 80109b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80109b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80109b8:	6a39      	ldr	r1, [r7, #32]
 80109ba:	68f8      	ldr	r0, [r7, #12]
 80109bc:	f000 fbbc 	bl	8011138 <I2C_WaitOnTXEFlagUntilTimeout>
 80109c0:	4603      	mov	r3, r0
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d00d      	beq.n	80109e2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109ca:	2b04      	cmp	r3, #4
 80109cc:	d107      	bne.n	80109de <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	681a      	ldr	r2, [r3, #0]
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80109dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80109de:	2301      	movs	r3, #1
 80109e0:	e02b      	b.n	8010a3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80109e2:	88fb      	ldrh	r3, [r7, #6]
 80109e4:	2b01      	cmp	r3, #1
 80109e6:	d105      	bne.n	80109f4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80109e8:	893b      	ldrh	r3, [r7, #8]
 80109ea:	b2da      	uxtb	r2, r3
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	611a      	str	r2, [r3, #16]
 80109f2:	e021      	b.n	8010a38 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80109f4:	893b      	ldrh	r3, [r7, #8]
 80109f6:	0a1b      	lsrs	r3, r3, #8
 80109f8:	b29b      	uxth	r3, r3
 80109fa:	b2da      	uxtb	r2, r3
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a04:	6a39      	ldr	r1, [r7, #32]
 8010a06:	68f8      	ldr	r0, [r7, #12]
 8010a08:	f000 fb96 	bl	8011138 <I2C_WaitOnTXEFlagUntilTimeout>
 8010a0c:	4603      	mov	r3, r0
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d00d      	beq.n	8010a2e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a16:	2b04      	cmp	r3, #4
 8010a18:	d107      	bne.n	8010a2a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	681a      	ldr	r2, [r3, #0]
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010a28:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8010a2a:	2301      	movs	r3, #1
 8010a2c:	e005      	b.n	8010a3a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8010a2e:	893b      	ldrh	r3, [r7, #8]
 8010a30:	b2da      	uxtb	r2, r3
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8010a38:	2300      	movs	r3, #0
}
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	3718      	adds	r7, #24
 8010a3e:	46bd      	mov	sp, r7
 8010a40:	bd80      	pop	{r7, pc}
 8010a42:	bf00      	nop
 8010a44:	00010002 	.word	0x00010002

08010a48 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8010a48:	b580      	push	{r7, lr}
 8010a4a:	b088      	sub	sp, #32
 8010a4c:	af02      	add	r7, sp, #8
 8010a4e:	60f8      	str	r0, [r7, #12]
 8010a50:	4608      	mov	r0, r1
 8010a52:	4611      	mov	r1, r2
 8010a54:	461a      	mov	r2, r3
 8010a56:	4603      	mov	r3, r0
 8010a58:	817b      	strh	r3, [r7, #10]
 8010a5a:	460b      	mov	r3, r1
 8010a5c:	813b      	strh	r3, [r7, #8]
 8010a5e:	4613      	mov	r3, r2
 8010a60:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	681a      	ldr	r2, [r3, #0]
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010a70:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	681a      	ldr	r2, [r3, #0]
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010a80:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8010a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a84:	9300      	str	r3, [sp, #0]
 8010a86:	6a3b      	ldr	r3, [r7, #32]
 8010a88:	2200      	movs	r2, #0
 8010a8a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8010a8e:	68f8      	ldr	r0, [r7, #12]
 8010a90:	f000 fa7c 	bl	8010f8c <I2C_WaitOnFlagUntilTimeout>
 8010a94:	4603      	mov	r3, r0
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d00d      	beq.n	8010ab6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010aa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010aa8:	d103      	bne.n	8010ab2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010ab0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8010ab2:	2303      	movs	r3, #3
 8010ab4:	e0aa      	b.n	8010c0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8010ab6:	897b      	ldrh	r3, [r7, #10]
 8010ab8:	b2db      	uxtb	r3, r3
 8010aba:	461a      	mov	r2, r3
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8010ac4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8010ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ac8:	6a3a      	ldr	r2, [r7, #32]
 8010aca:	4952      	ldr	r1, [pc, #328]	; (8010c14 <I2C_RequestMemoryRead+0x1cc>)
 8010acc:	68f8      	ldr	r0, [r7, #12]
 8010ace:	f000 fab4 	bl	801103a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010ad2:	4603      	mov	r3, r0
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d001      	beq.n	8010adc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8010ad8:	2301      	movs	r3, #1
 8010ada:	e097      	b.n	8010c0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8010adc:	2300      	movs	r3, #0
 8010ade:	617b      	str	r3, [r7, #20]
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	695b      	ldr	r3, [r3, #20]
 8010ae6:	617b      	str	r3, [r7, #20]
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	699b      	ldr	r3, [r3, #24]
 8010aee:	617b      	str	r3, [r7, #20]
 8010af0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010af4:	6a39      	ldr	r1, [r7, #32]
 8010af6:	68f8      	ldr	r0, [r7, #12]
 8010af8:	f000 fb1e 	bl	8011138 <I2C_WaitOnTXEFlagUntilTimeout>
 8010afc:	4603      	mov	r3, r0
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d00d      	beq.n	8010b1e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b06:	2b04      	cmp	r3, #4
 8010b08:	d107      	bne.n	8010b1a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	681a      	ldr	r2, [r3, #0]
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010b18:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8010b1a:	2301      	movs	r3, #1
 8010b1c:	e076      	b.n	8010c0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8010b1e:	88fb      	ldrh	r3, [r7, #6]
 8010b20:	2b01      	cmp	r3, #1
 8010b22:	d105      	bne.n	8010b30 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8010b24:	893b      	ldrh	r3, [r7, #8]
 8010b26:	b2da      	uxtb	r2, r3
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	611a      	str	r2, [r3, #16]
 8010b2e:	e021      	b.n	8010b74 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8010b30:	893b      	ldrh	r3, [r7, #8]
 8010b32:	0a1b      	lsrs	r3, r3, #8
 8010b34:	b29b      	uxth	r3, r3
 8010b36:	b2da      	uxtb	r2, r3
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b40:	6a39      	ldr	r1, [r7, #32]
 8010b42:	68f8      	ldr	r0, [r7, #12]
 8010b44:	f000 faf8 	bl	8011138 <I2C_WaitOnTXEFlagUntilTimeout>
 8010b48:	4603      	mov	r3, r0
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d00d      	beq.n	8010b6a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b52:	2b04      	cmp	r3, #4
 8010b54:	d107      	bne.n	8010b66 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	681a      	ldr	r2, [r3, #0]
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010b64:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8010b66:	2301      	movs	r3, #1
 8010b68:	e050      	b.n	8010c0c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8010b6a:	893b      	ldrh	r3, [r7, #8]
 8010b6c:	b2da      	uxtb	r2, r3
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b76:	6a39      	ldr	r1, [r7, #32]
 8010b78:	68f8      	ldr	r0, [r7, #12]
 8010b7a:	f000 fadd 	bl	8011138 <I2C_WaitOnTXEFlagUntilTimeout>
 8010b7e:	4603      	mov	r3, r0
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d00d      	beq.n	8010ba0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b88:	2b04      	cmp	r3, #4
 8010b8a:	d107      	bne.n	8010b9c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	681a      	ldr	r2, [r3, #0]
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010b9a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8010b9c:	2301      	movs	r3, #1
 8010b9e:	e035      	b.n	8010c0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	681a      	ldr	r2, [r3, #0]
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010bae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8010bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bb2:	9300      	str	r3, [sp, #0]
 8010bb4:	6a3b      	ldr	r3, [r7, #32]
 8010bb6:	2200      	movs	r2, #0
 8010bb8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8010bbc:	68f8      	ldr	r0, [r7, #12]
 8010bbe:	f000 f9e5 	bl	8010f8c <I2C_WaitOnFlagUntilTimeout>
 8010bc2:	4603      	mov	r3, r0
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d00d      	beq.n	8010be4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010bd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010bd6:	d103      	bne.n	8010be0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010bde:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8010be0:	2303      	movs	r3, #3
 8010be2:	e013      	b.n	8010c0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8010be4:	897b      	ldrh	r3, [r7, #10]
 8010be6:	b2db      	uxtb	r3, r3
 8010be8:	f043 0301 	orr.w	r3, r3, #1
 8010bec:	b2da      	uxtb	r2, r3
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8010bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bf6:	6a3a      	ldr	r2, [r7, #32]
 8010bf8:	4906      	ldr	r1, [pc, #24]	; (8010c14 <I2C_RequestMemoryRead+0x1cc>)
 8010bfa:	68f8      	ldr	r0, [r7, #12]
 8010bfc:	f000 fa1d 	bl	801103a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010c00:	4603      	mov	r3, r0
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d001      	beq.n	8010c0a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8010c06:	2301      	movs	r3, #1
 8010c08:	e000      	b.n	8010c0c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8010c0a:	2300      	movs	r3, #0
}
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	3718      	adds	r7, #24
 8010c10:	46bd      	mov	sp, r7
 8010c12:	bd80      	pop	{r7, pc}
 8010c14:	00010002 	.word	0x00010002

08010c18 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	b086      	sub	sp, #24
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c24:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8010c26:	697b      	ldr	r3, [r7, #20]
 8010c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010c2c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8010c2e:	697b      	ldr	r3, [r7, #20]
 8010c30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010c34:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8010c36:	697b      	ldr	r3, [r7, #20]
 8010c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c3a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8010c3c:	697b      	ldr	r3, [r7, #20]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	685a      	ldr	r2, [r3, #4]
 8010c42:	697b      	ldr	r3, [r7, #20]
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8010c4a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8010c4c:	697b      	ldr	r3, [r7, #20]
 8010c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d003      	beq.n	8010c5c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8010c54:	697b      	ldr	r3, [r7, #20]
 8010c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c58:	2200      	movs	r2, #0
 8010c5a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8010c5c:	697b      	ldr	r3, [r7, #20]
 8010c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d003      	beq.n	8010c6c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8010c64:	697b      	ldr	r3, [r7, #20]
 8010c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c68:	2200      	movs	r2, #0
 8010c6a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8010c6c:	7cfb      	ldrb	r3, [r7, #19]
 8010c6e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8010c72:	2b21      	cmp	r3, #33	; 0x21
 8010c74:	d007      	beq.n	8010c86 <I2C_DMAXferCplt+0x6e>
 8010c76:	7cfb      	ldrb	r3, [r7, #19]
 8010c78:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8010c7c:	2b22      	cmp	r3, #34	; 0x22
 8010c7e:	d131      	bne.n	8010ce4 <I2C_DMAXferCplt+0xcc>
 8010c80:	7cbb      	ldrb	r3, [r7, #18]
 8010c82:	2b20      	cmp	r3, #32
 8010c84:	d12e      	bne.n	8010ce4 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8010c86:	697b      	ldr	r3, [r7, #20]
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	685a      	ldr	r2, [r3, #4]
 8010c8c:	697b      	ldr	r3, [r7, #20]
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010c94:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8010c96:	697b      	ldr	r3, [r7, #20]
 8010c98:	2200      	movs	r2, #0
 8010c9a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8010c9c:	7cfb      	ldrb	r3, [r7, #19]
 8010c9e:	2b29      	cmp	r3, #41	; 0x29
 8010ca0:	d10a      	bne.n	8010cb8 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8010ca2:	697b      	ldr	r3, [r7, #20]
 8010ca4:	2221      	movs	r2, #33	; 0x21
 8010ca6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8010ca8:	697b      	ldr	r3, [r7, #20]
 8010caa:	2228      	movs	r2, #40	; 0x28
 8010cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8010cb0:	6978      	ldr	r0, [r7, #20]
 8010cb2:	f7fe fb0b 	bl	800f2cc <HAL_I2C_SlaveTxCpltCallback>
 8010cb6:	e00c      	b.n	8010cd2 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8010cb8:	7cfb      	ldrb	r3, [r7, #19]
 8010cba:	2b2a      	cmp	r3, #42	; 0x2a
 8010cbc:	d109      	bne.n	8010cd2 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8010cbe:	697b      	ldr	r3, [r7, #20]
 8010cc0:	2222      	movs	r2, #34	; 0x22
 8010cc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8010cc4:	697b      	ldr	r3, [r7, #20]
 8010cc6:	2228      	movs	r2, #40	; 0x28
 8010cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8010ccc:	6978      	ldr	r0, [r7, #20]
 8010cce:	f7fe fb07 	bl	800f2e0 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8010cd2:	697b      	ldr	r3, [r7, #20]
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	685a      	ldr	r2, [r3, #4]
 8010cd8:	697b      	ldr	r3, [r7, #20]
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8010ce0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8010ce2:	e06a      	b.n	8010dba <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8010ce4:	697b      	ldr	r3, [r7, #20]
 8010ce6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010cea:	b2db      	uxtb	r3, r3
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d064      	beq.n	8010dba <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8010cf0:	697b      	ldr	r3, [r7, #20]
 8010cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010cf4:	b29b      	uxth	r3, r3
 8010cf6:	2b01      	cmp	r3, #1
 8010cf8:	d107      	bne.n	8010d0a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010cfa:	697b      	ldr	r3, [r7, #20]
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	681a      	ldr	r2, [r3, #0]
 8010d00:	697b      	ldr	r3, [r7, #20]
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010d08:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8010d0a:	697b      	ldr	r3, [r7, #20]
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	685a      	ldr	r2, [r3, #4]
 8010d10:	697b      	ldr	r3, [r7, #20]
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8010d18:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8010d20:	d009      	beq.n	8010d36 <I2C_DMAXferCplt+0x11e>
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	2b08      	cmp	r3, #8
 8010d26:	d006      	beq.n	8010d36 <I2C_DMAXferCplt+0x11e>
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8010d2e:	d002      	beq.n	8010d36 <I2C_DMAXferCplt+0x11e>
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	2b20      	cmp	r3, #32
 8010d34:	d107      	bne.n	8010d46 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010d36:	697b      	ldr	r3, [r7, #20]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	681a      	ldr	r2, [r3, #0]
 8010d3c:	697b      	ldr	r3, [r7, #20]
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010d44:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8010d46:	697b      	ldr	r3, [r7, #20]
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	685a      	ldr	r2, [r3, #4]
 8010d4c:	697b      	ldr	r3, [r7, #20]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8010d54:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8010d56:	697b      	ldr	r3, [r7, #20]
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	685a      	ldr	r2, [r3, #4]
 8010d5c:	697b      	ldr	r3, [r7, #20]
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010d64:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8010d66:	697b      	ldr	r3, [r7, #20]
 8010d68:	2200      	movs	r2, #0
 8010d6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8010d6c:	697b      	ldr	r3, [r7, #20]
 8010d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d003      	beq.n	8010d7c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8010d74:	6978      	ldr	r0, [r7, #20]
 8010d76:	f7fe fae9 	bl	800f34c <HAL_I2C_ErrorCallback>
}
 8010d7a:	e01e      	b.n	8010dba <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8010d7c:	697b      	ldr	r3, [r7, #20]
 8010d7e:	2220      	movs	r2, #32
 8010d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8010d84:	697b      	ldr	r3, [r7, #20]
 8010d86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010d8a:	b2db      	uxtb	r3, r3
 8010d8c:	2b40      	cmp	r3, #64	; 0x40
 8010d8e:	d10a      	bne.n	8010da6 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010d90:	697b      	ldr	r3, [r7, #20]
 8010d92:	2200      	movs	r2, #0
 8010d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8010d98:	697b      	ldr	r3, [r7, #20]
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8010d9e:	6978      	ldr	r0, [r7, #20]
 8010da0:	f7fe faca 	bl	800f338 <HAL_I2C_MemRxCpltCallback>
}
 8010da4:	e009      	b.n	8010dba <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010da6:	697b      	ldr	r3, [r7, #20]
 8010da8:	2200      	movs	r2, #0
 8010daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8010dae:	697b      	ldr	r3, [r7, #20]
 8010db0:	2212      	movs	r2, #18
 8010db2:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8010db4:	6978      	ldr	r0, [r7, #20]
 8010db6:	f7fe fa7f 	bl	800f2b8 <HAL_I2C_MasterRxCpltCallback>
}
 8010dba:	bf00      	nop
 8010dbc:	3718      	adds	r7, #24
 8010dbe:	46bd      	mov	sp, r7
 8010dc0:	bd80      	pop	{r7, pc}

08010dc2 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8010dc2:	b580      	push	{r7, lr}
 8010dc4:	b084      	sub	sp, #16
 8010dc6:	af00      	add	r7, sp, #0
 8010dc8:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010dce:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d003      	beq.n	8010de0 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ddc:	2200      	movs	r2, #0
 8010dde:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d003      	beq.n	8010df0 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010dec:	2200      	movs	r2, #0
 8010dee:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8010df0:	6878      	ldr	r0, [r7, #4]
 8010df2:	f7f7 fb94 	bl	800851e <HAL_DMA_GetError>
 8010df6:	4603      	mov	r3, r0
 8010df8:	2b02      	cmp	r3, #2
 8010dfa:	d01b      	beq.n	8010e34 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	681a      	ldr	r2, [r3, #0]
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010e0a:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	2200      	movs	r2, #0
 8010e10:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	2220      	movs	r2, #32
 8010e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	2200      	movs	r2, #0
 8010e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e26:	f043 0210 	orr.w	r2, r3, #16
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8010e2e:	68f8      	ldr	r0, [r7, #12]
 8010e30:	f7fe fa8c 	bl	800f34c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010e34:	bf00      	nop
 8010e36:	3710      	adds	r7, #16
 8010e38:	46bd      	mov	sp, r7
 8010e3a:	bd80      	pop	{r7, pc}

08010e3c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8010e3c:	b580      	push	{r7, lr}
 8010e3e:	b086      	sub	sp, #24
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010e44:	2300      	movs	r3, #0
 8010e46:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e4c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8010e4e:	697b      	ldr	r3, [r7, #20]
 8010e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010e54:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8010e56:	4b4b      	ldr	r3, [pc, #300]	; (8010f84 <I2C_DMAAbort+0x148>)
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	08db      	lsrs	r3, r3, #3
 8010e5c:	4a4a      	ldr	r2, [pc, #296]	; (8010f88 <I2C_DMAAbort+0x14c>)
 8010e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8010e62:	0a1a      	lsrs	r2, r3, #8
 8010e64:	4613      	mov	r3, r2
 8010e66:	009b      	lsls	r3, r3, #2
 8010e68:	4413      	add	r3, r2
 8010e6a:	00da      	lsls	r2, r3, #3
 8010e6c:	1ad3      	subs	r3, r2, r3
 8010e6e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d106      	bne.n	8010e84 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010e76:	697b      	ldr	r3, [r7, #20]
 8010e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e7a:	f043 0220 	orr.w	r2, r3, #32
 8010e7e:	697b      	ldr	r3, [r7, #20]
 8010e80:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8010e82:	e00a      	b.n	8010e9a <I2C_DMAAbort+0x5e>
    }
    count--;
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	3b01      	subs	r3, #1
 8010e88:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8010e8a:	697b      	ldr	r3, [r7, #20]
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010e98:	d0ea      	beq.n	8010e70 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8010e9a:	697b      	ldr	r3, [r7, #20]
 8010e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d003      	beq.n	8010eaa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8010ea2:	697b      	ldr	r3, [r7, #20]
 8010ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ea6:	2200      	movs	r2, #0
 8010ea8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8010eaa:	697b      	ldr	r3, [r7, #20]
 8010eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d003      	beq.n	8010eba <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8010eb2:	697b      	ldr	r3, [r7, #20]
 8010eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010eb6:	2200      	movs	r2, #0
 8010eb8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010eba:	697b      	ldr	r3, [r7, #20]
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	681a      	ldr	r2, [r3, #0]
 8010ec0:	697b      	ldr	r3, [r7, #20]
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010ec8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8010eca:	697b      	ldr	r3, [r7, #20]
 8010ecc:	2200      	movs	r2, #0
 8010ece:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8010ed0:	697b      	ldr	r3, [r7, #20]
 8010ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d003      	beq.n	8010ee0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8010ed8:	697b      	ldr	r3, [r7, #20]
 8010eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010edc:	2200      	movs	r2, #0
 8010ede:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8010ee0:	697b      	ldr	r3, [r7, #20]
 8010ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d003      	beq.n	8010ef0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8010ee8:	697b      	ldr	r3, [r7, #20]
 8010eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010eec:	2200      	movs	r2, #0
 8010eee:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8010ef0:	697b      	ldr	r3, [r7, #20]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	681a      	ldr	r2, [r3, #0]
 8010ef6:	697b      	ldr	r3, [r7, #20]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	f022 0201 	bic.w	r2, r2, #1
 8010efe:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8010f00:	697b      	ldr	r3, [r7, #20]
 8010f02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010f06:	b2db      	uxtb	r3, r3
 8010f08:	2b60      	cmp	r3, #96	; 0x60
 8010f0a:	d10e      	bne.n	8010f2a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8010f0c:	697b      	ldr	r3, [r7, #20]
 8010f0e:	2220      	movs	r2, #32
 8010f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8010f14:	697b      	ldr	r3, [r7, #20]
 8010f16:	2200      	movs	r2, #0
 8010f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8010f1c:	697b      	ldr	r3, [r7, #20]
 8010f1e:	2200      	movs	r2, #0
 8010f20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8010f22:	6978      	ldr	r0, [r7, #20]
 8010f24:	f7fe fa1c 	bl	800f360 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010f28:	e027      	b.n	8010f7a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8010f2a:	7cfb      	ldrb	r3, [r7, #19]
 8010f2c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8010f30:	2b28      	cmp	r3, #40	; 0x28
 8010f32:	d117      	bne.n	8010f64 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8010f34:	697b      	ldr	r3, [r7, #20]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	681a      	ldr	r2, [r3, #0]
 8010f3a:	697b      	ldr	r3, [r7, #20]
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	f042 0201 	orr.w	r2, r2, #1
 8010f42:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010f44:	697b      	ldr	r3, [r7, #20]
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	681a      	ldr	r2, [r3, #0]
 8010f4a:	697b      	ldr	r3, [r7, #20]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010f52:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8010f54:	697b      	ldr	r3, [r7, #20]
 8010f56:	2200      	movs	r2, #0
 8010f58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8010f5a:	697b      	ldr	r3, [r7, #20]
 8010f5c:	2228      	movs	r2, #40	; 0x28
 8010f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8010f62:	e007      	b.n	8010f74 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8010f64:	697b      	ldr	r3, [r7, #20]
 8010f66:	2220      	movs	r2, #32
 8010f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010f6c:	697b      	ldr	r3, [r7, #20]
 8010f6e:	2200      	movs	r2, #0
 8010f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8010f74:	6978      	ldr	r0, [r7, #20]
 8010f76:	f7fe f9e9 	bl	800f34c <HAL_I2C_ErrorCallback>
}
 8010f7a:	bf00      	nop
 8010f7c:	3718      	adds	r7, #24
 8010f7e:	46bd      	mov	sp, r7
 8010f80:	bd80      	pop	{r7, pc}
 8010f82:	bf00      	nop
 8010f84:	20000058 	.word	0x20000058
 8010f88:	14f8b589 	.word	0x14f8b589

08010f8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b084      	sub	sp, #16
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	60f8      	str	r0, [r7, #12]
 8010f94:	60b9      	str	r1, [r7, #8]
 8010f96:	603b      	str	r3, [r7, #0]
 8010f98:	4613      	mov	r3, r2
 8010f9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010f9c:	e025      	b.n	8010fea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010f9e:	683b      	ldr	r3, [r7, #0]
 8010fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fa4:	d021      	beq.n	8010fea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010fa6:	f7f5 fc35 	bl	8006814 <HAL_GetTick>
 8010faa:	4602      	mov	r2, r0
 8010fac:	69bb      	ldr	r3, [r7, #24]
 8010fae:	1ad3      	subs	r3, r2, r3
 8010fb0:	683a      	ldr	r2, [r7, #0]
 8010fb2:	429a      	cmp	r2, r3
 8010fb4:	d302      	bcc.n	8010fbc <I2C_WaitOnFlagUntilTimeout+0x30>
 8010fb6:	683b      	ldr	r3, [r7, #0]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d116      	bne.n	8010fea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	2200      	movs	r2, #0
 8010fc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	2220      	movs	r2, #32
 8010fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	2200      	movs	r2, #0
 8010fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010fd6:	f043 0220 	orr.w	r2, r3, #32
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	2200      	movs	r2, #0
 8010fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8010fe6:	2301      	movs	r3, #1
 8010fe8:	e023      	b.n	8011032 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010fea:	68bb      	ldr	r3, [r7, #8]
 8010fec:	0c1b      	lsrs	r3, r3, #16
 8010fee:	b2db      	uxtb	r3, r3
 8010ff0:	2b01      	cmp	r3, #1
 8010ff2:	d10d      	bne.n	8011010 <I2C_WaitOnFlagUntilTimeout+0x84>
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	695b      	ldr	r3, [r3, #20]
 8010ffa:	43da      	mvns	r2, r3
 8010ffc:	68bb      	ldr	r3, [r7, #8]
 8010ffe:	4013      	ands	r3, r2
 8011000:	b29b      	uxth	r3, r3
 8011002:	2b00      	cmp	r3, #0
 8011004:	bf0c      	ite	eq
 8011006:	2301      	moveq	r3, #1
 8011008:	2300      	movne	r3, #0
 801100a:	b2db      	uxtb	r3, r3
 801100c:	461a      	mov	r2, r3
 801100e:	e00c      	b.n	801102a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	699b      	ldr	r3, [r3, #24]
 8011016:	43da      	mvns	r2, r3
 8011018:	68bb      	ldr	r3, [r7, #8]
 801101a:	4013      	ands	r3, r2
 801101c:	b29b      	uxth	r3, r3
 801101e:	2b00      	cmp	r3, #0
 8011020:	bf0c      	ite	eq
 8011022:	2301      	moveq	r3, #1
 8011024:	2300      	movne	r3, #0
 8011026:	b2db      	uxtb	r3, r3
 8011028:	461a      	mov	r2, r3
 801102a:	79fb      	ldrb	r3, [r7, #7]
 801102c:	429a      	cmp	r2, r3
 801102e:	d0b6      	beq.n	8010f9e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8011030:	2300      	movs	r3, #0
}
 8011032:	4618      	mov	r0, r3
 8011034:	3710      	adds	r7, #16
 8011036:	46bd      	mov	sp, r7
 8011038:	bd80      	pop	{r7, pc}

0801103a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 801103a:	b580      	push	{r7, lr}
 801103c:	b084      	sub	sp, #16
 801103e:	af00      	add	r7, sp, #0
 8011040:	60f8      	str	r0, [r7, #12]
 8011042:	60b9      	str	r1, [r7, #8]
 8011044:	607a      	str	r2, [r7, #4]
 8011046:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8011048:	e051      	b.n	80110ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	695b      	ldr	r3, [r3, #20]
 8011050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011054:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011058:	d123      	bne.n	80110a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	681a      	ldr	r2, [r3, #0]
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011068:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8011072:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	2200      	movs	r2, #0
 8011078:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	2220      	movs	r2, #32
 801107e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	2200      	movs	r2, #0
 8011086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801108e:	f043 0204 	orr.w	r2, r3, #4
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	2200      	movs	r2, #0
 801109a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 801109e:	2301      	movs	r3, #1
 80110a0:	e046      	b.n	8011130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110a8:	d021      	beq.n	80110ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80110aa:	f7f5 fbb3 	bl	8006814 <HAL_GetTick>
 80110ae:	4602      	mov	r2, r0
 80110b0:	683b      	ldr	r3, [r7, #0]
 80110b2:	1ad3      	subs	r3, r2, r3
 80110b4:	687a      	ldr	r2, [r7, #4]
 80110b6:	429a      	cmp	r2, r3
 80110b8:	d302      	bcc.n	80110c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d116      	bne.n	80110ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	2200      	movs	r2, #0
 80110c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	2220      	movs	r2, #32
 80110ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	2200      	movs	r2, #0
 80110d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110da:	f043 0220 	orr.w	r2, r3, #32
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	2200      	movs	r2, #0
 80110e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80110ea:	2301      	movs	r3, #1
 80110ec:	e020      	b.n	8011130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80110ee:	68bb      	ldr	r3, [r7, #8]
 80110f0:	0c1b      	lsrs	r3, r3, #16
 80110f2:	b2db      	uxtb	r3, r3
 80110f4:	2b01      	cmp	r3, #1
 80110f6:	d10c      	bne.n	8011112 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	695b      	ldr	r3, [r3, #20]
 80110fe:	43da      	mvns	r2, r3
 8011100:	68bb      	ldr	r3, [r7, #8]
 8011102:	4013      	ands	r3, r2
 8011104:	b29b      	uxth	r3, r3
 8011106:	2b00      	cmp	r3, #0
 8011108:	bf14      	ite	ne
 801110a:	2301      	movne	r3, #1
 801110c:	2300      	moveq	r3, #0
 801110e:	b2db      	uxtb	r3, r3
 8011110:	e00b      	b.n	801112a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	699b      	ldr	r3, [r3, #24]
 8011118:	43da      	mvns	r2, r3
 801111a:	68bb      	ldr	r3, [r7, #8]
 801111c:	4013      	ands	r3, r2
 801111e:	b29b      	uxth	r3, r3
 8011120:	2b00      	cmp	r3, #0
 8011122:	bf14      	ite	ne
 8011124:	2301      	movne	r3, #1
 8011126:	2300      	moveq	r3, #0
 8011128:	b2db      	uxtb	r3, r3
 801112a:	2b00      	cmp	r3, #0
 801112c:	d18d      	bne.n	801104a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 801112e:	2300      	movs	r3, #0
}
 8011130:	4618      	mov	r0, r3
 8011132:	3710      	adds	r7, #16
 8011134:	46bd      	mov	sp, r7
 8011136:	bd80      	pop	{r7, pc}

08011138 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8011138:	b580      	push	{r7, lr}
 801113a:	b084      	sub	sp, #16
 801113c:	af00      	add	r7, sp, #0
 801113e:	60f8      	str	r0, [r7, #12]
 8011140:	60b9      	str	r1, [r7, #8]
 8011142:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8011144:	e02d      	b.n	80111a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8011146:	68f8      	ldr	r0, [r7, #12]
 8011148:	f000 f93e 	bl	80113c8 <I2C_IsAcknowledgeFailed>
 801114c:	4603      	mov	r3, r0
 801114e:	2b00      	cmp	r3, #0
 8011150:	d001      	beq.n	8011156 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8011152:	2301      	movs	r3, #1
 8011154:	e02d      	b.n	80111b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011156:	68bb      	ldr	r3, [r7, #8]
 8011158:	f1b3 3fff 	cmp.w	r3, #4294967295
 801115c:	d021      	beq.n	80111a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801115e:	f7f5 fb59 	bl	8006814 <HAL_GetTick>
 8011162:	4602      	mov	r2, r0
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	1ad3      	subs	r3, r2, r3
 8011168:	68ba      	ldr	r2, [r7, #8]
 801116a:	429a      	cmp	r2, r3
 801116c:	d302      	bcc.n	8011174 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 801116e:	68bb      	ldr	r3, [r7, #8]
 8011170:	2b00      	cmp	r3, #0
 8011172:	d116      	bne.n	80111a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	2200      	movs	r2, #0
 8011178:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	2220      	movs	r2, #32
 801117e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	2200      	movs	r2, #0
 8011186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801118e:	f043 0220 	orr.w	r2, r3, #32
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	2200      	movs	r2, #0
 801119a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801119e:	2301      	movs	r3, #1
 80111a0:	e007      	b.n	80111b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	695b      	ldr	r3, [r3, #20]
 80111a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80111ac:	2b80      	cmp	r3, #128	; 0x80
 80111ae:	d1ca      	bne.n	8011146 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80111b0:	2300      	movs	r3, #0
}
 80111b2:	4618      	mov	r0, r3
 80111b4:	3710      	adds	r7, #16
 80111b6:	46bd      	mov	sp, r7
 80111b8:	bd80      	pop	{r7, pc}

080111ba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80111ba:	b580      	push	{r7, lr}
 80111bc:	b084      	sub	sp, #16
 80111be:	af00      	add	r7, sp, #0
 80111c0:	60f8      	str	r0, [r7, #12]
 80111c2:	60b9      	str	r1, [r7, #8]
 80111c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80111c6:	e02d      	b.n	8011224 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80111c8:	68f8      	ldr	r0, [r7, #12]
 80111ca:	f000 f8fd 	bl	80113c8 <I2C_IsAcknowledgeFailed>
 80111ce:	4603      	mov	r3, r0
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d001      	beq.n	80111d8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80111d4:	2301      	movs	r3, #1
 80111d6:	e02d      	b.n	8011234 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80111d8:	68bb      	ldr	r3, [r7, #8]
 80111da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111de:	d021      	beq.n	8011224 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80111e0:	f7f5 fb18 	bl	8006814 <HAL_GetTick>
 80111e4:	4602      	mov	r2, r0
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	1ad3      	subs	r3, r2, r3
 80111ea:	68ba      	ldr	r2, [r7, #8]
 80111ec:	429a      	cmp	r2, r3
 80111ee:	d302      	bcc.n	80111f6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80111f0:	68bb      	ldr	r3, [r7, #8]
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d116      	bne.n	8011224 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	2200      	movs	r2, #0
 80111fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	2220      	movs	r2, #32
 8011200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	2200      	movs	r2, #0
 8011208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011210:	f043 0220 	orr.w	r2, r3, #32
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	2200      	movs	r2, #0
 801121c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8011220:	2301      	movs	r3, #1
 8011222:	e007      	b.n	8011234 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	695b      	ldr	r3, [r3, #20]
 801122a:	f003 0304 	and.w	r3, r3, #4
 801122e:	2b04      	cmp	r3, #4
 8011230:	d1ca      	bne.n	80111c8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8011232:	2300      	movs	r3, #0
}
 8011234:	4618      	mov	r0, r3
 8011236:	3710      	adds	r7, #16
 8011238:	46bd      	mov	sp, r7
 801123a:	bd80      	pop	{r7, pc}

0801123c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801123c:	b580      	push	{r7, lr}
 801123e:	b084      	sub	sp, #16
 8011240:	af00      	add	r7, sp, #0
 8011242:	60f8      	str	r0, [r7, #12]
 8011244:	60b9      	str	r1, [r7, #8]
 8011246:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011248:	e029      	b.n	801129e <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 801124a:	68f8      	ldr	r0, [r7, #12]
 801124c:	f000 f8bc 	bl	80113c8 <I2C_IsAcknowledgeFailed>
 8011250:	4603      	mov	r3, r0
 8011252:	2b00      	cmp	r3, #0
 8011254:	d001      	beq.n	801125a <I2C_WaitOnSTOPFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8011256:	2301      	movs	r3, #1
 8011258:	e029      	b.n	80112ae <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801125a:	f7f5 fadb 	bl	8006814 <HAL_GetTick>
 801125e:	4602      	mov	r2, r0
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	1ad3      	subs	r3, r2, r3
 8011264:	68ba      	ldr	r2, [r7, #8]
 8011266:	429a      	cmp	r2, r3
 8011268:	d302      	bcc.n	8011270 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 801126a:	68bb      	ldr	r3, [r7, #8]
 801126c:	2b00      	cmp	r3, #0
 801126e:	d116      	bne.n	801129e <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	2200      	movs	r2, #0
 8011274:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	2220      	movs	r2, #32
 801127a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	2200      	movs	r2, #0
 8011282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801128a:	f043 0220 	orr.w	r2, r3, #32
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	2200      	movs	r2, #0
 8011296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 801129a:	2301      	movs	r3, #1
 801129c:	e007      	b.n	80112ae <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	695b      	ldr	r3, [r3, #20]
 80112a4:	f003 0310 	and.w	r3, r3, #16
 80112a8:	2b10      	cmp	r3, #16
 80112aa:	d1ce      	bne.n	801124a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80112ac:	2300      	movs	r3, #0
}
 80112ae:	4618      	mov	r0, r3
 80112b0:	3710      	adds	r7, #16
 80112b2:	46bd      	mov	sp, r7
 80112b4:	bd80      	pop	{r7, pc}

080112b6 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80112b6:	b480      	push	{r7}
 80112b8:	b085      	sub	sp, #20
 80112ba:	af00      	add	r7, sp, #0
 80112bc:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80112be:	2300      	movs	r3, #0
 80112c0:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80112c2:	4b14      	ldr	r3, [pc, #80]	; (8011314 <I2C_WaitOnSTOPRequestThroughIT+0x5e>)
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	08db      	lsrs	r3, r3, #3
 80112c8:	4a13      	ldr	r2, [pc, #76]	; (8011318 <I2C_WaitOnSTOPRequestThroughIT+0x62>)
 80112ca:	fba2 2303 	umull	r2, r3, r2, r3
 80112ce:	0a1a      	lsrs	r2, r3, #8
 80112d0:	4613      	mov	r3, r2
 80112d2:	009b      	lsls	r3, r3, #2
 80112d4:	4413      	add	r3, r2
 80112d6:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	3b01      	subs	r3, #1
 80112dc:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d107      	bne.n	80112f4 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112e8:	f043 0220 	orr.w	r2, r3, #32
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80112f0:	2301      	movs	r3, #1
 80112f2:	e008      	b.n	8011306 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80112fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011302:	d0e9      	beq.n	80112d8 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8011304:	2300      	movs	r3, #0
}
 8011306:	4618      	mov	r0, r3
 8011308:	3714      	adds	r7, #20
 801130a:	46bd      	mov	sp, r7
 801130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011310:	4770      	bx	lr
 8011312:	bf00      	nop
 8011314:	20000058 	.word	0x20000058
 8011318:	14f8b589 	.word	0x14f8b589

0801131c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801131c:	b580      	push	{r7, lr}
 801131e:	b084      	sub	sp, #16
 8011320:	af00      	add	r7, sp, #0
 8011322:	60f8      	str	r0, [r7, #12]
 8011324:	60b9      	str	r1, [r7, #8]
 8011326:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8011328:	e042      	b.n	80113b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	695b      	ldr	r3, [r3, #20]
 8011330:	f003 0310 	and.w	r3, r3, #16
 8011334:	2b10      	cmp	r3, #16
 8011336:	d119      	bne.n	801136c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	f06f 0210 	mvn.w	r2, #16
 8011340:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	2200      	movs	r2, #0
 8011346:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	2220      	movs	r2, #32
 801134c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	2200      	movs	r2, #0
 8011354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	2200      	movs	r2, #0
 8011364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8011368:	2301      	movs	r3, #1
 801136a:	e029      	b.n	80113c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801136c:	f7f5 fa52 	bl	8006814 <HAL_GetTick>
 8011370:	4602      	mov	r2, r0
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	1ad3      	subs	r3, r2, r3
 8011376:	68ba      	ldr	r2, [r7, #8]
 8011378:	429a      	cmp	r2, r3
 801137a:	d302      	bcc.n	8011382 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 801137c:	68bb      	ldr	r3, [r7, #8]
 801137e:	2b00      	cmp	r3, #0
 8011380:	d116      	bne.n	80113b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	2200      	movs	r2, #0
 8011386:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	2220      	movs	r2, #32
 801138c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	2200      	movs	r2, #0
 8011394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801139c:	f043 0220 	orr.w	r2, r3, #32
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	2200      	movs	r2, #0
 80113a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80113ac:	2301      	movs	r3, #1
 80113ae:	e007      	b.n	80113c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	695b      	ldr	r3, [r3, #20]
 80113b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80113ba:	2b40      	cmp	r3, #64	; 0x40
 80113bc:	d1b5      	bne.n	801132a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80113be:	2300      	movs	r3, #0
}
 80113c0:	4618      	mov	r0, r3
 80113c2:	3710      	adds	r7, #16
 80113c4:	46bd      	mov	sp, r7
 80113c6:	bd80      	pop	{r7, pc}

080113c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80113c8:	b480      	push	{r7}
 80113ca:	b083      	sub	sp, #12
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	695b      	ldr	r3, [r3, #20]
 80113d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80113da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80113de:	d11b      	bne.n	8011418 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80113e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	2200      	movs	r2, #0
 80113ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	2220      	movs	r2, #32
 80113f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	2200      	movs	r2, #0
 80113fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011404:	f043 0204 	orr.w	r2, r3, #4
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	2200      	movs	r2, #0
 8011410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8011414:	2301      	movs	r3, #1
 8011416:	e000      	b.n	801141a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8011418:	2300      	movs	r3, #0
}
 801141a:	4618      	mov	r0, r3
 801141c:	370c      	adds	r7, #12
 801141e:	46bd      	mov	sp, r7
 8011420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011424:	4770      	bx	lr

08011426 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8011426:	b480      	push	{r7}
 8011428:	b083      	sub	sp, #12
 801142a:	af00      	add	r7, sp, #0
 801142c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011432:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8011436:	d103      	bne.n	8011440 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	2201      	movs	r2, #1
 801143c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 801143e:	e007      	b.n	8011450 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011444:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8011448:	d102      	bne.n	8011450 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	2208      	movs	r2, #8
 801144e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8011450:	bf00      	nop
 8011452:	370c      	adds	r7, #12
 8011454:	46bd      	mov	sp, r7
 8011456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801145a:	4770      	bx	lr

0801145c <HAL_PWR_DeInit>:
/**
  * @brief Deinitializes the HAL PWR peripheral registers to their default reset values.
  * @retval None
  */
void HAL_PWR_DeInit(void)
{
 801145c:	b480      	push	{r7}
 801145e:	af00      	add	r7, sp, #0
  __HAL_RCC_PWR_FORCE_RESET();
 8011460:	4b08      	ldr	r3, [pc, #32]	; (8011484 <HAL_PWR_DeInit+0x28>)
 8011462:	6a1b      	ldr	r3, [r3, #32]
 8011464:	4a07      	ldr	r2, [pc, #28]	; (8011484 <HAL_PWR_DeInit+0x28>)
 8011466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801146a:	6213      	str	r3, [r2, #32]
  __HAL_RCC_PWR_RELEASE_RESET();
 801146c:	4b05      	ldr	r3, [pc, #20]	; (8011484 <HAL_PWR_DeInit+0x28>)
 801146e:	6a1b      	ldr	r3, [r3, #32]
 8011470:	4a04      	ldr	r2, [pc, #16]	; (8011484 <HAL_PWR_DeInit+0x28>)
 8011472:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011476:	6213      	str	r3, [r2, #32]
}
 8011478:	bf00      	nop
 801147a:	46bd      	mov	sp, r7
 801147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011480:	4770      	bx	lr
 8011482:	bf00      	nop
 8011484:	40023800 	.word	0x40023800

08011488 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8011488:	b480      	push	{r7}
 801148a:	b083      	sub	sp, #12
 801148c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 801148e:	4b06      	ldr	r3, [pc, #24]	; (80114a8 <HAL_PWR_EnableBkUpAccess+0x20>)
 8011490:	2201      	movs	r2, #1
 8011492:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8011494:	4b05      	ldr	r3, [pc, #20]	; (80114ac <HAL_PWR_EnableBkUpAccess+0x24>)
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 801149a:	687b      	ldr	r3, [r7, #4]
}
 801149c:	bf00      	nop
 801149e:	370c      	adds	r7, #12
 80114a0:	46bd      	mov	sp, r7
 80114a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a6:	4770      	bx	lr
 80114a8:	420e0020 	.word	0x420e0020
 80114ac:	40007000 	.word	0x40007000

080114b0 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80114b0:	b480      	push	{r7}
 80114b2:	b083      	sub	sp, #12
 80114b4:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 80114b6:	4b06      	ldr	r3, [pc, #24]	; (80114d0 <HAL_PWR_DisableBkUpAccess+0x20>)
 80114b8:	2200      	movs	r2, #0
 80114ba:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80114bc:	4b05      	ldr	r3, [pc, #20]	; (80114d4 <HAL_PWR_DisableBkUpAccess+0x24>)
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80114c2:	687b      	ldr	r3, [r7, #4]
}
 80114c4:	bf00      	nop
 80114c6:	370c      	adds	r7, #12
 80114c8:	46bd      	mov	sp, r7
 80114ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ce:	4770      	bx	lr
 80114d0:	420e0020 	.word	0x420e0020
 80114d4:	40007000 	.word	0x40007000

080114d8 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage threshold corresponding to each 
  *         detection level.
  * @retval None
  */
void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 80114d8:	b480      	push	{r7}
 80114da:	b083      	sub	sp, #12
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));
  
  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 80114e0:	4b2b      	ldr	r3, [pc, #172]	; (8011590 <HAL_PWR_ConfigPVD+0xb8>)
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	4928      	ldr	r1, [pc, #160]	; (8011590 <HAL_PWR_ConfigPVD+0xb8>)
 80114ee:	4313      	orrs	r3, r2
 80114f0:	600b      	str	r3, [r1, #0]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 80114f2:	4b28      	ldr	r3, [pc, #160]	; (8011594 <HAL_PWR_ConfigPVD+0xbc>)
 80114f4:	685b      	ldr	r3, [r3, #4]
 80114f6:	4a27      	ldr	r2, [pc, #156]	; (8011594 <HAL_PWR_ConfigPVD+0xbc>)
 80114f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80114fc:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 80114fe:	4b25      	ldr	r3, [pc, #148]	; (8011594 <HAL_PWR_ConfigPVD+0xbc>)
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	4a24      	ldr	r2, [pc, #144]	; (8011594 <HAL_PWR_ConfigPVD+0xbc>)
 8011504:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011508:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 801150a:	4b22      	ldr	r3, [pc, #136]	; (8011594 <HAL_PWR_ConfigPVD+0xbc>)
 801150c:	689b      	ldr	r3, [r3, #8]
 801150e:	4a21      	ldr	r2, [pc, #132]	; (8011594 <HAL_PWR_ConfigPVD+0xbc>)
 8011510:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011514:	6093      	str	r3, [r2, #8]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 8011516:	4b1f      	ldr	r3, [pc, #124]	; (8011594 <HAL_PWR_ConfigPVD+0xbc>)
 8011518:	68db      	ldr	r3, [r3, #12]
 801151a:	4a1e      	ldr	r2, [pc, #120]	; (8011594 <HAL_PWR_ConfigPVD+0xbc>)
 801151c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011520:	60d3      	str	r3, [r2, #12]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	685b      	ldr	r3, [r3, #4]
 8011526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801152a:	2b00      	cmp	r3, #0
 801152c:	d005      	beq.n	801153a <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 801152e:	4b19      	ldr	r3, [pc, #100]	; (8011594 <HAL_PWR_ConfigPVD+0xbc>)
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	4a18      	ldr	r2, [pc, #96]	; (8011594 <HAL_PWR_ConfigPVD+0xbc>)
 8011534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011538:	6013      	str	r3, [r2, #0]
  }
  
  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	685b      	ldr	r3, [r3, #4]
 801153e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011542:	2b00      	cmp	r3, #0
 8011544:	d005      	beq.n	8011552 <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8011546:	4b13      	ldr	r3, [pc, #76]	; (8011594 <HAL_PWR_ConfigPVD+0xbc>)
 8011548:	685b      	ldr	r3, [r3, #4]
 801154a:	4a12      	ldr	r2, [pc, #72]	; (8011594 <HAL_PWR_ConfigPVD+0xbc>)
 801154c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011550:	6053      	str	r3, [r2, #4]
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	685b      	ldr	r3, [r3, #4]
 8011556:	f003 0301 	and.w	r3, r3, #1
 801155a:	2b00      	cmp	r3, #0
 801155c:	d005      	beq.n	801156a <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 801155e:	4b0d      	ldr	r3, [pc, #52]	; (8011594 <HAL_PWR_ConfigPVD+0xbc>)
 8011560:	689b      	ldr	r3, [r3, #8]
 8011562:	4a0c      	ldr	r2, [pc, #48]	; (8011594 <HAL_PWR_ConfigPVD+0xbc>)
 8011564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011568:	6093      	str	r3, [r2, #8]
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	685b      	ldr	r3, [r3, #4]
 801156e:	f003 0302 	and.w	r3, r3, #2
 8011572:	2b00      	cmp	r3, #0
 8011574:	d005      	beq.n	8011582 <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8011576:	4b07      	ldr	r3, [pc, #28]	; (8011594 <HAL_PWR_ConfigPVD+0xbc>)
 8011578:	68db      	ldr	r3, [r3, #12]
 801157a:	4a06      	ldr	r2, [pc, #24]	; (8011594 <HAL_PWR_ConfigPVD+0xbc>)
 801157c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011580:	60d3      	str	r3, [r2, #12]
  }
}
 8011582:	bf00      	nop
 8011584:	370c      	adds	r7, #12
 8011586:	46bd      	mov	sp, r7
 8011588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801158c:	4770      	bx	lr
 801158e:	bf00      	nop
 8011590:	40007000 	.word	0x40007000
 8011594:	40013c00 	.word	0x40013c00

08011598 <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8011598:	b480      	push	{r7}
 801159a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)ENABLE;
 801159c:	4b03      	ldr	r3, [pc, #12]	; (80115ac <HAL_PWR_EnablePVD+0x14>)
 801159e:	2201      	movs	r2, #1
 80115a0:	601a      	str	r2, [r3, #0]
}
 80115a2:	bf00      	nop
 80115a4:	46bd      	mov	sp, r7
 80115a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115aa:	4770      	bx	lr
 80115ac:	420e0010 	.word	0x420e0010

080115b0 <HAL_PWR_DisablePVD>:
/**
  * @brief Disables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
 80115b0:	b480      	push	{r7}
 80115b2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)DISABLE;
 80115b4:	4b03      	ldr	r3, [pc, #12]	; (80115c4 <HAL_PWR_DisablePVD+0x14>)
 80115b6:	2200      	movs	r2, #0
 80115b8:	601a      	str	r2, [r3, #0]
}
 80115ba:	bf00      	nop
 80115bc:	46bd      	mov	sp, r7
 80115be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c2:	4770      	bx	lr
 80115c4:	420e0010 	.word	0x420e0010

080115c8 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 80115c8:	b480      	push	{r7}
 80115ca:	b083      	sub	sp, #12
 80115cc:	af00      	add	r7, sp, #0
 80115ce:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 80115d0:	4b05      	ldr	r3, [pc, #20]	; (80115e8 <HAL_PWR_EnableWakeUpPin+0x20>)
 80115d2:	685a      	ldr	r2, [r3, #4]
 80115d4:	4904      	ldr	r1, [pc, #16]	; (80115e8 <HAL_PWR_EnableWakeUpPin+0x20>)
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	4313      	orrs	r3, r2
 80115da:	604b      	str	r3, [r1, #4]
}
 80115dc:	bf00      	nop
 80115de:	370c      	adds	r7, #12
 80115e0:	46bd      	mov	sp, r7
 80115e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e6:	4770      	bx	lr
 80115e8:	40007000 	.word	0x40007000

080115ec <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 80115ec:	b480      	push	{r7}
 80115ee:	b083      	sub	sp, #12
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 80115f4:	4b06      	ldr	r3, [pc, #24]	; (8011610 <HAL_PWR_DisableWakeUpPin+0x24>)
 80115f6:	685a      	ldr	r2, [r3, #4]
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	43db      	mvns	r3, r3
 80115fc:	4904      	ldr	r1, [pc, #16]	; (8011610 <HAL_PWR_DisableWakeUpPin+0x24>)
 80115fe:	4013      	ands	r3, r2
 8011600:	604b      	str	r3, [r1, #4]
}
 8011602:	bf00      	nop
 8011604:	370c      	adds	r7, #12
 8011606:	46bd      	mov	sp, r7
 8011608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801160c:	4770      	bx	lr
 801160e:	bf00      	nop
 8011610:	40007000 	.word	0x40007000

08011614 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8011614:	b480      	push	{r7}
 8011616:	b083      	sub	sp, #12
 8011618:	af00      	add	r7, sp, #0
 801161a:	6078      	str	r0, [r7, #4]
 801161c:	460b      	mov	r3, r1
 801161e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8011620:	4b09      	ldr	r3, [pc, #36]	; (8011648 <HAL_PWR_EnterSLEEPMode+0x34>)
 8011622:	691b      	ldr	r3, [r3, #16]
 8011624:	4a08      	ldr	r2, [pc, #32]	; (8011648 <HAL_PWR_EnterSLEEPMode+0x34>)
 8011626:	f023 0304 	bic.w	r3, r3, #4
 801162a:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 801162c:	78fb      	ldrb	r3, [r7, #3]
 801162e:	2b01      	cmp	r3, #1
 8011630:	d101      	bne.n	8011636 <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8011632:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8011634:	e002      	b.n	801163c <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8011636:	bf40      	sev
    __WFE();
 8011638:	bf20      	wfe
    __WFE();
 801163a:	bf20      	wfe
}
 801163c:	bf00      	nop
 801163e:	370c      	adds	r7, #12
 8011640:	46bd      	mov	sp, r7
 8011642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011646:	4770      	bx	lr
 8011648:	e000ed00 	.word	0xe000ed00

0801164c <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 801164c:	b480      	push	{r7}
 801164e:	b083      	sub	sp, #12
 8011650:	af00      	add	r7, sp, #0
 8011652:	6078      	str	r0, [r7, #4]
 8011654:	460b      	mov	r3, r1
 8011656:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 8011658:	4b10      	ldr	r3, [pc, #64]	; (801169c <HAL_PWR_EnterSTOPMode+0x50>)
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	f023 0203 	bic.w	r2, r3, #3
 8011660:	490e      	ldr	r1, [pc, #56]	; (801169c <HAL_PWR_EnterSTOPMode+0x50>)
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	4313      	orrs	r3, r2
 8011666:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8011668:	4b0d      	ldr	r3, [pc, #52]	; (80116a0 <HAL_PWR_EnterSTOPMode+0x54>)
 801166a:	691b      	ldr	r3, [r3, #16]
 801166c:	4a0c      	ldr	r2, [pc, #48]	; (80116a0 <HAL_PWR_EnterSTOPMode+0x54>)
 801166e:	f043 0304 	orr.w	r3, r3, #4
 8011672:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8011674:	78fb      	ldrb	r3, [r7, #3]
 8011676:	2b01      	cmp	r3, #1
 8011678:	d101      	bne.n	801167e <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 801167a:	bf30      	wfi
 801167c:	e002      	b.n	8011684 <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 801167e:	bf40      	sev
    __WFE();
 8011680:	bf20      	wfe
    __WFE();
 8011682:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 8011684:	4b06      	ldr	r3, [pc, #24]	; (80116a0 <HAL_PWR_EnterSTOPMode+0x54>)
 8011686:	691b      	ldr	r3, [r3, #16]
 8011688:	4a05      	ldr	r2, [pc, #20]	; (80116a0 <HAL_PWR_EnterSTOPMode+0x54>)
 801168a:	f023 0304 	bic.w	r3, r3, #4
 801168e:	6113      	str	r3, [r2, #16]
}
 8011690:	bf00      	nop
 8011692:	370c      	adds	r7, #12
 8011694:	46bd      	mov	sp, r7
 8011696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801169a:	4770      	bx	lr
 801169c:	40007000 	.word	0x40007000
 80116a0:	e000ed00 	.word	0xe000ed00

080116a4 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80116a4:	b480      	push	{r7}
 80116a6:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 80116a8:	4b08      	ldr	r3, [pc, #32]	; (80116cc <HAL_PWR_EnterSTANDBYMode+0x28>)
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	4a07      	ldr	r2, [pc, #28]	; (80116cc <HAL_PWR_EnterSTANDBYMode+0x28>)
 80116ae:	f043 0302 	orr.w	r3, r3, #2
 80116b2:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80116b4:	4b06      	ldr	r3, [pc, #24]	; (80116d0 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80116b6:	691b      	ldr	r3, [r3, #16]
 80116b8:	4a05      	ldr	r2, [pc, #20]	; (80116d0 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80116ba:	f043 0304 	orr.w	r3, r3, #4
 80116be:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80116c0:	bf30      	wfi
}
 80116c2:	bf00      	nop
 80116c4:	46bd      	mov	sp, r7
 80116c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ca:	4770      	bx	lr
 80116cc:	40007000 	.word	0x40007000
 80116d0:	e000ed00 	.word	0xe000ed00

080116d4 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 80116d4:	b580      	push	{r7, lr}
 80116d6:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 80116d8:	4b06      	ldr	r3, [pc, #24]	; (80116f4 <HAL_PWR_PVD_IRQHandler+0x20>)
 80116da:	695b      	ldr	r3, [r3, #20]
 80116dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d005      	beq.n	80116f0 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 80116e4:	f000 f808 	bl	80116f8 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80116e8:	4b02      	ldr	r3, [pc, #8]	; (80116f4 <HAL_PWR_PVD_IRQHandler+0x20>)
 80116ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80116ee:	615a      	str	r2, [r3, #20]
  }
}
 80116f0:	bf00      	nop
 80116f2:	bd80      	pop	{r7, pc}
 80116f4:	40013c00 	.word	0x40013c00

080116f8 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80116f8:	b480      	push	{r7}
 80116fa:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 80116fc:	bf00      	nop
 80116fe:	46bd      	mov	sp, r7
 8011700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011704:	4770      	bx	lr

08011706 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8011706:	b480      	push	{r7}
 8011708:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 801170a:	4b05      	ldr	r3, [pc, #20]	; (8011720 <HAL_PWR_EnableSleepOnExit+0x1a>)
 801170c:	691b      	ldr	r3, [r3, #16]
 801170e:	4a04      	ldr	r2, [pc, #16]	; (8011720 <HAL_PWR_EnableSleepOnExit+0x1a>)
 8011710:	f043 0302 	orr.w	r3, r3, #2
 8011714:	6113      	str	r3, [r2, #16]
}
 8011716:	bf00      	nop
 8011718:	46bd      	mov	sp, r7
 801171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801171e:	4770      	bx	lr
 8011720:	e000ed00 	.word	0xe000ed00

08011724 <HAL_PWR_DisableSleepOnExit>:
  * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
  *       re-enters SLEEP mode when an interruption handling is over.          
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 8011724:	b480      	push	{r7}
 8011726:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8011728:	4b05      	ldr	r3, [pc, #20]	; (8011740 <HAL_PWR_DisableSleepOnExit+0x1c>)
 801172a:	691b      	ldr	r3, [r3, #16]
 801172c:	4a04      	ldr	r2, [pc, #16]	; (8011740 <HAL_PWR_DisableSleepOnExit+0x1c>)
 801172e:	f023 0302 	bic.w	r3, r3, #2
 8011732:	6113      	str	r3, [r2, #16]
}
 8011734:	bf00      	nop
 8011736:	46bd      	mov	sp, r7
 8011738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801173c:	4770      	bx	lr
 801173e:	bf00      	nop
 8011740:	e000ed00 	.word	0xe000ed00

08011744 <HAL_PWR_EnableSEVOnPend>:
  * @note Sets SEVONPEND bit of SCR register. When this bit is set, this causes 
  *       WFE to wake up when an interrupt moves from inactive to pended.
  * @retval None
  */
void HAL_PWR_EnableSEVOnPend(void)
{
 8011744:	b480      	push	{r7}
 8011746:	af00      	add	r7, sp, #0
  /* Set SEVONPEND bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 8011748:	4b05      	ldr	r3, [pc, #20]	; (8011760 <HAL_PWR_EnableSEVOnPend+0x1c>)
 801174a:	691b      	ldr	r3, [r3, #16]
 801174c:	4a04      	ldr	r2, [pc, #16]	; (8011760 <HAL_PWR_EnableSEVOnPend+0x1c>)
 801174e:	f043 0310 	orr.w	r3, r3, #16
 8011752:	6113      	str	r3, [r2, #16]
}
 8011754:	bf00      	nop
 8011756:	46bd      	mov	sp, r7
 8011758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801175c:	4770      	bx	lr
 801175e:	bf00      	nop
 8011760:	e000ed00 	.word	0xe000ed00

08011764 <HAL_PWR_DisableSEVOnPend>:
  * @note Clears SEVONPEND bit of SCR register. When this bit is set, this causes 
  *       WFE to wake up when an interrupt moves from inactive to pended.         
  * @retval None
  */
void HAL_PWR_DisableSEVOnPend(void)
{
 8011764:	b480      	push	{r7}
 8011766:	af00      	add	r7, sp, #0
  /* Clear SEVONPEND bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 8011768:	4b05      	ldr	r3, [pc, #20]	; (8011780 <HAL_PWR_DisableSEVOnPend+0x1c>)
 801176a:	691b      	ldr	r3, [r3, #16]
 801176c:	4a04      	ldr	r2, [pc, #16]	; (8011780 <HAL_PWR_DisableSEVOnPend+0x1c>)
 801176e:	f023 0310 	bic.w	r3, r3, #16
 8011772:	6113      	str	r3, [r2, #16]
}
 8011774:	bf00      	nop
 8011776:	46bd      	mov	sp, r7
 8011778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801177c:	4770      	bx	lr
 801177e:	bf00      	nop
 8011780:	e000ed00 	.word	0xe000ed00

08011784 <HAL_PWREx_EnableBkUpReg>:
/**
  * @brief Enables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg(void)
{
 8011784:	b580      	push	{r7, lr}
 8011786:	b082      	sub	sp, #8
 8011788:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 801178a:	2300      	movs	r3, #0
 801178c:	607b      	str	r3, [r7, #4]

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)ENABLE;
 801178e:	4b0e      	ldr	r3, [pc, #56]	; (80117c8 <HAL_PWREx_EnableBkUpReg+0x44>)
 8011790:	2201      	movs	r2, #1
 8011792:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8011794:	f7f5 f83e 	bl	8006814 <HAL_GetTick>
 8011798:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 801179a:	e009      	b.n	80117b0 <HAL_PWREx_EnableBkUpReg+0x2c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 801179c:	f7f5 f83a 	bl	8006814 <HAL_GetTick>
 80117a0:	4602      	mov	r2, r0
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	1ad3      	subs	r3, r2, r3
 80117a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80117aa:	d901      	bls.n	80117b0 <HAL_PWREx_EnableBkUpReg+0x2c>
    {
      return HAL_TIMEOUT;
 80117ac:	2303      	movs	r3, #3
 80117ae:	e006      	b.n	80117be <HAL_PWREx_EnableBkUpReg+0x3a>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 80117b0:	4b06      	ldr	r3, [pc, #24]	; (80117cc <HAL_PWREx_EnableBkUpReg+0x48>)
 80117b2:	685b      	ldr	r3, [r3, #4]
 80117b4:	f003 0308 	and.w	r3, r3, #8
 80117b8:	2b08      	cmp	r3, #8
 80117ba:	d1ef      	bne.n	801179c <HAL_PWREx_EnableBkUpReg+0x18>
    } 
  }
  return HAL_OK;
 80117bc:	2300      	movs	r3, #0
}
 80117be:	4618      	mov	r0, r3
 80117c0:	3708      	adds	r7, #8
 80117c2:	46bd      	mov	sp, r7
 80117c4:	bd80      	pop	{r7, pc}
 80117c6:	bf00      	nop
 80117c8:	420e00a4 	.word	0x420e00a4
 80117cc:	40007000 	.word	0x40007000

080117d0 <HAL_PWREx_DisableBkUpReg>:
/**
  * @brief Disables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_DisableBkUpReg(void)
{
 80117d0:	b580      	push	{r7, lr}
 80117d2:	b082      	sub	sp, #8
 80117d4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80117d6:	2300      	movs	r3, #0
 80117d8:	607b      	str	r3, [r7, #4]

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)DISABLE;
 80117da:	4b0e      	ldr	r3, [pc, #56]	; (8011814 <HAL_PWREx_DisableBkUpReg+0x44>)
 80117dc:	2200      	movs	r2, #0
 80117de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80117e0:	f7f5 f818 	bl	8006814 <HAL_GetTick>
 80117e4:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
 80117e6:	e009      	b.n	80117fc <HAL_PWREx_DisableBkUpReg+0x2c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 80117e8:	f7f5 f814 	bl	8006814 <HAL_GetTick>
 80117ec:	4602      	mov	r2, r0
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	1ad3      	subs	r3, r2, r3
 80117f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80117f6:	d901      	bls.n	80117fc <HAL_PWREx_DisableBkUpReg+0x2c>
    {
      return HAL_TIMEOUT;
 80117f8:	2303      	movs	r3, #3
 80117fa:	e006      	b.n	801180a <HAL_PWREx_DisableBkUpReg+0x3a>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
 80117fc:	4b06      	ldr	r3, [pc, #24]	; (8011818 <HAL_PWREx_DisableBkUpReg+0x48>)
 80117fe:	685b      	ldr	r3, [r3, #4]
 8011800:	f003 0308 	and.w	r3, r3, #8
 8011804:	2b08      	cmp	r3, #8
 8011806:	d0ef      	beq.n	80117e8 <HAL_PWREx_DisableBkUpReg+0x18>
    } 
  }
  return HAL_OK;
 8011808:	2300      	movs	r3, #0
}
 801180a:	4618      	mov	r0, r3
 801180c:	3708      	adds	r7, #8
 801180e:	46bd      	mov	sp, r7
 8011810:	bd80      	pop	{r7, pc}
 8011812:	bf00      	nop
 8011814:	420e00a4 	.word	0x420e00a4
 8011818:	40007000 	.word	0x40007000

0801181c <HAL_PWREx_EnableFlashPowerDown>:
/**
  * @brief Enables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_EnableFlashPowerDown(void)
{
 801181c:	b480      	push	{r7}
 801181e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)ENABLE;
 8011820:	4b03      	ldr	r3, [pc, #12]	; (8011830 <HAL_PWREx_EnableFlashPowerDown+0x14>)
 8011822:	2201      	movs	r2, #1
 8011824:	601a      	str	r2, [r3, #0]
}
 8011826:	bf00      	nop
 8011828:	46bd      	mov	sp, r7
 801182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801182e:	4770      	bx	lr
 8011830:	420e0024 	.word	0x420e0024

08011834 <HAL_PWREx_DisableFlashPowerDown>:
/**
  * @brief Disables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_DisableFlashPowerDown(void)
{
 8011834:	b480      	push	{r7}
 8011836:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)DISABLE;
 8011838:	4b03      	ldr	r3, [pc, #12]	; (8011848 <HAL_PWREx_DisableFlashPowerDown+0x14>)
 801183a:	2200      	movs	r2, #0
 801183c:	601a      	str	r2, [r3, #0]
}
 801183e:	bf00      	nop
 8011840:	46bd      	mov	sp, r7
 8011842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011846:	4770      	bx	lr
 8011848:	420e0024 	.word	0x420e0024

0801184c <HAL_PWREx_GetVoltageRange>:
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE1: Regulator voltage output Scale 1 mode
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE2: Regulator voltage output Scale 2 mode
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE3: Regulator voltage output Scale 3 mode
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 801184c:	b480      	push	{r7}
 801184e:	af00      	add	r7, sp, #0
  return (PWR->CR & PWR_CR_VOS);
 8011850:	4b04      	ldr	r3, [pc, #16]	; (8011864 <HAL_PWREx_GetVoltageRange+0x18>)
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
}
 8011858:	4618      	mov	r0, r3
 801185a:	46bd      	mov	sp, r7
 801185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011860:	4770      	bx	lr
 8011862:	bf00      	nop
 8011864:	40007000 	.word	0x40007000

08011868 <HAL_PWREx_ControlVoltageScaling>:
  *        When moving from Range 2 to Range 1, the system frequency can be increased to
  *        a value up to 168 MHz after calling HAL_PWREx_ConfigVoltageScaling() API.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8011868:	b580      	push	{r7, lr}
 801186a:	b086      	sub	sp, #24
 801186c:	af00      	add	r7, sp, #0
 801186e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8011870:	2300      	movs	r3, #0
 8011872:	617b      	str	r3, [r7, #20]
  
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* Enable PWR RCC Clock Peripheral */
  __HAL_RCC_PWR_CLK_ENABLE();
 8011874:	2300      	movs	r3, #0
 8011876:	60fb      	str	r3, [r7, #12]
 8011878:	4b1a      	ldr	r3, [pc, #104]	; (80118e4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 801187a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801187c:	4a19      	ldr	r2, [pc, #100]	; (80118e4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 801187e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011882:	6413      	str	r3, [r2, #64]	; 0x40
 8011884:	4b17      	ldr	r3, [pc, #92]	; (80118e4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8011886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801188c:	60fb      	str	r3, [r7, #12]
 801188e:	68fb      	ldr	r3, [r7, #12]
  
  /* Set Range */
  __HAL_PWR_VOLTAGESCALING_CONFIG(VoltageScaling);
 8011890:	2300      	movs	r3, #0
 8011892:	613b      	str	r3, [r7, #16]
 8011894:	4b14      	ldr	r3, [pc, #80]	; (80118e8 <HAL_PWREx_ControlVoltageScaling+0x80>)
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801189c:	4912      	ldr	r1, [pc, #72]	; (80118e8 <HAL_PWREx_ControlVoltageScaling+0x80>)
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	4313      	orrs	r3, r2
 80118a2:	600b      	str	r3, [r1, #0]
 80118a4:	4b10      	ldr	r3, [pc, #64]	; (80118e8 <HAL_PWREx_ControlVoltageScaling+0x80>)
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80118ac:	613b      	str	r3, [r7, #16]
 80118ae:	693b      	ldr	r3, [r7, #16]
  
  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80118b0:	f7f4 ffb0 	bl	8006814 <HAL_GetTick>
 80118b4:	6178      	str	r0, [r7, #20]
  while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
 80118b6:	e009      	b.n	80118cc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    if((HAL_GetTick() - tickstart ) > PWR_VOSRDY_TIMEOUT_VALUE)
 80118b8:	f7f4 ffac 	bl	8006814 <HAL_GetTick>
 80118bc:	4602      	mov	r2, r0
 80118be:	697b      	ldr	r3, [r7, #20]
 80118c0:	1ad3      	subs	r3, r2, r3
 80118c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80118c6:	d901      	bls.n	80118cc <HAL_PWREx_ControlVoltageScaling+0x64>
    {
      return HAL_TIMEOUT;
 80118c8:	2303      	movs	r3, #3
 80118ca:	e007      	b.n	80118dc <HAL_PWREx_ControlVoltageScaling+0x74>
  while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
 80118cc:	4b06      	ldr	r3, [pc, #24]	; (80118e8 <HAL_PWREx_ControlVoltageScaling+0x80>)
 80118ce:	685b      	ldr	r3, [r3, #4]
 80118d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80118d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80118d8:	d1ee      	bne.n	80118b8 <HAL_PWREx_ControlVoltageScaling+0x50>
    } 
  }

  return HAL_OK;
 80118da:	2300      	movs	r3, #0
}
 80118dc:	4618      	mov	r0, r3
 80118de:	3718      	adds	r7, #24
 80118e0:	46bd      	mov	sp, r7
 80118e2:	bd80      	pop	{r7, pc}
 80118e4:	40023800 	.word	0x40023800
 80118e8:	40007000 	.word	0x40007000

080118ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80118ec:	b580      	push	{r7, lr}
 80118ee:	b086      	sub	sp, #24
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d101      	bne.n	80118fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80118fa:	2301      	movs	r3, #1
 80118fc:	e267      	b.n	8011dce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	f003 0301 	and.w	r3, r3, #1
 8011906:	2b00      	cmp	r3, #0
 8011908:	d075      	beq.n	80119f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801190a:	4b88      	ldr	r3, [pc, #544]	; (8011b2c <HAL_RCC_OscConfig+0x240>)
 801190c:	689b      	ldr	r3, [r3, #8]
 801190e:	f003 030c 	and.w	r3, r3, #12
 8011912:	2b04      	cmp	r3, #4
 8011914:	d00c      	beq.n	8011930 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8011916:	4b85      	ldr	r3, [pc, #532]	; (8011b2c <HAL_RCC_OscConfig+0x240>)
 8011918:	689b      	ldr	r3, [r3, #8]
 801191a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801191e:	2b08      	cmp	r3, #8
 8011920:	d112      	bne.n	8011948 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8011922:	4b82      	ldr	r3, [pc, #520]	; (8011b2c <HAL_RCC_OscConfig+0x240>)
 8011924:	685b      	ldr	r3, [r3, #4]
 8011926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801192a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801192e:	d10b      	bne.n	8011948 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011930:	4b7e      	ldr	r3, [pc, #504]	; (8011b2c <HAL_RCC_OscConfig+0x240>)
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011938:	2b00      	cmp	r3, #0
 801193a:	d05b      	beq.n	80119f4 <HAL_RCC_OscConfig+0x108>
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	685b      	ldr	r3, [r3, #4]
 8011940:	2b00      	cmp	r3, #0
 8011942:	d157      	bne.n	80119f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8011944:	2301      	movs	r3, #1
 8011946:	e242      	b.n	8011dce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	685b      	ldr	r3, [r3, #4]
 801194c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011950:	d106      	bne.n	8011960 <HAL_RCC_OscConfig+0x74>
 8011952:	4b76      	ldr	r3, [pc, #472]	; (8011b2c <HAL_RCC_OscConfig+0x240>)
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	4a75      	ldr	r2, [pc, #468]	; (8011b2c <HAL_RCC_OscConfig+0x240>)
 8011958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801195c:	6013      	str	r3, [r2, #0]
 801195e:	e01d      	b.n	801199c <HAL_RCC_OscConfig+0xb0>
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	685b      	ldr	r3, [r3, #4]
 8011964:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011968:	d10c      	bne.n	8011984 <HAL_RCC_OscConfig+0x98>
 801196a:	4b70      	ldr	r3, [pc, #448]	; (8011b2c <HAL_RCC_OscConfig+0x240>)
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	4a6f      	ldr	r2, [pc, #444]	; (8011b2c <HAL_RCC_OscConfig+0x240>)
 8011970:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8011974:	6013      	str	r3, [r2, #0]
 8011976:	4b6d      	ldr	r3, [pc, #436]	; (8011b2c <HAL_RCC_OscConfig+0x240>)
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	4a6c      	ldr	r2, [pc, #432]	; (8011b2c <HAL_RCC_OscConfig+0x240>)
 801197c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011980:	6013      	str	r3, [r2, #0]
 8011982:	e00b      	b.n	801199c <HAL_RCC_OscConfig+0xb0>
 8011984:	4b69      	ldr	r3, [pc, #420]	; (8011b2c <HAL_RCC_OscConfig+0x240>)
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	4a68      	ldr	r2, [pc, #416]	; (8011b2c <HAL_RCC_OscConfig+0x240>)
 801198a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801198e:	6013      	str	r3, [r2, #0]
 8011990:	4b66      	ldr	r3, [pc, #408]	; (8011b2c <HAL_RCC_OscConfig+0x240>)
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	4a65      	ldr	r2, [pc, #404]	; (8011b2c <HAL_RCC_OscConfig+0x240>)
 8011996:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801199a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	685b      	ldr	r3, [r3, #4]
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d013      	beq.n	80119cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80119a4:	f7f4 ff36 	bl	8006814 <HAL_GetTick>
 80119a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80119aa:	e008      	b.n	80119be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80119ac:	f7f4 ff32 	bl	8006814 <HAL_GetTick>
 80119b0:	4602      	mov	r2, r0
 80119b2:	693b      	ldr	r3, [r7, #16]
 80119b4:	1ad3      	subs	r3, r2, r3
 80119b6:	2b64      	cmp	r3, #100	; 0x64
 80119b8:	d901      	bls.n	80119be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80119ba:	2303      	movs	r3, #3
 80119bc:	e207      	b.n	8011dce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80119be:	4b5b      	ldr	r3, [pc, #364]	; (8011b2c <HAL_RCC_OscConfig+0x240>)
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d0f0      	beq.n	80119ac <HAL_RCC_OscConfig+0xc0>
 80119ca:	e014      	b.n	80119f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80119cc:	f7f4 ff22 	bl	8006814 <HAL_GetTick>
 80119d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80119d2:	e008      	b.n	80119e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80119d4:	f7f4 ff1e 	bl	8006814 <HAL_GetTick>
 80119d8:	4602      	mov	r2, r0
 80119da:	693b      	ldr	r3, [r7, #16]
 80119dc:	1ad3      	subs	r3, r2, r3
 80119de:	2b64      	cmp	r3, #100	; 0x64
 80119e0:	d901      	bls.n	80119e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80119e2:	2303      	movs	r3, #3
 80119e4:	e1f3      	b.n	8011dce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80119e6:	4b51      	ldr	r3, [pc, #324]	; (8011b2c <HAL_RCC_OscConfig+0x240>)
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d1f0      	bne.n	80119d4 <HAL_RCC_OscConfig+0xe8>
 80119f2:	e000      	b.n	80119f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80119f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	f003 0302 	and.w	r3, r3, #2
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d063      	beq.n	8011aca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8011a02:	4b4a      	ldr	r3, [pc, #296]	; (8011b2c <HAL_RCC_OscConfig+0x240>)
 8011a04:	689b      	ldr	r3, [r3, #8]
 8011a06:	f003 030c 	and.w	r3, r3, #12
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d00b      	beq.n	8011a26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8011a0e:	4b47      	ldr	r3, [pc, #284]	; (8011b2c <HAL_RCC_OscConfig+0x240>)
 8011a10:	689b      	ldr	r3, [r3, #8]
 8011a12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8011a16:	2b08      	cmp	r3, #8
 8011a18:	d11c      	bne.n	8011a54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8011a1a:	4b44      	ldr	r3, [pc, #272]	; (8011b2c <HAL_RCC_OscConfig+0x240>)
 8011a1c:	685b      	ldr	r3, [r3, #4]
 8011a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d116      	bne.n	8011a54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011a26:	4b41      	ldr	r3, [pc, #260]	; (8011b2c <HAL_RCC_OscConfig+0x240>)
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	f003 0302 	and.w	r3, r3, #2
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d005      	beq.n	8011a3e <HAL_RCC_OscConfig+0x152>
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	68db      	ldr	r3, [r3, #12]
 8011a36:	2b01      	cmp	r3, #1
 8011a38:	d001      	beq.n	8011a3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8011a3a:	2301      	movs	r3, #1
 8011a3c:	e1c7      	b.n	8011dce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011a3e:	4b3b      	ldr	r3, [pc, #236]	; (8011b2c <HAL_RCC_OscConfig+0x240>)
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	691b      	ldr	r3, [r3, #16]
 8011a4a:	00db      	lsls	r3, r3, #3
 8011a4c:	4937      	ldr	r1, [pc, #220]	; (8011b2c <HAL_RCC_OscConfig+0x240>)
 8011a4e:	4313      	orrs	r3, r2
 8011a50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011a52:	e03a      	b.n	8011aca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	68db      	ldr	r3, [r3, #12]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d020      	beq.n	8011a9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8011a5c:	4b34      	ldr	r3, [pc, #208]	; (8011b30 <HAL_RCC_OscConfig+0x244>)
 8011a5e:	2201      	movs	r2, #1
 8011a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011a62:	f7f4 fed7 	bl	8006814 <HAL_GetTick>
 8011a66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011a68:	e008      	b.n	8011a7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011a6a:	f7f4 fed3 	bl	8006814 <HAL_GetTick>
 8011a6e:	4602      	mov	r2, r0
 8011a70:	693b      	ldr	r3, [r7, #16]
 8011a72:	1ad3      	subs	r3, r2, r3
 8011a74:	2b02      	cmp	r3, #2
 8011a76:	d901      	bls.n	8011a7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8011a78:	2303      	movs	r3, #3
 8011a7a:	e1a8      	b.n	8011dce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011a7c:	4b2b      	ldr	r3, [pc, #172]	; (8011b2c <HAL_RCC_OscConfig+0x240>)
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	f003 0302 	and.w	r3, r3, #2
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d0f0      	beq.n	8011a6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011a88:	4b28      	ldr	r3, [pc, #160]	; (8011b2c <HAL_RCC_OscConfig+0x240>)
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	691b      	ldr	r3, [r3, #16]
 8011a94:	00db      	lsls	r3, r3, #3
 8011a96:	4925      	ldr	r1, [pc, #148]	; (8011b2c <HAL_RCC_OscConfig+0x240>)
 8011a98:	4313      	orrs	r3, r2
 8011a9a:	600b      	str	r3, [r1, #0]
 8011a9c:	e015      	b.n	8011aca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8011a9e:	4b24      	ldr	r3, [pc, #144]	; (8011b30 <HAL_RCC_OscConfig+0x244>)
 8011aa0:	2200      	movs	r2, #0
 8011aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011aa4:	f7f4 feb6 	bl	8006814 <HAL_GetTick>
 8011aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011aaa:	e008      	b.n	8011abe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011aac:	f7f4 feb2 	bl	8006814 <HAL_GetTick>
 8011ab0:	4602      	mov	r2, r0
 8011ab2:	693b      	ldr	r3, [r7, #16]
 8011ab4:	1ad3      	subs	r3, r2, r3
 8011ab6:	2b02      	cmp	r3, #2
 8011ab8:	d901      	bls.n	8011abe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8011aba:	2303      	movs	r3, #3
 8011abc:	e187      	b.n	8011dce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011abe:	4b1b      	ldr	r3, [pc, #108]	; (8011b2c <HAL_RCC_OscConfig+0x240>)
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	f003 0302 	and.w	r3, r3, #2
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d1f0      	bne.n	8011aac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	f003 0308 	and.w	r3, r3, #8
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d036      	beq.n	8011b44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	695b      	ldr	r3, [r3, #20]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d016      	beq.n	8011b0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8011ade:	4b15      	ldr	r3, [pc, #84]	; (8011b34 <HAL_RCC_OscConfig+0x248>)
 8011ae0:	2201      	movs	r2, #1
 8011ae2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011ae4:	f7f4 fe96 	bl	8006814 <HAL_GetTick>
 8011ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011aea:	e008      	b.n	8011afe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011aec:	f7f4 fe92 	bl	8006814 <HAL_GetTick>
 8011af0:	4602      	mov	r2, r0
 8011af2:	693b      	ldr	r3, [r7, #16]
 8011af4:	1ad3      	subs	r3, r2, r3
 8011af6:	2b02      	cmp	r3, #2
 8011af8:	d901      	bls.n	8011afe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8011afa:	2303      	movs	r3, #3
 8011afc:	e167      	b.n	8011dce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011afe:	4b0b      	ldr	r3, [pc, #44]	; (8011b2c <HAL_RCC_OscConfig+0x240>)
 8011b00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011b02:	f003 0302 	and.w	r3, r3, #2
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d0f0      	beq.n	8011aec <HAL_RCC_OscConfig+0x200>
 8011b0a:	e01b      	b.n	8011b44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8011b0c:	4b09      	ldr	r3, [pc, #36]	; (8011b34 <HAL_RCC_OscConfig+0x248>)
 8011b0e:	2200      	movs	r2, #0
 8011b10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011b12:	f7f4 fe7f 	bl	8006814 <HAL_GetTick>
 8011b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011b18:	e00e      	b.n	8011b38 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011b1a:	f7f4 fe7b 	bl	8006814 <HAL_GetTick>
 8011b1e:	4602      	mov	r2, r0
 8011b20:	693b      	ldr	r3, [r7, #16]
 8011b22:	1ad3      	subs	r3, r2, r3
 8011b24:	2b02      	cmp	r3, #2
 8011b26:	d907      	bls.n	8011b38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8011b28:	2303      	movs	r3, #3
 8011b2a:	e150      	b.n	8011dce <HAL_RCC_OscConfig+0x4e2>
 8011b2c:	40023800 	.word	0x40023800
 8011b30:	42470000 	.word	0x42470000
 8011b34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011b38:	4b88      	ldr	r3, [pc, #544]	; (8011d5c <HAL_RCC_OscConfig+0x470>)
 8011b3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011b3c:	f003 0302 	and.w	r3, r3, #2
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d1ea      	bne.n	8011b1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	f003 0304 	and.w	r3, r3, #4
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	f000 8097 	beq.w	8011c80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8011b52:	2300      	movs	r3, #0
 8011b54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8011b56:	4b81      	ldr	r3, [pc, #516]	; (8011d5c <HAL_RCC_OscConfig+0x470>)
 8011b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d10f      	bne.n	8011b82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8011b62:	2300      	movs	r3, #0
 8011b64:	60bb      	str	r3, [r7, #8]
 8011b66:	4b7d      	ldr	r3, [pc, #500]	; (8011d5c <HAL_RCC_OscConfig+0x470>)
 8011b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b6a:	4a7c      	ldr	r2, [pc, #496]	; (8011d5c <HAL_RCC_OscConfig+0x470>)
 8011b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011b70:	6413      	str	r3, [r2, #64]	; 0x40
 8011b72:	4b7a      	ldr	r3, [pc, #488]	; (8011d5c <HAL_RCC_OscConfig+0x470>)
 8011b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011b7a:	60bb      	str	r3, [r7, #8]
 8011b7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8011b7e:	2301      	movs	r3, #1
 8011b80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011b82:	4b77      	ldr	r3, [pc, #476]	; (8011d60 <HAL_RCC_OscConfig+0x474>)
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d118      	bne.n	8011bc0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011b8e:	4b74      	ldr	r3, [pc, #464]	; (8011d60 <HAL_RCC_OscConfig+0x474>)
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	4a73      	ldr	r2, [pc, #460]	; (8011d60 <HAL_RCC_OscConfig+0x474>)
 8011b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011b98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8011b9a:	f7f4 fe3b 	bl	8006814 <HAL_GetTick>
 8011b9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011ba0:	e008      	b.n	8011bb4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011ba2:	f7f4 fe37 	bl	8006814 <HAL_GetTick>
 8011ba6:	4602      	mov	r2, r0
 8011ba8:	693b      	ldr	r3, [r7, #16]
 8011baa:	1ad3      	subs	r3, r2, r3
 8011bac:	2b02      	cmp	r3, #2
 8011bae:	d901      	bls.n	8011bb4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8011bb0:	2303      	movs	r3, #3
 8011bb2:	e10c      	b.n	8011dce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011bb4:	4b6a      	ldr	r3, [pc, #424]	; (8011d60 <HAL_RCC_OscConfig+0x474>)
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d0f0      	beq.n	8011ba2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	689b      	ldr	r3, [r3, #8]
 8011bc4:	2b01      	cmp	r3, #1
 8011bc6:	d106      	bne.n	8011bd6 <HAL_RCC_OscConfig+0x2ea>
 8011bc8:	4b64      	ldr	r3, [pc, #400]	; (8011d5c <HAL_RCC_OscConfig+0x470>)
 8011bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011bcc:	4a63      	ldr	r2, [pc, #396]	; (8011d5c <HAL_RCC_OscConfig+0x470>)
 8011bce:	f043 0301 	orr.w	r3, r3, #1
 8011bd2:	6713      	str	r3, [r2, #112]	; 0x70
 8011bd4:	e01c      	b.n	8011c10 <HAL_RCC_OscConfig+0x324>
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	689b      	ldr	r3, [r3, #8]
 8011bda:	2b05      	cmp	r3, #5
 8011bdc:	d10c      	bne.n	8011bf8 <HAL_RCC_OscConfig+0x30c>
 8011bde:	4b5f      	ldr	r3, [pc, #380]	; (8011d5c <HAL_RCC_OscConfig+0x470>)
 8011be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011be2:	4a5e      	ldr	r2, [pc, #376]	; (8011d5c <HAL_RCC_OscConfig+0x470>)
 8011be4:	f043 0304 	orr.w	r3, r3, #4
 8011be8:	6713      	str	r3, [r2, #112]	; 0x70
 8011bea:	4b5c      	ldr	r3, [pc, #368]	; (8011d5c <HAL_RCC_OscConfig+0x470>)
 8011bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011bee:	4a5b      	ldr	r2, [pc, #364]	; (8011d5c <HAL_RCC_OscConfig+0x470>)
 8011bf0:	f043 0301 	orr.w	r3, r3, #1
 8011bf4:	6713      	str	r3, [r2, #112]	; 0x70
 8011bf6:	e00b      	b.n	8011c10 <HAL_RCC_OscConfig+0x324>
 8011bf8:	4b58      	ldr	r3, [pc, #352]	; (8011d5c <HAL_RCC_OscConfig+0x470>)
 8011bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011bfc:	4a57      	ldr	r2, [pc, #348]	; (8011d5c <HAL_RCC_OscConfig+0x470>)
 8011bfe:	f023 0301 	bic.w	r3, r3, #1
 8011c02:	6713      	str	r3, [r2, #112]	; 0x70
 8011c04:	4b55      	ldr	r3, [pc, #340]	; (8011d5c <HAL_RCC_OscConfig+0x470>)
 8011c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c08:	4a54      	ldr	r2, [pc, #336]	; (8011d5c <HAL_RCC_OscConfig+0x470>)
 8011c0a:	f023 0304 	bic.w	r3, r3, #4
 8011c0e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	689b      	ldr	r3, [r3, #8]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d015      	beq.n	8011c44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011c18:	f7f4 fdfc 	bl	8006814 <HAL_GetTick>
 8011c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011c1e:	e00a      	b.n	8011c36 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011c20:	f7f4 fdf8 	bl	8006814 <HAL_GetTick>
 8011c24:	4602      	mov	r2, r0
 8011c26:	693b      	ldr	r3, [r7, #16]
 8011c28:	1ad3      	subs	r3, r2, r3
 8011c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8011c2e:	4293      	cmp	r3, r2
 8011c30:	d901      	bls.n	8011c36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8011c32:	2303      	movs	r3, #3
 8011c34:	e0cb      	b.n	8011dce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011c36:	4b49      	ldr	r3, [pc, #292]	; (8011d5c <HAL_RCC_OscConfig+0x470>)
 8011c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c3a:	f003 0302 	and.w	r3, r3, #2
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d0ee      	beq.n	8011c20 <HAL_RCC_OscConfig+0x334>
 8011c42:	e014      	b.n	8011c6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011c44:	f7f4 fde6 	bl	8006814 <HAL_GetTick>
 8011c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011c4a:	e00a      	b.n	8011c62 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011c4c:	f7f4 fde2 	bl	8006814 <HAL_GetTick>
 8011c50:	4602      	mov	r2, r0
 8011c52:	693b      	ldr	r3, [r7, #16]
 8011c54:	1ad3      	subs	r3, r2, r3
 8011c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8011c5a:	4293      	cmp	r3, r2
 8011c5c:	d901      	bls.n	8011c62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8011c5e:	2303      	movs	r3, #3
 8011c60:	e0b5      	b.n	8011dce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011c62:	4b3e      	ldr	r3, [pc, #248]	; (8011d5c <HAL_RCC_OscConfig+0x470>)
 8011c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c66:	f003 0302 	and.w	r3, r3, #2
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d1ee      	bne.n	8011c4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8011c6e:	7dfb      	ldrb	r3, [r7, #23]
 8011c70:	2b01      	cmp	r3, #1
 8011c72:	d105      	bne.n	8011c80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8011c74:	4b39      	ldr	r3, [pc, #228]	; (8011d5c <HAL_RCC_OscConfig+0x470>)
 8011c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c78:	4a38      	ldr	r2, [pc, #224]	; (8011d5c <HAL_RCC_OscConfig+0x470>)
 8011c7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011c7e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	699b      	ldr	r3, [r3, #24]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	f000 80a1 	beq.w	8011dcc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8011c8a:	4b34      	ldr	r3, [pc, #208]	; (8011d5c <HAL_RCC_OscConfig+0x470>)
 8011c8c:	689b      	ldr	r3, [r3, #8]
 8011c8e:	f003 030c 	and.w	r3, r3, #12
 8011c92:	2b08      	cmp	r3, #8
 8011c94:	d05c      	beq.n	8011d50 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	699b      	ldr	r3, [r3, #24]
 8011c9a:	2b02      	cmp	r3, #2
 8011c9c:	d141      	bne.n	8011d22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011c9e:	4b31      	ldr	r3, [pc, #196]	; (8011d64 <HAL_RCC_OscConfig+0x478>)
 8011ca0:	2200      	movs	r2, #0
 8011ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011ca4:	f7f4 fdb6 	bl	8006814 <HAL_GetTick>
 8011ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011caa:	e008      	b.n	8011cbe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011cac:	f7f4 fdb2 	bl	8006814 <HAL_GetTick>
 8011cb0:	4602      	mov	r2, r0
 8011cb2:	693b      	ldr	r3, [r7, #16]
 8011cb4:	1ad3      	subs	r3, r2, r3
 8011cb6:	2b02      	cmp	r3, #2
 8011cb8:	d901      	bls.n	8011cbe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8011cba:	2303      	movs	r3, #3
 8011cbc:	e087      	b.n	8011dce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011cbe:	4b27      	ldr	r3, [pc, #156]	; (8011d5c <HAL_RCC_OscConfig+0x470>)
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d1f0      	bne.n	8011cac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	69da      	ldr	r2, [r3, #28]
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	6a1b      	ldr	r3, [r3, #32]
 8011cd2:	431a      	orrs	r2, r3
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cd8:	019b      	lsls	r3, r3, #6
 8011cda:	431a      	orrs	r2, r3
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ce0:	085b      	lsrs	r3, r3, #1
 8011ce2:	3b01      	subs	r3, #1
 8011ce4:	041b      	lsls	r3, r3, #16
 8011ce6:	431a      	orrs	r2, r3
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cec:	061b      	lsls	r3, r3, #24
 8011cee:	491b      	ldr	r1, [pc, #108]	; (8011d5c <HAL_RCC_OscConfig+0x470>)
 8011cf0:	4313      	orrs	r3, r2
 8011cf2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8011cf4:	4b1b      	ldr	r3, [pc, #108]	; (8011d64 <HAL_RCC_OscConfig+0x478>)
 8011cf6:	2201      	movs	r2, #1
 8011cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011cfa:	f7f4 fd8b 	bl	8006814 <HAL_GetTick>
 8011cfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011d00:	e008      	b.n	8011d14 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011d02:	f7f4 fd87 	bl	8006814 <HAL_GetTick>
 8011d06:	4602      	mov	r2, r0
 8011d08:	693b      	ldr	r3, [r7, #16]
 8011d0a:	1ad3      	subs	r3, r2, r3
 8011d0c:	2b02      	cmp	r3, #2
 8011d0e:	d901      	bls.n	8011d14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8011d10:	2303      	movs	r3, #3
 8011d12:	e05c      	b.n	8011dce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011d14:	4b11      	ldr	r3, [pc, #68]	; (8011d5c <HAL_RCC_OscConfig+0x470>)
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d0f0      	beq.n	8011d02 <HAL_RCC_OscConfig+0x416>
 8011d20:	e054      	b.n	8011dcc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011d22:	4b10      	ldr	r3, [pc, #64]	; (8011d64 <HAL_RCC_OscConfig+0x478>)
 8011d24:	2200      	movs	r2, #0
 8011d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011d28:	f7f4 fd74 	bl	8006814 <HAL_GetTick>
 8011d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011d2e:	e008      	b.n	8011d42 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011d30:	f7f4 fd70 	bl	8006814 <HAL_GetTick>
 8011d34:	4602      	mov	r2, r0
 8011d36:	693b      	ldr	r3, [r7, #16]
 8011d38:	1ad3      	subs	r3, r2, r3
 8011d3a:	2b02      	cmp	r3, #2
 8011d3c:	d901      	bls.n	8011d42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8011d3e:	2303      	movs	r3, #3
 8011d40:	e045      	b.n	8011dce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011d42:	4b06      	ldr	r3, [pc, #24]	; (8011d5c <HAL_RCC_OscConfig+0x470>)
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d1f0      	bne.n	8011d30 <HAL_RCC_OscConfig+0x444>
 8011d4e:	e03d      	b.n	8011dcc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	699b      	ldr	r3, [r3, #24]
 8011d54:	2b01      	cmp	r3, #1
 8011d56:	d107      	bne.n	8011d68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8011d58:	2301      	movs	r3, #1
 8011d5a:	e038      	b.n	8011dce <HAL_RCC_OscConfig+0x4e2>
 8011d5c:	40023800 	.word	0x40023800
 8011d60:	40007000 	.word	0x40007000
 8011d64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8011d68:	4b1b      	ldr	r3, [pc, #108]	; (8011dd8 <HAL_RCC_OscConfig+0x4ec>)
 8011d6a:	685b      	ldr	r3, [r3, #4]
 8011d6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	699b      	ldr	r3, [r3, #24]
 8011d72:	2b01      	cmp	r3, #1
 8011d74:	d028      	beq.n	8011dc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011d80:	429a      	cmp	r2, r3
 8011d82:	d121      	bne.n	8011dc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011d8e:	429a      	cmp	r2, r3
 8011d90:	d11a      	bne.n	8011dc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8011d92:	68fa      	ldr	r2, [r7, #12]
 8011d94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8011d98:	4013      	ands	r3, r2
 8011d9a:	687a      	ldr	r2, [r7, #4]
 8011d9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8011d9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8011da0:	4293      	cmp	r3, r2
 8011da2:	d111      	bne.n	8011dc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011dae:	085b      	lsrs	r3, r3, #1
 8011db0:	3b01      	subs	r3, #1
 8011db2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8011db4:	429a      	cmp	r2, r3
 8011db6:	d107      	bne.n	8011dc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011dc2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8011dc4:	429a      	cmp	r2, r3
 8011dc6:	d001      	beq.n	8011dcc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8011dc8:	2301      	movs	r3, #1
 8011dca:	e000      	b.n	8011dce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8011dcc:	2300      	movs	r3, #0
}
 8011dce:	4618      	mov	r0, r3
 8011dd0:	3718      	adds	r7, #24
 8011dd2:	46bd      	mov	sp, r7
 8011dd4:	bd80      	pop	{r7, pc}
 8011dd6:	bf00      	nop
 8011dd8:	40023800 	.word	0x40023800

08011ddc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011ddc:	b580      	push	{r7, lr}
 8011dde:	b084      	sub	sp, #16
 8011de0:	af00      	add	r7, sp, #0
 8011de2:	6078      	str	r0, [r7, #4]
 8011de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d101      	bne.n	8011df0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8011dec:	2301      	movs	r3, #1
 8011dee:	e0cc      	b.n	8011f8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8011df0:	4b68      	ldr	r3, [pc, #416]	; (8011f94 <HAL_RCC_ClockConfig+0x1b8>)
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	f003 0307 	and.w	r3, r3, #7
 8011df8:	683a      	ldr	r2, [r7, #0]
 8011dfa:	429a      	cmp	r2, r3
 8011dfc:	d90c      	bls.n	8011e18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011dfe:	4b65      	ldr	r3, [pc, #404]	; (8011f94 <HAL_RCC_ClockConfig+0x1b8>)
 8011e00:	683a      	ldr	r2, [r7, #0]
 8011e02:	b2d2      	uxtb	r2, r2
 8011e04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011e06:	4b63      	ldr	r3, [pc, #396]	; (8011f94 <HAL_RCC_ClockConfig+0x1b8>)
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	f003 0307 	and.w	r3, r3, #7
 8011e0e:	683a      	ldr	r2, [r7, #0]
 8011e10:	429a      	cmp	r2, r3
 8011e12:	d001      	beq.n	8011e18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8011e14:	2301      	movs	r3, #1
 8011e16:	e0b8      	b.n	8011f8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	f003 0302 	and.w	r3, r3, #2
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d020      	beq.n	8011e66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	f003 0304 	and.w	r3, r3, #4
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d005      	beq.n	8011e3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8011e30:	4b59      	ldr	r3, [pc, #356]	; (8011f98 <HAL_RCC_ClockConfig+0x1bc>)
 8011e32:	689b      	ldr	r3, [r3, #8]
 8011e34:	4a58      	ldr	r2, [pc, #352]	; (8011f98 <HAL_RCC_ClockConfig+0x1bc>)
 8011e36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8011e3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	f003 0308 	and.w	r3, r3, #8
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d005      	beq.n	8011e54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8011e48:	4b53      	ldr	r3, [pc, #332]	; (8011f98 <HAL_RCC_ClockConfig+0x1bc>)
 8011e4a:	689b      	ldr	r3, [r3, #8]
 8011e4c:	4a52      	ldr	r2, [pc, #328]	; (8011f98 <HAL_RCC_ClockConfig+0x1bc>)
 8011e4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8011e52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011e54:	4b50      	ldr	r3, [pc, #320]	; (8011f98 <HAL_RCC_ClockConfig+0x1bc>)
 8011e56:	689b      	ldr	r3, [r3, #8]
 8011e58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	689b      	ldr	r3, [r3, #8]
 8011e60:	494d      	ldr	r1, [pc, #308]	; (8011f98 <HAL_RCC_ClockConfig+0x1bc>)
 8011e62:	4313      	orrs	r3, r2
 8011e64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	f003 0301 	and.w	r3, r3, #1
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d044      	beq.n	8011efc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	685b      	ldr	r3, [r3, #4]
 8011e76:	2b01      	cmp	r3, #1
 8011e78:	d107      	bne.n	8011e8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011e7a:	4b47      	ldr	r3, [pc, #284]	; (8011f98 <HAL_RCC_ClockConfig+0x1bc>)
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d119      	bne.n	8011eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8011e86:	2301      	movs	r3, #1
 8011e88:	e07f      	b.n	8011f8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	685b      	ldr	r3, [r3, #4]
 8011e8e:	2b02      	cmp	r3, #2
 8011e90:	d003      	beq.n	8011e9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8011e96:	2b03      	cmp	r3, #3
 8011e98:	d107      	bne.n	8011eaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011e9a:	4b3f      	ldr	r3, [pc, #252]	; (8011f98 <HAL_RCC_ClockConfig+0x1bc>)
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d109      	bne.n	8011eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8011ea6:	2301      	movs	r3, #1
 8011ea8:	e06f      	b.n	8011f8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011eaa:	4b3b      	ldr	r3, [pc, #236]	; (8011f98 <HAL_RCC_ClockConfig+0x1bc>)
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	f003 0302 	and.w	r3, r3, #2
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d101      	bne.n	8011eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8011eb6:	2301      	movs	r3, #1
 8011eb8:	e067      	b.n	8011f8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8011eba:	4b37      	ldr	r3, [pc, #220]	; (8011f98 <HAL_RCC_ClockConfig+0x1bc>)
 8011ebc:	689b      	ldr	r3, [r3, #8]
 8011ebe:	f023 0203 	bic.w	r2, r3, #3
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	685b      	ldr	r3, [r3, #4]
 8011ec6:	4934      	ldr	r1, [pc, #208]	; (8011f98 <HAL_RCC_ClockConfig+0x1bc>)
 8011ec8:	4313      	orrs	r3, r2
 8011eca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8011ecc:	f7f4 fca2 	bl	8006814 <HAL_GetTick>
 8011ed0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011ed2:	e00a      	b.n	8011eea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011ed4:	f7f4 fc9e 	bl	8006814 <HAL_GetTick>
 8011ed8:	4602      	mov	r2, r0
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	1ad3      	subs	r3, r2, r3
 8011ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8011ee2:	4293      	cmp	r3, r2
 8011ee4:	d901      	bls.n	8011eea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8011ee6:	2303      	movs	r3, #3
 8011ee8:	e04f      	b.n	8011f8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011eea:	4b2b      	ldr	r3, [pc, #172]	; (8011f98 <HAL_RCC_ClockConfig+0x1bc>)
 8011eec:	689b      	ldr	r3, [r3, #8]
 8011eee:	f003 020c 	and.w	r2, r3, #12
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	685b      	ldr	r3, [r3, #4]
 8011ef6:	009b      	lsls	r3, r3, #2
 8011ef8:	429a      	cmp	r2, r3
 8011efa:	d1eb      	bne.n	8011ed4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8011efc:	4b25      	ldr	r3, [pc, #148]	; (8011f94 <HAL_RCC_ClockConfig+0x1b8>)
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	f003 0307 	and.w	r3, r3, #7
 8011f04:	683a      	ldr	r2, [r7, #0]
 8011f06:	429a      	cmp	r2, r3
 8011f08:	d20c      	bcs.n	8011f24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011f0a:	4b22      	ldr	r3, [pc, #136]	; (8011f94 <HAL_RCC_ClockConfig+0x1b8>)
 8011f0c:	683a      	ldr	r2, [r7, #0]
 8011f0e:	b2d2      	uxtb	r2, r2
 8011f10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011f12:	4b20      	ldr	r3, [pc, #128]	; (8011f94 <HAL_RCC_ClockConfig+0x1b8>)
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	f003 0307 	and.w	r3, r3, #7
 8011f1a:	683a      	ldr	r2, [r7, #0]
 8011f1c:	429a      	cmp	r2, r3
 8011f1e:	d001      	beq.n	8011f24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8011f20:	2301      	movs	r3, #1
 8011f22:	e032      	b.n	8011f8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	f003 0304 	and.w	r3, r3, #4
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d008      	beq.n	8011f42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8011f30:	4b19      	ldr	r3, [pc, #100]	; (8011f98 <HAL_RCC_ClockConfig+0x1bc>)
 8011f32:	689b      	ldr	r3, [r3, #8]
 8011f34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	68db      	ldr	r3, [r3, #12]
 8011f3c:	4916      	ldr	r1, [pc, #88]	; (8011f98 <HAL_RCC_ClockConfig+0x1bc>)
 8011f3e:	4313      	orrs	r3, r2
 8011f40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	f003 0308 	and.w	r3, r3, #8
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d009      	beq.n	8011f62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8011f4e:	4b12      	ldr	r3, [pc, #72]	; (8011f98 <HAL_RCC_ClockConfig+0x1bc>)
 8011f50:	689b      	ldr	r3, [r3, #8]
 8011f52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	691b      	ldr	r3, [r3, #16]
 8011f5a:	00db      	lsls	r3, r3, #3
 8011f5c:	490e      	ldr	r1, [pc, #56]	; (8011f98 <HAL_RCC_ClockConfig+0x1bc>)
 8011f5e:	4313      	orrs	r3, r2
 8011f60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8011f62:	f000 f8a1 	bl	80120a8 <HAL_RCC_GetSysClockFreq>
 8011f66:	4602      	mov	r2, r0
 8011f68:	4b0b      	ldr	r3, [pc, #44]	; (8011f98 <HAL_RCC_ClockConfig+0x1bc>)
 8011f6a:	689b      	ldr	r3, [r3, #8]
 8011f6c:	091b      	lsrs	r3, r3, #4
 8011f6e:	f003 030f 	and.w	r3, r3, #15
 8011f72:	490a      	ldr	r1, [pc, #40]	; (8011f9c <HAL_RCC_ClockConfig+0x1c0>)
 8011f74:	5ccb      	ldrb	r3, [r1, r3]
 8011f76:	fa22 f303 	lsr.w	r3, r2, r3
 8011f7a:	4a09      	ldr	r2, [pc, #36]	; (8011fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8011f7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8011f7e:	4b09      	ldr	r3, [pc, #36]	; (8011fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	4618      	mov	r0, r3
 8011f84:	f7f4 fc01 	bl	800678a <HAL_InitTick>

  return HAL_OK;
 8011f88:	2300      	movs	r3, #0
}
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	3710      	adds	r7, #16
 8011f8e:	46bd      	mov	sp, r7
 8011f90:	bd80      	pop	{r7, pc}
 8011f92:	bf00      	nop
 8011f94:	40023c00 	.word	0x40023c00
 8011f98:	40023800 	.word	0x40023800
 8011f9c:	08051ef8 	.word	0x08051ef8
 8011fa0:	20000058 	.word	0x20000058
 8011fa4:	2000005c 	.word	0x2000005c

08011fa8 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8011fa8:	b580      	push	{r7, lr}
 8011faa:	b08c      	sub	sp, #48	; 0x30
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	60f8      	str	r0, [r7, #12]
 8011fb0:	60b9      	str	r1, [r7, #8]
 8011fb2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d129      	bne.n	801200e <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8011fba:	2300      	movs	r3, #0
 8011fbc:	617b      	str	r3, [r7, #20]
 8011fbe:	4b2b      	ldr	r3, [pc, #172]	; (801206c <HAL_RCC_MCOConfig+0xc4>)
 8011fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011fc2:	4a2a      	ldr	r2, [pc, #168]	; (801206c <HAL_RCC_MCOConfig+0xc4>)
 8011fc4:	f043 0301 	orr.w	r3, r3, #1
 8011fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8011fca:	4b28      	ldr	r3, [pc, #160]	; (801206c <HAL_RCC_MCOConfig+0xc4>)
 8011fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011fce:	f003 0301 	and.w	r3, r3, #1
 8011fd2:	617b      	str	r3, [r7, #20]
 8011fd4:	697b      	ldr	r3, [r7, #20]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8011fd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011fda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011fdc:	2302      	movs	r3, #2
 8011fde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011fe0:	2303      	movs	r3, #3
 8011fe2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011fe4:	2300      	movs	r3, #0
 8011fe6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8011fe8:	2300      	movs	r3, #0
 8011fea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8011fec:	f107 031c 	add.w	r3, r7, #28
 8011ff0:	4619      	mov	r1, r3
 8011ff2:	481f      	ldr	r0, [pc, #124]	; (8012070 <HAL_RCC_MCOConfig+0xc8>)
 8011ff4:	f7f8 fd76 	bl	800aae4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8011ff8:	4b1c      	ldr	r3, [pc, #112]	; (801206c <HAL_RCC_MCOConfig+0xc4>)
 8011ffa:	689b      	ldr	r3, [r3, #8]
 8011ffc:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8012000:	68b9      	ldr	r1, [r7, #8]
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	430b      	orrs	r3, r1
 8012006:	4919      	ldr	r1, [pc, #100]	; (801206c <HAL_RCC_MCOConfig+0xc4>)
 8012008:	4313      	orrs	r3, r2
 801200a:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 801200c:	e029      	b.n	8012062 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 801200e:	2300      	movs	r3, #0
 8012010:	61bb      	str	r3, [r7, #24]
 8012012:	4b16      	ldr	r3, [pc, #88]	; (801206c <HAL_RCC_MCOConfig+0xc4>)
 8012014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012016:	4a15      	ldr	r2, [pc, #84]	; (801206c <HAL_RCC_MCOConfig+0xc4>)
 8012018:	f043 0304 	orr.w	r3, r3, #4
 801201c:	6313      	str	r3, [r2, #48]	; 0x30
 801201e:	4b13      	ldr	r3, [pc, #76]	; (801206c <HAL_RCC_MCOConfig+0xc4>)
 8012020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012022:	f003 0304 	and.w	r3, r3, #4
 8012026:	61bb      	str	r3, [r7, #24]
 8012028:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = MCO2_PIN;
 801202a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801202e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012030:	2302      	movs	r3, #2
 8012032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012034:	2303      	movs	r3, #3
 8012036:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012038:	2300      	movs	r3, #0
 801203a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 801203c:	2300      	movs	r3, #0
 801203e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8012040:	f107 031c 	add.w	r3, r7, #28
 8012044:	4619      	mov	r1, r3
 8012046:	480b      	ldr	r0, [pc, #44]	; (8012074 <HAL_RCC_MCOConfig+0xcc>)
 8012048:	f7f8 fd4c 	bl	800aae4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 801204c:	4b07      	ldr	r3, [pc, #28]	; (801206c <HAL_RCC_MCOConfig+0xc4>)
 801204e:	689b      	ldr	r3, [r3, #8]
 8012050:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	00d9      	lsls	r1, r3, #3
 8012058:	68bb      	ldr	r3, [r7, #8]
 801205a:	430b      	orrs	r3, r1
 801205c:	4903      	ldr	r1, [pc, #12]	; (801206c <HAL_RCC_MCOConfig+0xc4>)
 801205e:	4313      	orrs	r3, r2
 8012060:	608b      	str	r3, [r1, #8]
}
 8012062:	bf00      	nop
 8012064:	3730      	adds	r7, #48	; 0x30
 8012066:	46bd      	mov	sp, r7
 8012068:	bd80      	pop	{r7, pc}
 801206a:	bf00      	nop
 801206c:	40023800 	.word	0x40023800
 8012070:	40020000 	.word	0x40020000
 8012074:	40020800 	.word	0x40020800

08012078 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8012078:	b480      	push	{r7}
 801207a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 801207c:	4b03      	ldr	r3, [pc, #12]	; (801208c <HAL_RCC_EnableCSS+0x14>)
 801207e:	2201      	movs	r2, #1
 8012080:	601a      	str	r2, [r3, #0]
}
 8012082:	bf00      	nop
 8012084:	46bd      	mov	sp, r7
 8012086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801208a:	4770      	bx	lr
 801208c:	4247004c 	.word	0x4247004c

08012090 <HAL_RCC_DisableCSS>:
/**
  * @brief  Disables the Clock Security System.
  * @retval None
  */
void HAL_RCC_DisableCSS(void)
{
 8012090:	b480      	push	{r7}
 8012092:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
 8012094:	4b03      	ldr	r3, [pc, #12]	; (80120a4 <HAL_RCC_DisableCSS+0x14>)
 8012096:	2200      	movs	r2, #0
 8012098:	601a      	str	r2, [r3, #0]
}
 801209a:	bf00      	nop
 801209c:	46bd      	mov	sp, r7
 801209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a2:	4770      	bx	lr
 80120a4:	4247004c 	.word	0x4247004c

080120a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80120a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80120ac:	b094      	sub	sp, #80	; 0x50
 80120ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80120b0:	2300      	movs	r3, #0
 80120b2:	647b      	str	r3, [r7, #68]	; 0x44
 80120b4:	2300      	movs	r3, #0
 80120b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80120b8:	2300      	movs	r3, #0
 80120ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80120bc:	2300      	movs	r3, #0
 80120be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80120c0:	4b79      	ldr	r3, [pc, #484]	; (80122a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80120c2:	689b      	ldr	r3, [r3, #8]
 80120c4:	f003 030c 	and.w	r3, r3, #12
 80120c8:	2b08      	cmp	r3, #8
 80120ca:	d00d      	beq.n	80120e8 <HAL_RCC_GetSysClockFreq+0x40>
 80120cc:	2b08      	cmp	r3, #8
 80120ce:	f200 80e1 	bhi.w	8012294 <HAL_RCC_GetSysClockFreq+0x1ec>
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d002      	beq.n	80120dc <HAL_RCC_GetSysClockFreq+0x34>
 80120d6:	2b04      	cmp	r3, #4
 80120d8:	d003      	beq.n	80120e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80120da:	e0db      	b.n	8012294 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80120dc:	4b73      	ldr	r3, [pc, #460]	; (80122ac <HAL_RCC_GetSysClockFreq+0x204>)
 80120de:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80120e0:	e0db      	b.n	801229a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80120e2:	4b73      	ldr	r3, [pc, #460]	; (80122b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80120e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80120e6:	e0d8      	b.n	801229a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80120e8:	4b6f      	ldr	r3, [pc, #444]	; (80122a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80120ea:	685b      	ldr	r3, [r3, #4]
 80120ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80120f0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80120f2:	4b6d      	ldr	r3, [pc, #436]	; (80122a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80120f4:	685b      	ldr	r3, [r3, #4]
 80120f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d063      	beq.n	80121c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80120fe:	4b6a      	ldr	r3, [pc, #424]	; (80122a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8012100:	685b      	ldr	r3, [r3, #4]
 8012102:	099b      	lsrs	r3, r3, #6
 8012104:	2200      	movs	r2, #0
 8012106:	63bb      	str	r3, [r7, #56]	; 0x38
 8012108:	63fa      	str	r2, [r7, #60]	; 0x3c
 801210a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801210c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012110:	633b      	str	r3, [r7, #48]	; 0x30
 8012112:	2300      	movs	r3, #0
 8012114:	637b      	str	r3, [r7, #52]	; 0x34
 8012116:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 801211a:	4622      	mov	r2, r4
 801211c:	462b      	mov	r3, r5
 801211e:	f04f 0000 	mov.w	r0, #0
 8012122:	f04f 0100 	mov.w	r1, #0
 8012126:	0159      	lsls	r1, r3, #5
 8012128:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801212c:	0150      	lsls	r0, r2, #5
 801212e:	4602      	mov	r2, r0
 8012130:	460b      	mov	r3, r1
 8012132:	4621      	mov	r1, r4
 8012134:	1a51      	subs	r1, r2, r1
 8012136:	6139      	str	r1, [r7, #16]
 8012138:	4629      	mov	r1, r5
 801213a:	eb63 0301 	sbc.w	r3, r3, r1
 801213e:	617b      	str	r3, [r7, #20]
 8012140:	f04f 0200 	mov.w	r2, #0
 8012144:	f04f 0300 	mov.w	r3, #0
 8012148:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801214c:	4659      	mov	r1, fp
 801214e:	018b      	lsls	r3, r1, #6
 8012150:	4651      	mov	r1, sl
 8012152:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8012156:	4651      	mov	r1, sl
 8012158:	018a      	lsls	r2, r1, #6
 801215a:	4651      	mov	r1, sl
 801215c:	ebb2 0801 	subs.w	r8, r2, r1
 8012160:	4659      	mov	r1, fp
 8012162:	eb63 0901 	sbc.w	r9, r3, r1
 8012166:	f04f 0200 	mov.w	r2, #0
 801216a:	f04f 0300 	mov.w	r3, #0
 801216e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8012172:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8012176:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801217a:	4690      	mov	r8, r2
 801217c:	4699      	mov	r9, r3
 801217e:	4623      	mov	r3, r4
 8012180:	eb18 0303 	adds.w	r3, r8, r3
 8012184:	60bb      	str	r3, [r7, #8]
 8012186:	462b      	mov	r3, r5
 8012188:	eb49 0303 	adc.w	r3, r9, r3
 801218c:	60fb      	str	r3, [r7, #12]
 801218e:	f04f 0200 	mov.w	r2, #0
 8012192:	f04f 0300 	mov.w	r3, #0
 8012196:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 801219a:	4629      	mov	r1, r5
 801219c:	024b      	lsls	r3, r1, #9
 801219e:	4621      	mov	r1, r4
 80121a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80121a4:	4621      	mov	r1, r4
 80121a6:	024a      	lsls	r2, r1, #9
 80121a8:	4610      	mov	r0, r2
 80121aa:	4619      	mov	r1, r3
 80121ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80121ae:	2200      	movs	r2, #0
 80121b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80121b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80121b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80121b8:	f007 f99c 	bl	80194f4 <__aeabi_uldivmod>
 80121bc:	4602      	mov	r2, r0
 80121be:	460b      	mov	r3, r1
 80121c0:	4613      	mov	r3, r2
 80121c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80121c4:	e058      	b.n	8012278 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80121c6:	4b38      	ldr	r3, [pc, #224]	; (80122a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80121c8:	685b      	ldr	r3, [r3, #4]
 80121ca:	099b      	lsrs	r3, r3, #6
 80121cc:	2200      	movs	r2, #0
 80121ce:	4618      	mov	r0, r3
 80121d0:	4611      	mov	r1, r2
 80121d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80121d6:	623b      	str	r3, [r7, #32]
 80121d8:	2300      	movs	r3, #0
 80121da:	627b      	str	r3, [r7, #36]	; 0x24
 80121dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80121e0:	4642      	mov	r2, r8
 80121e2:	464b      	mov	r3, r9
 80121e4:	f04f 0000 	mov.w	r0, #0
 80121e8:	f04f 0100 	mov.w	r1, #0
 80121ec:	0159      	lsls	r1, r3, #5
 80121ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80121f2:	0150      	lsls	r0, r2, #5
 80121f4:	4602      	mov	r2, r0
 80121f6:	460b      	mov	r3, r1
 80121f8:	4641      	mov	r1, r8
 80121fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80121fe:	4649      	mov	r1, r9
 8012200:	eb63 0b01 	sbc.w	fp, r3, r1
 8012204:	f04f 0200 	mov.w	r2, #0
 8012208:	f04f 0300 	mov.w	r3, #0
 801220c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8012210:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8012214:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8012218:	ebb2 040a 	subs.w	r4, r2, sl
 801221c:	eb63 050b 	sbc.w	r5, r3, fp
 8012220:	f04f 0200 	mov.w	r2, #0
 8012224:	f04f 0300 	mov.w	r3, #0
 8012228:	00eb      	lsls	r3, r5, #3
 801222a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801222e:	00e2      	lsls	r2, r4, #3
 8012230:	4614      	mov	r4, r2
 8012232:	461d      	mov	r5, r3
 8012234:	4643      	mov	r3, r8
 8012236:	18e3      	adds	r3, r4, r3
 8012238:	603b      	str	r3, [r7, #0]
 801223a:	464b      	mov	r3, r9
 801223c:	eb45 0303 	adc.w	r3, r5, r3
 8012240:	607b      	str	r3, [r7, #4]
 8012242:	f04f 0200 	mov.w	r2, #0
 8012246:	f04f 0300 	mov.w	r3, #0
 801224a:	e9d7 4500 	ldrd	r4, r5, [r7]
 801224e:	4629      	mov	r1, r5
 8012250:	028b      	lsls	r3, r1, #10
 8012252:	4621      	mov	r1, r4
 8012254:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8012258:	4621      	mov	r1, r4
 801225a:	028a      	lsls	r2, r1, #10
 801225c:	4610      	mov	r0, r2
 801225e:	4619      	mov	r1, r3
 8012260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012262:	2200      	movs	r2, #0
 8012264:	61bb      	str	r3, [r7, #24]
 8012266:	61fa      	str	r2, [r7, #28]
 8012268:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801226c:	f007 f942 	bl	80194f4 <__aeabi_uldivmod>
 8012270:	4602      	mov	r2, r0
 8012272:	460b      	mov	r3, r1
 8012274:	4613      	mov	r3, r2
 8012276:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8012278:	4b0b      	ldr	r3, [pc, #44]	; (80122a8 <HAL_RCC_GetSysClockFreq+0x200>)
 801227a:	685b      	ldr	r3, [r3, #4]
 801227c:	0c1b      	lsrs	r3, r3, #16
 801227e:	f003 0303 	and.w	r3, r3, #3
 8012282:	3301      	adds	r3, #1
 8012284:	005b      	lsls	r3, r3, #1
 8012286:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8012288:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801228a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801228c:	fbb2 f3f3 	udiv	r3, r2, r3
 8012290:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8012292:	e002      	b.n	801229a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8012294:	4b05      	ldr	r3, [pc, #20]	; (80122ac <HAL_RCC_GetSysClockFreq+0x204>)
 8012296:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8012298:	bf00      	nop
    }
  }
  return sysclockfreq;
 801229a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 801229c:	4618      	mov	r0, r3
 801229e:	3750      	adds	r7, #80	; 0x50
 80122a0:	46bd      	mov	sp, r7
 80122a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80122a6:	bf00      	nop
 80122a8:	40023800 	.word	0x40023800
 80122ac:	00f42400 	.word	0x00f42400
 80122b0:	007a1200 	.word	0x007a1200

080122b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80122b4:	b480      	push	{r7}
 80122b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80122b8:	4b03      	ldr	r3, [pc, #12]	; (80122c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80122ba:	681b      	ldr	r3, [r3, #0]
}
 80122bc:	4618      	mov	r0, r3
 80122be:	46bd      	mov	sp, r7
 80122c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122c4:	4770      	bx	lr
 80122c6:	bf00      	nop
 80122c8:	20000058 	.word	0x20000058

080122cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80122cc:	b580      	push	{r7, lr}
 80122ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80122d0:	f7ff fff0 	bl	80122b4 <HAL_RCC_GetHCLKFreq>
 80122d4:	4602      	mov	r2, r0
 80122d6:	4b05      	ldr	r3, [pc, #20]	; (80122ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80122d8:	689b      	ldr	r3, [r3, #8]
 80122da:	0a9b      	lsrs	r3, r3, #10
 80122dc:	f003 0307 	and.w	r3, r3, #7
 80122e0:	4903      	ldr	r1, [pc, #12]	; (80122f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80122e2:	5ccb      	ldrb	r3, [r1, r3]
 80122e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80122e8:	4618      	mov	r0, r3
 80122ea:	bd80      	pop	{r7, pc}
 80122ec:	40023800 	.word	0x40023800
 80122f0:	08051f08 	.word	0x08051f08

080122f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80122f4:	b580      	push	{r7, lr}
 80122f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80122f8:	f7ff ffdc 	bl	80122b4 <HAL_RCC_GetHCLKFreq>
 80122fc:	4602      	mov	r2, r0
 80122fe:	4b05      	ldr	r3, [pc, #20]	; (8012314 <HAL_RCC_GetPCLK2Freq+0x20>)
 8012300:	689b      	ldr	r3, [r3, #8]
 8012302:	0b5b      	lsrs	r3, r3, #13
 8012304:	f003 0307 	and.w	r3, r3, #7
 8012308:	4903      	ldr	r1, [pc, #12]	; (8012318 <HAL_RCC_GetPCLK2Freq+0x24>)
 801230a:	5ccb      	ldrb	r3, [r1, r3]
 801230c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8012310:	4618      	mov	r0, r3
 8012312:	bd80      	pop	{r7, pc}
 8012314:	40023800 	.word	0x40023800
 8012318:	08051f08 	.word	0x08051f08

0801231c <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
  * will be configured.
  * @retval None
  */
__weak void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801231c:	b480      	push	{r7}
 801231e:	b083      	sub	sp, #12
 8012320:	af00      	add	r7, sp, #0
 8012322:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	220f      	movs	r2, #15
 8012328:	601a      	str	r2, [r3, #0]

  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 801232a:	4b45      	ldr	r3, [pc, #276]	; (8012440 <HAL_RCC_GetOscConfig+0x124>)
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012332:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8012336:	d104      	bne.n	8012342 <HAL_RCC_GetOscConfig+0x26>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 801233e:	605a      	str	r2, [r3, #4]
 8012340:	e00e      	b.n	8012360 <HAL_RCC_GetOscConfig+0x44>
  }
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 8012342:	4b3f      	ldr	r3, [pc, #252]	; (8012440 <HAL_RCC_GetOscConfig+0x124>)
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801234a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801234e:	d104      	bne.n	801235a <HAL_RCC_GetOscConfig+0x3e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8012356:	605a      	str	r2, [r3, #4]
 8012358:	e002      	b.n	8012360 <HAL_RCC_GetOscConfig+0x44>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	2200      	movs	r2, #0
 801235e:	605a      	str	r2, [r3, #4]
  }

  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 8012360:	4b37      	ldr	r3, [pc, #220]	; (8012440 <HAL_RCC_GetOscConfig+0x124>)
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	f003 0301 	and.w	r3, r3, #1
 8012368:	2b01      	cmp	r3, #1
 801236a:	d103      	bne.n	8012374 <HAL_RCC_GetOscConfig+0x58>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	2201      	movs	r2, #1
 8012370:	60da      	str	r2, [r3, #12]
 8012372:	e002      	b.n	801237a <HAL_RCC_GetOscConfig+0x5e>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	2200      	movs	r2, #0
 8012378:	60da      	str	r2, [r3, #12]
  }

  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
 801237a:	4b31      	ldr	r3, [pc, #196]	; (8012440 <HAL_RCC_GetOscConfig+0x124>)
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	08db      	lsrs	r3, r3, #3
 8012380:	f003 021f 	and.w	r2, r3, #31
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	611a      	str	r2, [r3, #16]

  /* Get the LSE configuration -----------------------------------------------*/
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 8012388:	4b2d      	ldr	r3, [pc, #180]	; (8012440 <HAL_RCC_GetOscConfig+0x124>)
 801238a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801238c:	f003 0304 	and.w	r3, r3, #4
 8012390:	2b04      	cmp	r3, #4
 8012392:	d103      	bne.n	801239c <HAL_RCC_GetOscConfig+0x80>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	2205      	movs	r2, #5
 8012398:	609a      	str	r2, [r3, #8]
 801239a:	e00c      	b.n	80123b6 <HAL_RCC_GetOscConfig+0x9a>
  }
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 801239c:	4b28      	ldr	r3, [pc, #160]	; (8012440 <HAL_RCC_GetOscConfig+0x124>)
 801239e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123a0:	f003 0301 	and.w	r3, r3, #1
 80123a4:	2b01      	cmp	r3, #1
 80123a6:	d103      	bne.n	80123b0 <HAL_RCC_GetOscConfig+0x94>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	2201      	movs	r2, #1
 80123ac:	609a      	str	r2, [r3, #8]
 80123ae:	e002      	b.n	80123b6 <HAL_RCC_GetOscConfig+0x9a>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	2200      	movs	r2, #0
 80123b4:	609a      	str	r2, [r3, #8]
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 80123b6:	4b22      	ldr	r3, [pc, #136]	; (8012440 <HAL_RCC_GetOscConfig+0x124>)
 80123b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80123ba:	f003 0301 	and.w	r3, r3, #1
 80123be:	2b01      	cmp	r3, #1
 80123c0:	d103      	bne.n	80123ca <HAL_RCC_GetOscConfig+0xae>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	2201      	movs	r2, #1
 80123c6:	615a      	str	r2, [r3, #20]
 80123c8:	e002      	b.n	80123d0 <HAL_RCC_GetOscConfig+0xb4>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	2200      	movs	r2, #0
 80123ce:	615a      	str	r2, [r3, #20]
  }

  /* Get the PLL configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 80123d0:	4b1b      	ldr	r3, [pc, #108]	; (8012440 <HAL_RCC_GetOscConfig+0x124>)
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80123d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80123dc:	d103      	bne.n	80123e6 <HAL_RCC_GetOscConfig+0xca>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	2202      	movs	r2, #2
 80123e2:	619a      	str	r2, [r3, #24]
 80123e4:	e002      	b.n	80123ec <HAL_RCC_GetOscConfig+0xd0>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	2201      	movs	r2, #1
 80123ea:	619a      	str	r2, [r3, #24]
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80123ec:	4b14      	ldr	r3, [pc, #80]	; (8012440 <HAL_RCC_GetOscConfig+0x124>)
 80123ee:	685b      	ldr	r3, [r3, #4]
 80123f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
 80123f8:	4b11      	ldr	r3, [pc, #68]	; (8012440 <HAL_RCC_GetOscConfig+0x124>)
 80123fa:	685b      	ldr	r3, [r3, #4]
 80123fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8012404:	4b0e      	ldr	r3, [pc, #56]	; (8012440 <HAL_RCC_GetOscConfig+0x124>)
 8012406:	685b      	ldr	r3, [r3, #4]
 8012408:	099b      	lsrs	r3, r3, #6
 801240a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0) << 1U) >> RCC_PLLCFGR_PLLP_Pos);
 8012412:	4b0b      	ldr	r3, [pc, #44]	; (8012440 <HAL_RCC_GetOscConfig+0x124>)
 8012414:	685b      	ldr	r3, [r3, #4]
 8012416:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801241a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 801241e:	005b      	lsls	r3, r3, #1
 8012420:	0c1a      	lsrs	r2, r3, #16
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos);
 8012426:	4b06      	ldr	r3, [pc, #24]	; (8012440 <HAL_RCC_GetOscConfig+0x124>)
 8012428:	685b      	ldr	r3, [r3, #4]
 801242a:	0e1b      	lsrs	r3, r3, #24
 801242c:	f003 020f 	and.w	r2, r3, #15
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8012434:	bf00      	nop
 8012436:	370c      	adds	r7, #12
 8012438:	46bd      	mov	sp, r7
 801243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801243e:	4770      	bx	lr
 8012440:	40023800 	.word	0x40023800

08012444 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8012444:	b480      	push	{r7}
 8012446:	b083      	sub	sp, #12
 8012448:	af00      	add	r7, sp, #0
 801244a:	6078      	str	r0, [r7, #4]
 801244c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	220f      	movs	r2, #15
 8012452:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8012454:	4b12      	ldr	r3, [pc, #72]	; (80124a0 <HAL_RCC_GetClockConfig+0x5c>)
 8012456:	689b      	ldr	r3, [r3, #8]
 8012458:	f003 0203 	and.w	r2, r3, #3
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8012460:	4b0f      	ldr	r3, [pc, #60]	; (80124a0 <HAL_RCC_GetClockConfig+0x5c>)
 8012462:	689b      	ldr	r3, [r3, #8]
 8012464:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 801246c:	4b0c      	ldr	r3, [pc, #48]	; (80124a0 <HAL_RCC_GetClockConfig+0x5c>)
 801246e:	689b      	ldr	r3, [r3, #8]
 8012470:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8012478:	4b09      	ldr	r3, [pc, #36]	; (80124a0 <HAL_RCC_GetClockConfig+0x5c>)
 801247a:	689b      	ldr	r3, [r3, #8]
 801247c:	08db      	lsrs	r3, r3, #3
 801247e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8012486:	4b07      	ldr	r3, [pc, #28]	; (80124a4 <HAL_RCC_GetClockConfig+0x60>)
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	f003 0207 	and.w	r2, r3, #7
 801248e:	683b      	ldr	r3, [r7, #0]
 8012490:	601a      	str	r2, [r3, #0]
}
 8012492:	bf00      	nop
 8012494:	370c      	adds	r7, #12
 8012496:	46bd      	mov	sp, r7
 8012498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801249c:	4770      	bx	lr
 801249e:	bf00      	nop
 80124a0:	40023800 	.word	0x40023800
 80124a4:	40023c00 	.word	0x40023c00

080124a8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80124a8:	b580      	push	{r7, lr}
 80124aa:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80124ac:	4b06      	ldr	r3, [pc, #24]	; (80124c8 <HAL_RCC_NMI_IRQHandler+0x20>)
 80124ae:	68db      	ldr	r3, [r3, #12]
 80124b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80124b4:	2b80      	cmp	r3, #128	; 0x80
 80124b6:	d104      	bne.n	80124c2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80124b8:	f000 f80a 	bl	80124d0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80124bc:	4b03      	ldr	r3, [pc, #12]	; (80124cc <HAL_RCC_NMI_IRQHandler+0x24>)
 80124be:	2280      	movs	r2, #128	; 0x80
 80124c0:	701a      	strb	r2, [r3, #0]
  }
}
 80124c2:	bf00      	nop
 80124c4:	bd80      	pop	{r7, pc}
 80124c6:	bf00      	nop
 80124c8:	40023800 	.word	0x40023800
 80124cc:	4002380e 	.word	0x4002380e

080124d0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80124d0:	b480      	push	{r7}
 80124d2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80124d4:	bf00      	nop
 80124d6:	46bd      	mov	sp, r7
 80124d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124dc:	4770      	bx	lr

080124de <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80124de:	b580      	push	{r7, lr}
 80124e0:	b086      	sub	sp, #24
 80124e2:	af00      	add	r7, sp, #0
 80124e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80124e6:	2300      	movs	r3, #0
 80124e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80124ea:	2300      	movs	r3, #0
 80124ec:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	f003 0301 	and.w	r3, r3, #1
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d105      	bne.n	8012506 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8012502:	2b00      	cmp	r3, #0
 8012504:	d035      	beq.n	8012572 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8012506:	4b62      	ldr	r3, [pc, #392]	; (8012690 <HAL_RCCEx_PeriphCLKConfig+0x1b2>)
 8012508:	2200      	movs	r2, #0
 801250a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801250c:	f7f4 f982 	bl	8006814 <HAL_GetTick>
 8012510:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8012512:	e008      	b.n	8012526 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8012514:	f7f4 f97e 	bl	8006814 <HAL_GetTick>
 8012518:	4602      	mov	r2, r0
 801251a:	697b      	ldr	r3, [r7, #20]
 801251c:	1ad3      	subs	r3, r2, r3
 801251e:	2b02      	cmp	r3, #2
 8012520:	d901      	bls.n	8012526 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8012522:	2303      	movs	r3, #3
 8012524:	e0b0      	b.n	8012688 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8012526:	4b5b      	ldr	r3, [pc, #364]	; (8012694 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801252e:	2b00      	cmp	r3, #0
 8012530:	d1f0      	bne.n	8012514 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	685b      	ldr	r3, [r3, #4]
 8012536:	019a      	lsls	r2, r3, #6
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	689b      	ldr	r3, [r3, #8]
 801253c:	071b      	lsls	r3, r3, #28
 801253e:	4955      	ldr	r1, [pc, #340]	; (8012694 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012540:	4313      	orrs	r3, r2
 8012542:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8012546:	4b52      	ldr	r3, [pc, #328]	; (8012690 <HAL_RCCEx_PeriphCLKConfig+0x1b2>)
 8012548:	2201      	movs	r2, #1
 801254a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801254c:	f7f4 f962 	bl	8006814 <HAL_GetTick>
 8012550:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8012552:	e008      	b.n	8012566 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8012554:	f7f4 f95e 	bl	8006814 <HAL_GetTick>
 8012558:	4602      	mov	r2, r0
 801255a:	697b      	ldr	r3, [r7, #20]
 801255c:	1ad3      	subs	r3, r2, r3
 801255e:	2b02      	cmp	r3, #2
 8012560:	d901      	bls.n	8012566 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8012562:	2303      	movs	r3, #3
 8012564:	e090      	b.n	8012688 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8012566:	4b4b      	ldr	r3, [pc, #300]	; (8012694 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801256e:	2b00      	cmp	r3, #0
 8012570:	d0f0      	beq.n	8012554 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	f003 0302 	and.w	r3, r3, #2
 801257a:	2b00      	cmp	r3, #0
 801257c:	f000 8083 	beq.w	8012686 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8012580:	2300      	movs	r3, #0
 8012582:	60fb      	str	r3, [r7, #12]
 8012584:	4b43      	ldr	r3, [pc, #268]	; (8012694 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012588:	4a42      	ldr	r2, [pc, #264]	; (8012694 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 801258a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801258e:	6413      	str	r3, [r2, #64]	; 0x40
 8012590:	4b40      	ldr	r3, [pc, #256]	; (8012694 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012598:	60fb      	str	r3, [r7, #12]
 801259a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 801259c:	4b3e      	ldr	r3, [pc, #248]	; (8012698 <HAL_RCCEx_PeriphCLKConfig+0x1ba>)
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	4a3d      	ldr	r2, [pc, #244]	; (8012698 <HAL_RCCEx_PeriphCLKConfig+0x1ba>)
 80125a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80125a6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80125a8:	f7f4 f934 	bl	8006814 <HAL_GetTick>
 80125ac:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80125ae:	e008      	b.n	80125c2 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80125b0:	f7f4 f930 	bl	8006814 <HAL_GetTick>
 80125b4:	4602      	mov	r2, r0
 80125b6:	697b      	ldr	r3, [r7, #20]
 80125b8:	1ad3      	subs	r3, r2, r3
 80125ba:	2b02      	cmp	r3, #2
 80125bc:	d901      	bls.n	80125c2 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80125be:	2303      	movs	r3, #3
 80125c0:	e062      	b.n	8012688 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80125c2:	4b35      	ldr	r3, [pc, #212]	; (8012698 <HAL_RCCEx_PeriphCLKConfig+0x1ba>)
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d0f0      	beq.n	80125b0 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80125ce:	4b31      	ldr	r3, [pc, #196]	; (8012694 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 80125d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80125d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80125d6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80125d8:	693b      	ldr	r3, [r7, #16]
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d02f      	beq.n	801263e <HAL_RCCEx_PeriphCLKConfig+0x160>
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	68db      	ldr	r3, [r3, #12]
 80125e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80125e6:	693a      	ldr	r2, [r7, #16]
 80125e8:	429a      	cmp	r2, r3
 80125ea:	d028      	beq.n	801263e <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80125ec:	4b29      	ldr	r3, [pc, #164]	; (8012694 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 80125ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80125f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80125f4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80125f6:	4b29      	ldr	r3, [pc, #164]	; (801269c <HAL_RCCEx_PeriphCLKConfig+0x1be>)
 80125f8:	2201      	movs	r2, #1
 80125fa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80125fc:	4b27      	ldr	r3, [pc, #156]	; (801269c <HAL_RCCEx_PeriphCLKConfig+0x1be>)
 80125fe:	2200      	movs	r2, #0
 8012600:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8012602:	4a24      	ldr	r2, [pc, #144]	; (8012694 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012604:	693b      	ldr	r3, [r7, #16]
 8012606:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8012608:	4b22      	ldr	r3, [pc, #136]	; (8012694 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 801260a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801260c:	f003 0301 	and.w	r3, r3, #1
 8012610:	2b01      	cmp	r3, #1
 8012612:	d114      	bne.n	801263e <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8012614:	f7f4 f8fe 	bl	8006814 <HAL_GetTick>
 8012618:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801261a:	e00a      	b.n	8012632 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801261c:	f7f4 f8fa 	bl	8006814 <HAL_GetTick>
 8012620:	4602      	mov	r2, r0
 8012622:	697b      	ldr	r3, [r7, #20]
 8012624:	1ad3      	subs	r3, r2, r3
 8012626:	f241 3288 	movw	r2, #5000	; 0x1388
 801262a:	4293      	cmp	r3, r2
 801262c:	d901      	bls.n	8012632 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 801262e:	2303      	movs	r3, #3
 8012630:	e02a      	b.n	8012688 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012632:	4b18      	ldr	r3, [pc, #96]	; (8012694 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012636:	f003 0302 	and.w	r3, r3, #2
 801263a:	2b00      	cmp	r3, #0
 801263c:	d0ee      	beq.n	801261c <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	68db      	ldr	r3, [r3, #12]
 8012642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012646:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801264a:	d10d      	bne.n	8012668 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 801264c:	4b11      	ldr	r3, [pc, #68]	; (8012694 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 801264e:	689b      	ldr	r3, [r3, #8]
 8012650:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	68db      	ldr	r3, [r3, #12]
 8012658:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801265c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012660:	490c      	ldr	r1, [pc, #48]	; (8012694 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012662:	4313      	orrs	r3, r2
 8012664:	608b      	str	r3, [r1, #8]
 8012666:	e005      	b.n	8012674 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8012668:	4b0a      	ldr	r3, [pc, #40]	; (8012694 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 801266a:	689b      	ldr	r3, [r3, #8]
 801266c:	4a09      	ldr	r2, [pc, #36]	; (8012694 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 801266e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8012672:	6093      	str	r3, [r2, #8]
 8012674:	4b07      	ldr	r3, [pc, #28]	; (8012694 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012676:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	68db      	ldr	r3, [r3, #12]
 801267c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012680:	4904      	ldr	r1, [pc, #16]	; (8012694 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012682:	4313      	orrs	r3, r2
 8012684:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8012686:	2300      	movs	r3, #0
}
 8012688:	4618      	mov	r0, r3
 801268a:	3718      	adds	r7, #24
 801268c:	46bd      	mov	sp, r7
 801268e:	bd80      	pop	{r7, pc}
 8012690:	42470068 	.word	0x42470068
 8012694:	40023800 	.word	0x40023800
 8012698:	40007000 	.word	0x40007000
 801269c:	42470e40 	.word	0x42470e40

080126a0 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80126a0:	b480      	push	{r7}
 80126a2:	b085      	sub	sp, #20
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	2203      	movs	r2, #3
 80126ac:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 80126ae:	4b11      	ldr	r3, [pc, #68]	; (80126f4 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80126b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80126b4:	099b      	lsrs	r3, r3, #6
 80126b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80126be:	4b0d      	ldr	r3, [pc, #52]	; (80126f4 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80126c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80126c4:	0f1b      	lsrs	r3, r3, #28
 80126c6:	f003 0207 	and.w	r2, r3, #7
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 80126ce:	4b09      	ldr	r3, [pc, #36]	; (80126f4 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80126d0:	689b      	ldr	r3, [r3, #8]
 80126d2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80126d6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 80126d8:	4b06      	ldr	r3, [pc, #24]	; (80126f4 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80126da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80126dc:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	431a      	orrs	r2, r3
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 80126e8:	bf00      	nop
 80126ea:	3714      	adds	r7, #20
 80126ec:	46bd      	mov	sp, r7
 80126ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126f2:	4770      	bx	lr
 80126f4:	40023800 	.word	0x40023800

080126f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80126f8:	b480      	push	{r7}
 80126fa:	b087      	sub	sp, #28
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8012700:	2300      	movs	r3, #0
 8012702:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8012704:	2300      	movs	r3, #0
 8012706:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8012708:	2300      	movs	r3, #0
 801270a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 801270c:	2300      	movs	r3, #0
 801270e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	2b01      	cmp	r3, #1
 8012714:	d13e      	bne.n	8012794 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8012716:	4b23      	ldr	r3, [pc, #140]	; (80127a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8012718:	689b      	ldr	r3, [r3, #8]
 801271a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801271e:	60fb      	str	r3, [r7, #12]
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	2b00      	cmp	r3, #0
 8012724:	d005      	beq.n	8012732 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	2b01      	cmp	r3, #1
 801272a:	d12f      	bne.n	801278c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 801272c:	4b1e      	ldr	r3, [pc, #120]	; (80127a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 801272e:	617b      	str	r3, [r7, #20]
          break;
 8012730:	e02f      	b.n	8012792 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8012732:	4b1c      	ldr	r3, [pc, #112]	; (80127a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8012734:	685b      	ldr	r3, [r3, #4]
 8012736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801273a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801273e:	d108      	bne.n	8012752 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8012740:	4b18      	ldr	r3, [pc, #96]	; (80127a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8012742:	685b      	ldr	r3, [r3, #4]
 8012744:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012748:	4a18      	ldr	r2, [pc, #96]	; (80127ac <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 801274a:	fbb2 f3f3 	udiv	r3, r2, r3
 801274e:	613b      	str	r3, [r7, #16]
 8012750:	e007      	b.n	8012762 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8012752:	4b14      	ldr	r3, [pc, #80]	; (80127a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8012754:	685b      	ldr	r3, [r3, #4]
 8012756:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801275a:	4a15      	ldr	r2, [pc, #84]	; (80127b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 801275c:	fbb2 f3f3 	udiv	r3, r2, r3
 8012760:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8012762:	4b10      	ldr	r3, [pc, #64]	; (80127a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8012764:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012768:	099b      	lsrs	r3, r3, #6
 801276a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801276e:	693b      	ldr	r3, [r7, #16]
 8012770:	fb02 f303 	mul.w	r3, r2, r3
 8012774:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8012776:	4b0b      	ldr	r3, [pc, #44]	; (80127a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8012778:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801277c:	0f1b      	lsrs	r3, r3, #28
 801277e:	f003 0307 	and.w	r3, r3, #7
 8012782:	68ba      	ldr	r2, [r7, #8]
 8012784:	fbb2 f3f3 	udiv	r3, r2, r3
 8012788:	617b      	str	r3, [r7, #20]
          break;
 801278a:	e002      	b.n	8012792 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 801278c:	2300      	movs	r3, #0
 801278e:	617b      	str	r3, [r7, #20]
          break;
 8012790:	bf00      	nop
        }
      }
      break;
 8012792:	bf00      	nop
    }
  }
  return frequency;
 8012794:	697b      	ldr	r3, [r7, #20]
}
 8012796:	4618      	mov	r0, r3
 8012798:	371c      	adds	r7, #28
 801279a:	46bd      	mov	sp, r7
 801279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127a0:	4770      	bx	lr
 80127a2:	bf00      	nop
 80127a4:	40023800 	.word	0x40023800
 80127a8:	00bb8000 	.word	0x00bb8000
 80127ac:	007a1200 	.word	0x007a1200
 80127b0:	00f42400 	.word	0x00f42400

080127b4 <HAL_RCCEx_EnablePLLI2S>:
  * @param  PLLI2SInit  pointer to an RCC_PLLI2SInitTypeDef structure that
  *         contains the configuration information for the PLLI2S
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_EnablePLLI2S(RCC_PLLI2SInitTypeDef  *PLLI2SInit)
{
 80127b4:	b580      	push	{r7, lr}
 80127b6:	b084      	sub	sp, #16
 80127b8:	af00      	add	r7, sp, #0
 80127ba:	6078      	str	r0, [r7, #4]
#if defined(RCC_PLLI2SCFGR_PLLI2SQ)
  assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SInit->PLLI2SQ));
#endif /* RCC_PLLI2SCFGR_PLLI2SQ */

  /* Disable the PLLI2S */
  __HAL_RCC_PLLI2S_DISABLE();
 80127bc:	4b1d      	ldr	r3, [pc, #116]	; (8012834 <HAL_RCCEx_EnablePLLI2S+0x80>)
 80127be:	2200      	movs	r2, #0
 80127c0:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is disabled */
  tickstart = HAL_GetTick();
 80127c2:	f7f4 f827 	bl	8006814 <HAL_GetTick>
 80127c6:	60f8      	str	r0, [r7, #12]
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
 80127c8:	e008      	b.n	80127dc <HAL_RCCEx_EnablePLLI2S+0x28>
  {
    if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80127ca:	f7f4 f823 	bl	8006814 <HAL_GetTick>
 80127ce:	4602      	mov	r2, r0
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	1ad3      	subs	r3, r2, r3
 80127d4:	2b02      	cmp	r3, #2
 80127d6:	d901      	bls.n	80127dc <HAL_RCCEx_EnablePLLI2S+0x28>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
 80127d8:	2303      	movs	r3, #3
 80127da:	e026      	b.n	801282a <HAL_RCCEx_EnablePLLI2S+0x76>
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
 80127dc:	4b16      	ldr	r3, [pc, #88]	; (8012838 <HAL_RCCEx_EnablePLLI2S+0x84>)
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d1f0      	bne.n	80127ca <HAL_RCCEx_EnablePLLI2S+0x16>
  /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
  __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PLLI2SInit->PLLI2SM, PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SR);
#else
  /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x PLLI2SN */
  /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
  __HAL_RCC_PLLI2S_CONFIG(PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SR);
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	019a      	lsls	r2, r3, #6
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	685b      	ldr	r3, [r3, #4]
 80127f2:	071b      	lsls	r3, r3, #28
 80127f4:	4910      	ldr	r1, [pc, #64]	; (8012838 <HAL_RCCEx_EnablePLLI2S+0x84>)
 80127f6:	4313      	orrs	r3, r2
 80127f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F446xx */

  /* Enable the PLLI2S */
  __HAL_RCC_PLLI2S_ENABLE();
 80127fc:	4b0d      	ldr	r3, [pc, #52]	; (8012834 <HAL_RCCEx_EnablePLLI2S+0x80>)
 80127fe:	2201      	movs	r2, #1
 8012800:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is ready */
  tickstart = HAL_GetTick();
 8012802:	f7f4 f807 	bl	8006814 <HAL_GetTick>
 8012806:	60f8      	str	r0, [r7, #12]
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
 8012808:	e008      	b.n	801281c <HAL_RCCEx_EnablePLLI2S+0x68>
  {
    if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 801280a:	f7f4 f803 	bl	8006814 <HAL_GetTick>
 801280e:	4602      	mov	r2, r0
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	1ad3      	subs	r3, r2, r3
 8012814:	2b02      	cmp	r3, #2
 8012816:	d901      	bls.n	801281c <HAL_RCCEx_EnablePLLI2S+0x68>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
 8012818:	2303      	movs	r3, #3
 801281a:	e006      	b.n	801282a <HAL_RCCEx_EnablePLLI2S+0x76>
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
 801281c:	4b06      	ldr	r3, [pc, #24]	; (8012838 <HAL_RCCEx_EnablePLLI2S+0x84>)
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012824:	2b00      	cmp	r3, #0
 8012826:	d0f0      	beq.n	801280a <HAL_RCCEx_EnablePLLI2S+0x56>
    }
  }

 return HAL_OK;
 8012828:	2300      	movs	r3, #0
}
 801282a:	4618      	mov	r0, r3
 801282c:	3710      	adds	r7, #16
 801282e:	46bd      	mov	sp, r7
 8012830:	bd80      	pop	{r7, pc}
 8012832:	bf00      	nop
 8012834:	42470068 	.word	0x42470068
 8012838:	40023800 	.word	0x40023800

0801283c <HAL_RCCEx_DisablePLLI2S>:
/**
  * @brief  Disable PLLI2S.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_DisablePLLI2S(void)
{
 801283c:	b580      	push	{r7, lr}
 801283e:	b082      	sub	sp, #8
 8012840:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Disable the PLLI2S */
  __HAL_RCC_PLLI2S_DISABLE();
 8012842:	4b0d      	ldr	r3, [pc, #52]	; (8012878 <HAL_RCCEx_DisablePLLI2S+0x3c>)
 8012844:	2200      	movs	r2, #0
 8012846:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is disabled */
  tickstart = HAL_GetTick();
 8012848:	f7f3 ffe4 	bl	8006814 <HAL_GetTick>
 801284c:	6078      	str	r0, [r7, #4]
  while(READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 801284e:	e008      	b.n	8012862 <HAL_RCCEx_DisablePLLI2S+0x26>
  {
    if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8012850:	f7f3 ffe0 	bl	8006814 <HAL_GetTick>
 8012854:	4602      	mov	r2, r0
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	1ad3      	subs	r3, r2, r3
 801285a:	2b02      	cmp	r3, #2
 801285c:	d901      	bls.n	8012862 <HAL_RCCEx_DisablePLLI2S+0x26>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
 801285e:	2303      	movs	r3, #3
 8012860:	e006      	b.n	8012870 <HAL_RCCEx_DisablePLLI2S+0x34>
  while(READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8012862:	4b06      	ldr	r3, [pc, #24]	; (801287c <HAL_RCCEx_DisablePLLI2S+0x40>)
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801286a:	2b00      	cmp	r3, #0
 801286c:	d1f0      	bne.n	8012850 <HAL_RCCEx_DisablePLLI2S+0x14>
    }
  }

  return HAL_OK;
 801286e:	2300      	movs	r3, #0
}
 8012870:	4618      	mov	r0, r3
 8012872:	3708      	adds	r7, #8
 8012874:	46bd      	mov	sp, r7
 8012876:	bd80      	pop	{r7, pc}
 8012878:	42470068 	.word	0x42470068
 801287c:	40023800 	.word	0x40023800

08012880 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8012880:	b580      	push	{r7, lr}
 8012882:	b082      	sub	sp, #8
 8012884:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8012886:	f7f3 ffc5 	bl	8006814 <HAL_GetTick>
 801288a:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 801288c:	4b5d      	ldr	r3, [pc, #372]	; (8012a04 <HAL_RCC_DeInit+0x184>)
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	4a5c      	ldr	r2, [pc, #368]	; (8012a04 <HAL_RCC_DeInit+0x184>)
 8012892:	f043 0301 	orr.w	r3, r3, #1
 8012896:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8012898:	e008      	b.n	80128ac <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801289a:	f7f3 ffbb 	bl	8006814 <HAL_GetTick>
 801289e:	4602      	mov	r2, r0
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	1ad3      	subs	r3, r2, r3
 80128a4:	2b02      	cmp	r3, #2
 80128a6:	d901      	bls.n	80128ac <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80128a8:	2303      	movs	r3, #3
 80128aa:	e0a7      	b.n	80129fc <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80128ac:	4b55      	ldr	r3, [pc, #340]	; (8012a04 <HAL_RCC_DeInit+0x184>)
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	f003 0302 	and.w	r3, r3, #2
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d0f0      	beq.n	801289a <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 80128b8:	4b52      	ldr	r3, [pc, #328]	; (8012a04 <HAL_RCC_DeInit+0x184>)
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	4a51      	ldr	r2, [pc, #324]	; (8012a04 <HAL_RCC_DeInit+0x184>)
 80128be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80128c2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80128c4:	f7f3 ffa6 	bl	8006814 <HAL_GetTick>
 80128c8:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80128ca:	4b4e      	ldr	r3, [pc, #312]	; (8012a04 <HAL_RCC_DeInit+0x184>)
 80128cc:	2200      	movs	r2, #0
 80128ce:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80128d0:	e00a      	b.n	80128e8 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80128d2:	f7f3 ff9f 	bl	8006814 <HAL_GetTick>
 80128d6:	4602      	mov	r2, r0
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	1ad3      	subs	r3, r2, r3
 80128dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80128e0:	4293      	cmp	r3, r2
 80128e2:	d901      	bls.n	80128e8 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 80128e4:	2303      	movs	r3, #3
 80128e6:	e089      	b.n	80129fc <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80128e8:	4b46      	ldr	r3, [pc, #280]	; (8012a04 <HAL_RCC_DeInit+0x184>)
 80128ea:	689b      	ldr	r3, [r3, #8]
 80128ec:	f003 030c 	and.w	r3, r3, #12
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d1ee      	bne.n	80128d2 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80128f4:	f7f3 ff8e 	bl	8006814 <HAL_GetTick>
 80128f8:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 80128fa:	4b42      	ldr	r3, [pc, #264]	; (8012a04 <HAL_RCC_DeInit+0x184>)
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	4a41      	ldr	r2, [pc, #260]	; (8012a04 <HAL_RCC_DeInit+0x184>)
 8012900:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8012904:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8012906:	e008      	b.n	801291a <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8012908:	f7f3 ff84 	bl	8006814 <HAL_GetTick>
 801290c:	4602      	mov	r2, r0
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	1ad3      	subs	r3, r2, r3
 8012912:	2b64      	cmp	r3, #100	; 0x64
 8012914:	d901      	bls.n	801291a <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8012916:	2303      	movs	r3, #3
 8012918:	e070      	b.n	80129fc <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 801291a:	4b3a      	ldr	r3, [pc, #232]	; (8012a04 <HAL_RCC_DeInit+0x184>)
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012922:	2b00      	cmp	r3, #0
 8012924:	d1f0      	bne.n	8012908 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8012926:	f7f3 ff75 	bl	8006814 <HAL_GetTick>
 801292a:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 801292c:	4b35      	ldr	r3, [pc, #212]	; (8012a04 <HAL_RCC_DeInit+0x184>)
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	4a34      	ldr	r2, [pc, #208]	; (8012a04 <HAL_RCC_DeInit+0x184>)
 8012932:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8012936:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8012938:	e008      	b.n	801294c <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801293a:	f7f3 ff6b 	bl	8006814 <HAL_GetTick>
 801293e:	4602      	mov	r2, r0
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	1ad3      	subs	r3, r2, r3
 8012944:	2b02      	cmp	r3, #2
 8012946:	d901      	bls.n	801294c <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8012948:	2303      	movs	r3, #3
 801294a:	e057      	b.n	80129fc <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 801294c:	4b2d      	ldr	r3, [pc, #180]	; (8012a04 <HAL_RCC_DeInit+0x184>)
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012954:	2b00      	cmp	r3, #0
 8012956:	d1f0      	bne.n	801293a <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8012958:	f7f3 ff5c 	bl	8006814 <HAL_GetTick>
 801295c:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 801295e:	4b29      	ldr	r3, [pc, #164]	; (8012a04 <HAL_RCC_DeInit+0x184>)
 8012960:	681b      	ldr	r3, [r3, #0]
 8012962:	4a28      	ldr	r2, [pc, #160]	; (8012a04 <HAL_RCC_DeInit+0x184>)
 8012964:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012968:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 801296a:	e008      	b.n	801297e <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 801296c:	f7f3 ff52 	bl	8006814 <HAL_GetTick>
 8012970:	4602      	mov	r2, r0
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	1ad3      	subs	r3, r2, r3
 8012976:	2b02      	cmp	r3, #2
 8012978:	d901      	bls.n	801297e <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 801297a:	2303      	movs	r3, #3
 801297c:	e03e      	b.n	80129fc <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 801297e:	4b21      	ldr	r3, [pc, #132]	; (8012a04 <HAL_RCC_DeInit+0x184>)
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012986:	2b00      	cmp	r3, #0
 8012988:	d1f0      	bne.n	801296c <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 801298a:	4b1e      	ldr	r3, [pc, #120]	; (8012a04 <HAL_RCC_DeInit+0x184>)
 801298c:	4a1e      	ldr	r2, [pc, #120]	; (8012a08 <HAL_RCC_DeInit+0x188>)
 801298e:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8012990:	4b1c      	ldr	r3, [pc, #112]	; (8012a04 <HAL_RCC_DeInit+0x184>)
 8012992:	4a1e      	ldr	r2, [pc, #120]	; (8012a0c <HAL_RCC_DeInit+0x18c>)
 8012994:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8012998:	4b1a      	ldr	r3, [pc, #104]	; (8012a04 <HAL_RCC_DeInit+0x184>)
 801299a:	68db      	ldr	r3, [r3, #12]
 801299c:	4a19      	ldr	r2, [pc, #100]	; (8012a04 <HAL_RCC_DeInit+0x184>)
 801299e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80129a2:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 80129a4:	4b17      	ldr	r3, [pc, #92]	; (8012a04 <HAL_RCC_DeInit+0x184>)
 80129a6:	68db      	ldr	r3, [r3, #12]
 80129a8:	4a16      	ldr	r2, [pc, #88]	; (8012a04 <HAL_RCC_DeInit+0x184>)
 80129aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80129ae:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 80129b0:	4b14      	ldr	r3, [pc, #80]	; (8012a04 <HAL_RCC_DeInit+0x184>)
 80129b2:	68db      	ldr	r3, [r3, #12]
 80129b4:	4a13      	ldr	r2, [pc, #76]	; (8012a04 <HAL_RCC_DeInit+0x184>)
 80129b6:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 80129ba:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 80129bc:	4b11      	ldr	r3, [pc, #68]	; (8012a04 <HAL_RCC_DeInit+0x184>)
 80129be:	68db      	ldr	r3, [r3, #12]
 80129c0:	4a10      	ldr	r2, [pc, #64]	; (8012a04 <HAL_RCC_DeInit+0x184>)
 80129c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80129c6:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80129c8:	4b0e      	ldr	r3, [pc, #56]	; (8012a04 <HAL_RCC_DeInit+0x184>)
 80129ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80129cc:	4a0d      	ldr	r2, [pc, #52]	; (8012a04 <HAL_RCC_DeInit+0x184>)
 80129ce:	f023 0301 	bic.w	r3, r3, #1
 80129d2:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80129d4:	4b0b      	ldr	r3, [pc, #44]	; (8012a04 <HAL_RCC_DeInit+0x184>)
 80129d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80129d8:	4a0a      	ldr	r2, [pc, #40]	; (8012a04 <HAL_RCC_DeInit+0x184>)
 80129da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80129de:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80129e0:	4b0b      	ldr	r3, [pc, #44]	; (8012a10 <HAL_RCC_DeInit+0x190>)
 80129e2:	4a0c      	ldr	r2, [pc, #48]	; (8012a14 <HAL_RCC_DeInit+0x194>)
 80129e4:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 80129e6:	4b0c      	ldr	r3, [pc, #48]	; (8012a18 <HAL_RCC_DeInit+0x198>)
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	4618      	mov	r0, r3
 80129ec:	f7f3 fecd 	bl	800678a <HAL_InitTick>
 80129f0:	4603      	mov	r3, r0
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d001      	beq.n	80129fa <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 80129f6:	2301      	movs	r3, #1
 80129f8:	e000      	b.n	80129fc <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 80129fa:	2300      	movs	r3, #0
  }
}
 80129fc:	4618      	mov	r0, r3
 80129fe:	3708      	adds	r7, #8
 8012a00:	46bd      	mov	sp, r7
 8012a02:	bd80      	pop	{r7, pc}
 8012a04:	40023800 	.word	0x40023800
 8012a08:	04003010 	.word	0x04003010
 8012a0c:	20003000 	.word	0x20003000
 8012a10:	20000058 	.word	0x20000058
 8012a14:	00f42400 	.word	0x00f42400
 8012a18:	2000005c 	.word	0x2000005c

08012a1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8012a1c:	b580      	push	{r7, lr}
 8012a1e:	b082      	sub	sp, #8
 8012a20:	af00      	add	r7, sp, #0
 8012a22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d101      	bne.n	8012a2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8012a2a:	2301      	movs	r3, #1
 8012a2c:	e07b      	b.n	8012b26 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d108      	bne.n	8012a48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	685b      	ldr	r3, [r3, #4]
 8012a3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012a3e:	d009      	beq.n	8012a54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	2200      	movs	r2, #0
 8012a44:	61da      	str	r2, [r3, #28]
 8012a46:	e005      	b.n	8012a54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	2200      	movs	r2, #0
 8012a4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	2200      	movs	r2, #0
 8012a52:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	2200      	movs	r2, #0
 8012a58:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012a60:	b2db      	uxtb	r3, r3
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d106      	bne.n	8012a74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	2200      	movs	r2, #0
 8012a6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8012a6e:	6878      	ldr	r0, [r7, #4]
 8012a70:	f7f2 ffc8 	bl	8005a04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	2202      	movs	r2, #2
 8012a78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	681a      	ldr	r2, [r3, #0]
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012a8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	685b      	ldr	r3, [r3, #4]
 8012a90:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	689b      	ldr	r3, [r3, #8]
 8012a98:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8012a9c:	431a      	orrs	r2, r3
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	68db      	ldr	r3, [r3, #12]
 8012aa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012aa6:	431a      	orrs	r2, r3
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	691b      	ldr	r3, [r3, #16]
 8012aac:	f003 0302 	and.w	r3, r3, #2
 8012ab0:	431a      	orrs	r2, r3
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	695b      	ldr	r3, [r3, #20]
 8012ab6:	f003 0301 	and.w	r3, r3, #1
 8012aba:	431a      	orrs	r2, r3
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	699b      	ldr	r3, [r3, #24]
 8012ac0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012ac4:	431a      	orrs	r2, r3
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	69db      	ldr	r3, [r3, #28]
 8012aca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012ace:	431a      	orrs	r2, r3
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	6a1b      	ldr	r3, [r3, #32]
 8012ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012ad8:	ea42 0103 	orr.w	r1, r2, r3
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ae0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	430a      	orrs	r2, r1
 8012aea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	699b      	ldr	r3, [r3, #24]
 8012af0:	0c1b      	lsrs	r3, r3, #16
 8012af2:	f003 0104 	and.w	r1, r3, #4
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012afa:	f003 0210 	and.w	r2, r3, #16
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	430a      	orrs	r2, r1
 8012b04:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	69da      	ldr	r2, [r3, #28]
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012b14:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	2200      	movs	r2, #0
 8012b1a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	2201      	movs	r2, #1
 8012b20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8012b24:	2300      	movs	r3, #0
}
 8012b26:	4618      	mov	r0, r3
 8012b28:	3708      	adds	r7, #8
 8012b2a:	46bd      	mov	sp, r7
 8012b2c:	bd80      	pop	{r7, pc}

08012b2e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8012b2e:	b580      	push	{r7, lr}
 8012b30:	b082      	sub	sp, #8
 8012b32:	af00      	add	r7, sp, #0
 8012b34:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d101      	bne.n	8012b40 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8012b3c:	2301      	movs	r3, #1
 8012b3e:	e01a      	b.n	8012b76 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	2202      	movs	r2, #2
 8012b44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	681a      	ldr	r2, [r3, #0]
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	681b      	ldr	r3, [r3, #0]
 8012b52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012b56:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8012b58:	6878      	ldr	r0, [r7, #4]
 8012b5a:	f7f3 f88b 	bl	8005c74 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	2200      	movs	r2, #0
 8012b62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	2200      	movs	r2, #0
 8012b68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	2200      	movs	r2, #0
 8012b70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8012b74:	2300      	movs	r3, #0
}
 8012b76:	4618      	mov	r0, r3
 8012b78:	3708      	adds	r7, #8
 8012b7a:	46bd      	mov	sp, r7
 8012b7c:	bd80      	pop	{r7, pc}

08012b7e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012b7e:	b580      	push	{r7, lr}
 8012b80:	b088      	sub	sp, #32
 8012b82:	af00      	add	r7, sp, #0
 8012b84:	60f8      	str	r0, [r7, #12]
 8012b86:	60b9      	str	r1, [r7, #8]
 8012b88:	603b      	str	r3, [r7, #0]
 8012b8a:	4613      	mov	r3, r2
 8012b8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8012b8e:	2300      	movs	r3, #0
 8012b90:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012b98:	2b01      	cmp	r3, #1
 8012b9a:	d101      	bne.n	8012ba0 <HAL_SPI_Transmit+0x22>
 8012b9c:	2302      	movs	r3, #2
 8012b9e:	e126      	b.n	8012dee <HAL_SPI_Transmit+0x270>
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	2201      	movs	r2, #1
 8012ba4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8012ba8:	f7f3 fe34 	bl	8006814 <HAL_GetTick>
 8012bac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8012bae:	88fb      	ldrh	r3, [r7, #6]
 8012bb0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8012bb2:	68fb      	ldr	r3, [r7, #12]
 8012bb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012bb8:	b2db      	uxtb	r3, r3
 8012bba:	2b01      	cmp	r3, #1
 8012bbc:	d002      	beq.n	8012bc4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8012bbe:	2302      	movs	r3, #2
 8012bc0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8012bc2:	e10b      	b.n	8012ddc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8012bc4:	68bb      	ldr	r3, [r7, #8]
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d002      	beq.n	8012bd0 <HAL_SPI_Transmit+0x52>
 8012bca:	88fb      	ldrh	r3, [r7, #6]
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d102      	bne.n	8012bd6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8012bd0:	2301      	movs	r3, #1
 8012bd2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8012bd4:	e102      	b.n	8012ddc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8012bd6:	68fb      	ldr	r3, [r7, #12]
 8012bd8:	2203      	movs	r2, #3
 8012bda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012bde:	68fb      	ldr	r3, [r7, #12]
 8012be0:	2200      	movs	r2, #0
 8012be2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	68ba      	ldr	r2, [r7, #8]
 8012be8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	88fa      	ldrh	r2, [r7, #6]
 8012bee:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	88fa      	ldrh	r2, [r7, #6]
 8012bf4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	2200      	movs	r2, #0
 8012bfa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	2200      	movs	r2, #0
 8012c00:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	2200      	movs	r2, #0
 8012c06:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	2200      	movs	r2, #0
 8012c0c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8012c0e:	68fb      	ldr	r3, [r7, #12]
 8012c10:	2200      	movs	r2, #0
 8012c12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	689b      	ldr	r3, [r3, #8]
 8012c18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012c1c:	d10f      	bne.n	8012c3e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	681a      	ldr	r2, [r3, #0]
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012c2c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	681a      	ldr	r2, [r3, #0]
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012c3c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012c3e:	68fb      	ldr	r3, [r7, #12]
 8012c40:	681b      	ldr	r3, [r3, #0]
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012c48:	2b40      	cmp	r3, #64	; 0x40
 8012c4a:	d007      	beq.n	8012c5c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	681a      	ldr	r2, [r3, #0]
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012c5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	68db      	ldr	r3, [r3, #12]
 8012c60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012c64:	d14b      	bne.n	8012cfe <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012c66:	68fb      	ldr	r3, [r7, #12]
 8012c68:	685b      	ldr	r3, [r3, #4]
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d002      	beq.n	8012c74 <HAL_SPI_Transmit+0xf6>
 8012c6e:	8afb      	ldrh	r3, [r7, #22]
 8012c70:	2b01      	cmp	r3, #1
 8012c72:	d13e      	bne.n	8012cf2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012c74:	68fb      	ldr	r3, [r7, #12]
 8012c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c78:	881a      	ldrh	r2, [r3, #0]
 8012c7a:	68fb      	ldr	r3, [r7, #12]
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8012c80:	68fb      	ldr	r3, [r7, #12]
 8012c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c84:	1c9a      	adds	r2, r3, #2
 8012c86:	68fb      	ldr	r3, [r7, #12]
 8012c88:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012c8e:	b29b      	uxth	r3, r3
 8012c90:	3b01      	subs	r3, #1
 8012c92:	b29a      	uxth	r2, r3
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8012c98:	e02b      	b.n	8012cf2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	689b      	ldr	r3, [r3, #8]
 8012ca0:	f003 0302 	and.w	r3, r3, #2
 8012ca4:	2b02      	cmp	r3, #2
 8012ca6:	d112      	bne.n	8012cce <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012ca8:	68fb      	ldr	r3, [r7, #12]
 8012caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cac:	881a      	ldrh	r2, [r3, #0]
 8012cae:	68fb      	ldr	r3, [r7, #12]
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cb8:	1c9a      	adds	r2, r3, #2
 8012cba:	68fb      	ldr	r3, [r7, #12]
 8012cbc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012cc2:	b29b      	uxth	r3, r3
 8012cc4:	3b01      	subs	r3, #1
 8012cc6:	b29a      	uxth	r2, r3
 8012cc8:	68fb      	ldr	r3, [r7, #12]
 8012cca:	86da      	strh	r2, [r3, #54]	; 0x36
 8012ccc:	e011      	b.n	8012cf2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012cce:	f7f3 fda1 	bl	8006814 <HAL_GetTick>
 8012cd2:	4602      	mov	r2, r0
 8012cd4:	69bb      	ldr	r3, [r7, #24]
 8012cd6:	1ad3      	subs	r3, r2, r3
 8012cd8:	683a      	ldr	r2, [r7, #0]
 8012cda:	429a      	cmp	r2, r3
 8012cdc:	d803      	bhi.n	8012ce6 <HAL_SPI_Transmit+0x168>
 8012cde:	683b      	ldr	r3, [r7, #0]
 8012ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ce4:	d102      	bne.n	8012cec <HAL_SPI_Transmit+0x16e>
 8012ce6:	683b      	ldr	r3, [r7, #0]
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d102      	bne.n	8012cf2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8012cec:	2303      	movs	r3, #3
 8012cee:	77fb      	strb	r3, [r7, #31]
          goto error;
 8012cf0:	e074      	b.n	8012ddc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012cf6:	b29b      	uxth	r3, r3
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d1ce      	bne.n	8012c9a <HAL_SPI_Transmit+0x11c>
 8012cfc:	e04c      	b.n	8012d98 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012cfe:	68fb      	ldr	r3, [r7, #12]
 8012d00:	685b      	ldr	r3, [r3, #4]
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d002      	beq.n	8012d0c <HAL_SPI_Transmit+0x18e>
 8012d06:	8afb      	ldrh	r3, [r7, #22]
 8012d08:	2b01      	cmp	r3, #1
 8012d0a:	d140      	bne.n	8012d8e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	330c      	adds	r3, #12
 8012d16:	7812      	ldrb	r2, [r2, #0]
 8012d18:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d1e:	1c5a      	adds	r2, r3, #1
 8012d20:	68fb      	ldr	r3, [r7, #12]
 8012d22:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012d28:	b29b      	uxth	r3, r3
 8012d2a:	3b01      	subs	r3, #1
 8012d2c:	b29a      	uxth	r2, r3
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8012d32:	e02c      	b.n	8012d8e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8012d34:	68fb      	ldr	r3, [r7, #12]
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	689b      	ldr	r3, [r3, #8]
 8012d3a:	f003 0302 	and.w	r3, r3, #2
 8012d3e:	2b02      	cmp	r3, #2
 8012d40:	d113      	bne.n	8012d6a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8012d42:	68fb      	ldr	r3, [r7, #12]
 8012d44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012d46:	68fb      	ldr	r3, [r7, #12]
 8012d48:	681b      	ldr	r3, [r3, #0]
 8012d4a:	330c      	adds	r3, #12
 8012d4c:	7812      	ldrb	r2, [r2, #0]
 8012d4e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d54:	1c5a      	adds	r2, r3, #1
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012d5e:	b29b      	uxth	r3, r3
 8012d60:	3b01      	subs	r3, #1
 8012d62:	b29a      	uxth	r2, r3
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	86da      	strh	r2, [r3, #54]	; 0x36
 8012d68:	e011      	b.n	8012d8e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012d6a:	f7f3 fd53 	bl	8006814 <HAL_GetTick>
 8012d6e:	4602      	mov	r2, r0
 8012d70:	69bb      	ldr	r3, [r7, #24]
 8012d72:	1ad3      	subs	r3, r2, r3
 8012d74:	683a      	ldr	r2, [r7, #0]
 8012d76:	429a      	cmp	r2, r3
 8012d78:	d803      	bhi.n	8012d82 <HAL_SPI_Transmit+0x204>
 8012d7a:	683b      	ldr	r3, [r7, #0]
 8012d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d80:	d102      	bne.n	8012d88 <HAL_SPI_Transmit+0x20a>
 8012d82:	683b      	ldr	r3, [r7, #0]
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d102      	bne.n	8012d8e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8012d88:	2303      	movs	r3, #3
 8012d8a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8012d8c:	e026      	b.n	8012ddc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012d92:	b29b      	uxth	r3, r3
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d1cd      	bne.n	8012d34 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8012d98:	69ba      	ldr	r2, [r7, #24]
 8012d9a:	6839      	ldr	r1, [r7, #0]
 8012d9c:	68f8      	ldr	r0, [r7, #12]
 8012d9e:	f001 ff3e 	bl	8014c1e <SPI_EndRxTxTransaction>
 8012da2:	4603      	mov	r3, r0
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d002      	beq.n	8012dae <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	2220      	movs	r2, #32
 8012dac:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	689b      	ldr	r3, [r3, #8]
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d10a      	bne.n	8012dcc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012db6:	2300      	movs	r3, #0
 8012db8:	613b      	str	r3, [r7, #16]
 8012dba:	68fb      	ldr	r3, [r7, #12]
 8012dbc:	681b      	ldr	r3, [r3, #0]
 8012dbe:	68db      	ldr	r3, [r3, #12]
 8012dc0:	613b      	str	r3, [r7, #16]
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	689b      	ldr	r3, [r3, #8]
 8012dc8:	613b      	str	r3, [r7, #16]
 8012dca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d002      	beq.n	8012dda <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8012dd4:	2301      	movs	r3, #1
 8012dd6:	77fb      	strb	r3, [r7, #31]
 8012dd8:	e000      	b.n	8012ddc <HAL_SPI_Transmit+0x25e>
  }

error:
 8012dda:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	2201      	movs	r2, #1
 8012de0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8012de4:	68fb      	ldr	r3, [r7, #12]
 8012de6:	2200      	movs	r2, #0
 8012de8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8012dec:	7ffb      	ldrb	r3, [r7, #31]
}
 8012dee:	4618      	mov	r0, r3
 8012df0:	3720      	adds	r7, #32
 8012df2:	46bd      	mov	sp, r7
 8012df4:	bd80      	pop	{r7, pc}

08012df6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012df6:	b580      	push	{r7, lr}
 8012df8:	b088      	sub	sp, #32
 8012dfa:	af02      	add	r7, sp, #8
 8012dfc:	60f8      	str	r0, [r7, #12]
 8012dfe:	60b9      	str	r1, [r7, #8]
 8012e00:	603b      	str	r3, [r7, #0]
 8012e02:	4613      	mov	r3, r2
 8012e04:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8012e06:	2300      	movs	r3, #0
 8012e08:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	685b      	ldr	r3, [r3, #4]
 8012e0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012e12:	d112      	bne.n	8012e3a <HAL_SPI_Receive+0x44>
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	689b      	ldr	r3, [r3, #8]
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d10e      	bne.n	8012e3a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	2204      	movs	r2, #4
 8012e20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8012e24:	88fa      	ldrh	r2, [r7, #6]
 8012e26:	683b      	ldr	r3, [r7, #0]
 8012e28:	9300      	str	r3, [sp, #0]
 8012e2a:	4613      	mov	r3, r2
 8012e2c:	68ba      	ldr	r2, [r7, #8]
 8012e2e:	68b9      	ldr	r1, [r7, #8]
 8012e30:	68f8      	ldr	r0, [r7, #12]
 8012e32:	f000 f8f1 	bl	8013018 <HAL_SPI_TransmitReceive>
 8012e36:	4603      	mov	r3, r0
 8012e38:	e0ea      	b.n	8013010 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012e40:	2b01      	cmp	r3, #1
 8012e42:	d101      	bne.n	8012e48 <HAL_SPI_Receive+0x52>
 8012e44:	2302      	movs	r3, #2
 8012e46:	e0e3      	b.n	8013010 <HAL_SPI_Receive+0x21a>
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	2201      	movs	r2, #1
 8012e4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8012e50:	f7f3 fce0 	bl	8006814 <HAL_GetTick>
 8012e54:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012e5c:	b2db      	uxtb	r3, r3
 8012e5e:	2b01      	cmp	r3, #1
 8012e60:	d002      	beq.n	8012e68 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8012e62:	2302      	movs	r3, #2
 8012e64:	75fb      	strb	r3, [r7, #23]
    goto error;
 8012e66:	e0ca      	b.n	8012ffe <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8012e68:	68bb      	ldr	r3, [r7, #8]
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d002      	beq.n	8012e74 <HAL_SPI_Receive+0x7e>
 8012e6e:	88fb      	ldrh	r3, [r7, #6]
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d102      	bne.n	8012e7a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8012e74:	2301      	movs	r3, #1
 8012e76:	75fb      	strb	r3, [r7, #23]
    goto error;
 8012e78:	e0c1      	b.n	8012ffe <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	2204      	movs	r2, #4
 8012e7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	2200      	movs	r2, #0
 8012e86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	68ba      	ldr	r2, [r7, #8]
 8012e8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	88fa      	ldrh	r2, [r7, #6]
 8012e92:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	88fa      	ldrh	r2, [r7, #6]
 8012e98:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	2200      	movs	r2, #0
 8012e9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	2200      	movs	r2, #0
 8012ea4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	2200      	movs	r2, #0
 8012eaa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8012eac:	68fb      	ldr	r3, [r7, #12]
 8012eae:	2200      	movs	r2, #0
 8012eb0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8012eb2:	68fb      	ldr	r3, [r7, #12]
 8012eb4:	2200      	movs	r2, #0
 8012eb6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	689b      	ldr	r3, [r3, #8]
 8012ebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012ec0:	d10f      	bne.n	8012ee2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	681b      	ldr	r3, [r3, #0]
 8012ec6:	681a      	ldr	r2, [r3, #0]
 8012ec8:	68fb      	ldr	r3, [r7, #12]
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012ed0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	681a      	ldr	r2, [r3, #0]
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8012ee0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012ee2:	68fb      	ldr	r3, [r7, #12]
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012eec:	2b40      	cmp	r3, #64	; 0x40
 8012eee:	d007      	beq.n	8012f00 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	681a      	ldr	r2, [r3, #0]
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012efe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8012f00:	68fb      	ldr	r3, [r7, #12]
 8012f02:	68db      	ldr	r3, [r3, #12]
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d162      	bne.n	8012fce <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8012f08:	e02e      	b.n	8012f68 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8012f0a:	68fb      	ldr	r3, [r7, #12]
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	689b      	ldr	r3, [r3, #8]
 8012f10:	f003 0301 	and.w	r3, r3, #1
 8012f14:	2b01      	cmp	r3, #1
 8012f16:	d115      	bne.n	8012f44 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8012f18:	68fb      	ldr	r3, [r7, #12]
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	f103 020c 	add.w	r2, r3, #12
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f24:	7812      	ldrb	r2, [r2, #0]
 8012f26:	b2d2      	uxtb	r2, r2
 8012f28:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f2e:	1c5a      	adds	r2, r3, #1
 8012f30:	68fb      	ldr	r3, [r7, #12]
 8012f32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012f38:	b29b      	uxth	r3, r3
 8012f3a:	3b01      	subs	r3, #1
 8012f3c:	b29a      	uxth	r2, r3
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	87da      	strh	r2, [r3, #62]	; 0x3e
 8012f42:	e011      	b.n	8012f68 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012f44:	f7f3 fc66 	bl	8006814 <HAL_GetTick>
 8012f48:	4602      	mov	r2, r0
 8012f4a:	693b      	ldr	r3, [r7, #16]
 8012f4c:	1ad3      	subs	r3, r2, r3
 8012f4e:	683a      	ldr	r2, [r7, #0]
 8012f50:	429a      	cmp	r2, r3
 8012f52:	d803      	bhi.n	8012f5c <HAL_SPI_Receive+0x166>
 8012f54:	683b      	ldr	r3, [r7, #0]
 8012f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f5a:	d102      	bne.n	8012f62 <HAL_SPI_Receive+0x16c>
 8012f5c:	683b      	ldr	r3, [r7, #0]
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d102      	bne.n	8012f68 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8012f62:	2303      	movs	r3, #3
 8012f64:	75fb      	strb	r3, [r7, #23]
          goto error;
 8012f66:	e04a      	b.n	8012ffe <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012f6c:	b29b      	uxth	r3, r3
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d1cb      	bne.n	8012f0a <HAL_SPI_Receive+0x114>
 8012f72:	e031      	b.n	8012fd8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	689b      	ldr	r3, [r3, #8]
 8012f7a:	f003 0301 	and.w	r3, r3, #1
 8012f7e:	2b01      	cmp	r3, #1
 8012f80:	d113      	bne.n	8012faa <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	68da      	ldr	r2, [r3, #12]
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f8c:	b292      	uxth	r2, r2
 8012f8e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f94:	1c9a      	adds	r2, r3, #2
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8012f9a:	68fb      	ldr	r3, [r7, #12]
 8012f9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012f9e:	b29b      	uxth	r3, r3
 8012fa0:	3b01      	subs	r3, #1
 8012fa2:	b29a      	uxth	r2, r3
 8012fa4:	68fb      	ldr	r3, [r7, #12]
 8012fa6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8012fa8:	e011      	b.n	8012fce <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012faa:	f7f3 fc33 	bl	8006814 <HAL_GetTick>
 8012fae:	4602      	mov	r2, r0
 8012fb0:	693b      	ldr	r3, [r7, #16]
 8012fb2:	1ad3      	subs	r3, r2, r3
 8012fb4:	683a      	ldr	r2, [r7, #0]
 8012fb6:	429a      	cmp	r2, r3
 8012fb8:	d803      	bhi.n	8012fc2 <HAL_SPI_Receive+0x1cc>
 8012fba:	683b      	ldr	r3, [r7, #0]
 8012fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fc0:	d102      	bne.n	8012fc8 <HAL_SPI_Receive+0x1d2>
 8012fc2:	683b      	ldr	r3, [r7, #0]
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d102      	bne.n	8012fce <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8012fc8:	2303      	movs	r3, #3
 8012fca:	75fb      	strb	r3, [r7, #23]
          goto error;
 8012fcc:	e017      	b.n	8012ffe <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012fd2:	b29b      	uxth	r3, r3
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d1cd      	bne.n	8012f74 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8012fd8:	693a      	ldr	r2, [r7, #16]
 8012fda:	6839      	ldr	r1, [r7, #0]
 8012fdc:	68f8      	ldr	r0, [r7, #12]
 8012fde:	f001 fdb9 	bl	8014b54 <SPI_EndRxTransaction>
 8012fe2:	4603      	mov	r3, r0
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d002      	beq.n	8012fee <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	2220      	movs	r2, #32
 8012fec:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d002      	beq.n	8012ffc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8012ff6:	2301      	movs	r3, #1
 8012ff8:	75fb      	strb	r3, [r7, #23]
 8012ffa:	e000      	b.n	8012ffe <HAL_SPI_Receive+0x208>
  }

error :
 8012ffc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	2201      	movs	r2, #1
 8013002:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	2200      	movs	r2, #0
 801300a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801300e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013010:	4618      	mov	r0, r3
 8013012:	3718      	adds	r7, #24
 8013014:	46bd      	mov	sp, r7
 8013016:	bd80      	pop	{r7, pc}

08013018 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8013018:	b580      	push	{r7, lr}
 801301a:	b08c      	sub	sp, #48	; 0x30
 801301c:	af00      	add	r7, sp, #0
 801301e:	60f8      	str	r0, [r7, #12]
 8013020:	60b9      	str	r1, [r7, #8]
 8013022:	607a      	str	r2, [r7, #4]
 8013024:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8013026:	2301      	movs	r3, #1
 8013028:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801302a:	2300      	movs	r3, #0
 801302c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013036:	2b01      	cmp	r3, #1
 8013038:	d101      	bne.n	801303e <HAL_SPI_TransmitReceive+0x26>
 801303a:	2302      	movs	r3, #2
 801303c:	e18a      	b.n	8013354 <HAL_SPI_TransmitReceive+0x33c>
 801303e:	68fb      	ldr	r3, [r7, #12]
 8013040:	2201      	movs	r2, #1
 8013042:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013046:	f7f3 fbe5 	bl	8006814 <HAL_GetTick>
 801304a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801304c:	68fb      	ldr	r3, [r7, #12]
 801304e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013052:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	685b      	ldr	r3, [r3, #4]
 801305a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 801305c:	887b      	ldrh	r3, [r7, #2]
 801305e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8013060:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013064:	2b01      	cmp	r3, #1
 8013066:	d00f      	beq.n	8013088 <HAL_SPI_TransmitReceive+0x70>
 8013068:	69fb      	ldr	r3, [r7, #28]
 801306a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801306e:	d107      	bne.n	8013080 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	689b      	ldr	r3, [r3, #8]
 8013074:	2b00      	cmp	r3, #0
 8013076:	d103      	bne.n	8013080 <HAL_SPI_TransmitReceive+0x68>
 8013078:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801307c:	2b04      	cmp	r3, #4
 801307e:	d003      	beq.n	8013088 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8013080:	2302      	movs	r3, #2
 8013082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8013086:	e15b      	b.n	8013340 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8013088:	68bb      	ldr	r3, [r7, #8]
 801308a:	2b00      	cmp	r3, #0
 801308c:	d005      	beq.n	801309a <HAL_SPI_TransmitReceive+0x82>
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	2b00      	cmp	r3, #0
 8013092:	d002      	beq.n	801309a <HAL_SPI_TransmitReceive+0x82>
 8013094:	887b      	ldrh	r3, [r7, #2]
 8013096:	2b00      	cmp	r3, #0
 8013098:	d103      	bne.n	80130a2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 801309a:	2301      	movs	r3, #1
 801309c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80130a0:	e14e      	b.n	8013340 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80130a8:	b2db      	uxtb	r3, r3
 80130aa:	2b04      	cmp	r3, #4
 80130ac:	d003      	beq.n	80130b6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	2205      	movs	r2, #5
 80130b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	2200      	movs	r2, #0
 80130ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	687a      	ldr	r2, [r7, #4]
 80130c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	887a      	ldrh	r2, [r7, #2]
 80130c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80130c8:	68fb      	ldr	r3, [r7, #12]
 80130ca:	887a      	ldrh	r2, [r7, #2]
 80130cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	68ba      	ldr	r2, [r7, #8]
 80130d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	887a      	ldrh	r2, [r7, #2]
 80130d8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	887a      	ldrh	r2, [r7, #2]
 80130de:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	2200      	movs	r2, #0
 80130e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80130e6:	68fb      	ldr	r3, [r7, #12]
 80130e8:	2200      	movs	r2, #0
 80130ea:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	681b      	ldr	r3, [r3, #0]
 80130f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80130f6:	2b40      	cmp	r3, #64	; 0x40
 80130f8:	d007      	beq.n	801310a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	681a      	ldr	r2, [r3, #0]
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	681b      	ldr	r3, [r3, #0]
 8013104:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013108:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	68db      	ldr	r3, [r3, #12]
 801310e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013112:	d178      	bne.n	8013206 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	685b      	ldr	r3, [r3, #4]
 8013118:	2b00      	cmp	r3, #0
 801311a:	d002      	beq.n	8013122 <HAL_SPI_TransmitReceive+0x10a>
 801311c:	8b7b      	ldrh	r3, [r7, #26]
 801311e:	2b01      	cmp	r3, #1
 8013120:	d166      	bne.n	80131f0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013126:	881a      	ldrh	r2, [r3, #0]
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	681b      	ldr	r3, [r3, #0]
 801312c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013132:	1c9a      	adds	r2, r3, #2
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801313c:	b29b      	uxth	r3, r3
 801313e:	3b01      	subs	r3, #1
 8013140:	b29a      	uxth	r2, r3
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013146:	e053      	b.n	80131f0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	689b      	ldr	r3, [r3, #8]
 801314e:	f003 0302 	and.w	r3, r3, #2
 8013152:	2b02      	cmp	r3, #2
 8013154:	d11b      	bne.n	801318e <HAL_SPI_TransmitReceive+0x176>
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801315a:	b29b      	uxth	r3, r3
 801315c:	2b00      	cmp	r3, #0
 801315e:	d016      	beq.n	801318e <HAL_SPI_TransmitReceive+0x176>
 8013160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013162:	2b01      	cmp	r3, #1
 8013164:	d113      	bne.n	801318e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801316a:	881a      	ldrh	r2, [r3, #0]
 801316c:	68fb      	ldr	r3, [r7, #12]
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8013172:	68fb      	ldr	r3, [r7, #12]
 8013174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013176:	1c9a      	adds	r2, r3, #2
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013180:	b29b      	uxth	r3, r3
 8013182:	3b01      	subs	r3, #1
 8013184:	b29a      	uxth	r2, r3
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801318a:	2300      	movs	r3, #0
 801318c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	689b      	ldr	r3, [r3, #8]
 8013194:	f003 0301 	and.w	r3, r3, #1
 8013198:	2b01      	cmp	r3, #1
 801319a:	d119      	bne.n	80131d0 <HAL_SPI_TransmitReceive+0x1b8>
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80131a0:	b29b      	uxth	r3, r3
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d014      	beq.n	80131d0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	68da      	ldr	r2, [r3, #12]
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80131b0:	b292      	uxth	r2, r2
 80131b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80131b4:	68fb      	ldr	r3, [r7, #12]
 80131b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80131b8:	1c9a      	adds	r2, r3, #2
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80131c2:	b29b      	uxth	r3, r3
 80131c4:	3b01      	subs	r3, #1
 80131c6:	b29a      	uxth	r2, r3
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80131cc:	2301      	movs	r3, #1
 80131ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80131d0:	f7f3 fb20 	bl	8006814 <HAL_GetTick>
 80131d4:	4602      	mov	r2, r0
 80131d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131d8:	1ad3      	subs	r3, r2, r3
 80131da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80131dc:	429a      	cmp	r2, r3
 80131de:	d807      	bhi.n	80131f0 <HAL_SPI_TransmitReceive+0x1d8>
 80131e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131e6:	d003      	beq.n	80131f0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80131e8:	2303      	movs	r3, #3
 80131ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80131ee:	e0a7      	b.n	8013340 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80131f0:	68fb      	ldr	r3, [r7, #12]
 80131f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80131f4:	b29b      	uxth	r3, r3
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d1a6      	bne.n	8013148 <HAL_SPI_TransmitReceive+0x130>
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80131fe:	b29b      	uxth	r3, r3
 8013200:	2b00      	cmp	r3, #0
 8013202:	d1a1      	bne.n	8013148 <HAL_SPI_TransmitReceive+0x130>
 8013204:	e07c      	b.n	8013300 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	685b      	ldr	r3, [r3, #4]
 801320a:	2b00      	cmp	r3, #0
 801320c:	d002      	beq.n	8013214 <HAL_SPI_TransmitReceive+0x1fc>
 801320e:	8b7b      	ldrh	r3, [r7, #26]
 8013210:	2b01      	cmp	r3, #1
 8013212:	d16b      	bne.n	80132ec <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	330c      	adds	r3, #12
 801321e:	7812      	ldrb	r2, [r2, #0]
 8013220:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8013222:	68fb      	ldr	r3, [r7, #12]
 8013224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013226:	1c5a      	adds	r2, r3, #1
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013230:	b29b      	uxth	r3, r3
 8013232:	3b01      	subs	r3, #1
 8013234:	b29a      	uxth	r2, r3
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801323a:	e057      	b.n	80132ec <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	689b      	ldr	r3, [r3, #8]
 8013242:	f003 0302 	and.w	r3, r3, #2
 8013246:	2b02      	cmp	r3, #2
 8013248:	d11c      	bne.n	8013284 <HAL_SPI_TransmitReceive+0x26c>
 801324a:	68fb      	ldr	r3, [r7, #12]
 801324c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801324e:	b29b      	uxth	r3, r3
 8013250:	2b00      	cmp	r3, #0
 8013252:	d017      	beq.n	8013284 <HAL_SPI_TransmitReceive+0x26c>
 8013254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013256:	2b01      	cmp	r3, #1
 8013258:	d114      	bne.n	8013284 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801325a:	68fb      	ldr	r3, [r7, #12]
 801325c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	330c      	adds	r3, #12
 8013264:	7812      	ldrb	r2, [r2, #0]
 8013266:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801326c:	1c5a      	adds	r2, r3, #1
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013276:	b29b      	uxth	r3, r3
 8013278:	3b01      	subs	r3, #1
 801327a:	b29a      	uxth	r2, r3
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8013280:	2300      	movs	r3, #0
 8013282:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	689b      	ldr	r3, [r3, #8]
 801328a:	f003 0301 	and.w	r3, r3, #1
 801328e:	2b01      	cmp	r3, #1
 8013290:	d119      	bne.n	80132c6 <HAL_SPI_TransmitReceive+0x2ae>
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013296:	b29b      	uxth	r3, r3
 8013298:	2b00      	cmp	r3, #0
 801329a:	d014      	beq.n	80132c6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	68da      	ldr	r2, [r3, #12]
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132a6:	b2d2      	uxtb	r2, r2
 80132a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132ae:	1c5a      	adds	r2, r3, #1
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80132b4:	68fb      	ldr	r3, [r7, #12]
 80132b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80132b8:	b29b      	uxth	r3, r3
 80132ba:	3b01      	subs	r3, #1
 80132bc:	b29a      	uxth	r2, r3
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80132c2:	2301      	movs	r3, #1
 80132c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80132c6:	f7f3 faa5 	bl	8006814 <HAL_GetTick>
 80132ca:	4602      	mov	r2, r0
 80132cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132ce:	1ad3      	subs	r3, r2, r3
 80132d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80132d2:	429a      	cmp	r2, r3
 80132d4:	d803      	bhi.n	80132de <HAL_SPI_TransmitReceive+0x2c6>
 80132d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132dc:	d102      	bne.n	80132e4 <HAL_SPI_TransmitReceive+0x2cc>
 80132de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d103      	bne.n	80132ec <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80132e4:	2303      	movs	r3, #3
 80132e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80132ea:	e029      	b.n	8013340 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80132f0:	b29b      	uxth	r3, r3
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d1a2      	bne.n	801323c <HAL_SPI_TransmitReceive+0x224>
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80132fa:	b29b      	uxth	r3, r3
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d19d      	bne.n	801323c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013302:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013304:	68f8      	ldr	r0, [r7, #12]
 8013306:	f001 fc8a 	bl	8014c1e <SPI_EndRxTxTransaction>
 801330a:	4603      	mov	r3, r0
 801330c:	2b00      	cmp	r3, #0
 801330e:	d006      	beq.n	801331e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8013310:	2301      	movs	r3, #1
 8013312:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	2220      	movs	r2, #32
 801331a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 801331c:	e010      	b.n	8013340 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	689b      	ldr	r3, [r3, #8]
 8013322:	2b00      	cmp	r3, #0
 8013324:	d10b      	bne.n	801333e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013326:	2300      	movs	r3, #0
 8013328:	617b      	str	r3, [r7, #20]
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	681b      	ldr	r3, [r3, #0]
 801332e:	68db      	ldr	r3, [r3, #12]
 8013330:	617b      	str	r3, [r7, #20]
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	689b      	ldr	r3, [r3, #8]
 8013338:	617b      	str	r3, [r7, #20]
 801333a:	697b      	ldr	r3, [r7, #20]
 801333c:	e000      	b.n	8013340 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 801333e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	2201      	movs	r2, #1
 8013344:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	2200      	movs	r2, #0
 801334c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013350:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8013354:	4618      	mov	r0, r3
 8013356:	3730      	adds	r7, #48	; 0x30
 8013358:	46bd      	mov	sp, r7
 801335a:	bd80      	pop	{r7, pc}

0801335c <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 801335c:	b480      	push	{r7}
 801335e:	b087      	sub	sp, #28
 8013360:	af00      	add	r7, sp, #0
 8013362:	60f8      	str	r0, [r7, #12]
 8013364:	60b9      	str	r1, [r7, #8]
 8013366:	4613      	mov	r3, r2
 8013368:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 801336a:	2300      	movs	r3, #0
 801336c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801336e:	68fb      	ldr	r3, [r7, #12]
 8013370:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013374:	2b01      	cmp	r3, #1
 8013376:	d101      	bne.n	801337c <HAL_SPI_Transmit_IT+0x20>
 8013378:	2302      	movs	r3, #2
 801337a:	e06f      	b.n	801345c <HAL_SPI_Transmit_IT+0x100>
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	2201      	movs	r2, #1
 8013380:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8013384:	68bb      	ldr	r3, [r7, #8]
 8013386:	2b00      	cmp	r3, #0
 8013388:	d002      	beq.n	8013390 <HAL_SPI_Transmit_IT+0x34>
 801338a:	88fb      	ldrh	r3, [r7, #6]
 801338c:	2b00      	cmp	r3, #0
 801338e:	d102      	bne.n	8013396 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8013390:	2301      	movs	r3, #1
 8013392:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013394:	e05d      	b.n	8013452 <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801339c:	b2db      	uxtb	r3, r3
 801339e:	2b01      	cmp	r3, #1
 80133a0:	d002      	beq.n	80133a8 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80133a2:	2302      	movs	r3, #2
 80133a4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80133a6:	e054      	b.n	8013452 <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	2203      	movs	r2, #3
 80133ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	2200      	movs	r2, #0
 80133b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	68ba      	ldr	r2, [r7, #8]
 80133ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	88fa      	ldrh	r2, [r7, #6]
 80133c0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	88fa      	ldrh	r2, [r7, #6]
 80133c6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	2200      	movs	r2, #0
 80133cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80133ce:	68fb      	ldr	r3, [r7, #12]
 80133d0:	2200      	movs	r2, #0
 80133d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	2200      	movs	r2, #0
 80133d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	2200      	movs	r2, #0
 80133de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	68db      	ldr	r3, [r3, #12]
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d003      	beq.n	80133f0 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	4a1f      	ldr	r2, [pc, #124]	; (8013468 <HAL_SPI_Transmit_IT+0x10c>)
 80133ec:	645a      	str	r2, [r3, #68]	; 0x44
 80133ee:	e002      	b.n	80133f6 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	4a1e      	ldr	r2, [pc, #120]	; (801346c <HAL_SPI_Transmit_IT+0x110>)
 80133f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	689b      	ldr	r3, [r3, #8]
 80133fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80133fe:	d10f      	bne.n	8013420 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	681a      	ldr	r2, [r3, #0]
 8013406:	68fb      	ldr	r3, [r7, #12]
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801340e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8013410:	68fb      	ldr	r3, [r7, #12]
 8013412:	681b      	ldr	r3, [r3, #0]
 8013414:	681a      	ldr	r2, [r3, #0]
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801341e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	685a      	ldr	r2, [r3, #4]
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	681b      	ldr	r3, [r3, #0]
 801342a:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 801342e:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	681b      	ldr	r3, [r3, #0]
 8013434:	681b      	ldr	r3, [r3, #0]
 8013436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801343a:	2b40      	cmp	r3, #64	; 0x40
 801343c:	d008      	beq.n	8013450 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	681a      	ldr	r2, [r3, #0]
 8013444:	68fb      	ldr	r3, [r7, #12]
 8013446:	681b      	ldr	r3, [r3, #0]
 8013448:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801344c:	601a      	str	r2, [r3, #0]
 801344e:	e000      	b.n	8013452 <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 8013450:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8013452:	68fb      	ldr	r3, [r7, #12]
 8013454:	2200      	movs	r2, #0
 8013456:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801345a:	7dfb      	ldrb	r3, [r7, #23]
}
 801345c:	4618      	mov	r0, r3
 801345e:	371c      	adds	r7, #28
 8013460:	46bd      	mov	sp, r7
 8013462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013466:	4770      	bx	lr
 8013468:	08014a01 	.word	0x08014a01
 801346c:	080149bb 	.word	0x080149bb

08013470 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8013470:	b580      	push	{r7, lr}
 8013472:	b086      	sub	sp, #24
 8013474:	af00      	add	r7, sp, #0
 8013476:	60f8      	str	r0, [r7, #12]
 8013478:	60b9      	str	r1, [r7, #8]
 801347a:	4613      	mov	r3, r2
 801347c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 801347e:	2300      	movs	r3, #0
 8013480:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	689b      	ldr	r3, [r3, #8]
 8013486:	2b00      	cmp	r3, #0
 8013488:	d110      	bne.n	80134ac <HAL_SPI_Receive_IT+0x3c>
 801348a:	68fb      	ldr	r3, [r7, #12]
 801348c:	685b      	ldr	r3, [r3, #4]
 801348e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013492:	d10b      	bne.n	80134ac <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	2204      	movs	r2, #4
 8013498:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 801349c:	88fb      	ldrh	r3, [r7, #6]
 801349e:	68ba      	ldr	r2, [r7, #8]
 80134a0:	68b9      	ldr	r1, [r7, #8]
 80134a2:	68f8      	ldr	r0, [r7, #12]
 80134a4:	f000 f882 	bl	80135ac <HAL_SPI_TransmitReceive_IT>
 80134a8:	4603      	mov	r3, r0
 80134aa:	e076      	b.n	801359a <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80134b2:	2b01      	cmp	r3, #1
 80134b4:	d101      	bne.n	80134ba <HAL_SPI_Receive_IT+0x4a>
 80134b6:	2302      	movs	r3, #2
 80134b8:	e06f      	b.n	801359a <HAL_SPI_Receive_IT+0x12a>
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	2201      	movs	r2, #1
 80134be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80134c8:	b2db      	uxtb	r3, r3
 80134ca:	2b01      	cmp	r3, #1
 80134cc:	d002      	beq.n	80134d4 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 80134ce:	2302      	movs	r3, #2
 80134d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80134d2:	e05d      	b.n	8013590 <HAL_SPI_Receive_IT+0x120>
  }

  if ((pData == NULL) || (Size == 0U))
 80134d4:	68bb      	ldr	r3, [r7, #8]
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d002      	beq.n	80134e0 <HAL_SPI_Receive_IT+0x70>
 80134da:	88fb      	ldrh	r3, [r7, #6]
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d102      	bne.n	80134e6 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 80134e0:	2301      	movs	r3, #1
 80134e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80134e4:	e054      	b.n	8013590 <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	2204      	movs	r2, #4
 80134ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	2200      	movs	r2, #0
 80134f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	68ba      	ldr	r2, [r7, #8]
 80134f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	88fa      	ldrh	r2, [r7, #6]
 80134fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8013500:	68fb      	ldr	r3, [r7, #12]
 8013502:	88fa      	ldrh	r2, [r7, #6]
 8013504:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	2200      	movs	r2, #0
 801350a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	2200      	movs	r2, #0
 8013510:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	2200      	movs	r2, #0
 8013516:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 8013518:	68fb      	ldr	r3, [r7, #12]
 801351a:	2200      	movs	r2, #0
 801351c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	68db      	ldr	r3, [r3, #12]
 8013522:	2b00      	cmp	r3, #0
 8013524:	d003      	beq.n	801352e <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	4a1e      	ldr	r2, [pc, #120]	; (80135a4 <HAL_SPI_Receive_IT+0x134>)
 801352a:	641a      	str	r2, [r3, #64]	; 0x40
 801352c:	e002      	b.n	8013534 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	4a1d      	ldr	r2, [pc, #116]	; (80135a8 <HAL_SPI_Receive_IT+0x138>)
 8013532:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	689b      	ldr	r3, [r3, #8]
 8013538:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801353c:	d10f      	bne.n	801355e <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	681a      	ldr	r2, [r3, #0]
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	681b      	ldr	r3, [r3, #0]
 8013548:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801354c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	681a      	ldr	r2, [r3, #0]
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	681b      	ldr	r3, [r3, #0]
 8013558:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801355c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	685a      	ldr	r2, [r3, #4]
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 801356c:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801356e:	68fb      	ldr	r3, [r7, #12]
 8013570:	681b      	ldr	r3, [r3, #0]
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013578:	2b40      	cmp	r3, #64	; 0x40
 801357a:	d008      	beq.n	801358e <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	681b      	ldr	r3, [r3, #0]
 8013580:	681a      	ldr	r2, [r3, #0]
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801358a:	601a      	str	r2, [r3, #0]
 801358c:	e000      	b.n	8013590 <HAL_SPI_Receive_IT+0x120>
  }

error :
 801358e:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	2200      	movs	r2, #0
 8013594:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013598:	7dfb      	ldrb	r3, [r7, #23]
}
 801359a:	4618      	mov	r0, r3
 801359c:	3718      	adds	r7, #24
 801359e:	46bd      	mov	sp, r7
 80135a0:	bd80      	pop	{r7, pc}
 80135a2:	bf00      	nop
 80135a4:	08014975 	.word	0x08014975
 80135a8:	0801492b 	.word	0x0801492b

080135ac <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80135ac:	b480      	push	{r7}
 80135ae:	b087      	sub	sp, #28
 80135b0:	af00      	add	r7, sp, #0
 80135b2:	60f8      	str	r0, [r7, #12]
 80135b4:	60b9      	str	r1, [r7, #8]
 80135b6:	607a      	str	r2, [r7, #4]
 80135b8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80135ba:	2300      	movs	r3, #0
 80135bc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80135c4:	2b01      	cmp	r3, #1
 80135c6:	d101      	bne.n	80135cc <HAL_SPI_TransmitReceive_IT+0x20>
 80135c8:	2302      	movs	r3, #2
 80135ca:	e075      	b.n	80136b8 <HAL_SPI_TransmitReceive_IT+0x10c>
 80135cc:	68fb      	ldr	r3, [r7, #12]
 80135ce:	2201      	movs	r2, #1
 80135d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80135da:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	685b      	ldr	r3, [r3, #4]
 80135e0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80135e2:	7dbb      	ldrb	r3, [r7, #22]
 80135e4:	2b01      	cmp	r3, #1
 80135e6:	d00d      	beq.n	8013604 <HAL_SPI_TransmitReceive_IT+0x58>
 80135e8:	693b      	ldr	r3, [r7, #16]
 80135ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80135ee:	d106      	bne.n	80135fe <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	689b      	ldr	r3, [r3, #8]
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d102      	bne.n	80135fe <HAL_SPI_TransmitReceive_IT+0x52>
 80135f8:	7dbb      	ldrb	r3, [r7, #22]
 80135fa:	2b04      	cmp	r3, #4
 80135fc:	d002      	beq.n	8013604 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 80135fe:	2302      	movs	r3, #2
 8013600:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013602:	e054      	b.n	80136ae <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8013604:	68bb      	ldr	r3, [r7, #8]
 8013606:	2b00      	cmp	r3, #0
 8013608:	d005      	beq.n	8013616 <HAL_SPI_TransmitReceive_IT+0x6a>
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	2b00      	cmp	r3, #0
 801360e:	d002      	beq.n	8013616 <HAL_SPI_TransmitReceive_IT+0x6a>
 8013610:	887b      	ldrh	r3, [r7, #2]
 8013612:	2b00      	cmp	r3, #0
 8013614:	d102      	bne.n	801361c <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8013616:	2301      	movs	r3, #1
 8013618:	75fb      	strb	r3, [r7, #23]
    goto error;
 801361a:	e048      	b.n	80136ae <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013622:	b2db      	uxtb	r3, r3
 8013624:	2b04      	cmp	r3, #4
 8013626:	d003      	beq.n	8013630 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	2205      	movs	r2, #5
 801362c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	2200      	movs	r2, #0
 8013634:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	68ba      	ldr	r2, [r7, #8]
 801363a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	887a      	ldrh	r2, [r7, #2]
 8013640:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	887a      	ldrh	r2, [r7, #2]
 8013646:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	687a      	ldr	r2, [r7, #4]
 801364c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	887a      	ldrh	r2, [r7, #2]
 8013652:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	887a      	ldrh	r2, [r7, #2]
 8013658:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801365a:	68fb      	ldr	r3, [r7, #12]
 801365c:	68db      	ldr	r3, [r3, #12]
 801365e:	2b00      	cmp	r3, #0
 8013660:	d006      	beq.n	8013670 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8013662:	68fb      	ldr	r3, [r7, #12]
 8013664:	4a17      	ldr	r2, [pc, #92]	; (80136c4 <HAL_SPI_TransmitReceive_IT+0x118>)
 8013666:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8013668:	68fb      	ldr	r3, [r7, #12]
 801366a:	4a17      	ldr	r2, [pc, #92]	; (80136c8 <HAL_SPI_TransmitReceive_IT+0x11c>)
 801366c:	645a      	str	r2, [r3, #68]	; 0x44
 801366e:	e005      	b.n	801367c <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	4a16      	ldr	r2, [pc, #88]	; (80136cc <HAL_SPI_TransmitReceive_IT+0x120>)
 8013674:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	4a15      	ldr	r2, [pc, #84]	; (80136d0 <HAL_SPI_TransmitReceive_IT+0x124>)
 801367a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	681b      	ldr	r3, [r3, #0]
 8013680:	685a      	ldr	r2, [r3, #4]
 8013682:	68fb      	ldr	r3, [r7, #12]
 8013684:	681b      	ldr	r3, [r3, #0]
 8013686:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 801368a:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013696:	2b40      	cmp	r3, #64	; 0x40
 8013698:	d008      	beq.n	80136ac <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	681a      	ldr	r2, [r3, #0]
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80136a8:	601a      	str	r2, [r3, #0]
 80136aa:	e000      	b.n	80136ae <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 80136ac:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80136ae:	68fb      	ldr	r3, [r7, #12]
 80136b0:	2200      	movs	r2, #0
 80136b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80136b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80136b8:	4618      	mov	r0, r3
 80136ba:	371c      	adds	r7, #28
 80136bc:	46bd      	mov	sp, r7
 80136be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136c2:	4770      	bx	lr
 80136c4:	0801486d 	.word	0x0801486d
 80136c8:	080148cd 	.word	0x080148cd
 80136cc:	080147a9 	.word	0x080147a9
 80136d0:	0801480d 	.word	0x0801480d

080136d4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80136d4:	b580      	push	{r7, lr}
 80136d6:	b086      	sub	sp, #24
 80136d8:	af00      	add	r7, sp, #0
 80136da:	60f8      	str	r0, [r7, #12]
 80136dc:	60b9      	str	r1, [r7, #8]
 80136de:	4613      	mov	r3, r2
 80136e0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80136e2:	2300      	movs	r3, #0
 80136e4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80136e6:	68fb      	ldr	r3, [r7, #12]
 80136e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80136ec:	2b01      	cmp	r3, #1
 80136ee:	d101      	bne.n	80136f4 <HAL_SPI_Transmit_DMA+0x20>
 80136f0:	2302      	movs	r3, #2
 80136f2:	e09b      	b.n	801382c <HAL_SPI_Transmit_DMA+0x158>
 80136f4:	68fb      	ldr	r3, [r7, #12]
 80136f6:	2201      	movs	r2, #1
 80136f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013702:	b2db      	uxtb	r3, r3
 8013704:	2b01      	cmp	r3, #1
 8013706:	d002      	beq.n	801370e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8013708:	2302      	movs	r3, #2
 801370a:	75fb      	strb	r3, [r7, #23]
    goto error;
 801370c:	e089      	b.n	8013822 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 801370e:	68bb      	ldr	r3, [r7, #8]
 8013710:	2b00      	cmp	r3, #0
 8013712:	d002      	beq.n	801371a <HAL_SPI_Transmit_DMA+0x46>
 8013714:	88fb      	ldrh	r3, [r7, #6]
 8013716:	2b00      	cmp	r3, #0
 8013718:	d102      	bne.n	8013720 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 801371a:	2301      	movs	r3, #1
 801371c:	75fb      	strb	r3, [r7, #23]
    goto error;
 801371e:	e080      	b.n	8013822 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8013720:	68fb      	ldr	r3, [r7, #12]
 8013722:	2203      	movs	r2, #3
 8013724:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013728:	68fb      	ldr	r3, [r7, #12]
 801372a:	2200      	movs	r2, #0
 801372c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801372e:	68fb      	ldr	r3, [r7, #12]
 8013730:	68ba      	ldr	r2, [r7, #8]
 8013732:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	88fa      	ldrh	r2, [r7, #6]
 8013738:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 801373a:	68fb      	ldr	r3, [r7, #12]
 801373c:	88fa      	ldrh	r2, [r7, #6]
 801373e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	2200      	movs	r2, #0
 8013744:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	2200      	movs	r2, #0
 801374a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	2200      	movs	r2, #0
 8013750:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8013752:	68fb      	ldr	r3, [r7, #12]
 8013754:	2200      	movs	r2, #0
 8013756:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8013758:	68fb      	ldr	r3, [r7, #12]
 801375a:	2200      	movs	r2, #0
 801375c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801375e:	68fb      	ldr	r3, [r7, #12]
 8013760:	689b      	ldr	r3, [r3, #8]
 8013762:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013766:	d10f      	bne.n	8013788 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8013768:	68fb      	ldr	r3, [r7, #12]
 801376a:	681b      	ldr	r3, [r3, #0]
 801376c:	681a      	ldr	r2, [r3, #0]
 801376e:	68fb      	ldr	r3, [r7, #12]
 8013770:	681b      	ldr	r3, [r3, #0]
 8013772:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013776:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	681b      	ldr	r3, [r3, #0]
 801377c:	681a      	ldr	r2, [r3, #0]
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	681b      	ldr	r3, [r3, #0]
 8013782:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8013786:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8013788:	68fb      	ldr	r3, [r7, #12]
 801378a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801378c:	4a29      	ldr	r2, [pc, #164]	; (8013834 <HAL_SPI_Transmit_DMA+0x160>)
 801378e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8013790:	68fb      	ldr	r3, [r7, #12]
 8013792:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013794:	4a28      	ldr	r2, [pc, #160]	; (8013838 <HAL_SPI_Transmit_DMA+0x164>)
 8013796:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8013798:	68fb      	ldr	r3, [r7, #12]
 801379a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801379c:	4a27      	ldr	r2, [pc, #156]	; (801383c <HAL_SPI_Transmit_DMA+0x168>)
 801379e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80137a4:	2200      	movs	r2, #0
 80137a6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137b0:	4619      	mov	r1, r3
 80137b2:	68fb      	ldr	r3, [r7, #12]
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	330c      	adds	r3, #12
 80137b8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80137be:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80137c0:	f7f4 fa91 	bl	8007ce6 <HAL_DMA_Start_IT>
 80137c4:	4603      	mov	r3, r0
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d00c      	beq.n	80137e4 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80137ca:	68fb      	ldr	r3, [r7, #12]
 80137cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80137ce:	f043 0210 	orr.w	r2, r3, #16
 80137d2:	68fb      	ldr	r3, [r7, #12]
 80137d4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80137d6:	2301      	movs	r3, #1
 80137d8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	2201      	movs	r2, #1
 80137de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80137e2:	e01e      	b.n	8013822 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80137ee:	2b40      	cmp	r3, #64	; 0x40
 80137f0:	d007      	beq.n	8013802 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80137f2:	68fb      	ldr	r3, [r7, #12]
 80137f4:	681b      	ldr	r3, [r3, #0]
 80137f6:	681a      	ldr	r2, [r3, #0]
 80137f8:	68fb      	ldr	r3, [r7, #12]
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013800:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8013802:	68fb      	ldr	r3, [r7, #12]
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	685a      	ldr	r2, [r3, #4]
 8013808:	68fb      	ldr	r3, [r7, #12]
 801380a:	681b      	ldr	r3, [r3, #0]
 801380c:	f042 0220 	orr.w	r2, r2, #32
 8013810:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	681b      	ldr	r3, [r3, #0]
 8013816:	685a      	ldr	r2, [r3, #4]
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	681b      	ldr	r3, [r3, #0]
 801381c:	f042 0202 	orr.w	r2, r2, #2
 8013820:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	2200      	movs	r2, #0
 8013826:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801382a:	7dfb      	ldrb	r3, [r7, #23]
}
 801382c:	4618      	mov	r0, r3
 801382e:	3718      	adds	r7, #24
 8013830:	46bd      	mov	sp, r7
 8013832:	bd80      	pop	{r7, pc}
 8013834:	08014559 	.word	0x08014559
 8013838:	08014379 	.word	0x08014379
 801383c:	080145ad 	.word	0x080145ad

08013840 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8013840:	b580      	push	{r7, lr}
 8013842:	b086      	sub	sp, #24
 8013844:	af00      	add	r7, sp, #0
 8013846:	60f8      	str	r0, [r7, #12]
 8013848:	60b9      	str	r1, [r7, #8]
 801384a:	4613      	mov	r3, r2
 801384c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 801384e:	2300      	movs	r3, #0
 8013850:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	689b      	ldr	r3, [r3, #8]
 8013856:	2b00      	cmp	r3, #0
 8013858:	d110      	bne.n	801387c <HAL_SPI_Receive_DMA+0x3c>
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	685b      	ldr	r3, [r3, #4]
 801385e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013862:	d10b      	bne.n	801387c <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8013864:	68fb      	ldr	r3, [r7, #12]
 8013866:	2204      	movs	r2, #4
 8013868:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 801386c:	88fb      	ldrh	r3, [r7, #6]
 801386e:	68ba      	ldr	r2, [r7, #8]
 8013870:	68b9      	ldr	r1, [r7, #8]
 8013872:	68f8      	ldr	r0, [r7, #12]
 8013874:	f000 f8ac 	bl	80139d0 <HAL_SPI_TransmitReceive_DMA>
 8013878:	4603      	mov	r3, r0
 801387a:	e09f      	b.n	80139bc <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013882:	2b01      	cmp	r3, #1
 8013884:	d101      	bne.n	801388a <HAL_SPI_Receive_DMA+0x4a>
 8013886:	2302      	movs	r3, #2
 8013888:	e098      	b.n	80139bc <HAL_SPI_Receive_DMA+0x17c>
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	2201      	movs	r2, #1
 801388e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013898:	b2db      	uxtb	r3, r3
 801389a:	2b01      	cmp	r3, #1
 801389c:	d002      	beq.n	80138a4 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 801389e:	2302      	movs	r3, #2
 80138a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80138a2:	e086      	b.n	80139b2 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 80138a4:	68bb      	ldr	r3, [r7, #8]
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d002      	beq.n	80138b0 <HAL_SPI_Receive_DMA+0x70>
 80138aa:	88fb      	ldrh	r3, [r7, #6]
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d102      	bne.n	80138b6 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 80138b0:	2301      	movs	r3, #1
 80138b2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80138b4:	e07d      	b.n	80139b2 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	2204      	movs	r2, #4
 80138ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	2200      	movs	r2, #0
 80138c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	68ba      	ldr	r2, [r7, #8]
 80138c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80138ca:	68fb      	ldr	r3, [r7, #12]
 80138cc:	88fa      	ldrh	r2, [r7, #6]
 80138ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	88fa      	ldrh	r2, [r7, #6]
 80138d4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	2200      	movs	r2, #0
 80138da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	2200      	movs	r2, #0
 80138e0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	2200      	movs	r2, #0
 80138e6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80138e8:	68fb      	ldr	r3, [r7, #12]
 80138ea:	2200      	movs	r2, #0
 80138ec:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80138ee:	68fb      	ldr	r3, [r7, #12]
 80138f0:	689b      	ldr	r3, [r3, #8]
 80138f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80138f6:	d10f      	bne.n	8013918 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	681b      	ldr	r3, [r3, #0]
 80138fc:	681a      	ldr	r2, [r3, #0]
 80138fe:	68fb      	ldr	r3, [r7, #12]
 8013900:	681b      	ldr	r3, [r3, #0]
 8013902:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013906:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	681b      	ldr	r3, [r3, #0]
 801390c:	681a      	ldr	r2, [r3, #0]
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8013916:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8013918:	68fb      	ldr	r3, [r7, #12]
 801391a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801391c:	4a29      	ldr	r2, [pc, #164]	; (80139c4 <HAL_SPI_Receive_DMA+0x184>)
 801391e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013924:	4a28      	ldr	r2, [pc, #160]	; (80139c8 <HAL_SPI_Receive_DMA+0x188>)
 8013926:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8013928:	68fb      	ldr	r3, [r7, #12]
 801392a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801392c:	4a27      	ldr	r2, [pc, #156]	; (80139cc <HAL_SPI_Receive_DMA+0x18c>)
 801392e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013934:	2200      	movs	r2, #0
 8013936:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801393c:	68fb      	ldr	r3, [r7, #12]
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	330c      	adds	r3, #12
 8013942:	4619      	mov	r1, r3
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013948:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801394e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8013950:	f7f4 f9c9 	bl	8007ce6 <HAL_DMA_Start_IT>
 8013954:	4603      	mov	r3, r0
 8013956:	2b00      	cmp	r3, #0
 8013958:	d00c      	beq.n	8013974 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801395e:	f043 0210 	orr.w	r2, r3, #16
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8013966:	2301      	movs	r3, #1
 8013968:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 801396a:	68fb      	ldr	r3, [r7, #12]
 801396c:	2201      	movs	r2, #1
 801396e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8013972:	e01e      	b.n	80139b2 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013974:	68fb      	ldr	r3, [r7, #12]
 8013976:	681b      	ldr	r3, [r3, #0]
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801397e:	2b40      	cmp	r3, #64	; 0x40
 8013980:	d007      	beq.n	8013992 <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	681b      	ldr	r3, [r3, #0]
 8013986:	681a      	ldr	r2, [r3, #0]
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013990:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	681b      	ldr	r3, [r3, #0]
 8013996:	685a      	ldr	r2, [r3, #4]
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	f042 0220 	orr.w	r2, r2, #32
 80139a0:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	685a      	ldr	r2, [r3, #4]
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	681b      	ldr	r3, [r3, #0]
 80139ac:	f042 0201 	orr.w	r2, r2, #1
 80139b0:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	2200      	movs	r2, #0
 80139b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80139ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80139bc:	4618      	mov	r0, r3
 80139be:	3718      	adds	r7, #24
 80139c0:	46bd      	mov	sp, r7
 80139c2:	bd80      	pop	{r7, pc}
 80139c4:	08014575 	.word	0x08014575
 80139c8:	08014421 	.word	0x08014421
 80139cc:	080145ad 	.word	0x080145ad

080139d0 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80139d0:	b580      	push	{r7, lr}
 80139d2:	b086      	sub	sp, #24
 80139d4:	af00      	add	r7, sp, #0
 80139d6:	60f8      	str	r0, [r7, #12]
 80139d8:	60b9      	str	r1, [r7, #8]
 80139da:	607a      	str	r2, [r7, #4]
 80139dc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80139de:	2300      	movs	r3, #0
 80139e0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80139e8:	2b01      	cmp	r3, #1
 80139ea:	d101      	bne.n	80139f0 <HAL_SPI_TransmitReceive_DMA+0x20>
 80139ec:	2302      	movs	r3, #2
 80139ee:	e0e3      	b.n	8013bb8 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 80139f0:	68fb      	ldr	r3, [r7, #12]
 80139f2:	2201      	movs	r2, #1
 80139f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80139fe:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	685b      	ldr	r3, [r3, #4]
 8013a04:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8013a06:	7dbb      	ldrb	r3, [r7, #22]
 8013a08:	2b01      	cmp	r3, #1
 8013a0a:	d00d      	beq.n	8013a28 <HAL_SPI_TransmitReceive_DMA+0x58>
 8013a0c:	693b      	ldr	r3, [r7, #16]
 8013a0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013a12:	d106      	bne.n	8013a22 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8013a14:	68fb      	ldr	r3, [r7, #12]
 8013a16:	689b      	ldr	r3, [r3, #8]
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d102      	bne.n	8013a22 <HAL_SPI_TransmitReceive_DMA+0x52>
 8013a1c:	7dbb      	ldrb	r3, [r7, #22]
 8013a1e:	2b04      	cmp	r3, #4
 8013a20:	d002      	beq.n	8013a28 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8013a22:	2302      	movs	r3, #2
 8013a24:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013a26:	e0c2      	b.n	8013bae <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8013a28:	68bb      	ldr	r3, [r7, #8]
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d005      	beq.n	8013a3a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d002      	beq.n	8013a3a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8013a34:	887b      	ldrh	r3, [r7, #2]
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d102      	bne.n	8013a40 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8013a3a:	2301      	movs	r3, #1
 8013a3c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013a3e:	e0b6      	b.n	8013bae <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013a46:	b2db      	uxtb	r3, r3
 8013a48:	2b04      	cmp	r3, #4
 8013a4a:	d003      	beq.n	8013a54 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	2205      	movs	r2, #5
 8013a50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	2200      	movs	r2, #0
 8013a58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	68ba      	ldr	r2, [r7, #8]
 8013a5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	887a      	ldrh	r2, [r7, #2]
 8013a64:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8013a66:	68fb      	ldr	r3, [r7, #12]
 8013a68:	887a      	ldrh	r2, [r7, #2]
 8013a6a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8013a6c:	68fb      	ldr	r3, [r7, #12]
 8013a6e:	687a      	ldr	r2, [r7, #4]
 8013a70:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	887a      	ldrh	r2, [r7, #2]
 8013a76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	887a      	ldrh	r2, [r7, #2]
 8013a7c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	2200      	movs	r2, #0
 8013a82:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	2200      	movs	r2, #0
 8013a88:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013a90:	b2db      	uxtb	r3, r3
 8013a92:	2b04      	cmp	r3, #4
 8013a94:	d108      	bne.n	8013aa8 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013a9a:	4a49      	ldr	r2, [pc, #292]	; (8013bc0 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8013a9c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013aa2:	4a48      	ldr	r2, [pc, #288]	; (8013bc4 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8013aa4:	63da      	str	r2, [r3, #60]	; 0x3c
 8013aa6:	e007      	b.n	8013ab8 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013aac:	4a46      	ldr	r2, [pc, #280]	; (8013bc8 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8013aae:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8013ab0:	68fb      	ldr	r3, [r7, #12]
 8013ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013ab4:	4a45      	ldr	r2, [pc, #276]	; (8013bcc <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8013ab6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8013ab8:	68fb      	ldr	r3, [r7, #12]
 8013aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013abc:	4a44      	ldr	r2, [pc, #272]	; (8013bd0 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8013abe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013ac4:	2200      	movs	r2, #0
 8013ac6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	330c      	adds	r3, #12
 8013ad2:	4619      	mov	r1, r3
 8013ad4:	68fb      	ldr	r3, [r7, #12]
 8013ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ad8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013ade:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8013ae0:	f7f4 f901 	bl	8007ce6 <HAL_DMA_Start_IT>
 8013ae4:	4603      	mov	r3, r0
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d00c      	beq.n	8013b04 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013aee:	f043 0210 	orr.w	r2, r3, #16
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8013af6:	2301      	movs	r3, #1
 8013af8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8013afa:	68fb      	ldr	r3, [r7, #12]
 8013afc:	2201      	movs	r2, #1
 8013afe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8013b02:	e054      	b.n	8013bae <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	685a      	ldr	r2, [r3, #4]
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	681b      	ldr	r3, [r3, #0]
 8013b0e:	f042 0201 	orr.w	r2, r2, #1
 8013b12:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013b18:	2200      	movs	r2, #0
 8013b1a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013b20:	2200      	movs	r2, #0
 8013b22:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013b28:	2200      	movs	r2, #0
 8013b2a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013b30:	2200      	movs	r2, #0
 8013b32:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b3c:	4619      	mov	r1, r3
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	330c      	adds	r3, #12
 8013b44:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013b4a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8013b4c:	f7f4 f8cb 	bl	8007ce6 <HAL_DMA_Start_IT>
 8013b50:	4603      	mov	r3, r0
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d00c      	beq.n	8013b70 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013b5a:	f043 0210 	orr.w	r2, r3, #16
 8013b5e:	68fb      	ldr	r3, [r7, #12]
 8013b60:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8013b62:	2301      	movs	r3, #1
 8013b64:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8013b66:	68fb      	ldr	r3, [r7, #12]
 8013b68:	2201      	movs	r2, #1
 8013b6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8013b6e:	e01e      	b.n	8013bae <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	681b      	ldr	r3, [r3, #0]
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013b7a:	2b40      	cmp	r3, #64	; 0x40
 8013b7c:	d007      	beq.n	8013b8e <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	681b      	ldr	r3, [r3, #0]
 8013b82:	681a      	ldr	r2, [r3, #0]
 8013b84:	68fb      	ldr	r3, [r7, #12]
 8013b86:	681b      	ldr	r3, [r3, #0]
 8013b88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013b8c:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	685a      	ldr	r2, [r3, #4]
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	f042 0220 	orr.w	r2, r2, #32
 8013b9c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	685a      	ldr	r2, [r3, #4]
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	681b      	ldr	r3, [r3, #0]
 8013ba8:	f042 0202 	orr.w	r2, r2, #2
 8013bac:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8013bae:	68fb      	ldr	r3, [r7, #12]
 8013bb0:	2200      	movs	r2, #0
 8013bb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8013bb8:	4618      	mov	r0, r3
 8013bba:	3718      	adds	r7, #24
 8013bbc:	46bd      	mov	sp, r7
 8013bbe:	bd80      	pop	{r7, pc}
 8013bc0:	08014575 	.word	0x08014575
 8013bc4:	08014421 	.word	0x08014421
 8013bc8:	08014591 	.word	0x08014591
 8013bcc:	080144c9 	.word	0x080144c9
 8013bd0:	080145ad 	.word	0x080145ad

08013bd4 <HAL_SPI_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
 8013bd4:	b580      	push	{r7, lr}
 8013bd6:	b088      	sub	sp, #32
 8013bd8:	af00      	add	r7, sp, #0
 8013bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 8013bdc:	2300      	movs	r3, #0
 8013bde:	77fb      	strb	r3, [r7, #31]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8013be0:	4b6e      	ldr	r3, [pc, #440]	; (8013d9c <HAL_SPI_Abort+0x1c8>)
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	4a6e      	ldr	r2, [pc, #440]	; (8013da0 <HAL_SPI_Abort+0x1cc>)
 8013be6:	fba2 2303 	umull	r2, r3, r2, r3
 8013bea:	0a5b      	lsrs	r3, r3, #9
 8013bec:	2264      	movs	r2, #100	; 0x64
 8013bee:	fb02 f303 	mul.w	r3, r2, r3
 8013bf2:	617b      	str	r3, [r7, #20]
  count = resetcount;
 8013bf4:	697b      	ldr	r3, [r7, #20]
 8013bf6:	61bb      	str	r3, [r7, #24]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	681b      	ldr	r3, [r3, #0]
 8013bfc:	685a      	ldr	r2, [r3, #4]
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	681b      	ldr	r3, [r3, #0]
 8013c02:	f022 0220 	bic.w	r2, r2, #32
 8013c06:	605a      	str	r2, [r3, #4]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	681b      	ldr	r3, [r3, #0]
 8013c0c:	685b      	ldr	r3, [r3, #4]
 8013c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013c12:	2b80      	cmp	r3, #128	; 0x80
 8013c14:	d117      	bne.n	8013c46 <HAL_SPI_Abort+0x72>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	4a62      	ldr	r2, [pc, #392]	; (8013da4 <HAL_SPI_Abort+0x1d0>)
 8013c1a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8013c1c:	69bb      	ldr	r3, [r7, #24]
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d106      	bne.n	8013c30 <HAL_SPI_Abort+0x5c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013c26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8013c2e:	e008      	b.n	8013c42 <HAL_SPI_Abort+0x6e>
      }
      count--;
 8013c30:	69bb      	ldr	r3, [r7, #24]
 8013c32:	3b01      	subs	r3, #1
 8013c34:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013c3c:	b2db      	uxtb	r3, r3
 8013c3e:	2b07      	cmp	r3, #7
 8013c40:	d1ec      	bne.n	8013c1c <HAL_SPI_Abort+0x48>
    /* Reset Timeout Counter */
    count = resetcount;
 8013c42:	697b      	ldr	r3, [r7, #20]
 8013c44:	61bb      	str	r3, [r7, #24]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	681b      	ldr	r3, [r3, #0]
 8013c4a:	685b      	ldr	r3, [r3, #4]
 8013c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013c50:	2b40      	cmp	r3, #64	; 0x40
 8013c52:	d117      	bne.n	8013c84 <HAL_SPI_Abort+0xb0>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	4a54      	ldr	r2, [pc, #336]	; (8013da8 <HAL_SPI_Abort+0x1d4>)
 8013c58:	641a      	str	r2, [r3, #64]	; 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8013c5a:	69bb      	ldr	r3, [r7, #24]
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d106      	bne.n	8013c6e <HAL_SPI_Abort+0x9a>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013c64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8013c6c:	e008      	b.n	8013c80 <HAL_SPI_Abort+0xac>
      }
      count--;
 8013c6e:	69bb      	ldr	r3, [r7, #24]
 8013c70:	3b01      	subs	r3, #1
 8013c72:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013c7a:	b2db      	uxtb	r3, r3
 8013c7c:	2b07      	cmp	r3, #7
 8013c7e:	d1ec      	bne.n	8013c5a <HAL_SPI_Abort+0x86>
    /* Reset Timeout Counter */
    count = resetcount;
 8013c80:	697b      	ldr	r3, [r7, #20]
 8013c82:	61bb      	str	r3, [r7, #24]
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	685b      	ldr	r3, [r3, #4]
 8013c8a:	f003 0302 	and.w	r3, r3, #2
 8013c8e:	2b02      	cmp	r3, #2
 8013c90:	d12e      	bne.n	8013cf0 <HAL_SPI_Abort+0x11c>
  {
    /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmatx != NULL)
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d02a      	beq.n	8013cf0 <HAL_SPI_Abort+0x11c>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmatx->XferAbortCallback = NULL;
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013c9e:	2200      	movs	r2, #0
 8013ca0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013ca6:	4618      	mov	r0, r3
 8013ca8:	f7f4 f875 	bl	8007d96 <HAL_DMA_Abort>
 8013cac:	4603      	mov	r3, r0
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d002      	beq.n	8013cb8 <HAL_SPI_Abort+0xe4>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	2240      	movs	r2, #64	; 0x40
 8013cb6:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Disable Tx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN));
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	685a      	ldr	r2, [r3, #4]
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	681b      	ldr	r3, [r3, #0]
 8013cc2:	f022 0202 	bic.w	r2, r2, #2
 8013cc6:	605a      	str	r2, [r3, #4]

      /* Wait until TXE flag is set */
      do
      {
        if (count == 0U)
 8013cc8:	69bb      	ldr	r3, [r7, #24]
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d106      	bne.n	8013cdc <HAL_SPI_Abort+0x108>
        {
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013cd2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	655a      	str	r2, [r3, #84]	; 0x54
          break;
 8013cda:	e009      	b.n	8013cf0 <HAL_SPI_Abort+0x11c>
        }
        count--;
 8013cdc:	69bb      	ldr	r3, [r7, #24]
 8013cde:	3b01      	subs	r3, #1
 8013ce0:	61bb      	str	r3, [r7, #24]
      } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	689b      	ldr	r3, [r3, #8]
 8013ce8:	f003 0302 	and.w	r3, r3, #2
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d0eb      	beq.n	8013cc8 <HAL_SPI_Abort+0xf4>
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	681b      	ldr	r3, [r3, #0]
 8013cf4:	685b      	ldr	r3, [r3, #4]
 8013cf6:	f003 0301 	and.w	r3, r3, #1
 8013cfa:	2b01      	cmp	r3, #1
 8013cfc:	d122      	bne.n	8013d44 <HAL_SPI_Abort+0x170>
  {
    /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmarx != NULL)
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d01e      	beq.n	8013d44 <HAL_SPI_Abort+0x170>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmarx->XferAbortCallback = NULL;
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013d0a:	2200      	movs	r2, #0
 8013d0c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013d12:	4618      	mov	r0, r3
 8013d14:	f7f4 f83f 	bl	8007d96 <HAL_DMA_Abort>
 8013d18:	4603      	mov	r3, r0
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d002      	beq.n	8013d24 <HAL_SPI_Abort+0x150>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	2240      	movs	r2, #64	; 0x40
 8013d22:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Disable peripheral */
      __HAL_SPI_DISABLE(hspi);
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	681a      	ldr	r2, [r3, #0]
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013d32:	601a      	str	r2, [r3, #0]

      /* Disable Rx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXDMAEN));
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	681b      	ldr	r3, [r3, #0]
 8013d38:	685a      	ldr	r2, [r3, #4]
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	f022 0201 	bic.w	r2, r2, #1
 8013d42:	605a      	str	r2, [r3, #4]
    }
  }
  /* Reset Tx and Rx transfer counters */
  hspi->RxXferCount = 0U;
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	2200      	movs	r2, #0
 8013d48:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	2200      	movs	r2, #0
 8013d4e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check error during Abort procedure */
  if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013d54:	2b40      	cmp	r3, #64	; 0x40
 8013d56:	d102      	bne.n	8013d5e <HAL_SPI_Abort+0x18a>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
 8013d58:	2301      	movs	r3, #1
 8013d5a:	77fb      	strb	r3, [r7, #31]
 8013d5c:	e002      	b.n	8013d64 <HAL_SPI_Abort+0x190>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	2200      	movs	r2, #0
 8013d62:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013d64:	2300      	movs	r3, #0
 8013d66:	60fb      	str	r3, [r7, #12]
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	68db      	ldr	r3, [r3, #12]
 8013d6e:	60fb      	str	r3, [r7, #12]
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	681b      	ldr	r3, [r3, #0]
 8013d74:	689b      	ldr	r3, [r3, #8]
 8013d76:	60fb      	str	r3, [r7, #12]
 8013d78:	68fb      	ldr	r3, [r7, #12]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8013d7a:	2300      	movs	r3, #0
 8013d7c:	613b      	str	r3, [r7, #16]
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	689b      	ldr	r3, [r3, #8]
 8013d84:	613b      	str	r3, [r7, #16]
 8013d86:	693b      	ldr	r3, [r7, #16]

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	2201      	movs	r2, #1
 8013d8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return errorcode;
 8013d90:	7ffb      	ldrb	r3, [r7, #31]
}
 8013d92:	4618      	mov	r0, r3
 8013d94:	3720      	adds	r7, #32
 8013d96:	46bd      	mov	sp, r7
 8013d98:	bd80      	pop	{r7, pc}
 8013d9a:	bf00      	nop
 8013d9c:	20000058 	.word	0x20000058
 8013da0:	057619f1 	.word	0x057619f1
 8013da4:	08014f59 	.word	0x08014f59
 8013da8:	08014ec9 	.word	0x08014ec9

08013dac <HAL_SPI_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort_IT(SPI_HandleTypeDef *hspi)
{
 8013dac:	b580      	push	{r7, lr}
 8013dae:	b088      	sub	sp, #32
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt ;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 8013db4:	2300      	movs	r3, #0
 8013db6:	77fb      	strb	r3, [r7, #31]
  abortcplt = 1U;
 8013db8:	2301      	movs	r3, #1
 8013dba:	61bb      	str	r3, [r7, #24]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8013dbc:	4b72      	ldr	r3, [pc, #456]	; (8013f88 <HAL_SPI_Abort_IT+0x1dc>)
 8013dbe:	681b      	ldr	r3, [r3, #0]
 8013dc0:	4a72      	ldr	r2, [pc, #456]	; (8013f8c <HAL_SPI_Abort_IT+0x1e0>)
 8013dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8013dc6:	0a5b      	lsrs	r3, r3, #9
 8013dc8:	2264      	movs	r2, #100	; 0x64
 8013dca:	fb02 f303 	mul.w	r3, r2, r3
 8013dce:	613b      	str	r3, [r7, #16]
  count = resetcount;
 8013dd0:	693b      	ldr	r3, [r7, #16]
 8013dd2:	617b      	str	r3, [r7, #20]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	685a      	ldr	r2, [r3, #4]
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	f022 0220 	bic.w	r2, r2, #32
 8013de2:	605a      	str	r2, [r3, #4]

  /* Change Rx and Tx Irq Handler to Disable TXEIE, RXNEIE and ERRIE interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	681b      	ldr	r3, [r3, #0]
 8013de8:	685b      	ldr	r3, [r3, #4]
 8013dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013dee:	2b80      	cmp	r3, #128	; 0x80
 8013df0:	d117      	bne.n	8013e22 <HAL_SPI_Abort_IT+0x76>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	4a66      	ldr	r2, [pc, #408]	; (8013f90 <HAL_SPI_Abort_IT+0x1e4>)
 8013df6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8013df8:	697b      	ldr	r3, [r7, #20]
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d106      	bne.n	8013e0c <HAL_SPI_Abort_IT+0x60>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013e02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8013e0a:	e008      	b.n	8013e1e <HAL_SPI_Abort_IT+0x72>
      }
      count--;
 8013e0c:	697b      	ldr	r3, [r7, #20]
 8013e0e:	3b01      	subs	r3, #1
 8013e10:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013e18:	b2db      	uxtb	r3, r3
 8013e1a:	2b07      	cmp	r3, #7
 8013e1c:	d1ec      	bne.n	8013df8 <HAL_SPI_Abort_IT+0x4c>
    /* Reset Timeout Counter */
    count = resetcount;
 8013e1e:	693b      	ldr	r3, [r7, #16]
 8013e20:	617b      	str	r3, [r7, #20]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	685b      	ldr	r3, [r3, #4]
 8013e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013e2c:	2b40      	cmp	r3, #64	; 0x40
 8013e2e:	d117      	bne.n	8013e60 <HAL_SPI_Abort_IT+0xb4>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	4a58      	ldr	r2, [pc, #352]	; (8013f94 <HAL_SPI_Abort_IT+0x1e8>)
 8013e34:	641a      	str	r2, [r3, #64]	; 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8013e36:	697b      	ldr	r3, [r7, #20]
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d106      	bne.n	8013e4a <HAL_SPI_Abort_IT+0x9e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013e40:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8013e48:	e008      	b.n	8013e5c <HAL_SPI_Abort_IT+0xb0>
      }
      count--;
 8013e4a:	697b      	ldr	r3, [r7, #20]
 8013e4c:	3b01      	subs	r3, #1
 8013e4e:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013e56:	b2db      	uxtb	r3, r3
 8013e58:	2b07      	cmp	r3, #7
 8013e5a:	d1ec      	bne.n	8013e36 <HAL_SPI_Abort_IT+0x8a>
    /* Reset Timeout Counter */
    count = resetcount;
 8013e5c:	693b      	ldr	r3, [r7, #16]
 8013e5e:	617b      	str	r3, [r7, #20]
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to SPI Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (hspi->hdmatx != NULL)
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d00f      	beq.n	8013e88 <HAL_SPI_Abort_IT+0xdc>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	681b      	ldr	r3, [r3, #0]
 8013e6c:	685b      	ldr	r3, [r3, #4]
 8013e6e:	f003 0302 	and.w	r3, r3, #2
 8013e72:	2b02      	cmp	r3, #2
 8013e74:	d104      	bne.n	8013e80 <HAL_SPI_Abort_IT+0xd4>
    {
      hspi->hdmatx->XferAbortCallback = SPI_DMATxAbortCallback;
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013e7a:	4a47      	ldr	r2, [pc, #284]	; (8013f98 <HAL_SPI_Abort_IT+0x1ec>)
 8013e7c:	651a      	str	r2, [r3, #80]	; 0x50
 8013e7e:	e003      	b.n	8013e88 <HAL_SPI_Abort_IT+0xdc>
    }
    else
    {
      hspi->hdmatx->XferAbortCallback = NULL;
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013e84:	2200      	movs	r2, #0
 8013e86:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (hspi->hdmarx != NULL)
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d00f      	beq.n	8013eb0 <HAL_SPI_Abort_IT+0x104>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	685b      	ldr	r3, [r3, #4]
 8013e96:	f003 0301 	and.w	r3, r3, #1
 8013e9a:	2b01      	cmp	r3, #1
 8013e9c:	d104      	bne.n	8013ea8 <HAL_SPI_Abort_IT+0xfc>
    {
      hspi->hdmarx->XferAbortCallback = SPI_DMARxAbortCallback;
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013ea2:	4a3e      	ldr	r2, [pc, #248]	; (8013f9c <HAL_SPI_Abort_IT+0x1f0>)
 8013ea4:	651a      	str	r2, [r3, #80]	; 0x50
 8013ea6:	e003      	b.n	8013eb0 <HAL_SPI_Abort_IT+0x104>
    }
    else
    {
      hspi->hdmarx->XferAbortCallback = NULL;
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013eac:	2200      	movs	r2, #0
 8013eae:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	681b      	ldr	r3, [r3, #0]
 8013eb4:	685b      	ldr	r3, [r3, #4]
 8013eb6:	f003 0302 	and.w	r3, r3, #2
 8013eba:	2b02      	cmp	r3, #2
 8013ebc:	d115      	bne.n	8013eea <HAL_SPI_Abort_IT+0x13e>
  {
    /* Abort the SPI DMA Tx Stream/Channel */
    if (hspi->hdmatx != NULL)
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d011      	beq.n	8013eea <HAL_SPI_Abort_IT+0x13e>
    {
      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013eca:	4618      	mov	r0, r3
 8013ecc:	f7f3 ffd3 	bl	8007e76 <HAL_DMA_Abort_IT>
 8013ed0:	4603      	mov	r3, r0
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d007      	beq.n	8013ee6 <HAL_SPI_Abort_IT+0x13a>
      {
        hspi->hdmatx->XferAbortCallback = NULL;
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013eda:	2200      	movs	r2, #0
 8013edc:	651a      	str	r2, [r3, #80]	; 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	2240      	movs	r2, #64	; 0x40
 8013ee2:	655a      	str	r2, [r3, #84]	; 0x54
 8013ee4:	e001      	b.n	8013eea <HAL_SPI_Abort_IT+0x13e>
      }
      else
      {
        abortcplt = 0U;
 8013ee6:	2300      	movs	r3, #0
 8013ee8:	61bb      	str	r3, [r7, #24]
      }
    }
  }
  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	685b      	ldr	r3, [r3, #4]
 8013ef0:	f003 0301 	and.w	r3, r3, #1
 8013ef4:	2b01      	cmp	r3, #1
 8013ef6:	d115      	bne.n	8013f24 <HAL_SPI_Abort_IT+0x178>
  {
    /* Abort the SPI DMA Rx Stream/Channel */
    if (hspi->hdmarx != NULL)
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d011      	beq.n	8013f24 <HAL_SPI_Abort_IT+0x178>
    {
      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmarx) !=  HAL_OK)
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013f04:	4618      	mov	r0, r3
 8013f06:	f7f3 ffb6 	bl	8007e76 <HAL_DMA_Abort_IT>
 8013f0a:	4603      	mov	r3, r0
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d007      	beq.n	8013f20 <HAL_SPI_Abort_IT+0x174>
      {
        hspi->hdmarx->XferAbortCallback = NULL;
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013f14:	2200      	movs	r2, #0
 8013f16:	651a      	str	r2, [r3, #80]	; 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	2240      	movs	r2, #64	; 0x40
 8013f1c:	655a      	str	r2, [r3, #84]	; 0x54
 8013f1e:	e001      	b.n	8013f24 <HAL_SPI_Abort_IT+0x178>
      }
      else
      {
        abortcplt = 0U;
 8013f20:	2300      	movs	r3, #0
 8013f22:	61bb      	str	r3, [r7, #24]
      }
    }
  }

  if (abortcplt == 1U)
 8013f24:	69bb      	ldr	r3, [r7, #24]
 8013f26:	2b01      	cmp	r3, #1
 8013f28:	d128      	bne.n	8013f7c <HAL_SPI_Abort_IT+0x1d0>
  {
    /* Reset Tx and Rx transfer counters */
    hspi->RxXferCount = 0U;
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	2200      	movs	r2, #0
 8013f2e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->TxXferCount = 0U;
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	2200      	movs	r2, #0
 8013f34:	86da      	strh	r2, [r3, #54]	; 0x36

    /* Check error during Abort procedure */
    if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013f3a:	2b40      	cmp	r3, #64	; 0x40
 8013f3c:	d102      	bne.n	8013f44 <HAL_SPI_Abort_IT+0x198>
    {
      /* return HAL_Error in case of error during Abort procedure */
      errorcode = HAL_ERROR;
 8013f3e:	2301      	movs	r3, #1
 8013f40:	77fb      	strb	r3, [r7, #31]
 8013f42:	e002      	b.n	8013f4a <HAL_SPI_Abort_IT+0x19e>
    }
    else
    {
      /* Reset errorCode */
      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	2200      	movs	r2, #0
 8013f48:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear the Error flags in the SR register */
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013f4a:	2300      	movs	r3, #0
 8013f4c:	60bb      	str	r3, [r7, #8]
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	68db      	ldr	r3, [r3, #12]
 8013f54:	60bb      	str	r3, [r7, #8]
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	689b      	ldr	r3, [r3, #8]
 8013f5c:	60bb      	str	r3, [r7, #8]
 8013f5e:	68bb      	ldr	r3, [r7, #8]
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8013f60:	2300      	movs	r3, #0
 8013f62:	60fb      	str	r3, [r7, #12]
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	681b      	ldr	r3, [r3, #0]
 8013f68:	689b      	ldr	r3, [r3, #8]
 8013f6a:	60fb      	str	r3, [r7, #12]
 8013f6c:	68fb      	ldr	r3, [r7, #12]

    /* Restore hspi->State to Ready */
    hspi->State = HAL_SPI_STATE_READY;
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	2201      	movs	r2, #1
 8013f72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* As no DMA to be aborted, call directly user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->AbortCpltCallback(hspi);
#else
    HAL_SPI_AbortCpltCallback(hspi);
 8013f76:	6878      	ldr	r0, [r7, #4]
 8013f78:	f000 f9da 	bl	8014330 <HAL_SPI_AbortCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  return errorcode;
 8013f7c:	7ffb      	ldrb	r3, [r7, #31]
}
 8013f7e:	4618      	mov	r0, r3
 8013f80:	3720      	adds	r7, #32
 8013f82:	46bd      	mov	sp, r7
 8013f84:	bd80      	pop	{r7, pc}
 8013f86:	bf00      	nop
 8013f88:	20000058 	.word	0x20000058
 8013f8c:	057619f1 	.word	0x057619f1
 8013f90:	08014f59 	.word	0x08014f59
 8013f94:	08014ec9 	.word	0x08014ec9
 8013f98:	08014615 	.word	0x08014615
 8013f9c:	080146e9 	.word	0x080146e9

08013fa0 <HAL_SPI_DMAPause>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAPause(SPI_HandleTypeDef *hspi)
{
 8013fa0:	b480      	push	{r7}
 8013fa2:	b083      	sub	sp, #12
 8013fa4:	af00      	add	r7, sp, #0
 8013fa6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013fae:	2b01      	cmp	r3, #1
 8013fb0:	d101      	bne.n	8013fb6 <HAL_SPI_DMAPause+0x16>
 8013fb2:	2302      	movs	r3, #2
 8013fb4:	e010      	b.n	8013fd8 <HAL_SPI_DMAPause+0x38>
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	2201      	movs	r2, #1
 8013fba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	681b      	ldr	r3, [r3, #0]
 8013fc2:	685a      	ldr	r2, [r3, #4]
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	681b      	ldr	r3, [r3, #0]
 8013fc8:	f022 0203 	bic.w	r2, r2, #3
 8013fcc:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	2200      	movs	r2, #0
 8013fd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8013fd6:	2300      	movs	r3, #0
}
 8013fd8:	4618      	mov	r0, r3
 8013fda:	370c      	adds	r7, #12
 8013fdc:	46bd      	mov	sp, r7
 8013fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fe2:	4770      	bx	lr

08013fe4 <HAL_SPI_DMAResume>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAResume(SPI_HandleTypeDef *hspi)
{
 8013fe4:	b480      	push	{r7}
 8013fe6:	b083      	sub	sp, #12
 8013fe8:	af00      	add	r7, sp, #0
 8013fea:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013ff2:	2b01      	cmp	r3, #1
 8013ff4:	d101      	bne.n	8013ffa <HAL_SPI_DMAResume+0x16>
 8013ff6:	2302      	movs	r3, #2
 8013ff8:	e010      	b.n	801401c <HAL_SPI_DMAResume+0x38>
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	2201      	movs	r2, #1
 8013ffe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Enable the SPI DMA Tx & Rx requests */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	681b      	ldr	r3, [r3, #0]
 8014006:	685a      	ldr	r2, [r3, #4]
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	f042 0203 	orr.w	r2, r2, #3
 8014010:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	2200      	movs	r2, #0
 8014016:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 801401a:	2300      	movs	r3, #0
}
 801401c:	4618      	mov	r0, r3
 801401e:	370c      	adds	r7, #12
 8014020:	46bd      	mov	sp, r7
 8014022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014026:	4770      	bx	lr

08014028 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 8014028:	b580      	push	{r7, lr}
 801402a:	b084      	sub	sp, #16
 801402c:	af00      	add	r7, sp, #0
 801402e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8014030:	2300      	movs	r3, #0
 8014032:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014038:	2b00      	cmp	r3, #0
 801403a:	d00f      	beq.n	801405c <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014040:	4618      	mov	r0, r3
 8014042:	f7f3 fea8 	bl	8007d96 <HAL_DMA_Abort>
 8014046:	4603      	mov	r3, r0
 8014048:	2b00      	cmp	r3, #0
 801404a:	d007      	beq.n	801405c <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014050:	f043 0210 	orr.w	r2, r3, #16
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 8014058:	2301      	movs	r3, #1
 801405a:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014060:	2b00      	cmp	r3, #0
 8014062:	d00f      	beq.n	8014084 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014068:	4618      	mov	r0, r3
 801406a:	f7f3 fe94 	bl	8007d96 <HAL_DMA_Abort>
 801406e:	4603      	mov	r3, r0
 8014070:	2b00      	cmp	r3, #0
 8014072:	d007      	beq.n	8014084 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014078:	f043 0210 	orr.w	r2, r3, #16
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 8014080:	2301      	movs	r3, #1
 8014082:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	681b      	ldr	r3, [r3, #0]
 8014088:	685a      	ldr	r2, [r3, #4]
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	681b      	ldr	r3, [r3, #0]
 801408e:	f022 0203 	bic.w	r2, r2, #3
 8014092:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	2201      	movs	r2, #1
 8014098:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  return errorcode;
 801409c:	7bfb      	ldrb	r3, [r7, #15]
}
 801409e:	4618      	mov	r0, r3
 80140a0:	3710      	adds	r7, #16
 80140a2:	46bd      	mov	sp, r7
 80140a4:	bd80      	pop	{r7, pc}

080140a6 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80140a6:	b580      	push	{r7, lr}
 80140a8:	b088      	sub	sp, #32
 80140aa:	af00      	add	r7, sp, #0
 80140ac:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	681b      	ldr	r3, [r3, #0]
 80140b2:	685b      	ldr	r3, [r3, #4]
 80140b4:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	681b      	ldr	r3, [r3, #0]
 80140ba:	689b      	ldr	r3, [r3, #8]
 80140bc:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80140be:	69bb      	ldr	r3, [r7, #24]
 80140c0:	099b      	lsrs	r3, r3, #6
 80140c2:	f003 0301 	and.w	r3, r3, #1
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d10f      	bne.n	80140ea <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80140ca:	69bb      	ldr	r3, [r7, #24]
 80140cc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d00a      	beq.n	80140ea <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80140d4:	69fb      	ldr	r3, [r7, #28]
 80140d6:	099b      	lsrs	r3, r3, #6
 80140d8:	f003 0301 	and.w	r3, r3, #1
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d004      	beq.n	80140ea <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80140e4:	6878      	ldr	r0, [r7, #4]
 80140e6:	4798      	blx	r3
    return;
 80140e8:	e0d7      	b.n	801429a <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80140ea:	69bb      	ldr	r3, [r7, #24]
 80140ec:	085b      	lsrs	r3, r3, #1
 80140ee:	f003 0301 	and.w	r3, r3, #1
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d00a      	beq.n	801410c <HAL_SPI_IRQHandler+0x66>
 80140f6:	69fb      	ldr	r3, [r7, #28]
 80140f8:	09db      	lsrs	r3, r3, #7
 80140fa:	f003 0301 	and.w	r3, r3, #1
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d004      	beq.n	801410c <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014106:	6878      	ldr	r0, [r7, #4]
 8014108:	4798      	blx	r3
    return;
 801410a:	e0c6      	b.n	801429a <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801410c:	69bb      	ldr	r3, [r7, #24]
 801410e:	095b      	lsrs	r3, r3, #5
 8014110:	f003 0301 	and.w	r3, r3, #1
 8014114:	2b00      	cmp	r3, #0
 8014116:	d10c      	bne.n	8014132 <HAL_SPI_IRQHandler+0x8c>
 8014118:	69bb      	ldr	r3, [r7, #24]
 801411a:	099b      	lsrs	r3, r3, #6
 801411c:	f003 0301 	and.w	r3, r3, #1
 8014120:	2b00      	cmp	r3, #0
 8014122:	d106      	bne.n	8014132 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8014124:	69bb      	ldr	r3, [r7, #24]
 8014126:	0a1b      	lsrs	r3, r3, #8
 8014128:	f003 0301 	and.w	r3, r3, #1
 801412c:	2b00      	cmp	r3, #0
 801412e:	f000 80b4 	beq.w	801429a <HAL_SPI_IRQHandler+0x1f4>
 8014132:	69fb      	ldr	r3, [r7, #28]
 8014134:	095b      	lsrs	r3, r3, #5
 8014136:	f003 0301 	and.w	r3, r3, #1
 801413a:	2b00      	cmp	r3, #0
 801413c:	f000 80ad 	beq.w	801429a <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8014140:	69bb      	ldr	r3, [r7, #24]
 8014142:	099b      	lsrs	r3, r3, #6
 8014144:	f003 0301 	and.w	r3, r3, #1
 8014148:	2b00      	cmp	r3, #0
 801414a:	d023      	beq.n	8014194 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014152:	b2db      	uxtb	r3, r3
 8014154:	2b03      	cmp	r3, #3
 8014156:	d011      	beq.n	801417c <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801415c:	f043 0204 	orr.w	r2, r3, #4
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014164:	2300      	movs	r3, #0
 8014166:	60bb      	str	r3, [r7, #8]
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	681b      	ldr	r3, [r3, #0]
 801416c:	68db      	ldr	r3, [r3, #12]
 801416e:	60bb      	str	r3, [r7, #8]
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	681b      	ldr	r3, [r3, #0]
 8014174:	689b      	ldr	r3, [r3, #8]
 8014176:	60bb      	str	r3, [r7, #8]
 8014178:	68bb      	ldr	r3, [r7, #8]
 801417a:	e00b      	b.n	8014194 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801417c:	2300      	movs	r3, #0
 801417e:	60fb      	str	r3, [r7, #12]
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	681b      	ldr	r3, [r3, #0]
 8014184:	68db      	ldr	r3, [r3, #12]
 8014186:	60fb      	str	r3, [r7, #12]
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	689b      	ldr	r3, [r3, #8]
 801418e:	60fb      	str	r3, [r7, #12]
 8014190:	68fb      	ldr	r3, [r7, #12]
        return;
 8014192:	e082      	b.n	801429a <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8014194:	69bb      	ldr	r3, [r7, #24]
 8014196:	095b      	lsrs	r3, r3, #5
 8014198:	f003 0301 	and.w	r3, r3, #1
 801419c:	2b00      	cmp	r3, #0
 801419e:	d014      	beq.n	80141ca <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80141a4:	f043 0201 	orr.w	r2, r3, #1
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80141ac:	2300      	movs	r3, #0
 80141ae:	613b      	str	r3, [r7, #16]
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	689b      	ldr	r3, [r3, #8]
 80141b6:	613b      	str	r3, [r7, #16]
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	681b      	ldr	r3, [r3, #0]
 80141bc:	681a      	ldr	r2, [r3, #0]
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	681b      	ldr	r3, [r3, #0]
 80141c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80141c6:	601a      	str	r2, [r3, #0]
 80141c8:	693b      	ldr	r3, [r7, #16]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80141ca:	69bb      	ldr	r3, [r7, #24]
 80141cc:	0a1b      	lsrs	r3, r3, #8
 80141ce:	f003 0301 	and.w	r3, r3, #1
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d00c      	beq.n	80141f0 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80141da:	f043 0208 	orr.w	r2, r3, #8
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80141e2:	2300      	movs	r3, #0
 80141e4:	617b      	str	r3, [r7, #20]
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	681b      	ldr	r3, [r3, #0]
 80141ea:	689b      	ldr	r3, [r3, #8]
 80141ec:	617b      	str	r3, [r7, #20]
 80141ee:	697b      	ldr	r3, [r7, #20]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d04f      	beq.n	8014298 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	681b      	ldr	r3, [r3, #0]
 80141fc:	685a      	ldr	r2, [r3, #4]
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	681b      	ldr	r3, [r3, #0]
 8014202:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8014206:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	2201      	movs	r2, #1
 801420c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8014210:	69fb      	ldr	r3, [r7, #28]
 8014212:	f003 0302 	and.w	r3, r3, #2
 8014216:	2b00      	cmp	r3, #0
 8014218:	d104      	bne.n	8014224 <HAL_SPI_IRQHandler+0x17e>
 801421a:	69fb      	ldr	r3, [r7, #28]
 801421c:	f003 0301 	and.w	r3, r3, #1
 8014220:	2b00      	cmp	r3, #0
 8014222:	d034      	beq.n	801428e <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	685a      	ldr	r2, [r3, #4]
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	681b      	ldr	r3, [r3, #0]
 801422e:	f022 0203 	bic.w	r2, r2, #3
 8014232:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014238:	2b00      	cmp	r3, #0
 801423a:	d011      	beq.n	8014260 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014240:	4a17      	ldr	r2, [pc, #92]	; (80142a0 <HAL_SPI_IRQHandler+0x1fa>)
 8014242:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014248:	4618      	mov	r0, r3
 801424a:	f7f3 fe14 	bl	8007e76 <HAL_DMA_Abort_IT>
 801424e:	4603      	mov	r3, r0
 8014250:	2b00      	cmp	r3, #0
 8014252:	d005      	beq.n	8014260 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014258:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014264:	2b00      	cmp	r3, #0
 8014266:	d016      	beq.n	8014296 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801426c:	4a0c      	ldr	r2, [pc, #48]	; (80142a0 <HAL_SPI_IRQHandler+0x1fa>)
 801426e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014274:	4618      	mov	r0, r3
 8014276:	f7f3 fdfe 	bl	8007e76 <HAL_DMA_Abort_IT>
 801427a:	4603      	mov	r3, r0
 801427c:	2b00      	cmp	r3, #0
 801427e:	d00a      	beq.n	8014296 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014284:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 801428c:	e003      	b.n	8014296 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 801428e:	6878      	ldr	r0, [r7, #4]
 8014290:	f000 f844 	bl	801431c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8014294:	e000      	b.n	8014298 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8014296:	bf00      	nop
    return;
 8014298:	bf00      	nop
  }
}
 801429a:	3720      	adds	r7, #32
 801429c:	46bd      	mov	sp, r7
 801429e:	bd80      	pop	{r7, pc}
 80142a0:	080145ed 	.word	0x080145ed

080142a4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80142a4:	b480      	push	{r7}
 80142a6:	b083      	sub	sp, #12
 80142a8:	af00      	add	r7, sp, #0
 80142aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80142ac:	bf00      	nop
 80142ae:	370c      	adds	r7, #12
 80142b0:	46bd      	mov	sp, r7
 80142b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142b6:	4770      	bx	lr

080142b8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80142b8:	b480      	push	{r7}
 80142ba:	b083      	sub	sp, #12
 80142bc:	af00      	add	r7, sp, #0
 80142be:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80142c0:	bf00      	nop
 80142c2:	370c      	adds	r7, #12
 80142c4:	46bd      	mov	sp, r7
 80142c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ca:	4770      	bx	lr

080142cc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80142cc:	b480      	push	{r7}
 80142ce:	b083      	sub	sp, #12
 80142d0:	af00      	add	r7, sp, #0
 80142d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80142d4:	bf00      	nop
 80142d6:	370c      	adds	r7, #12
 80142d8:	46bd      	mov	sp, r7
 80142da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142de:	4770      	bx	lr

080142e0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80142e0:	b480      	push	{r7}
 80142e2:	b083      	sub	sp, #12
 80142e4:	af00      	add	r7, sp, #0
 80142e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80142e8:	bf00      	nop
 80142ea:	370c      	adds	r7, #12
 80142ec:	46bd      	mov	sp, r7
 80142ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142f2:	4770      	bx	lr

080142f4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80142f4:	b480      	push	{r7}
 80142f6:	b083      	sub	sp, #12
 80142f8:	af00      	add	r7, sp, #0
 80142fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80142fc:	bf00      	nop
 80142fe:	370c      	adds	r7, #12
 8014300:	46bd      	mov	sp, r7
 8014302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014306:	4770      	bx	lr

08014308 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8014308:	b480      	push	{r7}
 801430a:	b083      	sub	sp, #12
 801430c:	af00      	add	r7, sp, #0
 801430e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8014310:	bf00      	nop
 8014312:	370c      	adds	r7, #12
 8014314:	46bd      	mov	sp, r7
 8014316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801431a:	4770      	bx	lr

0801431c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 801431c:	b480      	push	{r7}
 801431e:	b083      	sub	sp, #12
 8014320:	af00      	add	r7, sp, #0
 8014322:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8014324:	bf00      	nop
 8014326:	370c      	adds	r7, #12
 8014328:	46bd      	mov	sp, r7
 801432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801432e:	4770      	bx	lr

08014330 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8014330:	b480      	push	{r7}
 8014332:	b083      	sub	sp, #12
 8014334:	af00      	add	r7, sp, #0
 8014336:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8014338:	bf00      	nop
 801433a:	370c      	adds	r7, #12
 801433c:	46bd      	mov	sp, r7
 801433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014342:	4770      	bx	lr

08014344 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8014344:	b480      	push	{r7}
 8014346:	b083      	sub	sp, #12
 8014348:	af00      	add	r7, sp, #0
 801434a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014352:	b2db      	uxtb	r3, r3
}
 8014354:	4618      	mov	r0, r3
 8014356:	370c      	adds	r7, #12
 8014358:	46bd      	mov	sp, r7
 801435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801435e:	4770      	bx	lr

08014360 <HAL_SPI_GetError>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI error code in bitmap format
  */
uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi)
{
 8014360:	b480      	push	{r7}
 8014362:	b083      	sub	sp, #12
 8014364:	af00      	add	r7, sp, #0
 8014366:	6078      	str	r0, [r7, #4]
  /* Return SPI ErrorCode */
  return hspi->ErrorCode;
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 801436c:	4618      	mov	r0, r3
 801436e:	370c      	adds	r7, #12
 8014370:	46bd      	mov	sp, r7
 8014372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014376:	4770      	bx	lr

08014378 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8014378:	b580      	push	{r7, lr}
 801437a:	b086      	sub	sp, #24
 801437c:	af00      	add	r7, sp, #0
 801437e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014384:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014386:	f7f2 fa45 	bl	8006814 <HAL_GetTick>
 801438a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	681b      	ldr	r3, [r3, #0]
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801439a:	d03b      	beq.n	8014414 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 801439c:	697b      	ldr	r3, [r7, #20]
 801439e:	681b      	ldr	r3, [r3, #0]
 80143a0:	685a      	ldr	r2, [r3, #4]
 80143a2:	697b      	ldr	r3, [r7, #20]
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	f022 0220 	bic.w	r2, r2, #32
 80143aa:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80143ac:	697b      	ldr	r3, [r7, #20]
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	685a      	ldr	r2, [r3, #4]
 80143b2:	697b      	ldr	r3, [r7, #20]
 80143b4:	681b      	ldr	r3, [r3, #0]
 80143b6:	f022 0202 	bic.w	r2, r2, #2
 80143ba:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80143bc:	693a      	ldr	r2, [r7, #16]
 80143be:	2164      	movs	r1, #100	; 0x64
 80143c0:	6978      	ldr	r0, [r7, #20]
 80143c2:	f000 fc2c 	bl	8014c1e <SPI_EndRxTxTransaction>
 80143c6:	4603      	mov	r3, r0
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d005      	beq.n	80143d8 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80143cc:	697b      	ldr	r3, [r7, #20]
 80143ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80143d0:	f043 0220 	orr.w	r2, r3, #32
 80143d4:	697b      	ldr	r3, [r7, #20]
 80143d6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80143d8:	697b      	ldr	r3, [r7, #20]
 80143da:	689b      	ldr	r3, [r3, #8]
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d10a      	bne.n	80143f6 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80143e0:	2300      	movs	r3, #0
 80143e2:	60fb      	str	r3, [r7, #12]
 80143e4:	697b      	ldr	r3, [r7, #20]
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	68db      	ldr	r3, [r3, #12]
 80143ea:	60fb      	str	r3, [r7, #12]
 80143ec:	697b      	ldr	r3, [r7, #20]
 80143ee:	681b      	ldr	r3, [r3, #0]
 80143f0:	689b      	ldr	r3, [r3, #8]
 80143f2:	60fb      	str	r3, [r7, #12]
 80143f4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80143f6:	697b      	ldr	r3, [r7, #20]
 80143f8:	2200      	movs	r2, #0
 80143fa:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80143fc:	697b      	ldr	r3, [r7, #20]
 80143fe:	2201      	movs	r2, #1
 8014400:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014404:	697b      	ldr	r3, [r7, #20]
 8014406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014408:	2b00      	cmp	r3, #0
 801440a:	d003      	beq.n	8014414 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 801440c:	6978      	ldr	r0, [r7, #20]
 801440e:	f7ff ff85 	bl	801431c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8014412:	e002      	b.n	801441a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8014414:	6978      	ldr	r0, [r7, #20]
 8014416:	f7ff ff45 	bl	80142a4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801441a:	3718      	adds	r7, #24
 801441c:	46bd      	mov	sp, r7
 801441e:	bd80      	pop	{r7, pc}

08014420 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8014420:	b580      	push	{r7, lr}
 8014422:	b084      	sub	sp, #16
 8014424:	af00      	add	r7, sp, #0
 8014426:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801442c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801442e:	f7f2 f9f1 	bl	8006814 <HAL_GetTick>
 8014432:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	681b      	ldr	r3, [r3, #0]
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801443e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014442:	d03b      	beq.n	80144bc <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8014444:	68fb      	ldr	r3, [r7, #12]
 8014446:	681b      	ldr	r3, [r3, #0]
 8014448:	685a      	ldr	r2, [r3, #4]
 801444a:	68fb      	ldr	r3, [r7, #12]
 801444c:	681b      	ldr	r3, [r3, #0]
 801444e:	f022 0220 	bic.w	r2, r2, #32
 8014452:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8014454:	68fb      	ldr	r3, [r7, #12]
 8014456:	689b      	ldr	r3, [r3, #8]
 8014458:	2b00      	cmp	r3, #0
 801445a:	d10d      	bne.n	8014478 <SPI_DMAReceiveCplt+0x58>
 801445c:	68fb      	ldr	r3, [r7, #12]
 801445e:	685b      	ldr	r3, [r3, #4]
 8014460:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014464:	d108      	bne.n	8014478 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	681b      	ldr	r3, [r3, #0]
 801446a:	685a      	ldr	r2, [r3, #4]
 801446c:	68fb      	ldr	r3, [r7, #12]
 801446e:	681b      	ldr	r3, [r3, #0]
 8014470:	f022 0203 	bic.w	r2, r2, #3
 8014474:	605a      	str	r2, [r3, #4]
 8014476:	e007      	b.n	8014488 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8014478:	68fb      	ldr	r3, [r7, #12]
 801447a:	681b      	ldr	r3, [r3, #0]
 801447c:	685a      	ldr	r2, [r3, #4]
 801447e:	68fb      	ldr	r3, [r7, #12]
 8014480:	681b      	ldr	r3, [r3, #0]
 8014482:	f022 0201 	bic.w	r2, r2, #1
 8014486:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8014488:	68ba      	ldr	r2, [r7, #8]
 801448a:	2164      	movs	r1, #100	; 0x64
 801448c:	68f8      	ldr	r0, [r7, #12]
 801448e:	f000 fb61 	bl	8014b54 <SPI_EndRxTransaction>
 8014492:	4603      	mov	r3, r0
 8014494:	2b00      	cmp	r3, #0
 8014496:	d002      	beq.n	801449e <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8014498:	68fb      	ldr	r3, [r7, #12]
 801449a:	2220      	movs	r2, #32
 801449c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	2200      	movs	r2, #0
 80144a2:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80144a4:	68fb      	ldr	r3, [r7, #12]
 80144a6:	2201      	movs	r2, #1
 80144a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80144ac:	68fb      	ldr	r3, [r7, #12]
 80144ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d003      	beq.n	80144bc <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80144b4:	68f8      	ldr	r0, [r7, #12]
 80144b6:	f7ff ff31 	bl	801431c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80144ba:	e002      	b.n	80144c2 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80144bc:	68f8      	ldr	r0, [r7, #12]
 80144be:	f7ff fefb 	bl	80142b8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80144c2:	3710      	adds	r7, #16
 80144c4:	46bd      	mov	sp, r7
 80144c6:	bd80      	pop	{r7, pc}

080144c8 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80144c8:	b580      	push	{r7, lr}
 80144ca:	b084      	sub	sp, #16
 80144cc:	af00      	add	r7, sp, #0
 80144ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80144d4:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80144d6:	f7f2 f99d 	bl	8006814 <HAL_GetTick>
 80144da:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	681b      	ldr	r3, [r3, #0]
 80144e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80144e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80144ea:	d02f      	beq.n	801454c <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80144ec:	68fb      	ldr	r3, [r7, #12]
 80144ee:	681b      	ldr	r3, [r3, #0]
 80144f0:	685a      	ldr	r2, [r3, #4]
 80144f2:	68fb      	ldr	r3, [r7, #12]
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	f022 0220 	bic.w	r2, r2, #32
 80144fa:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80144fc:	68ba      	ldr	r2, [r7, #8]
 80144fe:	2164      	movs	r1, #100	; 0x64
 8014500:	68f8      	ldr	r0, [r7, #12]
 8014502:	f000 fb8c 	bl	8014c1e <SPI_EndRxTxTransaction>
 8014506:	4603      	mov	r3, r0
 8014508:	2b00      	cmp	r3, #0
 801450a:	d005      	beq.n	8014518 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801450c:	68fb      	ldr	r3, [r7, #12]
 801450e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014510:	f043 0220 	orr.w	r2, r3, #32
 8014514:	68fb      	ldr	r3, [r7, #12]
 8014516:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8014518:	68fb      	ldr	r3, [r7, #12]
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	685a      	ldr	r2, [r3, #4]
 801451e:	68fb      	ldr	r3, [r7, #12]
 8014520:	681b      	ldr	r3, [r3, #0]
 8014522:	f022 0203 	bic.w	r2, r2, #3
 8014526:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8014528:	68fb      	ldr	r3, [r7, #12]
 801452a:	2200      	movs	r2, #0
 801452c:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 801452e:	68fb      	ldr	r3, [r7, #12]
 8014530:	2200      	movs	r2, #0
 8014532:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8014534:	68fb      	ldr	r3, [r7, #12]
 8014536:	2201      	movs	r2, #1
 8014538:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014540:	2b00      	cmp	r3, #0
 8014542:	d003      	beq.n	801454c <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8014544:	68f8      	ldr	r0, [r7, #12]
 8014546:	f7ff fee9 	bl	801431c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 801454a:	e002      	b.n	8014552 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 801454c:	68f8      	ldr	r0, [r7, #12]
 801454e:	f7ff febd 	bl	80142cc <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8014552:	3710      	adds	r7, #16
 8014554:	46bd      	mov	sp, r7
 8014556:	bd80      	pop	{r7, pc}

08014558 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8014558:	b580      	push	{r7, lr}
 801455a:	b084      	sub	sp, #16
 801455c:	af00      	add	r7, sp, #0
 801455e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014564:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8014566:	68f8      	ldr	r0, [r7, #12]
 8014568:	f7ff feba 	bl	80142e0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801456c:	bf00      	nop
 801456e:	3710      	adds	r7, #16
 8014570:	46bd      	mov	sp, r7
 8014572:	bd80      	pop	{r7, pc}

08014574 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8014574:	b580      	push	{r7, lr}
 8014576:	b084      	sub	sp, #16
 8014578:	af00      	add	r7, sp, #0
 801457a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014580:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8014582:	68f8      	ldr	r0, [r7, #12]
 8014584:	f7ff feb6 	bl	80142f4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8014588:	bf00      	nop
 801458a:	3710      	adds	r7, #16
 801458c:	46bd      	mov	sp, r7
 801458e:	bd80      	pop	{r7, pc}

08014590 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8014590:	b580      	push	{r7, lr}
 8014592:	b084      	sub	sp, #16
 8014594:	af00      	add	r7, sp, #0
 8014596:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801459c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 801459e:	68f8      	ldr	r0, [r7, #12]
 80145a0:	f7ff feb2 	bl	8014308 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80145a4:	bf00      	nop
 80145a6:	3710      	adds	r7, #16
 80145a8:	46bd      	mov	sp, r7
 80145aa:	bd80      	pop	{r7, pc}

080145ac <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80145ac:	b580      	push	{r7, lr}
 80145ae:	b084      	sub	sp, #16
 80145b0:	af00      	add	r7, sp, #0
 80145b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80145b8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80145ba:	68fb      	ldr	r3, [r7, #12]
 80145bc:	681b      	ldr	r3, [r3, #0]
 80145be:	685a      	ldr	r2, [r3, #4]
 80145c0:	68fb      	ldr	r3, [r7, #12]
 80145c2:	681b      	ldr	r3, [r3, #0]
 80145c4:	f022 0203 	bic.w	r2, r2, #3
 80145c8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80145ca:	68fb      	ldr	r3, [r7, #12]
 80145cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80145ce:	f043 0210 	orr.w	r2, r3, #16
 80145d2:	68fb      	ldr	r3, [r7, #12]
 80145d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80145d6:	68fb      	ldr	r3, [r7, #12]
 80145d8:	2201      	movs	r2, #1
 80145da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80145de:	68f8      	ldr	r0, [r7, #12]
 80145e0:	f7ff fe9c 	bl	801431c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80145e4:	bf00      	nop
 80145e6:	3710      	adds	r7, #16
 80145e8:	46bd      	mov	sp, r7
 80145ea:	bd80      	pop	{r7, pc}

080145ec <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80145ec:	b580      	push	{r7, lr}
 80145ee:	b084      	sub	sp, #16
 80145f0:	af00      	add	r7, sp, #0
 80145f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80145f8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80145fa:	68fb      	ldr	r3, [r7, #12]
 80145fc:	2200      	movs	r2, #0
 80145fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8014600:	68fb      	ldr	r3, [r7, #12]
 8014602:	2200      	movs	r2, #0
 8014604:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8014606:	68f8      	ldr	r0, [r7, #12]
 8014608:	f7ff fe88 	bl	801431c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801460c:	bf00      	nop
 801460e:	3710      	adds	r7, #16
 8014610:	46bd      	mov	sp, r7
 8014612:	bd80      	pop	{r7, pc}

08014614 <SPI_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8014614:	b580      	push	{r7, lr}
 8014616:	b086      	sub	sp, #24
 8014618:	af00      	add	r7, sp, #0
 801461a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014620:	617b      	str	r3, [r7, #20]
  __IO uint32_t count;

  hspi->hdmatx->XferAbortCallback = NULL;
 8014622:	697b      	ldr	r3, [r7, #20]
 8014624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014626:	2200      	movs	r2, #0
 8014628:	651a      	str	r2, [r3, #80]	; 0x50
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 801462a:	4b2d      	ldr	r3, [pc, #180]	; (80146e0 <SPI_DMATxAbortCallback+0xcc>)
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	4a2d      	ldr	r2, [pc, #180]	; (80146e4 <SPI_DMATxAbortCallback+0xd0>)
 8014630:	fba2 2303 	umull	r2, r3, r2, r3
 8014634:	0a5b      	lsrs	r3, r3, #9
 8014636:	2264      	movs	r2, #100	; 0x64
 8014638:	fb02 f303 	mul.w	r3, r2, r3
 801463c:	613b      	str	r3, [r7, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 801463e:	697b      	ldr	r3, [r7, #20]
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	685a      	ldr	r2, [r3, #4]
 8014644:	697b      	ldr	r3, [r7, #20]
 8014646:	681b      	ldr	r3, [r3, #0]
 8014648:	f022 0202 	bic.w	r2, r2, #2
 801464c:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 801464e:	693b      	ldr	r3, [r7, #16]
 8014650:	2b00      	cmp	r3, #0
 8014652:	d106      	bne.n	8014662 <SPI_DMATxAbortCallback+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8014654:	697b      	ldr	r3, [r7, #20]
 8014656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014658:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801465c:	697b      	ldr	r3, [r7, #20]
 801465e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8014660:	e009      	b.n	8014676 <SPI_DMATxAbortCallback+0x62>
    }
    count--;
 8014662:	693b      	ldr	r3, [r7, #16]
 8014664:	3b01      	subs	r3, #1
 8014666:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8014668:	697b      	ldr	r3, [r7, #20]
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	689b      	ldr	r3, [r3, #8]
 801466e:	f003 0302 	and.w	r3, r3, #2
 8014672:	2b00      	cmp	r3, #0
 8014674:	d0eb      	beq.n	801464e <SPI_DMATxAbortCallback+0x3a>

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmarx != NULL)
 8014676:	697b      	ldr	r3, [r7, #20]
 8014678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801467a:	2b00      	cmp	r3, #0
 801467c:	d004      	beq.n	8014688 <SPI_DMATxAbortCallback+0x74>
  {
    if (hspi->hdmarx->XferAbortCallback != NULL)
 801467e:	697b      	ldr	r3, [r7, #20]
 8014680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014684:	2b00      	cmp	r3, #0
 8014686:	d126      	bne.n	80146d6 <SPI_DMATxAbortCallback+0xc2>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 8014688:	697b      	ldr	r3, [r7, #20]
 801468a:	2200      	movs	r2, #0
 801468c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 801468e:	697b      	ldr	r3, [r7, #20]
 8014690:	2200      	movs	r2, #0
 8014692:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 8014694:	697b      	ldr	r3, [r7, #20]
 8014696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014698:	2b40      	cmp	r3, #64	; 0x40
 801469a:	d002      	beq.n	80146a2 <SPI_DMATxAbortCallback+0x8e>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801469c:	697b      	ldr	r3, [r7, #20]
 801469e:	2200      	movs	r2, #0
 80146a0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80146a2:	2300      	movs	r3, #0
 80146a4:	60bb      	str	r3, [r7, #8]
 80146a6:	697b      	ldr	r3, [r7, #20]
 80146a8:	681b      	ldr	r3, [r3, #0]
 80146aa:	68db      	ldr	r3, [r3, #12]
 80146ac:	60bb      	str	r3, [r7, #8]
 80146ae:	697b      	ldr	r3, [r7, #20]
 80146b0:	681b      	ldr	r3, [r3, #0]
 80146b2:	689b      	ldr	r3, [r3, #8]
 80146b4:	60bb      	str	r3, [r7, #8]
 80146b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 80146b8:	2300      	movs	r3, #0
 80146ba:	60fb      	str	r3, [r7, #12]
 80146bc:	697b      	ldr	r3, [r7, #20]
 80146be:	681b      	ldr	r3, [r3, #0]
 80146c0:	689b      	ldr	r3, [r3, #8]
 80146c2:	60fb      	str	r3, [r7, #12]
 80146c4:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 80146c6:	697b      	ldr	r3, [r7, #20]
 80146c8:	2201      	movs	r2, #1
 80146ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 80146ce:	6978      	ldr	r0, [r7, #20]
 80146d0:	f7ff fe2e 	bl	8014330 <HAL_SPI_AbortCpltCallback>
 80146d4:	e000      	b.n	80146d8 <SPI_DMATxAbortCallback+0xc4>
      return;
 80146d6:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80146d8:	3718      	adds	r7, #24
 80146da:	46bd      	mov	sp, r7
 80146dc:	bd80      	pop	{r7, pc}
 80146de:	bf00      	nop
 80146e0:	20000058 	.word	0x20000058
 80146e4:	057619f1 	.word	0x057619f1

080146e8 <SPI_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80146e8:	b580      	push	{r7, lr}
 80146ea:	b086      	sub	sp, #24
 80146ec:	af00      	add	r7, sp, #0
 80146ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80146f4:	617b      	str	r3, [r7, #20]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 80146f6:	697b      	ldr	r3, [r7, #20]
 80146f8:	681b      	ldr	r3, [r3, #0]
 80146fa:	681a      	ldr	r2, [r3, #0]
 80146fc:	697b      	ldr	r3, [r7, #20]
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014704:	601a      	str	r2, [r3, #0]

  hspi->hdmarx->XferAbortCallback = NULL;
 8014706:	697b      	ldr	r3, [r7, #20]
 8014708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801470a:	2200      	movs	r2, #0
 801470c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Disable Rx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 801470e:	697b      	ldr	r3, [r7, #20]
 8014710:	681b      	ldr	r3, [r3, #0]
 8014712:	685a      	ldr	r2, [r3, #4]
 8014714:	697b      	ldr	r3, [r7, #20]
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	f022 0201 	bic.w	r2, r2, #1
 801471c:	605a      	str	r2, [r3, #4]

  /* Check Busy flag */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 801471e:	f7f2 f879 	bl	8006814 <HAL_GetTick>
 8014722:	4603      	mov	r3, r0
 8014724:	461a      	mov	r2, r3
 8014726:	2164      	movs	r1, #100	; 0x64
 8014728:	6978      	ldr	r0, [r7, #20]
 801472a:	f000 fa78 	bl	8014c1e <SPI_EndRxTxTransaction>
 801472e:	4603      	mov	r3, r0
 8014730:	2b00      	cmp	r3, #0
 8014732:	d005      	beq.n	8014740 <SPI_DMARxAbortCallback+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8014734:	697b      	ldr	r3, [r7, #20]
 8014736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014738:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801473c:	697b      	ldr	r3, [r7, #20]
 801473e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmatx != NULL)
 8014740:	697b      	ldr	r3, [r7, #20]
 8014742:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014744:	2b00      	cmp	r3, #0
 8014746:	d004      	beq.n	8014752 <SPI_DMARxAbortCallback+0x6a>
  {
    if (hspi->hdmatx->XferAbortCallback != NULL)
 8014748:	697b      	ldr	r3, [r7, #20]
 801474a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801474c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801474e:	2b00      	cmp	r3, #0
 8014750:	d126      	bne.n	80147a0 <SPI_DMARxAbortCallback+0xb8>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 8014752:	697b      	ldr	r3, [r7, #20]
 8014754:	2200      	movs	r2, #0
 8014756:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8014758:	697b      	ldr	r3, [r7, #20]
 801475a:	2200      	movs	r2, #0
 801475c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 801475e:	697b      	ldr	r3, [r7, #20]
 8014760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014762:	2b40      	cmp	r3, #64	; 0x40
 8014764:	d002      	beq.n	801476c <SPI_DMARxAbortCallback+0x84>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8014766:	697b      	ldr	r3, [r7, #20]
 8014768:	2200      	movs	r2, #0
 801476a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801476c:	2300      	movs	r3, #0
 801476e:	60fb      	str	r3, [r7, #12]
 8014770:	697b      	ldr	r3, [r7, #20]
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	68db      	ldr	r3, [r3, #12]
 8014776:	60fb      	str	r3, [r7, #12]
 8014778:	697b      	ldr	r3, [r7, #20]
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	689b      	ldr	r3, [r3, #8]
 801477e:	60fb      	str	r3, [r7, #12]
 8014780:	68fb      	ldr	r3, [r7, #12]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8014782:	2300      	movs	r3, #0
 8014784:	613b      	str	r3, [r7, #16]
 8014786:	697b      	ldr	r3, [r7, #20]
 8014788:	681b      	ldr	r3, [r3, #0]
 801478a:	689b      	ldr	r3, [r3, #8]
 801478c:	613b      	str	r3, [r7, #16]
 801478e:	693b      	ldr	r3, [r7, #16]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 8014790:	697b      	ldr	r3, [r7, #20]
 8014792:	2201      	movs	r2, #1
 8014794:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 8014798:	6978      	ldr	r0, [r7, #20]
 801479a:	f7ff fdc9 	bl	8014330 <HAL_SPI_AbortCpltCallback>
 801479e:	e000      	b.n	80147a2 <SPI_DMARxAbortCallback+0xba>
      return;
 80147a0:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80147a2:	3718      	adds	r7, #24
 80147a4:	46bd      	mov	sp, r7
 80147a6:	bd80      	pop	{r7, pc}

080147a8 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80147a8:	b580      	push	{r7, lr}
 80147aa:	b082      	sub	sp, #8
 80147ac:	af00      	add	r7, sp, #0
 80147ae:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	f103 020c 	add.w	r2, r3, #12
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80147bc:	7812      	ldrb	r2, [r2, #0]
 80147be:	b2d2      	uxtb	r2, r2
 80147c0:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80147c6:	1c5a      	adds	r2, r3, #1
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80147d0:	b29b      	uxth	r3, r3
 80147d2:	3b01      	subs	r3, #1
 80147d4:	b29a      	uxth	r2, r3
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80147de:	b29b      	uxth	r3, r3
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d10f      	bne.n	8014804 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	681b      	ldr	r3, [r3, #0]
 80147e8:	685a      	ldr	r2, [r3, #4]
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80147f2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80147f8:	b29b      	uxth	r3, r3
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	d102      	bne.n	8014804 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 80147fe:	6878      	ldr	r0, [r7, #4]
 8014800:	f000 fa4e 	bl	8014ca0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8014804:	bf00      	nop
 8014806:	3708      	adds	r7, #8
 8014808:	46bd      	mov	sp, r7
 801480a:	bd80      	pop	{r7, pc}

0801480c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 801480c:	b580      	push	{r7, lr}
 801480e:	b082      	sub	sp, #8
 8014810:	af00      	add	r7, sp, #0
 8014812:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	681b      	ldr	r3, [r3, #0]
 801481c:	330c      	adds	r3, #12
 801481e:	7812      	ldrb	r2, [r2, #0]
 8014820:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014826:	1c5a      	adds	r2, r3, #1
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014830:	b29b      	uxth	r3, r3
 8014832:	3b01      	subs	r3, #1
 8014834:	b29a      	uxth	r2, r3
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801483e:	b29b      	uxth	r3, r3
 8014840:	2b00      	cmp	r3, #0
 8014842:	d10f      	bne.n	8014864 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	685a      	ldr	r2, [r3, #4]
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	681b      	ldr	r3, [r3, #0]
 801484e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014852:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014858:	b29b      	uxth	r3, r3
 801485a:	2b00      	cmp	r3, #0
 801485c:	d102      	bne.n	8014864 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 801485e:	6878      	ldr	r0, [r7, #4]
 8014860:	f000 fa1e 	bl	8014ca0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8014864:	bf00      	nop
 8014866:	3708      	adds	r7, #8
 8014868:	46bd      	mov	sp, r7
 801486a:	bd80      	pop	{r7, pc}

0801486c <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 801486c:	b580      	push	{r7, lr}
 801486e:	b082      	sub	sp, #8
 8014870:	af00      	add	r7, sp, #0
 8014872:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	68da      	ldr	r2, [r3, #12]
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801487e:	b292      	uxth	r2, r2
 8014880:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014886:	1c9a      	adds	r2, r3, #2
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014890:	b29b      	uxth	r3, r3
 8014892:	3b01      	subs	r3, #1
 8014894:	b29a      	uxth	r2, r3
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801489e:	b29b      	uxth	r3, r3
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d10f      	bne.n	80148c4 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	681b      	ldr	r3, [r3, #0]
 80148a8:	685a      	ldr	r2, [r3, #4]
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	681b      	ldr	r3, [r3, #0]
 80148ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80148b2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80148b8:	b29b      	uxth	r3, r3
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d102      	bne.n	80148c4 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80148be:	6878      	ldr	r0, [r7, #4]
 80148c0:	f000 f9ee 	bl	8014ca0 <SPI_CloseRxTx_ISR>
    }
  }
}
 80148c4:	bf00      	nop
 80148c6:	3708      	adds	r7, #8
 80148c8:	46bd      	mov	sp, r7
 80148ca:	bd80      	pop	{r7, pc}

080148cc <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80148cc:	b580      	push	{r7, lr}
 80148ce:	b082      	sub	sp, #8
 80148d0:	af00      	add	r7, sp, #0
 80148d2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80148d8:	881a      	ldrh	r2, [r3, #0]
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	681b      	ldr	r3, [r3, #0]
 80148de:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80148e4:	1c9a      	adds	r2, r3, #2
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80148ee:	b29b      	uxth	r3, r3
 80148f0:	3b01      	subs	r3, #1
 80148f2:	b29a      	uxth	r2, r3
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80148fc:	b29b      	uxth	r3, r3
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d10f      	bne.n	8014922 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	681b      	ldr	r3, [r3, #0]
 8014906:	685a      	ldr	r2, [r3, #4]
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	681b      	ldr	r3, [r3, #0]
 801490c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014910:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014916:	b29b      	uxth	r3, r3
 8014918:	2b00      	cmp	r3, #0
 801491a:	d102      	bne.n	8014922 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 801491c:	6878      	ldr	r0, [r7, #4]
 801491e:	f000 f9bf 	bl	8014ca0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8014922:	bf00      	nop
 8014924:	3708      	adds	r7, #8
 8014926:	46bd      	mov	sp, r7
 8014928:	bd80      	pop	{r7, pc}

0801492a <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 801492a:	b580      	push	{r7, lr}
 801492c:	b082      	sub	sp, #8
 801492e:	af00      	add	r7, sp, #0
 8014930:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	681b      	ldr	r3, [r3, #0]
 8014936:	f103 020c 	add.w	r2, r3, #12
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801493e:	7812      	ldrb	r2, [r2, #0]
 8014940:	b2d2      	uxtb	r2, r2
 8014942:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014948:	1c5a      	adds	r2, r3, #1
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014952:	b29b      	uxth	r3, r3
 8014954:	3b01      	subs	r3, #1
 8014956:	b29a      	uxth	r2, r3
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014960:	b29b      	uxth	r3, r3
 8014962:	2b00      	cmp	r3, #0
 8014964:	d102      	bne.n	801496c <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8014966:	6878      	ldr	r0, [r7, #4]
 8014968:	f000 fa0e 	bl	8014d88 <SPI_CloseRx_ISR>
  }
}
 801496c:	bf00      	nop
 801496e:	3708      	adds	r7, #8
 8014970:	46bd      	mov	sp, r7
 8014972:	bd80      	pop	{r7, pc}

08014974 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8014974:	b580      	push	{r7, lr}
 8014976:	b082      	sub	sp, #8
 8014978:	af00      	add	r7, sp, #0
 801497a:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	68da      	ldr	r2, [r3, #12]
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014986:	b292      	uxth	r2, r2
 8014988:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801498e:	1c9a      	adds	r2, r3, #2
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014998:	b29b      	uxth	r3, r3
 801499a:	3b01      	subs	r3, #1
 801499c:	b29a      	uxth	r2, r3
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80149a6:	b29b      	uxth	r3, r3
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	d102      	bne.n	80149b2 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80149ac:	6878      	ldr	r0, [r7, #4]
 80149ae:	f000 f9eb 	bl	8014d88 <SPI_CloseRx_ISR>
  }
}
 80149b2:	bf00      	nop
 80149b4:	3708      	adds	r7, #8
 80149b6:	46bd      	mov	sp, r7
 80149b8:	bd80      	pop	{r7, pc}

080149ba <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80149ba:	b580      	push	{r7, lr}
 80149bc:	b082      	sub	sp, #8
 80149be:	af00      	add	r7, sp, #0
 80149c0:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	681b      	ldr	r3, [r3, #0]
 80149ca:	330c      	adds	r3, #12
 80149cc:	7812      	ldrb	r2, [r2, #0]
 80149ce:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149d4:	1c5a      	adds	r2, r3, #1
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80149de:	b29b      	uxth	r3, r3
 80149e0:	3b01      	subs	r3, #1
 80149e2:	b29a      	uxth	r2, r3
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80149ec:	b29b      	uxth	r3, r3
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d102      	bne.n	80149f8 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80149f2:	6878      	ldr	r0, [r7, #4]
 80149f4:	f000 fa07 	bl	8014e06 <SPI_CloseTx_ISR>
  }
}
 80149f8:	bf00      	nop
 80149fa:	3708      	adds	r7, #8
 80149fc:	46bd      	mov	sp, r7
 80149fe:	bd80      	pop	{r7, pc}

08014a00 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8014a00:	b580      	push	{r7, lr}
 8014a02:	b082      	sub	sp, #8
 8014a04:	af00      	add	r7, sp, #0
 8014a06:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a0c:	881a      	ldrh	r2, [r3, #0]
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a18:	1c9a      	adds	r2, r3, #2
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014a22:	b29b      	uxth	r3, r3
 8014a24:	3b01      	subs	r3, #1
 8014a26:	b29a      	uxth	r2, r3
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014a30:	b29b      	uxth	r3, r3
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d102      	bne.n	8014a3c <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8014a36:	6878      	ldr	r0, [r7, #4]
 8014a38:	f000 f9e5 	bl	8014e06 <SPI_CloseTx_ISR>
  }
}
 8014a3c:	bf00      	nop
 8014a3e:	3708      	adds	r7, #8
 8014a40:	46bd      	mov	sp, r7
 8014a42:	bd80      	pop	{r7, pc}

08014a44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8014a44:	b580      	push	{r7, lr}
 8014a46:	b088      	sub	sp, #32
 8014a48:	af00      	add	r7, sp, #0
 8014a4a:	60f8      	str	r0, [r7, #12]
 8014a4c:	60b9      	str	r1, [r7, #8]
 8014a4e:	603b      	str	r3, [r7, #0]
 8014a50:	4613      	mov	r3, r2
 8014a52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8014a54:	f7f1 fede 	bl	8006814 <HAL_GetTick>
 8014a58:	4602      	mov	r2, r0
 8014a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a5c:	1a9b      	subs	r3, r3, r2
 8014a5e:	683a      	ldr	r2, [r7, #0]
 8014a60:	4413      	add	r3, r2
 8014a62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8014a64:	f7f1 fed6 	bl	8006814 <HAL_GetTick>
 8014a68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8014a6a:	4b39      	ldr	r3, [pc, #228]	; (8014b50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8014a6c:	681b      	ldr	r3, [r3, #0]
 8014a6e:	015b      	lsls	r3, r3, #5
 8014a70:	0d1b      	lsrs	r3, r3, #20
 8014a72:	69fa      	ldr	r2, [r7, #28]
 8014a74:	fb02 f303 	mul.w	r3, r2, r3
 8014a78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8014a7a:	e054      	b.n	8014b26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8014a7c:	683b      	ldr	r3, [r7, #0]
 8014a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a82:	d050      	beq.n	8014b26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8014a84:	f7f1 fec6 	bl	8006814 <HAL_GetTick>
 8014a88:	4602      	mov	r2, r0
 8014a8a:	69bb      	ldr	r3, [r7, #24]
 8014a8c:	1ad3      	subs	r3, r2, r3
 8014a8e:	69fa      	ldr	r2, [r7, #28]
 8014a90:	429a      	cmp	r2, r3
 8014a92:	d902      	bls.n	8014a9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8014a94:	69fb      	ldr	r3, [r7, #28]
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d13d      	bne.n	8014b16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8014a9a:	68fb      	ldr	r3, [r7, #12]
 8014a9c:	681b      	ldr	r3, [r3, #0]
 8014a9e:	685a      	ldr	r2, [r3, #4]
 8014aa0:	68fb      	ldr	r3, [r7, #12]
 8014aa2:	681b      	ldr	r3, [r3, #0]
 8014aa4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8014aa8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014aaa:	68fb      	ldr	r3, [r7, #12]
 8014aac:	685b      	ldr	r3, [r3, #4]
 8014aae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014ab2:	d111      	bne.n	8014ad8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	689b      	ldr	r3, [r3, #8]
 8014ab8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014abc:	d004      	beq.n	8014ac8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8014abe:	68fb      	ldr	r3, [r7, #12]
 8014ac0:	689b      	ldr	r3, [r3, #8]
 8014ac2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014ac6:	d107      	bne.n	8014ad8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	681a      	ldr	r2, [r3, #0]
 8014ace:	68fb      	ldr	r3, [r7, #12]
 8014ad0:	681b      	ldr	r3, [r3, #0]
 8014ad2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014ad6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8014ad8:	68fb      	ldr	r3, [r7, #12]
 8014ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014adc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014ae0:	d10f      	bne.n	8014b02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8014ae2:	68fb      	ldr	r3, [r7, #12]
 8014ae4:	681b      	ldr	r3, [r3, #0]
 8014ae6:	681a      	ldr	r2, [r3, #0]
 8014ae8:	68fb      	ldr	r3, [r7, #12]
 8014aea:	681b      	ldr	r3, [r3, #0]
 8014aec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8014af0:	601a      	str	r2, [r3, #0]
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	681b      	ldr	r3, [r3, #0]
 8014af6:	681a      	ldr	r2, [r3, #0]
 8014af8:	68fb      	ldr	r3, [r7, #12]
 8014afa:	681b      	ldr	r3, [r3, #0]
 8014afc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8014b00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8014b02:	68fb      	ldr	r3, [r7, #12]
 8014b04:	2201      	movs	r2, #1
 8014b06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	2200      	movs	r2, #0
 8014b0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8014b12:	2303      	movs	r3, #3
 8014b14:	e017      	b.n	8014b46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8014b16:	697b      	ldr	r3, [r7, #20]
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d101      	bne.n	8014b20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8014b1c:	2300      	movs	r3, #0
 8014b1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8014b20:	697b      	ldr	r3, [r7, #20]
 8014b22:	3b01      	subs	r3, #1
 8014b24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8014b26:	68fb      	ldr	r3, [r7, #12]
 8014b28:	681b      	ldr	r3, [r3, #0]
 8014b2a:	689a      	ldr	r2, [r3, #8]
 8014b2c:	68bb      	ldr	r3, [r7, #8]
 8014b2e:	4013      	ands	r3, r2
 8014b30:	68ba      	ldr	r2, [r7, #8]
 8014b32:	429a      	cmp	r2, r3
 8014b34:	bf0c      	ite	eq
 8014b36:	2301      	moveq	r3, #1
 8014b38:	2300      	movne	r3, #0
 8014b3a:	b2db      	uxtb	r3, r3
 8014b3c:	461a      	mov	r2, r3
 8014b3e:	79fb      	ldrb	r3, [r7, #7]
 8014b40:	429a      	cmp	r2, r3
 8014b42:	d19b      	bne.n	8014a7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8014b44:	2300      	movs	r3, #0
}
 8014b46:	4618      	mov	r0, r3
 8014b48:	3720      	adds	r7, #32
 8014b4a:	46bd      	mov	sp, r7
 8014b4c:	bd80      	pop	{r7, pc}
 8014b4e:	bf00      	nop
 8014b50:	20000058 	.word	0x20000058

08014b54 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8014b54:	b580      	push	{r7, lr}
 8014b56:	b086      	sub	sp, #24
 8014b58:	af02      	add	r7, sp, #8
 8014b5a:	60f8      	str	r0, [r7, #12]
 8014b5c:	60b9      	str	r1, [r7, #8]
 8014b5e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014b60:	68fb      	ldr	r3, [r7, #12]
 8014b62:	685b      	ldr	r3, [r3, #4]
 8014b64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014b68:	d111      	bne.n	8014b8e <SPI_EndRxTransaction+0x3a>
 8014b6a:	68fb      	ldr	r3, [r7, #12]
 8014b6c:	689b      	ldr	r3, [r3, #8]
 8014b6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014b72:	d004      	beq.n	8014b7e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8014b74:	68fb      	ldr	r3, [r7, #12]
 8014b76:	689b      	ldr	r3, [r3, #8]
 8014b78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014b7c:	d107      	bne.n	8014b8e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8014b7e:	68fb      	ldr	r3, [r7, #12]
 8014b80:	681b      	ldr	r3, [r3, #0]
 8014b82:	681a      	ldr	r2, [r3, #0]
 8014b84:	68fb      	ldr	r3, [r7, #12]
 8014b86:	681b      	ldr	r3, [r3, #0]
 8014b88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014b8c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	685b      	ldr	r3, [r3, #4]
 8014b92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014b96:	d12a      	bne.n	8014bee <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8014b98:	68fb      	ldr	r3, [r7, #12]
 8014b9a:	689b      	ldr	r3, [r3, #8]
 8014b9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014ba0:	d012      	beq.n	8014bc8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	9300      	str	r3, [sp, #0]
 8014ba6:	68bb      	ldr	r3, [r7, #8]
 8014ba8:	2200      	movs	r2, #0
 8014baa:	2180      	movs	r1, #128	; 0x80
 8014bac:	68f8      	ldr	r0, [r7, #12]
 8014bae:	f7ff ff49 	bl	8014a44 <SPI_WaitFlagStateUntilTimeout>
 8014bb2:	4603      	mov	r3, r0
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d02d      	beq.n	8014c14 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014bbc:	f043 0220 	orr.w	r2, r3, #32
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8014bc4:	2303      	movs	r3, #3
 8014bc6:	e026      	b.n	8014c16 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	9300      	str	r3, [sp, #0]
 8014bcc:	68bb      	ldr	r3, [r7, #8]
 8014bce:	2200      	movs	r2, #0
 8014bd0:	2101      	movs	r1, #1
 8014bd2:	68f8      	ldr	r0, [r7, #12]
 8014bd4:	f7ff ff36 	bl	8014a44 <SPI_WaitFlagStateUntilTimeout>
 8014bd8:	4603      	mov	r3, r0
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d01a      	beq.n	8014c14 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014be2:	f043 0220 	orr.w	r2, r3, #32
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8014bea:	2303      	movs	r3, #3
 8014bec:	e013      	b.n	8014c16 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	9300      	str	r3, [sp, #0]
 8014bf2:	68bb      	ldr	r3, [r7, #8]
 8014bf4:	2200      	movs	r2, #0
 8014bf6:	2101      	movs	r1, #1
 8014bf8:	68f8      	ldr	r0, [r7, #12]
 8014bfa:	f7ff ff23 	bl	8014a44 <SPI_WaitFlagStateUntilTimeout>
 8014bfe:	4603      	mov	r3, r0
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d007      	beq.n	8014c14 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014c08:	f043 0220 	orr.w	r2, r3, #32
 8014c0c:	68fb      	ldr	r3, [r7, #12]
 8014c0e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8014c10:	2303      	movs	r3, #3
 8014c12:	e000      	b.n	8014c16 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8014c14:	2300      	movs	r3, #0
}
 8014c16:	4618      	mov	r0, r3
 8014c18:	3710      	adds	r7, #16
 8014c1a:	46bd      	mov	sp, r7
 8014c1c:	bd80      	pop	{r7, pc}

08014c1e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8014c1e:	b580      	push	{r7, lr}
 8014c20:	b088      	sub	sp, #32
 8014c22:	af02      	add	r7, sp, #8
 8014c24:	60f8      	str	r0, [r7, #12]
 8014c26:	60b9      	str	r1, [r7, #8]
 8014c28:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8014c2a:	4b1b      	ldr	r3, [pc, #108]	; (8014c98 <SPI_EndRxTxTransaction+0x7a>)
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	4a1b      	ldr	r2, [pc, #108]	; (8014c9c <SPI_EndRxTxTransaction+0x7e>)
 8014c30:	fba2 2303 	umull	r2, r3, r2, r3
 8014c34:	0d5b      	lsrs	r3, r3, #21
 8014c36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014c3a:	fb02 f303 	mul.w	r3, r2, r3
 8014c3e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	685b      	ldr	r3, [r3, #4]
 8014c44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014c48:	d112      	bne.n	8014c70 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	9300      	str	r3, [sp, #0]
 8014c4e:	68bb      	ldr	r3, [r7, #8]
 8014c50:	2200      	movs	r2, #0
 8014c52:	2180      	movs	r1, #128	; 0x80
 8014c54:	68f8      	ldr	r0, [r7, #12]
 8014c56:	f7ff fef5 	bl	8014a44 <SPI_WaitFlagStateUntilTimeout>
 8014c5a:	4603      	mov	r3, r0
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d016      	beq.n	8014c8e <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014c64:	f043 0220 	orr.w	r2, r3, #32
 8014c68:	68fb      	ldr	r3, [r7, #12]
 8014c6a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8014c6c:	2303      	movs	r3, #3
 8014c6e:	e00f      	b.n	8014c90 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8014c70:	697b      	ldr	r3, [r7, #20]
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d00a      	beq.n	8014c8c <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8014c76:	697b      	ldr	r3, [r7, #20]
 8014c78:	3b01      	subs	r3, #1
 8014c7a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8014c7c:	68fb      	ldr	r3, [r7, #12]
 8014c7e:	681b      	ldr	r3, [r3, #0]
 8014c80:	689b      	ldr	r3, [r3, #8]
 8014c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014c86:	2b80      	cmp	r3, #128	; 0x80
 8014c88:	d0f2      	beq.n	8014c70 <SPI_EndRxTxTransaction+0x52>
 8014c8a:	e000      	b.n	8014c8e <SPI_EndRxTxTransaction+0x70>
        break;
 8014c8c:	bf00      	nop
  }

  return HAL_OK;
 8014c8e:	2300      	movs	r3, #0
}
 8014c90:	4618      	mov	r0, r3
 8014c92:	3718      	adds	r7, #24
 8014c94:	46bd      	mov	sp, r7
 8014c96:	bd80      	pop	{r7, pc}
 8014c98:	20000058 	.word	0x20000058
 8014c9c:	165e9f81 	.word	0x165e9f81

08014ca0 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8014ca0:	b580      	push	{r7, lr}
 8014ca2:	b086      	sub	sp, #24
 8014ca4:	af00      	add	r7, sp, #0
 8014ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8014ca8:	4b35      	ldr	r3, [pc, #212]	; (8014d80 <SPI_CloseRxTx_ISR+0xe0>)
 8014caa:	681b      	ldr	r3, [r3, #0]
 8014cac:	4a35      	ldr	r2, [pc, #212]	; (8014d84 <SPI_CloseRxTx_ISR+0xe4>)
 8014cae:	fba2 2303 	umull	r2, r3, r2, r3
 8014cb2:	0a5b      	lsrs	r3, r3, #9
 8014cb4:	2264      	movs	r2, #100	; 0x64
 8014cb6:	fb02 f303 	mul.w	r3, r2, r3
 8014cba:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8014cbc:	f7f1 fdaa 	bl	8006814 <HAL_GetTick>
 8014cc0:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	681b      	ldr	r3, [r3, #0]
 8014cc6:	685a      	ldr	r2, [r3, #4]
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	681b      	ldr	r3, [r3, #0]
 8014ccc:	f022 0220 	bic.w	r2, r2, #32
 8014cd0:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8014cd2:	693b      	ldr	r3, [r7, #16]
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d106      	bne.n	8014ce6 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014cdc:	f043 0220 	orr.w	r2, r3, #32
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8014ce4:	e009      	b.n	8014cfa <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8014ce6:	693b      	ldr	r3, [r7, #16]
 8014ce8:	3b01      	subs	r3, #1
 8014cea:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	681b      	ldr	r3, [r3, #0]
 8014cf0:	689b      	ldr	r3, [r3, #8]
 8014cf2:	f003 0302 	and.w	r3, r3, #2
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	d0eb      	beq.n	8014cd2 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8014cfa:	697a      	ldr	r2, [r7, #20]
 8014cfc:	2164      	movs	r1, #100	; 0x64
 8014cfe:	6878      	ldr	r0, [r7, #4]
 8014d00:	f7ff ff8d 	bl	8014c1e <SPI_EndRxTxTransaction>
 8014d04:	4603      	mov	r3, r0
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d005      	beq.n	8014d16 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014d0e:	f043 0220 	orr.w	r2, r3, #32
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	689b      	ldr	r3, [r3, #8]
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d10a      	bne.n	8014d34 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014d1e:	2300      	movs	r3, #0
 8014d20:	60fb      	str	r3, [r7, #12]
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	68db      	ldr	r3, [r3, #12]
 8014d28:	60fb      	str	r3, [r7, #12]
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	681b      	ldr	r3, [r3, #0]
 8014d2e:	689b      	ldr	r3, [r3, #8]
 8014d30:	60fb      	str	r3, [r7, #12]
 8014d32:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	d115      	bne.n	8014d68 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014d42:	b2db      	uxtb	r3, r3
 8014d44:	2b04      	cmp	r3, #4
 8014d46:	d107      	bne.n	8014d58 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	2201      	movs	r2, #1
 8014d4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8014d50:	6878      	ldr	r0, [r7, #4]
 8014d52:	f7ff fab1 	bl	80142b8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8014d56:	e00e      	b.n	8014d76 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	2201      	movs	r2, #1
 8014d5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8014d60:	6878      	ldr	r0, [r7, #4]
 8014d62:	f7ff fab3 	bl	80142cc <HAL_SPI_TxRxCpltCallback>
}
 8014d66:	e006      	b.n	8014d76 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	2201      	movs	r2, #1
 8014d6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8014d70:	6878      	ldr	r0, [r7, #4]
 8014d72:	f7ff fad3 	bl	801431c <HAL_SPI_ErrorCallback>
}
 8014d76:	bf00      	nop
 8014d78:	3718      	adds	r7, #24
 8014d7a:	46bd      	mov	sp, r7
 8014d7c:	bd80      	pop	{r7, pc}
 8014d7e:	bf00      	nop
 8014d80:	20000058 	.word	0x20000058
 8014d84:	057619f1 	.word	0x057619f1

08014d88 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8014d88:	b580      	push	{r7, lr}
 8014d8a:	b084      	sub	sp, #16
 8014d8c:	af00      	add	r7, sp, #0
 8014d8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	681b      	ldr	r3, [r3, #0]
 8014d94:	685a      	ldr	r2, [r3, #4]
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	681b      	ldr	r3, [r3, #0]
 8014d9a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8014d9e:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8014da0:	f7f1 fd38 	bl	8006814 <HAL_GetTick>
 8014da4:	4603      	mov	r3, r0
 8014da6:	461a      	mov	r2, r3
 8014da8:	2164      	movs	r1, #100	; 0x64
 8014daa:	6878      	ldr	r0, [r7, #4]
 8014dac:	f7ff fed2 	bl	8014b54 <SPI_EndRxTransaction>
 8014db0:	4603      	mov	r3, r0
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d005      	beq.n	8014dc2 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014dba:	f043 0220 	orr.w	r2, r3, #32
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	689b      	ldr	r3, [r3, #8]
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d10a      	bne.n	8014de0 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014dca:	2300      	movs	r3, #0
 8014dcc:	60fb      	str	r3, [r7, #12]
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	681b      	ldr	r3, [r3, #0]
 8014dd2:	68db      	ldr	r3, [r3, #12]
 8014dd4:	60fb      	str	r3, [r7, #12]
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	681b      	ldr	r3, [r3, #0]
 8014dda:	689b      	ldr	r3, [r3, #8]
 8014ddc:	60fb      	str	r3, [r7, #12]
 8014dde:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	2201      	movs	r2, #1
 8014de4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d103      	bne.n	8014df8 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8014df0:	6878      	ldr	r0, [r7, #4]
 8014df2:	f7ff fa61 	bl	80142b8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8014df6:	e002      	b.n	8014dfe <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8014df8:	6878      	ldr	r0, [r7, #4]
 8014dfa:	f7ff fa8f 	bl	801431c <HAL_SPI_ErrorCallback>
}
 8014dfe:	bf00      	nop
 8014e00:	3710      	adds	r7, #16
 8014e02:	46bd      	mov	sp, r7
 8014e04:	bd80      	pop	{r7, pc}

08014e06 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8014e06:	b580      	push	{r7, lr}
 8014e08:	b086      	sub	sp, #24
 8014e0a:	af00      	add	r7, sp, #0
 8014e0c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8014e0e:	4b2c      	ldr	r3, [pc, #176]	; (8014ec0 <SPI_CloseTx_ISR+0xba>)
 8014e10:	681b      	ldr	r3, [r3, #0]
 8014e12:	4a2c      	ldr	r2, [pc, #176]	; (8014ec4 <SPI_CloseTx_ISR+0xbe>)
 8014e14:	fba2 2303 	umull	r2, r3, r2, r3
 8014e18:	0a5b      	lsrs	r3, r3, #9
 8014e1a:	2264      	movs	r2, #100	; 0x64
 8014e1c:	fb02 f303 	mul.w	r3, r2, r3
 8014e20:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014e22:	f7f1 fcf7 	bl	8006814 <HAL_GetTick>
 8014e26:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8014e28:	693b      	ldr	r3, [r7, #16]
 8014e2a:	2b00      	cmp	r3, #0
 8014e2c:	d106      	bne.n	8014e3c <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014e32:	f043 0220 	orr.w	r2, r3, #32
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8014e3a:	e009      	b.n	8014e50 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8014e3c:	693b      	ldr	r3, [r7, #16]
 8014e3e:	3b01      	subs	r3, #1
 8014e40:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	681b      	ldr	r3, [r3, #0]
 8014e46:	689b      	ldr	r3, [r3, #8]
 8014e48:	f003 0302 	and.w	r3, r3, #2
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d0eb      	beq.n	8014e28 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	681b      	ldr	r3, [r3, #0]
 8014e54:	685a      	ldr	r2, [r3, #4]
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	681b      	ldr	r3, [r3, #0]
 8014e5a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8014e5e:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8014e60:	697a      	ldr	r2, [r7, #20]
 8014e62:	2164      	movs	r1, #100	; 0x64
 8014e64:	6878      	ldr	r0, [r7, #4]
 8014e66:	f7ff feda 	bl	8014c1e <SPI_EndRxTxTransaction>
 8014e6a:	4603      	mov	r3, r0
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	d005      	beq.n	8014e7c <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014e74:	f043 0220 	orr.w	r2, r3, #32
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	689b      	ldr	r3, [r3, #8]
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	d10a      	bne.n	8014e9a <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014e84:	2300      	movs	r3, #0
 8014e86:	60fb      	str	r3, [r7, #12]
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	68db      	ldr	r3, [r3, #12]
 8014e8e:	60fb      	str	r3, [r7, #12]
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	689b      	ldr	r3, [r3, #8]
 8014e96:	60fb      	str	r3, [r7, #12]
 8014e98:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	2201      	movs	r2, #1
 8014e9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d003      	beq.n	8014eb2 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8014eaa:	6878      	ldr	r0, [r7, #4]
 8014eac:	f7ff fa36 	bl	801431c <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8014eb0:	e002      	b.n	8014eb8 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8014eb2:	6878      	ldr	r0, [r7, #4]
 8014eb4:	f7ff f9f6 	bl	80142a4 <HAL_SPI_TxCpltCallback>
}
 8014eb8:	bf00      	nop
 8014eba:	3718      	adds	r7, #24
 8014ebc:	46bd      	mov	sp, r7
 8014ebe:	bd80      	pop	{r7, pc}
 8014ec0:	20000058 	.word	0x20000058
 8014ec4:	057619f1 	.word	0x057619f1

08014ec8 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 8014ec8:	b480      	push	{r7}
 8014eca:	b085      	sub	sp, #20
 8014ecc:	af00      	add	r7, sp, #0
 8014ece:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8014ed0:	2300      	movs	r3, #0
 8014ed2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8014ed4:	4b1e      	ldr	r3, [pc, #120]	; (8014f50 <SPI_AbortRx_ISR+0x88>)
 8014ed6:	681b      	ldr	r3, [r3, #0]
 8014ed8:	4a1e      	ldr	r2, [pc, #120]	; (8014f54 <SPI_AbortRx_ISR+0x8c>)
 8014eda:	fba2 2303 	umull	r2, r3, r2, r3
 8014ede:	0a5b      	lsrs	r3, r3, #9
 8014ee0:	2264      	movs	r2, #100	; 0x64
 8014ee2:	fb02 f303 	mul.w	r3, r2, r3
 8014ee6:	60bb      	str	r3, [r7, #8]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8014ee8:	68bb      	ldr	r3, [r7, #8]
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d106      	bne.n	8014efc <SPI_AbortRx_ISR+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014ef2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8014efa:	e009      	b.n	8014f10 <SPI_AbortRx_ISR+0x48>
    }
    count--;
 8014efc:	68bb      	ldr	r3, [r7, #8]
 8014efe:	3b01      	subs	r3, #1
 8014f00:	60bb      	str	r3, [r7, #8]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	681b      	ldr	r3, [r3, #0]
 8014f06:	689b      	ldr	r3, [r3, #8]
 8014f08:	f003 0302 	and.w	r3, r3, #2
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d0eb      	beq.n	8014ee8 <SPI_AbortRx_ISR+0x20>

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	681b      	ldr	r3, [r3, #0]
 8014f14:	681a      	ldr	r2, [r3, #0]
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	681b      	ldr	r3, [r3, #0]
 8014f1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014f1e:	601a      	str	r2, [r3, #0]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	685a      	ldr	r2, [r3, #4]
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8014f2e:	605a      	str	r2, [r3, #4]

  /* Flush Data Register by a blank read */
  tmpreg = READ_REG(hspi->Instance->DR);
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	681b      	ldr	r3, [r3, #0]
 8014f34:	68db      	ldr	r3, [r3, #12]
 8014f36:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8014f38:	68fb      	ldr	r3, [r7, #12]

  hspi->State = HAL_SPI_STATE_ABORT;
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	2207      	movs	r2, #7
 8014f3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 8014f42:	bf00      	nop
 8014f44:	3714      	adds	r7, #20
 8014f46:	46bd      	mov	sp, r7
 8014f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f4c:	4770      	bx	lr
 8014f4e:	bf00      	nop
 8014f50:	20000058 	.word	0x20000058
 8014f54:	057619f1 	.word	0x057619f1

08014f58 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 8014f58:	b480      	push	{r7}
 8014f5a:	b083      	sub	sp, #12
 8014f5c:	af00      	add	r7, sp, #0
 8014f5e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	681b      	ldr	r3, [r3, #0]
 8014f64:	685a      	ldr	r2, [r3, #4]
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	681b      	ldr	r3, [r3, #0]
 8014f6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014f6e:	605a      	str	r2, [r3, #4]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	681b      	ldr	r3, [r3, #0]
 8014f74:	681a      	ldr	r2, [r3, #0]
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	681b      	ldr	r3, [r3, #0]
 8014f7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014f7e:	601a      	str	r2, [r3, #0]

  hspi->State = HAL_SPI_STATE_ABORT;
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	2207      	movs	r2, #7
 8014f84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 8014f88:	bf00      	nop
 8014f8a:	370c      	adds	r7, #12
 8014f8c:	46bd      	mov	sp, r7
 8014f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f92:	4770      	bx	lr

08014f94 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8014f94:	b580      	push	{r7, lr}
 8014f96:	b084      	sub	sp, #16
 8014f98:	af00      	add	r7, sp, #0
 8014f9a:	60f8      	str	r0, [r7, #12]
 8014f9c:	60b9      	str	r1, [r7, #8]
 8014f9e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8014fa0:	68fb      	ldr	r3, [r7, #12]
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d101      	bne.n	8014faa <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8014fa6:	2301      	movs	r3, #1
 8014fa8:	e034      	b.n	8015014 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8014fb0:	b2db      	uxtb	r3, r3
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	d106      	bne.n	8014fc4 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	2200      	movs	r2, #0
 8014fba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8014fbe:	68f8      	ldr	r0, [r7, #12]
 8014fc0:	f7f0 ff6c 	bl	8005e9c <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8014fc4:	68fb      	ldr	r3, [r7, #12]
 8014fc6:	681a      	ldr	r2, [r3, #0]
 8014fc8:	68fb      	ldr	r3, [r7, #12]
 8014fca:	3308      	adds	r3, #8
 8014fcc:	4619      	mov	r1, r3
 8014fce:	4610      	mov	r0, r2
 8014fd0:	f003 f9a0 	bl	8018314 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8014fd4:	68fb      	ldr	r3, [r7, #12]
 8014fd6:	6818      	ldr	r0, [r3, #0]
 8014fd8:	68fb      	ldr	r3, [r7, #12]
 8014fda:	689b      	ldr	r3, [r3, #8]
 8014fdc:	461a      	mov	r2, r3
 8014fde:	68b9      	ldr	r1, [r7, #8]
 8014fe0:	f003 fa1e 	bl	8018420 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8014fe4:	68fb      	ldr	r3, [r7, #12]
 8014fe6:	6858      	ldr	r0, [r3, #4]
 8014fe8:	68fb      	ldr	r3, [r7, #12]
 8014fea:	689a      	ldr	r2, [r3, #8]
 8014fec:	68fb      	ldr	r3, [r7, #12]
 8014fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ff0:	6879      	ldr	r1, [r7, #4]
 8014ff2:	f003 fa52 	bl	801849a <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8014ff6:	68fb      	ldr	r3, [r7, #12]
 8014ff8:	681b      	ldr	r3, [r3, #0]
 8014ffa:	68fa      	ldr	r2, [r7, #12]
 8014ffc:	6892      	ldr	r2, [r2, #8]
 8014ffe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015002:	68fb      	ldr	r3, [r7, #12]
 8015004:	681b      	ldr	r3, [r3, #0]
 8015006:	68fa      	ldr	r2, [r7, #12]
 8015008:	6892      	ldr	r2, [r2, #8]
 801500a:	f041 0101 	orr.w	r1, r1, #1
 801500e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8015012:	2300      	movs	r3, #0
}
 8015014:	4618      	mov	r0, r3
 8015016:	3710      	adds	r7, #16
 8015018:	46bd      	mov	sp, r7
 801501a:	bd80      	pop	{r7, pc}

0801501c <HAL_SRAM_DeInit>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_SRAM_DeInit(SRAM_HandleTypeDef *hsram)
{ 
 801501c:	b580      	push	{r7, lr}
 801501e:	b082      	sub	sp, #8
 8015020:	af00      	add	r7, sp, #0
 8015022:	6078      	str	r0, [r7, #4]

  /* DeInit the low level hardware */
  hsram->MspDeInitCallback(hsram);
#else
  /* De-Initialize the low level hardware (MSP) */
  HAL_SRAM_MspDeInit(hsram);
 8015024:	6878      	ldr	r0, [r7, #4]
 8015026:	f7f0 ff67 	bl	8005ef8 <HAL_SRAM_MspDeInit>
#endif

  /* Configure the SRAM registers with their reset values */
  FMC_NORSRAM_DeInit(hsram->Instance, hsram->Extended, hsram->Init.NSBank);
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	6818      	ldr	r0, [r3, #0]
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	6859      	ldr	r1, [r3, #4]
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	689b      	ldr	r3, [r3, #8]
 8015036:	461a      	mov	r2, r3
 8015038:	f003 f9be 	bl	80183b8 <FSMC_NORSRAM_DeInit>

  hsram->State = HAL_SRAM_STATE_RESET;
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	2200      	movs	r2, #0
 8015040:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Release Lock */
  __HAL_UNLOCK(hsram);
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	2200      	movs	r2, #0
 8015048:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 801504c:	2300      	movs	r3, #0
}
 801504e:	4618      	mov	r0, r3
 8015050:	3708      	adds	r7, #8
 8015052:	46bd      	mov	sp, r7
 8015054:	bd80      	pop	{r7, pc}

08015056 <HAL_SRAM_DMA_XferCpltCallback>:
  * @param  hdma pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval None
  */
__weak void HAL_SRAM_DMA_XferCpltCallback(DMA_HandleTypeDef *hdma)
{
 8015056:	b480      	push	{r7}
 8015058:	b083      	sub	sp, #12
 801505a:	af00      	add	r7, sp, #0
 801505c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdma);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SRAM_DMA_XferCpltCallback could be implemented in the user file
   */ 
}
 801505e:	bf00      	nop
 8015060:	370c      	adds	r7, #12
 8015062:	46bd      	mov	sp, r7
 8015064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015068:	4770      	bx	lr

0801506a <HAL_SRAM_DMA_XferErrorCallback>:
  * @param  hdma pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval None
  */
__weak void HAL_SRAM_DMA_XferErrorCallback(DMA_HandleTypeDef *hdma)
{
 801506a:	b480      	push	{r7}
 801506c:	b083      	sub	sp, #12
 801506e:	af00      	add	r7, sp, #0
 8015070:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdma);
    /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SRAM_DMA_XferErrorCallback could be implemented in the user file
   */ 
}
 8015072:	bf00      	nop
 8015074:	370c      	adds	r7, #12
 8015076:	46bd      	mov	sp, r7
 8015078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801507c:	4770      	bx	lr

0801507e <HAL_SRAM_Read_8b>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Read_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pDstBuffer, uint32_t BufferSize)
{
 801507e:	b480      	push	{r7}
 8015080:	b087      	sub	sp, #28
 8015082:	af00      	add	r7, sp, #0
 8015084:	60f8      	str	r0, [r7, #12]
 8015086:	60b9      	str	r1, [r7, #8]
 8015088:	607a      	str	r2, [r7, #4]
 801508a:	603b      	str	r3, [r7, #0]
  __IO uint8_t * pSramAddress = (uint8_t *)pAddress;
 801508c:	68bb      	ldr	r3, [r7, #8]
 801508e:	617b      	str	r3, [r7, #20]
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 8015090:	68fb      	ldr	r3, [r7, #12]
 8015092:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015096:	2b01      	cmp	r3, #1
 8015098:	d101      	bne.n	801509e <HAL_SRAM_Read_8b+0x20>
 801509a:	2302      	movs	r3, #2
 801509c:	e022      	b.n	80150e4 <HAL_SRAM_Read_8b+0x66>
 801509e:	68fb      	ldr	r3, [r7, #12]
 80150a0:	2201      	movs	r2, #1
 80150a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY;  
 80150a6:	68fb      	ldr	r3, [r7, #12]
 80150a8:	2202      	movs	r2, #2
 80150aa:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Read data from memory */
  for(; BufferSize != 0U; BufferSize--)
 80150ae:	e00d      	b.n	80150cc <HAL_SRAM_Read_8b+0x4e>
  {
    *pDstBuffer = *(__IO uint8_t *)pSramAddress;
 80150b0:	697b      	ldr	r3, [r7, #20]
 80150b2:	781b      	ldrb	r3, [r3, #0]
 80150b4:	b2da      	uxtb	r2, r3
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	701a      	strb	r2, [r3, #0]
    pDstBuffer++;
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	3301      	adds	r3, #1
 80150be:	607b      	str	r3, [r7, #4]
    pSramAddress++;
 80150c0:	697b      	ldr	r3, [r7, #20]
 80150c2:	3301      	adds	r3, #1
 80150c4:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0U; BufferSize--)
 80150c6:	683b      	ldr	r3, [r7, #0]
 80150c8:	3b01      	subs	r3, #1
 80150ca:	603b      	str	r3, [r7, #0]
 80150cc:	683b      	ldr	r3, [r7, #0]
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d1ee      	bne.n	80150b0 <HAL_SRAM_Read_8b+0x32>
  }
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;    
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	2201      	movs	r2, #1
 80150d6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process unlocked */
  __HAL_UNLOCK(hsram); 
 80150da:	68fb      	ldr	r3, [r7, #12]
 80150dc:	2200      	movs	r2, #0
 80150de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;   
 80150e2:	2300      	movs	r3, #0
}
 80150e4:	4618      	mov	r0, r3
 80150e6:	371c      	adds	r7, #28
 80150e8:	46bd      	mov	sp, r7
 80150ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ee:	4770      	bx	lr

080150f0 <HAL_SRAM_Write_8b>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pSrcBuffer, uint32_t BufferSize)
{
 80150f0:	b480      	push	{r7}
 80150f2:	b087      	sub	sp, #28
 80150f4:	af00      	add	r7, sp, #0
 80150f6:	60f8      	str	r0, [r7, #12]
 80150f8:	60b9      	str	r1, [r7, #8]
 80150fa:	607a      	str	r2, [r7, #4]
 80150fc:	603b      	str	r3, [r7, #0]
  __IO uint8_t * pSramAddress = (uint8_t *)pAddress;
 80150fe:	68bb      	ldr	r3, [r7, #8]
 8015100:	617b      	str	r3, [r7, #20]
  
  /* Check the SRAM controller state */
  if(hsram->State == HAL_SRAM_STATE_PROTECTED)
 8015102:	68fb      	ldr	r3, [r7, #12]
 8015104:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8015108:	b2db      	uxtb	r3, r3
 801510a:	2b04      	cmp	r3, #4
 801510c:	d101      	bne.n	8015112 <HAL_SRAM_Write_8b+0x22>
  {
    return  HAL_ERROR; 
 801510e:	2301      	movs	r3, #1
 8015110:	e028      	b.n	8015164 <HAL_SRAM_Write_8b+0x74>
  }
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 8015112:	68fb      	ldr	r3, [r7, #12]
 8015114:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015118:	2b01      	cmp	r3, #1
 801511a:	d101      	bne.n	8015120 <HAL_SRAM_Write_8b+0x30>
 801511c:	2302      	movs	r3, #2
 801511e:	e021      	b.n	8015164 <HAL_SRAM_Write_8b+0x74>
 8015120:	68fb      	ldr	r3, [r7, #12]
 8015122:	2201      	movs	r2, #1
 8015124:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY; 
 8015128:	68fb      	ldr	r3, [r7, #12]
 801512a:	2202      	movs	r2, #2
 801512c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Write data to memory */
  for(; BufferSize != 0U; BufferSize--)
 8015130:	e00c      	b.n	801514c <HAL_SRAM_Write_8b+0x5c>
  {
    *(__IO uint8_t *)pSramAddress = *pSrcBuffer; 
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	781a      	ldrb	r2, [r3, #0]
 8015136:	697b      	ldr	r3, [r7, #20]
 8015138:	701a      	strb	r2, [r3, #0]
    pSrcBuffer++;
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	3301      	adds	r3, #1
 801513e:	607b      	str	r3, [r7, #4]
    pSramAddress++;    
 8015140:	697b      	ldr	r3, [r7, #20]
 8015142:	3301      	adds	r3, #1
 8015144:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0U; BufferSize--)
 8015146:	683b      	ldr	r3, [r7, #0]
 8015148:	3b01      	subs	r3, #1
 801514a:	603b      	str	r3, [r7, #0]
 801514c:	683b      	ldr	r3, [r7, #0]
 801514e:	2b00      	cmp	r3, #0
 8015150:	d1ef      	bne.n	8015132 <HAL_SRAM_Write_8b+0x42>
  }    

  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY; 
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	2201      	movs	r2, #1
 8015156:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram);
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	2200      	movs	r2, #0
 801515e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;   
 8015162:	2300      	movs	r3, #0
}
 8015164:	4618      	mov	r0, r3
 8015166:	371c      	adds	r7, #28
 8015168:	46bd      	mov	sp, r7
 801516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801516e:	4770      	bx	lr

08015170 <HAL_SRAM_Read_16b>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Read_16b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint16_t *pDstBuffer, uint32_t BufferSize)
{
 8015170:	b480      	push	{r7}
 8015172:	b087      	sub	sp, #28
 8015174:	af00      	add	r7, sp, #0
 8015176:	60f8      	str	r0, [r7, #12]
 8015178:	60b9      	str	r1, [r7, #8]
 801517a:	607a      	str	r2, [r7, #4]
 801517c:	603b      	str	r3, [r7, #0]
  __IO uint16_t * pSramAddress = (uint16_t *)pAddress;
 801517e:	68bb      	ldr	r3, [r7, #8]
 8015180:	617b      	str	r3, [r7, #20]
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015188:	2b01      	cmp	r3, #1
 801518a:	d101      	bne.n	8015190 <HAL_SRAM_Read_16b+0x20>
 801518c:	2302      	movs	r3, #2
 801518e:	e022      	b.n	80151d6 <HAL_SRAM_Read_16b+0x66>
 8015190:	68fb      	ldr	r3, [r7, #12]
 8015192:	2201      	movs	r2, #1
 8015194:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY;  
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	2202      	movs	r2, #2
 801519c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Read data from memory */
  for(; BufferSize != 0U; BufferSize--)
 80151a0:	e00d      	b.n	80151be <HAL_SRAM_Read_16b+0x4e>
  {
    *pDstBuffer = *(__IO uint16_t *)pSramAddress;
 80151a2:	697b      	ldr	r3, [r7, #20]
 80151a4:	881b      	ldrh	r3, [r3, #0]
 80151a6:	b29a      	uxth	r2, r3
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	801a      	strh	r2, [r3, #0]
    pDstBuffer++;
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	3302      	adds	r3, #2
 80151b0:	607b      	str	r3, [r7, #4]
    pSramAddress++;
 80151b2:	697b      	ldr	r3, [r7, #20]
 80151b4:	3302      	adds	r3, #2
 80151b6:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0U; BufferSize--)
 80151b8:	683b      	ldr	r3, [r7, #0]
 80151ba:	3b01      	subs	r3, #1
 80151bc:	603b      	str	r3, [r7, #0]
 80151be:	683b      	ldr	r3, [r7, #0]
 80151c0:	2b00      	cmp	r3, #0
 80151c2:	d1ee      	bne.n	80151a2 <HAL_SRAM_Read_16b+0x32>
  }
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;    
 80151c4:	68fb      	ldr	r3, [r7, #12]
 80151c6:	2201      	movs	r2, #1
 80151c8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process unlocked */
  __HAL_UNLOCK(hsram); 
 80151cc:	68fb      	ldr	r3, [r7, #12]
 80151ce:	2200      	movs	r2, #0
 80151d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;  
 80151d4:	2300      	movs	r3, #0
}
 80151d6:	4618      	mov	r0, r3
 80151d8:	371c      	adds	r7, #28
 80151da:	46bd      	mov	sp, r7
 80151dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151e0:	4770      	bx	lr

080151e2 <HAL_SRAM_Write_16b>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_16b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint16_t *pSrcBuffer, uint32_t BufferSize)
{
 80151e2:	b480      	push	{r7}
 80151e4:	b087      	sub	sp, #28
 80151e6:	af00      	add	r7, sp, #0
 80151e8:	60f8      	str	r0, [r7, #12]
 80151ea:	60b9      	str	r1, [r7, #8]
 80151ec:	607a      	str	r2, [r7, #4]
 80151ee:	603b      	str	r3, [r7, #0]
  __IO uint16_t * pSramAddress = (uint16_t *)pAddress; 
 80151f0:	68bb      	ldr	r3, [r7, #8]
 80151f2:	617b      	str	r3, [r7, #20]
  
  /* Check the SRAM controller state */
  if(hsram->State == HAL_SRAM_STATE_PROTECTED)
 80151f4:	68fb      	ldr	r3, [r7, #12]
 80151f6:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80151fa:	b2db      	uxtb	r3, r3
 80151fc:	2b04      	cmp	r3, #4
 80151fe:	d101      	bne.n	8015204 <HAL_SRAM_Write_16b+0x22>
  {
    return  HAL_ERROR; 
 8015200:	2301      	movs	r3, #1
 8015202:	e028      	b.n	8015256 <HAL_SRAM_Write_16b+0x74>
  }
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801520a:	2b01      	cmp	r3, #1
 801520c:	d101      	bne.n	8015212 <HAL_SRAM_Write_16b+0x30>
 801520e:	2302      	movs	r3, #2
 8015210:	e021      	b.n	8015256 <HAL_SRAM_Write_16b+0x74>
 8015212:	68fb      	ldr	r3, [r7, #12]
 8015214:	2201      	movs	r2, #1
 8015216:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY; 
 801521a:	68fb      	ldr	r3, [r7, #12]
 801521c:	2202      	movs	r2, #2
 801521e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Write data to memory */
  for(; BufferSize != 0U; BufferSize--)
 8015222:	e00c      	b.n	801523e <HAL_SRAM_Write_16b+0x5c>
  {
    *(__IO uint16_t *)pSramAddress = *pSrcBuffer; 
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	881a      	ldrh	r2, [r3, #0]
 8015228:	697b      	ldr	r3, [r7, #20]
 801522a:	801a      	strh	r2, [r3, #0]
    pSrcBuffer++;
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	3302      	adds	r3, #2
 8015230:	607b      	str	r3, [r7, #4]
    pSramAddress++;    
 8015232:	697b      	ldr	r3, [r7, #20]
 8015234:	3302      	adds	r3, #2
 8015236:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0U; BufferSize--)
 8015238:	683b      	ldr	r3, [r7, #0]
 801523a:	3b01      	subs	r3, #1
 801523c:	603b      	str	r3, [r7, #0]
 801523e:	683b      	ldr	r3, [r7, #0]
 8015240:	2b00      	cmp	r3, #0
 8015242:	d1ef      	bne.n	8015224 <HAL_SRAM_Write_16b+0x42>
  }    

  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY; 
 8015244:	68fb      	ldr	r3, [r7, #12]
 8015246:	2201      	movs	r2, #1
 8015248:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram);
 801524c:	68fb      	ldr	r3, [r7, #12]
 801524e:	2200      	movs	r2, #0
 8015250:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;  
 8015254:	2300      	movs	r3, #0
}
 8015256:	4618      	mov	r0, r3
 8015258:	371c      	adds	r7, #28
 801525a:	46bd      	mov	sp, r7
 801525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015260:	4770      	bx	lr

08015262 <HAL_SRAM_Read_32b>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Read_32b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pDstBuffer, uint32_t BufferSize)
{
 8015262:	b480      	push	{r7}
 8015264:	b085      	sub	sp, #20
 8015266:	af00      	add	r7, sp, #0
 8015268:	60f8      	str	r0, [r7, #12]
 801526a:	60b9      	str	r1, [r7, #8]
 801526c:	607a      	str	r2, [r7, #4]
 801526e:	603b      	str	r3, [r7, #0]
  /* Process Locked */
  __HAL_LOCK(hsram);
 8015270:	68fb      	ldr	r3, [r7, #12]
 8015272:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015276:	2b01      	cmp	r3, #1
 8015278:	d101      	bne.n	801527e <HAL_SRAM_Read_32b+0x1c>
 801527a:	2302      	movs	r3, #2
 801527c:	e021      	b.n	80152c2 <HAL_SRAM_Read_32b+0x60>
 801527e:	68fb      	ldr	r3, [r7, #12]
 8015280:	2201      	movs	r2, #1
 8015282:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY;  
 8015286:	68fb      	ldr	r3, [r7, #12]
 8015288:	2202      	movs	r2, #2
 801528a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Read data from memory */
  for(; BufferSize != 0U; BufferSize--)
 801528e:	e00c      	b.n	80152aa <HAL_SRAM_Read_32b+0x48>
  {
    *pDstBuffer = *(__IO uint32_t *)pAddress;
 8015290:	68bb      	ldr	r3, [r7, #8]
 8015292:	681a      	ldr	r2, [r3, #0]
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	601a      	str	r2, [r3, #0]
    pDstBuffer++;
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	3304      	adds	r3, #4
 801529c:	607b      	str	r3, [r7, #4]
    pAddress++;
 801529e:	68bb      	ldr	r3, [r7, #8]
 80152a0:	3304      	adds	r3, #4
 80152a2:	60bb      	str	r3, [r7, #8]
  for(; BufferSize != 0U; BufferSize--)
 80152a4:	683b      	ldr	r3, [r7, #0]
 80152a6:	3b01      	subs	r3, #1
 80152a8:	603b      	str	r3, [r7, #0]
 80152aa:	683b      	ldr	r3, [r7, #0]
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d1ef      	bne.n	8015290 <HAL_SRAM_Read_32b+0x2e>
  }
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;    
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	2201      	movs	r2, #1
 80152b4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process unlocked */
  __HAL_UNLOCK(hsram); 
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	2200      	movs	r2, #0
 80152bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;  
 80152c0:	2300      	movs	r3, #0
}
 80152c2:	4618      	mov	r0, r3
 80152c4:	3714      	adds	r7, #20
 80152c6:	46bd      	mov	sp, r7
 80152c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152cc:	4770      	bx	lr

080152ce <HAL_SRAM_Write_32b>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_32b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pSrcBuffer, uint32_t BufferSize)
{
 80152ce:	b480      	push	{r7}
 80152d0:	b085      	sub	sp, #20
 80152d2:	af00      	add	r7, sp, #0
 80152d4:	60f8      	str	r0, [r7, #12]
 80152d6:	60b9      	str	r1, [r7, #8]
 80152d8:	607a      	str	r2, [r7, #4]
 80152da:	603b      	str	r3, [r7, #0]
  /* Check the SRAM controller state */
  if(hsram->State == HAL_SRAM_STATE_PROTECTED)
 80152dc:	68fb      	ldr	r3, [r7, #12]
 80152de:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80152e2:	b2db      	uxtb	r3, r3
 80152e4:	2b04      	cmp	r3, #4
 80152e6:	d101      	bne.n	80152ec <HAL_SRAM_Write_32b+0x1e>
  {
    return  HAL_ERROR; 
 80152e8:	2301      	movs	r3, #1
 80152ea:	e028      	b.n	801533e <HAL_SRAM_Write_32b+0x70>
  }
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 80152ec:	68fb      	ldr	r3, [r7, #12]
 80152ee:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80152f2:	2b01      	cmp	r3, #1
 80152f4:	d101      	bne.n	80152fa <HAL_SRAM_Write_32b+0x2c>
 80152f6:	2302      	movs	r3, #2
 80152f8:	e021      	b.n	801533e <HAL_SRAM_Write_32b+0x70>
 80152fa:	68fb      	ldr	r3, [r7, #12]
 80152fc:	2201      	movs	r2, #1
 80152fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY; 
 8015302:	68fb      	ldr	r3, [r7, #12]
 8015304:	2202      	movs	r2, #2
 8015306:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Write data to memory */
  for(; BufferSize != 0U; BufferSize--)
 801530a:	e00c      	b.n	8015326 <HAL_SRAM_Write_32b+0x58>
  {
    *(__IO uint32_t *)pAddress = *pSrcBuffer; 
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	681a      	ldr	r2, [r3, #0]
 8015310:	68bb      	ldr	r3, [r7, #8]
 8015312:	601a      	str	r2, [r3, #0]
    pSrcBuffer++;
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	3304      	adds	r3, #4
 8015318:	607b      	str	r3, [r7, #4]
    pAddress++;    
 801531a:	68bb      	ldr	r3, [r7, #8]
 801531c:	3304      	adds	r3, #4
 801531e:	60bb      	str	r3, [r7, #8]
  for(; BufferSize != 0U; BufferSize--)
 8015320:	683b      	ldr	r3, [r7, #0]
 8015322:	3b01      	subs	r3, #1
 8015324:	603b      	str	r3, [r7, #0]
 8015326:	683b      	ldr	r3, [r7, #0]
 8015328:	2b00      	cmp	r3, #0
 801532a:	d1ef      	bne.n	801530c <HAL_SRAM_Write_32b+0x3e>
  }    

  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY; 
 801532c:	68fb      	ldr	r3, [r7, #12]
 801532e:	2201      	movs	r2, #1
 8015330:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram);
 8015334:	68fb      	ldr	r3, [r7, #12]
 8015336:	2200      	movs	r2, #0
 8015338:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;   
 801533c:	2300      	movs	r3, #0
}
 801533e:	4618      	mov	r0, r3
 8015340:	3714      	adds	r7, #20
 8015342:	46bd      	mov	sp, r7
 8015344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015348:	4770      	bx	lr

0801534a <HAL_SRAM_Read_DMA>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Read_DMA(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pDstBuffer, uint32_t BufferSize)
{
 801534a:	b580      	push	{r7, lr}
 801534c:	b084      	sub	sp, #16
 801534e:	af00      	add	r7, sp, #0
 8015350:	60f8      	str	r0, [r7, #12]
 8015352:	60b9      	str	r1, [r7, #8]
 8015354:	607a      	str	r2, [r7, #4]
 8015356:	603b      	str	r3, [r7, #0]
  /* Process Locked */
  __HAL_LOCK(hsram);  
 8015358:	68fb      	ldr	r3, [r7, #12]
 801535a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801535e:	2b01      	cmp	r3, #1
 8015360:	d101      	bne.n	8015366 <HAL_SRAM_Read_DMA+0x1c>
 8015362:	2302      	movs	r3, #2
 8015364:	e01f      	b.n	80153a6 <HAL_SRAM_Read_DMA+0x5c>
 8015366:	68fb      	ldr	r3, [r7, #12]
 8015368:	2201      	movs	r2, #1
 801536a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY;   
 801536e:	68fb      	ldr	r3, [r7, #12]
 8015370:	2202      	movs	r2, #2
 8015372:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Configure DMA user callbacks */
  hsram->hdma->XferCpltCallback  = HAL_SRAM_DMA_XferCpltCallback;
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801537a:	4a0d      	ldr	r2, [pc, #52]	; (80153b0 <HAL_SRAM_Read_DMA+0x66>)
 801537c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram->hdma->XferErrorCallback = HAL_SRAM_DMA_XferErrorCallback;
 801537e:	68fb      	ldr	r3, [r7, #12]
 8015380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015382:	4a0c      	ldr	r2, [pc, #48]	; (80153b4 <HAL_SRAM_Read_DMA+0x6a>)
 8015384:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the DMA Stream */
  HAL_DMA_Start_IT(hsram->hdma, (uint32_t)pAddress, (uint32_t)pDstBuffer, (uint32_t)BufferSize);
 8015386:	68fb      	ldr	r3, [r7, #12]
 8015388:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801538a:	68b9      	ldr	r1, [r7, #8]
 801538c:	687a      	ldr	r2, [r7, #4]
 801538e:	683b      	ldr	r3, [r7, #0]
 8015390:	f7f2 fca9 	bl	8007ce6 <HAL_DMA_Start_IT>
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY; 
 8015394:	68fb      	ldr	r3, [r7, #12]
 8015396:	2201      	movs	r2, #1
 8015398:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram);  
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	2200      	movs	r2, #0
 80153a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  return HAL_OK; 
 80153a4:	2300      	movs	r3, #0
}
 80153a6:	4618      	mov	r0, r3
 80153a8:	3710      	adds	r7, #16
 80153aa:	46bd      	mov	sp, r7
 80153ac:	bd80      	pop	{r7, pc}
 80153ae:	bf00      	nop
 80153b0:	08015057 	.word	0x08015057
 80153b4:	0801506b 	.word	0x0801506b

080153b8 <HAL_SRAM_Write_DMA>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_DMA(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pSrcBuffer, uint32_t BufferSize)
{
 80153b8:	b580      	push	{r7, lr}
 80153ba:	b084      	sub	sp, #16
 80153bc:	af00      	add	r7, sp, #0
 80153be:	60f8      	str	r0, [r7, #12]
 80153c0:	60b9      	str	r1, [r7, #8]
 80153c2:	607a      	str	r2, [r7, #4]
 80153c4:	603b      	str	r3, [r7, #0]
  /* Check the SRAM controller state */
  if(hsram->State == HAL_SRAM_STATE_PROTECTED)
 80153c6:	68fb      	ldr	r3, [r7, #12]
 80153c8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80153cc:	b2db      	uxtb	r3, r3
 80153ce:	2b04      	cmp	r3, #4
 80153d0:	d101      	bne.n	80153d6 <HAL_SRAM_Write_DMA+0x1e>
  {
    return  HAL_ERROR; 
 80153d2:	2301      	movs	r3, #1
 80153d4:	e026      	b.n	8015424 <HAL_SRAM_Write_DMA+0x6c>
  }
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 80153d6:	68fb      	ldr	r3, [r7, #12]
 80153d8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80153dc:	2b01      	cmp	r3, #1
 80153de:	d101      	bne.n	80153e4 <HAL_SRAM_Write_DMA+0x2c>
 80153e0:	2302      	movs	r3, #2
 80153e2:	e01f      	b.n	8015424 <HAL_SRAM_Write_DMA+0x6c>
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	2201      	movs	r2, #1
 80153e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY; 
 80153ec:	68fb      	ldr	r3, [r7, #12]
 80153ee:	2202      	movs	r2, #2
 80153f0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Configure DMA user callbacks */
  hsram->hdma->XferCpltCallback  = HAL_SRAM_DMA_XferCpltCallback;
 80153f4:	68fb      	ldr	r3, [r7, #12]
 80153f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80153f8:	4a0c      	ldr	r2, [pc, #48]	; (801542c <HAL_SRAM_Write_DMA+0x74>)
 80153fa:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram->hdma->XferErrorCallback = HAL_SRAM_DMA_XferErrorCallback;
 80153fc:	68fb      	ldr	r3, [r7, #12]
 80153fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015400:	4a0b      	ldr	r2, [pc, #44]	; (8015430 <HAL_SRAM_Write_DMA+0x78>)
 8015402:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the DMA Stream */
  HAL_DMA_Start_IT(hsram->hdma, (uint32_t)pSrcBuffer, (uint32_t)pAddress, (uint32_t)BufferSize);
 8015404:	68fb      	ldr	r3, [r7, #12]
 8015406:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8015408:	6879      	ldr	r1, [r7, #4]
 801540a:	68ba      	ldr	r2, [r7, #8]
 801540c:	683b      	ldr	r3, [r7, #0]
 801540e:	f7f2 fc6a 	bl	8007ce6 <HAL_DMA_Start_IT>
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;  
 8015412:	68fb      	ldr	r3, [r7, #12]
 8015414:	2201      	movs	r2, #1
 8015416:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram);  
 801541a:	68fb      	ldr	r3, [r7, #12]
 801541c:	2200      	movs	r2, #0
 801541e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  return HAL_OK;
 8015422:	2300      	movs	r3, #0
}
 8015424:	4618      	mov	r0, r3
 8015426:	3710      	adds	r7, #16
 8015428:	46bd      	mov	sp, r7
 801542a:	bd80      	pop	{r7, pc}
 801542c:	08015057 	.word	0x08015057
 8015430:	0801506b 	.word	0x0801506b

08015434 <HAL_SRAM_WriteOperation_Enable>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_WriteOperation_Enable(SRAM_HandleTypeDef *hsram)
{
 8015434:	b580      	push	{r7, lr}
 8015436:	b082      	sub	sp, #8
 8015438:	af00      	add	r7, sp, #0
 801543a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hsram);
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015442:	2b01      	cmp	r3, #1
 8015444:	d101      	bne.n	801544a <HAL_SRAM_WriteOperation_Enable+0x16>
 8015446:	2302      	movs	r3, #2
 8015448:	e014      	b.n	8015474 <HAL_SRAM_WriteOperation_Enable+0x40>
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	2201      	movs	r2, #1
 801544e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Enable write operation */
  FMC_NORSRAM_WriteOperation_Enable(hsram->Instance, hsram->Init.NSBank); 
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	681a      	ldr	r2, [r3, #0]
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	689b      	ldr	r3, [r3, #8]
 801545a:	4619      	mov	r1, r3
 801545c:	4610      	mov	r0, r2
 801545e:	f003 f85b 	bl	8018518 <FSMC_NORSRAM_WriteOperation_Enable>
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	2201      	movs	r2, #1
 8015466:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram); 
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	2200      	movs	r2, #0
 801546e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  return HAL_OK;  
 8015472:	2300      	movs	r3, #0
}
 8015474:	4618      	mov	r0, r3
 8015476:	3708      	adds	r7, #8
 8015478:	46bd      	mov	sp, r7
 801547a:	bd80      	pop	{r7, pc}

0801547c <HAL_SRAM_WriteOperation_Disable>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_WriteOperation_Disable(SRAM_HandleTypeDef *hsram)
{
 801547c:	b580      	push	{r7, lr}
 801547e:	b082      	sub	sp, #8
 8015480:	af00      	add	r7, sp, #0
 8015482:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hsram);
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801548a:	2b01      	cmp	r3, #1
 801548c:	d101      	bne.n	8015492 <HAL_SRAM_WriteOperation_Disable+0x16>
 801548e:	2302      	movs	r3, #2
 8015490:	e018      	b.n	80154c4 <HAL_SRAM_WriteOperation_Disable+0x48>
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	2201      	movs	r2, #1
 8015496:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY;
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	2202      	movs	r2, #2
 801549e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    
  /* Disable write operation */
  FMC_NORSRAM_WriteOperation_Disable(hsram->Instance, hsram->Init.NSBank); 
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	681a      	ldr	r2, [r3, #0]
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	689b      	ldr	r3, [r3, #8]
 80154aa:	4619      	mov	r1, r3
 80154ac:	4610      	mov	r0, r2
 80154ae:	f003 f849 	bl	8018544 <FSMC_NORSRAM_WriteOperation_Disable>
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_PROTECTED;
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	2204      	movs	r2, #4
 80154b6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram); 
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	2200      	movs	r2, #0
 80154be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  return HAL_OK;  
 80154c2:	2300      	movs	r3, #0
}
 80154c4:	4618      	mov	r0, r3
 80154c6:	3708      	adds	r7, #8
 80154c8:	46bd      	mov	sp, r7
 80154ca:	bd80      	pop	{r7, pc}

080154cc <HAL_SRAM_GetState>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval HAL state
  */
HAL_SRAM_StateTypeDef HAL_SRAM_GetState(SRAM_HandleTypeDef *hsram)
{
 80154cc:	b480      	push	{r7}
 80154ce:	b083      	sub	sp, #12
 80154d0:	af00      	add	r7, sp, #0
 80154d2:	6078      	str	r0, [r7, #4]
  return hsram->State;
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80154da:	b2db      	uxtb	r3, r3
}
 80154dc:	4618      	mov	r0, r3
 80154de:	370c      	adds	r7, #12
 80154e0:	46bd      	mov	sp, r7
 80154e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154e6:	4770      	bx	lr

080154e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80154e8:	b580      	push	{r7, lr}
 80154ea:	b082      	sub	sp, #8
 80154ec:	af00      	add	r7, sp, #0
 80154ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	2b00      	cmp	r3, #0
 80154f4:	d101      	bne.n	80154fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80154f6:	2301      	movs	r3, #1
 80154f8:	e03f      	b.n	801557a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015500:	b2db      	uxtb	r3, r3
 8015502:	2b00      	cmp	r3, #0
 8015504:	d106      	bne.n	8015514 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	2200      	movs	r2, #0
 801550a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801550e:	6878      	ldr	r0, [r7, #4]
 8015510:	f7f0 fc06 	bl	8005d20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	2224      	movs	r2, #36	; 0x24
 8015518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	681b      	ldr	r3, [r3, #0]
 8015520:	68da      	ldr	r2, [r3, #12]
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	681b      	ldr	r3, [r3, #0]
 8015526:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801552a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 801552c:	6878      	ldr	r0, [r7, #4]
 801552e:	f002 fc7e 	bl	8017e2e <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	681b      	ldr	r3, [r3, #0]
 8015536:	691a      	ldr	r2, [r3, #16]
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	681b      	ldr	r3, [r3, #0]
 801553c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8015540:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	681b      	ldr	r3, [r3, #0]
 8015546:	695a      	ldr	r2, [r3, #20]
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	681b      	ldr	r3, [r3, #0]
 801554c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8015550:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	681b      	ldr	r3, [r3, #0]
 8015556:	68da      	ldr	r2, [r3, #12]
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	681b      	ldr	r3, [r3, #0]
 801555c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8015560:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	2200      	movs	r2, #0
 8015566:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	2220      	movs	r2, #32
 801556c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	2220      	movs	r2, #32
 8015574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8015578:	2300      	movs	r3, #0
}
 801557a:	4618      	mov	r0, r3
 801557c:	3708      	adds	r7, #8
 801557e:	46bd      	mov	sp, r7
 8015580:	bd80      	pop	{r7, pc}

08015582 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8015582:	b580      	push	{r7, lr}
 8015584:	b082      	sub	sp, #8
 8015586:	af00      	add	r7, sp, #0
 8015588:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	2b00      	cmp	r3, #0
 801558e:	d101      	bne.n	8015594 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8015590:	2301      	movs	r3, #1
 8015592:	e047      	b.n	8015624 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801559a:	b2db      	uxtb	r3, r3
 801559c:	2b00      	cmp	r3, #0
 801559e:	d106      	bne.n	80155ae <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	2200      	movs	r2, #0
 80155a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80155a8:	6878      	ldr	r0, [r7, #4]
 80155aa:	f7f0 fbb9 	bl	8005d20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	2224      	movs	r2, #36	; 0x24
 80155b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	681b      	ldr	r3, [r3, #0]
 80155ba:	68da      	ldr	r2, [r3, #12]
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	681b      	ldr	r3, [r3, #0]
 80155c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80155c4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80155c6:	6878      	ldr	r0, [r7, #4]
 80155c8:	f002 fc31 	bl	8017e2e <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	681b      	ldr	r3, [r3, #0]
 80155d0:	691a      	ldr	r2, [r3, #16]
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	681b      	ldr	r3, [r3, #0]
 80155d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80155da:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	681b      	ldr	r3, [r3, #0]
 80155e0:	695a      	ldr	r2, [r3, #20]
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	681b      	ldr	r3, [r3, #0]
 80155e6:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80155ea:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	681b      	ldr	r3, [r3, #0]
 80155f0:	695a      	ldr	r2, [r3, #20]
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	681b      	ldr	r3, [r3, #0]
 80155f6:	f042 0208 	orr.w	r2, r2, #8
 80155fa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	681b      	ldr	r3, [r3, #0]
 8015600:	68da      	ldr	r2, [r3, #12]
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	681b      	ldr	r3, [r3, #0]
 8015606:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801560a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	2200      	movs	r2, #0
 8015610:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	2220      	movs	r2, #32
 8015616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	2220      	movs	r2, #32
 801561e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8015622:	2300      	movs	r3, #0
}
 8015624:	4618      	mov	r0, r3
 8015626:	3708      	adds	r7, #8
 8015628:	46bd      	mov	sp, r7
 801562a:	bd80      	pop	{r7, pc}

0801562c <HAL_LIN_Init>:
  *            @arg UART_LINBREAKDETECTLENGTH_10B: 10-bit break detection
  *            @arg UART_LINBREAKDETECTLENGTH_11B: 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 801562c:	b580      	push	{r7, lr}
 801562e:	b082      	sub	sp, #8
 8015630:	af00      	add	r7, sp, #0
 8015632:	6078      	str	r0, [r7, #4]
 8015634:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	2b00      	cmp	r3, #0
 801563a:	d101      	bne.n	8015640 <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 801563c:	2301      	movs	r3, #1
 801563e:	e057      	b.n	80156f0 <HAL_LIN_Init+0xc4>
  /* Check the Break detection length parameter */
  assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
  assert_param(IS_UART_LIN_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_LIN_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015646:	b2db      	uxtb	r3, r3
 8015648:	2b00      	cmp	r3, #0
 801564a:	d106      	bne.n	801565a <HAL_LIN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	2200      	movs	r2, #0
 8015650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8015654:	6878      	ldr	r0, [r7, #4]
 8015656:	f7f0 fb63 	bl	8005d20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	2224      	movs	r2, #36	; 0x24
 801565e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	681b      	ldr	r3, [r3, #0]
 8015666:	68da      	ldr	r2, [r3, #12]
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	681b      	ldr	r3, [r3, #0]
 801566c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8015670:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8015672:	6878      	ldr	r0, [r7, #4]
 8015674:	f002 fbdb 	bl	8017e2e <UART_SetConfig>

  /* In LIN mode, the following bits must be kept cleared:
     - CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_CLKEN));
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	681b      	ldr	r3, [r3, #0]
 801567c:	691a      	ldr	r2, [r3, #16]
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	681b      	ldr	r3, [r3, #0]
 8015682:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8015686:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	681b      	ldr	r3, [r3, #0]
 801568c:	695a      	ldr	r2, [r3, #20]
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	681b      	ldr	r3, [r3, #0]
 8015692:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8015696:	615a      	str	r2, [r3, #20]

  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	681b      	ldr	r3, [r3, #0]
 801569c:	691a      	ldr	r2, [r3, #16]
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	681b      	ldr	r3, [r3, #0]
 80156a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80156a6:	611a      	str	r2, [r3, #16]

  /* Set the USART LIN Break detection length. */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_LBDL);
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	681b      	ldr	r3, [r3, #0]
 80156ac:	691a      	ldr	r2, [r3, #16]
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	681b      	ldr	r3, [r3, #0]
 80156b2:	f022 0220 	bic.w	r2, r2, #32
 80156b6:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, BreakDetectLength);
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	681b      	ldr	r3, [r3, #0]
 80156bc:	6919      	ldr	r1, [r3, #16]
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	681b      	ldr	r3, [r3, #0]
 80156c2:	683a      	ldr	r2, [r7, #0]
 80156c4:	430a      	orrs	r2, r1
 80156c6:	611a      	str	r2, [r3, #16]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	681b      	ldr	r3, [r3, #0]
 80156cc:	68da      	ldr	r2, [r3, #12]
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	681b      	ldr	r3, [r3, #0]
 80156d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80156d6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	2200      	movs	r2, #0
 80156dc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	2220      	movs	r2, #32
 80156e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	2220      	movs	r2, #32
 80156ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80156ee:	2300      	movs	r3, #0
}
 80156f0:	4618      	mov	r0, r3
 80156f2:	3708      	adds	r7, #8
 80156f4:	46bd      	mov	sp, r7
 80156f6:	bd80      	pop	{r7, pc}

080156f8 <HAL_MultiProcessor_Init>:
  *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
  *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 80156f8:	b580      	push	{r7, lr}
 80156fa:	b084      	sub	sp, #16
 80156fc:	af00      	add	r7, sp, #0
 80156fe:	60f8      	str	r0, [r7, #12]
 8015700:	460b      	mov	r3, r1
 8015702:	607a      	str	r2, [r7, #4]
 8015704:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015706:	68fb      	ldr	r3, [r7, #12]
 8015708:	2b00      	cmp	r3, #0
 801570a:	d101      	bne.n	8015710 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 801570c:	2301      	movs	r3, #1
 801570e:	e05f      	b.n	80157d0 <HAL_MultiProcessor_Init+0xd8>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
  assert_param(IS_UART_ADDRESS(Address));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8015710:	68fb      	ldr	r3, [r7, #12]
 8015712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015716:	b2db      	uxtb	r3, r3
 8015718:	2b00      	cmp	r3, #0
 801571a:	d106      	bne.n	801572a <HAL_MultiProcessor_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	2200      	movs	r2, #0
 8015720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8015724:	68f8      	ldr	r0, [r7, #12]
 8015726:	f7f0 fafb 	bl	8005d20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801572a:	68fb      	ldr	r3, [r7, #12]
 801572c:	2224      	movs	r2, #36	; 0x24
 801572e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8015732:	68fb      	ldr	r3, [r7, #12]
 8015734:	681b      	ldr	r3, [r3, #0]
 8015736:	68da      	ldr	r2, [r3, #12]
 8015738:	68fb      	ldr	r3, [r7, #12]
 801573a:	681b      	ldr	r3, [r3, #0]
 801573c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8015740:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8015742:	68f8      	ldr	r0, [r7, #12]
 8015744:	f002 fb73 	bl	8017e2e <UART_SetConfig>

  /* In Multi-Processor mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8015748:	68fb      	ldr	r3, [r7, #12]
 801574a:	681b      	ldr	r3, [r3, #0]
 801574c:	691a      	ldr	r2, [r3, #16]
 801574e:	68fb      	ldr	r3, [r7, #12]
 8015750:	681b      	ldr	r3, [r3, #0]
 8015752:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8015756:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8015758:	68fb      	ldr	r3, [r7, #12]
 801575a:	681b      	ldr	r3, [r3, #0]
 801575c:	695a      	ldr	r2, [r3, #20]
 801575e:	68fb      	ldr	r3, [r7, #12]
 8015760:	681b      	ldr	r3, [r3, #0]
 8015762:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8015766:	615a      	str	r2, [r3, #20]

  /* Set the USART address node */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 8015768:	68fb      	ldr	r3, [r7, #12]
 801576a:	681b      	ldr	r3, [r3, #0]
 801576c:	691a      	ldr	r2, [r3, #16]
 801576e:	68fb      	ldr	r3, [r7, #12]
 8015770:	681b      	ldr	r3, [r3, #0]
 8015772:	f022 020f 	bic.w	r2, r2, #15
 8015776:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, Address);
 8015778:	68fb      	ldr	r3, [r7, #12]
 801577a:	681b      	ldr	r3, [r3, #0]
 801577c:	6919      	ldr	r1, [r3, #16]
 801577e:	7afa      	ldrb	r2, [r7, #11]
 8015780:	68fb      	ldr	r3, [r7, #12]
 8015782:	681b      	ldr	r3, [r3, #0]
 8015784:	430a      	orrs	r2, r1
 8015786:	611a      	str	r2, [r3, #16]

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 8015788:	68fb      	ldr	r3, [r7, #12]
 801578a:	681b      	ldr	r3, [r3, #0]
 801578c:	68da      	ldr	r2, [r3, #12]
 801578e:	68fb      	ldr	r3, [r7, #12]
 8015790:	681b      	ldr	r3, [r3, #0]
 8015792:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8015796:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR1, WakeUpMethod);
 8015798:	68fb      	ldr	r3, [r7, #12]
 801579a:	681b      	ldr	r3, [r3, #0]
 801579c:	68d9      	ldr	r1, [r3, #12]
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	681b      	ldr	r3, [r3, #0]
 80157a2:	687a      	ldr	r2, [r7, #4]
 80157a4:	430a      	orrs	r2, r1
 80157a6:	60da      	str	r2, [r3, #12]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80157a8:	68fb      	ldr	r3, [r7, #12]
 80157aa:	681b      	ldr	r3, [r3, #0]
 80157ac:	68da      	ldr	r2, [r3, #12]
 80157ae:	68fb      	ldr	r3, [r7, #12]
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80157b6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80157b8:	68fb      	ldr	r3, [r7, #12]
 80157ba:	2200      	movs	r2, #0
 80157bc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80157be:	68fb      	ldr	r3, [r7, #12]
 80157c0:	2220      	movs	r2, #32
 80157c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80157c6:	68fb      	ldr	r3, [r7, #12]
 80157c8:	2220      	movs	r2, #32
 80157ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80157ce:	2300      	movs	r3, #0
}
 80157d0:	4618      	mov	r0, r3
 80157d2:	3710      	adds	r7, #16
 80157d4:	46bd      	mov	sp, r7
 80157d6:	bd80      	pop	{r7, pc}

080157d8 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80157d8:	b580      	push	{r7, lr}
 80157da:	b082      	sub	sp, #8
 80157dc:	af00      	add	r7, sp, #0
 80157de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d101      	bne.n	80157ea <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80157e6:	2301      	movs	r3, #1
 80157e8:	e021      	b.n	801582e <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	2224      	movs	r2, #36	; 0x24
 80157ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	681b      	ldr	r3, [r3, #0]
 80157f6:	68da      	ldr	r2, [r3, #12]
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	681b      	ldr	r3, [r3, #0]
 80157fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8015800:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8015802:	6878      	ldr	r0, [r7, #4]
 8015804:	f7f0 fadc 	bl	8005dc0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	2200      	movs	r2, #0
 801580c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	2200      	movs	r2, #0
 8015812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	2200      	movs	r2, #0
 801581a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	2200      	movs	r2, #0
 8015822:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	2200      	movs	r2, #0
 8015828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801582c:	2300      	movs	r3, #0
}
 801582e:	4618      	mov	r0, r3
 8015830:	3708      	adds	r7, #8
 8015832:	46bd      	mov	sp, r7
 8015834:	bd80      	pop	{r7, pc}

08015836 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015836:	b580      	push	{r7, lr}
 8015838:	b08a      	sub	sp, #40	; 0x28
 801583a:	af02      	add	r7, sp, #8
 801583c:	60f8      	str	r0, [r7, #12]
 801583e:	60b9      	str	r1, [r7, #8]
 8015840:	603b      	str	r3, [r7, #0]
 8015842:	4613      	mov	r3, r2
 8015844:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8015846:	2300      	movs	r3, #0
 8015848:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801584a:	68fb      	ldr	r3, [r7, #12]
 801584c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015850:	b2db      	uxtb	r3, r3
 8015852:	2b20      	cmp	r3, #32
 8015854:	d17c      	bne.n	8015950 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8015856:	68bb      	ldr	r3, [r7, #8]
 8015858:	2b00      	cmp	r3, #0
 801585a:	d002      	beq.n	8015862 <HAL_UART_Transmit+0x2c>
 801585c:	88fb      	ldrh	r3, [r7, #6]
 801585e:	2b00      	cmp	r3, #0
 8015860:	d101      	bne.n	8015866 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8015862:	2301      	movs	r3, #1
 8015864:	e075      	b.n	8015952 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8015866:	68fb      	ldr	r3, [r7, #12]
 8015868:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801586c:	2b01      	cmp	r3, #1
 801586e:	d101      	bne.n	8015874 <HAL_UART_Transmit+0x3e>
 8015870:	2302      	movs	r3, #2
 8015872:	e06e      	b.n	8015952 <HAL_UART_Transmit+0x11c>
 8015874:	68fb      	ldr	r3, [r7, #12]
 8015876:	2201      	movs	r2, #1
 8015878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801587c:	68fb      	ldr	r3, [r7, #12]
 801587e:	2200      	movs	r2, #0
 8015880:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8015882:	68fb      	ldr	r3, [r7, #12]
 8015884:	2221      	movs	r2, #33	; 0x21
 8015886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801588a:	f7f0 ffc3 	bl	8006814 <HAL_GetTick>
 801588e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8015890:	68fb      	ldr	r3, [r7, #12]
 8015892:	88fa      	ldrh	r2, [r7, #6]
 8015894:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8015896:	68fb      	ldr	r3, [r7, #12]
 8015898:	88fa      	ldrh	r2, [r7, #6]
 801589a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	689b      	ldr	r3, [r3, #8]
 80158a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80158a4:	d108      	bne.n	80158b8 <HAL_UART_Transmit+0x82>
 80158a6:	68fb      	ldr	r3, [r7, #12]
 80158a8:	691b      	ldr	r3, [r3, #16]
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d104      	bne.n	80158b8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80158ae:	2300      	movs	r3, #0
 80158b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80158b2:	68bb      	ldr	r3, [r7, #8]
 80158b4:	61bb      	str	r3, [r7, #24]
 80158b6:	e003      	b.n	80158c0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80158b8:	68bb      	ldr	r3, [r7, #8]
 80158ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80158bc:	2300      	movs	r3, #0
 80158be:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80158c0:	68fb      	ldr	r3, [r7, #12]
 80158c2:	2200      	movs	r2, #0
 80158c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80158c8:	e02a      	b.n	8015920 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80158ca:	683b      	ldr	r3, [r7, #0]
 80158cc:	9300      	str	r3, [sp, #0]
 80158ce:	697b      	ldr	r3, [r7, #20]
 80158d0:	2200      	movs	r2, #0
 80158d2:	2180      	movs	r1, #128	; 0x80
 80158d4:	68f8      	ldr	r0, [r7, #12]
 80158d6:	f001 ff19 	bl	801770c <UART_WaitOnFlagUntilTimeout>
 80158da:	4603      	mov	r3, r0
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d001      	beq.n	80158e4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80158e0:	2303      	movs	r3, #3
 80158e2:	e036      	b.n	8015952 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80158e4:	69fb      	ldr	r3, [r7, #28]
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	d10b      	bne.n	8015902 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80158ea:	69bb      	ldr	r3, [r7, #24]
 80158ec:	881b      	ldrh	r3, [r3, #0]
 80158ee:	461a      	mov	r2, r3
 80158f0:	68fb      	ldr	r3, [r7, #12]
 80158f2:	681b      	ldr	r3, [r3, #0]
 80158f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80158f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80158fa:	69bb      	ldr	r3, [r7, #24]
 80158fc:	3302      	adds	r3, #2
 80158fe:	61bb      	str	r3, [r7, #24]
 8015900:	e007      	b.n	8015912 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8015902:	69fb      	ldr	r3, [r7, #28]
 8015904:	781a      	ldrb	r2, [r3, #0]
 8015906:	68fb      	ldr	r3, [r7, #12]
 8015908:	681b      	ldr	r3, [r3, #0]
 801590a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 801590c:	69fb      	ldr	r3, [r7, #28]
 801590e:	3301      	adds	r3, #1
 8015910:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8015912:	68fb      	ldr	r3, [r7, #12]
 8015914:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015916:	b29b      	uxth	r3, r3
 8015918:	3b01      	subs	r3, #1
 801591a:	b29a      	uxth	r2, r3
 801591c:	68fb      	ldr	r3, [r7, #12]
 801591e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8015920:	68fb      	ldr	r3, [r7, #12]
 8015922:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015924:	b29b      	uxth	r3, r3
 8015926:	2b00      	cmp	r3, #0
 8015928:	d1cf      	bne.n	80158ca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801592a:	683b      	ldr	r3, [r7, #0]
 801592c:	9300      	str	r3, [sp, #0]
 801592e:	697b      	ldr	r3, [r7, #20]
 8015930:	2200      	movs	r2, #0
 8015932:	2140      	movs	r1, #64	; 0x40
 8015934:	68f8      	ldr	r0, [r7, #12]
 8015936:	f001 fee9 	bl	801770c <UART_WaitOnFlagUntilTimeout>
 801593a:	4603      	mov	r3, r0
 801593c:	2b00      	cmp	r3, #0
 801593e:	d001      	beq.n	8015944 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8015940:	2303      	movs	r3, #3
 8015942:	e006      	b.n	8015952 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8015944:	68fb      	ldr	r3, [r7, #12]
 8015946:	2220      	movs	r2, #32
 8015948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 801594c:	2300      	movs	r3, #0
 801594e:	e000      	b.n	8015952 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8015950:	2302      	movs	r3, #2
  }
}
 8015952:	4618      	mov	r0, r3
 8015954:	3720      	adds	r7, #32
 8015956:	46bd      	mov	sp, r7
 8015958:	bd80      	pop	{r7, pc}

0801595a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801595a:	b580      	push	{r7, lr}
 801595c:	b08a      	sub	sp, #40	; 0x28
 801595e:	af02      	add	r7, sp, #8
 8015960:	60f8      	str	r0, [r7, #12]
 8015962:	60b9      	str	r1, [r7, #8]
 8015964:	603b      	str	r3, [r7, #0]
 8015966:	4613      	mov	r3, r2
 8015968:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 801596a:	2300      	movs	r3, #0
 801596c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015974:	b2db      	uxtb	r3, r3
 8015976:	2b20      	cmp	r3, #32
 8015978:	f040 808c 	bne.w	8015a94 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 801597c:	68bb      	ldr	r3, [r7, #8]
 801597e:	2b00      	cmp	r3, #0
 8015980:	d002      	beq.n	8015988 <HAL_UART_Receive+0x2e>
 8015982:	88fb      	ldrh	r3, [r7, #6]
 8015984:	2b00      	cmp	r3, #0
 8015986:	d101      	bne.n	801598c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8015988:	2301      	movs	r3, #1
 801598a:	e084      	b.n	8015a96 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801598c:	68fb      	ldr	r3, [r7, #12]
 801598e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015992:	2b01      	cmp	r3, #1
 8015994:	d101      	bne.n	801599a <HAL_UART_Receive+0x40>
 8015996:	2302      	movs	r3, #2
 8015998:	e07d      	b.n	8015a96 <HAL_UART_Receive+0x13c>
 801599a:	68fb      	ldr	r3, [r7, #12]
 801599c:	2201      	movs	r2, #1
 801599e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80159a2:	68fb      	ldr	r3, [r7, #12]
 80159a4:	2200      	movs	r2, #0
 80159a6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80159a8:	68fb      	ldr	r3, [r7, #12]
 80159aa:	2222      	movs	r2, #34	; 0x22
 80159ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80159b0:	68fb      	ldr	r3, [r7, #12]
 80159b2:	2200      	movs	r2, #0
 80159b4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80159b6:	f7f0 ff2d 	bl	8006814 <HAL_GetTick>
 80159ba:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80159bc:	68fb      	ldr	r3, [r7, #12]
 80159be:	88fa      	ldrh	r2, [r7, #6]
 80159c0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80159c2:	68fb      	ldr	r3, [r7, #12]
 80159c4:	88fa      	ldrh	r2, [r7, #6]
 80159c6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80159c8:	68fb      	ldr	r3, [r7, #12]
 80159ca:	689b      	ldr	r3, [r3, #8]
 80159cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80159d0:	d108      	bne.n	80159e4 <HAL_UART_Receive+0x8a>
 80159d2:	68fb      	ldr	r3, [r7, #12]
 80159d4:	691b      	ldr	r3, [r3, #16]
 80159d6:	2b00      	cmp	r3, #0
 80159d8:	d104      	bne.n	80159e4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80159da:	2300      	movs	r3, #0
 80159dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80159de:	68bb      	ldr	r3, [r7, #8]
 80159e0:	61bb      	str	r3, [r7, #24]
 80159e2:	e003      	b.n	80159ec <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80159e4:	68bb      	ldr	r3, [r7, #8]
 80159e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80159e8:	2300      	movs	r3, #0
 80159ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80159ec:	68fb      	ldr	r3, [r7, #12]
 80159ee:	2200      	movs	r2, #0
 80159f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80159f4:	e043      	b.n	8015a7e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80159f6:	683b      	ldr	r3, [r7, #0]
 80159f8:	9300      	str	r3, [sp, #0]
 80159fa:	697b      	ldr	r3, [r7, #20]
 80159fc:	2200      	movs	r2, #0
 80159fe:	2120      	movs	r1, #32
 8015a00:	68f8      	ldr	r0, [r7, #12]
 8015a02:	f001 fe83 	bl	801770c <UART_WaitOnFlagUntilTimeout>
 8015a06:	4603      	mov	r3, r0
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	d001      	beq.n	8015a10 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8015a0c:	2303      	movs	r3, #3
 8015a0e:	e042      	b.n	8015a96 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8015a10:	69fb      	ldr	r3, [r7, #28]
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d10c      	bne.n	8015a30 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8015a16:	68fb      	ldr	r3, [r7, #12]
 8015a18:	681b      	ldr	r3, [r3, #0]
 8015a1a:	685b      	ldr	r3, [r3, #4]
 8015a1c:	b29b      	uxth	r3, r3
 8015a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015a22:	b29a      	uxth	r2, r3
 8015a24:	69bb      	ldr	r3, [r7, #24]
 8015a26:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8015a28:	69bb      	ldr	r3, [r7, #24]
 8015a2a:	3302      	adds	r3, #2
 8015a2c:	61bb      	str	r3, [r7, #24]
 8015a2e:	e01f      	b.n	8015a70 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8015a30:	68fb      	ldr	r3, [r7, #12]
 8015a32:	689b      	ldr	r3, [r3, #8]
 8015a34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015a38:	d007      	beq.n	8015a4a <HAL_UART_Receive+0xf0>
 8015a3a:	68fb      	ldr	r3, [r7, #12]
 8015a3c:	689b      	ldr	r3, [r3, #8]
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d10a      	bne.n	8015a58 <HAL_UART_Receive+0xfe>
 8015a42:	68fb      	ldr	r3, [r7, #12]
 8015a44:	691b      	ldr	r3, [r3, #16]
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d106      	bne.n	8015a58 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8015a4a:	68fb      	ldr	r3, [r7, #12]
 8015a4c:	681b      	ldr	r3, [r3, #0]
 8015a4e:	685b      	ldr	r3, [r3, #4]
 8015a50:	b2da      	uxtb	r2, r3
 8015a52:	69fb      	ldr	r3, [r7, #28]
 8015a54:	701a      	strb	r2, [r3, #0]
 8015a56:	e008      	b.n	8015a6a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8015a58:	68fb      	ldr	r3, [r7, #12]
 8015a5a:	681b      	ldr	r3, [r3, #0]
 8015a5c:	685b      	ldr	r3, [r3, #4]
 8015a5e:	b2db      	uxtb	r3, r3
 8015a60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015a64:	b2da      	uxtb	r2, r3
 8015a66:	69fb      	ldr	r3, [r7, #28]
 8015a68:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8015a6a:	69fb      	ldr	r3, [r7, #28]
 8015a6c:	3301      	adds	r3, #1
 8015a6e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8015a70:	68fb      	ldr	r3, [r7, #12]
 8015a72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8015a74:	b29b      	uxth	r3, r3
 8015a76:	3b01      	subs	r3, #1
 8015a78:	b29a      	uxth	r2, r3
 8015a7a:	68fb      	ldr	r3, [r7, #12]
 8015a7c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8015a7e:	68fb      	ldr	r3, [r7, #12]
 8015a80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8015a82:	b29b      	uxth	r3, r3
 8015a84:	2b00      	cmp	r3, #0
 8015a86:	d1b6      	bne.n	80159f6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8015a88:	68fb      	ldr	r3, [r7, #12]
 8015a8a:	2220      	movs	r2, #32
 8015a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8015a90:	2300      	movs	r3, #0
 8015a92:	e000      	b.n	8015a96 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8015a94:	2302      	movs	r3, #2
  }
}
 8015a96:	4618      	mov	r0, r3
 8015a98:	3720      	adds	r7, #32
 8015a9a:	46bd      	mov	sp, r7
 8015a9c:	bd80      	pop	{r7, pc}

08015a9e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015a9e:	b480      	push	{r7}
 8015aa0:	b085      	sub	sp, #20
 8015aa2:	af00      	add	r7, sp, #0
 8015aa4:	60f8      	str	r0, [r7, #12]
 8015aa6:	60b9      	str	r1, [r7, #8]
 8015aa8:	4613      	mov	r3, r2
 8015aaa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015aac:	68fb      	ldr	r3, [r7, #12]
 8015aae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015ab2:	b2db      	uxtb	r3, r3
 8015ab4:	2b20      	cmp	r3, #32
 8015ab6:	d130      	bne.n	8015b1a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8015ab8:	68bb      	ldr	r3, [r7, #8]
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	d002      	beq.n	8015ac4 <HAL_UART_Transmit_IT+0x26>
 8015abe:	88fb      	ldrh	r3, [r7, #6]
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d101      	bne.n	8015ac8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8015ac4:	2301      	movs	r3, #1
 8015ac6:	e029      	b.n	8015b1c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8015ac8:	68fb      	ldr	r3, [r7, #12]
 8015aca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015ace:	2b01      	cmp	r3, #1
 8015ad0:	d101      	bne.n	8015ad6 <HAL_UART_Transmit_IT+0x38>
 8015ad2:	2302      	movs	r3, #2
 8015ad4:	e022      	b.n	8015b1c <HAL_UART_Transmit_IT+0x7e>
 8015ad6:	68fb      	ldr	r3, [r7, #12]
 8015ad8:	2201      	movs	r2, #1
 8015ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8015ade:	68fb      	ldr	r3, [r7, #12]
 8015ae0:	68ba      	ldr	r2, [r7, #8]
 8015ae2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8015ae4:	68fb      	ldr	r3, [r7, #12]
 8015ae6:	88fa      	ldrh	r2, [r7, #6]
 8015ae8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8015aea:	68fb      	ldr	r3, [r7, #12]
 8015aec:	88fa      	ldrh	r2, [r7, #6]
 8015aee:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015af0:	68fb      	ldr	r3, [r7, #12]
 8015af2:	2200      	movs	r2, #0
 8015af4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8015af6:	68fb      	ldr	r3, [r7, #12]
 8015af8:	2221      	movs	r2, #33	; 0x21
 8015afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8015afe:	68fb      	ldr	r3, [r7, #12]
 8015b00:	2200      	movs	r2, #0
 8015b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8015b06:	68fb      	ldr	r3, [r7, #12]
 8015b08:	681b      	ldr	r3, [r3, #0]
 8015b0a:	68da      	ldr	r2, [r3, #12]
 8015b0c:	68fb      	ldr	r3, [r7, #12]
 8015b0e:	681b      	ldr	r3, [r3, #0]
 8015b10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8015b14:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8015b16:	2300      	movs	r3, #0
 8015b18:	e000      	b.n	8015b1c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8015b1a:	2302      	movs	r3, #2
  }
}
 8015b1c:	4618      	mov	r0, r3
 8015b1e:	3714      	adds	r7, #20
 8015b20:	46bd      	mov	sp, r7
 8015b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b26:	4770      	bx	lr

08015b28 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015b28:	b580      	push	{r7, lr}
 8015b2a:	b084      	sub	sp, #16
 8015b2c:	af00      	add	r7, sp, #0
 8015b2e:	60f8      	str	r0, [r7, #12]
 8015b30:	60b9      	str	r1, [r7, #8]
 8015b32:	4613      	mov	r3, r2
 8015b34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015b36:	68fb      	ldr	r3, [r7, #12]
 8015b38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015b3c:	b2db      	uxtb	r3, r3
 8015b3e:	2b20      	cmp	r3, #32
 8015b40:	d11d      	bne.n	8015b7e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8015b42:	68bb      	ldr	r3, [r7, #8]
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	d002      	beq.n	8015b4e <HAL_UART_Receive_IT+0x26>
 8015b48:	88fb      	ldrh	r3, [r7, #6]
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	d101      	bne.n	8015b52 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8015b4e:	2301      	movs	r3, #1
 8015b50:	e016      	b.n	8015b80 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8015b52:	68fb      	ldr	r3, [r7, #12]
 8015b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015b58:	2b01      	cmp	r3, #1
 8015b5a:	d101      	bne.n	8015b60 <HAL_UART_Receive_IT+0x38>
 8015b5c:	2302      	movs	r3, #2
 8015b5e:	e00f      	b.n	8015b80 <HAL_UART_Receive_IT+0x58>
 8015b60:	68fb      	ldr	r3, [r7, #12]
 8015b62:	2201      	movs	r2, #1
 8015b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015b68:	68fb      	ldr	r3, [r7, #12]
 8015b6a:	2200      	movs	r2, #0
 8015b6c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8015b6e:	88fb      	ldrh	r3, [r7, #6]
 8015b70:	461a      	mov	r2, r3
 8015b72:	68b9      	ldr	r1, [r7, #8]
 8015b74:	68f8      	ldr	r0, [r7, #12]
 8015b76:	f001 fe37 	bl	80177e8 <UART_Start_Receive_IT>
 8015b7a:	4603      	mov	r3, r0
 8015b7c:	e000      	b.n	8015b80 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8015b7e:	2302      	movs	r3, #2
  }
}
 8015b80:	4618      	mov	r0, r3
 8015b82:	3710      	adds	r7, #16
 8015b84:	46bd      	mov	sp, r7
 8015b86:	bd80      	pop	{r7, pc}

08015b88 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015b88:	b580      	push	{r7, lr}
 8015b8a:	b08c      	sub	sp, #48	; 0x30
 8015b8c:	af00      	add	r7, sp, #0
 8015b8e:	60f8      	str	r0, [r7, #12]
 8015b90:	60b9      	str	r1, [r7, #8]
 8015b92:	4613      	mov	r3, r2
 8015b94:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015b96:	68fb      	ldr	r3, [r7, #12]
 8015b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015b9c:	b2db      	uxtb	r3, r3
 8015b9e:	2b20      	cmp	r3, #32
 8015ba0:	d165      	bne.n	8015c6e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8015ba2:	68bb      	ldr	r3, [r7, #8]
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	d002      	beq.n	8015bae <HAL_UART_Transmit_DMA+0x26>
 8015ba8:	88fb      	ldrh	r3, [r7, #6]
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	d101      	bne.n	8015bb2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8015bae:	2301      	movs	r3, #1
 8015bb0:	e05e      	b.n	8015c70 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8015bb2:	68fb      	ldr	r3, [r7, #12]
 8015bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015bb8:	2b01      	cmp	r3, #1
 8015bba:	d101      	bne.n	8015bc0 <HAL_UART_Transmit_DMA+0x38>
 8015bbc:	2302      	movs	r3, #2
 8015bbe:	e057      	b.n	8015c70 <HAL_UART_Transmit_DMA+0xe8>
 8015bc0:	68fb      	ldr	r3, [r7, #12]
 8015bc2:	2201      	movs	r2, #1
 8015bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8015bc8:	68ba      	ldr	r2, [r7, #8]
 8015bca:	68fb      	ldr	r3, [r7, #12]
 8015bcc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8015bce:	68fb      	ldr	r3, [r7, #12]
 8015bd0:	88fa      	ldrh	r2, [r7, #6]
 8015bd2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8015bd4:	68fb      	ldr	r3, [r7, #12]
 8015bd6:	88fa      	ldrh	r2, [r7, #6]
 8015bd8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015bda:	68fb      	ldr	r3, [r7, #12]
 8015bdc:	2200      	movs	r2, #0
 8015bde:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8015be0:	68fb      	ldr	r3, [r7, #12]
 8015be2:	2221      	movs	r2, #33	; 0x21
 8015be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8015be8:	68fb      	ldr	r3, [r7, #12]
 8015bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015bec:	4a22      	ldr	r2, [pc, #136]	; (8015c78 <HAL_UART_Transmit_DMA+0xf0>)
 8015bee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8015bf0:	68fb      	ldr	r3, [r7, #12]
 8015bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015bf4:	4a21      	ldr	r2, [pc, #132]	; (8015c7c <HAL_UART_Transmit_DMA+0xf4>)
 8015bf6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8015bf8:	68fb      	ldr	r3, [r7, #12]
 8015bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015bfc:	4a20      	ldr	r2, [pc, #128]	; (8015c80 <HAL_UART_Transmit_DMA+0xf8>)
 8015bfe:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8015c00:	68fb      	ldr	r3, [r7, #12]
 8015c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015c04:	2200      	movs	r2, #0
 8015c06:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8015c08:	f107 0308 	add.w	r3, r7, #8
 8015c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8015c0e:	68fb      	ldr	r3, [r7, #12]
 8015c10:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8015c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c14:	6819      	ldr	r1, [r3, #0]
 8015c16:	68fb      	ldr	r3, [r7, #12]
 8015c18:	681b      	ldr	r3, [r3, #0]
 8015c1a:	3304      	adds	r3, #4
 8015c1c:	461a      	mov	r2, r3
 8015c1e:	88fb      	ldrh	r3, [r7, #6]
 8015c20:	f7f2 f861 	bl	8007ce6 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8015c24:	68fb      	ldr	r3, [r7, #12]
 8015c26:	681b      	ldr	r3, [r3, #0]
 8015c28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8015c2c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8015c2e:	68fb      	ldr	r3, [r7, #12]
 8015c30:	2200      	movs	r2, #0
 8015c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8015c36:	68fb      	ldr	r3, [r7, #12]
 8015c38:	681b      	ldr	r3, [r3, #0]
 8015c3a:	3314      	adds	r3, #20
 8015c3c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c3e:	69bb      	ldr	r3, [r7, #24]
 8015c40:	e853 3f00 	ldrex	r3, [r3]
 8015c44:	617b      	str	r3, [r7, #20]
   return(result);
 8015c46:	697b      	ldr	r3, [r7, #20]
 8015c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015c4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8015c4e:	68fb      	ldr	r3, [r7, #12]
 8015c50:	681b      	ldr	r3, [r3, #0]
 8015c52:	3314      	adds	r3, #20
 8015c54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015c56:	627a      	str	r2, [r7, #36]	; 0x24
 8015c58:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c5a:	6a39      	ldr	r1, [r7, #32]
 8015c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015c5e:	e841 2300 	strex	r3, r2, [r1]
 8015c62:	61fb      	str	r3, [r7, #28]
   return(result);
 8015c64:	69fb      	ldr	r3, [r7, #28]
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d1e5      	bne.n	8015c36 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8015c6a:	2300      	movs	r3, #0
 8015c6c:	e000      	b.n	8015c70 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8015c6e:	2302      	movs	r3, #2
  }
}
 8015c70:	4618      	mov	r0, r3
 8015c72:	3730      	adds	r7, #48	; 0x30
 8015c74:	46bd      	mov	sp, r7
 8015c76:	bd80      	pop	{r7, pc}
 8015c78:	08017467 	.word	0x08017467
 8015c7c:	08017501 	.word	0x08017501
 8015c80:	08017679 	.word	0x08017679

08015c84 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015c84:	b580      	push	{r7, lr}
 8015c86:	b084      	sub	sp, #16
 8015c88:	af00      	add	r7, sp, #0
 8015c8a:	60f8      	str	r0, [r7, #12]
 8015c8c:	60b9      	str	r1, [r7, #8]
 8015c8e:	4613      	mov	r3, r2
 8015c90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015c92:	68fb      	ldr	r3, [r7, #12]
 8015c94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015c98:	b2db      	uxtb	r3, r3
 8015c9a:	2b20      	cmp	r3, #32
 8015c9c:	d11d      	bne.n	8015cda <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8015c9e:	68bb      	ldr	r3, [r7, #8]
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d002      	beq.n	8015caa <HAL_UART_Receive_DMA+0x26>
 8015ca4:	88fb      	ldrh	r3, [r7, #6]
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d101      	bne.n	8015cae <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8015caa:	2301      	movs	r3, #1
 8015cac:	e016      	b.n	8015cdc <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8015cae:	68fb      	ldr	r3, [r7, #12]
 8015cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015cb4:	2b01      	cmp	r3, #1
 8015cb6:	d101      	bne.n	8015cbc <HAL_UART_Receive_DMA+0x38>
 8015cb8:	2302      	movs	r3, #2
 8015cba:	e00f      	b.n	8015cdc <HAL_UART_Receive_DMA+0x58>
 8015cbc:	68fb      	ldr	r3, [r7, #12]
 8015cbe:	2201      	movs	r2, #1
 8015cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015cc4:	68fb      	ldr	r3, [r7, #12]
 8015cc6:	2200      	movs	r2, #0
 8015cc8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8015cca:	88fb      	ldrh	r3, [r7, #6]
 8015ccc:	461a      	mov	r2, r3
 8015cce:	68b9      	ldr	r1, [r7, #8]
 8015cd0:	68f8      	ldr	r0, [r7, #12]
 8015cd2:	f001 fdc3 	bl	801785c <UART_Start_Receive_DMA>
 8015cd6:	4603      	mov	r3, r0
 8015cd8:	e000      	b.n	8015cdc <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8015cda:	2302      	movs	r3, #2
  }
}
 8015cdc:	4618      	mov	r0, r3
 8015cde:	3710      	adds	r7, #16
 8015ce0:	46bd      	mov	sp, r7
 8015ce2:	bd80      	pop	{r7, pc}

08015ce4 <HAL_UART_DMAPause>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 8015ce4:	b480      	push	{r7}
 8015ce6:	b09d      	sub	sp, #116	; 0x74
 8015ce8:	af00      	add	r7, sp, #0
 8015cea:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8015cec:	2300      	movs	r3, #0
 8015cee:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Process Locked */
  __HAL_LOCK(huart);
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015cf6:	2b01      	cmp	r3, #1
 8015cf8:	d101      	bne.n	8015cfe <HAL_UART_DMAPause+0x1a>
 8015cfa:	2302      	movs	r3, #2
 8015cfc:	e098      	b.n	8015e30 <HAL_UART_DMAPause+0x14c>
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	2201      	movs	r2, #1
 8015d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	681b      	ldr	r3, [r3, #0]
 8015d0a:	695b      	ldr	r3, [r3, #20]
 8015d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015d10:	2b80      	cmp	r3, #128	; 0x80
 8015d12:	bf0c      	ite	eq
 8015d14:	2301      	moveq	r3, #1
 8015d16:	2300      	movne	r3, #0
 8015d18:	b2db      	uxtb	r3, r3
 8015d1a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015d22:	b2db      	uxtb	r3, r3
 8015d24:	2b21      	cmp	r3, #33	; 0x21
 8015d26:	d11c      	bne.n	8015d62 <HAL_UART_DMAPause+0x7e>
 8015d28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	d019      	beq.n	8015d62 <HAL_UART_DMAPause+0x7e>
  {
    /* Disable the UART DMA Tx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	681b      	ldr	r3, [r3, #0]
 8015d32:	3314      	adds	r3, #20
 8015d34:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015d36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015d38:	e853 3f00 	ldrex	r3, [r3]
 8015d3c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8015d3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015d40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015d44:	66bb      	str	r3, [r7, #104]	; 0x68
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	681b      	ldr	r3, [r3, #0]
 8015d4a:	3314      	adds	r3, #20
 8015d4c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015d4e:	65ba      	str	r2, [r7, #88]	; 0x58
 8015d50:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015d52:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8015d54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015d56:	e841 2300 	strex	r3, r2, [r1]
 8015d5a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8015d5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d1e5      	bne.n	8015d2e <HAL_UART_DMAPause+0x4a>
  }

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	681b      	ldr	r3, [r3, #0]
 8015d66:	695b      	ldr	r3, [r3, #20]
 8015d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015d6c:	2b40      	cmp	r3, #64	; 0x40
 8015d6e:	bf0c      	ite	eq
 8015d70:	2301      	moveq	r3, #1
 8015d72:	2300      	movne	r3, #0
 8015d74:	b2db      	uxtb	r3, r3
 8015d76:	66fb      	str	r3, [r7, #108]	; 0x6c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015d7e:	b2db      	uxtb	r3, r3
 8015d80:	2b22      	cmp	r3, #34	; 0x22
 8015d82:	d150      	bne.n	8015e26 <HAL_UART_DMAPause+0x142>
 8015d84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015d86:	2b00      	cmp	r3, #0
 8015d88:	d04d      	beq.n	8015e26 <HAL_UART_DMAPause+0x142>
  {
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	681b      	ldr	r3, [r3, #0]
 8015d8e:	330c      	adds	r3, #12
 8015d90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d94:	e853 3f00 	ldrex	r3, [r3]
 8015d98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8015d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015da0:	667b      	str	r3, [r7, #100]	; 0x64
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	681b      	ldr	r3, [r3, #0]
 8015da6:	330c      	adds	r3, #12
 8015da8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015daa:	647a      	str	r2, [r7, #68]	; 0x44
 8015dac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015dae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015db0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015db2:	e841 2300 	strex	r3, r2, [r1]
 8015db6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8015db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	d1e5      	bne.n	8015d8a <HAL_UART_DMAPause+0xa6>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	681b      	ldr	r3, [r3, #0]
 8015dc2:	3314      	adds	r3, #20
 8015dc4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dc8:	e853 3f00 	ldrex	r3, [r3]
 8015dcc:	623b      	str	r3, [r7, #32]
   return(result);
 8015dce:	6a3b      	ldr	r3, [r7, #32]
 8015dd0:	f023 0301 	bic.w	r3, r3, #1
 8015dd4:	663b      	str	r3, [r7, #96]	; 0x60
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	681b      	ldr	r3, [r3, #0]
 8015dda:	3314      	adds	r3, #20
 8015ddc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015dde:	633a      	str	r2, [r7, #48]	; 0x30
 8015de0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015de2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015de4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015de6:	e841 2300 	strex	r3, r2, [r1]
 8015dea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8015dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d1e5      	bne.n	8015dbe <HAL_UART_DMAPause+0xda>

    /* Disable the UART DMA Rx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	681b      	ldr	r3, [r3, #0]
 8015df6:	3314      	adds	r3, #20
 8015df8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015dfa:	693b      	ldr	r3, [r7, #16]
 8015dfc:	e853 3f00 	ldrex	r3, [r3]
 8015e00:	60fb      	str	r3, [r7, #12]
   return(result);
 8015e02:	68fb      	ldr	r3, [r7, #12]
 8015e04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015e08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	681b      	ldr	r3, [r3, #0]
 8015e0e:	3314      	adds	r3, #20
 8015e10:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015e12:	61fa      	str	r2, [r7, #28]
 8015e14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015e16:	69b9      	ldr	r1, [r7, #24]
 8015e18:	69fa      	ldr	r2, [r7, #28]
 8015e1a:	e841 2300 	strex	r3, r2, [r1]
 8015e1e:	617b      	str	r3, [r7, #20]
   return(result);
 8015e20:	697b      	ldr	r3, [r7, #20]
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d1e5      	bne.n	8015df2 <HAL_UART_DMAPause+0x10e>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	2200      	movs	r2, #0
 8015e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015e2e:	2300      	movs	r3, #0
}
 8015e30:	4618      	mov	r0, r3
 8015e32:	3774      	adds	r7, #116	; 0x74
 8015e34:	46bd      	mov	sp, r7
 8015e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e3a:	4770      	bx	lr

08015e3c <HAL_UART_DMAResume>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 8015e3c:	b480      	push	{r7}
 8015e3e:	b09d      	sub	sp, #116	; 0x74
 8015e40:	af00      	add	r7, sp, #0
 8015e42:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015e4a:	2b01      	cmp	r3, #1
 8015e4c:	d101      	bne.n	8015e52 <HAL_UART_DMAResume+0x16>
 8015e4e:	2302      	movs	r3, #2
 8015e50:	e087      	b.n	8015f62 <HAL_UART_DMAResume+0x126>
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	2201      	movs	r2, #1
 8015e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015e60:	b2db      	uxtb	r3, r3
 8015e62:	2b21      	cmp	r3, #33	; 0x21
 8015e64:	d119      	bne.n	8015e9a <HAL_UART_DMAResume+0x5e>
  {
    /* Enable the UART DMA Tx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	681b      	ldr	r3, [r3, #0]
 8015e6a:	3314      	adds	r3, #20
 8015e6c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015e6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015e70:	e853 3f00 	ldrex	r3, [r3]
 8015e74:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8015e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015e7c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	681b      	ldr	r3, [r3, #0]
 8015e82:	3314      	adds	r3, #20
 8015e84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015e86:	65fa      	str	r2, [r7, #92]	; 0x5c
 8015e88:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015e8a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015e8c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015e8e:	e841 2300 	strex	r3, r2, [r1]
 8015e92:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8015e94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	d1e5      	bne.n	8015e66 <HAL_UART_DMAResume+0x2a>
  }

  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015ea0:	b2db      	uxtb	r3, r3
 8015ea2:	2b22      	cmp	r3, #34	; 0x22
 8015ea4:	d158      	bne.n	8015f58 <HAL_UART_DMAResume+0x11c>
  {
    /* Clear the Overrun flag before resuming the Rx transfer*/
    __HAL_UART_CLEAR_OREFLAG(huart);
 8015ea6:	2300      	movs	r3, #0
 8015ea8:	60fb      	str	r3, [r7, #12]
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	681b      	ldr	r3, [r3, #0]
 8015eae:	681b      	ldr	r3, [r3, #0]
 8015eb0:	60fb      	str	r3, [r7, #12]
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	681b      	ldr	r3, [r3, #0]
 8015eb6:	685b      	ldr	r3, [r3, #4]
 8015eb8:	60fb      	str	r3, [r7, #12]
 8015eba:	68fb      	ldr	r3, [r7, #12]

    /* Re-enable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	681b      	ldr	r3, [r3, #0]
 8015ec0:	330c      	adds	r3, #12
 8015ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ec6:	e853 3f00 	ldrex	r3, [r3]
 8015eca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015ed2:	66bb      	str	r3, [r7, #104]	; 0x68
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	681b      	ldr	r3, [r3, #0]
 8015ed8:	330c      	adds	r3, #12
 8015eda:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015edc:	64ba      	str	r2, [r7, #72]	; 0x48
 8015ede:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ee0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015ee2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015ee4:	e841 2300 	strex	r3, r2, [r1]
 8015ee8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8015eea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d1e5      	bne.n	8015ebc <HAL_UART_DMAResume+0x80>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	681b      	ldr	r3, [r3, #0]
 8015ef4:	3314      	adds	r3, #20
 8015ef6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015efa:	e853 3f00 	ldrex	r3, [r3]
 8015efe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f02:	f043 0301 	orr.w	r3, r3, #1
 8015f06:	667b      	str	r3, [r7, #100]	; 0x64
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	681b      	ldr	r3, [r3, #0]
 8015f0c:	3314      	adds	r3, #20
 8015f0e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015f10:	637a      	str	r2, [r7, #52]	; 0x34
 8015f12:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015f16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015f18:	e841 2300 	strex	r3, r2, [r1]
 8015f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8015f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d1e5      	bne.n	8015ef0 <HAL_UART_DMAResume+0xb4>

    /* Enable the UART DMA Rx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	681b      	ldr	r3, [r3, #0]
 8015f28:	3314      	adds	r3, #20
 8015f2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f2c:	697b      	ldr	r3, [r7, #20]
 8015f2e:	e853 3f00 	ldrex	r3, [r3]
 8015f32:	613b      	str	r3, [r7, #16]
   return(result);
 8015f34:	693b      	ldr	r3, [r7, #16]
 8015f36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015f3a:	663b      	str	r3, [r7, #96]	; 0x60
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	681b      	ldr	r3, [r3, #0]
 8015f40:	3314      	adds	r3, #20
 8015f42:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015f44:	623a      	str	r2, [r7, #32]
 8015f46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f48:	69f9      	ldr	r1, [r7, #28]
 8015f4a:	6a3a      	ldr	r2, [r7, #32]
 8015f4c:	e841 2300 	strex	r3, r2, [r1]
 8015f50:	61bb      	str	r3, [r7, #24]
   return(result);
 8015f52:	69bb      	ldr	r3, [r7, #24]
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	d1e5      	bne.n	8015f24 <HAL_UART_DMAResume+0xe8>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	2200      	movs	r2, #0
 8015f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015f60:	2300      	movs	r3, #0
}
 8015f62:	4618      	mov	r0, r3
 8015f64:	3774      	adds	r7, #116	; 0x74
 8015f66:	46bd      	mov	sp, r7
 8015f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f6c:	4770      	bx	lr

08015f6e <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8015f6e:	b580      	push	{r7, lr}
 8015f70:	b090      	sub	sp, #64	; 0x40
 8015f72:	af00      	add	r7, sp, #0
 8015f74:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8015f76:	2300      	movs	r3, #0
 8015f78:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	681b      	ldr	r3, [r3, #0]
 8015f7e:	695b      	ldr	r3, [r3, #20]
 8015f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015f84:	2b80      	cmp	r3, #128	; 0x80
 8015f86:	bf0c      	ite	eq
 8015f88:	2301      	moveq	r3, #1
 8015f8a:	2300      	movne	r3, #0
 8015f8c:	b2db      	uxtb	r3, r3
 8015f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015f96:	b2db      	uxtb	r3, r3
 8015f98:	2b21      	cmp	r3, #33	; 0x21
 8015f9a:	d128      	bne.n	8015fee <HAL_UART_DMAStop+0x80>
 8015f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	d025      	beq.n	8015fee <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	681b      	ldr	r3, [r3, #0]
 8015fa6:	3314      	adds	r3, #20
 8015fa8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fac:	e853 3f00 	ldrex	r3, [r3]
 8015fb0:	623b      	str	r3, [r7, #32]
   return(result);
 8015fb2:	6a3b      	ldr	r3, [r7, #32]
 8015fb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015fb8:	63bb      	str	r3, [r7, #56]	; 0x38
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	681b      	ldr	r3, [r3, #0]
 8015fbe:	3314      	adds	r3, #20
 8015fc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015fc2:	633a      	str	r2, [r7, #48]	; 0x30
 8015fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015fc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015fc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015fca:	e841 2300 	strex	r3, r2, [r1]
 8015fce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8015fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d1e5      	bne.n	8015fa2 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	d004      	beq.n	8015fe8 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015fe2:	4618      	mov	r0, r3
 8015fe4:	f7f1 fed7 	bl	8007d96 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8015fe8:	6878      	ldr	r0, [r7, #4]
 8015fea:	f001 fcd1 	bl	8017990 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	681b      	ldr	r3, [r3, #0]
 8015ff2:	695b      	ldr	r3, [r3, #20]
 8015ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015ff8:	2b40      	cmp	r3, #64	; 0x40
 8015ffa:	bf0c      	ite	eq
 8015ffc:	2301      	moveq	r3, #1
 8015ffe:	2300      	movne	r3, #0
 8016000:	b2db      	uxtb	r3, r3
 8016002:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801600a:	b2db      	uxtb	r3, r3
 801600c:	2b22      	cmp	r3, #34	; 0x22
 801600e:	d128      	bne.n	8016062 <HAL_UART_DMAStop+0xf4>
 8016010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016012:	2b00      	cmp	r3, #0
 8016014:	d025      	beq.n	8016062 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	681b      	ldr	r3, [r3, #0]
 801601a:	3314      	adds	r3, #20
 801601c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801601e:	693b      	ldr	r3, [r7, #16]
 8016020:	e853 3f00 	ldrex	r3, [r3]
 8016024:	60fb      	str	r3, [r7, #12]
   return(result);
 8016026:	68fb      	ldr	r3, [r7, #12]
 8016028:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801602c:	637b      	str	r3, [r7, #52]	; 0x34
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	681b      	ldr	r3, [r3, #0]
 8016032:	3314      	adds	r3, #20
 8016034:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016036:	61fa      	str	r2, [r7, #28]
 8016038:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801603a:	69b9      	ldr	r1, [r7, #24]
 801603c:	69fa      	ldr	r2, [r7, #28]
 801603e:	e841 2300 	strex	r3, r2, [r1]
 8016042:	617b      	str	r3, [r7, #20]
   return(result);
 8016044:	697b      	ldr	r3, [r7, #20]
 8016046:	2b00      	cmp	r3, #0
 8016048:	d1e5      	bne.n	8016016 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801604e:	2b00      	cmp	r3, #0
 8016050:	d004      	beq.n	801605c <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016056:	4618      	mov	r0, r3
 8016058:	f7f1 fe9d 	bl	8007d96 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 801605c:	6878      	ldr	r0, [r7, #4]
 801605e:	f001 fcbf 	bl	80179e0 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8016062:	2300      	movs	r3, #0
}
 8016064:	4618      	mov	r0, r3
 8016066:	3740      	adds	r7, #64	; 0x40
 8016068:	46bd      	mov	sp, r7
 801606a:	bd80      	pop	{r7, pc}

0801606c <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 801606c:	b580      	push	{r7, lr}
 801606e:	b088      	sub	sp, #32
 8016070:	af00      	add	r7, sp, #0
 8016072:	60f8      	str	r0, [r7, #12]
 8016074:	60b9      	str	r1, [r7, #8]
 8016076:	603b      	str	r3, [r7, #0]
 8016078:	4613      	mov	r3, r2
 801607a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801607c:	68fb      	ldr	r3, [r7, #12]
 801607e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8016082:	b2db      	uxtb	r3, r3
 8016084:	2b20      	cmp	r3, #32
 8016086:	f040 80c9 	bne.w	801621c <HAL_UARTEx_ReceiveToIdle+0x1b0>
  {
    if ((pData == NULL) || (Size == 0U))
 801608a:	68bb      	ldr	r3, [r7, #8]
 801608c:	2b00      	cmp	r3, #0
 801608e:	d002      	beq.n	8016096 <HAL_UARTEx_ReceiveToIdle+0x2a>
 8016090:	88fb      	ldrh	r3, [r7, #6]
 8016092:	2b00      	cmp	r3, #0
 8016094:	d101      	bne.n	801609a <HAL_UARTEx_ReceiveToIdle+0x2e>
    {
      return  HAL_ERROR;
 8016096:	2301      	movs	r3, #1
 8016098:	e0c1      	b.n	801621e <HAL_UARTEx_ReceiveToIdle+0x1b2>
    }

    __HAL_LOCK(huart);
 801609a:	68fb      	ldr	r3, [r7, #12]
 801609c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80160a0:	2b01      	cmp	r3, #1
 80160a2:	d101      	bne.n	80160a8 <HAL_UARTEx_ReceiveToIdle+0x3c>
 80160a4:	2302      	movs	r3, #2
 80160a6:	e0ba      	b.n	801621e <HAL_UARTEx_ReceiveToIdle+0x1b2>
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	2201      	movs	r2, #1
 80160ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80160b0:	68fb      	ldr	r3, [r7, #12]
 80160b2:	2200      	movs	r2, #0
 80160b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80160b6:	68fb      	ldr	r3, [r7, #12]
 80160b8:	2222      	movs	r2, #34	; 0x22
 80160ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80160be:	68fb      	ldr	r3, [r7, #12]
 80160c0:	2201      	movs	r2, #1
 80160c2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80160c4:	f7f0 fba6 	bl	8006814 <HAL_GetTick>
 80160c8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80160ca:	68fb      	ldr	r3, [r7, #12]
 80160cc:	88fa      	ldrh	r2, [r7, #6]
 80160ce:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	88fa      	ldrh	r2, [r7, #6]
 80160d4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80160d6:	68fb      	ldr	r3, [r7, #12]
 80160d8:	689b      	ldr	r3, [r3, #8]
 80160da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80160de:	d108      	bne.n	80160f2 <HAL_UARTEx_ReceiveToIdle+0x86>
 80160e0:	68fb      	ldr	r3, [r7, #12]
 80160e2:	691b      	ldr	r3, [r3, #16]
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	d104      	bne.n	80160f2 <HAL_UARTEx_ReceiveToIdle+0x86>
    {
      pdata8bits  = NULL;
 80160e8:	2300      	movs	r3, #0
 80160ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80160ec:	68bb      	ldr	r3, [r7, #8]
 80160ee:	61bb      	str	r3, [r7, #24]
 80160f0:	e003      	b.n	80160fa <HAL_UARTEx_ReceiveToIdle+0x8e>
    }
    else
    {
      pdata8bits  = pData;
 80160f2:	68bb      	ldr	r3, [r7, #8]
 80160f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80160f6:	2300      	movs	r3, #0
 80160f8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80160fa:	68fb      	ldr	r3, [r7, #12]
 80160fc:	2200      	movs	r2, #0
 80160fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Initialize output number of received elements */
    *RxLen = 0U;
 8016102:	683b      	ldr	r3, [r7, #0]
 8016104:	2200      	movs	r2, #0
 8016106:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8016108:	e074      	b.n	80161f4 <HAL_UARTEx_ReceiveToIdle+0x188>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 801610a:	68fb      	ldr	r3, [r7, #12]
 801610c:	681b      	ldr	r3, [r3, #0]
 801610e:	681b      	ldr	r3, [r3, #0]
 8016110:	f003 0310 	and.w	r3, r3, #16
 8016114:	2b10      	cmp	r3, #16
 8016116:	d114      	bne.n	8016142 <HAL_UARTEx_ReceiveToIdle+0xd6>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8016118:	2300      	movs	r3, #0
 801611a:	613b      	str	r3, [r7, #16]
 801611c:	68fb      	ldr	r3, [r7, #12]
 801611e:	681b      	ldr	r3, [r3, #0]
 8016120:	681b      	ldr	r3, [r3, #0]
 8016122:	613b      	str	r3, [r7, #16]
 8016124:	68fb      	ldr	r3, [r7, #12]
 8016126:	681b      	ldr	r3, [r3, #0]
 8016128:	685b      	ldr	r3, [r3, #4]
 801612a:	613b      	str	r3, [r7, #16]
 801612c:	693b      	ldr	r3, [r7, #16]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 801612e:	683b      	ldr	r3, [r7, #0]
 8016130:	881b      	ldrh	r3, [r3, #0]
 8016132:	2b00      	cmp	r3, #0
 8016134:	d005      	beq.n	8016142 <HAL_UARTEx_ReceiveToIdle+0xd6>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8016136:	68fb      	ldr	r3, [r7, #12]
 8016138:	2220      	movs	r2, #32
 801613a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

          return HAL_OK;
 801613e:	2300      	movs	r3, #0
 8016140:	e06d      	b.n	801621e <HAL_UARTEx_ReceiveToIdle+0x1b2>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 8016142:	68fb      	ldr	r3, [r7, #12]
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	681b      	ldr	r3, [r3, #0]
 8016148:	f003 0320 	and.w	r3, r3, #32
 801614c:	2b20      	cmp	r3, #32
 801614e:	d13c      	bne.n	80161ca <HAL_UARTEx_ReceiveToIdle+0x15e>
      {
        if (pdata8bits == NULL)
 8016150:	69fb      	ldr	r3, [r7, #28]
 8016152:	2b00      	cmp	r3, #0
 8016154:	d10c      	bne.n	8016170 <HAL_UARTEx_ReceiveToIdle+0x104>
        {
          *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	681b      	ldr	r3, [r3, #0]
 801615a:	685b      	ldr	r3, [r3, #4]
 801615c:	b29b      	uxth	r3, r3
 801615e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016162:	b29a      	uxth	r2, r3
 8016164:	69bb      	ldr	r3, [r7, #24]
 8016166:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 8016168:	69bb      	ldr	r3, [r7, #24]
 801616a:	3302      	adds	r3, #2
 801616c:	61bb      	str	r3, [r7, #24]
 801616e:	e01f      	b.n	80161b0 <HAL_UARTEx_ReceiveToIdle+0x144>
        }
        else
        {
          if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8016170:	68fb      	ldr	r3, [r7, #12]
 8016172:	689b      	ldr	r3, [r3, #8]
 8016174:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016178:	d007      	beq.n	801618a <HAL_UARTEx_ReceiveToIdle+0x11e>
 801617a:	68fb      	ldr	r3, [r7, #12]
 801617c:	689b      	ldr	r3, [r3, #8]
 801617e:	2b00      	cmp	r3, #0
 8016180:	d10a      	bne.n	8016198 <HAL_UARTEx_ReceiveToIdle+0x12c>
 8016182:	68fb      	ldr	r3, [r7, #12]
 8016184:	691b      	ldr	r3, [r3, #16]
 8016186:	2b00      	cmp	r3, #0
 8016188:	d106      	bne.n	8016198 <HAL_UARTEx_ReceiveToIdle+0x12c>
          {
            *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801618a:	68fb      	ldr	r3, [r7, #12]
 801618c:	681b      	ldr	r3, [r3, #0]
 801618e:	685b      	ldr	r3, [r3, #4]
 8016190:	b2da      	uxtb	r2, r3
 8016192:	69fb      	ldr	r3, [r7, #28]
 8016194:	701a      	strb	r2, [r3, #0]
 8016196:	e008      	b.n	80161aa <HAL_UARTEx_ReceiveToIdle+0x13e>
          }
          else
          {
            *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	681b      	ldr	r3, [r3, #0]
 801619c:	685b      	ldr	r3, [r3, #4]
 801619e:	b2db      	uxtb	r3, r3
 80161a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80161a4:	b2da      	uxtb	r2, r3
 80161a6:	69fb      	ldr	r3, [r7, #28]
 80161a8:	701a      	strb	r2, [r3, #0]
          }

          pdata8bits++;
 80161aa:	69fb      	ldr	r3, [r7, #28]
 80161ac:	3301      	adds	r3, #1
 80161ae:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 80161b0:	683b      	ldr	r3, [r7, #0]
 80161b2:	881b      	ldrh	r3, [r3, #0]
 80161b4:	3301      	adds	r3, #1
 80161b6:	b29a      	uxth	r2, r3
 80161b8:	683b      	ldr	r3, [r7, #0]
 80161ba:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 80161bc:	68fb      	ldr	r3, [r7, #12]
 80161be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80161c0:	b29b      	uxth	r3, r3
 80161c2:	3b01      	subs	r3, #1
 80161c4:	b29a      	uxth	r2, r3
 80161c6:	68fb      	ldr	r3, [r7, #12]
 80161c8:	85da      	strh	r2, [r3, #46]	; 0x2e
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80161ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80161d0:	d010      	beq.n	80161f4 <HAL_UARTEx_ReceiveToIdle+0x188>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80161d2:	f7f0 fb1f 	bl	8006814 <HAL_GetTick>
 80161d6:	4602      	mov	r2, r0
 80161d8:	697b      	ldr	r3, [r7, #20]
 80161da:	1ad3      	subs	r3, r2, r3
 80161dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80161de:	429a      	cmp	r2, r3
 80161e0:	d302      	bcc.n	80161e8 <HAL_UARTEx_ReceiveToIdle+0x17c>
 80161e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	d105      	bne.n	80161f4 <HAL_UARTEx_ReceiveToIdle+0x188>
        {
          huart->RxState = HAL_UART_STATE_READY;
 80161e8:	68fb      	ldr	r3, [r7, #12]
 80161ea:	2220      	movs	r2, #32
 80161ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

          return HAL_TIMEOUT;
 80161f0:	2303      	movs	r3, #3
 80161f2:	e014      	b.n	801621e <HAL_UARTEx_ReceiveToIdle+0x1b2>
    while (huart->RxXferCount > 0U)
 80161f4:	68fb      	ldr	r3, [r7, #12]
 80161f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80161f8:	b29b      	uxth	r3, r3
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	d185      	bne.n	801610a <HAL_UARTEx_ReceiveToIdle+0x9e>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 80161fe:	68fb      	ldr	r3, [r7, #12]
 8016200:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8016202:	68fb      	ldr	r3, [r7, #12]
 8016204:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8016206:	b29b      	uxth	r3, r3
 8016208:	1ad3      	subs	r3, r2, r3
 801620a:	b29a      	uxth	r2, r3
 801620c:	683b      	ldr	r3, [r7, #0]
 801620e:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8016210:	68fb      	ldr	r3, [r7, #12]
 8016212:	2220      	movs	r2, #32
 8016214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8016218:	2300      	movs	r3, #0
 801621a:	e000      	b.n	801621e <HAL_UARTEx_ReceiveToIdle+0x1b2>
  }
  else
  {
    return HAL_BUSY;
 801621c:	2302      	movs	r3, #2
  }
}
 801621e:	4618      	mov	r0, r3
 8016220:	3720      	adds	r7, #32
 8016222:	46bd      	mov	sp, r7
 8016224:	bd80      	pop	{r7, pc}

08016226 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8016226:	b580      	push	{r7, lr}
 8016228:	b08c      	sub	sp, #48	; 0x30
 801622a:	af00      	add	r7, sp, #0
 801622c:	60f8      	str	r0, [r7, #12]
 801622e:	60b9      	str	r1, [r7, #8]
 8016230:	4613      	mov	r3, r2
 8016232:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801623a:	b2db      	uxtb	r3, r3
 801623c:	2b20      	cmp	r3, #32
 801623e:	d152      	bne.n	80162e6 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8016240:	68bb      	ldr	r3, [r7, #8]
 8016242:	2b00      	cmp	r3, #0
 8016244:	d002      	beq.n	801624c <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8016246:	88fb      	ldrh	r3, [r7, #6]
 8016248:	2b00      	cmp	r3, #0
 801624a:	d101      	bne.n	8016250 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 801624c:	2301      	movs	r3, #1
 801624e:	e04b      	b.n	80162e8 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
    }

    __HAL_LOCK(huart);
 8016250:	68fb      	ldr	r3, [r7, #12]
 8016252:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016256:	2b01      	cmp	r3, #1
 8016258:	d101      	bne.n	801625e <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 801625a:	2302      	movs	r3, #2
 801625c:	e044      	b.n	80162e8 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
 801625e:	68fb      	ldr	r3, [r7, #12]
 8016260:	2201      	movs	r2, #1
 8016262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8016266:	68fb      	ldr	r3, [r7, #12]
 8016268:	2201      	movs	r2, #1
 801626a:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 801626c:	88fb      	ldrh	r3, [r7, #6]
 801626e:	461a      	mov	r2, r3
 8016270:	68b9      	ldr	r1, [r7, #8]
 8016272:	68f8      	ldr	r0, [r7, #12]
 8016274:	f001 fab8 	bl	80177e8 <UART_Start_Receive_IT>
 8016278:	4603      	mov	r3, r0
 801627a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 801627e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016282:	2b00      	cmp	r3, #0
 8016284:	d12c      	bne.n	80162e0 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016286:	68fb      	ldr	r3, [r7, #12]
 8016288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801628a:	2b01      	cmp	r3, #1
 801628c:	d125      	bne.n	80162da <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 801628e:	2300      	movs	r3, #0
 8016290:	613b      	str	r3, [r7, #16]
 8016292:	68fb      	ldr	r3, [r7, #12]
 8016294:	681b      	ldr	r3, [r3, #0]
 8016296:	681b      	ldr	r3, [r3, #0]
 8016298:	613b      	str	r3, [r7, #16]
 801629a:	68fb      	ldr	r3, [r7, #12]
 801629c:	681b      	ldr	r3, [r3, #0]
 801629e:	685b      	ldr	r3, [r3, #4]
 80162a0:	613b      	str	r3, [r7, #16]
 80162a2:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80162a4:	68fb      	ldr	r3, [r7, #12]
 80162a6:	681b      	ldr	r3, [r3, #0]
 80162a8:	330c      	adds	r3, #12
 80162aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80162ac:	69bb      	ldr	r3, [r7, #24]
 80162ae:	e853 3f00 	ldrex	r3, [r3]
 80162b2:	617b      	str	r3, [r7, #20]
   return(result);
 80162b4:	697b      	ldr	r3, [r7, #20]
 80162b6:	f043 0310 	orr.w	r3, r3, #16
 80162ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80162bc:	68fb      	ldr	r3, [r7, #12]
 80162be:	681b      	ldr	r3, [r3, #0]
 80162c0:	330c      	adds	r3, #12
 80162c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80162c4:	627a      	str	r2, [r7, #36]	; 0x24
 80162c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80162c8:	6a39      	ldr	r1, [r7, #32]
 80162ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80162cc:	e841 2300 	strex	r3, r2, [r1]
 80162d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80162d2:	69fb      	ldr	r3, [r7, #28]
 80162d4:	2b00      	cmp	r3, #0
 80162d6:	d1e5      	bne.n	80162a4 <HAL_UARTEx_ReceiveToIdle_IT+0x7e>
 80162d8:	e002      	b.n	80162e0 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80162da:	2301      	movs	r3, #1
 80162dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80162e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80162e4:	e000      	b.n	80162e8 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80162e6:	2302      	movs	r3, #2
  }
}
 80162e8:	4618      	mov	r0, r3
 80162ea:	3730      	adds	r7, #48	; 0x30
 80162ec:	46bd      	mov	sp, r7
 80162ee:	bd80      	pop	{r7, pc}

080162f0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80162f0:	b580      	push	{r7, lr}
 80162f2:	b08c      	sub	sp, #48	; 0x30
 80162f4:	af00      	add	r7, sp, #0
 80162f6:	60f8      	str	r0, [r7, #12]
 80162f8:	60b9      	str	r1, [r7, #8]
 80162fa:	4613      	mov	r3, r2
 80162fc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80162fe:	68fb      	ldr	r3, [r7, #12]
 8016300:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8016304:	b2db      	uxtb	r3, r3
 8016306:	2b20      	cmp	r3, #32
 8016308:	d152      	bne.n	80163b0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 801630a:	68bb      	ldr	r3, [r7, #8]
 801630c:	2b00      	cmp	r3, #0
 801630e:	d002      	beq.n	8016316 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8016310:	88fb      	ldrh	r3, [r7, #6]
 8016312:	2b00      	cmp	r3, #0
 8016314:	d101      	bne.n	801631a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8016316:	2301      	movs	r3, #1
 8016318:	e04b      	b.n	80163b2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 801631a:	68fb      	ldr	r3, [r7, #12]
 801631c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016320:	2b01      	cmp	r3, #1
 8016322:	d101      	bne.n	8016328 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8016324:	2302      	movs	r3, #2
 8016326:	e044      	b.n	80163b2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8016328:	68fb      	ldr	r3, [r7, #12]
 801632a:	2201      	movs	r2, #1
 801632c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8016330:	68fb      	ldr	r3, [r7, #12]
 8016332:	2201      	movs	r2, #1
 8016334:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8016336:	88fb      	ldrh	r3, [r7, #6]
 8016338:	461a      	mov	r2, r3
 801633a:	68b9      	ldr	r1, [r7, #8]
 801633c:	68f8      	ldr	r0, [r7, #12]
 801633e:	f001 fa8d 	bl	801785c <UART_Start_Receive_DMA>
 8016342:	4603      	mov	r3, r0
 8016344:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8016348:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801634c:	2b00      	cmp	r3, #0
 801634e:	d12c      	bne.n	80163aa <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016350:	68fb      	ldr	r3, [r7, #12]
 8016352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016354:	2b01      	cmp	r3, #1
 8016356:	d125      	bne.n	80163a4 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8016358:	2300      	movs	r3, #0
 801635a:	613b      	str	r3, [r7, #16]
 801635c:	68fb      	ldr	r3, [r7, #12]
 801635e:	681b      	ldr	r3, [r3, #0]
 8016360:	681b      	ldr	r3, [r3, #0]
 8016362:	613b      	str	r3, [r7, #16]
 8016364:	68fb      	ldr	r3, [r7, #12]
 8016366:	681b      	ldr	r3, [r3, #0]
 8016368:	685b      	ldr	r3, [r3, #4]
 801636a:	613b      	str	r3, [r7, #16]
 801636c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801636e:	68fb      	ldr	r3, [r7, #12]
 8016370:	681b      	ldr	r3, [r3, #0]
 8016372:	330c      	adds	r3, #12
 8016374:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016376:	69bb      	ldr	r3, [r7, #24]
 8016378:	e853 3f00 	ldrex	r3, [r3]
 801637c:	617b      	str	r3, [r7, #20]
   return(result);
 801637e:	697b      	ldr	r3, [r7, #20]
 8016380:	f043 0310 	orr.w	r3, r3, #16
 8016384:	62bb      	str	r3, [r7, #40]	; 0x28
 8016386:	68fb      	ldr	r3, [r7, #12]
 8016388:	681b      	ldr	r3, [r3, #0]
 801638a:	330c      	adds	r3, #12
 801638c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801638e:	627a      	str	r2, [r7, #36]	; 0x24
 8016390:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016392:	6a39      	ldr	r1, [r7, #32]
 8016394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016396:	e841 2300 	strex	r3, r2, [r1]
 801639a:	61fb      	str	r3, [r7, #28]
   return(result);
 801639c:	69fb      	ldr	r3, [r7, #28]
 801639e:	2b00      	cmp	r3, #0
 80163a0:	d1e5      	bne.n	801636e <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 80163a2:	e002      	b.n	80163aa <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80163a4:	2301      	movs	r3, #1
 80163a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80163aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80163ae:	e000      	b.n	80163b2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80163b0:	2302      	movs	r3, #2
  }
}
 80163b2:	4618      	mov	r0, r3
 80163b4:	3730      	adds	r7, #48	; 0x30
 80163b6:	46bd      	mov	sp, r7
 80163b8:	bd80      	pop	{r7, pc}

080163ba <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 80163ba:	b580      	push	{r7, lr}
 80163bc:	b0a0      	sub	sp, #128	; 0x80
 80163be:	af00      	add	r7, sp, #0
 80163c0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	681b      	ldr	r3, [r3, #0]
 80163c6:	330c      	adds	r3, #12
 80163c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80163ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80163cc:	e853 3f00 	ldrex	r3, [r3]
 80163d0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80163d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80163d4:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 80163d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	681b      	ldr	r3, [r3, #0]
 80163de:	330c      	adds	r3, #12
 80163e0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80163e2:	66ba      	str	r2, [r7, #104]	; 0x68
 80163e4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80163e6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80163e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80163ea:	e841 2300 	strex	r3, r2, [r1]
 80163ee:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80163f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80163f2:	2b00      	cmp	r3, #0
 80163f4:	d1e5      	bne.n	80163c2 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	681b      	ldr	r3, [r3, #0]
 80163fa:	3314      	adds	r3, #20
 80163fc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80163fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016400:	e853 3f00 	ldrex	r3, [r3]
 8016404:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8016406:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016408:	f023 0301 	bic.w	r3, r3, #1
 801640c:	67bb      	str	r3, [r7, #120]	; 0x78
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	681b      	ldr	r3, [r3, #0]
 8016412:	3314      	adds	r3, #20
 8016414:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8016416:	657a      	str	r2, [r7, #84]	; 0x54
 8016418:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801641a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801641c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801641e:	e841 2300 	strex	r3, r2, [r1]
 8016422:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8016424:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016426:	2b00      	cmp	r3, #0
 8016428:	d1e5      	bne.n	80163f6 <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801642e:	2b01      	cmp	r3, #1
 8016430:	d119      	bne.n	8016466 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	681b      	ldr	r3, [r3, #0]
 8016436:	330c      	adds	r3, #12
 8016438:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801643a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801643c:	e853 3f00 	ldrex	r3, [r3]
 8016440:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8016442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016444:	f023 0310 	bic.w	r3, r3, #16
 8016448:	677b      	str	r3, [r7, #116]	; 0x74
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	681b      	ldr	r3, [r3, #0]
 801644e:	330c      	adds	r3, #12
 8016450:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016452:	643a      	str	r2, [r7, #64]	; 0x40
 8016454:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016456:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016458:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801645a:	e841 2300 	strex	r3, r2, [r1]
 801645e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016462:	2b00      	cmp	r3, #0
 8016464:	d1e5      	bne.n	8016432 <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	681b      	ldr	r3, [r3, #0]
 801646a:	695b      	ldr	r3, [r3, #20]
 801646c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016470:	2b80      	cmp	r3, #128	; 0x80
 8016472:	d136      	bne.n	80164e2 <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	681b      	ldr	r3, [r3, #0]
 8016478:	3314      	adds	r3, #20
 801647a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801647c:	6a3b      	ldr	r3, [r7, #32]
 801647e:	e853 3f00 	ldrex	r3, [r3]
 8016482:	61fb      	str	r3, [r7, #28]
   return(result);
 8016484:	69fb      	ldr	r3, [r7, #28]
 8016486:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801648a:	673b      	str	r3, [r7, #112]	; 0x70
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	681b      	ldr	r3, [r3, #0]
 8016490:	3314      	adds	r3, #20
 8016492:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8016494:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016496:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016498:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801649a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801649c:	e841 2300 	strex	r3, r2, [r1]
 80164a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80164a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d1e5      	bne.n	8016474 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	d018      	beq.n	80164e2 <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80164b4:	2200      	movs	r2, #0
 80164b6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80164bc:	4618      	mov	r0, r3
 80164be:	f7f1 fc6a 	bl	8007d96 <HAL_DMA_Abort>
 80164c2:	4603      	mov	r3, r0
 80164c4:	2b00      	cmp	r3, #0
 80164c6:	d00c      	beq.n	80164e2 <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80164cc:	4618      	mov	r0, r3
 80164ce:	f7f2 f826 	bl	800851e <HAL_DMA_GetError>
 80164d2:	4603      	mov	r3, r0
 80164d4:	2b20      	cmp	r3, #32
 80164d6:	d104      	bne.n	80164e2 <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	2210      	movs	r2, #16
 80164dc:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 80164de:	2303      	movs	r3, #3
 80164e0:	e052      	b.n	8016588 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80164e2:	687b      	ldr	r3, [r7, #4]
 80164e4:	681b      	ldr	r3, [r3, #0]
 80164e6:	695b      	ldr	r3, [r3, #20]
 80164e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80164ec:	2b40      	cmp	r3, #64	; 0x40
 80164ee:	d136      	bne.n	801655e <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	681b      	ldr	r3, [r3, #0]
 80164f4:	3314      	adds	r3, #20
 80164f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80164f8:	68fb      	ldr	r3, [r7, #12]
 80164fa:	e853 3f00 	ldrex	r3, [r3]
 80164fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8016500:	68bb      	ldr	r3, [r7, #8]
 8016502:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016506:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	681b      	ldr	r3, [r3, #0]
 801650c:	3314      	adds	r3, #20
 801650e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016510:	61ba      	str	r2, [r7, #24]
 8016512:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016514:	6979      	ldr	r1, [r7, #20]
 8016516:	69ba      	ldr	r2, [r7, #24]
 8016518:	e841 2300 	strex	r3, r2, [r1]
 801651c:	613b      	str	r3, [r7, #16]
   return(result);
 801651e:	693b      	ldr	r3, [r7, #16]
 8016520:	2b00      	cmp	r3, #0
 8016522:	d1e5      	bne.n	80164f0 <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016528:	2b00      	cmp	r3, #0
 801652a:	d018      	beq.n	801655e <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016530:	2200      	movs	r2, #0
 8016532:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016538:	4618      	mov	r0, r3
 801653a:	f7f1 fc2c 	bl	8007d96 <HAL_DMA_Abort>
 801653e:	4603      	mov	r3, r0
 8016540:	2b00      	cmp	r3, #0
 8016542:	d00c      	beq.n	801655e <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016548:	4618      	mov	r0, r3
 801654a:	f7f1 ffe8 	bl	800851e <HAL_DMA_GetError>
 801654e:	4603      	mov	r3, r0
 8016550:	2b20      	cmp	r3, #32
 8016552:	d104      	bne.n	801655e <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	2210      	movs	r2, #16
 8016558:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 801655a:	2303      	movs	r3, #3
 801655c:	e014      	b.n	8016588 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	2200      	movs	r2, #0
 8016562:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	2200      	movs	r2, #0
 8016568:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	2200      	movs	r2, #0
 801656e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	2220      	movs	r2, #32
 8016574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->gState = HAL_UART_STATE_READY;
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	2220      	movs	r2, #32
 801657c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	2200      	movs	r2, #0
 8016584:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8016586:	2300      	movs	r3, #0
}
 8016588:	4618      	mov	r0, r3
 801658a:	3780      	adds	r7, #128	; 0x80
 801658c:	46bd      	mov	sp, r7
 801658e:	bd80      	pop	{r7, pc}

08016590 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 8016590:	b580      	push	{r7, lr}
 8016592:	b08e      	sub	sp, #56	; 0x38
 8016594:	af00      	add	r7, sp, #0
 8016596:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	681b      	ldr	r3, [r3, #0]
 801659c:	330c      	adds	r3, #12
 801659e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80165a0:	6a3b      	ldr	r3, [r7, #32]
 80165a2:	e853 3f00 	ldrex	r3, [r3]
 80165a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80165a8:	69fb      	ldr	r3, [r7, #28]
 80165aa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80165ae:	637b      	str	r3, [r7, #52]	; 0x34
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	681b      	ldr	r3, [r3, #0]
 80165b4:	330c      	adds	r3, #12
 80165b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80165b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80165ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80165bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80165be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80165c0:	e841 2300 	strex	r3, r2, [r1]
 80165c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80165c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165c8:	2b00      	cmp	r3, #0
 80165ca:	d1e5      	bne.n	8016598 <HAL_UART_AbortTransmit+0x8>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	681b      	ldr	r3, [r3, #0]
 80165d0:	695b      	ldr	r3, [r3, #20]
 80165d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80165d6:	2b80      	cmp	r3, #128	; 0x80
 80165d8:	d136      	bne.n	8016648 <HAL_UART_AbortTransmit+0xb8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	681b      	ldr	r3, [r3, #0]
 80165de:	3314      	adds	r3, #20
 80165e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80165e2:	68fb      	ldr	r3, [r7, #12]
 80165e4:	e853 3f00 	ldrex	r3, [r3]
 80165e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80165ea:	68bb      	ldr	r3, [r7, #8]
 80165ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80165f0:	633b      	str	r3, [r7, #48]	; 0x30
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	681b      	ldr	r3, [r3, #0]
 80165f6:	3314      	adds	r3, #20
 80165f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80165fa:	61ba      	str	r2, [r7, #24]
 80165fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80165fe:	6979      	ldr	r1, [r7, #20]
 8016600:	69ba      	ldr	r2, [r7, #24]
 8016602:	e841 2300 	strex	r3, r2, [r1]
 8016606:	613b      	str	r3, [r7, #16]
   return(result);
 8016608:	693b      	ldr	r3, [r7, #16]
 801660a:	2b00      	cmp	r3, #0
 801660c:	d1e5      	bne.n	80165da <HAL_UART_AbortTransmit+0x4a>

    /* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016612:	2b00      	cmp	r3, #0
 8016614:	d018      	beq.n	8016648 <HAL_UART_AbortTransmit+0xb8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801661a:	2200      	movs	r2, #0
 801661c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016622:	4618      	mov	r0, r3
 8016624:	f7f1 fbb7 	bl	8007d96 <HAL_DMA_Abort>
 8016628:	4603      	mov	r3, r0
 801662a:	2b00      	cmp	r3, #0
 801662c:	d00c      	beq.n	8016648 <HAL_UART_AbortTransmit+0xb8>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016632:	4618      	mov	r0, r3
 8016634:	f7f1 ff73 	bl	800851e <HAL_DMA_GetError>
 8016638:	4603      	mov	r3, r0
 801663a:	2b20      	cmp	r3, #32
 801663c:	d104      	bne.n	8016648 <HAL_UART_AbortTransmit+0xb8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 801663e:	687b      	ldr	r3, [r7, #4]
 8016640:	2210      	movs	r2, #16
 8016642:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8016644:	2303      	movs	r3, #3
 8016646:	e007      	b.n	8016658 <HAL_UART_AbortTransmit+0xc8>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0x00U;
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	2200      	movs	r2, #0
 801664c:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	2220      	movs	r2, #32
 8016652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8016656:	2300      	movs	r3, #0
}
 8016658:	4618      	mov	r0, r3
 801665a:	3738      	adds	r7, #56	; 0x38
 801665c:	46bd      	mov	sp, r7
 801665e:	bd80      	pop	{r7, pc}

08016660 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8016660:	b580      	push	{r7, lr}
 8016662:	b09a      	sub	sp, #104	; 0x68
 8016664:	af00      	add	r7, sp, #0
 8016666:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	681b      	ldr	r3, [r3, #0]
 801666c:	330c      	adds	r3, #12
 801666e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016670:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016672:	e853 3f00 	ldrex	r3, [r3]
 8016676:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8016678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801667a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801667e:	667b      	str	r3, [r7, #100]	; 0x64
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	681b      	ldr	r3, [r3, #0]
 8016684:	330c      	adds	r3, #12
 8016686:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8016688:	657a      	str	r2, [r7, #84]	; 0x54
 801668a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801668c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801668e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016690:	e841 2300 	strex	r3, r2, [r1]
 8016694:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8016696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016698:	2b00      	cmp	r3, #0
 801669a:	d1e5      	bne.n	8016668 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	681b      	ldr	r3, [r3, #0]
 80166a0:	3314      	adds	r3, #20
 80166a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80166a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80166a6:	e853 3f00 	ldrex	r3, [r3]
 80166aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80166ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166ae:	f023 0301 	bic.w	r3, r3, #1
 80166b2:	663b      	str	r3, [r7, #96]	; 0x60
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	681b      	ldr	r3, [r3, #0]
 80166b8:	3314      	adds	r3, #20
 80166ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80166bc:	643a      	str	r2, [r7, #64]	; 0x40
 80166be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80166c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80166c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80166c4:	e841 2300 	strex	r3, r2, [r1]
 80166c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80166ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166cc:	2b00      	cmp	r3, #0
 80166ce:	d1e5      	bne.n	801669c <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80166d4:	2b01      	cmp	r3, #1
 80166d6:	d119      	bne.n	801670c <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	681b      	ldr	r3, [r3, #0]
 80166dc:	330c      	adds	r3, #12
 80166de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80166e0:	6a3b      	ldr	r3, [r7, #32]
 80166e2:	e853 3f00 	ldrex	r3, [r3]
 80166e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80166e8:	69fb      	ldr	r3, [r7, #28]
 80166ea:	f023 0310 	bic.w	r3, r3, #16
 80166ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	681b      	ldr	r3, [r3, #0]
 80166f4:	330c      	adds	r3, #12
 80166f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80166f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80166fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80166fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80166fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016700:	e841 2300 	strex	r3, r2, [r1]
 8016704:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016708:	2b00      	cmp	r3, #0
 801670a:	d1e5      	bne.n	80166d8 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	681b      	ldr	r3, [r3, #0]
 8016710:	695b      	ldr	r3, [r3, #20]
 8016712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016716:	2b40      	cmp	r3, #64	; 0x40
 8016718:	d136      	bne.n	8016788 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	681b      	ldr	r3, [r3, #0]
 801671e:	3314      	adds	r3, #20
 8016720:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016722:	68fb      	ldr	r3, [r7, #12]
 8016724:	e853 3f00 	ldrex	r3, [r3]
 8016728:	60bb      	str	r3, [r7, #8]
   return(result);
 801672a:	68bb      	ldr	r3, [r7, #8]
 801672c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016730:	65bb      	str	r3, [r7, #88]	; 0x58
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	681b      	ldr	r3, [r3, #0]
 8016736:	3314      	adds	r3, #20
 8016738:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801673a:	61ba      	str	r2, [r7, #24]
 801673c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801673e:	6979      	ldr	r1, [r7, #20]
 8016740:	69ba      	ldr	r2, [r7, #24]
 8016742:	e841 2300 	strex	r3, r2, [r1]
 8016746:	613b      	str	r3, [r7, #16]
   return(result);
 8016748:	693b      	ldr	r3, [r7, #16]
 801674a:	2b00      	cmp	r3, #0
 801674c:	d1e5      	bne.n	801671a <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016752:	2b00      	cmp	r3, #0
 8016754:	d018      	beq.n	8016788 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801675a:	2200      	movs	r2, #0
 801675c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016762:	4618      	mov	r0, r3
 8016764:	f7f1 fb17 	bl	8007d96 <HAL_DMA_Abort>
 8016768:	4603      	mov	r3, r0
 801676a:	2b00      	cmp	r3, #0
 801676c:	d00c      	beq.n	8016788 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016772:	4618      	mov	r0, r3
 8016774:	f7f1 fed3 	bl	800851e <HAL_DMA_GetError>
 8016778:	4603      	mov	r3, r0
 801677a:	2b20      	cmp	r3, #32
 801677c:	d104      	bne.n	8016788 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	2210      	movs	r2, #16
 8016782:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8016784:	2303      	movs	r3, #3
 8016786:	e00a      	b.n	801679e <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	2200      	movs	r2, #0
 801678c:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801678e:	687b      	ldr	r3, [r7, #4]
 8016790:	2220      	movs	r2, #32
 8016792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016796:	687b      	ldr	r3, [r7, #4]
 8016798:	2200      	movs	r2, #0
 801679a:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 801679c:	2300      	movs	r3, #0
}
 801679e:	4618      	mov	r0, r3
 80167a0:	3768      	adds	r7, #104	; 0x68
 80167a2:	46bd      	mov	sp, r7
 80167a4:	bd80      	pop	{r7, pc}

080167a6 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 80167a6:	b580      	push	{r7, lr}
 80167a8:	b0a2      	sub	sp, #136	; 0x88
 80167aa:	af00      	add	r7, sp, #0
 80167ac:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 80167ae:	2301      	movs	r3, #1
 80167b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	681b      	ldr	r3, [r3, #0]
 80167b8:	330c      	adds	r3, #12
 80167ba:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80167bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80167be:	e853 3f00 	ldrex	r3, [r3]
 80167c2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80167c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80167c6:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 80167ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	681b      	ldr	r3, [r3, #0]
 80167d2:	330c      	adds	r3, #12
 80167d4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80167d8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80167da:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80167dc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80167de:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80167e0:	e841 2300 	strex	r3, r2, [r1]
 80167e4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80167e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	d1e3      	bne.n	80167b4 <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	681b      	ldr	r3, [r3, #0]
 80167f0:	3314      	adds	r3, #20
 80167f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80167f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80167f6:	e853 3f00 	ldrex	r3, [r3]
 80167fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80167fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80167fe:	f023 0301 	bic.w	r3, r3, #1
 8016802:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	681b      	ldr	r3, [r3, #0]
 8016808:	3314      	adds	r3, #20
 801680a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801680c:	65ba      	str	r2, [r7, #88]	; 0x58
 801680e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016810:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016812:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016814:	e841 2300 	strex	r3, r2, [r1]
 8016818:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801681a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801681c:	2b00      	cmp	r3, #0
 801681e:	d1e5      	bne.n	80167ec <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016824:	2b01      	cmp	r3, #1
 8016826:	d119      	bne.n	801685c <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	681b      	ldr	r3, [r3, #0]
 801682c:	330c      	adds	r3, #12
 801682e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016832:	e853 3f00 	ldrex	r3, [r3]
 8016836:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8016838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801683a:	f023 0310 	bic.w	r3, r3, #16
 801683e:	67bb      	str	r3, [r7, #120]	; 0x78
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	681b      	ldr	r3, [r3, #0]
 8016844:	330c      	adds	r3, #12
 8016846:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8016848:	647a      	str	r2, [r7, #68]	; 0x44
 801684a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801684c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801684e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016850:	e841 2300 	strex	r3, r2, [r1]
 8016854:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8016856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016858:	2b00      	cmp	r3, #0
 801685a:	d1e5      	bne.n	8016828 <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016860:	2b00      	cmp	r3, #0
 8016862:	d00f      	beq.n	8016884 <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	681b      	ldr	r3, [r3, #0]
 8016868:	695b      	ldr	r3, [r3, #20]
 801686a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801686e:	2b80      	cmp	r3, #128	; 0x80
 8016870:	d104      	bne.n	801687c <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016876:	4a54      	ldr	r2, [pc, #336]	; (80169c8 <HAL_UART_Abort_IT+0x222>)
 8016878:	651a      	str	r2, [r3, #80]	; 0x50
 801687a:	e003      	b.n	8016884 <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016880:	2200      	movs	r2, #0
 8016882:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016888:	2b00      	cmp	r3, #0
 801688a:	d00f      	beq.n	80168ac <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	681b      	ldr	r3, [r3, #0]
 8016890:	695b      	ldr	r3, [r3, #20]
 8016892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016896:	2b40      	cmp	r3, #64	; 0x40
 8016898:	d104      	bne.n	80168a4 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801689e:	4a4b      	ldr	r2, [pc, #300]	; (80169cc <HAL_UART_Abort_IT+0x226>)
 80168a0:	651a      	str	r2, [r3, #80]	; 0x50
 80168a2:	e003      	b.n	80168ac <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80168a8:	2200      	movs	r2, #0
 80168aa:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	681b      	ldr	r3, [r3, #0]
 80168b0:	695b      	ldr	r3, [r3, #20]
 80168b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80168b6:	2b80      	cmp	r3, #128	; 0x80
 80168b8:	d12d      	bne.n	8016916 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	681b      	ldr	r3, [r3, #0]
 80168be:	3314      	adds	r3, #20
 80168c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80168c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168c4:	e853 3f00 	ldrex	r3, [r3]
 80168c8:	623b      	str	r3, [r7, #32]
   return(result);
 80168ca:	6a3b      	ldr	r3, [r7, #32]
 80168cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80168d0:	677b      	str	r3, [r7, #116]	; 0x74
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	681b      	ldr	r3, [r3, #0]
 80168d6:	3314      	adds	r3, #20
 80168d8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80168da:	633a      	str	r2, [r7, #48]	; 0x30
 80168dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80168de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80168e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80168e2:	e841 2300 	strex	r3, r2, [r1]
 80168e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80168e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d1e5      	bne.n	80168ba <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80168f2:	2b00      	cmp	r3, #0
 80168f4:	d00f      	beq.n	8016916 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80168fa:	4618      	mov	r0, r3
 80168fc:	f7f1 fabb 	bl	8007e76 <HAL_DMA_Abort_IT>
 8016900:	4603      	mov	r3, r0
 8016902:	2b00      	cmp	r3, #0
 8016904:	d004      	beq.n	8016910 <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801690a:	2200      	movs	r2, #0
 801690c:	651a      	str	r2, [r3, #80]	; 0x50
 801690e:	e002      	b.n	8016916 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 8016910:	2300      	movs	r3, #0
 8016912:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	681b      	ldr	r3, [r3, #0]
 801691a:	695b      	ldr	r3, [r3, #20]
 801691c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016920:	2b40      	cmp	r3, #64	; 0x40
 8016922:	d130      	bne.n	8016986 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	681b      	ldr	r3, [r3, #0]
 8016928:	3314      	adds	r3, #20
 801692a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801692c:	693b      	ldr	r3, [r7, #16]
 801692e:	e853 3f00 	ldrex	r3, [r3]
 8016932:	60fb      	str	r3, [r7, #12]
   return(result);
 8016934:	68fb      	ldr	r3, [r7, #12]
 8016936:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801693a:	673b      	str	r3, [r7, #112]	; 0x70
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	681b      	ldr	r3, [r3, #0]
 8016940:	3314      	adds	r3, #20
 8016942:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8016944:	61fa      	str	r2, [r7, #28]
 8016946:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016948:	69b9      	ldr	r1, [r7, #24]
 801694a:	69fa      	ldr	r2, [r7, #28]
 801694c:	e841 2300 	strex	r3, r2, [r1]
 8016950:	617b      	str	r3, [r7, #20]
   return(result);
 8016952:	697b      	ldr	r3, [r7, #20]
 8016954:	2b00      	cmp	r3, #0
 8016956:	d1e5      	bne.n	8016924 <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801695c:	2b00      	cmp	r3, #0
 801695e:	d012      	beq.n	8016986 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016964:	4618      	mov	r0, r3
 8016966:	f7f1 fa86 	bl	8007e76 <HAL_DMA_Abort_IT>
 801696a:	4603      	mov	r3, r0
 801696c:	2b00      	cmp	r3, #0
 801696e:	d007      	beq.n	8016980 <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016974:	2200      	movs	r2, #0
 8016976:	651a      	str	r2, [r3, #80]	; 0x50
        AbortCplt = 0x01U;
 8016978:	2301      	movs	r3, #1
 801697a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801697e:	e002      	b.n	8016986 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 8016980:	2300      	movs	r3, #0
 8016982:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 8016986:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801698a:	2b01      	cmp	r3, #1
 801698c:	d116      	bne.n	80169bc <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	2200      	movs	r2, #0
 8016992:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	2200      	movs	r2, #0
 8016998:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	2200      	movs	r2, #0
 801699e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	2220      	movs	r2, #32
 80169a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	2220      	movs	r2, #32
 80169ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	2200      	movs	r2, #0
 80169b4:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 80169b6:	6878      	ldr	r0, [r7, #4]
 80169b8:	f000 fbe5 	bl	8017186 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80169bc:	2300      	movs	r3, #0
}
 80169be:	4618      	mov	r0, r3
 80169c0:	3788      	adds	r7, #136	; 0x88
 80169c2:	46bd      	mov	sp, r7
 80169c4:	bd80      	pop	{r7, pc}
 80169c6:	bf00      	nop
 80169c8:	08017acf 	.word	0x08017acf
 80169cc:	08017b2f 	.word	0x08017b2f

080169d0 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 80169d0:	b580      	push	{r7, lr}
 80169d2:	b08e      	sub	sp, #56	; 0x38
 80169d4:	af00      	add	r7, sp, #0
 80169d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	681b      	ldr	r3, [r3, #0]
 80169dc:	330c      	adds	r3, #12
 80169de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80169e0:	6a3b      	ldr	r3, [r7, #32]
 80169e2:	e853 3f00 	ldrex	r3, [r3]
 80169e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80169e8:	69fb      	ldr	r3, [r7, #28]
 80169ea:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80169ee:	637b      	str	r3, [r7, #52]	; 0x34
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	681b      	ldr	r3, [r3, #0]
 80169f4:	330c      	adds	r3, #12
 80169f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80169f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80169fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80169fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80169fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016a00:	e841 2300 	strex	r3, r2, [r1]
 8016a04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	d1e5      	bne.n	80169d8 <HAL_UART_AbortTransmit_IT+0x8>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	681b      	ldr	r3, [r3, #0]
 8016a10:	695b      	ldr	r3, [r3, #20]
 8016a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016a16:	2b80      	cmp	r3, #128	; 0x80
 8016a18:	d13c      	bne.n	8016a94 <HAL_UART_AbortTransmit_IT+0xc4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	681b      	ldr	r3, [r3, #0]
 8016a1e:	3314      	adds	r3, #20
 8016a20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016a22:	68fb      	ldr	r3, [r7, #12]
 8016a24:	e853 3f00 	ldrex	r3, [r3]
 8016a28:	60bb      	str	r3, [r7, #8]
   return(result);
 8016a2a:	68bb      	ldr	r3, [r7, #8]
 8016a2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016a30:	633b      	str	r3, [r7, #48]	; 0x30
 8016a32:	687b      	ldr	r3, [r7, #4]
 8016a34:	681b      	ldr	r3, [r3, #0]
 8016a36:	3314      	adds	r3, #20
 8016a38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016a3a:	61ba      	str	r2, [r7, #24]
 8016a3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016a3e:	6979      	ldr	r1, [r7, #20]
 8016a40:	69ba      	ldr	r2, [r7, #24]
 8016a42:	e841 2300 	strex	r3, r2, [r1]
 8016a46:	613b      	str	r3, [r7, #16]
   return(result);
 8016a48:	693b      	ldr	r3, [r7, #16]
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d1e5      	bne.n	8016a1a <HAL_UART_AbortTransmit_IT+0x4a>

    /* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	d013      	beq.n	8016a7e <HAL_UART_AbortTransmit_IT+0xae>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 8016a56:	687b      	ldr	r3, [r7, #4]
 8016a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016a5a:	4a16      	ldr	r2, [pc, #88]	; (8016ab4 <HAL_UART_AbortTransmit_IT+0xe4>)
 8016a5c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8016a5e:	687b      	ldr	r3, [r7, #4]
 8016a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016a62:	4618      	mov	r0, r3
 8016a64:	f7f1 fa07 	bl	8007e76 <HAL_DMA_Abort_IT>
 8016a68:	4603      	mov	r3, r0
 8016a6a:	2b00      	cmp	r3, #0
 8016a6c:	d01c      	beq.n	8016aa8 <HAL_UART_AbortTransmit_IT+0xd8>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016a74:	687a      	ldr	r2, [r7, #4]
 8016a76:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8016a78:	4610      	mov	r0, r2
 8016a7a:	4798      	blx	r3
 8016a7c:	e014      	b.n	8016aa8 <HAL_UART_AbortTransmit_IT+0xd8>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0x00U;
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	2200      	movs	r2, #0
 8016a82:	84da      	strh	r2, [r3, #38]	; 0x26

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	2220      	movs	r2, #32
 8016a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 8016a8c:	6878      	ldr	r0, [r7, #4]
 8016a8e:	f000 fb84 	bl	801719a <HAL_UART_AbortTransmitCpltCallback>
 8016a92:	e009      	b.n	8016aa8 <HAL_UART_AbortTransmit_IT+0xd8>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0x00U;
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	2200      	movs	r2, #0
 8016a98:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	2220      	movs	r2, #32
 8016a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 8016aa2:	6878      	ldr	r0, [r7, #4]
 8016aa4:	f000 fb79 	bl	801719a <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8016aa8:	2300      	movs	r3, #0
}
 8016aaa:	4618      	mov	r0, r3
 8016aac:	3738      	adds	r7, #56	; 0x38
 8016aae:	46bd      	mov	sp, r7
 8016ab0:	bd80      	pop	{r7, pc}
 8016ab2:	bf00      	nop
 8016ab4:	08017b8f 	.word	0x08017b8f

08016ab8 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8016ab8:	b580      	push	{r7, lr}
 8016aba:	b09a      	sub	sp, #104	; 0x68
 8016abc:	af00      	add	r7, sp, #0
 8016abe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	681b      	ldr	r3, [r3, #0]
 8016ac4:	330c      	adds	r3, #12
 8016ac6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016ac8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016aca:	e853 3f00 	ldrex	r3, [r3]
 8016ace:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8016ad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016ad2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8016ad6:	667b      	str	r3, [r7, #100]	; 0x64
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	681b      	ldr	r3, [r3, #0]
 8016adc:	330c      	adds	r3, #12
 8016ade:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8016ae0:	657a      	str	r2, [r7, #84]	; 0x54
 8016ae2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016ae4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016ae6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016ae8:	e841 2300 	strex	r3, r2, [r1]
 8016aec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8016aee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	d1e5      	bne.n	8016ac0 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	681b      	ldr	r3, [r3, #0]
 8016af8:	3314      	adds	r3, #20
 8016afa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016afe:	e853 3f00 	ldrex	r3, [r3]
 8016b02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8016b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b06:	f023 0301 	bic.w	r3, r3, #1
 8016b0a:	663b      	str	r3, [r7, #96]	; 0x60
 8016b0c:	687b      	ldr	r3, [r7, #4]
 8016b0e:	681b      	ldr	r3, [r3, #0]
 8016b10:	3314      	adds	r3, #20
 8016b12:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016b14:	643a      	str	r2, [r7, #64]	; 0x40
 8016b16:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016b18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016b1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016b1c:	e841 2300 	strex	r3, r2, [r1]
 8016b20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b24:	2b00      	cmp	r3, #0
 8016b26:	d1e5      	bne.n	8016af4 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016b2c:	2b01      	cmp	r3, #1
 8016b2e:	d119      	bne.n	8016b64 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	681b      	ldr	r3, [r3, #0]
 8016b34:	330c      	adds	r3, #12
 8016b36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016b38:	6a3b      	ldr	r3, [r7, #32]
 8016b3a:	e853 3f00 	ldrex	r3, [r3]
 8016b3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8016b40:	69fb      	ldr	r3, [r7, #28]
 8016b42:	f023 0310 	bic.w	r3, r3, #16
 8016b46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	681b      	ldr	r3, [r3, #0]
 8016b4c:	330c      	adds	r3, #12
 8016b4e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016b50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016b52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016b54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016b56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016b58:	e841 2300 	strex	r3, r2, [r1]
 8016b5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	d1e5      	bne.n	8016b30 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	681b      	ldr	r3, [r3, #0]
 8016b68:	695b      	ldr	r3, [r3, #20]
 8016b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016b6e:	2b40      	cmp	r3, #64	; 0x40
 8016b70:	d13f      	bne.n	8016bf2 <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	681b      	ldr	r3, [r3, #0]
 8016b76:	3314      	adds	r3, #20
 8016b78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016b7a:	68fb      	ldr	r3, [r7, #12]
 8016b7c:	e853 3f00 	ldrex	r3, [r3]
 8016b80:	60bb      	str	r3, [r7, #8]
   return(result);
 8016b82:	68bb      	ldr	r3, [r7, #8]
 8016b84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016b88:	65bb      	str	r3, [r7, #88]	; 0x58
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	681b      	ldr	r3, [r3, #0]
 8016b8e:	3314      	adds	r3, #20
 8016b90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016b92:	61ba      	str	r2, [r7, #24]
 8016b94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016b96:	6979      	ldr	r1, [r7, #20]
 8016b98:	69ba      	ldr	r2, [r7, #24]
 8016b9a:	e841 2300 	strex	r3, r2, [r1]
 8016b9e:	613b      	str	r3, [r7, #16]
   return(result);
 8016ba0:	693b      	ldr	r3, [r7, #16]
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	d1e5      	bne.n	8016b72 <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	d013      	beq.n	8016bd6 <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016bb2:	4a19      	ldr	r2, [pc, #100]	; (8016c18 <HAL_UART_AbortReceive_IT+0x160>)
 8016bb4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016bba:	4618      	mov	r0, r3
 8016bbc:	f7f1 f95b 	bl	8007e76 <HAL_DMA_Abort_IT>
 8016bc0:	4603      	mov	r3, r0
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	d022      	beq.n	8016c0c <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8016bc6:	687b      	ldr	r3, [r7, #4]
 8016bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016bcc:	687a      	ldr	r2, [r7, #4]
 8016bce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8016bd0:	4610      	mov	r0, r2
 8016bd2:	4798      	blx	r3
 8016bd4:	e01a      	b.n	8016c0c <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	2200      	movs	r2, #0
 8016bda:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	2220      	movs	r2, #32
 8016be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	2200      	movs	r2, #0
 8016be8:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8016bea:	6878      	ldr	r0, [r7, #4]
 8016bec:	f000 fadf 	bl	80171ae <HAL_UART_AbortReceiveCpltCallback>
 8016bf0:	e00c      	b.n	8016c0c <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	2200      	movs	r2, #0
 8016bf6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	2220      	movs	r2, #32
 8016bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	2200      	movs	r2, #0
 8016c04:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8016c06:	6878      	ldr	r0, [r7, #4]
 8016c08:	f000 fad1 	bl	80171ae <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8016c0c:	2300      	movs	r3, #0
}
 8016c0e:	4618      	mov	r0, r3
 8016c10:	3768      	adds	r7, #104	; 0x68
 8016c12:	46bd      	mov	sp, r7
 8016c14:	bd80      	pop	{r7, pc}
 8016c16:	bf00      	nop
 8016c18:	08017bb9 	.word	0x08017bb9

08016c1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8016c1c:	b580      	push	{r7, lr}
 8016c1e:	b0ba      	sub	sp, #232	; 0xe8
 8016c20:	af00      	add	r7, sp, #0
 8016c22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	681b      	ldr	r3, [r3, #0]
 8016c28:	681b      	ldr	r3, [r3, #0]
 8016c2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	681b      	ldr	r3, [r3, #0]
 8016c32:	68db      	ldr	r3, [r3, #12]
 8016c34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	681b      	ldr	r3, [r3, #0]
 8016c3c:	695b      	ldr	r3, [r3, #20]
 8016c3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8016c42:	2300      	movs	r3, #0
 8016c44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8016c48:	2300      	movs	r3, #0
 8016c4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8016c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016c52:	f003 030f 	and.w	r3, r3, #15
 8016c56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8016c5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	d10f      	bne.n	8016c82 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8016c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016c66:	f003 0320 	and.w	r3, r3, #32
 8016c6a:	2b00      	cmp	r3, #0
 8016c6c:	d009      	beq.n	8016c82 <HAL_UART_IRQHandler+0x66>
 8016c6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016c72:	f003 0320 	and.w	r3, r3, #32
 8016c76:	2b00      	cmp	r3, #0
 8016c78:	d003      	beq.n	8016c82 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8016c7a:	6878      	ldr	r0, [r7, #4]
 8016c7c:	f001 f81c 	bl	8017cb8 <UART_Receive_IT>
      return;
 8016c80:	e256      	b.n	8017130 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8016c82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	f000 80de 	beq.w	8016e48 <HAL_UART_IRQHandler+0x22c>
 8016c8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016c90:	f003 0301 	and.w	r3, r3, #1
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	d106      	bne.n	8016ca6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8016c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016c9c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	f000 80d1 	beq.w	8016e48 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8016ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016caa:	f003 0301 	and.w	r3, r3, #1
 8016cae:	2b00      	cmp	r3, #0
 8016cb0:	d00b      	beq.n	8016cca <HAL_UART_IRQHandler+0xae>
 8016cb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016cba:	2b00      	cmp	r3, #0
 8016cbc:	d005      	beq.n	8016cca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016cc2:	f043 0201 	orr.w	r2, r3, #1
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8016cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016cce:	f003 0304 	and.w	r3, r3, #4
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	d00b      	beq.n	8016cee <HAL_UART_IRQHandler+0xd2>
 8016cd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016cda:	f003 0301 	and.w	r3, r3, #1
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	d005      	beq.n	8016cee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016ce6:	f043 0202 	orr.w	r2, r3, #2
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8016cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016cf2:	f003 0302 	and.w	r3, r3, #2
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	d00b      	beq.n	8016d12 <HAL_UART_IRQHandler+0xf6>
 8016cfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016cfe:	f003 0301 	and.w	r3, r3, #1
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	d005      	beq.n	8016d12 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016d0a:	f043 0204 	orr.w	r2, r3, #4
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8016d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016d16:	f003 0308 	and.w	r3, r3, #8
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	d011      	beq.n	8016d42 <HAL_UART_IRQHandler+0x126>
 8016d1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016d22:	f003 0320 	and.w	r3, r3, #32
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d105      	bne.n	8016d36 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8016d2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016d2e:	f003 0301 	and.w	r3, r3, #1
 8016d32:	2b00      	cmp	r3, #0
 8016d34:	d005      	beq.n	8016d42 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8016d36:	687b      	ldr	r3, [r7, #4]
 8016d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016d3a:	f043 0208 	orr.w	r2, r3, #8
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8016d42:	687b      	ldr	r3, [r7, #4]
 8016d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	f000 81ed 	beq.w	8017126 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8016d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016d50:	f003 0320 	and.w	r3, r3, #32
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	d008      	beq.n	8016d6a <HAL_UART_IRQHandler+0x14e>
 8016d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016d5c:	f003 0320 	and.w	r3, r3, #32
 8016d60:	2b00      	cmp	r3, #0
 8016d62:	d002      	beq.n	8016d6a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8016d64:	6878      	ldr	r0, [r7, #4]
 8016d66:	f000 ffa7 	bl	8017cb8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	681b      	ldr	r3, [r3, #0]
 8016d6e:	695b      	ldr	r3, [r3, #20]
 8016d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016d74:	2b40      	cmp	r3, #64	; 0x40
 8016d76:	bf0c      	ite	eq
 8016d78:	2301      	moveq	r3, #1
 8016d7a:	2300      	movne	r3, #0
 8016d7c:	b2db      	uxtb	r3, r3
 8016d7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016d86:	f003 0308 	and.w	r3, r3, #8
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d103      	bne.n	8016d96 <HAL_UART_IRQHandler+0x17a>
 8016d8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016d92:	2b00      	cmp	r3, #0
 8016d94:	d04f      	beq.n	8016e36 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8016d96:	6878      	ldr	r0, [r7, #4]
 8016d98:	f000 fe22 	bl	80179e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	681b      	ldr	r3, [r3, #0]
 8016da0:	695b      	ldr	r3, [r3, #20]
 8016da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016da6:	2b40      	cmp	r3, #64	; 0x40
 8016da8:	d141      	bne.n	8016e2e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	681b      	ldr	r3, [r3, #0]
 8016dae:	3314      	adds	r3, #20
 8016db0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016db4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016db8:	e853 3f00 	ldrex	r3, [r3]
 8016dbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8016dc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016dc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016dc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	681b      	ldr	r3, [r3, #0]
 8016dd0:	3314      	adds	r3, #20
 8016dd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8016dd6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8016dda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016dde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8016de2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8016de6:	e841 2300 	strex	r3, r2, [r1]
 8016dea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8016dee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016df2:	2b00      	cmp	r3, #0
 8016df4:	d1d9      	bne.n	8016daa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016dfa:	2b00      	cmp	r3, #0
 8016dfc:	d013      	beq.n	8016e26 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e02:	4a7d      	ldr	r2, [pc, #500]	; (8016ff8 <HAL_UART_IRQHandler+0x3dc>)
 8016e04:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e0a:	4618      	mov	r0, r3
 8016e0c:	f7f1 f833 	bl	8007e76 <HAL_DMA_Abort_IT>
 8016e10:	4603      	mov	r3, r0
 8016e12:	2b00      	cmp	r3, #0
 8016e14:	d016      	beq.n	8016e44 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8016e16:	687b      	ldr	r3, [r7, #4]
 8016e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016e1c:	687a      	ldr	r2, [r7, #4]
 8016e1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8016e20:	4610      	mov	r0, r2
 8016e22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016e24:	e00e      	b.n	8016e44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8016e26:	6878      	ldr	r0, [r7, #4]
 8016e28:	f000 f9a3 	bl	8017172 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016e2c:	e00a      	b.n	8016e44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8016e2e:	6878      	ldr	r0, [r7, #4]
 8016e30:	f000 f99f 	bl	8017172 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016e34:	e006      	b.n	8016e44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8016e36:	6878      	ldr	r0, [r7, #4]
 8016e38:	f000 f99b 	bl	8017172 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	2200      	movs	r2, #0
 8016e40:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8016e42:	e170      	b.n	8017126 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016e44:	bf00      	nop
    return;
 8016e46:	e16e      	b.n	8017126 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016e48:	687b      	ldr	r3, [r7, #4]
 8016e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016e4c:	2b01      	cmp	r3, #1
 8016e4e:	f040 814a 	bne.w	80170e6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8016e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016e56:	f003 0310 	and.w	r3, r3, #16
 8016e5a:	2b00      	cmp	r3, #0
 8016e5c:	f000 8143 	beq.w	80170e6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8016e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016e64:	f003 0310 	and.w	r3, r3, #16
 8016e68:	2b00      	cmp	r3, #0
 8016e6a:	f000 813c 	beq.w	80170e6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8016e6e:	2300      	movs	r3, #0
 8016e70:	60bb      	str	r3, [r7, #8]
 8016e72:	687b      	ldr	r3, [r7, #4]
 8016e74:	681b      	ldr	r3, [r3, #0]
 8016e76:	681b      	ldr	r3, [r3, #0]
 8016e78:	60bb      	str	r3, [r7, #8]
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	681b      	ldr	r3, [r3, #0]
 8016e7e:	685b      	ldr	r3, [r3, #4]
 8016e80:	60bb      	str	r3, [r7, #8]
 8016e82:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016e84:	687b      	ldr	r3, [r7, #4]
 8016e86:	681b      	ldr	r3, [r3, #0]
 8016e88:	695b      	ldr	r3, [r3, #20]
 8016e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016e8e:	2b40      	cmp	r3, #64	; 0x40
 8016e90:	f040 80b4 	bne.w	8016ffc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e98:	681b      	ldr	r3, [r3, #0]
 8016e9a:	685b      	ldr	r3, [r3, #4]
 8016e9c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8016ea0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	f000 8140 	beq.w	801712a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8016eae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8016eb2:	429a      	cmp	r2, r3
 8016eb4:	f080 8139 	bcs.w	801712a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8016ebe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016ec4:	69db      	ldr	r3, [r3, #28]
 8016ec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016eca:	f000 8088 	beq.w	8016fde <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	681b      	ldr	r3, [r3, #0]
 8016ed2:	330c      	adds	r3, #12
 8016ed4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016ed8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016edc:	e853 3f00 	ldrex	r3, [r3]
 8016ee0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8016ee4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016ee8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016eec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	681b      	ldr	r3, [r3, #0]
 8016ef4:	330c      	adds	r3, #12
 8016ef6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8016efa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8016efe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016f02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8016f06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8016f0a:	e841 2300 	strex	r3, r2, [r1]
 8016f0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8016f12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	d1d9      	bne.n	8016ece <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016f1a:	687b      	ldr	r3, [r7, #4]
 8016f1c:	681b      	ldr	r3, [r3, #0]
 8016f1e:	3314      	adds	r3, #20
 8016f20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016f22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016f24:	e853 3f00 	ldrex	r3, [r3]
 8016f28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8016f2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016f2c:	f023 0301 	bic.w	r3, r3, #1
 8016f30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	681b      	ldr	r3, [r3, #0]
 8016f38:	3314      	adds	r3, #20
 8016f3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8016f3e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8016f42:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016f44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8016f46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016f4a:	e841 2300 	strex	r3, r2, [r1]
 8016f4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8016f50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	d1e1      	bne.n	8016f1a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	681b      	ldr	r3, [r3, #0]
 8016f5a:	3314      	adds	r3, #20
 8016f5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016f5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016f60:	e853 3f00 	ldrex	r3, [r3]
 8016f64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8016f66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016f68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016f6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	681b      	ldr	r3, [r3, #0]
 8016f74:	3314      	adds	r3, #20
 8016f76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8016f7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8016f7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016f7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8016f80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016f82:	e841 2300 	strex	r3, r2, [r1]
 8016f86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8016f88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	d1e3      	bne.n	8016f56 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8016f8e:	687b      	ldr	r3, [r7, #4]
 8016f90:	2220      	movs	r2, #32
 8016f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	2200      	movs	r2, #0
 8016f9a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	681b      	ldr	r3, [r3, #0]
 8016fa0:	330c      	adds	r3, #12
 8016fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016fa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016fa6:	e853 3f00 	ldrex	r3, [r3]
 8016faa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8016fac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016fae:	f023 0310 	bic.w	r3, r3, #16
 8016fb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	681b      	ldr	r3, [r3, #0]
 8016fba:	330c      	adds	r3, #12
 8016fbc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8016fc0:	65ba      	str	r2, [r7, #88]	; 0x58
 8016fc2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016fc4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016fc6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016fc8:	e841 2300 	strex	r3, r2, [r1]
 8016fcc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8016fce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016fd0:	2b00      	cmp	r3, #0
 8016fd2:	d1e3      	bne.n	8016f9c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016fd8:	4618      	mov	r0, r3
 8016fda:	f7f0 fedc 	bl	8007d96 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8016fde:	687b      	ldr	r3, [r7, #4]
 8016fe0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8016fe2:	687b      	ldr	r3, [r7, #4]
 8016fe4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8016fe6:	b29b      	uxth	r3, r3
 8016fe8:	1ad3      	subs	r3, r2, r3
 8016fea:	b29b      	uxth	r3, r3
 8016fec:	4619      	mov	r1, r3
 8016fee:	6878      	ldr	r0, [r7, #4]
 8016ff0:	f000 f8e7 	bl	80171c2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8016ff4:	e099      	b.n	801712a <HAL_UART_IRQHandler+0x50e>
 8016ff6:	bf00      	nop
 8016ff8:	08017aa7 	.word	0x08017aa7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8017004:	b29b      	uxth	r3, r3
 8017006:	1ad3      	subs	r3, r2, r3
 8017008:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8017010:	b29b      	uxth	r3, r3
 8017012:	2b00      	cmp	r3, #0
 8017014:	f000 808b 	beq.w	801712e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8017018:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801701c:	2b00      	cmp	r3, #0
 801701e:	f000 8086 	beq.w	801712e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	681b      	ldr	r3, [r3, #0]
 8017026:	330c      	adds	r3, #12
 8017028:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801702a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801702c:	e853 3f00 	ldrex	r3, [r3]
 8017030:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8017032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017034:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8017038:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	681b      	ldr	r3, [r3, #0]
 8017040:	330c      	adds	r3, #12
 8017042:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8017046:	647a      	str	r2, [r7, #68]	; 0x44
 8017048:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801704a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801704c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801704e:	e841 2300 	strex	r3, r2, [r1]
 8017052:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8017054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017056:	2b00      	cmp	r3, #0
 8017058:	d1e3      	bne.n	8017022 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801705a:	687b      	ldr	r3, [r7, #4]
 801705c:	681b      	ldr	r3, [r3, #0]
 801705e:	3314      	adds	r3, #20
 8017060:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017064:	e853 3f00 	ldrex	r3, [r3]
 8017068:	623b      	str	r3, [r7, #32]
   return(result);
 801706a:	6a3b      	ldr	r3, [r7, #32]
 801706c:	f023 0301 	bic.w	r3, r3, #1
 8017070:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	681b      	ldr	r3, [r3, #0]
 8017078:	3314      	adds	r3, #20
 801707a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801707e:	633a      	str	r2, [r7, #48]	; 0x30
 8017080:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017082:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017086:	e841 2300 	strex	r3, r2, [r1]
 801708a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801708c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801708e:	2b00      	cmp	r3, #0
 8017090:	d1e3      	bne.n	801705a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8017092:	687b      	ldr	r3, [r7, #4]
 8017094:	2220      	movs	r2, #32
 8017096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	2200      	movs	r2, #0
 801709e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	681b      	ldr	r3, [r3, #0]
 80170a4:	330c      	adds	r3, #12
 80170a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80170a8:	693b      	ldr	r3, [r7, #16]
 80170aa:	e853 3f00 	ldrex	r3, [r3]
 80170ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80170b0:	68fb      	ldr	r3, [r7, #12]
 80170b2:	f023 0310 	bic.w	r3, r3, #16
 80170b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80170ba:	687b      	ldr	r3, [r7, #4]
 80170bc:	681b      	ldr	r3, [r3, #0]
 80170be:	330c      	adds	r3, #12
 80170c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80170c4:	61fa      	str	r2, [r7, #28]
 80170c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80170c8:	69b9      	ldr	r1, [r7, #24]
 80170ca:	69fa      	ldr	r2, [r7, #28]
 80170cc:	e841 2300 	strex	r3, r2, [r1]
 80170d0:	617b      	str	r3, [r7, #20]
   return(result);
 80170d2:	697b      	ldr	r3, [r7, #20]
 80170d4:	2b00      	cmp	r3, #0
 80170d6:	d1e3      	bne.n	80170a0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80170d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80170dc:	4619      	mov	r1, r3
 80170de:	6878      	ldr	r0, [r7, #4]
 80170e0:	f000 f86f 	bl	80171c2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80170e4:	e023      	b.n	801712e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80170e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80170ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80170ee:	2b00      	cmp	r3, #0
 80170f0:	d009      	beq.n	8017106 <HAL_UART_IRQHandler+0x4ea>
 80170f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80170f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	d003      	beq.n	8017106 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80170fe:	6878      	ldr	r0, [r7, #4]
 8017100:	f000 fd72 	bl	8017be8 <UART_Transmit_IT>
    return;
 8017104:	e014      	b.n	8017130 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8017106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801710a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801710e:	2b00      	cmp	r3, #0
 8017110:	d00e      	beq.n	8017130 <HAL_UART_IRQHandler+0x514>
 8017112:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801711a:	2b00      	cmp	r3, #0
 801711c:	d008      	beq.n	8017130 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 801711e:	6878      	ldr	r0, [r7, #4]
 8017120:	f000 fdb2 	bl	8017c88 <UART_EndTransmit_IT>
    return;
 8017124:	e004      	b.n	8017130 <HAL_UART_IRQHandler+0x514>
    return;
 8017126:	bf00      	nop
 8017128:	e002      	b.n	8017130 <HAL_UART_IRQHandler+0x514>
      return;
 801712a:	bf00      	nop
 801712c:	e000      	b.n	8017130 <HAL_UART_IRQHandler+0x514>
      return;
 801712e:	bf00      	nop
  }
}
 8017130:	37e8      	adds	r7, #232	; 0xe8
 8017132:	46bd      	mov	sp, r7
 8017134:	bd80      	pop	{r7, pc}

08017136 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8017136:	b480      	push	{r7}
 8017138:	b083      	sub	sp, #12
 801713a:	af00      	add	r7, sp, #0
 801713c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 801713e:	bf00      	nop
 8017140:	370c      	adds	r7, #12
 8017142:	46bd      	mov	sp, r7
 8017144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017148:	4770      	bx	lr

0801714a <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801714a:	b480      	push	{r7}
 801714c:	b083      	sub	sp, #12
 801714e:	af00      	add	r7, sp, #0
 8017150:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8017152:	bf00      	nop
 8017154:	370c      	adds	r7, #12
 8017156:	46bd      	mov	sp, r7
 8017158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801715c:	4770      	bx	lr

0801715e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801715e:	b480      	push	{r7}
 8017160:	b083      	sub	sp, #12
 8017162:	af00      	add	r7, sp, #0
 8017164:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8017166:	bf00      	nop
 8017168:	370c      	adds	r7, #12
 801716a:	46bd      	mov	sp, r7
 801716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017170:	4770      	bx	lr

08017172 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8017172:	b480      	push	{r7}
 8017174:	b083      	sub	sp, #12
 8017176:	af00      	add	r7, sp, #0
 8017178:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 801717a:	bf00      	nop
 801717c:	370c      	adds	r7, #12
 801717e:	46bd      	mov	sp, r7
 8017180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017184:	4770      	bx	lr

08017186 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8017186:	b480      	push	{r7}
 8017188:	b083      	sub	sp, #12
 801718a:	af00      	add	r7, sp, #0
 801718c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 801718e:	bf00      	nop
 8017190:	370c      	adds	r7, #12
 8017192:	46bd      	mov	sp, r7
 8017194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017198:	4770      	bx	lr

0801719a <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 801719a:	b480      	push	{r7}
 801719c:	b083      	sub	sp, #12
 801719e:	af00      	add	r7, sp, #0
 80171a0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80171a2:	bf00      	nop
 80171a4:	370c      	adds	r7, #12
 80171a6:	46bd      	mov	sp, r7
 80171a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171ac:	4770      	bx	lr

080171ae <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80171ae:	b480      	push	{r7}
 80171b0:	b083      	sub	sp, #12
 80171b2:	af00      	add	r7, sp, #0
 80171b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80171b6:	bf00      	nop
 80171b8:	370c      	adds	r7, #12
 80171ba:	46bd      	mov	sp, r7
 80171bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171c0:	4770      	bx	lr

080171c2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80171c2:	b480      	push	{r7}
 80171c4:	b083      	sub	sp, #12
 80171c6:	af00      	add	r7, sp, #0
 80171c8:	6078      	str	r0, [r7, #4]
 80171ca:	460b      	mov	r3, r1
 80171cc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80171ce:	bf00      	nop
 80171d0:	370c      	adds	r7, #12
 80171d2:	46bd      	mov	sp, r7
 80171d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171d8:	4770      	bx	lr

080171da <HAL_LIN_SendBreak>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
{
 80171da:	b480      	push	{r7}
 80171dc:	b089      	sub	sp, #36	; 0x24
 80171de:	af00      	add	r7, sp, #0
 80171e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80171e2:	687b      	ldr	r3, [r7, #4]
 80171e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80171e8:	2b01      	cmp	r3, #1
 80171ea:	d101      	bne.n	80171f0 <HAL_LIN_SendBreak+0x16>
 80171ec:	2302      	movs	r3, #2
 80171ee:	e02a      	b.n	8017246 <HAL_LIN_SendBreak+0x6c>
 80171f0:	687b      	ldr	r3, [r7, #4]
 80171f2:	2201      	movs	r2, #1
 80171f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 80171f8:	687b      	ldr	r3, [r7, #4]
 80171fa:	2224      	movs	r2, #36	; 0x24
 80171fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Send break characters */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_SBK);
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	681b      	ldr	r3, [r3, #0]
 8017204:	330c      	adds	r3, #12
 8017206:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017208:	68fb      	ldr	r3, [r7, #12]
 801720a:	e853 3f00 	ldrex	r3, [r3]
 801720e:	60bb      	str	r3, [r7, #8]
   return(result);
 8017210:	68bb      	ldr	r3, [r7, #8]
 8017212:	f043 0301 	orr.w	r3, r3, #1
 8017216:	61fb      	str	r3, [r7, #28]
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	681b      	ldr	r3, [r3, #0]
 801721c:	330c      	adds	r3, #12
 801721e:	69fa      	ldr	r2, [r7, #28]
 8017220:	61ba      	str	r2, [r7, #24]
 8017222:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017224:	6979      	ldr	r1, [r7, #20]
 8017226:	69ba      	ldr	r2, [r7, #24]
 8017228:	e841 2300 	strex	r3, r2, [r1]
 801722c:	613b      	str	r3, [r7, #16]
   return(result);
 801722e:	693b      	ldr	r3, [r7, #16]
 8017230:	2b00      	cmp	r3, #0
 8017232:	d1e5      	bne.n	8017200 <HAL_LIN_SendBreak+0x26>

  huart->gState = HAL_UART_STATE_READY;
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	2220      	movs	r2, #32
 8017238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	2200      	movs	r2, #0
 8017240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8017244:	2300      	movs	r3, #0
}
 8017246:	4618      	mov	r0, r3
 8017248:	3724      	adds	r7, #36	; 0x24
 801724a:	46bd      	mov	sp, r7
 801724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017250:	4770      	bx	lr

08017252 <HAL_MultiProcessor_EnterMuteMode>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart)
{
 8017252:	b480      	push	{r7}
 8017254:	b089      	sub	sp, #36	; 0x24
 8017256:	af00      	add	r7, sp, #0
 8017258:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017260:	2b01      	cmp	r3, #1
 8017262:	d101      	bne.n	8017268 <HAL_MultiProcessor_EnterMuteMode+0x16>
 8017264:	2302      	movs	r3, #2
 8017266:	e02a      	b.n	80172be <HAL_MultiProcessor_EnterMuteMode+0x6c>
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	2201      	movs	r2, #1
 801726c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	2224      	movs	r2, #36	; 0x24
 8017274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RWU);
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	681b      	ldr	r3, [r3, #0]
 801727c:	330c      	adds	r3, #12
 801727e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017280:	68fb      	ldr	r3, [r7, #12]
 8017282:	e853 3f00 	ldrex	r3, [r3]
 8017286:	60bb      	str	r3, [r7, #8]
   return(result);
 8017288:	68bb      	ldr	r3, [r7, #8]
 801728a:	f043 0302 	orr.w	r3, r3, #2
 801728e:	61fb      	str	r3, [r7, #28]
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	681b      	ldr	r3, [r3, #0]
 8017294:	330c      	adds	r3, #12
 8017296:	69fa      	ldr	r2, [r7, #28]
 8017298:	61ba      	str	r2, [r7, #24]
 801729a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801729c:	6979      	ldr	r1, [r7, #20]
 801729e:	69ba      	ldr	r2, [r7, #24]
 80172a0:	e841 2300 	strex	r3, r2, [r1]
 80172a4:	613b      	str	r3, [r7, #16]
   return(result);
 80172a6:	693b      	ldr	r3, [r7, #16]
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	d1e5      	bne.n	8017278 <HAL_MultiProcessor_EnterMuteMode+0x26>

  huart->gState = HAL_UART_STATE_READY;
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	2220      	movs	r2, #32
 80172b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	2200      	movs	r2, #0
 80172b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80172bc:	2300      	movs	r3, #0
}
 80172be:	4618      	mov	r0, r3
 80172c0:	3724      	adds	r7, #36	; 0x24
 80172c2:	46bd      	mov	sp, r7
 80172c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172c8:	4770      	bx	lr

080172ca <HAL_MultiProcessor_ExitMuteMode>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_ExitMuteMode(UART_HandleTypeDef *huart)
{
 80172ca:	b480      	push	{r7}
 80172cc:	b089      	sub	sp, #36	; 0x24
 80172ce:	af00      	add	r7, sp, #0
 80172d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80172d2:	687b      	ldr	r3, [r7, #4]
 80172d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80172d8:	2b01      	cmp	r3, #1
 80172da:	d101      	bne.n	80172e0 <HAL_MultiProcessor_ExitMuteMode+0x16>
 80172dc:	2302      	movs	r3, #2
 80172de:	e02a      	b.n	8017336 <HAL_MultiProcessor_ExitMuteMode+0x6c>
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	2201      	movs	r2, #1
 80172e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	2224      	movs	r2, #36	; 0x24
 80172ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RWU);
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	681b      	ldr	r3, [r3, #0]
 80172f4:	330c      	adds	r3, #12
 80172f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80172f8:	68fb      	ldr	r3, [r7, #12]
 80172fa:	e853 3f00 	ldrex	r3, [r3]
 80172fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8017300:	68bb      	ldr	r3, [r7, #8]
 8017302:	f023 0302 	bic.w	r3, r3, #2
 8017306:	61fb      	str	r3, [r7, #28]
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	681b      	ldr	r3, [r3, #0]
 801730c:	330c      	adds	r3, #12
 801730e:	69fa      	ldr	r2, [r7, #28]
 8017310:	61ba      	str	r2, [r7, #24]
 8017312:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017314:	6979      	ldr	r1, [r7, #20]
 8017316:	69ba      	ldr	r2, [r7, #24]
 8017318:	e841 2300 	strex	r3, r2, [r1]
 801731c:	613b      	str	r3, [r7, #16]
   return(result);
 801731e:	693b      	ldr	r3, [r7, #16]
 8017320:	2b00      	cmp	r3, #0
 8017322:	d1e5      	bne.n	80172f0 <HAL_MultiProcessor_ExitMuteMode+0x26>

  huart->gState = HAL_UART_STATE_READY;
 8017324:	687b      	ldr	r3, [r7, #4]
 8017326:	2220      	movs	r2, #32
 8017328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	2200      	movs	r2, #0
 8017330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8017334:	2300      	movs	r3, #0
}
 8017336:	4618      	mov	r0, r3
 8017338:	3724      	adds	r7, #36	; 0x24
 801733a:	46bd      	mov	sp, r7
 801733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017340:	4770      	bx	lr

08017342 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8017342:	b480      	push	{r7}
 8017344:	b085      	sub	sp, #20
 8017346:	af00      	add	r7, sp, #0
 8017348:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 801734a:	2300      	movs	r3, #0
 801734c:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017354:	2b01      	cmp	r3, #1
 8017356:	d101      	bne.n	801735c <HAL_HalfDuplex_EnableTransmitter+0x1a>
 8017358:	2302      	movs	r3, #2
 801735a:	e020      	b.n	801739e <HAL_HalfDuplex_EnableTransmitter+0x5c>
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	2201      	movs	r2, #1
 8017360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8017364:	687b      	ldr	r3, [r7, #4]
 8017366:	2224      	movs	r2, #36	; 0x24
 8017368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	681b      	ldr	r3, [r3, #0]
 8017370:	68db      	ldr	r3, [r3, #12]
 8017372:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8017374:	68fb      	ldr	r3, [r7, #12]
 8017376:	f023 030c 	bic.w	r3, r3, #12
 801737a:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 801737c:	68fb      	ldr	r3, [r7, #12]
 801737e:	f043 0308 	orr.w	r3, r3, #8
 8017382:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	681b      	ldr	r3, [r3, #0]
 8017388:	68fa      	ldr	r2, [r7, #12]
 801738a:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	2220      	movs	r2, #32
 8017390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	2200      	movs	r2, #0
 8017398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801739c:	2300      	movs	r3, #0
}
 801739e:	4618      	mov	r0, r3
 80173a0:	3714      	adds	r7, #20
 80173a2:	46bd      	mov	sp, r7
 80173a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173a8:	4770      	bx	lr

080173aa <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 80173aa:	b480      	push	{r7}
 80173ac:	b085      	sub	sp, #20
 80173ae:	af00      	add	r7, sp, #0
 80173b0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80173b2:	2300      	movs	r3, #0
 80173b4:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 80173b6:	687b      	ldr	r3, [r7, #4]
 80173b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80173bc:	2b01      	cmp	r3, #1
 80173be:	d101      	bne.n	80173c4 <HAL_HalfDuplex_EnableReceiver+0x1a>
 80173c0:	2302      	movs	r3, #2
 80173c2:	e020      	b.n	8017406 <HAL_HalfDuplex_EnableReceiver+0x5c>
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	2201      	movs	r2, #1
 80173c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	2224      	movs	r2, #36	; 0x24
 80173d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	681b      	ldr	r3, [r3, #0]
 80173d8:	68db      	ldr	r3, [r3, #12]
 80173da:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 80173dc:	68fb      	ldr	r3, [r7, #12]
 80173de:	f023 030c 	bic.w	r3, r3, #12
 80173e2:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 80173e4:	68fb      	ldr	r3, [r7, #12]
 80173e6:	f043 0304 	orr.w	r3, r3, #4
 80173ea:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	681b      	ldr	r3, [r3, #0]
 80173f0:	68fa      	ldr	r2, [r7, #12]
 80173f2:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 80173f4:	687b      	ldr	r3, [r7, #4]
 80173f6:	2220      	movs	r2, #32
 80173f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80173fc:	687b      	ldr	r3, [r7, #4]
 80173fe:	2200      	movs	r2, #0
 8017400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8017404:	2300      	movs	r3, #0
}
 8017406:	4618      	mov	r0, r3
 8017408:	3714      	adds	r7, #20
 801740a:	46bd      	mov	sp, r7
 801740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017410:	4770      	bx	lr

08017412 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8017412:	b480      	push	{r7}
 8017414:	b085      	sub	sp, #20
 8017416:	af00      	add	r7, sp, #0
 8017418:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 801741a:	2300      	movs	r3, #0
 801741c:	60fb      	str	r3, [r7, #12]
 801741e:	2300      	movs	r3, #0
 8017420:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8017422:	687b      	ldr	r3, [r7, #4]
 8017424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017428:	b2db      	uxtb	r3, r3
 801742a:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8017432:	b2db      	uxtb	r3, r3
 8017434:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8017436:	68fb      	ldr	r3, [r7, #12]
 8017438:	b2da      	uxtb	r2, r3
 801743a:	68bb      	ldr	r3, [r7, #8]
 801743c:	b2db      	uxtb	r3, r3
 801743e:	4313      	orrs	r3, r2
 8017440:	b2db      	uxtb	r3, r3
}
 8017442:	4618      	mov	r0, r3
 8017444:	3714      	adds	r7, #20
 8017446:	46bd      	mov	sp, r7
 8017448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801744c:	4770      	bx	lr

0801744e <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 801744e:	b480      	push	{r7}
 8017450:	b083      	sub	sp, #12
 8017452:	af00      	add	r7, sp, #0
 8017454:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 801745a:	4618      	mov	r0, r3
 801745c:	370c      	adds	r7, #12
 801745e:	46bd      	mov	sp, r7
 8017460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017464:	4770      	bx	lr

08017466 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8017466:	b580      	push	{r7, lr}
 8017468:	b090      	sub	sp, #64	; 0x40
 801746a:	af00      	add	r7, sp, #0
 801746c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801746e:	687b      	ldr	r3, [r7, #4]
 8017470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017472:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	681b      	ldr	r3, [r3, #0]
 8017478:	681b      	ldr	r3, [r3, #0]
 801747a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801747e:	2b00      	cmp	r3, #0
 8017480:	d137      	bne.n	80174f2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8017482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017484:	2200      	movs	r2, #0
 8017486:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8017488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801748a:	681b      	ldr	r3, [r3, #0]
 801748c:	3314      	adds	r3, #20
 801748e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017492:	e853 3f00 	ldrex	r3, [r3]
 8017496:	623b      	str	r3, [r7, #32]
   return(result);
 8017498:	6a3b      	ldr	r3, [r7, #32]
 801749a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801749e:	63bb      	str	r3, [r7, #56]	; 0x38
 80174a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80174a2:	681b      	ldr	r3, [r3, #0]
 80174a4:	3314      	adds	r3, #20
 80174a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80174a8:	633a      	str	r2, [r7, #48]	; 0x30
 80174aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80174ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80174ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80174b0:	e841 2300 	strex	r3, r2, [r1]
 80174b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80174b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	d1e5      	bne.n	8017488 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80174bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80174be:	681b      	ldr	r3, [r3, #0]
 80174c0:	330c      	adds	r3, #12
 80174c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80174c4:	693b      	ldr	r3, [r7, #16]
 80174c6:	e853 3f00 	ldrex	r3, [r3]
 80174ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80174cc:	68fb      	ldr	r3, [r7, #12]
 80174ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80174d2:	637b      	str	r3, [r7, #52]	; 0x34
 80174d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80174d6:	681b      	ldr	r3, [r3, #0]
 80174d8:	330c      	adds	r3, #12
 80174da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80174dc:	61fa      	str	r2, [r7, #28]
 80174de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80174e0:	69b9      	ldr	r1, [r7, #24]
 80174e2:	69fa      	ldr	r2, [r7, #28]
 80174e4:	e841 2300 	strex	r3, r2, [r1]
 80174e8:	617b      	str	r3, [r7, #20]
   return(result);
 80174ea:	697b      	ldr	r3, [r7, #20]
 80174ec:	2b00      	cmp	r3, #0
 80174ee:	d1e5      	bne.n	80174bc <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80174f0:	e002      	b.n	80174f8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80174f2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80174f4:	f7ff fe1f 	bl	8017136 <HAL_UART_TxCpltCallback>
}
 80174f8:	bf00      	nop
 80174fa:	3740      	adds	r7, #64	; 0x40
 80174fc:	46bd      	mov	sp, r7
 80174fe:	bd80      	pop	{r7, pc}

08017500 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8017500:	b580      	push	{r7, lr}
 8017502:	b084      	sub	sp, #16
 8017504:	af00      	add	r7, sp, #0
 8017506:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017508:	687b      	ldr	r3, [r7, #4]
 801750a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801750c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 801750e:	68f8      	ldr	r0, [r7, #12]
 8017510:	f7ff fe1b 	bl	801714a <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017514:	bf00      	nop
 8017516:	3710      	adds	r7, #16
 8017518:	46bd      	mov	sp, r7
 801751a:	bd80      	pop	{r7, pc}

0801751c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801751c:	b580      	push	{r7, lr}
 801751e:	b09c      	sub	sp, #112	; 0x70
 8017520:	af00      	add	r7, sp, #0
 8017522:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017528:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 801752a:	687b      	ldr	r3, [r7, #4]
 801752c:	681b      	ldr	r3, [r3, #0]
 801752e:	681b      	ldr	r3, [r3, #0]
 8017530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017534:	2b00      	cmp	r3, #0
 8017536:	d172      	bne.n	801761e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8017538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801753a:	2200      	movs	r2, #0
 801753c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801753e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017540:	681b      	ldr	r3, [r3, #0]
 8017542:	330c      	adds	r3, #12
 8017544:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017548:	e853 3f00 	ldrex	r3, [r3]
 801754c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801754e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017550:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8017554:	66bb      	str	r3, [r7, #104]	; 0x68
 8017556:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017558:	681b      	ldr	r3, [r3, #0]
 801755a:	330c      	adds	r3, #12
 801755c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801755e:	65ba      	str	r2, [r7, #88]	; 0x58
 8017560:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017562:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8017564:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017566:	e841 2300 	strex	r3, r2, [r1]
 801756a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801756c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801756e:	2b00      	cmp	r3, #0
 8017570:	d1e5      	bne.n	801753e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017574:	681b      	ldr	r3, [r3, #0]
 8017576:	3314      	adds	r3, #20
 8017578:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801757a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801757c:	e853 3f00 	ldrex	r3, [r3]
 8017580:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8017582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017584:	f023 0301 	bic.w	r3, r3, #1
 8017588:	667b      	str	r3, [r7, #100]	; 0x64
 801758a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801758c:	681b      	ldr	r3, [r3, #0]
 801758e:	3314      	adds	r3, #20
 8017590:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8017592:	647a      	str	r2, [r7, #68]	; 0x44
 8017594:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017596:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8017598:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801759a:	e841 2300 	strex	r3, r2, [r1]
 801759e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80175a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80175a2:	2b00      	cmp	r3, #0
 80175a4:	d1e5      	bne.n	8017572 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80175a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80175a8:	681b      	ldr	r3, [r3, #0]
 80175aa:	3314      	adds	r3, #20
 80175ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80175ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175b0:	e853 3f00 	ldrex	r3, [r3]
 80175b4:	623b      	str	r3, [r7, #32]
   return(result);
 80175b6:	6a3b      	ldr	r3, [r7, #32]
 80175b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80175bc:	663b      	str	r3, [r7, #96]	; 0x60
 80175be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80175c0:	681b      	ldr	r3, [r3, #0]
 80175c2:	3314      	adds	r3, #20
 80175c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80175c6:	633a      	str	r2, [r7, #48]	; 0x30
 80175c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80175ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80175cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80175ce:	e841 2300 	strex	r3, r2, [r1]
 80175d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80175d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175d6:	2b00      	cmp	r3, #0
 80175d8:	d1e5      	bne.n	80175a6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80175da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80175dc:	2220      	movs	r2, #32
 80175de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80175e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80175e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80175e6:	2b01      	cmp	r3, #1
 80175e8:	d119      	bne.n	801761e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80175ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80175ec:	681b      	ldr	r3, [r3, #0]
 80175ee:	330c      	adds	r3, #12
 80175f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80175f2:	693b      	ldr	r3, [r7, #16]
 80175f4:	e853 3f00 	ldrex	r3, [r3]
 80175f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80175fa:	68fb      	ldr	r3, [r7, #12]
 80175fc:	f023 0310 	bic.w	r3, r3, #16
 8017600:	65fb      	str	r3, [r7, #92]	; 0x5c
 8017602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017604:	681b      	ldr	r3, [r3, #0]
 8017606:	330c      	adds	r3, #12
 8017608:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801760a:	61fa      	str	r2, [r7, #28]
 801760c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801760e:	69b9      	ldr	r1, [r7, #24]
 8017610:	69fa      	ldr	r2, [r7, #28]
 8017612:	e841 2300 	strex	r3, r2, [r1]
 8017616:	617b      	str	r3, [r7, #20]
   return(result);
 8017618:	697b      	ldr	r3, [r7, #20]
 801761a:	2b00      	cmp	r3, #0
 801761c:	d1e5      	bne.n	80175ea <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801761e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017622:	2b01      	cmp	r3, #1
 8017624:	d106      	bne.n	8017634 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8017626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017628:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801762a:	4619      	mov	r1, r3
 801762c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801762e:	f7ff fdc8 	bl	80171c2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8017632:	e002      	b.n	801763a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8017634:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8017636:	f7ea f967 	bl	8001908 <HAL_UART_RxCpltCallback>
}
 801763a:	bf00      	nop
 801763c:	3770      	adds	r7, #112	; 0x70
 801763e:	46bd      	mov	sp, r7
 8017640:	bd80      	pop	{r7, pc}

08017642 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8017642:	b580      	push	{r7, lr}
 8017644:	b084      	sub	sp, #16
 8017646:	af00      	add	r7, sp, #0
 8017648:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801764e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017650:	68fb      	ldr	r3, [r7, #12]
 8017652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017654:	2b01      	cmp	r3, #1
 8017656:	d108      	bne.n	801766a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8017658:	68fb      	ldr	r3, [r7, #12]
 801765a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801765c:	085b      	lsrs	r3, r3, #1
 801765e:	b29b      	uxth	r3, r3
 8017660:	4619      	mov	r1, r3
 8017662:	68f8      	ldr	r0, [r7, #12]
 8017664:	f7ff fdad 	bl	80171c2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8017668:	e002      	b.n	8017670 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 801766a:	68f8      	ldr	r0, [r7, #12]
 801766c:	f7ff fd77 	bl	801715e <HAL_UART_RxHalfCpltCallback>
}
 8017670:	bf00      	nop
 8017672:	3710      	adds	r7, #16
 8017674:	46bd      	mov	sp, r7
 8017676:	bd80      	pop	{r7, pc}

08017678 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8017678:	b580      	push	{r7, lr}
 801767a:	b084      	sub	sp, #16
 801767c:	af00      	add	r7, sp, #0
 801767e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8017680:	2300      	movs	r3, #0
 8017682:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017688:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 801768a:	68bb      	ldr	r3, [r7, #8]
 801768c:	681b      	ldr	r3, [r3, #0]
 801768e:	695b      	ldr	r3, [r3, #20]
 8017690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017694:	2b80      	cmp	r3, #128	; 0x80
 8017696:	bf0c      	ite	eq
 8017698:	2301      	moveq	r3, #1
 801769a:	2300      	movne	r3, #0
 801769c:	b2db      	uxtb	r3, r3
 801769e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80176a0:	68bb      	ldr	r3, [r7, #8]
 80176a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80176a6:	b2db      	uxtb	r3, r3
 80176a8:	2b21      	cmp	r3, #33	; 0x21
 80176aa:	d108      	bne.n	80176be <UART_DMAError+0x46>
 80176ac:	68fb      	ldr	r3, [r7, #12]
 80176ae:	2b00      	cmp	r3, #0
 80176b0:	d005      	beq.n	80176be <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80176b2:	68bb      	ldr	r3, [r7, #8]
 80176b4:	2200      	movs	r2, #0
 80176b6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80176b8:	68b8      	ldr	r0, [r7, #8]
 80176ba:	f000 f969 	bl	8017990 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80176be:	68bb      	ldr	r3, [r7, #8]
 80176c0:	681b      	ldr	r3, [r3, #0]
 80176c2:	695b      	ldr	r3, [r3, #20]
 80176c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80176c8:	2b40      	cmp	r3, #64	; 0x40
 80176ca:	bf0c      	ite	eq
 80176cc:	2301      	moveq	r3, #1
 80176ce:	2300      	movne	r3, #0
 80176d0:	b2db      	uxtb	r3, r3
 80176d2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80176d4:	68bb      	ldr	r3, [r7, #8]
 80176d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80176da:	b2db      	uxtb	r3, r3
 80176dc:	2b22      	cmp	r3, #34	; 0x22
 80176de:	d108      	bne.n	80176f2 <UART_DMAError+0x7a>
 80176e0:	68fb      	ldr	r3, [r7, #12]
 80176e2:	2b00      	cmp	r3, #0
 80176e4:	d005      	beq.n	80176f2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80176e6:	68bb      	ldr	r3, [r7, #8]
 80176e8:	2200      	movs	r2, #0
 80176ea:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80176ec:	68b8      	ldr	r0, [r7, #8]
 80176ee:	f000 f977 	bl	80179e0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80176f2:	68bb      	ldr	r3, [r7, #8]
 80176f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80176f6:	f043 0210 	orr.w	r2, r3, #16
 80176fa:	68bb      	ldr	r3, [r7, #8]
 80176fc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80176fe:	68b8      	ldr	r0, [r7, #8]
 8017700:	f7ff fd37 	bl	8017172 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017704:	bf00      	nop
 8017706:	3710      	adds	r7, #16
 8017708:	46bd      	mov	sp, r7
 801770a:	bd80      	pop	{r7, pc}

0801770c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 801770c:	b580      	push	{r7, lr}
 801770e:	b090      	sub	sp, #64	; 0x40
 8017710:	af00      	add	r7, sp, #0
 8017712:	60f8      	str	r0, [r7, #12]
 8017714:	60b9      	str	r1, [r7, #8]
 8017716:	603b      	str	r3, [r7, #0]
 8017718:	4613      	mov	r3, r2
 801771a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801771c:	e050      	b.n	80177c0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801771e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017724:	d04c      	beq.n	80177c0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8017726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017728:	2b00      	cmp	r3, #0
 801772a:	d007      	beq.n	801773c <UART_WaitOnFlagUntilTimeout+0x30>
 801772c:	f7ef f872 	bl	8006814 <HAL_GetTick>
 8017730:	4602      	mov	r2, r0
 8017732:	683b      	ldr	r3, [r7, #0]
 8017734:	1ad3      	subs	r3, r2, r3
 8017736:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017738:	429a      	cmp	r2, r3
 801773a:	d241      	bcs.n	80177c0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801773c:	68fb      	ldr	r3, [r7, #12]
 801773e:	681b      	ldr	r3, [r3, #0]
 8017740:	330c      	adds	r3, #12
 8017742:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017746:	e853 3f00 	ldrex	r3, [r3]
 801774a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801774c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801774e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8017752:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017754:	68fb      	ldr	r3, [r7, #12]
 8017756:	681b      	ldr	r3, [r3, #0]
 8017758:	330c      	adds	r3, #12
 801775a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801775c:	637a      	str	r2, [r7, #52]	; 0x34
 801775e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017760:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017762:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017764:	e841 2300 	strex	r3, r2, [r1]
 8017768:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801776a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801776c:	2b00      	cmp	r3, #0
 801776e:	d1e5      	bne.n	801773c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017770:	68fb      	ldr	r3, [r7, #12]
 8017772:	681b      	ldr	r3, [r3, #0]
 8017774:	3314      	adds	r3, #20
 8017776:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017778:	697b      	ldr	r3, [r7, #20]
 801777a:	e853 3f00 	ldrex	r3, [r3]
 801777e:	613b      	str	r3, [r7, #16]
   return(result);
 8017780:	693b      	ldr	r3, [r7, #16]
 8017782:	f023 0301 	bic.w	r3, r3, #1
 8017786:	63bb      	str	r3, [r7, #56]	; 0x38
 8017788:	68fb      	ldr	r3, [r7, #12]
 801778a:	681b      	ldr	r3, [r3, #0]
 801778c:	3314      	adds	r3, #20
 801778e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017790:	623a      	str	r2, [r7, #32]
 8017792:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017794:	69f9      	ldr	r1, [r7, #28]
 8017796:	6a3a      	ldr	r2, [r7, #32]
 8017798:	e841 2300 	strex	r3, r2, [r1]
 801779c:	61bb      	str	r3, [r7, #24]
   return(result);
 801779e:	69bb      	ldr	r3, [r7, #24]
 80177a0:	2b00      	cmp	r3, #0
 80177a2:	d1e5      	bne.n	8017770 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80177a4:	68fb      	ldr	r3, [r7, #12]
 80177a6:	2220      	movs	r2, #32
 80177a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80177ac:	68fb      	ldr	r3, [r7, #12]
 80177ae:	2220      	movs	r2, #32
 80177b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80177b4:	68fb      	ldr	r3, [r7, #12]
 80177b6:	2200      	movs	r2, #0
 80177b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80177bc:	2303      	movs	r3, #3
 80177be:	e00f      	b.n	80177e0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80177c0:	68fb      	ldr	r3, [r7, #12]
 80177c2:	681b      	ldr	r3, [r3, #0]
 80177c4:	681a      	ldr	r2, [r3, #0]
 80177c6:	68bb      	ldr	r3, [r7, #8]
 80177c8:	4013      	ands	r3, r2
 80177ca:	68ba      	ldr	r2, [r7, #8]
 80177cc:	429a      	cmp	r2, r3
 80177ce:	bf0c      	ite	eq
 80177d0:	2301      	moveq	r3, #1
 80177d2:	2300      	movne	r3, #0
 80177d4:	b2db      	uxtb	r3, r3
 80177d6:	461a      	mov	r2, r3
 80177d8:	79fb      	ldrb	r3, [r7, #7]
 80177da:	429a      	cmp	r2, r3
 80177dc:	d09f      	beq.n	801771e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80177de:	2300      	movs	r3, #0
}
 80177e0:	4618      	mov	r0, r3
 80177e2:	3740      	adds	r7, #64	; 0x40
 80177e4:	46bd      	mov	sp, r7
 80177e6:	bd80      	pop	{r7, pc}

080177e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80177e8:	b480      	push	{r7}
 80177ea:	b085      	sub	sp, #20
 80177ec:	af00      	add	r7, sp, #0
 80177ee:	60f8      	str	r0, [r7, #12]
 80177f0:	60b9      	str	r1, [r7, #8]
 80177f2:	4613      	mov	r3, r2
 80177f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80177f6:	68fb      	ldr	r3, [r7, #12]
 80177f8:	68ba      	ldr	r2, [r7, #8]
 80177fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80177fc:	68fb      	ldr	r3, [r7, #12]
 80177fe:	88fa      	ldrh	r2, [r7, #6]
 8017800:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8017802:	68fb      	ldr	r3, [r7, #12]
 8017804:	88fa      	ldrh	r2, [r7, #6]
 8017806:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017808:	68fb      	ldr	r3, [r7, #12]
 801780a:	2200      	movs	r2, #0
 801780c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801780e:	68fb      	ldr	r3, [r7, #12]
 8017810:	2222      	movs	r2, #34	; 0x22
 8017812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017816:	68fb      	ldr	r3, [r7, #12]
 8017818:	2200      	movs	r2, #0
 801781a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 801781e:	68fb      	ldr	r3, [r7, #12]
 8017820:	681b      	ldr	r3, [r3, #0]
 8017822:	68da      	ldr	r2, [r3, #12]
 8017824:	68fb      	ldr	r3, [r7, #12]
 8017826:	681b      	ldr	r3, [r3, #0]
 8017828:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801782c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 801782e:	68fb      	ldr	r3, [r7, #12]
 8017830:	681b      	ldr	r3, [r3, #0]
 8017832:	695a      	ldr	r2, [r3, #20]
 8017834:	68fb      	ldr	r3, [r7, #12]
 8017836:	681b      	ldr	r3, [r3, #0]
 8017838:	f042 0201 	orr.w	r2, r2, #1
 801783c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 801783e:	68fb      	ldr	r3, [r7, #12]
 8017840:	681b      	ldr	r3, [r3, #0]
 8017842:	68da      	ldr	r2, [r3, #12]
 8017844:	68fb      	ldr	r3, [r7, #12]
 8017846:	681b      	ldr	r3, [r3, #0]
 8017848:	f042 0220 	orr.w	r2, r2, #32
 801784c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801784e:	2300      	movs	r3, #0
}
 8017850:	4618      	mov	r0, r3
 8017852:	3714      	adds	r7, #20
 8017854:	46bd      	mov	sp, r7
 8017856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801785a:	4770      	bx	lr

0801785c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801785c:	b580      	push	{r7, lr}
 801785e:	b098      	sub	sp, #96	; 0x60
 8017860:	af00      	add	r7, sp, #0
 8017862:	60f8      	str	r0, [r7, #12]
 8017864:	60b9      	str	r1, [r7, #8]
 8017866:	4613      	mov	r3, r2
 8017868:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 801786a:	68ba      	ldr	r2, [r7, #8]
 801786c:	68fb      	ldr	r3, [r7, #12]
 801786e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8017870:	68fb      	ldr	r3, [r7, #12]
 8017872:	88fa      	ldrh	r2, [r7, #6]
 8017874:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017876:	68fb      	ldr	r3, [r7, #12]
 8017878:	2200      	movs	r2, #0
 801787a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801787c:	68fb      	ldr	r3, [r7, #12]
 801787e:	2222      	movs	r2, #34	; 0x22
 8017880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8017884:	68fb      	ldr	r3, [r7, #12]
 8017886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017888:	4a3e      	ldr	r2, [pc, #248]	; (8017984 <UART_Start_Receive_DMA+0x128>)
 801788a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801788c:	68fb      	ldr	r3, [r7, #12]
 801788e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017890:	4a3d      	ldr	r2, [pc, #244]	; (8017988 <UART_Start_Receive_DMA+0x12c>)
 8017892:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8017894:	68fb      	ldr	r3, [r7, #12]
 8017896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017898:	4a3c      	ldr	r2, [pc, #240]	; (801798c <UART_Start_Receive_DMA+0x130>)
 801789a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 801789c:	68fb      	ldr	r3, [r7, #12]
 801789e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80178a0:	2200      	movs	r2, #0
 80178a2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80178a4:	f107 0308 	add.w	r3, r7, #8
 80178a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80178aa:	68fb      	ldr	r3, [r7, #12]
 80178ac:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80178ae:	68fb      	ldr	r3, [r7, #12]
 80178b0:	681b      	ldr	r3, [r3, #0]
 80178b2:	3304      	adds	r3, #4
 80178b4:	4619      	mov	r1, r3
 80178b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80178b8:	681a      	ldr	r2, [r3, #0]
 80178ba:	88fb      	ldrh	r3, [r7, #6]
 80178bc:	f7f0 fa13 	bl	8007ce6 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80178c0:	2300      	movs	r3, #0
 80178c2:	613b      	str	r3, [r7, #16]
 80178c4:	68fb      	ldr	r3, [r7, #12]
 80178c6:	681b      	ldr	r3, [r3, #0]
 80178c8:	681b      	ldr	r3, [r3, #0]
 80178ca:	613b      	str	r3, [r7, #16]
 80178cc:	68fb      	ldr	r3, [r7, #12]
 80178ce:	681b      	ldr	r3, [r3, #0]
 80178d0:	685b      	ldr	r3, [r3, #4]
 80178d2:	613b      	str	r3, [r7, #16]
 80178d4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80178d6:	68fb      	ldr	r3, [r7, #12]
 80178d8:	2200      	movs	r2, #0
 80178da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80178de:	68fb      	ldr	r3, [r7, #12]
 80178e0:	681b      	ldr	r3, [r3, #0]
 80178e2:	330c      	adds	r3, #12
 80178e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80178e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80178e8:	e853 3f00 	ldrex	r3, [r3]
 80178ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80178ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80178f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80178f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80178f6:	68fb      	ldr	r3, [r7, #12]
 80178f8:	681b      	ldr	r3, [r3, #0]
 80178fa:	330c      	adds	r3, #12
 80178fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80178fe:	64fa      	str	r2, [r7, #76]	; 0x4c
 8017900:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017902:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8017904:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017906:	e841 2300 	strex	r3, r2, [r1]
 801790a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801790c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801790e:	2b00      	cmp	r3, #0
 8017910:	d1e5      	bne.n	80178de <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017912:	68fb      	ldr	r3, [r7, #12]
 8017914:	681b      	ldr	r3, [r3, #0]
 8017916:	3314      	adds	r3, #20
 8017918:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801791a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801791c:	e853 3f00 	ldrex	r3, [r3]
 8017920:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8017922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017924:	f043 0301 	orr.w	r3, r3, #1
 8017928:	657b      	str	r3, [r7, #84]	; 0x54
 801792a:	68fb      	ldr	r3, [r7, #12]
 801792c:	681b      	ldr	r3, [r3, #0]
 801792e:	3314      	adds	r3, #20
 8017930:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017932:	63ba      	str	r2, [r7, #56]	; 0x38
 8017934:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017936:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017938:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801793a:	e841 2300 	strex	r3, r2, [r1]
 801793e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8017940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017942:	2b00      	cmp	r3, #0
 8017944:	d1e5      	bne.n	8017912 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017946:	68fb      	ldr	r3, [r7, #12]
 8017948:	681b      	ldr	r3, [r3, #0]
 801794a:	3314      	adds	r3, #20
 801794c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801794e:	69bb      	ldr	r3, [r7, #24]
 8017950:	e853 3f00 	ldrex	r3, [r3]
 8017954:	617b      	str	r3, [r7, #20]
   return(result);
 8017956:	697b      	ldr	r3, [r7, #20]
 8017958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801795c:	653b      	str	r3, [r7, #80]	; 0x50
 801795e:	68fb      	ldr	r3, [r7, #12]
 8017960:	681b      	ldr	r3, [r3, #0]
 8017962:	3314      	adds	r3, #20
 8017964:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017966:	627a      	str	r2, [r7, #36]	; 0x24
 8017968:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801796a:	6a39      	ldr	r1, [r7, #32]
 801796c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801796e:	e841 2300 	strex	r3, r2, [r1]
 8017972:	61fb      	str	r3, [r7, #28]
   return(result);
 8017974:	69fb      	ldr	r3, [r7, #28]
 8017976:	2b00      	cmp	r3, #0
 8017978:	d1e5      	bne.n	8017946 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 801797a:	2300      	movs	r3, #0
}
 801797c:	4618      	mov	r0, r3
 801797e:	3760      	adds	r7, #96	; 0x60
 8017980:	46bd      	mov	sp, r7
 8017982:	bd80      	pop	{r7, pc}
 8017984:	0801751d 	.word	0x0801751d
 8017988:	08017643 	.word	0x08017643
 801798c:	08017679 	.word	0x08017679

08017990 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8017990:	b480      	push	{r7}
 8017992:	b089      	sub	sp, #36	; 0x24
 8017994:	af00      	add	r7, sp, #0
 8017996:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	681b      	ldr	r3, [r3, #0]
 801799c:	330c      	adds	r3, #12
 801799e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80179a0:	68fb      	ldr	r3, [r7, #12]
 80179a2:	e853 3f00 	ldrex	r3, [r3]
 80179a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80179a8:	68bb      	ldr	r3, [r7, #8]
 80179aa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80179ae:	61fb      	str	r3, [r7, #28]
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	681b      	ldr	r3, [r3, #0]
 80179b4:	330c      	adds	r3, #12
 80179b6:	69fa      	ldr	r2, [r7, #28]
 80179b8:	61ba      	str	r2, [r7, #24]
 80179ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80179bc:	6979      	ldr	r1, [r7, #20]
 80179be:	69ba      	ldr	r2, [r7, #24]
 80179c0:	e841 2300 	strex	r3, r2, [r1]
 80179c4:	613b      	str	r3, [r7, #16]
   return(result);
 80179c6:	693b      	ldr	r3, [r7, #16]
 80179c8:	2b00      	cmp	r3, #0
 80179ca:	d1e5      	bne.n	8017998 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	2220      	movs	r2, #32
 80179d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80179d4:	bf00      	nop
 80179d6:	3724      	adds	r7, #36	; 0x24
 80179d8:	46bd      	mov	sp, r7
 80179da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179de:	4770      	bx	lr

080179e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80179e0:	b480      	push	{r7}
 80179e2:	b095      	sub	sp, #84	; 0x54
 80179e4:	af00      	add	r7, sp, #0
 80179e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80179e8:	687b      	ldr	r3, [r7, #4]
 80179ea:	681b      	ldr	r3, [r3, #0]
 80179ec:	330c      	adds	r3, #12
 80179ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80179f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80179f2:	e853 3f00 	ldrex	r3, [r3]
 80179f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80179f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80179fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	681b      	ldr	r3, [r3, #0]
 8017a04:	330c      	adds	r3, #12
 8017a06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017a08:	643a      	str	r2, [r7, #64]	; 0x40
 8017a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017a0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017a0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017a10:	e841 2300 	strex	r3, r2, [r1]
 8017a14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8017a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a18:	2b00      	cmp	r3, #0
 8017a1a:	d1e5      	bne.n	80179e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017a1c:	687b      	ldr	r3, [r7, #4]
 8017a1e:	681b      	ldr	r3, [r3, #0]
 8017a20:	3314      	adds	r3, #20
 8017a22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017a24:	6a3b      	ldr	r3, [r7, #32]
 8017a26:	e853 3f00 	ldrex	r3, [r3]
 8017a2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8017a2c:	69fb      	ldr	r3, [r7, #28]
 8017a2e:	f023 0301 	bic.w	r3, r3, #1
 8017a32:	64bb      	str	r3, [r7, #72]	; 0x48
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	681b      	ldr	r3, [r3, #0]
 8017a38:	3314      	adds	r3, #20
 8017a3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017a3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8017a3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017a40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017a42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017a44:	e841 2300 	strex	r3, r2, [r1]
 8017a48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8017a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	d1e5      	bne.n	8017a1c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017a50:	687b      	ldr	r3, [r7, #4]
 8017a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a54:	2b01      	cmp	r3, #1
 8017a56:	d119      	bne.n	8017a8c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017a58:	687b      	ldr	r3, [r7, #4]
 8017a5a:	681b      	ldr	r3, [r3, #0]
 8017a5c:	330c      	adds	r3, #12
 8017a5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017a60:	68fb      	ldr	r3, [r7, #12]
 8017a62:	e853 3f00 	ldrex	r3, [r3]
 8017a66:	60bb      	str	r3, [r7, #8]
   return(result);
 8017a68:	68bb      	ldr	r3, [r7, #8]
 8017a6a:	f023 0310 	bic.w	r3, r3, #16
 8017a6e:	647b      	str	r3, [r7, #68]	; 0x44
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	681b      	ldr	r3, [r3, #0]
 8017a74:	330c      	adds	r3, #12
 8017a76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017a78:	61ba      	str	r2, [r7, #24]
 8017a7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017a7c:	6979      	ldr	r1, [r7, #20]
 8017a7e:	69ba      	ldr	r2, [r7, #24]
 8017a80:	e841 2300 	strex	r3, r2, [r1]
 8017a84:	613b      	str	r3, [r7, #16]
   return(result);
 8017a86:	693b      	ldr	r3, [r7, #16]
 8017a88:	2b00      	cmp	r3, #0
 8017a8a:	d1e5      	bne.n	8017a58 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8017a8c:	687b      	ldr	r3, [r7, #4]
 8017a8e:	2220      	movs	r2, #32
 8017a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	2200      	movs	r2, #0
 8017a98:	631a      	str	r2, [r3, #48]	; 0x30
}
 8017a9a:	bf00      	nop
 8017a9c:	3754      	adds	r7, #84	; 0x54
 8017a9e:	46bd      	mov	sp, r7
 8017aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017aa4:	4770      	bx	lr

08017aa6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8017aa6:	b580      	push	{r7, lr}
 8017aa8:	b084      	sub	sp, #16
 8017aaa:	af00      	add	r7, sp, #0
 8017aac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017ab2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8017ab4:	68fb      	ldr	r3, [r7, #12]
 8017ab6:	2200      	movs	r2, #0
 8017ab8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8017aba:	68fb      	ldr	r3, [r7, #12]
 8017abc:	2200      	movs	r2, #0
 8017abe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8017ac0:	68f8      	ldr	r0, [r7, #12]
 8017ac2:	f7ff fb56 	bl	8017172 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017ac6:	bf00      	nop
 8017ac8:	3710      	adds	r7, #16
 8017aca:	46bd      	mov	sp, r7
 8017acc:	bd80      	pop	{r7, pc}

08017ace <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8017ace:	b580      	push	{r7, lr}
 8017ad0:	b084      	sub	sp, #16
 8017ad2:	af00      	add	r7, sp, #0
 8017ad4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017ad6:	687b      	ldr	r3, [r7, #4]
 8017ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017ada:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8017adc:	68fb      	ldr	r3, [r7, #12]
 8017ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017ae0:	2200      	movs	r2, #0
 8017ae2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8017ae4:	68fb      	ldr	r3, [r7, #12]
 8017ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017ae8:	2b00      	cmp	r3, #0
 8017aea:	d004      	beq.n	8017af6 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8017aec:	68fb      	ldr	r3, [r7, #12]
 8017aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017af2:	2b00      	cmp	r3, #0
 8017af4:	d117      	bne.n	8017b26 <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8017af6:	68fb      	ldr	r3, [r7, #12]
 8017af8:	2200      	movs	r2, #0
 8017afa:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8017afc:	68fb      	ldr	r3, [r7, #12]
 8017afe:	2200      	movs	r2, #0
 8017b00:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017b02:	68fb      	ldr	r3, [r7, #12]
 8017b04:	2200      	movs	r2, #0
 8017b06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8017b08:	68fb      	ldr	r3, [r7, #12]
 8017b0a:	2220      	movs	r2, #32
 8017b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8017b10:	68fb      	ldr	r3, [r7, #12]
 8017b12:	2220      	movs	r2, #32
 8017b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017b18:	68fb      	ldr	r3, [r7, #12]
 8017b1a:	2200      	movs	r2, #0
 8017b1c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8017b1e:	68f8      	ldr	r0, [r7, #12]
 8017b20:	f7ff fb31 	bl	8017186 <HAL_UART_AbortCpltCallback>
 8017b24:	e000      	b.n	8017b28 <UART_DMATxAbortCallback+0x5a>
      return;
 8017b26:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017b28:	3710      	adds	r7, #16
 8017b2a:	46bd      	mov	sp, r7
 8017b2c:	bd80      	pop	{r7, pc}

08017b2e <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8017b2e:	b580      	push	{r7, lr}
 8017b30:	b084      	sub	sp, #16
 8017b32:	af00      	add	r7, sp, #0
 8017b34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017b3a:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8017b3c:	68fb      	ldr	r3, [r7, #12]
 8017b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017b40:	2200      	movs	r2, #0
 8017b42:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8017b44:	68fb      	ldr	r3, [r7, #12]
 8017b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	d004      	beq.n	8017b56 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8017b4c:	68fb      	ldr	r3, [r7, #12]
 8017b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017b52:	2b00      	cmp	r3, #0
 8017b54:	d117      	bne.n	8017b86 <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8017b56:	68fb      	ldr	r3, [r7, #12]
 8017b58:	2200      	movs	r2, #0
 8017b5a:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8017b5c:	68fb      	ldr	r3, [r7, #12]
 8017b5e:	2200      	movs	r2, #0
 8017b60:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017b62:	68fb      	ldr	r3, [r7, #12]
 8017b64:	2200      	movs	r2, #0
 8017b66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8017b68:	68fb      	ldr	r3, [r7, #12]
 8017b6a:	2220      	movs	r2, #32
 8017b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8017b70:	68fb      	ldr	r3, [r7, #12]
 8017b72:	2220      	movs	r2, #32
 8017b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017b78:	68fb      	ldr	r3, [r7, #12]
 8017b7a:	2200      	movs	r2, #0
 8017b7c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8017b7e:	68f8      	ldr	r0, [r7, #12]
 8017b80:	f7ff fb01 	bl	8017186 <HAL_UART_AbortCpltCallback>
 8017b84:	e000      	b.n	8017b88 <UART_DMARxAbortCallback+0x5a>
      return;
 8017b86:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017b88:	3710      	adds	r7, #16
 8017b8a:	46bd      	mov	sp, r7
 8017b8c:	bd80      	pop	{r7, pc}

08017b8e <UART_DMATxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8017b8e:	b580      	push	{r7, lr}
 8017b90:	b084      	sub	sp, #16
 8017b92:	af00      	add	r7, sp, #0
 8017b94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017b96:	687b      	ldr	r3, [r7, #4]
 8017b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017b9a:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0x00U;
 8017b9c:	68fb      	ldr	r3, [r7, #12]
 8017b9e:	2200      	movs	r2, #0
 8017ba0:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8017ba2:	68fb      	ldr	r3, [r7, #12]
 8017ba4:	2220      	movs	r2, #32
 8017ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 8017baa:	68f8      	ldr	r0, [r7, #12]
 8017bac:	f7ff faf5 	bl	801719a <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017bb0:	bf00      	nop
 8017bb2:	3710      	adds	r7, #16
 8017bb4:	46bd      	mov	sp, r7
 8017bb6:	bd80      	pop	{r7, pc}

08017bb8 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8017bb8:	b580      	push	{r7, lr}
 8017bba:	b084      	sub	sp, #16
 8017bbc:	af00      	add	r7, sp, #0
 8017bbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017bc0:	687b      	ldr	r3, [r7, #4]
 8017bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017bc4:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8017bc6:	68fb      	ldr	r3, [r7, #12]
 8017bc8:	2200      	movs	r2, #0
 8017bca:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8017bcc:	68fb      	ldr	r3, [r7, #12]
 8017bce:	2220      	movs	r2, #32
 8017bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017bd4:	68fb      	ldr	r3, [r7, #12]
 8017bd6:	2200      	movs	r2, #0
 8017bd8:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8017bda:	68f8      	ldr	r0, [r7, #12]
 8017bdc:	f7ff fae7 	bl	80171ae <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017be0:	bf00      	nop
 8017be2:	3710      	adds	r7, #16
 8017be4:	46bd      	mov	sp, r7
 8017be6:	bd80      	pop	{r7, pc}

08017be8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8017be8:	b480      	push	{r7}
 8017bea:	b085      	sub	sp, #20
 8017bec:	af00      	add	r7, sp, #0
 8017bee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017bf6:	b2db      	uxtb	r3, r3
 8017bf8:	2b21      	cmp	r3, #33	; 0x21
 8017bfa:	d13e      	bne.n	8017c7a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017bfc:	687b      	ldr	r3, [r7, #4]
 8017bfe:	689b      	ldr	r3, [r3, #8]
 8017c00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017c04:	d114      	bne.n	8017c30 <UART_Transmit_IT+0x48>
 8017c06:	687b      	ldr	r3, [r7, #4]
 8017c08:	691b      	ldr	r3, [r3, #16]
 8017c0a:	2b00      	cmp	r3, #0
 8017c0c:	d110      	bne.n	8017c30 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8017c0e:	687b      	ldr	r3, [r7, #4]
 8017c10:	6a1b      	ldr	r3, [r3, #32]
 8017c12:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8017c14:	68fb      	ldr	r3, [r7, #12]
 8017c16:	881b      	ldrh	r3, [r3, #0]
 8017c18:	461a      	mov	r2, r3
 8017c1a:	687b      	ldr	r3, [r7, #4]
 8017c1c:	681b      	ldr	r3, [r3, #0]
 8017c1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8017c22:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	6a1b      	ldr	r3, [r3, #32]
 8017c28:	1c9a      	adds	r2, r3, #2
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	621a      	str	r2, [r3, #32]
 8017c2e:	e008      	b.n	8017c42 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8017c30:	687b      	ldr	r3, [r7, #4]
 8017c32:	6a1b      	ldr	r3, [r3, #32]
 8017c34:	1c59      	adds	r1, r3, #1
 8017c36:	687a      	ldr	r2, [r7, #4]
 8017c38:	6211      	str	r1, [r2, #32]
 8017c3a:	781a      	ldrb	r2, [r3, #0]
 8017c3c:	687b      	ldr	r3, [r7, #4]
 8017c3e:	681b      	ldr	r3, [r3, #0]
 8017c40:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8017c42:	687b      	ldr	r3, [r7, #4]
 8017c44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8017c46:	b29b      	uxth	r3, r3
 8017c48:	3b01      	subs	r3, #1
 8017c4a:	b29b      	uxth	r3, r3
 8017c4c:	687a      	ldr	r2, [r7, #4]
 8017c4e:	4619      	mov	r1, r3
 8017c50:	84d1      	strh	r1, [r2, #38]	; 0x26
 8017c52:	2b00      	cmp	r3, #0
 8017c54:	d10f      	bne.n	8017c76 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8017c56:	687b      	ldr	r3, [r7, #4]
 8017c58:	681b      	ldr	r3, [r3, #0]
 8017c5a:	68da      	ldr	r2, [r3, #12]
 8017c5c:	687b      	ldr	r3, [r7, #4]
 8017c5e:	681b      	ldr	r3, [r3, #0]
 8017c60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8017c64:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	681b      	ldr	r3, [r3, #0]
 8017c6a:	68da      	ldr	r2, [r3, #12]
 8017c6c:	687b      	ldr	r3, [r7, #4]
 8017c6e:	681b      	ldr	r3, [r3, #0]
 8017c70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8017c74:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8017c76:	2300      	movs	r3, #0
 8017c78:	e000      	b.n	8017c7c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8017c7a:	2302      	movs	r3, #2
  }
}
 8017c7c:	4618      	mov	r0, r3
 8017c7e:	3714      	adds	r7, #20
 8017c80:	46bd      	mov	sp, r7
 8017c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c86:	4770      	bx	lr

08017c88 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8017c88:	b580      	push	{r7, lr}
 8017c8a:	b082      	sub	sp, #8
 8017c8c:	af00      	add	r7, sp, #0
 8017c8e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8017c90:	687b      	ldr	r3, [r7, #4]
 8017c92:	681b      	ldr	r3, [r3, #0]
 8017c94:	68da      	ldr	r2, [r3, #12]
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	681b      	ldr	r3, [r3, #0]
 8017c9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8017c9e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	2220      	movs	r2, #32
 8017ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8017ca8:	6878      	ldr	r0, [r7, #4]
 8017caa:	f7ff fa44 	bl	8017136 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8017cae:	2300      	movs	r3, #0
}
 8017cb0:	4618      	mov	r0, r3
 8017cb2:	3708      	adds	r7, #8
 8017cb4:	46bd      	mov	sp, r7
 8017cb6:	bd80      	pop	{r7, pc}

08017cb8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8017cb8:	b580      	push	{r7, lr}
 8017cba:	b08c      	sub	sp, #48	; 0x30
 8017cbc:	af00      	add	r7, sp, #0
 8017cbe:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8017cc6:	b2db      	uxtb	r3, r3
 8017cc8:	2b22      	cmp	r3, #34	; 0x22
 8017cca:	f040 80ab 	bne.w	8017e24 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017cce:	687b      	ldr	r3, [r7, #4]
 8017cd0:	689b      	ldr	r3, [r3, #8]
 8017cd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017cd6:	d117      	bne.n	8017d08 <UART_Receive_IT+0x50>
 8017cd8:	687b      	ldr	r3, [r7, #4]
 8017cda:	691b      	ldr	r3, [r3, #16]
 8017cdc:	2b00      	cmp	r3, #0
 8017cde:	d113      	bne.n	8017d08 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8017ce0:	2300      	movs	r3, #0
 8017ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017ce8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8017cea:	687b      	ldr	r3, [r7, #4]
 8017cec:	681b      	ldr	r3, [r3, #0]
 8017cee:	685b      	ldr	r3, [r3, #4]
 8017cf0:	b29b      	uxth	r3, r3
 8017cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017cf6:	b29a      	uxth	r2, r3
 8017cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cfa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8017cfc:	687b      	ldr	r3, [r7, #4]
 8017cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017d00:	1c9a      	adds	r2, r3, #2
 8017d02:	687b      	ldr	r3, [r7, #4]
 8017d04:	629a      	str	r2, [r3, #40]	; 0x28
 8017d06:	e026      	b.n	8017d56 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8017d08:	687b      	ldr	r3, [r7, #4]
 8017d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8017d0e:	2300      	movs	r3, #0
 8017d10:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8017d12:	687b      	ldr	r3, [r7, #4]
 8017d14:	689b      	ldr	r3, [r3, #8]
 8017d16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017d1a:	d007      	beq.n	8017d2c <UART_Receive_IT+0x74>
 8017d1c:	687b      	ldr	r3, [r7, #4]
 8017d1e:	689b      	ldr	r3, [r3, #8]
 8017d20:	2b00      	cmp	r3, #0
 8017d22:	d10a      	bne.n	8017d3a <UART_Receive_IT+0x82>
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	691b      	ldr	r3, [r3, #16]
 8017d28:	2b00      	cmp	r3, #0
 8017d2a:	d106      	bne.n	8017d3a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8017d2c:	687b      	ldr	r3, [r7, #4]
 8017d2e:	681b      	ldr	r3, [r3, #0]
 8017d30:	685b      	ldr	r3, [r3, #4]
 8017d32:	b2da      	uxtb	r2, r3
 8017d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d36:	701a      	strb	r2, [r3, #0]
 8017d38:	e008      	b.n	8017d4c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	681b      	ldr	r3, [r3, #0]
 8017d3e:	685b      	ldr	r3, [r3, #4]
 8017d40:	b2db      	uxtb	r3, r3
 8017d42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017d46:	b2da      	uxtb	r2, r3
 8017d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d4a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8017d4c:	687b      	ldr	r3, [r7, #4]
 8017d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017d50:	1c5a      	adds	r2, r3, #1
 8017d52:	687b      	ldr	r3, [r7, #4]
 8017d54:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8017d56:	687b      	ldr	r3, [r7, #4]
 8017d58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8017d5a:	b29b      	uxth	r3, r3
 8017d5c:	3b01      	subs	r3, #1
 8017d5e:	b29b      	uxth	r3, r3
 8017d60:	687a      	ldr	r2, [r7, #4]
 8017d62:	4619      	mov	r1, r3
 8017d64:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8017d66:	2b00      	cmp	r3, #0
 8017d68:	d15a      	bne.n	8017e20 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	681b      	ldr	r3, [r3, #0]
 8017d6e:	68da      	ldr	r2, [r3, #12]
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	681b      	ldr	r3, [r3, #0]
 8017d74:	f022 0220 	bic.w	r2, r2, #32
 8017d78:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8017d7a:	687b      	ldr	r3, [r7, #4]
 8017d7c:	681b      	ldr	r3, [r3, #0]
 8017d7e:	68da      	ldr	r2, [r3, #12]
 8017d80:	687b      	ldr	r3, [r7, #4]
 8017d82:	681b      	ldr	r3, [r3, #0]
 8017d84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8017d88:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8017d8a:	687b      	ldr	r3, [r7, #4]
 8017d8c:	681b      	ldr	r3, [r3, #0]
 8017d8e:	695a      	ldr	r2, [r3, #20]
 8017d90:	687b      	ldr	r3, [r7, #4]
 8017d92:	681b      	ldr	r3, [r3, #0]
 8017d94:	f022 0201 	bic.w	r2, r2, #1
 8017d98:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8017d9a:	687b      	ldr	r3, [r7, #4]
 8017d9c:	2220      	movs	r2, #32
 8017d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017da2:	687b      	ldr	r3, [r7, #4]
 8017da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017da6:	2b01      	cmp	r3, #1
 8017da8:	d135      	bne.n	8017e16 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017daa:	687b      	ldr	r3, [r7, #4]
 8017dac:	2200      	movs	r2, #0
 8017dae:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017db0:	687b      	ldr	r3, [r7, #4]
 8017db2:	681b      	ldr	r3, [r3, #0]
 8017db4:	330c      	adds	r3, #12
 8017db6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017db8:	697b      	ldr	r3, [r7, #20]
 8017dba:	e853 3f00 	ldrex	r3, [r3]
 8017dbe:	613b      	str	r3, [r7, #16]
   return(result);
 8017dc0:	693b      	ldr	r3, [r7, #16]
 8017dc2:	f023 0310 	bic.w	r3, r3, #16
 8017dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8017dc8:	687b      	ldr	r3, [r7, #4]
 8017dca:	681b      	ldr	r3, [r3, #0]
 8017dcc:	330c      	adds	r3, #12
 8017dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017dd0:	623a      	str	r2, [r7, #32]
 8017dd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017dd4:	69f9      	ldr	r1, [r7, #28]
 8017dd6:	6a3a      	ldr	r2, [r7, #32]
 8017dd8:	e841 2300 	strex	r3, r2, [r1]
 8017ddc:	61bb      	str	r3, [r7, #24]
   return(result);
 8017dde:	69bb      	ldr	r3, [r7, #24]
 8017de0:	2b00      	cmp	r3, #0
 8017de2:	d1e5      	bne.n	8017db0 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8017de4:	687b      	ldr	r3, [r7, #4]
 8017de6:	681b      	ldr	r3, [r3, #0]
 8017de8:	681b      	ldr	r3, [r3, #0]
 8017dea:	f003 0310 	and.w	r3, r3, #16
 8017dee:	2b10      	cmp	r3, #16
 8017df0:	d10a      	bne.n	8017e08 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8017df2:	2300      	movs	r3, #0
 8017df4:	60fb      	str	r3, [r7, #12]
 8017df6:	687b      	ldr	r3, [r7, #4]
 8017df8:	681b      	ldr	r3, [r3, #0]
 8017dfa:	681b      	ldr	r3, [r3, #0]
 8017dfc:	60fb      	str	r3, [r7, #12]
 8017dfe:	687b      	ldr	r3, [r7, #4]
 8017e00:	681b      	ldr	r3, [r3, #0]
 8017e02:	685b      	ldr	r3, [r3, #4]
 8017e04:	60fb      	str	r3, [r7, #12]
 8017e06:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8017e0c:	4619      	mov	r1, r3
 8017e0e:	6878      	ldr	r0, [r7, #4]
 8017e10:	f7ff f9d7 	bl	80171c2 <HAL_UARTEx_RxEventCallback>
 8017e14:	e002      	b.n	8017e1c <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8017e16:	6878      	ldr	r0, [r7, #4]
 8017e18:	f7e9 fd76 	bl	8001908 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8017e1c:	2300      	movs	r3, #0
 8017e1e:	e002      	b.n	8017e26 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8017e20:	2300      	movs	r3, #0
 8017e22:	e000      	b.n	8017e26 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8017e24:	2302      	movs	r3, #2
  }
}
 8017e26:	4618      	mov	r0, r3
 8017e28:	3730      	adds	r7, #48	; 0x30
 8017e2a:	46bd      	mov	sp, r7
 8017e2c:	bd80      	pop	{r7, pc}

08017e2e <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8017e2e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8017e32:	b0c0      	sub	sp, #256	; 0x100
 8017e34:	af00      	add	r7, sp, #0
 8017e36:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8017e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017e3e:	681b      	ldr	r3, [r3, #0]
 8017e40:	691b      	ldr	r3, [r3, #16]
 8017e42:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8017e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017e4a:	68d9      	ldr	r1, [r3, #12]
 8017e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017e50:	681a      	ldr	r2, [r3, #0]
 8017e52:	ea40 0301 	orr.w	r3, r0, r1
 8017e56:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8017e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017e5c:	689a      	ldr	r2, [r3, #8]
 8017e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017e62:	691b      	ldr	r3, [r3, #16]
 8017e64:	431a      	orrs	r2, r3
 8017e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017e6a:	695b      	ldr	r3, [r3, #20]
 8017e6c:	431a      	orrs	r2, r3
 8017e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017e72:	69db      	ldr	r3, [r3, #28]
 8017e74:	4313      	orrs	r3, r2
 8017e76:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8017e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017e7e:	681b      	ldr	r3, [r3, #0]
 8017e80:	68db      	ldr	r3, [r3, #12]
 8017e82:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8017e86:	f021 010c 	bic.w	r1, r1, #12
 8017e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017e8e:	681a      	ldr	r2, [r3, #0]
 8017e90:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8017e94:	430b      	orrs	r3, r1
 8017e96:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8017e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017e9c:	681b      	ldr	r3, [r3, #0]
 8017e9e:	695b      	ldr	r3, [r3, #20]
 8017ea0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8017ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017ea8:	6999      	ldr	r1, [r3, #24]
 8017eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017eae:	681a      	ldr	r2, [r3, #0]
 8017eb0:	ea40 0301 	orr.w	r3, r0, r1
 8017eb4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8017eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017eba:	681a      	ldr	r2, [r3, #0]
 8017ebc:	4b8e      	ldr	r3, [pc, #568]	; (80180f8 <UART_SetConfig+0x2ca>)
 8017ebe:	429a      	cmp	r2, r3
 8017ec0:	d005      	beq.n	8017ece <UART_SetConfig+0xa0>
 8017ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017ec6:	681a      	ldr	r2, [r3, #0]
 8017ec8:	4b8c      	ldr	r3, [pc, #560]	; (80180fc <UART_SetConfig+0x2ce>)
 8017eca:	429a      	cmp	r2, r3
 8017ecc:	d104      	bne.n	8017ed8 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8017ece:	f7fa fa11 	bl	80122f4 <HAL_RCC_GetPCLK2Freq>
 8017ed2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8017ed6:	e003      	b.n	8017ee0 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8017ed8:	f7fa f9f8 	bl	80122cc <HAL_RCC_GetPCLK1Freq>
 8017edc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8017ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017ee4:	69db      	ldr	r3, [r3, #28]
 8017ee6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8017eea:	f040 810b 	bne.w	8018104 <UART_SetConfig+0x2d6>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8017eee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8017ef2:	2200      	movs	r2, #0
 8017ef4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8017ef8:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8017efc:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8017f00:	4622      	mov	r2, r4
 8017f02:	462b      	mov	r3, r5
 8017f04:	1891      	adds	r1, r2, r2
 8017f06:	65b9      	str	r1, [r7, #88]	; 0x58
 8017f08:	415b      	adcs	r3, r3
 8017f0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8017f0c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8017f10:	4621      	mov	r1, r4
 8017f12:	eb12 0801 	adds.w	r8, r2, r1
 8017f16:	4629      	mov	r1, r5
 8017f18:	eb43 0901 	adc.w	r9, r3, r1
 8017f1c:	f04f 0200 	mov.w	r2, #0
 8017f20:	f04f 0300 	mov.w	r3, #0
 8017f24:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8017f28:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8017f2c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8017f30:	4690      	mov	r8, r2
 8017f32:	4699      	mov	r9, r3
 8017f34:	4623      	mov	r3, r4
 8017f36:	eb18 0303 	adds.w	r3, r8, r3
 8017f3a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8017f3e:	462b      	mov	r3, r5
 8017f40:	eb49 0303 	adc.w	r3, r9, r3
 8017f44:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8017f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017f4c:	685b      	ldr	r3, [r3, #4]
 8017f4e:	2200      	movs	r2, #0
 8017f50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8017f54:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8017f58:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8017f5c:	460b      	mov	r3, r1
 8017f5e:	18db      	adds	r3, r3, r3
 8017f60:	653b      	str	r3, [r7, #80]	; 0x50
 8017f62:	4613      	mov	r3, r2
 8017f64:	eb42 0303 	adc.w	r3, r2, r3
 8017f68:	657b      	str	r3, [r7, #84]	; 0x54
 8017f6a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8017f6e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8017f72:	f001 fabf 	bl	80194f4 <__aeabi_uldivmod>
 8017f76:	4602      	mov	r2, r0
 8017f78:	460b      	mov	r3, r1
 8017f7a:	4b61      	ldr	r3, [pc, #388]	; (8018100 <UART_SetConfig+0x2d2>)
 8017f7c:	fba3 2302 	umull	r2, r3, r3, r2
 8017f80:	095b      	lsrs	r3, r3, #5
 8017f82:	011c      	lsls	r4, r3, #4
 8017f84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8017f88:	2200      	movs	r2, #0
 8017f8a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8017f8e:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8017f92:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8017f96:	4642      	mov	r2, r8
 8017f98:	464b      	mov	r3, r9
 8017f9a:	1891      	adds	r1, r2, r2
 8017f9c:	64b9      	str	r1, [r7, #72]	; 0x48
 8017f9e:	415b      	adcs	r3, r3
 8017fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017fa2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8017fa6:	4641      	mov	r1, r8
 8017fa8:	eb12 0a01 	adds.w	sl, r2, r1
 8017fac:	4649      	mov	r1, r9
 8017fae:	eb43 0b01 	adc.w	fp, r3, r1
 8017fb2:	f04f 0200 	mov.w	r2, #0
 8017fb6:	f04f 0300 	mov.w	r3, #0
 8017fba:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8017fbe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8017fc2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8017fc6:	4692      	mov	sl, r2
 8017fc8:	469b      	mov	fp, r3
 8017fca:	4643      	mov	r3, r8
 8017fcc:	eb1a 0303 	adds.w	r3, sl, r3
 8017fd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8017fd4:	464b      	mov	r3, r9
 8017fd6:	eb4b 0303 	adc.w	r3, fp, r3
 8017fda:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8017fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017fe2:	685b      	ldr	r3, [r3, #4]
 8017fe4:	2200      	movs	r2, #0
 8017fe6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8017fea:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8017fee:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8017ff2:	460b      	mov	r3, r1
 8017ff4:	18db      	adds	r3, r3, r3
 8017ff6:	643b      	str	r3, [r7, #64]	; 0x40
 8017ff8:	4613      	mov	r3, r2
 8017ffa:	eb42 0303 	adc.w	r3, r2, r3
 8017ffe:	647b      	str	r3, [r7, #68]	; 0x44
 8018000:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8018004:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8018008:	f001 fa74 	bl	80194f4 <__aeabi_uldivmod>
 801800c:	4602      	mov	r2, r0
 801800e:	460b      	mov	r3, r1
 8018010:	4611      	mov	r1, r2
 8018012:	4b3b      	ldr	r3, [pc, #236]	; (8018100 <UART_SetConfig+0x2d2>)
 8018014:	fba3 2301 	umull	r2, r3, r3, r1
 8018018:	095b      	lsrs	r3, r3, #5
 801801a:	2264      	movs	r2, #100	; 0x64
 801801c:	fb02 f303 	mul.w	r3, r2, r3
 8018020:	1acb      	subs	r3, r1, r3
 8018022:	00db      	lsls	r3, r3, #3
 8018024:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8018028:	4b35      	ldr	r3, [pc, #212]	; (8018100 <UART_SetConfig+0x2d2>)
 801802a:	fba3 2302 	umull	r2, r3, r3, r2
 801802e:	095b      	lsrs	r3, r3, #5
 8018030:	005b      	lsls	r3, r3, #1
 8018032:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8018036:	441c      	add	r4, r3
 8018038:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801803c:	2200      	movs	r2, #0
 801803e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8018042:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8018046:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 801804a:	4642      	mov	r2, r8
 801804c:	464b      	mov	r3, r9
 801804e:	1891      	adds	r1, r2, r2
 8018050:	63b9      	str	r1, [r7, #56]	; 0x38
 8018052:	415b      	adcs	r3, r3
 8018054:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018056:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801805a:	4641      	mov	r1, r8
 801805c:	1851      	adds	r1, r2, r1
 801805e:	6339      	str	r1, [r7, #48]	; 0x30
 8018060:	4649      	mov	r1, r9
 8018062:	414b      	adcs	r3, r1
 8018064:	637b      	str	r3, [r7, #52]	; 0x34
 8018066:	f04f 0200 	mov.w	r2, #0
 801806a:	f04f 0300 	mov.w	r3, #0
 801806e:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8018072:	4659      	mov	r1, fp
 8018074:	00cb      	lsls	r3, r1, #3
 8018076:	4651      	mov	r1, sl
 8018078:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801807c:	4651      	mov	r1, sl
 801807e:	00ca      	lsls	r2, r1, #3
 8018080:	4610      	mov	r0, r2
 8018082:	4619      	mov	r1, r3
 8018084:	4603      	mov	r3, r0
 8018086:	4642      	mov	r2, r8
 8018088:	189b      	adds	r3, r3, r2
 801808a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801808e:	464b      	mov	r3, r9
 8018090:	460a      	mov	r2, r1
 8018092:	eb42 0303 	adc.w	r3, r2, r3
 8018096:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801809a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801809e:	685b      	ldr	r3, [r3, #4]
 80180a0:	2200      	movs	r2, #0
 80180a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80180a6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80180aa:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80180ae:	460b      	mov	r3, r1
 80180b0:	18db      	adds	r3, r3, r3
 80180b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80180b4:	4613      	mov	r3, r2
 80180b6:	eb42 0303 	adc.w	r3, r2, r3
 80180ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80180bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80180c0:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80180c4:	f001 fa16 	bl	80194f4 <__aeabi_uldivmod>
 80180c8:	4602      	mov	r2, r0
 80180ca:	460b      	mov	r3, r1
 80180cc:	4b0c      	ldr	r3, [pc, #48]	; (8018100 <UART_SetConfig+0x2d2>)
 80180ce:	fba3 1302 	umull	r1, r3, r3, r2
 80180d2:	095b      	lsrs	r3, r3, #5
 80180d4:	2164      	movs	r1, #100	; 0x64
 80180d6:	fb01 f303 	mul.w	r3, r1, r3
 80180da:	1ad3      	subs	r3, r2, r3
 80180dc:	00db      	lsls	r3, r3, #3
 80180de:	3332      	adds	r3, #50	; 0x32
 80180e0:	4a07      	ldr	r2, [pc, #28]	; (8018100 <UART_SetConfig+0x2d2>)
 80180e2:	fba2 2303 	umull	r2, r3, r2, r3
 80180e6:	095b      	lsrs	r3, r3, #5
 80180e8:	f003 0207 	and.w	r2, r3, #7
 80180ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80180f0:	681b      	ldr	r3, [r3, #0]
 80180f2:	4422      	add	r2, r4
 80180f4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80180f6:	e104      	b.n	8018302 <UART_SetConfig+0x4d4>
 80180f8:	40011000 	.word	0x40011000
 80180fc:	40011400 	.word	0x40011400
 8018100:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8018104:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8018108:	2200      	movs	r2, #0
 801810a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801810e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8018112:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8018116:	4642      	mov	r2, r8
 8018118:	464b      	mov	r3, r9
 801811a:	1891      	adds	r1, r2, r2
 801811c:	6239      	str	r1, [r7, #32]
 801811e:	415b      	adcs	r3, r3
 8018120:	627b      	str	r3, [r7, #36]	; 0x24
 8018122:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8018126:	4641      	mov	r1, r8
 8018128:	1854      	adds	r4, r2, r1
 801812a:	4649      	mov	r1, r9
 801812c:	eb43 0501 	adc.w	r5, r3, r1
 8018130:	f04f 0200 	mov.w	r2, #0
 8018134:	f04f 0300 	mov.w	r3, #0
 8018138:	00eb      	lsls	r3, r5, #3
 801813a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801813e:	00e2      	lsls	r2, r4, #3
 8018140:	4614      	mov	r4, r2
 8018142:	461d      	mov	r5, r3
 8018144:	4643      	mov	r3, r8
 8018146:	18e3      	adds	r3, r4, r3
 8018148:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801814c:	464b      	mov	r3, r9
 801814e:	eb45 0303 	adc.w	r3, r5, r3
 8018152:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8018156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801815a:	685b      	ldr	r3, [r3, #4]
 801815c:	2200      	movs	r2, #0
 801815e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8018162:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8018166:	f04f 0200 	mov.w	r2, #0
 801816a:	f04f 0300 	mov.w	r3, #0
 801816e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8018172:	4629      	mov	r1, r5
 8018174:	008b      	lsls	r3, r1, #2
 8018176:	4621      	mov	r1, r4
 8018178:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801817c:	4621      	mov	r1, r4
 801817e:	008a      	lsls	r2, r1, #2
 8018180:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8018184:	f001 f9b6 	bl	80194f4 <__aeabi_uldivmod>
 8018188:	4602      	mov	r2, r0
 801818a:	460b      	mov	r3, r1
 801818c:	4b60      	ldr	r3, [pc, #384]	; (8018310 <UART_SetConfig+0x4e2>)
 801818e:	fba3 2302 	umull	r2, r3, r3, r2
 8018192:	095b      	lsrs	r3, r3, #5
 8018194:	011c      	lsls	r4, r3, #4
 8018196:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801819a:	2200      	movs	r2, #0
 801819c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80181a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80181a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80181a8:	4642      	mov	r2, r8
 80181aa:	464b      	mov	r3, r9
 80181ac:	1891      	adds	r1, r2, r2
 80181ae:	61b9      	str	r1, [r7, #24]
 80181b0:	415b      	adcs	r3, r3
 80181b2:	61fb      	str	r3, [r7, #28]
 80181b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80181b8:	4641      	mov	r1, r8
 80181ba:	1851      	adds	r1, r2, r1
 80181bc:	6139      	str	r1, [r7, #16]
 80181be:	4649      	mov	r1, r9
 80181c0:	414b      	adcs	r3, r1
 80181c2:	617b      	str	r3, [r7, #20]
 80181c4:	f04f 0200 	mov.w	r2, #0
 80181c8:	f04f 0300 	mov.w	r3, #0
 80181cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80181d0:	4659      	mov	r1, fp
 80181d2:	00cb      	lsls	r3, r1, #3
 80181d4:	4651      	mov	r1, sl
 80181d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80181da:	4651      	mov	r1, sl
 80181dc:	00ca      	lsls	r2, r1, #3
 80181de:	4610      	mov	r0, r2
 80181e0:	4619      	mov	r1, r3
 80181e2:	4603      	mov	r3, r0
 80181e4:	4642      	mov	r2, r8
 80181e6:	189b      	adds	r3, r3, r2
 80181e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80181ec:	464b      	mov	r3, r9
 80181ee:	460a      	mov	r2, r1
 80181f0:	eb42 0303 	adc.w	r3, r2, r3
 80181f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80181f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80181fc:	685b      	ldr	r3, [r3, #4]
 80181fe:	2200      	movs	r2, #0
 8018200:	67bb      	str	r3, [r7, #120]	; 0x78
 8018202:	67fa      	str	r2, [r7, #124]	; 0x7c
 8018204:	f04f 0200 	mov.w	r2, #0
 8018208:	f04f 0300 	mov.w	r3, #0
 801820c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8018210:	4649      	mov	r1, r9
 8018212:	008b      	lsls	r3, r1, #2
 8018214:	4641      	mov	r1, r8
 8018216:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801821a:	4641      	mov	r1, r8
 801821c:	008a      	lsls	r2, r1, #2
 801821e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8018222:	f001 f967 	bl	80194f4 <__aeabi_uldivmod>
 8018226:	4602      	mov	r2, r0
 8018228:	460b      	mov	r3, r1
 801822a:	4b39      	ldr	r3, [pc, #228]	; (8018310 <UART_SetConfig+0x4e2>)
 801822c:	fba3 1302 	umull	r1, r3, r3, r2
 8018230:	095b      	lsrs	r3, r3, #5
 8018232:	2164      	movs	r1, #100	; 0x64
 8018234:	fb01 f303 	mul.w	r3, r1, r3
 8018238:	1ad3      	subs	r3, r2, r3
 801823a:	011b      	lsls	r3, r3, #4
 801823c:	3332      	adds	r3, #50	; 0x32
 801823e:	4a34      	ldr	r2, [pc, #208]	; (8018310 <UART_SetConfig+0x4e2>)
 8018240:	fba2 2303 	umull	r2, r3, r2, r3
 8018244:	095b      	lsrs	r3, r3, #5
 8018246:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801824a:	441c      	add	r4, r3
 801824c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8018250:	2200      	movs	r2, #0
 8018252:	673b      	str	r3, [r7, #112]	; 0x70
 8018254:	677a      	str	r2, [r7, #116]	; 0x74
 8018256:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 801825a:	4642      	mov	r2, r8
 801825c:	464b      	mov	r3, r9
 801825e:	1891      	adds	r1, r2, r2
 8018260:	60b9      	str	r1, [r7, #8]
 8018262:	415b      	adcs	r3, r3
 8018264:	60fb      	str	r3, [r7, #12]
 8018266:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801826a:	4641      	mov	r1, r8
 801826c:	1851      	adds	r1, r2, r1
 801826e:	6039      	str	r1, [r7, #0]
 8018270:	4649      	mov	r1, r9
 8018272:	414b      	adcs	r3, r1
 8018274:	607b      	str	r3, [r7, #4]
 8018276:	f04f 0200 	mov.w	r2, #0
 801827a:	f04f 0300 	mov.w	r3, #0
 801827e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8018282:	4659      	mov	r1, fp
 8018284:	00cb      	lsls	r3, r1, #3
 8018286:	4651      	mov	r1, sl
 8018288:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801828c:	4651      	mov	r1, sl
 801828e:	00ca      	lsls	r2, r1, #3
 8018290:	4610      	mov	r0, r2
 8018292:	4619      	mov	r1, r3
 8018294:	4603      	mov	r3, r0
 8018296:	4642      	mov	r2, r8
 8018298:	189b      	adds	r3, r3, r2
 801829a:	66bb      	str	r3, [r7, #104]	; 0x68
 801829c:	464b      	mov	r3, r9
 801829e:	460a      	mov	r2, r1
 80182a0:	eb42 0303 	adc.w	r3, r2, r3
 80182a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80182a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80182aa:	685b      	ldr	r3, [r3, #4]
 80182ac:	2200      	movs	r2, #0
 80182ae:	663b      	str	r3, [r7, #96]	; 0x60
 80182b0:	667a      	str	r2, [r7, #100]	; 0x64
 80182b2:	f04f 0200 	mov.w	r2, #0
 80182b6:	f04f 0300 	mov.w	r3, #0
 80182ba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80182be:	4649      	mov	r1, r9
 80182c0:	008b      	lsls	r3, r1, #2
 80182c2:	4641      	mov	r1, r8
 80182c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80182c8:	4641      	mov	r1, r8
 80182ca:	008a      	lsls	r2, r1, #2
 80182cc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80182d0:	f001 f910 	bl	80194f4 <__aeabi_uldivmod>
 80182d4:	4602      	mov	r2, r0
 80182d6:	460b      	mov	r3, r1
 80182d8:	4b0d      	ldr	r3, [pc, #52]	; (8018310 <UART_SetConfig+0x4e2>)
 80182da:	fba3 1302 	umull	r1, r3, r3, r2
 80182de:	095b      	lsrs	r3, r3, #5
 80182e0:	2164      	movs	r1, #100	; 0x64
 80182e2:	fb01 f303 	mul.w	r3, r1, r3
 80182e6:	1ad3      	subs	r3, r2, r3
 80182e8:	011b      	lsls	r3, r3, #4
 80182ea:	3332      	adds	r3, #50	; 0x32
 80182ec:	4a08      	ldr	r2, [pc, #32]	; (8018310 <UART_SetConfig+0x4e2>)
 80182ee:	fba2 2303 	umull	r2, r3, r2, r3
 80182f2:	095b      	lsrs	r3, r3, #5
 80182f4:	f003 020f 	and.w	r2, r3, #15
 80182f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80182fc:	681b      	ldr	r3, [r3, #0]
 80182fe:	4422      	add	r2, r4
 8018300:	609a      	str	r2, [r3, #8]
}
 8018302:	bf00      	nop
 8018304:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8018308:	46bd      	mov	sp, r7
 801830a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801830e:	bf00      	nop
 8018310:	51eb851f 	.word	0x51eb851f

08018314 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8018314:	b480      	push	{r7}
 8018316:	b085      	sub	sp, #20
 8018318:	af00      	add	r7, sp, #0
 801831a:	6078      	str	r0, [r7, #4]
 801831c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 801831e:	2300      	movs	r3, #0
 8018320:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8018322:	683b      	ldr	r3, [r7, #0]
 8018324:	681a      	ldr	r2, [r3, #0]
 8018326:	687b      	ldr	r3, [r7, #4]
 8018328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801832c:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 801832e:	68fa      	ldr	r2, [r7, #12]
 8018330:	4b20      	ldr	r3, [pc, #128]	; (80183b4 <FSMC_NORSRAM_Init+0xa0>)
 8018332:	4013      	ands	r3, r2
 8018334:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8018336:	683b      	ldr	r3, [r7, #0]
 8018338:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 801833a:	683b      	ldr	r3, [r7, #0]
 801833c:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 801833e:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8018340:	683b      	ldr	r3, [r7, #0]
 8018342:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8018344:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8018346:	683b      	ldr	r3, [r7, #0]
 8018348:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 801834a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 801834c:	683b      	ldr	r3, [r7, #0]
 801834e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8018350:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8018352:	683b      	ldr	r3, [r7, #0]
 8018354:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8018356:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8018358:	683b      	ldr	r3, [r7, #0]
 801835a:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 801835c:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 801835e:	683b      	ldr	r3, [r7, #0]
 8018360:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8018362:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8018364:	683b      	ldr	r3, [r7, #0]
 8018366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8018368:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 801836a:	683b      	ldr	r3, [r7, #0]
 801836c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 801836e:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8018370:	683b      	ldr	r3, [r7, #0]
 8018372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8018374:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8018376:	683b      	ldr	r3, [r7, #0]
 8018378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 801837a:	431a      	orrs	r2, r3
                     Init->WriteBurst
 801837c:	683b      	ldr	r3, [r7, #0]
 801837e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8018380:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8018382:	68fa      	ldr	r2, [r7, #12]
 8018384:	4313      	orrs	r3, r2
 8018386:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8018388:	683b      	ldr	r3, [r7, #0]
 801838a:	689b      	ldr	r3, [r3, #8]
 801838c:	2b08      	cmp	r3, #8
 801838e:	d103      	bne.n	8018398 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8018390:	68fb      	ldr	r3, [r7, #12]
 8018392:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018396:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8018398:	683b      	ldr	r3, [r7, #0]
 801839a:	681a      	ldr	r2, [r3, #0]
 801839c:	687b      	ldr	r3, [r7, #4]
 801839e:	68f9      	ldr	r1, [r7, #12]
 80183a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80183a4:	2300      	movs	r3, #0
}
 80183a6:	4618      	mov	r0, r3
 80183a8:	3714      	adds	r7, #20
 80183aa:	46bd      	mov	sp, r7
 80183ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183b0:	4770      	bx	lr
 80183b2:	bf00      	nop
 80183b4:	fff00080 	.word	0xfff00080

080183b8 <FSMC_NORSRAM_DeInit>:
  * @param  ExDevice Pointer to NORSRAM extended mode device instance  
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_DeInit(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_EXTENDED_TypeDef *ExDevice, uint32_t Bank)
{
 80183b8:	b480      	push	{r7}
 80183ba:	b085      	sub	sp, #20
 80183bc:	af00      	add	r7, sp, #0
 80183be:	60f8      	str	r0, [r7, #12]
 80183c0:	60b9      	str	r1, [r7, #8]
 80183c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_NORSRAM_DEVICE(Device));
  assert_param(IS_FSMC_NORSRAM_EXTENDED_DEVICE(ExDevice));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Disable the FSMC_NORSRAM device */
  __FSMC_NORSRAM_DISABLE(Device, Bank);
 80183c4:	68fb      	ldr	r3, [r7, #12]
 80183c6:	687a      	ldr	r2, [r7, #4]
 80183c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80183cc:	f023 0101 	bic.w	r1, r3, #1
 80183d0:	68fb      	ldr	r3, [r7, #12]
 80183d2:	687a      	ldr	r2, [r7, #4]
 80183d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  /* De-initialize the FSMC_NORSRAM device */
  /* FSMC_NORSRAM_BANK1 */
  if(Bank == FSMC_NORSRAM_BANK1)
 80183d8:	687b      	ldr	r3, [r7, #4]
 80183da:	2b00      	cmp	r3, #0
 80183dc:	d106      	bne.n	80183ec <FSMC_NORSRAM_DeInit+0x34>
  {
    Device->BTCR[Bank] = 0x000030DBU;    
 80183de:	68fb      	ldr	r3, [r7, #12]
 80183e0:	687a      	ldr	r2, [r7, #4]
 80183e2:	f243 01db 	movw	r1, #12507	; 0x30db
 80183e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80183ea:	e005      	b.n	80183f8 <FSMC_NORSRAM_DeInit+0x40>
  }
  /* FSMC_NORSRAM_BANK2, FSMC_NORSRAM_BANK3 or FSMC_NORSRAM_BANK4 */
  else
  {   
    Device->BTCR[Bank] = 0x000030D2U; 
 80183ec:	68fb      	ldr	r3, [r7, #12]
 80183ee:	687a      	ldr	r2, [r7, #4]
 80183f0:	f243 01d2 	movw	r1, #12498	; 0x30d2
 80183f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  
  Device->BTCR[Bank + 1U] = 0x0FFFFFFFU;
 80183f8:	687b      	ldr	r3, [r7, #4]
 80183fa:	1c5a      	adds	r2, r3, #1
 80183fc:	68fb      	ldr	r3, [r7, #12]
 80183fe:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8018402:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  ExDevice->BWTR[Bank]    = 0x0FFFFFFFU;
 8018406:	68bb      	ldr	r3, [r7, #8]
 8018408:	687a      	ldr	r2, [r7, #4]
 801840a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 801840e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   
  return HAL_OK;
 8018412:	2300      	movs	r3, #0
}
 8018414:	4618      	mov	r0, r3
 8018416:	3714      	adds	r7, #20
 8018418:	46bd      	mov	sp, r7
 801841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801841e:	4770      	bx	lr

08018420 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8018420:	b480      	push	{r7}
 8018422:	b087      	sub	sp, #28
 8018424:	af00      	add	r7, sp, #0
 8018426:	60f8      	str	r0, [r7, #12]
 8018428:	60b9      	str	r1, [r7, #8]
 801842a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 801842c:	2300      	movs	r3, #0
 801842e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8018430:	687b      	ldr	r3, [r7, #4]
 8018432:	1c5a      	adds	r2, r3, #1
 8018434:	68fb      	ldr	r3, [r7, #12]
 8018436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801843a:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 801843c:	697b      	ldr	r3, [r7, #20]
 801843e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8018442:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8018444:	68bb      	ldr	r3, [r7, #8]
 8018446:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8018448:	68bb      	ldr	r3, [r7, #8]
 801844a:	685b      	ldr	r3, [r3, #4]
 801844c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 801844e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8018450:	68bb      	ldr	r3, [r7, #8]
 8018452:	689b      	ldr	r3, [r3, #8]
 8018454:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8018456:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8018458:	68bb      	ldr	r3, [r7, #8]
 801845a:	68db      	ldr	r3, [r3, #12]
 801845c:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 801845e:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8018460:	68bb      	ldr	r3, [r7, #8]
 8018462:	691b      	ldr	r3, [r3, #16]
 8018464:	3b01      	subs	r3, #1
 8018466:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8018468:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 801846a:	68bb      	ldr	r3, [r7, #8]
 801846c:	695b      	ldr	r3, [r3, #20]
 801846e:	3b02      	subs	r3, #2
 8018470:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8018472:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8018474:	68bb      	ldr	r3, [r7, #8]
 8018476:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8018478:	4313      	orrs	r3, r2
 801847a:	697a      	ldr	r2, [r7, #20]
 801847c:	4313      	orrs	r3, r2
 801847e:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8018480:	687b      	ldr	r3, [r7, #4]
 8018482:	1c5a      	adds	r2, r3, #1
 8018484:	68fb      	ldr	r3, [r7, #12]
 8018486:	6979      	ldr	r1, [r7, #20]
 8018488:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 801848c:	2300      	movs	r3, #0
}
 801848e:	4618      	mov	r0, r3
 8018490:	371c      	adds	r7, #28
 8018492:	46bd      	mov	sp, r7
 8018494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018498:	4770      	bx	lr

0801849a <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 801849a:	b480      	push	{r7}
 801849c:	b087      	sub	sp, #28
 801849e:	af00      	add	r7, sp, #0
 80184a0:	60f8      	str	r0, [r7, #12]
 80184a2:	60b9      	str	r1, [r7, #8]
 80184a4:	607a      	str	r2, [r7, #4]
 80184a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80184a8:	2300      	movs	r3, #0
 80184aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80184ac:	683b      	ldr	r3, [r7, #0]
 80184ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80184b2:	d122      	bne.n	80184fa <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80184b4:	68fb      	ldr	r3, [r7, #12]
 80184b6:	687a      	ldr	r2, [r7, #4]
 80184b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80184bc:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80184be:	697a      	ldr	r2, [r7, #20]
 80184c0:	4b14      	ldr	r3, [pc, #80]	; (8018514 <FSMC_NORSRAM_Extended_Timing_Init+0x7a>)
 80184c2:	4013      	ands	r3, r2
 80184c4:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80184c6:	68bb      	ldr	r3, [r7, #8]
 80184c8:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80184ca:	68bb      	ldr	r3, [r7, #8]
 80184cc:	685b      	ldr	r3, [r3, #4]
 80184ce:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80184d0:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80184d2:	68bb      	ldr	r3, [r7, #8]
 80184d4:	689b      	ldr	r3, [r3, #8]
 80184d6:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80184d8:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80184da:	68bb      	ldr	r3, [r7, #8]
 80184dc:	68db      	ldr	r3, [r3, #12]
 80184de:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80184e0:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80184e2:	68bb      	ldr	r3, [r7, #8]
 80184e4:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80184e6:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80184e8:	697a      	ldr	r2, [r7, #20]
 80184ea:	4313      	orrs	r3, r2
 80184ec:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 80184ee:	68fb      	ldr	r3, [r7, #12]
 80184f0:	687a      	ldr	r2, [r7, #4]
 80184f2:	6979      	ldr	r1, [r7, #20]
 80184f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80184f8:	e005      	b.n	8018506 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80184fa:	68fb      	ldr	r3, [r7, #12]
 80184fc:	687a      	ldr	r2, [r7, #4]
 80184fe:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8018502:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8018506:	2300      	movs	r3, #0
}
 8018508:	4618      	mov	r0, r3
 801850a:	371c      	adds	r7, #28
 801850c:	46bd      	mov	sp, r7
 801850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018512:	4770      	bx	lr
 8018514:	cff00000 	.word	0xcff00000

08018518 <FSMC_NORSRAM_WriteOperation_Enable>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Bank NORSRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_WriteOperation_Enable(FSMC_NORSRAM_TypeDef *Device, uint32_t Bank)
{
 8018518:	b480      	push	{r7}
 801851a:	b083      	sub	sp, #12
 801851c:	af00      	add	r7, sp, #0
 801851e:	6078      	str	r0, [r7, #4]
 8018520:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_NORSRAM_DEVICE(Device));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Enable write operation */
  Device->BTCR[Bank] |= FSMC_WRITE_OPERATION_ENABLE; 
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	683a      	ldr	r2, [r7, #0]
 8018526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801852a:	f443 5180 	orr.w	r1, r3, #4096	; 0x1000
 801852e:	687b      	ldr	r3, [r7, #4]
 8018530:	683a      	ldr	r2, [r7, #0]
 8018532:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  return HAL_OK;  
 8018536:	2300      	movs	r3, #0
}
 8018538:	4618      	mov	r0, r3
 801853a:	370c      	adds	r7, #12
 801853c:	46bd      	mov	sp, r7
 801853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018542:	4770      	bx	lr

08018544 <FSMC_NORSRAM_WriteOperation_Disable>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Bank NORSRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_WriteOperation_Disable(FSMC_NORSRAM_TypeDef *Device, uint32_t Bank)
{
 8018544:	b480      	push	{r7}
 8018546:	b083      	sub	sp, #12
 8018548:	af00      	add	r7, sp, #0
 801854a:	6078      	str	r0, [r7, #4]
 801854c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_NORSRAM_DEVICE(Device));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Disable write operation */
  Device->BTCR[Bank] &= ~FSMC_WRITE_OPERATION_ENABLE; 
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	683a      	ldr	r2, [r7, #0]
 8018552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018556:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801855a:	687b      	ldr	r3, [r7, #4]
 801855c:	683a      	ldr	r2, [r7, #0]
 801855e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  return HAL_OK;  
 8018562:	2300      	movs	r3, #0
}
 8018564:	4618      	mov	r0, r3
 8018566:	370c      	adds	r7, #12
 8018568:	46bd      	mov	sp, r7
 801856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801856e:	4770      	bx	lr

08018570 <FSMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_InitTypeDef *Init)
{
 8018570:	b480      	push	{r7}
 8018572:	b085      	sub	sp, #20
 8018574:	af00      	add	r7, sp, #0
 8018576:	6078      	str	r0, [r7, #4]
 8018578:	6039      	str	r1, [r7, #0]
  uint32_t tmpr  = 0U; 
 801857a:	2300      	movs	r3, #0
 801857c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_ECC_STATE(Init->EccComputation));
  assert_param(IS_FSMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));   

    if(Init->NandBank == FSMC_NAND_BANK2)
 801857e:	683b      	ldr	r3, [r7, #0]
 8018580:	681b      	ldr	r3, [r3, #0]
 8018582:	2b10      	cmp	r3, #16
 8018584:	d103      	bne.n	801858e <FSMC_NAND_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PCR2;
 8018586:	687b      	ldr	r3, [r7, #4]
 8018588:	681b      	ldr	r3, [r3, #0]
 801858a:	60fb      	str	r3, [r7, #12]
 801858c:	e002      	b.n	8018594 <FSMC_NAND_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PCR3;
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	6a1b      	ldr	r3, [r3, #32]
 8018592:	60fb      	str	r3, [r7, #12]
  }
  
  /* Clear PWAITEN, PBKEN, PTYP, PWID, ECCEN, TCLR, TAR and ECCPS bits */
  tmpr &= ((uint32_t)~(FSMC_PCR2_PWAITEN  | FSMC_PCR2_PBKEN | FSMC_PCR2_PTYP | \
 8018594:	68fa      	ldr	r2, [r7, #12]
 8018596:	4b16      	ldr	r3, [pc, #88]	; (80185f0 <FSMC_NAND_Init+0x80>)
 8018598:	4013      	ands	r3, r2
 801859a:	60fb      	str	r3, [r7, #12]
                       FSMC_PCR2_PWID | FSMC_PCR2_ECCEN | FSMC_PCR2_TCLR | \
                       FSMC_PCR2_TAR | FSMC_PCR2_ECCPS));  
  
  /* Set NAND device control parameters */
  tmpr |= (uint32_t)(Init->Waitfeature                |\
 801859c:	683b      	ldr	r3, [r7, #0]
 801859e:	685a      	ldr	r2, [r3, #4]
                     FSMC_PCR_MEMORY_TYPE_NAND        |\
                     Init->MemoryDataWidth            |\
 80185a0:	683b      	ldr	r3, [r7, #0]
 80185a2:	689b      	ldr	r3, [r3, #8]
                     FSMC_PCR_MEMORY_TYPE_NAND        |\
 80185a4:	431a      	orrs	r2, r3
                     Init->EccComputation             |\
 80185a6:	683b      	ldr	r3, [r7, #0]
 80185a8:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryDataWidth            |\
 80185aa:	431a      	orrs	r2, r3
                     Init->ECCPageSize                |\
 80185ac:	683b      	ldr	r3, [r7, #0]
 80185ae:	691b      	ldr	r3, [r3, #16]
                     Init->EccComputation             |\
 80185b0:	431a      	orrs	r2, r3
                     ((Init->TCLRSetupTime) << 9U)    |\
 80185b2:	683b      	ldr	r3, [r7, #0]
 80185b4:	695b      	ldr	r3, [r3, #20]
 80185b6:	025b      	lsls	r3, r3, #9
                     Init->ECCPageSize                |\
 80185b8:	431a      	orrs	r2, r3
                     ((Init->TARSetupTime) << 13U));   
 80185ba:	683b      	ldr	r3, [r7, #0]
 80185bc:	699b      	ldr	r3, [r3, #24]
 80185be:	035b      	lsls	r3, r3, #13
  tmpr |= (uint32_t)(Init->Waitfeature                |\
 80185c0:	431a      	orrs	r2, r3
 80185c2:	68fb      	ldr	r3, [r7, #12]
 80185c4:	4313      	orrs	r3, r2
 80185c6:	f043 0308 	orr.w	r3, r3, #8
 80185ca:	60fb      	str	r3, [r7, #12]
  
  if(Init->NandBank == FSMC_NAND_BANK2)
 80185cc:	683b      	ldr	r3, [r7, #0]
 80185ce:	681b      	ldr	r3, [r3, #0]
 80185d0:	2b10      	cmp	r3, #16
 80185d2:	d103      	bne.n	80185dc <FSMC_NAND_Init+0x6c>
  {
    /* NAND bank 2 registers configuration */
    Device->PCR2  = tmpr;
 80185d4:	687b      	ldr	r3, [r7, #4]
 80185d6:	68fa      	ldr	r2, [r7, #12]
 80185d8:	601a      	str	r2, [r3, #0]
 80185da:	e002      	b.n	80185e2 <FSMC_NAND_Init+0x72>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PCR3  = tmpr;
 80185dc:	687b      	ldr	r3, [r7, #4]
 80185de:	68fa      	ldr	r2, [r7, #12]
 80185e0:	621a      	str	r2, [r3, #32]
  }
  
  return HAL_OK;
 80185e2:	2300      	movs	r3, #0
}
 80185e4:	4618      	mov	r0, r3
 80185e6:	3714      	adds	r7, #20
 80185e8:	46bd      	mov	sp, r7
 80185ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185ee:	4770      	bx	lr
 80185f0:	fff00181 	.word	0xfff00181

080185f4 <FSMC_NAND_CommonSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_CommonSpace_Timing_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 80185f4:	b480      	push	{r7}
 80185f6:	b087      	sub	sp, #28
 80185f8:	af00      	add	r7, sp, #0
 80185fa:	60f8      	str	r0, [r7, #12]
 80185fc:	60b9      	str	r1, [r7, #8]
 80185fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;  
 8018600:	2300      	movs	r3, #0
 8018602:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_SETUP_TIME(Timing->SetupTime));
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  
  if(Bank == FSMC_NAND_BANK2)
 8018604:	687b      	ldr	r3, [r7, #4]
 8018606:	2b10      	cmp	r3, #16
 8018608:	d103      	bne.n	8018612 <FSMC_NAND_CommonSpace_Timing_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PMEM2;
 801860a:	68fb      	ldr	r3, [r7, #12]
 801860c:	689b      	ldr	r3, [r3, #8]
 801860e:	617b      	str	r3, [r7, #20]
 8018610:	e002      	b.n	8018618 <FSMC_NAND_CommonSpace_Timing_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PMEM3;
 8018612:	68fb      	ldr	r3, [r7, #12]
 8018614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018616:	617b      	str	r3, [r7, #20]
  } 
  
  /* Clear MEMSETx, MEMWAITx, MEMHOLDx and MEMHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PMEM2_MEMSET2  | FSMC_PMEM2_MEMWAIT2 | FSMC_PMEM2_MEMHOLD2 | \
 8018618:	2300      	movs	r3, #0
 801861a:	617b      	str	r3, [r7, #20]
                       FSMC_PMEM2_MEMHIZ2));
  
  /* Set FSMC_NAND device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 801861c:	68bb      	ldr	r3, [r7, #8]
 801861e:	681a      	ldr	r2, [r3, #0]
                       ((Timing->WaitSetupTime) << 8U)     |\
 8018620:	68bb      	ldr	r3, [r7, #8]
 8018622:	685b      	ldr	r3, [r3, #4]
 8018624:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8018626:	431a      	orrs	r2, r3
                       ((Timing->HoldSetupTime) << 16U)    |\
 8018628:	68bb      	ldr	r3, [r7, #8]
 801862a:	689b      	ldr	r3, [r3, #8]
 801862c:	041b      	lsls	r3, r3, #16
                       ((Timing->WaitSetupTime) << 8U)     |\
 801862e:	431a      	orrs	r2, r3
                       ((Timing->HiZSetupTime) << 24U)
 8018630:	68bb      	ldr	r3, [r7, #8]
 8018632:	68db      	ldr	r3, [r3, #12]
 8018634:	061b      	lsls	r3, r3, #24
                       ((Timing->HoldSetupTime) << 16U)    |\
 8018636:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8018638:	697a      	ldr	r2, [r7, #20]
 801863a:	4313      	orrs	r3, r2
 801863c:	617b      	str	r3, [r7, #20]
                       );
                            
  if(Bank == FSMC_NAND_BANK2)
 801863e:	687b      	ldr	r3, [r7, #4]
 8018640:	2b10      	cmp	r3, #16
 8018642:	d103      	bne.n	801864c <FSMC_NAND_CommonSpace_Timing_Init+0x58>
  {
    /* NAND bank 2 registers configuration */
    Device->PMEM2 = tmpr;
 8018644:	68fb      	ldr	r3, [r7, #12]
 8018646:	697a      	ldr	r2, [r7, #20]
 8018648:	609a      	str	r2, [r3, #8]
 801864a:	e002      	b.n	8018652 <FSMC_NAND_CommonSpace_Timing_Init+0x5e>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PMEM3 = tmpr;
 801864c:	68fb      	ldr	r3, [r7, #12]
 801864e:	697a      	ldr	r2, [r7, #20]
 8018650:	629a      	str	r2, [r3, #40]	; 0x28
  }  
  
  return HAL_OK;  
 8018652:	2300      	movs	r3, #0
}
 8018654:	4618      	mov	r0, r3
 8018656:	371c      	adds	r7, #28
 8018658:	46bd      	mov	sp, r7
 801865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801865e:	4770      	bx	lr

08018660 <FSMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number 
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_AttributeSpace_Timing_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8018660:	b480      	push	{r7}
 8018662:	b087      	sub	sp, #28
 8018664:	af00      	add	r7, sp, #0
 8018666:	60f8      	str	r0, [r7, #12]
 8018668:	60b9      	str	r1, [r7, #8]
 801866a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;  
 801866c:	2300      	movs	r3, #0
 801866e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_SETUP_TIME(Timing->SetupTime));
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  
  if(Bank == FSMC_NAND_BANK2)
 8018670:	687b      	ldr	r3, [r7, #4]
 8018672:	2b10      	cmp	r3, #16
 8018674:	d103      	bne.n	801867e <FSMC_NAND_AttributeSpace_Timing_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PATT2;
 8018676:	68fb      	ldr	r3, [r7, #12]
 8018678:	68db      	ldr	r3, [r3, #12]
 801867a:	617b      	str	r3, [r7, #20]
 801867c:	e002      	b.n	8018684 <FSMC_NAND_AttributeSpace_Timing_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PATT3;
 801867e:	68fb      	ldr	r3, [r7, #12]
 8018680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018682:	617b      	str	r3, [r7, #20]
  } 
  
  /* Clear ATTSETx, ATTWAITx, ATTHOLDx and ATTHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PATT2_ATTSET2  | FSMC_PATT2_ATTWAIT2 | FSMC_PATT2_ATTHOLD2 | \
 8018684:	2300      	movs	r3, #0
 8018686:	617b      	str	r3, [r7, #20]
                       FSMC_PATT2_ATTHIZ2));
  
  /* Set FSMC_NAND device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8018688:	68bb      	ldr	r3, [r7, #8]
 801868a:	681a      	ldr	r2, [r3, #0]
                       ((Timing->WaitSetupTime) << 8U)     |\
 801868c:	68bb      	ldr	r3, [r7, #8]
 801868e:	685b      	ldr	r3, [r3, #4]
 8018690:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8018692:	431a      	orrs	r2, r3
                       ((Timing->HoldSetupTime) << 16U)    |\
 8018694:	68bb      	ldr	r3, [r7, #8]
 8018696:	689b      	ldr	r3, [r3, #8]
 8018698:	041b      	lsls	r3, r3, #16
                       ((Timing->WaitSetupTime) << 8U)     |\
 801869a:	431a      	orrs	r2, r3
                       ((Timing->HiZSetupTime) << 24U)
 801869c:	68bb      	ldr	r3, [r7, #8]
 801869e:	68db      	ldr	r3, [r3, #12]
 80186a0:	061b      	lsls	r3, r3, #24
                       ((Timing->HoldSetupTime) << 16U)    |\
 80186a2:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 80186a4:	697a      	ldr	r2, [r7, #20]
 80186a6:	4313      	orrs	r3, r2
 80186a8:	617b      	str	r3, [r7, #20]
                       );
                       
  if(Bank == FSMC_NAND_BANK2)
 80186aa:	687b      	ldr	r3, [r7, #4]
 80186ac:	2b10      	cmp	r3, #16
 80186ae:	d103      	bne.n	80186b8 <FSMC_NAND_AttributeSpace_Timing_Init+0x58>
  {
    /* NAND bank 2 registers configuration */
    Device->PATT2 = tmpr;
 80186b0:	68fb      	ldr	r3, [r7, #12]
 80186b2:	697a      	ldr	r2, [r7, #20]
 80186b4:	60da      	str	r2, [r3, #12]
 80186b6:	e002      	b.n	80186be <FSMC_NAND_AttributeSpace_Timing_Init+0x5e>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PATT3 = tmpr;
 80186b8:	68fb      	ldr	r3, [r7, #12]
 80186ba:	697a      	ldr	r2, [r7, #20]
 80186bc:	62da      	str	r2, [r3, #44]	; 0x2c
  }   
  
  return HAL_OK;
 80186be:	2300      	movs	r3, #0
}
 80186c0:	4618      	mov	r0, r3
 80186c2:	371c      	adds	r7, #28
 80186c4:	46bd      	mov	sp, r7
 80186c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186ca:	4770      	bx	lr

080186cc <FSMC_NAND_DeInit>:
  * @param  Device Pointer to NAND device instance
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_DeInit(FSMC_NAND_TypeDef *Device, uint32_t Bank)
{
 80186cc:	b480      	push	{r7}
 80186ce:	b083      	sub	sp, #12
 80186d0:	af00      	add	r7, sp, #0
 80186d2:	6078      	str	r0, [r7, #4]
 80186d4:	6039      	str	r1, [r7, #0]
  /* Disable the NAND Bank */
  __FSMC_NAND_DISABLE(Device, Bank);
 80186d6:	683b      	ldr	r3, [r7, #0]
 80186d8:	2b10      	cmp	r3, #16
 80186da:	d106      	bne.n	80186ea <FSMC_NAND_DeInit+0x1e>
 80186dc:	687b      	ldr	r3, [r7, #4]
 80186de:	681b      	ldr	r3, [r3, #0]
 80186e0:	f023 0204 	bic.w	r2, r3, #4
 80186e4:	687b      	ldr	r3, [r7, #4]
 80186e6:	601a      	str	r2, [r3, #0]
 80186e8:	e005      	b.n	80186f6 <FSMC_NAND_DeInit+0x2a>
 80186ea:	687b      	ldr	r3, [r7, #4]
 80186ec:	6a1b      	ldr	r3, [r3, #32]
 80186ee:	f023 0204 	bic.w	r2, r3, #4
 80186f2:	687b      	ldr	r3, [r7, #4]
 80186f4:	621a      	str	r2, [r3, #32]
 
  /* De-initialize the NAND Bank */
  if(Bank == FSMC_NAND_BANK2)
 80186f6:	683b      	ldr	r3, [r7, #0]
 80186f8:	2b10      	cmp	r3, #16
 80186fa:	d10e      	bne.n	801871a <FSMC_NAND_DeInit+0x4e>
  {
    /* Set the FSMC_NAND_BANK2 registers to their reset values */
    Device->PCR2  = 0x00000018U;
 80186fc:	687b      	ldr	r3, [r7, #4]
 80186fe:	2218      	movs	r2, #24
 8018700:	601a      	str	r2, [r3, #0]
    Device->SR2   = 0x00000040U;
 8018702:	687b      	ldr	r3, [r7, #4]
 8018704:	2240      	movs	r2, #64	; 0x40
 8018706:	605a      	str	r2, [r3, #4]
    Device->PMEM2 = 0xFCFCFCFCU;
 8018708:	687b      	ldr	r3, [r7, #4]
 801870a:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 801870e:	609a      	str	r2, [r3, #8]
    Device->PATT2 = 0xFCFCFCFCU;  
 8018710:	687b      	ldr	r3, [r7, #4]
 8018712:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8018716:	60da      	str	r2, [r3, #12]
 8018718:	e00d      	b.n	8018736 <FSMC_NAND_DeInit+0x6a>
  }
  /* FSMC_Bank3_NAND */  
  else
  {
    /* Set the FSMC_NAND_BANK3 registers to their reset values */
    Device->PCR3  = 0x00000018U;
 801871a:	687b      	ldr	r3, [r7, #4]
 801871c:	2218      	movs	r2, #24
 801871e:	621a      	str	r2, [r3, #32]
    Device->SR3   = 0x00000040U;
 8018720:	687b      	ldr	r3, [r7, #4]
 8018722:	2240      	movs	r2, #64	; 0x40
 8018724:	625a      	str	r2, [r3, #36]	; 0x24
    Device->PMEM3 = 0xFCFCFCFCU;
 8018726:	687b      	ldr	r3, [r7, #4]
 8018728:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 801872c:	629a      	str	r2, [r3, #40]	; 0x28
    Device->PATT3 = 0xFCFCFCFCU; 
 801872e:	687b      	ldr	r3, [r7, #4]
 8018730:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8018734:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;
 8018736:	2300      	movs	r3, #0
}
 8018738:	4618      	mov	r0, r3
 801873a:	370c      	adds	r7, #12
 801873c:	46bd      	mov	sp, r7
 801873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018742:	4770      	bx	lr

08018744 <FSMC_NAND_ECC_Enable>:
  * @param  Device Pointer to NAND device instance
  * @param  Bank NAND bank number
  * @retval HAL status
  */    
HAL_StatusTypeDef  FSMC_NAND_ECC_Enable(FSMC_NAND_TypeDef *Device, uint32_t Bank)
{
 8018744:	b480      	push	{r7}
 8018746:	b083      	sub	sp, #12
 8018748:	af00      	add	r7, sp, #0
 801874a:	6078      	str	r0, [r7, #4]
 801874c:	6039      	str	r1, [r7, #0]
  /* Enable ECC feature */
  if(Bank == FSMC_NAND_BANK2)
 801874e:	683b      	ldr	r3, [r7, #0]
 8018750:	2b10      	cmp	r3, #16
 8018752:	d106      	bne.n	8018762 <FSMC_NAND_ECC_Enable+0x1e>
  {
    Device->PCR2 |= FSMC_PCR2_ECCEN;
 8018754:	687b      	ldr	r3, [r7, #4]
 8018756:	681b      	ldr	r3, [r3, #0]
 8018758:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801875c:	687b      	ldr	r3, [r7, #4]
 801875e:	601a      	str	r2, [r3, #0]
 8018760:	e005      	b.n	801876e <FSMC_NAND_ECC_Enable+0x2a>
  }
  else
  {
    Device->PCR3 |= FSMC_PCR3_ECCEN;
 8018762:	687b      	ldr	r3, [r7, #4]
 8018764:	6a1b      	ldr	r3, [r3, #32]
 8018766:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801876a:	687b      	ldr	r3, [r7, #4]
 801876c:	621a      	str	r2, [r3, #32]
  } 
  
  return HAL_OK;  
 801876e:	2300      	movs	r3, #0
}
 8018770:	4618      	mov	r0, r3
 8018772:	370c      	adds	r7, #12
 8018774:	46bd      	mov	sp, r7
 8018776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801877a:	4770      	bx	lr

0801877c <FSMC_NAND_ECC_Disable>:
  * @param  Device Pointer to NAND device instance
  * @param  Bank NAND bank number
  * @retval HAL status
  */  
HAL_StatusTypeDef FSMC_NAND_ECC_Disable(FSMC_NAND_TypeDef *Device, uint32_t Bank)  
{  
 801877c:	b480      	push	{r7}
 801877e:	b083      	sub	sp, #12
 8018780:	af00      	add	r7, sp, #0
 8018782:	6078      	str	r0, [r7, #4]
 8018784:	6039      	str	r1, [r7, #0]
  /* Disable ECC feature */
  if(Bank == FSMC_NAND_BANK2)
 8018786:	683b      	ldr	r3, [r7, #0]
 8018788:	2b10      	cmp	r3, #16
 801878a:	d106      	bne.n	801879a <FSMC_NAND_ECC_Disable+0x1e>
  {
    Device->PCR2 &= ~FSMC_PCR2_ECCEN;
 801878c:	687b      	ldr	r3, [r7, #4]
 801878e:	681b      	ldr	r3, [r3, #0]
 8018790:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	601a      	str	r2, [r3, #0]
 8018798:	e005      	b.n	80187a6 <FSMC_NAND_ECC_Disable+0x2a>
  }
  else
  {
    Device->PCR3 &= ~FSMC_PCR3_ECCEN;
 801879a:	687b      	ldr	r3, [r7, #4]
 801879c:	6a1b      	ldr	r3, [r3, #32]
 801879e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80187a2:	687b      	ldr	r3, [r7, #4]
 80187a4:	621a      	str	r2, [r3, #32]
  } 

  return HAL_OK;  
 80187a6:	2300      	movs	r3, #0
}
 80187a8:	4618      	mov	r0, r3
 80187aa:	370c      	adds	r7, #12
 80187ac:	46bd      	mov	sp, r7
 80187ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187b2:	4770      	bx	lr

080187b4 <FSMC_NAND_GetECC>:
  * @param  Bank NAND bank number
  * @param  Timeout Timeout wait value  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_GetECC(FSMC_NAND_TypeDef *Device, uint32_t *ECCval, uint32_t Bank, uint32_t Timeout)
{
 80187b4:	b580      	push	{r7, lr}
 80187b6:	b086      	sub	sp, #24
 80187b8:	af00      	add	r7, sp, #0
 80187ba:	60f8      	str	r0, [r7, #12]
 80187bc:	60b9      	str	r1, [r7, #8]
 80187be:	607a      	str	r2, [r7, #4]
 80187c0:	603b      	str	r3, [r7, #0]
  uint32_t tickstart = 0U;
 80187c2:	2300      	movs	r3, #0
 80187c4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */ 
  assert_param(IS_FSMC_NAND_DEVICE(Device)); 
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80187c6:	f7ee f825 	bl	8006814 <HAL_GetTick>
 80187ca:	6178      	str	r0, [r7, #20]

  /* Wait until FIFO is empty */
  while(__FSMC_NAND_GET_FLAG(Device, Bank, FSMC_FLAG_FEMPT) == RESET)
 80187cc:	e010      	b.n	80187f0 <FSMC_NAND_GetECC+0x3c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80187ce:	683b      	ldr	r3, [r7, #0]
 80187d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80187d4:	d00c      	beq.n	80187f0 <FSMC_NAND_GetECC+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80187d6:	683b      	ldr	r3, [r7, #0]
 80187d8:	2b00      	cmp	r3, #0
 80187da:	d007      	beq.n	80187ec <FSMC_NAND_GetECC+0x38>
 80187dc:	f7ee f81a 	bl	8006814 <HAL_GetTick>
 80187e0:	4602      	mov	r2, r0
 80187e2:	697b      	ldr	r3, [r7, #20]
 80187e4:	1ad3      	subs	r3, r2, r3
 80187e6:	683a      	ldr	r2, [r7, #0]
 80187e8:	429a      	cmp	r2, r3
 80187ea:	d201      	bcs.n	80187f0 <FSMC_NAND_GetECC+0x3c>
      {
        return HAL_TIMEOUT;
 80187ec:	2303      	movs	r3, #3
 80187ee:	e024      	b.n	801883a <FSMC_NAND_GetECC+0x86>
  while(__FSMC_NAND_GET_FLAG(Device, Bank, FSMC_FLAG_FEMPT) == RESET)
 80187f0:	687b      	ldr	r3, [r7, #4]
 80187f2:	2b10      	cmp	r3, #16
 80187f4:	d109      	bne.n	801880a <FSMC_NAND_GetECC+0x56>
 80187f6:	68fb      	ldr	r3, [r7, #12]
 80187f8:	685b      	ldr	r3, [r3, #4]
 80187fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80187fe:	2b40      	cmp	r3, #64	; 0x40
 8018800:	bf14      	ite	ne
 8018802:	2301      	movne	r3, #1
 8018804:	2300      	moveq	r3, #0
 8018806:	b2db      	uxtb	r3, r3
 8018808:	e008      	b.n	801881c <FSMC_NAND_GetECC+0x68>
 801880a:	68fb      	ldr	r3, [r7, #12]
 801880c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801880e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018812:	2b40      	cmp	r3, #64	; 0x40
 8018814:	bf14      	ite	ne
 8018816:	2301      	movne	r3, #1
 8018818:	2300      	moveq	r3, #0
 801881a:	b2db      	uxtb	r3, r3
 801881c:	2b00      	cmp	r3, #0
 801881e:	d1d6      	bne.n	80187ce <FSMC_NAND_GetECC+0x1a>
      }
    }   
  }
     
  if(Bank == FSMC_NAND_BANK2)
 8018820:	687b      	ldr	r3, [r7, #4]
 8018822:	2b10      	cmp	r3, #16
 8018824:	d104      	bne.n	8018830 <FSMC_NAND_GetECC+0x7c>
  {    
    /* Get the ECCR2 register value */
    *ECCval = (uint32_t)Device->ECCR2;
 8018826:	68fb      	ldr	r3, [r7, #12]
 8018828:	695a      	ldr	r2, [r3, #20]
 801882a:	68bb      	ldr	r3, [r7, #8]
 801882c:	601a      	str	r2, [r3, #0]
 801882e:	e003      	b.n	8018838 <FSMC_NAND_GetECC+0x84>
  }
  else
  {    
    /* Get the ECCR3 register value */
    *ECCval = (uint32_t)Device->ECCR3;
 8018830:	68fb      	ldr	r3, [r7, #12]
 8018832:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8018834:	68bb      	ldr	r3, [r7, #8]
 8018836:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;  
 8018838:	2300      	movs	r3, #0
}
 801883a:	4618      	mov	r0, r3
 801883c:	3718      	adds	r7, #24
 801883e:	46bd      	mov	sp, r7
 8018840:	bd80      	pop	{r7, pc}

08018842 <FSMC_PCCARD_Init>:
  * @param  Device Pointer to PCCARD device instance
  * @param  Init Pointer to PCCARD Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_PCCARD_Init(FSMC_PCCARD_TypeDef *Device, FSMC_PCCARD_InitTypeDef *Init)
{
 8018842:	b480      	push	{r7}
 8018844:	b085      	sub	sp, #20
 8018846:	af00      	add	r7, sp, #0
 8018848:	6078      	str	r0, [r7, #4]
 801884a:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 801884c:	2300      	movs	r3, #0
 801884e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WAIT_FEATURE(Init->Waitfeature));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));     
  
  /* Get PCCARD control register value */
  tmpr = Device->PCR4;
 8018850:	687b      	ldr	r3, [r7, #4]
 8018852:	681b      	ldr	r3, [r3, #0]
 8018854:	60fb      	str	r3, [r7, #12]
  
  /* Clear TAR, TCLR, PWAITEN and PWID bits */
  tmpr &= ((uint32_t)~(FSMC_PCR4_TAR  | FSMC_PCR4_TCLR | FSMC_PCR4_PWAITEN | \
 8018856:	68fb      	ldr	r3, [r7, #12]
 8018858:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 801885c:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8018860:	60fb      	str	r3, [r7, #12]
                       FSMC_PCR4_PWID | FSMC_PCR4_PTYP));
  
  /* Set FSMC_PCCARD device control parameters */
  tmpr |= (uint32_t)(Init->Waitfeature               |\
 8018862:	683b      	ldr	r3, [r7, #0]
 8018864:	681a      	ldr	r2, [r3, #0]
                     FSMC_NAND_PCC_MEM_BUS_WIDTH_16  |\
                     (Init->TCLRSetupTime << 9U)     |\
 8018866:	683b      	ldr	r3, [r7, #0]
 8018868:	685b      	ldr	r3, [r3, #4]
 801886a:	025b      	lsls	r3, r3, #9
                     FSMC_NAND_PCC_MEM_BUS_WIDTH_16  |\
 801886c:	431a      	orrs	r2, r3
                     (Init->TARSetupTime << 13U));
 801886e:	683b      	ldr	r3, [r7, #0]
 8018870:	689b      	ldr	r3, [r3, #8]
 8018872:	035b      	lsls	r3, r3, #13
  tmpr |= (uint32_t)(Init->Waitfeature               |\
 8018874:	431a      	orrs	r2, r3
 8018876:	68fb      	ldr	r3, [r7, #12]
 8018878:	4313      	orrs	r3, r2
 801887a:	f043 0310 	orr.w	r3, r3, #16
 801887e:	60fb      	str	r3, [r7, #12]
  
  Device->PCR4 = tmpr;
 8018880:	687b      	ldr	r3, [r7, #4]
 8018882:	68fa      	ldr	r2, [r7, #12]
 8018884:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 8018886:	2300      	movs	r3, #0
}
 8018888:	4618      	mov	r0, r3
 801888a:	3714      	adds	r7, #20
 801888c:	46bd      	mov	sp, r7
 801888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018892:	4770      	bx	lr

08018894 <FSMC_PCCARD_CommonSpace_Timing_Init>:
  * @param  Device Pointer to PCCARD device instance
  * @param  Timing Pointer to PCCARD timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_PCCARD_CommonSpace_Timing_Init(FSMC_PCCARD_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing)
{
 8018894:	b480      	push	{r7}
 8018896:	b085      	sub	sp, #20
 8018898:	af00      	add	r7, sp, #0
 801889a:	6078      	str	r0, [r7, #4]
 801889c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 801889e:	2300      	movs	r3, #0
 80188a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));

  /* Get PCCARD common space timing register value */
  tmpr = Device->PMEM4;
 80188a2:	687b      	ldr	r3, [r7, #4]
 80188a4:	689b      	ldr	r3, [r3, #8]
 80188a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear MEMSETx, MEMWAITx, MEMHOLDx and MEMHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PMEM4_MEMSET4  | FSMC_PMEM4_MEMWAIT4 | FSMC_PMEM4_MEMHOLD4 | \
 80188a8:	2300      	movs	r3, #0
 80188aa:	60fb      	str	r3, [r7, #12]
                       FSMC_PMEM4_MEMHIZ4));
  /* Set PCCARD timing parameters */
  tmpr |= (uint32_t)((Timing->SetupTime                 |\
 80188ac:	683b      	ldr	r3, [r7, #0]
 80188ae:	681a      	ldr	r2, [r3, #0]
                    ((Timing->WaitSetupTime) << 8U)     |\
 80188b0:	683b      	ldr	r3, [r7, #0]
 80188b2:	685b      	ldr	r3, [r3, #4]
 80188b4:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)((Timing->SetupTime                 |\
 80188b6:	431a      	orrs	r2, r3
                    (Timing->HoldSetupTime) << 16U)     |\
 80188b8:	683b      	ldr	r3, [r7, #0]
 80188ba:	689b      	ldr	r3, [r3, #8]
 80188bc:	041b      	lsls	r3, r3, #16
                    ((Timing->WaitSetupTime) << 8U)     |\
 80188be:	431a      	orrs	r2, r3
                    ((Timing->HiZSetupTime) << 24U));
 80188c0:	683b      	ldr	r3, [r7, #0]
 80188c2:	68db      	ldr	r3, [r3, #12]
 80188c4:	061b      	lsls	r3, r3, #24
                    (Timing->HoldSetupTime) << 16U)     |\
 80188c6:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)((Timing->SetupTime                 |\
 80188c8:	68fa      	ldr	r2, [r7, #12]
 80188ca:	4313      	orrs	r3, r2
 80188cc:	60fb      	str	r3, [r7, #12]
  
  Device->PMEM4 = tmpr;
 80188ce:	687b      	ldr	r3, [r7, #4]
 80188d0:	68fa      	ldr	r2, [r7, #12]
 80188d2:	609a      	str	r2, [r3, #8]
  
  return HAL_OK;  
 80188d4:	2300      	movs	r3, #0
}
 80188d6:	4618      	mov	r0, r3
 80188d8:	3714      	adds	r7, #20
 80188da:	46bd      	mov	sp, r7
 80188dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188e0:	4770      	bx	lr

080188e2 <FSMC_PCCARD_AttributeSpace_Timing_Init>:
  * @param  Device Pointer to PCCARD device instance
  * @param  Timing Pointer to PCCARD timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_PCCARD_AttributeSpace_Timing_Init(FSMC_PCCARD_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing)
{
 80188e2:	b480      	push	{r7}
 80188e4:	b085      	sub	sp, #20
 80188e6:	af00      	add	r7, sp, #0
 80188e8:	6078      	str	r0, [r7, #4]
 80188ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80188ec:	2300      	movs	r3, #0
 80188ee:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));

  /* Get PCCARD timing parameters */
  tmpr = Device->PATT4;
 80188f0:	687b      	ldr	r3, [r7, #4]
 80188f2:	68db      	ldr	r3, [r3, #12]
 80188f4:	60fb      	str	r3, [r7, #12]

  /* Clear ATTSETx, ATTWAITx, ATTHOLDx and ATTHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PATT4_ATTSET4  | FSMC_PATT4_ATTWAIT4 | FSMC_PATT4_ATTHOLD4 | \
 80188f6:	2300      	movs	r3, #0
 80188f8:	60fb      	str	r3, [r7, #12]
                       FSMC_PATT4_ATTHIZ4));
  
  /* Set PCCARD timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                 |\
 80188fa:	683b      	ldr	r3, [r7, #0]
 80188fc:	681a      	ldr	r2, [r3, #0]
                   ((Timing->WaitSetupTime) << 8U)     |\
 80188fe:	683b      	ldr	r3, [r7, #0]
 8018900:	685b      	ldr	r3, [r3, #4]
 8018902:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                 |\
 8018904:	431a      	orrs	r2, r3
                   ((Timing->HoldSetupTime) << 16U)    |\
 8018906:	683b      	ldr	r3, [r7, #0]
 8018908:	689b      	ldr	r3, [r3, #8]
 801890a:	041b      	lsls	r3, r3, #16
                   ((Timing->WaitSetupTime) << 8U)     |\
 801890c:	431a      	orrs	r2, r3
                   ((Timing->HiZSetupTime) << 24U));
 801890e:	683b      	ldr	r3, [r7, #0]
 8018910:	68db      	ldr	r3, [r3, #12]
 8018912:	061b      	lsls	r3, r3, #24
                   ((Timing->HoldSetupTime) << 16U)    |\
 8018914:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                 |\
 8018916:	68fa      	ldr	r2, [r7, #12]
 8018918:	4313      	orrs	r3, r2
 801891a:	60fb      	str	r3, [r7, #12]
  Device->PATT4 = tmpr; 
 801891c:	687b      	ldr	r3, [r7, #4]
 801891e:	68fa      	ldr	r2, [r7, #12]
 8018920:	60da      	str	r2, [r3, #12]
                                        
  return HAL_OK;
 8018922:	2300      	movs	r3, #0
}
 8018924:	4618      	mov	r0, r3
 8018926:	3714      	adds	r7, #20
 8018928:	46bd      	mov	sp, r7
 801892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801892e:	4770      	bx	lr

08018930 <FSMC_PCCARD_IOSpace_Timing_Init>:
  * @param  Device Pointer to PCCARD device instance
  * @param  Timing Pointer to PCCARD timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_PCCARD_IOSpace_Timing_Init(FSMC_PCCARD_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing)
{
 8018930:	b480      	push	{r7}
 8018932:	b085      	sub	sp, #20
 8018934:	af00      	add	r7, sp, #0
 8018936:	6078      	str	r0, [r7, #4]
 8018938:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 801893a:	2300      	movs	r3, #0
 801893c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));

  /* Get FSMC_PCCARD device timing parameters */
  tmpr = Device->PIO4;
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	691b      	ldr	r3, [r3, #16]
 8018942:	60fb      	str	r3, [r7, #12]

  /* Clear IOSET4, IOWAIT4, IOHOLD4 and IOHIZ4 bits */
  tmpr &= ((uint32_t)~(FSMC_PIO4_IOSET4  | FSMC_PIO4_IOWAIT4 | FSMC_PIO4_IOHOLD4 | \
 8018944:	2300      	movs	r3, #0
 8018946:	60fb      	str	r3, [r7, #12]
                       FSMC_PIO4_IOHIZ4));
  
  /* Set FSMC_PCCARD device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                   |\
 8018948:	683b      	ldr	r3, [r7, #0]
 801894a:	681a      	ldr	r2, [r3, #0]
                     ((Timing->WaitSetupTime) << 8U)     |\
 801894c:	683b      	ldr	r3, [r7, #0]
 801894e:	685b      	ldr	r3, [r3, #4]
 8018950:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                   |\
 8018952:	431a      	orrs	r2, r3
                     ((Timing->HoldSetupTime) << 16U)    |\
 8018954:	683b      	ldr	r3, [r7, #0]
 8018956:	689b      	ldr	r3, [r3, #8]
 8018958:	041b      	lsls	r3, r3, #16
                     ((Timing->WaitSetupTime) << 8U)     |\
 801895a:	431a      	orrs	r2, r3
                     ((Timing->HiZSetupTime) << 24U));   
 801895c:	683b      	ldr	r3, [r7, #0]
 801895e:	68db      	ldr	r3, [r3, #12]
 8018960:	061b      	lsls	r3, r3, #24
                     ((Timing->HoldSetupTime) << 16U)    |\
 8018962:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                   |\
 8018964:	68fa      	ldr	r2, [r7, #12]
 8018966:	4313      	orrs	r3, r2
 8018968:	60fb      	str	r3, [r7, #12]
  
  Device->PIO4 = tmpr;
 801896a:	687b      	ldr	r3, [r7, #4]
 801896c:	68fa      	ldr	r2, [r7, #12]
 801896e:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;
 8018970:	2300      	movs	r3, #0
}
 8018972:	4618      	mov	r0, r3
 8018974:	3714      	adds	r7, #20
 8018976:	46bd      	mov	sp, r7
 8018978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801897c:	4770      	bx	lr

0801897e <FSMC_PCCARD_DeInit>:
  * @brief  DeInitializes the FSMC_PCCARD device 
  * @param  Device Pointer to PCCARD device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_PCCARD_DeInit(FSMC_PCCARD_TypeDef *Device)
{
 801897e:	b480      	push	{r7}
 8018980:	b083      	sub	sp, #12
 8018982:	af00      	add	r7, sp, #0
 8018984:	6078      	str	r0, [r7, #4]
  /* Disable the FSMC_PCCARD device */
  __FSMC_PCCARD_DISABLE(Device);
 8018986:	687b      	ldr	r3, [r7, #4]
 8018988:	681b      	ldr	r3, [r3, #0]
 801898a:	f023 0204 	bic.w	r2, r3, #4
 801898e:	687b      	ldr	r3, [r7, #4]
 8018990:	601a      	str	r2, [r3, #0]
  
  /* De-initialize the FSMC_PCCARD device */
  Device->PCR4    = 0x00000018U; 
 8018992:	687b      	ldr	r3, [r7, #4]
 8018994:	2218      	movs	r2, #24
 8018996:	601a      	str	r2, [r3, #0]
  Device->SR4     = 0x00000000U;	
 8018998:	687b      	ldr	r3, [r7, #4]
 801899a:	2200      	movs	r2, #0
 801899c:	605a      	str	r2, [r3, #4]
  Device->PMEM4   = 0xFCFCFCFCU;
 801899e:	687b      	ldr	r3, [r7, #4]
 80189a0:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 80189a4:	609a      	str	r2, [r3, #8]
  Device->PATT4   = 0xFCFCFCFCU;
 80189a6:	687b      	ldr	r3, [r7, #4]
 80189a8:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 80189ac:	60da      	str	r2, [r3, #12]
  Device->PIO4    = 0xFCFCFCFCU;
 80189ae:	687b      	ldr	r3, [r7, #4]
 80189b0:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 80189b4:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;
 80189b6:	2300      	movs	r3, #0
}
 80189b8:	4618      	mov	r0, r3
 80189ba:	370c      	adds	r7, #12
 80189bc:	46bd      	mov	sp, r7
 80189be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189c2:	4770      	bx	lr

080189c4 <strlen>:
 80189c4:	4603      	mov	r3, r0
 80189c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80189ca:	2a00      	cmp	r2, #0
 80189cc:	d1fb      	bne.n	80189c6 <strlen+0x2>
 80189ce:	1a18      	subs	r0, r3, r0
 80189d0:	3801      	subs	r0, #1
 80189d2:	4770      	bx	lr
	...

080189e0 <memchr>:
 80189e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80189e4:	2a10      	cmp	r2, #16
 80189e6:	db2b      	blt.n	8018a40 <memchr+0x60>
 80189e8:	f010 0f07 	tst.w	r0, #7
 80189ec:	d008      	beq.n	8018a00 <memchr+0x20>
 80189ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80189f2:	3a01      	subs	r2, #1
 80189f4:	428b      	cmp	r3, r1
 80189f6:	d02d      	beq.n	8018a54 <memchr+0x74>
 80189f8:	f010 0f07 	tst.w	r0, #7
 80189fc:	b342      	cbz	r2, 8018a50 <memchr+0x70>
 80189fe:	d1f6      	bne.n	80189ee <memchr+0xe>
 8018a00:	b4f0      	push	{r4, r5, r6, r7}
 8018a02:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8018a06:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8018a0a:	f022 0407 	bic.w	r4, r2, #7
 8018a0e:	f07f 0700 	mvns.w	r7, #0
 8018a12:	2300      	movs	r3, #0
 8018a14:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8018a18:	3c08      	subs	r4, #8
 8018a1a:	ea85 0501 	eor.w	r5, r5, r1
 8018a1e:	ea86 0601 	eor.w	r6, r6, r1
 8018a22:	fa85 f547 	uadd8	r5, r5, r7
 8018a26:	faa3 f587 	sel	r5, r3, r7
 8018a2a:	fa86 f647 	uadd8	r6, r6, r7
 8018a2e:	faa5 f687 	sel	r6, r5, r7
 8018a32:	b98e      	cbnz	r6, 8018a58 <memchr+0x78>
 8018a34:	d1ee      	bne.n	8018a14 <memchr+0x34>
 8018a36:	bcf0      	pop	{r4, r5, r6, r7}
 8018a38:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8018a3c:	f002 0207 	and.w	r2, r2, #7
 8018a40:	b132      	cbz	r2, 8018a50 <memchr+0x70>
 8018a42:	f810 3b01 	ldrb.w	r3, [r0], #1
 8018a46:	3a01      	subs	r2, #1
 8018a48:	ea83 0301 	eor.w	r3, r3, r1
 8018a4c:	b113      	cbz	r3, 8018a54 <memchr+0x74>
 8018a4e:	d1f8      	bne.n	8018a42 <memchr+0x62>
 8018a50:	2000      	movs	r0, #0
 8018a52:	4770      	bx	lr
 8018a54:	3801      	subs	r0, #1
 8018a56:	4770      	bx	lr
 8018a58:	2d00      	cmp	r5, #0
 8018a5a:	bf06      	itte	eq
 8018a5c:	4635      	moveq	r5, r6
 8018a5e:	3803      	subeq	r0, #3
 8018a60:	3807      	subne	r0, #7
 8018a62:	f015 0f01 	tst.w	r5, #1
 8018a66:	d107      	bne.n	8018a78 <memchr+0x98>
 8018a68:	3001      	adds	r0, #1
 8018a6a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8018a6e:	bf02      	ittt	eq
 8018a70:	3001      	addeq	r0, #1
 8018a72:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8018a76:	3001      	addeq	r0, #1
 8018a78:	bcf0      	pop	{r4, r5, r6, r7}
 8018a7a:	3801      	subs	r0, #1
 8018a7c:	4770      	bx	lr
 8018a7e:	bf00      	nop

08018a80 <__aeabi_drsub>:
 8018a80:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8018a84:	e002      	b.n	8018a8c <__adddf3>
 8018a86:	bf00      	nop

08018a88 <__aeabi_dsub>:
 8018a88:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08018a8c <__adddf3>:
 8018a8c:	b530      	push	{r4, r5, lr}
 8018a8e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8018a92:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8018a96:	ea94 0f05 	teq	r4, r5
 8018a9a:	bf08      	it	eq
 8018a9c:	ea90 0f02 	teqeq	r0, r2
 8018aa0:	bf1f      	itttt	ne
 8018aa2:	ea54 0c00 	orrsne.w	ip, r4, r0
 8018aa6:	ea55 0c02 	orrsne.w	ip, r5, r2
 8018aaa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8018aae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8018ab2:	f000 80e2 	beq.w	8018c7a <__adddf3+0x1ee>
 8018ab6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8018aba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8018abe:	bfb8      	it	lt
 8018ac0:	426d      	neglt	r5, r5
 8018ac2:	dd0c      	ble.n	8018ade <__adddf3+0x52>
 8018ac4:	442c      	add	r4, r5
 8018ac6:	ea80 0202 	eor.w	r2, r0, r2
 8018aca:	ea81 0303 	eor.w	r3, r1, r3
 8018ace:	ea82 0000 	eor.w	r0, r2, r0
 8018ad2:	ea83 0101 	eor.w	r1, r3, r1
 8018ad6:	ea80 0202 	eor.w	r2, r0, r2
 8018ada:	ea81 0303 	eor.w	r3, r1, r3
 8018ade:	2d36      	cmp	r5, #54	; 0x36
 8018ae0:	bf88      	it	hi
 8018ae2:	bd30      	pophi	{r4, r5, pc}
 8018ae4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8018ae8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8018aec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8018af0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8018af4:	d002      	beq.n	8018afc <__adddf3+0x70>
 8018af6:	4240      	negs	r0, r0
 8018af8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8018afc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8018b00:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8018b04:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8018b08:	d002      	beq.n	8018b10 <__adddf3+0x84>
 8018b0a:	4252      	negs	r2, r2
 8018b0c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8018b10:	ea94 0f05 	teq	r4, r5
 8018b14:	f000 80a7 	beq.w	8018c66 <__adddf3+0x1da>
 8018b18:	f1a4 0401 	sub.w	r4, r4, #1
 8018b1c:	f1d5 0e20 	rsbs	lr, r5, #32
 8018b20:	db0d      	blt.n	8018b3e <__adddf3+0xb2>
 8018b22:	fa02 fc0e 	lsl.w	ip, r2, lr
 8018b26:	fa22 f205 	lsr.w	r2, r2, r5
 8018b2a:	1880      	adds	r0, r0, r2
 8018b2c:	f141 0100 	adc.w	r1, r1, #0
 8018b30:	fa03 f20e 	lsl.w	r2, r3, lr
 8018b34:	1880      	adds	r0, r0, r2
 8018b36:	fa43 f305 	asr.w	r3, r3, r5
 8018b3a:	4159      	adcs	r1, r3
 8018b3c:	e00e      	b.n	8018b5c <__adddf3+0xd0>
 8018b3e:	f1a5 0520 	sub.w	r5, r5, #32
 8018b42:	f10e 0e20 	add.w	lr, lr, #32
 8018b46:	2a01      	cmp	r2, #1
 8018b48:	fa03 fc0e 	lsl.w	ip, r3, lr
 8018b4c:	bf28      	it	cs
 8018b4e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8018b52:	fa43 f305 	asr.w	r3, r3, r5
 8018b56:	18c0      	adds	r0, r0, r3
 8018b58:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8018b5c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8018b60:	d507      	bpl.n	8018b72 <__adddf3+0xe6>
 8018b62:	f04f 0e00 	mov.w	lr, #0
 8018b66:	f1dc 0c00 	rsbs	ip, ip, #0
 8018b6a:	eb7e 0000 	sbcs.w	r0, lr, r0
 8018b6e:	eb6e 0101 	sbc.w	r1, lr, r1
 8018b72:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8018b76:	d31b      	bcc.n	8018bb0 <__adddf3+0x124>
 8018b78:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8018b7c:	d30c      	bcc.n	8018b98 <__adddf3+0x10c>
 8018b7e:	0849      	lsrs	r1, r1, #1
 8018b80:	ea5f 0030 	movs.w	r0, r0, rrx
 8018b84:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8018b88:	f104 0401 	add.w	r4, r4, #1
 8018b8c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8018b90:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8018b94:	f080 809a 	bcs.w	8018ccc <__adddf3+0x240>
 8018b98:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8018b9c:	bf08      	it	eq
 8018b9e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8018ba2:	f150 0000 	adcs.w	r0, r0, #0
 8018ba6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8018baa:	ea41 0105 	orr.w	r1, r1, r5
 8018bae:	bd30      	pop	{r4, r5, pc}
 8018bb0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8018bb4:	4140      	adcs	r0, r0
 8018bb6:	eb41 0101 	adc.w	r1, r1, r1
 8018bba:	3c01      	subs	r4, #1
 8018bbc:	bf28      	it	cs
 8018bbe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8018bc2:	d2e9      	bcs.n	8018b98 <__adddf3+0x10c>
 8018bc4:	f091 0f00 	teq	r1, #0
 8018bc8:	bf04      	itt	eq
 8018bca:	4601      	moveq	r1, r0
 8018bcc:	2000      	moveq	r0, #0
 8018bce:	fab1 f381 	clz	r3, r1
 8018bd2:	bf08      	it	eq
 8018bd4:	3320      	addeq	r3, #32
 8018bd6:	f1a3 030b 	sub.w	r3, r3, #11
 8018bda:	f1b3 0220 	subs.w	r2, r3, #32
 8018bde:	da0c      	bge.n	8018bfa <__adddf3+0x16e>
 8018be0:	320c      	adds	r2, #12
 8018be2:	dd08      	ble.n	8018bf6 <__adddf3+0x16a>
 8018be4:	f102 0c14 	add.w	ip, r2, #20
 8018be8:	f1c2 020c 	rsb	r2, r2, #12
 8018bec:	fa01 f00c 	lsl.w	r0, r1, ip
 8018bf0:	fa21 f102 	lsr.w	r1, r1, r2
 8018bf4:	e00c      	b.n	8018c10 <__adddf3+0x184>
 8018bf6:	f102 0214 	add.w	r2, r2, #20
 8018bfa:	bfd8      	it	le
 8018bfc:	f1c2 0c20 	rsble	ip, r2, #32
 8018c00:	fa01 f102 	lsl.w	r1, r1, r2
 8018c04:	fa20 fc0c 	lsr.w	ip, r0, ip
 8018c08:	bfdc      	itt	le
 8018c0a:	ea41 010c 	orrle.w	r1, r1, ip
 8018c0e:	4090      	lslle	r0, r2
 8018c10:	1ae4      	subs	r4, r4, r3
 8018c12:	bfa2      	ittt	ge
 8018c14:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8018c18:	4329      	orrge	r1, r5
 8018c1a:	bd30      	popge	{r4, r5, pc}
 8018c1c:	ea6f 0404 	mvn.w	r4, r4
 8018c20:	3c1f      	subs	r4, #31
 8018c22:	da1c      	bge.n	8018c5e <__adddf3+0x1d2>
 8018c24:	340c      	adds	r4, #12
 8018c26:	dc0e      	bgt.n	8018c46 <__adddf3+0x1ba>
 8018c28:	f104 0414 	add.w	r4, r4, #20
 8018c2c:	f1c4 0220 	rsb	r2, r4, #32
 8018c30:	fa20 f004 	lsr.w	r0, r0, r4
 8018c34:	fa01 f302 	lsl.w	r3, r1, r2
 8018c38:	ea40 0003 	orr.w	r0, r0, r3
 8018c3c:	fa21 f304 	lsr.w	r3, r1, r4
 8018c40:	ea45 0103 	orr.w	r1, r5, r3
 8018c44:	bd30      	pop	{r4, r5, pc}
 8018c46:	f1c4 040c 	rsb	r4, r4, #12
 8018c4a:	f1c4 0220 	rsb	r2, r4, #32
 8018c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8018c52:	fa01 f304 	lsl.w	r3, r1, r4
 8018c56:	ea40 0003 	orr.w	r0, r0, r3
 8018c5a:	4629      	mov	r1, r5
 8018c5c:	bd30      	pop	{r4, r5, pc}
 8018c5e:	fa21 f004 	lsr.w	r0, r1, r4
 8018c62:	4629      	mov	r1, r5
 8018c64:	bd30      	pop	{r4, r5, pc}
 8018c66:	f094 0f00 	teq	r4, #0
 8018c6a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8018c6e:	bf06      	itte	eq
 8018c70:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8018c74:	3401      	addeq	r4, #1
 8018c76:	3d01      	subne	r5, #1
 8018c78:	e74e      	b.n	8018b18 <__adddf3+0x8c>
 8018c7a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8018c7e:	bf18      	it	ne
 8018c80:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8018c84:	d029      	beq.n	8018cda <__adddf3+0x24e>
 8018c86:	ea94 0f05 	teq	r4, r5
 8018c8a:	bf08      	it	eq
 8018c8c:	ea90 0f02 	teqeq	r0, r2
 8018c90:	d005      	beq.n	8018c9e <__adddf3+0x212>
 8018c92:	ea54 0c00 	orrs.w	ip, r4, r0
 8018c96:	bf04      	itt	eq
 8018c98:	4619      	moveq	r1, r3
 8018c9a:	4610      	moveq	r0, r2
 8018c9c:	bd30      	pop	{r4, r5, pc}
 8018c9e:	ea91 0f03 	teq	r1, r3
 8018ca2:	bf1e      	ittt	ne
 8018ca4:	2100      	movne	r1, #0
 8018ca6:	2000      	movne	r0, #0
 8018ca8:	bd30      	popne	{r4, r5, pc}
 8018caa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8018cae:	d105      	bne.n	8018cbc <__adddf3+0x230>
 8018cb0:	0040      	lsls	r0, r0, #1
 8018cb2:	4149      	adcs	r1, r1
 8018cb4:	bf28      	it	cs
 8018cb6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8018cba:	bd30      	pop	{r4, r5, pc}
 8018cbc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8018cc0:	bf3c      	itt	cc
 8018cc2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8018cc6:	bd30      	popcc	{r4, r5, pc}
 8018cc8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8018ccc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8018cd0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8018cd4:	f04f 0000 	mov.w	r0, #0
 8018cd8:	bd30      	pop	{r4, r5, pc}
 8018cda:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8018cde:	bf1a      	itte	ne
 8018ce0:	4619      	movne	r1, r3
 8018ce2:	4610      	movne	r0, r2
 8018ce4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8018ce8:	bf1c      	itt	ne
 8018cea:	460b      	movne	r3, r1
 8018cec:	4602      	movne	r2, r0
 8018cee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8018cf2:	bf06      	itte	eq
 8018cf4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8018cf8:	ea91 0f03 	teqeq	r1, r3
 8018cfc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8018d00:	bd30      	pop	{r4, r5, pc}
 8018d02:	bf00      	nop

08018d04 <__aeabi_ui2d>:
 8018d04:	f090 0f00 	teq	r0, #0
 8018d08:	bf04      	itt	eq
 8018d0a:	2100      	moveq	r1, #0
 8018d0c:	4770      	bxeq	lr
 8018d0e:	b530      	push	{r4, r5, lr}
 8018d10:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8018d14:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8018d18:	f04f 0500 	mov.w	r5, #0
 8018d1c:	f04f 0100 	mov.w	r1, #0
 8018d20:	e750      	b.n	8018bc4 <__adddf3+0x138>
 8018d22:	bf00      	nop

08018d24 <__aeabi_i2d>:
 8018d24:	f090 0f00 	teq	r0, #0
 8018d28:	bf04      	itt	eq
 8018d2a:	2100      	moveq	r1, #0
 8018d2c:	4770      	bxeq	lr
 8018d2e:	b530      	push	{r4, r5, lr}
 8018d30:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8018d34:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8018d38:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8018d3c:	bf48      	it	mi
 8018d3e:	4240      	negmi	r0, r0
 8018d40:	f04f 0100 	mov.w	r1, #0
 8018d44:	e73e      	b.n	8018bc4 <__adddf3+0x138>
 8018d46:	bf00      	nop

08018d48 <__aeabi_f2d>:
 8018d48:	0042      	lsls	r2, r0, #1
 8018d4a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8018d4e:	ea4f 0131 	mov.w	r1, r1, rrx
 8018d52:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8018d56:	bf1f      	itttt	ne
 8018d58:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8018d5c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8018d60:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8018d64:	4770      	bxne	lr
 8018d66:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8018d6a:	bf08      	it	eq
 8018d6c:	4770      	bxeq	lr
 8018d6e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8018d72:	bf04      	itt	eq
 8018d74:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8018d78:	4770      	bxeq	lr
 8018d7a:	b530      	push	{r4, r5, lr}
 8018d7c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8018d80:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8018d84:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8018d88:	e71c      	b.n	8018bc4 <__adddf3+0x138>
 8018d8a:	bf00      	nop

08018d8c <__aeabi_ul2d>:
 8018d8c:	ea50 0201 	orrs.w	r2, r0, r1
 8018d90:	bf08      	it	eq
 8018d92:	4770      	bxeq	lr
 8018d94:	b530      	push	{r4, r5, lr}
 8018d96:	f04f 0500 	mov.w	r5, #0
 8018d9a:	e00a      	b.n	8018db2 <__aeabi_l2d+0x16>

08018d9c <__aeabi_l2d>:
 8018d9c:	ea50 0201 	orrs.w	r2, r0, r1
 8018da0:	bf08      	it	eq
 8018da2:	4770      	bxeq	lr
 8018da4:	b530      	push	{r4, r5, lr}
 8018da6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8018daa:	d502      	bpl.n	8018db2 <__aeabi_l2d+0x16>
 8018dac:	4240      	negs	r0, r0
 8018dae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8018db2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8018db6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8018dba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8018dbe:	f43f aed8 	beq.w	8018b72 <__adddf3+0xe6>
 8018dc2:	f04f 0203 	mov.w	r2, #3
 8018dc6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8018dca:	bf18      	it	ne
 8018dcc:	3203      	addne	r2, #3
 8018dce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8018dd2:	bf18      	it	ne
 8018dd4:	3203      	addne	r2, #3
 8018dd6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8018dda:	f1c2 0320 	rsb	r3, r2, #32
 8018dde:	fa00 fc03 	lsl.w	ip, r0, r3
 8018de2:	fa20 f002 	lsr.w	r0, r0, r2
 8018de6:	fa01 fe03 	lsl.w	lr, r1, r3
 8018dea:	ea40 000e 	orr.w	r0, r0, lr
 8018dee:	fa21 f102 	lsr.w	r1, r1, r2
 8018df2:	4414      	add	r4, r2
 8018df4:	e6bd      	b.n	8018b72 <__adddf3+0xe6>
 8018df6:	bf00      	nop

08018df8 <__aeabi_dmul>:
 8018df8:	b570      	push	{r4, r5, r6, lr}
 8018dfa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8018dfe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8018e02:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8018e06:	bf1d      	ittte	ne
 8018e08:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8018e0c:	ea94 0f0c 	teqne	r4, ip
 8018e10:	ea95 0f0c 	teqne	r5, ip
 8018e14:	f000 f8de 	bleq	8018fd4 <__aeabi_dmul+0x1dc>
 8018e18:	442c      	add	r4, r5
 8018e1a:	ea81 0603 	eor.w	r6, r1, r3
 8018e1e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8018e22:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8018e26:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8018e2a:	bf18      	it	ne
 8018e2c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8018e30:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8018e34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018e38:	d038      	beq.n	8018eac <__aeabi_dmul+0xb4>
 8018e3a:	fba0 ce02 	umull	ip, lr, r0, r2
 8018e3e:	f04f 0500 	mov.w	r5, #0
 8018e42:	fbe1 e502 	umlal	lr, r5, r1, r2
 8018e46:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8018e4a:	fbe0 e503 	umlal	lr, r5, r0, r3
 8018e4e:	f04f 0600 	mov.w	r6, #0
 8018e52:	fbe1 5603 	umlal	r5, r6, r1, r3
 8018e56:	f09c 0f00 	teq	ip, #0
 8018e5a:	bf18      	it	ne
 8018e5c:	f04e 0e01 	orrne.w	lr, lr, #1
 8018e60:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8018e64:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8018e68:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8018e6c:	d204      	bcs.n	8018e78 <__aeabi_dmul+0x80>
 8018e6e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8018e72:	416d      	adcs	r5, r5
 8018e74:	eb46 0606 	adc.w	r6, r6, r6
 8018e78:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8018e7c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8018e80:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8018e84:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8018e88:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8018e8c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8018e90:	bf88      	it	hi
 8018e92:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8018e96:	d81e      	bhi.n	8018ed6 <__aeabi_dmul+0xde>
 8018e98:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8018e9c:	bf08      	it	eq
 8018e9e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8018ea2:	f150 0000 	adcs.w	r0, r0, #0
 8018ea6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8018eaa:	bd70      	pop	{r4, r5, r6, pc}
 8018eac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8018eb0:	ea46 0101 	orr.w	r1, r6, r1
 8018eb4:	ea40 0002 	orr.w	r0, r0, r2
 8018eb8:	ea81 0103 	eor.w	r1, r1, r3
 8018ebc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8018ec0:	bfc2      	ittt	gt
 8018ec2:	ebd4 050c 	rsbsgt	r5, r4, ip
 8018ec6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8018eca:	bd70      	popgt	{r4, r5, r6, pc}
 8018ecc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8018ed0:	f04f 0e00 	mov.w	lr, #0
 8018ed4:	3c01      	subs	r4, #1
 8018ed6:	f300 80ab 	bgt.w	8019030 <__aeabi_dmul+0x238>
 8018eda:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8018ede:	bfde      	ittt	le
 8018ee0:	2000      	movle	r0, #0
 8018ee2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8018ee6:	bd70      	pople	{r4, r5, r6, pc}
 8018ee8:	f1c4 0400 	rsb	r4, r4, #0
 8018eec:	3c20      	subs	r4, #32
 8018eee:	da35      	bge.n	8018f5c <__aeabi_dmul+0x164>
 8018ef0:	340c      	adds	r4, #12
 8018ef2:	dc1b      	bgt.n	8018f2c <__aeabi_dmul+0x134>
 8018ef4:	f104 0414 	add.w	r4, r4, #20
 8018ef8:	f1c4 0520 	rsb	r5, r4, #32
 8018efc:	fa00 f305 	lsl.w	r3, r0, r5
 8018f00:	fa20 f004 	lsr.w	r0, r0, r4
 8018f04:	fa01 f205 	lsl.w	r2, r1, r5
 8018f08:	ea40 0002 	orr.w	r0, r0, r2
 8018f0c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8018f10:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8018f14:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8018f18:	fa21 f604 	lsr.w	r6, r1, r4
 8018f1c:	eb42 0106 	adc.w	r1, r2, r6
 8018f20:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8018f24:	bf08      	it	eq
 8018f26:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8018f2a:	bd70      	pop	{r4, r5, r6, pc}
 8018f2c:	f1c4 040c 	rsb	r4, r4, #12
 8018f30:	f1c4 0520 	rsb	r5, r4, #32
 8018f34:	fa00 f304 	lsl.w	r3, r0, r4
 8018f38:	fa20 f005 	lsr.w	r0, r0, r5
 8018f3c:	fa01 f204 	lsl.w	r2, r1, r4
 8018f40:	ea40 0002 	orr.w	r0, r0, r2
 8018f44:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8018f48:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8018f4c:	f141 0100 	adc.w	r1, r1, #0
 8018f50:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8018f54:	bf08      	it	eq
 8018f56:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8018f5a:	bd70      	pop	{r4, r5, r6, pc}
 8018f5c:	f1c4 0520 	rsb	r5, r4, #32
 8018f60:	fa00 f205 	lsl.w	r2, r0, r5
 8018f64:	ea4e 0e02 	orr.w	lr, lr, r2
 8018f68:	fa20 f304 	lsr.w	r3, r0, r4
 8018f6c:	fa01 f205 	lsl.w	r2, r1, r5
 8018f70:	ea43 0302 	orr.w	r3, r3, r2
 8018f74:	fa21 f004 	lsr.w	r0, r1, r4
 8018f78:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8018f7c:	fa21 f204 	lsr.w	r2, r1, r4
 8018f80:	ea20 0002 	bic.w	r0, r0, r2
 8018f84:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8018f88:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8018f8c:	bf08      	it	eq
 8018f8e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8018f92:	bd70      	pop	{r4, r5, r6, pc}
 8018f94:	f094 0f00 	teq	r4, #0
 8018f98:	d10f      	bne.n	8018fba <__aeabi_dmul+0x1c2>
 8018f9a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8018f9e:	0040      	lsls	r0, r0, #1
 8018fa0:	eb41 0101 	adc.w	r1, r1, r1
 8018fa4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8018fa8:	bf08      	it	eq
 8018faa:	3c01      	subeq	r4, #1
 8018fac:	d0f7      	beq.n	8018f9e <__aeabi_dmul+0x1a6>
 8018fae:	ea41 0106 	orr.w	r1, r1, r6
 8018fb2:	f095 0f00 	teq	r5, #0
 8018fb6:	bf18      	it	ne
 8018fb8:	4770      	bxne	lr
 8018fba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8018fbe:	0052      	lsls	r2, r2, #1
 8018fc0:	eb43 0303 	adc.w	r3, r3, r3
 8018fc4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8018fc8:	bf08      	it	eq
 8018fca:	3d01      	subeq	r5, #1
 8018fcc:	d0f7      	beq.n	8018fbe <__aeabi_dmul+0x1c6>
 8018fce:	ea43 0306 	orr.w	r3, r3, r6
 8018fd2:	4770      	bx	lr
 8018fd4:	ea94 0f0c 	teq	r4, ip
 8018fd8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8018fdc:	bf18      	it	ne
 8018fde:	ea95 0f0c 	teqne	r5, ip
 8018fe2:	d00c      	beq.n	8018ffe <__aeabi_dmul+0x206>
 8018fe4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8018fe8:	bf18      	it	ne
 8018fea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8018fee:	d1d1      	bne.n	8018f94 <__aeabi_dmul+0x19c>
 8018ff0:	ea81 0103 	eor.w	r1, r1, r3
 8018ff4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8018ff8:	f04f 0000 	mov.w	r0, #0
 8018ffc:	bd70      	pop	{r4, r5, r6, pc}
 8018ffe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8019002:	bf06      	itte	eq
 8019004:	4610      	moveq	r0, r2
 8019006:	4619      	moveq	r1, r3
 8019008:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801900c:	d019      	beq.n	8019042 <__aeabi_dmul+0x24a>
 801900e:	ea94 0f0c 	teq	r4, ip
 8019012:	d102      	bne.n	801901a <__aeabi_dmul+0x222>
 8019014:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8019018:	d113      	bne.n	8019042 <__aeabi_dmul+0x24a>
 801901a:	ea95 0f0c 	teq	r5, ip
 801901e:	d105      	bne.n	801902c <__aeabi_dmul+0x234>
 8019020:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8019024:	bf1c      	itt	ne
 8019026:	4610      	movne	r0, r2
 8019028:	4619      	movne	r1, r3
 801902a:	d10a      	bne.n	8019042 <__aeabi_dmul+0x24a>
 801902c:	ea81 0103 	eor.w	r1, r1, r3
 8019030:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8019034:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8019038:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801903c:	f04f 0000 	mov.w	r0, #0
 8019040:	bd70      	pop	{r4, r5, r6, pc}
 8019042:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8019046:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 801904a:	bd70      	pop	{r4, r5, r6, pc}

0801904c <__aeabi_ddiv>:
 801904c:	b570      	push	{r4, r5, r6, lr}
 801904e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8019052:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8019056:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801905a:	bf1d      	ittte	ne
 801905c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8019060:	ea94 0f0c 	teqne	r4, ip
 8019064:	ea95 0f0c 	teqne	r5, ip
 8019068:	f000 f8a7 	bleq	80191ba <__aeabi_ddiv+0x16e>
 801906c:	eba4 0405 	sub.w	r4, r4, r5
 8019070:	ea81 0e03 	eor.w	lr, r1, r3
 8019074:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8019078:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801907c:	f000 8088 	beq.w	8019190 <__aeabi_ddiv+0x144>
 8019080:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8019084:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8019088:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 801908c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8019090:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8019094:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8019098:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 801909c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80190a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80190a4:	429d      	cmp	r5, r3
 80190a6:	bf08      	it	eq
 80190a8:	4296      	cmpeq	r6, r2
 80190aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80190ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80190b2:	d202      	bcs.n	80190ba <__aeabi_ddiv+0x6e>
 80190b4:	085b      	lsrs	r3, r3, #1
 80190b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80190ba:	1ab6      	subs	r6, r6, r2
 80190bc:	eb65 0503 	sbc.w	r5, r5, r3
 80190c0:	085b      	lsrs	r3, r3, #1
 80190c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80190c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80190ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80190ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80190d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80190d6:	bf22      	ittt	cs
 80190d8:	1ab6      	subcs	r6, r6, r2
 80190da:	4675      	movcs	r5, lr
 80190dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80190e0:	085b      	lsrs	r3, r3, #1
 80190e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80190e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80190ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80190ee:	bf22      	ittt	cs
 80190f0:	1ab6      	subcs	r6, r6, r2
 80190f2:	4675      	movcs	r5, lr
 80190f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80190f8:	085b      	lsrs	r3, r3, #1
 80190fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80190fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8019102:	eb75 0e03 	sbcs.w	lr, r5, r3
 8019106:	bf22      	ittt	cs
 8019108:	1ab6      	subcs	r6, r6, r2
 801910a:	4675      	movcs	r5, lr
 801910c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8019110:	085b      	lsrs	r3, r3, #1
 8019112:	ea4f 0232 	mov.w	r2, r2, rrx
 8019116:	ebb6 0e02 	subs.w	lr, r6, r2
 801911a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801911e:	bf22      	ittt	cs
 8019120:	1ab6      	subcs	r6, r6, r2
 8019122:	4675      	movcs	r5, lr
 8019124:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8019128:	ea55 0e06 	orrs.w	lr, r5, r6
 801912c:	d018      	beq.n	8019160 <__aeabi_ddiv+0x114>
 801912e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8019132:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8019136:	ea4f 1606 	mov.w	r6, r6, lsl #4
 801913a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801913e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8019142:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8019146:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 801914a:	d1c0      	bne.n	80190ce <__aeabi_ddiv+0x82>
 801914c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8019150:	d10b      	bne.n	801916a <__aeabi_ddiv+0x11e>
 8019152:	ea41 0100 	orr.w	r1, r1, r0
 8019156:	f04f 0000 	mov.w	r0, #0
 801915a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 801915e:	e7b6      	b.n	80190ce <__aeabi_ddiv+0x82>
 8019160:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8019164:	bf04      	itt	eq
 8019166:	4301      	orreq	r1, r0
 8019168:	2000      	moveq	r0, #0
 801916a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 801916e:	bf88      	it	hi
 8019170:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8019174:	f63f aeaf 	bhi.w	8018ed6 <__aeabi_dmul+0xde>
 8019178:	ebb5 0c03 	subs.w	ip, r5, r3
 801917c:	bf04      	itt	eq
 801917e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8019182:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8019186:	f150 0000 	adcs.w	r0, r0, #0
 801918a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801918e:	bd70      	pop	{r4, r5, r6, pc}
 8019190:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8019194:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8019198:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 801919c:	bfc2      	ittt	gt
 801919e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80191a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80191a6:	bd70      	popgt	{r4, r5, r6, pc}
 80191a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80191ac:	f04f 0e00 	mov.w	lr, #0
 80191b0:	3c01      	subs	r4, #1
 80191b2:	e690      	b.n	8018ed6 <__aeabi_dmul+0xde>
 80191b4:	ea45 0e06 	orr.w	lr, r5, r6
 80191b8:	e68d      	b.n	8018ed6 <__aeabi_dmul+0xde>
 80191ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80191be:	ea94 0f0c 	teq	r4, ip
 80191c2:	bf08      	it	eq
 80191c4:	ea95 0f0c 	teqeq	r5, ip
 80191c8:	f43f af3b 	beq.w	8019042 <__aeabi_dmul+0x24a>
 80191cc:	ea94 0f0c 	teq	r4, ip
 80191d0:	d10a      	bne.n	80191e8 <__aeabi_ddiv+0x19c>
 80191d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80191d6:	f47f af34 	bne.w	8019042 <__aeabi_dmul+0x24a>
 80191da:	ea95 0f0c 	teq	r5, ip
 80191de:	f47f af25 	bne.w	801902c <__aeabi_dmul+0x234>
 80191e2:	4610      	mov	r0, r2
 80191e4:	4619      	mov	r1, r3
 80191e6:	e72c      	b.n	8019042 <__aeabi_dmul+0x24a>
 80191e8:	ea95 0f0c 	teq	r5, ip
 80191ec:	d106      	bne.n	80191fc <__aeabi_ddiv+0x1b0>
 80191ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80191f2:	f43f aefd 	beq.w	8018ff0 <__aeabi_dmul+0x1f8>
 80191f6:	4610      	mov	r0, r2
 80191f8:	4619      	mov	r1, r3
 80191fa:	e722      	b.n	8019042 <__aeabi_dmul+0x24a>
 80191fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8019200:	bf18      	it	ne
 8019202:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8019206:	f47f aec5 	bne.w	8018f94 <__aeabi_dmul+0x19c>
 801920a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 801920e:	f47f af0d 	bne.w	801902c <__aeabi_dmul+0x234>
 8019212:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8019216:	f47f aeeb 	bne.w	8018ff0 <__aeabi_dmul+0x1f8>
 801921a:	e712      	b.n	8019042 <__aeabi_dmul+0x24a>

0801921c <__gedf2>:
 801921c:	f04f 3cff 	mov.w	ip, #4294967295
 8019220:	e006      	b.n	8019230 <__cmpdf2+0x4>
 8019222:	bf00      	nop

08019224 <__ledf2>:
 8019224:	f04f 0c01 	mov.w	ip, #1
 8019228:	e002      	b.n	8019230 <__cmpdf2+0x4>
 801922a:	bf00      	nop

0801922c <__cmpdf2>:
 801922c:	f04f 0c01 	mov.w	ip, #1
 8019230:	f84d cd04 	str.w	ip, [sp, #-4]!
 8019234:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8019238:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 801923c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8019240:	bf18      	it	ne
 8019242:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8019246:	d01b      	beq.n	8019280 <__cmpdf2+0x54>
 8019248:	b001      	add	sp, #4
 801924a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 801924e:	bf0c      	ite	eq
 8019250:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8019254:	ea91 0f03 	teqne	r1, r3
 8019258:	bf02      	ittt	eq
 801925a:	ea90 0f02 	teqeq	r0, r2
 801925e:	2000      	moveq	r0, #0
 8019260:	4770      	bxeq	lr
 8019262:	f110 0f00 	cmn.w	r0, #0
 8019266:	ea91 0f03 	teq	r1, r3
 801926a:	bf58      	it	pl
 801926c:	4299      	cmppl	r1, r3
 801926e:	bf08      	it	eq
 8019270:	4290      	cmpeq	r0, r2
 8019272:	bf2c      	ite	cs
 8019274:	17d8      	asrcs	r0, r3, #31
 8019276:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 801927a:	f040 0001 	orr.w	r0, r0, #1
 801927e:	4770      	bx	lr
 8019280:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8019284:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8019288:	d102      	bne.n	8019290 <__cmpdf2+0x64>
 801928a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 801928e:	d107      	bne.n	80192a0 <__cmpdf2+0x74>
 8019290:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8019294:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8019298:	d1d6      	bne.n	8019248 <__cmpdf2+0x1c>
 801929a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 801929e:	d0d3      	beq.n	8019248 <__cmpdf2+0x1c>
 80192a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80192a4:	4770      	bx	lr
 80192a6:	bf00      	nop

080192a8 <__aeabi_cdrcmple>:
 80192a8:	4684      	mov	ip, r0
 80192aa:	4610      	mov	r0, r2
 80192ac:	4662      	mov	r2, ip
 80192ae:	468c      	mov	ip, r1
 80192b0:	4619      	mov	r1, r3
 80192b2:	4663      	mov	r3, ip
 80192b4:	e000      	b.n	80192b8 <__aeabi_cdcmpeq>
 80192b6:	bf00      	nop

080192b8 <__aeabi_cdcmpeq>:
 80192b8:	b501      	push	{r0, lr}
 80192ba:	f7ff ffb7 	bl	801922c <__cmpdf2>
 80192be:	2800      	cmp	r0, #0
 80192c0:	bf48      	it	mi
 80192c2:	f110 0f00 	cmnmi.w	r0, #0
 80192c6:	bd01      	pop	{r0, pc}

080192c8 <__aeabi_dcmpeq>:
 80192c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80192cc:	f7ff fff4 	bl	80192b8 <__aeabi_cdcmpeq>
 80192d0:	bf0c      	ite	eq
 80192d2:	2001      	moveq	r0, #1
 80192d4:	2000      	movne	r0, #0
 80192d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80192da:	bf00      	nop

080192dc <__aeabi_dcmplt>:
 80192dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80192e0:	f7ff ffea 	bl	80192b8 <__aeabi_cdcmpeq>
 80192e4:	bf34      	ite	cc
 80192e6:	2001      	movcc	r0, #1
 80192e8:	2000      	movcs	r0, #0
 80192ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80192ee:	bf00      	nop

080192f0 <__aeabi_dcmple>:
 80192f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80192f4:	f7ff ffe0 	bl	80192b8 <__aeabi_cdcmpeq>
 80192f8:	bf94      	ite	ls
 80192fa:	2001      	movls	r0, #1
 80192fc:	2000      	movhi	r0, #0
 80192fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8019302:	bf00      	nop

08019304 <__aeabi_dcmpge>:
 8019304:	f84d ed08 	str.w	lr, [sp, #-8]!
 8019308:	f7ff ffce 	bl	80192a8 <__aeabi_cdrcmple>
 801930c:	bf94      	ite	ls
 801930e:	2001      	movls	r0, #1
 8019310:	2000      	movhi	r0, #0
 8019312:	f85d fb08 	ldr.w	pc, [sp], #8
 8019316:	bf00      	nop

08019318 <__aeabi_dcmpgt>:
 8019318:	f84d ed08 	str.w	lr, [sp, #-8]!
 801931c:	f7ff ffc4 	bl	80192a8 <__aeabi_cdrcmple>
 8019320:	bf34      	ite	cc
 8019322:	2001      	movcc	r0, #1
 8019324:	2000      	movcs	r0, #0
 8019326:	f85d fb08 	ldr.w	pc, [sp], #8
 801932a:	bf00      	nop

0801932c <__aeabi_dcmpun>:
 801932c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8019330:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8019334:	d102      	bne.n	801933c <__aeabi_dcmpun+0x10>
 8019336:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 801933a:	d10a      	bne.n	8019352 <__aeabi_dcmpun+0x26>
 801933c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8019340:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8019344:	d102      	bne.n	801934c <__aeabi_dcmpun+0x20>
 8019346:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 801934a:	d102      	bne.n	8019352 <__aeabi_dcmpun+0x26>
 801934c:	f04f 0000 	mov.w	r0, #0
 8019350:	4770      	bx	lr
 8019352:	f04f 0001 	mov.w	r0, #1
 8019356:	4770      	bx	lr

08019358 <__aeabi_d2iz>:
 8019358:	ea4f 0241 	mov.w	r2, r1, lsl #1
 801935c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8019360:	d215      	bcs.n	801938e <__aeabi_d2iz+0x36>
 8019362:	d511      	bpl.n	8019388 <__aeabi_d2iz+0x30>
 8019364:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8019368:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 801936c:	d912      	bls.n	8019394 <__aeabi_d2iz+0x3c>
 801936e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8019372:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8019376:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 801937a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 801937e:	fa23 f002 	lsr.w	r0, r3, r2
 8019382:	bf18      	it	ne
 8019384:	4240      	negne	r0, r0
 8019386:	4770      	bx	lr
 8019388:	f04f 0000 	mov.w	r0, #0
 801938c:	4770      	bx	lr
 801938e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8019392:	d105      	bne.n	80193a0 <__aeabi_d2iz+0x48>
 8019394:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8019398:	bf08      	it	eq
 801939a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 801939e:	4770      	bx	lr
 80193a0:	f04f 0000 	mov.w	r0, #0
 80193a4:	4770      	bx	lr
 80193a6:	bf00      	nop

080193a8 <__aeabi_d2uiz>:
 80193a8:	004a      	lsls	r2, r1, #1
 80193aa:	d211      	bcs.n	80193d0 <__aeabi_d2uiz+0x28>
 80193ac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80193b0:	d211      	bcs.n	80193d6 <__aeabi_d2uiz+0x2e>
 80193b2:	d50d      	bpl.n	80193d0 <__aeabi_d2uiz+0x28>
 80193b4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80193b8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80193bc:	d40e      	bmi.n	80193dc <__aeabi_d2uiz+0x34>
 80193be:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80193c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80193c6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80193ca:	fa23 f002 	lsr.w	r0, r3, r2
 80193ce:	4770      	bx	lr
 80193d0:	f04f 0000 	mov.w	r0, #0
 80193d4:	4770      	bx	lr
 80193d6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80193da:	d102      	bne.n	80193e2 <__aeabi_d2uiz+0x3a>
 80193dc:	f04f 30ff 	mov.w	r0, #4294967295
 80193e0:	4770      	bx	lr
 80193e2:	f04f 0000 	mov.w	r0, #0
 80193e6:	4770      	bx	lr

080193e8 <__aeabi_d2f>:
 80193e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80193ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80193f0:	bf24      	itt	cs
 80193f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80193f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80193fa:	d90d      	bls.n	8019418 <__aeabi_d2f+0x30>
 80193fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8019400:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8019404:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8019408:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 801940c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8019410:	bf08      	it	eq
 8019412:	f020 0001 	biceq.w	r0, r0, #1
 8019416:	4770      	bx	lr
 8019418:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 801941c:	d121      	bne.n	8019462 <__aeabi_d2f+0x7a>
 801941e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8019422:	bfbc      	itt	lt
 8019424:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8019428:	4770      	bxlt	lr
 801942a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801942e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8019432:	f1c2 0218 	rsb	r2, r2, #24
 8019436:	f1c2 0c20 	rsb	ip, r2, #32
 801943a:	fa10 f30c 	lsls.w	r3, r0, ip
 801943e:	fa20 f002 	lsr.w	r0, r0, r2
 8019442:	bf18      	it	ne
 8019444:	f040 0001 	orrne.w	r0, r0, #1
 8019448:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 801944c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8019450:	fa03 fc0c 	lsl.w	ip, r3, ip
 8019454:	ea40 000c 	orr.w	r0, r0, ip
 8019458:	fa23 f302 	lsr.w	r3, r3, r2
 801945c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019460:	e7cc      	b.n	80193fc <__aeabi_d2f+0x14>
 8019462:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8019466:	d107      	bne.n	8019478 <__aeabi_d2f+0x90>
 8019468:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 801946c:	bf1e      	ittt	ne
 801946e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8019472:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8019476:	4770      	bxne	lr
 8019478:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 801947c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8019480:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8019484:	4770      	bx	lr
 8019486:	bf00      	nop

08019488 <__aeabi_d2lz>:
 8019488:	b538      	push	{r3, r4, r5, lr}
 801948a:	2200      	movs	r2, #0
 801948c:	2300      	movs	r3, #0
 801948e:	4604      	mov	r4, r0
 8019490:	460d      	mov	r5, r1
 8019492:	f7ff ff23 	bl	80192dc <__aeabi_dcmplt>
 8019496:	b928      	cbnz	r0, 80194a4 <__aeabi_d2lz+0x1c>
 8019498:	4620      	mov	r0, r4
 801949a:	4629      	mov	r1, r5
 801949c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80194a0:	f000 b80a 	b.w	80194b8 <__aeabi_d2ulz>
 80194a4:	4620      	mov	r0, r4
 80194a6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 80194aa:	f000 f805 	bl	80194b8 <__aeabi_d2ulz>
 80194ae:	4240      	negs	r0, r0
 80194b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80194b4:	bd38      	pop	{r3, r4, r5, pc}
 80194b6:	bf00      	nop

080194b8 <__aeabi_d2ulz>:
 80194b8:	b5d0      	push	{r4, r6, r7, lr}
 80194ba:	4b0c      	ldr	r3, [pc, #48]	; (80194ec <__aeabi_d2ulz+0x34>)
 80194bc:	2200      	movs	r2, #0
 80194be:	4606      	mov	r6, r0
 80194c0:	460f      	mov	r7, r1
 80194c2:	f7ff fc99 	bl	8018df8 <__aeabi_dmul>
 80194c6:	f7ff ff6f 	bl	80193a8 <__aeabi_d2uiz>
 80194ca:	4604      	mov	r4, r0
 80194cc:	f7ff fc1a 	bl	8018d04 <__aeabi_ui2d>
 80194d0:	4b07      	ldr	r3, [pc, #28]	; (80194f0 <__aeabi_d2ulz+0x38>)
 80194d2:	2200      	movs	r2, #0
 80194d4:	f7ff fc90 	bl	8018df8 <__aeabi_dmul>
 80194d8:	4602      	mov	r2, r0
 80194da:	460b      	mov	r3, r1
 80194dc:	4630      	mov	r0, r6
 80194de:	4639      	mov	r1, r7
 80194e0:	f7ff fad2 	bl	8018a88 <__aeabi_dsub>
 80194e4:	f7ff ff60 	bl	80193a8 <__aeabi_d2uiz>
 80194e8:	4621      	mov	r1, r4
 80194ea:	bdd0      	pop	{r4, r6, r7, pc}
 80194ec:	3df00000 	.word	0x3df00000
 80194f0:	41f00000 	.word	0x41f00000

080194f4 <__aeabi_uldivmod>:
 80194f4:	b953      	cbnz	r3, 801950c <__aeabi_uldivmod+0x18>
 80194f6:	b94a      	cbnz	r2, 801950c <__aeabi_uldivmod+0x18>
 80194f8:	2900      	cmp	r1, #0
 80194fa:	bf08      	it	eq
 80194fc:	2800      	cmpeq	r0, #0
 80194fe:	bf1c      	itt	ne
 8019500:	f04f 31ff 	movne.w	r1, #4294967295
 8019504:	f04f 30ff 	movne.w	r0, #4294967295
 8019508:	f000 b974 	b.w	80197f4 <__aeabi_idiv0>
 801950c:	f1ad 0c08 	sub.w	ip, sp, #8
 8019510:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8019514:	f000 f806 	bl	8019524 <__udivmoddi4>
 8019518:	f8dd e004 	ldr.w	lr, [sp, #4]
 801951c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019520:	b004      	add	sp, #16
 8019522:	4770      	bx	lr

08019524 <__udivmoddi4>:
 8019524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019528:	9d08      	ldr	r5, [sp, #32]
 801952a:	4604      	mov	r4, r0
 801952c:	468e      	mov	lr, r1
 801952e:	2b00      	cmp	r3, #0
 8019530:	d14d      	bne.n	80195ce <__udivmoddi4+0xaa>
 8019532:	428a      	cmp	r2, r1
 8019534:	4694      	mov	ip, r2
 8019536:	d969      	bls.n	801960c <__udivmoddi4+0xe8>
 8019538:	fab2 f282 	clz	r2, r2
 801953c:	b152      	cbz	r2, 8019554 <__udivmoddi4+0x30>
 801953e:	fa01 f302 	lsl.w	r3, r1, r2
 8019542:	f1c2 0120 	rsb	r1, r2, #32
 8019546:	fa20 f101 	lsr.w	r1, r0, r1
 801954a:	fa0c fc02 	lsl.w	ip, ip, r2
 801954e:	ea41 0e03 	orr.w	lr, r1, r3
 8019552:	4094      	lsls	r4, r2
 8019554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8019558:	0c21      	lsrs	r1, r4, #16
 801955a:	fbbe f6f8 	udiv	r6, lr, r8
 801955e:	fa1f f78c 	uxth.w	r7, ip
 8019562:	fb08 e316 	mls	r3, r8, r6, lr
 8019566:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801956a:	fb06 f107 	mul.w	r1, r6, r7
 801956e:	4299      	cmp	r1, r3
 8019570:	d90a      	bls.n	8019588 <__udivmoddi4+0x64>
 8019572:	eb1c 0303 	adds.w	r3, ip, r3
 8019576:	f106 30ff 	add.w	r0, r6, #4294967295
 801957a:	f080 811f 	bcs.w	80197bc <__udivmoddi4+0x298>
 801957e:	4299      	cmp	r1, r3
 8019580:	f240 811c 	bls.w	80197bc <__udivmoddi4+0x298>
 8019584:	3e02      	subs	r6, #2
 8019586:	4463      	add	r3, ip
 8019588:	1a5b      	subs	r3, r3, r1
 801958a:	b2a4      	uxth	r4, r4
 801958c:	fbb3 f0f8 	udiv	r0, r3, r8
 8019590:	fb08 3310 	mls	r3, r8, r0, r3
 8019594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8019598:	fb00 f707 	mul.w	r7, r0, r7
 801959c:	42a7      	cmp	r7, r4
 801959e:	d90a      	bls.n	80195b6 <__udivmoddi4+0x92>
 80195a0:	eb1c 0404 	adds.w	r4, ip, r4
 80195a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80195a8:	f080 810a 	bcs.w	80197c0 <__udivmoddi4+0x29c>
 80195ac:	42a7      	cmp	r7, r4
 80195ae:	f240 8107 	bls.w	80197c0 <__udivmoddi4+0x29c>
 80195b2:	4464      	add	r4, ip
 80195b4:	3802      	subs	r0, #2
 80195b6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80195ba:	1be4      	subs	r4, r4, r7
 80195bc:	2600      	movs	r6, #0
 80195be:	b11d      	cbz	r5, 80195c8 <__udivmoddi4+0xa4>
 80195c0:	40d4      	lsrs	r4, r2
 80195c2:	2300      	movs	r3, #0
 80195c4:	e9c5 4300 	strd	r4, r3, [r5]
 80195c8:	4631      	mov	r1, r6
 80195ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80195ce:	428b      	cmp	r3, r1
 80195d0:	d909      	bls.n	80195e6 <__udivmoddi4+0xc2>
 80195d2:	2d00      	cmp	r5, #0
 80195d4:	f000 80ef 	beq.w	80197b6 <__udivmoddi4+0x292>
 80195d8:	2600      	movs	r6, #0
 80195da:	e9c5 0100 	strd	r0, r1, [r5]
 80195de:	4630      	mov	r0, r6
 80195e0:	4631      	mov	r1, r6
 80195e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80195e6:	fab3 f683 	clz	r6, r3
 80195ea:	2e00      	cmp	r6, #0
 80195ec:	d14a      	bne.n	8019684 <__udivmoddi4+0x160>
 80195ee:	428b      	cmp	r3, r1
 80195f0:	d302      	bcc.n	80195f8 <__udivmoddi4+0xd4>
 80195f2:	4282      	cmp	r2, r0
 80195f4:	f200 80f9 	bhi.w	80197ea <__udivmoddi4+0x2c6>
 80195f8:	1a84      	subs	r4, r0, r2
 80195fa:	eb61 0303 	sbc.w	r3, r1, r3
 80195fe:	2001      	movs	r0, #1
 8019600:	469e      	mov	lr, r3
 8019602:	2d00      	cmp	r5, #0
 8019604:	d0e0      	beq.n	80195c8 <__udivmoddi4+0xa4>
 8019606:	e9c5 4e00 	strd	r4, lr, [r5]
 801960a:	e7dd      	b.n	80195c8 <__udivmoddi4+0xa4>
 801960c:	b902      	cbnz	r2, 8019610 <__udivmoddi4+0xec>
 801960e:	deff      	udf	#255	; 0xff
 8019610:	fab2 f282 	clz	r2, r2
 8019614:	2a00      	cmp	r2, #0
 8019616:	f040 8092 	bne.w	801973e <__udivmoddi4+0x21a>
 801961a:	eba1 010c 	sub.w	r1, r1, ip
 801961e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8019622:	fa1f fe8c 	uxth.w	lr, ip
 8019626:	2601      	movs	r6, #1
 8019628:	0c20      	lsrs	r0, r4, #16
 801962a:	fbb1 f3f7 	udiv	r3, r1, r7
 801962e:	fb07 1113 	mls	r1, r7, r3, r1
 8019632:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8019636:	fb0e f003 	mul.w	r0, lr, r3
 801963a:	4288      	cmp	r0, r1
 801963c:	d908      	bls.n	8019650 <__udivmoddi4+0x12c>
 801963e:	eb1c 0101 	adds.w	r1, ip, r1
 8019642:	f103 38ff 	add.w	r8, r3, #4294967295
 8019646:	d202      	bcs.n	801964e <__udivmoddi4+0x12a>
 8019648:	4288      	cmp	r0, r1
 801964a:	f200 80cb 	bhi.w	80197e4 <__udivmoddi4+0x2c0>
 801964e:	4643      	mov	r3, r8
 8019650:	1a09      	subs	r1, r1, r0
 8019652:	b2a4      	uxth	r4, r4
 8019654:	fbb1 f0f7 	udiv	r0, r1, r7
 8019658:	fb07 1110 	mls	r1, r7, r0, r1
 801965c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8019660:	fb0e fe00 	mul.w	lr, lr, r0
 8019664:	45a6      	cmp	lr, r4
 8019666:	d908      	bls.n	801967a <__udivmoddi4+0x156>
 8019668:	eb1c 0404 	adds.w	r4, ip, r4
 801966c:	f100 31ff 	add.w	r1, r0, #4294967295
 8019670:	d202      	bcs.n	8019678 <__udivmoddi4+0x154>
 8019672:	45a6      	cmp	lr, r4
 8019674:	f200 80bb 	bhi.w	80197ee <__udivmoddi4+0x2ca>
 8019678:	4608      	mov	r0, r1
 801967a:	eba4 040e 	sub.w	r4, r4, lr
 801967e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8019682:	e79c      	b.n	80195be <__udivmoddi4+0x9a>
 8019684:	f1c6 0720 	rsb	r7, r6, #32
 8019688:	40b3      	lsls	r3, r6
 801968a:	fa22 fc07 	lsr.w	ip, r2, r7
 801968e:	ea4c 0c03 	orr.w	ip, ip, r3
 8019692:	fa20 f407 	lsr.w	r4, r0, r7
 8019696:	fa01 f306 	lsl.w	r3, r1, r6
 801969a:	431c      	orrs	r4, r3
 801969c:	40f9      	lsrs	r1, r7
 801969e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80196a2:	fa00 f306 	lsl.w	r3, r0, r6
 80196a6:	fbb1 f8f9 	udiv	r8, r1, r9
 80196aa:	0c20      	lsrs	r0, r4, #16
 80196ac:	fa1f fe8c 	uxth.w	lr, ip
 80196b0:	fb09 1118 	mls	r1, r9, r8, r1
 80196b4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80196b8:	fb08 f00e 	mul.w	r0, r8, lr
 80196bc:	4288      	cmp	r0, r1
 80196be:	fa02 f206 	lsl.w	r2, r2, r6
 80196c2:	d90b      	bls.n	80196dc <__udivmoddi4+0x1b8>
 80196c4:	eb1c 0101 	adds.w	r1, ip, r1
 80196c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80196cc:	f080 8088 	bcs.w	80197e0 <__udivmoddi4+0x2bc>
 80196d0:	4288      	cmp	r0, r1
 80196d2:	f240 8085 	bls.w	80197e0 <__udivmoddi4+0x2bc>
 80196d6:	f1a8 0802 	sub.w	r8, r8, #2
 80196da:	4461      	add	r1, ip
 80196dc:	1a09      	subs	r1, r1, r0
 80196de:	b2a4      	uxth	r4, r4
 80196e0:	fbb1 f0f9 	udiv	r0, r1, r9
 80196e4:	fb09 1110 	mls	r1, r9, r0, r1
 80196e8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80196ec:	fb00 fe0e 	mul.w	lr, r0, lr
 80196f0:	458e      	cmp	lr, r1
 80196f2:	d908      	bls.n	8019706 <__udivmoddi4+0x1e2>
 80196f4:	eb1c 0101 	adds.w	r1, ip, r1
 80196f8:	f100 34ff 	add.w	r4, r0, #4294967295
 80196fc:	d26c      	bcs.n	80197d8 <__udivmoddi4+0x2b4>
 80196fe:	458e      	cmp	lr, r1
 8019700:	d96a      	bls.n	80197d8 <__udivmoddi4+0x2b4>
 8019702:	3802      	subs	r0, #2
 8019704:	4461      	add	r1, ip
 8019706:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 801970a:	fba0 9402 	umull	r9, r4, r0, r2
 801970e:	eba1 010e 	sub.w	r1, r1, lr
 8019712:	42a1      	cmp	r1, r4
 8019714:	46c8      	mov	r8, r9
 8019716:	46a6      	mov	lr, r4
 8019718:	d356      	bcc.n	80197c8 <__udivmoddi4+0x2a4>
 801971a:	d053      	beq.n	80197c4 <__udivmoddi4+0x2a0>
 801971c:	b15d      	cbz	r5, 8019736 <__udivmoddi4+0x212>
 801971e:	ebb3 0208 	subs.w	r2, r3, r8
 8019722:	eb61 010e 	sbc.w	r1, r1, lr
 8019726:	fa01 f707 	lsl.w	r7, r1, r7
 801972a:	fa22 f306 	lsr.w	r3, r2, r6
 801972e:	40f1      	lsrs	r1, r6
 8019730:	431f      	orrs	r7, r3
 8019732:	e9c5 7100 	strd	r7, r1, [r5]
 8019736:	2600      	movs	r6, #0
 8019738:	4631      	mov	r1, r6
 801973a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801973e:	f1c2 0320 	rsb	r3, r2, #32
 8019742:	40d8      	lsrs	r0, r3
 8019744:	fa0c fc02 	lsl.w	ip, ip, r2
 8019748:	fa21 f303 	lsr.w	r3, r1, r3
 801974c:	4091      	lsls	r1, r2
 801974e:	4301      	orrs	r1, r0
 8019750:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8019754:	fa1f fe8c 	uxth.w	lr, ip
 8019758:	fbb3 f0f7 	udiv	r0, r3, r7
 801975c:	fb07 3610 	mls	r6, r7, r0, r3
 8019760:	0c0b      	lsrs	r3, r1, #16
 8019762:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8019766:	fb00 f60e 	mul.w	r6, r0, lr
 801976a:	429e      	cmp	r6, r3
 801976c:	fa04 f402 	lsl.w	r4, r4, r2
 8019770:	d908      	bls.n	8019784 <__udivmoddi4+0x260>
 8019772:	eb1c 0303 	adds.w	r3, ip, r3
 8019776:	f100 38ff 	add.w	r8, r0, #4294967295
 801977a:	d22f      	bcs.n	80197dc <__udivmoddi4+0x2b8>
 801977c:	429e      	cmp	r6, r3
 801977e:	d92d      	bls.n	80197dc <__udivmoddi4+0x2b8>
 8019780:	3802      	subs	r0, #2
 8019782:	4463      	add	r3, ip
 8019784:	1b9b      	subs	r3, r3, r6
 8019786:	b289      	uxth	r1, r1
 8019788:	fbb3 f6f7 	udiv	r6, r3, r7
 801978c:	fb07 3316 	mls	r3, r7, r6, r3
 8019790:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8019794:	fb06 f30e 	mul.w	r3, r6, lr
 8019798:	428b      	cmp	r3, r1
 801979a:	d908      	bls.n	80197ae <__udivmoddi4+0x28a>
 801979c:	eb1c 0101 	adds.w	r1, ip, r1
 80197a0:	f106 38ff 	add.w	r8, r6, #4294967295
 80197a4:	d216      	bcs.n	80197d4 <__udivmoddi4+0x2b0>
 80197a6:	428b      	cmp	r3, r1
 80197a8:	d914      	bls.n	80197d4 <__udivmoddi4+0x2b0>
 80197aa:	3e02      	subs	r6, #2
 80197ac:	4461      	add	r1, ip
 80197ae:	1ac9      	subs	r1, r1, r3
 80197b0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80197b4:	e738      	b.n	8019628 <__udivmoddi4+0x104>
 80197b6:	462e      	mov	r6, r5
 80197b8:	4628      	mov	r0, r5
 80197ba:	e705      	b.n	80195c8 <__udivmoddi4+0xa4>
 80197bc:	4606      	mov	r6, r0
 80197be:	e6e3      	b.n	8019588 <__udivmoddi4+0x64>
 80197c0:	4618      	mov	r0, r3
 80197c2:	e6f8      	b.n	80195b6 <__udivmoddi4+0x92>
 80197c4:	454b      	cmp	r3, r9
 80197c6:	d2a9      	bcs.n	801971c <__udivmoddi4+0x1f8>
 80197c8:	ebb9 0802 	subs.w	r8, r9, r2
 80197cc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80197d0:	3801      	subs	r0, #1
 80197d2:	e7a3      	b.n	801971c <__udivmoddi4+0x1f8>
 80197d4:	4646      	mov	r6, r8
 80197d6:	e7ea      	b.n	80197ae <__udivmoddi4+0x28a>
 80197d8:	4620      	mov	r0, r4
 80197da:	e794      	b.n	8019706 <__udivmoddi4+0x1e2>
 80197dc:	4640      	mov	r0, r8
 80197de:	e7d1      	b.n	8019784 <__udivmoddi4+0x260>
 80197e0:	46d0      	mov	r8, sl
 80197e2:	e77b      	b.n	80196dc <__udivmoddi4+0x1b8>
 80197e4:	3b02      	subs	r3, #2
 80197e6:	4461      	add	r1, ip
 80197e8:	e732      	b.n	8019650 <__udivmoddi4+0x12c>
 80197ea:	4630      	mov	r0, r6
 80197ec:	e709      	b.n	8019602 <__udivmoddi4+0xde>
 80197ee:	4464      	add	r4, ip
 80197f0:	3802      	subs	r0, #2
 80197f2:	e742      	b.n	801967a <__udivmoddi4+0x156>

080197f4 <__aeabi_idiv0>:
 80197f4:	4770      	bx	lr
 80197f6:	bf00      	nop

080197f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80197f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8019830 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80197fc:	480d      	ldr	r0, [pc, #52]	; (8019834 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80197fe:	490e      	ldr	r1, [pc, #56]	; (8019838 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8019800:	4a0e      	ldr	r2, [pc, #56]	; (801983c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8019802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8019804:	e002      	b.n	801980c <LoopCopyDataInit>

08019806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8019806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8019808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801980a:	3304      	adds	r3, #4

0801980c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801980c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801980e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8019810:	d3f9      	bcc.n	8019806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8019812:	4a0b      	ldr	r2, [pc, #44]	; (8019840 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8019814:	4c0b      	ldr	r4, [pc, #44]	; (8019844 <LoopFillZerobss+0x26>)
  movs r3, #0
 8019816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8019818:	e001      	b.n	801981e <LoopFillZerobss>

0801981a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801981a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801981c:	3204      	adds	r2, #4

0801981e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801981e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8019820:	d3fb      	bcc.n	801981a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8019822:	f7ec fd0f 	bl	8006244 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8019826:	f000 f81b 	bl	8019860 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801982a:	f7e8 f895 	bl	8001958 <main>
  bx  lr    
 801982e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8019830:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8019834:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8019838:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 801983c:	08052698 	.word	0x08052698
  ldr r2, =_sbss
 8019840:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8019844:	20000dcc 	.word	0x20000dcc

08019848 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8019848:	e7fe      	b.n	8019848 <ADC_IRQHandler>

0801984a <atoi>:
 801984a:	220a      	movs	r2, #10
 801984c:	2100      	movs	r1, #0
 801984e:	f001 bd7f 	b.w	801b350 <strtol>
	...

08019854 <__errno>:
 8019854:	4b01      	ldr	r3, [pc, #4]	; (801985c <__errno+0x8>)
 8019856:	6818      	ldr	r0, [r3, #0]
 8019858:	4770      	bx	lr
 801985a:	bf00      	nop
 801985c:	20000064 	.word	0x20000064

08019860 <__libc_init_array>:
 8019860:	b570      	push	{r4, r5, r6, lr}
 8019862:	4d0d      	ldr	r5, [pc, #52]	; (8019898 <__libc_init_array+0x38>)
 8019864:	4c0d      	ldr	r4, [pc, #52]	; (801989c <__libc_init_array+0x3c>)
 8019866:	1b64      	subs	r4, r4, r5
 8019868:	10a4      	asrs	r4, r4, #2
 801986a:	2600      	movs	r6, #0
 801986c:	42a6      	cmp	r6, r4
 801986e:	d109      	bne.n	8019884 <__libc_init_array+0x24>
 8019870:	4d0b      	ldr	r5, [pc, #44]	; (80198a0 <__libc_init_array+0x40>)
 8019872:	4c0c      	ldr	r4, [pc, #48]	; (80198a4 <__libc_init_array+0x44>)
 8019874:	f005 fc46 	bl	801f104 <_init>
 8019878:	1b64      	subs	r4, r4, r5
 801987a:	10a4      	asrs	r4, r4, #2
 801987c:	2600      	movs	r6, #0
 801987e:	42a6      	cmp	r6, r4
 8019880:	d105      	bne.n	801988e <__libc_init_array+0x2e>
 8019882:	bd70      	pop	{r4, r5, r6, pc}
 8019884:	f855 3b04 	ldr.w	r3, [r5], #4
 8019888:	4798      	blx	r3
 801988a:	3601      	adds	r6, #1
 801988c:	e7ee      	b.n	801986c <__libc_init_array+0xc>
 801988e:	f855 3b04 	ldr.w	r3, [r5], #4
 8019892:	4798      	blx	r3
 8019894:	3601      	adds	r6, #1
 8019896:	e7f2      	b.n	801987e <__libc_init_array+0x1e>
 8019898:	08052690 	.word	0x08052690
 801989c:	08052690 	.word	0x08052690
 80198a0:	08052690 	.word	0x08052690
 80198a4:	08052694 	.word	0x08052694

080198a8 <memset>:
 80198a8:	4402      	add	r2, r0
 80198aa:	4603      	mov	r3, r0
 80198ac:	4293      	cmp	r3, r2
 80198ae:	d100      	bne.n	80198b2 <memset+0xa>
 80198b0:	4770      	bx	lr
 80198b2:	f803 1b01 	strb.w	r1, [r3], #1
 80198b6:	e7f9      	b.n	80198ac <memset+0x4>

080198b8 <__cvt>:
 80198b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80198bc:	ec55 4b10 	vmov	r4, r5, d0
 80198c0:	2d00      	cmp	r5, #0
 80198c2:	460e      	mov	r6, r1
 80198c4:	4619      	mov	r1, r3
 80198c6:	462b      	mov	r3, r5
 80198c8:	bfbb      	ittet	lt
 80198ca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80198ce:	461d      	movlt	r5, r3
 80198d0:	2300      	movge	r3, #0
 80198d2:	232d      	movlt	r3, #45	; 0x2d
 80198d4:	700b      	strb	r3, [r1, #0]
 80198d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80198d8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80198dc:	4691      	mov	r9, r2
 80198de:	f023 0820 	bic.w	r8, r3, #32
 80198e2:	bfbc      	itt	lt
 80198e4:	4622      	movlt	r2, r4
 80198e6:	4614      	movlt	r4, r2
 80198e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80198ec:	d005      	beq.n	80198fa <__cvt+0x42>
 80198ee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80198f2:	d100      	bne.n	80198f6 <__cvt+0x3e>
 80198f4:	3601      	adds	r6, #1
 80198f6:	2102      	movs	r1, #2
 80198f8:	e000      	b.n	80198fc <__cvt+0x44>
 80198fa:	2103      	movs	r1, #3
 80198fc:	ab03      	add	r3, sp, #12
 80198fe:	9301      	str	r3, [sp, #4]
 8019900:	ab02      	add	r3, sp, #8
 8019902:	9300      	str	r3, [sp, #0]
 8019904:	ec45 4b10 	vmov	d0, r4, r5
 8019908:	4653      	mov	r3, sl
 801990a:	4632      	mov	r2, r6
 801990c:	f001 fdb8 	bl	801b480 <_dtoa_r>
 8019910:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8019914:	4607      	mov	r7, r0
 8019916:	d102      	bne.n	801991e <__cvt+0x66>
 8019918:	f019 0f01 	tst.w	r9, #1
 801991c:	d022      	beq.n	8019964 <__cvt+0xac>
 801991e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019922:	eb07 0906 	add.w	r9, r7, r6
 8019926:	d110      	bne.n	801994a <__cvt+0x92>
 8019928:	783b      	ldrb	r3, [r7, #0]
 801992a:	2b30      	cmp	r3, #48	; 0x30
 801992c:	d10a      	bne.n	8019944 <__cvt+0x8c>
 801992e:	2200      	movs	r2, #0
 8019930:	2300      	movs	r3, #0
 8019932:	4620      	mov	r0, r4
 8019934:	4629      	mov	r1, r5
 8019936:	f7ff fcc7 	bl	80192c8 <__aeabi_dcmpeq>
 801993a:	b918      	cbnz	r0, 8019944 <__cvt+0x8c>
 801993c:	f1c6 0601 	rsb	r6, r6, #1
 8019940:	f8ca 6000 	str.w	r6, [sl]
 8019944:	f8da 3000 	ldr.w	r3, [sl]
 8019948:	4499      	add	r9, r3
 801994a:	2200      	movs	r2, #0
 801994c:	2300      	movs	r3, #0
 801994e:	4620      	mov	r0, r4
 8019950:	4629      	mov	r1, r5
 8019952:	f7ff fcb9 	bl	80192c8 <__aeabi_dcmpeq>
 8019956:	b108      	cbz	r0, 801995c <__cvt+0xa4>
 8019958:	f8cd 900c 	str.w	r9, [sp, #12]
 801995c:	2230      	movs	r2, #48	; 0x30
 801995e:	9b03      	ldr	r3, [sp, #12]
 8019960:	454b      	cmp	r3, r9
 8019962:	d307      	bcc.n	8019974 <__cvt+0xbc>
 8019964:	9b03      	ldr	r3, [sp, #12]
 8019966:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019968:	1bdb      	subs	r3, r3, r7
 801996a:	4638      	mov	r0, r7
 801996c:	6013      	str	r3, [r2, #0]
 801996e:	b004      	add	sp, #16
 8019970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019974:	1c59      	adds	r1, r3, #1
 8019976:	9103      	str	r1, [sp, #12]
 8019978:	701a      	strb	r2, [r3, #0]
 801997a:	e7f0      	b.n	801995e <__cvt+0xa6>

0801997c <__exponent>:
 801997c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801997e:	4603      	mov	r3, r0
 8019980:	2900      	cmp	r1, #0
 8019982:	bfb8      	it	lt
 8019984:	4249      	neglt	r1, r1
 8019986:	f803 2b02 	strb.w	r2, [r3], #2
 801998a:	bfb4      	ite	lt
 801998c:	222d      	movlt	r2, #45	; 0x2d
 801998e:	222b      	movge	r2, #43	; 0x2b
 8019990:	2909      	cmp	r1, #9
 8019992:	7042      	strb	r2, [r0, #1]
 8019994:	dd2a      	ble.n	80199ec <__exponent+0x70>
 8019996:	f10d 0407 	add.w	r4, sp, #7
 801999a:	46a4      	mov	ip, r4
 801999c:	270a      	movs	r7, #10
 801999e:	46a6      	mov	lr, r4
 80199a0:	460a      	mov	r2, r1
 80199a2:	fb91 f6f7 	sdiv	r6, r1, r7
 80199a6:	fb07 1516 	mls	r5, r7, r6, r1
 80199aa:	3530      	adds	r5, #48	; 0x30
 80199ac:	2a63      	cmp	r2, #99	; 0x63
 80199ae:	f104 34ff 	add.w	r4, r4, #4294967295
 80199b2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80199b6:	4631      	mov	r1, r6
 80199b8:	dcf1      	bgt.n	801999e <__exponent+0x22>
 80199ba:	3130      	adds	r1, #48	; 0x30
 80199bc:	f1ae 0502 	sub.w	r5, lr, #2
 80199c0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80199c4:	1c44      	adds	r4, r0, #1
 80199c6:	4629      	mov	r1, r5
 80199c8:	4561      	cmp	r1, ip
 80199ca:	d30a      	bcc.n	80199e2 <__exponent+0x66>
 80199cc:	f10d 0209 	add.w	r2, sp, #9
 80199d0:	eba2 020e 	sub.w	r2, r2, lr
 80199d4:	4565      	cmp	r5, ip
 80199d6:	bf88      	it	hi
 80199d8:	2200      	movhi	r2, #0
 80199da:	4413      	add	r3, r2
 80199dc:	1a18      	subs	r0, r3, r0
 80199de:	b003      	add	sp, #12
 80199e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80199e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80199e6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80199ea:	e7ed      	b.n	80199c8 <__exponent+0x4c>
 80199ec:	2330      	movs	r3, #48	; 0x30
 80199ee:	3130      	adds	r1, #48	; 0x30
 80199f0:	7083      	strb	r3, [r0, #2]
 80199f2:	70c1      	strb	r1, [r0, #3]
 80199f4:	1d03      	adds	r3, r0, #4
 80199f6:	e7f1      	b.n	80199dc <__exponent+0x60>

080199f8 <_printf_float>:
 80199f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199fc:	ed2d 8b02 	vpush	{d8}
 8019a00:	b08d      	sub	sp, #52	; 0x34
 8019a02:	460c      	mov	r4, r1
 8019a04:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8019a08:	4616      	mov	r6, r2
 8019a0a:	461f      	mov	r7, r3
 8019a0c:	4605      	mov	r5, r0
 8019a0e:	f002 fe95 	bl	801c73c <_localeconv_r>
 8019a12:	f8d0 a000 	ldr.w	sl, [r0]
 8019a16:	4650      	mov	r0, sl
 8019a18:	f7fe ffd4 	bl	80189c4 <strlen>
 8019a1c:	2300      	movs	r3, #0
 8019a1e:	930a      	str	r3, [sp, #40]	; 0x28
 8019a20:	6823      	ldr	r3, [r4, #0]
 8019a22:	9305      	str	r3, [sp, #20]
 8019a24:	f8d8 3000 	ldr.w	r3, [r8]
 8019a28:	f894 b018 	ldrb.w	fp, [r4, #24]
 8019a2c:	3307      	adds	r3, #7
 8019a2e:	f023 0307 	bic.w	r3, r3, #7
 8019a32:	f103 0208 	add.w	r2, r3, #8
 8019a36:	f8c8 2000 	str.w	r2, [r8]
 8019a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a3e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8019a42:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8019a46:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019a4a:	9307      	str	r3, [sp, #28]
 8019a4c:	f8cd 8018 	str.w	r8, [sp, #24]
 8019a50:	ee08 0a10 	vmov	s16, r0
 8019a54:	4b9f      	ldr	r3, [pc, #636]	; (8019cd4 <_printf_float+0x2dc>)
 8019a56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8019a5e:	f7ff fc65 	bl	801932c <__aeabi_dcmpun>
 8019a62:	bb88      	cbnz	r0, 8019ac8 <_printf_float+0xd0>
 8019a64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019a68:	4b9a      	ldr	r3, [pc, #616]	; (8019cd4 <_printf_float+0x2dc>)
 8019a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8019a6e:	f7ff fc3f 	bl	80192f0 <__aeabi_dcmple>
 8019a72:	bb48      	cbnz	r0, 8019ac8 <_printf_float+0xd0>
 8019a74:	2200      	movs	r2, #0
 8019a76:	2300      	movs	r3, #0
 8019a78:	4640      	mov	r0, r8
 8019a7a:	4649      	mov	r1, r9
 8019a7c:	f7ff fc2e 	bl	80192dc <__aeabi_dcmplt>
 8019a80:	b110      	cbz	r0, 8019a88 <_printf_float+0x90>
 8019a82:	232d      	movs	r3, #45	; 0x2d
 8019a84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019a88:	4b93      	ldr	r3, [pc, #588]	; (8019cd8 <_printf_float+0x2e0>)
 8019a8a:	4894      	ldr	r0, [pc, #592]	; (8019cdc <_printf_float+0x2e4>)
 8019a8c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8019a90:	bf94      	ite	ls
 8019a92:	4698      	movls	r8, r3
 8019a94:	4680      	movhi	r8, r0
 8019a96:	2303      	movs	r3, #3
 8019a98:	6123      	str	r3, [r4, #16]
 8019a9a:	9b05      	ldr	r3, [sp, #20]
 8019a9c:	f023 0204 	bic.w	r2, r3, #4
 8019aa0:	6022      	str	r2, [r4, #0]
 8019aa2:	f04f 0900 	mov.w	r9, #0
 8019aa6:	9700      	str	r7, [sp, #0]
 8019aa8:	4633      	mov	r3, r6
 8019aaa:	aa0b      	add	r2, sp, #44	; 0x2c
 8019aac:	4621      	mov	r1, r4
 8019aae:	4628      	mov	r0, r5
 8019ab0:	f000 f9d8 	bl	8019e64 <_printf_common>
 8019ab4:	3001      	adds	r0, #1
 8019ab6:	f040 8090 	bne.w	8019bda <_printf_float+0x1e2>
 8019aba:	f04f 30ff 	mov.w	r0, #4294967295
 8019abe:	b00d      	add	sp, #52	; 0x34
 8019ac0:	ecbd 8b02 	vpop	{d8}
 8019ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ac8:	4642      	mov	r2, r8
 8019aca:	464b      	mov	r3, r9
 8019acc:	4640      	mov	r0, r8
 8019ace:	4649      	mov	r1, r9
 8019ad0:	f7ff fc2c 	bl	801932c <__aeabi_dcmpun>
 8019ad4:	b140      	cbz	r0, 8019ae8 <_printf_float+0xf0>
 8019ad6:	464b      	mov	r3, r9
 8019ad8:	2b00      	cmp	r3, #0
 8019ada:	bfbc      	itt	lt
 8019adc:	232d      	movlt	r3, #45	; 0x2d
 8019ade:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8019ae2:	487f      	ldr	r0, [pc, #508]	; (8019ce0 <_printf_float+0x2e8>)
 8019ae4:	4b7f      	ldr	r3, [pc, #508]	; (8019ce4 <_printf_float+0x2ec>)
 8019ae6:	e7d1      	b.n	8019a8c <_printf_float+0x94>
 8019ae8:	6863      	ldr	r3, [r4, #4]
 8019aea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8019aee:	9206      	str	r2, [sp, #24]
 8019af0:	1c5a      	adds	r2, r3, #1
 8019af2:	d13f      	bne.n	8019b74 <_printf_float+0x17c>
 8019af4:	2306      	movs	r3, #6
 8019af6:	6063      	str	r3, [r4, #4]
 8019af8:	9b05      	ldr	r3, [sp, #20]
 8019afa:	6861      	ldr	r1, [r4, #4]
 8019afc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8019b00:	2300      	movs	r3, #0
 8019b02:	9303      	str	r3, [sp, #12]
 8019b04:	ab0a      	add	r3, sp, #40	; 0x28
 8019b06:	e9cd b301 	strd	fp, r3, [sp, #4]
 8019b0a:	ab09      	add	r3, sp, #36	; 0x24
 8019b0c:	ec49 8b10 	vmov	d0, r8, r9
 8019b10:	9300      	str	r3, [sp, #0]
 8019b12:	6022      	str	r2, [r4, #0]
 8019b14:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8019b18:	4628      	mov	r0, r5
 8019b1a:	f7ff fecd 	bl	80198b8 <__cvt>
 8019b1e:	9b06      	ldr	r3, [sp, #24]
 8019b20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019b22:	2b47      	cmp	r3, #71	; 0x47
 8019b24:	4680      	mov	r8, r0
 8019b26:	d108      	bne.n	8019b3a <_printf_float+0x142>
 8019b28:	1cc8      	adds	r0, r1, #3
 8019b2a:	db02      	blt.n	8019b32 <_printf_float+0x13a>
 8019b2c:	6863      	ldr	r3, [r4, #4]
 8019b2e:	4299      	cmp	r1, r3
 8019b30:	dd41      	ble.n	8019bb6 <_printf_float+0x1be>
 8019b32:	f1ab 0b02 	sub.w	fp, fp, #2
 8019b36:	fa5f fb8b 	uxtb.w	fp, fp
 8019b3a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8019b3e:	d820      	bhi.n	8019b82 <_printf_float+0x18a>
 8019b40:	3901      	subs	r1, #1
 8019b42:	465a      	mov	r2, fp
 8019b44:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8019b48:	9109      	str	r1, [sp, #36]	; 0x24
 8019b4a:	f7ff ff17 	bl	801997c <__exponent>
 8019b4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019b50:	1813      	adds	r3, r2, r0
 8019b52:	2a01      	cmp	r2, #1
 8019b54:	4681      	mov	r9, r0
 8019b56:	6123      	str	r3, [r4, #16]
 8019b58:	dc02      	bgt.n	8019b60 <_printf_float+0x168>
 8019b5a:	6822      	ldr	r2, [r4, #0]
 8019b5c:	07d2      	lsls	r2, r2, #31
 8019b5e:	d501      	bpl.n	8019b64 <_printf_float+0x16c>
 8019b60:	3301      	adds	r3, #1
 8019b62:	6123      	str	r3, [r4, #16]
 8019b64:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8019b68:	2b00      	cmp	r3, #0
 8019b6a:	d09c      	beq.n	8019aa6 <_printf_float+0xae>
 8019b6c:	232d      	movs	r3, #45	; 0x2d
 8019b6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019b72:	e798      	b.n	8019aa6 <_printf_float+0xae>
 8019b74:	9a06      	ldr	r2, [sp, #24]
 8019b76:	2a47      	cmp	r2, #71	; 0x47
 8019b78:	d1be      	bne.n	8019af8 <_printf_float+0x100>
 8019b7a:	2b00      	cmp	r3, #0
 8019b7c:	d1bc      	bne.n	8019af8 <_printf_float+0x100>
 8019b7e:	2301      	movs	r3, #1
 8019b80:	e7b9      	b.n	8019af6 <_printf_float+0xfe>
 8019b82:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8019b86:	d118      	bne.n	8019bba <_printf_float+0x1c2>
 8019b88:	2900      	cmp	r1, #0
 8019b8a:	6863      	ldr	r3, [r4, #4]
 8019b8c:	dd0b      	ble.n	8019ba6 <_printf_float+0x1ae>
 8019b8e:	6121      	str	r1, [r4, #16]
 8019b90:	b913      	cbnz	r3, 8019b98 <_printf_float+0x1a0>
 8019b92:	6822      	ldr	r2, [r4, #0]
 8019b94:	07d0      	lsls	r0, r2, #31
 8019b96:	d502      	bpl.n	8019b9e <_printf_float+0x1a6>
 8019b98:	3301      	adds	r3, #1
 8019b9a:	440b      	add	r3, r1
 8019b9c:	6123      	str	r3, [r4, #16]
 8019b9e:	65a1      	str	r1, [r4, #88]	; 0x58
 8019ba0:	f04f 0900 	mov.w	r9, #0
 8019ba4:	e7de      	b.n	8019b64 <_printf_float+0x16c>
 8019ba6:	b913      	cbnz	r3, 8019bae <_printf_float+0x1b6>
 8019ba8:	6822      	ldr	r2, [r4, #0]
 8019baa:	07d2      	lsls	r2, r2, #31
 8019bac:	d501      	bpl.n	8019bb2 <_printf_float+0x1ba>
 8019bae:	3302      	adds	r3, #2
 8019bb0:	e7f4      	b.n	8019b9c <_printf_float+0x1a4>
 8019bb2:	2301      	movs	r3, #1
 8019bb4:	e7f2      	b.n	8019b9c <_printf_float+0x1a4>
 8019bb6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8019bba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019bbc:	4299      	cmp	r1, r3
 8019bbe:	db05      	blt.n	8019bcc <_printf_float+0x1d4>
 8019bc0:	6823      	ldr	r3, [r4, #0]
 8019bc2:	6121      	str	r1, [r4, #16]
 8019bc4:	07d8      	lsls	r0, r3, #31
 8019bc6:	d5ea      	bpl.n	8019b9e <_printf_float+0x1a6>
 8019bc8:	1c4b      	adds	r3, r1, #1
 8019bca:	e7e7      	b.n	8019b9c <_printf_float+0x1a4>
 8019bcc:	2900      	cmp	r1, #0
 8019bce:	bfd4      	ite	le
 8019bd0:	f1c1 0202 	rsble	r2, r1, #2
 8019bd4:	2201      	movgt	r2, #1
 8019bd6:	4413      	add	r3, r2
 8019bd8:	e7e0      	b.n	8019b9c <_printf_float+0x1a4>
 8019bda:	6823      	ldr	r3, [r4, #0]
 8019bdc:	055a      	lsls	r2, r3, #21
 8019bde:	d407      	bmi.n	8019bf0 <_printf_float+0x1f8>
 8019be0:	6923      	ldr	r3, [r4, #16]
 8019be2:	4642      	mov	r2, r8
 8019be4:	4631      	mov	r1, r6
 8019be6:	4628      	mov	r0, r5
 8019be8:	47b8      	blx	r7
 8019bea:	3001      	adds	r0, #1
 8019bec:	d12c      	bne.n	8019c48 <_printf_float+0x250>
 8019bee:	e764      	b.n	8019aba <_printf_float+0xc2>
 8019bf0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8019bf4:	f240 80e0 	bls.w	8019db8 <_printf_float+0x3c0>
 8019bf8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019bfc:	2200      	movs	r2, #0
 8019bfe:	2300      	movs	r3, #0
 8019c00:	f7ff fb62 	bl	80192c8 <__aeabi_dcmpeq>
 8019c04:	2800      	cmp	r0, #0
 8019c06:	d034      	beq.n	8019c72 <_printf_float+0x27a>
 8019c08:	4a37      	ldr	r2, [pc, #220]	; (8019ce8 <_printf_float+0x2f0>)
 8019c0a:	2301      	movs	r3, #1
 8019c0c:	4631      	mov	r1, r6
 8019c0e:	4628      	mov	r0, r5
 8019c10:	47b8      	blx	r7
 8019c12:	3001      	adds	r0, #1
 8019c14:	f43f af51 	beq.w	8019aba <_printf_float+0xc2>
 8019c18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019c1c:	429a      	cmp	r2, r3
 8019c1e:	db02      	blt.n	8019c26 <_printf_float+0x22e>
 8019c20:	6823      	ldr	r3, [r4, #0]
 8019c22:	07d8      	lsls	r0, r3, #31
 8019c24:	d510      	bpl.n	8019c48 <_printf_float+0x250>
 8019c26:	ee18 3a10 	vmov	r3, s16
 8019c2a:	4652      	mov	r2, sl
 8019c2c:	4631      	mov	r1, r6
 8019c2e:	4628      	mov	r0, r5
 8019c30:	47b8      	blx	r7
 8019c32:	3001      	adds	r0, #1
 8019c34:	f43f af41 	beq.w	8019aba <_printf_float+0xc2>
 8019c38:	f04f 0800 	mov.w	r8, #0
 8019c3c:	f104 091a 	add.w	r9, r4, #26
 8019c40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019c42:	3b01      	subs	r3, #1
 8019c44:	4543      	cmp	r3, r8
 8019c46:	dc09      	bgt.n	8019c5c <_printf_float+0x264>
 8019c48:	6823      	ldr	r3, [r4, #0]
 8019c4a:	079b      	lsls	r3, r3, #30
 8019c4c:	f100 8105 	bmi.w	8019e5a <_printf_float+0x462>
 8019c50:	68e0      	ldr	r0, [r4, #12]
 8019c52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019c54:	4298      	cmp	r0, r3
 8019c56:	bfb8      	it	lt
 8019c58:	4618      	movlt	r0, r3
 8019c5a:	e730      	b.n	8019abe <_printf_float+0xc6>
 8019c5c:	2301      	movs	r3, #1
 8019c5e:	464a      	mov	r2, r9
 8019c60:	4631      	mov	r1, r6
 8019c62:	4628      	mov	r0, r5
 8019c64:	47b8      	blx	r7
 8019c66:	3001      	adds	r0, #1
 8019c68:	f43f af27 	beq.w	8019aba <_printf_float+0xc2>
 8019c6c:	f108 0801 	add.w	r8, r8, #1
 8019c70:	e7e6      	b.n	8019c40 <_printf_float+0x248>
 8019c72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c74:	2b00      	cmp	r3, #0
 8019c76:	dc39      	bgt.n	8019cec <_printf_float+0x2f4>
 8019c78:	4a1b      	ldr	r2, [pc, #108]	; (8019ce8 <_printf_float+0x2f0>)
 8019c7a:	2301      	movs	r3, #1
 8019c7c:	4631      	mov	r1, r6
 8019c7e:	4628      	mov	r0, r5
 8019c80:	47b8      	blx	r7
 8019c82:	3001      	adds	r0, #1
 8019c84:	f43f af19 	beq.w	8019aba <_printf_float+0xc2>
 8019c88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019c8c:	4313      	orrs	r3, r2
 8019c8e:	d102      	bne.n	8019c96 <_printf_float+0x29e>
 8019c90:	6823      	ldr	r3, [r4, #0]
 8019c92:	07d9      	lsls	r1, r3, #31
 8019c94:	d5d8      	bpl.n	8019c48 <_printf_float+0x250>
 8019c96:	ee18 3a10 	vmov	r3, s16
 8019c9a:	4652      	mov	r2, sl
 8019c9c:	4631      	mov	r1, r6
 8019c9e:	4628      	mov	r0, r5
 8019ca0:	47b8      	blx	r7
 8019ca2:	3001      	adds	r0, #1
 8019ca4:	f43f af09 	beq.w	8019aba <_printf_float+0xc2>
 8019ca8:	f04f 0900 	mov.w	r9, #0
 8019cac:	f104 0a1a 	add.w	sl, r4, #26
 8019cb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019cb2:	425b      	negs	r3, r3
 8019cb4:	454b      	cmp	r3, r9
 8019cb6:	dc01      	bgt.n	8019cbc <_printf_float+0x2c4>
 8019cb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019cba:	e792      	b.n	8019be2 <_printf_float+0x1ea>
 8019cbc:	2301      	movs	r3, #1
 8019cbe:	4652      	mov	r2, sl
 8019cc0:	4631      	mov	r1, r6
 8019cc2:	4628      	mov	r0, r5
 8019cc4:	47b8      	blx	r7
 8019cc6:	3001      	adds	r0, #1
 8019cc8:	f43f aef7 	beq.w	8019aba <_printf_float+0xc2>
 8019ccc:	f109 0901 	add.w	r9, r9, #1
 8019cd0:	e7ee      	b.n	8019cb0 <_printf_float+0x2b8>
 8019cd2:	bf00      	nop
 8019cd4:	7fefffff 	.word	0x7fefffff
 8019cd8:	080521b4 	.word	0x080521b4
 8019cdc:	080521b8 	.word	0x080521b8
 8019ce0:	080521c0 	.word	0x080521c0
 8019ce4:	080521bc 	.word	0x080521bc
 8019ce8:	080521c4 	.word	0x080521c4
 8019cec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019cee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019cf0:	429a      	cmp	r2, r3
 8019cf2:	bfa8      	it	ge
 8019cf4:	461a      	movge	r2, r3
 8019cf6:	2a00      	cmp	r2, #0
 8019cf8:	4691      	mov	r9, r2
 8019cfa:	dc37      	bgt.n	8019d6c <_printf_float+0x374>
 8019cfc:	f04f 0b00 	mov.w	fp, #0
 8019d00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019d04:	f104 021a 	add.w	r2, r4, #26
 8019d08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019d0a:	9305      	str	r3, [sp, #20]
 8019d0c:	eba3 0309 	sub.w	r3, r3, r9
 8019d10:	455b      	cmp	r3, fp
 8019d12:	dc33      	bgt.n	8019d7c <_printf_float+0x384>
 8019d14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019d18:	429a      	cmp	r2, r3
 8019d1a:	db3b      	blt.n	8019d94 <_printf_float+0x39c>
 8019d1c:	6823      	ldr	r3, [r4, #0]
 8019d1e:	07da      	lsls	r2, r3, #31
 8019d20:	d438      	bmi.n	8019d94 <_printf_float+0x39c>
 8019d22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019d24:	9a05      	ldr	r2, [sp, #20]
 8019d26:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019d28:	1a9a      	subs	r2, r3, r2
 8019d2a:	eba3 0901 	sub.w	r9, r3, r1
 8019d2e:	4591      	cmp	r9, r2
 8019d30:	bfa8      	it	ge
 8019d32:	4691      	movge	r9, r2
 8019d34:	f1b9 0f00 	cmp.w	r9, #0
 8019d38:	dc35      	bgt.n	8019da6 <_printf_float+0x3ae>
 8019d3a:	f04f 0800 	mov.w	r8, #0
 8019d3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019d42:	f104 0a1a 	add.w	sl, r4, #26
 8019d46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019d4a:	1a9b      	subs	r3, r3, r2
 8019d4c:	eba3 0309 	sub.w	r3, r3, r9
 8019d50:	4543      	cmp	r3, r8
 8019d52:	f77f af79 	ble.w	8019c48 <_printf_float+0x250>
 8019d56:	2301      	movs	r3, #1
 8019d58:	4652      	mov	r2, sl
 8019d5a:	4631      	mov	r1, r6
 8019d5c:	4628      	mov	r0, r5
 8019d5e:	47b8      	blx	r7
 8019d60:	3001      	adds	r0, #1
 8019d62:	f43f aeaa 	beq.w	8019aba <_printf_float+0xc2>
 8019d66:	f108 0801 	add.w	r8, r8, #1
 8019d6a:	e7ec      	b.n	8019d46 <_printf_float+0x34e>
 8019d6c:	4613      	mov	r3, r2
 8019d6e:	4631      	mov	r1, r6
 8019d70:	4642      	mov	r2, r8
 8019d72:	4628      	mov	r0, r5
 8019d74:	47b8      	blx	r7
 8019d76:	3001      	adds	r0, #1
 8019d78:	d1c0      	bne.n	8019cfc <_printf_float+0x304>
 8019d7a:	e69e      	b.n	8019aba <_printf_float+0xc2>
 8019d7c:	2301      	movs	r3, #1
 8019d7e:	4631      	mov	r1, r6
 8019d80:	4628      	mov	r0, r5
 8019d82:	9205      	str	r2, [sp, #20]
 8019d84:	47b8      	blx	r7
 8019d86:	3001      	adds	r0, #1
 8019d88:	f43f ae97 	beq.w	8019aba <_printf_float+0xc2>
 8019d8c:	9a05      	ldr	r2, [sp, #20]
 8019d8e:	f10b 0b01 	add.w	fp, fp, #1
 8019d92:	e7b9      	b.n	8019d08 <_printf_float+0x310>
 8019d94:	ee18 3a10 	vmov	r3, s16
 8019d98:	4652      	mov	r2, sl
 8019d9a:	4631      	mov	r1, r6
 8019d9c:	4628      	mov	r0, r5
 8019d9e:	47b8      	blx	r7
 8019da0:	3001      	adds	r0, #1
 8019da2:	d1be      	bne.n	8019d22 <_printf_float+0x32a>
 8019da4:	e689      	b.n	8019aba <_printf_float+0xc2>
 8019da6:	9a05      	ldr	r2, [sp, #20]
 8019da8:	464b      	mov	r3, r9
 8019daa:	4442      	add	r2, r8
 8019dac:	4631      	mov	r1, r6
 8019dae:	4628      	mov	r0, r5
 8019db0:	47b8      	blx	r7
 8019db2:	3001      	adds	r0, #1
 8019db4:	d1c1      	bne.n	8019d3a <_printf_float+0x342>
 8019db6:	e680      	b.n	8019aba <_printf_float+0xc2>
 8019db8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019dba:	2a01      	cmp	r2, #1
 8019dbc:	dc01      	bgt.n	8019dc2 <_printf_float+0x3ca>
 8019dbe:	07db      	lsls	r3, r3, #31
 8019dc0:	d538      	bpl.n	8019e34 <_printf_float+0x43c>
 8019dc2:	2301      	movs	r3, #1
 8019dc4:	4642      	mov	r2, r8
 8019dc6:	4631      	mov	r1, r6
 8019dc8:	4628      	mov	r0, r5
 8019dca:	47b8      	blx	r7
 8019dcc:	3001      	adds	r0, #1
 8019dce:	f43f ae74 	beq.w	8019aba <_printf_float+0xc2>
 8019dd2:	ee18 3a10 	vmov	r3, s16
 8019dd6:	4652      	mov	r2, sl
 8019dd8:	4631      	mov	r1, r6
 8019dda:	4628      	mov	r0, r5
 8019ddc:	47b8      	blx	r7
 8019dde:	3001      	adds	r0, #1
 8019de0:	f43f ae6b 	beq.w	8019aba <_printf_float+0xc2>
 8019de4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019de8:	2200      	movs	r2, #0
 8019dea:	2300      	movs	r3, #0
 8019dec:	f7ff fa6c 	bl	80192c8 <__aeabi_dcmpeq>
 8019df0:	b9d8      	cbnz	r0, 8019e2a <_printf_float+0x432>
 8019df2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019df4:	f108 0201 	add.w	r2, r8, #1
 8019df8:	3b01      	subs	r3, #1
 8019dfa:	4631      	mov	r1, r6
 8019dfc:	4628      	mov	r0, r5
 8019dfe:	47b8      	blx	r7
 8019e00:	3001      	adds	r0, #1
 8019e02:	d10e      	bne.n	8019e22 <_printf_float+0x42a>
 8019e04:	e659      	b.n	8019aba <_printf_float+0xc2>
 8019e06:	2301      	movs	r3, #1
 8019e08:	4652      	mov	r2, sl
 8019e0a:	4631      	mov	r1, r6
 8019e0c:	4628      	mov	r0, r5
 8019e0e:	47b8      	blx	r7
 8019e10:	3001      	adds	r0, #1
 8019e12:	f43f ae52 	beq.w	8019aba <_printf_float+0xc2>
 8019e16:	f108 0801 	add.w	r8, r8, #1
 8019e1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019e1c:	3b01      	subs	r3, #1
 8019e1e:	4543      	cmp	r3, r8
 8019e20:	dcf1      	bgt.n	8019e06 <_printf_float+0x40e>
 8019e22:	464b      	mov	r3, r9
 8019e24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8019e28:	e6dc      	b.n	8019be4 <_printf_float+0x1ec>
 8019e2a:	f04f 0800 	mov.w	r8, #0
 8019e2e:	f104 0a1a 	add.w	sl, r4, #26
 8019e32:	e7f2      	b.n	8019e1a <_printf_float+0x422>
 8019e34:	2301      	movs	r3, #1
 8019e36:	4642      	mov	r2, r8
 8019e38:	e7df      	b.n	8019dfa <_printf_float+0x402>
 8019e3a:	2301      	movs	r3, #1
 8019e3c:	464a      	mov	r2, r9
 8019e3e:	4631      	mov	r1, r6
 8019e40:	4628      	mov	r0, r5
 8019e42:	47b8      	blx	r7
 8019e44:	3001      	adds	r0, #1
 8019e46:	f43f ae38 	beq.w	8019aba <_printf_float+0xc2>
 8019e4a:	f108 0801 	add.w	r8, r8, #1
 8019e4e:	68e3      	ldr	r3, [r4, #12]
 8019e50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019e52:	1a5b      	subs	r3, r3, r1
 8019e54:	4543      	cmp	r3, r8
 8019e56:	dcf0      	bgt.n	8019e3a <_printf_float+0x442>
 8019e58:	e6fa      	b.n	8019c50 <_printf_float+0x258>
 8019e5a:	f04f 0800 	mov.w	r8, #0
 8019e5e:	f104 0919 	add.w	r9, r4, #25
 8019e62:	e7f4      	b.n	8019e4e <_printf_float+0x456>

08019e64 <_printf_common>:
 8019e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019e68:	4616      	mov	r6, r2
 8019e6a:	4699      	mov	r9, r3
 8019e6c:	688a      	ldr	r2, [r1, #8]
 8019e6e:	690b      	ldr	r3, [r1, #16]
 8019e70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019e74:	4293      	cmp	r3, r2
 8019e76:	bfb8      	it	lt
 8019e78:	4613      	movlt	r3, r2
 8019e7a:	6033      	str	r3, [r6, #0]
 8019e7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019e80:	4607      	mov	r7, r0
 8019e82:	460c      	mov	r4, r1
 8019e84:	b10a      	cbz	r2, 8019e8a <_printf_common+0x26>
 8019e86:	3301      	adds	r3, #1
 8019e88:	6033      	str	r3, [r6, #0]
 8019e8a:	6823      	ldr	r3, [r4, #0]
 8019e8c:	0699      	lsls	r1, r3, #26
 8019e8e:	bf42      	ittt	mi
 8019e90:	6833      	ldrmi	r3, [r6, #0]
 8019e92:	3302      	addmi	r3, #2
 8019e94:	6033      	strmi	r3, [r6, #0]
 8019e96:	6825      	ldr	r5, [r4, #0]
 8019e98:	f015 0506 	ands.w	r5, r5, #6
 8019e9c:	d106      	bne.n	8019eac <_printf_common+0x48>
 8019e9e:	f104 0a19 	add.w	sl, r4, #25
 8019ea2:	68e3      	ldr	r3, [r4, #12]
 8019ea4:	6832      	ldr	r2, [r6, #0]
 8019ea6:	1a9b      	subs	r3, r3, r2
 8019ea8:	42ab      	cmp	r3, r5
 8019eaa:	dc26      	bgt.n	8019efa <_printf_common+0x96>
 8019eac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019eb0:	1e13      	subs	r3, r2, #0
 8019eb2:	6822      	ldr	r2, [r4, #0]
 8019eb4:	bf18      	it	ne
 8019eb6:	2301      	movne	r3, #1
 8019eb8:	0692      	lsls	r2, r2, #26
 8019eba:	d42b      	bmi.n	8019f14 <_printf_common+0xb0>
 8019ebc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019ec0:	4649      	mov	r1, r9
 8019ec2:	4638      	mov	r0, r7
 8019ec4:	47c0      	blx	r8
 8019ec6:	3001      	adds	r0, #1
 8019ec8:	d01e      	beq.n	8019f08 <_printf_common+0xa4>
 8019eca:	6823      	ldr	r3, [r4, #0]
 8019ecc:	68e5      	ldr	r5, [r4, #12]
 8019ece:	6832      	ldr	r2, [r6, #0]
 8019ed0:	f003 0306 	and.w	r3, r3, #6
 8019ed4:	2b04      	cmp	r3, #4
 8019ed6:	bf08      	it	eq
 8019ed8:	1aad      	subeq	r5, r5, r2
 8019eda:	68a3      	ldr	r3, [r4, #8]
 8019edc:	6922      	ldr	r2, [r4, #16]
 8019ede:	bf0c      	ite	eq
 8019ee0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019ee4:	2500      	movne	r5, #0
 8019ee6:	4293      	cmp	r3, r2
 8019ee8:	bfc4      	itt	gt
 8019eea:	1a9b      	subgt	r3, r3, r2
 8019eec:	18ed      	addgt	r5, r5, r3
 8019eee:	2600      	movs	r6, #0
 8019ef0:	341a      	adds	r4, #26
 8019ef2:	42b5      	cmp	r5, r6
 8019ef4:	d11a      	bne.n	8019f2c <_printf_common+0xc8>
 8019ef6:	2000      	movs	r0, #0
 8019ef8:	e008      	b.n	8019f0c <_printf_common+0xa8>
 8019efa:	2301      	movs	r3, #1
 8019efc:	4652      	mov	r2, sl
 8019efe:	4649      	mov	r1, r9
 8019f00:	4638      	mov	r0, r7
 8019f02:	47c0      	blx	r8
 8019f04:	3001      	adds	r0, #1
 8019f06:	d103      	bne.n	8019f10 <_printf_common+0xac>
 8019f08:	f04f 30ff 	mov.w	r0, #4294967295
 8019f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019f10:	3501      	adds	r5, #1
 8019f12:	e7c6      	b.n	8019ea2 <_printf_common+0x3e>
 8019f14:	18e1      	adds	r1, r4, r3
 8019f16:	1c5a      	adds	r2, r3, #1
 8019f18:	2030      	movs	r0, #48	; 0x30
 8019f1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019f1e:	4422      	add	r2, r4
 8019f20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019f24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019f28:	3302      	adds	r3, #2
 8019f2a:	e7c7      	b.n	8019ebc <_printf_common+0x58>
 8019f2c:	2301      	movs	r3, #1
 8019f2e:	4622      	mov	r2, r4
 8019f30:	4649      	mov	r1, r9
 8019f32:	4638      	mov	r0, r7
 8019f34:	47c0      	blx	r8
 8019f36:	3001      	adds	r0, #1
 8019f38:	d0e6      	beq.n	8019f08 <_printf_common+0xa4>
 8019f3a:	3601      	adds	r6, #1
 8019f3c:	e7d9      	b.n	8019ef2 <_printf_common+0x8e>
	...

08019f40 <_printf_i>:
 8019f40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019f44:	7e0f      	ldrb	r7, [r1, #24]
 8019f46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019f48:	2f78      	cmp	r7, #120	; 0x78
 8019f4a:	4691      	mov	r9, r2
 8019f4c:	4680      	mov	r8, r0
 8019f4e:	460c      	mov	r4, r1
 8019f50:	469a      	mov	sl, r3
 8019f52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8019f56:	d807      	bhi.n	8019f68 <_printf_i+0x28>
 8019f58:	2f62      	cmp	r7, #98	; 0x62
 8019f5a:	d80a      	bhi.n	8019f72 <_printf_i+0x32>
 8019f5c:	2f00      	cmp	r7, #0
 8019f5e:	f000 80d8 	beq.w	801a112 <_printf_i+0x1d2>
 8019f62:	2f58      	cmp	r7, #88	; 0x58
 8019f64:	f000 80a3 	beq.w	801a0ae <_printf_i+0x16e>
 8019f68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019f6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019f70:	e03a      	b.n	8019fe8 <_printf_i+0xa8>
 8019f72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019f76:	2b15      	cmp	r3, #21
 8019f78:	d8f6      	bhi.n	8019f68 <_printf_i+0x28>
 8019f7a:	a101      	add	r1, pc, #4	; (adr r1, 8019f80 <_printf_i+0x40>)
 8019f7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019f80:	08019fd9 	.word	0x08019fd9
 8019f84:	08019fed 	.word	0x08019fed
 8019f88:	08019f69 	.word	0x08019f69
 8019f8c:	08019f69 	.word	0x08019f69
 8019f90:	08019f69 	.word	0x08019f69
 8019f94:	08019f69 	.word	0x08019f69
 8019f98:	08019fed 	.word	0x08019fed
 8019f9c:	08019f69 	.word	0x08019f69
 8019fa0:	08019f69 	.word	0x08019f69
 8019fa4:	08019f69 	.word	0x08019f69
 8019fa8:	08019f69 	.word	0x08019f69
 8019fac:	0801a0f9 	.word	0x0801a0f9
 8019fb0:	0801a01d 	.word	0x0801a01d
 8019fb4:	0801a0db 	.word	0x0801a0db
 8019fb8:	08019f69 	.word	0x08019f69
 8019fbc:	08019f69 	.word	0x08019f69
 8019fc0:	0801a11b 	.word	0x0801a11b
 8019fc4:	08019f69 	.word	0x08019f69
 8019fc8:	0801a01d 	.word	0x0801a01d
 8019fcc:	08019f69 	.word	0x08019f69
 8019fd0:	08019f69 	.word	0x08019f69
 8019fd4:	0801a0e3 	.word	0x0801a0e3
 8019fd8:	682b      	ldr	r3, [r5, #0]
 8019fda:	1d1a      	adds	r2, r3, #4
 8019fdc:	681b      	ldr	r3, [r3, #0]
 8019fde:	602a      	str	r2, [r5, #0]
 8019fe0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019fe4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019fe8:	2301      	movs	r3, #1
 8019fea:	e0a3      	b.n	801a134 <_printf_i+0x1f4>
 8019fec:	6820      	ldr	r0, [r4, #0]
 8019fee:	6829      	ldr	r1, [r5, #0]
 8019ff0:	0606      	lsls	r6, r0, #24
 8019ff2:	f101 0304 	add.w	r3, r1, #4
 8019ff6:	d50a      	bpl.n	801a00e <_printf_i+0xce>
 8019ff8:	680e      	ldr	r6, [r1, #0]
 8019ffa:	602b      	str	r3, [r5, #0]
 8019ffc:	2e00      	cmp	r6, #0
 8019ffe:	da03      	bge.n	801a008 <_printf_i+0xc8>
 801a000:	232d      	movs	r3, #45	; 0x2d
 801a002:	4276      	negs	r6, r6
 801a004:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a008:	485e      	ldr	r0, [pc, #376]	; (801a184 <_printf_i+0x244>)
 801a00a:	230a      	movs	r3, #10
 801a00c:	e019      	b.n	801a042 <_printf_i+0x102>
 801a00e:	680e      	ldr	r6, [r1, #0]
 801a010:	602b      	str	r3, [r5, #0]
 801a012:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a016:	bf18      	it	ne
 801a018:	b236      	sxthne	r6, r6
 801a01a:	e7ef      	b.n	8019ffc <_printf_i+0xbc>
 801a01c:	682b      	ldr	r3, [r5, #0]
 801a01e:	6820      	ldr	r0, [r4, #0]
 801a020:	1d19      	adds	r1, r3, #4
 801a022:	6029      	str	r1, [r5, #0]
 801a024:	0601      	lsls	r1, r0, #24
 801a026:	d501      	bpl.n	801a02c <_printf_i+0xec>
 801a028:	681e      	ldr	r6, [r3, #0]
 801a02a:	e002      	b.n	801a032 <_printf_i+0xf2>
 801a02c:	0646      	lsls	r6, r0, #25
 801a02e:	d5fb      	bpl.n	801a028 <_printf_i+0xe8>
 801a030:	881e      	ldrh	r6, [r3, #0]
 801a032:	4854      	ldr	r0, [pc, #336]	; (801a184 <_printf_i+0x244>)
 801a034:	2f6f      	cmp	r7, #111	; 0x6f
 801a036:	bf0c      	ite	eq
 801a038:	2308      	moveq	r3, #8
 801a03a:	230a      	movne	r3, #10
 801a03c:	2100      	movs	r1, #0
 801a03e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a042:	6865      	ldr	r5, [r4, #4]
 801a044:	60a5      	str	r5, [r4, #8]
 801a046:	2d00      	cmp	r5, #0
 801a048:	bfa2      	ittt	ge
 801a04a:	6821      	ldrge	r1, [r4, #0]
 801a04c:	f021 0104 	bicge.w	r1, r1, #4
 801a050:	6021      	strge	r1, [r4, #0]
 801a052:	b90e      	cbnz	r6, 801a058 <_printf_i+0x118>
 801a054:	2d00      	cmp	r5, #0
 801a056:	d04d      	beq.n	801a0f4 <_printf_i+0x1b4>
 801a058:	4615      	mov	r5, r2
 801a05a:	fbb6 f1f3 	udiv	r1, r6, r3
 801a05e:	fb03 6711 	mls	r7, r3, r1, r6
 801a062:	5dc7      	ldrb	r7, [r0, r7]
 801a064:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801a068:	4637      	mov	r7, r6
 801a06a:	42bb      	cmp	r3, r7
 801a06c:	460e      	mov	r6, r1
 801a06e:	d9f4      	bls.n	801a05a <_printf_i+0x11a>
 801a070:	2b08      	cmp	r3, #8
 801a072:	d10b      	bne.n	801a08c <_printf_i+0x14c>
 801a074:	6823      	ldr	r3, [r4, #0]
 801a076:	07de      	lsls	r6, r3, #31
 801a078:	d508      	bpl.n	801a08c <_printf_i+0x14c>
 801a07a:	6923      	ldr	r3, [r4, #16]
 801a07c:	6861      	ldr	r1, [r4, #4]
 801a07e:	4299      	cmp	r1, r3
 801a080:	bfde      	ittt	le
 801a082:	2330      	movle	r3, #48	; 0x30
 801a084:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a088:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a08c:	1b52      	subs	r2, r2, r5
 801a08e:	6122      	str	r2, [r4, #16]
 801a090:	f8cd a000 	str.w	sl, [sp]
 801a094:	464b      	mov	r3, r9
 801a096:	aa03      	add	r2, sp, #12
 801a098:	4621      	mov	r1, r4
 801a09a:	4640      	mov	r0, r8
 801a09c:	f7ff fee2 	bl	8019e64 <_printf_common>
 801a0a0:	3001      	adds	r0, #1
 801a0a2:	d14c      	bne.n	801a13e <_printf_i+0x1fe>
 801a0a4:	f04f 30ff 	mov.w	r0, #4294967295
 801a0a8:	b004      	add	sp, #16
 801a0aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a0ae:	4835      	ldr	r0, [pc, #212]	; (801a184 <_printf_i+0x244>)
 801a0b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801a0b4:	6829      	ldr	r1, [r5, #0]
 801a0b6:	6823      	ldr	r3, [r4, #0]
 801a0b8:	f851 6b04 	ldr.w	r6, [r1], #4
 801a0bc:	6029      	str	r1, [r5, #0]
 801a0be:	061d      	lsls	r5, r3, #24
 801a0c0:	d514      	bpl.n	801a0ec <_printf_i+0x1ac>
 801a0c2:	07df      	lsls	r7, r3, #31
 801a0c4:	bf44      	itt	mi
 801a0c6:	f043 0320 	orrmi.w	r3, r3, #32
 801a0ca:	6023      	strmi	r3, [r4, #0]
 801a0cc:	b91e      	cbnz	r6, 801a0d6 <_printf_i+0x196>
 801a0ce:	6823      	ldr	r3, [r4, #0]
 801a0d0:	f023 0320 	bic.w	r3, r3, #32
 801a0d4:	6023      	str	r3, [r4, #0]
 801a0d6:	2310      	movs	r3, #16
 801a0d8:	e7b0      	b.n	801a03c <_printf_i+0xfc>
 801a0da:	6823      	ldr	r3, [r4, #0]
 801a0dc:	f043 0320 	orr.w	r3, r3, #32
 801a0e0:	6023      	str	r3, [r4, #0]
 801a0e2:	2378      	movs	r3, #120	; 0x78
 801a0e4:	4828      	ldr	r0, [pc, #160]	; (801a188 <_printf_i+0x248>)
 801a0e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a0ea:	e7e3      	b.n	801a0b4 <_printf_i+0x174>
 801a0ec:	0659      	lsls	r1, r3, #25
 801a0ee:	bf48      	it	mi
 801a0f0:	b2b6      	uxthmi	r6, r6
 801a0f2:	e7e6      	b.n	801a0c2 <_printf_i+0x182>
 801a0f4:	4615      	mov	r5, r2
 801a0f6:	e7bb      	b.n	801a070 <_printf_i+0x130>
 801a0f8:	682b      	ldr	r3, [r5, #0]
 801a0fa:	6826      	ldr	r6, [r4, #0]
 801a0fc:	6961      	ldr	r1, [r4, #20]
 801a0fe:	1d18      	adds	r0, r3, #4
 801a100:	6028      	str	r0, [r5, #0]
 801a102:	0635      	lsls	r5, r6, #24
 801a104:	681b      	ldr	r3, [r3, #0]
 801a106:	d501      	bpl.n	801a10c <_printf_i+0x1cc>
 801a108:	6019      	str	r1, [r3, #0]
 801a10a:	e002      	b.n	801a112 <_printf_i+0x1d2>
 801a10c:	0670      	lsls	r0, r6, #25
 801a10e:	d5fb      	bpl.n	801a108 <_printf_i+0x1c8>
 801a110:	8019      	strh	r1, [r3, #0]
 801a112:	2300      	movs	r3, #0
 801a114:	6123      	str	r3, [r4, #16]
 801a116:	4615      	mov	r5, r2
 801a118:	e7ba      	b.n	801a090 <_printf_i+0x150>
 801a11a:	682b      	ldr	r3, [r5, #0]
 801a11c:	1d1a      	adds	r2, r3, #4
 801a11e:	602a      	str	r2, [r5, #0]
 801a120:	681d      	ldr	r5, [r3, #0]
 801a122:	6862      	ldr	r2, [r4, #4]
 801a124:	2100      	movs	r1, #0
 801a126:	4628      	mov	r0, r5
 801a128:	f7fe fc5a 	bl	80189e0 <memchr>
 801a12c:	b108      	cbz	r0, 801a132 <_printf_i+0x1f2>
 801a12e:	1b40      	subs	r0, r0, r5
 801a130:	6060      	str	r0, [r4, #4]
 801a132:	6863      	ldr	r3, [r4, #4]
 801a134:	6123      	str	r3, [r4, #16]
 801a136:	2300      	movs	r3, #0
 801a138:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a13c:	e7a8      	b.n	801a090 <_printf_i+0x150>
 801a13e:	6923      	ldr	r3, [r4, #16]
 801a140:	462a      	mov	r2, r5
 801a142:	4649      	mov	r1, r9
 801a144:	4640      	mov	r0, r8
 801a146:	47d0      	blx	sl
 801a148:	3001      	adds	r0, #1
 801a14a:	d0ab      	beq.n	801a0a4 <_printf_i+0x164>
 801a14c:	6823      	ldr	r3, [r4, #0]
 801a14e:	079b      	lsls	r3, r3, #30
 801a150:	d413      	bmi.n	801a17a <_printf_i+0x23a>
 801a152:	68e0      	ldr	r0, [r4, #12]
 801a154:	9b03      	ldr	r3, [sp, #12]
 801a156:	4298      	cmp	r0, r3
 801a158:	bfb8      	it	lt
 801a15a:	4618      	movlt	r0, r3
 801a15c:	e7a4      	b.n	801a0a8 <_printf_i+0x168>
 801a15e:	2301      	movs	r3, #1
 801a160:	4632      	mov	r2, r6
 801a162:	4649      	mov	r1, r9
 801a164:	4640      	mov	r0, r8
 801a166:	47d0      	blx	sl
 801a168:	3001      	adds	r0, #1
 801a16a:	d09b      	beq.n	801a0a4 <_printf_i+0x164>
 801a16c:	3501      	adds	r5, #1
 801a16e:	68e3      	ldr	r3, [r4, #12]
 801a170:	9903      	ldr	r1, [sp, #12]
 801a172:	1a5b      	subs	r3, r3, r1
 801a174:	42ab      	cmp	r3, r5
 801a176:	dcf2      	bgt.n	801a15e <_printf_i+0x21e>
 801a178:	e7eb      	b.n	801a152 <_printf_i+0x212>
 801a17a:	2500      	movs	r5, #0
 801a17c:	f104 0619 	add.w	r6, r4, #25
 801a180:	e7f5      	b.n	801a16e <_printf_i+0x22e>
 801a182:	bf00      	nop
 801a184:	080521c6 	.word	0x080521c6
 801a188:	080521d7 	.word	0x080521d7

0801a18c <_scanf_float>:
 801a18c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a190:	b087      	sub	sp, #28
 801a192:	4617      	mov	r7, r2
 801a194:	9303      	str	r3, [sp, #12]
 801a196:	688b      	ldr	r3, [r1, #8]
 801a198:	1e5a      	subs	r2, r3, #1
 801a19a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801a19e:	bf83      	ittte	hi
 801a1a0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801a1a4:	195b      	addhi	r3, r3, r5
 801a1a6:	9302      	strhi	r3, [sp, #8]
 801a1a8:	2300      	movls	r3, #0
 801a1aa:	bf86      	itte	hi
 801a1ac:	f240 135d 	movwhi	r3, #349	; 0x15d
 801a1b0:	608b      	strhi	r3, [r1, #8]
 801a1b2:	9302      	strls	r3, [sp, #8]
 801a1b4:	680b      	ldr	r3, [r1, #0]
 801a1b6:	468b      	mov	fp, r1
 801a1b8:	2500      	movs	r5, #0
 801a1ba:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801a1be:	f84b 3b1c 	str.w	r3, [fp], #28
 801a1c2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801a1c6:	4680      	mov	r8, r0
 801a1c8:	460c      	mov	r4, r1
 801a1ca:	465e      	mov	r6, fp
 801a1cc:	46aa      	mov	sl, r5
 801a1ce:	46a9      	mov	r9, r5
 801a1d0:	9501      	str	r5, [sp, #4]
 801a1d2:	68a2      	ldr	r2, [r4, #8]
 801a1d4:	b152      	cbz	r2, 801a1ec <_scanf_float+0x60>
 801a1d6:	683b      	ldr	r3, [r7, #0]
 801a1d8:	781b      	ldrb	r3, [r3, #0]
 801a1da:	2b4e      	cmp	r3, #78	; 0x4e
 801a1dc:	d864      	bhi.n	801a2a8 <_scanf_float+0x11c>
 801a1de:	2b40      	cmp	r3, #64	; 0x40
 801a1e0:	d83c      	bhi.n	801a25c <_scanf_float+0xd0>
 801a1e2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801a1e6:	b2c8      	uxtb	r0, r1
 801a1e8:	280e      	cmp	r0, #14
 801a1ea:	d93a      	bls.n	801a262 <_scanf_float+0xd6>
 801a1ec:	f1b9 0f00 	cmp.w	r9, #0
 801a1f0:	d003      	beq.n	801a1fa <_scanf_float+0x6e>
 801a1f2:	6823      	ldr	r3, [r4, #0]
 801a1f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801a1f8:	6023      	str	r3, [r4, #0]
 801a1fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a1fe:	f1ba 0f01 	cmp.w	sl, #1
 801a202:	f200 8113 	bhi.w	801a42c <_scanf_float+0x2a0>
 801a206:	455e      	cmp	r6, fp
 801a208:	f200 8105 	bhi.w	801a416 <_scanf_float+0x28a>
 801a20c:	2501      	movs	r5, #1
 801a20e:	4628      	mov	r0, r5
 801a210:	b007      	add	sp, #28
 801a212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a216:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801a21a:	2a0d      	cmp	r2, #13
 801a21c:	d8e6      	bhi.n	801a1ec <_scanf_float+0x60>
 801a21e:	a101      	add	r1, pc, #4	; (adr r1, 801a224 <_scanf_float+0x98>)
 801a220:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801a224:	0801a363 	.word	0x0801a363
 801a228:	0801a1ed 	.word	0x0801a1ed
 801a22c:	0801a1ed 	.word	0x0801a1ed
 801a230:	0801a1ed 	.word	0x0801a1ed
 801a234:	0801a3c3 	.word	0x0801a3c3
 801a238:	0801a39b 	.word	0x0801a39b
 801a23c:	0801a1ed 	.word	0x0801a1ed
 801a240:	0801a1ed 	.word	0x0801a1ed
 801a244:	0801a371 	.word	0x0801a371
 801a248:	0801a1ed 	.word	0x0801a1ed
 801a24c:	0801a1ed 	.word	0x0801a1ed
 801a250:	0801a1ed 	.word	0x0801a1ed
 801a254:	0801a1ed 	.word	0x0801a1ed
 801a258:	0801a329 	.word	0x0801a329
 801a25c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801a260:	e7db      	b.n	801a21a <_scanf_float+0x8e>
 801a262:	290e      	cmp	r1, #14
 801a264:	d8c2      	bhi.n	801a1ec <_scanf_float+0x60>
 801a266:	a001      	add	r0, pc, #4	; (adr r0, 801a26c <_scanf_float+0xe0>)
 801a268:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801a26c:	0801a31b 	.word	0x0801a31b
 801a270:	0801a1ed 	.word	0x0801a1ed
 801a274:	0801a31b 	.word	0x0801a31b
 801a278:	0801a3af 	.word	0x0801a3af
 801a27c:	0801a1ed 	.word	0x0801a1ed
 801a280:	0801a2c9 	.word	0x0801a2c9
 801a284:	0801a305 	.word	0x0801a305
 801a288:	0801a305 	.word	0x0801a305
 801a28c:	0801a305 	.word	0x0801a305
 801a290:	0801a305 	.word	0x0801a305
 801a294:	0801a305 	.word	0x0801a305
 801a298:	0801a305 	.word	0x0801a305
 801a29c:	0801a305 	.word	0x0801a305
 801a2a0:	0801a305 	.word	0x0801a305
 801a2a4:	0801a305 	.word	0x0801a305
 801a2a8:	2b6e      	cmp	r3, #110	; 0x6e
 801a2aa:	d809      	bhi.n	801a2c0 <_scanf_float+0x134>
 801a2ac:	2b60      	cmp	r3, #96	; 0x60
 801a2ae:	d8b2      	bhi.n	801a216 <_scanf_float+0x8a>
 801a2b0:	2b54      	cmp	r3, #84	; 0x54
 801a2b2:	d077      	beq.n	801a3a4 <_scanf_float+0x218>
 801a2b4:	2b59      	cmp	r3, #89	; 0x59
 801a2b6:	d199      	bne.n	801a1ec <_scanf_float+0x60>
 801a2b8:	2d07      	cmp	r5, #7
 801a2ba:	d197      	bne.n	801a1ec <_scanf_float+0x60>
 801a2bc:	2508      	movs	r5, #8
 801a2be:	e029      	b.n	801a314 <_scanf_float+0x188>
 801a2c0:	2b74      	cmp	r3, #116	; 0x74
 801a2c2:	d06f      	beq.n	801a3a4 <_scanf_float+0x218>
 801a2c4:	2b79      	cmp	r3, #121	; 0x79
 801a2c6:	e7f6      	b.n	801a2b6 <_scanf_float+0x12a>
 801a2c8:	6821      	ldr	r1, [r4, #0]
 801a2ca:	05c8      	lsls	r0, r1, #23
 801a2cc:	d51a      	bpl.n	801a304 <_scanf_float+0x178>
 801a2ce:	9b02      	ldr	r3, [sp, #8]
 801a2d0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801a2d4:	6021      	str	r1, [r4, #0]
 801a2d6:	f109 0901 	add.w	r9, r9, #1
 801a2da:	b11b      	cbz	r3, 801a2e4 <_scanf_float+0x158>
 801a2dc:	3b01      	subs	r3, #1
 801a2de:	3201      	adds	r2, #1
 801a2e0:	9302      	str	r3, [sp, #8]
 801a2e2:	60a2      	str	r2, [r4, #8]
 801a2e4:	68a3      	ldr	r3, [r4, #8]
 801a2e6:	3b01      	subs	r3, #1
 801a2e8:	60a3      	str	r3, [r4, #8]
 801a2ea:	6923      	ldr	r3, [r4, #16]
 801a2ec:	3301      	adds	r3, #1
 801a2ee:	6123      	str	r3, [r4, #16]
 801a2f0:	687b      	ldr	r3, [r7, #4]
 801a2f2:	3b01      	subs	r3, #1
 801a2f4:	2b00      	cmp	r3, #0
 801a2f6:	607b      	str	r3, [r7, #4]
 801a2f8:	f340 8084 	ble.w	801a404 <_scanf_float+0x278>
 801a2fc:	683b      	ldr	r3, [r7, #0]
 801a2fe:	3301      	adds	r3, #1
 801a300:	603b      	str	r3, [r7, #0]
 801a302:	e766      	b.n	801a1d2 <_scanf_float+0x46>
 801a304:	eb1a 0f05 	cmn.w	sl, r5
 801a308:	f47f af70 	bne.w	801a1ec <_scanf_float+0x60>
 801a30c:	6822      	ldr	r2, [r4, #0]
 801a30e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801a312:	6022      	str	r2, [r4, #0]
 801a314:	f806 3b01 	strb.w	r3, [r6], #1
 801a318:	e7e4      	b.n	801a2e4 <_scanf_float+0x158>
 801a31a:	6822      	ldr	r2, [r4, #0]
 801a31c:	0610      	lsls	r0, r2, #24
 801a31e:	f57f af65 	bpl.w	801a1ec <_scanf_float+0x60>
 801a322:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801a326:	e7f4      	b.n	801a312 <_scanf_float+0x186>
 801a328:	f1ba 0f00 	cmp.w	sl, #0
 801a32c:	d10e      	bne.n	801a34c <_scanf_float+0x1c0>
 801a32e:	f1b9 0f00 	cmp.w	r9, #0
 801a332:	d10e      	bne.n	801a352 <_scanf_float+0x1c6>
 801a334:	6822      	ldr	r2, [r4, #0]
 801a336:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801a33a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801a33e:	d108      	bne.n	801a352 <_scanf_float+0x1c6>
 801a340:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a344:	6022      	str	r2, [r4, #0]
 801a346:	f04f 0a01 	mov.w	sl, #1
 801a34a:	e7e3      	b.n	801a314 <_scanf_float+0x188>
 801a34c:	f1ba 0f02 	cmp.w	sl, #2
 801a350:	d055      	beq.n	801a3fe <_scanf_float+0x272>
 801a352:	2d01      	cmp	r5, #1
 801a354:	d002      	beq.n	801a35c <_scanf_float+0x1d0>
 801a356:	2d04      	cmp	r5, #4
 801a358:	f47f af48 	bne.w	801a1ec <_scanf_float+0x60>
 801a35c:	3501      	adds	r5, #1
 801a35e:	b2ed      	uxtb	r5, r5
 801a360:	e7d8      	b.n	801a314 <_scanf_float+0x188>
 801a362:	f1ba 0f01 	cmp.w	sl, #1
 801a366:	f47f af41 	bne.w	801a1ec <_scanf_float+0x60>
 801a36a:	f04f 0a02 	mov.w	sl, #2
 801a36e:	e7d1      	b.n	801a314 <_scanf_float+0x188>
 801a370:	b97d      	cbnz	r5, 801a392 <_scanf_float+0x206>
 801a372:	f1b9 0f00 	cmp.w	r9, #0
 801a376:	f47f af3c 	bne.w	801a1f2 <_scanf_float+0x66>
 801a37a:	6822      	ldr	r2, [r4, #0]
 801a37c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801a380:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801a384:	f47f af39 	bne.w	801a1fa <_scanf_float+0x6e>
 801a388:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a38c:	6022      	str	r2, [r4, #0]
 801a38e:	2501      	movs	r5, #1
 801a390:	e7c0      	b.n	801a314 <_scanf_float+0x188>
 801a392:	2d03      	cmp	r5, #3
 801a394:	d0e2      	beq.n	801a35c <_scanf_float+0x1d0>
 801a396:	2d05      	cmp	r5, #5
 801a398:	e7de      	b.n	801a358 <_scanf_float+0x1cc>
 801a39a:	2d02      	cmp	r5, #2
 801a39c:	f47f af26 	bne.w	801a1ec <_scanf_float+0x60>
 801a3a0:	2503      	movs	r5, #3
 801a3a2:	e7b7      	b.n	801a314 <_scanf_float+0x188>
 801a3a4:	2d06      	cmp	r5, #6
 801a3a6:	f47f af21 	bne.w	801a1ec <_scanf_float+0x60>
 801a3aa:	2507      	movs	r5, #7
 801a3ac:	e7b2      	b.n	801a314 <_scanf_float+0x188>
 801a3ae:	6822      	ldr	r2, [r4, #0]
 801a3b0:	0591      	lsls	r1, r2, #22
 801a3b2:	f57f af1b 	bpl.w	801a1ec <_scanf_float+0x60>
 801a3b6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801a3ba:	6022      	str	r2, [r4, #0]
 801a3bc:	f8cd 9004 	str.w	r9, [sp, #4]
 801a3c0:	e7a8      	b.n	801a314 <_scanf_float+0x188>
 801a3c2:	6822      	ldr	r2, [r4, #0]
 801a3c4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801a3c8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801a3cc:	d006      	beq.n	801a3dc <_scanf_float+0x250>
 801a3ce:	0550      	lsls	r0, r2, #21
 801a3d0:	f57f af0c 	bpl.w	801a1ec <_scanf_float+0x60>
 801a3d4:	f1b9 0f00 	cmp.w	r9, #0
 801a3d8:	f43f af0f 	beq.w	801a1fa <_scanf_float+0x6e>
 801a3dc:	0591      	lsls	r1, r2, #22
 801a3de:	bf58      	it	pl
 801a3e0:	9901      	ldrpl	r1, [sp, #4]
 801a3e2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a3e6:	bf58      	it	pl
 801a3e8:	eba9 0101 	subpl.w	r1, r9, r1
 801a3ec:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801a3f0:	bf58      	it	pl
 801a3f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801a3f6:	6022      	str	r2, [r4, #0]
 801a3f8:	f04f 0900 	mov.w	r9, #0
 801a3fc:	e78a      	b.n	801a314 <_scanf_float+0x188>
 801a3fe:	f04f 0a03 	mov.w	sl, #3
 801a402:	e787      	b.n	801a314 <_scanf_float+0x188>
 801a404:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801a408:	4639      	mov	r1, r7
 801a40a:	4640      	mov	r0, r8
 801a40c:	4798      	blx	r3
 801a40e:	2800      	cmp	r0, #0
 801a410:	f43f aedf 	beq.w	801a1d2 <_scanf_float+0x46>
 801a414:	e6ea      	b.n	801a1ec <_scanf_float+0x60>
 801a416:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a41a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a41e:	463a      	mov	r2, r7
 801a420:	4640      	mov	r0, r8
 801a422:	4798      	blx	r3
 801a424:	6923      	ldr	r3, [r4, #16]
 801a426:	3b01      	subs	r3, #1
 801a428:	6123      	str	r3, [r4, #16]
 801a42a:	e6ec      	b.n	801a206 <_scanf_float+0x7a>
 801a42c:	1e6b      	subs	r3, r5, #1
 801a42e:	2b06      	cmp	r3, #6
 801a430:	d825      	bhi.n	801a47e <_scanf_float+0x2f2>
 801a432:	2d02      	cmp	r5, #2
 801a434:	d836      	bhi.n	801a4a4 <_scanf_float+0x318>
 801a436:	455e      	cmp	r6, fp
 801a438:	f67f aee8 	bls.w	801a20c <_scanf_float+0x80>
 801a43c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a440:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a444:	463a      	mov	r2, r7
 801a446:	4640      	mov	r0, r8
 801a448:	4798      	blx	r3
 801a44a:	6923      	ldr	r3, [r4, #16]
 801a44c:	3b01      	subs	r3, #1
 801a44e:	6123      	str	r3, [r4, #16]
 801a450:	e7f1      	b.n	801a436 <_scanf_float+0x2aa>
 801a452:	9802      	ldr	r0, [sp, #8]
 801a454:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a458:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801a45c:	9002      	str	r0, [sp, #8]
 801a45e:	463a      	mov	r2, r7
 801a460:	4640      	mov	r0, r8
 801a462:	4798      	blx	r3
 801a464:	6923      	ldr	r3, [r4, #16]
 801a466:	3b01      	subs	r3, #1
 801a468:	6123      	str	r3, [r4, #16]
 801a46a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a46e:	fa5f fa8a 	uxtb.w	sl, sl
 801a472:	f1ba 0f02 	cmp.w	sl, #2
 801a476:	d1ec      	bne.n	801a452 <_scanf_float+0x2c6>
 801a478:	3d03      	subs	r5, #3
 801a47a:	b2ed      	uxtb	r5, r5
 801a47c:	1b76      	subs	r6, r6, r5
 801a47e:	6823      	ldr	r3, [r4, #0]
 801a480:	05da      	lsls	r2, r3, #23
 801a482:	d52f      	bpl.n	801a4e4 <_scanf_float+0x358>
 801a484:	055b      	lsls	r3, r3, #21
 801a486:	d510      	bpl.n	801a4aa <_scanf_float+0x31e>
 801a488:	455e      	cmp	r6, fp
 801a48a:	f67f aebf 	bls.w	801a20c <_scanf_float+0x80>
 801a48e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a492:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a496:	463a      	mov	r2, r7
 801a498:	4640      	mov	r0, r8
 801a49a:	4798      	blx	r3
 801a49c:	6923      	ldr	r3, [r4, #16]
 801a49e:	3b01      	subs	r3, #1
 801a4a0:	6123      	str	r3, [r4, #16]
 801a4a2:	e7f1      	b.n	801a488 <_scanf_float+0x2fc>
 801a4a4:	46aa      	mov	sl, r5
 801a4a6:	9602      	str	r6, [sp, #8]
 801a4a8:	e7df      	b.n	801a46a <_scanf_float+0x2de>
 801a4aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801a4ae:	6923      	ldr	r3, [r4, #16]
 801a4b0:	2965      	cmp	r1, #101	; 0x65
 801a4b2:	f103 33ff 	add.w	r3, r3, #4294967295
 801a4b6:	f106 35ff 	add.w	r5, r6, #4294967295
 801a4ba:	6123      	str	r3, [r4, #16]
 801a4bc:	d00c      	beq.n	801a4d8 <_scanf_float+0x34c>
 801a4be:	2945      	cmp	r1, #69	; 0x45
 801a4c0:	d00a      	beq.n	801a4d8 <_scanf_float+0x34c>
 801a4c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a4c6:	463a      	mov	r2, r7
 801a4c8:	4640      	mov	r0, r8
 801a4ca:	4798      	blx	r3
 801a4cc:	6923      	ldr	r3, [r4, #16]
 801a4ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801a4d2:	3b01      	subs	r3, #1
 801a4d4:	1eb5      	subs	r5, r6, #2
 801a4d6:	6123      	str	r3, [r4, #16]
 801a4d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a4dc:	463a      	mov	r2, r7
 801a4de:	4640      	mov	r0, r8
 801a4e0:	4798      	blx	r3
 801a4e2:	462e      	mov	r6, r5
 801a4e4:	6825      	ldr	r5, [r4, #0]
 801a4e6:	f015 0510 	ands.w	r5, r5, #16
 801a4ea:	d159      	bne.n	801a5a0 <_scanf_float+0x414>
 801a4ec:	7035      	strb	r5, [r6, #0]
 801a4ee:	6823      	ldr	r3, [r4, #0]
 801a4f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801a4f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a4f8:	d11b      	bne.n	801a532 <_scanf_float+0x3a6>
 801a4fa:	9b01      	ldr	r3, [sp, #4]
 801a4fc:	454b      	cmp	r3, r9
 801a4fe:	eba3 0209 	sub.w	r2, r3, r9
 801a502:	d123      	bne.n	801a54c <_scanf_float+0x3c0>
 801a504:	2200      	movs	r2, #0
 801a506:	4659      	mov	r1, fp
 801a508:	4640      	mov	r0, r8
 801a50a:	f000 fe97 	bl	801b23c <_strtod_r>
 801a50e:	6822      	ldr	r2, [r4, #0]
 801a510:	9b03      	ldr	r3, [sp, #12]
 801a512:	f012 0f02 	tst.w	r2, #2
 801a516:	ec57 6b10 	vmov	r6, r7, d0
 801a51a:	681b      	ldr	r3, [r3, #0]
 801a51c:	d021      	beq.n	801a562 <_scanf_float+0x3d6>
 801a51e:	9903      	ldr	r1, [sp, #12]
 801a520:	1d1a      	adds	r2, r3, #4
 801a522:	600a      	str	r2, [r1, #0]
 801a524:	681b      	ldr	r3, [r3, #0]
 801a526:	e9c3 6700 	strd	r6, r7, [r3]
 801a52a:	68e3      	ldr	r3, [r4, #12]
 801a52c:	3301      	adds	r3, #1
 801a52e:	60e3      	str	r3, [r4, #12]
 801a530:	e66d      	b.n	801a20e <_scanf_float+0x82>
 801a532:	9b04      	ldr	r3, [sp, #16]
 801a534:	2b00      	cmp	r3, #0
 801a536:	d0e5      	beq.n	801a504 <_scanf_float+0x378>
 801a538:	9905      	ldr	r1, [sp, #20]
 801a53a:	230a      	movs	r3, #10
 801a53c:	462a      	mov	r2, r5
 801a53e:	3101      	adds	r1, #1
 801a540:	4640      	mov	r0, r8
 801a542:	f000 ff03 	bl	801b34c <_strtol_r>
 801a546:	9b04      	ldr	r3, [sp, #16]
 801a548:	9e05      	ldr	r6, [sp, #20]
 801a54a:	1ac2      	subs	r2, r0, r3
 801a54c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801a550:	429e      	cmp	r6, r3
 801a552:	bf28      	it	cs
 801a554:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801a558:	4912      	ldr	r1, [pc, #72]	; (801a5a4 <_scanf_float+0x418>)
 801a55a:	4630      	mov	r0, r6
 801a55c:	f000 f82c 	bl	801a5b8 <siprintf>
 801a560:	e7d0      	b.n	801a504 <_scanf_float+0x378>
 801a562:	9903      	ldr	r1, [sp, #12]
 801a564:	f012 0f04 	tst.w	r2, #4
 801a568:	f103 0204 	add.w	r2, r3, #4
 801a56c:	600a      	str	r2, [r1, #0]
 801a56e:	d1d9      	bne.n	801a524 <_scanf_float+0x398>
 801a570:	f8d3 8000 	ldr.w	r8, [r3]
 801a574:	ee10 2a10 	vmov	r2, s0
 801a578:	ee10 0a10 	vmov	r0, s0
 801a57c:	463b      	mov	r3, r7
 801a57e:	4639      	mov	r1, r7
 801a580:	f7fe fed4 	bl	801932c <__aeabi_dcmpun>
 801a584:	b128      	cbz	r0, 801a592 <_scanf_float+0x406>
 801a586:	4808      	ldr	r0, [pc, #32]	; (801a5a8 <_scanf_float+0x41c>)
 801a588:	f000 f810 	bl	801a5ac <nanf>
 801a58c:	ed88 0a00 	vstr	s0, [r8]
 801a590:	e7cb      	b.n	801a52a <_scanf_float+0x39e>
 801a592:	4630      	mov	r0, r6
 801a594:	4639      	mov	r1, r7
 801a596:	f7fe ff27 	bl	80193e8 <__aeabi_d2f>
 801a59a:	f8c8 0000 	str.w	r0, [r8]
 801a59e:	e7c4      	b.n	801a52a <_scanf_float+0x39e>
 801a5a0:	2500      	movs	r5, #0
 801a5a2:	e634      	b.n	801a20e <_scanf_float+0x82>
 801a5a4:	080521e8 	.word	0x080521e8
 801a5a8:	080525f0 	.word	0x080525f0

0801a5ac <nanf>:
 801a5ac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a5b4 <nanf+0x8>
 801a5b0:	4770      	bx	lr
 801a5b2:	bf00      	nop
 801a5b4:	7fc00000 	.word	0x7fc00000

0801a5b8 <siprintf>:
 801a5b8:	b40e      	push	{r1, r2, r3}
 801a5ba:	b500      	push	{lr}
 801a5bc:	b09c      	sub	sp, #112	; 0x70
 801a5be:	ab1d      	add	r3, sp, #116	; 0x74
 801a5c0:	9002      	str	r0, [sp, #8]
 801a5c2:	9006      	str	r0, [sp, #24]
 801a5c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a5c8:	4809      	ldr	r0, [pc, #36]	; (801a5f0 <siprintf+0x38>)
 801a5ca:	9107      	str	r1, [sp, #28]
 801a5cc:	9104      	str	r1, [sp, #16]
 801a5ce:	4909      	ldr	r1, [pc, #36]	; (801a5f4 <siprintf+0x3c>)
 801a5d0:	f853 2b04 	ldr.w	r2, [r3], #4
 801a5d4:	9105      	str	r1, [sp, #20]
 801a5d6:	6800      	ldr	r0, [r0, #0]
 801a5d8:	9301      	str	r3, [sp, #4]
 801a5da:	a902      	add	r1, sp, #8
 801a5dc:	f002 feee 	bl	801d3bc <_svfiprintf_r>
 801a5e0:	9b02      	ldr	r3, [sp, #8]
 801a5e2:	2200      	movs	r2, #0
 801a5e4:	701a      	strb	r2, [r3, #0]
 801a5e6:	b01c      	add	sp, #112	; 0x70
 801a5e8:	f85d eb04 	ldr.w	lr, [sp], #4
 801a5ec:	b003      	add	sp, #12
 801a5ee:	4770      	bx	lr
 801a5f0:	20000064 	.word	0x20000064
 801a5f4:	ffff0208 	.word	0xffff0208

0801a5f8 <sulp>:
 801a5f8:	b570      	push	{r4, r5, r6, lr}
 801a5fa:	4604      	mov	r4, r0
 801a5fc:	460d      	mov	r5, r1
 801a5fe:	ec45 4b10 	vmov	d0, r4, r5
 801a602:	4616      	mov	r6, r2
 801a604:	f002 fc38 	bl	801ce78 <__ulp>
 801a608:	ec51 0b10 	vmov	r0, r1, d0
 801a60c:	b17e      	cbz	r6, 801a62e <sulp+0x36>
 801a60e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801a612:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801a616:	2b00      	cmp	r3, #0
 801a618:	dd09      	ble.n	801a62e <sulp+0x36>
 801a61a:	051b      	lsls	r3, r3, #20
 801a61c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801a620:	2400      	movs	r4, #0
 801a622:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801a626:	4622      	mov	r2, r4
 801a628:	462b      	mov	r3, r5
 801a62a:	f7fe fbe5 	bl	8018df8 <__aeabi_dmul>
 801a62e:	bd70      	pop	{r4, r5, r6, pc}

0801a630 <_strtod_l>:
 801a630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a634:	ed2d 8b02 	vpush	{d8}
 801a638:	b09d      	sub	sp, #116	; 0x74
 801a63a:	461f      	mov	r7, r3
 801a63c:	2300      	movs	r3, #0
 801a63e:	9318      	str	r3, [sp, #96]	; 0x60
 801a640:	4ba2      	ldr	r3, [pc, #648]	; (801a8cc <_strtod_l+0x29c>)
 801a642:	9213      	str	r2, [sp, #76]	; 0x4c
 801a644:	681b      	ldr	r3, [r3, #0]
 801a646:	9305      	str	r3, [sp, #20]
 801a648:	4604      	mov	r4, r0
 801a64a:	4618      	mov	r0, r3
 801a64c:	4688      	mov	r8, r1
 801a64e:	f7fe f9b9 	bl	80189c4 <strlen>
 801a652:	f04f 0a00 	mov.w	sl, #0
 801a656:	4605      	mov	r5, r0
 801a658:	f04f 0b00 	mov.w	fp, #0
 801a65c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801a660:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a662:	781a      	ldrb	r2, [r3, #0]
 801a664:	2a2b      	cmp	r2, #43	; 0x2b
 801a666:	d04e      	beq.n	801a706 <_strtod_l+0xd6>
 801a668:	d83b      	bhi.n	801a6e2 <_strtod_l+0xb2>
 801a66a:	2a0d      	cmp	r2, #13
 801a66c:	d834      	bhi.n	801a6d8 <_strtod_l+0xa8>
 801a66e:	2a08      	cmp	r2, #8
 801a670:	d834      	bhi.n	801a6dc <_strtod_l+0xac>
 801a672:	2a00      	cmp	r2, #0
 801a674:	d03e      	beq.n	801a6f4 <_strtod_l+0xc4>
 801a676:	2300      	movs	r3, #0
 801a678:	930a      	str	r3, [sp, #40]	; 0x28
 801a67a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801a67c:	7833      	ldrb	r3, [r6, #0]
 801a67e:	2b30      	cmp	r3, #48	; 0x30
 801a680:	f040 80b0 	bne.w	801a7e4 <_strtod_l+0x1b4>
 801a684:	7873      	ldrb	r3, [r6, #1]
 801a686:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801a68a:	2b58      	cmp	r3, #88	; 0x58
 801a68c:	d168      	bne.n	801a760 <_strtod_l+0x130>
 801a68e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a690:	9301      	str	r3, [sp, #4]
 801a692:	ab18      	add	r3, sp, #96	; 0x60
 801a694:	9702      	str	r7, [sp, #8]
 801a696:	9300      	str	r3, [sp, #0]
 801a698:	4a8d      	ldr	r2, [pc, #564]	; (801a8d0 <_strtod_l+0x2a0>)
 801a69a:	ab19      	add	r3, sp, #100	; 0x64
 801a69c:	a917      	add	r1, sp, #92	; 0x5c
 801a69e:	4620      	mov	r0, r4
 801a6a0:	f001 fd44 	bl	801c12c <__gethex>
 801a6a4:	f010 0707 	ands.w	r7, r0, #7
 801a6a8:	4605      	mov	r5, r0
 801a6aa:	d005      	beq.n	801a6b8 <_strtod_l+0x88>
 801a6ac:	2f06      	cmp	r7, #6
 801a6ae:	d12c      	bne.n	801a70a <_strtod_l+0xda>
 801a6b0:	3601      	adds	r6, #1
 801a6b2:	2300      	movs	r3, #0
 801a6b4:	9617      	str	r6, [sp, #92]	; 0x5c
 801a6b6:	930a      	str	r3, [sp, #40]	; 0x28
 801a6b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a6ba:	2b00      	cmp	r3, #0
 801a6bc:	f040 8590 	bne.w	801b1e0 <_strtod_l+0xbb0>
 801a6c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a6c2:	b1eb      	cbz	r3, 801a700 <_strtod_l+0xd0>
 801a6c4:	4652      	mov	r2, sl
 801a6c6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801a6ca:	ec43 2b10 	vmov	d0, r2, r3
 801a6ce:	b01d      	add	sp, #116	; 0x74
 801a6d0:	ecbd 8b02 	vpop	{d8}
 801a6d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a6d8:	2a20      	cmp	r2, #32
 801a6da:	d1cc      	bne.n	801a676 <_strtod_l+0x46>
 801a6dc:	3301      	adds	r3, #1
 801a6de:	9317      	str	r3, [sp, #92]	; 0x5c
 801a6e0:	e7be      	b.n	801a660 <_strtod_l+0x30>
 801a6e2:	2a2d      	cmp	r2, #45	; 0x2d
 801a6e4:	d1c7      	bne.n	801a676 <_strtod_l+0x46>
 801a6e6:	2201      	movs	r2, #1
 801a6e8:	920a      	str	r2, [sp, #40]	; 0x28
 801a6ea:	1c5a      	adds	r2, r3, #1
 801a6ec:	9217      	str	r2, [sp, #92]	; 0x5c
 801a6ee:	785b      	ldrb	r3, [r3, #1]
 801a6f0:	2b00      	cmp	r3, #0
 801a6f2:	d1c2      	bne.n	801a67a <_strtod_l+0x4a>
 801a6f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a6f6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801a6fa:	2b00      	cmp	r3, #0
 801a6fc:	f040 856e 	bne.w	801b1dc <_strtod_l+0xbac>
 801a700:	4652      	mov	r2, sl
 801a702:	465b      	mov	r3, fp
 801a704:	e7e1      	b.n	801a6ca <_strtod_l+0x9a>
 801a706:	2200      	movs	r2, #0
 801a708:	e7ee      	b.n	801a6e8 <_strtod_l+0xb8>
 801a70a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801a70c:	b13a      	cbz	r2, 801a71e <_strtod_l+0xee>
 801a70e:	2135      	movs	r1, #53	; 0x35
 801a710:	a81a      	add	r0, sp, #104	; 0x68
 801a712:	f002 fcbc 	bl	801d08e <__copybits>
 801a716:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a718:	4620      	mov	r0, r4
 801a71a:	f002 f87b 	bl	801c814 <_Bfree>
 801a71e:	3f01      	subs	r7, #1
 801a720:	2f04      	cmp	r7, #4
 801a722:	d806      	bhi.n	801a732 <_strtod_l+0x102>
 801a724:	e8df f007 	tbb	[pc, r7]
 801a728:	1714030a 	.word	0x1714030a
 801a72c:	0a          	.byte	0x0a
 801a72d:	00          	.byte	0x00
 801a72e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801a732:	0728      	lsls	r0, r5, #28
 801a734:	d5c0      	bpl.n	801a6b8 <_strtod_l+0x88>
 801a736:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801a73a:	e7bd      	b.n	801a6b8 <_strtod_l+0x88>
 801a73c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 801a740:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801a742:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801a746:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801a74a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801a74e:	e7f0      	b.n	801a732 <_strtod_l+0x102>
 801a750:	f8df b180 	ldr.w	fp, [pc, #384]	; 801a8d4 <_strtod_l+0x2a4>
 801a754:	e7ed      	b.n	801a732 <_strtod_l+0x102>
 801a756:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801a75a:	f04f 3aff 	mov.w	sl, #4294967295
 801a75e:	e7e8      	b.n	801a732 <_strtod_l+0x102>
 801a760:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a762:	1c5a      	adds	r2, r3, #1
 801a764:	9217      	str	r2, [sp, #92]	; 0x5c
 801a766:	785b      	ldrb	r3, [r3, #1]
 801a768:	2b30      	cmp	r3, #48	; 0x30
 801a76a:	d0f9      	beq.n	801a760 <_strtod_l+0x130>
 801a76c:	2b00      	cmp	r3, #0
 801a76e:	d0a3      	beq.n	801a6b8 <_strtod_l+0x88>
 801a770:	2301      	movs	r3, #1
 801a772:	f04f 0900 	mov.w	r9, #0
 801a776:	9304      	str	r3, [sp, #16]
 801a778:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a77a:	9308      	str	r3, [sp, #32]
 801a77c:	f8cd 901c 	str.w	r9, [sp, #28]
 801a780:	464f      	mov	r7, r9
 801a782:	220a      	movs	r2, #10
 801a784:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801a786:	7806      	ldrb	r6, [r0, #0]
 801a788:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801a78c:	b2d9      	uxtb	r1, r3
 801a78e:	2909      	cmp	r1, #9
 801a790:	d92a      	bls.n	801a7e8 <_strtod_l+0x1b8>
 801a792:	9905      	ldr	r1, [sp, #20]
 801a794:	462a      	mov	r2, r5
 801a796:	f002 ff2b 	bl	801d5f0 <strncmp>
 801a79a:	b398      	cbz	r0, 801a804 <_strtod_l+0x1d4>
 801a79c:	2000      	movs	r0, #0
 801a79e:	4632      	mov	r2, r6
 801a7a0:	463d      	mov	r5, r7
 801a7a2:	9005      	str	r0, [sp, #20]
 801a7a4:	4603      	mov	r3, r0
 801a7a6:	2a65      	cmp	r2, #101	; 0x65
 801a7a8:	d001      	beq.n	801a7ae <_strtod_l+0x17e>
 801a7aa:	2a45      	cmp	r2, #69	; 0x45
 801a7ac:	d118      	bne.n	801a7e0 <_strtod_l+0x1b0>
 801a7ae:	b91d      	cbnz	r5, 801a7b8 <_strtod_l+0x188>
 801a7b0:	9a04      	ldr	r2, [sp, #16]
 801a7b2:	4302      	orrs	r2, r0
 801a7b4:	d09e      	beq.n	801a6f4 <_strtod_l+0xc4>
 801a7b6:	2500      	movs	r5, #0
 801a7b8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801a7bc:	f108 0201 	add.w	r2, r8, #1
 801a7c0:	9217      	str	r2, [sp, #92]	; 0x5c
 801a7c2:	f898 2001 	ldrb.w	r2, [r8, #1]
 801a7c6:	2a2b      	cmp	r2, #43	; 0x2b
 801a7c8:	d075      	beq.n	801a8b6 <_strtod_l+0x286>
 801a7ca:	2a2d      	cmp	r2, #45	; 0x2d
 801a7cc:	d07b      	beq.n	801a8c6 <_strtod_l+0x296>
 801a7ce:	f04f 0c00 	mov.w	ip, #0
 801a7d2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801a7d6:	2909      	cmp	r1, #9
 801a7d8:	f240 8082 	bls.w	801a8e0 <_strtod_l+0x2b0>
 801a7dc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801a7e0:	2600      	movs	r6, #0
 801a7e2:	e09d      	b.n	801a920 <_strtod_l+0x2f0>
 801a7e4:	2300      	movs	r3, #0
 801a7e6:	e7c4      	b.n	801a772 <_strtod_l+0x142>
 801a7e8:	2f08      	cmp	r7, #8
 801a7ea:	bfd8      	it	le
 801a7ec:	9907      	ldrle	r1, [sp, #28]
 801a7ee:	f100 0001 	add.w	r0, r0, #1
 801a7f2:	bfda      	itte	le
 801a7f4:	fb02 3301 	mlale	r3, r2, r1, r3
 801a7f8:	9307      	strle	r3, [sp, #28]
 801a7fa:	fb02 3909 	mlagt	r9, r2, r9, r3
 801a7fe:	3701      	adds	r7, #1
 801a800:	9017      	str	r0, [sp, #92]	; 0x5c
 801a802:	e7bf      	b.n	801a784 <_strtod_l+0x154>
 801a804:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a806:	195a      	adds	r2, r3, r5
 801a808:	9217      	str	r2, [sp, #92]	; 0x5c
 801a80a:	5d5a      	ldrb	r2, [r3, r5]
 801a80c:	2f00      	cmp	r7, #0
 801a80e:	d037      	beq.n	801a880 <_strtod_l+0x250>
 801a810:	9005      	str	r0, [sp, #20]
 801a812:	463d      	mov	r5, r7
 801a814:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801a818:	2b09      	cmp	r3, #9
 801a81a:	d912      	bls.n	801a842 <_strtod_l+0x212>
 801a81c:	2301      	movs	r3, #1
 801a81e:	e7c2      	b.n	801a7a6 <_strtod_l+0x176>
 801a820:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a822:	1c5a      	adds	r2, r3, #1
 801a824:	9217      	str	r2, [sp, #92]	; 0x5c
 801a826:	785a      	ldrb	r2, [r3, #1]
 801a828:	3001      	adds	r0, #1
 801a82a:	2a30      	cmp	r2, #48	; 0x30
 801a82c:	d0f8      	beq.n	801a820 <_strtod_l+0x1f0>
 801a82e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801a832:	2b08      	cmp	r3, #8
 801a834:	f200 84d9 	bhi.w	801b1ea <_strtod_l+0xbba>
 801a838:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a83a:	9005      	str	r0, [sp, #20]
 801a83c:	2000      	movs	r0, #0
 801a83e:	9308      	str	r3, [sp, #32]
 801a840:	4605      	mov	r5, r0
 801a842:	3a30      	subs	r2, #48	; 0x30
 801a844:	f100 0301 	add.w	r3, r0, #1
 801a848:	d014      	beq.n	801a874 <_strtod_l+0x244>
 801a84a:	9905      	ldr	r1, [sp, #20]
 801a84c:	4419      	add	r1, r3
 801a84e:	9105      	str	r1, [sp, #20]
 801a850:	462b      	mov	r3, r5
 801a852:	eb00 0e05 	add.w	lr, r0, r5
 801a856:	210a      	movs	r1, #10
 801a858:	4573      	cmp	r3, lr
 801a85a:	d113      	bne.n	801a884 <_strtod_l+0x254>
 801a85c:	182b      	adds	r3, r5, r0
 801a85e:	2b08      	cmp	r3, #8
 801a860:	f105 0501 	add.w	r5, r5, #1
 801a864:	4405      	add	r5, r0
 801a866:	dc1c      	bgt.n	801a8a2 <_strtod_l+0x272>
 801a868:	9907      	ldr	r1, [sp, #28]
 801a86a:	230a      	movs	r3, #10
 801a86c:	fb03 2301 	mla	r3, r3, r1, r2
 801a870:	9307      	str	r3, [sp, #28]
 801a872:	2300      	movs	r3, #0
 801a874:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a876:	1c51      	adds	r1, r2, #1
 801a878:	9117      	str	r1, [sp, #92]	; 0x5c
 801a87a:	7852      	ldrb	r2, [r2, #1]
 801a87c:	4618      	mov	r0, r3
 801a87e:	e7c9      	b.n	801a814 <_strtod_l+0x1e4>
 801a880:	4638      	mov	r0, r7
 801a882:	e7d2      	b.n	801a82a <_strtod_l+0x1fa>
 801a884:	2b08      	cmp	r3, #8
 801a886:	dc04      	bgt.n	801a892 <_strtod_l+0x262>
 801a888:	9e07      	ldr	r6, [sp, #28]
 801a88a:	434e      	muls	r6, r1
 801a88c:	9607      	str	r6, [sp, #28]
 801a88e:	3301      	adds	r3, #1
 801a890:	e7e2      	b.n	801a858 <_strtod_l+0x228>
 801a892:	f103 0c01 	add.w	ip, r3, #1
 801a896:	f1bc 0f10 	cmp.w	ip, #16
 801a89a:	bfd8      	it	le
 801a89c:	fb01 f909 	mulle.w	r9, r1, r9
 801a8a0:	e7f5      	b.n	801a88e <_strtod_l+0x25e>
 801a8a2:	2d10      	cmp	r5, #16
 801a8a4:	bfdc      	itt	le
 801a8a6:	230a      	movle	r3, #10
 801a8a8:	fb03 2909 	mlale	r9, r3, r9, r2
 801a8ac:	e7e1      	b.n	801a872 <_strtod_l+0x242>
 801a8ae:	2300      	movs	r3, #0
 801a8b0:	9305      	str	r3, [sp, #20]
 801a8b2:	2301      	movs	r3, #1
 801a8b4:	e77c      	b.n	801a7b0 <_strtod_l+0x180>
 801a8b6:	f04f 0c00 	mov.w	ip, #0
 801a8ba:	f108 0202 	add.w	r2, r8, #2
 801a8be:	9217      	str	r2, [sp, #92]	; 0x5c
 801a8c0:	f898 2002 	ldrb.w	r2, [r8, #2]
 801a8c4:	e785      	b.n	801a7d2 <_strtod_l+0x1a2>
 801a8c6:	f04f 0c01 	mov.w	ip, #1
 801a8ca:	e7f6      	b.n	801a8ba <_strtod_l+0x28a>
 801a8cc:	08052438 	.word	0x08052438
 801a8d0:	080521f0 	.word	0x080521f0
 801a8d4:	7ff00000 	.word	0x7ff00000
 801a8d8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a8da:	1c51      	adds	r1, r2, #1
 801a8dc:	9117      	str	r1, [sp, #92]	; 0x5c
 801a8de:	7852      	ldrb	r2, [r2, #1]
 801a8e0:	2a30      	cmp	r2, #48	; 0x30
 801a8e2:	d0f9      	beq.n	801a8d8 <_strtod_l+0x2a8>
 801a8e4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801a8e8:	2908      	cmp	r1, #8
 801a8ea:	f63f af79 	bhi.w	801a7e0 <_strtod_l+0x1b0>
 801a8ee:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801a8f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a8f4:	9206      	str	r2, [sp, #24]
 801a8f6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a8f8:	1c51      	adds	r1, r2, #1
 801a8fa:	9117      	str	r1, [sp, #92]	; 0x5c
 801a8fc:	7852      	ldrb	r2, [r2, #1]
 801a8fe:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801a902:	2e09      	cmp	r6, #9
 801a904:	d937      	bls.n	801a976 <_strtod_l+0x346>
 801a906:	9e06      	ldr	r6, [sp, #24]
 801a908:	1b89      	subs	r1, r1, r6
 801a90a:	2908      	cmp	r1, #8
 801a90c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801a910:	dc02      	bgt.n	801a918 <_strtod_l+0x2e8>
 801a912:	4576      	cmp	r6, lr
 801a914:	bfa8      	it	ge
 801a916:	4676      	movge	r6, lr
 801a918:	f1bc 0f00 	cmp.w	ip, #0
 801a91c:	d000      	beq.n	801a920 <_strtod_l+0x2f0>
 801a91e:	4276      	negs	r6, r6
 801a920:	2d00      	cmp	r5, #0
 801a922:	d14d      	bne.n	801a9c0 <_strtod_l+0x390>
 801a924:	9904      	ldr	r1, [sp, #16]
 801a926:	4301      	orrs	r1, r0
 801a928:	f47f aec6 	bne.w	801a6b8 <_strtod_l+0x88>
 801a92c:	2b00      	cmp	r3, #0
 801a92e:	f47f aee1 	bne.w	801a6f4 <_strtod_l+0xc4>
 801a932:	2a69      	cmp	r2, #105	; 0x69
 801a934:	d027      	beq.n	801a986 <_strtod_l+0x356>
 801a936:	dc24      	bgt.n	801a982 <_strtod_l+0x352>
 801a938:	2a49      	cmp	r2, #73	; 0x49
 801a93a:	d024      	beq.n	801a986 <_strtod_l+0x356>
 801a93c:	2a4e      	cmp	r2, #78	; 0x4e
 801a93e:	f47f aed9 	bne.w	801a6f4 <_strtod_l+0xc4>
 801a942:	499f      	ldr	r1, [pc, #636]	; (801abc0 <_strtod_l+0x590>)
 801a944:	a817      	add	r0, sp, #92	; 0x5c
 801a946:	f001 fe49 	bl	801c5dc <__match>
 801a94a:	2800      	cmp	r0, #0
 801a94c:	f43f aed2 	beq.w	801a6f4 <_strtod_l+0xc4>
 801a950:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a952:	781b      	ldrb	r3, [r3, #0]
 801a954:	2b28      	cmp	r3, #40	; 0x28
 801a956:	d12d      	bne.n	801a9b4 <_strtod_l+0x384>
 801a958:	499a      	ldr	r1, [pc, #616]	; (801abc4 <_strtod_l+0x594>)
 801a95a:	aa1a      	add	r2, sp, #104	; 0x68
 801a95c:	a817      	add	r0, sp, #92	; 0x5c
 801a95e:	f001 fe51 	bl	801c604 <__hexnan>
 801a962:	2805      	cmp	r0, #5
 801a964:	d126      	bne.n	801a9b4 <_strtod_l+0x384>
 801a966:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a968:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801a96c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801a970:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801a974:	e6a0      	b.n	801a6b8 <_strtod_l+0x88>
 801a976:	210a      	movs	r1, #10
 801a978:	fb01 2e0e 	mla	lr, r1, lr, r2
 801a97c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801a980:	e7b9      	b.n	801a8f6 <_strtod_l+0x2c6>
 801a982:	2a6e      	cmp	r2, #110	; 0x6e
 801a984:	e7db      	b.n	801a93e <_strtod_l+0x30e>
 801a986:	4990      	ldr	r1, [pc, #576]	; (801abc8 <_strtod_l+0x598>)
 801a988:	a817      	add	r0, sp, #92	; 0x5c
 801a98a:	f001 fe27 	bl	801c5dc <__match>
 801a98e:	2800      	cmp	r0, #0
 801a990:	f43f aeb0 	beq.w	801a6f4 <_strtod_l+0xc4>
 801a994:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a996:	498d      	ldr	r1, [pc, #564]	; (801abcc <_strtod_l+0x59c>)
 801a998:	3b01      	subs	r3, #1
 801a99a:	a817      	add	r0, sp, #92	; 0x5c
 801a99c:	9317      	str	r3, [sp, #92]	; 0x5c
 801a99e:	f001 fe1d 	bl	801c5dc <__match>
 801a9a2:	b910      	cbnz	r0, 801a9aa <_strtod_l+0x37a>
 801a9a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a9a6:	3301      	adds	r3, #1
 801a9a8:	9317      	str	r3, [sp, #92]	; 0x5c
 801a9aa:	f8df b230 	ldr.w	fp, [pc, #560]	; 801abdc <_strtod_l+0x5ac>
 801a9ae:	f04f 0a00 	mov.w	sl, #0
 801a9b2:	e681      	b.n	801a6b8 <_strtod_l+0x88>
 801a9b4:	4886      	ldr	r0, [pc, #536]	; (801abd0 <_strtod_l+0x5a0>)
 801a9b6:	f002 fe03 	bl	801d5c0 <nan>
 801a9ba:	ec5b ab10 	vmov	sl, fp, d0
 801a9be:	e67b      	b.n	801a6b8 <_strtod_l+0x88>
 801a9c0:	9b05      	ldr	r3, [sp, #20]
 801a9c2:	9807      	ldr	r0, [sp, #28]
 801a9c4:	1af3      	subs	r3, r6, r3
 801a9c6:	2f00      	cmp	r7, #0
 801a9c8:	bf08      	it	eq
 801a9ca:	462f      	moveq	r7, r5
 801a9cc:	2d10      	cmp	r5, #16
 801a9ce:	9306      	str	r3, [sp, #24]
 801a9d0:	46a8      	mov	r8, r5
 801a9d2:	bfa8      	it	ge
 801a9d4:	f04f 0810 	movge.w	r8, #16
 801a9d8:	f7fe f994 	bl	8018d04 <__aeabi_ui2d>
 801a9dc:	2d09      	cmp	r5, #9
 801a9de:	4682      	mov	sl, r0
 801a9e0:	468b      	mov	fp, r1
 801a9e2:	dd13      	ble.n	801aa0c <_strtod_l+0x3dc>
 801a9e4:	4b7b      	ldr	r3, [pc, #492]	; (801abd4 <_strtod_l+0x5a4>)
 801a9e6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801a9ea:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801a9ee:	f7fe fa03 	bl	8018df8 <__aeabi_dmul>
 801a9f2:	4682      	mov	sl, r0
 801a9f4:	4648      	mov	r0, r9
 801a9f6:	468b      	mov	fp, r1
 801a9f8:	f7fe f984 	bl	8018d04 <__aeabi_ui2d>
 801a9fc:	4602      	mov	r2, r0
 801a9fe:	460b      	mov	r3, r1
 801aa00:	4650      	mov	r0, sl
 801aa02:	4659      	mov	r1, fp
 801aa04:	f7fe f842 	bl	8018a8c <__adddf3>
 801aa08:	4682      	mov	sl, r0
 801aa0a:	468b      	mov	fp, r1
 801aa0c:	2d0f      	cmp	r5, #15
 801aa0e:	dc38      	bgt.n	801aa82 <_strtod_l+0x452>
 801aa10:	9b06      	ldr	r3, [sp, #24]
 801aa12:	2b00      	cmp	r3, #0
 801aa14:	f43f ae50 	beq.w	801a6b8 <_strtod_l+0x88>
 801aa18:	dd24      	ble.n	801aa64 <_strtod_l+0x434>
 801aa1a:	2b16      	cmp	r3, #22
 801aa1c:	dc0b      	bgt.n	801aa36 <_strtod_l+0x406>
 801aa1e:	496d      	ldr	r1, [pc, #436]	; (801abd4 <_strtod_l+0x5a4>)
 801aa20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801aa24:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aa28:	4652      	mov	r2, sl
 801aa2a:	465b      	mov	r3, fp
 801aa2c:	f7fe f9e4 	bl	8018df8 <__aeabi_dmul>
 801aa30:	4682      	mov	sl, r0
 801aa32:	468b      	mov	fp, r1
 801aa34:	e640      	b.n	801a6b8 <_strtod_l+0x88>
 801aa36:	9a06      	ldr	r2, [sp, #24]
 801aa38:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801aa3c:	4293      	cmp	r3, r2
 801aa3e:	db20      	blt.n	801aa82 <_strtod_l+0x452>
 801aa40:	4c64      	ldr	r4, [pc, #400]	; (801abd4 <_strtod_l+0x5a4>)
 801aa42:	f1c5 050f 	rsb	r5, r5, #15
 801aa46:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801aa4a:	4652      	mov	r2, sl
 801aa4c:	465b      	mov	r3, fp
 801aa4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aa52:	f7fe f9d1 	bl	8018df8 <__aeabi_dmul>
 801aa56:	9b06      	ldr	r3, [sp, #24]
 801aa58:	1b5d      	subs	r5, r3, r5
 801aa5a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801aa5e:	e9d4 2300 	ldrd	r2, r3, [r4]
 801aa62:	e7e3      	b.n	801aa2c <_strtod_l+0x3fc>
 801aa64:	9b06      	ldr	r3, [sp, #24]
 801aa66:	3316      	adds	r3, #22
 801aa68:	db0b      	blt.n	801aa82 <_strtod_l+0x452>
 801aa6a:	9b05      	ldr	r3, [sp, #20]
 801aa6c:	1b9e      	subs	r6, r3, r6
 801aa6e:	4b59      	ldr	r3, [pc, #356]	; (801abd4 <_strtod_l+0x5a4>)
 801aa70:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801aa74:	e9d6 2300 	ldrd	r2, r3, [r6]
 801aa78:	4650      	mov	r0, sl
 801aa7a:	4659      	mov	r1, fp
 801aa7c:	f7fe fae6 	bl	801904c <__aeabi_ddiv>
 801aa80:	e7d6      	b.n	801aa30 <_strtod_l+0x400>
 801aa82:	9b06      	ldr	r3, [sp, #24]
 801aa84:	eba5 0808 	sub.w	r8, r5, r8
 801aa88:	4498      	add	r8, r3
 801aa8a:	f1b8 0f00 	cmp.w	r8, #0
 801aa8e:	dd74      	ble.n	801ab7a <_strtod_l+0x54a>
 801aa90:	f018 030f 	ands.w	r3, r8, #15
 801aa94:	d00a      	beq.n	801aaac <_strtod_l+0x47c>
 801aa96:	494f      	ldr	r1, [pc, #316]	; (801abd4 <_strtod_l+0x5a4>)
 801aa98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801aa9c:	4652      	mov	r2, sl
 801aa9e:	465b      	mov	r3, fp
 801aaa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aaa4:	f7fe f9a8 	bl	8018df8 <__aeabi_dmul>
 801aaa8:	4682      	mov	sl, r0
 801aaaa:	468b      	mov	fp, r1
 801aaac:	f038 080f 	bics.w	r8, r8, #15
 801aab0:	d04f      	beq.n	801ab52 <_strtod_l+0x522>
 801aab2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801aab6:	dd22      	ble.n	801aafe <_strtod_l+0x4ce>
 801aab8:	2500      	movs	r5, #0
 801aaba:	462e      	mov	r6, r5
 801aabc:	9507      	str	r5, [sp, #28]
 801aabe:	9505      	str	r5, [sp, #20]
 801aac0:	2322      	movs	r3, #34	; 0x22
 801aac2:	f8df b118 	ldr.w	fp, [pc, #280]	; 801abdc <_strtod_l+0x5ac>
 801aac6:	6023      	str	r3, [r4, #0]
 801aac8:	f04f 0a00 	mov.w	sl, #0
 801aacc:	9b07      	ldr	r3, [sp, #28]
 801aace:	2b00      	cmp	r3, #0
 801aad0:	f43f adf2 	beq.w	801a6b8 <_strtod_l+0x88>
 801aad4:	9918      	ldr	r1, [sp, #96]	; 0x60
 801aad6:	4620      	mov	r0, r4
 801aad8:	f001 fe9c 	bl	801c814 <_Bfree>
 801aadc:	9905      	ldr	r1, [sp, #20]
 801aade:	4620      	mov	r0, r4
 801aae0:	f001 fe98 	bl	801c814 <_Bfree>
 801aae4:	4631      	mov	r1, r6
 801aae6:	4620      	mov	r0, r4
 801aae8:	f001 fe94 	bl	801c814 <_Bfree>
 801aaec:	9907      	ldr	r1, [sp, #28]
 801aaee:	4620      	mov	r0, r4
 801aaf0:	f001 fe90 	bl	801c814 <_Bfree>
 801aaf4:	4629      	mov	r1, r5
 801aaf6:	4620      	mov	r0, r4
 801aaf8:	f001 fe8c 	bl	801c814 <_Bfree>
 801aafc:	e5dc      	b.n	801a6b8 <_strtod_l+0x88>
 801aafe:	4b36      	ldr	r3, [pc, #216]	; (801abd8 <_strtod_l+0x5a8>)
 801ab00:	9304      	str	r3, [sp, #16]
 801ab02:	2300      	movs	r3, #0
 801ab04:	ea4f 1828 	mov.w	r8, r8, asr #4
 801ab08:	4650      	mov	r0, sl
 801ab0a:	4659      	mov	r1, fp
 801ab0c:	4699      	mov	r9, r3
 801ab0e:	f1b8 0f01 	cmp.w	r8, #1
 801ab12:	dc21      	bgt.n	801ab58 <_strtod_l+0x528>
 801ab14:	b10b      	cbz	r3, 801ab1a <_strtod_l+0x4ea>
 801ab16:	4682      	mov	sl, r0
 801ab18:	468b      	mov	fp, r1
 801ab1a:	4b2f      	ldr	r3, [pc, #188]	; (801abd8 <_strtod_l+0x5a8>)
 801ab1c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801ab20:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801ab24:	4652      	mov	r2, sl
 801ab26:	465b      	mov	r3, fp
 801ab28:	e9d9 0100 	ldrd	r0, r1, [r9]
 801ab2c:	f7fe f964 	bl	8018df8 <__aeabi_dmul>
 801ab30:	4b2a      	ldr	r3, [pc, #168]	; (801abdc <_strtod_l+0x5ac>)
 801ab32:	460a      	mov	r2, r1
 801ab34:	400b      	ands	r3, r1
 801ab36:	492a      	ldr	r1, [pc, #168]	; (801abe0 <_strtod_l+0x5b0>)
 801ab38:	428b      	cmp	r3, r1
 801ab3a:	4682      	mov	sl, r0
 801ab3c:	d8bc      	bhi.n	801aab8 <_strtod_l+0x488>
 801ab3e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801ab42:	428b      	cmp	r3, r1
 801ab44:	bf86      	itte	hi
 801ab46:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801abe4 <_strtod_l+0x5b4>
 801ab4a:	f04f 3aff 	movhi.w	sl, #4294967295
 801ab4e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801ab52:	2300      	movs	r3, #0
 801ab54:	9304      	str	r3, [sp, #16]
 801ab56:	e084      	b.n	801ac62 <_strtod_l+0x632>
 801ab58:	f018 0f01 	tst.w	r8, #1
 801ab5c:	d005      	beq.n	801ab6a <_strtod_l+0x53a>
 801ab5e:	9b04      	ldr	r3, [sp, #16]
 801ab60:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab64:	f7fe f948 	bl	8018df8 <__aeabi_dmul>
 801ab68:	2301      	movs	r3, #1
 801ab6a:	9a04      	ldr	r2, [sp, #16]
 801ab6c:	3208      	adds	r2, #8
 801ab6e:	f109 0901 	add.w	r9, r9, #1
 801ab72:	ea4f 0868 	mov.w	r8, r8, asr #1
 801ab76:	9204      	str	r2, [sp, #16]
 801ab78:	e7c9      	b.n	801ab0e <_strtod_l+0x4de>
 801ab7a:	d0ea      	beq.n	801ab52 <_strtod_l+0x522>
 801ab7c:	f1c8 0800 	rsb	r8, r8, #0
 801ab80:	f018 020f 	ands.w	r2, r8, #15
 801ab84:	d00a      	beq.n	801ab9c <_strtod_l+0x56c>
 801ab86:	4b13      	ldr	r3, [pc, #76]	; (801abd4 <_strtod_l+0x5a4>)
 801ab88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ab8c:	4650      	mov	r0, sl
 801ab8e:	4659      	mov	r1, fp
 801ab90:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab94:	f7fe fa5a 	bl	801904c <__aeabi_ddiv>
 801ab98:	4682      	mov	sl, r0
 801ab9a:	468b      	mov	fp, r1
 801ab9c:	ea5f 1828 	movs.w	r8, r8, asr #4
 801aba0:	d0d7      	beq.n	801ab52 <_strtod_l+0x522>
 801aba2:	f1b8 0f1f 	cmp.w	r8, #31
 801aba6:	dd1f      	ble.n	801abe8 <_strtod_l+0x5b8>
 801aba8:	2500      	movs	r5, #0
 801abaa:	462e      	mov	r6, r5
 801abac:	9507      	str	r5, [sp, #28]
 801abae:	9505      	str	r5, [sp, #20]
 801abb0:	2322      	movs	r3, #34	; 0x22
 801abb2:	f04f 0a00 	mov.w	sl, #0
 801abb6:	f04f 0b00 	mov.w	fp, #0
 801abba:	6023      	str	r3, [r4, #0]
 801abbc:	e786      	b.n	801aacc <_strtod_l+0x49c>
 801abbe:	bf00      	nop
 801abc0:	080521c1 	.word	0x080521c1
 801abc4:	08052204 	.word	0x08052204
 801abc8:	080521b9 	.word	0x080521b9
 801abcc:	08052344 	.word	0x08052344
 801abd0:	080525f0 	.word	0x080525f0
 801abd4:	080524d0 	.word	0x080524d0
 801abd8:	080524a8 	.word	0x080524a8
 801abdc:	7ff00000 	.word	0x7ff00000
 801abe0:	7ca00000 	.word	0x7ca00000
 801abe4:	7fefffff 	.word	0x7fefffff
 801abe8:	f018 0310 	ands.w	r3, r8, #16
 801abec:	bf18      	it	ne
 801abee:	236a      	movne	r3, #106	; 0x6a
 801abf0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 801afa0 <_strtod_l+0x970>
 801abf4:	9304      	str	r3, [sp, #16]
 801abf6:	4650      	mov	r0, sl
 801abf8:	4659      	mov	r1, fp
 801abfa:	2300      	movs	r3, #0
 801abfc:	f018 0f01 	tst.w	r8, #1
 801ac00:	d004      	beq.n	801ac0c <_strtod_l+0x5dc>
 801ac02:	e9d9 2300 	ldrd	r2, r3, [r9]
 801ac06:	f7fe f8f7 	bl	8018df8 <__aeabi_dmul>
 801ac0a:	2301      	movs	r3, #1
 801ac0c:	ea5f 0868 	movs.w	r8, r8, asr #1
 801ac10:	f109 0908 	add.w	r9, r9, #8
 801ac14:	d1f2      	bne.n	801abfc <_strtod_l+0x5cc>
 801ac16:	b10b      	cbz	r3, 801ac1c <_strtod_l+0x5ec>
 801ac18:	4682      	mov	sl, r0
 801ac1a:	468b      	mov	fp, r1
 801ac1c:	9b04      	ldr	r3, [sp, #16]
 801ac1e:	b1c3      	cbz	r3, 801ac52 <_strtod_l+0x622>
 801ac20:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801ac24:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801ac28:	2b00      	cmp	r3, #0
 801ac2a:	4659      	mov	r1, fp
 801ac2c:	dd11      	ble.n	801ac52 <_strtod_l+0x622>
 801ac2e:	2b1f      	cmp	r3, #31
 801ac30:	f340 8124 	ble.w	801ae7c <_strtod_l+0x84c>
 801ac34:	2b34      	cmp	r3, #52	; 0x34
 801ac36:	bfde      	ittt	le
 801ac38:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801ac3c:	f04f 33ff 	movle.w	r3, #4294967295
 801ac40:	fa03 f202 	lslle.w	r2, r3, r2
 801ac44:	f04f 0a00 	mov.w	sl, #0
 801ac48:	bfcc      	ite	gt
 801ac4a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801ac4e:	ea02 0b01 	andle.w	fp, r2, r1
 801ac52:	2200      	movs	r2, #0
 801ac54:	2300      	movs	r3, #0
 801ac56:	4650      	mov	r0, sl
 801ac58:	4659      	mov	r1, fp
 801ac5a:	f7fe fb35 	bl	80192c8 <__aeabi_dcmpeq>
 801ac5e:	2800      	cmp	r0, #0
 801ac60:	d1a2      	bne.n	801aba8 <_strtod_l+0x578>
 801ac62:	9b07      	ldr	r3, [sp, #28]
 801ac64:	9300      	str	r3, [sp, #0]
 801ac66:	9908      	ldr	r1, [sp, #32]
 801ac68:	462b      	mov	r3, r5
 801ac6a:	463a      	mov	r2, r7
 801ac6c:	4620      	mov	r0, r4
 801ac6e:	f001 fe39 	bl	801c8e4 <__s2b>
 801ac72:	9007      	str	r0, [sp, #28]
 801ac74:	2800      	cmp	r0, #0
 801ac76:	f43f af1f 	beq.w	801aab8 <_strtod_l+0x488>
 801ac7a:	9b05      	ldr	r3, [sp, #20]
 801ac7c:	1b9e      	subs	r6, r3, r6
 801ac7e:	9b06      	ldr	r3, [sp, #24]
 801ac80:	2b00      	cmp	r3, #0
 801ac82:	bfb4      	ite	lt
 801ac84:	4633      	movlt	r3, r6
 801ac86:	2300      	movge	r3, #0
 801ac88:	930c      	str	r3, [sp, #48]	; 0x30
 801ac8a:	9b06      	ldr	r3, [sp, #24]
 801ac8c:	2500      	movs	r5, #0
 801ac8e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ac92:	9312      	str	r3, [sp, #72]	; 0x48
 801ac94:	462e      	mov	r6, r5
 801ac96:	9b07      	ldr	r3, [sp, #28]
 801ac98:	4620      	mov	r0, r4
 801ac9a:	6859      	ldr	r1, [r3, #4]
 801ac9c:	f001 fd7a 	bl	801c794 <_Balloc>
 801aca0:	9005      	str	r0, [sp, #20]
 801aca2:	2800      	cmp	r0, #0
 801aca4:	f43f af0c 	beq.w	801aac0 <_strtod_l+0x490>
 801aca8:	9b07      	ldr	r3, [sp, #28]
 801acaa:	691a      	ldr	r2, [r3, #16]
 801acac:	3202      	adds	r2, #2
 801acae:	f103 010c 	add.w	r1, r3, #12
 801acb2:	0092      	lsls	r2, r2, #2
 801acb4:	300c      	adds	r0, #12
 801acb6:	f001 fd5f 	bl	801c778 <memcpy>
 801acba:	ec4b ab10 	vmov	d0, sl, fp
 801acbe:	aa1a      	add	r2, sp, #104	; 0x68
 801acc0:	a919      	add	r1, sp, #100	; 0x64
 801acc2:	4620      	mov	r0, r4
 801acc4:	f002 f954 	bl	801cf70 <__d2b>
 801acc8:	ec4b ab18 	vmov	d8, sl, fp
 801accc:	9018      	str	r0, [sp, #96]	; 0x60
 801acce:	2800      	cmp	r0, #0
 801acd0:	f43f aef6 	beq.w	801aac0 <_strtod_l+0x490>
 801acd4:	2101      	movs	r1, #1
 801acd6:	4620      	mov	r0, r4
 801acd8:	f001 fe9e 	bl	801ca18 <__i2b>
 801acdc:	4606      	mov	r6, r0
 801acde:	2800      	cmp	r0, #0
 801ace0:	f43f aeee 	beq.w	801aac0 <_strtod_l+0x490>
 801ace4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801ace6:	9904      	ldr	r1, [sp, #16]
 801ace8:	2b00      	cmp	r3, #0
 801acea:	bfab      	itete	ge
 801acec:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801acee:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 801acf0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801acf2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801acf6:	bfac      	ite	ge
 801acf8:	eb03 0902 	addge.w	r9, r3, r2
 801acfc:	1ad7      	sublt	r7, r2, r3
 801acfe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801ad00:	eba3 0801 	sub.w	r8, r3, r1
 801ad04:	4490      	add	r8, r2
 801ad06:	4ba1      	ldr	r3, [pc, #644]	; (801af8c <_strtod_l+0x95c>)
 801ad08:	f108 38ff 	add.w	r8, r8, #4294967295
 801ad0c:	4598      	cmp	r8, r3
 801ad0e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801ad12:	f280 80c7 	bge.w	801aea4 <_strtod_l+0x874>
 801ad16:	eba3 0308 	sub.w	r3, r3, r8
 801ad1a:	2b1f      	cmp	r3, #31
 801ad1c:	eba2 0203 	sub.w	r2, r2, r3
 801ad20:	f04f 0101 	mov.w	r1, #1
 801ad24:	f300 80b1 	bgt.w	801ae8a <_strtod_l+0x85a>
 801ad28:	fa01 f303 	lsl.w	r3, r1, r3
 801ad2c:	930d      	str	r3, [sp, #52]	; 0x34
 801ad2e:	2300      	movs	r3, #0
 801ad30:	9308      	str	r3, [sp, #32]
 801ad32:	eb09 0802 	add.w	r8, r9, r2
 801ad36:	9b04      	ldr	r3, [sp, #16]
 801ad38:	45c1      	cmp	r9, r8
 801ad3a:	4417      	add	r7, r2
 801ad3c:	441f      	add	r7, r3
 801ad3e:	464b      	mov	r3, r9
 801ad40:	bfa8      	it	ge
 801ad42:	4643      	movge	r3, r8
 801ad44:	42bb      	cmp	r3, r7
 801ad46:	bfa8      	it	ge
 801ad48:	463b      	movge	r3, r7
 801ad4a:	2b00      	cmp	r3, #0
 801ad4c:	bfc2      	ittt	gt
 801ad4e:	eba8 0803 	subgt.w	r8, r8, r3
 801ad52:	1aff      	subgt	r7, r7, r3
 801ad54:	eba9 0903 	subgt.w	r9, r9, r3
 801ad58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ad5a:	2b00      	cmp	r3, #0
 801ad5c:	dd17      	ble.n	801ad8e <_strtod_l+0x75e>
 801ad5e:	4631      	mov	r1, r6
 801ad60:	461a      	mov	r2, r3
 801ad62:	4620      	mov	r0, r4
 801ad64:	f001 ff18 	bl	801cb98 <__pow5mult>
 801ad68:	4606      	mov	r6, r0
 801ad6a:	2800      	cmp	r0, #0
 801ad6c:	f43f aea8 	beq.w	801aac0 <_strtod_l+0x490>
 801ad70:	4601      	mov	r1, r0
 801ad72:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ad74:	4620      	mov	r0, r4
 801ad76:	f001 fe65 	bl	801ca44 <__multiply>
 801ad7a:	900b      	str	r0, [sp, #44]	; 0x2c
 801ad7c:	2800      	cmp	r0, #0
 801ad7e:	f43f ae9f 	beq.w	801aac0 <_strtod_l+0x490>
 801ad82:	9918      	ldr	r1, [sp, #96]	; 0x60
 801ad84:	4620      	mov	r0, r4
 801ad86:	f001 fd45 	bl	801c814 <_Bfree>
 801ad8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ad8c:	9318      	str	r3, [sp, #96]	; 0x60
 801ad8e:	f1b8 0f00 	cmp.w	r8, #0
 801ad92:	f300 808c 	bgt.w	801aeae <_strtod_l+0x87e>
 801ad96:	9b06      	ldr	r3, [sp, #24]
 801ad98:	2b00      	cmp	r3, #0
 801ad9a:	dd08      	ble.n	801adae <_strtod_l+0x77e>
 801ad9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ad9e:	9905      	ldr	r1, [sp, #20]
 801ada0:	4620      	mov	r0, r4
 801ada2:	f001 fef9 	bl	801cb98 <__pow5mult>
 801ada6:	9005      	str	r0, [sp, #20]
 801ada8:	2800      	cmp	r0, #0
 801adaa:	f43f ae89 	beq.w	801aac0 <_strtod_l+0x490>
 801adae:	2f00      	cmp	r7, #0
 801adb0:	dd08      	ble.n	801adc4 <_strtod_l+0x794>
 801adb2:	9905      	ldr	r1, [sp, #20]
 801adb4:	463a      	mov	r2, r7
 801adb6:	4620      	mov	r0, r4
 801adb8:	f001 ff48 	bl	801cc4c <__lshift>
 801adbc:	9005      	str	r0, [sp, #20]
 801adbe:	2800      	cmp	r0, #0
 801adc0:	f43f ae7e 	beq.w	801aac0 <_strtod_l+0x490>
 801adc4:	f1b9 0f00 	cmp.w	r9, #0
 801adc8:	dd08      	ble.n	801addc <_strtod_l+0x7ac>
 801adca:	4631      	mov	r1, r6
 801adcc:	464a      	mov	r2, r9
 801adce:	4620      	mov	r0, r4
 801add0:	f001 ff3c 	bl	801cc4c <__lshift>
 801add4:	4606      	mov	r6, r0
 801add6:	2800      	cmp	r0, #0
 801add8:	f43f ae72 	beq.w	801aac0 <_strtod_l+0x490>
 801addc:	9a05      	ldr	r2, [sp, #20]
 801adde:	9918      	ldr	r1, [sp, #96]	; 0x60
 801ade0:	4620      	mov	r0, r4
 801ade2:	f001 ffbf 	bl	801cd64 <__mdiff>
 801ade6:	4605      	mov	r5, r0
 801ade8:	2800      	cmp	r0, #0
 801adea:	f43f ae69 	beq.w	801aac0 <_strtod_l+0x490>
 801adee:	68c3      	ldr	r3, [r0, #12]
 801adf0:	930b      	str	r3, [sp, #44]	; 0x2c
 801adf2:	2300      	movs	r3, #0
 801adf4:	60c3      	str	r3, [r0, #12]
 801adf6:	4631      	mov	r1, r6
 801adf8:	f001 ff98 	bl	801cd2c <__mcmp>
 801adfc:	2800      	cmp	r0, #0
 801adfe:	da60      	bge.n	801aec2 <_strtod_l+0x892>
 801ae00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ae02:	ea53 030a 	orrs.w	r3, r3, sl
 801ae06:	f040 8082 	bne.w	801af0e <_strtod_l+0x8de>
 801ae0a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ae0e:	2b00      	cmp	r3, #0
 801ae10:	d17d      	bne.n	801af0e <_strtod_l+0x8de>
 801ae12:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801ae16:	0d1b      	lsrs	r3, r3, #20
 801ae18:	051b      	lsls	r3, r3, #20
 801ae1a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801ae1e:	d976      	bls.n	801af0e <_strtod_l+0x8de>
 801ae20:	696b      	ldr	r3, [r5, #20]
 801ae22:	b913      	cbnz	r3, 801ae2a <_strtod_l+0x7fa>
 801ae24:	692b      	ldr	r3, [r5, #16]
 801ae26:	2b01      	cmp	r3, #1
 801ae28:	dd71      	ble.n	801af0e <_strtod_l+0x8de>
 801ae2a:	4629      	mov	r1, r5
 801ae2c:	2201      	movs	r2, #1
 801ae2e:	4620      	mov	r0, r4
 801ae30:	f001 ff0c 	bl	801cc4c <__lshift>
 801ae34:	4631      	mov	r1, r6
 801ae36:	4605      	mov	r5, r0
 801ae38:	f001 ff78 	bl	801cd2c <__mcmp>
 801ae3c:	2800      	cmp	r0, #0
 801ae3e:	dd66      	ble.n	801af0e <_strtod_l+0x8de>
 801ae40:	9904      	ldr	r1, [sp, #16]
 801ae42:	4a53      	ldr	r2, [pc, #332]	; (801af90 <_strtod_l+0x960>)
 801ae44:	465b      	mov	r3, fp
 801ae46:	2900      	cmp	r1, #0
 801ae48:	f000 8081 	beq.w	801af4e <_strtod_l+0x91e>
 801ae4c:	ea02 010b 	and.w	r1, r2, fp
 801ae50:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801ae54:	dc7b      	bgt.n	801af4e <_strtod_l+0x91e>
 801ae56:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801ae5a:	f77f aea9 	ble.w	801abb0 <_strtod_l+0x580>
 801ae5e:	4b4d      	ldr	r3, [pc, #308]	; (801af94 <_strtod_l+0x964>)
 801ae60:	4650      	mov	r0, sl
 801ae62:	4659      	mov	r1, fp
 801ae64:	2200      	movs	r2, #0
 801ae66:	f7fd ffc7 	bl	8018df8 <__aeabi_dmul>
 801ae6a:	460b      	mov	r3, r1
 801ae6c:	4303      	orrs	r3, r0
 801ae6e:	bf08      	it	eq
 801ae70:	2322      	moveq	r3, #34	; 0x22
 801ae72:	4682      	mov	sl, r0
 801ae74:	468b      	mov	fp, r1
 801ae76:	bf08      	it	eq
 801ae78:	6023      	streq	r3, [r4, #0]
 801ae7a:	e62b      	b.n	801aad4 <_strtod_l+0x4a4>
 801ae7c:	f04f 32ff 	mov.w	r2, #4294967295
 801ae80:	fa02 f303 	lsl.w	r3, r2, r3
 801ae84:	ea03 0a0a 	and.w	sl, r3, sl
 801ae88:	e6e3      	b.n	801ac52 <_strtod_l+0x622>
 801ae8a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801ae8e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801ae92:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801ae96:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801ae9a:	fa01 f308 	lsl.w	r3, r1, r8
 801ae9e:	9308      	str	r3, [sp, #32]
 801aea0:	910d      	str	r1, [sp, #52]	; 0x34
 801aea2:	e746      	b.n	801ad32 <_strtod_l+0x702>
 801aea4:	2300      	movs	r3, #0
 801aea6:	9308      	str	r3, [sp, #32]
 801aea8:	2301      	movs	r3, #1
 801aeaa:	930d      	str	r3, [sp, #52]	; 0x34
 801aeac:	e741      	b.n	801ad32 <_strtod_l+0x702>
 801aeae:	9918      	ldr	r1, [sp, #96]	; 0x60
 801aeb0:	4642      	mov	r2, r8
 801aeb2:	4620      	mov	r0, r4
 801aeb4:	f001 feca 	bl	801cc4c <__lshift>
 801aeb8:	9018      	str	r0, [sp, #96]	; 0x60
 801aeba:	2800      	cmp	r0, #0
 801aebc:	f47f af6b 	bne.w	801ad96 <_strtod_l+0x766>
 801aec0:	e5fe      	b.n	801aac0 <_strtod_l+0x490>
 801aec2:	465f      	mov	r7, fp
 801aec4:	d16e      	bne.n	801afa4 <_strtod_l+0x974>
 801aec6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801aec8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801aecc:	b342      	cbz	r2, 801af20 <_strtod_l+0x8f0>
 801aece:	4a32      	ldr	r2, [pc, #200]	; (801af98 <_strtod_l+0x968>)
 801aed0:	4293      	cmp	r3, r2
 801aed2:	d128      	bne.n	801af26 <_strtod_l+0x8f6>
 801aed4:	9b04      	ldr	r3, [sp, #16]
 801aed6:	4651      	mov	r1, sl
 801aed8:	b1eb      	cbz	r3, 801af16 <_strtod_l+0x8e6>
 801aeda:	4b2d      	ldr	r3, [pc, #180]	; (801af90 <_strtod_l+0x960>)
 801aedc:	403b      	ands	r3, r7
 801aede:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801aee2:	f04f 32ff 	mov.w	r2, #4294967295
 801aee6:	d819      	bhi.n	801af1c <_strtod_l+0x8ec>
 801aee8:	0d1b      	lsrs	r3, r3, #20
 801aeea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801aeee:	fa02 f303 	lsl.w	r3, r2, r3
 801aef2:	4299      	cmp	r1, r3
 801aef4:	d117      	bne.n	801af26 <_strtod_l+0x8f6>
 801aef6:	4b29      	ldr	r3, [pc, #164]	; (801af9c <_strtod_l+0x96c>)
 801aef8:	429f      	cmp	r7, r3
 801aefa:	d102      	bne.n	801af02 <_strtod_l+0x8d2>
 801aefc:	3101      	adds	r1, #1
 801aefe:	f43f addf 	beq.w	801aac0 <_strtod_l+0x490>
 801af02:	4b23      	ldr	r3, [pc, #140]	; (801af90 <_strtod_l+0x960>)
 801af04:	403b      	ands	r3, r7
 801af06:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801af0a:	f04f 0a00 	mov.w	sl, #0
 801af0e:	9b04      	ldr	r3, [sp, #16]
 801af10:	2b00      	cmp	r3, #0
 801af12:	d1a4      	bne.n	801ae5e <_strtod_l+0x82e>
 801af14:	e5de      	b.n	801aad4 <_strtod_l+0x4a4>
 801af16:	f04f 33ff 	mov.w	r3, #4294967295
 801af1a:	e7ea      	b.n	801aef2 <_strtod_l+0x8c2>
 801af1c:	4613      	mov	r3, r2
 801af1e:	e7e8      	b.n	801aef2 <_strtod_l+0x8c2>
 801af20:	ea53 030a 	orrs.w	r3, r3, sl
 801af24:	d08c      	beq.n	801ae40 <_strtod_l+0x810>
 801af26:	9b08      	ldr	r3, [sp, #32]
 801af28:	b1db      	cbz	r3, 801af62 <_strtod_l+0x932>
 801af2a:	423b      	tst	r3, r7
 801af2c:	d0ef      	beq.n	801af0e <_strtod_l+0x8de>
 801af2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801af30:	9a04      	ldr	r2, [sp, #16]
 801af32:	4650      	mov	r0, sl
 801af34:	4659      	mov	r1, fp
 801af36:	b1c3      	cbz	r3, 801af6a <_strtod_l+0x93a>
 801af38:	f7ff fb5e 	bl	801a5f8 <sulp>
 801af3c:	4602      	mov	r2, r0
 801af3e:	460b      	mov	r3, r1
 801af40:	ec51 0b18 	vmov	r0, r1, d8
 801af44:	f7fd fda2 	bl	8018a8c <__adddf3>
 801af48:	4682      	mov	sl, r0
 801af4a:	468b      	mov	fp, r1
 801af4c:	e7df      	b.n	801af0e <_strtod_l+0x8de>
 801af4e:	4013      	ands	r3, r2
 801af50:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801af54:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801af58:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801af5c:	f04f 3aff 	mov.w	sl, #4294967295
 801af60:	e7d5      	b.n	801af0e <_strtod_l+0x8de>
 801af62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801af64:	ea13 0f0a 	tst.w	r3, sl
 801af68:	e7e0      	b.n	801af2c <_strtod_l+0x8fc>
 801af6a:	f7ff fb45 	bl	801a5f8 <sulp>
 801af6e:	4602      	mov	r2, r0
 801af70:	460b      	mov	r3, r1
 801af72:	ec51 0b18 	vmov	r0, r1, d8
 801af76:	f7fd fd87 	bl	8018a88 <__aeabi_dsub>
 801af7a:	2200      	movs	r2, #0
 801af7c:	2300      	movs	r3, #0
 801af7e:	4682      	mov	sl, r0
 801af80:	468b      	mov	fp, r1
 801af82:	f7fe f9a1 	bl	80192c8 <__aeabi_dcmpeq>
 801af86:	2800      	cmp	r0, #0
 801af88:	d0c1      	beq.n	801af0e <_strtod_l+0x8de>
 801af8a:	e611      	b.n	801abb0 <_strtod_l+0x580>
 801af8c:	fffffc02 	.word	0xfffffc02
 801af90:	7ff00000 	.word	0x7ff00000
 801af94:	39500000 	.word	0x39500000
 801af98:	000fffff 	.word	0x000fffff
 801af9c:	7fefffff 	.word	0x7fefffff
 801afa0:	08052218 	.word	0x08052218
 801afa4:	4631      	mov	r1, r6
 801afa6:	4628      	mov	r0, r5
 801afa8:	f002 f83e 	bl	801d028 <__ratio>
 801afac:	ec59 8b10 	vmov	r8, r9, d0
 801afb0:	ee10 0a10 	vmov	r0, s0
 801afb4:	2200      	movs	r2, #0
 801afb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801afba:	4649      	mov	r1, r9
 801afbc:	f7fe f998 	bl	80192f0 <__aeabi_dcmple>
 801afc0:	2800      	cmp	r0, #0
 801afc2:	d07a      	beq.n	801b0ba <_strtod_l+0xa8a>
 801afc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801afc6:	2b00      	cmp	r3, #0
 801afc8:	d04a      	beq.n	801b060 <_strtod_l+0xa30>
 801afca:	4b95      	ldr	r3, [pc, #596]	; (801b220 <_strtod_l+0xbf0>)
 801afcc:	2200      	movs	r2, #0
 801afce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801afd2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801b220 <_strtod_l+0xbf0>
 801afd6:	f04f 0800 	mov.w	r8, #0
 801afda:	4b92      	ldr	r3, [pc, #584]	; (801b224 <_strtod_l+0xbf4>)
 801afdc:	403b      	ands	r3, r7
 801afde:	930d      	str	r3, [sp, #52]	; 0x34
 801afe0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801afe2:	4b91      	ldr	r3, [pc, #580]	; (801b228 <_strtod_l+0xbf8>)
 801afe4:	429a      	cmp	r2, r3
 801afe6:	f040 80b0 	bne.w	801b14a <_strtod_l+0xb1a>
 801afea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801afee:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801aff2:	ec4b ab10 	vmov	d0, sl, fp
 801aff6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801affa:	f001 ff3d 	bl	801ce78 <__ulp>
 801affe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b002:	ec53 2b10 	vmov	r2, r3, d0
 801b006:	f7fd fef7 	bl	8018df8 <__aeabi_dmul>
 801b00a:	4652      	mov	r2, sl
 801b00c:	465b      	mov	r3, fp
 801b00e:	f7fd fd3d 	bl	8018a8c <__adddf3>
 801b012:	460b      	mov	r3, r1
 801b014:	4983      	ldr	r1, [pc, #524]	; (801b224 <_strtod_l+0xbf4>)
 801b016:	4a85      	ldr	r2, [pc, #532]	; (801b22c <_strtod_l+0xbfc>)
 801b018:	4019      	ands	r1, r3
 801b01a:	4291      	cmp	r1, r2
 801b01c:	4682      	mov	sl, r0
 801b01e:	d960      	bls.n	801b0e2 <_strtod_l+0xab2>
 801b020:	ee18 3a90 	vmov	r3, s17
 801b024:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801b028:	4293      	cmp	r3, r2
 801b02a:	d104      	bne.n	801b036 <_strtod_l+0xa06>
 801b02c:	ee18 3a10 	vmov	r3, s16
 801b030:	3301      	adds	r3, #1
 801b032:	f43f ad45 	beq.w	801aac0 <_strtod_l+0x490>
 801b036:	f8df b200 	ldr.w	fp, [pc, #512]	; 801b238 <_strtod_l+0xc08>
 801b03a:	f04f 3aff 	mov.w	sl, #4294967295
 801b03e:	9918      	ldr	r1, [sp, #96]	; 0x60
 801b040:	4620      	mov	r0, r4
 801b042:	f001 fbe7 	bl	801c814 <_Bfree>
 801b046:	9905      	ldr	r1, [sp, #20]
 801b048:	4620      	mov	r0, r4
 801b04a:	f001 fbe3 	bl	801c814 <_Bfree>
 801b04e:	4631      	mov	r1, r6
 801b050:	4620      	mov	r0, r4
 801b052:	f001 fbdf 	bl	801c814 <_Bfree>
 801b056:	4629      	mov	r1, r5
 801b058:	4620      	mov	r0, r4
 801b05a:	f001 fbdb 	bl	801c814 <_Bfree>
 801b05e:	e61a      	b.n	801ac96 <_strtod_l+0x666>
 801b060:	f1ba 0f00 	cmp.w	sl, #0
 801b064:	d11b      	bne.n	801b09e <_strtod_l+0xa6e>
 801b066:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b06a:	b9f3      	cbnz	r3, 801b0aa <_strtod_l+0xa7a>
 801b06c:	4b6c      	ldr	r3, [pc, #432]	; (801b220 <_strtod_l+0xbf0>)
 801b06e:	2200      	movs	r2, #0
 801b070:	4640      	mov	r0, r8
 801b072:	4649      	mov	r1, r9
 801b074:	f7fe f932 	bl	80192dc <__aeabi_dcmplt>
 801b078:	b9d0      	cbnz	r0, 801b0b0 <_strtod_l+0xa80>
 801b07a:	4640      	mov	r0, r8
 801b07c:	4649      	mov	r1, r9
 801b07e:	4b6c      	ldr	r3, [pc, #432]	; (801b230 <_strtod_l+0xc00>)
 801b080:	2200      	movs	r2, #0
 801b082:	f7fd feb9 	bl	8018df8 <__aeabi_dmul>
 801b086:	4680      	mov	r8, r0
 801b088:	4689      	mov	r9, r1
 801b08a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801b08e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801b092:	9315      	str	r3, [sp, #84]	; 0x54
 801b094:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801b098:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b09c:	e79d      	b.n	801afda <_strtod_l+0x9aa>
 801b09e:	f1ba 0f01 	cmp.w	sl, #1
 801b0a2:	d102      	bne.n	801b0aa <_strtod_l+0xa7a>
 801b0a4:	2f00      	cmp	r7, #0
 801b0a6:	f43f ad83 	beq.w	801abb0 <_strtod_l+0x580>
 801b0aa:	4b62      	ldr	r3, [pc, #392]	; (801b234 <_strtod_l+0xc04>)
 801b0ac:	2200      	movs	r2, #0
 801b0ae:	e78e      	b.n	801afce <_strtod_l+0x99e>
 801b0b0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 801b230 <_strtod_l+0xc00>
 801b0b4:	f04f 0800 	mov.w	r8, #0
 801b0b8:	e7e7      	b.n	801b08a <_strtod_l+0xa5a>
 801b0ba:	4b5d      	ldr	r3, [pc, #372]	; (801b230 <_strtod_l+0xc00>)
 801b0bc:	4640      	mov	r0, r8
 801b0be:	4649      	mov	r1, r9
 801b0c0:	2200      	movs	r2, #0
 801b0c2:	f7fd fe99 	bl	8018df8 <__aeabi_dmul>
 801b0c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b0c8:	4680      	mov	r8, r0
 801b0ca:	4689      	mov	r9, r1
 801b0cc:	b933      	cbnz	r3, 801b0dc <_strtod_l+0xaac>
 801b0ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b0d2:	900e      	str	r0, [sp, #56]	; 0x38
 801b0d4:	930f      	str	r3, [sp, #60]	; 0x3c
 801b0d6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801b0da:	e7dd      	b.n	801b098 <_strtod_l+0xa68>
 801b0dc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 801b0e0:	e7f9      	b.n	801b0d6 <_strtod_l+0xaa6>
 801b0e2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801b0e6:	9b04      	ldr	r3, [sp, #16]
 801b0e8:	2b00      	cmp	r3, #0
 801b0ea:	d1a8      	bne.n	801b03e <_strtod_l+0xa0e>
 801b0ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b0f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b0f2:	0d1b      	lsrs	r3, r3, #20
 801b0f4:	051b      	lsls	r3, r3, #20
 801b0f6:	429a      	cmp	r2, r3
 801b0f8:	d1a1      	bne.n	801b03e <_strtod_l+0xa0e>
 801b0fa:	4640      	mov	r0, r8
 801b0fc:	4649      	mov	r1, r9
 801b0fe:	f7fe f9c3 	bl	8019488 <__aeabi_d2lz>
 801b102:	f7fd fe4b 	bl	8018d9c <__aeabi_l2d>
 801b106:	4602      	mov	r2, r0
 801b108:	460b      	mov	r3, r1
 801b10a:	4640      	mov	r0, r8
 801b10c:	4649      	mov	r1, r9
 801b10e:	f7fd fcbb 	bl	8018a88 <__aeabi_dsub>
 801b112:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b114:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b118:	ea43 030a 	orr.w	r3, r3, sl
 801b11c:	4313      	orrs	r3, r2
 801b11e:	4680      	mov	r8, r0
 801b120:	4689      	mov	r9, r1
 801b122:	d055      	beq.n	801b1d0 <_strtod_l+0xba0>
 801b124:	a336      	add	r3, pc, #216	; (adr r3, 801b200 <_strtod_l+0xbd0>)
 801b126:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b12a:	f7fe f8d7 	bl	80192dc <__aeabi_dcmplt>
 801b12e:	2800      	cmp	r0, #0
 801b130:	f47f acd0 	bne.w	801aad4 <_strtod_l+0x4a4>
 801b134:	a334      	add	r3, pc, #208	; (adr r3, 801b208 <_strtod_l+0xbd8>)
 801b136:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b13a:	4640      	mov	r0, r8
 801b13c:	4649      	mov	r1, r9
 801b13e:	f7fe f8eb 	bl	8019318 <__aeabi_dcmpgt>
 801b142:	2800      	cmp	r0, #0
 801b144:	f43f af7b 	beq.w	801b03e <_strtod_l+0xa0e>
 801b148:	e4c4      	b.n	801aad4 <_strtod_l+0x4a4>
 801b14a:	9b04      	ldr	r3, [sp, #16]
 801b14c:	b333      	cbz	r3, 801b19c <_strtod_l+0xb6c>
 801b14e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b150:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801b154:	d822      	bhi.n	801b19c <_strtod_l+0xb6c>
 801b156:	a32e      	add	r3, pc, #184	; (adr r3, 801b210 <_strtod_l+0xbe0>)
 801b158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b15c:	4640      	mov	r0, r8
 801b15e:	4649      	mov	r1, r9
 801b160:	f7fe f8c6 	bl	80192f0 <__aeabi_dcmple>
 801b164:	b1a0      	cbz	r0, 801b190 <_strtod_l+0xb60>
 801b166:	4649      	mov	r1, r9
 801b168:	4640      	mov	r0, r8
 801b16a:	f7fe f91d 	bl	80193a8 <__aeabi_d2uiz>
 801b16e:	2801      	cmp	r0, #1
 801b170:	bf38      	it	cc
 801b172:	2001      	movcc	r0, #1
 801b174:	f7fd fdc6 	bl	8018d04 <__aeabi_ui2d>
 801b178:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b17a:	4680      	mov	r8, r0
 801b17c:	4689      	mov	r9, r1
 801b17e:	bb23      	cbnz	r3, 801b1ca <_strtod_l+0xb9a>
 801b180:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b184:	9010      	str	r0, [sp, #64]	; 0x40
 801b186:	9311      	str	r3, [sp, #68]	; 0x44
 801b188:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801b18c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b192:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b194:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801b198:	1a9b      	subs	r3, r3, r2
 801b19a:	9309      	str	r3, [sp, #36]	; 0x24
 801b19c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b1a0:	eeb0 0a48 	vmov.f32	s0, s16
 801b1a4:	eef0 0a68 	vmov.f32	s1, s17
 801b1a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b1ac:	f001 fe64 	bl	801ce78 <__ulp>
 801b1b0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b1b4:	ec53 2b10 	vmov	r2, r3, d0
 801b1b8:	f7fd fe1e 	bl	8018df8 <__aeabi_dmul>
 801b1bc:	ec53 2b18 	vmov	r2, r3, d8
 801b1c0:	f7fd fc64 	bl	8018a8c <__adddf3>
 801b1c4:	4682      	mov	sl, r0
 801b1c6:	468b      	mov	fp, r1
 801b1c8:	e78d      	b.n	801b0e6 <_strtod_l+0xab6>
 801b1ca:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801b1ce:	e7db      	b.n	801b188 <_strtod_l+0xb58>
 801b1d0:	a311      	add	r3, pc, #68	; (adr r3, 801b218 <_strtod_l+0xbe8>)
 801b1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1d6:	f7fe f881 	bl	80192dc <__aeabi_dcmplt>
 801b1da:	e7b2      	b.n	801b142 <_strtod_l+0xb12>
 801b1dc:	2300      	movs	r3, #0
 801b1de:	930a      	str	r3, [sp, #40]	; 0x28
 801b1e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b1e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b1e4:	6013      	str	r3, [r2, #0]
 801b1e6:	f7ff ba6b 	b.w	801a6c0 <_strtod_l+0x90>
 801b1ea:	2a65      	cmp	r2, #101	; 0x65
 801b1ec:	f43f ab5f 	beq.w	801a8ae <_strtod_l+0x27e>
 801b1f0:	2a45      	cmp	r2, #69	; 0x45
 801b1f2:	f43f ab5c 	beq.w	801a8ae <_strtod_l+0x27e>
 801b1f6:	2301      	movs	r3, #1
 801b1f8:	f7ff bb94 	b.w	801a924 <_strtod_l+0x2f4>
 801b1fc:	f3af 8000 	nop.w
 801b200:	94a03595 	.word	0x94a03595
 801b204:	3fdfffff 	.word	0x3fdfffff
 801b208:	35afe535 	.word	0x35afe535
 801b20c:	3fe00000 	.word	0x3fe00000
 801b210:	ffc00000 	.word	0xffc00000
 801b214:	41dfffff 	.word	0x41dfffff
 801b218:	94a03595 	.word	0x94a03595
 801b21c:	3fcfffff 	.word	0x3fcfffff
 801b220:	3ff00000 	.word	0x3ff00000
 801b224:	7ff00000 	.word	0x7ff00000
 801b228:	7fe00000 	.word	0x7fe00000
 801b22c:	7c9fffff 	.word	0x7c9fffff
 801b230:	3fe00000 	.word	0x3fe00000
 801b234:	bff00000 	.word	0xbff00000
 801b238:	7fefffff 	.word	0x7fefffff

0801b23c <_strtod_r>:
 801b23c:	4b01      	ldr	r3, [pc, #4]	; (801b244 <_strtod_r+0x8>)
 801b23e:	f7ff b9f7 	b.w	801a630 <_strtod_l>
 801b242:	bf00      	nop
 801b244:	200000cc 	.word	0x200000cc

0801b248 <_strtol_l.constprop.0>:
 801b248:	2b01      	cmp	r3, #1
 801b24a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b24e:	d001      	beq.n	801b254 <_strtol_l.constprop.0+0xc>
 801b250:	2b24      	cmp	r3, #36	; 0x24
 801b252:	d906      	bls.n	801b262 <_strtol_l.constprop.0+0x1a>
 801b254:	f7fe fafe 	bl	8019854 <__errno>
 801b258:	2316      	movs	r3, #22
 801b25a:	6003      	str	r3, [r0, #0]
 801b25c:	2000      	movs	r0, #0
 801b25e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b262:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801b348 <_strtol_l.constprop.0+0x100>
 801b266:	460d      	mov	r5, r1
 801b268:	462e      	mov	r6, r5
 801b26a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b26e:	f814 700c 	ldrb.w	r7, [r4, ip]
 801b272:	f017 0708 	ands.w	r7, r7, #8
 801b276:	d1f7      	bne.n	801b268 <_strtol_l.constprop.0+0x20>
 801b278:	2c2d      	cmp	r4, #45	; 0x2d
 801b27a:	d132      	bne.n	801b2e2 <_strtol_l.constprop.0+0x9a>
 801b27c:	782c      	ldrb	r4, [r5, #0]
 801b27e:	2701      	movs	r7, #1
 801b280:	1cb5      	adds	r5, r6, #2
 801b282:	2b00      	cmp	r3, #0
 801b284:	d05b      	beq.n	801b33e <_strtol_l.constprop.0+0xf6>
 801b286:	2b10      	cmp	r3, #16
 801b288:	d109      	bne.n	801b29e <_strtol_l.constprop.0+0x56>
 801b28a:	2c30      	cmp	r4, #48	; 0x30
 801b28c:	d107      	bne.n	801b29e <_strtol_l.constprop.0+0x56>
 801b28e:	782c      	ldrb	r4, [r5, #0]
 801b290:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801b294:	2c58      	cmp	r4, #88	; 0x58
 801b296:	d14d      	bne.n	801b334 <_strtol_l.constprop.0+0xec>
 801b298:	786c      	ldrb	r4, [r5, #1]
 801b29a:	2310      	movs	r3, #16
 801b29c:	3502      	adds	r5, #2
 801b29e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801b2a2:	f108 38ff 	add.w	r8, r8, #4294967295
 801b2a6:	f04f 0c00 	mov.w	ip, #0
 801b2aa:	fbb8 f9f3 	udiv	r9, r8, r3
 801b2ae:	4666      	mov	r6, ip
 801b2b0:	fb03 8a19 	mls	sl, r3, r9, r8
 801b2b4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801b2b8:	f1be 0f09 	cmp.w	lr, #9
 801b2bc:	d816      	bhi.n	801b2ec <_strtol_l.constprop.0+0xa4>
 801b2be:	4674      	mov	r4, lr
 801b2c0:	42a3      	cmp	r3, r4
 801b2c2:	dd24      	ble.n	801b30e <_strtol_l.constprop.0+0xc6>
 801b2c4:	f1bc 0f00 	cmp.w	ip, #0
 801b2c8:	db1e      	blt.n	801b308 <_strtol_l.constprop.0+0xc0>
 801b2ca:	45b1      	cmp	r9, r6
 801b2cc:	d31c      	bcc.n	801b308 <_strtol_l.constprop.0+0xc0>
 801b2ce:	d101      	bne.n	801b2d4 <_strtol_l.constprop.0+0x8c>
 801b2d0:	45a2      	cmp	sl, r4
 801b2d2:	db19      	blt.n	801b308 <_strtol_l.constprop.0+0xc0>
 801b2d4:	fb06 4603 	mla	r6, r6, r3, r4
 801b2d8:	f04f 0c01 	mov.w	ip, #1
 801b2dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b2e0:	e7e8      	b.n	801b2b4 <_strtol_l.constprop.0+0x6c>
 801b2e2:	2c2b      	cmp	r4, #43	; 0x2b
 801b2e4:	bf04      	itt	eq
 801b2e6:	782c      	ldrbeq	r4, [r5, #0]
 801b2e8:	1cb5      	addeq	r5, r6, #2
 801b2ea:	e7ca      	b.n	801b282 <_strtol_l.constprop.0+0x3a>
 801b2ec:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801b2f0:	f1be 0f19 	cmp.w	lr, #25
 801b2f4:	d801      	bhi.n	801b2fa <_strtol_l.constprop.0+0xb2>
 801b2f6:	3c37      	subs	r4, #55	; 0x37
 801b2f8:	e7e2      	b.n	801b2c0 <_strtol_l.constprop.0+0x78>
 801b2fa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801b2fe:	f1be 0f19 	cmp.w	lr, #25
 801b302:	d804      	bhi.n	801b30e <_strtol_l.constprop.0+0xc6>
 801b304:	3c57      	subs	r4, #87	; 0x57
 801b306:	e7db      	b.n	801b2c0 <_strtol_l.constprop.0+0x78>
 801b308:	f04f 3cff 	mov.w	ip, #4294967295
 801b30c:	e7e6      	b.n	801b2dc <_strtol_l.constprop.0+0x94>
 801b30e:	f1bc 0f00 	cmp.w	ip, #0
 801b312:	da05      	bge.n	801b320 <_strtol_l.constprop.0+0xd8>
 801b314:	2322      	movs	r3, #34	; 0x22
 801b316:	6003      	str	r3, [r0, #0]
 801b318:	4646      	mov	r6, r8
 801b31a:	b942      	cbnz	r2, 801b32e <_strtol_l.constprop.0+0xe6>
 801b31c:	4630      	mov	r0, r6
 801b31e:	e79e      	b.n	801b25e <_strtol_l.constprop.0+0x16>
 801b320:	b107      	cbz	r7, 801b324 <_strtol_l.constprop.0+0xdc>
 801b322:	4276      	negs	r6, r6
 801b324:	2a00      	cmp	r2, #0
 801b326:	d0f9      	beq.n	801b31c <_strtol_l.constprop.0+0xd4>
 801b328:	f1bc 0f00 	cmp.w	ip, #0
 801b32c:	d000      	beq.n	801b330 <_strtol_l.constprop.0+0xe8>
 801b32e:	1e69      	subs	r1, r5, #1
 801b330:	6011      	str	r1, [r2, #0]
 801b332:	e7f3      	b.n	801b31c <_strtol_l.constprop.0+0xd4>
 801b334:	2430      	movs	r4, #48	; 0x30
 801b336:	2b00      	cmp	r3, #0
 801b338:	d1b1      	bne.n	801b29e <_strtol_l.constprop.0+0x56>
 801b33a:	2308      	movs	r3, #8
 801b33c:	e7af      	b.n	801b29e <_strtol_l.constprop.0+0x56>
 801b33e:	2c30      	cmp	r4, #48	; 0x30
 801b340:	d0a5      	beq.n	801b28e <_strtol_l.constprop.0+0x46>
 801b342:	230a      	movs	r3, #10
 801b344:	e7ab      	b.n	801b29e <_strtol_l.constprop.0+0x56>
 801b346:	bf00      	nop
 801b348:	08052241 	.word	0x08052241

0801b34c <_strtol_r>:
 801b34c:	f7ff bf7c 	b.w	801b248 <_strtol_l.constprop.0>

0801b350 <strtol>:
 801b350:	4613      	mov	r3, r2
 801b352:	460a      	mov	r2, r1
 801b354:	4601      	mov	r1, r0
 801b356:	4802      	ldr	r0, [pc, #8]	; (801b360 <strtol+0x10>)
 801b358:	6800      	ldr	r0, [r0, #0]
 801b35a:	f7ff bf75 	b.w	801b248 <_strtol_l.constprop.0>
 801b35e:	bf00      	nop
 801b360:	20000064 	.word	0x20000064

0801b364 <quorem>:
 801b364:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b368:	6903      	ldr	r3, [r0, #16]
 801b36a:	690c      	ldr	r4, [r1, #16]
 801b36c:	42a3      	cmp	r3, r4
 801b36e:	4607      	mov	r7, r0
 801b370:	f2c0 8081 	blt.w	801b476 <quorem+0x112>
 801b374:	3c01      	subs	r4, #1
 801b376:	f101 0814 	add.w	r8, r1, #20
 801b37a:	f100 0514 	add.w	r5, r0, #20
 801b37e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b382:	9301      	str	r3, [sp, #4]
 801b384:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801b388:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b38c:	3301      	adds	r3, #1
 801b38e:	429a      	cmp	r2, r3
 801b390:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801b394:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801b398:	fbb2 f6f3 	udiv	r6, r2, r3
 801b39c:	d331      	bcc.n	801b402 <quorem+0x9e>
 801b39e:	f04f 0e00 	mov.w	lr, #0
 801b3a2:	4640      	mov	r0, r8
 801b3a4:	46ac      	mov	ip, r5
 801b3a6:	46f2      	mov	sl, lr
 801b3a8:	f850 2b04 	ldr.w	r2, [r0], #4
 801b3ac:	b293      	uxth	r3, r2
 801b3ae:	fb06 e303 	mla	r3, r6, r3, lr
 801b3b2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801b3b6:	b29b      	uxth	r3, r3
 801b3b8:	ebaa 0303 	sub.w	r3, sl, r3
 801b3bc:	f8dc a000 	ldr.w	sl, [ip]
 801b3c0:	0c12      	lsrs	r2, r2, #16
 801b3c2:	fa13 f38a 	uxtah	r3, r3, sl
 801b3c6:	fb06 e202 	mla	r2, r6, r2, lr
 801b3ca:	9300      	str	r3, [sp, #0]
 801b3cc:	9b00      	ldr	r3, [sp, #0]
 801b3ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801b3d2:	b292      	uxth	r2, r2
 801b3d4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801b3d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b3dc:	f8bd 3000 	ldrh.w	r3, [sp]
 801b3e0:	4581      	cmp	r9, r0
 801b3e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b3e6:	f84c 3b04 	str.w	r3, [ip], #4
 801b3ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801b3ee:	d2db      	bcs.n	801b3a8 <quorem+0x44>
 801b3f0:	f855 300b 	ldr.w	r3, [r5, fp]
 801b3f4:	b92b      	cbnz	r3, 801b402 <quorem+0x9e>
 801b3f6:	9b01      	ldr	r3, [sp, #4]
 801b3f8:	3b04      	subs	r3, #4
 801b3fa:	429d      	cmp	r5, r3
 801b3fc:	461a      	mov	r2, r3
 801b3fe:	d32e      	bcc.n	801b45e <quorem+0xfa>
 801b400:	613c      	str	r4, [r7, #16]
 801b402:	4638      	mov	r0, r7
 801b404:	f001 fc92 	bl	801cd2c <__mcmp>
 801b408:	2800      	cmp	r0, #0
 801b40a:	db24      	blt.n	801b456 <quorem+0xf2>
 801b40c:	3601      	adds	r6, #1
 801b40e:	4628      	mov	r0, r5
 801b410:	f04f 0c00 	mov.w	ip, #0
 801b414:	f858 2b04 	ldr.w	r2, [r8], #4
 801b418:	f8d0 e000 	ldr.w	lr, [r0]
 801b41c:	b293      	uxth	r3, r2
 801b41e:	ebac 0303 	sub.w	r3, ip, r3
 801b422:	0c12      	lsrs	r2, r2, #16
 801b424:	fa13 f38e 	uxtah	r3, r3, lr
 801b428:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801b42c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b430:	b29b      	uxth	r3, r3
 801b432:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b436:	45c1      	cmp	r9, r8
 801b438:	f840 3b04 	str.w	r3, [r0], #4
 801b43c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801b440:	d2e8      	bcs.n	801b414 <quorem+0xb0>
 801b442:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b446:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b44a:	b922      	cbnz	r2, 801b456 <quorem+0xf2>
 801b44c:	3b04      	subs	r3, #4
 801b44e:	429d      	cmp	r5, r3
 801b450:	461a      	mov	r2, r3
 801b452:	d30a      	bcc.n	801b46a <quorem+0x106>
 801b454:	613c      	str	r4, [r7, #16]
 801b456:	4630      	mov	r0, r6
 801b458:	b003      	add	sp, #12
 801b45a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b45e:	6812      	ldr	r2, [r2, #0]
 801b460:	3b04      	subs	r3, #4
 801b462:	2a00      	cmp	r2, #0
 801b464:	d1cc      	bne.n	801b400 <quorem+0x9c>
 801b466:	3c01      	subs	r4, #1
 801b468:	e7c7      	b.n	801b3fa <quorem+0x96>
 801b46a:	6812      	ldr	r2, [r2, #0]
 801b46c:	3b04      	subs	r3, #4
 801b46e:	2a00      	cmp	r2, #0
 801b470:	d1f0      	bne.n	801b454 <quorem+0xf0>
 801b472:	3c01      	subs	r4, #1
 801b474:	e7eb      	b.n	801b44e <quorem+0xea>
 801b476:	2000      	movs	r0, #0
 801b478:	e7ee      	b.n	801b458 <quorem+0xf4>
 801b47a:	0000      	movs	r0, r0
 801b47c:	0000      	movs	r0, r0
	...

0801b480 <_dtoa_r>:
 801b480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b484:	ed2d 8b04 	vpush	{d8-d9}
 801b488:	ec57 6b10 	vmov	r6, r7, d0
 801b48c:	b093      	sub	sp, #76	; 0x4c
 801b48e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801b490:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801b494:	9106      	str	r1, [sp, #24]
 801b496:	ee10 aa10 	vmov	sl, s0
 801b49a:	4604      	mov	r4, r0
 801b49c:	9209      	str	r2, [sp, #36]	; 0x24
 801b49e:	930c      	str	r3, [sp, #48]	; 0x30
 801b4a0:	46bb      	mov	fp, r7
 801b4a2:	b975      	cbnz	r5, 801b4c2 <_dtoa_r+0x42>
 801b4a4:	2010      	movs	r0, #16
 801b4a6:	f001 f94d 	bl	801c744 <malloc>
 801b4aa:	4602      	mov	r2, r0
 801b4ac:	6260      	str	r0, [r4, #36]	; 0x24
 801b4ae:	b920      	cbnz	r0, 801b4ba <_dtoa_r+0x3a>
 801b4b0:	4ba7      	ldr	r3, [pc, #668]	; (801b750 <_dtoa_r+0x2d0>)
 801b4b2:	21ea      	movs	r1, #234	; 0xea
 801b4b4:	48a7      	ldr	r0, [pc, #668]	; (801b754 <_dtoa_r+0x2d4>)
 801b4b6:	f002 f8bd 	bl	801d634 <__assert_func>
 801b4ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801b4be:	6005      	str	r5, [r0, #0]
 801b4c0:	60c5      	str	r5, [r0, #12]
 801b4c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b4c4:	6819      	ldr	r1, [r3, #0]
 801b4c6:	b151      	cbz	r1, 801b4de <_dtoa_r+0x5e>
 801b4c8:	685a      	ldr	r2, [r3, #4]
 801b4ca:	604a      	str	r2, [r1, #4]
 801b4cc:	2301      	movs	r3, #1
 801b4ce:	4093      	lsls	r3, r2
 801b4d0:	608b      	str	r3, [r1, #8]
 801b4d2:	4620      	mov	r0, r4
 801b4d4:	f001 f99e 	bl	801c814 <_Bfree>
 801b4d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b4da:	2200      	movs	r2, #0
 801b4dc:	601a      	str	r2, [r3, #0]
 801b4de:	1e3b      	subs	r3, r7, #0
 801b4e0:	bfaa      	itet	ge
 801b4e2:	2300      	movge	r3, #0
 801b4e4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801b4e8:	f8c8 3000 	strge.w	r3, [r8]
 801b4ec:	4b9a      	ldr	r3, [pc, #616]	; (801b758 <_dtoa_r+0x2d8>)
 801b4ee:	bfbc      	itt	lt
 801b4f0:	2201      	movlt	r2, #1
 801b4f2:	f8c8 2000 	strlt.w	r2, [r8]
 801b4f6:	ea33 030b 	bics.w	r3, r3, fp
 801b4fa:	d11b      	bne.n	801b534 <_dtoa_r+0xb4>
 801b4fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b4fe:	f242 730f 	movw	r3, #9999	; 0x270f
 801b502:	6013      	str	r3, [r2, #0]
 801b504:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b508:	4333      	orrs	r3, r6
 801b50a:	f000 8592 	beq.w	801c032 <_dtoa_r+0xbb2>
 801b50e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b510:	b963      	cbnz	r3, 801b52c <_dtoa_r+0xac>
 801b512:	4b92      	ldr	r3, [pc, #584]	; (801b75c <_dtoa_r+0x2dc>)
 801b514:	e022      	b.n	801b55c <_dtoa_r+0xdc>
 801b516:	4b92      	ldr	r3, [pc, #584]	; (801b760 <_dtoa_r+0x2e0>)
 801b518:	9301      	str	r3, [sp, #4]
 801b51a:	3308      	adds	r3, #8
 801b51c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801b51e:	6013      	str	r3, [r2, #0]
 801b520:	9801      	ldr	r0, [sp, #4]
 801b522:	b013      	add	sp, #76	; 0x4c
 801b524:	ecbd 8b04 	vpop	{d8-d9}
 801b528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b52c:	4b8b      	ldr	r3, [pc, #556]	; (801b75c <_dtoa_r+0x2dc>)
 801b52e:	9301      	str	r3, [sp, #4]
 801b530:	3303      	adds	r3, #3
 801b532:	e7f3      	b.n	801b51c <_dtoa_r+0x9c>
 801b534:	2200      	movs	r2, #0
 801b536:	2300      	movs	r3, #0
 801b538:	4650      	mov	r0, sl
 801b53a:	4659      	mov	r1, fp
 801b53c:	f7fd fec4 	bl	80192c8 <__aeabi_dcmpeq>
 801b540:	ec4b ab19 	vmov	d9, sl, fp
 801b544:	4680      	mov	r8, r0
 801b546:	b158      	cbz	r0, 801b560 <_dtoa_r+0xe0>
 801b548:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b54a:	2301      	movs	r3, #1
 801b54c:	6013      	str	r3, [r2, #0]
 801b54e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b550:	2b00      	cmp	r3, #0
 801b552:	f000 856b 	beq.w	801c02c <_dtoa_r+0xbac>
 801b556:	4883      	ldr	r0, [pc, #524]	; (801b764 <_dtoa_r+0x2e4>)
 801b558:	6018      	str	r0, [r3, #0]
 801b55a:	1e43      	subs	r3, r0, #1
 801b55c:	9301      	str	r3, [sp, #4]
 801b55e:	e7df      	b.n	801b520 <_dtoa_r+0xa0>
 801b560:	ec4b ab10 	vmov	d0, sl, fp
 801b564:	aa10      	add	r2, sp, #64	; 0x40
 801b566:	a911      	add	r1, sp, #68	; 0x44
 801b568:	4620      	mov	r0, r4
 801b56a:	f001 fd01 	bl	801cf70 <__d2b>
 801b56e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801b572:	ee08 0a10 	vmov	s16, r0
 801b576:	2d00      	cmp	r5, #0
 801b578:	f000 8084 	beq.w	801b684 <_dtoa_r+0x204>
 801b57c:	ee19 3a90 	vmov	r3, s19
 801b580:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b584:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801b588:	4656      	mov	r6, sl
 801b58a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801b58e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801b592:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801b596:	4b74      	ldr	r3, [pc, #464]	; (801b768 <_dtoa_r+0x2e8>)
 801b598:	2200      	movs	r2, #0
 801b59a:	4630      	mov	r0, r6
 801b59c:	4639      	mov	r1, r7
 801b59e:	f7fd fa73 	bl	8018a88 <__aeabi_dsub>
 801b5a2:	a365      	add	r3, pc, #404	; (adr r3, 801b738 <_dtoa_r+0x2b8>)
 801b5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5a8:	f7fd fc26 	bl	8018df8 <__aeabi_dmul>
 801b5ac:	a364      	add	r3, pc, #400	; (adr r3, 801b740 <_dtoa_r+0x2c0>)
 801b5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5b2:	f7fd fa6b 	bl	8018a8c <__adddf3>
 801b5b6:	4606      	mov	r6, r0
 801b5b8:	4628      	mov	r0, r5
 801b5ba:	460f      	mov	r7, r1
 801b5bc:	f7fd fbb2 	bl	8018d24 <__aeabi_i2d>
 801b5c0:	a361      	add	r3, pc, #388	; (adr r3, 801b748 <_dtoa_r+0x2c8>)
 801b5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5c6:	f7fd fc17 	bl	8018df8 <__aeabi_dmul>
 801b5ca:	4602      	mov	r2, r0
 801b5cc:	460b      	mov	r3, r1
 801b5ce:	4630      	mov	r0, r6
 801b5d0:	4639      	mov	r1, r7
 801b5d2:	f7fd fa5b 	bl	8018a8c <__adddf3>
 801b5d6:	4606      	mov	r6, r0
 801b5d8:	460f      	mov	r7, r1
 801b5da:	f7fd febd 	bl	8019358 <__aeabi_d2iz>
 801b5de:	2200      	movs	r2, #0
 801b5e0:	9000      	str	r0, [sp, #0]
 801b5e2:	2300      	movs	r3, #0
 801b5e4:	4630      	mov	r0, r6
 801b5e6:	4639      	mov	r1, r7
 801b5e8:	f7fd fe78 	bl	80192dc <__aeabi_dcmplt>
 801b5ec:	b150      	cbz	r0, 801b604 <_dtoa_r+0x184>
 801b5ee:	9800      	ldr	r0, [sp, #0]
 801b5f0:	f7fd fb98 	bl	8018d24 <__aeabi_i2d>
 801b5f4:	4632      	mov	r2, r6
 801b5f6:	463b      	mov	r3, r7
 801b5f8:	f7fd fe66 	bl	80192c8 <__aeabi_dcmpeq>
 801b5fc:	b910      	cbnz	r0, 801b604 <_dtoa_r+0x184>
 801b5fe:	9b00      	ldr	r3, [sp, #0]
 801b600:	3b01      	subs	r3, #1
 801b602:	9300      	str	r3, [sp, #0]
 801b604:	9b00      	ldr	r3, [sp, #0]
 801b606:	2b16      	cmp	r3, #22
 801b608:	d85a      	bhi.n	801b6c0 <_dtoa_r+0x240>
 801b60a:	9a00      	ldr	r2, [sp, #0]
 801b60c:	4b57      	ldr	r3, [pc, #348]	; (801b76c <_dtoa_r+0x2ec>)
 801b60e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b612:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b616:	ec51 0b19 	vmov	r0, r1, d9
 801b61a:	f7fd fe5f 	bl	80192dc <__aeabi_dcmplt>
 801b61e:	2800      	cmp	r0, #0
 801b620:	d050      	beq.n	801b6c4 <_dtoa_r+0x244>
 801b622:	9b00      	ldr	r3, [sp, #0]
 801b624:	3b01      	subs	r3, #1
 801b626:	9300      	str	r3, [sp, #0]
 801b628:	2300      	movs	r3, #0
 801b62a:	930b      	str	r3, [sp, #44]	; 0x2c
 801b62c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b62e:	1b5d      	subs	r5, r3, r5
 801b630:	1e6b      	subs	r3, r5, #1
 801b632:	9305      	str	r3, [sp, #20]
 801b634:	bf45      	ittet	mi
 801b636:	f1c5 0301 	rsbmi	r3, r5, #1
 801b63a:	9304      	strmi	r3, [sp, #16]
 801b63c:	2300      	movpl	r3, #0
 801b63e:	2300      	movmi	r3, #0
 801b640:	bf4c      	ite	mi
 801b642:	9305      	strmi	r3, [sp, #20]
 801b644:	9304      	strpl	r3, [sp, #16]
 801b646:	9b00      	ldr	r3, [sp, #0]
 801b648:	2b00      	cmp	r3, #0
 801b64a:	db3d      	blt.n	801b6c8 <_dtoa_r+0x248>
 801b64c:	9b05      	ldr	r3, [sp, #20]
 801b64e:	9a00      	ldr	r2, [sp, #0]
 801b650:	920a      	str	r2, [sp, #40]	; 0x28
 801b652:	4413      	add	r3, r2
 801b654:	9305      	str	r3, [sp, #20]
 801b656:	2300      	movs	r3, #0
 801b658:	9307      	str	r3, [sp, #28]
 801b65a:	9b06      	ldr	r3, [sp, #24]
 801b65c:	2b09      	cmp	r3, #9
 801b65e:	f200 8089 	bhi.w	801b774 <_dtoa_r+0x2f4>
 801b662:	2b05      	cmp	r3, #5
 801b664:	bfc4      	itt	gt
 801b666:	3b04      	subgt	r3, #4
 801b668:	9306      	strgt	r3, [sp, #24]
 801b66a:	9b06      	ldr	r3, [sp, #24]
 801b66c:	f1a3 0302 	sub.w	r3, r3, #2
 801b670:	bfcc      	ite	gt
 801b672:	2500      	movgt	r5, #0
 801b674:	2501      	movle	r5, #1
 801b676:	2b03      	cmp	r3, #3
 801b678:	f200 8087 	bhi.w	801b78a <_dtoa_r+0x30a>
 801b67c:	e8df f003 	tbb	[pc, r3]
 801b680:	59383a2d 	.word	0x59383a2d
 801b684:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801b688:	441d      	add	r5, r3
 801b68a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801b68e:	2b20      	cmp	r3, #32
 801b690:	bfc1      	itttt	gt
 801b692:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801b696:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801b69a:	fa0b f303 	lslgt.w	r3, fp, r3
 801b69e:	fa26 f000 	lsrgt.w	r0, r6, r0
 801b6a2:	bfda      	itte	le
 801b6a4:	f1c3 0320 	rsble	r3, r3, #32
 801b6a8:	fa06 f003 	lslle.w	r0, r6, r3
 801b6ac:	4318      	orrgt	r0, r3
 801b6ae:	f7fd fb29 	bl	8018d04 <__aeabi_ui2d>
 801b6b2:	2301      	movs	r3, #1
 801b6b4:	4606      	mov	r6, r0
 801b6b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801b6ba:	3d01      	subs	r5, #1
 801b6bc:	930e      	str	r3, [sp, #56]	; 0x38
 801b6be:	e76a      	b.n	801b596 <_dtoa_r+0x116>
 801b6c0:	2301      	movs	r3, #1
 801b6c2:	e7b2      	b.n	801b62a <_dtoa_r+0x1aa>
 801b6c4:	900b      	str	r0, [sp, #44]	; 0x2c
 801b6c6:	e7b1      	b.n	801b62c <_dtoa_r+0x1ac>
 801b6c8:	9b04      	ldr	r3, [sp, #16]
 801b6ca:	9a00      	ldr	r2, [sp, #0]
 801b6cc:	1a9b      	subs	r3, r3, r2
 801b6ce:	9304      	str	r3, [sp, #16]
 801b6d0:	4253      	negs	r3, r2
 801b6d2:	9307      	str	r3, [sp, #28]
 801b6d4:	2300      	movs	r3, #0
 801b6d6:	930a      	str	r3, [sp, #40]	; 0x28
 801b6d8:	e7bf      	b.n	801b65a <_dtoa_r+0x1da>
 801b6da:	2300      	movs	r3, #0
 801b6dc:	9308      	str	r3, [sp, #32]
 801b6de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b6e0:	2b00      	cmp	r3, #0
 801b6e2:	dc55      	bgt.n	801b790 <_dtoa_r+0x310>
 801b6e4:	2301      	movs	r3, #1
 801b6e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801b6ea:	461a      	mov	r2, r3
 801b6ec:	9209      	str	r2, [sp, #36]	; 0x24
 801b6ee:	e00c      	b.n	801b70a <_dtoa_r+0x28a>
 801b6f0:	2301      	movs	r3, #1
 801b6f2:	e7f3      	b.n	801b6dc <_dtoa_r+0x25c>
 801b6f4:	2300      	movs	r3, #0
 801b6f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b6f8:	9308      	str	r3, [sp, #32]
 801b6fa:	9b00      	ldr	r3, [sp, #0]
 801b6fc:	4413      	add	r3, r2
 801b6fe:	9302      	str	r3, [sp, #8]
 801b700:	3301      	adds	r3, #1
 801b702:	2b01      	cmp	r3, #1
 801b704:	9303      	str	r3, [sp, #12]
 801b706:	bfb8      	it	lt
 801b708:	2301      	movlt	r3, #1
 801b70a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801b70c:	2200      	movs	r2, #0
 801b70e:	6042      	str	r2, [r0, #4]
 801b710:	2204      	movs	r2, #4
 801b712:	f102 0614 	add.w	r6, r2, #20
 801b716:	429e      	cmp	r6, r3
 801b718:	6841      	ldr	r1, [r0, #4]
 801b71a:	d93d      	bls.n	801b798 <_dtoa_r+0x318>
 801b71c:	4620      	mov	r0, r4
 801b71e:	f001 f839 	bl	801c794 <_Balloc>
 801b722:	9001      	str	r0, [sp, #4]
 801b724:	2800      	cmp	r0, #0
 801b726:	d13b      	bne.n	801b7a0 <_dtoa_r+0x320>
 801b728:	4b11      	ldr	r3, [pc, #68]	; (801b770 <_dtoa_r+0x2f0>)
 801b72a:	4602      	mov	r2, r0
 801b72c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801b730:	e6c0      	b.n	801b4b4 <_dtoa_r+0x34>
 801b732:	2301      	movs	r3, #1
 801b734:	e7df      	b.n	801b6f6 <_dtoa_r+0x276>
 801b736:	bf00      	nop
 801b738:	636f4361 	.word	0x636f4361
 801b73c:	3fd287a7 	.word	0x3fd287a7
 801b740:	8b60c8b3 	.word	0x8b60c8b3
 801b744:	3fc68a28 	.word	0x3fc68a28
 801b748:	509f79fb 	.word	0x509f79fb
 801b74c:	3fd34413 	.word	0x3fd34413
 801b750:	0805234e 	.word	0x0805234e
 801b754:	08052365 	.word	0x08052365
 801b758:	7ff00000 	.word	0x7ff00000
 801b75c:	0805234a 	.word	0x0805234a
 801b760:	08052341 	.word	0x08052341
 801b764:	080521c5 	.word	0x080521c5
 801b768:	3ff80000 	.word	0x3ff80000
 801b76c:	080524d0 	.word	0x080524d0
 801b770:	080523c0 	.word	0x080523c0
 801b774:	2501      	movs	r5, #1
 801b776:	2300      	movs	r3, #0
 801b778:	9306      	str	r3, [sp, #24]
 801b77a:	9508      	str	r5, [sp, #32]
 801b77c:	f04f 33ff 	mov.w	r3, #4294967295
 801b780:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801b784:	2200      	movs	r2, #0
 801b786:	2312      	movs	r3, #18
 801b788:	e7b0      	b.n	801b6ec <_dtoa_r+0x26c>
 801b78a:	2301      	movs	r3, #1
 801b78c:	9308      	str	r3, [sp, #32]
 801b78e:	e7f5      	b.n	801b77c <_dtoa_r+0x2fc>
 801b790:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b792:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801b796:	e7b8      	b.n	801b70a <_dtoa_r+0x28a>
 801b798:	3101      	adds	r1, #1
 801b79a:	6041      	str	r1, [r0, #4]
 801b79c:	0052      	lsls	r2, r2, #1
 801b79e:	e7b8      	b.n	801b712 <_dtoa_r+0x292>
 801b7a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b7a2:	9a01      	ldr	r2, [sp, #4]
 801b7a4:	601a      	str	r2, [r3, #0]
 801b7a6:	9b03      	ldr	r3, [sp, #12]
 801b7a8:	2b0e      	cmp	r3, #14
 801b7aa:	f200 809d 	bhi.w	801b8e8 <_dtoa_r+0x468>
 801b7ae:	2d00      	cmp	r5, #0
 801b7b0:	f000 809a 	beq.w	801b8e8 <_dtoa_r+0x468>
 801b7b4:	9b00      	ldr	r3, [sp, #0]
 801b7b6:	2b00      	cmp	r3, #0
 801b7b8:	dd32      	ble.n	801b820 <_dtoa_r+0x3a0>
 801b7ba:	4ab7      	ldr	r2, [pc, #732]	; (801ba98 <_dtoa_r+0x618>)
 801b7bc:	f003 030f 	and.w	r3, r3, #15
 801b7c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801b7c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b7c8:	9b00      	ldr	r3, [sp, #0]
 801b7ca:	05d8      	lsls	r0, r3, #23
 801b7cc:	ea4f 1723 	mov.w	r7, r3, asr #4
 801b7d0:	d516      	bpl.n	801b800 <_dtoa_r+0x380>
 801b7d2:	4bb2      	ldr	r3, [pc, #712]	; (801ba9c <_dtoa_r+0x61c>)
 801b7d4:	ec51 0b19 	vmov	r0, r1, d9
 801b7d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801b7dc:	f7fd fc36 	bl	801904c <__aeabi_ddiv>
 801b7e0:	f007 070f 	and.w	r7, r7, #15
 801b7e4:	4682      	mov	sl, r0
 801b7e6:	468b      	mov	fp, r1
 801b7e8:	2503      	movs	r5, #3
 801b7ea:	4eac      	ldr	r6, [pc, #688]	; (801ba9c <_dtoa_r+0x61c>)
 801b7ec:	b957      	cbnz	r7, 801b804 <_dtoa_r+0x384>
 801b7ee:	4642      	mov	r2, r8
 801b7f0:	464b      	mov	r3, r9
 801b7f2:	4650      	mov	r0, sl
 801b7f4:	4659      	mov	r1, fp
 801b7f6:	f7fd fc29 	bl	801904c <__aeabi_ddiv>
 801b7fa:	4682      	mov	sl, r0
 801b7fc:	468b      	mov	fp, r1
 801b7fe:	e028      	b.n	801b852 <_dtoa_r+0x3d2>
 801b800:	2502      	movs	r5, #2
 801b802:	e7f2      	b.n	801b7ea <_dtoa_r+0x36a>
 801b804:	07f9      	lsls	r1, r7, #31
 801b806:	d508      	bpl.n	801b81a <_dtoa_r+0x39a>
 801b808:	4640      	mov	r0, r8
 801b80a:	4649      	mov	r1, r9
 801b80c:	e9d6 2300 	ldrd	r2, r3, [r6]
 801b810:	f7fd faf2 	bl	8018df8 <__aeabi_dmul>
 801b814:	3501      	adds	r5, #1
 801b816:	4680      	mov	r8, r0
 801b818:	4689      	mov	r9, r1
 801b81a:	107f      	asrs	r7, r7, #1
 801b81c:	3608      	adds	r6, #8
 801b81e:	e7e5      	b.n	801b7ec <_dtoa_r+0x36c>
 801b820:	f000 809b 	beq.w	801b95a <_dtoa_r+0x4da>
 801b824:	9b00      	ldr	r3, [sp, #0]
 801b826:	4f9d      	ldr	r7, [pc, #628]	; (801ba9c <_dtoa_r+0x61c>)
 801b828:	425e      	negs	r6, r3
 801b82a:	4b9b      	ldr	r3, [pc, #620]	; (801ba98 <_dtoa_r+0x618>)
 801b82c:	f006 020f 	and.w	r2, r6, #15
 801b830:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b834:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b838:	ec51 0b19 	vmov	r0, r1, d9
 801b83c:	f7fd fadc 	bl	8018df8 <__aeabi_dmul>
 801b840:	1136      	asrs	r6, r6, #4
 801b842:	4682      	mov	sl, r0
 801b844:	468b      	mov	fp, r1
 801b846:	2300      	movs	r3, #0
 801b848:	2502      	movs	r5, #2
 801b84a:	2e00      	cmp	r6, #0
 801b84c:	d17a      	bne.n	801b944 <_dtoa_r+0x4c4>
 801b84e:	2b00      	cmp	r3, #0
 801b850:	d1d3      	bne.n	801b7fa <_dtoa_r+0x37a>
 801b852:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b854:	2b00      	cmp	r3, #0
 801b856:	f000 8082 	beq.w	801b95e <_dtoa_r+0x4de>
 801b85a:	4b91      	ldr	r3, [pc, #580]	; (801baa0 <_dtoa_r+0x620>)
 801b85c:	2200      	movs	r2, #0
 801b85e:	4650      	mov	r0, sl
 801b860:	4659      	mov	r1, fp
 801b862:	f7fd fd3b 	bl	80192dc <__aeabi_dcmplt>
 801b866:	2800      	cmp	r0, #0
 801b868:	d079      	beq.n	801b95e <_dtoa_r+0x4de>
 801b86a:	9b03      	ldr	r3, [sp, #12]
 801b86c:	2b00      	cmp	r3, #0
 801b86e:	d076      	beq.n	801b95e <_dtoa_r+0x4de>
 801b870:	9b02      	ldr	r3, [sp, #8]
 801b872:	2b00      	cmp	r3, #0
 801b874:	dd36      	ble.n	801b8e4 <_dtoa_r+0x464>
 801b876:	9b00      	ldr	r3, [sp, #0]
 801b878:	4650      	mov	r0, sl
 801b87a:	4659      	mov	r1, fp
 801b87c:	1e5f      	subs	r7, r3, #1
 801b87e:	2200      	movs	r2, #0
 801b880:	4b88      	ldr	r3, [pc, #544]	; (801baa4 <_dtoa_r+0x624>)
 801b882:	f7fd fab9 	bl	8018df8 <__aeabi_dmul>
 801b886:	9e02      	ldr	r6, [sp, #8]
 801b888:	4682      	mov	sl, r0
 801b88a:	468b      	mov	fp, r1
 801b88c:	3501      	adds	r5, #1
 801b88e:	4628      	mov	r0, r5
 801b890:	f7fd fa48 	bl	8018d24 <__aeabi_i2d>
 801b894:	4652      	mov	r2, sl
 801b896:	465b      	mov	r3, fp
 801b898:	f7fd faae 	bl	8018df8 <__aeabi_dmul>
 801b89c:	4b82      	ldr	r3, [pc, #520]	; (801baa8 <_dtoa_r+0x628>)
 801b89e:	2200      	movs	r2, #0
 801b8a0:	f7fd f8f4 	bl	8018a8c <__adddf3>
 801b8a4:	46d0      	mov	r8, sl
 801b8a6:	46d9      	mov	r9, fp
 801b8a8:	4682      	mov	sl, r0
 801b8aa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801b8ae:	2e00      	cmp	r6, #0
 801b8b0:	d158      	bne.n	801b964 <_dtoa_r+0x4e4>
 801b8b2:	4b7e      	ldr	r3, [pc, #504]	; (801baac <_dtoa_r+0x62c>)
 801b8b4:	2200      	movs	r2, #0
 801b8b6:	4640      	mov	r0, r8
 801b8b8:	4649      	mov	r1, r9
 801b8ba:	f7fd f8e5 	bl	8018a88 <__aeabi_dsub>
 801b8be:	4652      	mov	r2, sl
 801b8c0:	465b      	mov	r3, fp
 801b8c2:	4680      	mov	r8, r0
 801b8c4:	4689      	mov	r9, r1
 801b8c6:	f7fd fd27 	bl	8019318 <__aeabi_dcmpgt>
 801b8ca:	2800      	cmp	r0, #0
 801b8cc:	f040 8295 	bne.w	801bdfa <_dtoa_r+0x97a>
 801b8d0:	4652      	mov	r2, sl
 801b8d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801b8d6:	4640      	mov	r0, r8
 801b8d8:	4649      	mov	r1, r9
 801b8da:	f7fd fcff 	bl	80192dc <__aeabi_dcmplt>
 801b8de:	2800      	cmp	r0, #0
 801b8e0:	f040 8289 	bne.w	801bdf6 <_dtoa_r+0x976>
 801b8e4:	ec5b ab19 	vmov	sl, fp, d9
 801b8e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b8ea:	2b00      	cmp	r3, #0
 801b8ec:	f2c0 8148 	blt.w	801bb80 <_dtoa_r+0x700>
 801b8f0:	9a00      	ldr	r2, [sp, #0]
 801b8f2:	2a0e      	cmp	r2, #14
 801b8f4:	f300 8144 	bgt.w	801bb80 <_dtoa_r+0x700>
 801b8f8:	4b67      	ldr	r3, [pc, #412]	; (801ba98 <_dtoa_r+0x618>)
 801b8fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b8fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b902:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b904:	2b00      	cmp	r3, #0
 801b906:	f280 80d5 	bge.w	801bab4 <_dtoa_r+0x634>
 801b90a:	9b03      	ldr	r3, [sp, #12]
 801b90c:	2b00      	cmp	r3, #0
 801b90e:	f300 80d1 	bgt.w	801bab4 <_dtoa_r+0x634>
 801b912:	f040 826f 	bne.w	801bdf4 <_dtoa_r+0x974>
 801b916:	4b65      	ldr	r3, [pc, #404]	; (801baac <_dtoa_r+0x62c>)
 801b918:	2200      	movs	r2, #0
 801b91a:	4640      	mov	r0, r8
 801b91c:	4649      	mov	r1, r9
 801b91e:	f7fd fa6b 	bl	8018df8 <__aeabi_dmul>
 801b922:	4652      	mov	r2, sl
 801b924:	465b      	mov	r3, fp
 801b926:	f7fd fced 	bl	8019304 <__aeabi_dcmpge>
 801b92a:	9e03      	ldr	r6, [sp, #12]
 801b92c:	4637      	mov	r7, r6
 801b92e:	2800      	cmp	r0, #0
 801b930:	f040 8245 	bne.w	801bdbe <_dtoa_r+0x93e>
 801b934:	9d01      	ldr	r5, [sp, #4]
 801b936:	2331      	movs	r3, #49	; 0x31
 801b938:	f805 3b01 	strb.w	r3, [r5], #1
 801b93c:	9b00      	ldr	r3, [sp, #0]
 801b93e:	3301      	adds	r3, #1
 801b940:	9300      	str	r3, [sp, #0]
 801b942:	e240      	b.n	801bdc6 <_dtoa_r+0x946>
 801b944:	07f2      	lsls	r2, r6, #31
 801b946:	d505      	bpl.n	801b954 <_dtoa_r+0x4d4>
 801b948:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b94c:	f7fd fa54 	bl	8018df8 <__aeabi_dmul>
 801b950:	3501      	adds	r5, #1
 801b952:	2301      	movs	r3, #1
 801b954:	1076      	asrs	r6, r6, #1
 801b956:	3708      	adds	r7, #8
 801b958:	e777      	b.n	801b84a <_dtoa_r+0x3ca>
 801b95a:	2502      	movs	r5, #2
 801b95c:	e779      	b.n	801b852 <_dtoa_r+0x3d2>
 801b95e:	9f00      	ldr	r7, [sp, #0]
 801b960:	9e03      	ldr	r6, [sp, #12]
 801b962:	e794      	b.n	801b88e <_dtoa_r+0x40e>
 801b964:	9901      	ldr	r1, [sp, #4]
 801b966:	4b4c      	ldr	r3, [pc, #304]	; (801ba98 <_dtoa_r+0x618>)
 801b968:	4431      	add	r1, r6
 801b96a:	910d      	str	r1, [sp, #52]	; 0x34
 801b96c:	9908      	ldr	r1, [sp, #32]
 801b96e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801b972:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801b976:	2900      	cmp	r1, #0
 801b978:	d043      	beq.n	801ba02 <_dtoa_r+0x582>
 801b97a:	494d      	ldr	r1, [pc, #308]	; (801bab0 <_dtoa_r+0x630>)
 801b97c:	2000      	movs	r0, #0
 801b97e:	f7fd fb65 	bl	801904c <__aeabi_ddiv>
 801b982:	4652      	mov	r2, sl
 801b984:	465b      	mov	r3, fp
 801b986:	f7fd f87f 	bl	8018a88 <__aeabi_dsub>
 801b98a:	9d01      	ldr	r5, [sp, #4]
 801b98c:	4682      	mov	sl, r0
 801b98e:	468b      	mov	fp, r1
 801b990:	4649      	mov	r1, r9
 801b992:	4640      	mov	r0, r8
 801b994:	f7fd fce0 	bl	8019358 <__aeabi_d2iz>
 801b998:	4606      	mov	r6, r0
 801b99a:	f7fd f9c3 	bl	8018d24 <__aeabi_i2d>
 801b99e:	4602      	mov	r2, r0
 801b9a0:	460b      	mov	r3, r1
 801b9a2:	4640      	mov	r0, r8
 801b9a4:	4649      	mov	r1, r9
 801b9a6:	f7fd f86f 	bl	8018a88 <__aeabi_dsub>
 801b9aa:	3630      	adds	r6, #48	; 0x30
 801b9ac:	f805 6b01 	strb.w	r6, [r5], #1
 801b9b0:	4652      	mov	r2, sl
 801b9b2:	465b      	mov	r3, fp
 801b9b4:	4680      	mov	r8, r0
 801b9b6:	4689      	mov	r9, r1
 801b9b8:	f7fd fc90 	bl	80192dc <__aeabi_dcmplt>
 801b9bc:	2800      	cmp	r0, #0
 801b9be:	d163      	bne.n	801ba88 <_dtoa_r+0x608>
 801b9c0:	4642      	mov	r2, r8
 801b9c2:	464b      	mov	r3, r9
 801b9c4:	4936      	ldr	r1, [pc, #216]	; (801baa0 <_dtoa_r+0x620>)
 801b9c6:	2000      	movs	r0, #0
 801b9c8:	f7fd f85e 	bl	8018a88 <__aeabi_dsub>
 801b9cc:	4652      	mov	r2, sl
 801b9ce:	465b      	mov	r3, fp
 801b9d0:	f7fd fc84 	bl	80192dc <__aeabi_dcmplt>
 801b9d4:	2800      	cmp	r0, #0
 801b9d6:	f040 80b5 	bne.w	801bb44 <_dtoa_r+0x6c4>
 801b9da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b9dc:	429d      	cmp	r5, r3
 801b9de:	d081      	beq.n	801b8e4 <_dtoa_r+0x464>
 801b9e0:	4b30      	ldr	r3, [pc, #192]	; (801baa4 <_dtoa_r+0x624>)
 801b9e2:	2200      	movs	r2, #0
 801b9e4:	4650      	mov	r0, sl
 801b9e6:	4659      	mov	r1, fp
 801b9e8:	f7fd fa06 	bl	8018df8 <__aeabi_dmul>
 801b9ec:	4b2d      	ldr	r3, [pc, #180]	; (801baa4 <_dtoa_r+0x624>)
 801b9ee:	4682      	mov	sl, r0
 801b9f0:	468b      	mov	fp, r1
 801b9f2:	4640      	mov	r0, r8
 801b9f4:	4649      	mov	r1, r9
 801b9f6:	2200      	movs	r2, #0
 801b9f8:	f7fd f9fe 	bl	8018df8 <__aeabi_dmul>
 801b9fc:	4680      	mov	r8, r0
 801b9fe:	4689      	mov	r9, r1
 801ba00:	e7c6      	b.n	801b990 <_dtoa_r+0x510>
 801ba02:	4650      	mov	r0, sl
 801ba04:	4659      	mov	r1, fp
 801ba06:	f7fd f9f7 	bl	8018df8 <__aeabi_dmul>
 801ba0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ba0c:	9d01      	ldr	r5, [sp, #4]
 801ba0e:	930f      	str	r3, [sp, #60]	; 0x3c
 801ba10:	4682      	mov	sl, r0
 801ba12:	468b      	mov	fp, r1
 801ba14:	4649      	mov	r1, r9
 801ba16:	4640      	mov	r0, r8
 801ba18:	f7fd fc9e 	bl	8019358 <__aeabi_d2iz>
 801ba1c:	4606      	mov	r6, r0
 801ba1e:	f7fd f981 	bl	8018d24 <__aeabi_i2d>
 801ba22:	3630      	adds	r6, #48	; 0x30
 801ba24:	4602      	mov	r2, r0
 801ba26:	460b      	mov	r3, r1
 801ba28:	4640      	mov	r0, r8
 801ba2a:	4649      	mov	r1, r9
 801ba2c:	f7fd f82c 	bl	8018a88 <__aeabi_dsub>
 801ba30:	f805 6b01 	strb.w	r6, [r5], #1
 801ba34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ba36:	429d      	cmp	r5, r3
 801ba38:	4680      	mov	r8, r0
 801ba3a:	4689      	mov	r9, r1
 801ba3c:	f04f 0200 	mov.w	r2, #0
 801ba40:	d124      	bne.n	801ba8c <_dtoa_r+0x60c>
 801ba42:	4b1b      	ldr	r3, [pc, #108]	; (801bab0 <_dtoa_r+0x630>)
 801ba44:	4650      	mov	r0, sl
 801ba46:	4659      	mov	r1, fp
 801ba48:	f7fd f820 	bl	8018a8c <__adddf3>
 801ba4c:	4602      	mov	r2, r0
 801ba4e:	460b      	mov	r3, r1
 801ba50:	4640      	mov	r0, r8
 801ba52:	4649      	mov	r1, r9
 801ba54:	f7fd fc60 	bl	8019318 <__aeabi_dcmpgt>
 801ba58:	2800      	cmp	r0, #0
 801ba5a:	d173      	bne.n	801bb44 <_dtoa_r+0x6c4>
 801ba5c:	4652      	mov	r2, sl
 801ba5e:	465b      	mov	r3, fp
 801ba60:	4913      	ldr	r1, [pc, #76]	; (801bab0 <_dtoa_r+0x630>)
 801ba62:	2000      	movs	r0, #0
 801ba64:	f7fd f810 	bl	8018a88 <__aeabi_dsub>
 801ba68:	4602      	mov	r2, r0
 801ba6a:	460b      	mov	r3, r1
 801ba6c:	4640      	mov	r0, r8
 801ba6e:	4649      	mov	r1, r9
 801ba70:	f7fd fc34 	bl	80192dc <__aeabi_dcmplt>
 801ba74:	2800      	cmp	r0, #0
 801ba76:	f43f af35 	beq.w	801b8e4 <_dtoa_r+0x464>
 801ba7a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801ba7c:	1e6b      	subs	r3, r5, #1
 801ba7e:	930f      	str	r3, [sp, #60]	; 0x3c
 801ba80:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801ba84:	2b30      	cmp	r3, #48	; 0x30
 801ba86:	d0f8      	beq.n	801ba7a <_dtoa_r+0x5fa>
 801ba88:	9700      	str	r7, [sp, #0]
 801ba8a:	e049      	b.n	801bb20 <_dtoa_r+0x6a0>
 801ba8c:	4b05      	ldr	r3, [pc, #20]	; (801baa4 <_dtoa_r+0x624>)
 801ba8e:	f7fd f9b3 	bl	8018df8 <__aeabi_dmul>
 801ba92:	4680      	mov	r8, r0
 801ba94:	4689      	mov	r9, r1
 801ba96:	e7bd      	b.n	801ba14 <_dtoa_r+0x594>
 801ba98:	080524d0 	.word	0x080524d0
 801ba9c:	080524a8 	.word	0x080524a8
 801baa0:	3ff00000 	.word	0x3ff00000
 801baa4:	40240000 	.word	0x40240000
 801baa8:	401c0000 	.word	0x401c0000
 801baac:	40140000 	.word	0x40140000
 801bab0:	3fe00000 	.word	0x3fe00000
 801bab4:	9d01      	ldr	r5, [sp, #4]
 801bab6:	4656      	mov	r6, sl
 801bab8:	465f      	mov	r7, fp
 801baba:	4642      	mov	r2, r8
 801babc:	464b      	mov	r3, r9
 801babe:	4630      	mov	r0, r6
 801bac0:	4639      	mov	r1, r7
 801bac2:	f7fd fac3 	bl	801904c <__aeabi_ddiv>
 801bac6:	f7fd fc47 	bl	8019358 <__aeabi_d2iz>
 801baca:	4682      	mov	sl, r0
 801bacc:	f7fd f92a 	bl	8018d24 <__aeabi_i2d>
 801bad0:	4642      	mov	r2, r8
 801bad2:	464b      	mov	r3, r9
 801bad4:	f7fd f990 	bl	8018df8 <__aeabi_dmul>
 801bad8:	4602      	mov	r2, r0
 801bada:	460b      	mov	r3, r1
 801badc:	4630      	mov	r0, r6
 801bade:	4639      	mov	r1, r7
 801bae0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801bae4:	f7fc ffd0 	bl	8018a88 <__aeabi_dsub>
 801bae8:	f805 6b01 	strb.w	r6, [r5], #1
 801baec:	9e01      	ldr	r6, [sp, #4]
 801baee:	9f03      	ldr	r7, [sp, #12]
 801baf0:	1bae      	subs	r6, r5, r6
 801baf2:	42b7      	cmp	r7, r6
 801baf4:	4602      	mov	r2, r0
 801baf6:	460b      	mov	r3, r1
 801baf8:	d135      	bne.n	801bb66 <_dtoa_r+0x6e6>
 801bafa:	f7fc ffc7 	bl	8018a8c <__adddf3>
 801bafe:	4642      	mov	r2, r8
 801bb00:	464b      	mov	r3, r9
 801bb02:	4606      	mov	r6, r0
 801bb04:	460f      	mov	r7, r1
 801bb06:	f7fd fc07 	bl	8019318 <__aeabi_dcmpgt>
 801bb0a:	b9d0      	cbnz	r0, 801bb42 <_dtoa_r+0x6c2>
 801bb0c:	4642      	mov	r2, r8
 801bb0e:	464b      	mov	r3, r9
 801bb10:	4630      	mov	r0, r6
 801bb12:	4639      	mov	r1, r7
 801bb14:	f7fd fbd8 	bl	80192c8 <__aeabi_dcmpeq>
 801bb18:	b110      	cbz	r0, 801bb20 <_dtoa_r+0x6a0>
 801bb1a:	f01a 0f01 	tst.w	sl, #1
 801bb1e:	d110      	bne.n	801bb42 <_dtoa_r+0x6c2>
 801bb20:	4620      	mov	r0, r4
 801bb22:	ee18 1a10 	vmov	r1, s16
 801bb26:	f000 fe75 	bl	801c814 <_Bfree>
 801bb2a:	2300      	movs	r3, #0
 801bb2c:	9800      	ldr	r0, [sp, #0]
 801bb2e:	702b      	strb	r3, [r5, #0]
 801bb30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bb32:	3001      	adds	r0, #1
 801bb34:	6018      	str	r0, [r3, #0]
 801bb36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bb38:	2b00      	cmp	r3, #0
 801bb3a:	f43f acf1 	beq.w	801b520 <_dtoa_r+0xa0>
 801bb3e:	601d      	str	r5, [r3, #0]
 801bb40:	e4ee      	b.n	801b520 <_dtoa_r+0xa0>
 801bb42:	9f00      	ldr	r7, [sp, #0]
 801bb44:	462b      	mov	r3, r5
 801bb46:	461d      	mov	r5, r3
 801bb48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801bb4c:	2a39      	cmp	r2, #57	; 0x39
 801bb4e:	d106      	bne.n	801bb5e <_dtoa_r+0x6de>
 801bb50:	9a01      	ldr	r2, [sp, #4]
 801bb52:	429a      	cmp	r2, r3
 801bb54:	d1f7      	bne.n	801bb46 <_dtoa_r+0x6c6>
 801bb56:	9901      	ldr	r1, [sp, #4]
 801bb58:	2230      	movs	r2, #48	; 0x30
 801bb5a:	3701      	adds	r7, #1
 801bb5c:	700a      	strb	r2, [r1, #0]
 801bb5e:	781a      	ldrb	r2, [r3, #0]
 801bb60:	3201      	adds	r2, #1
 801bb62:	701a      	strb	r2, [r3, #0]
 801bb64:	e790      	b.n	801ba88 <_dtoa_r+0x608>
 801bb66:	4ba6      	ldr	r3, [pc, #664]	; (801be00 <_dtoa_r+0x980>)
 801bb68:	2200      	movs	r2, #0
 801bb6a:	f7fd f945 	bl	8018df8 <__aeabi_dmul>
 801bb6e:	2200      	movs	r2, #0
 801bb70:	2300      	movs	r3, #0
 801bb72:	4606      	mov	r6, r0
 801bb74:	460f      	mov	r7, r1
 801bb76:	f7fd fba7 	bl	80192c8 <__aeabi_dcmpeq>
 801bb7a:	2800      	cmp	r0, #0
 801bb7c:	d09d      	beq.n	801baba <_dtoa_r+0x63a>
 801bb7e:	e7cf      	b.n	801bb20 <_dtoa_r+0x6a0>
 801bb80:	9a08      	ldr	r2, [sp, #32]
 801bb82:	2a00      	cmp	r2, #0
 801bb84:	f000 80d7 	beq.w	801bd36 <_dtoa_r+0x8b6>
 801bb88:	9a06      	ldr	r2, [sp, #24]
 801bb8a:	2a01      	cmp	r2, #1
 801bb8c:	f300 80ba 	bgt.w	801bd04 <_dtoa_r+0x884>
 801bb90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bb92:	2a00      	cmp	r2, #0
 801bb94:	f000 80b2 	beq.w	801bcfc <_dtoa_r+0x87c>
 801bb98:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801bb9c:	9e07      	ldr	r6, [sp, #28]
 801bb9e:	9d04      	ldr	r5, [sp, #16]
 801bba0:	9a04      	ldr	r2, [sp, #16]
 801bba2:	441a      	add	r2, r3
 801bba4:	9204      	str	r2, [sp, #16]
 801bba6:	9a05      	ldr	r2, [sp, #20]
 801bba8:	2101      	movs	r1, #1
 801bbaa:	441a      	add	r2, r3
 801bbac:	4620      	mov	r0, r4
 801bbae:	9205      	str	r2, [sp, #20]
 801bbb0:	f000 ff32 	bl	801ca18 <__i2b>
 801bbb4:	4607      	mov	r7, r0
 801bbb6:	2d00      	cmp	r5, #0
 801bbb8:	dd0c      	ble.n	801bbd4 <_dtoa_r+0x754>
 801bbba:	9b05      	ldr	r3, [sp, #20]
 801bbbc:	2b00      	cmp	r3, #0
 801bbbe:	dd09      	ble.n	801bbd4 <_dtoa_r+0x754>
 801bbc0:	42ab      	cmp	r3, r5
 801bbc2:	9a04      	ldr	r2, [sp, #16]
 801bbc4:	bfa8      	it	ge
 801bbc6:	462b      	movge	r3, r5
 801bbc8:	1ad2      	subs	r2, r2, r3
 801bbca:	9204      	str	r2, [sp, #16]
 801bbcc:	9a05      	ldr	r2, [sp, #20]
 801bbce:	1aed      	subs	r5, r5, r3
 801bbd0:	1ad3      	subs	r3, r2, r3
 801bbd2:	9305      	str	r3, [sp, #20]
 801bbd4:	9b07      	ldr	r3, [sp, #28]
 801bbd6:	b31b      	cbz	r3, 801bc20 <_dtoa_r+0x7a0>
 801bbd8:	9b08      	ldr	r3, [sp, #32]
 801bbda:	2b00      	cmp	r3, #0
 801bbdc:	f000 80af 	beq.w	801bd3e <_dtoa_r+0x8be>
 801bbe0:	2e00      	cmp	r6, #0
 801bbe2:	dd13      	ble.n	801bc0c <_dtoa_r+0x78c>
 801bbe4:	4639      	mov	r1, r7
 801bbe6:	4632      	mov	r2, r6
 801bbe8:	4620      	mov	r0, r4
 801bbea:	f000 ffd5 	bl	801cb98 <__pow5mult>
 801bbee:	ee18 2a10 	vmov	r2, s16
 801bbf2:	4601      	mov	r1, r0
 801bbf4:	4607      	mov	r7, r0
 801bbf6:	4620      	mov	r0, r4
 801bbf8:	f000 ff24 	bl	801ca44 <__multiply>
 801bbfc:	ee18 1a10 	vmov	r1, s16
 801bc00:	4680      	mov	r8, r0
 801bc02:	4620      	mov	r0, r4
 801bc04:	f000 fe06 	bl	801c814 <_Bfree>
 801bc08:	ee08 8a10 	vmov	s16, r8
 801bc0c:	9b07      	ldr	r3, [sp, #28]
 801bc0e:	1b9a      	subs	r2, r3, r6
 801bc10:	d006      	beq.n	801bc20 <_dtoa_r+0x7a0>
 801bc12:	ee18 1a10 	vmov	r1, s16
 801bc16:	4620      	mov	r0, r4
 801bc18:	f000 ffbe 	bl	801cb98 <__pow5mult>
 801bc1c:	ee08 0a10 	vmov	s16, r0
 801bc20:	2101      	movs	r1, #1
 801bc22:	4620      	mov	r0, r4
 801bc24:	f000 fef8 	bl	801ca18 <__i2b>
 801bc28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bc2a:	2b00      	cmp	r3, #0
 801bc2c:	4606      	mov	r6, r0
 801bc2e:	f340 8088 	ble.w	801bd42 <_dtoa_r+0x8c2>
 801bc32:	461a      	mov	r2, r3
 801bc34:	4601      	mov	r1, r0
 801bc36:	4620      	mov	r0, r4
 801bc38:	f000 ffae 	bl	801cb98 <__pow5mult>
 801bc3c:	9b06      	ldr	r3, [sp, #24]
 801bc3e:	2b01      	cmp	r3, #1
 801bc40:	4606      	mov	r6, r0
 801bc42:	f340 8081 	ble.w	801bd48 <_dtoa_r+0x8c8>
 801bc46:	f04f 0800 	mov.w	r8, #0
 801bc4a:	6933      	ldr	r3, [r6, #16]
 801bc4c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801bc50:	6918      	ldr	r0, [r3, #16]
 801bc52:	f000 fe91 	bl	801c978 <__hi0bits>
 801bc56:	f1c0 0020 	rsb	r0, r0, #32
 801bc5a:	9b05      	ldr	r3, [sp, #20]
 801bc5c:	4418      	add	r0, r3
 801bc5e:	f010 001f 	ands.w	r0, r0, #31
 801bc62:	f000 8092 	beq.w	801bd8a <_dtoa_r+0x90a>
 801bc66:	f1c0 0320 	rsb	r3, r0, #32
 801bc6a:	2b04      	cmp	r3, #4
 801bc6c:	f340 808a 	ble.w	801bd84 <_dtoa_r+0x904>
 801bc70:	f1c0 001c 	rsb	r0, r0, #28
 801bc74:	9b04      	ldr	r3, [sp, #16]
 801bc76:	4403      	add	r3, r0
 801bc78:	9304      	str	r3, [sp, #16]
 801bc7a:	9b05      	ldr	r3, [sp, #20]
 801bc7c:	4403      	add	r3, r0
 801bc7e:	4405      	add	r5, r0
 801bc80:	9305      	str	r3, [sp, #20]
 801bc82:	9b04      	ldr	r3, [sp, #16]
 801bc84:	2b00      	cmp	r3, #0
 801bc86:	dd07      	ble.n	801bc98 <_dtoa_r+0x818>
 801bc88:	ee18 1a10 	vmov	r1, s16
 801bc8c:	461a      	mov	r2, r3
 801bc8e:	4620      	mov	r0, r4
 801bc90:	f000 ffdc 	bl	801cc4c <__lshift>
 801bc94:	ee08 0a10 	vmov	s16, r0
 801bc98:	9b05      	ldr	r3, [sp, #20]
 801bc9a:	2b00      	cmp	r3, #0
 801bc9c:	dd05      	ble.n	801bcaa <_dtoa_r+0x82a>
 801bc9e:	4631      	mov	r1, r6
 801bca0:	461a      	mov	r2, r3
 801bca2:	4620      	mov	r0, r4
 801bca4:	f000 ffd2 	bl	801cc4c <__lshift>
 801bca8:	4606      	mov	r6, r0
 801bcaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bcac:	2b00      	cmp	r3, #0
 801bcae:	d06e      	beq.n	801bd8e <_dtoa_r+0x90e>
 801bcb0:	ee18 0a10 	vmov	r0, s16
 801bcb4:	4631      	mov	r1, r6
 801bcb6:	f001 f839 	bl	801cd2c <__mcmp>
 801bcba:	2800      	cmp	r0, #0
 801bcbc:	da67      	bge.n	801bd8e <_dtoa_r+0x90e>
 801bcbe:	9b00      	ldr	r3, [sp, #0]
 801bcc0:	3b01      	subs	r3, #1
 801bcc2:	ee18 1a10 	vmov	r1, s16
 801bcc6:	9300      	str	r3, [sp, #0]
 801bcc8:	220a      	movs	r2, #10
 801bcca:	2300      	movs	r3, #0
 801bccc:	4620      	mov	r0, r4
 801bcce:	f000 fdc3 	bl	801c858 <__multadd>
 801bcd2:	9b08      	ldr	r3, [sp, #32]
 801bcd4:	ee08 0a10 	vmov	s16, r0
 801bcd8:	2b00      	cmp	r3, #0
 801bcda:	f000 81b1 	beq.w	801c040 <_dtoa_r+0xbc0>
 801bcde:	2300      	movs	r3, #0
 801bce0:	4639      	mov	r1, r7
 801bce2:	220a      	movs	r2, #10
 801bce4:	4620      	mov	r0, r4
 801bce6:	f000 fdb7 	bl	801c858 <__multadd>
 801bcea:	9b02      	ldr	r3, [sp, #8]
 801bcec:	2b00      	cmp	r3, #0
 801bcee:	4607      	mov	r7, r0
 801bcf0:	f300 808e 	bgt.w	801be10 <_dtoa_r+0x990>
 801bcf4:	9b06      	ldr	r3, [sp, #24]
 801bcf6:	2b02      	cmp	r3, #2
 801bcf8:	dc51      	bgt.n	801bd9e <_dtoa_r+0x91e>
 801bcfa:	e089      	b.n	801be10 <_dtoa_r+0x990>
 801bcfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bcfe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801bd02:	e74b      	b.n	801bb9c <_dtoa_r+0x71c>
 801bd04:	9b03      	ldr	r3, [sp, #12]
 801bd06:	1e5e      	subs	r6, r3, #1
 801bd08:	9b07      	ldr	r3, [sp, #28]
 801bd0a:	42b3      	cmp	r3, r6
 801bd0c:	bfbf      	itttt	lt
 801bd0e:	9b07      	ldrlt	r3, [sp, #28]
 801bd10:	9607      	strlt	r6, [sp, #28]
 801bd12:	1af2      	sublt	r2, r6, r3
 801bd14:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801bd16:	bfb6      	itet	lt
 801bd18:	189b      	addlt	r3, r3, r2
 801bd1a:	1b9e      	subge	r6, r3, r6
 801bd1c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801bd1e:	9b03      	ldr	r3, [sp, #12]
 801bd20:	bfb8      	it	lt
 801bd22:	2600      	movlt	r6, #0
 801bd24:	2b00      	cmp	r3, #0
 801bd26:	bfb7      	itett	lt
 801bd28:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801bd2c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801bd30:	1a9d      	sublt	r5, r3, r2
 801bd32:	2300      	movlt	r3, #0
 801bd34:	e734      	b.n	801bba0 <_dtoa_r+0x720>
 801bd36:	9e07      	ldr	r6, [sp, #28]
 801bd38:	9d04      	ldr	r5, [sp, #16]
 801bd3a:	9f08      	ldr	r7, [sp, #32]
 801bd3c:	e73b      	b.n	801bbb6 <_dtoa_r+0x736>
 801bd3e:	9a07      	ldr	r2, [sp, #28]
 801bd40:	e767      	b.n	801bc12 <_dtoa_r+0x792>
 801bd42:	9b06      	ldr	r3, [sp, #24]
 801bd44:	2b01      	cmp	r3, #1
 801bd46:	dc18      	bgt.n	801bd7a <_dtoa_r+0x8fa>
 801bd48:	f1ba 0f00 	cmp.w	sl, #0
 801bd4c:	d115      	bne.n	801bd7a <_dtoa_r+0x8fa>
 801bd4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801bd52:	b993      	cbnz	r3, 801bd7a <_dtoa_r+0x8fa>
 801bd54:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801bd58:	0d1b      	lsrs	r3, r3, #20
 801bd5a:	051b      	lsls	r3, r3, #20
 801bd5c:	b183      	cbz	r3, 801bd80 <_dtoa_r+0x900>
 801bd5e:	9b04      	ldr	r3, [sp, #16]
 801bd60:	3301      	adds	r3, #1
 801bd62:	9304      	str	r3, [sp, #16]
 801bd64:	9b05      	ldr	r3, [sp, #20]
 801bd66:	3301      	adds	r3, #1
 801bd68:	9305      	str	r3, [sp, #20]
 801bd6a:	f04f 0801 	mov.w	r8, #1
 801bd6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bd70:	2b00      	cmp	r3, #0
 801bd72:	f47f af6a 	bne.w	801bc4a <_dtoa_r+0x7ca>
 801bd76:	2001      	movs	r0, #1
 801bd78:	e76f      	b.n	801bc5a <_dtoa_r+0x7da>
 801bd7a:	f04f 0800 	mov.w	r8, #0
 801bd7e:	e7f6      	b.n	801bd6e <_dtoa_r+0x8ee>
 801bd80:	4698      	mov	r8, r3
 801bd82:	e7f4      	b.n	801bd6e <_dtoa_r+0x8ee>
 801bd84:	f43f af7d 	beq.w	801bc82 <_dtoa_r+0x802>
 801bd88:	4618      	mov	r0, r3
 801bd8a:	301c      	adds	r0, #28
 801bd8c:	e772      	b.n	801bc74 <_dtoa_r+0x7f4>
 801bd8e:	9b03      	ldr	r3, [sp, #12]
 801bd90:	2b00      	cmp	r3, #0
 801bd92:	dc37      	bgt.n	801be04 <_dtoa_r+0x984>
 801bd94:	9b06      	ldr	r3, [sp, #24]
 801bd96:	2b02      	cmp	r3, #2
 801bd98:	dd34      	ble.n	801be04 <_dtoa_r+0x984>
 801bd9a:	9b03      	ldr	r3, [sp, #12]
 801bd9c:	9302      	str	r3, [sp, #8]
 801bd9e:	9b02      	ldr	r3, [sp, #8]
 801bda0:	b96b      	cbnz	r3, 801bdbe <_dtoa_r+0x93e>
 801bda2:	4631      	mov	r1, r6
 801bda4:	2205      	movs	r2, #5
 801bda6:	4620      	mov	r0, r4
 801bda8:	f000 fd56 	bl	801c858 <__multadd>
 801bdac:	4601      	mov	r1, r0
 801bdae:	4606      	mov	r6, r0
 801bdb0:	ee18 0a10 	vmov	r0, s16
 801bdb4:	f000 ffba 	bl	801cd2c <__mcmp>
 801bdb8:	2800      	cmp	r0, #0
 801bdba:	f73f adbb 	bgt.w	801b934 <_dtoa_r+0x4b4>
 801bdbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bdc0:	9d01      	ldr	r5, [sp, #4]
 801bdc2:	43db      	mvns	r3, r3
 801bdc4:	9300      	str	r3, [sp, #0]
 801bdc6:	f04f 0800 	mov.w	r8, #0
 801bdca:	4631      	mov	r1, r6
 801bdcc:	4620      	mov	r0, r4
 801bdce:	f000 fd21 	bl	801c814 <_Bfree>
 801bdd2:	2f00      	cmp	r7, #0
 801bdd4:	f43f aea4 	beq.w	801bb20 <_dtoa_r+0x6a0>
 801bdd8:	f1b8 0f00 	cmp.w	r8, #0
 801bddc:	d005      	beq.n	801bdea <_dtoa_r+0x96a>
 801bdde:	45b8      	cmp	r8, r7
 801bde0:	d003      	beq.n	801bdea <_dtoa_r+0x96a>
 801bde2:	4641      	mov	r1, r8
 801bde4:	4620      	mov	r0, r4
 801bde6:	f000 fd15 	bl	801c814 <_Bfree>
 801bdea:	4639      	mov	r1, r7
 801bdec:	4620      	mov	r0, r4
 801bdee:	f000 fd11 	bl	801c814 <_Bfree>
 801bdf2:	e695      	b.n	801bb20 <_dtoa_r+0x6a0>
 801bdf4:	2600      	movs	r6, #0
 801bdf6:	4637      	mov	r7, r6
 801bdf8:	e7e1      	b.n	801bdbe <_dtoa_r+0x93e>
 801bdfa:	9700      	str	r7, [sp, #0]
 801bdfc:	4637      	mov	r7, r6
 801bdfe:	e599      	b.n	801b934 <_dtoa_r+0x4b4>
 801be00:	40240000 	.word	0x40240000
 801be04:	9b08      	ldr	r3, [sp, #32]
 801be06:	2b00      	cmp	r3, #0
 801be08:	f000 80ca 	beq.w	801bfa0 <_dtoa_r+0xb20>
 801be0c:	9b03      	ldr	r3, [sp, #12]
 801be0e:	9302      	str	r3, [sp, #8]
 801be10:	2d00      	cmp	r5, #0
 801be12:	dd05      	ble.n	801be20 <_dtoa_r+0x9a0>
 801be14:	4639      	mov	r1, r7
 801be16:	462a      	mov	r2, r5
 801be18:	4620      	mov	r0, r4
 801be1a:	f000 ff17 	bl	801cc4c <__lshift>
 801be1e:	4607      	mov	r7, r0
 801be20:	f1b8 0f00 	cmp.w	r8, #0
 801be24:	d05b      	beq.n	801bede <_dtoa_r+0xa5e>
 801be26:	6879      	ldr	r1, [r7, #4]
 801be28:	4620      	mov	r0, r4
 801be2a:	f000 fcb3 	bl	801c794 <_Balloc>
 801be2e:	4605      	mov	r5, r0
 801be30:	b928      	cbnz	r0, 801be3e <_dtoa_r+0x9be>
 801be32:	4b87      	ldr	r3, [pc, #540]	; (801c050 <_dtoa_r+0xbd0>)
 801be34:	4602      	mov	r2, r0
 801be36:	f240 21ea 	movw	r1, #746	; 0x2ea
 801be3a:	f7ff bb3b 	b.w	801b4b4 <_dtoa_r+0x34>
 801be3e:	693a      	ldr	r2, [r7, #16]
 801be40:	3202      	adds	r2, #2
 801be42:	0092      	lsls	r2, r2, #2
 801be44:	f107 010c 	add.w	r1, r7, #12
 801be48:	300c      	adds	r0, #12
 801be4a:	f000 fc95 	bl	801c778 <memcpy>
 801be4e:	2201      	movs	r2, #1
 801be50:	4629      	mov	r1, r5
 801be52:	4620      	mov	r0, r4
 801be54:	f000 fefa 	bl	801cc4c <__lshift>
 801be58:	9b01      	ldr	r3, [sp, #4]
 801be5a:	f103 0901 	add.w	r9, r3, #1
 801be5e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801be62:	4413      	add	r3, r2
 801be64:	9305      	str	r3, [sp, #20]
 801be66:	f00a 0301 	and.w	r3, sl, #1
 801be6a:	46b8      	mov	r8, r7
 801be6c:	9304      	str	r3, [sp, #16]
 801be6e:	4607      	mov	r7, r0
 801be70:	4631      	mov	r1, r6
 801be72:	ee18 0a10 	vmov	r0, s16
 801be76:	f7ff fa75 	bl	801b364 <quorem>
 801be7a:	4641      	mov	r1, r8
 801be7c:	9002      	str	r0, [sp, #8]
 801be7e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801be82:	ee18 0a10 	vmov	r0, s16
 801be86:	f000 ff51 	bl	801cd2c <__mcmp>
 801be8a:	463a      	mov	r2, r7
 801be8c:	9003      	str	r0, [sp, #12]
 801be8e:	4631      	mov	r1, r6
 801be90:	4620      	mov	r0, r4
 801be92:	f000 ff67 	bl	801cd64 <__mdiff>
 801be96:	68c2      	ldr	r2, [r0, #12]
 801be98:	f109 3bff 	add.w	fp, r9, #4294967295
 801be9c:	4605      	mov	r5, r0
 801be9e:	bb02      	cbnz	r2, 801bee2 <_dtoa_r+0xa62>
 801bea0:	4601      	mov	r1, r0
 801bea2:	ee18 0a10 	vmov	r0, s16
 801bea6:	f000 ff41 	bl	801cd2c <__mcmp>
 801beaa:	4602      	mov	r2, r0
 801beac:	4629      	mov	r1, r5
 801beae:	4620      	mov	r0, r4
 801beb0:	9207      	str	r2, [sp, #28]
 801beb2:	f000 fcaf 	bl	801c814 <_Bfree>
 801beb6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801beba:	ea43 0102 	orr.w	r1, r3, r2
 801bebe:	9b04      	ldr	r3, [sp, #16]
 801bec0:	430b      	orrs	r3, r1
 801bec2:	464d      	mov	r5, r9
 801bec4:	d10f      	bne.n	801bee6 <_dtoa_r+0xa66>
 801bec6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801beca:	d02a      	beq.n	801bf22 <_dtoa_r+0xaa2>
 801becc:	9b03      	ldr	r3, [sp, #12]
 801bece:	2b00      	cmp	r3, #0
 801bed0:	dd02      	ble.n	801bed8 <_dtoa_r+0xa58>
 801bed2:	9b02      	ldr	r3, [sp, #8]
 801bed4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801bed8:	f88b a000 	strb.w	sl, [fp]
 801bedc:	e775      	b.n	801bdca <_dtoa_r+0x94a>
 801bede:	4638      	mov	r0, r7
 801bee0:	e7ba      	b.n	801be58 <_dtoa_r+0x9d8>
 801bee2:	2201      	movs	r2, #1
 801bee4:	e7e2      	b.n	801beac <_dtoa_r+0xa2c>
 801bee6:	9b03      	ldr	r3, [sp, #12]
 801bee8:	2b00      	cmp	r3, #0
 801beea:	db04      	blt.n	801bef6 <_dtoa_r+0xa76>
 801beec:	9906      	ldr	r1, [sp, #24]
 801beee:	430b      	orrs	r3, r1
 801bef0:	9904      	ldr	r1, [sp, #16]
 801bef2:	430b      	orrs	r3, r1
 801bef4:	d122      	bne.n	801bf3c <_dtoa_r+0xabc>
 801bef6:	2a00      	cmp	r2, #0
 801bef8:	ddee      	ble.n	801bed8 <_dtoa_r+0xa58>
 801befa:	ee18 1a10 	vmov	r1, s16
 801befe:	2201      	movs	r2, #1
 801bf00:	4620      	mov	r0, r4
 801bf02:	f000 fea3 	bl	801cc4c <__lshift>
 801bf06:	4631      	mov	r1, r6
 801bf08:	ee08 0a10 	vmov	s16, r0
 801bf0c:	f000 ff0e 	bl	801cd2c <__mcmp>
 801bf10:	2800      	cmp	r0, #0
 801bf12:	dc03      	bgt.n	801bf1c <_dtoa_r+0xa9c>
 801bf14:	d1e0      	bne.n	801bed8 <_dtoa_r+0xa58>
 801bf16:	f01a 0f01 	tst.w	sl, #1
 801bf1a:	d0dd      	beq.n	801bed8 <_dtoa_r+0xa58>
 801bf1c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801bf20:	d1d7      	bne.n	801bed2 <_dtoa_r+0xa52>
 801bf22:	2339      	movs	r3, #57	; 0x39
 801bf24:	f88b 3000 	strb.w	r3, [fp]
 801bf28:	462b      	mov	r3, r5
 801bf2a:	461d      	mov	r5, r3
 801bf2c:	3b01      	subs	r3, #1
 801bf2e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801bf32:	2a39      	cmp	r2, #57	; 0x39
 801bf34:	d071      	beq.n	801c01a <_dtoa_r+0xb9a>
 801bf36:	3201      	adds	r2, #1
 801bf38:	701a      	strb	r2, [r3, #0]
 801bf3a:	e746      	b.n	801bdca <_dtoa_r+0x94a>
 801bf3c:	2a00      	cmp	r2, #0
 801bf3e:	dd07      	ble.n	801bf50 <_dtoa_r+0xad0>
 801bf40:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801bf44:	d0ed      	beq.n	801bf22 <_dtoa_r+0xaa2>
 801bf46:	f10a 0301 	add.w	r3, sl, #1
 801bf4a:	f88b 3000 	strb.w	r3, [fp]
 801bf4e:	e73c      	b.n	801bdca <_dtoa_r+0x94a>
 801bf50:	9b05      	ldr	r3, [sp, #20]
 801bf52:	f809 ac01 	strb.w	sl, [r9, #-1]
 801bf56:	4599      	cmp	r9, r3
 801bf58:	d047      	beq.n	801bfea <_dtoa_r+0xb6a>
 801bf5a:	ee18 1a10 	vmov	r1, s16
 801bf5e:	2300      	movs	r3, #0
 801bf60:	220a      	movs	r2, #10
 801bf62:	4620      	mov	r0, r4
 801bf64:	f000 fc78 	bl	801c858 <__multadd>
 801bf68:	45b8      	cmp	r8, r7
 801bf6a:	ee08 0a10 	vmov	s16, r0
 801bf6e:	f04f 0300 	mov.w	r3, #0
 801bf72:	f04f 020a 	mov.w	r2, #10
 801bf76:	4641      	mov	r1, r8
 801bf78:	4620      	mov	r0, r4
 801bf7a:	d106      	bne.n	801bf8a <_dtoa_r+0xb0a>
 801bf7c:	f000 fc6c 	bl	801c858 <__multadd>
 801bf80:	4680      	mov	r8, r0
 801bf82:	4607      	mov	r7, r0
 801bf84:	f109 0901 	add.w	r9, r9, #1
 801bf88:	e772      	b.n	801be70 <_dtoa_r+0x9f0>
 801bf8a:	f000 fc65 	bl	801c858 <__multadd>
 801bf8e:	4639      	mov	r1, r7
 801bf90:	4680      	mov	r8, r0
 801bf92:	2300      	movs	r3, #0
 801bf94:	220a      	movs	r2, #10
 801bf96:	4620      	mov	r0, r4
 801bf98:	f000 fc5e 	bl	801c858 <__multadd>
 801bf9c:	4607      	mov	r7, r0
 801bf9e:	e7f1      	b.n	801bf84 <_dtoa_r+0xb04>
 801bfa0:	9b03      	ldr	r3, [sp, #12]
 801bfa2:	9302      	str	r3, [sp, #8]
 801bfa4:	9d01      	ldr	r5, [sp, #4]
 801bfa6:	ee18 0a10 	vmov	r0, s16
 801bfaa:	4631      	mov	r1, r6
 801bfac:	f7ff f9da 	bl	801b364 <quorem>
 801bfb0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801bfb4:	9b01      	ldr	r3, [sp, #4]
 801bfb6:	f805 ab01 	strb.w	sl, [r5], #1
 801bfba:	1aea      	subs	r2, r5, r3
 801bfbc:	9b02      	ldr	r3, [sp, #8]
 801bfbe:	4293      	cmp	r3, r2
 801bfc0:	dd09      	ble.n	801bfd6 <_dtoa_r+0xb56>
 801bfc2:	ee18 1a10 	vmov	r1, s16
 801bfc6:	2300      	movs	r3, #0
 801bfc8:	220a      	movs	r2, #10
 801bfca:	4620      	mov	r0, r4
 801bfcc:	f000 fc44 	bl	801c858 <__multadd>
 801bfd0:	ee08 0a10 	vmov	s16, r0
 801bfd4:	e7e7      	b.n	801bfa6 <_dtoa_r+0xb26>
 801bfd6:	9b02      	ldr	r3, [sp, #8]
 801bfd8:	2b00      	cmp	r3, #0
 801bfda:	bfc8      	it	gt
 801bfdc:	461d      	movgt	r5, r3
 801bfde:	9b01      	ldr	r3, [sp, #4]
 801bfe0:	bfd8      	it	le
 801bfe2:	2501      	movle	r5, #1
 801bfe4:	441d      	add	r5, r3
 801bfe6:	f04f 0800 	mov.w	r8, #0
 801bfea:	ee18 1a10 	vmov	r1, s16
 801bfee:	2201      	movs	r2, #1
 801bff0:	4620      	mov	r0, r4
 801bff2:	f000 fe2b 	bl	801cc4c <__lshift>
 801bff6:	4631      	mov	r1, r6
 801bff8:	ee08 0a10 	vmov	s16, r0
 801bffc:	f000 fe96 	bl	801cd2c <__mcmp>
 801c000:	2800      	cmp	r0, #0
 801c002:	dc91      	bgt.n	801bf28 <_dtoa_r+0xaa8>
 801c004:	d102      	bne.n	801c00c <_dtoa_r+0xb8c>
 801c006:	f01a 0f01 	tst.w	sl, #1
 801c00a:	d18d      	bne.n	801bf28 <_dtoa_r+0xaa8>
 801c00c:	462b      	mov	r3, r5
 801c00e:	461d      	mov	r5, r3
 801c010:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c014:	2a30      	cmp	r2, #48	; 0x30
 801c016:	d0fa      	beq.n	801c00e <_dtoa_r+0xb8e>
 801c018:	e6d7      	b.n	801bdca <_dtoa_r+0x94a>
 801c01a:	9a01      	ldr	r2, [sp, #4]
 801c01c:	429a      	cmp	r2, r3
 801c01e:	d184      	bne.n	801bf2a <_dtoa_r+0xaaa>
 801c020:	9b00      	ldr	r3, [sp, #0]
 801c022:	3301      	adds	r3, #1
 801c024:	9300      	str	r3, [sp, #0]
 801c026:	2331      	movs	r3, #49	; 0x31
 801c028:	7013      	strb	r3, [r2, #0]
 801c02a:	e6ce      	b.n	801bdca <_dtoa_r+0x94a>
 801c02c:	4b09      	ldr	r3, [pc, #36]	; (801c054 <_dtoa_r+0xbd4>)
 801c02e:	f7ff ba95 	b.w	801b55c <_dtoa_r+0xdc>
 801c032:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c034:	2b00      	cmp	r3, #0
 801c036:	f47f aa6e 	bne.w	801b516 <_dtoa_r+0x96>
 801c03a:	4b07      	ldr	r3, [pc, #28]	; (801c058 <_dtoa_r+0xbd8>)
 801c03c:	f7ff ba8e 	b.w	801b55c <_dtoa_r+0xdc>
 801c040:	9b02      	ldr	r3, [sp, #8]
 801c042:	2b00      	cmp	r3, #0
 801c044:	dcae      	bgt.n	801bfa4 <_dtoa_r+0xb24>
 801c046:	9b06      	ldr	r3, [sp, #24]
 801c048:	2b02      	cmp	r3, #2
 801c04a:	f73f aea8 	bgt.w	801bd9e <_dtoa_r+0x91e>
 801c04e:	e7a9      	b.n	801bfa4 <_dtoa_r+0xb24>
 801c050:	080523c0 	.word	0x080523c0
 801c054:	080521c4 	.word	0x080521c4
 801c058:	08052341 	.word	0x08052341

0801c05c <rshift>:
 801c05c:	6903      	ldr	r3, [r0, #16]
 801c05e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801c062:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c066:	ea4f 1261 	mov.w	r2, r1, asr #5
 801c06a:	f100 0414 	add.w	r4, r0, #20
 801c06e:	dd45      	ble.n	801c0fc <rshift+0xa0>
 801c070:	f011 011f 	ands.w	r1, r1, #31
 801c074:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801c078:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801c07c:	d10c      	bne.n	801c098 <rshift+0x3c>
 801c07e:	f100 0710 	add.w	r7, r0, #16
 801c082:	4629      	mov	r1, r5
 801c084:	42b1      	cmp	r1, r6
 801c086:	d334      	bcc.n	801c0f2 <rshift+0x96>
 801c088:	1a9b      	subs	r3, r3, r2
 801c08a:	009b      	lsls	r3, r3, #2
 801c08c:	1eea      	subs	r2, r5, #3
 801c08e:	4296      	cmp	r6, r2
 801c090:	bf38      	it	cc
 801c092:	2300      	movcc	r3, #0
 801c094:	4423      	add	r3, r4
 801c096:	e015      	b.n	801c0c4 <rshift+0x68>
 801c098:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801c09c:	f1c1 0820 	rsb	r8, r1, #32
 801c0a0:	40cf      	lsrs	r7, r1
 801c0a2:	f105 0e04 	add.w	lr, r5, #4
 801c0a6:	46a1      	mov	r9, r4
 801c0a8:	4576      	cmp	r6, lr
 801c0aa:	46f4      	mov	ip, lr
 801c0ac:	d815      	bhi.n	801c0da <rshift+0x7e>
 801c0ae:	1a9a      	subs	r2, r3, r2
 801c0b0:	0092      	lsls	r2, r2, #2
 801c0b2:	3a04      	subs	r2, #4
 801c0b4:	3501      	adds	r5, #1
 801c0b6:	42ae      	cmp	r6, r5
 801c0b8:	bf38      	it	cc
 801c0ba:	2200      	movcc	r2, #0
 801c0bc:	18a3      	adds	r3, r4, r2
 801c0be:	50a7      	str	r7, [r4, r2]
 801c0c0:	b107      	cbz	r7, 801c0c4 <rshift+0x68>
 801c0c2:	3304      	adds	r3, #4
 801c0c4:	1b1a      	subs	r2, r3, r4
 801c0c6:	42a3      	cmp	r3, r4
 801c0c8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801c0cc:	bf08      	it	eq
 801c0ce:	2300      	moveq	r3, #0
 801c0d0:	6102      	str	r2, [r0, #16]
 801c0d2:	bf08      	it	eq
 801c0d4:	6143      	streq	r3, [r0, #20]
 801c0d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c0da:	f8dc c000 	ldr.w	ip, [ip]
 801c0de:	fa0c fc08 	lsl.w	ip, ip, r8
 801c0e2:	ea4c 0707 	orr.w	r7, ip, r7
 801c0e6:	f849 7b04 	str.w	r7, [r9], #4
 801c0ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 801c0ee:	40cf      	lsrs	r7, r1
 801c0f0:	e7da      	b.n	801c0a8 <rshift+0x4c>
 801c0f2:	f851 cb04 	ldr.w	ip, [r1], #4
 801c0f6:	f847 cf04 	str.w	ip, [r7, #4]!
 801c0fa:	e7c3      	b.n	801c084 <rshift+0x28>
 801c0fc:	4623      	mov	r3, r4
 801c0fe:	e7e1      	b.n	801c0c4 <rshift+0x68>

0801c100 <__hexdig_fun>:
 801c100:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801c104:	2b09      	cmp	r3, #9
 801c106:	d802      	bhi.n	801c10e <__hexdig_fun+0xe>
 801c108:	3820      	subs	r0, #32
 801c10a:	b2c0      	uxtb	r0, r0
 801c10c:	4770      	bx	lr
 801c10e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801c112:	2b05      	cmp	r3, #5
 801c114:	d801      	bhi.n	801c11a <__hexdig_fun+0x1a>
 801c116:	3847      	subs	r0, #71	; 0x47
 801c118:	e7f7      	b.n	801c10a <__hexdig_fun+0xa>
 801c11a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801c11e:	2b05      	cmp	r3, #5
 801c120:	d801      	bhi.n	801c126 <__hexdig_fun+0x26>
 801c122:	3827      	subs	r0, #39	; 0x27
 801c124:	e7f1      	b.n	801c10a <__hexdig_fun+0xa>
 801c126:	2000      	movs	r0, #0
 801c128:	4770      	bx	lr
	...

0801c12c <__gethex>:
 801c12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c130:	ed2d 8b02 	vpush	{d8}
 801c134:	b089      	sub	sp, #36	; 0x24
 801c136:	ee08 0a10 	vmov	s16, r0
 801c13a:	9304      	str	r3, [sp, #16]
 801c13c:	4bb4      	ldr	r3, [pc, #720]	; (801c410 <__gethex+0x2e4>)
 801c13e:	681b      	ldr	r3, [r3, #0]
 801c140:	9301      	str	r3, [sp, #4]
 801c142:	4618      	mov	r0, r3
 801c144:	468b      	mov	fp, r1
 801c146:	4690      	mov	r8, r2
 801c148:	f7fc fc3c 	bl	80189c4 <strlen>
 801c14c:	9b01      	ldr	r3, [sp, #4]
 801c14e:	f8db 2000 	ldr.w	r2, [fp]
 801c152:	4403      	add	r3, r0
 801c154:	4682      	mov	sl, r0
 801c156:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801c15a:	9305      	str	r3, [sp, #20]
 801c15c:	1c93      	adds	r3, r2, #2
 801c15e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801c162:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801c166:	32fe      	adds	r2, #254	; 0xfe
 801c168:	18d1      	adds	r1, r2, r3
 801c16a:	461f      	mov	r7, r3
 801c16c:	f813 0b01 	ldrb.w	r0, [r3], #1
 801c170:	9100      	str	r1, [sp, #0]
 801c172:	2830      	cmp	r0, #48	; 0x30
 801c174:	d0f8      	beq.n	801c168 <__gethex+0x3c>
 801c176:	f7ff ffc3 	bl	801c100 <__hexdig_fun>
 801c17a:	4604      	mov	r4, r0
 801c17c:	2800      	cmp	r0, #0
 801c17e:	d13a      	bne.n	801c1f6 <__gethex+0xca>
 801c180:	9901      	ldr	r1, [sp, #4]
 801c182:	4652      	mov	r2, sl
 801c184:	4638      	mov	r0, r7
 801c186:	f001 fa33 	bl	801d5f0 <strncmp>
 801c18a:	4605      	mov	r5, r0
 801c18c:	2800      	cmp	r0, #0
 801c18e:	d168      	bne.n	801c262 <__gethex+0x136>
 801c190:	f817 000a 	ldrb.w	r0, [r7, sl]
 801c194:	eb07 060a 	add.w	r6, r7, sl
 801c198:	f7ff ffb2 	bl	801c100 <__hexdig_fun>
 801c19c:	2800      	cmp	r0, #0
 801c19e:	d062      	beq.n	801c266 <__gethex+0x13a>
 801c1a0:	4633      	mov	r3, r6
 801c1a2:	7818      	ldrb	r0, [r3, #0]
 801c1a4:	2830      	cmp	r0, #48	; 0x30
 801c1a6:	461f      	mov	r7, r3
 801c1a8:	f103 0301 	add.w	r3, r3, #1
 801c1ac:	d0f9      	beq.n	801c1a2 <__gethex+0x76>
 801c1ae:	f7ff ffa7 	bl	801c100 <__hexdig_fun>
 801c1b2:	2301      	movs	r3, #1
 801c1b4:	fab0 f480 	clz	r4, r0
 801c1b8:	0964      	lsrs	r4, r4, #5
 801c1ba:	4635      	mov	r5, r6
 801c1bc:	9300      	str	r3, [sp, #0]
 801c1be:	463a      	mov	r2, r7
 801c1c0:	4616      	mov	r6, r2
 801c1c2:	3201      	adds	r2, #1
 801c1c4:	7830      	ldrb	r0, [r6, #0]
 801c1c6:	f7ff ff9b 	bl	801c100 <__hexdig_fun>
 801c1ca:	2800      	cmp	r0, #0
 801c1cc:	d1f8      	bne.n	801c1c0 <__gethex+0x94>
 801c1ce:	9901      	ldr	r1, [sp, #4]
 801c1d0:	4652      	mov	r2, sl
 801c1d2:	4630      	mov	r0, r6
 801c1d4:	f001 fa0c 	bl	801d5f0 <strncmp>
 801c1d8:	b980      	cbnz	r0, 801c1fc <__gethex+0xd0>
 801c1da:	b94d      	cbnz	r5, 801c1f0 <__gethex+0xc4>
 801c1dc:	eb06 050a 	add.w	r5, r6, sl
 801c1e0:	462a      	mov	r2, r5
 801c1e2:	4616      	mov	r6, r2
 801c1e4:	3201      	adds	r2, #1
 801c1e6:	7830      	ldrb	r0, [r6, #0]
 801c1e8:	f7ff ff8a 	bl	801c100 <__hexdig_fun>
 801c1ec:	2800      	cmp	r0, #0
 801c1ee:	d1f8      	bne.n	801c1e2 <__gethex+0xb6>
 801c1f0:	1bad      	subs	r5, r5, r6
 801c1f2:	00ad      	lsls	r5, r5, #2
 801c1f4:	e004      	b.n	801c200 <__gethex+0xd4>
 801c1f6:	2400      	movs	r4, #0
 801c1f8:	4625      	mov	r5, r4
 801c1fa:	e7e0      	b.n	801c1be <__gethex+0x92>
 801c1fc:	2d00      	cmp	r5, #0
 801c1fe:	d1f7      	bne.n	801c1f0 <__gethex+0xc4>
 801c200:	7833      	ldrb	r3, [r6, #0]
 801c202:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801c206:	2b50      	cmp	r3, #80	; 0x50
 801c208:	d13b      	bne.n	801c282 <__gethex+0x156>
 801c20a:	7873      	ldrb	r3, [r6, #1]
 801c20c:	2b2b      	cmp	r3, #43	; 0x2b
 801c20e:	d02c      	beq.n	801c26a <__gethex+0x13e>
 801c210:	2b2d      	cmp	r3, #45	; 0x2d
 801c212:	d02e      	beq.n	801c272 <__gethex+0x146>
 801c214:	1c71      	adds	r1, r6, #1
 801c216:	f04f 0900 	mov.w	r9, #0
 801c21a:	7808      	ldrb	r0, [r1, #0]
 801c21c:	f7ff ff70 	bl	801c100 <__hexdig_fun>
 801c220:	1e43      	subs	r3, r0, #1
 801c222:	b2db      	uxtb	r3, r3
 801c224:	2b18      	cmp	r3, #24
 801c226:	d82c      	bhi.n	801c282 <__gethex+0x156>
 801c228:	f1a0 0210 	sub.w	r2, r0, #16
 801c22c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801c230:	f7ff ff66 	bl	801c100 <__hexdig_fun>
 801c234:	1e43      	subs	r3, r0, #1
 801c236:	b2db      	uxtb	r3, r3
 801c238:	2b18      	cmp	r3, #24
 801c23a:	d91d      	bls.n	801c278 <__gethex+0x14c>
 801c23c:	f1b9 0f00 	cmp.w	r9, #0
 801c240:	d000      	beq.n	801c244 <__gethex+0x118>
 801c242:	4252      	negs	r2, r2
 801c244:	4415      	add	r5, r2
 801c246:	f8cb 1000 	str.w	r1, [fp]
 801c24a:	b1e4      	cbz	r4, 801c286 <__gethex+0x15a>
 801c24c:	9b00      	ldr	r3, [sp, #0]
 801c24e:	2b00      	cmp	r3, #0
 801c250:	bf14      	ite	ne
 801c252:	2700      	movne	r7, #0
 801c254:	2706      	moveq	r7, #6
 801c256:	4638      	mov	r0, r7
 801c258:	b009      	add	sp, #36	; 0x24
 801c25a:	ecbd 8b02 	vpop	{d8}
 801c25e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c262:	463e      	mov	r6, r7
 801c264:	4625      	mov	r5, r4
 801c266:	2401      	movs	r4, #1
 801c268:	e7ca      	b.n	801c200 <__gethex+0xd4>
 801c26a:	f04f 0900 	mov.w	r9, #0
 801c26e:	1cb1      	adds	r1, r6, #2
 801c270:	e7d3      	b.n	801c21a <__gethex+0xee>
 801c272:	f04f 0901 	mov.w	r9, #1
 801c276:	e7fa      	b.n	801c26e <__gethex+0x142>
 801c278:	230a      	movs	r3, #10
 801c27a:	fb03 0202 	mla	r2, r3, r2, r0
 801c27e:	3a10      	subs	r2, #16
 801c280:	e7d4      	b.n	801c22c <__gethex+0x100>
 801c282:	4631      	mov	r1, r6
 801c284:	e7df      	b.n	801c246 <__gethex+0x11a>
 801c286:	1bf3      	subs	r3, r6, r7
 801c288:	3b01      	subs	r3, #1
 801c28a:	4621      	mov	r1, r4
 801c28c:	2b07      	cmp	r3, #7
 801c28e:	dc0b      	bgt.n	801c2a8 <__gethex+0x17c>
 801c290:	ee18 0a10 	vmov	r0, s16
 801c294:	f000 fa7e 	bl	801c794 <_Balloc>
 801c298:	4604      	mov	r4, r0
 801c29a:	b940      	cbnz	r0, 801c2ae <__gethex+0x182>
 801c29c:	4b5d      	ldr	r3, [pc, #372]	; (801c414 <__gethex+0x2e8>)
 801c29e:	4602      	mov	r2, r0
 801c2a0:	21de      	movs	r1, #222	; 0xde
 801c2a2:	485d      	ldr	r0, [pc, #372]	; (801c418 <__gethex+0x2ec>)
 801c2a4:	f001 f9c6 	bl	801d634 <__assert_func>
 801c2a8:	3101      	adds	r1, #1
 801c2aa:	105b      	asrs	r3, r3, #1
 801c2ac:	e7ee      	b.n	801c28c <__gethex+0x160>
 801c2ae:	f100 0914 	add.w	r9, r0, #20
 801c2b2:	f04f 0b00 	mov.w	fp, #0
 801c2b6:	f1ca 0301 	rsb	r3, sl, #1
 801c2ba:	f8cd 9008 	str.w	r9, [sp, #8]
 801c2be:	f8cd b000 	str.w	fp, [sp]
 801c2c2:	9306      	str	r3, [sp, #24]
 801c2c4:	42b7      	cmp	r7, r6
 801c2c6:	d340      	bcc.n	801c34a <__gethex+0x21e>
 801c2c8:	9802      	ldr	r0, [sp, #8]
 801c2ca:	9b00      	ldr	r3, [sp, #0]
 801c2cc:	f840 3b04 	str.w	r3, [r0], #4
 801c2d0:	eba0 0009 	sub.w	r0, r0, r9
 801c2d4:	1080      	asrs	r0, r0, #2
 801c2d6:	0146      	lsls	r6, r0, #5
 801c2d8:	6120      	str	r0, [r4, #16]
 801c2da:	4618      	mov	r0, r3
 801c2dc:	f000 fb4c 	bl	801c978 <__hi0bits>
 801c2e0:	1a30      	subs	r0, r6, r0
 801c2e2:	f8d8 6000 	ldr.w	r6, [r8]
 801c2e6:	42b0      	cmp	r0, r6
 801c2e8:	dd63      	ble.n	801c3b2 <__gethex+0x286>
 801c2ea:	1b87      	subs	r7, r0, r6
 801c2ec:	4639      	mov	r1, r7
 801c2ee:	4620      	mov	r0, r4
 801c2f0:	f000 fef0 	bl	801d0d4 <__any_on>
 801c2f4:	4682      	mov	sl, r0
 801c2f6:	b1a8      	cbz	r0, 801c324 <__gethex+0x1f8>
 801c2f8:	1e7b      	subs	r3, r7, #1
 801c2fa:	1159      	asrs	r1, r3, #5
 801c2fc:	f003 021f 	and.w	r2, r3, #31
 801c300:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801c304:	f04f 0a01 	mov.w	sl, #1
 801c308:	fa0a f202 	lsl.w	r2, sl, r2
 801c30c:	420a      	tst	r2, r1
 801c30e:	d009      	beq.n	801c324 <__gethex+0x1f8>
 801c310:	4553      	cmp	r3, sl
 801c312:	dd05      	ble.n	801c320 <__gethex+0x1f4>
 801c314:	1eb9      	subs	r1, r7, #2
 801c316:	4620      	mov	r0, r4
 801c318:	f000 fedc 	bl	801d0d4 <__any_on>
 801c31c:	2800      	cmp	r0, #0
 801c31e:	d145      	bne.n	801c3ac <__gethex+0x280>
 801c320:	f04f 0a02 	mov.w	sl, #2
 801c324:	4639      	mov	r1, r7
 801c326:	4620      	mov	r0, r4
 801c328:	f7ff fe98 	bl	801c05c <rshift>
 801c32c:	443d      	add	r5, r7
 801c32e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c332:	42ab      	cmp	r3, r5
 801c334:	da4c      	bge.n	801c3d0 <__gethex+0x2a4>
 801c336:	ee18 0a10 	vmov	r0, s16
 801c33a:	4621      	mov	r1, r4
 801c33c:	f000 fa6a 	bl	801c814 <_Bfree>
 801c340:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c342:	2300      	movs	r3, #0
 801c344:	6013      	str	r3, [r2, #0]
 801c346:	27a3      	movs	r7, #163	; 0xa3
 801c348:	e785      	b.n	801c256 <__gethex+0x12a>
 801c34a:	1e73      	subs	r3, r6, #1
 801c34c:	9a05      	ldr	r2, [sp, #20]
 801c34e:	9303      	str	r3, [sp, #12]
 801c350:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801c354:	4293      	cmp	r3, r2
 801c356:	d019      	beq.n	801c38c <__gethex+0x260>
 801c358:	f1bb 0f20 	cmp.w	fp, #32
 801c35c:	d107      	bne.n	801c36e <__gethex+0x242>
 801c35e:	9b02      	ldr	r3, [sp, #8]
 801c360:	9a00      	ldr	r2, [sp, #0]
 801c362:	f843 2b04 	str.w	r2, [r3], #4
 801c366:	9302      	str	r3, [sp, #8]
 801c368:	2300      	movs	r3, #0
 801c36a:	9300      	str	r3, [sp, #0]
 801c36c:	469b      	mov	fp, r3
 801c36e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801c372:	f7ff fec5 	bl	801c100 <__hexdig_fun>
 801c376:	9b00      	ldr	r3, [sp, #0]
 801c378:	f000 000f 	and.w	r0, r0, #15
 801c37c:	fa00 f00b 	lsl.w	r0, r0, fp
 801c380:	4303      	orrs	r3, r0
 801c382:	9300      	str	r3, [sp, #0]
 801c384:	f10b 0b04 	add.w	fp, fp, #4
 801c388:	9b03      	ldr	r3, [sp, #12]
 801c38a:	e00d      	b.n	801c3a8 <__gethex+0x27c>
 801c38c:	9b03      	ldr	r3, [sp, #12]
 801c38e:	9a06      	ldr	r2, [sp, #24]
 801c390:	4413      	add	r3, r2
 801c392:	42bb      	cmp	r3, r7
 801c394:	d3e0      	bcc.n	801c358 <__gethex+0x22c>
 801c396:	4618      	mov	r0, r3
 801c398:	9901      	ldr	r1, [sp, #4]
 801c39a:	9307      	str	r3, [sp, #28]
 801c39c:	4652      	mov	r2, sl
 801c39e:	f001 f927 	bl	801d5f0 <strncmp>
 801c3a2:	9b07      	ldr	r3, [sp, #28]
 801c3a4:	2800      	cmp	r0, #0
 801c3a6:	d1d7      	bne.n	801c358 <__gethex+0x22c>
 801c3a8:	461e      	mov	r6, r3
 801c3aa:	e78b      	b.n	801c2c4 <__gethex+0x198>
 801c3ac:	f04f 0a03 	mov.w	sl, #3
 801c3b0:	e7b8      	b.n	801c324 <__gethex+0x1f8>
 801c3b2:	da0a      	bge.n	801c3ca <__gethex+0x29e>
 801c3b4:	1a37      	subs	r7, r6, r0
 801c3b6:	4621      	mov	r1, r4
 801c3b8:	ee18 0a10 	vmov	r0, s16
 801c3bc:	463a      	mov	r2, r7
 801c3be:	f000 fc45 	bl	801cc4c <__lshift>
 801c3c2:	1bed      	subs	r5, r5, r7
 801c3c4:	4604      	mov	r4, r0
 801c3c6:	f100 0914 	add.w	r9, r0, #20
 801c3ca:	f04f 0a00 	mov.w	sl, #0
 801c3ce:	e7ae      	b.n	801c32e <__gethex+0x202>
 801c3d0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801c3d4:	42a8      	cmp	r0, r5
 801c3d6:	dd72      	ble.n	801c4be <__gethex+0x392>
 801c3d8:	1b45      	subs	r5, r0, r5
 801c3da:	42ae      	cmp	r6, r5
 801c3dc:	dc36      	bgt.n	801c44c <__gethex+0x320>
 801c3de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c3e2:	2b02      	cmp	r3, #2
 801c3e4:	d02a      	beq.n	801c43c <__gethex+0x310>
 801c3e6:	2b03      	cmp	r3, #3
 801c3e8:	d02c      	beq.n	801c444 <__gethex+0x318>
 801c3ea:	2b01      	cmp	r3, #1
 801c3ec:	d11c      	bne.n	801c428 <__gethex+0x2fc>
 801c3ee:	42ae      	cmp	r6, r5
 801c3f0:	d11a      	bne.n	801c428 <__gethex+0x2fc>
 801c3f2:	2e01      	cmp	r6, #1
 801c3f4:	d112      	bne.n	801c41c <__gethex+0x2f0>
 801c3f6:	9a04      	ldr	r2, [sp, #16]
 801c3f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801c3fc:	6013      	str	r3, [r2, #0]
 801c3fe:	2301      	movs	r3, #1
 801c400:	6123      	str	r3, [r4, #16]
 801c402:	f8c9 3000 	str.w	r3, [r9]
 801c406:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c408:	2762      	movs	r7, #98	; 0x62
 801c40a:	601c      	str	r4, [r3, #0]
 801c40c:	e723      	b.n	801c256 <__gethex+0x12a>
 801c40e:	bf00      	nop
 801c410:	08052438 	.word	0x08052438
 801c414:	080523c0 	.word	0x080523c0
 801c418:	080523d1 	.word	0x080523d1
 801c41c:	1e71      	subs	r1, r6, #1
 801c41e:	4620      	mov	r0, r4
 801c420:	f000 fe58 	bl	801d0d4 <__any_on>
 801c424:	2800      	cmp	r0, #0
 801c426:	d1e6      	bne.n	801c3f6 <__gethex+0x2ca>
 801c428:	ee18 0a10 	vmov	r0, s16
 801c42c:	4621      	mov	r1, r4
 801c42e:	f000 f9f1 	bl	801c814 <_Bfree>
 801c432:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c434:	2300      	movs	r3, #0
 801c436:	6013      	str	r3, [r2, #0]
 801c438:	2750      	movs	r7, #80	; 0x50
 801c43a:	e70c      	b.n	801c256 <__gethex+0x12a>
 801c43c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c43e:	2b00      	cmp	r3, #0
 801c440:	d1f2      	bne.n	801c428 <__gethex+0x2fc>
 801c442:	e7d8      	b.n	801c3f6 <__gethex+0x2ca>
 801c444:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c446:	2b00      	cmp	r3, #0
 801c448:	d1d5      	bne.n	801c3f6 <__gethex+0x2ca>
 801c44a:	e7ed      	b.n	801c428 <__gethex+0x2fc>
 801c44c:	1e6f      	subs	r7, r5, #1
 801c44e:	f1ba 0f00 	cmp.w	sl, #0
 801c452:	d131      	bne.n	801c4b8 <__gethex+0x38c>
 801c454:	b127      	cbz	r7, 801c460 <__gethex+0x334>
 801c456:	4639      	mov	r1, r7
 801c458:	4620      	mov	r0, r4
 801c45a:	f000 fe3b 	bl	801d0d4 <__any_on>
 801c45e:	4682      	mov	sl, r0
 801c460:	117b      	asrs	r3, r7, #5
 801c462:	2101      	movs	r1, #1
 801c464:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801c468:	f007 071f 	and.w	r7, r7, #31
 801c46c:	fa01 f707 	lsl.w	r7, r1, r7
 801c470:	421f      	tst	r7, r3
 801c472:	4629      	mov	r1, r5
 801c474:	4620      	mov	r0, r4
 801c476:	bf18      	it	ne
 801c478:	f04a 0a02 	orrne.w	sl, sl, #2
 801c47c:	1b76      	subs	r6, r6, r5
 801c47e:	f7ff fded 	bl	801c05c <rshift>
 801c482:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801c486:	2702      	movs	r7, #2
 801c488:	f1ba 0f00 	cmp.w	sl, #0
 801c48c:	d048      	beq.n	801c520 <__gethex+0x3f4>
 801c48e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c492:	2b02      	cmp	r3, #2
 801c494:	d015      	beq.n	801c4c2 <__gethex+0x396>
 801c496:	2b03      	cmp	r3, #3
 801c498:	d017      	beq.n	801c4ca <__gethex+0x39e>
 801c49a:	2b01      	cmp	r3, #1
 801c49c:	d109      	bne.n	801c4b2 <__gethex+0x386>
 801c49e:	f01a 0f02 	tst.w	sl, #2
 801c4a2:	d006      	beq.n	801c4b2 <__gethex+0x386>
 801c4a4:	f8d9 0000 	ldr.w	r0, [r9]
 801c4a8:	ea4a 0a00 	orr.w	sl, sl, r0
 801c4ac:	f01a 0f01 	tst.w	sl, #1
 801c4b0:	d10e      	bne.n	801c4d0 <__gethex+0x3a4>
 801c4b2:	f047 0710 	orr.w	r7, r7, #16
 801c4b6:	e033      	b.n	801c520 <__gethex+0x3f4>
 801c4b8:	f04f 0a01 	mov.w	sl, #1
 801c4bc:	e7d0      	b.n	801c460 <__gethex+0x334>
 801c4be:	2701      	movs	r7, #1
 801c4c0:	e7e2      	b.n	801c488 <__gethex+0x35c>
 801c4c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c4c4:	f1c3 0301 	rsb	r3, r3, #1
 801c4c8:	9315      	str	r3, [sp, #84]	; 0x54
 801c4ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c4cc:	2b00      	cmp	r3, #0
 801c4ce:	d0f0      	beq.n	801c4b2 <__gethex+0x386>
 801c4d0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801c4d4:	f104 0314 	add.w	r3, r4, #20
 801c4d8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801c4dc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801c4e0:	f04f 0c00 	mov.w	ip, #0
 801c4e4:	4618      	mov	r0, r3
 801c4e6:	f853 2b04 	ldr.w	r2, [r3], #4
 801c4ea:	f1b2 3fff 	cmp.w	r2, #4294967295
 801c4ee:	d01c      	beq.n	801c52a <__gethex+0x3fe>
 801c4f0:	3201      	adds	r2, #1
 801c4f2:	6002      	str	r2, [r0, #0]
 801c4f4:	2f02      	cmp	r7, #2
 801c4f6:	f104 0314 	add.w	r3, r4, #20
 801c4fa:	d13f      	bne.n	801c57c <__gethex+0x450>
 801c4fc:	f8d8 2000 	ldr.w	r2, [r8]
 801c500:	3a01      	subs	r2, #1
 801c502:	42b2      	cmp	r2, r6
 801c504:	d10a      	bne.n	801c51c <__gethex+0x3f0>
 801c506:	1171      	asrs	r1, r6, #5
 801c508:	2201      	movs	r2, #1
 801c50a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801c50e:	f006 061f 	and.w	r6, r6, #31
 801c512:	fa02 f606 	lsl.w	r6, r2, r6
 801c516:	421e      	tst	r6, r3
 801c518:	bf18      	it	ne
 801c51a:	4617      	movne	r7, r2
 801c51c:	f047 0720 	orr.w	r7, r7, #32
 801c520:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c522:	601c      	str	r4, [r3, #0]
 801c524:	9b04      	ldr	r3, [sp, #16]
 801c526:	601d      	str	r5, [r3, #0]
 801c528:	e695      	b.n	801c256 <__gethex+0x12a>
 801c52a:	4299      	cmp	r1, r3
 801c52c:	f843 cc04 	str.w	ip, [r3, #-4]
 801c530:	d8d8      	bhi.n	801c4e4 <__gethex+0x3b8>
 801c532:	68a3      	ldr	r3, [r4, #8]
 801c534:	459b      	cmp	fp, r3
 801c536:	db19      	blt.n	801c56c <__gethex+0x440>
 801c538:	6861      	ldr	r1, [r4, #4]
 801c53a:	ee18 0a10 	vmov	r0, s16
 801c53e:	3101      	adds	r1, #1
 801c540:	f000 f928 	bl	801c794 <_Balloc>
 801c544:	4681      	mov	r9, r0
 801c546:	b918      	cbnz	r0, 801c550 <__gethex+0x424>
 801c548:	4b1a      	ldr	r3, [pc, #104]	; (801c5b4 <__gethex+0x488>)
 801c54a:	4602      	mov	r2, r0
 801c54c:	2184      	movs	r1, #132	; 0x84
 801c54e:	e6a8      	b.n	801c2a2 <__gethex+0x176>
 801c550:	6922      	ldr	r2, [r4, #16]
 801c552:	3202      	adds	r2, #2
 801c554:	f104 010c 	add.w	r1, r4, #12
 801c558:	0092      	lsls	r2, r2, #2
 801c55a:	300c      	adds	r0, #12
 801c55c:	f000 f90c 	bl	801c778 <memcpy>
 801c560:	4621      	mov	r1, r4
 801c562:	ee18 0a10 	vmov	r0, s16
 801c566:	f000 f955 	bl	801c814 <_Bfree>
 801c56a:	464c      	mov	r4, r9
 801c56c:	6923      	ldr	r3, [r4, #16]
 801c56e:	1c5a      	adds	r2, r3, #1
 801c570:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801c574:	6122      	str	r2, [r4, #16]
 801c576:	2201      	movs	r2, #1
 801c578:	615a      	str	r2, [r3, #20]
 801c57a:	e7bb      	b.n	801c4f4 <__gethex+0x3c8>
 801c57c:	6922      	ldr	r2, [r4, #16]
 801c57e:	455a      	cmp	r2, fp
 801c580:	dd0b      	ble.n	801c59a <__gethex+0x46e>
 801c582:	2101      	movs	r1, #1
 801c584:	4620      	mov	r0, r4
 801c586:	f7ff fd69 	bl	801c05c <rshift>
 801c58a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c58e:	3501      	adds	r5, #1
 801c590:	42ab      	cmp	r3, r5
 801c592:	f6ff aed0 	blt.w	801c336 <__gethex+0x20a>
 801c596:	2701      	movs	r7, #1
 801c598:	e7c0      	b.n	801c51c <__gethex+0x3f0>
 801c59a:	f016 061f 	ands.w	r6, r6, #31
 801c59e:	d0fa      	beq.n	801c596 <__gethex+0x46a>
 801c5a0:	4453      	add	r3, sl
 801c5a2:	f1c6 0620 	rsb	r6, r6, #32
 801c5a6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801c5aa:	f000 f9e5 	bl	801c978 <__hi0bits>
 801c5ae:	42b0      	cmp	r0, r6
 801c5b0:	dbe7      	blt.n	801c582 <__gethex+0x456>
 801c5b2:	e7f0      	b.n	801c596 <__gethex+0x46a>
 801c5b4:	080523c0 	.word	0x080523c0

0801c5b8 <L_shift>:
 801c5b8:	f1c2 0208 	rsb	r2, r2, #8
 801c5bc:	0092      	lsls	r2, r2, #2
 801c5be:	b570      	push	{r4, r5, r6, lr}
 801c5c0:	f1c2 0620 	rsb	r6, r2, #32
 801c5c4:	6843      	ldr	r3, [r0, #4]
 801c5c6:	6804      	ldr	r4, [r0, #0]
 801c5c8:	fa03 f506 	lsl.w	r5, r3, r6
 801c5cc:	432c      	orrs	r4, r5
 801c5ce:	40d3      	lsrs	r3, r2
 801c5d0:	6004      	str	r4, [r0, #0]
 801c5d2:	f840 3f04 	str.w	r3, [r0, #4]!
 801c5d6:	4288      	cmp	r0, r1
 801c5d8:	d3f4      	bcc.n	801c5c4 <L_shift+0xc>
 801c5da:	bd70      	pop	{r4, r5, r6, pc}

0801c5dc <__match>:
 801c5dc:	b530      	push	{r4, r5, lr}
 801c5de:	6803      	ldr	r3, [r0, #0]
 801c5e0:	3301      	adds	r3, #1
 801c5e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c5e6:	b914      	cbnz	r4, 801c5ee <__match+0x12>
 801c5e8:	6003      	str	r3, [r0, #0]
 801c5ea:	2001      	movs	r0, #1
 801c5ec:	bd30      	pop	{r4, r5, pc}
 801c5ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c5f2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801c5f6:	2d19      	cmp	r5, #25
 801c5f8:	bf98      	it	ls
 801c5fa:	3220      	addls	r2, #32
 801c5fc:	42a2      	cmp	r2, r4
 801c5fe:	d0f0      	beq.n	801c5e2 <__match+0x6>
 801c600:	2000      	movs	r0, #0
 801c602:	e7f3      	b.n	801c5ec <__match+0x10>

0801c604 <__hexnan>:
 801c604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c608:	680b      	ldr	r3, [r1, #0]
 801c60a:	115e      	asrs	r6, r3, #5
 801c60c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801c610:	f013 031f 	ands.w	r3, r3, #31
 801c614:	b087      	sub	sp, #28
 801c616:	bf18      	it	ne
 801c618:	3604      	addne	r6, #4
 801c61a:	2500      	movs	r5, #0
 801c61c:	1f37      	subs	r7, r6, #4
 801c61e:	4690      	mov	r8, r2
 801c620:	6802      	ldr	r2, [r0, #0]
 801c622:	9301      	str	r3, [sp, #4]
 801c624:	4682      	mov	sl, r0
 801c626:	f846 5c04 	str.w	r5, [r6, #-4]
 801c62a:	46b9      	mov	r9, r7
 801c62c:	463c      	mov	r4, r7
 801c62e:	9502      	str	r5, [sp, #8]
 801c630:	46ab      	mov	fp, r5
 801c632:	7851      	ldrb	r1, [r2, #1]
 801c634:	1c53      	adds	r3, r2, #1
 801c636:	9303      	str	r3, [sp, #12]
 801c638:	b341      	cbz	r1, 801c68c <__hexnan+0x88>
 801c63a:	4608      	mov	r0, r1
 801c63c:	9205      	str	r2, [sp, #20]
 801c63e:	9104      	str	r1, [sp, #16]
 801c640:	f7ff fd5e 	bl	801c100 <__hexdig_fun>
 801c644:	2800      	cmp	r0, #0
 801c646:	d14f      	bne.n	801c6e8 <__hexnan+0xe4>
 801c648:	9904      	ldr	r1, [sp, #16]
 801c64a:	9a05      	ldr	r2, [sp, #20]
 801c64c:	2920      	cmp	r1, #32
 801c64e:	d818      	bhi.n	801c682 <__hexnan+0x7e>
 801c650:	9b02      	ldr	r3, [sp, #8]
 801c652:	459b      	cmp	fp, r3
 801c654:	dd13      	ble.n	801c67e <__hexnan+0x7a>
 801c656:	454c      	cmp	r4, r9
 801c658:	d206      	bcs.n	801c668 <__hexnan+0x64>
 801c65a:	2d07      	cmp	r5, #7
 801c65c:	dc04      	bgt.n	801c668 <__hexnan+0x64>
 801c65e:	462a      	mov	r2, r5
 801c660:	4649      	mov	r1, r9
 801c662:	4620      	mov	r0, r4
 801c664:	f7ff ffa8 	bl	801c5b8 <L_shift>
 801c668:	4544      	cmp	r4, r8
 801c66a:	d950      	bls.n	801c70e <__hexnan+0x10a>
 801c66c:	2300      	movs	r3, #0
 801c66e:	f1a4 0904 	sub.w	r9, r4, #4
 801c672:	f844 3c04 	str.w	r3, [r4, #-4]
 801c676:	f8cd b008 	str.w	fp, [sp, #8]
 801c67a:	464c      	mov	r4, r9
 801c67c:	461d      	mov	r5, r3
 801c67e:	9a03      	ldr	r2, [sp, #12]
 801c680:	e7d7      	b.n	801c632 <__hexnan+0x2e>
 801c682:	2929      	cmp	r1, #41	; 0x29
 801c684:	d156      	bne.n	801c734 <__hexnan+0x130>
 801c686:	3202      	adds	r2, #2
 801c688:	f8ca 2000 	str.w	r2, [sl]
 801c68c:	f1bb 0f00 	cmp.w	fp, #0
 801c690:	d050      	beq.n	801c734 <__hexnan+0x130>
 801c692:	454c      	cmp	r4, r9
 801c694:	d206      	bcs.n	801c6a4 <__hexnan+0xa0>
 801c696:	2d07      	cmp	r5, #7
 801c698:	dc04      	bgt.n	801c6a4 <__hexnan+0xa0>
 801c69a:	462a      	mov	r2, r5
 801c69c:	4649      	mov	r1, r9
 801c69e:	4620      	mov	r0, r4
 801c6a0:	f7ff ff8a 	bl	801c5b8 <L_shift>
 801c6a4:	4544      	cmp	r4, r8
 801c6a6:	d934      	bls.n	801c712 <__hexnan+0x10e>
 801c6a8:	f1a8 0204 	sub.w	r2, r8, #4
 801c6ac:	4623      	mov	r3, r4
 801c6ae:	f853 1b04 	ldr.w	r1, [r3], #4
 801c6b2:	f842 1f04 	str.w	r1, [r2, #4]!
 801c6b6:	429f      	cmp	r7, r3
 801c6b8:	d2f9      	bcs.n	801c6ae <__hexnan+0xaa>
 801c6ba:	1b3b      	subs	r3, r7, r4
 801c6bc:	f023 0303 	bic.w	r3, r3, #3
 801c6c0:	3304      	adds	r3, #4
 801c6c2:	3401      	adds	r4, #1
 801c6c4:	3e03      	subs	r6, #3
 801c6c6:	42b4      	cmp	r4, r6
 801c6c8:	bf88      	it	hi
 801c6ca:	2304      	movhi	r3, #4
 801c6cc:	4443      	add	r3, r8
 801c6ce:	2200      	movs	r2, #0
 801c6d0:	f843 2b04 	str.w	r2, [r3], #4
 801c6d4:	429f      	cmp	r7, r3
 801c6d6:	d2fb      	bcs.n	801c6d0 <__hexnan+0xcc>
 801c6d8:	683b      	ldr	r3, [r7, #0]
 801c6da:	b91b      	cbnz	r3, 801c6e4 <__hexnan+0xe0>
 801c6dc:	4547      	cmp	r7, r8
 801c6de:	d127      	bne.n	801c730 <__hexnan+0x12c>
 801c6e0:	2301      	movs	r3, #1
 801c6e2:	603b      	str	r3, [r7, #0]
 801c6e4:	2005      	movs	r0, #5
 801c6e6:	e026      	b.n	801c736 <__hexnan+0x132>
 801c6e8:	3501      	adds	r5, #1
 801c6ea:	2d08      	cmp	r5, #8
 801c6ec:	f10b 0b01 	add.w	fp, fp, #1
 801c6f0:	dd06      	ble.n	801c700 <__hexnan+0xfc>
 801c6f2:	4544      	cmp	r4, r8
 801c6f4:	d9c3      	bls.n	801c67e <__hexnan+0x7a>
 801c6f6:	2300      	movs	r3, #0
 801c6f8:	f844 3c04 	str.w	r3, [r4, #-4]
 801c6fc:	2501      	movs	r5, #1
 801c6fe:	3c04      	subs	r4, #4
 801c700:	6822      	ldr	r2, [r4, #0]
 801c702:	f000 000f 	and.w	r0, r0, #15
 801c706:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801c70a:	6022      	str	r2, [r4, #0]
 801c70c:	e7b7      	b.n	801c67e <__hexnan+0x7a>
 801c70e:	2508      	movs	r5, #8
 801c710:	e7b5      	b.n	801c67e <__hexnan+0x7a>
 801c712:	9b01      	ldr	r3, [sp, #4]
 801c714:	2b00      	cmp	r3, #0
 801c716:	d0df      	beq.n	801c6d8 <__hexnan+0xd4>
 801c718:	f04f 32ff 	mov.w	r2, #4294967295
 801c71c:	f1c3 0320 	rsb	r3, r3, #32
 801c720:	fa22 f303 	lsr.w	r3, r2, r3
 801c724:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801c728:	401a      	ands	r2, r3
 801c72a:	f846 2c04 	str.w	r2, [r6, #-4]
 801c72e:	e7d3      	b.n	801c6d8 <__hexnan+0xd4>
 801c730:	3f04      	subs	r7, #4
 801c732:	e7d1      	b.n	801c6d8 <__hexnan+0xd4>
 801c734:	2004      	movs	r0, #4
 801c736:	b007      	add	sp, #28
 801c738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c73c <_localeconv_r>:
 801c73c:	4800      	ldr	r0, [pc, #0]	; (801c740 <_localeconv_r+0x4>)
 801c73e:	4770      	bx	lr
 801c740:	200001bc 	.word	0x200001bc

0801c744 <malloc>:
 801c744:	4b02      	ldr	r3, [pc, #8]	; (801c750 <malloc+0xc>)
 801c746:	4601      	mov	r1, r0
 801c748:	6818      	ldr	r0, [r3, #0]
 801c74a:	f000 bd67 	b.w	801d21c <_malloc_r>
 801c74e:	bf00      	nop
 801c750:	20000064 	.word	0x20000064

0801c754 <__ascii_mbtowc>:
 801c754:	b082      	sub	sp, #8
 801c756:	b901      	cbnz	r1, 801c75a <__ascii_mbtowc+0x6>
 801c758:	a901      	add	r1, sp, #4
 801c75a:	b142      	cbz	r2, 801c76e <__ascii_mbtowc+0x1a>
 801c75c:	b14b      	cbz	r3, 801c772 <__ascii_mbtowc+0x1e>
 801c75e:	7813      	ldrb	r3, [r2, #0]
 801c760:	600b      	str	r3, [r1, #0]
 801c762:	7812      	ldrb	r2, [r2, #0]
 801c764:	1e10      	subs	r0, r2, #0
 801c766:	bf18      	it	ne
 801c768:	2001      	movne	r0, #1
 801c76a:	b002      	add	sp, #8
 801c76c:	4770      	bx	lr
 801c76e:	4610      	mov	r0, r2
 801c770:	e7fb      	b.n	801c76a <__ascii_mbtowc+0x16>
 801c772:	f06f 0001 	mvn.w	r0, #1
 801c776:	e7f8      	b.n	801c76a <__ascii_mbtowc+0x16>

0801c778 <memcpy>:
 801c778:	440a      	add	r2, r1
 801c77a:	4291      	cmp	r1, r2
 801c77c:	f100 33ff 	add.w	r3, r0, #4294967295
 801c780:	d100      	bne.n	801c784 <memcpy+0xc>
 801c782:	4770      	bx	lr
 801c784:	b510      	push	{r4, lr}
 801c786:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c78a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c78e:	4291      	cmp	r1, r2
 801c790:	d1f9      	bne.n	801c786 <memcpy+0xe>
 801c792:	bd10      	pop	{r4, pc}

0801c794 <_Balloc>:
 801c794:	b570      	push	{r4, r5, r6, lr}
 801c796:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801c798:	4604      	mov	r4, r0
 801c79a:	460d      	mov	r5, r1
 801c79c:	b976      	cbnz	r6, 801c7bc <_Balloc+0x28>
 801c79e:	2010      	movs	r0, #16
 801c7a0:	f7ff ffd0 	bl	801c744 <malloc>
 801c7a4:	4602      	mov	r2, r0
 801c7a6:	6260      	str	r0, [r4, #36]	; 0x24
 801c7a8:	b920      	cbnz	r0, 801c7b4 <_Balloc+0x20>
 801c7aa:	4b18      	ldr	r3, [pc, #96]	; (801c80c <_Balloc+0x78>)
 801c7ac:	4818      	ldr	r0, [pc, #96]	; (801c810 <_Balloc+0x7c>)
 801c7ae:	2166      	movs	r1, #102	; 0x66
 801c7b0:	f000 ff40 	bl	801d634 <__assert_func>
 801c7b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c7b8:	6006      	str	r6, [r0, #0]
 801c7ba:	60c6      	str	r6, [r0, #12]
 801c7bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801c7be:	68f3      	ldr	r3, [r6, #12]
 801c7c0:	b183      	cbz	r3, 801c7e4 <_Balloc+0x50>
 801c7c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c7c4:	68db      	ldr	r3, [r3, #12]
 801c7c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801c7ca:	b9b8      	cbnz	r0, 801c7fc <_Balloc+0x68>
 801c7cc:	2101      	movs	r1, #1
 801c7ce:	fa01 f605 	lsl.w	r6, r1, r5
 801c7d2:	1d72      	adds	r2, r6, #5
 801c7d4:	0092      	lsls	r2, r2, #2
 801c7d6:	4620      	mov	r0, r4
 801c7d8:	f000 fc9d 	bl	801d116 <_calloc_r>
 801c7dc:	b160      	cbz	r0, 801c7f8 <_Balloc+0x64>
 801c7de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801c7e2:	e00e      	b.n	801c802 <_Balloc+0x6e>
 801c7e4:	2221      	movs	r2, #33	; 0x21
 801c7e6:	2104      	movs	r1, #4
 801c7e8:	4620      	mov	r0, r4
 801c7ea:	f000 fc94 	bl	801d116 <_calloc_r>
 801c7ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c7f0:	60f0      	str	r0, [r6, #12]
 801c7f2:	68db      	ldr	r3, [r3, #12]
 801c7f4:	2b00      	cmp	r3, #0
 801c7f6:	d1e4      	bne.n	801c7c2 <_Balloc+0x2e>
 801c7f8:	2000      	movs	r0, #0
 801c7fa:	bd70      	pop	{r4, r5, r6, pc}
 801c7fc:	6802      	ldr	r2, [r0, #0]
 801c7fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c802:	2300      	movs	r3, #0
 801c804:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801c808:	e7f7      	b.n	801c7fa <_Balloc+0x66>
 801c80a:	bf00      	nop
 801c80c:	0805234e 	.word	0x0805234e
 801c810:	0805244c 	.word	0x0805244c

0801c814 <_Bfree>:
 801c814:	b570      	push	{r4, r5, r6, lr}
 801c816:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801c818:	4605      	mov	r5, r0
 801c81a:	460c      	mov	r4, r1
 801c81c:	b976      	cbnz	r6, 801c83c <_Bfree+0x28>
 801c81e:	2010      	movs	r0, #16
 801c820:	f7ff ff90 	bl	801c744 <malloc>
 801c824:	4602      	mov	r2, r0
 801c826:	6268      	str	r0, [r5, #36]	; 0x24
 801c828:	b920      	cbnz	r0, 801c834 <_Bfree+0x20>
 801c82a:	4b09      	ldr	r3, [pc, #36]	; (801c850 <_Bfree+0x3c>)
 801c82c:	4809      	ldr	r0, [pc, #36]	; (801c854 <_Bfree+0x40>)
 801c82e:	218a      	movs	r1, #138	; 0x8a
 801c830:	f000 ff00 	bl	801d634 <__assert_func>
 801c834:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c838:	6006      	str	r6, [r0, #0]
 801c83a:	60c6      	str	r6, [r0, #12]
 801c83c:	b13c      	cbz	r4, 801c84e <_Bfree+0x3a>
 801c83e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801c840:	6862      	ldr	r2, [r4, #4]
 801c842:	68db      	ldr	r3, [r3, #12]
 801c844:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801c848:	6021      	str	r1, [r4, #0]
 801c84a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801c84e:	bd70      	pop	{r4, r5, r6, pc}
 801c850:	0805234e 	.word	0x0805234e
 801c854:	0805244c 	.word	0x0805244c

0801c858 <__multadd>:
 801c858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c85c:	690d      	ldr	r5, [r1, #16]
 801c85e:	4607      	mov	r7, r0
 801c860:	460c      	mov	r4, r1
 801c862:	461e      	mov	r6, r3
 801c864:	f101 0c14 	add.w	ip, r1, #20
 801c868:	2000      	movs	r0, #0
 801c86a:	f8dc 3000 	ldr.w	r3, [ip]
 801c86e:	b299      	uxth	r1, r3
 801c870:	fb02 6101 	mla	r1, r2, r1, r6
 801c874:	0c1e      	lsrs	r6, r3, #16
 801c876:	0c0b      	lsrs	r3, r1, #16
 801c878:	fb02 3306 	mla	r3, r2, r6, r3
 801c87c:	b289      	uxth	r1, r1
 801c87e:	3001      	adds	r0, #1
 801c880:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801c884:	4285      	cmp	r5, r0
 801c886:	f84c 1b04 	str.w	r1, [ip], #4
 801c88a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801c88e:	dcec      	bgt.n	801c86a <__multadd+0x12>
 801c890:	b30e      	cbz	r6, 801c8d6 <__multadd+0x7e>
 801c892:	68a3      	ldr	r3, [r4, #8]
 801c894:	42ab      	cmp	r3, r5
 801c896:	dc19      	bgt.n	801c8cc <__multadd+0x74>
 801c898:	6861      	ldr	r1, [r4, #4]
 801c89a:	4638      	mov	r0, r7
 801c89c:	3101      	adds	r1, #1
 801c89e:	f7ff ff79 	bl	801c794 <_Balloc>
 801c8a2:	4680      	mov	r8, r0
 801c8a4:	b928      	cbnz	r0, 801c8b2 <__multadd+0x5a>
 801c8a6:	4602      	mov	r2, r0
 801c8a8:	4b0c      	ldr	r3, [pc, #48]	; (801c8dc <__multadd+0x84>)
 801c8aa:	480d      	ldr	r0, [pc, #52]	; (801c8e0 <__multadd+0x88>)
 801c8ac:	21b5      	movs	r1, #181	; 0xb5
 801c8ae:	f000 fec1 	bl	801d634 <__assert_func>
 801c8b2:	6922      	ldr	r2, [r4, #16]
 801c8b4:	3202      	adds	r2, #2
 801c8b6:	f104 010c 	add.w	r1, r4, #12
 801c8ba:	0092      	lsls	r2, r2, #2
 801c8bc:	300c      	adds	r0, #12
 801c8be:	f7ff ff5b 	bl	801c778 <memcpy>
 801c8c2:	4621      	mov	r1, r4
 801c8c4:	4638      	mov	r0, r7
 801c8c6:	f7ff ffa5 	bl	801c814 <_Bfree>
 801c8ca:	4644      	mov	r4, r8
 801c8cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801c8d0:	3501      	adds	r5, #1
 801c8d2:	615e      	str	r6, [r3, #20]
 801c8d4:	6125      	str	r5, [r4, #16]
 801c8d6:	4620      	mov	r0, r4
 801c8d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c8dc:	080523c0 	.word	0x080523c0
 801c8e0:	0805244c 	.word	0x0805244c

0801c8e4 <__s2b>:
 801c8e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c8e8:	460c      	mov	r4, r1
 801c8ea:	4615      	mov	r5, r2
 801c8ec:	461f      	mov	r7, r3
 801c8ee:	2209      	movs	r2, #9
 801c8f0:	3308      	adds	r3, #8
 801c8f2:	4606      	mov	r6, r0
 801c8f4:	fb93 f3f2 	sdiv	r3, r3, r2
 801c8f8:	2100      	movs	r1, #0
 801c8fa:	2201      	movs	r2, #1
 801c8fc:	429a      	cmp	r2, r3
 801c8fe:	db09      	blt.n	801c914 <__s2b+0x30>
 801c900:	4630      	mov	r0, r6
 801c902:	f7ff ff47 	bl	801c794 <_Balloc>
 801c906:	b940      	cbnz	r0, 801c91a <__s2b+0x36>
 801c908:	4602      	mov	r2, r0
 801c90a:	4b19      	ldr	r3, [pc, #100]	; (801c970 <__s2b+0x8c>)
 801c90c:	4819      	ldr	r0, [pc, #100]	; (801c974 <__s2b+0x90>)
 801c90e:	21ce      	movs	r1, #206	; 0xce
 801c910:	f000 fe90 	bl	801d634 <__assert_func>
 801c914:	0052      	lsls	r2, r2, #1
 801c916:	3101      	adds	r1, #1
 801c918:	e7f0      	b.n	801c8fc <__s2b+0x18>
 801c91a:	9b08      	ldr	r3, [sp, #32]
 801c91c:	6143      	str	r3, [r0, #20]
 801c91e:	2d09      	cmp	r5, #9
 801c920:	f04f 0301 	mov.w	r3, #1
 801c924:	6103      	str	r3, [r0, #16]
 801c926:	dd16      	ble.n	801c956 <__s2b+0x72>
 801c928:	f104 0909 	add.w	r9, r4, #9
 801c92c:	46c8      	mov	r8, r9
 801c92e:	442c      	add	r4, r5
 801c930:	f818 3b01 	ldrb.w	r3, [r8], #1
 801c934:	4601      	mov	r1, r0
 801c936:	3b30      	subs	r3, #48	; 0x30
 801c938:	220a      	movs	r2, #10
 801c93a:	4630      	mov	r0, r6
 801c93c:	f7ff ff8c 	bl	801c858 <__multadd>
 801c940:	45a0      	cmp	r8, r4
 801c942:	d1f5      	bne.n	801c930 <__s2b+0x4c>
 801c944:	f1a5 0408 	sub.w	r4, r5, #8
 801c948:	444c      	add	r4, r9
 801c94a:	1b2d      	subs	r5, r5, r4
 801c94c:	1963      	adds	r3, r4, r5
 801c94e:	42bb      	cmp	r3, r7
 801c950:	db04      	blt.n	801c95c <__s2b+0x78>
 801c952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c956:	340a      	adds	r4, #10
 801c958:	2509      	movs	r5, #9
 801c95a:	e7f6      	b.n	801c94a <__s2b+0x66>
 801c95c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801c960:	4601      	mov	r1, r0
 801c962:	3b30      	subs	r3, #48	; 0x30
 801c964:	220a      	movs	r2, #10
 801c966:	4630      	mov	r0, r6
 801c968:	f7ff ff76 	bl	801c858 <__multadd>
 801c96c:	e7ee      	b.n	801c94c <__s2b+0x68>
 801c96e:	bf00      	nop
 801c970:	080523c0 	.word	0x080523c0
 801c974:	0805244c 	.word	0x0805244c

0801c978 <__hi0bits>:
 801c978:	0c03      	lsrs	r3, r0, #16
 801c97a:	041b      	lsls	r3, r3, #16
 801c97c:	b9d3      	cbnz	r3, 801c9b4 <__hi0bits+0x3c>
 801c97e:	0400      	lsls	r0, r0, #16
 801c980:	2310      	movs	r3, #16
 801c982:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801c986:	bf04      	itt	eq
 801c988:	0200      	lsleq	r0, r0, #8
 801c98a:	3308      	addeq	r3, #8
 801c98c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801c990:	bf04      	itt	eq
 801c992:	0100      	lsleq	r0, r0, #4
 801c994:	3304      	addeq	r3, #4
 801c996:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801c99a:	bf04      	itt	eq
 801c99c:	0080      	lsleq	r0, r0, #2
 801c99e:	3302      	addeq	r3, #2
 801c9a0:	2800      	cmp	r0, #0
 801c9a2:	db05      	blt.n	801c9b0 <__hi0bits+0x38>
 801c9a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801c9a8:	f103 0301 	add.w	r3, r3, #1
 801c9ac:	bf08      	it	eq
 801c9ae:	2320      	moveq	r3, #32
 801c9b0:	4618      	mov	r0, r3
 801c9b2:	4770      	bx	lr
 801c9b4:	2300      	movs	r3, #0
 801c9b6:	e7e4      	b.n	801c982 <__hi0bits+0xa>

0801c9b8 <__lo0bits>:
 801c9b8:	6803      	ldr	r3, [r0, #0]
 801c9ba:	f013 0207 	ands.w	r2, r3, #7
 801c9be:	4601      	mov	r1, r0
 801c9c0:	d00b      	beq.n	801c9da <__lo0bits+0x22>
 801c9c2:	07da      	lsls	r2, r3, #31
 801c9c4:	d423      	bmi.n	801ca0e <__lo0bits+0x56>
 801c9c6:	0798      	lsls	r0, r3, #30
 801c9c8:	bf49      	itett	mi
 801c9ca:	085b      	lsrmi	r3, r3, #1
 801c9cc:	089b      	lsrpl	r3, r3, #2
 801c9ce:	2001      	movmi	r0, #1
 801c9d0:	600b      	strmi	r3, [r1, #0]
 801c9d2:	bf5c      	itt	pl
 801c9d4:	600b      	strpl	r3, [r1, #0]
 801c9d6:	2002      	movpl	r0, #2
 801c9d8:	4770      	bx	lr
 801c9da:	b298      	uxth	r0, r3
 801c9dc:	b9a8      	cbnz	r0, 801ca0a <__lo0bits+0x52>
 801c9de:	0c1b      	lsrs	r3, r3, #16
 801c9e0:	2010      	movs	r0, #16
 801c9e2:	b2da      	uxtb	r2, r3
 801c9e4:	b90a      	cbnz	r2, 801c9ea <__lo0bits+0x32>
 801c9e6:	3008      	adds	r0, #8
 801c9e8:	0a1b      	lsrs	r3, r3, #8
 801c9ea:	071a      	lsls	r2, r3, #28
 801c9ec:	bf04      	itt	eq
 801c9ee:	091b      	lsreq	r3, r3, #4
 801c9f0:	3004      	addeq	r0, #4
 801c9f2:	079a      	lsls	r2, r3, #30
 801c9f4:	bf04      	itt	eq
 801c9f6:	089b      	lsreq	r3, r3, #2
 801c9f8:	3002      	addeq	r0, #2
 801c9fa:	07da      	lsls	r2, r3, #31
 801c9fc:	d403      	bmi.n	801ca06 <__lo0bits+0x4e>
 801c9fe:	085b      	lsrs	r3, r3, #1
 801ca00:	f100 0001 	add.w	r0, r0, #1
 801ca04:	d005      	beq.n	801ca12 <__lo0bits+0x5a>
 801ca06:	600b      	str	r3, [r1, #0]
 801ca08:	4770      	bx	lr
 801ca0a:	4610      	mov	r0, r2
 801ca0c:	e7e9      	b.n	801c9e2 <__lo0bits+0x2a>
 801ca0e:	2000      	movs	r0, #0
 801ca10:	4770      	bx	lr
 801ca12:	2020      	movs	r0, #32
 801ca14:	4770      	bx	lr
	...

0801ca18 <__i2b>:
 801ca18:	b510      	push	{r4, lr}
 801ca1a:	460c      	mov	r4, r1
 801ca1c:	2101      	movs	r1, #1
 801ca1e:	f7ff feb9 	bl	801c794 <_Balloc>
 801ca22:	4602      	mov	r2, r0
 801ca24:	b928      	cbnz	r0, 801ca32 <__i2b+0x1a>
 801ca26:	4b05      	ldr	r3, [pc, #20]	; (801ca3c <__i2b+0x24>)
 801ca28:	4805      	ldr	r0, [pc, #20]	; (801ca40 <__i2b+0x28>)
 801ca2a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801ca2e:	f000 fe01 	bl	801d634 <__assert_func>
 801ca32:	2301      	movs	r3, #1
 801ca34:	6144      	str	r4, [r0, #20]
 801ca36:	6103      	str	r3, [r0, #16]
 801ca38:	bd10      	pop	{r4, pc}
 801ca3a:	bf00      	nop
 801ca3c:	080523c0 	.word	0x080523c0
 801ca40:	0805244c 	.word	0x0805244c

0801ca44 <__multiply>:
 801ca44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca48:	4691      	mov	r9, r2
 801ca4a:	690a      	ldr	r2, [r1, #16]
 801ca4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801ca50:	429a      	cmp	r2, r3
 801ca52:	bfb8      	it	lt
 801ca54:	460b      	movlt	r3, r1
 801ca56:	460c      	mov	r4, r1
 801ca58:	bfbc      	itt	lt
 801ca5a:	464c      	movlt	r4, r9
 801ca5c:	4699      	movlt	r9, r3
 801ca5e:	6927      	ldr	r7, [r4, #16]
 801ca60:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801ca64:	68a3      	ldr	r3, [r4, #8]
 801ca66:	6861      	ldr	r1, [r4, #4]
 801ca68:	eb07 060a 	add.w	r6, r7, sl
 801ca6c:	42b3      	cmp	r3, r6
 801ca6e:	b085      	sub	sp, #20
 801ca70:	bfb8      	it	lt
 801ca72:	3101      	addlt	r1, #1
 801ca74:	f7ff fe8e 	bl	801c794 <_Balloc>
 801ca78:	b930      	cbnz	r0, 801ca88 <__multiply+0x44>
 801ca7a:	4602      	mov	r2, r0
 801ca7c:	4b44      	ldr	r3, [pc, #272]	; (801cb90 <__multiply+0x14c>)
 801ca7e:	4845      	ldr	r0, [pc, #276]	; (801cb94 <__multiply+0x150>)
 801ca80:	f240 115d 	movw	r1, #349	; 0x15d
 801ca84:	f000 fdd6 	bl	801d634 <__assert_func>
 801ca88:	f100 0514 	add.w	r5, r0, #20
 801ca8c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801ca90:	462b      	mov	r3, r5
 801ca92:	2200      	movs	r2, #0
 801ca94:	4543      	cmp	r3, r8
 801ca96:	d321      	bcc.n	801cadc <__multiply+0x98>
 801ca98:	f104 0314 	add.w	r3, r4, #20
 801ca9c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801caa0:	f109 0314 	add.w	r3, r9, #20
 801caa4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801caa8:	9202      	str	r2, [sp, #8]
 801caaa:	1b3a      	subs	r2, r7, r4
 801caac:	3a15      	subs	r2, #21
 801caae:	f022 0203 	bic.w	r2, r2, #3
 801cab2:	3204      	adds	r2, #4
 801cab4:	f104 0115 	add.w	r1, r4, #21
 801cab8:	428f      	cmp	r7, r1
 801caba:	bf38      	it	cc
 801cabc:	2204      	movcc	r2, #4
 801cabe:	9201      	str	r2, [sp, #4]
 801cac0:	9a02      	ldr	r2, [sp, #8]
 801cac2:	9303      	str	r3, [sp, #12]
 801cac4:	429a      	cmp	r2, r3
 801cac6:	d80c      	bhi.n	801cae2 <__multiply+0x9e>
 801cac8:	2e00      	cmp	r6, #0
 801caca:	dd03      	ble.n	801cad4 <__multiply+0x90>
 801cacc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801cad0:	2b00      	cmp	r3, #0
 801cad2:	d05a      	beq.n	801cb8a <__multiply+0x146>
 801cad4:	6106      	str	r6, [r0, #16]
 801cad6:	b005      	add	sp, #20
 801cad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cadc:	f843 2b04 	str.w	r2, [r3], #4
 801cae0:	e7d8      	b.n	801ca94 <__multiply+0x50>
 801cae2:	f8b3 a000 	ldrh.w	sl, [r3]
 801cae6:	f1ba 0f00 	cmp.w	sl, #0
 801caea:	d024      	beq.n	801cb36 <__multiply+0xf2>
 801caec:	f104 0e14 	add.w	lr, r4, #20
 801caf0:	46a9      	mov	r9, r5
 801caf2:	f04f 0c00 	mov.w	ip, #0
 801caf6:	f85e 2b04 	ldr.w	r2, [lr], #4
 801cafa:	f8d9 1000 	ldr.w	r1, [r9]
 801cafe:	fa1f fb82 	uxth.w	fp, r2
 801cb02:	b289      	uxth	r1, r1
 801cb04:	fb0a 110b 	mla	r1, sl, fp, r1
 801cb08:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801cb0c:	f8d9 2000 	ldr.w	r2, [r9]
 801cb10:	4461      	add	r1, ip
 801cb12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801cb16:	fb0a c20b 	mla	r2, sl, fp, ip
 801cb1a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801cb1e:	b289      	uxth	r1, r1
 801cb20:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801cb24:	4577      	cmp	r7, lr
 801cb26:	f849 1b04 	str.w	r1, [r9], #4
 801cb2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801cb2e:	d8e2      	bhi.n	801caf6 <__multiply+0xb2>
 801cb30:	9a01      	ldr	r2, [sp, #4]
 801cb32:	f845 c002 	str.w	ip, [r5, r2]
 801cb36:	9a03      	ldr	r2, [sp, #12]
 801cb38:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801cb3c:	3304      	adds	r3, #4
 801cb3e:	f1b9 0f00 	cmp.w	r9, #0
 801cb42:	d020      	beq.n	801cb86 <__multiply+0x142>
 801cb44:	6829      	ldr	r1, [r5, #0]
 801cb46:	f104 0c14 	add.w	ip, r4, #20
 801cb4a:	46ae      	mov	lr, r5
 801cb4c:	f04f 0a00 	mov.w	sl, #0
 801cb50:	f8bc b000 	ldrh.w	fp, [ip]
 801cb54:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801cb58:	fb09 220b 	mla	r2, r9, fp, r2
 801cb5c:	4492      	add	sl, r2
 801cb5e:	b289      	uxth	r1, r1
 801cb60:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801cb64:	f84e 1b04 	str.w	r1, [lr], #4
 801cb68:	f85c 2b04 	ldr.w	r2, [ip], #4
 801cb6c:	f8be 1000 	ldrh.w	r1, [lr]
 801cb70:	0c12      	lsrs	r2, r2, #16
 801cb72:	fb09 1102 	mla	r1, r9, r2, r1
 801cb76:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801cb7a:	4567      	cmp	r7, ip
 801cb7c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801cb80:	d8e6      	bhi.n	801cb50 <__multiply+0x10c>
 801cb82:	9a01      	ldr	r2, [sp, #4]
 801cb84:	50a9      	str	r1, [r5, r2]
 801cb86:	3504      	adds	r5, #4
 801cb88:	e79a      	b.n	801cac0 <__multiply+0x7c>
 801cb8a:	3e01      	subs	r6, #1
 801cb8c:	e79c      	b.n	801cac8 <__multiply+0x84>
 801cb8e:	bf00      	nop
 801cb90:	080523c0 	.word	0x080523c0
 801cb94:	0805244c 	.word	0x0805244c

0801cb98 <__pow5mult>:
 801cb98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cb9c:	4615      	mov	r5, r2
 801cb9e:	f012 0203 	ands.w	r2, r2, #3
 801cba2:	4606      	mov	r6, r0
 801cba4:	460f      	mov	r7, r1
 801cba6:	d007      	beq.n	801cbb8 <__pow5mult+0x20>
 801cba8:	4c25      	ldr	r4, [pc, #148]	; (801cc40 <__pow5mult+0xa8>)
 801cbaa:	3a01      	subs	r2, #1
 801cbac:	2300      	movs	r3, #0
 801cbae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801cbb2:	f7ff fe51 	bl	801c858 <__multadd>
 801cbb6:	4607      	mov	r7, r0
 801cbb8:	10ad      	asrs	r5, r5, #2
 801cbba:	d03d      	beq.n	801cc38 <__pow5mult+0xa0>
 801cbbc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801cbbe:	b97c      	cbnz	r4, 801cbe0 <__pow5mult+0x48>
 801cbc0:	2010      	movs	r0, #16
 801cbc2:	f7ff fdbf 	bl	801c744 <malloc>
 801cbc6:	4602      	mov	r2, r0
 801cbc8:	6270      	str	r0, [r6, #36]	; 0x24
 801cbca:	b928      	cbnz	r0, 801cbd8 <__pow5mult+0x40>
 801cbcc:	4b1d      	ldr	r3, [pc, #116]	; (801cc44 <__pow5mult+0xac>)
 801cbce:	481e      	ldr	r0, [pc, #120]	; (801cc48 <__pow5mult+0xb0>)
 801cbd0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801cbd4:	f000 fd2e 	bl	801d634 <__assert_func>
 801cbd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801cbdc:	6004      	str	r4, [r0, #0]
 801cbde:	60c4      	str	r4, [r0, #12]
 801cbe0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801cbe4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801cbe8:	b94c      	cbnz	r4, 801cbfe <__pow5mult+0x66>
 801cbea:	f240 2171 	movw	r1, #625	; 0x271
 801cbee:	4630      	mov	r0, r6
 801cbf0:	f7ff ff12 	bl	801ca18 <__i2b>
 801cbf4:	2300      	movs	r3, #0
 801cbf6:	f8c8 0008 	str.w	r0, [r8, #8]
 801cbfa:	4604      	mov	r4, r0
 801cbfc:	6003      	str	r3, [r0, #0]
 801cbfe:	f04f 0900 	mov.w	r9, #0
 801cc02:	07eb      	lsls	r3, r5, #31
 801cc04:	d50a      	bpl.n	801cc1c <__pow5mult+0x84>
 801cc06:	4639      	mov	r1, r7
 801cc08:	4622      	mov	r2, r4
 801cc0a:	4630      	mov	r0, r6
 801cc0c:	f7ff ff1a 	bl	801ca44 <__multiply>
 801cc10:	4639      	mov	r1, r7
 801cc12:	4680      	mov	r8, r0
 801cc14:	4630      	mov	r0, r6
 801cc16:	f7ff fdfd 	bl	801c814 <_Bfree>
 801cc1a:	4647      	mov	r7, r8
 801cc1c:	106d      	asrs	r5, r5, #1
 801cc1e:	d00b      	beq.n	801cc38 <__pow5mult+0xa0>
 801cc20:	6820      	ldr	r0, [r4, #0]
 801cc22:	b938      	cbnz	r0, 801cc34 <__pow5mult+0x9c>
 801cc24:	4622      	mov	r2, r4
 801cc26:	4621      	mov	r1, r4
 801cc28:	4630      	mov	r0, r6
 801cc2a:	f7ff ff0b 	bl	801ca44 <__multiply>
 801cc2e:	6020      	str	r0, [r4, #0]
 801cc30:	f8c0 9000 	str.w	r9, [r0]
 801cc34:	4604      	mov	r4, r0
 801cc36:	e7e4      	b.n	801cc02 <__pow5mult+0x6a>
 801cc38:	4638      	mov	r0, r7
 801cc3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cc3e:	bf00      	nop
 801cc40:	08052598 	.word	0x08052598
 801cc44:	0805234e 	.word	0x0805234e
 801cc48:	0805244c 	.word	0x0805244c

0801cc4c <__lshift>:
 801cc4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cc50:	460c      	mov	r4, r1
 801cc52:	6849      	ldr	r1, [r1, #4]
 801cc54:	6923      	ldr	r3, [r4, #16]
 801cc56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801cc5a:	68a3      	ldr	r3, [r4, #8]
 801cc5c:	4607      	mov	r7, r0
 801cc5e:	4691      	mov	r9, r2
 801cc60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801cc64:	f108 0601 	add.w	r6, r8, #1
 801cc68:	42b3      	cmp	r3, r6
 801cc6a:	db0b      	blt.n	801cc84 <__lshift+0x38>
 801cc6c:	4638      	mov	r0, r7
 801cc6e:	f7ff fd91 	bl	801c794 <_Balloc>
 801cc72:	4605      	mov	r5, r0
 801cc74:	b948      	cbnz	r0, 801cc8a <__lshift+0x3e>
 801cc76:	4602      	mov	r2, r0
 801cc78:	4b2a      	ldr	r3, [pc, #168]	; (801cd24 <__lshift+0xd8>)
 801cc7a:	482b      	ldr	r0, [pc, #172]	; (801cd28 <__lshift+0xdc>)
 801cc7c:	f240 11d9 	movw	r1, #473	; 0x1d9
 801cc80:	f000 fcd8 	bl	801d634 <__assert_func>
 801cc84:	3101      	adds	r1, #1
 801cc86:	005b      	lsls	r3, r3, #1
 801cc88:	e7ee      	b.n	801cc68 <__lshift+0x1c>
 801cc8a:	2300      	movs	r3, #0
 801cc8c:	f100 0114 	add.w	r1, r0, #20
 801cc90:	f100 0210 	add.w	r2, r0, #16
 801cc94:	4618      	mov	r0, r3
 801cc96:	4553      	cmp	r3, sl
 801cc98:	db37      	blt.n	801cd0a <__lshift+0xbe>
 801cc9a:	6920      	ldr	r0, [r4, #16]
 801cc9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801cca0:	f104 0314 	add.w	r3, r4, #20
 801cca4:	f019 091f 	ands.w	r9, r9, #31
 801cca8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801ccac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801ccb0:	d02f      	beq.n	801cd12 <__lshift+0xc6>
 801ccb2:	f1c9 0e20 	rsb	lr, r9, #32
 801ccb6:	468a      	mov	sl, r1
 801ccb8:	f04f 0c00 	mov.w	ip, #0
 801ccbc:	681a      	ldr	r2, [r3, #0]
 801ccbe:	fa02 f209 	lsl.w	r2, r2, r9
 801ccc2:	ea42 020c 	orr.w	r2, r2, ip
 801ccc6:	f84a 2b04 	str.w	r2, [sl], #4
 801ccca:	f853 2b04 	ldr.w	r2, [r3], #4
 801ccce:	4298      	cmp	r0, r3
 801ccd0:	fa22 fc0e 	lsr.w	ip, r2, lr
 801ccd4:	d8f2      	bhi.n	801ccbc <__lshift+0x70>
 801ccd6:	1b03      	subs	r3, r0, r4
 801ccd8:	3b15      	subs	r3, #21
 801ccda:	f023 0303 	bic.w	r3, r3, #3
 801ccde:	3304      	adds	r3, #4
 801cce0:	f104 0215 	add.w	r2, r4, #21
 801cce4:	4290      	cmp	r0, r2
 801cce6:	bf38      	it	cc
 801cce8:	2304      	movcc	r3, #4
 801ccea:	f841 c003 	str.w	ip, [r1, r3]
 801ccee:	f1bc 0f00 	cmp.w	ip, #0
 801ccf2:	d001      	beq.n	801ccf8 <__lshift+0xac>
 801ccf4:	f108 0602 	add.w	r6, r8, #2
 801ccf8:	3e01      	subs	r6, #1
 801ccfa:	4638      	mov	r0, r7
 801ccfc:	612e      	str	r6, [r5, #16]
 801ccfe:	4621      	mov	r1, r4
 801cd00:	f7ff fd88 	bl	801c814 <_Bfree>
 801cd04:	4628      	mov	r0, r5
 801cd06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cd0a:	f842 0f04 	str.w	r0, [r2, #4]!
 801cd0e:	3301      	adds	r3, #1
 801cd10:	e7c1      	b.n	801cc96 <__lshift+0x4a>
 801cd12:	3904      	subs	r1, #4
 801cd14:	f853 2b04 	ldr.w	r2, [r3], #4
 801cd18:	f841 2f04 	str.w	r2, [r1, #4]!
 801cd1c:	4298      	cmp	r0, r3
 801cd1e:	d8f9      	bhi.n	801cd14 <__lshift+0xc8>
 801cd20:	e7ea      	b.n	801ccf8 <__lshift+0xac>
 801cd22:	bf00      	nop
 801cd24:	080523c0 	.word	0x080523c0
 801cd28:	0805244c 	.word	0x0805244c

0801cd2c <__mcmp>:
 801cd2c:	b530      	push	{r4, r5, lr}
 801cd2e:	6902      	ldr	r2, [r0, #16]
 801cd30:	690c      	ldr	r4, [r1, #16]
 801cd32:	1b12      	subs	r2, r2, r4
 801cd34:	d10e      	bne.n	801cd54 <__mcmp+0x28>
 801cd36:	f100 0314 	add.w	r3, r0, #20
 801cd3a:	3114      	adds	r1, #20
 801cd3c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801cd40:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801cd44:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801cd48:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801cd4c:	42a5      	cmp	r5, r4
 801cd4e:	d003      	beq.n	801cd58 <__mcmp+0x2c>
 801cd50:	d305      	bcc.n	801cd5e <__mcmp+0x32>
 801cd52:	2201      	movs	r2, #1
 801cd54:	4610      	mov	r0, r2
 801cd56:	bd30      	pop	{r4, r5, pc}
 801cd58:	4283      	cmp	r3, r0
 801cd5a:	d3f3      	bcc.n	801cd44 <__mcmp+0x18>
 801cd5c:	e7fa      	b.n	801cd54 <__mcmp+0x28>
 801cd5e:	f04f 32ff 	mov.w	r2, #4294967295
 801cd62:	e7f7      	b.n	801cd54 <__mcmp+0x28>

0801cd64 <__mdiff>:
 801cd64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd68:	460c      	mov	r4, r1
 801cd6a:	4606      	mov	r6, r0
 801cd6c:	4611      	mov	r1, r2
 801cd6e:	4620      	mov	r0, r4
 801cd70:	4690      	mov	r8, r2
 801cd72:	f7ff ffdb 	bl	801cd2c <__mcmp>
 801cd76:	1e05      	subs	r5, r0, #0
 801cd78:	d110      	bne.n	801cd9c <__mdiff+0x38>
 801cd7a:	4629      	mov	r1, r5
 801cd7c:	4630      	mov	r0, r6
 801cd7e:	f7ff fd09 	bl	801c794 <_Balloc>
 801cd82:	b930      	cbnz	r0, 801cd92 <__mdiff+0x2e>
 801cd84:	4b3a      	ldr	r3, [pc, #232]	; (801ce70 <__mdiff+0x10c>)
 801cd86:	4602      	mov	r2, r0
 801cd88:	f240 2132 	movw	r1, #562	; 0x232
 801cd8c:	4839      	ldr	r0, [pc, #228]	; (801ce74 <__mdiff+0x110>)
 801cd8e:	f000 fc51 	bl	801d634 <__assert_func>
 801cd92:	2301      	movs	r3, #1
 801cd94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801cd98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd9c:	bfa4      	itt	ge
 801cd9e:	4643      	movge	r3, r8
 801cda0:	46a0      	movge	r8, r4
 801cda2:	4630      	mov	r0, r6
 801cda4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801cda8:	bfa6      	itte	ge
 801cdaa:	461c      	movge	r4, r3
 801cdac:	2500      	movge	r5, #0
 801cdae:	2501      	movlt	r5, #1
 801cdb0:	f7ff fcf0 	bl	801c794 <_Balloc>
 801cdb4:	b920      	cbnz	r0, 801cdc0 <__mdiff+0x5c>
 801cdb6:	4b2e      	ldr	r3, [pc, #184]	; (801ce70 <__mdiff+0x10c>)
 801cdb8:	4602      	mov	r2, r0
 801cdba:	f44f 7110 	mov.w	r1, #576	; 0x240
 801cdbe:	e7e5      	b.n	801cd8c <__mdiff+0x28>
 801cdc0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801cdc4:	6926      	ldr	r6, [r4, #16]
 801cdc6:	60c5      	str	r5, [r0, #12]
 801cdc8:	f104 0914 	add.w	r9, r4, #20
 801cdcc:	f108 0514 	add.w	r5, r8, #20
 801cdd0:	f100 0e14 	add.w	lr, r0, #20
 801cdd4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801cdd8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801cddc:	f108 0210 	add.w	r2, r8, #16
 801cde0:	46f2      	mov	sl, lr
 801cde2:	2100      	movs	r1, #0
 801cde4:	f859 3b04 	ldr.w	r3, [r9], #4
 801cde8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801cdec:	fa1f f883 	uxth.w	r8, r3
 801cdf0:	fa11 f18b 	uxtah	r1, r1, fp
 801cdf4:	0c1b      	lsrs	r3, r3, #16
 801cdf6:	eba1 0808 	sub.w	r8, r1, r8
 801cdfa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801cdfe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801ce02:	fa1f f888 	uxth.w	r8, r8
 801ce06:	1419      	asrs	r1, r3, #16
 801ce08:	454e      	cmp	r6, r9
 801ce0a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801ce0e:	f84a 3b04 	str.w	r3, [sl], #4
 801ce12:	d8e7      	bhi.n	801cde4 <__mdiff+0x80>
 801ce14:	1b33      	subs	r3, r6, r4
 801ce16:	3b15      	subs	r3, #21
 801ce18:	f023 0303 	bic.w	r3, r3, #3
 801ce1c:	3304      	adds	r3, #4
 801ce1e:	3415      	adds	r4, #21
 801ce20:	42a6      	cmp	r6, r4
 801ce22:	bf38      	it	cc
 801ce24:	2304      	movcc	r3, #4
 801ce26:	441d      	add	r5, r3
 801ce28:	4473      	add	r3, lr
 801ce2a:	469e      	mov	lr, r3
 801ce2c:	462e      	mov	r6, r5
 801ce2e:	4566      	cmp	r6, ip
 801ce30:	d30e      	bcc.n	801ce50 <__mdiff+0xec>
 801ce32:	f10c 0203 	add.w	r2, ip, #3
 801ce36:	1b52      	subs	r2, r2, r5
 801ce38:	f022 0203 	bic.w	r2, r2, #3
 801ce3c:	3d03      	subs	r5, #3
 801ce3e:	45ac      	cmp	ip, r5
 801ce40:	bf38      	it	cc
 801ce42:	2200      	movcc	r2, #0
 801ce44:	441a      	add	r2, r3
 801ce46:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801ce4a:	b17b      	cbz	r3, 801ce6c <__mdiff+0x108>
 801ce4c:	6107      	str	r7, [r0, #16]
 801ce4e:	e7a3      	b.n	801cd98 <__mdiff+0x34>
 801ce50:	f856 8b04 	ldr.w	r8, [r6], #4
 801ce54:	fa11 f288 	uxtah	r2, r1, r8
 801ce58:	1414      	asrs	r4, r2, #16
 801ce5a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801ce5e:	b292      	uxth	r2, r2
 801ce60:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801ce64:	f84e 2b04 	str.w	r2, [lr], #4
 801ce68:	1421      	asrs	r1, r4, #16
 801ce6a:	e7e0      	b.n	801ce2e <__mdiff+0xca>
 801ce6c:	3f01      	subs	r7, #1
 801ce6e:	e7ea      	b.n	801ce46 <__mdiff+0xe2>
 801ce70:	080523c0 	.word	0x080523c0
 801ce74:	0805244c 	.word	0x0805244c

0801ce78 <__ulp>:
 801ce78:	b082      	sub	sp, #8
 801ce7a:	ed8d 0b00 	vstr	d0, [sp]
 801ce7e:	9b01      	ldr	r3, [sp, #4]
 801ce80:	4912      	ldr	r1, [pc, #72]	; (801cecc <__ulp+0x54>)
 801ce82:	4019      	ands	r1, r3
 801ce84:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801ce88:	2900      	cmp	r1, #0
 801ce8a:	dd05      	ble.n	801ce98 <__ulp+0x20>
 801ce8c:	2200      	movs	r2, #0
 801ce8e:	460b      	mov	r3, r1
 801ce90:	ec43 2b10 	vmov	d0, r2, r3
 801ce94:	b002      	add	sp, #8
 801ce96:	4770      	bx	lr
 801ce98:	4249      	negs	r1, r1
 801ce9a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801ce9e:	ea4f 5021 	mov.w	r0, r1, asr #20
 801cea2:	f04f 0200 	mov.w	r2, #0
 801cea6:	f04f 0300 	mov.w	r3, #0
 801ceaa:	da04      	bge.n	801ceb6 <__ulp+0x3e>
 801ceac:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801ceb0:	fa41 f300 	asr.w	r3, r1, r0
 801ceb4:	e7ec      	b.n	801ce90 <__ulp+0x18>
 801ceb6:	f1a0 0114 	sub.w	r1, r0, #20
 801ceba:	291e      	cmp	r1, #30
 801cebc:	bfda      	itte	le
 801cebe:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801cec2:	fa20 f101 	lsrle.w	r1, r0, r1
 801cec6:	2101      	movgt	r1, #1
 801cec8:	460a      	mov	r2, r1
 801ceca:	e7e1      	b.n	801ce90 <__ulp+0x18>
 801cecc:	7ff00000 	.word	0x7ff00000

0801ced0 <__b2d>:
 801ced0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ced2:	6905      	ldr	r5, [r0, #16]
 801ced4:	f100 0714 	add.w	r7, r0, #20
 801ced8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801cedc:	1f2e      	subs	r6, r5, #4
 801cede:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801cee2:	4620      	mov	r0, r4
 801cee4:	f7ff fd48 	bl	801c978 <__hi0bits>
 801cee8:	f1c0 0320 	rsb	r3, r0, #32
 801ceec:	280a      	cmp	r0, #10
 801ceee:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801cf6c <__b2d+0x9c>
 801cef2:	600b      	str	r3, [r1, #0]
 801cef4:	dc14      	bgt.n	801cf20 <__b2d+0x50>
 801cef6:	f1c0 0e0b 	rsb	lr, r0, #11
 801cefa:	fa24 f10e 	lsr.w	r1, r4, lr
 801cefe:	42b7      	cmp	r7, r6
 801cf00:	ea41 030c 	orr.w	r3, r1, ip
 801cf04:	bf34      	ite	cc
 801cf06:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801cf0a:	2100      	movcs	r1, #0
 801cf0c:	3015      	adds	r0, #21
 801cf0e:	fa04 f000 	lsl.w	r0, r4, r0
 801cf12:	fa21 f10e 	lsr.w	r1, r1, lr
 801cf16:	ea40 0201 	orr.w	r2, r0, r1
 801cf1a:	ec43 2b10 	vmov	d0, r2, r3
 801cf1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cf20:	42b7      	cmp	r7, r6
 801cf22:	bf3a      	itte	cc
 801cf24:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801cf28:	f1a5 0608 	subcc.w	r6, r5, #8
 801cf2c:	2100      	movcs	r1, #0
 801cf2e:	380b      	subs	r0, #11
 801cf30:	d017      	beq.n	801cf62 <__b2d+0x92>
 801cf32:	f1c0 0c20 	rsb	ip, r0, #32
 801cf36:	fa04 f500 	lsl.w	r5, r4, r0
 801cf3a:	42be      	cmp	r6, r7
 801cf3c:	fa21 f40c 	lsr.w	r4, r1, ip
 801cf40:	ea45 0504 	orr.w	r5, r5, r4
 801cf44:	bf8c      	ite	hi
 801cf46:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801cf4a:	2400      	movls	r4, #0
 801cf4c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801cf50:	fa01 f000 	lsl.w	r0, r1, r0
 801cf54:	fa24 f40c 	lsr.w	r4, r4, ip
 801cf58:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801cf5c:	ea40 0204 	orr.w	r2, r0, r4
 801cf60:	e7db      	b.n	801cf1a <__b2d+0x4a>
 801cf62:	ea44 030c 	orr.w	r3, r4, ip
 801cf66:	460a      	mov	r2, r1
 801cf68:	e7d7      	b.n	801cf1a <__b2d+0x4a>
 801cf6a:	bf00      	nop
 801cf6c:	3ff00000 	.word	0x3ff00000

0801cf70 <__d2b>:
 801cf70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801cf74:	4689      	mov	r9, r1
 801cf76:	2101      	movs	r1, #1
 801cf78:	ec57 6b10 	vmov	r6, r7, d0
 801cf7c:	4690      	mov	r8, r2
 801cf7e:	f7ff fc09 	bl	801c794 <_Balloc>
 801cf82:	4604      	mov	r4, r0
 801cf84:	b930      	cbnz	r0, 801cf94 <__d2b+0x24>
 801cf86:	4602      	mov	r2, r0
 801cf88:	4b25      	ldr	r3, [pc, #148]	; (801d020 <__d2b+0xb0>)
 801cf8a:	4826      	ldr	r0, [pc, #152]	; (801d024 <__d2b+0xb4>)
 801cf8c:	f240 310a 	movw	r1, #778	; 0x30a
 801cf90:	f000 fb50 	bl	801d634 <__assert_func>
 801cf94:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801cf98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801cf9c:	bb35      	cbnz	r5, 801cfec <__d2b+0x7c>
 801cf9e:	2e00      	cmp	r6, #0
 801cfa0:	9301      	str	r3, [sp, #4]
 801cfa2:	d028      	beq.n	801cff6 <__d2b+0x86>
 801cfa4:	4668      	mov	r0, sp
 801cfa6:	9600      	str	r6, [sp, #0]
 801cfa8:	f7ff fd06 	bl	801c9b8 <__lo0bits>
 801cfac:	9900      	ldr	r1, [sp, #0]
 801cfae:	b300      	cbz	r0, 801cff2 <__d2b+0x82>
 801cfb0:	9a01      	ldr	r2, [sp, #4]
 801cfb2:	f1c0 0320 	rsb	r3, r0, #32
 801cfb6:	fa02 f303 	lsl.w	r3, r2, r3
 801cfba:	430b      	orrs	r3, r1
 801cfbc:	40c2      	lsrs	r2, r0
 801cfbe:	6163      	str	r3, [r4, #20]
 801cfc0:	9201      	str	r2, [sp, #4]
 801cfc2:	9b01      	ldr	r3, [sp, #4]
 801cfc4:	61a3      	str	r3, [r4, #24]
 801cfc6:	2b00      	cmp	r3, #0
 801cfc8:	bf14      	ite	ne
 801cfca:	2202      	movne	r2, #2
 801cfcc:	2201      	moveq	r2, #1
 801cfce:	6122      	str	r2, [r4, #16]
 801cfd0:	b1d5      	cbz	r5, 801d008 <__d2b+0x98>
 801cfd2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801cfd6:	4405      	add	r5, r0
 801cfd8:	f8c9 5000 	str.w	r5, [r9]
 801cfdc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801cfe0:	f8c8 0000 	str.w	r0, [r8]
 801cfe4:	4620      	mov	r0, r4
 801cfe6:	b003      	add	sp, #12
 801cfe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cfec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801cff0:	e7d5      	b.n	801cf9e <__d2b+0x2e>
 801cff2:	6161      	str	r1, [r4, #20]
 801cff4:	e7e5      	b.n	801cfc2 <__d2b+0x52>
 801cff6:	a801      	add	r0, sp, #4
 801cff8:	f7ff fcde 	bl	801c9b8 <__lo0bits>
 801cffc:	9b01      	ldr	r3, [sp, #4]
 801cffe:	6163      	str	r3, [r4, #20]
 801d000:	2201      	movs	r2, #1
 801d002:	6122      	str	r2, [r4, #16]
 801d004:	3020      	adds	r0, #32
 801d006:	e7e3      	b.n	801cfd0 <__d2b+0x60>
 801d008:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d00c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801d010:	f8c9 0000 	str.w	r0, [r9]
 801d014:	6918      	ldr	r0, [r3, #16]
 801d016:	f7ff fcaf 	bl	801c978 <__hi0bits>
 801d01a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d01e:	e7df      	b.n	801cfe0 <__d2b+0x70>
 801d020:	080523c0 	.word	0x080523c0
 801d024:	0805244c 	.word	0x0805244c

0801d028 <__ratio>:
 801d028:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d02c:	4688      	mov	r8, r1
 801d02e:	4669      	mov	r1, sp
 801d030:	4681      	mov	r9, r0
 801d032:	f7ff ff4d 	bl	801ced0 <__b2d>
 801d036:	a901      	add	r1, sp, #4
 801d038:	4640      	mov	r0, r8
 801d03a:	ec55 4b10 	vmov	r4, r5, d0
 801d03e:	f7ff ff47 	bl	801ced0 <__b2d>
 801d042:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d046:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801d04a:	eba3 0c02 	sub.w	ip, r3, r2
 801d04e:	e9dd 3200 	ldrd	r3, r2, [sp]
 801d052:	1a9b      	subs	r3, r3, r2
 801d054:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801d058:	ec51 0b10 	vmov	r0, r1, d0
 801d05c:	2b00      	cmp	r3, #0
 801d05e:	bfd6      	itet	le
 801d060:	460a      	movle	r2, r1
 801d062:	462a      	movgt	r2, r5
 801d064:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801d068:	468b      	mov	fp, r1
 801d06a:	462f      	mov	r7, r5
 801d06c:	bfd4      	ite	le
 801d06e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801d072:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801d076:	4620      	mov	r0, r4
 801d078:	ee10 2a10 	vmov	r2, s0
 801d07c:	465b      	mov	r3, fp
 801d07e:	4639      	mov	r1, r7
 801d080:	f7fb ffe4 	bl	801904c <__aeabi_ddiv>
 801d084:	ec41 0b10 	vmov	d0, r0, r1
 801d088:	b003      	add	sp, #12
 801d08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d08e <__copybits>:
 801d08e:	3901      	subs	r1, #1
 801d090:	b570      	push	{r4, r5, r6, lr}
 801d092:	1149      	asrs	r1, r1, #5
 801d094:	6914      	ldr	r4, [r2, #16]
 801d096:	3101      	adds	r1, #1
 801d098:	f102 0314 	add.w	r3, r2, #20
 801d09c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801d0a0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801d0a4:	1f05      	subs	r5, r0, #4
 801d0a6:	42a3      	cmp	r3, r4
 801d0a8:	d30c      	bcc.n	801d0c4 <__copybits+0x36>
 801d0aa:	1aa3      	subs	r3, r4, r2
 801d0ac:	3b11      	subs	r3, #17
 801d0ae:	f023 0303 	bic.w	r3, r3, #3
 801d0b2:	3211      	adds	r2, #17
 801d0b4:	42a2      	cmp	r2, r4
 801d0b6:	bf88      	it	hi
 801d0b8:	2300      	movhi	r3, #0
 801d0ba:	4418      	add	r0, r3
 801d0bc:	2300      	movs	r3, #0
 801d0be:	4288      	cmp	r0, r1
 801d0c0:	d305      	bcc.n	801d0ce <__copybits+0x40>
 801d0c2:	bd70      	pop	{r4, r5, r6, pc}
 801d0c4:	f853 6b04 	ldr.w	r6, [r3], #4
 801d0c8:	f845 6f04 	str.w	r6, [r5, #4]!
 801d0cc:	e7eb      	b.n	801d0a6 <__copybits+0x18>
 801d0ce:	f840 3b04 	str.w	r3, [r0], #4
 801d0d2:	e7f4      	b.n	801d0be <__copybits+0x30>

0801d0d4 <__any_on>:
 801d0d4:	f100 0214 	add.w	r2, r0, #20
 801d0d8:	6900      	ldr	r0, [r0, #16]
 801d0da:	114b      	asrs	r3, r1, #5
 801d0dc:	4298      	cmp	r0, r3
 801d0de:	b510      	push	{r4, lr}
 801d0e0:	db11      	blt.n	801d106 <__any_on+0x32>
 801d0e2:	dd0a      	ble.n	801d0fa <__any_on+0x26>
 801d0e4:	f011 011f 	ands.w	r1, r1, #31
 801d0e8:	d007      	beq.n	801d0fa <__any_on+0x26>
 801d0ea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801d0ee:	fa24 f001 	lsr.w	r0, r4, r1
 801d0f2:	fa00 f101 	lsl.w	r1, r0, r1
 801d0f6:	428c      	cmp	r4, r1
 801d0f8:	d10b      	bne.n	801d112 <__any_on+0x3e>
 801d0fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d0fe:	4293      	cmp	r3, r2
 801d100:	d803      	bhi.n	801d10a <__any_on+0x36>
 801d102:	2000      	movs	r0, #0
 801d104:	bd10      	pop	{r4, pc}
 801d106:	4603      	mov	r3, r0
 801d108:	e7f7      	b.n	801d0fa <__any_on+0x26>
 801d10a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d10e:	2900      	cmp	r1, #0
 801d110:	d0f5      	beq.n	801d0fe <__any_on+0x2a>
 801d112:	2001      	movs	r0, #1
 801d114:	e7f6      	b.n	801d104 <__any_on+0x30>

0801d116 <_calloc_r>:
 801d116:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d118:	fba1 2402 	umull	r2, r4, r1, r2
 801d11c:	b94c      	cbnz	r4, 801d132 <_calloc_r+0x1c>
 801d11e:	4611      	mov	r1, r2
 801d120:	9201      	str	r2, [sp, #4]
 801d122:	f000 f87b 	bl	801d21c <_malloc_r>
 801d126:	9a01      	ldr	r2, [sp, #4]
 801d128:	4605      	mov	r5, r0
 801d12a:	b930      	cbnz	r0, 801d13a <_calloc_r+0x24>
 801d12c:	4628      	mov	r0, r5
 801d12e:	b003      	add	sp, #12
 801d130:	bd30      	pop	{r4, r5, pc}
 801d132:	220c      	movs	r2, #12
 801d134:	6002      	str	r2, [r0, #0]
 801d136:	2500      	movs	r5, #0
 801d138:	e7f8      	b.n	801d12c <_calloc_r+0x16>
 801d13a:	4621      	mov	r1, r4
 801d13c:	f7fc fbb4 	bl	80198a8 <memset>
 801d140:	e7f4      	b.n	801d12c <_calloc_r+0x16>
	...

0801d144 <_free_r>:
 801d144:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d146:	2900      	cmp	r1, #0
 801d148:	d044      	beq.n	801d1d4 <_free_r+0x90>
 801d14a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d14e:	9001      	str	r0, [sp, #4]
 801d150:	2b00      	cmp	r3, #0
 801d152:	f1a1 0404 	sub.w	r4, r1, #4
 801d156:	bfb8      	it	lt
 801d158:	18e4      	addlt	r4, r4, r3
 801d15a:	f000 fab5 	bl	801d6c8 <__malloc_lock>
 801d15e:	4a1e      	ldr	r2, [pc, #120]	; (801d1d8 <_free_r+0x94>)
 801d160:	9801      	ldr	r0, [sp, #4]
 801d162:	6813      	ldr	r3, [r2, #0]
 801d164:	b933      	cbnz	r3, 801d174 <_free_r+0x30>
 801d166:	6063      	str	r3, [r4, #4]
 801d168:	6014      	str	r4, [r2, #0]
 801d16a:	b003      	add	sp, #12
 801d16c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d170:	f000 bab0 	b.w	801d6d4 <__malloc_unlock>
 801d174:	42a3      	cmp	r3, r4
 801d176:	d908      	bls.n	801d18a <_free_r+0x46>
 801d178:	6825      	ldr	r5, [r4, #0]
 801d17a:	1961      	adds	r1, r4, r5
 801d17c:	428b      	cmp	r3, r1
 801d17e:	bf01      	itttt	eq
 801d180:	6819      	ldreq	r1, [r3, #0]
 801d182:	685b      	ldreq	r3, [r3, #4]
 801d184:	1949      	addeq	r1, r1, r5
 801d186:	6021      	streq	r1, [r4, #0]
 801d188:	e7ed      	b.n	801d166 <_free_r+0x22>
 801d18a:	461a      	mov	r2, r3
 801d18c:	685b      	ldr	r3, [r3, #4]
 801d18e:	b10b      	cbz	r3, 801d194 <_free_r+0x50>
 801d190:	42a3      	cmp	r3, r4
 801d192:	d9fa      	bls.n	801d18a <_free_r+0x46>
 801d194:	6811      	ldr	r1, [r2, #0]
 801d196:	1855      	adds	r5, r2, r1
 801d198:	42a5      	cmp	r5, r4
 801d19a:	d10b      	bne.n	801d1b4 <_free_r+0x70>
 801d19c:	6824      	ldr	r4, [r4, #0]
 801d19e:	4421      	add	r1, r4
 801d1a0:	1854      	adds	r4, r2, r1
 801d1a2:	42a3      	cmp	r3, r4
 801d1a4:	6011      	str	r1, [r2, #0]
 801d1a6:	d1e0      	bne.n	801d16a <_free_r+0x26>
 801d1a8:	681c      	ldr	r4, [r3, #0]
 801d1aa:	685b      	ldr	r3, [r3, #4]
 801d1ac:	6053      	str	r3, [r2, #4]
 801d1ae:	4421      	add	r1, r4
 801d1b0:	6011      	str	r1, [r2, #0]
 801d1b2:	e7da      	b.n	801d16a <_free_r+0x26>
 801d1b4:	d902      	bls.n	801d1bc <_free_r+0x78>
 801d1b6:	230c      	movs	r3, #12
 801d1b8:	6003      	str	r3, [r0, #0]
 801d1ba:	e7d6      	b.n	801d16a <_free_r+0x26>
 801d1bc:	6825      	ldr	r5, [r4, #0]
 801d1be:	1961      	adds	r1, r4, r5
 801d1c0:	428b      	cmp	r3, r1
 801d1c2:	bf04      	itt	eq
 801d1c4:	6819      	ldreq	r1, [r3, #0]
 801d1c6:	685b      	ldreq	r3, [r3, #4]
 801d1c8:	6063      	str	r3, [r4, #4]
 801d1ca:	bf04      	itt	eq
 801d1cc:	1949      	addeq	r1, r1, r5
 801d1ce:	6021      	streq	r1, [r4, #0]
 801d1d0:	6054      	str	r4, [r2, #4]
 801d1d2:	e7ca      	b.n	801d16a <_free_r+0x26>
 801d1d4:	b003      	add	sp, #12
 801d1d6:	bd30      	pop	{r4, r5, pc}
 801d1d8:	20000dbc 	.word	0x20000dbc

0801d1dc <sbrk_aligned>:
 801d1dc:	b570      	push	{r4, r5, r6, lr}
 801d1de:	4e0e      	ldr	r6, [pc, #56]	; (801d218 <sbrk_aligned+0x3c>)
 801d1e0:	460c      	mov	r4, r1
 801d1e2:	6831      	ldr	r1, [r6, #0]
 801d1e4:	4605      	mov	r5, r0
 801d1e6:	b911      	cbnz	r1, 801d1ee <sbrk_aligned+0x12>
 801d1e8:	f000 f9f2 	bl	801d5d0 <_sbrk_r>
 801d1ec:	6030      	str	r0, [r6, #0]
 801d1ee:	4621      	mov	r1, r4
 801d1f0:	4628      	mov	r0, r5
 801d1f2:	f000 f9ed 	bl	801d5d0 <_sbrk_r>
 801d1f6:	1c43      	adds	r3, r0, #1
 801d1f8:	d00a      	beq.n	801d210 <sbrk_aligned+0x34>
 801d1fa:	1cc4      	adds	r4, r0, #3
 801d1fc:	f024 0403 	bic.w	r4, r4, #3
 801d200:	42a0      	cmp	r0, r4
 801d202:	d007      	beq.n	801d214 <sbrk_aligned+0x38>
 801d204:	1a21      	subs	r1, r4, r0
 801d206:	4628      	mov	r0, r5
 801d208:	f000 f9e2 	bl	801d5d0 <_sbrk_r>
 801d20c:	3001      	adds	r0, #1
 801d20e:	d101      	bne.n	801d214 <sbrk_aligned+0x38>
 801d210:	f04f 34ff 	mov.w	r4, #4294967295
 801d214:	4620      	mov	r0, r4
 801d216:	bd70      	pop	{r4, r5, r6, pc}
 801d218:	20000dc0 	.word	0x20000dc0

0801d21c <_malloc_r>:
 801d21c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d220:	1ccd      	adds	r5, r1, #3
 801d222:	f025 0503 	bic.w	r5, r5, #3
 801d226:	3508      	adds	r5, #8
 801d228:	2d0c      	cmp	r5, #12
 801d22a:	bf38      	it	cc
 801d22c:	250c      	movcc	r5, #12
 801d22e:	2d00      	cmp	r5, #0
 801d230:	4607      	mov	r7, r0
 801d232:	db01      	blt.n	801d238 <_malloc_r+0x1c>
 801d234:	42a9      	cmp	r1, r5
 801d236:	d905      	bls.n	801d244 <_malloc_r+0x28>
 801d238:	230c      	movs	r3, #12
 801d23a:	603b      	str	r3, [r7, #0]
 801d23c:	2600      	movs	r6, #0
 801d23e:	4630      	mov	r0, r6
 801d240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d244:	4e2e      	ldr	r6, [pc, #184]	; (801d300 <_malloc_r+0xe4>)
 801d246:	f000 fa3f 	bl	801d6c8 <__malloc_lock>
 801d24a:	6833      	ldr	r3, [r6, #0]
 801d24c:	461c      	mov	r4, r3
 801d24e:	bb34      	cbnz	r4, 801d29e <_malloc_r+0x82>
 801d250:	4629      	mov	r1, r5
 801d252:	4638      	mov	r0, r7
 801d254:	f7ff ffc2 	bl	801d1dc <sbrk_aligned>
 801d258:	1c43      	adds	r3, r0, #1
 801d25a:	4604      	mov	r4, r0
 801d25c:	d14d      	bne.n	801d2fa <_malloc_r+0xde>
 801d25e:	6834      	ldr	r4, [r6, #0]
 801d260:	4626      	mov	r6, r4
 801d262:	2e00      	cmp	r6, #0
 801d264:	d140      	bne.n	801d2e8 <_malloc_r+0xcc>
 801d266:	6823      	ldr	r3, [r4, #0]
 801d268:	4631      	mov	r1, r6
 801d26a:	4638      	mov	r0, r7
 801d26c:	eb04 0803 	add.w	r8, r4, r3
 801d270:	f000 f9ae 	bl	801d5d0 <_sbrk_r>
 801d274:	4580      	cmp	r8, r0
 801d276:	d13a      	bne.n	801d2ee <_malloc_r+0xd2>
 801d278:	6821      	ldr	r1, [r4, #0]
 801d27a:	3503      	adds	r5, #3
 801d27c:	1a6d      	subs	r5, r5, r1
 801d27e:	f025 0503 	bic.w	r5, r5, #3
 801d282:	3508      	adds	r5, #8
 801d284:	2d0c      	cmp	r5, #12
 801d286:	bf38      	it	cc
 801d288:	250c      	movcc	r5, #12
 801d28a:	4629      	mov	r1, r5
 801d28c:	4638      	mov	r0, r7
 801d28e:	f7ff ffa5 	bl	801d1dc <sbrk_aligned>
 801d292:	3001      	adds	r0, #1
 801d294:	d02b      	beq.n	801d2ee <_malloc_r+0xd2>
 801d296:	6823      	ldr	r3, [r4, #0]
 801d298:	442b      	add	r3, r5
 801d29a:	6023      	str	r3, [r4, #0]
 801d29c:	e00e      	b.n	801d2bc <_malloc_r+0xa0>
 801d29e:	6822      	ldr	r2, [r4, #0]
 801d2a0:	1b52      	subs	r2, r2, r5
 801d2a2:	d41e      	bmi.n	801d2e2 <_malloc_r+0xc6>
 801d2a4:	2a0b      	cmp	r2, #11
 801d2a6:	d916      	bls.n	801d2d6 <_malloc_r+0xba>
 801d2a8:	1961      	adds	r1, r4, r5
 801d2aa:	42a3      	cmp	r3, r4
 801d2ac:	6025      	str	r5, [r4, #0]
 801d2ae:	bf18      	it	ne
 801d2b0:	6059      	strne	r1, [r3, #4]
 801d2b2:	6863      	ldr	r3, [r4, #4]
 801d2b4:	bf08      	it	eq
 801d2b6:	6031      	streq	r1, [r6, #0]
 801d2b8:	5162      	str	r2, [r4, r5]
 801d2ba:	604b      	str	r3, [r1, #4]
 801d2bc:	4638      	mov	r0, r7
 801d2be:	f104 060b 	add.w	r6, r4, #11
 801d2c2:	f000 fa07 	bl	801d6d4 <__malloc_unlock>
 801d2c6:	f026 0607 	bic.w	r6, r6, #7
 801d2ca:	1d23      	adds	r3, r4, #4
 801d2cc:	1af2      	subs	r2, r6, r3
 801d2ce:	d0b6      	beq.n	801d23e <_malloc_r+0x22>
 801d2d0:	1b9b      	subs	r3, r3, r6
 801d2d2:	50a3      	str	r3, [r4, r2]
 801d2d4:	e7b3      	b.n	801d23e <_malloc_r+0x22>
 801d2d6:	6862      	ldr	r2, [r4, #4]
 801d2d8:	42a3      	cmp	r3, r4
 801d2da:	bf0c      	ite	eq
 801d2dc:	6032      	streq	r2, [r6, #0]
 801d2de:	605a      	strne	r2, [r3, #4]
 801d2e0:	e7ec      	b.n	801d2bc <_malloc_r+0xa0>
 801d2e2:	4623      	mov	r3, r4
 801d2e4:	6864      	ldr	r4, [r4, #4]
 801d2e6:	e7b2      	b.n	801d24e <_malloc_r+0x32>
 801d2e8:	4634      	mov	r4, r6
 801d2ea:	6876      	ldr	r6, [r6, #4]
 801d2ec:	e7b9      	b.n	801d262 <_malloc_r+0x46>
 801d2ee:	230c      	movs	r3, #12
 801d2f0:	603b      	str	r3, [r7, #0]
 801d2f2:	4638      	mov	r0, r7
 801d2f4:	f000 f9ee 	bl	801d6d4 <__malloc_unlock>
 801d2f8:	e7a1      	b.n	801d23e <_malloc_r+0x22>
 801d2fa:	6025      	str	r5, [r4, #0]
 801d2fc:	e7de      	b.n	801d2bc <_malloc_r+0xa0>
 801d2fe:	bf00      	nop
 801d300:	20000dbc 	.word	0x20000dbc

0801d304 <__ssputs_r>:
 801d304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d308:	688e      	ldr	r6, [r1, #8]
 801d30a:	429e      	cmp	r6, r3
 801d30c:	4682      	mov	sl, r0
 801d30e:	460c      	mov	r4, r1
 801d310:	4690      	mov	r8, r2
 801d312:	461f      	mov	r7, r3
 801d314:	d838      	bhi.n	801d388 <__ssputs_r+0x84>
 801d316:	898a      	ldrh	r2, [r1, #12]
 801d318:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801d31c:	d032      	beq.n	801d384 <__ssputs_r+0x80>
 801d31e:	6825      	ldr	r5, [r4, #0]
 801d320:	6909      	ldr	r1, [r1, #16]
 801d322:	eba5 0901 	sub.w	r9, r5, r1
 801d326:	6965      	ldr	r5, [r4, #20]
 801d328:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d32c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d330:	3301      	adds	r3, #1
 801d332:	444b      	add	r3, r9
 801d334:	106d      	asrs	r5, r5, #1
 801d336:	429d      	cmp	r5, r3
 801d338:	bf38      	it	cc
 801d33a:	461d      	movcc	r5, r3
 801d33c:	0553      	lsls	r3, r2, #21
 801d33e:	d531      	bpl.n	801d3a4 <__ssputs_r+0xa0>
 801d340:	4629      	mov	r1, r5
 801d342:	f7ff ff6b 	bl	801d21c <_malloc_r>
 801d346:	4606      	mov	r6, r0
 801d348:	b950      	cbnz	r0, 801d360 <__ssputs_r+0x5c>
 801d34a:	230c      	movs	r3, #12
 801d34c:	f8ca 3000 	str.w	r3, [sl]
 801d350:	89a3      	ldrh	r3, [r4, #12]
 801d352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d356:	81a3      	strh	r3, [r4, #12]
 801d358:	f04f 30ff 	mov.w	r0, #4294967295
 801d35c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d360:	6921      	ldr	r1, [r4, #16]
 801d362:	464a      	mov	r2, r9
 801d364:	f7ff fa08 	bl	801c778 <memcpy>
 801d368:	89a3      	ldrh	r3, [r4, #12]
 801d36a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801d36e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d372:	81a3      	strh	r3, [r4, #12]
 801d374:	6126      	str	r6, [r4, #16]
 801d376:	6165      	str	r5, [r4, #20]
 801d378:	444e      	add	r6, r9
 801d37a:	eba5 0509 	sub.w	r5, r5, r9
 801d37e:	6026      	str	r6, [r4, #0]
 801d380:	60a5      	str	r5, [r4, #8]
 801d382:	463e      	mov	r6, r7
 801d384:	42be      	cmp	r6, r7
 801d386:	d900      	bls.n	801d38a <__ssputs_r+0x86>
 801d388:	463e      	mov	r6, r7
 801d38a:	6820      	ldr	r0, [r4, #0]
 801d38c:	4632      	mov	r2, r6
 801d38e:	4641      	mov	r1, r8
 801d390:	f000 f980 	bl	801d694 <memmove>
 801d394:	68a3      	ldr	r3, [r4, #8]
 801d396:	1b9b      	subs	r3, r3, r6
 801d398:	60a3      	str	r3, [r4, #8]
 801d39a:	6823      	ldr	r3, [r4, #0]
 801d39c:	4433      	add	r3, r6
 801d39e:	6023      	str	r3, [r4, #0]
 801d3a0:	2000      	movs	r0, #0
 801d3a2:	e7db      	b.n	801d35c <__ssputs_r+0x58>
 801d3a4:	462a      	mov	r2, r5
 801d3a6:	f000 f99b 	bl	801d6e0 <_realloc_r>
 801d3aa:	4606      	mov	r6, r0
 801d3ac:	2800      	cmp	r0, #0
 801d3ae:	d1e1      	bne.n	801d374 <__ssputs_r+0x70>
 801d3b0:	6921      	ldr	r1, [r4, #16]
 801d3b2:	4650      	mov	r0, sl
 801d3b4:	f7ff fec6 	bl	801d144 <_free_r>
 801d3b8:	e7c7      	b.n	801d34a <__ssputs_r+0x46>
	...

0801d3bc <_svfiprintf_r>:
 801d3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d3c0:	4698      	mov	r8, r3
 801d3c2:	898b      	ldrh	r3, [r1, #12]
 801d3c4:	061b      	lsls	r3, r3, #24
 801d3c6:	b09d      	sub	sp, #116	; 0x74
 801d3c8:	4607      	mov	r7, r0
 801d3ca:	460d      	mov	r5, r1
 801d3cc:	4614      	mov	r4, r2
 801d3ce:	d50e      	bpl.n	801d3ee <_svfiprintf_r+0x32>
 801d3d0:	690b      	ldr	r3, [r1, #16]
 801d3d2:	b963      	cbnz	r3, 801d3ee <_svfiprintf_r+0x32>
 801d3d4:	2140      	movs	r1, #64	; 0x40
 801d3d6:	f7ff ff21 	bl	801d21c <_malloc_r>
 801d3da:	6028      	str	r0, [r5, #0]
 801d3dc:	6128      	str	r0, [r5, #16]
 801d3de:	b920      	cbnz	r0, 801d3ea <_svfiprintf_r+0x2e>
 801d3e0:	230c      	movs	r3, #12
 801d3e2:	603b      	str	r3, [r7, #0]
 801d3e4:	f04f 30ff 	mov.w	r0, #4294967295
 801d3e8:	e0d1      	b.n	801d58e <_svfiprintf_r+0x1d2>
 801d3ea:	2340      	movs	r3, #64	; 0x40
 801d3ec:	616b      	str	r3, [r5, #20]
 801d3ee:	2300      	movs	r3, #0
 801d3f0:	9309      	str	r3, [sp, #36]	; 0x24
 801d3f2:	2320      	movs	r3, #32
 801d3f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d3f8:	f8cd 800c 	str.w	r8, [sp, #12]
 801d3fc:	2330      	movs	r3, #48	; 0x30
 801d3fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801d5a8 <_svfiprintf_r+0x1ec>
 801d402:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d406:	f04f 0901 	mov.w	r9, #1
 801d40a:	4623      	mov	r3, r4
 801d40c:	469a      	mov	sl, r3
 801d40e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d412:	b10a      	cbz	r2, 801d418 <_svfiprintf_r+0x5c>
 801d414:	2a25      	cmp	r2, #37	; 0x25
 801d416:	d1f9      	bne.n	801d40c <_svfiprintf_r+0x50>
 801d418:	ebba 0b04 	subs.w	fp, sl, r4
 801d41c:	d00b      	beq.n	801d436 <_svfiprintf_r+0x7a>
 801d41e:	465b      	mov	r3, fp
 801d420:	4622      	mov	r2, r4
 801d422:	4629      	mov	r1, r5
 801d424:	4638      	mov	r0, r7
 801d426:	f7ff ff6d 	bl	801d304 <__ssputs_r>
 801d42a:	3001      	adds	r0, #1
 801d42c:	f000 80aa 	beq.w	801d584 <_svfiprintf_r+0x1c8>
 801d430:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d432:	445a      	add	r2, fp
 801d434:	9209      	str	r2, [sp, #36]	; 0x24
 801d436:	f89a 3000 	ldrb.w	r3, [sl]
 801d43a:	2b00      	cmp	r3, #0
 801d43c:	f000 80a2 	beq.w	801d584 <_svfiprintf_r+0x1c8>
 801d440:	2300      	movs	r3, #0
 801d442:	f04f 32ff 	mov.w	r2, #4294967295
 801d446:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d44a:	f10a 0a01 	add.w	sl, sl, #1
 801d44e:	9304      	str	r3, [sp, #16]
 801d450:	9307      	str	r3, [sp, #28]
 801d452:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d456:	931a      	str	r3, [sp, #104]	; 0x68
 801d458:	4654      	mov	r4, sl
 801d45a:	2205      	movs	r2, #5
 801d45c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d460:	4851      	ldr	r0, [pc, #324]	; (801d5a8 <_svfiprintf_r+0x1ec>)
 801d462:	f7fb fabd 	bl	80189e0 <memchr>
 801d466:	9a04      	ldr	r2, [sp, #16]
 801d468:	b9d8      	cbnz	r0, 801d4a2 <_svfiprintf_r+0xe6>
 801d46a:	06d0      	lsls	r0, r2, #27
 801d46c:	bf44      	itt	mi
 801d46e:	2320      	movmi	r3, #32
 801d470:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d474:	0711      	lsls	r1, r2, #28
 801d476:	bf44      	itt	mi
 801d478:	232b      	movmi	r3, #43	; 0x2b
 801d47a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d47e:	f89a 3000 	ldrb.w	r3, [sl]
 801d482:	2b2a      	cmp	r3, #42	; 0x2a
 801d484:	d015      	beq.n	801d4b2 <_svfiprintf_r+0xf6>
 801d486:	9a07      	ldr	r2, [sp, #28]
 801d488:	4654      	mov	r4, sl
 801d48a:	2000      	movs	r0, #0
 801d48c:	f04f 0c0a 	mov.w	ip, #10
 801d490:	4621      	mov	r1, r4
 801d492:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d496:	3b30      	subs	r3, #48	; 0x30
 801d498:	2b09      	cmp	r3, #9
 801d49a:	d94e      	bls.n	801d53a <_svfiprintf_r+0x17e>
 801d49c:	b1b0      	cbz	r0, 801d4cc <_svfiprintf_r+0x110>
 801d49e:	9207      	str	r2, [sp, #28]
 801d4a0:	e014      	b.n	801d4cc <_svfiprintf_r+0x110>
 801d4a2:	eba0 0308 	sub.w	r3, r0, r8
 801d4a6:	fa09 f303 	lsl.w	r3, r9, r3
 801d4aa:	4313      	orrs	r3, r2
 801d4ac:	9304      	str	r3, [sp, #16]
 801d4ae:	46a2      	mov	sl, r4
 801d4b0:	e7d2      	b.n	801d458 <_svfiprintf_r+0x9c>
 801d4b2:	9b03      	ldr	r3, [sp, #12]
 801d4b4:	1d19      	adds	r1, r3, #4
 801d4b6:	681b      	ldr	r3, [r3, #0]
 801d4b8:	9103      	str	r1, [sp, #12]
 801d4ba:	2b00      	cmp	r3, #0
 801d4bc:	bfbb      	ittet	lt
 801d4be:	425b      	neglt	r3, r3
 801d4c0:	f042 0202 	orrlt.w	r2, r2, #2
 801d4c4:	9307      	strge	r3, [sp, #28]
 801d4c6:	9307      	strlt	r3, [sp, #28]
 801d4c8:	bfb8      	it	lt
 801d4ca:	9204      	strlt	r2, [sp, #16]
 801d4cc:	7823      	ldrb	r3, [r4, #0]
 801d4ce:	2b2e      	cmp	r3, #46	; 0x2e
 801d4d0:	d10c      	bne.n	801d4ec <_svfiprintf_r+0x130>
 801d4d2:	7863      	ldrb	r3, [r4, #1]
 801d4d4:	2b2a      	cmp	r3, #42	; 0x2a
 801d4d6:	d135      	bne.n	801d544 <_svfiprintf_r+0x188>
 801d4d8:	9b03      	ldr	r3, [sp, #12]
 801d4da:	1d1a      	adds	r2, r3, #4
 801d4dc:	681b      	ldr	r3, [r3, #0]
 801d4de:	9203      	str	r2, [sp, #12]
 801d4e0:	2b00      	cmp	r3, #0
 801d4e2:	bfb8      	it	lt
 801d4e4:	f04f 33ff 	movlt.w	r3, #4294967295
 801d4e8:	3402      	adds	r4, #2
 801d4ea:	9305      	str	r3, [sp, #20]
 801d4ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801d5b8 <_svfiprintf_r+0x1fc>
 801d4f0:	7821      	ldrb	r1, [r4, #0]
 801d4f2:	2203      	movs	r2, #3
 801d4f4:	4650      	mov	r0, sl
 801d4f6:	f7fb fa73 	bl	80189e0 <memchr>
 801d4fa:	b140      	cbz	r0, 801d50e <_svfiprintf_r+0x152>
 801d4fc:	2340      	movs	r3, #64	; 0x40
 801d4fe:	eba0 000a 	sub.w	r0, r0, sl
 801d502:	fa03 f000 	lsl.w	r0, r3, r0
 801d506:	9b04      	ldr	r3, [sp, #16]
 801d508:	4303      	orrs	r3, r0
 801d50a:	3401      	adds	r4, #1
 801d50c:	9304      	str	r3, [sp, #16]
 801d50e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d512:	4826      	ldr	r0, [pc, #152]	; (801d5ac <_svfiprintf_r+0x1f0>)
 801d514:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d518:	2206      	movs	r2, #6
 801d51a:	f7fb fa61 	bl	80189e0 <memchr>
 801d51e:	2800      	cmp	r0, #0
 801d520:	d038      	beq.n	801d594 <_svfiprintf_r+0x1d8>
 801d522:	4b23      	ldr	r3, [pc, #140]	; (801d5b0 <_svfiprintf_r+0x1f4>)
 801d524:	bb1b      	cbnz	r3, 801d56e <_svfiprintf_r+0x1b2>
 801d526:	9b03      	ldr	r3, [sp, #12]
 801d528:	3307      	adds	r3, #7
 801d52a:	f023 0307 	bic.w	r3, r3, #7
 801d52e:	3308      	adds	r3, #8
 801d530:	9303      	str	r3, [sp, #12]
 801d532:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d534:	4433      	add	r3, r6
 801d536:	9309      	str	r3, [sp, #36]	; 0x24
 801d538:	e767      	b.n	801d40a <_svfiprintf_r+0x4e>
 801d53a:	fb0c 3202 	mla	r2, ip, r2, r3
 801d53e:	460c      	mov	r4, r1
 801d540:	2001      	movs	r0, #1
 801d542:	e7a5      	b.n	801d490 <_svfiprintf_r+0xd4>
 801d544:	2300      	movs	r3, #0
 801d546:	3401      	adds	r4, #1
 801d548:	9305      	str	r3, [sp, #20]
 801d54a:	4619      	mov	r1, r3
 801d54c:	f04f 0c0a 	mov.w	ip, #10
 801d550:	4620      	mov	r0, r4
 801d552:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d556:	3a30      	subs	r2, #48	; 0x30
 801d558:	2a09      	cmp	r2, #9
 801d55a:	d903      	bls.n	801d564 <_svfiprintf_r+0x1a8>
 801d55c:	2b00      	cmp	r3, #0
 801d55e:	d0c5      	beq.n	801d4ec <_svfiprintf_r+0x130>
 801d560:	9105      	str	r1, [sp, #20]
 801d562:	e7c3      	b.n	801d4ec <_svfiprintf_r+0x130>
 801d564:	fb0c 2101 	mla	r1, ip, r1, r2
 801d568:	4604      	mov	r4, r0
 801d56a:	2301      	movs	r3, #1
 801d56c:	e7f0      	b.n	801d550 <_svfiprintf_r+0x194>
 801d56e:	ab03      	add	r3, sp, #12
 801d570:	9300      	str	r3, [sp, #0]
 801d572:	462a      	mov	r2, r5
 801d574:	4b0f      	ldr	r3, [pc, #60]	; (801d5b4 <_svfiprintf_r+0x1f8>)
 801d576:	a904      	add	r1, sp, #16
 801d578:	4638      	mov	r0, r7
 801d57a:	f7fc fa3d 	bl	80199f8 <_printf_float>
 801d57e:	1c42      	adds	r2, r0, #1
 801d580:	4606      	mov	r6, r0
 801d582:	d1d6      	bne.n	801d532 <_svfiprintf_r+0x176>
 801d584:	89ab      	ldrh	r3, [r5, #12]
 801d586:	065b      	lsls	r3, r3, #25
 801d588:	f53f af2c 	bmi.w	801d3e4 <_svfiprintf_r+0x28>
 801d58c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d58e:	b01d      	add	sp, #116	; 0x74
 801d590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d594:	ab03      	add	r3, sp, #12
 801d596:	9300      	str	r3, [sp, #0]
 801d598:	462a      	mov	r2, r5
 801d59a:	4b06      	ldr	r3, [pc, #24]	; (801d5b4 <_svfiprintf_r+0x1f8>)
 801d59c:	a904      	add	r1, sp, #16
 801d59e:	4638      	mov	r0, r7
 801d5a0:	f7fc fcce 	bl	8019f40 <_printf_i>
 801d5a4:	e7eb      	b.n	801d57e <_svfiprintf_r+0x1c2>
 801d5a6:	bf00      	nop
 801d5a8:	080525a4 	.word	0x080525a4
 801d5ac:	080525ae 	.word	0x080525ae
 801d5b0:	080199f9 	.word	0x080199f9
 801d5b4:	0801d305 	.word	0x0801d305
 801d5b8:	080525aa 	.word	0x080525aa
 801d5bc:	00000000 	.word	0x00000000

0801d5c0 <nan>:
 801d5c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801d5c8 <nan+0x8>
 801d5c4:	4770      	bx	lr
 801d5c6:	bf00      	nop
 801d5c8:	00000000 	.word	0x00000000
 801d5cc:	7ff80000 	.word	0x7ff80000

0801d5d0 <_sbrk_r>:
 801d5d0:	b538      	push	{r3, r4, r5, lr}
 801d5d2:	4d06      	ldr	r5, [pc, #24]	; (801d5ec <_sbrk_r+0x1c>)
 801d5d4:	2300      	movs	r3, #0
 801d5d6:	4604      	mov	r4, r0
 801d5d8:	4608      	mov	r0, r1
 801d5da:	602b      	str	r3, [r5, #0]
 801d5dc:	f7e8 fdfc 	bl	80061d8 <_sbrk>
 801d5e0:	1c43      	adds	r3, r0, #1
 801d5e2:	d102      	bne.n	801d5ea <_sbrk_r+0x1a>
 801d5e4:	682b      	ldr	r3, [r5, #0]
 801d5e6:	b103      	cbz	r3, 801d5ea <_sbrk_r+0x1a>
 801d5e8:	6023      	str	r3, [r4, #0]
 801d5ea:	bd38      	pop	{r3, r4, r5, pc}
 801d5ec:	20000dc4 	.word	0x20000dc4

0801d5f0 <strncmp>:
 801d5f0:	b510      	push	{r4, lr}
 801d5f2:	b17a      	cbz	r2, 801d614 <strncmp+0x24>
 801d5f4:	4603      	mov	r3, r0
 801d5f6:	3901      	subs	r1, #1
 801d5f8:	1884      	adds	r4, r0, r2
 801d5fa:	f813 0b01 	ldrb.w	r0, [r3], #1
 801d5fe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801d602:	4290      	cmp	r0, r2
 801d604:	d101      	bne.n	801d60a <strncmp+0x1a>
 801d606:	42a3      	cmp	r3, r4
 801d608:	d101      	bne.n	801d60e <strncmp+0x1e>
 801d60a:	1a80      	subs	r0, r0, r2
 801d60c:	bd10      	pop	{r4, pc}
 801d60e:	2800      	cmp	r0, #0
 801d610:	d1f3      	bne.n	801d5fa <strncmp+0xa>
 801d612:	e7fa      	b.n	801d60a <strncmp+0x1a>
 801d614:	4610      	mov	r0, r2
 801d616:	e7f9      	b.n	801d60c <strncmp+0x1c>

0801d618 <__ascii_wctomb>:
 801d618:	b149      	cbz	r1, 801d62e <__ascii_wctomb+0x16>
 801d61a:	2aff      	cmp	r2, #255	; 0xff
 801d61c:	bf85      	ittet	hi
 801d61e:	238a      	movhi	r3, #138	; 0x8a
 801d620:	6003      	strhi	r3, [r0, #0]
 801d622:	700a      	strbls	r2, [r1, #0]
 801d624:	f04f 30ff 	movhi.w	r0, #4294967295
 801d628:	bf98      	it	ls
 801d62a:	2001      	movls	r0, #1
 801d62c:	4770      	bx	lr
 801d62e:	4608      	mov	r0, r1
 801d630:	4770      	bx	lr
	...

0801d634 <__assert_func>:
 801d634:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d636:	4614      	mov	r4, r2
 801d638:	461a      	mov	r2, r3
 801d63a:	4b09      	ldr	r3, [pc, #36]	; (801d660 <__assert_func+0x2c>)
 801d63c:	681b      	ldr	r3, [r3, #0]
 801d63e:	4605      	mov	r5, r0
 801d640:	68d8      	ldr	r0, [r3, #12]
 801d642:	b14c      	cbz	r4, 801d658 <__assert_func+0x24>
 801d644:	4b07      	ldr	r3, [pc, #28]	; (801d664 <__assert_func+0x30>)
 801d646:	9100      	str	r1, [sp, #0]
 801d648:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d64c:	4906      	ldr	r1, [pc, #24]	; (801d668 <__assert_func+0x34>)
 801d64e:	462b      	mov	r3, r5
 801d650:	f000 f80e 	bl	801d670 <fiprintf>
 801d654:	f000 fa8c 	bl	801db70 <abort>
 801d658:	4b04      	ldr	r3, [pc, #16]	; (801d66c <__assert_func+0x38>)
 801d65a:	461c      	mov	r4, r3
 801d65c:	e7f3      	b.n	801d646 <__assert_func+0x12>
 801d65e:	bf00      	nop
 801d660:	20000064 	.word	0x20000064
 801d664:	080525b5 	.word	0x080525b5
 801d668:	080525c2 	.word	0x080525c2
 801d66c:	080525f0 	.word	0x080525f0

0801d670 <fiprintf>:
 801d670:	b40e      	push	{r1, r2, r3}
 801d672:	b503      	push	{r0, r1, lr}
 801d674:	4601      	mov	r1, r0
 801d676:	ab03      	add	r3, sp, #12
 801d678:	4805      	ldr	r0, [pc, #20]	; (801d690 <fiprintf+0x20>)
 801d67a:	f853 2b04 	ldr.w	r2, [r3], #4
 801d67e:	6800      	ldr	r0, [r0, #0]
 801d680:	9301      	str	r3, [sp, #4]
 801d682:	f000 f885 	bl	801d790 <_vfiprintf_r>
 801d686:	b002      	add	sp, #8
 801d688:	f85d eb04 	ldr.w	lr, [sp], #4
 801d68c:	b003      	add	sp, #12
 801d68e:	4770      	bx	lr
 801d690:	20000064 	.word	0x20000064

0801d694 <memmove>:
 801d694:	4288      	cmp	r0, r1
 801d696:	b510      	push	{r4, lr}
 801d698:	eb01 0402 	add.w	r4, r1, r2
 801d69c:	d902      	bls.n	801d6a4 <memmove+0x10>
 801d69e:	4284      	cmp	r4, r0
 801d6a0:	4623      	mov	r3, r4
 801d6a2:	d807      	bhi.n	801d6b4 <memmove+0x20>
 801d6a4:	1e43      	subs	r3, r0, #1
 801d6a6:	42a1      	cmp	r1, r4
 801d6a8:	d008      	beq.n	801d6bc <memmove+0x28>
 801d6aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d6ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d6b2:	e7f8      	b.n	801d6a6 <memmove+0x12>
 801d6b4:	4402      	add	r2, r0
 801d6b6:	4601      	mov	r1, r0
 801d6b8:	428a      	cmp	r2, r1
 801d6ba:	d100      	bne.n	801d6be <memmove+0x2a>
 801d6bc:	bd10      	pop	{r4, pc}
 801d6be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d6c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d6c6:	e7f7      	b.n	801d6b8 <memmove+0x24>

0801d6c8 <__malloc_lock>:
 801d6c8:	4801      	ldr	r0, [pc, #4]	; (801d6d0 <__malloc_lock+0x8>)
 801d6ca:	f000 bc11 	b.w	801def0 <__retarget_lock_acquire_recursive>
 801d6ce:	bf00      	nop
 801d6d0:	20000dc8 	.word	0x20000dc8

0801d6d4 <__malloc_unlock>:
 801d6d4:	4801      	ldr	r0, [pc, #4]	; (801d6dc <__malloc_unlock+0x8>)
 801d6d6:	f000 bc0c 	b.w	801def2 <__retarget_lock_release_recursive>
 801d6da:	bf00      	nop
 801d6dc:	20000dc8 	.word	0x20000dc8

0801d6e0 <_realloc_r>:
 801d6e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d6e4:	4680      	mov	r8, r0
 801d6e6:	4614      	mov	r4, r2
 801d6e8:	460e      	mov	r6, r1
 801d6ea:	b921      	cbnz	r1, 801d6f6 <_realloc_r+0x16>
 801d6ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d6f0:	4611      	mov	r1, r2
 801d6f2:	f7ff bd93 	b.w	801d21c <_malloc_r>
 801d6f6:	b92a      	cbnz	r2, 801d704 <_realloc_r+0x24>
 801d6f8:	f7ff fd24 	bl	801d144 <_free_r>
 801d6fc:	4625      	mov	r5, r4
 801d6fe:	4628      	mov	r0, r5
 801d700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d704:	f000 fc5c 	bl	801dfc0 <_malloc_usable_size_r>
 801d708:	4284      	cmp	r4, r0
 801d70a:	4607      	mov	r7, r0
 801d70c:	d802      	bhi.n	801d714 <_realloc_r+0x34>
 801d70e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801d712:	d812      	bhi.n	801d73a <_realloc_r+0x5a>
 801d714:	4621      	mov	r1, r4
 801d716:	4640      	mov	r0, r8
 801d718:	f7ff fd80 	bl	801d21c <_malloc_r>
 801d71c:	4605      	mov	r5, r0
 801d71e:	2800      	cmp	r0, #0
 801d720:	d0ed      	beq.n	801d6fe <_realloc_r+0x1e>
 801d722:	42bc      	cmp	r4, r7
 801d724:	4622      	mov	r2, r4
 801d726:	4631      	mov	r1, r6
 801d728:	bf28      	it	cs
 801d72a:	463a      	movcs	r2, r7
 801d72c:	f7ff f824 	bl	801c778 <memcpy>
 801d730:	4631      	mov	r1, r6
 801d732:	4640      	mov	r0, r8
 801d734:	f7ff fd06 	bl	801d144 <_free_r>
 801d738:	e7e1      	b.n	801d6fe <_realloc_r+0x1e>
 801d73a:	4635      	mov	r5, r6
 801d73c:	e7df      	b.n	801d6fe <_realloc_r+0x1e>

0801d73e <__sfputc_r>:
 801d73e:	6893      	ldr	r3, [r2, #8]
 801d740:	3b01      	subs	r3, #1
 801d742:	2b00      	cmp	r3, #0
 801d744:	b410      	push	{r4}
 801d746:	6093      	str	r3, [r2, #8]
 801d748:	da08      	bge.n	801d75c <__sfputc_r+0x1e>
 801d74a:	6994      	ldr	r4, [r2, #24]
 801d74c:	42a3      	cmp	r3, r4
 801d74e:	db01      	blt.n	801d754 <__sfputc_r+0x16>
 801d750:	290a      	cmp	r1, #10
 801d752:	d103      	bne.n	801d75c <__sfputc_r+0x1e>
 801d754:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d758:	f000 b94a 	b.w	801d9f0 <__swbuf_r>
 801d75c:	6813      	ldr	r3, [r2, #0]
 801d75e:	1c58      	adds	r0, r3, #1
 801d760:	6010      	str	r0, [r2, #0]
 801d762:	7019      	strb	r1, [r3, #0]
 801d764:	4608      	mov	r0, r1
 801d766:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d76a:	4770      	bx	lr

0801d76c <__sfputs_r>:
 801d76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d76e:	4606      	mov	r6, r0
 801d770:	460f      	mov	r7, r1
 801d772:	4614      	mov	r4, r2
 801d774:	18d5      	adds	r5, r2, r3
 801d776:	42ac      	cmp	r4, r5
 801d778:	d101      	bne.n	801d77e <__sfputs_r+0x12>
 801d77a:	2000      	movs	r0, #0
 801d77c:	e007      	b.n	801d78e <__sfputs_r+0x22>
 801d77e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d782:	463a      	mov	r2, r7
 801d784:	4630      	mov	r0, r6
 801d786:	f7ff ffda 	bl	801d73e <__sfputc_r>
 801d78a:	1c43      	adds	r3, r0, #1
 801d78c:	d1f3      	bne.n	801d776 <__sfputs_r+0xa>
 801d78e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801d790 <_vfiprintf_r>:
 801d790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d794:	460d      	mov	r5, r1
 801d796:	b09d      	sub	sp, #116	; 0x74
 801d798:	4614      	mov	r4, r2
 801d79a:	4698      	mov	r8, r3
 801d79c:	4606      	mov	r6, r0
 801d79e:	b118      	cbz	r0, 801d7a8 <_vfiprintf_r+0x18>
 801d7a0:	6983      	ldr	r3, [r0, #24]
 801d7a2:	b90b      	cbnz	r3, 801d7a8 <_vfiprintf_r+0x18>
 801d7a4:	f000 fb06 	bl	801ddb4 <__sinit>
 801d7a8:	4b89      	ldr	r3, [pc, #548]	; (801d9d0 <_vfiprintf_r+0x240>)
 801d7aa:	429d      	cmp	r5, r3
 801d7ac:	d11b      	bne.n	801d7e6 <_vfiprintf_r+0x56>
 801d7ae:	6875      	ldr	r5, [r6, #4]
 801d7b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d7b2:	07d9      	lsls	r1, r3, #31
 801d7b4:	d405      	bmi.n	801d7c2 <_vfiprintf_r+0x32>
 801d7b6:	89ab      	ldrh	r3, [r5, #12]
 801d7b8:	059a      	lsls	r2, r3, #22
 801d7ba:	d402      	bmi.n	801d7c2 <_vfiprintf_r+0x32>
 801d7bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d7be:	f000 fb97 	bl	801def0 <__retarget_lock_acquire_recursive>
 801d7c2:	89ab      	ldrh	r3, [r5, #12]
 801d7c4:	071b      	lsls	r3, r3, #28
 801d7c6:	d501      	bpl.n	801d7cc <_vfiprintf_r+0x3c>
 801d7c8:	692b      	ldr	r3, [r5, #16]
 801d7ca:	b9eb      	cbnz	r3, 801d808 <_vfiprintf_r+0x78>
 801d7cc:	4629      	mov	r1, r5
 801d7ce:	4630      	mov	r0, r6
 801d7d0:	f000 f960 	bl	801da94 <__swsetup_r>
 801d7d4:	b1c0      	cbz	r0, 801d808 <_vfiprintf_r+0x78>
 801d7d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d7d8:	07dc      	lsls	r4, r3, #31
 801d7da:	d50e      	bpl.n	801d7fa <_vfiprintf_r+0x6a>
 801d7dc:	f04f 30ff 	mov.w	r0, #4294967295
 801d7e0:	b01d      	add	sp, #116	; 0x74
 801d7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d7e6:	4b7b      	ldr	r3, [pc, #492]	; (801d9d4 <_vfiprintf_r+0x244>)
 801d7e8:	429d      	cmp	r5, r3
 801d7ea:	d101      	bne.n	801d7f0 <_vfiprintf_r+0x60>
 801d7ec:	68b5      	ldr	r5, [r6, #8]
 801d7ee:	e7df      	b.n	801d7b0 <_vfiprintf_r+0x20>
 801d7f0:	4b79      	ldr	r3, [pc, #484]	; (801d9d8 <_vfiprintf_r+0x248>)
 801d7f2:	429d      	cmp	r5, r3
 801d7f4:	bf08      	it	eq
 801d7f6:	68f5      	ldreq	r5, [r6, #12]
 801d7f8:	e7da      	b.n	801d7b0 <_vfiprintf_r+0x20>
 801d7fa:	89ab      	ldrh	r3, [r5, #12]
 801d7fc:	0598      	lsls	r0, r3, #22
 801d7fe:	d4ed      	bmi.n	801d7dc <_vfiprintf_r+0x4c>
 801d800:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d802:	f000 fb76 	bl	801def2 <__retarget_lock_release_recursive>
 801d806:	e7e9      	b.n	801d7dc <_vfiprintf_r+0x4c>
 801d808:	2300      	movs	r3, #0
 801d80a:	9309      	str	r3, [sp, #36]	; 0x24
 801d80c:	2320      	movs	r3, #32
 801d80e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d812:	f8cd 800c 	str.w	r8, [sp, #12]
 801d816:	2330      	movs	r3, #48	; 0x30
 801d818:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801d9dc <_vfiprintf_r+0x24c>
 801d81c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d820:	f04f 0901 	mov.w	r9, #1
 801d824:	4623      	mov	r3, r4
 801d826:	469a      	mov	sl, r3
 801d828:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d82c:	b10a      	cbz	r2, 801d832 <_vfiprintf_r+0xa2>
 801d82e:	2a25      	cmp	r2, #37	; 0x25
 801d830:	d1f9      	bne.n	801d826 <_vfiprintf_r+0x96>
 801d832:	ebba 0b04 	subs.w	fp, sl, r4
 801d836:	d00b      	beq.n	801d850 <_vfiprintf_r+0xc0>
 801d838:	465b      	mov	r3, fp
 801d83a:	4622      	mov	r2, r4
 801d83c:	4629      	mov	r1, r5
 801d83e:	4630      	mov	r0, r6
 801d840:	f7ff ff94 	bl	801d76c <__sfputs_r>
 801d844:	3001      	adds	r0, #1
 801d846:	f000 80aa 	beq.w	801d99e <_vfiprintf_r+0x20e>
 801d84a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d84c:	445a      	add	r2, fp
 801d84e:	9209      	str	r2, [sp, #36]	; 0x24
 801d850:	f89a 3000 	ldrb.w	r3, [sl]
 801d854:	2b00      	cmp	r3, #0
 801d856:	f000 80a2 	beq.w	801d99e <_vfiprintf_r+0x20e>
 801d85a:	2300      	movs	r3, #0
 801d85c:	f04f 32ff 	mov.w	r2, #4294967295
 801d860:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d864:	f10a 0a01 	add.w	sl, sl, #1
 801d868:	9304      	str	r3, [sp, #16]
 801d86a:	9307      	str	r3, [sp, #28]
 801d86c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d870:	931a      	str	r3, [sp, #104]	; 0x68
 801d872:	4654      	mov	r4, sl
 801d874:	2205      	movs	r2, #5
 801d876:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d87a:	4858      	ldr	r0, [pc, #352]	; (801d9dc <_vfiprintf_r+0x24c>)
 801d87c:	f7fb f8b0 	bl	80189e0 <memchr>
 801d880:	9a04      	ldr	r2, [sp, #16]
 801d882:	b9d8      	cbnz	r0, 801d8bc <_vfiprintf_r+0x12c>
 801d884:	06d1      	lsls	r1, r2, #27
 801d886:	bf44      	itt	mi
 801d888:	2320      	movmi	r3, #32
 801d88a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d88e:	0713      	lsls	r3, r2, #28
 801d890:	bf44      	itt	mi
 801d892:	232b      	movmi	r3, #43	; 0x2b
 801d894:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d898:	f89a 3000 	ldrb.w	r3, [sl]
 801d89c:	2b2a      	cmp	r3, #42	; 0x2a
 801d89e:	d015      	beq.n	801d8cc <_vfiprintf_r+0x13c>
 801d8a0:	9a07      	ldr	r2, [sp, #28]
 801d8a2:	4654      	mov	r4, sl
 801d8a4:	2000      	movs	r0, #0
 801d8a6:	f04f 0c0a 	mov.w	ip, #10
 801d8aa:	4621      	mov	r1, r4
 801d8ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d8b0:	3b30      	subs	r3, #48	; 0x30
 801d8b2:	2b09      	cmp	r3, #9
 801d8b4:	d94e      	bls.n	801d954 <_vfiprintf_r+0x1c4>
 801d8b6:	b1b0      	cbz	r0, 801d8e6 <_vfiprintf_r+0x156>
 801d8b8:	9207      	str	r2, [sp, #28]
 801d8ba:	e014      	b.n	801d8e6 <_vfiprintf_r+0x156>
 801d8bc:	eba0 0308 	sub.w	r3, r0, r8
 801d8c0:	fa09 f303 	lsl.w	r3, r9, r3
 801d8c4:	4313      	orrs	r3, r2
 801d8c6:	9304      	str	r3, [sp, #16]
 801d8c8:	46a2      	mov	sl, r4
 801d8ca:	e7d2      	b.n	801d872 <_vfiprintf_r+0xe2>
 801d8cc:	9b03      	ldr	r3, [sp, #12]
 801d8ce:	1d19      	adds	r1, r3, #4
 801d8d0:	681b      	ldr	r3, [r3, #0]
 801d8d2:	9103      	str	r1, [sp, #12]
 801d8d4:	2b00      	cmp	r3, #0
 801d8d6:	bfbb      	ittet	lt
 801d8d8:	425b      	neglt	r3, r3
 801d8da:	f042 0202 	orrlt.w	r2, r2, #2
 801d8de:	9307      	strge	r3, [sp, #28]
 801d8e0:	9307      	strlt	r3, [sp, #28]
 801d8e2:	bfb8      	it	lt
 801d8e4:	9204      	strlt	r2, [sp, #16]
 801d8e6:	7823      	ldrb	r3, [r4, #0]
 801d8e8:	2b2e      	cmp	r3, #46	; 0x2e
 801d8ea:	d10c      	bne.n	801d906 <_vfiprintf_r+0x176>
 801d8ec:	7863      	ldrb	r3, [r4, #1]
 801d8ee:	2b2a      	cmp	r3, #42	; 0x2a
 801d8f0:	d135      	bne.n	801d95e <_vfiprintf_r+0x1ce>
 801d8f2:	9b03      	ldr	r3, [sp, #12]
 801d8f4:	1d1a      	adds	r2, r3, #4
 801d8f6:	681b      	ldr	r3, [r3, #0]
 801d8f8:	9203      	str	r2, [sp, #12]
 801d8fa:	2b00      	cmp	r3, #0
 801d8fc:	bfb8      	it	lt
 801d8fe:	f04f 33ff 	movlt.w	r3, #4294967295
 801d902:	3402      	adds	r4, #2
 801d904:	9305      	str	r3, [sp, #20]
 801d906:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801d9ec <_vfiprintf_r+0x25c>
 801d90a:	7821      	ldrb	r1, [r4, #0]
 801d90c:	2203      	movs	r2, #3
 801d90e:	4650      	mov	r0, sl
 801d910:	f7fb f866 	bl	80189e0 <memchr>
 801d914:	b140      	cbz	r0, 801d928 <_vfiprintf_r+0x198>
 801d916:	2340      	movs	r3, #64	; 0x40
 801d918:	eba0 000a 	sub.w	r0, r0, sl
 801d91c:	fa03 f000 	lsl.w	r0, r3, r0
 801d920:	9b04      	ldr	r3, [sp, #16]
 801d922:	4303      	orrs	r3, r0
 801d924:	3401      	adds	r4, #1
 801d926:	9304      	str	r3, [sp, #16]
 801d928:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d92c:	482c      	ldr	r0, [pc, #176]	; (801d9e0 <_vfiprintf_r+0x250>)
 801d92e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d932:	2206      	movs	r2, #6
 801d934:	f7fb f854 	bl	80189e0 <memchr>
 801d938:	2800      	cmp	r0, #0
 801d93a:	d03f      	beq.n	801d9bc <_vfiprintf_r+0x22c>
 801d93c:	4b29      	ldr	r3, [pc, #164]	; (801d9e4 <_vfiprintf_r+0x254>)
 801d93e:	bb1b      	cbnz	r3, 801d988 <_vfiprintf_r+0x1f8>
 801d940:	9b03      	ldr	r3, [sp, #12]
 801d942:	3307      	adds	r3, #7
 801d944:	f023 0307 	bic.w	r3, r3, #7
 801d948:	3308      	adds	r3, #8
 801d94a:	9303      	str	r3, [sp, #12]
 801d94c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d94e:	443b      	add	r3, r7
 801d950:	9309      	str	r3, [sp, #36]	; 0x24
 801d952:	e767      	b.n	801d824 <_vfiprintf_r+0x94>
 801d954:	fb0c 3202 	mla	r2, ip, r2, r3
 801d958:	460c      	mov	r4, r1
 801d95a:	2001      	movs	r0, #1
 801d95c:	e7a5      	b.n	801d8aa <_vfiprintf_r+0x11a>
 801d95e:	2300      	movs	r3, #0
 801d960:	3401      	adds	r4, #1
 801d962:	9305      	str	r3, [sp, #20]
 801d964:	4619      	mov	r1, r3
 801d966:	f04f 0c0a 	mov.w	ip, #10
 801d96a:	4620      	mov	r0, r4
 801d96c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d970:	3a30      	subs	r2, #48	; 0x30
 801d972:	2a09      	cmp	r2, #9
 801d974:	d903      	bls.n	801d97e <_vfiprintf_r+0x1ee>
 801d976:	2b00      	cmp	r3, #0
 801d978:	d0c5      	beq.n	801d906 <_vfiprintf_r+0x176>
 801d97a:	9105      	str	r1, [sp, #20]
 801d97c:	e7c3      	b.n	801d906 <_vfiprintf_r+0x176>
 801d97e:	fb0c 2101 	mla	r1, ip, r1, r2
 801d982:	4604      	mov	r4, r0
 801d984:	2301      	movs	r3, #1
 801d986:	e7f0      	b.n	801d96a <_vfiprintf_r+0x1da>
 801d988:	ab03      	add	r3, sp, #12
 801d98a:	9300      	str	r3, [sp, #0]
 801d98c:	462a      	mov	r2, r5
 801d98e:	4b16      	ldr	r3, [pc, #88]	; (801d9e8 <_vfiprintf_r+0x258>)
 801d990:	a904      	add	r1, sp, #16
 801d992:	4630      	mov	r0, r6
 801d994:	f7fc f830 	bl	80199f8 <_printf_float>
 801d998:	4607      	mov	r7, r0
 801d99a:	1c78      	adds	r0, r7, #1
 801d99c:	d1d6      	bne.n	801d94c <_vfiprintf_r+0x1bc>
 801d99e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d9a0:	07d9      	lsls	r1, r3, #31
 801d9a2:	d405      	bmi.n	801d9b0 <_vfiprintf_r+0x220>
 801d9a4:	89ab      	ldrh	r3, [r5, #12]
 801d9a6:	059a      	lsls	r2, r3, #22
 801d9a8:	d402      	bmi.n	801d9b0 <_vfiprintf_r+0x220>
 801d9aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d9ac:	f000 faa1 	bl	801def2 <__retarget_lock_release_recursive>
 801d9b0:	89ab      	ldrh	r3, [r5, #12]
 801d9b2:	065b      	lsls	r3, r3, #25
 801d9b4:	f53f af12 	bmi.w	801d7dc <_vfiprintf_r+0x4c>
 801d9b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d9ba:	e711      	b.n	801d7e0 <_vfiprintf_r+0x50>
 801d9bc:	ab03      	add	r3, sp, #12
 801d9be:	9300      	str	r3, [sp, #0]
 801d9c0:	462a      	mov	r2, r5
 801d9c2:	4b09      	ldr	r3, [pc, #36]	; (801d9e8 <_vfiprintf_r+0x258>)
 801d9c4:	a904      	add	r1, sp, #16
 801d9c6:	4630      	mov	r0, r6
 801d9c8:	f7fc faba 	bl	8019f40 <_printf_i>
 801d9cc:	e7e4      	b.n	801d998 <_vfiprintf_r+0x208>
 801d9ce:	bf00      	nop
 801d9d0:	08052614 	.word	0x08052614
 801d9d4:	08052634 	.word	0x08052634
 801d9d8:	080525f4 	.word	0x080525f4
 801d9dc:	080525a4 	.word	0x080525a4
 801d9e0:	080525ae 	.word	0x080525ae
 801d9e4:	080199f9 	.word	0x080199f9
 801d9e8:	0801d76d 	.word	0x0801d76d
 801d9ec:	080525aa 	.word	0x080525aa

0801d9f0 <__swbuf_r>:
 801d9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d9f2:	460e      	mov	r6, r1
 801d9f4:	4614      	mov	r4, r2
 801d9f6:	4605      	mov	r5, r0
 801d9f8:	b118      	cbz	r0, 801da02 <__swbuf_r+0x12>
 801d9fa:	6983      	ldr	r3, [r0, #24]
 801d9fc:	b90b      	cbnz	r3, 801da02 <__swbuf_r+0x12>
 801d9fe:	f000 f9d9 	bl	801ddb4 <__sinit>
 801da02:	4b21      	ldr	r3, [pc, #132]	; (801da88 <__swbuf_r+0x98>)
 801da04:	429c      	cmp	r4, r3
 801da06:	d12b      	bne.n	801da60 <__swbuf_r+0x70>
 801da08:	686c      	ldr	r4, [r5, #4]
 801da0a:	69a3      	ldr	r3, [r4, #24]
 801da0c:	60a3      	str	r3, [r4, #8]
 801da0e:	89a3      	ldrh	r3, [r4, #12]
 801da10:	071a      	lsls	r2, r3, #28
 801da12:	d52f      	bpl.n	801da74 <__swbuf_r+0x84>
 801da14:	6923      	ldr	r3, [r4, #16]
 801da16:	b36b      	cbz	r3, 801da74 <__swbuf_r+0x84>
 801da18:	6923      	ldr	r3, [r4, #16]
 801da1a:	6820      	ldr	r0, [r4, #0]
 801da1c:	1ac0      	subs	r0, r0, r3
 801da1e:	6963      	ldr	r3, [r4, #20]
 801da20:	b2f6      	uxtb	r6, r6
 801da22:	4283      	cmp	r3, r0
 801da24:	4637      	mov	r7, r6
 801da26:	dc04      	bgt.n	801da32 <__swbuf_r+0x42>
 801da28:	4621      	mov	r1, r4
 801da2a:	4628      	mov	r0, r5
 801da2c:	f000 f92e 	bl	801dc8c <_fflush_r>
 801da30:	bb30      	cbnz	r0, 801da80 <__swbuf_r+0x90>
 801da32:	68a3      	ldr	r3, [r4, #8]
 801da34:	3b01      	subs	r3, #1
 801da36:	60a3      	str	r3, [r4, #8]
 801da38:	6823      	ldr	r3, [r4, #0]
 801da3a:	1c5a      	adds	r2, r3, #1
 801da3c:	6022      	str	r2, [r4, #0]
 801da3e:	701e      	strb	r6, [r3, #0]
 801da40:	6963      	ldr	r3, [r4, #20]
 801da42:	3001      	adds	r0, #1
 801da44:	4283      	cmp	r3, r0
 801da46:	d004      	beq.n	801da52 <__swbuf_r+0x62>
 801da48:	89a3      	ldrh	r3, [r4, #12]
 801da4a:	07db      	lsls	r3, r3, #31
 801da4c:	d506      	bpl.n	801da5c <__swbuf_r+0x6c>
 801da4e:	2e0a      	cmp	r6, #10
 801da50:	d104      	bne.n	801da5c <__swbuf_r+0x6c>
 801da52:	4621      	mov	r1, r4
 801da54:	4628      	mov	r0, r5
 801da56:	f000 f919 	bl	801dc8c <_fflush_r>
 801da5a:	b988      	cbnz	r0, 801da80 <__swbuf_r+0x90>
 801da5c:	4638      	mov	r0, r7
 801da5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801da60:	4b0a      	ldr	r3, [pc, #40]	; (801da8c <__swbuf_r+0x9c>)
 801da62:	429c      	cmp	r4, r3
 801da64:	d101      	bne.n	801da6a <__swbuf_r+0x7a>
 801da66:	68ac      	ldr	r4, [r5, #8]
 801da68:	e7cf      	b.n	801da0a <__swbuf_r+0x1a>
 801da6a:	4b09      	ldr	r3, [pc, #36]	; (801da90 <__swbuf_r+0xa0>)
 801da6c:	429c      	cmp	r4, r3
 801da6e:	bf08      	it	eq
 801da70:	68ec      	ldreq	r4, [r5, #12]
 801da72:	e7ca      	b.n	801da0a <__swbuf_r+0x1a>
 801da74:	4621      	mov	r1, r4
 801da76:	4628      	mov	r0, r5
 801da78:	f000 f80c 	bl	801da94 <__swsetup_r>
 801da7c:	2800      	cmp	r0, #0
 801da7e:	d0cb      	beq.n	801da18 <__swbuf_r+0x28>
 801da80:	f04f 37ff 	mov.w	r7, #4294967295
 801da84:	e7ea      	b.n	801da5c <__swbuf_r+0x6c>
 801da86:	bf00      	nop
 801da88:	08052614 	.word	0x08052614
 801da8c:	08052634 	.word	0x08052634
 801da90:	080525f4 	.word	0x080525f4

0801da94 <__swsetup_r>:
 801da94:	4b32      	ldr	r3, [pc, #200]	; (801db60 <__swsetup_r+0xcc>)
 801da96:	b570      	push	{r4, r5, r6, lr}
 801da98:	681d      	ldr	r5, [r3, #0]
 801da9a:	4606      	mov	r6, r0
 801da9c:	460c      	mov	r4, r1
 801da9e:	b125      	cbz	r5, 801daaa <__swsetup_r+0x16>
 801daa0:	69ab      	ldr	r3, [r5, #24]
 801daa2:	b913      	cbnz	r3, 801daaa <__swsetup_r+0x16>
 801daa4:	4628      	mov	r0, r5
 801daa6:	f000 f985 	bl	801ddb4 <__sinit>
 801daaa:	4b2e      	ldr	r3, [pc, #184]	; (801db64 <__swsetup_r+0xd0>)
 801daac:	429c      	cmp	r4, r3
 801daae:	d10f      	bne.n	801dad0 <__swsetup_r+0x3c>
 801dab0:	686c      	ldr	r4, [r5, #4]
 801dab2:	89a3      	ldrh	r3, [r4, #12]
 801dab4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801dab8:	0719      	lsls	r1, r3, #28
 801daba:	d42c      	bmi.n	801db16 <__swsetup_r+0x82>
 801dabc:	06dd      	lsls	r5, r3, #27
 801dabe:	d411      	bmi.n	801dae4 <__swsetup_r+0x50>
 801dac0:	2309      	movs	r3, #9
 801dac2:	6033      	str	r3, [r6, #0]
 801dac4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801dac8:	81a3      	strh	r3, [r4, #12]
 801daca:	f04f 30ff 	mov.w	r0, #4294967295
 801dace:	e03e      	b.n	801db4e <__swsetup_r+0xba>
 801dad0:	4b25      	ldr	r3, [pc, #148]	; (801db68 <__swsetup_r+0xd4>)
 801dad2:	429c      	cmp	r4, r3
 801dad4:	d101      	bne.n	801dada <__swsetup_r+0x46>
 801dad6:	68ac      	ldr	r4, [r5, #8]
 801dad8:	e7eb      	b.n	801dab2 <__swsetup_r+0x1e>
 801dada:	4b24      	ldr	r3, [pc, #144]	; (801db6c <__swsetup_r+0xd8>)
 801dadc:	429c      	cmp	r4, r3
 801dade:	bf08      	it	eq
 801dae0:	68ec      	ldreq	r4, [r5, #12]
 801dae2:	e7e6      	b.n	801dab2 <__swsetup_r+0x1e>
 801dae4:	0758      	lsls	r0, r3, #29
 801dae6:	d512      	bpl.n	801db0e <__swsetup_r+0x7a>
 801dae8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801daea:	b141      	cbz	r1, 801dafe <__swsetup_r+0x6a>
 801daec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801daf0:	4299      	cmp	r1, r3
 801daf2:	d002      	beq.n	801dafa <__swsetup_r+0x66>
 801daf4:	4630      	mov	r0, r6
 801daf6:	f7ff fb25 	bl	801d144 <_free_r>
 801dafa:	2300      	movs	r3, #0
 801dafc:	6363      	str	r3, [r4, #52]	; 0x34
 801dafe:	89a3      	ldrh	r3, [r4, #12]
 801db00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801db04:	81a3      	strh	r3, [r4, #12]
 801db06:	2300      	movs	r3, #0
 801db08:	6063      	str	r3, [r4, #4]
 801db0a:	6923      	ldr	r3, [r4, #16]
 801db0c:	6023      	str	r3, [r4, #0]
 801db0e:	89a3      	ldrh	r3, [r4, #12]
 801db10:	f043 0308 	orr.w	r3, r3, #8
 801db14:	81a3      	strh	r3, [r4, #12]
 801db16:	6923      	ldr	r3, [r4, #16]
 801db18:	b94b      	cbnz	r3, 801db2e <__swsetup_r+0x9a>
 801db1a:	89a3      	ldrh	r3, [r4, #12]
 801db1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801db20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801db24:	d003      	beq.n	801db2e <__swsetup_r+0x9a>
 801db26:	4621      	mov	r1, r4
 801db28:	4630      	mov	r0, r6
 801db2a:	f000 fa09 	bl	801df40 <__smakebuf_r>
 801db2e:	89a0      	ldrh	r0, [r4, #12]
 801db30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801db34:	f010 0301 	ands.w	r3, r0, #1
 801db38:	d00a      	beq.n	801db50 <__swsetup_r+0xbc>
 801db3a:	2300      	movs	r3, #0
 801db3c:	60a3      	str	r3, [r4, #8]
 801db3e:	6963      	ldr	r3, [r4, #20]
 801db40:	425b      	negs	r3, r3
 801db42:	61a3      	str	r3, [r4, #24]
 801db44:	6923      	ldr	r3, [r4, #16]
 801db46:	b943      	cbnz	r3, 801db5a <__swsetup_r+0xc6>
 801db48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801db4c:	d1ba      	bne.n	801dac4 <__swsetup_r+0x30>
 801db4e:	bd70      	pop	{r4, r5, r6, pc}
 801db50:	0781      	lsls	r1, r0, #30
 801db52:	bf58      	it	pl
 801db54:	6963      	ldrpl	r3, [r4, #20]
 801db56:	60a3      	str	r3, [r4, #8]
 801db58:	e7f4      	b.n	801db44 <__swsetup_r+0xb0>
 801db5a:	2000      	movs	r0, #0
 801db5c:	e7f7      	b.n	801db4e <__swsetup_r+0xba>
 801db5e:	bf00      	nop
 801db60:	20000064 	.word	0x20000064
 801db64:	08052614 	.word	0x08052614
 801db68:	08052634 	.word	0x08052634
 801db6c:	080525f4 	.word	0x080525f4

0801db70 <abort>:
 801db70:	b508      	push	{r3, lr}
 801db72:	2006      	movs	r0, #6
 801db74:	f000 fa54 	bl	801e020 <raise>
 801db78:	2001      	movs	r0, #1
 801db7a:	f7e8 fa42 	bl	8006002 <_exit>
	...

0801db80 <__sflush_r>:
 801db80:	898a      	ldrh	r2, [r1, #12]
 801db82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801db86:	4605      	mov	r5, r0
 801db88:	0710      	lsls	r0, r2, #28
 801db8a:	460c      	mov	r4, r1
 801db8c:	d458      	bmi.n	801dc40 <__sflush_r+0xc0>
 801db8e:	684b      	ldr	r3, [r1, #4]
 801db90:	2b00      	cmp	r3, #0
 801db92:	dc05      	bgt.n	801dba0 <__sflush_r+0x20>
 801db94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801db96:	2b00      	cmp	r3, #0
 801db98:	dc02      	bgt.n	801dba0 <__sflush_r+0x20>
 801db9a:	2000      	movs	r0, #0
 801db9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dba0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dba2:	2e00      	cmp	r6, #0
 801dba4:	d0f9      	beq.n	801db9a <__sflush_r+0x1a>
 801dba6:	2300      	movs	r3, #0
 801dba8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801dbac:	682f      	ldr	r7, [r5, #0]
 801dbae:	602b      	str	r3, [r5, #0]
 801dbb0:	d032      	beq.n	801dc18 <__sflush_r+0x98>
 801dbb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801dbb4:	89a3      	ldrh	r3, [r4, #12]
 801dbb6:	075a      	lsls	r2, r3, #29
 801dbb8:	d505      	bpl.n	801dbc6 <__sflush_r+0x46>
 801dbba:	6863      	ldr	r3, [r4, #4]
 801dbbc:	1ac0      	subs	r0, r0, r3
 801dbbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801dbc0:	b10b      	cbz	r3, 801dbc6 <__sflush_r+0x46>
 801dbc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801dbc4:	1ac0      	subs	r0, r0, r3
 801dbc6:	2300      	movs	r3, #0
 801dbc8:	4602      	mov	r2, r0
 801dbca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dbcc:	6a21      	ldr	r1, [r4, #32]
 801dbce:	4628      	mov	r0, r5
 801dbd0:	47b0      	blx	r6
 801dbd2:	1c43      	adds	r3, r0, #1
 801dbd4:	89a3      	ldrh	r3, [r4, #12]
 801dbd6:	d106      	bne.n	801dbe6 <__sflush_r+0x66>
 801dbd8:	6829      	ldr	r1, [r5, #0]
 801dbda:	291d      	cmp	r1, #29
 801dbdc:	d82c      	bhi.n	801dc38 <__sflush_r+0xb8>
 801dbde:	4a2a      	ldr	r2, [pc, #168]	; (801dc88 <__sflush_r+0x108>)
 801dbe0:	40ca      	lsrs	r2, r1
 801dbe2:	07d6      	lsls	r6, r2, #31
 801dbe4:	d528      	bpl.n	801dc38 <__sflush_r+0xb8>
 801dbe6:	2200      	movs	r2, #0
 801dbe8:	6062      	str	r2, [r4, #4]
 801dbea:	04d9      	lsls	r1, r3, #19
 801dbec:	6922      	ldr	r2, [r4, #16]
 801dbee:	6022      	str	r2, [r4, #0]
 801dbf0:	d504      	bpl.n	801dbfc <__sflush_r+0x7c>
 801dbf2:	1c42      	adds	r2, r0, #1
 801dbf4:	d101      	bne.n	801dbfa <__sflush_r+0x7a>
 801dbf6:	682b      	ldr	r3, [r5, #0]
 801dbf8:	b903      	cbnz	r3, 801dbfc <__sflush_r+0x7c>
 801dbfa:	6560      	str	r0, [r4, #84]	; 0x54
 801dbfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801dbfe:	602f      	str	r7, [r5, #0]
 801dc00:	2900      	cmp	r1, #0
 801dc02:	d0ca      	beq.n	801db9a <__sflush_r+0x1a>
 801dc04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801dc08:	4299      	cmp	r1, r3
 801dc0a:	d002      	beq.n	801dc12 <__sflush_r+0x92>
 801dc0c:	4628      	mov	r0, r5
 801dc0e:	f7ff fa99 	bl	801d144 <_free_r>
 801dc12:	2000      	movs	r0, #0
 801dc14:	6360      	str	r0, [r4, #52]	; 0x34
 801dc16:	e7c1      	b.n	801db9c <__sflush_r+0x1c>
 801dc18:	6a21      	ldr	r1, [r4, #32]
 801dc1a:	2301      	movs	r3, #1
 801dc1c:	4628      	mov	r0, r5
 801dc1e:	47b0      	blx	r6
 801dc20:	1c41      	adds	r1, r0, #1
 801dc22:	d1c7      	bne.n	801dbb4 <__sflush_r+0x34>
 801dc24:	682b      	ldr	r3, [r5, #0]
 801dc26:	2b00      	cmp	r3, #0
 801dc28:	d0c4      	beq.n	801dbb4 <__sflush_r+0x34>
 801dc2a:	2b1d      	cmp	r3, #29
 801dc2c:	d001      	beq.n	801dc32 <__sflush_r+0xb2>
 801dc2e:	2b16      	cmp	r3, #22
 801dc30:	d101      	bne.n	801dc36 <__sflush_r+0xb6>
 801dc32:	602f      	str	r7, [r5, #0]
 801dc34:	e7b1      	b.n	801db9a <__sflush_r+0x1a>
 801dc36:	89a3      	ldrh	r3, [r4, #12]
 801dc38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dc3c:	81a3      	strh	r3, [r4, #12]
 801dc3e:	e7ad      	b.n	801db9c <__sflush_r+0x1c>
 801dc40:	690f      	ldr	r7, [r1, #16]
 801dc42:	2f00      	cmp	r7, #0
 801dc44:	d0a9      	beq.n	801db9a <__sflush_r+0x1a>
 801dc46:	0793      	lsls	r3, r2, #30
 801dc48:	680e      	ldr	r6, [r1, #0]
 801dc4a:	bf08      	it	eq
 801dc4c:	694b      	ldreq	r3, [r1, #20]
 801dc4e:	600f      	str	r7, [r1, #0]
 801dc50:	bf18      	it	ne
 801dc52:	2300      	movne	r3, #0
 801dc54:	eba6 0807 	sub.w	r8, r6, r7
 801dc58:	608b      	str	r3, [r1, #8]
 801dc5a:	f1b8 0f00 	cmp.w	r8, #0
 801dc5e:	dd9c      	ble.n	801db9a <__sflush_r+0x1a>
 801dc60:	6a21      	ldr	r1, [r4, #32]
 801dc62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801dc64:	4643      	mov	r3, r8
 801dc66:	463a      	mov	r2, r7
 801dc68:	4628      	mov	r0, r5
 801dc6a:	47b0      	blx	r6
 801dc6c:	2800      	cmp	r0, #0
 801dc6e:	dc06      	bgt.n	801dc7e <__sflush_r+0xfe>
 801dc70:	89a3      	ldrh	r3, [r4, #12]
 801dc72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dc76:	81a3      	strh	r3, [r4, #12]
 801dc78:	f04f 30ff 	mov.w	r0, #4294967295
 801dc7c:	e78e      	b.n	801db9c <__sflush_r+0x1c>
 801dc7e:	4407      	add	r7, r0
 801dc80:	eba8 0800 	sub.w	r8, r8, r0
 801dc84:	e7e9      	b.n	801dc5a <__sflush_r+0xda>
 801dc86:	bf00      	nop
 801dc88:	20400001 	.word	0x20400001

0801dc8c <_fflush_r>:
 801dc8c:	b538      	push	{r3, r4, r5, lr}
 801dc8e:	690b      	ldr	r3, [r1, #16]
 801dc90:	4605      	mov	r5, r0
 801dc92:	460c      	mov	r4, r1
 801dc94:	b913      	cbnz	r3, 801dc9c <_fflush_r+0x10>
 801dc96:	2500      	movs	r5, #0
 801dc98:	4628      	mov	r0, r5
 801dc9a:	bd38      	pop	{r3, r4, r5, pc}
 801dc9c:	b118      	cbz	r0, 801dca6 <_fflush_r+0x1a>
 801dc9e:	6983      	ldr	r3, [r0, #24]
 801dca0:	b90b      	cbnz	r3, 801dca6 <_fflush_r+0x1a>
 801dca2:	f000 f887 	bl	801ddb4 <__sinit>
 801dca6:	4b14      	ldr	r3, [pc, #80]	; (801dcf8 <_fflush_r+0x6c>)
 801dca8:	429c      	cmp	r4, r3
 801dcaa:	d11b      	bne.n	801dce4 <_fflush_r+0x58>
 801dcac:	686c      	ldr	r4, [r5, #4]
 801dcae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dcb2:	2b00      	cmp	r3, #0
 801dcb4:	d0ef      	beq.n	801dc96 <_fflush_r+0xa>
 801dcb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801dcb8:	07d0      	lsls	r0, r2, #31
 801dcba:	d404      	bmi.n	801dcc6 <_fflush_r+0x3a>
 801dcbc:	0599      	lsls	r1, r3, #22
 801dcbe:	d402      	bmi.n	801dcc6 <_fflush_r+0x3a>
 801dcc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dcc2:	f000 f915 	bl	801def0 <__retarget_lock_acquire_recursive>
 801dcc6:	4628      	mov	r0, r5
 801dcc8:	4621      	mov	r1, r4
 801dcca:	f7ff ff59 	bl	801db80 <__sflush_r>
 801dcce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801dcd0:	07da      	lsls	r2, r3, #31
 801dcd2:	4605      	mov	r5, r0
 801dcd4:	d4e0      	bmi.n	801dc98 <_fflush_r+0xc>
 801dcd6:	89a3      	ldrh	r3, [r4, #12]
 801dcd8:	059b      	lsls	r3, r3, #22
 801dcda:	d4dd      	bmi.n	801dc98 <_fflush_r+0xc>
 801dcdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dcde:	f000 f908 	bl	801def2 <__retarget_lock_release_recursive>
 801dce2:	e7d9      	b.n	801dc98 <_fflush_r+0xc>
 801dce4:	4b05      	ldr	r3, [pc, #20]	; (801dcfc <_fflush_r+0x70>)
 801dce6:	429c      	cmp	r4, r3
 801dce8:	d101      	bne.n	801dcee <_fflush_r+0x62>
 801dcea:	68ac      	ldr	r4, [r5, #8]
 801dcec:	e7df      	b.n	801dcae <_fflush_r+0x22>
 801dcee:	4b04      	ldr	r3, [pc, #16]	; (801dd00 <_fflush_r+0x74>)
 801dcf0:	429c      	cmp	r4, r3
 801dcf2:	bf08      	it	eq
 801dcf4:	68ec      	ldreq	r4, [r5, #12]
 801dcf6:	e7da      	b.n	801dcae <_fflush_r+0x22>
 801dcf8:	08052614 	.word	0x08052614
 801dcfc:	08052634 	.word	0x08052634
 801dd00:	080525f4 	.word	0x080525f4

0801dd04 <std>:
 801dd04:	2300      	movs	r3, #0
 801dd06:	b510      	push	{r4, lr}
 801dd08:	4604      	mov	r4, r0
 801dd0a:	e9c0 3300 	strd	r3, r3, [r0]
 801dd0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801dd12:	6083      	str	r3, [r0, #8]
 801dd14:	8181      	strh	r1, [r0, #12]
 801dd16:	6643      	str	r3, [r0, #100]	; 0x64
 801dd18:	81c2      	strh	r2, [r0, #14]
 801dd1a:	6183      	str	r3, [r0, #24]
 801dd1c:	4619      	mov	r1, r3
 801dd1e:	2208      	movs	r2, #8
 801dd20:	305c      	adds	r0, #92	; 0x5c
 801dd22:	f7fb fdc1 	bl	80198a8 <memset>
 801dd26:	4b05      	ldr	r3, [pc, #20]	; (801dd3c <std+0x38>)
 801dd28:	6263      	str	r3, [r4, #36]	; 0x24
 801dd2a:	4b05      	ldr	r3, [pc, #20]	; (801dd40 <std+0x3c>)
 801dd2c:	62a3      	str	r3, [r4, #40]	; 0x28
 801dd2e:	4b05      	ldr	r3, [pc, #20]	; (801dd44 <std+0x40>)
 801dd30:	62e3      	str	r3, [r4, #44]	; 0x2c
 801dd32:	4b05      	ldr	r3, [pc, #20]	; (801dd48 <std+0x44>)
 801dd34:	6224      	str	r4, [r4, #32]
 801dd36:	6323      	str	r3, [r4, #48]	; 0x30
 801dd38:	bd10      	pop	{r4, pc}
 801dd3a:	bf00      	nop
 801dd3c:	0801e059 	.word	0x0801e059
 801dd40:	0801e07b 	.word	0x0801e07b
 801dd44:	0801e0b3 	.word	0x0801e0b3
 801dd48:	0801e0d7 	.word	0x0801e0d7

0801dd4c <_cleanup_r>:
 801dd4c:	4901      	ldr	r1, [pc, #4]	; (801dd54 <_cleanup_r+0x8>)
 801dd4e:	f000 b8af 	b.w	801deb0 <_fwalk_reent>
 801dd52:	bf00      	nop
 801dd54:	0801dc8d 	.word	0x0801dc8d

0801dd58 <__sfmoreglue>:
 801dd58:	b570      	push	{r4, r5, r6, lr}
 801dd5a:	2268      	movs	r2, #104	; 0x68
 801dd5c:	1e4d      	subs	r5, r1, #1
 801dd5e:	4355      	muls	r5, r2
 801dd60:	460e      	mov	r6, r1
 801dd62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801dd66:	f7ff fa59 	bl	801d21c <_malloc_r>
 801dd6a:	4604      	mov	r4, r0
 801dd6c:	b140      	cbz	r0, 801dd80 <__sfmoreglue+0x28>
 801dd6e:	2100      	movs	r1, #0
 801dd70:	e9c0 1600 	strd	r1, r6, [r0]
 801dd74:	300c      	adds	r0, #12
 801dd76:	60a0      	str	r0, [r4, #8]
 801dd78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801dd7c:	f7fb fd94 	bl	80198a8 <memset>
 801dd80:	4620      	mov	r0, r4
 801dd82:	bd70      	pop	{r4, r5, r6, pc}

0801dd84 <__sfp_lock_acquire>:
 801dd84:	4801      	ldr	r0, [pc, #4]	; (801dd8c <__sfp_lock_acquire+0x8>)
 801dd86:	f000 b8b3 	b.w	801def0 <__retarget_lock_acquire_recursive>
 801dd8a:	bf00      	nop
 801dd8c:	20000dc9 	.word	0x20000dc9

0801dd90 <__sfp_lock_release>:
 801dd90:	4801      	ldr	r0, [pc, #4]	; (801dd98 <__sfp_lock_release+0x8>)
 801dd92:	f000 b8ae 	b.w	801def2 <__retarget_lock_release_recursive>
 801dd96:	bf00      	nop
 801dd98:	20000dc9 	.word	0x20000dc9

0801dd9c <__sinit_lock_acquire>:
 801dd9c:	4801      	ldr	r0, [pc, #4]	; (801dda4 <__sinit_lock_acquire+0x8>)
 801dd9e:	f000 b8a7 	b.w	801def0 <__retarget_lock_acquire_recursive>
 801dda2:	bf00      	nop
 801dda4:	20000dca 	.word	0x20000dca

0801dda8 <__sinit_lock_release>:
 801dda8:	4801      	ldr	r0, [pc, #4]	; (801ddb0 <__sinit_lock_release+0x8>)
 801ddaa:	f000 b8a2 	b.w	801def2 <__retarget_lock_release_recursive>
 801ddae:	bf00      	nop
 801ddb0:	20000dca 	.word	0x20000dca

0801ddb4 <__sinit>:
 801ddb4:	b510      	push	{r4, lr}
 801ddb6:	4604      	mov	r4, r0
 801ddb8:	f7ff fff0 	bl	801dd9c <__sinit_lock_acquire>
 801ddbc:	69a3      	ldr	r3, [r4, #24]
 801ddbe:	b11b      	cbz	r3, 801ddc8 <__sinit+0x14>
 801ddc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ddc4:	f7ff bff0 	b.w	801dda8 <__sinit_lock_release>
 801ddc8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801ddcc:	6523      	str	r3, [r4, #80]	; 0x50
 801ddce:	4b13      	ldr	r3, [pc, #76]	; (801de1c <__sinit+0x68>)
 801ddd0:	4a13      	ldr	r2, [pc, #76]	; (801de20 <__sinit+0x6c>)
 801ddd2:	681b      	ldr	r3, [r3, #0]
 801ddd4:	62a2      	str	r2, [r4, #40]	; 0x28
 801ddd6:	42a3      	cmp	r3, r4
 801ddd8:	bf04      	itt	eq
 801ddda:	2301      	moveq	r3, #1
 801dddc:	61a3      	streq	r3, [r4, #24]
 801ddde:	4620      	mov	r0, r4
 801dde0:	f000 f820 	bl	801de24 <__sfp>
 801dde4:	6060      	str	r0, [r4, #4]
 801dde6:	4620      	mov	r0, r4
 801dde8:	f000 f81c 	bl	801de24 <__sfp>
 801ddec:	60a0      	str	r0, [r4, #8]
 801ddee:	4620      	mov	r0, r4
 801ddf0:	f000 f818 	bl	801de24 <__sfp>
 801ddf4:	2200      	movs	r2, #0
 801ddf6:	60e0      	str	r0, [r4, #12]
 801ddf8:	2104      	movs	r1, #4
 801ddfa:	6860      	ldr	r0, [r4, #4]
 801ddfc:	f7ff ff82 	bl	801dd04 <std>
 801de00:	68a0      	ldr	r0, [r4, #8]
 801de02:	2201      	movs	r2, #1
 801de04:	2109      	movs	r1, #9
 801de06:	f7ff ff7d 	bl	801dd04 <std>
 801de0a:	68e0      	ldr	r0, [r4, #12]
 801de0c:	2202      	movs	r2, #2
 801de0e:	2112      	movs	r1, #18
 801de10:	f7ff ff78 	bl	801dd04 <std>
 801de14:	2301      	movs	r3, #1
 801de16:	61a3      	str	r3, [r4, #24]
 801de18:	e7d2      	b.n	801ddc0 <__sinit+0xc>
 801de1a:	bf00      	nop
 801de1c:	080521b0 	.word	0x080521b0
 801de20:	0801dd4d 	.word	0x0801dd4d

0801de24 <__sfp>:
 801de24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801de26:	4607      	mov	r7, r0
 801de28:	f7ff ffac 	bl	801dd84 <__sfp_lock_acquire>
 801de2c:	4b1e      	ldr	r3, [pc, #120]	; (801dea8 <__sfp+0x84>)
 801de2e:	681e      	ldr	r6, [r3, #0]
 801de30:	69b3      	ldr	r3, [r6, #24]
 801de32:	b913      	cbnz	r3, 801de3a <__sfp+0x16>
 801de34:	4630      	mov	r0, r6
 801de36:	f7ff ffbd 	bl	801ddb4 <__sinit>
 801de3a:	3648      	adds	r6, #72	; 0x48
 801de3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801de40:	3b01      	subs	r3, #1
 801de42:	d503      	bpl.n	801de4c <__sfp+0x28>
 801de44:	6833      	ldr	r3, [r6, #0]
 801de46:	b30b      	cbz	r3, 801de8c <__sfp+0x68>
 801de48:	6836      	ldr	r6, [r6, #0]
 801de4a:	e7f7      	b.n	801de3c <__sfp+0x18>
 801de4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801de50:	b9d5      	cbnz	r5, 801de88 <__sfp+0x64>
 801de52:	4b16      	ldr	r3, [pc, #88]	; (801deac <__sfp+0x88>)
 801de54:	60e3      	str	r3, [r4, #12]
 801de56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801de5a:	6665      	str	r5, [r4, #100]	; 0x64
 801de5c:	f000 f847 	bl	801deee <__retarget_lock_init_recursive>
 801de60:	f7ff ff96 	bl	801dd90 <__sfp_lock_release>
 801de64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801de68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801de6c:	6025      	str	r5, [r4, #0]
 801de6e:	61a5      	str	r5, [r4, #24]
 801de70:	2208      	movs	r2, #8
 801de72:	4629      	mov	r1, r5
 801de74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801de78:	f7fb fd16 	bl	80198a8 <memset>
 801de7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801de80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801de84:	4620      	mov	r0, r4
 801de86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801de88:	3468      	adds	r4, #104	; 0x68
 801de8a:	e7d9      	b.n	801de40 <__sfp+0x1c>
 801de8c:	2104      	movs	r1, #4
 801de8e:	4638      	mov	r0, r7
 801de90:	f7ff ff62 	bl	801dd58 <__sfmoreglue>
 801de94:	4604      	mov	r4, r0
 801de96:	6030      	str	r0, [r6, #0]
 801de98:	2800      	cmp	r0, #0
 801de9a:	d1d5      	bne.n	801de48 <__sfp+0x24>
 801de9c:	f7ff ff78 	bl	801dd90 <__sfp_lock_release>
 801dea0:	230c      	movs	r3, #12
 801dea2:	603b      	str	r3, [r7, #0]
 801dea4:	e7ee      	b.n	801de84 <__sfp+0x60>
 801dea6:	bf00      	nop
 801dea8:	080521b0 	.word	0x080521b0
 801deac:	ffff0001 	.word	0xffff0001

0801deb0 <_fwalk_reent>:
 801deb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801deb4:	4606      	mov	r6, r0
 801deb6:	4688      	mov	r8, r1
 801deb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801debc:	2700      	movs	r7, #0
 801debe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801dec2:	f1b9 0901 	subs.w	r9, r9, #1
 801dec6:	d505      	bpl.n	801ded4 <_fwalk_reent+0x24>
 801dec8:	6824      	ldr	r4, [r4, #0]
 801deca:	2c00      	cmp	r4, #0
 801decc:	d1f7      	bne.n	801debe <_fwalk_reent+0xe>
 801dece:	4638      	mov	r0, r7
 801ded0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ded4:	89ab      	ldrh	r3, [r5, #12]
 801ded6:	2b01      	cmp	r3, #1
 801ded8:	d907      	bls.n	801deea <_fwalk_reent+0x3a>
 801deda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801dede:	3301      	adds	r3, #1
 801dee0:	d003      	beq.n	801deea <_fwalk_reent+0x3a>
 801dee2:	4629      	mov	r1, r5
 801dee4:	4630      	mov	r0, r6
 801dee6:	47c0      	blx	r8
 801dee8:	4307      	orrs	r7, r0
 801deea:	3568      	adds	r5, #104	; 0x68
 801deec:	e7e9      	b.n	801dec2 <_fwalk_reent+0x12>

0801deee <__retarget_lock_init_recursive>:
 801deee:	4770      	bx	lr

0801def0 <__retarget_lock_acquire_recursive>:
 801def0:	4770      	bx	lr

0801def2 <__retarget_lock_release_recursive>:
 801def2:	4770      	bx	lr

0801def4 <__swhatbuf_r>:
 801def4:	b570      	push	{r4, r5, r6, lr}
 801def6:	460e      	mov	r6, r1
 801def8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801defc:	2900      	cmp	r1, #0
 801defe:	b096      	sub	sp, #88	; 0x58
 801df00:	4614      	mov	r4, r2
 801df02:	461d      	mov	r5, r3
 801df04:	da08      	bge.n	801df18 <__swhatbuf_r+0x24>
 801df06:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801df0a:	2200      	movs	r2, #0
 801df0c:	602a      	str	r2, [r5, #0]
 801df0e:	061a      	lsls	r2, r3, #24
 801df10:	d410      	bmi.n	801df34 <__swhatbuf_r+0x40>
 801df12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801df16:	e00e      	b.n	801df36 <__swhatbuf_r+0x42>
 801df18:	466a      	mov	r2, sp
 801df1a:	f000 f903 	bl	801e124 <_fstat_r>
 801df1e:	2800      	cmp	r0, #0
 801df20:	dbf1      	blt.n	801df06 <__swhatbuf_r+0x12>
 801df22:	9a01      	ldr	r2, [sp, #4]
 801df24:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801df28:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801df2c:	425a      	negs	r2, r3
 801df2e:	415a      	adcs	r2, r3
 801df30:	602a      	str	r2, [r5, #0]
 801df32:	e7ee      	b.n	801df12 <__swhatbuf_r+0x1e>
 801df34:	2340      	movs	r3, #64	; 0x40
 801df36:	2000      	movs	r0, #0
 801df38:	6023      	str	r3, [r4, #0]
 801df3a:	b016      	add	sp, #88	; 0x58
 801df3c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801df40 <__smakebuf_r>:
 801df40:	898b      	ldrh	r3, [r1, #12]
 801df42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801df44:	079d      	lsls	r5, r3, #30
 801df46:	4606      	mov	r6, r0
 801df48:	460c      	mov	r4, r1
 801df4a:	d507      	bpl.n	801df5c <__smakebuf_r+0x1c>
 801df4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801df50:	6023      	str	r3, [r4, #0]
 801df52:	6123      	str	r3, [r4, #16]
 801df54:	2301      	movs	r3, #1
 801df56:	6163      	str	r3, [r4, #20]
 801df58:	b002      	add	sp, #8
 801df5a:	bd70      	pop	{r4, r5, r6, pc}
 801df5c:	ab01      	add	r3, sp, #4
 801df5e:	466a      	mov	r2, sp
 801df60:	f7ff ffc8 	bl	801def4 <__swhatbuf_r>
 801df64:	9900      	ldr	r1, [sp, #0]
 801df66:	4605      	mov	r5, r0
 801df68:	4630      	mov	r0, r6
 801df6a:	f7ff f957 	bl	801d21c <_malloc_r>
 801df6e:	b948      	cbnz	r0, 801df84 <__smakebuf_r+0x44>
 801df70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801df74:	059a      	lsls	r2, r3, #22
 801df76:	d4ef      	bmi.n	801df58 <__smakebuf_r+0x18>
 801df78:	f023 0303 	bic.w	r3, r3, #3
 801df7c:	f043 0302 	orr.w	r3, r3, #2
 801df80:	81a3      	strh	r3, [r4, #12]
 801df82:	e7e3      	b.n	801df4c <__smakebuf_r+0xc>
 801df84:	4b0d      	ldr	r3, [pc, #52]	; (801dfbc <__smakebuf_r+0x7c>)
 801df86:	62b3      	str	r3, [r6, #40]	; 0x28
 801df88:	89a3      	ldrh	r3, [r4, #12]
 801df8a:	6020      	str	r0, [r4, #0]
 801df8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801df90:	81a3      	strh	r3, [r4, #12]
 801df92:	9b00      	ldr	r3, [sp, #0]
 801df94:	6163      	str	r3, [r4, #20]
 801df96:	9b01      	ldr	r3, [sp, #4]
 801df98:	6120      	str	r0, [r4, #16]
 801df9a:	b15b      	cbz	r3, 801dfb4 <__smakebuf_r+0x74>
 801df9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801dfa0:	4630      	mov	r0, r6
 801dfa2:	f000 f8d1 	bl	801e148 <_isatty_r>
 801dfa6:	b128      	cbz	r0, 801dfb4 <__smakebuf_r+0x74>
 801dfa8:	89a3      	ldrh	r3, [r4, #12]
 801dfaa:	f023 0303 	bic.w	r3, r3, #3
 801dfae:	f043 0301 	orr.w	r3, r3, #1
 801dfb2:	81a3      	strh	r3, [r4, #12]
 801dfb4:	89a0      	ldrh	r0, [r4, #12]
 801dfb6:	4305      	orrs	r5, r0
 801dfb8:	81a5      	strh	r5, [r4, #12]
 801dfba:	e7cd      	b.n	801df58 <__smakebuf_r+0x18>
 801dfbc:	0801dd4d 	.word	0x0801dd4d

0801dfc0 <_malloc_usable_size_r>:
 801dfc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801dfc4:	1f18      	subs	r0, r3, #4
 801dfc6:	2b00      	cmp	r3, #0
 801dfc8:	bfbc      	itt	lt
 801dfca:	580b      	ldrlt	r3, [r1, r0]
 801dfcc:	18c0      	addlt	r0, r0, r3
 801dfce:	4770      	bx	lr

0801dfd0 <_raise_r>:
 801dfd0:	291f      	cmp	r1, #31
 801dfd2:	b538      	push	{r3, r4, r5, lr}
 801dfd4:	4604      	mov	r4, r0
 801dfd6:	460d      	mov	r5, r1
 801dfd8:	d904      	bls.n	801dfe4 <_raise_r+0x14>
 801dfda:	2316      	movs	r3, #22
 801dfdc:	6003      	str	r3, [r0, #0]
 801dfde:	f04f 30ff 	mov.w	r0, #4294967295
 801dfe2:	bd38      	pop	{r3, r4, r5, pc}
 801dfe4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801dfe6:	b112      	cbz	r2, 801dfee <_raise_r+0x1e>
 801dfe8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801dfec:	b94b      	cbnz	r3, 801e002 <_raise_r+0x32>
 801dfee:	4620      	mov	r0, r4
 801dff0:	f000 f830 	bl	801e054 <_getpid_r>
 801dff4:	462a      	mov	r2, r5
 801dff6:	4601      	mov	r1, r0
 801dff8:	4620      	mov	r0, r4
 801dffa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801dffe:	f000 b817 	b.w	801e030 <_kill_r>
 801e002:	2b01      	cmp	r3, #1
 801e004:	d00a      	beq.n	801e01c <_raise_r+0x4c>
 801e006:	1c59      	adds	r1, r3, #1
 801e008:	d103      	bne.n	801e012 <_raise_r+0x42>
 801e00a:	2316      	movs	r3, #22
 801e00c:	6003      	str	r3, [r0, #0]
 801e00e:	2001      	movs	r0, #1
 801e010:	e7e7      	b.n	801dfe2 <_raise_r+0x12>
 801e012:	2400      	movs	r4, #0
 801e014:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801e018:	4628      	mov	r0, r5
 801e01a:	4798      	blx	r3
 801e01c:	2000      	movs	r0, #0
 801e01e:	e7e0      	b.n	801dfe2 <_raise_r+0x12>

0801e020 <raise>:
 801e020:	4b02      	ldr	r3, [pc, #8]	; (801e02c <raise+0xc>)
 801e022:	4601      	mov	r1, r0
 801e024:	6818      	ldr	r0, [r3, #0]
 801e026:	f7ff bfd3 	b.w	801dfd0 <_raise_r>
 801e02a:	bf00      	nop
 801e02c:	20000064 	.word	0x20000064

0801e030 <_kill_r>:
 801e030:	b538      	push	{r3, r4, r5, lr}
 801e032:	4d07      	ldr	r5, [pc, #28]	; (801e050 <_kill_r+0x20>)
 801e034:	2300      	movs	r3, #0
 801e036:	4604      	mov	r4, r0
 801e038:	4608      	mov	r0, r1
 801e03a:	4611      	mov	r1, r2
 801e03c:	602b      	str	r3, [r5, #0]
 801e03e:	f7e7 ffd0 	bl	8005fe2 <_kill>
 801e042:	1c43      	adds	r3, r0, #1
 801e044:	d102      	bne.n	801e04c <_kill_r+0x1c>
 801e046:	682b      	ldr	r3, [r5, #0]
 801e048:	b103      	cbz	r3, 801e04c <_kill_r+0x1c>
 801e04a:	6023      	str	r3, [r4, #0]
 801e04c:	bd38      	pop	{r3, r4, r5, pc}
 801e04e:	bf00      	nop
 801e050:	20000dc4 	.word	0x20000dc4

0801e054 <_getpid_r>:
 801e054:	f7e7 bfbd 	b.w	8005fd2 <_getpid>

0801e058 <__sread>:
 801e058:	b510      	push	{r4, lr}
 801e05a:	460c      	mov	r4, r1
 801e05c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e060:	f000 f894 	bl	801e18c <_read_r>
 801e064:	2800      	cmp	r0, #0
 801e066:	bfab      	itete	ge
 801e068:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801e06a:	89a3      	ldrhlt	r3, [r4, #12]
 801e06c:	181b      	addge	r3, r3, r0
 801e06e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801e072:	bfac      	ite	ge
 801e074:	6563      	strge	r3, [r4, #84]	; 0x54
 801e076:	81a3      	strhlt	r3, [r4, #12]
 801e078:	bd10      	pop	{r4, pc}

0801e07a <__swrite>:
 801e07a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e07e:	461f      	mov	r7, r3
 801e080:	898b      	ldrh	r3, [r1, #12]
 801e082:	05db      	lsls	r3, r3, #23
 801e084:	4605      	mov	r5, r0
 801e086:	460c      	mov	r4, r1
 801e088:	4616      	mov	r6, r2
 801e08a:	d505      	bpl.n	801e098 <__swrite+0x1e>
 801e08c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e090:	2302      	movs	r3, #2
 801e092:	2200      	movs	r2, #0
 801e094:	f000 f868 	bl	801e168 <_lseek_r>
 801e098:	89a3      	ldrh	r3, [r4, #12]
 801e09a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e09e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801e0a2:	81a3      	strh	r3, [r4, #12]
 801e0a4:	4632      	mov	r2, r6
 801e0a6:	463b      	mov	r3, r7
 801e0a8:	4628      	mov	r0, r5
 801e0aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e0ae:	f000 b817 	b.w	801e0e0 <_write_r>

0801e0b2 <__sseek>:
 801e0b2:	b510      	push	{r4, lr}
 801e0b4:	460c      	mov	r4, r1
 801e0b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e0ba:	f000 f855 	bl	801e168 <_lseek_r>
 801e0be:	1c43      	adds	r3, r0, #1
 801e0c0:	89a3      	ldrh	r3, [r4, #12]
 801e0c2:	bf15      	itete	ne
 801e0c4:	6560      	strne	r0, [r4, #84]	; 0x54
 801e0c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801e0ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801e0ce:	81a3      	strheq	r3, [r4, #12]
 801e0d0:	bf18      	it	ne
 801e0d2:	81a3      	strhne	r3, [r4, #12]
 801e0d4:	bd10      	pop	{r4, pc}

0801e0d6 <__sclose>:
 801e0d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e0da:	f000 b813 	b.w	801e104 <_close_r>
	...

0801e0e0 <_write_r>:
 801e0e0:	b538      	push	{r3, r4, r5, lr}
 801e0e2:	4d07      	ldr	r5, [pc, #28]	; (801e100 <_write_r+0x20>)
 801e0e4:	4604      	mov	r4, r0
 801e0e6:	4608      	mov	r0, r1
 801e0e8:	4611      	mov	r1, r2
 801e0ea:	2200      	movs	r2, #0
 801e0ec:	602a      	str	r2, [r5, #0]
 801e0ee:	461a      	mov	r2, r3
 801e0f0:	f7e7 ffae 	bl	8006050 <_write>
 801e0f4:	1c43      	adds	r3, r0, #1
 801e0f6:	d102      	bne.n	801e0fe <_write_r+0x1e>
 801e0f8:	682b      	ldr	r3, [r5, #0]
 801e0fa:	b103      	cbz	r3, 801e0fe <_write_r+0x1e>
 801e0fc:	6023      	str	r3, [r4, #0]
 801e0fe:	bd38      	pop	{r3, r4, r5, pc}
 801e100:	20000dc4 	.word	0x20000dc4

0801e104 <_close_r>:
 801e104:	b538      	push	{r3, r4, r5, lr}
 801e106:	4d06      	ldr	r5, [pc, #24]	; (801e120 <_close_r+0x1c>)
 801e108:	2300      	movs	r3, #0
 801e10a:	4604      	mov	r4, r0
 801e10c:	4608      	mov	r0, r1
 801e10e:	602b      	str	r3, [r5, #0]
 801e110:	f7e7 ffba 	bl	8006088 <_close>
 801e114:	1c43      	adds	r3, r0, #1
 801e116:	d102      	bne.n	801e11e <_close_r+0x1a>
 801e118:	682b      	ldr	r3, [r5, #0]
 801e11a:	b103      	cbz	r3, 801e11e <_close_r+0x1a>
 801e11c:	6023      	str	r3, [r4, #0]
 801e11e:	bd38      	pop	{r3, r4, r5, pc}
 801e120:	20000dc4 	.word	0x20000dc4

0801e124 <_fstat_r>:
 801e124:	b538      	push	{r3, r4, r5, lr}
 801e126:	4d07      	ldr	r5, [pc, #28]	; (801e144 <_fstat_r+0x20>)
 801e128:	2300      	movs	r3, #0
 801e12a:	4604      	mov	r4, r0
 801e12c:	4608      	mov	r0, r1
 801e12e:	4611      	mov	r1, r2
 801e130:	602b      	str	r3, [r5, #0]
 801e132:	f7e7 ffb5 	bl	80060a0 <_fstat>
 801e136:	1c43      	adds	r3, r0, #1
 801e138:	d102      	bne.n	801e140 <_fstat_r+0x1c>
 801e13a:	682b      	ldr	r3, [r5, #0]
 801e13c:	b103      	cbz	r3, 801e140 <_fstat_r+0x1c>
 801e13e:	6023      	str	r3, [r4, #0]
 801e140:	bd38      	pop	{r3, r4, r5, pc}
 801e142:	bf00      	nop
 801e144:	20000dc4 	.word	0x20000dc4

0801e148 <_isatty_r>:
 801e148:	b538      	push	{r3, r4, r5, lr}
 801e14a:	4d06      	ldr	r5, [pc, #24]	; (801e164 <_isatty_r+0x1c>)
 801e14c:	2300      	movs	r3, #0
 801e14e:	4604      	mov	r4, r0
 801e150:	4608      	mov	r0, r1
 801e152:	602b      	str	r3, [r5, #0]
 801e154:	f7e7 ffb4 	bl	80060c0 <_isatty>
 801e158:	1c43      	adds	r3, r0, #1
 801e15a:	d102      	bne.n	801e162 <_isatty_r+0x1a>
 801e15c:	682b      	ldr	r3, [r5, #0]
 801e15e:	b103      	cbz	r3, 801e162 <_isatty_r+0x1a>
 801e160:	6023      	str	r3, [r4, #0]
 801e162:	bd38      	pop	{r3, r4, r5, pc}
 801e164:	20000dc4 	.word	0x20000dc4

0801e168 <_lseek_r>:
 801e168:	b538      	push	{r3, r4, r5, lr}
 801e16a:	4d07      	ldr	r5, [pc, #28]	; (801e188 <_lseek_r+0x20>)
 801e16c:	4604      	mov	r4, r0
 801e16e:	4608      	mov	r0, r1
 801e170:	4611      	mov	r1, r2
 801e172:	2200      	movs	r2, #0
 801e174:	602a      	str	r2, [r5, #0]
 801e176:	461a      	mov	r2, r3
 801e178:	f7e7 ffad 	bl	80060d6 <_lseek>
 801e17c:	1c43      	adds	r3, r0, #1
 801e17e:	d102      	bne.n	801e186 <_lseek_r+0x1e>
 801e180:	682b      	ldr	r3, [r5, #0]
 801e182:	b103      	cbz	r3, 801e186 <_lseek_r+0x1e>
 801e184:	6023      	str	r3, [r4, #0]
 801e186:	bd38      	pop	{r3, r4, r5, pc}
 801e188:	20000dc4 	.word	0x20000dc4

0801e18c <_read_r>:
 801e18c:	b538      	push	{r3, r4, r5, lr}
 801e18e:	4d07      	ldr	r5, [pc, #28]	; (801e1ac <_read_r+0x20>)
 801e190:	4604      	mov	r4, r0
 801e192:	4608      	mov	r0, r1
 801e194:	4611      	mov	r1, r2
 801e196:	2200      	movs	r2, #0
 801e198:	602a      	str	r2, [r5, #0]
 801e19a:	461a      	mov	r2, r3
 801e19c:	f7e7 ff3b 	bl	8006016 <_read>
 801e1a0:	1c43      	adds	r3, r0, #1
 801e1a2:	d102      	bne.n	801e1aa <_read_r+0x1e>
 801e1a4:	682b      	ldr	r3, [r5, #0]
 801e1a6:	b103      	cbz	r3, 801e1aa <_read_r+0x1e>
 801e1a8:	6023      	str	r3, [r4, #0]
 801e1aa:	bd38      	pop	{r3, r4, r5, pc}
 801e1ac:	20000dc4 	.word	0x20000dc4

0801e1b0 <memcmp>:
 801e1b0:	b510      	push	{r4, lr}
 801e1b2:	3901      	subs	r1, #1
 801e1b4:	4402      	add	r2, r0
 801e1b6:	4290      	cmp	r0, r2
 801e1b8:	d101      	bne.n	801e1be <memcmp+0xe>
 801e1ba:	2000      	movs	r0, #0
 801e1bc:	e005      	b.n	801e1ca <memcmp+0x1a>
 801e1be:	7803      	ldrb	r3, [r0, #0]
 801e1c0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801e1c4:	42a3      	cmp	r3, r4
 801e1c6:	d001      	beq.n	801e1cc <memcmp+0x1c>
 801e1c8:	1b18      	subs	r0, r3, r4
 801e1ca:	bd10      	pop	{r4, pc}
 801e1cc:	3001      	adds	r0, #1
 801e1ce:	e7f2      	b.n	801e1b6 <memcmp+0x6>

0801e1d0 <floor>:
 801e1d0:	ec51 0b10 	vmov	r0, r1, d0
 801e1d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e1d8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801e1dc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801e1e0:	2e13      	cmp	r6, #19
 801e1e2:	ee10 5a10 	vmov	r5, s0
 801e1e6:	ee10 8a10 	vmov	r8, s0
 801e1ea:	460c      	mov	r4, r1
 801e1ec:	dc32      	bgt.n	801e254 <floor+0x84>
 801e1ee:	2e00      	cmp	r6, #0
 801e1f0:	da14      	bge.n	801e21c <floor+0x4c>
 801e1f2:	a333      	add	r3, pc, #204	; (adr r3, 801e2c0 <floor+0xf0>)
 801e1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e1f8:	f7fa fc48 	bl	8018a8c <__adddf3>
 801e1fc:	2200      	movs	r2, #0
 801e1fe:	2300      	movs	r3, #0
 801e200:	f7fb f88a 	bl	8019318 <__aeabi_dcmpgt>
 801e204:	b138      	cbz	r0, 801e216 <floor+0x46>
 801e206:	2c00      	cmp	r4, #0
 801e208:	da57      	bge.n	801e2ba <floor+0xea>
 801e20a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801e20e:	431d      	orrs	r5, r3
 801e210:	d001      	beq.n	801e216 <floor+0x46>
 801e212:	4c2d      	ldr	r4, [pc, #180]	; (801e2c8 <floor+0xf8>)
 801e214:	2500      	movs	r5, #0
 801e216:	4621      	mov	r1, r4
 801e218:	4628      	mov	r0, r5
 801e21a:	e025      	b.n	801e268 <floor+0x98>
 801e21c:	4f2b      	ldr	r7, [pc, #172]	; (801e2cc <floor+0xfc>)
 801e21e:	4137      	asrs	r7, r6
 801e220:	ea01 0307 	and.w	r3, r1, r7
 801e224:	4303      	orrs	r3, r0
 801e226:	d01f      	beq.n	801e268 <floor+0x98>
 801e228:	a325      	add	r3, pc, #148	; (adr r3, 801e2c0 <floor+0xf0>)
 801e22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e22e:	f7fa fc2d 	bl	8018a8c <__adddf3>
 801e232:	2200      	movs	r2, #0
 801e234:	2300      	movs	r3, #0
 801e236:	f7fb f86f 	bl	8019318 <__aeabi_dcmpgt>
 801e23a:	2800      	cmp	r0, #0
 801e23c:	d0eb      	beq.n	801e216 <floor+0x46>
 801e23e:	2c00      	cmp	r4, #0
 801e240:	bfbe      	ittt	lt
 801e242:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801e246:	fa43 f606 	asrlt.w	r6, r3, r6
 801e24a:	19a4      	addlt	r4, r4, r6
 801e24c:	ea24 0407 	bic.w	r4, r4, r7
 801e250:	2500      	movs	r5, #0
 801e252:	e7e0      	b.n	801e216 <floor+0x46>
 801e254:	2e33      	cmp	r6, #51	; 0x33
 801e256:	dd0b      	ble.n	801e270 <floor+0xa0>
 801e258:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801e25c:	d104      	bne.n	801e268 <floor+0x98>
 801e25e:	ee10 2a10 	vmov	r2, s0
 801e262:	460b      	mov	r3, r1
 801e264:	f7fa fc12 	bl	8018a8c <__adddf3>
 801e268:	ec41 0b10 	vmov	d0, r0, r1
 801e26c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e270:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801e274:	f04f 33ff 	mov.w	r3, #4294967295
 801e278:	fa23 f707 	lsr.w	r7, r3, r7
 801e27c:	4207      	tst	r7, r0
 801e27e:	d0f3      	beq.n	801e268 <floor+0x98>
 801e280:	a30f      	add	r3, pc, #60	; (adr r3, 801e2c0 <floor+0xf0>)
 801e282:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e286:	f7fa fc01 	bl	8018a8c <__adddf3>
 801e28a:	2200      	movs	r2, #0
 801e28c:	2300      	movs	r3, #0
 801e28e:	f7fb f843 	bl	8019318 <__aeabi_dcmpgt>
 801e292:	2800      	cmp	r0, #0
 801e294:	d0bf      	beq.n	801e216 <floor+0x46>
 801e296:	2c00      	cmp	r4, #0
 801e298:	da02      	bge.n	801e2a0 <floor+0xd0>
 801e29a:	2e14      	cmp	r6, #20
 801e29c:	d103      	bne.n	801e2a6 <floor+0xd6>
 801e29e:	3401      	adds	r4, #1
 801e2a0:	ea25 0507 	bic.w	r5, r5, r7
 801e2a4:	e7b7      	b.n	801e216 <floor+0x46>
 801e2a6:	2301      	movs	r3, #1
 801e2a8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801e2ac:	fa03 f606 	lsl.w	r6, r3, r6
 801e2b0:	4435      	add	r5, r6
 801e2b2:	4545      	cmp	r5, r8
 801e2b4:	bf38      	it	cc
 801e2b6:	18e4      	addcc	r4, r4, r3
 801e2b8:	e7f2      	b.n	801e2a0 <floor+0xd0>
 801e2ba:	2500      	movs	r5, #0
 801e2bc:	462c      	mov	r4, r5
 801e2be:	e7aa      	b.n	801e216 <floor+0x46>
 801e2c0:	8800759c 	.word	0x8800759c
 801e2c4:	7e37e43c 	.word	0x7e37e43c
 801e2c8:	bff00000 	.word	0xbff00000
 801e2cc:	000fffff 	.word	0x000fffff

0801e2d0 <pow>:
 801e2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e2d2:	ed2d 8b02 	vpush	{d8}
 801e2d6:	eeb0 8a40 	vmov.f32	s16, s0
 801e2da:	eef0 8a60 	vmov.f32	s17, s1
 801e2de:	ec55 4b11 	vmov	r4, r5, d1
 801e2e2:	f000 f865 	bl	801e3b0 <__ieee754_pow>
 801e2e6:	4622      	mov	r2, r4
 801e2e8:	462b      	mov	r3, r5
 801e2ea:	4620      	mov	r0, r4
 801e2ec:	4629      	mov	r1, r5
 801e2ee:	ec57 6b10 	vmov	r6, r7, d0
 801e2f2:	f7fb f81b 	bl	801932c <__aeabi_dcmpun>
 801e2f6:	2800      	cmp	r0, #0
 801e2f8:	d13b      	bne.n	801e372 <pow+0xa2>
 801e2fa:	ec51 0b18 	vmov	r0, r1, d8
 801e2fe:	2200      	movs	r2, #0
 801e300:	2300      	movs	r3, #0
 801e302:	f7fa ffe1 	bl	80192c8 <__aeabi_dcmpeq>
 801e306:	b1b8      	cbz	r0, 801e338 <pow+0x68>
 801e308:	2200      	movs	r2, #0
 801e30a:	2300      	movs	r3, #0
 801e30c:	4620      	mov	r0, r4
 801e30e:	4629      	mov	r1, r5
 801e310:	f7fa ffda 	bl	80192c8 <__aeabi_dcmpeq>
 801e314:	2800      	cmp	r0, #0
 801e316:	d146      	bne.n	801e3a6 <pow+0xd6>
 801e318:	ec45 4b10 	vmov	d0, r4, r5
 801e31c:	f000 fe61 	bl	801efe2 <finite>
 801e320:	b338      	cbz	r0, 801e372 <pow+0xa2>
 801e322:	2200      	movs	r2, #0
 801e324:	2300      	movs	r3, #0
 801e326:	4620      	mov	r0, r4
 801e328:	4629      	mov	r1, r5
 801e32a:	f7fa ffd7 	bl	80192dc <__aeabi_dcmplt>
 801e32e:	b300      	cbz	r0, 801e372 <pow+0xa2>
 801e330:	f7fb fa90 	bl	8019854 <__errno>
 801e334:	2322      	movs	r3, #34	; 0x22
 801e336:	e01b      	b.n	801e370 <pow+0xa0>
 801e338:	ec47 6b10 	vmov	d0, r6, r7
 801e33c:	f000 fe51 	bl	801efe2 <finite>
 801e340:	b9e0      	cbnz	r0, 801e37c <pow+0xac>
 801e342:	eeb0 0a48 	vmov.f32	s0, s16
 801e346:	eef0 0a68 	vmov.f32	s1, s17
 801e34a:	f000 fe4a 	bl	801efe2 <finite>
 801e34e:	b1a8      	cbz	r0, 801e37c <pow+0xac>
 801e350:	ec45 4b10 	vmov	d0, r4, r5
 801e354:	f000 fe45 	bl	801efe2 <finite>
 801e358:	b180      	cbz	r0, 801e37c <pow+0xac>
 801e35a:	4632      	mov	r2, r6
 801e35c:	463b      	mov	r3, r7
 801e35e:	4630      	mov	r0, r6
 801e360:	4639      	mov	r1, r7
 801e362:	f7fa ffe3 	bl	801932c <__aeabi_dcmpun>
 801e366:	2800      	cmp	r0, #0
 801e368:	d0e2      	beq.n	801e330 <pow+0x60>
 801e36a:	f7fb fa73 	bl	8019854 <__errno>
 801e36e:	2321      	movs	r3, #33	; 0x21
 801e370:	6003      	str	r3, [r0, #0]
 801e372:	ecbd 8b02 	vpop	{d8}
 801e376:	ec47 6b10 	vmov	d0, r6, r7
 801e37a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e37c:	2200      	movs	r2, #0
 801e37e:	2300      	movs	r3, #0
 801e380:	4630      	mov	r0, r6
 801e382:	4639      	mov	r1, r7
 801e384:	f7fa ffa0 	bl	80192c8 <__aeabi_dcmpeq>
 801e388:	2800      	cmp	r0, #0
 801e38a:	d0f2      	beq.n	801e372 <pow+0xa2>
 801e38c:	eeb0 0a48 	vmov.f32	s0, s16
 801e390:	eef0 0a68 	vmov.f32	s1, s17
 801e394:	f000 fe25 	bl	801efe2 <finite>
 801e398:	2800      	cmp	r0, #0
 801e39a:	d0ea      	beq.n	801e372 <pow+0xa2>
 801e39c:	ec45 4b10 	vmov	d0, r4, r5
 801e3a0:	f000 fe1f 	bl	801efe2 <finite>
 801e3a4:	e7c3      	b.n	801e32e <pow+0x5e>
 801e3a6:	4f01      	ldr	r7, [pc, #4]	; (801e3ac <pow+0xdc>)
 801e3a8:	2600      	movs	r6, #0
 801e3aa:	e7e2      	b.n	801e372 <pow+0xa2>
 801e3ac:	3ff00000 	.word	0x3ff00000

0801e3b0 <__ieee754_pow>:
 801e3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3b4:	ed2d 8b06 	vpush	{d8-d10}
 801e3b8:	b089      	sub	sp, #36	; 0x24
 801e3ba:	ed8d 1b00 	vstr	d1, [sp]
 801e3be:	e9dd 2900 	ldrd	r2, r9, [sp]
 801e3c2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801e3c6:	ea58 0102 	orrs.w	r1, r8, r2
 801e3ca:	ec57 6b10 	vmov	r6, r7, d0
 801e3ce:	d115      	bne.n	801e3fc <__ieee754_pow+0x4c>
 801e3d0:	19b3      	adds	r3, r6, r6
 801e3d2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801e3d6:	4152      	adcs	r2, r2
 801e3d8:	4299      	cmp	r1, r3
 801e3da:	4b89      	ldr	r3, [pc, #548]	; (801e600 <__ieee754_pow+0x250>)
 801e3dc:	4193      	sbcs	r3, r2
 801e3de:	f080 84d2 	bcs.w	801ed86 <__ieee754_pow+0x9d6>
 801e3e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e3e6:	4630      	mov	r0, r6
 801e3e8:	4639      	mov	r1, r7
 801e3ea:	f7fa fb4f 	bl	8018a8c <__adddf3>
 801e3ee:	ec41 0b10 	vmov	d0, r0, r1
 801e3f2:	b009      	add	sp, #36	; 0x24
 801e3f4:	ecbd 8b06 	vpop	{d8-d10}
 801e3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e3fc:	4b81      	ldr	r3, [pc, #516]	; (801e604 <__ieee754_pow+0x254>)
 801e3fe:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801e402:	429c      	cmp	r4, r3
 801e404:	ee10 aa10 	vmov	sl, s0
 801e408:	463d      	mov	r5, r7
 801e40a:	dc06      	bgt.n	801e41a <__ieee754_pow+0x6a>
 801e40c:	d101      	bne.n	801e412 <__ieee754_pow+0x62>
 801e40e:	2e00      	cmp	r6, #0
 801e410:	d1e7      	bne.n	801e3e2 <__ieee754_pow+0x32>
 801e412:	4598      	cmp	r8, r3
 801e414:	dc01      	bgt.n	801e41a <__ieee754_pow+0x6a>
 801e416:	d10f      	bne.n	801e438 <__ieee754_pow+0x88>
 801e418:	b172      	cbz	r2, 801e438 <__ieee754_pow+0x88>
 801e41a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801e41e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801e422:	ea55 050a 	orrs.w	r5, r5, sl
 801e426:	d1dc      	bne.n	801e3e2 <__ieee754_pow+0x32>
 801e428:	e9dd 3200 	ldrd	r3, r2, [sp]
 801e42c:	18db      	adds	r3, r3, r3
 801e42e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801e432:	4152      	adcs	r2, r2
 801e434:	429d      	cmp	r5, r3
 801e436:	e7d0      	b.n	801e3da <__ieee754_pow+0x2a>
 801e438:	2d00      	cmp	r5, #0
 801e43a:	da3b      	bge.n	801e4b4 <__ieee754_pow+0x104>
 801e43c:	4b72      	ldr	r3, [pc, #456]	; (801e608 <__ieee754_pow+0x258>)
 801e43e:	4598      	cmp	r8, r3
 801e440:	dc51      	bgt.n	801e4e6 <__ieee754_pow+0x136>
 801e442:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801e446:	4598      	cmp	r8, r3
 801e448:	f340 84ac 	ble.w	801eda4 <__ieee754_pow+0x9f4>
 801e44c:	ea4f 5328 	mov.w	r3, r8, asr #20
 801e450:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801e454:	2b14      	cmp	r3, #20
 801e456:	dd0f      	ble.n	801e478 <__ieee754_pow+0xc8>
 801e458:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801e45c:	fa22 f103 	lsr.w	r1, r2, r3
 801e460:	fa01 f303 	lsl.w	r3, r1, r3
 801e464:	4293      	cmp	r3, r2
 801e466:	f040 849d 	bne.w	801eda4 <__ieee754_pow+0x9f4>
 801e46a:	f001 0101 	and.w	r1, r1, #1
 801e46e:	f1c1 0302 	rsb	r3, r1, #2
 801e472:	9304      	str	r3, [sp, #16]
 801e474:	b182      	cbz	r2, 801e498 <__ieee754_pow+0xe8>
 801e476:	e05f      	b.n	801e538 <__ieee754_pow+0x188>
 801e478:	2a00      	cmp	r2, #0
 801e47a:	d15b      	bne.n	801e534 <__ieee754_pow+0x184>
 801e47c:	f1c3 0314 	rsb	r3, r3, #20
 801e480:	fa48 f103 	asr.w	r1, r8, r3
 801e484:	fa01 f303 	lsl.w	r3, r1, r3
 801e488:	4543      	cmp	r3, r8
 801e48a:	f040 8488 	bne.w	801ed9e <__ieee754_pow+0x9ee>
 801e48e:	f001 0101 	and.w	r1, r1, #1
 801e492:	f1c1 0302 	rsb	r3, r1, #2
 801e496:	9304      	str	r3, [sp, #16]
 801e498:	4b5c      	ldr	r3, [pc, #368]	; (801e60c <__ieee754_pow+0x25c>)
 801e49a:	4598      	cmp	r8, r3
 801e49c:	d132      	bne.n	801e504 <__ieee754_pow+0x154>
 801e49e:	f1b9 0f00 	cmp.w	r9, #0
 801e4a2:	f280 8478 	bge.w	801ed96 <__ieee754_pow+0x9e6>
 801e4a6:	4959      	ldr	r1, [pc, #356]	; (801e60c <__ieee754_pow+0x25c>)
 801e4a8:	4632      	mov	r2, r6
 801e4aa:	463b      	mov	r3, r7
 801e4ac:	2000      	movs	r0, #0
 801e4ae:	f7fa fdcd 	bl	801904c <__aeabi_ddiv>
 801e4b2:	e79c      	b.n	801e3ee <__ieee754_pow+0x3e>
 801e4b4:	2300      	movs	r3, #0
 801e4b6:	9304      	str	r3, [sp, #16]
 801e4b8:	2a00      	cmp	r2, #0
 801e4ba:	d13d      	bne.n	801e538 <__ieee754_pow+0x188>
 801e4bc:	4b51      	ldr	r3, [pc, #324]	; (801e604 <__ieee754_pow+0x254>)
 801e4be:	4598      	cmp	r8, r3
 801e4c0:	d1ea      	bne.n	801e498 <__ieee754_pow+0xe8>
 801e4c2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801e4c6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801e4ca:	ea53 030a 	orrs.w	r3, r3, sl
 801e4ce:	f000 845a 	beq.w	801ed86 <__ieee754_pow+0x9d6>
 801e4d2:	4b4f      	ldr	r3, [pc, #316]	; (801e610 <__ieee754_pow+0x260>)
 801e4d4:	429c      	cmp	r4, r3
 801e4d6:	dd08      	ble.n	801e4ea <__ieee754_pow+0x13a>
 801e4d8:	f1b9 0f00 	cmp.w	r9, #0
 801e4dc:	f2c0 8457 	blt.w	801ed8e <__ieee754_pow+0x9de>
 801e4e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e4e4:	e783      	b.n	801e3ee <__ieee754_pow+0x3e>
 801e4e6:	2302      	movs	r3, #2
 801e4e8:	e7e5      	b.n	801e4b6 <__ieee754_pow+0x106>
 801e4ea:	f1b9 0f00 	cmp.w	r9, #0
 801e4ee:	f04f 0000 	mov.w	r0, #0
 801e4f2:	f04f 0100 	mov.w	r1, #0
 801e4f6:	f6bf af7a 	bge.w	801e3ee <__ieee754_pow+0x3e>
 801e4fa:	e9dd 0300 	ldrd	r0, r3, [sp]
 801e4fe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801e502:	e774      	b.n	801e3ee <__ieee754_pow+0x3e>
 801e504:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801e508:	d106      	bne.n	801e518 <__ieee754_pow+0x168>
 801e50a:	4632      	mov	r2, r6
 801e50c:	463b      	mov	r3, r7
 801e50e:	4630      	mov	r0, r6
 801e510:	4639      	mov	r1, r7
 801e512:	f7fa fc71 	bl	8018df8 <__aeabi_dmul>
 801e516:	e76a      	b.n	801e3ee <__ieee754_pow+0x3e>
 801e518:	4b3e      	ldr	r3, [pc, #248]	; (801e614 <__ieee754_pow+0x264>)
 801e51a:	4599      	cmp	r9, r3
 801e51c:	d10c      	bne.n	801e538 <__ieee754_pow+0x188>
 801e51e:	2d00      	cmp	r5, #0
 801e520:	db0a      	blt.n	801e538 <__ieee754_pow+0x188>
 801e522:	ec47 6b10 	vmov	d0, r6, r7
 801e526:	b009      	add	sp, #36	; 0x24
 801e528:	ecbd 8b06 	vpop	{d8-d10}
 801e52c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e530:	f000 bc6c 	b.w	801ee0c <__ieee754_sqrt>
 801e534:	2300      	movs	r3, #0
 801e536:	9304      	str	r3, [sp, #16]
 801e538:	ec47 6b10 	vmov	d0, r6, r7
 801e53c:	f000 fd48 	bl	801efd0 <fabs>
 801e540:	ec51 0b10 	vmov	r0, r1, d0
 801e544:	f1ba 0f00 	cmp.w	sl, #0
 801e548:	d129      	bne.n	801e59e <__ieee754_pow+0x1ee>
 801e54a:	b124      	cbz	r4, 801e556 <__ieee754_pow+0x1a6>
 801e54c:	4b2f      	ldr	r3, [pc, #188]	; (801e60c <__ieee754_pow+0x25c>)
 801e54e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801e552:	429a      	cmp	r2, r3
 801e554:	d123      	bne.n	801e59e <__ieee754_pow+0x1ee>
 801e556:	f1b9 0f00 	cmp.w	r9, #0
 801e55a:	da05      	bge.n	801e568 <__ieee754_pow+0x1b8>
 801e55c:	4602      	mov	r2, r0
 801e55e:	460b      	mov	r3, r1
 801e560:	2000      	movs	r0, #0
 801e562:	492a      	ldr	r1, [pc, #168]	; (801e60c <__ieee754_pow+0x25c>)
 801e564:	f7fa fd72 	bl	801904c <__aeabi_ddiv>
 801e568:	2d00      	cmp	r5, #0
 801e56a:	f6bf af40 	bge.w	801e3ee <__ieee754_pow+0x3e>
 801e56e:	9b04      	ldr	r3, [sp, #16]
 801e570:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801e574:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801e578:	4323      	orrs	r3, r4
 801e57a:	d108      	bne.n	801e58e <__ieee754_pow+0x1de>
 801e57c:	4602      	mov	r2, r0
 801e57e:	460b      	mov	r3, r1
 801e580:	4610      	mov	r0, r2
 801e582:	4619      	mov	r1, r3
 801e584:	f7fa fa80 	bl	8018a88 <__aeabi_dsub>
 801e588:	4602      	mov	r2, r0
 801e58a:	460b      	mov	r3, r1
 801e58c:	e78f      	b.n	801e4ae <__ieee754_pow+0xfe>
 801e58e:	9b04      	ldr	r3, [sp, #16]
 801e590:	2b01      	cmp	r3, #1
 801e592:	f47f af2c 	bne.w	801e3ee <__ieee754_pow+0x3e>
 801e596:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e59a:	4619      	mov	r1, r3
 801e59c:	e727      	b.n	801e3ee <__ieee754_pow+0x3e>
 801e59e:	0feb      	lsrs	r3, r5, #31
 801e5a0:	3b01      	subs	r3, #1
 801e5a2:	9306      	str	r3, [sp, #24]
 801e5a4:	9a06      	ldr	r2, [sp, #24]
 801e5a6:	9b04      	ldr	r3, [sp, #16]
 801e5a8:	4313      	orrs	r3, r2
 801e5aa:	d102      	bne.n	801e5b2 <__ieee754_pow+0x202>
 801e5ac:	4632      	mov	r2, r6
 801e5ae:	463b      	mov	r3, r7
 801e5b0:	e7e6      	b.n	801e580 <__ieee754_pow+0x1d0>
 801e5b2:	4b19      	ldr	r3, [pc, #100]	; (801e618 <__ieee754_pow+0x268>)
 801e5b4:	4598      	cmp	r8, r3
 801e5b6:	f340 80fb 	ble.w	801e7b0 <__ieee754_pow+0x400>
 801e5ba:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801e5be:	4598      	cmp	r8, r3
 801e5c0:	4b13      	ldr	r3, [pc, #76]	; (801e610 <__ieee754_pow+0x260>)
 801e5c2:	dd0c      	ble.n	801e5de <__ieee754_pow+0x22e>
 801e5c4:	429c      	cmp	r4, r3
 801e5c6:	dc0f      	bgt.n	801e5e8 <__ieee754_pow+0x238>
 801e5c8:	f1b9 0f00 	cmp.w	r9, #0
 801e5cc:	da0f      	bge.n	801e5ee <__ieee754_pow+0x23e>
 801e5ce:	2000      	movs	r0, #0
 801e5d0:	b009      	add	sp, #36	; 0x24
 801e5d2:	ecbd 8b06 	vpop	{d8-d10}
 801e5d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5da:	f000 bcf0 	b.w	801efbe <__math_oflow>
 801e5de:	429c      	cmp	r4, r3
 801e5e0:	dbf2      	blt.n	801e5c8 <__ieee754_pow+0x218>
 801e5e2:	4b0a      	ldr	r3, [pc, #40]	; (801e60c <__ieee754_pow+0x25c>)
 801e5e4:	429c      	cmp	r4, r3
 801e5e6:	dd19      	ble.n	801e61c <__ieee754_pow+0x26c>
 801e5e8:	f1b9 0f00 	cmp.w	r9, #0
 801e5ec:	dcef      	bgt.n	801e5ce <__ieee754_pow+0x21e>
 801e5ee:	2000      	movs	r0, #0
 801e5f0:	b009      	add	sp, #36	; 0x24
 801e5f2:	ecbd 8b06 	vpop	{d8-d10}
 801e5f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5fa:	f000 bcd7 	b.w	801efac <__math_uflow>
 801e5fe:	bf00      	nop
 801e600:	fff00000 	.word	0xfff00000
 801e604:	7ff00000 	.word	0x7ff00000
 801e608:	433fffff 	.word	0x433fffff
 801e60c:	3ff00000 	.word	0x3ff00000
 801e610:	3fefffff 	.word	0x3fefffff
 801e614:	3fe00000 	.word	0x3fe00000
 801e618:	41e00000 	.word	0x41e00000
 801e61c:	4b60      	ldr	r3, [pc, #384]	; (801e7a0 <__ieee754_pow+0x3f0>)
 801e61e:	2200      	movs	r2, #0
 801e620:	f7fa fa32 	bl	8018a88 <__aeabi_dsub>
 801e624:	a354      	add	r3, pc, #336	; (adr r3, 801e778 <__ieee754_pow+0x3c8>)
 801e626:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e62a:	4604      	mov	r4, r0
 801e62c:	460d      	mov	r5, r1
 801e62e:	f7fa fbe3 	bl	8018df8 <__aeabi_dmul>
 801e632:	a353      	add	r3, pc, #332	; (adr r3, 801e780 <__ieee754_pow+0x3d0>)
 801e634:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e638:	4606      	mov	r6, r0
 801e63a:	460f      	mov	r7, r1
 801e63c:	4620      	mov	r0, r4
 801e63e:	4629      	mov	r1, r5
 801e640:	f7fa fbda 	bl	8018df8 <__aeabi_dmul>
 801e644:	4b57      	ldr	r3, [pc, #348]	; (801e7a4 <__ieee754_pow+0x3f4>)
 801e646:	4682      	mov	sl, r0
 801e648:	468b      	mov	fp, r1
 801e64a:	2200      	movs	r2, #0
 801e64c:	4620      	mov	r0, r4
 801e64e:	4629      	mov	r1, r5
 801e650:	f7fa fbd2 	bl	8018df8 <__aeabi_dmul>
 801e654:	4602      	mov	r2, r0
 801e656:	460b      	mov	r3, r1
 801e658:	a14b      	add	r1, pc, #300	; (adr r1, 801e788 <__ieee754_pow+0x3d8>)
 801e65a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e65e:	f7fa fa13 	bl	8018a88 <__aeabi_dsub>
 801e662:	4622      	mov	r2, r4
 801e664:	462b      	mov	r3, r5
 801e666:	f7fa fbc7 	bl	8018df8 <__aeabi_dmul>
 801e66a:	4602      	mov	r2, r0
 801e66c:	460b      	mov	r3, r1
 801e66e:	2000      	movs	r0, #0
 801e670:	494d      	ldr	r1, [pc, #308]	; (801e7a8 <__ieee754_pow+0x3f8>)
 801e672:	f7fa fa09 	bl	8018a88 <__aeabi_dsub>
 801e676:	4622      	mov	r2, r4
 801e678:	4680      	mov	r8, r0
 801e67a:	4689      	mov	r9, r1
 801e67c:	462b      	mov	r3, r5
 801e67e:	4620      	mov	r0, r4
 801e680:	4629      	mov	r1, r5
 801e682:	f7fa fbb9 	bl	8018df8 <__aeabi_dmul>
 801e686:	4602      	mov	r2, r0
 801e688:	460b      	mov	r3, r1
 801e68a:	4640      	mov	r0, r8
 801e68c:	4649      	mov	r1, r9
 801e68e:	f7fa fbb3 	bl	8018df8 <__aeabi_dmul>
 801e692:	a33f      	add	r3, pc, #252	; (adr r3, 801e790 <__ieee754_pow+0x3e0>)
 801e694:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e698:	f7fa fbae 	bl	8018df8 <__aeabi_dmul>
 801e69c:	4602      	mov	r2, r0
 801e69e:	460b      	mov	r3, r1
 801e6a0:	4650      	mov	r0, sl
 801e6a2:	4659      	mov	r1, fp
 801e6a4:	f7fa f9f0 	bl	8018a88 <__aeabi_dsub>
 801e6a8:	4602      	mov	r2, r0
 801e6aa:	460b      	mov	r3, r1
 801e6ac:	4680      	mov	r8, r0
 801e6ae:	4689      	mov	r9, r1
 801e6b0:	4630      	mov	r0, r6
 801e6b2:	4639      	mov	r1, r7
 801e6b4:	f7fa f9ea 	bl	8018a8c <__adddf3>
 801e6b8:	2000      	movs	r0, #0
 801e6ba:	4632      	mov	r2, r6
 801e6bc:	463b      	mov	r3, r7
 801e6be:	4604      	mov	r4, r0
 801e6c0:	460d      	mov	r5, r1
 801e6c2:	f7fa f9e1 	bl	8018a88 <__aeabi_dsub>
 801e6c6:	4602      	mov	r2, r0
 801e6c8:	460b      	mov	r3, r1
 801e6ca:	4640      	mov	r0, r8
 801e6cc:	4649      	mov	r1, r9
 801e6ce:	f7fa f9db 	bl	8018a88 <__aeabi_dsub>
 801e6d2:	9b04      	ldr	r3, [sp, #16]
 801e6d4:	9a06      	ldr	r2, [sp, #24]
 801e6d6:	3b01      	subs	r3, #1
 801e6d8:	4313      	orrs	r3, r2
 801e6da:	4682      	mov	sl, r0
 801e6dc:	468b      	mov	fp, r1
 801e6de:	f040 81e7 	bne.w	801eab0 <__ieee754_pow+0x700>
 801e6e2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 801e798 <__ieee754_pow+0x3e8>
 801e6e6:	eeb0 8a47 	vmov.f32	s16, s14
 801e6ea:	eef0 8a67 	vmov.f32	s17, s15
 801e6ee:	e9dd 6700 	ldrd	r6, r7, [sp]
 801e6f2:	2600      	movs	r6, #0
 801e6f4:	4632      	mov	r2, r6
 801e6f6:	463b      	mov	r3, r7
 801e6f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e6fc:	f7fa f9c4 	bl	8018a88 <__aeabi_dsub>
 801e700:	4622      	mov	r2, r4
 801e702:	462b      	mov	r3, r5
 801e704:	f7fa fb78 	bl	8018df8 <__aeabi_dmul>
 801e708:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e70c:	4680      	mov	r8, r0
 801e70e:	4689      	mov	r9, r1
 801e710:	4650      	mov	r0, sl
 801e712:	4659      	mov	r1, fp
 801e714:	f7fa fb70 	bl	8018df8 <__aeabi_dmul>
 801e718:	4602      	mov	r2, r0
 801e71a:	460b      	mov	r3, r1
 801e71c:	4640      	mov	r0, r8
 801e71e:	4649      	mov	r1, r9
 801e720:	f7fa f9b4 	bl	8018a8c <__adddf3>
 801e724:	4632      	mov	r2, r6
 801e726:	463b      	mov	r3, r7
 801e728:	4680      	mov	r8, r0
 801e72a:	4689      	mov	r9, r1
 801e72c:	4620      	mov	r0, r4
 801e72e:	4629      	mov	r1, r5
 801e730:	f7fa fb62 	bl	8018df8 <__aeabi_dmul>
 801e734:	460b      	mov	r3, r1
 801e736:	4604      	mov	r4, r0
 801e738:	460d      	mov	r5, r1
 801e73a:	4602      	mov	r2, r0
 801e73c:	4649      	mov	r1, r9
 801e73e:	4640      	mov	r0, r8
 801e740:	f7fa f9a4 	bl	8018a8c <__adddf3>
 801e744:	4b19      	ldr	r3, [pc, #100]	; (801e7ac <__ieee754_pow+0x3fc>)
 801e746:	4299      	cmp	r1, r3
 801e748:	ec45 4b19 	vmov	d9, r4, r5
 801e74c:	4606      	mov	r6, r0
 801e74e:	460f      	mov	r7, r1
 801e750:	468b      	mov	fp, r1
 801e752:	f340 82f1 	ble.w	801ed38 <__ieee754_pow+0x988>
 801e756:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801e75a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801e75e:	4303      	orrs	r3, r0
 801e760:	f000 81e4 	beq.w	801eb2c <__ieee754_pow+0x77c>
 801e764:	ec51 0b18 	vmov	r0, r1, d8
 801e768:	2200      	movs	r2, #0
 801e76a:	2300      	movs	r3, #0
 801e76c:	f7fa fdb6 	bl	80192dc <__aeabi_dcmplt>
 801e770:	3800      	subs	r0, #0
 801e772:	bf18      	it	ne
 801e774:	2001      	movne	r0, #1
 801e776:	e72b      	b.n	801e5d0 <__ieee754_pow+0x220>
 801e778:	60000000 	.word	0x60000000
 801e77c:	3ff71547 	.word	0x3ff71547
 801e780:	f85ddf44 	.word	0xf85ddf44
 801e784:	3e54ae0b 	.word	0x3e54ae0b
 801e788:	55555555 	.word	0x55555555
 801e78c:	3fd55555 	.word	0x3fd55555
 801e790:	652b82fe 	.word	0x652b82fe
 801e794:	3ff71547 	.word	0x3ff71547
 801e798:	00000000 	.word	0x00000000
 801e79c:	bff00000 	.word	0xbff00000
 801e7a0:	3ff00000 	.word	0x3ff00000
 801e7a4:	3fd00000 	.word	0x3fd00000
 801e7a8:	3fe00000 	.word	0x3fe00000
 801e7ac:	408fffff 	.word	0x408fffff
 801e7b0:	4bd5      	ldr	r3, [pc, #852]	; (801eb08 <__ieee754_pow+0x758>)
 801e7b2:	402b      	ands	r3, r5
 801e7b4:	2200      	movs	r2, #0
 801e7b6:	b92b      	cbnz	r3, 801e7c4 <__ieee754_pow+0x414>
 801e7b8:	4bd4      	ldr	r3, [pc, #848]	; (801eb0c <__ieee754_pow+0x75c>)
 801e7ba:	f7fa fb1d 	bl	8018df8 <__aeabi_dmul>
 801e7be:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801e7c2:	460c      	mov	r4, r1
 801e7c4:	1523      	asrs	r3, r4, #20
 801e7c6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801e7ca:	4413      	add	r3, r2
 801e7cc:	9305      	str	r3, [sp, #20]
 801e7ce:	4bd0      	ldr	r3, [pc, #832]	; (801eb10 <__ieee754_pow+0x760>)
 801e7d0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801e7d4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801e7d8:	429c      	cmp	r4, r3
 801e7da:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801e7de:	dd08      	ble.n	801e7f2 <__ieee754_pow+0x442>
 801e7e0:	4bcc      	ldr	r3, [pc, #816]	; (801eb14 <__ieee754_pow+0x764>)
 801e7e2:	429c      	cmp	r4, r3
 801e7e4:	f340 8162 	ble.w	801eaac <__ieee754_pow+0x6fc>
 801e7e8:	9b05      	ldr	r3, [sp, #20]
 801e7ea:	3301      	adds	r3, #1
 801e7ec:	9305      	str	r3, [sp, #20]
 801e7ee:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801e7f2:	2400      	movs	r4, #0
 801e7f4:	00e3      	lsls	r3, r4, #3
 801e7f6:	9307      	str	r3, [sp, #28]
 801e7f8:	4bc7      	ldr	r3, [pc, #796]	; (801eb18 <__ieee754_pow+0x768>)
 801e7fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801e7fe:	ed93 7b00 	vldr	d7, [r3]
 801e802:	4629      	mov	r1, r5
 801e804:	ec53 2b17 	vmov	r2, r3, d7
 801e808:	eeb0 9a47 	vmov.f32	s18, s14
 801e80c:	eef0 9a67 	vmov.f32	s19, s15
 801e810:	4682      	mov	sl, r0
 801e812:	f7fa f939 	bl	8018a88 <__aeabi_dsub>
 801e816:	4652      	mov	r2, sl
 801e818:	4606      	mov	r6, r0
 801e81a:	460f      	mov	r7, r1
 801e81c:	462b      	mov	r3, r5
 801e81e:	ec51 0b19 	vmov	r0, r1, d9
 801e822:	f7fa f933 	bl	8018a8c <__adddf3>
 801e826:	4602      	mov	r2, r0
 801e828:	460b      	mov	r3, r1
 801e82a:	2000      	movs	r0, #0
 801e82c:	49bb      	ldr	r1, [pc, #748]	; (801eb1c <__ieee754_pow+0x76c>)
 801e82e:	f7fa fc0d 	bl	801904c <__aeabi_ddiv>
 801e832:	ec41 0b1a 	vmov	d10, r0, r1
 801e836:	4602      	mov	r2, r0
 801e838:	460b      	mov	r3, r1
 801e83a:	4630      	mov	r0, r6
 801e83c:	4639      	mov	r1, r7
 801e83e:	f7fa fadb 	bl	8018df8 <__aeabi_dmul>
 801e842:	2300      	movs	r3, #0
 801e844:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e848:	9302      	str	r3, [sp, #8]
 801e84a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801e84e:	46ab      	mov	fp, r5
 801e850:	106d      	asrs	r5, r5, #1
 801e852:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801e856:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801e85a:	ec41 0b18 	vmov	d8, r0, r1
 801e85e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801e862:	2200      	movs	r2, #0
 801e864:	4640      	mov	r0, r8
 801e866:	4649      	mov	r1, r9
 801e868:	4614      	mov	r4, r2
 801e86a:	461d      	mov	r5, r3
 801e86c:	f7fa fac4 	bl	8018df8 <__aeabi_dmul>
 801e870:	4602      	mov	r2, r0
 801e872:	460b      	mov	r3, r1
 801e874:	4630      	mov	r0, r6
 801e876:	4639      	mov	r1, r7
 801e878:	f7fa f906 	bl	8018a88 <__aeabi_dsub>
 801e87c:	ec53 2b19 	vmov	r2, r3, d9
 801e880:	4606      	mov	r6, r0
 801e882:	460f      	mov	r7, r1
 801e884:	4620      	mov	r0, r4
 801e886:	4629      	mov	r1, r5
 801e888:	f7fa f8fe 	bl	8018a88 <__aeabi_dsub>
 801e88c:	4602      	mov	r2, r0
 801e88e:	460b      	mov	r3, r1
 801e890:	4650      	mov	r0, sl
 801e892:	4659      	mov	r1, fp
 801e894:	f7fa f8f8 	bl	8018a88 <__aeabi_dsub>
 801e898:	4642      	mov	r2, r8
 801e89a:	464b      	mov	r3, r9
 801e89c:	f7fa faac 	bl	8018df8 <__aeabi_dmul>
 801e8a0:	4602      	mov	r2, r0
 801e8a2:	460b      	mov	r3, r1
 801e8a4:	4630      	mov	r0, r6
 801e8a6:	4639      	mov	r1, r7
 801e8a8:	f7fa f8ee 	bl	8018a88 <__aeabi_dsub>
 801e8ac:	ec53 2b1a 	vmov	r2, r3, d10
 801e8b0:	f7fa faa2 	bl	8018df8 <__aeabi_dmul>
 801e8b4:	ec53 2b18 	vmov	r2, r3, d8
 801e8b8:	ec41 0b19 	vmov	d9, r0, r1
 801e8bc:	ec51 0b18 	vmov	r0, r1, d8
 801e8c0:	f7fa fa9a 	bl	8018df8 <__aeabi_dmul>
 801e8c4:	a37c      	add	r3, pc, #496	; (adr r3, 801eab8 <__ieee754_pow+0x708>)
 801e8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8ca:	4604      	mov	r4, r0
 801e8cc:	460d      	mov	r5, r1
 801e8ce:	f7fa fa93 	bl	8018df8 <__aeabi_dmul>
 801e8d2:	a37b      	add	r3, pc, #492	; (adr r3, 801eac0 <__ieee754_pow+0x710>)
 801e8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8d8:	f7fa f8d8 	bl	8018a8c <__adddf3>
 801e8dc:	4622      	mov	r2, r4
 801e8de:	462b      	mov	r3, r5
 801e8e0:	f7fa fa8a 	bl	8018df8 <__aeabi_dmul>
 801e8e4:	a378      	add	r3, pc, #480	; (adr r3, 801eac8 <__ieee754_pow+0x718>)
 801e8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8ea:	f7fa f8cf 	bl	8018a8c <__adddf3>
 801e8ee:	4622      	mov	r2, r4
 801e8f0:	462b      	mov	r3, r5
 801e8f2:	f7fa fa81 	bl	8018df8 <__aeabi_dmul>
 801e8f6:	a376      	add	r3, pc, #472	; (adr r3, 801ead0 <__ieee754_pow+0x720>)
 801e8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8fc:	f7fa f8c6 	bl	8018a8c <__adddf3>
 801e900:	4622      	mov	r2, r4
 801e902:	462b      	mov	r3, r5
 801e904:	f7fa fa78 	bl	8018df8 <__aeabi_dmul>
 801e908:	a373      	add	r3, pc, #460	; (adr r3, 801ead8 <__ieee754_pow+0x728>)
 801e90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e90e:	f7fa f8bd 	bl	8018a8c <__adddf3>
 801e912:	4622      	mov	r2, r4
 801e914:	462b      	mov	r3, r5
 801e916:	f7fa fa6f 	bl	8018df8 <__aeabi_dmul>
 801e91a:	a371      	add	r3, pc, #452	; (adr r3, 801eae0 <__ieee754_pow+0x730>)
 801e91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e920:	f7fa f8b4 	bl	8018a8c <__adddf3>
 801e924:	4622      	mov	r2, r4
 801e926:	4606      	mov	r6, r0
 801e928:	460f      	mov	r7, r1
 801e92a:	462b      	mov	r3, r5
 801e92c:	4620      	mov	r0, r4
 801e92e:	4629      	mov	r1, r5
 801e930:	f7fa fa62 	bl	8018df8 <__aeabi_dmul>
 801e934:	4602      	mov	r2, r0
 801e936:	460b      	mov	r3, r1
 801e938:	4630      	mov	r0, r6
 801e93a:	4639      	mov	r1, r7
 801e93c:	f7fa fa5c 	bl	8018df8 <__aeabi_dmul>
 801e940:	4642      	mov	r2, r8
 801e942:	4604      	mov	r4, r0
 801e944:	460d      	mov	r5, r1
 801e946:	464b      	mov	r3, r9
 801e948:	ec51 0b18 	vmov	r0, r1, d8
 801e94c:	f7fa f89e 	bl	8018a8c <__adddf3>
 801e950:	ec53 2b19 	vmov	r2, r3, d9
 801e954:	f7fa fa50 	bl	8018df8 <__aeabi_dmul>
 801e958:	4622      	mov	r2, r4
 801e95a:	462b      	mov	r3, r5
 801e95c:	f7fa f896 	bl	8018a8c <__adddf3>
 801e960:	4642      	mov	r2, r8
 801e962:	4682      	mov	sl, r0
 801e964:	468b      	mov	fp, r1
 801e966:	464b      	mov	r3, r9
 801e968:	4640      	mov	r0, r8
 801e96a:	4649      	mov	r1, r9
 801e96c:	f7fa fa44 	bl	8018df8 <__aeabi_dmul>
 801e970:	4b6b      	ldr	r3, [pc, #428]	; (801eb20 <__ieee754_pow+0x770>)
 801e972:	2200      	movs	r2, #0
 801e974:	4606      	mov	r6, r0
 801e976:	460f      	mov	r7, r1
 801e978:	f7fa f888 	bl	8018a8c <__adddf3>
 801e97c:	4652      	mov	r2, sl
 801e97e:	465b      	mov	r3, fp
 801e980:	f7fa f884 	bl	8018a8c <__adddf3>
 801e984:	2000      	movs	r0, #0
 801e986:	4604      	mov	r4, r0
 801e988:	460d      	mov	r5, r1
 801e98a:	4602      	mov	r2, r0
 801e98c:	460b      	mov	r3, r1
 801e98e:	4640      	mov	r0, r8
 801e990:	4649      	mov	r1, r9
 801e992:	f7fa fa31 	bl	8018df8 <__aeabi_dmul>
 801e996:	4b62      	ldr	r3, [pc, #392]	; (801eb20 <__ieee754_pow+0x770>)
 801e998:	4680      	mov	r8, r0
 801e99a:	4689      	mov	r9, r1
 801e99c:	2200      	movs	r2, #0
 801e99e:	4620      	mov	r0, r4
 801e9a0:	4629      	mov	r1, r5
 801e9a2:	f7fa f871 	bl	8018a88 <__aeabi_dsub>
 801e9a6:	4632      	mov	r2, r6
 801e9a8:	463b      	mov	r3, r7
 801e9aa:	f7fa f86d 	bl	8018a88 <__aeabi_dsub>
 801e9ae:	4602      	mov	r2, r0
 801e9b0:	460b      	mov	r3, r1
 801e9b2:	4650      	mov	r0, sl
 801e9b4:	4659      	mov	r1, fp
 801e9b6:	f7fa f867 	bl	8018a88 <__aeabi_dsub>
 801e9ba:	ec53 2b18 	vmov	r2, r3, d8
 801e9be:	f7fa fa1b 	bl	8018df8 <__aeabi_dmul>
 801e9c2:	4622      	mov	r2, r4
 801e9c4:	4606      	mov	r6, r0
 801e9c6:	460f      	mov	r7, r1
 801e9c8:	462b      	mov	r3, r5
 801e9ca:	ec51 0b19 	vmov	r0, r1, d9
 801e9ce:	f7fa fa13 	bl	8018df8 <__aeabi_dmul>
 801e9d2:	4602      	mov	r2, r0
 801e9d4:	460b      	mov	r3, r1
 801e9d6:	4630      	mov	r0, r6
 801e9d8:	4639      	mov	r1, r7
 801e9da:	f7fa f857 	bl	8018a8c <__adddf3>
 801e9de:	4606      	mov	r6, r0
 801e9e0:	460f      	mov	r7, r1
 801e9e2:	4602      	mov	r2, r0
 801e9e4:	460b      	mov	r3, r1
 801e9e6:	4640      	mov	r0, r8
 801e9e8:	4649      	mov	r1, r9
 801e9ea:	f7fa f84f 	bl	8018a8c <__adddf3>
 801e9ee:	a33e      	add	r3, pc, #248	; (adr r3, 801eae8 <__ieee754_pow+0x738>)
 801e9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9f4:	2000      	movs	r0, #0
 801e9f6:	4604      	mov	r4, r0
 801e9f8:	460d      	mov	r5, r1
 801e9fa:	f7fa f9fd 	bl	8018df8 <__aeabi_dmul>
 801e9fe:	4642      	mov	r2, r8
 801ea00:	ec41 0b18 	vmov	d8, r0, r1
 801ea04:	464b      	mov	r3, r9
 801ea06:	4620      	mov	r0, r4
 801ea08:	4629      	mov	r1, r5
 801ea0a:	f7fa f83d 	bl	8018a88 <__aeabi_dsub>
 801ea0e:	4602      	mov	r2, r0
 801ea10:	460b      	mov	r3, r1
 801ea12:	4630      	mov	r0, r6
 801ea14:	4639      	mov	r1, r7
 801ea16:	f7fa f837 	bl	8018a88 <__aeabi_dsub>
 801ea1a:	a335      	add	r3, pc, #212	; (adr r3, 801eaf0 <__ieee754_pow+0x740>)
 801ea1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea20:	f7fa f9ea 	bl	8018df8 <__aeabi_dmul>
 801ea24:	a334      	add	r3, pc, #208	; (adr r3, 801eaf8 <__ieee754_pow+0x748>)
 801ea26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea2a:	4606      	mov	r6, r0
 801ea2c:	460f      	mov	r7, r1
 801ea2e:	4620      	mov	r0, r4
 801ea30:	4629      	mov	r1, r5
 801ea32:	f7fa f9e1 	bl	8018df8 <__aeabi_dmul>
 801ea36:	4602      	mov	r2, r0
 801ea38:	460b      	mov	r3, r1
 801ea3a:	4630      	mov	r0, r6
 801ea3c:	4639      	mov	r1, r7
 801ea3e:	f7fa f825 	bl	8018a8c <__adddf3>
 801ea42:	9a07      	ldr	r2, [sp, #28]
 801ea44:	4b37      	ldr	r3, [pc, #220]	; (801eb24 <__ieee754_pow+0x774>)
 801ea46:	4413      	add	r3, r2
 801ea48:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea4c:	f7fa f81e 	bl	8018a8c <__adddf3>
 801ea50:	4682      	mov	sl, r0
 801ea52:	9805      	ldr	r0, [sp, #20]
 801ea54:	468b      	mov	fp, r1
 801ea56:	f7fa f965 	bl	8018d24 <__aeabi_i2d>
 801ea5a:	9a07      	ldr	r2, [sp, #28]
 801ea5c:	4b32      	ldr	r3, [pc, #200]	; (801eb28 <__ieee754_pow+0x778>)
 801ea5e:	4413      	add	r3, r2
 801ea60:	e9d3 8900 	ldrd	r8, r9, [r3]
 801ea64:	4606      	mov	r6, r0
 801ea66:	460f      	mov	r7, r1
 801ea68:	4652      	mov	r2, sl
 801ea6a:	465b      	mov	r3, fp
 801ea6c:	ec51 0b18 	vmov	r0, r1, d8
 801ea70:	f7fa f80c 	bl	8018a8c <__adddf3>
 801ea74:	4642      	mov	r2, r8
 801ea76:	464b      	mov	r3, r9
 801ea78:	f7fa f808 	bl	8018a8c <__adddf3>
 801ea7c:	4632      	mov	r2, r6
 801ea7e:	463b      	mov	r3, r7
 801ea80:	f7fa f804 	bl	8018a8c <__adddf3>
 801ea84:	2000      	movs	r0, #0
 801ea86:	4632      	mov	r2, r6
 801ea88:	463b      	mov	r3, r7
 801ea8a:	4604      	mov	r4, r0
 801ea8c:	460d      	mov	r5, r1
 801ea8e:	f7f9 fffb 	bl	8018a88 <__aeabi_dsub>
 801ea92:	4642      	mov	r2, r8
 801ea94:	464b      	mov	r3, r9
 801ea96:	f7f9 fff7 	bl	8018a88 <__aeabi_dsub>
 801ea9a:	ec53 2b18 	vmov	r2, r3, d8
 801ea9e:	f7f9 fff3 	bl	8018a88 <__aeabi_dsub>
 801eaa2:	4602      	mov	r2, r0
 801eaa4:	460b      	mov	r3, r1
 801eaa6:	4650      	mov	r0, sl
 801eaa8:	4659      	mov	r1, fp
 801eaaa:	e610      	b.n	801e6ce <__ieee754_pow+0x31e>
 801eaac:	2401      	movs	r4, #1
 801eaae:	e6a1      	b.n	801e7f4 <__ieee754_pow+0x444>
 801eab0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 801eb00 <__ieee754_pow+0x750>
 801eab4:	e617      	b.n	801e6e6 <__ieee754_pow+0x336>
 801eab6:	bf00      	nop
 801eab8:	4a454eef 	.word	0x4a454eef
 801eabc:	3fca7e28 	.word	0x3fca7e28
 801eac0:	93c9db65 	.word	0x93c9db65
 801eac4:	3fcd864a 	.word	0x3fcd864a
 801eac8:	a91d4101 	.word	0xa91d4101
 801eacc:	3fd17460 	.word	0x3fd17460
 801ead0:	518f264d 	.word	0x518f264d
 801ead4:	3fd55555 	.word	0x3fd55555
 801ead8:	db6fabff 	.word	0xdb6fabff
 801eadc:	3fdb6db6 	.word	0x3fdb6db6
 801eae0:	33333303 	.word	0x33333303
 801eae4:	3fe33333 	.word	0x3fe33333
 801eae8:	e0000000 	.word	0xe0000000
 801eaec:	3feec709 	.word	0x3feec709
 801eaf0:	dc3a03fd 	.word	0xdc3a03fd
 801eaf4:	3feec709 	.word	0x3feec709
 801eaf8:	145b01f5 	.word	0x145b01f5
 801eafc:	be3e2fe0 	.word	0xbe3e2fe0
 801eb00:	00000000 	.word	0x00000000
 801eb04:	3ff00000 	.word	0x3ff00000
 801eb08:	7ff00000 	.word	0x7ff00000
 801eb0c:	43400000 	.word	0x43400000
 801eb10:	0003988e 	.word	0x0003988e
 801eb14:	000bb679 	.word	0x000bb679
 801eb18:	08052658 	.word	0x08052658
 801eb1c:	3ff00000 	.word	0x3ff00000
 801eb20:	40080000 	.word	0x40080000
 801eb24:	08052678 	.word	0x08052678
 801eb28:	08052668 	.word	0x08052668
 801eb2c:	a3b5      	add	r3, pc, #724	; (adr r3, 801ee04 <__ieee754_pow+0xa54>)
 801eb2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb32:	4640      	mov	r0, r8
 801eb34:	4649      	mov	r1, r9
 801eb36:	f7f9 ffa9 	bl	8018a8c <__adddf3>
 801eb3a:	4622      	mov	r2, r4
 801eb3c:	ec41 0b1a 	vmov	d10, r0, r1
 801eb40:	462b      	mov	r3, r5
 801eb42:	4630      	mov	r0, r6
 801eb44:	4639      	mov	r1, r7
 801eb46:	f7f9 ff9f 	bl	8018a88 <__aeabi_dsub>
 801eb4a:	4602      	mov	r2, r0
 801eb4c:	460b      	mov	r3, r1
 801eb4e:	ec51 0b1a 	vmov	r0, r1, d10
 801eb52:	f7fa fbe1 	bl	8019318 <__aeabi_dcmpgt>
 801eb56:	2800      	cmp	r0, #0
 801eb58:	f47f ae04 	bne.w	801e764 <__ieee754_pow+0x3b4>
 801eb5c:	4aa4      	ldr	r2, [pc, #656]	; (801edf0 <__ieee754_pow+0xa40>)
 801eb5e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801eb62:	4293      	cmp	r3, r2
 801eb64:	f340 8108 	ble.w	801ed78 <__ieee754_pow+0x9c8>
 801eb68:	151b      	asrs	r3, r3, #20
 801eb6a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801eb6e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801eb72:	fa4a f303 	asr.w	r3, sl, r3
 801eb76:	445b      	add	r3, fp
 801eb78:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801eb7c:	4e9d      	ldr	r6, [pc, #628]	; (801edf4 <__ieee754_pow+0xa44>)
 801eb7e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801eb82:	4116      	asrs	r6, r2
 801eb84:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801eb88:	2000      	movs	r0, #0
 801eb8a:	ea23 0106 	bic.w	r1, r3, r6
 801eb8e:	f1c2 0214 	rsb	r2, r2, #20
 801eb92:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801eb96:	fa4a fa02 	asr.w	sl, sl, r2
 801eb9a:	f1bb 0f00 	cmp.w	fp, #0
 801eb9e:	4602      	mov	r2, r0
 801eba0:	460b      	mov	r3, r1
 801eba2:	4620      	mov	r0, r4
 801eba4:	4629      	mov	r1, r5
 801eba6:	bfb8      	it	lt
 801eba8:	f1ca 0a00 	rsblt	sl, sl, #0
 801ebac:	f7f9 ff6c 	bl	8018a88 <__aeabi_dsub>
 801ebb0:	ec41 0b19 	vmov	d9, r0, r1
 801ebb4:	4642      	mov	r2, r8
 801ebb6:	464b      	mov	r3, r9
 801ebb8:	ec51 0b19 	vmov	r0, r1, d9
 801ebbc:	f7f9 ff66 	bl	8018a8c <__adddf3>
 801ebc0:	a37b      	add	r3, pc, #492	; (adr r3, 801edb0 <__ieee754_pow+0xa00>)
 801ebc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebc6:	2000      	movs	r0, #0
 801ebc8:	4604      	mov	r4, r0
 801ebca:	460d      	mov	r5, r1
 801ebcc:	f7fa f914 	bl	8018df8 <__aeabi_dmul>
 801ebd0:	ec53 2b19 	vmov	r2, r3, d9
 801ebd4:	4606      	mov	r6, r0
 801ebd6:	460f      	mov	r7, r1
 801ebd8:	4620      	mov	r0, r4
 801ebda:	4629      	mov	r1, r5
 801ebdc:	f7f9 ff54 	bl	8018a88 <__aeabi_dsub>
 801ebe0:	4602      	mov	r2, r0
 801ebe2:	460b      	mov	r3, r1
 801ebe4:	4640      	mov	r0, r8
 801ebe6:	4649      	mov	r1, r9
 801ebe8:	f7f9 ff4e 	bl	8018a88 <__aeabi_dsub>
 801ebec:	a372      	add	r3, pc, #456	; (adr r3, 801edb8 <__ieee754_pow+0xa08>)
 801ebee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebf2:	f7fa f901 	bl	8018df8 <__aeabi_dmul>
 801ebf6:	a372      	add	r3, pc, #456	; (adr r3, 801edc0 <__ieee754_pow+0xa10>)
 801ebf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebfc:	4680      	mov	r8, r0
 801ebfe:	4689      	mov	r9, r1
 801ec00:	4620      	mov	r0, r4
 801ec02:	4629      	mov	r1, r5
 801ec04:	f7fa f8f8 	bl	8018df8 <__aeabi_dmul>
 801ec08:	4602      	mov	r2, r0
 801ec0a:	460b      	mov	r3, r1
 801ec0c:	4640      	mov	r0, r8
 801ec0e:	4649      	mov	r1, r9
 801ec10:	f7f9 ff3c 	bl	8018a8c <__adddf3>
 801ec14:	4604      	mov	r4, r0
 801ec16:	460d      	mov	r5, r1
 801ec18:	4602      	mov	r2, r0
 801ec1a:	460b      	mov	r3, r1
 801ec1c:	4630      	mov	r0, r6
 801ec1e:	4639      	mov	r1, r7
 801ec20:	f7f9 ff34 	bl	8018a8c <__adddf3>
 801ec24:	4632      	mov	r2, r6
 801ec26:	463b      	mov	r3, r7
 801ec28:	4680      	mov	r8, r0
 801ec2a:	4689      	mov	r9, r1
 801ec2c:	f7f9 ff2c 	bl	8018a88 <__aeabi_dsub>
 801ec30:	4602      	mov	r2, r0
 801ec32:	460b      	mov	r3, r1
 801ec34:	4620      	mov	r0, r4
 801ec36:	4629      	mov	r1, r5
 801ec38:	f7f9 ff26 	bl	8018a88 <__aeabi_dsub>
 801ec3c:	4642      	mov	r2, r8
 801ec3e:	4606      	mov	r6, r0
 801ec40:	460f      	mov	r7, r1
 801ec42:	464b      	mov	r3, r9
 801ec44:	4640      	mov	r0, r8
 801ec46:	4649      	mov	r1, r9
 801ec48:	f7fa f8d6 	bl	8018df8 <__aeabi_dmul>
 801ec4c:	a35e      	add	r3, pc, #376	; (adr r3, 801edc8 <__ieee754_pow+0xa18>)
 801ec4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec52:	4604      	mov	r4, r0
 801ec54:	460d      	mov	r5, r1
 801ec56:	f7fa f8cf 	bl	8018df8 <__aeabi_dmul>
 801ec5a:	a35d      	add	r3, pc, #372	; (adr r3, 801edd0 <__ieee754_pow+0xa20>)
 801ec5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec60:	f7f9 ff12 	bl	8018a88 <__aeabi_dsub>
 801ec64:	4622      	mov	r2, r4
 801ec66:	462b      	mov	r3, r5
 801ec68:	f7fa f8c6 	bl	8018df8 <__aeabi_dmul>
 801ec6c:	a35a      	add	r3, pc, #360	; (adr r3, 801edd8 <__ieee754_pow+0xa28>)
 801ec6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec72:	f7f9 ff0b 	bl	8018a8c <__adddf3>
 801ec76:	4622      	mov	r2, r4
 801ec78:	462b      	mov	r3, r5
 801ec7a:	f7fa f8bd 	bl	8018df8 <__aeabi_dmul>
 801ec7e:	a358      	add	r3, pc, #352	; (adr r3, 801ede0 <__ieee754_pow+0xa30>)
 801ec80:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec84:	f7f9 ff00 	bl	8018a88 <__aeabi_dsub>
 801ec88:	4622      	mov	r2, r4
 801ec8a:	462b      	mov	r3, r5
 801ec8c:	f7fa f8b4 	bl	8018df8 <__aeabi_dmul>
 801ec90:	a355      	add	r3, pc, #340	; (adr r3, 801ede8 <__ieee754_pow+0xa38>)
 801ec92:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec96:	f7f9 fef9 	bl	8018a8c <__adddf3>
 801ec9a:	4622      	mov	r2, r4
 801ec9c:	462b      	mov	r3, r5
 801ec9e:	f7fa f8ab 	bl	8018df8 <__aeabi_dmul>
 801eca2:	4602      	mov	r2, r0
 801eca4:	460b      	mov	r3, r1
 801eca6:	4640      	mov	r0, r8
 801eca8:	4649      	mov	r1, r9
 801ecaa:	f7f9 feed 	bl	8018a88 <__aeabi_dsub>
 801ecae:	4604      	mov	r4, r0
 801ecb0:	460d      	mov	r5, r1
 801ecb2:	4602      	mov	r2, r0
 801ecb4:	460b      	mov	r3, r1
 801ecb6:	4640      	mov	r0, r8
 801ecb8:	4649      	mov	r1, r9
 801ecba:	f7fa f89d 	bl	8018df8 <__aeabi_dmul>
 801ecbe:	2200      	movs	r2, #0
 801ecc0:	ec41 0b19 	vmov	d9, r0, r1
 801ecc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801ecc8:	4620      	mov	r0, r4
 801ecca:	4629      	mov	r1, r5
 801eccc:	f7f9 fedc 	bl	8018a88 <__aeabi_dsub>
 801ecd0:	4602      	mov	r2, r0
 801ecd2:	460b      	mov	r3, r1
 801ecd4:	ec51 0b19 	vmov	r0, r1, d9
 801ecd8:	f7fa f9b8 	bl	801904c <__aeabi_ddiv>
 801ecdc:	4632      	mov	r2, r6
 801ecde:	4604      	mov	r4, r0
 801ece0:	460d      	mov	r5, r1
 801ece2:	463b      	mov	r3, r7
 801ece4:	4640      	mov	r0, r8
 801ece6:	4649      	mov	r1, r9
 801ece8:	f7fa f886 	bl	8018df8 <__aeabi_dmul>
 801ecec:	4632      	mov	r2, r6
 801ecee:	463b      	mov	r3, r7
 801ecf0:	f7f9 fecc 	bl	8018a8c <__adddf3>
 801ecf4:	4602      	mov	r2, r0
 801ecf6:	460b      	mov	r3, r1
 801ecf8:	4620      	mov	r0, r4
 801ecfa:	4629      	mov	r1, r5
 801ecfc:	f7f9 fec4 	bl	8018a88 <__aeabi_dsub>
 801ed00:	4642      	mov	r2, r8
 801ed02:	464b      	mov	r3, r9
 801ed04:	f7f9 fec0 	bl	8018a88 <__aeabi_dsub>
 801ed08:	460b      	mov	r3, r1
 801ed0a:	4602      	mov	r2, r0
 801ed0c:	493a      	ldr	r1, [pc, #232]	; (801edf8 <__ieee754_pow+0xa48>)
 801ed0e:	2000      	movs	r0, #0
 801ed10:	f7f9 feba 	bl	8018a88 <__aeabi_dsub>
 801ed14:	ec41 0b10 	vmov	d0, r0, r1
 801ed18:	ee10 3a90 	vmov	r3, s1
 801ed1c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801ed20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801ed24:	da2b      	bge.n	801ed7e <__ieee754_pow+0x9ce>
 801ed26:	4650      	mov	r0, sl
 801ed28:	f000 f966 	bl	801eff8 <scalbn>
 801ed2c:	ec51 0b10 	vmov	r0, r1, d0
 801ed30:	ec53 2b18 	vmov	r2, r3, d8
 801ed34:	f7ff bbed 	b.w	801e512 <__ieee754_pow+0x162>
 801ed38:	4b30      	ldr	r3, [pc, #192]	; (801edfc <__ieee754_pow+0xa4c>)
 801ed3a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801ed3e:	429e      	cmp	r6, r3
 801ed40:	f77f af0c 	ble.w	801eb5c <__ieee754_pow+0x7ac>
 801ed44:	4b2e      	ldr	r3, [pc, #184]	; (801ee00 <__ieee754_pow+0xa50>)
 801ed46:	440b      	add	r3, r1
 801ed48:	4303      	orrs	r3, r0
 801ed4a:	d009      	beq.n	801ed60 <__ieee754_pow+0x9b0>
 801ed4c:	ec51 0b18 	vmov	r0, r1, d8
 801ed50:	2200      	movs	r2, #0
 801ed52:	2300      	movs	r3, #0
 801ed54:	f7fa fac2 	bl	80192dc <__aeabi_dcmplt>
 801ed58:	3800      	subs	r0, #0
 801ed5a:	bf18      	it	ne
 801ed5c:	2001      	movne	r0, #1
 801ed5e:	e447      	b.n	801e5f0 <__ieee754_pow+0x240>
 801ed60:	4622      	mov	r2, r4
 801ed62:	462b      	mov	r3, r5
 801ed64:	f7f9 fe90 	bl	8018a88 <__aeabi_dsub>
 801ed68:	4642      	mov	r2, r8
 801ed6a:	464b      	mov	r3, r9
 801ed6c:	f7fa faca 	bl	8019304 <__aeabi_dcmpge>
 801ed70:	2800      	cmp	r0, #0
 801ed72:	f43f aef3 	beq.w	801eb5c <__ieee754_pow+0x7ac>
 801ed76:	e7e9      	b.n	801ed4c <__ieee754_pow+0x99c>
 801ed78:	f04f 0a00 	mov.w	sl, #0
 801ed7c:	e71a      	b.n	801ebb4 <__ieee754_pow+0x804>
 801ed7e:	ec51 0b10 	vmov	r0, r1, d0
 801ed82:	4619      	mov	r1, r3
 801ed84:	e7d4      	b.n	801ed30 <__ieee754_pow+0x980>
 801ed86:	491c      	ldr	r1, [pc, #112]	; (801edf8 <__ieee754_pow+0xa48>)
 801ed88:	2000      	movs	r0, #0
 801ed8a:	f7ff bb30 	b.w	801e3ee <__ieee754_pow+0x3e>
 801ed8e:	2000      	movs	r0, #0
 801ed90:	2100      	movs	r1, #0
 801ed92:	f7ff bb2c 	b.w	801e3ee <__ieee754_pow+0x3e>
 801ed96:	4630      	mov	r0, r6
 801ed98:	4639      	mov	r1, r7
 801ed9a:	f7ff bb28 	b.w	801e3ee <__ieee754_pow+0x3e>
 801ed9e:	9204      	str	r2, [sp, #16]
 801eda0:	f7ff bb7a 	b.w	801e498 <__ieee754_pow+0xe8>
 801eda4:	2300      	movs	r3, #0
 801eda6:	f7ff bb64 	b.w	801e472 <__ieee754_pow+0xc2>
 801edaa:	bf00      	nop
 801edac:	f3af 8000 	nop.w
 801edb0:	00000000 	.word	0x00000000
 801edb4:	3fe62e43 	.word	0x3fe62e43
 801edb8:	fefa39ef 	.word	0xfefa39ef
 801edbc:	3fe62e42 	.word	0x3fe62e42
 801edc0:	0ca86c39 	.word	0x0ca86c39
 801edc4:	be205c61 	.word	0xbe205c61
 801edc8:	72bea4d0 	.word	0x72bea4d0
 801edcc:	3e663769 	.word	0x3e663769
 801edd0:	c5d26bf1 	.word	0xc5d26bf1
 801edd4:	3ebbbd41 	.word	0x3ebbbd41
 801edd8:	af25de2c 	.word	0xaf25de2c
 801eddc:	3f11566a 	.word	0x3f11566a
 801ede0:	16bebd93 	.word	0x16bebd93
 801ede4:	3f66c16c 	.word	0x3f66c16c
 801ede8:	5555553e 	.word	0x5555553e
 801edec:	3fc55555 	.word	0x3fc55555
 801edf0:	3fe00000 	.word	0x3fe00000
 801edf4:	000fffff 	.word	0x000fffff
 801edf8:	3ff00000 	.word	0x3ff00000
 801edfc:	4090cbff 	.word	0x4090cbff
 801ee00:	3f6f3400 	.word	0x3f6f3400
 801ee04:	652b82fe 	.word	0x652b82fe
 801ee08:	3c971547 	.word	0x3c971547

0801ee0c <__ieee754_sqrt>:
 801ee0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ee10:	ec55 4b10 	vmov	r4, r5, d0
 801ee14:	4e55      	ldr	r6, [pc, #340]	; (801ef6c <__ieee754_sqrt+0x160>)
 801ee16:	43ae      	bics	r6, r5
 801ee18:	ee10 0a10 	vmov	r0, s0
 801ee1c:	ee10 3a10 	vmov	r3, s0
 801ee20:	462a      	mov	r2, r5
 801ee22:	4629      	mov	r1, r5
 801ee24:	d110      	bne.n	801ee48 <__ieee754_sqrt+0x3c>
 801ee26:	ee10 2a10 	vmov	r2, s0
 801ee2a:	462b      	mov	r3, r5
 801ee2c:	f7f9 ffe4 	bl	8018df8 <__aeabi_dmul>
 801ee30:	4602      	mov	r2, r0
 801ee32:	460b      	mov	r3, r1
 801ee34:	4620      	mov	r0, r4
 801ee36:	4629      	mov	r1, r5
 801ee38:	f7f9 fe28 	bl	8018a8c <__adddf3>
 801ee3c:	4604      	mov	r4, r0
 801ee3e:	460d      	mov	r5, r1
 801ee40:	ec45 4b10 	vmov	d0, r4, r5
 801ee44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ee48:	2d00      	cmp	r5, #0
 801ee4a:	dc10      	bgt.n	801ee6e <__ieee754_sqrt+0x62>
 801ee4c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801ee50:	4330      	orrs	r0, r6
 801ee52:	d0f5      	beq.n	801ee40 <__ieee754_sqrt+0x34>
 801ee54:	b15d      	cbz	r5, 801ee6e <__ieee754_sqrt+0x62>
 801ee56:	ee10 2a10 	vmov	r2, s0
 801ee5a:	462b      	mov	r3, r5
 801ee5c:	ee10 0a10 	vmov	r0, s0
 801ee60:	f7f9 fe12 	bl	8018a88 <__aeabi_dsub>
 801ee64:	4602      	mov	r2, r0
 801ee66:	460b      	mov	r3, r1
 801ee68:	f7fa f8f0 	bl	801904c <__aeabi_ddiv>
 801ee6c:	e7e6      	b.n	801ee3c <__ieee754_sqrt+0x30>
 801ee6e:	1512      	asrs	r2, r2, #20
 801ee70:	d074      	beq.n	801ef5c <__ieee754_sqrt+0x150>
 801ee72:	07d4      	lsls	r4, r2, #31
 801ee74:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801ee78:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801ee7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801ee80:	bf5e      	ittt	pl
 801ee82:	0fda      	lsrpl	r2, r3, #31
 801ee84:	005b      	lslpl	r3, r3, #1
 801ee86:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801ee8a:	2400      	movs	r4, #0
 801ee8c:	0fda      	lsrs	r2, r3, #31
 801ee8e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801ee92:	107f      	asrs	r7, r7, #1
 801ee94:	005b      	lsls	r3, r3, #1
 801ee96:	2516      	movs	r5, #22
 801ee98:	4620      	mov	r0, r4
 801ee9a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801ee9e:	1886      	adds	r6, r0, r2
 801eea0:	428e      	cmp	r6, r1
 801eea2:	bfde      	ittt	le
 801eea4:	1b89      	suble	r1, r1, r6
 801eea6:	18b0      	addle	r0, r6, r2
 801eea8:	18a4      	addle	r4, r4, r2
 801eeaa:	0049      	lsls	r1, r1, #1
 801eeac:	3d01      	subs	r5, #1
 801eeae:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801eeb2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801eeb6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801eeba:	d1f0      	bne.n	801ee9e <__ieee754_sqrt+0x92>
 801eebc:	462a      	mov	r2, r5
 801eebe:	f04f 0e20 	mov.w	lr, #32
 801eec2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801eec6:	4281      	cmp	r1, r0
 801eec8:	eb06 0c05 	add.w	ip, r6, r5
 801eecc:	dc02      	bgt.n	801eed4 <__ieee754_sqrt+0xc8>
 801eece:	d113      	bne.n	801eef8 <__ieee754_sqrt+0xec>
 801eed0:	459c      	cmp	ip, r3
 801eed2:	d811      	bhi.n	801eef8 <__ieee754_sqrt+0xec>
 801eed4:	f1bc 0f00 	cmp.w	ip, #0
 801eed8:	eb0c 0506 	add.w	r5, ip, r6
 801eedc:	da43      	bge.n	801ef66 <__ieee754_sqrt+0x15a>
 801eede:	2d00      	cmp	r5, #0
 801eee0:	db41      	blt.n	801ef66 <__ieee754_sqrt+0x15a>
 801eee2:	f100 0801 	add.w	r8, r0, #1
 801eee6:	1a09      	subs	r1, r1, r0
 801eee8:	459c      	cmp	ip, r3
 801eeea:	bf88      	it	hi
 801eeec:	f101 31ff 	addhi.w	r1, r1, #4294967295
 801eef0:	eba3 030c 	sub.w	r3, r3, ip
 801eef4:	4432      	add	r2, r6
 801eef6:	4640      	mov	r0, r8
 801eef8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801eefc:	f1be 0e01 	subs.w	lr, lr, #1
 801ef00:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801ef04:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801ef08:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801ef0c:	d1db      	bne.n	801eec6 <__ieee754_sqrt+0xba>
 801ef0e:	430b      	orrs	r3, r1
 801ef10:	d006      	beq.n	801ef20 <__ieee754_sqrt+0x114>
 801ef12:	1c50      	adds	r0, r2, #1
 801ef14:	bf13      	iteet	ne
 801ef16:	3201      	addne	r2, #1
 801ef18:	3401      	addeq	r4, #1
 801ef1a:	4672      	moveq	r2, lr
 801ef1c:	f022 0201 	bicne.w	r2, r2, #1
 801ef20:	1063      	asrs	r3, r4, #1
 801ef22:	0852      	lsrs	r2, r2, #1
 801ef24:	07e1      	lsls	r1, r4, #31
 801ef26:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801ef2a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801ef2e:	bf48      	it	mi
 801ef30:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801ef34:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 801ef38:	4614      	mov	r4, r2
 801ef3a:	e781      	b.n	801ee40 <__ieee754_sqrt+0x34>
 801ef3c:	0ad9      	lsrs	r1, r3, #11
 801ef3e:	3815      	subs	r0, #21
 801ef40:	055b      	lsls	r3, r3, #21
 801ef42:	2900      	cmp	r1, #0
 801ef44:	d0fa      	beq.n	801ef3c <__ieee754_sqrt+0x130>
 801ef46:	02cd      	lsls	r5, r1, #11
 801ef48:	d50a      	bpl.n	801ef60 <__ieee754_sqrt+0x154>
 801ef4a:	f1c2 0420 	rsb	r4, r2, #32
 801ef4e:	fa23 f404 	lsr.w	r4, r3, r4
 801ef52:	1e55      	subs	r5, r2, #1
 801ef54:	4093      	lsls	r3, r2
 801ef56:	4321      	orrs	r1, r4
 801ef58:	1b42      	subs	r2, r0, r5
 801ef5a:	e78a      	b.n	801ee72 <__ieee754_sqrt+0x66>
 801ef5c:	4610      	mov	r0, r2
 801ef5e:	e7f0      	b.n	801ef42 <__ieee754_sqrt+0x136>
 801ef60:	0049      	lsls	r1, r1, #1
 801ef62:	3201      	adds	r2, #1
 801ef64:	e7ef      	b.n	801ef46 <__ieee754_sqrt+0x13a>
 801ef66:	4680      	mov	r8, r0
 801ef68:	e7bd      	b.n	801eee6 <__ieee754_sqrt+0xda>
 801ef6a:	bf00      	nop
 801ef6c:	7ff00000 	.word	0x7ff00000

0801ef70 <with_errno>:
 801ef70:	b570      	push	{r4, r5, r6, lr}
 801ef72:	4604      	mov	r4, r0
 801ef74:	460d      	mov	r5, r1
 801ef76:	4616      	mov	r6, r2
 801ef78:	f7fa fc6c 	bl	8019854 <__errno>
 801ef7c:	4629      	mov	r1, r5
 801ef7e:	6006      	str	r6, [r0, #0]
 801ef80:	4620      	mov	r0, r4
 801ef82:	bd70      	pop	{r4, r5, r6, pc}

0801ef84 <xflow>:
 801ef84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ef86:	4614      	mov	r4, r2
 801ef88:	461d      	mov	r5, r3
 801ef8a:	b108      	cbz	r0, 801ef90 <xflow+0xc>
 801ef8c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801ef90:	e9cd 2300 	strd	r2, r3, [sp]
 801ef94:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ef98:	4620      	mov	r0, r4
 801ef9a:	4629      	mov	r1, r5
 801ef9c:	f7f9 ff2c 	bl	8018df8 <__aeabi_dmul>
 801efa0:	2222      	movs	r2, #34	; 0x22
 801efa2:	b003      	add	sp, #12
 801efa4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801efa8:	f7ff bfe2 	b.w	801ef70 <with_errno>

0801efac <__math_uflow>:
 801efac:	b508      	push	{r3, lr}
 801efae:	2200      	movs	r2, #0
 801efb0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801efb4:	f7ff ffe6 	bl	801ef84 <xflow>
 801efb8:	ec41 0b10 	vmov	d0, r0, r1
 801efbc:	bd08      	pop	{r3, pc}

0801efbe <__math_oflow>:
 801efbe:	b508      	push	{r3, lr}
 801efc0:	2200      	movs	r2, #0
 801efc2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801efc6:	f7ff ffdd 	bl	801ef84 <xflow>
 801efca:	ec41 0b10 	vmov	d0, r0, r1
 801efce:	bd08      	pop	{r3, pc}

0801efd0 <fabs>:
 801efd0:	ec51 0b10 	vmov	r0, r1, d0
 801efd4:	ee10 2a10 	vmov	r2, s0
 801efd8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801efdc:	ec43 2b10 	vmov	d0, r2, r3
 801efe0:	4770      	bx	lr

0801efe2 <finite>:
 801efe2:	b082      	sub	sp, #8
 801efe4:	ed8d 0b00 	vstr	d0, [sp]
 801efe8:	9801      	ldr	r0, [sp, #4]
 801efea:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801efee:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801eff2:	0fc0      	lsrs	r0, r0, #31
 801eff4:	b002      	add	sp, #8
 801eff6:	4770      	bx	lr

0801eff8 <scalbn>:
 801eff8:	b570      	push	{r4, r5, r6, lr}
 801effa:	ec55 4b10 	vmov	r4, r5, d0
 801effe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801f002:	4606      	mov	r6, r0
 801f004:	462b      	mov	r3, r5
 801f006:	b99a      	cbnz	r2, 801f030 <scalbn+0x38>
 801f008:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801f00c:	4323      	orrs	r3, r4
 801f00e:	d036      	beq.n	801f07e <scalbn+0x86>
 801f010:	4b39      	ldr	r3, [pc, #228]	; (801f0f8 <scalbn+0x100>)
 801f012:	4629      	mov	r1, r5
 801f014:	ee10 0a10 	vmov	r0, s0
 801f018:	2200      	movs	r2, #0
 801f01a:	f7f9 feed 	bl	8018df8 <__aeabi_dmul>
 801f01e:	4b37      	ldr	r3, [pc, #220]	; (801f0fc <scalbn+0x104>)
 801f020:	429e      	cmp	r6, r3
 801f022:	4604      	mov	r4, r0
 801f024:	460d      	mov	r5, r1
 801f026:	da10      	bge.n	801f04a <scalbn+0x52>
 801f028:	a32b      	add	r3, pc, #172	; (adr r3, 801f0d8 <scalbn+0xe0>)
 801f02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f02e:	e03a      	b.n	801f0a6 <scalbn+0xae>
 801f030:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801f034:	428a      	cmp	r2, r1
 801f036:	d10c      	bne.n	801f052 <scalbn+0x5a>
 801f038:	ee10 2a10 	vmov	r2, s0
 801f03c:	4620      	mov	r0, r4
 801f03e:	4629      	mov	r1, r5
 801f040:	f7f9 fd24 	bl	8018a8c <__adddf3>
 801f044:	4604      	mov	r4, r0
 801f046:	460d      	mov	r5, r1
 801f048:	e019      	b.n	801f07e <scalbn+0x86>
 801f04a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801f04e:	460b      	mov	r3, r1
 801f050:	3a36      	subs	r2, #54	; 0x36
 801f052:	4432      	add	r2, r6
 801f054:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801f058:	428a      	cmp	r2, r1
 801f05a:	dd08      	ble.n	801f06e <scalbn+0x76>
 801f05c:	2d00      	cmp	r5, #0
 801f05e:	a120      	add	r1, pc, #128	; (adr r1, 801f0e0 <scalbn+0xe8>)
 801f060:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f064:	da1c      	bge.n	801f0a0 <scalbn+0xa8>
 801f066:	a120      	add	r1, pc, #128	; (adr r1, 801f0e8 <scalbn+0xf0>)
 801f068:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f06c:	e018      	b.n	801f0a0 <scalbn+0xa8>
 801f06e:	2a00      	cmp	r2, #0
 801f070:	dd08      	ble.n	801f084 <scalbn+0x8c>
 801f072:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801f076:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801f07a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801f07e:	ec45 4b10 	vmov	d0, r4, r5
 801f082:	bd70      	pop	{r4, r5, r6, pc}
 801f084:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801f088:	da19      	bge.n	801f0be <scalbn+0xc6>
 801f08a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801f08e:	429e      	cmp	r6, r3
 801f090:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801f094:	dd0a      	ble.n	801f0ac <scalbn+0xb4>
 801f096:	a112      	add	r1, pc, #72	; (adr r1, 801f0e0 <scalbn+0xe8>)
 801f098:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f09c:	2b00      	cmp	r3, #0
 801f09e:	d1e2      	bne.n	801f066 <scalbn+0x6e>
 801f0a0:	a30f      	add	r3, pc, #60	; (adr r3, 801f0e0 <scalbn+0xe8>)
 801f0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f0a6:	f7f9 fea7 	bl	8018df8 <__aeabi_dmul>
 801f0aa:	e7cb      	b.n	801f044 <scalbn+0x4c>
 801f0ac:	a10a      	add	r1, pc, #40	; (adr r1, 801f0d8 <scalbn+0xe0>)
 801f0ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f0b2:	2b00      	cmp	r3, #0
 801f0b4:	d0b8      	beq.n	801f028 <scalbn+0x30>
 801f0b6:	a10e      	add	r1, pc, #56	; (adr r1, 801f0f0 <scalbn+0xf8>)
 801f0b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f0bc:	e7b4      	b.n	801f028 <scalbn+0x30>
 801f0be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801f0c2:	3236      	adds	r2, #54	; 0x36
 801f0c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801f0c8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801f0cc:	4620      	mov	r0, r4
 801f0ce:	4b0c      	ldr	r3, [pc, #48]	; (801f100 <scalbn+0x108>)
 801f0d0:	2200      	movs	r2, #0
 801f0d2:	e7e8      	b.n	801f0a6 <scalbn+0xae>
 801f0d4:	f3af 8000 	nop.w
 801f0d8:	c2f8f359 	.word	0xc2f8f359
 801f0dc:	01a56e1f 	.word	0x01a56e1f
 801f0e0:	8800759c 	.word	0x8800759c
 801f0e4:	7e37e43c 	.word	0x7e37e43c
 801f0e8:	8800759c 	.word	0x8800759c
 801f0ec:	fe37e43c 	.word	0xfe37e43c
 801f0f0:	c2f8f359 	.word	0xc2f8f359
 801f0f4:	81a56e1f 	.word	0x81a56e1f
 801f0f8:	43500000 	.word	0x43500000
 801f0fc:	ffff3cb0 	.word	0xffff3cb0
 801f100:	3c900000 	.word	0x3c900000

0801f104 <_init>:
 801f104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f106:	bf00      	nop
 801f108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f10a:	bc08      	pop	{r3}
 801f10c:	469e      	mov	lr, r3
 801f10e:	4770      	bx	lr

0801f110 <_fini>:
 801f110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f112:	bf00      	nop
 801f114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f116:	bc08      	pop	{r3}
 801f118:	469e      	mov	lr, r3
 801f11a:	4770      	bx	lr
