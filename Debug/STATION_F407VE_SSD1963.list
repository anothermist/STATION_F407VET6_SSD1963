
STATION_F407VE_SSD1963.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001efec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00033568  0801f180  0801f180  0002f180  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080526e8  080526e8  00070238  2**0
                  CONTENTS
  4 .ARM          00000008  080526e8  080526e8  000626e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080526f0  080526f0  00070238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080526f0  080526f0  000626f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080526f4  080526f4  000626f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  080526f8  00070000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00070238  2**0
                  CONTENTS
 10 .bss          00000b94  20000238  20000238  00070238  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000dcc  20000dcc  00070238  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00070238  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c91e  00000000  00000000  00070268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003465  00000000  00000000  0008cb86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  0008fff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000078  00000000  00000000  00090038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a207  00000000  00000000  000900b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfbac  00000000  00000000  000aa2b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00179e63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cb8  00000000  00000000  00179eb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00024f84  00000000  00000000  00180b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000238 	.word	0x20000238
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801f164 	.word	0x0801f164

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000023c 	.word	0x2000023c
 80001cc:	0801f164 	.word	0x0801f164

080001d0 <AT24XX_IsConnected>:
#include "at24xx.h"

extern I2C_HandleTypeDef AT24XX_I2C;

bool AT24XX_IsConnected(void) {
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
	if (HAL_I2C_IsDeviceReady(&AT24XX_I2C, AT24XX_ADDRESS << 1, 1, AT24XX_I2C_TIMEOUT) == HAL_OK)
 80001d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d8:	2201      	movs	r2, #1
 80001da:	21ae      	movs	r1, #174	; 0xae
 80001dc:	4805      	ldr	r0, [pc, #20]	; (80001f4 <AT24XX_IsConnected+0x24>)
 80001de:	f00d fc57 	bl	800da90 <HAL_I2C_IsDeviceReady>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d101      	bne.n	80001ec <AT24XX_IsConnected+0x1c>
		return 1;
 80001e8:	2301      	movs	r3, #1
 80001ea:	e001      	b.n	80001f0 <AT24XX_IsConnected+0x20>
	else
		return 0;
 80001ec:	2300      	movs	r3, #0
 80001ee:	bf00      	nop
}
 80001f0:	4618      	mov	r0, r3
 80001f2:	bd80      	pop	{r7, pc}
 80001f4:	200002bc 	.word	0x200002bc

080001f8 <AT24XX_Save>:

bool AT24XX_Save(uint16_t address, void *data, size_t size_of_data) {
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b088      	sub	sp, #32
 80001fc:	af04      	add	r7, sp, #16
 80001fe:	4603      	mov	r3, r0
 8000200:	60b9      	str	r1, [r7, #8]
 8000202:	607a      	str	r2, [r7, #4]
 8000204:	81fb      	strh	r3, [r7, #14]
#if ((AT24XX_SIZE_KBIT == 4) || (AT24XX_SIZE_KBIT == 8) || (AT24XX_SIZE_KBIT == 16))
	if(size_of_data > 16)
		return 0;
#endif
#if ((AT24XX_SIZE_KBIT == 32) || (AT24XX_SIZE_KBIT == 64) || (AT24XX_SIZE_KBIT == 128))
	if(size_of_data > 32)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	2b20      	cmp	r3, #32
 800020a:	d901      	bls.n	8000210 <AT24XX_Save+0x18>
		return 0;
 800020c:	2300      	movs	r3, #0
 800020e:	e017      	b.n	8000240 <AT24XX_Save+0x48>
#endif

#if ((AT24XX_SIZE_KBIT == 1) || (AT24XX_SIZE_KBIT == 2))
	if(HAL_I2C_Mem_Write(&EEPROM24XX_I2C, AT24XX_ADDRESS<<1, Address, I2C_MEMADD_SIZE_8BIT, (uint8_t*)data, size_of_data, AT24XX_I2C_TIMEOUT) == HAL_OK)
#else
		if (HAL_I2C_Mem_Write(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data, size_of_data, AT24XX_I2C_TIMEOUT) == HAL_OK)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	b29b      	uxth	r3, r3
 8000214:	89fa      	ldrh	r2, [r7, #14]
 8000216:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800021a:	9102      	str	r1, [sp, #8]
 800021c:	9301      	str	r3, [sp, #4]
 800021e:	68bb      	ldr	r3, [r7, #8]
 8000220:	9300      	str	r3, [sp, #0]
 8000222:	2310      	movs	r3, #16
 8000224:	21ae      	movs	r1, #174	; 0xae
 8000226:	4808      	ldr	r0, [pc, #32]	; (8000248 <AT24XX_Save+0x50>)
 8000228:	f00c fcac 	bl	800cb84 <HAL_I2C_Mem_Write>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d104      	bne.n	800023c <AT24XX_Save+0x44>
#endif
{

			HAL_Delay(5);
 8000232:	2005      	movs	r0, #5
 8000234:	f006 fb6e 	bl	8006914 <HAL_Delay>
			return 1;
 8000238:	2301      	movs	r3, #1
 800023a:	e001      	b.n	8000240 <AT24XX_Save+0x48>
} else
	return 0;
 800023c:	2300      	movs	r3, #0
 800023e:	bf00      	nop
}
 8000240:	4618      	mov	r0, r3
 8000242:	3710      	adds	r7, #16
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	200002bc 	.word	0x200002bc

0800024c <AT24XX_Load>:

bool AT24XX_Load(uint16_t address, void *data, size_t size_of_data) {
 800024c:	b580      	push	{r7, lr}
 800024e:	b088      	sub	sp, #32
 8000250:	af04      	add	r7, sp, #16
 8000252:	4603      	mov	r3, r0
 8000254:	60b9      	str	r1, [r7, #8]
 8000256:	607a      	str	r2, [r7, #4]
 8000258:	81fb      	strh	r3, [r7, #14]
#if ((AT24XX_SIZE_KBIT == 1) || (AT24XX_SIZE_KBIT == 2))
	if(HAL_I2C_Mem_Read(&EEPROM24XX_I2C, AT24XX_ADDRESS<<1, Address, I2C_MEMADD_SIZE_8BIT, (uint8_t*)data, size_of_data, AT24XX_I2C_TIMEOUT) == HAL_OK)
#else
		if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data, size_of_data, AT24XX_I2C_TIMEOUT) == HAL_OK)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	b29b      	uxth	r3, r3
 800025e:	89fa      	ldrh	r2, [r7, #14]
 8000260:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000264:	9102      	str	r1, [sp, #8]
 8000266:	9301      	str	r3, [sp, #4]
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	9300      	str	r3, [sp, #0]
 800026c:	2310      	movs	r3, #16
 800026e:	21ae      	movs	r1, #174	; 0xae
 8000270:	4806      	ldr	r0, [pc, #24]	; (800028c <AT24XX_Load+0x40>)
 8000272:	f00c fd81 	bl	800cd78 <HAL_I2C_Mem_Read>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d101      	bne.n	8000280 <AT24XX_Load+0x34>
#endif
{
	return 1;
 800027c:	2301      	movs	r3, #1
 800027e:	e001      	b.n	8000284 <AT24XX_Load+0x38>
} else
	return 0;
 8000280:	2300      	movs	r3, #0
 8000282:	bf00      	nop
}
 8000284:	4618      	mov	r0, r3
 8000286:	3710      	adds	r7, #16
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	200002bc 	.word	0x200002bc

08000290 <AT24XX_Read>:

uint8_t AT24XX_Read(uint16_t address) {
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	80fb      	strh	r3, [r7, #6]
	uint16_t dt[1] = {0};
 800029a:	2300      	movs	r3, #0
 800029c:	81bb      	strh	r3, [r7, #12]
	AT24XX_Load(address, dt, 1);
 800029e:	f107 010c 	add.w	r1, r7, #12
 80002a2:	88fb      	ldrh	r3, [r7, #6]
 80002a4:	2201      	movs	r2, #1
 80002a6:	4618      	mov	r0, r3
 80002a8:	f7ff ffd0 	bl	800024c <AT24XX_Load>
	return dt[0];
 80002ac:	89bb      	ldrh	r3, [r7, #12]
 80002ae:	b2db      	uxtb	r3, r3
 80002b0:	bf00      	nop
}
 80002b2:	4618      	mov	r0, r3
 80002b4:	3710      	adds	r7, #16
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}

080002ba <AT24XX_Write>:

void AT24XX_Write(uint16_t address, uint8_t val) {
 80002ba:	b580      	push	{r7, lr}
 80002bc:	b084      	sub	sp, #16
 80002be:	af00      	add	r7, sp, #0
 80002c0:	4603      	mov	r3, r0
 80002c2:	460a      	mov	r2, r1
 80002c4:	80fb      	strh	r3, [r7, #6]
 80002c6:	4613      	mov	r3, r2
 80002c8:	717b      	strb	r3, [r7, #5]
	uint8_t save[] = {val};
 80002ca:	797b      	ldrb	r3, [r7, #5]
 80002cc:	733b      	strb	r3, [r7, #12]
	AT24XX_Save(address, save, 1);
 80002ce:	f107 010c 	add.w	r1, r7, #12
 80002d2:	88fb      	ldrh	r3, [r7, #6]
 80002d4:	2201      	movs	r2, #1
 80002d6:	4618      	mov	r0, r3
 80002d8:	f7ff ff8e 	bl	80001f8 <AT24XX_Save>
}
 80002dc:	bf00      	nop
 80002de:	3710      	adds	r7, #16
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}

080002e4 <AT24XX_Update>:

void AT24XX_Update(uint16_t address, uint8_t val) {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	4603      	mov	r3, r0
 80002ec:	460a      	mov	r2, r1
 80002ee:	80fb      	strh	r3, [r7, #6]
 80002f0:	4613      	mov	r3, r2
 80002f2:	717b      	strb	r3, [r7, #5]
	if (AT24XX_Read(address) != val) AT24XX_Write(address, val);
 80002f4:	88fb      	ldrh	r3, [r7, #6]
 80002f6:	4618      	mov	r0, r3
 80002f8:	f7ff ffca 	bl	8000290 <AT24XX_Read>
 80002fc:	4603      	mov	r3, r0
 80002fe:	461a      	mov	r2, r3
 8000300:	797b      	ldrb	r3, [r7, #5]
 8000302:	4293      	cmp	r3, r2
 8000304:	d005      	beq.n	8000312 <AT24XX_Update+0x2e>
 8000306:	797a      	ldrb	r2, [r7, #5]
 8000308:	88fb      	ldrh	r3, [r7, #6]
 800030a:	4611      	mov	r1, r2
 800030c:	4618      	mov	r0, r3
 800030e:	f7ff ffd4 	bl	80002ba <AT24XX_Write>
}
 8000312:	bf00      	nop
 8000314:	3708      	adds	r7, #8
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}

0800031a <round_eps>:
uint16_t dig_H1, dig_H3;
int16_t dig_H2, dig_H4, dig_H5, dig_H6;
int32_t t_fine;

float round_eps(double v,
                double eps) {                                                                                        // round_eps(1.234, 0.05) = 1.25
 800031a:	b580      	push	{r7, lr}
 800031c:	b084      	sub	sp, #16
 800031e:	af00      	add	r7, sp, #0
 8000320:	ed87 0b02 	vstr	d0, [r7, #8]
 8000324:	ed87 1b00 	vstr	d1, [r7]
    return floor(v / eps + 0.5) * eps;                        // round_eps(1.234, 0.01) = 1.23
 8000328:	e9d7 2300 	ldrd	r2, r3, [r7]
 800032c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000330:	f018 febc 	bl	80190ac <__aeabi_ddiv>
 8000334:	4602      	mov	r2, r0
 8000336:	460b      	mov	r3, r1
 8000338:	4610      	mov	r0, r2
 800033a:	4619      	mov	r1, r3
 800033c:	f04f 0200 	mov.w	r2, #0
 8000340:	4b10      	ldr	r3, [pc, #64]	; (8000384 <round_eps+0x6a>)
 8000342:	f018 fbd3 	bl	8018aec <__adddf3>
 8000346:	4602      	mov	r2, r0
 8000348:	460b      	mov	r3, r1
 800034a:	ec43 2b17 	vmov	d7, r2, r3
 800034e:	eeb0 0a47 	vmov.f32	s0, s14
 8000352:	eef0 0a67 	vmov.f32	s1, s15
 8000356:	f01d ff6b 	bl	801e230 <floor>
 800035a:	ec51 0b10 	vmov	r0, r1, d0
 800035e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000362:	f018 fd79 	bl	8018e58 <__aeabi_dmul>
 8000366:	4602      	mov	r2, r0
 8000368:	460b      	mov	r3, r1
 800036a:	4610      	mov	r0, r2
 800036c:	4619      	mov	r1, r3
 800036e:	f019 f86b 	bl	8019448 <__aeabi_d2f>
 8000372:	4603      	mov	r3, r0
 8000374:	ee07 3a90 	vmov	s15, r3
}                                                                                        // round_eps(1.235, 0.01) = 1.24
 8000378:	eeb0 0a67 	vmov.f32	s0, s15
 800037c:	3710      	adds	r7, #16
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	3fe00000 	.word	0x3fe00000

08000388 <round_nth>:

float round_nth(float v, int8_t n)                    // round_nth(1.235, 1) = 0.
{                                                                                        // round_nth(1.235, 0) = 1.
 8000388:	b5b0      	push	{r4, r5, r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000392:	4603      	mov	r3, r0
 8000394:	70fb      	strb	r3, [r7, #3]
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 8000396:	6878      	ldr	r0, [r7, #4]
 8000398:	f018 fd06 	bl	8018da8 <__aeabi_f2d>
 800039c:	4604      	mov	r4, r0
 800039e:	460d      	mov	r5, r1
 80003a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80003a4:	4618      	mov	r0, r3
 80003a6:	f018 fced 	bl	8018d84 <__aeabi_i2d>
 80003aa:	4602      	mov	r2, r0
 80003ac:	460b      	mov	r3, r1
 80003ae:	ec43 2b11 	vmov	d1, r2, r3
 80003b2:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 80003e0 <round_nth+0x58>
 80003b6:	f01d ffbb 	bl	801e330 <pow>
 80003ba:	eeb0 7a40 	vmov.f32	s14, s0
 80003be:	eef0 7a60 	vmov.f32	s15, s1
 80003c2:	eeb0 1a47 	vmov.f32	s2, s14
 80003c6:	eef0 1a67 	vmov.f32	s3, s15
 80003ca:	ec45 4b10 	vmov	d0, r4, r5
 80003ce:	f7ff ffa4 	bl	800031a <round_eps>
 80003d2:	eef0 7a40 	vmov.f32	s15, s0
}                                                                                        // round_nth(1.235, -2) = 1.24
 80003d6:	eeb0 0a67 	vmov.f32	s0, s15
 80003da:	3708      	adds	r7, #8
 80003dc:	46bd      	mov	sp, r7
 80003de:	bdb0      	pop	{r4, r5, r7, pc}
 80003e0:	00000000 	.word	0x00000000
 80003e4:	40240000 	.word	0x40240000

080003e8 <BME280_getTemperature>:

float BME280_getTemperature(int8_t n) {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b088      	sub	sp, #32
 80003ec:	af02      	add	r7, sp, #8
 80003ee:	4603      	mov	r3, r0
 80003f0:	71fb      	strb	r3, [r7, #7]
    uint32_t temp_raw;
    float tempf;
    uint8_t cmd[4];

    cmd[0] = 0xFA; // temp_msb
 80003f2:	23fa      	movs	r3, #250	; 0xfa
 80003f4:	723b      	strb	r3, [r7, #8]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80003f6:	f107 0208 	add.w	r2, r7, #8
 80003fa:	2364      	movs	r3, #100	; 0x64
 80003fc:	9300      	str	r3, [sp, #0]
 80003fe:	2301      	movs	r3, #1
 8000400:	21ec      	movs	r1, #236	; 0xec
 8000402:	482f      	ldr	r0, [pc, #188]	; (80004c0 <BME280_getTemperature+0xd8>)
 8000404:	f00b f843 	bl	800b48e <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 8000408:	f107 0308 	add.w	r3, r7, #8
 800040c:	1c5a      	adds	r2, r3, #1
 800040e:	2364      	movs	r3, #100	; 0x64
 8000410:	9300      	str	r3, [sp, #0]
 8000412:	2303      	movs	r3, #3
 8000414:	21ec      	movs	r1, #236	; 0xec
 8000416:	482a      	ldr	r0, [pc, #168]	; (80004c0 <BME280_getTemperature+0xd8>)
 8000418:	f00b f936 	bl	800b688 <HAL_I2C_Master_Receive>

    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 800041c:	7a7b      	ldrb	r3, [r7, #9]
 800041e:	031a      	lsls	r2, r3, #12
 8000420:	7abb      	ldrb	r3, [r7, #10]
 8000422:	011b      	lsls	r3, r3, #4
 8000424:	4313      	orrs	r3, r2
 8000426:	7afa      	ldrb	r2, [r7, #11]
 8000428:	0912      	lsrs	r2, r2, #4
 800042a:	b2d2      	uxtb	r2, r2
 800042c:	4313      	orrs	r3, r2
 800042e:	617b      	str	r3, [r7, #20]

    int32_t temp;

    temp =
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8000430:	697b      	ldr	r3, [r7, #20]
 8000432:	08db      	lsrs	r3, r3, #3
 8000434:	4a23      	ldr	r2, [pc, #140]	; (80004c4 <BME280_getTemperature+0xdc>)
 8000436:	8812      	ldrh	r2, [r2, #0]
 8000438:	0052      	lsls	r2, r2, #1
 800043a:	1a9b      	subs	r3, r3, r2
 800043c:	4a22      	ldr	r2, [pc, #136]	; (80004c8 <BME280_getTemperature+0xe0>)
 800043e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000442:	fb02 f303 	mul.w	r3, r2, r3
 8000446:	0ada      	lsrs	r2, r3, #11
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 8000448:	697b      	ldr	r3, [r7, #20]
 800044a:	091b      	lsrs	r3, r3, #4
 800044c:	491d      	ldr	r1, [pc, #116]	; (80004c4 <BME280_getTemperature+0xdc>)
 800044e:	8809      	ldrh	r1, [r1, #0]
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	6979      	ldr	r1, [r7, #20]
 8000454:	0909      	lsrs	r1, r1, #4
 8000456:	481b      	ldr	r0, [pc, #108]	; (80004c4 <BME280_getTemperature+0xdc>)
 8000458:	8800      	ldrh	r0, [r0, #0]
 800045a:	1a09      	subs	r1, r1, r0
 800045c:	fb01 f303 	mul.w	r3, r1, r3
 8000460:	0b1b      	lsrs	r3, r3, #12
 8000462:	491a      	ldr	r1, [pc, #104]	; (80004cc <BME280_getTemperature+0xe4>)
 8000464:	f9b1 1000 	ldrsh.w	r1, [r1]
 8000468:	fb01 f303 	mul.w	r3, r1, r3
 800046c:	0b9b      	lsrs	r3, r3, #14
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 800046e:	4413      	add	r3, r2
    temp =
 8000470:	613b      	str	r3, [r7, #16]

    t_fine = temp;
 8000472:	4a17      	ldr	r2, [pc, #92]	; (80004d0 <BME280_getTemperature+0xe8>)
 8000474:	693b      	ldr	r3, [r7, #16]
 8000476:	6013      	str	r3, [r2, #0]
    temp = (temp * 5 + 128) >> 8;
 8000478:	693a      	ldr	r2, [r7, #16]
 800047a:	4613      	mov	r3, r2
 800047c:	009b      	lsls	r3, r3, #2
 800047e:	4413      	add	r3, r2
 8000480:	3380      	adds	r3, #128	; 0x80
 8000482:	121b      	asrs	r3, r3, #8
 8000484:	613b      	str	r3, [r7, #16]
    tempf = (float) temp;
 8000486:	693b      	ldr	r3, [r7, #16]
 8000488:	ee07 3a90 	vmov	s15, r3
 800048c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000490:	edc7 7a03 	vstr	s15, [r7, #12]

    return round_nth((tempf / 100.0f), n);
 8000494:	edd7 7a03 	vldr	s15, [r7, #12]
 8000498:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80004d4 <BME280_getTemperature+0xec>
 800049c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80004a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004a4:	4618      	mov	r0, r3
 80004a6:	eeb0 0a47 	vmov.f32	s0, s14
 80004aa:	f7ff ff6d 	bl	8000388 <round_nth>
 80004ae:	eef0 7a40 	vmov.f32	s15, s0
 80004b2:	bf00      	nop
}
 80004b4:	eeb0 0a67 	vmov.f32	s0, s15
 80004b8:	3718      	adds	r7, #24
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	200002bc 	.word	0x200002bc
 80004c4:	20000258 	.word	0x20000258
 80004c8:	2000025a 	.word	0x2000025a
 80004cc:	2000025c 	.word	0x2000025c
 80004d0:	2000027c 	.word	0x2000027c
 80004d4:	42c80000 	.word	0x42c80000

080004d8 <BME280_getHumidity>:

float BME280_getHumidity(int8_t n) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af02      	add	r7, sp, #8
 80004de:	4603      	mov	r3, r0
 80004e0:	71fb      	strb	r3, [r7, #7]
    uint32_t hum_raw;
    float humf;
    uint8_t cmd[4];

    cmd[0] = 0xFD; // hum_msb
 80004e2:	23fd      	movs	r3, #253	; 0xfd
 80004e4:	723b      	strb	r3, [r7, #8]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80004e6:	f107 0208 	add.w	r2, r7, #8
 80004ea:	2364      	movs	r3, #100	; 0x64
 80004ec:	9300      	str	r3, [sp, #0]
 80004ee:	2301      	movs	r3, #1
 80004f0:	21ec      	movs	r1, #236	; 0xec
 80004f2:	4840      	ldr	r0, [pc, #256]	; (80005f4 <BME280_getHumidity+0x11c>)
 80004f4:	f00a ffcb 	bl	800b48e <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 2, BME280_I2C_TIMEOUT);
 80004f8:	f107 0308 	add.w	r3, r7, #8
 80004fc:	1c5a      	adds	r2, r3, #1
 80004fe:	2364      	movs	r3, #100	; 0x64
 8000500:	9300      	str	r3, [sp, #0]
 8000502:	2302      	movs	r3, #2
 8000504:	21ec      	movs	r1, #236	; 0xec
 8000506:	483b      	ldr	r0, [pc, #236]	; (80005f4 <BME280_getHumidity+0x11c>)
 8000508:	f00b f8be 	bl	800b688 <HAL_I2C_Master_Receive>

    hum_raw = (cmd[1] << 8) | cmd[2];
 800050c:	7a7b      	ldrb	r3, [r7, #9]
 800050e:	021b      	lsls	r3, r3, #8
 8000510:	7aba      	ldrb	r2, [r7, #10]
 8000512:	4313      	orrs	r3, r2
 8000514:	617b      	str	r3, [r7, #20]

    int32_t v_x1;

    v_x1 = t_fine - 76800;
 8000516:	4b38      	ldr	r3, [pc, #224]	; (80005f8 <BME280_getHumidity+0x120>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 800051e:	613b      	str	r3, [r7, #16]
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8000520:	697b      	ldr	r3, [r7, #20]
 8000522:	039b      	lsls	r3, r3, #14
 8000524:	4a35      	ldr	r2, [pc, #212]	; (80005fc <BME280_getHumidity+0x124>)
 8000526:	f9b2 2000 	ldrsh.w	r2, [r2]
 800052a:	0512      	lsls	r2, r2, #20
 800052c:	1a9b      	subs	r3, r3, r2
 800052e:	4a34      	ldr	r2, [pc, #208]	; (8000600 <BME280_getHumidity+0x128>)
 8000530:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000534:	4611      	mov	r1, r2
 8000536:	693a      	ldr	r2, [r7, #16]
 8000538:	fb01 f202 	mul.w	r2, r1, r2
 800053c:	1a9b      	subs	r3, r3, r2
 800053e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8000542:	0bdb      	lsrs	r3, r3, #15
 8000544:	4a2f      	ldr	r2, [pc, #188]	; (8000604 <BME280_getHumidity+0x12c>)
 8000546:	f9b2 2000 	ldrsh.w	r2, [r2]
 800054a:	4611      	mov	r1, r2
 800054c:	693a      	ldr	r2, [r7, #16]
 800054e:	fb01 f202 	mul.w	r2, r1, r2
 8000552:	1292      	asrs	r2, r2, #10
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8000554:	492c      	ldr	r1, [pc, #176]	; (8000608 <BME280_getHumidity+0x130>)
 8000556:	8809      	ldrh	r1, [r1, #0]
 8000558:	4608      	mov	r0, r1
 800055a:	6939      	ldr	r1, [r7, #16]
 800055c:	fb00 f101 	mul.w	r1, r0, r1
 8000560:	12c9      	asrs	r1, r1, #11
 8000562:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8000566:	fb01 f202 	mul.w	r2, r1, r2
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 800056a:	1292      	asrs	r2, r2, #10
 800056c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
                                            (int32_t) dig_H2 + 8192) >> 14));
 8000570:	4926      	ldr	r1, [pc, #152]	; (800060c <BME280_getHumidity+0x134>)
 8000572:	f9b1 1000 	ldrsh.w	r1, [r1]
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8000576:	fb01 f202 	mul.w	r2, r1, r2
                                            (int32_t) dig_H2 + 8192) >> 14));
 800057a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800057e:	1392      	asrs	r2, r2, #14
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8000580:	fb02 f303 	mul.w	r3, r2, r3
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8000584:	613b      	str	r3, [r7, #16]
    v_x1 = (v_x1 - (((((v_x1 >> 15) * (v_x1 >> 15)) >> 7) * (int32_t) dig_H1) >> 4));
 8000586:	693b      	ldr	r3, [r7, #16]
 8000588:	13db      	asrs	r3, r3, #15
 800058a:	693a      	ldr	r2, [r7, #16]
 800058c:	13d2      	asrs	r2, r2, #15
 800058e:	fb02 f303 	mul.w	r3, r2, r3
 8000592:	11db      	asrs	r3, r3, #7
 8000594:	4a1e      	ldr	r2, [pc, #120]	; (8000610 <BME280_getHumidity+0x138>)
 8000596:	8812      	ldrh	r2, [r2, #0]
 8000598:	fb02 f303 	mul.w	r3, r2, r3
 800059c:	111b      	asrs	r3, r3, #4
 800059e:	693a      	ldr	r2, [r7, #16]
 80005a0:	1ad3      	subs	r3, r2, r3
 80005a2:	613b      	str	r3, [r7, #16]
    v_x1 = (v_x1 < 0 ? 0 : v_x1);
 80005a4:	693b      	ldr	r3, [r7, #16]
 80005a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80005aa:	613b      	str	r3, [r7, #16]
    v_x1 = (v_x1 > 419430400 ? 419430400 : v_x1);
 80005ac:	693b      	ldr	r3, [r7, #16]
 80005ae:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80005b2:	bfa8      	it	ge
 80005b4:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 80005b8:	613b      	str	r3, [r7, #16]

    humf = (float) (v_x1 >> 12);
 80005ba:	693b      	ldr	r3, [r7, #16]
 80005bc:	131b      	asrs	r3, r3, #12
 80005be:	ee07 3a90 	vmov	s15, r3
 80005c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005c6:	edc7 7a03 	vstr	s15, [r7, #12]

    return round_nth((humf / 1024.0f), n);
 80005ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80005ce:	eddf 6a11 	vldr	s13, [pc, #68]	; 8000614 <BME280_getHumidity+0x13c>
 80005d2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80005d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005da:	4618      	mov	r0, r3
 80005dc:	eeb0 0a47 	vmov.f32	s0, s14
 80005e0:	f7ff fed2 	bl	8000388 <round_nth>
 80005e4:	eef0 7a40 	vmov.f32	s15, s0
 80005e8:	bf00      	nop
}
 80005ea:	eeb0 0a67 	vmov.f32	s0, s15
 80005ee:	3718      	adds	r7, #24
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	200002bc 	.word	0x200002bc
 80005f8:	2000027c 	.word	0x2000027c
 80005fc:	20000276 	.word	0x20000276
 8000600:	20000278 	.word	0x20000278
 8000604:	2000027a 	.word	0x2000027a
 8000608:	20000272 	.word	0x20000272
 800060c:	20000274 	.word	0x20000274
 8000610:	20000270 	.word	0x20000270
 8000614:	44800000 	.word	0x44800000

08000618 <BME280_getPressure>:

float BME280_getPressure(void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af02      	add	r7, sp, #8
    uint32_t press_raw;
    float pressf;
    uint8_t cmd[4];

    cmd[0] = 0xF7; // press_msb
 800061e:	23f7      	movs	r3, #247	; 0xf7
 8000620:	703b      	strb	r3, [r7, #0]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8000622:	463a      	mov	r2, r7
 8000624:	2364      	movs	r3, #100	; 0x64
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	2301      	movs	r3, #1
 800062a:	21ec      	movs	r1, #236	; 0xec
 800062c:	485d      	ldr	r0, [pc, #372]	; (80007a4 <BME280_getPressure+0x18c>)
 800062e:	f00a ff2e 	bl	800b48e <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 8000632:	463b      	mov	r3, r7
 8000634:	1c5a      	adds	r2, r3, #1
 8000636:	2364      	movs	r3, #100	; 0x64
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2303      	movs	r3, #3
 800063c:	21ec      	movs	r1, #236	; 0xec
 800063e:	4859      	ldr	r0, [pc, #356]	; (80007a4 <BME280_getPressure+0x18c>)
 8000640:	f00b f822 	bl	800b688 <HAL_I2C_Master_Receive>

    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8000644:	787b      	ldrb	r3, [r7, #1]
 8000646:	031a      	lsls	r2, r3, #12
 8000648:	78bb      	ldrb	r3, [r7, #2]
 800064a:	011b      	lsls	r3, r3, #4
 800064c:	4313      	orrs	r3, r2
 800064e:	78fa      	ldrb	r2, [r7, #3]
 8000650:	0912      	lsrs	r2, r2, #4
 8000652:	b2d2      	uxtb	r2, r2
 8000654:	4313      	orrs	r3, r2
 8000656:	613b      	str	r3, [r7, #16]

    int32_t var1, var2;
    uint32_t press;

    var1 = (t_fine >> 1) - 64000;
 8000658:	4b53      	ldr	r3, [pc, #332]	; (80007a8 <BME280_getPressure+0x190>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	105b      	asrs	r3, r3, #1
 800065e:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 8000662:	60fb      	str	r3, [r7, #12]
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	109b      	asrs	r3, r3, #2
 8000668:	68fa      	ldr	r2, [r7, #12]
 800066a:	1092      	asrs	r2, r2, #2
 800066c:	fb02 f303 	mul.w	r3, r2, r3
 8000670:	12db      	asrs	r3, r3, #11
 8000672:	4a4e      	ldr	r2, [pc, #312]	; (80007ac <BME280_getPressure+0x194>)
 8000674:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000678:	fb02 f303 	mul.w	r3, r2, r3
 800067c:	60bb      	str	r3, [r7, #8]
    var2 = var2 + ((var1 * dig_P5) << 1);
 800067e:	4b4c      	ldr	r3, [pc, #304]	; (80007b0 <BME280_getPressure+0x198>)
 8000680:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000684:	461a      	mov	r2, r3
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	fb02 f303 	mul.w	r3, r2, r3
 800068c:	005b      	lsls	r3, r3, #1
 800068e:	68ba      	ldr	r2, [r7, #8]
 8000690:	4413      	add	r3, r2
 8000692:	60bb      	str	r3, [r7, #8]
    var2 = (var2 >> 2) + (dig_P4 << 16);
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	109a      	asrs	r2, r3, #2
 8000698:	4b46      	ldr	r3, [pc, #280]	; (80007b4 <BME280_getPressure+0x19c>)
 800069a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800069e:	041b      	lsls	r3, r3, #16
 80006a0:	4413      	add	r3, r2
 80006a2:	60bb      	str	r3, [r7, #8]
    var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((dig_P2 * var1) >> 1)) >> 18;
 80006a4:	4b44      	ldr	r3, [pc, #272]	; (80007b8 <BME280_getPressure+0x1a0>)
 80006a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006aa:	4619      	mov	r1, r3
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	109b      	asrs	r3, r3, #2
 80006b0:	68fa      	ldr	r2, [r7, #12]
 80006b2:	1092      	asrs	r2, r2, #2
 80006b4:	fb02 f303 	mul.w	r3, r2, r3
 80006b8:	135b      	asrs	r3, r3, #13
 80006ba:	fb01 f303 	mul.w	r3, r1, r3
 80006be:	10da      	asrs	r2, r3, #3
 80006c0:	4b3e      	ldr	r3, [pc, #248]	; (80007bc <BME280_getPressure+0x1a4>)
 80006c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006c6:	4619      	mov	r1, r3
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	fb01 f303 	mul.w	r3, r1, r3
 80006ce:	105b      	asrs	r3, r3, #1
 80006d0:	4413      	add	r3, r2
 80006d2:	149b      	asrs	r3, r3, #18
 80006d4:	60fb      	str	r3, [r7, #12]
    var1 = ((32768 + var1) * dig_P1) >> 15;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80006dc:	4a38      	ldr	r2, [pc, #224]	; (80007c0 <BME280_getPressure+0x1a8>)
 80006de:	8812      	ldrh	r2, [r2, #0]
 80006e0:	fb02 f303 	mul.w	r3, r2, r3
 80006e4:	13db      	asrs	r3, r3, #15
 80006e6:	60fb      	str	r3, [r7, #12]
    if (var1 == 0) {
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d102      	bne.n	80006f4 <BME280_getPressure+0xdc>
        return 0;
 80006ee:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80007c4 <BME280_getPressure+0x1ac>
 80006f2:	e04f      	b.n	8000794 <BME280_getPressure+0x17c>
    }
    press = (((1048576 - press_raw) - (var2 >> 12))) * 3125;
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	131b      	asrs	r3, r3, #12
 80006f8:	461a      	mov	r2, r3
 80006fa:	693b      	ldr	r3, [r7, #16]
 80006fc:	4413      	add	r3, r2
 80006fe:	4a32      	ldr	r2, [pc, #200]	; (80007c8 <BME280_getPressure+0x1b0>)
 8000700:	fb02 f303 	mul.w	r3, r2, r3
 8000704:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
 8000708:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
 800070c:	617b      	str	r3, [r7, #20]
    if (press < 0x80000000) {
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	2b00      	cmp	r3, #0
 8000712:	db06      	blt.n	8000722 <BME280_getPressure+0x10a>
        press = (press << 1) / var1;
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	005a      	lsls	r2, r3, #1
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	fbb2 f3f3 	udiv	r3, r2, r3
 800071e:	617b      	str	r3, [r7, #20]
 8000720:	e005      	b.n	800072e <BME280_getPressure+0x116>
    } else {
        press = (press / var1) * 2;
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	697a      	ldr	r2, [r7, #20]
 8000726:	fbb2 f3f3 	udiv	r3, r2, r3
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	617b      	str	r3, [r7, #20]
    }
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 800072e:	4b27      	ldr	r3, [pc, #156]	; (80007cc <BME280_getPressure+0x1b4>)
 8000730:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000734:	4619      	mov	r1, r3
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	08db      	lsrs	r3, r3, #3
 800073a:	697a      	ldr	r2, [r7, #20]
 800073c:	08d2      	lsrs	r2, r2, #3
 800073e:	fb02 f303 	mul.w	r3, r2, r3
 8000742:	0b5b      	lsrs	r3, r3, #13
 8000744:	fb01 f303 	mul.w	r3, r1, r3
 8000748:	131b      	asrs	r3, r3, #12
 800074a:	60fb      	str	r3, [r7, #12]
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	089b      	lsrs	r3, r3, #2
 8000750:	461a      	mov	r2, r3
 8000752:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <BME280_getPressure+0x1b8>)
 8000754:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000758:	fb02 f303 	mul.w	r3, r2, r3
 800075c:	135b      	asrs	r3, r3, #13
 800075e:	60bb      	str	r3, [r7, #8]
    press = (press + ((var1 + var2 + dig_P7) >> 4));
 8000760:	68fa      	ldr	r2, [r7, #12]
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	4413      	add	r3, r2
 8000766:	4a1b      	ldr	r2, [pc, #108]	; (80007d4 <BME280_getPressure+0x1bc>)
 8000768:	f9b2 2000 	ldrsh.w	r2, [r2]
 800076c:	4413      	add	r3, r2
 800076e:	111b      	asrs	r3, r3, #4
 8000770:	461a      	mov	r2, r3
 8000772:	697b      	ldr	r3, [r7, #20]
 8000774:	4413      	add	r3, r2
 8000776:	617b      	str	r3, [r7, #20]

    pressf = (float) press;
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	ee07 3a90 	vmov	s15, r3
 800077e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000782:	edc7 7a01 	vstr	s15, [r7, #4]
    return (pressf / 100.0f);
 8000786:	edd7 7a01 	vldr	s15, [r7, #4]
 800078a:	eddf 6a13 	vldr	s13, [pc, #76]	; 80007d8 <BME280_getPressure+0x1c0>
 800078e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000792:	bf00      	nop
}
 8000794:	eef0 7a47 	vmov.f32	s15, s14
 8000798:	eeb0 0a67 	vmov.f32	s0, s15
 800079c:	3718      	adds	r7, #24
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200002bc 	.word	0x200002bc
 80007a8:	2000027c 	.word	0x2000027c
 80007ac:	20000268 	.word	0x20000268
 80007b0:	20000266 	.word	0x20000266
 80007b4:	20000264 	.word	0x20000264
 80007b8:	20000262 	.word	0x20000262
 80007bc:	20000260 	.word	0x20000260
 80007c0:	2000025e 	.word	0x2000025e
 80007c4:	00000000 	.word	0x00000000
 80007c8:	fffff3cb 	.word	0xfffff3cb
 80007cc:	2000026e 	.word	0x2000026e
 80007d0:	2000026c 	.word	0x2000026c
 80007d4:	2000026a 	.word	0x2000026a
 80007d8:	42c80000 	.word	0x42c80000

080007dc <BME280_Init>:

void BME280_Init(void) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b088      	sub	sp, #32
 80007e0:	af02      	add	r7, sp, #8
    uint8_t cmd[18];

    cmd[0] = 0xF2; // ctrl_hum
 80007e2:	23f2      	movs	r3, #242	; 0xf2
 80007e4:	713b      	strb	r3, [r7, #4]
    cmd[1] = 0x05; // Humidity oversampling x16
 80007e6:	2305      	movs	r3, #5
 80007e8:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80007ea:	1d3a      	adds	r2, r7, #4
 80007ec:	2364      	movs	r3, #100	; 0x64
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	2302      	movs	r3, #2
 80007f2:	21ec      	movs	r1, #236	; 0xec
 80007f4:	4882      	ldr	r0, [pc, #520]	; (8000a00 <BME280_Init+0x224>)
 80007f6:	f00a fe4a 	bl	800b48e <HAL_I2C_Master_Transmit>

    cmd[0] = 0xF4; // ctrl_meas
 80007fa:	23f4      	movs	r3, #244	; 0xf4
 80007fc:	713b      	strb	r3, [r7, #4]
    cmd[1] = 0xB7; // Temparature oversampling x16, Pressure oversampling x16, Normal mode
 80007fe:	23b7      	movs	r3, #183	; 0xb7
 8000800:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8000802:	1d3a      	adds	r2, r7, #4
 8000804:	2364      	movs	r3, #100	; 0x64
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2302      	movs	r3, #2
 800080a:	21ec      	movs	r1, #236	; 0xec
 800080c:	487c      	ldr	r0, [pc, #496]	; (8000a00 <BME280_Init+0x224>)
 800080e:	f00a fe3e 	bl	800b48e <HAL_I2C_Master_Transmit>

    cmd[0] = 0xF5; // config
 8000812:	23f5      	movs	r3, #245	; 0xf5
 8000814:	713b      	strb	r3, [r7, #4]
    cmd[1] = 0xa0; // Standby BME280_I2C_TIMEOUTms, Filter off
 8000816:	23a0      	movs	r3, #160	; 0xa0
 8000818:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 800081a:	1d3a      	adds	r2, r7, #4
 800081c:	2364      	movs	r3, #100	; 0x64
 800081e:	9300      	str	r3, [sp, #0]
 8000820:	2302      	movs	r3, #2
 8000822:	21ec      	movs	r1, #236	; 0xec
 8000824:	4876      	ldr	r0, [pc, #472]	; (8000a00 <BME280_Init+0x224>)
 8000826:	f00a fe32 	bl	800b48e <HAL_I2C_Master_Transmit>

    cmd[0] = 0x88; // read dig_T regs
 800082a:	2388      	movs	r3, #136	; 0x88
 800082c:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800082e:	1d3a      	adds	r2, r7, #4
 8000830:	2364      	movs	r3, #100	; 0x64
 8000832:	9300      	str	r3, [sp, #0]
 8000834:	2301      	movs	r3, #1
 8000836:	21ec      	movs	r1, #236	; 0xec
 8000838:	4871      	ldr	r0, [pc, #452]	; (8000a00 <BME280_Init+0x224>)
 800083a:	f00a fe28 	bl	800b48e <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 6, BME280_I2C_TIMEOUT);
 800083e:	1d3a      	adds	r2, r7, #4
 8000840:	2364      	movs	r3, #100	; 0x64
 8000842:	9300      	str	r3, [sp, #0]
 8000844:	2306      	movs	r3, #6
 8000846:	21ec      	movs	r1, #236	; 0xec
 8000848:	486d      	ldr	r0, [pc, #436]	; (8000a00 <BME280_Init+0x224>)
 800084a:	f00a ff1d 	bl	800b688 <HAL_I2C_Master_Receive>

    dig_T1 = (cmd[1] << 8) | cmd[0];
 800084e:	797b      	ldrb	r3, [r7, #5]
 8000850:	021b      	lsls	r3, r3, #8
 8000852:	b21a      	sxth	r2, r3
 8000854:	793b      	ldrb	r3, [r7, #4]
 8000856:	b21b      	sxth	r3, r3
 8000858:	4313      	orrs	r3, r2
 800085a:	b21b      	sxth	r3, r3
 800085c:	b29a      	uxth	r2, r3
 800085e:	4b69      	ldr	r3, [pc, #420]	; (8000a04 <BME280_Init+0x228>)
 8000860:	801a      	strh	r2, [r3, #0]
    dig_T2 = (cmd[3] << 8) | cmd[2];
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	021b      	lsls	r3, r3, #8
 8000866:	b21a      	sxth	r2, r3
 8000868:	79bb      	ldrb	r3, [r7, #6]
 800086a:	b21b      	sxth	r3, r3
 800086c:	4313      	orrs	r3, r2
 800086e:	b21a      	sxth	r2, r3
 8000870:	4b65      	ldr	r3, [pc, #404]	; (8000a08 <BME280_Init+0x22c>)
 8000872:	801a      	strh	r2, [r3, #0]
    dig_T3 = (cmd[5] << 8) | cmd[4];
 8000874:	7a7b      	ldrb	r3, [r7, #9]
 8000876:	021b      	lsls	r3, r3, #8
 8000878:	b21a      	sxth	r2, r3
 800087a:	7a3b      	ldrb	r3, [r7, #8]
 800087c:	b21b      	sxth	r3, r3
 800087e:	4313      	orrs	r3, r2
 8000880:	b21a      	sxth	r2, r3
 8000882:	4b62      	ldr	r3, [pc, #392]	; (8000a0c <BME280_Init+0x230>)
 8000884:	801a      	strh	r2, [r3, #0]

    cmd[0] = 0x8E; // read dig_P regs
 8000886:	238e      	movs	r3, #142	; 0x8e
 8000888:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800088a:	1d3a      	adds	r2, r7, #4
 800088c:	2364      	movs	r3, #100	; 0x64
 800088e:	9300      	str	r3, [sp, #0]
 8000890:	2301      	movs	r3, #1
 8000892:	21ec      	movs	r1, #236	; 0xec
 8000894:	485a      	ldr	r0, [pc, #360]	; (8000a00 <BME280_Init+0x224>)
 8000896:	f00a fdfa 	bl	800b48e <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 18, BME280_I2C_TIMEOUT);
 800089a:	1d3a      	adds	r2, r7, #4
 800089c:	2364      	movs	r3, #100	; 0x64
 800089e:	9300      	str	r3, [sp, #0]
 80008a0:	2312      	movs	r3, #18
 80008a2:	21ec      	movs	r1, #236	; 0xec
 80008a4:	4856      	ldr	r0, [pc, #344]	; (8000a00 <BME280_Init+0x224>)
 80008a6:	f00a feef 	bl	800b688 <HAL_I2C_Master_Receive>

    dig_P1 = (cmd[1] << 8) | cmd[0];
 80008aa:	797b      	ldrb	r3, [r7, #5]
 80008ac:	021b      	lsls	r3, r3, #8
 80008ae:	b21a      	sxth	r2, r3
 80008b0:	793b      	ldrb	r3, [r7, #4]
 80008b2:	b21b      	sxth	r3, r3
 80008b4:	4313      	orrs	r3, r2
 80008b6:	b21b      	sxth	r3, r3
 80008b8:	b29a      	uxth	r2, r3
 80008ba:	4b55      	ldr	r3, [pc, #340]	; (8000a10 <BME280_Init+0x234>)
 80008bc:	801a      	strh	r2, [r3, #0]
    dig_P2 = (cmd[3] << 8) | cmd[2];
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	021b      	lsls	r3, r3, #8
 80008c2:	b21a      	sxth	r2, r3
 80008c4:	79bb      	ldrb	r3, [r7, #6]
 80008c6:	b21b      	sxth	r3, r3
 80008c8:	4313      	orrs	r3, r2
 80008ca:	b21a      	sxth	r2, r3
 80008cc:	4b51      	ldr	r3, [pc, #324]	; (8000a14 <BME280_Init+0x238>)
 80008ce:	801a      	strh	r2, [r3, #0]
    dig_P3 = (cmd[5] << 8) | cmd[4];
 80008d0:	7a7b      	ldrb	r3, [r7, #9]
 80008d2:	021b      	lsls	r3, r3, #8
 80008d4:	b21a      	sxth	r2, r3
 80008d6:	7a3b      	ldrb	r3, [r7, #8]
 80008d8:	b21b      	sxth	r3, r3
 80008da:	4313      	orrs	r3, r2
 80008dc:	b21a      	sxth	r2, r3
 80008de:	4b4e      	ldr	r3, [pc, #312]	; (8000a18 <BME280_Init+0x23c>)
 80008e0:	801a      	strh	r2, [r3, #0]
    dig_P4 = (cmd[7] << 8) | cmd[6];
 80008e2:	7afb      	ldrb	r3, [r7, #11]
 80008e4:	021b      	lsls	r3, r3, #8
 80008e6:	b21a      	sxth	r2, r3
 80008e8:	7abb      	ldrb	r3, [r7, #10]
 80008ea:	b21b      	sxth	r3, r3
 80008ec:	4313      	orrs	r3, r2
 80008ee:	b21a      	sxth	r2, r3
 80008f0:	4b4a      	ldr	r3, [pc, #296]	; (8000a1c <BME280_Init+0x240>)
 80008f2:	801a      	strh	r2, [r3, #0]
    dig_P5 = (cmd[9] << 8) | cmd[8];
 80008f4:	7b7b      	ldrb	r3, [r7, #13]
 80008f6:	021b      	lsls	r3, r3, #8
 80008f8:	b21a      	sxth	r2, r3
 80008fa:	7b3b      	ldrb	r3, [r7, #12]
 80008fc:	b21b      	sxth	r3, r3
 80008fe:	4313      	orrs	r3, r2
 8000900:	b21a      	sxth	r2, r3
 8000902:	4b47      	ldr	r3, [pc, #284]	; (8000a20 <BME280_Init+0x244>)
 8000904:	801a      	strh	r2, [r3, #0]
    dig_P6 = (cmd[11] << 8) | cmd[10];
 8000906:	7bfb      	ldrb	r3, [r7, #15]
 8000908:	021b      	lsls	r3, r3, #8
 800090a:	b21a      	sxth	r2, r3
 800090c:	7bbb      	ldrb	r3, [r7, #14]
 800090e:	b21b      	sxth	r3, r3
 8000910:	4313      	orrs	r3, r2
 8000912:	b21a      	sxth	r2, r3
 8000914:	4b43      	ldr	r3, [pc, #268]	; (8000a24 <BME280_Init+0x248>)
 8000916:	801a      	strh	r2, [r3, #0]
    dig_P7 = (cmd[13] << 8) | cmd[12];
 8000918:	7c7b      	ldrb	r3, [r7, #17]
 800091a:	021b      	lsls	r3, r3, #8
 800091c:	b21a      	sxth	r2, r3
 800091e:	7c3b      	ldrb	r3, [r7, #16]
 8000920:	b21b      	sxth	r3, r3
 8000922:	4313      	orrs	r3, r2
 8000924:	b21a      	sxth	r2, r3
 8000926:	4b40      	ldr	r3, [pc, #256]	; (8000a28 <BME280_Init+0x24c>)
 8000928:	801a      	strh	r2, [r3, #0]
    dig_P8 = (cmd[15] << 8) | cmd[14];
 800092a:	7cfb      	ldrb	r3, [r7, #19]
 800092c:	021b      	lsls	r3, r3, #8
 800092e:	b21a      	sxth	r2, r3
 8000930:	7cbb      	ldrb	r3, [r7, #18]
 8000932:	b21b      	sxth	r3, r3
 8000934:	4313      	orrs	r3, r2
 8000936:	b21a      	sxth	r2, r3
 8000938:	4b3c      	ldr	r3, [pc, #240]	; (8000a2c <BME280_Init+0x250>)
 800093a:	801a      	strh	r2, [r3, #0]
    dig_P9 = (cmd[17] << 8) | cmd[16];
 800093c:	7d7b      	ldrb	r3, [r7, #21]
 800093e:	021b      	lsls	r3, r3, #8
 8000940:	b21a      	sxth	r2, r3
 8000942:	7d3b      	ldrb	r3, [r7, #20]
 8000944:	b21b      	sxth	r3, r3
 8000946:	4313      	orrs	r3, r2
 8000948:	b21a      	sxth	r2, r3
 800094a:	4b39      	ldr	r3, [pc, #228]	; (8000a30 <BME280_Init+0x254>)
 800094c:	801a      	strh	r2, [r3, #0]

    cmd[0] = 0xA1; // read dig_H regs
 800094e:	23a1      	movs	r3, #161	; 0xa1
 8000950:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8000952:	1d3a      	adds	r2, r7, #4
 8000954:	2364      	movs	r3, #100	; 0x64
 8000956:	9300      	str	r3, [sp, #0]
 8000958:	2301      	movs	r3, #1
 800095a:	21ec      	movs	r1, #236	; 0xec
 800095c:	4828      	ldr	r0, [pc, #160]	; (8000a00 <BME280_Init+0x224>)
 800095e:	f00a fd96 	bl	800b48e <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8000962:	1d3a      	adds	r2, r7, #4
 8000964:	2364      	movs	r3, #100	; 0x64
 8000966:	9300      	str	r3, [sp, #0]
 8000968:	2301      	movs	r3, #1
 800096a:	21ec      	movs	r1, #236	; 0xec
 800096c:	4824      	ldr	r0, [pc, #144]	; (8000a00 <BME280_Init+0x224>)
 800096e:	f00a fe8b 	bl	800b688 <HAL_I2C_Master_Receive>

    cmd[1] = 0xE1; // read dig_H regs
 8000972:	23e1      	movs	r3, #225	; 0xe1
 8000974:	717b      	strb	r3, [r7, #5]

    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, &cmd[1], 1, BME280_I2C_TIMEOUT);
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	1c5a      	adds	r2, r3, #1
 800097a:	2364      	movs	r3, #100	; 0x64
 800097c:	9300      	str	r3, [sp, #0]
 800097e:	2301      	movs	r3, #1
 8000980:	21ec      	movs	r1, #236	; 0xec
 8000982:	481f      	ldr	r0, [pc, #124]	; (8000a00 <BME280_Init+0x224>)
 8000984:	f00a fd83 	bl	800b48e <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 7, BME280_I2C_TIMEOUT);
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	1c5a      	adds	r2, r3, #1
 800098c:	2364      	movs	r3, #100	; 0x64
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	2307      	movs	r3, #7
 8000992:	21ec      	movs	r1, #236	; 0xec
 8000994:	481a      	ldr	r0, [pc, #104]	; (8000a00 <BME280_Init+0x224>)
 8000996:	f00a fe77 	bl	800b688 <HAL_I2C_Master_Receive>

    dig_H1 = cmd[0];
 800099a:	793b      	ldrb	r3, [r7, #4]
 800099c:	b29a      	uxth	r2, r3
 800099e:	4b25      	ldr	r3, [pc, #148]	; (8000a34 <BME280_Init+0x258>)
 80009a0:	801a      	strh	r2, [r3, #0]
    dig_H2 = (cmd[2] << 8) | cmd[1];
 80009a2:	79bb      	ldrb	r3, [r7, #6]
 80009a4:	021b      	lsls	r3, r3, #8
 80009a6:	b21a      	sxth	r2, r3
 80009a8:	797b      	ldrb	r3, [r7, #5]
 80009aa:	b21b      	sxth	r3, r3
 80009ac:	4313      	orrs	r3, r2
 80009ae:	b21a      	sxth	r2, r3
 80009b0:	4b21      	ldr	r3, [pc, #132]	; (8000a38 <BME280_Init+0x25c>)
 80009b2:	801a      	strh	r2, [r3, #0]
    dig_H3 = cmd[3];
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	b29a      	uxth	r2, r3
 80009b8:	4b20      	ldr	r3, [pc, #128]	; (8000a3c <BME280_Init+0x260>)
 80009ba:	801a      	strh	r2, [r3, #0]
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 80009bc:	7a3b      	ldrb	r3, [r7, #8]
 80009be:	011b      	lsls	r3, r3, #4
 80009c0:	b21a      	sxth	r2, r3
 80009c2:	7a7b      	ldrb	r3, [r7, #9]
 80009c4:	b21b      	sxth	r3, r3
 80009c6:	f003 030f 	and.w	r3, r3, #15
 80009ca:	b21b      	sxth	r3, r3
 80009cc:	4313      	orrs	r3, r2
 80009ce:	b21a      	sxth	r2, r3
 80009d0:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <BME280_Init+0x264>)
 80009d2:	801a      	strh	r2, [r3, #0]
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 80009d4:	7abb      	ldrb	r3, [r7, #10]
 80009d6:	011b      	lsls	r3, r3, #4
 80009d8:	b21a      	sxth	r2, r3
 80009da:	7a7b      	ldrb	r3, [r7, #9]
 80009dc:	091b      	lsrs	r3, r3, #4
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	b21b      	sxth	r3, r3
 80009e2:	f003 030f 	and.w	r3, r3, #15
 80009e6:	b21b      	sxth	r3, r3
 80009e8:	4313      	orrs	r3, r2
 80009ea:	b21a      	sxth	r2, r3
 80009ec:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <BME280_Init+0x268>)
 80009ee:	801a      	strh	r2, [r3, #0]
    dig_H6 = cmd[7];
 80009f0:	7afb      	ldrb	r3, [r7, #11]
 80009f2:	b21a      	sxth	r2, r3
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <BME280_Init+0x26c>)
 80009f6:	801a      	strh	r2, [r3, #0]
}
 80009f8:	bf00      	nop
 80009fa:	3718      	adds	r7, #24
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	200002bc 	.word	0x200002bc
 8000a04:	20000258 	.word	0x20000258
 8000a08:	2000025a 	.word	0x2000025a
 8000a0c:	2000025c 	.word	0x2000025c
 8000a10:	2000025e 	.word	0x2000025e
 8000a14:	20000260 	.word	0x20000260
 8000a18:	20000262 	.word	0x20000262
 8000a1c:	20000264 	.word	0x20000264
 8000a20:	20000266 	.word	0x20000266
 8000a24:	20000268 	.word	0x20000268
 8000a28:	2000026a 	.word	0x2000026a
 8000a2c:	2000026c 	.word	0x2000026c
 8000a30:	2000026e 	.word	0x2000026e
 8000a34:	20000270 	.word	0x20000270
 8000a38:	20000274 	.word	0x20000274
 8000a3c:	20000272 	.word	0x20000272
 8000a40:	20000276 	.word	0x20000276
 8000a44:	20000278 	.word	0x20000278
 8000a48:	2000027a 	.word	0x2000027a

08000a4c <fahrenheit>:

float fahrenheit(float celsius) {
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	ed87 0a01 	vstr	s0, [r7, #4]
    return celsius * 9 / 5 + 32;
 8000a56:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a5a:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8000a5e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a62:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8000a66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a6a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000a80 <fahrenheit+0x34>
 8000a6e:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8000a72:	eeb0 0a67 	vmov.f32	s0, s15
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	42000000 	.word	0x42000000

08000a84 <calculate_humidex>:

double calculate_humidex(double temperature, double humidity) {
 8000a84:	b5b0      	push	{r4, r5, r7, lr}
 8000a86:	b088      	sub	sp, #32
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	ed87 0b02 	vstr	d0, [r7, #8]
 8000a8e:	ed87 1b00 	vstr	d1, [r7]
    double e;
    e = (6.112 * pow(10, (7.5 * temperature / (237.7 + temperature))) * humidity / 100);
 8000a92:	f04f 0200 	mov.w	r2, #0
 8000a96:	4b3a      	ldr	r3, [pc, #232]	; (8000b80 <calculate_humidex+0xfc>)
 8000a98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000a9c:	f018 f9dc 	bl	8018e58 <__aeabi_dmul>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	460b      	mov	r3, r1
 8000aa4:	4614      	mov	r4, r2
 8000aa6:	461d      	mov	r5, r3
 8000aa8:	a32d      	add	r3, pc, #180	; (adr r3, 8000b60 <calculate_humidex+0xdc>)
 8000aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000aae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ab2:	f018 f81b 	bl	8018aec <__adddf3>
 8000ab6:	4602      	mov	r2, r0
 8000ab8:	460b      	mov	r3, r1
 8000aba:	4620      	mov	r0, r4
 8000abc:	4629      	mov	r1, r5
 8000abe:	f018 faf5 	bl	80190ac <__aeabi_ddiv>
 8000ac2:	4602      	mov	r2, r0
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	ec43 2b17 	vmov	d7, r2, r3
 8000aca:	eeb0 1a47 	vmov.f32	s2, s14
 8000ace:	eef0 1a67 	vmov.f32	s3, s15
 8000ad2:	ed9f 0b25 	vldr	d0, [pc, #148]	; 8000b68 <calculate_humidex+0xe4>
 8000ad6:	f01d fc2b 	bl	801e330 <pow>
 8000ada:	ec51 0b10 	vmov	r0, r1, d0
 8000ade:	a324      	add	r3, pc, #144	; (adr r3, 8000b70 <calculate_humidex+0xec>)
 8000ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ae4:	f018 f9b8 	bl	8018e58 <__aeabi_dmul>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	460b      	mov	r3, r1
 8000aec:	4610      	mov	r0, r2
 8000aee:	4619      	mov	r1, r3
 8000af0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000af4:	f018 f9b0 	bl	8018e58 <__aeabi_dmul>
 8000af8:	4602      	mov	r2, r0
 8000afa:	460b      	mov	r3, r1
 8000afc:	4610      	mov	r0, r2
 8000afe:	4619      	mov	r1, r3
 8000b00:	f04f 0200 	mov.w	r2, #0
 8000b04:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <calculate_humidex+0x100>)
 8000b06:	f018 fad1 	bl	80190ac <__aeabi_ddiv>
 8000b0a:	4602      	mov	r2, r0
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double humidex = temperature + 0.55555555 * (e - 10.0);
 8000b12:	f04f 0200 	mov.w	r2, #0
 8000b16:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <calculate_humidex+0x104>)
 8000b18:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000b1c:	f017 ffe4 	bl	8018ae8 <__aeabi_dsub>
 8000b20:	4602      	mov	r2, r0
 8000b22:	460b      	mov	r3, r1
 8000b24:	4610      	mov	r0, r2
 8000b26:	4619      	mov	r1, r3
 8000b28:	a313      	add	r3, pc, #76	; (adr r3, 8000b78 <calculate_humidex+0xf4>)
 8000b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b2e:	f018 f993 	bl	8018e58 <__aeabi_dmul>
 8000b32:	4602      	mov	r2, r0
 8000b34:	460b      	mov	r3, r1
 8000b36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000b3a:	f017 ffd7 	bl	8018aec <__adddf3>
 8000b3e:	4602      	mov	r2, r0
 8000b40:	460b      	mov	r3, r1
 8000b42:	e9c7 2304 	strd	r2, r3, [r7, #16]
    return humidex;
 8000b46:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000b4a:	ec43 2b17 	vmov	d7, r2, r3
}
 8000b4e:	eeb0 0a47 	vmov.f32	s0, s14
 8000b52:	eef0 0a67 	vmov.f32	s1, s15
 8000b56:	3720      	adds	r7, #32
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bdb0      	pop	{r4, r5, r7, pc}
 8000b5c:	f3af 8000 	nop.w
 8000b60:	66666666 	.word	0x66666666
 8000b64:	406db666 	.word	0x406db666
 8000b68:	00000000 	.word	0x00000000
 8000b6c:	40240000 	.word	0x40240000
 8000b70:	20c49ba6 	.word	0x20c49ba6
 8000b74:	401872b0 	.word	0x401872b0
 8000b78:	6ecb8fb6 	.word	0x6ecb8fb6
 8000b7c:	3fe1c71c 	.word	0x3fe1c71c
 8000b80:	401e0000 	.word	0x401e0000
 8000b84:	40590000 	.word	0x40590000
 8000b88:	40240000 	.word	0x40240000

08000b8c <calculate_humidityAbsolute>:

double calculate_humidityAbsolute(double temperature, double humidityRelative) {
 8000b8c:	b5b0      	push	{r4, r5, r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	ed87 0b02 	vstr	d0, [r7, #8]
 8000b96:	ed87 1b00 	vstr	d1, [r7]
    return 6.112 * pow(2.71828, ((17.67 * temperature) / (temperature + 243.5)) * humidityRelative * 2.1674) /
 8000b9a:	a32f      	add	r3, pc, #188	; (adr r3, 8000c58 <calculate_humidityAbsolute+0xcc>)
 8000b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ba0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ba4:	f018 f958 	bl	8018e58 <__aeabi_dmul>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	460b      	mov	r3, r1
 8000bac:	4614      	mov	r4, r2
 8000bae:	461d      	mov	r5, r3
 8000bb0:	a32b      	add	r3, pc, #172	; (adr r3, 8000c60 <calculate_humidityAbsolute+0xd4>)
 8000bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000bba:	f017 ff97 	bl	8018aec <__adddf3>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	4620      	mov	r0, r4
 8000bc4:	4629      	mov	r1, r5
 8000bc6:	f018 fa71 	bl	80190ac <__aeabi_ddiv>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	460b      	mov	r3, r1
 8000bce:	4610      	mov	r0, r2
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000bd6:	f018 f93f 	bl	8018e58 <__aeabi_dmul>
 8000bda:	4602      	mov	r2, r0
 8000bdc:	460b      	mov	r3, r1
 8000bde:	4610      	mov	r0, r2
 8000be0:	4619      	mov	r1, r3
 8000be2:	a321      	add	r3, pc, #132	; (adr r3, 8000c68 <calculate_humidityAbsolute+0xdc>)
 8000be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000be8:	f018 f936 	bl	8018e58 <__aeabi_dmul>
 8000bec:	4602      	mov	r2, r0
 8000bee:	460b      	mov	r3, r1
 8000bf0:	ec43 2b17 	vmov	d7, r2, r3
 8000bf4:	eeb0 1a47 	vmov.f32	s2, s14
 8000bf8:	eef0 1a67 	vmov.f32	s3, s15
 8000bfc:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8000c50 <calculate_humidityAbsolute+0xc4>
 8000c00:	f01d fb96 	bl	801e330 <pow>
 8000c04:	ec51 0b10 	vmov	r0, r1, d0
 8000c08:	a319      	add	r3, pc, #100	; (adr r3, 8000c70 <calculate_humidityAbsolute+0xe4>)
 8000c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c0e:	f018 f923 	bl	8018e58 <__aeabi_dmul>
 8000c12:	4602      	mov	r2, r0
 8000c14:	460b      	mov	r3, r1
 8000c16:	4614      	mov	r4, r2
 8000c18:	461d      	mov	r5, r3
           (273.15 + temperature);
 8000c1a:	a317      	add	r3, pc, #92	; (adr r3, 8000c78 <calculate_humidityAbsolute+0xec>)
 8000c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c20:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000c24:	f017 ff62 	bl	8018aec <__adddf3>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	460b      	mov	r3, r1
    return 6.112 * pow(2.71828, ((17.67 * temperature) / (temperature + 243.5)) * humidityRelative * 2.1674) /
 8000c2c:	4620      	mov	r0, r4
 8000c2e:	4629      	mov	r1, r5
 8000c30:	f018 fa3c 	bl	80190ac <__aeabi_ddiv>
 8000c34:	4602      	mov	r2, r0
 8000c36:	460b      	mov	r3, r1
 8000c38:	ec43 2b17 	vmov	d7, r2, r3
}
 8000c3c:	eeb0 0a47 	vmov.f32	s0, s14
 8000c40:	eef0 0a67 	vmov.f32	s1, s15
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bdb0      	pop	{r4, r5, r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	f3af 8000 	nop.w
 8000c50:	95aaf790 	.word	0x95aaf790
 8000c54:	4005bf09 	.word	0x4005bf09
 8000c58:	1eb851ec 	.word	0x1eb851ec
 8000c5c:	4031ab85 	.word	0x4031ab85
 8000c60:	00000000 	.word	0x00000000
 8000c64:	406e7000 	.word	0x406e7000
 8000c68:	cfaacd9f 	.word	0xcfaacd9f
 8000c6c:	400156d5 	.word	0x400156d5
 8000c70:	20c49ba6 	.word	0x20c49ba6
 8000c74:	401872b0 	.word	0x401872b0
 8000c78:	66666666 	.word	0x66666666
 8000c7c:	40711266 	.word	0x40711266

08000c80 <decToBcd>:

extern I2C_HandleTypeDef DS3231_I2C;

uint8_t rtcBuffer[19], rtcBufferSet[17];

uint8_t decToBcd(uint8_t val) {
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
    return ((val / 10 * 16) + (val % 10));
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	4a0c      	ldr	r2, [pc, #48]	; (8000cc0 <decToBcd+0x40>)
 8000c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c92:	08db      	lsrs	r3, r3, #3
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	011b      	lsls	r3, r3, #4
 8000c98:	b2d8      	uxtb	r0, r3
 8000c9a:	79fa      	ldrb	r2, [r7, #7]
 8000c9c:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <decToBcd+0x40>)
 8000c9e:	fba3 1302 	umull	r1, r3, r3, r2
 8000ca2:	08d9      	lsrs	r1, r3, #3
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	440b      	add	r3, r1
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	4403      	add	r3, r0
 8000cb2:	b2db      	uxtb	r3, r3
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	cccccccd 	.word	0xcccccccd

08000cc4 <bcdToDec>:

uint8_t bcdToDec(uint8_t val) {
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
    return ((val / 16 * 10) + (val % 16));
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	091b      	lsrs	r3, r3, #4
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	0092      	lsls	r2, r2, #2
 8000cd8:	4413      	add	r3, r2
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	f003 030f 	and.w	r3, r3, #15
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	4413      	add	r3, r2
 8000ce8:	b2db      	uxtb	r3, r3
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <DS3231_Update>:

void DS3231_Update(void) {
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b084      	sub	sp, #16
 8000cfa:	af02      	add	r7, sp, #8
    uint8_t cmd = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
 8000d00:	1dfa      	adds	r2, r7, #7
 8000d02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2301      	movs	r3, #1
 8000d0a:	21d0      	movs	r1, #208	; 0xd0
 8000d0c:	4827      	ldr	r0, [pc, #156]	; (8000dac <DS3231_Update+0xb6>)
 8000d0e:	f00a fbbe 	bl	800b48e <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&DS3231_I2C, DS3231_ADDRESS, rtcBuffer, 19, DS3231_I2C_TIMEOUT);
 8000d12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d16:	9300      	str	r3, [sp, #0]
 8000d18:	2313      	movs	r3, #19
 8000d1a:	4a25      	ldr	r2, [pc, #148]	; (8000db0 <DS3231_Update+0xba>)
 8000d1c:	21d0      	movs	r1, #208	; 0xd0
 8000d1e:	4823      	ldr	r0, [pc, #140]	; (8000dac <DS3231_Update+0xb6>)
 8000d20:	f00a fcb2 	bl	800b688 <HAL_I2C_Master_Receive>
    rtcBufferSet[1] = rtcBuffer[0];
 8000d24:	4b22      	ldr	r3, [pc, #136]	; (8000db0 <DS3231_Update+0xba>)
 8000d26:	781a      	ldrb	r2, [r3, #0]
 8000d28:	4b22      	ldr	r3, [pc, #136]	; (8000db4 <DS3231_Update+0xbe>)
 8000d2a:	705a      	strb	r2, [r3, #1]
    rtcBufferSet[2] = rtcBuffer[1];
 8000d2c:	4b20      	ldr	r3, [pc, #128]	; (8000db0 <DS3231_Update+0xba>)
 8000d2e:	785a      	ldrb	r2, [r3, #1]
 8000d30:	4b20      	ldr	r3, [pc, #128]	; (8000db4 <DS3231_Update+0xbe>)
 8000d32:	709a      	strb	r2, [r3, #2]
    rtcBufferSet[3] = rtcBuffer[2];
 8000d34:	4b1e      	ldr	r3, [pc, #120]	; (8000db0 <DS3231_Update+0xba>)
 8000d36:	789a      	ldrb	r2, [r3, #2]
 8000d38:	4b1e      	ldr	r3, [pc, #120]	; (8000db4 <DS3231_Update+0xbe>)
 8000d3a:	70da      	strb	r2, [r3, #3]
    rtcBufferSet[4] = rtcBuffer[3];
 8000d3c:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <DS3231_Update+0xba>)
 8000d3e:	78da      	ldrb	r2, [r3, #3]
 8000d40:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <DS3231_Update+0xbe>)
 8000d42:	711a      	strb	r2, [r3, #4]
    rtcBufferSet[5] = rtcBuffer[4];
 8000d44:	4b1a      	ldr	r3, [pc, #104]	; (8000db0 <DS3231_Update+0xba>)
 8000d46:	791a      	ldrb	r2, [r3, #4]
 8000d48:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <DS3231_Update+0xbe>)
 8000d4a:	715a      	strb	r2, [r3, #5]
    rtcBufferSet[6] = rtcBuffer[5];
 8000d4c:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <DS3231_Update+0xba>)
 8000d4e:	795a      	ldrb	r2, [r3, #5]
 8000d50:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <DS3231_Update+0xbe>)
 8000d52:	719a      	strb	r2, [r3, #6]
    rtcBufferSet[7] = rtcBuffer[6];
 8000d54:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <DS3231_Update+0xba>)
 8000d56:	799a      	ldrb	r2, [r3, #6]
 8000d58:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <DS3231_Update+0xbe>)
 8000d5a:	71da      	strb	r2, [r3, #7]
    rtcBufferSet[8] = rtcBuffer[7];
 8000d5c:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <DS3231_Update+0xba>)
 8000d5e:	79da      	ldrb	r2, [r3, #7]
 8000d60:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <DS3231_Update+0xbe>)
 8000d62:	721a      	strb	r2, [r3, #8]
    rtcBufferSet[9] = rtcBuffer[8];
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <DS3231_Update+0xba>)
 8000d66:	7a1a      	ldrb	r2, [r3, #8]
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <DS3231_Update+0xbe>)
 8000d6a:	725a      	strb	r2, [r3, #9]
    rtcBufferSet[10] = rtcBuffer[9];
 8000d6c:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <DS3231_Update+0xba>)
 8000d6e:	7a5a      	ldrb	r2, [r3, #9]
 8000d70:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <DS3231_Update+0xbe>)
 8000d72:	729a      	strb	r2, [r3, #10]
    rtcBufferSet[11] = rtcBuffer[10];
 8000d74:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <DS3231_Update+0xba>)
 8000d76:	7a9a      	ldrb	r2, [r3, #10]
 8000d78:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <DS3231_Update+0xbe>)
 8000d7a:	72da      	strb	r2, [r3, #11]
    rtcBufferSet[12] = rtcBuffer[11];
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <DS3231_Update+0xba>)
 8000d7e:	7ada      	ldrb	r2, [r3, #11]
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <DS3231_Update+0xbe>)
 8000d82:	731a      	strb	r2, [r3, #12]
    rtcBufferSet[13] = rtcBuffer[12];
 8000d84:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <DS3231_Update+0xba>)
 8000d86:	7b1a      	ldrb	r2, [r3, #12]
 8000d88:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <DS3231_Update+0xbe>)
 8000d8a:	735a      	strb	r2, [r3, #13]
    rtcBufferSet[14] = rtcBuffer[13];
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <DS3231_Update+0xba>)
 8000d8e:	7b5a      	ldrb	r2, [r3, #13]
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <DS3231_Update+0xbe>)
 8000d92:	739a      	strb	r2, [r3, #14]
    rtcBufferSet[15] = rtcBuffer[14];
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <DS3231_Update+0xba>)
 8000d96:	7b9a      	ldrb	r2, [r3, #14]
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <DS3231_Update+0xbe>)
 8000d9a:	73da      	strb	r2, [r3, #15]
    rtcBufferSet[16] = rtcBuffer[15];
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <DS3231_Update+0xba>)
 8000d9e:	7bda      	ldrb	r2, [r3, #15]
 8000da0:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <DS3231_Update+0xbe>)
 8000da2:	741a      	strb	r2, [r3, #16]
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	200002bc 	.word	0x200002bc
 8000db0:	20000280 	.word	0x20000280
 8000db4:	20000294 	.word	0x20000294

08000db8 <DS3231_getSec>:

uint8_t DS3231_getSec(void) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000dbc:	f7ff ff9b 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[0]);
 8000dc0:	4b03      	ldr	r3, [pc, #12]	; (8000dd0 <DS3231_getSec+0x18>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff7d 	bl	8000cc4 <bcdToDec>
 8000dca:	4603      	mov	r3, r0
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000280 	.word	0x20000280

08000dd4 <DS3231_getMin>:

uint8_t DS3231_getMin(void) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000dd8:	f7ff ff8d 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[1]);
 8000ddc:	4b03      	ldr	r3, [pc, #12]	; (8000dec <DS3231_getMin+0x18>)
 8000dde:	785b      	ldrb	r3, [r3, #1]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff6f 	bl	8000cc4 <bcdToDec>
 8000de6:	4603      	mov	r3, r0
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000280 	.word	0x20000280

08000df0 <DS3231_getHrs>:

uint8_t DS3231_getHrs(void) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000df4:	f7ff ff7f 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[2]);
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <DS3231_getHrs+0x18>)
 8000dfa:	789b      	ldrb	r3, [r3, #2]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ff61 	bl	8000cc4 <bcdToDec>
 8000e02:	4603      	mov	r3, r0
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20000280 	.word	0x20000280

08000e0c <DS3231_getDay>:

uint8_t DS3231_getDay(void) {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e10:	f7ff ff71 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[3]);
 8000e14:	4b03      	ldr	r3, [pc, #12]	; (8000e24 <DS3231_getDay+0x18>)
 8000e16:	78db      	ldrb	r3, [r3, #3]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff ff53 	bl	8000cc4 <bcdToDec>
 8000e1e:	4603      	mov	r3, r0
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000280 	.word	0x20000280

08000e28 <DS3231_getDate>:

uint8_t DS3231_getDate(void) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e2c:	f7ff ff63 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[4]);
 8000e30:	4b03      	ldr	r3, [pc, #12]	; (8000e40 <DS3231_getDate+0x18>)
 8000e32:	791b      	ldrb	r3, [r3, #4]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff45 	bl	8000cc4 <bcdToDec>
 8000e3a:	4603      	mov	r3, r0
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000280 	.word	0x20000280

08000e44 <DS3231_getMonth>:

uint8_t DS3231_getMonth(void) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e48:	f7ff ff55 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[5]);
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <DS3231_getMonth+0x18>)
 8000e4e:	795b      	ldrb	r3, [r3, #5]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff37 	bl	8000cc4 <bcdToDec>
 8000e56:	4603      	mov	r3, r0
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000280 	.word	0x20000280

08000e60 <DS3231_getYear>:

uint8_t DS3231_getYear(void) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e64:	f7ff ff47 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[6]);
 8000e68:	4b03      	ldr	r3, [pc, #12]	; (8000e78 <DS3231_getYear+0x18>)
 8000e6a:	799b      	ldrb	r3, [r3, #6]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ff29 	bl	8000cc4 <bcdToDec>
 8000e72:	4603      	mov	r3, r0
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000280 	.word	0x20000280

08000e7c <DS3231_getAlarm1Sec>:

uint8_t DS3231_getAlarm1Sec(void) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e80:	f7ff ff39 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[7]);
 8000e84:	4b03      	ldr	r3, [pc, #12]	; (8000e94 <DS3231_getAlarm1Sec+0x18>)
 8000e86:	79db      	ldrb	r3, [r3, #7]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff ff1b 	bl	8000cc4 <bcdToDec>
 8000e8e:	4603      	mov	r3, r0
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000280 	.word	0x20000280

08000e98 <DS3231_getAlarm1Min>:

uint8_t DS3231_getAlarm1Min(void) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e9c:	f7ff ff2b 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[8]);
 8000ea0:	4b03      	ldr	r3, [pc, #12]	; (8000eb0 <DS3231_getAlarm1Min+0x18>)
 8000ea2:	7a1b      	ldrb	r3, [r3, #8]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff0d 	bl	8000cc4 <bcdToDec>
 8000eaa:	4603      	mov	r3, r0
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000280 	.word	0x20000280

08000eb4 <DS3231_getAlarm1Hour>:

uint8_t DS3231_getAlarm1Hour(void) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000eb8:	f7ff ff1d 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[9]);
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <DS3231_getAlarm1Hour+0x18>)
 8000ebe:	7a5b      	ldrb	r3, [r3, #9]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff feff 	bl	8000cc4 <bcdToDec>
 8000ec6:	4603      	mov	r3, r0
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000280 	.word	0x20000280

08000ed0 <DS3231_getAlarm1Day>:

uint8_t DS3231_getAlarm1Day(void) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000ed4:	f7ff ff0f 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[10]);
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <DS3231_getAlarm1Day+0x18>)
 8000eda:	7a9b      	ldrb	r3, [r3, #10]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff fef1 	bl	8000cc4 <bcdToDec>
 8000ee2:	4603      	mov	r3, r0
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000280 	.word	0x20000280

08000eec <DS3231_getAlarm1Date>:

uint8_t DS3231_getAlarm1Date(void) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000ef0:	f7ff ff01 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[11]);
 8000ef4:	4b03      	ldr	r3, [pc, #12]	; (8000f04 <DS3231_getAlarm1Date+0x18>)
 8000ef6:	7adb      	ldrb	r3, [r3, #11]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fee3 	bl	8000cc4 <bcdToDec>
 8000efe:	4603      	mov	r3, r0
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000280 	.word	0x20000280

08000f08 <DS3231_getAlarm2Min>:

uint8_t DS3231_getAlarm2Min(void) {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000f0c:	f7ff fef3 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[12]);
 8000f10:	4b03      	ldr	r3, [pc, #12]	; (8000f20 <DS3231_getAlarm2Min+0x18>)
 8000f12:	7b1b      	ldrb	r3, [r3, #12]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff fed5 	bl	8000cc4 <bcdToDec>
 8000f1a:	4603      	mov	r3, r0
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000280 	.word	0x20000280

08000f24 <DS3231_getAlarm2Hour>:

uint8_t DS3231_getAlarm2Hour(void) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000f28:	f7ff fee5 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[13]);
 8000f2c:	4b03      	ldr	r3, [pc, #12]	; (8000f3c <DS3231_getAlarm2Hour+0x18>)
 8000f2e:	7b5b      	ldrb	r3, [r3, #13]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fec7 	bl	8000cc4 <bcdToDec>
 8000f36:	4603      	mov	r3, r0
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000280 	.word	0x20000280

08000f40 <DS3231_getAlarm2Day>:

uint8_t DS3231_getAlarm2Day(void) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000f44:	f7ff fed7 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[14]);
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <DS3231_getAlarm2Day+0x18>)
 8000f4a:	7b9b      	ldrb	r3, [r3, #14]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff feb9 	bl	8000cc4 <bcdToDec>
 8000f52:	4603      	mov	r3, r0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000280 	.word	0x20000280

08000f5c <DS3231_getAlarm2Date>:

uint8_t DS3231_getAlarm2Date(void) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000f60:	f7ff fec9 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[15]);
 8000f64:	4b03      	ldr	r3, [pc, #12]	; (8000f74 <DS3231_getAlarm2Date+0x18>)
 8000f66:	7bdb      	ldrb	r3, [r3, #15]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff feab 	bl	8000cc4 <bcdToDec>
 8000f6e:	4603      	mov	r3, r0
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000280 	.word	0x20000280

08000f78 <DS3231_getTemp>:

double DS3231_getTemp(void) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000f7e:	f7ff feba 	bl	8000cf6 <DS3231_Update>
    uint8_t tempMSB = rtcBuffer[17];
 8000f82:	4b1f      	ldr	r3, [pc, #124]	; (8001000 <DS3231_getTemp+0x88>)
 8000f84:	7c5b      	ldrb	r3, [r3, #17]
 8000f86:	73fb      	strb	r3, [r7, #15]
    uint8_t tempLSB = rtcBuffer[18];
 8000f88:	4b1d      	ldr	r3, [pc, #116]	; (8001000 <DS3231_getTemp+0x88>)
 8000f8a:	7c9b      	ldrb	r3, [r3, #18]
 8000f8c:	73bb      	strb	r3, [r7, #14]
    double t = 0.0;
 8000f8e:	f04f 0200 	mov.w	r2, #0
 8000f92:	f04f 0300 	mov.w	r3, #0
 8000f96:	e9c7 2300 	strd	r2, r3, [r7]
    tempLSB >>= 6;
 8000f9a:	7bbb      	ldrb	r3, [r7, #14]
 8000f9c:	099b      	lsrs	r3, r3, #6
 8000f9e:	73bb      	strb	r3, [r7, #14]
    tempLSB &= 0x03;
 8000fa0:	7bbb      	ldrb	r3, [r7, #14]
 8000fa2:	f003 0303 	and.w	r3, r3, #3
 8000fa6:	73bb      	strb	r3, [r7, #14]
    t = ((double) tempLSB);
 8000fa8:	7bbb      	ldrb	r3, [r7, #14]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f017 feda 	bl	8018d64 <__aeabi_ui2d>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	e9c7 2300 	strd	r2, r3, [r7]
    t *= 0.25;
 8000fb8:	f04f 0200 	mov.w	r2, #0
 8000fbc:	4b11      	ldr	r3, [pc, #68]	; (8001004 <DS3231_getTemp+0x8c>)
 8000fbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fc2:	f017 ff49 	bl	8018e58 <__aeabi_dmul>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	e9c7 2300 	strd	r2, r3, [r7]
    t += tempMSB;
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f017 fed7 	bl	8018d84 <__aeabi_i2d>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fde:	f017 fd85 	bl	8018aec <__adddf3>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	e9c7 2300 	strd	r2, r3, [r7]
    return t;
 8000fea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fee:	ec43 2b17 	vmov	d7, r2, r3
}
 8000ff2:	eeb0 0a47 	vmov.f32	s0, s14
 8000ff6:	eef0 0a67 	vmov.f32	s1, s15
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000280 	.word	0x20000280
 8001004:	3fd00000 	.word	0x3fd00000

08001008 <DS3231_setSec>:

void DS3231_setSec(uint8_t value) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af02      	add	r7, sp, #8
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001012:	f7ff fe70 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[1] = decToBcd(value);
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fe31 	bl	8000c80 <decToBcd>
 800101e:	4603      	mov	r3, r0
 8001020:	461a      	mov	r2, r3
 8001022:	4b07      	ldr	r3, [pc, #28]	; (8001040 <DS3231_setSec+0x38>)
 8001024:	705a      	strb	r2, [r3, #1]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2311      	movs	r3, #17
 800102e:	4a04      	ldr	r2, [pc, #16]	; (8001040 <DS3231_setSec+0x38>)
 8001030:	21d0      	movs	r1, #208	; 0xd0
 8001032:	4804      	ldr	r0, [pc, #16]	; (8001044 <DS3231_setSec+0x3c>)
 8001034:	f00a fa2b 	bl	800b48e <HAL_I2C_Master_Transmit>
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000294 	.word	0x20000294
 8001044:	200002bc 	.word	0x200002bc

08001048 <DS3231_setMin>:

void DS3231_setMin(uint8_t value) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af02      	add	r7, sp, #8
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001052:	f7ff fe50 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[2] = decToBcd(value);
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fe11 	bl	8000c80 <decToBcd>
 800105e:	4603      	mov	r3, r0
 8001060:	461a      	mov	r2, r3
 8001062:	4b07      	ldr	r3, [pc, #28]	; (8001080 <DS3231_setMin+0x38>)
 8001064:	709a      	strb	r2, [r3, #2]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001066:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2311      	movs	r3, #17
 800106e:	4a04      	ldr	r2, [pc, #16]	; (8001080 <DS3231_setMin+0x38>)
 8001070:	21d0      	movs	r1, #208	; 0xd0
 8001072:	4804      	ldr	r0, [pc, #16]	; (8001084 <DS3231_setMin+0x3c>)
 8001074:	f00a fa0b 	bl	800b48e <HAL_I2C_Master_Transmit>
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000294 	.word	0x20000294
 8001084:	200002bc 	.word	0x200002bc

08001088 <DS3231_setHrs>:

void DS3231_setHrs(uint8_t value) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af02      	add	r7, sp, #8
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001092:	f7ff fe30 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[3] = decToBcd(value);
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fdf1 	bl	8000c80 <decToBcd>
 800109e:	4603      	mov	r3, r0
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <DS3231_setHrs+0x38>)
 80010a4:	70da      	strb	r2, [r3, #3]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80010a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	2311      	movs	r3, #17
 80010ae:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <DS3231_setHrs+0x38>)
 80010b0:	21d0      	movs	r1, #208	; 0xd0
 80010b2:	4804      	ldr	r0, [pc, #16]	; (80010c4 <DS3231_setHrs+0x3c>)
 80010b4:	f00a f9eb 	bl	800b48e <HAL_I2C_Master_Transmit>
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000294 	.word	0x20000294
 80010c4:	200002bc 	.word	0x200002bc

080010c8 <DS3231_setDay>:

void DS3231_setDay(uint8_t value) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af02      	add	r7, sp, #8
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 80010d2:	f7ff fe10 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[4] = decToBcd(value);
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fdd1 	bl	8000c80 <decToBcd>
 80010de:	4603      	mov	r3, r0
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b07      	ldr	r3, [pc, #28]	; (8001100 <DS3231_setDay+0x38>)
 80010e4:	711a      	strb	r2, [r3, #4]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80010e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	2311      	movs	r3, #17
 80010ee:	4a04      	ldr	r2, [pc, #16]	; (8001100 <DS3231_setDay+0x38>)
 80010f0:	21d0      	movs	r1, #208	; 0xd0
 80010f2:	4804      	ldr	r0, [pc, #16]	; (8001104 <DS3231_setDay+0x3c>)
 80010f4:	f00a f9cb 	bl	800b48e <HAL_I2C_Master_Transmit>
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000294 	.word	0x20000294
 8001104:	200002bc 	.word	0x200002bc

08001108 <DS3231_setDate>:

void DS3231_setDate(uint8_t value) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af02      	add	r7, sp, #8
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001112:	f7ff fdf0 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[5] = decToBcd(value);
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fdb1 	bl	8000c80 <decToBcd>
 800111e:	4603      	mov	r3, r0
 8001120:	461a      	mov	r2, r3
 8001122:	4b07      	ldr	r3, [pc, #28]	; (8001140 <DS3231_setDate+0x38>)
 8001124:	715a      	strb	r2, [r3, #5]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	2311      	movs	r3, #17
 800112e:	4a04      	ldr	r2, [pc, #16]	; (8001140 <DS3231_setDate+0x38>)
 8001130:	21d0      	movs	r1, #208	; 0xd0
 8001132:	4804      	ldr	r0, [pc, #16]	; (8001144 <DS3231_setDate+0x3c>)
 8001134:	f00a f9ab 	bl	800b48e <HAL_I2C_Master_Transmit>
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000294 	.word	0x20000294
 8001144:	200002bc 	.word	0x200002bc

08001148 <DS3231_setMonth>:

void DS3231_setMonth(uint8_t value) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af02      	add	r7, sp, #8
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001152:	f7ff fdd0 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[6] = decToBcd(value);
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff fd91 	bl	8000c80 <decToBcd>
 800115e:	4603      	mov	r3, r0
 8001160:	461a      	mov	r2, r3
 8001162:	4b07      	ldr	r3, [pc, #28]	; (8001180 <DS3231_setMonth+0x38>)
 8001164:	719a      	strb	r2, [r3, #6]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001166:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	2311      	movs	r3, #17
 800116e:	4a04      	ldr	r2, [pc, #16]	; (8001180 <DS3231_setMonth+0x38>)
 8001170:	21d0      	movs	r1, #208	; 0xd0
 8001172:	4804      	ldr	r0, [pc, #16]	; (8001184 <DS3231_setMonth+0x3c>)
 8001174:	f00a f98b 	bl	800b48e <HAL_I2C_Master_Transmit>
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000294 	.word	0x20000294
 8001184:	200002bc 	.word	0x200002bc

08001188 <DS3231_setYear>:

void DS3231_setYear(uint8_t value) {
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af02      	add	r7, sp, #8
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001192:	f7ff fdb0 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[7] = decToBcd(value);
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff fd71 	bl	8000c80 <decToBcd>
 800119e:	4603      	mov	r3, r0
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <DS3231_setYear+0x38>)
 80011a4:	71da      	strb	r2, [r3, #7]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80011a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	2311      	movs	r3, #17
 80011ae:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <DS3231_setYear+0x38>)
 80011b0:	21d0      	movs	r1, #208	; 0xd0
 80011b2:	4804      	ldr	r0, [pc, #16]	; (80011c4 <DS3231_setYear+0x3c>)
 80011b4:	f00a f96b 	bl	800b48e <HAL_I2C_Master_Transmit>
}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000294 	.word	0x20000294
 80011c4:	200002bc 	.word	0x200002bc

080011c8 <DS3231_setAlarm1Sec>:

void DS3231_setAlarm1Sec(uint8_t value) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af02      	add	r7, sp, #8
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 80011d2:	f7ff fd90 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[8] = decToBcd(value);
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fd51 	bl	8000c80 <decToBcd>
 80011de:	4603      	mov	r3, r0
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b07      	ldr	r3, [pc, #28]	; (8001200 <DS3231_setAlarm1Sec+0x38>)
 80011e4:	721a      	strb	r2, [r3, #8]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80011e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	2311      	movs	r3, #17
 80011ee:	4a04      	ldr	r2, [pc, #16]	; (8001200 <DS3231_setAlarm1Sec+0x38>)
 80011f0:	21d0      	movs	r1, #208	; 0xd0
 80011f2:	4804      	ldr	r0, [pc, #16]	; (8001204 <DS3231_setAlarm1Sec+0x3c>)
 80011f4:	f00a f94b 	bl	800b48e <HAL_I2C_Master_Transmit>
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000294 	.word	0x20000294
 8001204:	200002bc 	.word	0x200002bc

08001208 <DS3231_setAlarm1Min>:

void DS3231_setAlarm1Min(uint8_t value) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af02      	add	r7, sp, #8
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001212:	f7ff fd70 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[9] = decToBcd(value);
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fd31 	bl	8000c80 <decToBcd>
 800121e:	4603      	mov	r3, r0
 8001220:	461a      	mov	r2, r3
 8001222:	4b07      	ldr	r3, [pc, #28]	; (8001240 <DS3231_setAlarm1Min+0x38>)
 8001224:	725a      	strb	r2, [r3, #9]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122a:	9300      	str	r3, [sp, #0]
 800122c:	2311      	movs	r3, #17
 800122e:	4a04      	ldr	r2, [pc, #16]	; (8001240 <DS3231_setAlarm1Min+0x38>)
 8001230:	21d0      	movs	r1, #208	; 0xd0
 8001232:	4804      	ldr	r0, [pc, #16]	; (8001244 <DS3231_setAlarm1Min+0x3c>)
 8001234:	f00a f92b 	bl	800b48e <HAL_I2C_Master_Transmit>
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000294 	.word	0x20000294
 8001244:	200002bc 	.word	0x200002bc

08001248 <DS3231_setAlarm1Hour>:

void DS3231_setAlarm1Hour(uint8_t value) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af02      	add	r7, sp, #8
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001252:	f7ff fd50 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[10] = decToBcd(value);
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fd11 	bl	8000c80 <decToBcd>
 800125e:	4603      	mov	r3, r0
 8001260:	461a      	mov	r2, r3
 8001262:	4b07      	ldr	r3, [pc, #28]	; (8001280 <DS3231_setAlarm1Hour+0x38>)
 8001264:	729a      	strb	r2, [r3, #10]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2311      	movs	r3, #17
 800126e:	4a04      	ldr	r2, [pc, #16]	; (8001280 <DS3231_setAlarm1Hour+0x38>)
 8001270:	21d0      	movs	r1, #208	; 0xd0
 8001272:	4804      	ldr	r0, [pc, #16]	; (8001284 <DS3231_setAlarm1Hour+0x3c>)
 8001274:	f00a f90b 	bl	800b48e <HAL_I2C_Master_Transmit>
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000294 	.word	0x20000294
 8001284:	200002bc 	.word	0x200002bc

08001288 <DS3231_setAlarm1Day>:

void DS3231_setAlarm1Day(uint8_t value) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af02      	add	r7, sp, #8
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001292:	f7ff fd30 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[11] = decToBcd(value);
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fcf1 	bl	8000c80 <decToBcd>
 800129e:	4603      	mov	r3, r0
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <DS3231_setAlarm1Day+0x38>)
 80012a4:	72da      	strb	r2, [r3, #11]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80012a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	2311      	movs	r3, #17
 80012ae:	4a04      	ldr	r2, [pc, #16]	; (80012c0 <DS3231_setAlarm1Day+0x38>)
 80012b0:	21d0      	movs	r1, #208	; 0xd0
 80012b2:	4804      	ldr	r0, [pc, #16]	; (80012c4 <DS3231_setAlarm1Day+0x3c>)
 80012b4:	f00a f8eb 	bl	800b48e <HAL_I2C_Master_Transmit>
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000294 	.word	0x20000294
 80012c4:	200002bc 	.word	0x200002bc

080012c8 <DS3231_setAlarm1Date>:

void DS3231_setAlarm1Date(uint8_t value) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af02      	add	r7, sp, #8
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 80012d2:	f7ff fd10 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[12] = decToBcd(value);
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fcd1 	bl	8000c80 <decToBcd>
 80012de:	4603      	mov	r3, r0
 80012e0:	461a      	mov	r2, r3
 80012e2:	4b07      	ldr	r3, [pc, #28]	; (8001300 <DS3231_setAlarm1Date+0x38>)
 80012e4:	731a      	strb	r2, [r3, #12]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80012e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	2311      	movs	r3, #17
 80012ee:	4a04      	ldr	r2, [pc, #16]	; (8001300 <DS3231_setAlarm1Date+0x38>)
 80012f0:	21d0      	movs	r1, #208	; 0xd0
 80012f2:	4804      	ldr	r0, [pc, #16]	; (8001304 <DS3231_setAlarm1Date+0x3c>)
 80012f4:	f00a f8cb 	bl	800b48e <HAL_I2C_Master_Transmit>
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000294 	.word	0x20000294
 8001304:	200002bc 	.word	0x200002bc

08001308 <DS3231_setAlarm2Min>:

void DS3231_setAlarm2Min(uint8_t value) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af02      	add	r7, sp, #8
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001312:	f7ff fcf0 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[13] = decToBcd(value);
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fcb1 	bl	8000c80 <decToBcd>
 800131e:	4603      	mov	r3, r0
 8001320:	461a      	mov	r2, r3
 8001322:	4b07      	ldr	r3, [pc, #28]	; (8001340 <DS3231_setAlarm2Min+0x38>)
 8001324:	735a      	strb	r2, [r3, #13]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	2311      	movs	r3, #17
 800132e:	4a04      	ldr	r2, [pc, #16]	; (8001340 <DS3231_setAlarm2Min+0x38>)
 8001330:	21d0      	movs	r1, #208	; 0xd0
 8001332:	4804      	ldr	r0, [pc, #16]	; (8001344 <DS3231_setAlarm2Min+0x3c>)
 8001334:	f00a f8ab 	bl	800b48e <HAL_I2C_Master_Transmit>
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000294 	.word	0x20000294
 8001344:	200002bc 	.word	0x200002bc

08001348 <DS3231_setAlarm2Hour>:

void DS3231_setAlarm2Hour(uint8_t value) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af02      	add	r7, sp, #8
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001352:	f7ff fcd0 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[14] = decToBcd(value);
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fc91 	bl	8000c80 <decToBcd>
 800135e:	4603      	mov	r3, r0
 8001360:	461a      	mov	r2, r3
 8001362:	4b07      	ldr	r3, [pc, #28]	; (8001380 <DS3231_setAlarm2Hour+0x38>)
 8001364:	739a      	strb	r2, [r3, #14]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001366:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	2311      	movs	r3, #17
 800136e:	4a04      	ldr	r2, [pc, #16]	; (8001380 <DS3231_setAlarm2Hour+0x38>)
 8001370:	21d0      	movs	r1, #208	; 0xd0
 8001372:	4804      	ldr	r0, [pc, #16]	; (8001384 <DS3231_setAlarm2Hour+0x3c>)
 8001374:	f00a f88b 	bl	800b48e <HAL_I2C_Master_Transmit>
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000294 	.word	0x20000294
 8001384:	200002bc 	.word	0x200002bc

08001388 <DS3231_setAlarm2Day>:

void DS3231_setAlarm2Day(uint8_t value) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af02      	add	r7, sp, #8
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001392:	f7ff fcb0 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[15] = decToBcd(value);
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff fc71 	bl	8000c80 <decToBcd>
 800139e:	4603      	mov	r3, r0
 80013a0:	461a      	mov	r2, r3
 80013a2:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <DS3231_setAlarm2Day+0x38>)
 80013a4:	73da      	strb	r2, [r3, #15]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80013a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	2311      	movs	r3, #17
 80013ae:	4a04      	ldr	r2, [pc, #16]	; (80013c0 <DS3231_setAlarm2Day+0x38>)
 80013b0:	21d0      	movs	r1, #208	; 0xd0
 80013b2:	4804      	ldr	r0, [pc, #16]	; (80013c4 <DS3231_setAlarm2Day+0x3c>)
 80013b4:	f00a f86b 	bl	800b48e <HAL_I2C_Master_Transmit>
}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000294 	.word	0x20000294
 80013c4:	200002bc 	.word	0x200002bc

080013c8 <DS3231_setAlarm2Date>:

void DS3231_setAlarm2Date(uint8_t value) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af02      	add	r7, sp, #8
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 80013d2:	f7ff fc90 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[16] = decToBcd(value);
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff fc51 	bl	8000c80 <decToBcd>
 80013de:	4603      	mov	r3, r0
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b07      	ldr	r3, [pc, #28]	; (8001400 <DS3231_setAlarm2Date+0x38>)
 80013e4:	741a      	strb	r2, [r3, #16]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80013e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	2311      	movs	r3, #17
 80013ee:	4a04      	ldr	r2, [pc, #16]	; (8001400 <DS3231_setAlarm2Date+0x38>)
 80013f0:	21d0      	movs	r1, #208	; 0xd0
 80013f2:	4804      	ldr	r0, [pc, #16]	; (8001404 <DS3231_setAlarm2Date+0x3c>)
 80013f4:	f00a f84b 	bl	800b48e <HAL_I2C_Master_Transmit>
}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000294 	.word	0x20000294
 8001404:	200002bc 	.word	0x200002bc

08001408 <DS3231_getUnix>:

uint64_t DS3231_getUnix(uint64_t zoneCorrection) {
 8001408:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800140c:	b088      	sub	sp, #32
 800140e:	af00      	add	r7, sp, #0
 8001410:	e9c7 0100 	strd	r0, r1, [r7]
    uint8_t timeYear = DS3231_getYear();
 8001414:	f7ff fd24 	bl	8000e60 <DS3231_getYear>
 8001418:	4603      	mov	r3, r0
 800141a:	773b      	strb	r3, [r7, #28]
    uint8_t timeMonth = DS3231_getMonth();
 800141c:	f7ff fd12 	bl	8000e44 <DS3231_getMonth>
 8001420:	4603      	mov	r3, r0
 8001422:	76fb      	strb	r3, [r7, #27]
    uint8_t timeDate = DS3231_getDate();
 8001424:	f7ff fd00 	bl	8000e28 <DS3231_getDate>
 8001428:	4603      	mov	r3, r0
 800142a:	76bb      	strb	r3, [r7, #26]
    uint8_t timeHour = DS3231_getHrs();
 800142c:	f7ff fce0 	bl	8000df0 <DS3231_getHrs>
 8001430:	4603      	mov	r3, r0
 8001432:	767b      	strb	r3, [r7, #25]
    uint8_t timeMin = DS3231_getMin();
 8001434:	f7ff fcce 	bl	8000dd4 <DS3231_getMin>
 8001438:	4603      	mov	r3, r0
 800143a:	763b      	strb	r3, [r7, #24]
    uint8_t timeSec = DS3231_getSec();
 800143c:	f7ff fcbc 	bl	8000db8 <DS3231_getSec>
 8001440:	4603      	mov	r3, r0
 8001442:	75fb      	strb	r3, [r7, #23]

    const uint8_t dim[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
 8001444:	4a35      	ldr	r2, [pc, #212]	; (800151c <DS3231_getUnix+0x114>)
 8001446:	f107 0308 	add.w	r3, r7, #8
 800144a:	ca07      	ldmia	r2, {r0, r1, r2}
 800144c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    uint16_t dc;
    dc = timeDate;
 8001450:	7ebb      	ldrb	r3, [r7, #26]
 8001452:	83fb      	strh	r3, [r7, #30]
    for (uint8_t i = 0; i < (timeMonth - 1); i++)
 8001454:	2300      	movs	r3, #0
 8001456:	777b      	strb	r3, [r7, #29]
 8001458:	e00b      	b.n	8001472 <DS3231_getUnix+0x6a>
        dc += dim[i];
 800145a:	7f7b      	ldrb	r3, [r7, #29]
 800145c:	3320      	adds	r3, #32
 800145e:	443b      	add	r3, r7
 8001460:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001464:	b29a      	uxth	r2, r3
 8001466:	8bfb      	ldrh	r3, [r7, #30]
 8001468:	4413      	add	r3, r2
 800146a:	83fb      	strh	r3, [r7, #30]
    for (uint8_t i = 0; i < (timeMonth - 1); i++)
 800146c:	7f7b      	ldrb	r3, [r7, #29]
 800146e:	3301      	adds	r3, #1
 8001470:	777b      	strb	r3, [r7, #29]
 8001472:	7f7a      	ldrb	r2, [r7, #29]
 8001474:	7efb      	ldrb	r3, [r7, #27]
 8001476:	3b01      	subs	r3, #1
 8001478:	429a      	cmp	r2, r3
 800147a:	dbee      	blt.n	800145a <DS3231_getUnix+0x52>
    if ((timeMonth > 2) && (((timeYear) % 4) == 0))
 800147c:	7efb      	ldrb	r3, [r7, #27]
 800147e:	2b02      	cmp	r3, #2
 8001480:	d908      	bls.n	8001494 <DS3231_getUnix+0x8c>
 8001482:	7f3b      	ldrb	r3, [r7, #28]
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d102      	bne.n	8001494 <DS3231_getUnix+0x8c>
        ++dc;
 800148e:	8bfb      	ldrh	r3, [r7, #30]
 8001490:	3301      	adds	r3, #1
 8001492:	83fb      	strh	r3, [r7, #30]
    dc = dc + (365 * (timeYear)) + (((timeYear) + 3) / 4) - 1;
 8001494:	7f3b      	ldrb	r3, [r7, #28]
 8001496:	b29b      	uxth	r3, r3
 8001498:	461a      	mov	r2, r3
 800149a:	00d2      	lsls	r2, r2, #3
 800149c:	441a      	add	r2, r3
 800149e:	00d2      	lsls	r2, r2, #3
 80014a0:	4413      	add	r3, r2
 80014a2:	461a      	mov	r2, r3
 80014a4:	0091      	lsls	r1, r2, #2
 80014a6:	461a      	mov	r2, r3
 80014a8:	460b      	mov	r3, r1
 80014aa:	4413      	add	r3, r2
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	8bfb      	ldrh	r3, [r7, #30]
 80014b0:	4413      	add	r3, r2
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	7f3b      	ldrb	r3, [r7, #28]
 80014b6:	3303      	adds	r3, #3
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	da00      	bge.n	80014be <DS3231_getUnix+0xb6>
 80014bc:	3303      	adds	r3, #3
 80014be:	109b      	asrs	r3, r3, #2
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	4413      	add	r3, r2
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	3b01      	subs	r3, #1
 80014c8:	83fb      	strh	r3, [r7, #30]
    return ((((((dc * 24L) + timeHour) * 60) + timeMin) * 60) + timeSec) + 946684800 + zoneCorrection;
 80014ca:	8bfa      	ldrh	r2, [r7, #30]
 80014cc:	4613      	mov	r3, r2
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	4413      	add	r3, r2
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	461a      	mov	r2, r3
 80014d6:	7e7b      	ldrb	r3, [r7, #25]
 80014d8:	441a      	add	r2, r3
 80014da:	4613      	mov	r3, r2
 80014dc:	011b      	lsls	r3, r3, #4
 80014de:	1a9b      	subs	r3, r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	461a      	mov	r2, r3
 80014e4:	7e3b      	ldrb	r3, [r7, #24]
 80014e6:	441a      	add	r2, r3
 80014e8:	4613      	mov	r3, r2
 80014ea:	011b      	lsls	r3, r3, #4
 80014ec:	1a9b      	subs	r3, r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	461a      	mov	r2, r3
 80014f2:	7dfb      	ldrb	r3, [r7, #23]
 80014f4:	441a      	add	r2, r3
 80014f6:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <DS3231_getUnix+0x118>)
 80014f8:	4413      	add	r3, r2
 80014fa:	17da      	asrs	r2, r3, #31
 80014fc:	461c      	mov	r4, r3
 80014fe:	4615      	mov	r5, r2
 8001500:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001504:	eb14 0802 	adds.w	r8, r4, r2
 8001508:	eb45 0903 	adc.w	r9, r5, r3
 800150c:	4642      	mov	r2, r8
 800150e:	464b      	mov	r3, r9
}
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	3720      	adds	r7, #32
 8001516:	46bd      	mov	sp, r7
 8001518:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800151c:	08051f7c 	.word	0x08051f7c
 8001520:	386d4380 	.word	0x386d4380

08001524 <normalize>:

double normalize(double v) {
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	ed87 0b00 	vstr	d0, [r7]
    v = v - floor(v);
 800152e:	ed97 0b00 	vldr	d0, [r7]
 8001532:	f01c fe7d 	bl	801e230 <floor>
 8001536:	ec53 2b10 	vmov	r2, r3, d0
 800153a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800153e:	f017 fad3 	bl	8018ae8 <__aeabi_dsub>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	e9c7 2300 	strd	r2, r3, [r7]
    if (v < 0)
 800154a:	f04f 0200 	mov.w	r2, #0
 800154e:	f04f 0300 	mov.w	r3, #0
 8001552:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001556:	f017 fef1 	bl	801933c <__aeabi_dcmplt>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d00a      	beq.n	8001576 <normalize+0x52>
        v = v + 1;
 8001560:	f04f 0200 	mov.w	r2, #0
 8001564:	4b09      	ldr	r3, [pc, #36]	; (800158c <normalize+0x68>)
 8001566:	e9d7 0100 	ldrd	r0, r1, [r7]
 800156a:	f017 fabf 	bl	8018aec <__adddf3>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	e9c7 2300 	strd	r2, r3, [r7]
    return v;
 8001576:	e9d7 2300 	ldrd	r2, r3, [r7]
 800157a:	ec43 2b17 	vmov	d7, r2, r3
}
 800157e:	eeb0 0a47 	vmov.f32	s0, s14
 8001582:	eef0 0a67 	vmov.f32	s1, s15
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	3ff00000 	.word	0x3ff00000

08001590 <DS3231_getMoonDay>:

float DS3231_getMoonDay(void) {
 8001590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001594:	b0a0      	sub	sp, #128	; 0x80
 8001596:	af00      	add	r7, sp, #0
    uint16_t Y = DS3231_getYear() + 2000;
 8001598:	f7ff fc62 	bl	8000e60 <DS3231_getYear>
 800159c:	4603      	mov	r3, r0
 800159e:	b29b      	uxth	r3, r3
 80015a0:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80015a4:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
    uint8_t M = DS3231_getMonth();
 80015a8:	f7ff fc4c 	bl	8000e44 <DS3231_getMonth>
 80015ac:	4603      	mov	r3, r0
 80015ae:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
    uint8_t D = DS3231_getDate();
 80015b2:	f7ff fc39 	bl	8000e28 <DS3231_getDate>
 80015b6:	4603      	mov	r3, r0
 80015b8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
    float moonDay;
    double I;
    uint64_t YY, MM, K1, K2, K3, JD;
    YY = Y - floor((12 - M) / 10);
 80015bc:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80015c0:	4618      	mov	r0, r3
 80015c2:	f017 fbdf 	bl	8018d84 <__aeabi_i2d>
 80015c6:	4604      	mov	r4, r0
 80015c8:	460d      	mov	r5, r1
 80015ca:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80015ce:	f1c3 010c 	rsb	r1, r3, #12
 80015d2:	4b99      	ldr	r3, [pc, #612]	; (8001838 <DS3231_getMoonDay+0x2a8>)
 80015d4:	fb83 2301 	smull	r2, r3, r3, r1
 80015d8:	109a      	asrs	r2, r3, #2
 80015da:	17cb      	asrs	r3, r1, #31
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	4618      	mov	r0, r3
 80015e0:	f017 fbd0 	bl	8018d84 <__aeabi_i2d>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4620      	mov	r0, r4
 80015ea:	4629      	mov	r1, r5
 80015ec:	f017 fa7c 	bl	8018ae8 <__aeabi_dsub>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4610      	mov	r0, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	f017 ff8e 	bl	8019518 <__aeabi_d2ulz>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
    MM = M + 9;
 8001604:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8001608:	3309      	adds	r3, #9
 800160a:	17da      	asrs	r2, r3, #31
 800160c:	61bb      	str	r3, [r7, #24]
 800160e:	61fa      	str	r2, [r7, #28]
 8001610:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001614:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
    if (MM >= 12) {
 8001618:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800161c:	2a0c      	cmp	r2, #12
 800161e:	f173 0300 	sbcs.w	r3, r3, #0
 8001622:	d30b      	bcc.n	800163c <DS3231_getMoonDay+0xac>
        MM = MM - 12;
 8001624:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001628:	f1b2 010c 	subs.w	r1, r2, #12
 800162c:	6139      	str	r1, [r7, #16]
 800162e:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001638:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
    }
    K1 = floor(365.25 * (YY + 4712));
 800163c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001640:	f241 2168 	movw	r1, #4712	; 0x1268
 8001644:	1851      	adds	r1, r2, r1
 8001646:	6339      	str	r1, [r7, #48]	; 0x30
 8001648:	f143 0300 	adc.w	r3, r3, #0
 800164c:	637b      	str	r3, [r7, #52]	; 0x34
 800164e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001652:	f017 fbcb 	bl	8018dec <__aeabi_ul2d>
 8001656:	a36e      	add	r3, pc, #440	; (adr r3, 8001810 <DS3231_getMoonDay+0x280>)
 8001658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165c:	f017 fbfc 	bl	8018e58 <__aeabi_dmul>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	ec43 2b17 	vmov	d7, r2, r3
 8001668:	eeb0 0a47 	vmov.f32	s0, s14
 800166c:	eef0 0a67 	vmov.f32	s1, s15
 8001670:	f01c fdde 	bl	801e230 <floor>
 8001674:	ec53 2b10 	vmov	r2, r3, d0
 8001678:	4610      	mov	r0, r2
 800167a:	4619      	mov	r1, r3
 800167c:	f017 ff4c 	bl	8019518 <__aeabi_d2ulz>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    K2 = floor(30.6 * MM + 0.5);
 8001688:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800168c:	f017 fbae 	bl	8018dec <__aeabi_ul2d>
 8001690:	a361      	add	r3, pc, #388	; (adr r3, 8001818 <DS3231_getMoonDay+0x288>)
 8001692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001696:	f017 fbdf 	bl	8018e58 <__aeabi_dmul>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4610      	mov	r0, r2
 80016a0:	4619      	mov	r1, r3
 80016a2:	f04f 0200 	mov.w	r2, #0
 80016a6:	4b65      	ldr	r3, [pc, #404]	; (800183c <DS3231_getMoonDay+0x2ac>)
 80016a8:	f017 fa20 	bl	8018aec <__adddf3>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	ec43 2b17 	vmov	d7, r2, r3
 80016b4:	eeb0 0a47 	vmov.f32	s0, s14
 80016b8:	eef0 0a67 	vmov.f32	s1, s15
 80016bc:	f01c fdb8 	bl	801e230 <floor>
 80016c0:	ec53 2b10 	vmov	r2, r3, d0
 80016c4:	4610      	mov	r0, r2
 80016c6:	4619      	mov	r1, r3
 80016c8:	f017 ff26 	bl	8019518 <__aeabi_d2ulz>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    K3 = floor(floor((YY / 100) + 49) * 0.75) - 38;
 80016d4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80016d8:	f04f 0264 	mov.w	r2, #100	; 0x64
 80016dc:	f04f 0300 	mov.w	r3, #0
 80016e0:	f017 ff38 	bl	8019554 <__aeabi_uldivmod>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	f112 0131 	adds.w	r1, r2, #49	; 0x31
 80016ec:	62b9      	str	r1, [r7, #40]	; 0x28
 80016ee:	f143 0300 	adc.w	r3, r3, #0
 80016f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016f4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80016f8:	f017 fb78 	bl	8018dec <__aeabi_ul2d>
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	4b4f      	ldr	r3, [pc, #316]	; (8001840 <DS3231_getMoonDay+0x2b0>)
 8001702:	f017 fba9 	bl	8018e58 <__aeabi_dmul>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	ec43 2b17 	vmov	d7, r2, r3
 800170e:	eeb0 0a47 	vmov.f32	s0, s14
 8001712:	eef0 0a67 	vmov.f32	s1, s15
 8001716:	f01c fd8b 	bl	801e230 <floor>
 800171a:	ec51 0b10 	vmov	r0, r1, d0
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	4b48      	ldr	r3, [pc, #288]	; (8001844 <DS3231_getMoonDay+0x2b4>)
 8001724:	f017 f9e0 	bl	8018ae8 <__aeabi_dsub>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	4610      	mov	r0, r2
 800172e:	4619      	mov	r1, r3
 8001730:	f017 fef2 	bl	8019518 <__aeabi_d2ulz>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    JD = K1 + K2 + D + 59;
 800173c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001740:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001744:	eb10 0a02 	adds.w	sl, r0, r2
 8001748:	eb41 0b03 	adc.w	fp, r1, r3
 800174c:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8001750:	2200      	movs	r2, #0
 8001752:	623b      	str	r3, [r7, #32]
 8001754:	627a      	str	r2, [r7, #36]	; 0x24
 8001756:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800175a:	460b      	mov	r3, r1
 800175c:	eb1a 0803 	adds.w	r8, sl, r3
 8001760:	4613      	mov	r3, r2
 8001762:	eb4b 0903 	adc.w	r9, fp, r3
 8001766:	f118 033b 	adds.w	r3, r8, #59	; 0x3b
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	f149 0300 	adc.w	r3, r9, #0
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001776:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
    if (JD > 2299160) {
 800177a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800177e:	4932      	ldr	r1, [pc, #200]	; (8001848 <DS3231_getMoonDay+0x2b8>)
 8001780:	428a      	cmp	r2, r1
 8001782:	f173 0300 	sbcs.w	r3, r3, #0
 8001786:	d30c      	bcc.n	80017a2 <DS3231_getMoonDay+0x212>
        JD = JD - K3;
 8001788:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800178c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001790:	1a84      	subs	r4, r0, r2
 8001792:	603c      	str	r4, [r7, #0]
 8001794:	eb61 0303 	sbc.w	r3, r1, r3
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800179e:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
    }
    I = normalize((JD - 2451550.1) / 29.530588853);
 80017a2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80017a6:	f017 fb21 	bl	8018dec <__aeabi_ul2d>
 80017aa:	a31d      	add	r3, pc, #116	; (adr r3, 8001820 <DS3231_getMoonDay+0x290>)
 80017ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b0:	f017 f99a 	bl	8018ae8 <__aeabi_dsub>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4610      	mov	r0, r2
 80017ba:	4619      	mov	r1, r3
 80017bc:	a31a      	add	r3, pc, #104	; (adr r3, 8001828 <DS3231_getMoonDay+0x298>)
 80017be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c2:	f017 fc73 	bl	80190ac <__aeabi_ddiv>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	ec43 2b17 	vmov	d7, r2, r3
 80017ce:	eeb0 0a47 	vmov.f32	s0, s14
 80017d2:	eef0 0a67 	vmov.f32	s1, s15
 80017d6:	f7ff fea5 	bl	8001524 <normalize>
 80017da:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
    moonDay = I * 29.53;
 80017de:	a314      	add	r3, pc, #80	; (adr r3, 8001830 <DS3231_getMoonDay+0x2a0>)
 80017e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80017e8:	f017 fb36 	bl	8018e58 <__aeabi_dmul>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4610      	mov	r0, r2
 80017f2:	4619      	mov	r1, r3
 80017f4:	f017 fe28 	bl	8019448 <__aeabi_d2f>
 80017f8:	4603      	mov	r3, r0
 80017fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    return moonDay;
 80017fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017fe:	ee07 3a90 	vmov	s15, r3
}
 8001802:	eeb0 0a67 	vmov.f32	s0, s15
 8001806:	3780      	adds	r7, #128	; 0x80
 8001808:	46bd      	mov	sp, r7
 800180a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800180e:	bf00      	nop
 8001810:	00000000 	.word	0x00000000
 8001814:	4076d400 	.word	0x4076d400
 8001818:	9999999a 	.word	0x9999999a
 800181c:	403e9999 	.word	0x403e9999
 8001820:	0ccccccd 	.word	0x0ccccccd
 8001824:	4142b42f 	.word	0x4142b42f
 8001828:	abcb41d5 	.word	0xabcb41d5
 800182c:	403d87d4 	.word	0x403d87d4
 8001830:	147ae148 	.word	0x147ae148
 8001834:	403d87ae 	.word	0x403d87ae
 8001838:	66666667 	.word	0x66666667
 800183c:	3fe00000 	.word	0x3fe00000
 8001840:	3fe80000 	.word	0x3fe80000
 8001844:	40430000 	.word	0x40430000
 8001848:	00231519 	.word	0x00231519

0800184c <map>:
#define WAIT_REMOTE_SENSOR_SEC 100
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
double map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max) {
 800184c:	b590      	push	{r4, r7, lr}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4604      	mov	r4, r0
 8001854:	4608      	mov	r0, r1
 8001856:	4611      	mov	r1, r2
 8001858:	461a      	mov	r2, r3
 800185a:	4623      	mov	r3, r4
 800185c:	80fb      	strh	r3, [r7, #6]
 800185e:	4603      	mov	r3, r0
 8001860:	80bb      	strh	r3, [r7, #4]
 8001862:	460b      	mov	r3, r1
 8001864:	807b      	strh	r3, [r7, #2]
 8001866:	4613      	mov	r3, r2
 8001868:	803b      	strh	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800186a:	88fa      	ldrh	r2, [r7, #6]
 800186c:	88bb      	ldrh	r3, [r7, #4]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	8b39      	ldrh	r1, [r7, #24]
 8001872:	883a      	ldrh	r2, [r7, #0]
 8001874:	1a8a      	subs	r2, r1, r2
 8001876:	fb03 f202 	mul.w	r2, r3, r2
 800187a:	8879      	ldrh	r1, [r7, #2]
 800187c:	88bb      	ldrh	r3, [r7, #4]
 800187e:	1acb      	subs	r3, r1, r3
 8001880:	fb92 f2f3 	sdiv	r2, r2, r3
 8001884:	883b      	ldrh	r3, [r7, #0]
 8001886:	4413      	add	r3, r2
 8001888:	4618      	mov	r0, r3
 800188a:	f017 fa7b 	bl	8018d84 <__aeabi_i2d>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	ec43 2b17 	vmov	d7, r2, r3
}
 8001896:	eeb0 0a47 	vmov.f32	s0, s14
 800189a:	eef0 0a67 	vmov.f32	s1, s15
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd90      	pop	{r4, r7, pc}

080018a4 <byteL>:

uint8_t byteL(uint16_t val) {
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	80fb      	strh	r3, [r7, #6]
	return (val & 0xFF);
 80018ae:	88fb      	ldrh	r3, [r7, #6]
 80018b0:	b2db      	uxtb	r3, r3
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <byteH>:

uint8_t byteH(uint16_t val) {
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	4603      	mov	r3, r0
 80018c6:	80fb      	strh	r3, [r7, #6]
	return ((val >> 8) & 0xFF);
 80018c8:	88fb      	ldrh	r3, [r7, #6]
 80018ca:	0a1b      	lsrs	r3, r3, #8
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	b2db      	uxtb	r3, r3
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <byteS>:

uint16_t byteS(uint8_t byteL, uint8_t byteH) {
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	460a      	mov	r2, r1
 80018e6:	71fb      	strb	r3, [r7, #7]
 80018e8:	4613      	mov	r3, r2
 80018ea:	71bb      	strb	r3, [r7, #6]
	return (byteH << 8) | byteL;
 80018ec:	79bb      	ldrb	r3, [r7, #6]
 80018ee:	021b      	lsls	r3, r3, #8
 80018f0:	b21a      	sxth	r2, r3
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	b21b      	sxth	r3, r3
 80018f6:	4313      	orrs	r3, r2
 80018f8:	b21b      	sxth	r3, r3
 80018fa:	b29b      	uxth	r3, r3
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <HAL_UART_RxCpltCallback>:

uint8_t rx_buffer[UART_RX_BUFFER_SIZE];
uint8_t rx_index = 0;
uint8_t rx_data;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a0b      	ldr	r2, [pc, #44]	; (8001944 <HAL_UART_RxCpltCallback+0x3c>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d10f      	bne.n	800193a <HAL_UART_RxCpltCallback+0x32>
		rx_buffer[rx_index++] = rx_data;
 800191a:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <HAL_UART_RxCpltCallback+0x40>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	1c5a      	adds	r2, r3, #1
 8001920:	b2d1      	uxtb	r1, r2
 8001922:	4a09      	ldr	r2, [pc, #36]	; (8001948 <HAL_UART_RxCpltCallback+0x40>)
 8001924:	7011      	strb	r1, [r2, #0]
 8001926:	461a      	mov	r2, r3
 8001928:	4b08      	ldr	r3, [pc, #32]	; (800194c <HAL_UART_RxCpltCallback+0x44>)
 800192a:	7819      	ldrb	r1, [r3, #0]
 800192c:	4b08      	ldr	r3, [pc, #32]	; (8001950 <HAL_UART_RxCpltCallback+0x48>)
 800192e:	5499      	strb	r1, [r3, r2]
		HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8001930:	2201      	movs	r2, #1
 8001932:	4906      	ldr	r1, [pc, #24]	; (800194c <HAL_UART_RxCpltCallback+0x44>)
 8001934:	4807      	ldr	r0, [pc, #28]	; (8001954 <HAL_UART_RxCpltCallback+0x4c>)
 8001936:	f014 f92b 	bl	8015b90 <HAL_UART_Receive_IT>
//		HAL_UART_Receive_DMA(&huart1, &rx_data, 1);
	}
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40011000 	.word	0x40011000
 8001948:	20000974 	.word	0x20000974
 800194c:	20000975 	.word	0x20000975
 8001950:	20000964 	.word	0x20000964
 8001954:	200004d8 	.word	0x200004d8

08001958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800195a:	b0c3      	sub	sp, #268	; 0x10c
 800195c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800195e:	f004 fef3 	bl	8006748 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001962:	f002 f8f3 	bl	8003b4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001966:	f002 fab1 	bl	8003ecc <MX_GPIO_Init>
  MX_FSMC_Init();
 800196a:	f002 fb89 	bl	8004080 <MX_FSMC_Init>
  MX_I2C1_Init();
 800196e:	f002 f98b 	bl	8003c88 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001972:	f002 fa59 	bl	8003e28 <MX_USART1_UART_Init>
  MX_SPI3_Init();
 8001976:	f002 fa21 	bl	8003dbc <MX_SPI3_Init>
  MX_SPI2_Init();
 800197a:	f002 f9e9 	bl	8003d50 <MX_SPI2_Init>
  MX_DMA_Init();
 800197e:	f002 fa7d 	bl	8003e7c <MX_DMA_Init>
  MX_DAC_Init();
 8001982:	f002 f94d 	bl	8003c20 <MX_DAC_Init>
  MX_SPI1_Init();
 8001986:	f002 f9ad 	bl	8003ce4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	LCD_Init();
 800198a:	f003 fe95 	bl	80056b8 <LCD_Init>
	XPT2046_Init();
 800198e:	f004 fde5 	bl	800655c <XPT2046_Init>
	BME280_Init();
 8001992:	f7fe ff23 	bl	80007dc <BME280_Init>
	W25QXX_Init();
 8001996:	f004 fda7 	bl	80064e8 <W25QXX_Init>

	LCD_Rect_Fill(0, 0, 800, 480, BLUE);
 800199a:	23ff      	movs	r3, #255	; 0xff
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80019a2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80019a6:	2100      	movs	r1, #0
 80019a8:	2000      	movs	r0, #0
 80019aa:	f002 fcb1 	bl	8004310 <LCD_Rect_Fill>
	LCD_Rect_Fill(1, 1, 798, 478, BLACK);
 80019ae:	2300      	movs	r3, #0
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 80019b6:	f240 321e 	movw	r2, #798	; 0x31e
 80019ba:	2101      	movs	r1, #1
 80019bc:	2001      	movs	r0, #1
 80019be:	f002 fca7 	bl	8004310 <LCD_Rect_Fill>


	unsigned int id = W25QXX_Read_ID();
 80019c2:	f004 fd67 	bl	8006494 <W25QXX_Read_ID>
 80019c6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
	HAL_UART_Transmit(&huart1,(uint8_t*)"\r\n",2,0x1000);
 80019ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ce:	2202      	movs	r2, #2
 80019d0:	49c7      	ldr	r1, [pc, #796]	; (8001cf0 <main+0x398>)
 80019d2:	48c8      	ldr	r0, [pc, #800]	; (8001cf4 <main+0x39c>)
 80019d4:	f013 ff63 	bl	801589e <HAL_UART_Transmit>

	char str1[30];

	sprintf(str1,"ID:0x%X\r\n",id);
 80019d8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80019dc:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80019e0:	49c5      	ldr	r1, [pc, #788]	; (8001cf8 <main+0x3a0>)
 80019e2:	4618      	mov	r0, r3
 80019e4:	f018 fe18 	bl	801a618 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 80019e8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80019ec:	4618      	mov	r0, r3
 80019ee:	f017 f81d 	bl	8018a2c <strlen>
 80019f2:	4603      	mov	r3, r0
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80019fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019fe:	48bd      	ldr	r0, [pc, #756]	; (8001cf4 <main+0x39c>)
 8001a00:	f013 ff4d 	bl	801589e <HAL_UART_Transmit>
		uint8_t   SR3;
	} w25_info_t;

	w25_info_t  w25_info;

	id &= 0x0000ffff;
 8001a04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	switch(id)
 8001a0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a12:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8001a16:	3b11      	subs	r3, #17
 8001a18:	2b09      	cmp	r3, #9
 8001a1a:	d87e      	bhi.n	8001b1a <main+0x1c2>
 8001a1c:	a201      	add	r2, pc, #4	; (adr r2, 8001a24 <main+0xcc>)
 8001a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a22:	bf00      	nop
 8001a24:	08001b07 	.word	0x08001b07
 8001a28:	08001af3 	.word	0x08001af3
 8001a2c:	08001adf 	.word	0x08001adf
 8001a30:	08001acb 	.word	0x08001acb
 8001a34:	08001ab7 	.word	0x08001ab7
 8001a38:	08001aa3 	.word	0x08001aa3
 8001a3c:	08001a8f 	.word	0x08001a8f
 8001a40:	08001a79 	.word	0x08001a79
 8001a44:	08001a63 	.word	0x08001a63
 8001a48:	08001a4d 	.word	0x08001a4d
	{
	case 0x401A:
		w25_info.BlockCount=1024;
 8001a4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		sprintf(str1,"w25qxx Chip: w25q512\r\n");
 8001a54:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001a58:	49a8      	ldr	r1, [pc, #672]	; (8001cfc <main+0x3a4>)
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f018 fddc 	bl	801a618 <siprintf>
		break;
 8001a60:	e071      	b.n	8001b46 <main+0x1ee>
	case 0x4019:
		w25_info.BlockCount=512;
 8001a62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		sprintf(str1,"w25qxx Chip: w25q256\r\n");
 8001a6a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001a6e:	49a4      	ldr	r1, [pc, #656]	; (8001d00 <main+0x3a8>)
 8001a70:	4618      	mov	r0, r3
 8001a72:	f018 fdd1 	bl	801a618 <siprintf>
		break;
 8001a76:	e066      	b.n	8001b46 <main+0x1ee>
	case 0x4018:
		w25_info.BlockCount=256;
 8001a78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		sprintf(str1,"w25qxx Chip: w25q128\r\n");
 8001a80:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001a84:	499f      	ldr	r1, [pc, #636]	; (8001d04 <main+0x3ac>)
 8001a86:	4618      	mov	r0, r3
 8001a88:	f018 fdc6 	bl	801a618 <siprintf>
		break;
 8001a8c:	e05b      	b.n	8001b46 <main+0x1ee>
	case 0x4017:
		w25_info.BlockCount=128;
 8001a8e:	2380      	movs	r3, #128	; 0x80
 8001a90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		sprintf(str1,"w25qxx Chip: w25q64\r\n");
 8001a94:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001a98:	499b      	ldr	r1, [pc, #620]	; (8001d08 <main+0x3b0>)
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f018 fdbc 	bl	801a618 <siprintf>
		break;
 8001aa0:	e051      	b.n	8001b46 <main+0x1ee>
	case 0x4016:
		w25_info.BlockCount=64;
 8001aa2:	2340      	movs	r3, #64	; 0x40
 8001aa4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		sprintf(str1,"w25qxx Chip: w25q32\r\n");
 8001aa8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001aac:	4997      	ldr	r1, [pc, #604]	; (8001d0c <main+0x3b4>)
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f018 fdb2 	bl	801a618 <siprintf>
		break;
 8001ab4:	e047      	b.n	8001b46 <main+0x1ee>
	case 0x4015:
		w25_info.BlockCount=32;
 8001ab6:	2320      	movs	r3, #32
 8001ab8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		sprintf(str1,"w25qxx Chip: w25q16\r\n");
 8001abc:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001ac0:	4993      	ldr	r1, [pc, #588]	; (8001d10 <main+0x3b8>)
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f018 fda8 	bl	801a618 <siprintf>
		break;
 8001ac8:	e03d      	b.n	8001b46 <main+0x1ee>
	case 0x4014:
		w25_info.BlockCount=16;
 8001aca:	2310      	movs	r3, #16
 8001acc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		sprintf(str1,"w25qxx Chip: w25q80\r\n");
 8001ad0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001ad4:	498f      	ldr	r1, [pc, #572]	; (8001d14 <main+0x3bc>)
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f018 fd9e 	bl	801a618 <siprintf>
		break;
 8001adc:	e033      	b.n	8001b46 <main+0x1ee>
	case 0x4013:
		w25_info.BlockCount=8;
 8001ade:	2308      	movs	r3, #8
 8001ae0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		sprintf(str1,"w25qxx Chip: w25q40\r\n");
 8001ae4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001ae8:	498b      	ldr	r1, [pc, #556]	; (8001d18 <main+0x3c0>)
 8001aea:	4618      	mov	r0, r3
 8001aec:	f018 fd94 	bl	801a618 <siprintf>
		break;
 8001af0:	e029      	b.n	8001b46 <main+0x1ee>
	case 0x4012:
		w25_info.BlockCount=4;
 8001af2:	2304      	movs	r3, #4
 8001af4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		sprintf(str1,"w25qxx Chip: w25q20\r\n");
 8001af8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001afc:	4987      	ldr	r1, [pc, #540]	; (8001d1c <main+0x3c4>)
 8001afe:	4618      	mov	r0, r3
 8001b00:	f018 fd8a 	bl	801a618 <siprintf>
		break;
 8001b04:	e01f      	b.n	8001b46 <main+0x1ee>
	case 0x4011:
		w25_info.BlockCount=2;
 8001b06:	2302      	movs	r3, #2
 8001b08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		sprintf(str1,"w25qxx Chip: w25q10\r\n");
 8001b0c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001b10:	4983      	ldr	r1, [pc, #524]	; (8001d20 <main+0x3c8>)
 8001b12:	4618      	mov	r0, r3
 8001b14:	f018 fd80 	bl	801a618 <siprintf>
		break;
 8001b18:	e015      	b.n	8001b46 <main+0x1ee>
	default:
		sprintf(str1,"w25qxx Unknown ID\r\n");
 8001b1a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001b1e:	4981      	ldr	r1, [pc, #516]	; (8001d24 <main+0x3cc>)
 8001b20:	4618      	mov	r0, r3
 8001b22:	f018 fd79 	bl	801a618 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001b26:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f016 ff7e 	bl	8018a2c <strlen>
 8001b30:	4603      	mov	r3, r0
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001b38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b3c:	486d      	ldr	r0, [pc, #436]	; (8001cf4 <main+0x39c>)
 8001b3e:	f013 feae 	bl	801589e <HAL_UART_Transmit>
		return;
 8001b42:	f001 bfe7 	b.w	8003b14 <main+0x21bc>
	}

		HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001b46:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f016 ff6e 	bl	8018a2c <strlen>
 8001b50:	4603      	mov	r3, r0
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001b58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b5c:	4865      	ldr	r0, [pc, #404]	; (8001cf4 <main+0x39c>)
 8001b5e:	f013 fe9e 	bl	801589e <HAL_UART_Transmit>
		w25_info.PageSize=256;
 8001b62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b66:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
		w25_info.SectorSize=0x1000;
 8001b6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		w25_info.SectorCount=w25_info.BlockCount*16;
 8001b72:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b76:	011b      	lsls	r3, r3, #4
 8001b78:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		w25_info.PageCount=(w25_info.SectorCount*w25_info.SectorSize)/w25_info.PageSize;
 8001b7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b80:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001b84:	fb02 f303 	mul.w	r3, r2, r3
 8001b88:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 8001b8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		w25_info.BlockSize=w25_info.SectorSize*16;
 8001b94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b98:	011b      	lsls	r3, r3, #4
 8001b9a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		w25_info.NumKB=(w25_info.SectorCount*w25_info.SectorSize)/1024;
 8001b9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ba2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001ba6:	fb02 f303 	mul.w	r3, r2, r3
 8001baa:	0a9b      	lsrs	r3, r3, #10
 8001bac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		sprintf(str1,"Page Size: %d Bytes\r\n",(unsigned int)w25_info.PageSize);
 8001bb0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001bba:	495b      	ldr	r1, [pc, #364]	; (8001d28 <main+0x3d0>)
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f018 fd2b 	bl	801a618 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001bc2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f016 ff30 	bl	8018a2c <strlen>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001bd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bd8:	4846      	ldr	r0, [pc, #280]	; (8001cf4 <main+0x39c>)
 8001bda:	f013 fe60 	bl	801589e <HAL_UART_Transmit>
		sprintf(str1,"Page Count: %u\r\n",(unsigned int)w25_info.PageCount);
 8001bde:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001be2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001be6:	4951      	ldr	r1, [pc, #324]	; (8001d2c <main+0x3d4>)
 8001be8:	4618      	mov	r0, r3
 8001bea:	f018 fd15 	bl	801a618 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001bee:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f016 ff1a 	bl	8018a2c <strlen>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001c00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c04:	483b      	ldr	r0, [pc, #236]	; (8001cf4 <main+0x39c>)
 8001c06:	f013 fe4a 	bl	801589e <HAL_UART_Transmit>
		sprintf(str1,"Sector Size: %u Bytes\r\n",(unsigned int)w25_info.SectorSize);
 8001c0a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001c0e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001c12:	4947      	ldr	r1, [pc, #284]	; (8001d30 <main+0x3d8>)
 8001c14:	4618      	mov	r0, r3
 8001c16:	f018 fcff 	bl	801a618 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001c1a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f016 ff04 	bl	8018a2c <strlen>
 8001c24:	4603      	mov	r3, r0
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001c2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c30:	4830      	ldr	r0, [pc, #192]	; (8001cf4 <main+0x39c>)
 8001c32:	f013 fe34 	bl	801589e <HAL_UART_Transmit>
		sprintf(str1,"Sector Count: %u\r\n",(unsigned int)w25_info.SectorCount);
 8001c36:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001c3a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001c3e:	493d      	ldr	r1, [pc, #244]	; (8001d34 <main+0x3dc>)
 8001c40:	4618      	mov	r0, r3
 8001c42:	f018 fce9 	bl	801a618 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001c46:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f016 feee 	bl	8018a2c <strlen>
 8001c50:	4603      	mov	r3, r0
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001c58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c5c:	4825      	ldr	r0, [pc, #148]	; (8001cf4 <main+0x39c>)
 8001c5e:	f013 fe1e 	bl	801589e <HAL_UART_Transmit>
		sprintf(str1,"Block Size: %u Bytes\r\n",(unsigned int)w25_info.BlockSize);
 8001c62:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001c66:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001c6a:	4933      	ldr	r1, [pc, #204]	; (8001d38 <main+0x3e0>)
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f018 fcd3 	bl	801a618 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001c72:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001c76:	4618      	mov	r0, r3
 8001c78:	f016 fed8 	bl	8018a2c <strlen>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c88:	481a      	ldr	r0, [pc, #104]	; (8001cf4 <main+0x39c>)
 8001c8a:	f013 fe08 	bl	801589e <HAL_UART_Transmit>
		sprintf(str1,"Block Count: %u\r\n",(unsigned int)w25_info.BlockCount);
 8001c8e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001c92:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001c96:	4929      	ldr	r1, [pc, #164]	; (8001d3c <main+0x3e4>)
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f018 fcbd 	bl	801a618 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001c9e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f016 fec2 	bl	8018a2c <strlen>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001cb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cb4:	480f      	ldr	r0, [pc, #60]	; (8001cf4 <main+0x39c>)
 8001cb6:	f013 fdf2 	bl	801589e <HAL_UART_Transmit>
		sprintf(str1,"Capacity: %u KB\r\n",(unsigned int)w25_info.NumKB);
 8001cba:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001cbe:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001cc2:	491f      	ldr	r1, [pc, #124]	; (8001d40 <main+0x3e8>)
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f018 fca7 	bl	801a618 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001cca:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f016 feac 	bl	8018a2c <strlen>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001cdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ce0:	4804      	ldr	r0, [pc, #16]	; (8001cf4 <main+0x39c>)
 8001ce2:	f013 fddc 	bl	801589e <HAL_UART_Transmit>

	for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8001cec:	e052      	b.n	8001d94 <main+0x43c>
 8001cee:	bf00      	nop
 8001cf0:	08051fac 	.word	0x08051fac
 8001cf4:	200004d8 	.word	0x200004d8
 8001cf8:	08051f8c 	.word	0x08051f8c
 8001cfc:	08051f98 	.word	0x08051f98
 8001d00:	08051fb0 	.word	0x08051fb0
 8001d04:	08051fc8 	.word	0x08051fc8
 8001d08:	08051fe0 	.word	0x08051fe0
 8001d0c:	08051ff8 	.word	0x08051ff8
 8001d10:	08052010 	.word	0x08052010
 8001d14:	08052028 	.word	0x08052028
 8001d18:	08052040 	.word	0x08052040
 8001d1c:	08052058 	.word	0x08052058
 8001d20:	08052070 	.word	0x08052070
 8001d24:	08052088 	.word	0x08052088
 8001d28:	0805209c 	.word	0x0805209c
 8001d2c:	080520b4 	.word	0x080520b4
 8001d30:	080520c8 	.word	0x080520c8
 8001d34:	080520e0 	.word	0x080520e0
 8001d38:	080520f4 	.word	0x080520f4
 8001d3c:	0805210c 	.word	0x0805210c
 8001d40:	08052120 	.word	0x08052120
 8001d44:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8001d48:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7fe fa9c 	bl	8000290 <AT24XX_Read>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	461c      	mov	r4, r3
 8001d5c:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	f203 33e9 	addw	r3, r3, #1001	; 0x3e9
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe fa90 	bl	8000290 <AT24XX_Read>
 8001d70:	4603      	mov	r3, r0
 8001d72:	4619      	mov	r1, r3
 8001d74:	4620      	mov	r0, r4
 8001d76:	f7ff fdb1 	bl	80018dc <byteS>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8001d82:	b211      	sxth	r1, r2
 8001d84:	4a86      	ldr	r2, [pc, #536]	; (8001fa0 <main+0x648>)
 8001d86:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001d8a:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8001d8e:	3301      	adds	r3, #1
 8001d90:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8001d94:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8001d98:	2b9a      	cmp	r3, #154	; 0x9a
 8001d9a:	d9d3      	bls.n	8001d44 <main+0x3ec>
	for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
 8001da2:	e027      	b.n	8001df4 <main+0x49c>
 8001da4:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 8001da8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe fa6c 	bl	8000290 <AT24XX_Read>
 8001db8:	4603      	mov	r3, r0
 8001dba:	461c      	mov	r4, r3
 8001dbc:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	f203 73d1 	addw	r3, r3, #2001	; 0x7d1
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7fe fa60 	bl	8000290 <AT24XX_Read>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4620      	mov	r0, r4
 8001dd6:	f7ff fd81 	bl	80018dc <byteS>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	461a      	mov	r2, r3
 8001dde:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 8001de2:	b211      	sxth	r1, r2
 8001de4:	4a6f      	ldr	r2, [pc, #444]	; (8001fa4 <main+0x64c>)
 8001de6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001dea:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 8001dee:	3301      	adds	r3, #1
 8001df0:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
 8001df4:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 8001df8:	2b9a      	cmp	r3, #154	; 0x9a
 8001dfa:	d9d3      	bls.n	8001da4 <main+0x44c>
	for (uint16_t i = 0; i < 155; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
 8001e02:	e027      	b.n	8001e54 <main+0x4fc>
 8001e04:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 8001e08:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7fe fa3c 	bl	8000290 <AT24XX_Read>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	461c      	mov	r4, r3
 8001e1c:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	f603 33b9 	addw	r3, r3, #3001	; 0xbb9
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7fe fa30 	bl	8000290 <AT24XX_Read>
 8001e30:	4603      	mov	r3, r0
 8001e32:	4619      	mov	r1, r3
 8001e34:	4620      	mov	r0, r4
 8001e36:	f7ff fd51 	bl	80018dc <byteS>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 8001e42:	b211      	sxth	r1, r2
 8001e44:	4a58      	ldr	r2, [pc, #352]	; (8001fa8 <main+0x650>)
 8001e46:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001e4a:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 8001e4e:	3301      	adds	r3, #1
 8001e50:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
 8001e54:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 8001e58:	2b9a      	cmp	r3, #154	; 0x9a
 8001e5a:	d9d3      	bls.n	8001e04 <main+0x4ac>


//	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);

	uint8_t uartTransmit[] = "UART OK\r\n";
 8001e5c:	4a53      	ldr	r2, [pc, #332]	; (8001fac <main+0x654>)
 8001e5e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001e62:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e64:	c303      	stmia	r3!, {r0, r1}
 8001e66:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, uartTransmit, sizeof(uartTransmit), 100);
 8001e68:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8001e6c:	2364      	movs	r3, #100	; 0x64
 8001e6e:	220a      	movs	r2, #10
 8001e70:	484f      	ldr	r0, [pc, #316]	; (8001fb0 <main+0x658>)
 8001e72:	f013 fd14 	bl	801589e <HAL_UART_Transmit>

	uint8_t uartTransmit_IT[] = "UART INTERRUPT OK\r\n";
 8001e76:	4b4f      	ldr	r3, [pc, #316]	; (8001fb4 <main+0x65c>)
 8001e78:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8001e7c:	461d      	mov	r5, r3
 8001e7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e82:	682b      	ldr	r3, [r5, #0]
 8001e84:	6023      	str	r3, [r4, #0]
	HAL_UART_Transmit_IT(&huart1, uartTransmit_IT, sizeof(uartTransmit_IT));
 8001e86:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001e8a:	2214      	movs	r2, #20
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4848      	ldr	r0, [pc, #288]	; (8001fb0 <main+0x658>)
 8001e90:	f013 fe39 	bl	8015b06 <HAL_UART_Transmit_IT>

//	uint8_t uartTransmit_DMA[] = "UART DMA OK\r\n";
//	HAL_UART_Transmit_DMA(&huart1, uartTransmit_DMA, sizeof(uartTransmit_DMA));

	HAL_UART_Receive_IT(&huart1, &rx_data, UART_RX_BUFFER_SIZE);
 8001e94:	2210      	movs	r2, #16
 8001e96:	4948      	ldr	r1, [pc, #288]	; (8001fb8 <main+0x660>)
 8001e98:	4845      	ldr	r0, [pc, #276]	; (8001fb0 <main+0x658>)
 8001e9a:	f013 fe79 	bl	8015b90 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{

		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5) == GPIO_PIN_SET) {
 8001e9e:	2120      	movs	r1, #32
 8001ea0:	4846      	ldr	r0, [pc, #280]	; (8001fbc <main+0x664>)
 8001ea2:	f009 f8eb 	bl	800b07c <HAL_GPIO_ReadPin>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d12c      	bne.n	8001f06 <main+0x5ae>

			uint16_t touchX = getX();
 8001eac:	f004 fc18 	bl	80066e0 <getX>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
			uint16_t touchY = getY();
 8001eb6:	f004 fc2d 	bl	8006714 <getY>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
			if (touchX && touchY && touchX != 0x0DB)
 8001ec0:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d012      	beq.n	8001eee <main+0x596>
 8001ec8:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00e      	beq.n	8001eee <main+0x596>
 8001ed0:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8001ed4:	2bdb      	cmp	r3, #219	; 0xdb
 8001ed6:	d00a      	beq.n	8001eee <main+0x596>
			{
				LCD_Rect_Fill(touchX, touchY, 1, 1, WHITE);
 8001ed8:	f8b7 10c8 	ldrh.w	r1, [r7, #200]	; 0xc8
 8001edc:	f8b7 00ca 	ldrh.w	r0, [r7, #202]	; 0xca
 8001ee0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f002 fa11 	bl	8004310 <LCD_Rect_Fill>
			}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8001eee:	2201      	movs	r2, #1
 8001ef0:	2180      	movs	r1, #128	; 0x80
 8001ef2:	4833      	ldr	r0, [pc, #204]	; (8001fc0 <main+0x668>)
 8001ef4:	f009 f8da 	bl	800b0ac <HAL_GPIO_WritePin>
			touchX = 0;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
			touchY = 0;
 8001efe:	2300      	movs	r3, #0
 8001f00:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
 8001f04:	e004      	b.n	8001f10 <main+0x5b8>
		} else
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001f06:	2200      	movs	r2, #0
 8001f08:	2180      	movs	r1, #128	; 0x80
 8001f0a:	482d      	ldr	r0, [pc, #180]	; (8001fc0 <main+0x668>)
 8001f0c:	f009 f8ce 	bl	800b0ac <HAL_GPIO_WritePin>


		//		if (millis / 1000 % 2 == 0)
		////		else
		//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
		rtcSec = DS3231_getSec();
 8001f10:	f7fe ff52 	bl	8000db8 <DS3231_getSec>
 8001f14:	4603      	mov	r3, r0
 8001f16:	461a      	mov	r2, r3
 8001f18:	4b2a      	ldr	r3, [pc, #168]	; (8001fc4 <main+0x66c>)
 8001f1a:	701a      	strb	r2, [r3, #0]

		char clockPrint[13];

		if (rtcSecLast != rtcSec) {
 8001f1c:	4b2a      	ldr	r3, [pc, #168]	; (8001fc8 <main+0x670>)
 8001f1e:	781a      	ldrb	r2, [r3, #0]
 8001f20:	4b28      	ldr	r3, [pc, #160]	; (8001fc4 <main+0x66c>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d0ba      	beq.n	8001e9e <main+0x546>

			rtcMin = DS3231_getMin();
 8001f28:	f7fe ff54 	bl	8000dd4 <DS3231_getMin>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	461a      	mov	r2, r3
 8001f30:	4b26      	ldr	r3, [pc, #152]	; (8001fcc <main+0x674>)
 8001f32:	701a      	strb	r2, [r3, #0]

			LCD_Circle(170, 35, 8, 0, 1, ORANGE);
 8001f34:	4b26      	ldr	r3, [pc, #152]	; (8001fd0 <main+0x678>)
 8001f36:	9301      	str	r3, [sp, #4]
 8001f38:	2301      	movs	r3, #1
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	2208      	movs	r2, #8
 8001f40:	2123      	movs	r1, #35	; 0x23
 8001f42:	20aa      	movs	r0, #170	; 0xaa
 8001f44:	f002 fe28 	bl	8004b98 <LCD_Circle>
			LCD_Circle(170, 75, 8, 0, 1, ORANGE);
 8001f48:	4b21      	ldr	r3, [pc, #132]	; (8001fd0 <main+0x678>)
 8001f4a:	9301      	str	r3, [sp, #4]
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	2300      	movs	r3, #0
 8001f52:	2208      	movs	r2, #8
 8001f54:	214b      	movs	r1, #75	; 0x4b
 8001f56:	20aa      	movs	r0, #170	; 0xaa
 8001f58:	f002 fe1e 	bl	8004b98 <LCD_Circle>

			if (rtcSec % 2 != 0) {
 8001f5c:	4b19      	ldr	r3, [pc, #100]	; (8001fc4 <main+0x66c>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d034      	beq.n	8001fd4 <main+0x67c>
				LCD_Circle(170, 35, 7, 1, 1, ORANGE);
 8001f6a:	4b19      	ldr	r3, [pc, #100]	; (8001fd0 <main+0x678>)
 8001f6c:	9301      	str	r3, [sp, #4]
 8001f6e:	2301      	movs	r3, #1
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	2301      	movs	r3, #1
 8001f74:	2207      	movs	r2, #7
 8001f76:	2123      	movs	r1, #35	; 0x23
 8001f78:	20aa      	movs	r0, #170	; 0xaa
 8001f7a:	f002 fe0d 	bl	8004b98 <LCD_Circle>
				LCD_Circle(170, 75, 7, 1, 1, ORANGE);
 8001f7e:	4b14      	ldr	r3, [pc, #80]	; (8001fd0 <main+0x678>)
 8001f80:	9301      	str	r3, [sp, #4]
 8001f82:	2301      	movs	r3, #1
 8001f84:	9300      	str	r3, [sp, #0]
 8001f86:	2301      	movs	r3, #1
 8001f88:	2207      	movs	r2, #7
 8001f8a:	214b      	movs	r1, #75	; 0x4b
 8001f8c:	20aa      	movs	r0, #170	; 0xaa
 8001f8e:	f002 fe03 	bl	8004b98 <LCD_Circle>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001f92:	2200      	movs	r2, #0
 8001f94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f98:	4808      	ldr	r0, [pc, #32]	; (8001fbc <main+0x664>)
 8001f9a:	f009 f887 	bl	800b0ac <HAL_GPIO_WritePin>
 8001f9e:	e033      	b.n	8002008 <main+0x6b0>
 8001fa0:	200005bc 	.word	0x200005bc
 8001fa4:	200006f4 	.word	0x200006f4
 8001fa8:	2000082c 	.word	0x2000082c
 8001fac:	08052190 	.word	0x08052190
 8001fb0:	200004d8 	.word	0x200004d8
 8001fb4:	0805219c 	.word	0x0805219c
 8001fb8:	20000975 	.word	0x20000975
 8001fbc:	40020800 	.word	0x40020800
 8001fc0:	40020000 	.word	0x40020000
 8001fc4:	2000056d 	.word	0x2000056d
 8001fc8:	20000000 	.word	0x20000000
 8001fcc:	2000056e 	.word	0x2000056e
 8001fd0:	00ffa500 	.word	0x00ffa500
			}
			else {
				LCD_Circle(170, 35, 7, 1, 1, BLACK);
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	9301      	str	r3, [sp, #4]
 8001fd8:	2301      	movs	r3, #1
 8001fda:	9300      	str	r3, [sp, #0]
 8001fdc:	2301      	movs	r3, #1
 8001fde:	2207      	movs	r2, #7
 8001fe0:	2123      	movs	r1, #35	; 0x23
 8001fe2:	20aa      	movs	r0, #170	; 0xaa
 8001fe4:	f002 fdd8 	bl	8004b98 <LCD_Circle>
				LCD_Circle(170, 75, 7, 1, 1, BLACK);
 8001fe8:	2300      	movs	r3, #0
 8001fea:	9301      	str	r3, [sp, #4]
 8001fec:	2301      	movs	r3, #1
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	2207      	movs	r2, #7
 8001ff4:	214b      	movs	r1, #75	; 0x4b
 8001ff6:	20aa      	movs	r0, #170	; 0xaa
 8001ff8:	f002 fdce 	bl	8004b98 <LCD_Circle>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002002:	48bb      	ldr	r0, [pc, #748]	; (80022f0 <main+0x998>)
 8002004:	f009 f852 	bl	800b0ac <HAL_GPIO_WritePin>
			}

			if (rtcMinLast != rtcMin) {
 8002008:	4bba      	ldr	r3, [pc, #744]	; (80022f4 <main+0x99c>)
 800200a:	781a      	ldrb	r2, [r3, #0]
 800200c:	4bba      	ldr	r3, [pc, #744]	; (80022f8 <main+0x9a0>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	429a      	cmp	r2, r3
 8002012:	f001 8098 	beq.w	8003146 <main+0x17ee>

				rtcHrs = DS3231_getHrs();
 8002016:	f7fe feeb 	bl	8000df0 <DS3231_getHrs>
 800201a:	4603      	mov	r3, r0
 800201c:	461a      	mov	r2, r3
 800201e:	4bb7      	ldr	r3, [pc, #732]	; (80022fc <main+0x9a4>)
 8002020:	701a      	strb	r2, [r3, #0]

				sprintf(clockPrint, "%02d", rtcMinLast);
 8002022:	4bb4      	ldr	r3, [pc, #720]	; (80022f4 <main+0x99c>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	461a      	mov	r2, r3
 8002028:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800202c:	49b4      	ldr	r1, [pc, #720]	; (8002300 <main+0x9a8>)
 800202e:	4618      	mov	r0, r3
 8002030:	f018 faf2 	bl	801a618 <siprintf>
				LCD_Font(178, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 8002034:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002038:	2300      	movs	r3, #0
 800203a:	9301      	str	r3, [sp, #4]
 800203c:	2301      	movs	r3, #1
 800203e:	9300      	str	r3, [sp, #0]
 8002040:	4bb0      	ldr	r3, [pc, #704]	; (8002304 <main+0x9ac>)
 8002042:	2164      	movs	r1, #100	; 0x64
 8002044:	20b2      	movs	r0, #178	; 0xb2
 8002046:	f003 fabd 	bl	80055c4 <LCD_Font>
				sprintf(clockPrint, "%02d", rtcMin);
 800204a:	4bab      	ldr	r3, [pc, #684]	; (80022f8 <main+0x9a0>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	461a      	mov	r2, r3
 8002050:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002054:	49aa      	ldr	r1, [pc, #680]	; (8002300 <main+0x9a8>)
 8002056:	4618      	mov	r0, r3
 8002058:	f018 fade 	bl	801a618 <siprintf>
				LCD_Font(178, 100, clockPrint, &DejaVu_Sans_128, 1, ORANGE);
 800205c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002060:	4ba9      	ldr	r3, [pc, #676]	; (8002308 <main+0x9b0>)
 8002062:	9301      	str	r3, [sp, #4]
 8002064:	2301      	movs	r3, #1
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	4ba6      	ldr	r3, [pc, #664]	; (8002304 <main+0x9ac>)
 800206a:	2164      	movs	r1, #100	; 0x64
 800206c:	20b2      	movs	r0, #178	; 0xb2
 800206e:	f003 faa9 	bl	80055c4 <LCD_Font>

				if (rtcHrsLast != rtcHrs) {
 8002072:	4ba6      	ldr	r3, [pc, #664]	; (800230c <main+0x9b4>)
 8002074:	781a      	ldrb	r2, [r3, #0]
 8002076:	4ba1      	ldr	r3, [pc, #644]	; (80022fc <main+0x9a4>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	429a      	cmp	r2, r3
 800207c:	f000 80fb 	beq.w	8002276 <main+0x91e>

					rtcDay = DS3231_getDay();
 8002080:	f7fe fec4 	bl	8000e0c <DS3231_getDay>
 8002084:	4603      	mov	r3, r0
 8002086:	461a      	mov	r2, r3
 8002088:	4ba1      	ldr	r3, [pc, #644]	; (8002310 <main+0x9b8>)
 800208a:	701a      	strb	r2, [r3, #0]
					rtcDate = DS3231_getDate();
 800208c:	f7fe fecc 	bl	8000e28 <DS3231_getDate>
 8002090:	4603      	mov	r3, r0
 8002092:	461a      	mov	r2, r3
 8002094:	4b9f      	ldr	r3, [pc, #636]	; (8002314 <main+0x9bc>)
 8002096:	701a      	strb	r2, [r3, #0]
					rtcMonth = DS3231_getMonth();
 8002098:	f7fe fed4 	bl	8000e44 <DS3231_getMonth>
 800209c:	4603      	mov	r3, r0
 800209e:	461a      	mov	r2, r3
 80020a0:	4b9d      	ldr	r3, [pc, #628]	; (8002318 <main+0x9c0>)
 80020a2:	701a      	strb	r2, [r3, #0]
					rtcYear = DS3231_getYear();
 80020a4:	f7fe fedc 	bl	8000e60 <DS3231_getYear>
 80020a8:	4603      	mov	r3, r0
 80020aa:	461a      	mov	r2, r3
 80020ac:	4b9b      	ldr	r3, [pc, #620]	; (800231c <main+0x9c4>)
 80020ae:	701a      	strb	r2, [r3, #0]

					sprintf(clockPrint, "%02d", rtcHrsLast);
 80020b0:	4b96      	ldr	r3, [pc, #600]	; (800230c <main+0x9b4>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	461a      	mov	r2, r3
 80020b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80020ba:	4991      	ldr	r1, [pc, #580]	; (8002300 <main+0x9a8>)
 80020bc:	4618      	mov	r0, r3
 80020be:	f018 faab 	bl	801a618 <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 80020c2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80020c6:	2300      	movs	r3, #0
 80020c8:	9301      	str	r3, [sp, #4]
 80020ca:	2301      	movs	r3, #1
 80020cc:	9300      	str	r3, [sp, #0]
 80020ce:	4b8d      	ldr	r3, [pc, #564]	; (8002304 <main+0x9ac>)
 80020d0:	2164      	movs	r1, #100	; 0x64
 80020d2:	2000      	movs	r0, #0
 80020d4:	f003 fa76 	bl	80055c4 <LCD_Font>
					sprintf(clockPrint, "%02d", rtcHrs);
 80020d8:	4b88      	ldr	r3, [pc, #544]	; (80022fc <main+0x9a4>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	461a      	mov	r2, r3
 80020de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80020e2:	4987      	ldr	r1, [pc, #540]	; (8002300 <main+0x9a8>)
 80020e4:	4618      	mov	r0, r3
 80020e6:	f018 fa97 	bl	801a618 <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, ORANGE);
 80020ea:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80020ee:	4b86      	ldr	r3, [pc, #536]	; (8002308 <main+0x9b0>)
 80020f0:	9301      	str	r3, [sp, #4]
 80020f2:	2301      	movs	r3, #1
 80020f4:	9300      	str	r3, [sp, #0]
 80020f6:	4b83      	ldr	r3, [pc, #524]	; (8002304 <main+0x9ac>)
 80020f8:	2164      	movs	r1, #100	; 0x64
 80020fa:	2000      	movs	r0, #0
 80020fc:	f003 fa62 	bl	80055c4 <LCD_Font>

					if (rtcDayLast != rtcDay) {
 8002100:	4b87      	ldr	r3, [pc, #540]	; (8002320 <main+0x9c8>)
 8002102:	781a      	ldrb	r2, [r3, #0]
 8002104:	4b82      	ldr	r3, [pc, #520]	; (8002310 <main+0x9b8>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	429a      	cmp	r2, r3
 800210a:	f000 80a8 	beq.w	800225e <main+0x906>

						static const char* days[7] = { "MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN" };
						LCD_Font(5, 140, days[(7 + rtcDay - 2) % 7], &DejaVu_Sans_48, 1, BLACK);
 800210e:	4b80      	ldr	r3, [pc, #512]	; (8002310 <main+0x9b8>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	1d5a      	adds	r2, r3, #5
 8002114:	4b83      	ldr	r3, [pc, #524]	; (8002324 <main+0x9cc>)
 8002116:	fb83 1302 	smull	r1, r3, r3, r2
 800211a:	4413      	add	r3, r2
 800211c:	1099      	asrs	r1, r3, #2
 800211e:	17d3      	asrs	r3, r2, #31
 8002120:	1ac9      	subs	r1, r1, r3
 8002122:	460b      	mov	r3, r1
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	1a5b      	subs	r3, r3, r1
 8002128:	1ad1      	subs	r1, r2, r3
 800212a:	4b7f      	ldr	r3, [pc, #508]	; (8002328 <main+0x9d0>)
 800212c:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8002130:	2300      	movs	r3, #0
 8002132:	9301      	str	r3, [sp, #4]
 8002134:	2301      	movs	r3, #1
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	4b7c      	ldr	r3, [pc, #496]	; (800232c <main+0x9d4>)
 800213a:	218c      	movs	r1, #140	; 0x8c
 800213c:	2005      	movs	r0, #5
 800213e:	f003 fa41 	bl	80055c4 <LCD_Font>
						LCD_Font(5, 140, days[(7 + rtcDay - 1) % 7], &DejaVu_Sans_48, 1, BLUE);
 8002142:	4b73      	ldr	r3, [pc, #460]	; (8002310 <main+0x9b8>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	1d9a      	adds	r2, r3, #6
 8002148:	4b76      	ldr	r3, [pc, #472]	; (8002324 <main+0x9cc>)
 800214a:	fb83 1302 	smull	r1, r3, r3, r2
 800214e:	4413      	add	r3, r2
 8002150:	1099      	asrs	r1, r3, #2
 8002152:	17d3      	asrs	r3, r2, #31
 8002154:	1ac9      	subs	r1, r1, r3
 8002156:	460b      	mov	r3, r1
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	1a5b      	subs	r3, r3, r1
 800215c:	1ad1      	subs	r1, r2, r3
 800215e:	4b72      	ldr	r3, [pc, #456]	; (8002328 <main+0x9d0>)
 8002160:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8002164:	23ff      	movs	r3, #255	; 0xff
 8002166:	9301      	str	r3, [sp, #4]
 8002168:	2301      	movs	r3, #1
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	4b6f      	ldr	r3, [pc, #444]	; (800232c <main+0x9d4>)
 800216e:	218c      	movs	r1, #140	; 0x8c
 8002170:	2005      	movs	r0, #5
 8002172:	f003 fa27 	bl	80055c4 <LCD_Font>

						static const char* months[12] = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };

						LCD_Font(150, 140, months[(12 + rtcMonth - 2) % 12], &DejaVu_Sans_48, 1, BLACK);
 8002176:	4b68      	ldr	r3, [pc, #416]	; (8002318 <main+0x9c0>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	f103 010a 	add.w	r1, r3, #10
 800217e:	4b6c      	ldr	r3, [pc, #432]	; (8002330 <main+0x9d8>)
 8002180:	fb83 2301 	smull	r2, r3, r3, r1
 8002184:	105a      	asrs	r2, r3, #1
 8002186:	17cb      	asrs	r3, r1, #31
 8002188:	1ad2      	subs	r2, r2, r3
 800218a:	4613      	mov	r3, r2
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	4413      	add	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	1aca      	subs	r2, r1, r3
 8002194:	4b67      	ldr	r3, [pc, #412]	; (8002334 <main+0x9dc>)
 8002196:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800219a:	2300      	movs	r3, #0
 800219c:	9301      	str	r3, [sp, #4]
 800219e:	2301      	movs	r3, #1
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	4b62      	ldr	r3, [pc, #392]	; (800232c <main+0x9d4>)
 80021a4:	218c      	movs	r1, #140	; 0x8c
 80021a6:	2096      	movs	r0, #150	; 0x96
 80021a8:	f003 fa0c 	bl	80055c4 <LCD_Font>
						LCD_Font(150, 140, months[(12 + rtcMonth - 1) % 12], &DejaVu_Sans_48, 1, CYAN);
 80021ac:	4b5a      	ldr	r3, [pc, #360]	; (8002318 <main+0x9c0>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	f103 010b 	add.w	r1, r3, #11
 80021b4:	4b5e      	ldr	r3, [pc, #376]	; (8002330 <main+0x9d8>)
 80021b6:	fb83 2301 	smull	r2, r3, r3, r1
 80021ba:	105a      	asrs	r2, r3, #1
 80021bc:	17cb      	asrs	r3, r1, #31
 80021be:	1ad2      	subs	r2, r2, r3
 80021c0:	4613      	mov	r3, r2
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	4413      	add	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	1aca      	subs	r2, r1, r3
 80021ca:	4b5a      	ldr	r3, [pc, #360]	; (8002334 <main+0x9dc>)
 80021cc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80021d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021d4:	9301      	str	r3, [sp, #4]
 80021d6:	2301      	movs	r3, #1
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	4b54      	ldr	r3, [pc, #336]	; (800232c <main+0x9d4>)
 80021dc:	218c      	movs	r1, #140	; 0x8c
 80021de:	2096      	movs	r0, #150	; 0x96
 80021e0:	f003 f9f0 	bl	80055c4 <LCD_Font>

						sprintf(clockPrint, "%02d-%02d-%02d", rtcDateLast, rtcMonthLast, rtcYearLast);
 80021e4:	4b54      	ldr	r3, [pc, #336]	; (8002338 <main+0x9e0>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	461a      	mov	r2, r3
 80021ea:	4b54      	ldr	r3, [pc, #336]	; (800233c <main+0x9e4>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	4619      	mov	r1, r3
 80021f0:	4b53      	ldr	r3, [pc, #332]	; (8002340 <main+0x9e8>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	460b      	mov	r3, r1
 80021fc:	4951      	ldr	r1, [pc, #324]	; (8002344 <main+0x9ec>)
 80021fe:	f018 fa0b 	bl	801a618 <siprintf>
						LCD_Font(250, 140, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 8002202:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002206:	2300      	movs	r3, #0
 8002208:	9301      	str	r3, [sp, #4]
 800220a:	2301      	movs	r3, #1
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	4b47      	ldr	r3, [pc, #284]	; (800232c <main+0x9d4>)
 8002210:	218c      	movs	r1, #140	; 0x8c
 8002212:	20fa      	movs	r0, #250	; 0xfa
 8002214:	f003 f9d6 	bl	80055c4 <LCD_Font>
						sprintf(clockPrint, "%02d-%02d-%02d", rtcDate, rtcMonth, rtcYear);
 8002218:	4b3e      	ldr	r3, [pc, #248]	; (8002314 <main+0x9bc>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	461a      	mov	r2, r3
 800221e:	4b3e      	ldr	r3, [pc, #248]	; (8002318 <main+0x9c0>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	4619      	mov	r1, r3
 8002224:	4b3d      	ldr	r3, [pc, #244]	; (800231c <main+0x9c4>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	f107 0058 	add.w	r0, r7, #88	; 0x58
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	460b      	mov	r3, r1
 8002230:	4944      	ldr	r1, [pc, #272]	; (8002344 <main+0x9ec>)
 8002232:	f018 f9f1 	bl	801a618 <siprintf>
						LCD_Font(250, 140, clockPrint, &DejaVu_Sans_48, 1, CYAN);
 8002236:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800223a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800223e:	9301      	str	r3, [sp, #4]
 8002240:	2301      	movs	r3, #1
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	4b39      	ldr	r3, [pc, #228]	; (800232c <main+0x9d4>)
 8002246:	218c      	movs	r1, #140	; 0x8c
 8002248:	20fa      	movs	r0, #250	; 0xfa
 800224a:	f003 f9bb 	bl	80055c4 <LCD_Font>

						rtcDayLast = rtcDay;
 800224e:	4b30      	ldr	r3, [pc, #192]	; (8002310 <main+0x9b8>)
 8002250:	781a      	ldrb	r2, [r3, #0]
 8002252:	4b33      	ldr	r3, [pc, #204]	; (8002320 <main+0x9c8>)
 8002254:	701a      	strb	r2, [r3, #0]
						rtcDateLast = rtcDate;
 8002256:	4b2f      	ldr	r3, [pc, #188]	; (8002314 <main+0x9bc>)
 8002258:	781a      	ldrb	r2, [r3, #0]
 800225a:	4b37      	ldr	r3, [pc, #220]	; (8002338 <main+0x9e0>)
 800225c:	701a      	strb	r2, [r3, #0]
					}
					rtcMonthLast = rtcMonth;
 800225e:	4b2e      	ldr	r3, [pc, #184]	; (8002318 <main+0x9c0>)
 8002260:	781a      	ldrb	r2, [r3, #0]
 8002262:	4b36      	ldr	r3, [pc, #216]	; (800233c <main+0x9e4>)
 8002264:	701a      	strb	r2, [r3, #0]
					rtcYearLast = rtcYear;
 8002266:	4b2d      	ldr	r3, [pc, #180]	; (800231c <main+0x9c4>)
 8002268:	781a      	ldrb	r2, [r3, #0]
 800226a:	4b35      	ldr	r3, [pc, #212]	; (8002340 <main+0x9e8>)
 800226c:	701a      	strb	r2, [r3, #0]
					rtcHrsLast = rtcHrs;
 800226e:	4b23      	ldr	r3, [pc, #140]	; (80022fc <main+0x9a4>)
 8002270:	781a      	ldrb	r2, [r3, #0]
 8002272:	4b26      	ldr	r3, [pc, #152]	; (800230c <main+0x9b4>)
 8002274:	701a      	strb	r2, [r3, #0]
				}
				rtcMinLast = rtcMin;
 8002276:	4b20      	ldr	r3, [pc, #128]	; (80022f8 <main+0x9a0>)
 8002278:	781a      	ldrb	r2, [r3, #0]
 800227a:	4b1e      	ldr	r3, [pc, #120]	; (80022f4 <main+0x99c>)
 800227c:	701a      	strb	r2, [r3, #0]
				temperature = BME280_getTemperature(-1);
 800227e:	f04f 30ff 	mov.w	r0, #4294967295
 8002282:	f7fe f8b1 	bl	80003e8 <BME280_getTemperature>
 8002286:	ee10 3a10 	vmov	r3, s0
 800228a:	4618      	mov	r0, r3
 800228c:	f016 fd8c 	bl	8018da8 <__aeabi_f2d>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	492c      	ldr	r1, [pc, #176]	; (8002348 <main+0x9f0>)
 8002296:	e9c1 2300 	strd	r2, r3, [r1]
				humidity = BME280_getHumidity(-1);
 800229a:	f04f 30ff 	mov.w	r0, #4294967295
 800229e:	f7fe f91b 	bl	80004d8 <BME280_getHumidity>
 80022a2:	ee10 3a10 	vmov	r3, s0
 80022a6:	4618      	mov	r0, r3
 80022a8:	f016 fd7e 	bl	8018da8 <__aeabi_f2d>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	4926      	ldr	r1, [pc, #152]	; (800234c <main+0x9f4>)
 80022b2:	e9c1 2300 	strd	r2, r3, [r1]
				pressure = (uint16_t)BME280_getPressure();
 80022b6:	f7fe f9af 	bl	8000618 <BME280_getPressure>
 80022ba:	eef0 7a40 	vmov.f32	s15, s0
 80022be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022c2:	ee17 3a90 	vmov	r3, s15
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	4b21      	ldr	r3, [pc, #132]	; (8002350 <main+0x9f8>)
 80022ca:	801a      	strh	r2, [r3, #0]

				if (pressure > 900 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 80022cc:	4b20      	ldr	r3, [pc, #128]	; (8002350 <main+0x9f8>)
 80022ce:	881b      	ldrh	r3, [r3, #0]
 80022d0:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80022d4:	f240 8737 	bls.w	8003146 <main+0x17ee>
 80022d8:	4b1d      	ldr	r3, [pc, #116]	; (8002350 <main+0x9f8>)
 80022da:	881b      	ldrh	r3, [r3, #0]
 80022dc:	f240 424b 	movw	r2, #1099	; 0x44b
 80022e0:	4293      	cmp	r3, r2
 80022e2:	f200 8730 	bhi.w	8003146 <main+0x17ee>
 80022e6:	4b18      	ldr	r3, [pc, #96]	; (8002348 <main+0x9f0>)
 80022e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022ec:	e032      	b.n	8002354 <main+0x9fc>
 80022ee:	bf00      	nop
 80022f0:	40020800 	.word	0x40020800
 80022f4:	20000001 	.word	0x20000001
 80022f8:	2000056e 	.word	0x2000056e
 80022fc:	2000056f 	.word	0x2000056f
 8002300:	08052134 	.word	0x08052134
 8002304:	08051f48 	.word	0x08051f48
 8002308:	00ffa500 	.word	0x00ffa500
 800230c:	20000002 	.word	0x20000002
 8002310:	20000570 	.word	0x20000570
 8002314:	20000571 	.word	0x20000571
 8002318:	20000572 	.word	0x20000572
 800231c:	20000573 	.word	0x20000573
 8002320:	20000574 	.word	0x20000574
 8002324:	92492493 	.word	0x92492493
 8002328:	20000008 	.word	0x20000008
 800232c:	080298b0 	.word	0x080298b0
 8002330:	2aaaaaab 	.word	0x2aaaaaab
 8002334:	20000024 	.word	0x20000024
 8002338:	20000575 	.word	0x20000575
 800233c:	20000576 	.word	0x20000576
 8002340:	20000577 	.word	0x20000577
 8002344:	0805213c 	.word	0x0805213c
 8002348:	20000578 	.word	0x20000578
 800234c:	20000588 	.word	0x20000588
 8002350:	200005b8 	.word	0x200005b8
 8002354:	f04f 0200 	mov.w	r2, #0
 8002358:	4b8a      	ldr	r3, [pc, #552]	; (8002584 <main+0xc2c>)
 800235a:	f016 ffef 	bl	801933c <__aeabi_dcmplt>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 86f0 	beq.w	8003146 <main+0x17ee>
 8002366:	4b88      	ldr	r3, [pc, #544]	; (8002588 <main+0xc30>)
 8002368:	e9d3 0100 	ldrd	r0, r1, [r3]
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	4b86      	ldr	r3, [pc, #536]	; (800258c <main+0xc34>)
 8002372:	f017 f801 	bl	8019378 <__aeabi_dcmpgt>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 86e4 	beq.w	8003146 <main+0x17ee>
 800237e:	4b84      	ldr	r3, [pc, #528]	; (8002590 <main+0xc38>)
 8002380:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002384:	f04f 0200 	mov.w	r2, #0
 8002388:	f04f 0300 	mov.w	r3, #0
 800238c:	f016 fff4 	bl	8019378 <__aeabi_dcmpgt>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	f000 86d7 	beq.w	8003146 <main+0x17ee>
 8002398:	4b7d      	ldr	r3, [pc, #500]	; (8002590 <main+0xc38>)
 800239a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800239e:	f04f 0200 	mov.w	r2, #0
 80023a2:	4b7c      	ldr	r3, [pc, #496]	; (8002594 <main+0xc3c>)
 80023a4:	f016 ffca 	bl	801933c <__aeabi_dcmplt>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 86cb 	beq.w	8003146 <main+0x17ee>

					if (temperature != temperatureLast) {
 80023b0:	4b75      	ldr	r3, [pc, #468]	; (8002588 <main+0xc30>)
 80023b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023b6:	4b78      	ldr	r3, [pc, #480]	; (8002598 <main+0xc40>)
 80023b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023bc:	f016 ffb4 	bl	8019328 <__aeabi_dcmpeq>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f040 8120 	bne.w	8002608 <main+0xcb0>

						char weatherPrintT[8];

						if (temperatureLast >= 10 || (temperatureLast < 0 && temperatureLast > -10)) {
 80023c8:	4b73      	ldr	r3, [pc, #460]	; (8002598 <main+0xc40>)
 80023ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023ce:	f04f 0200 	mov.w	r2, #0
 80023d2:	4b72      	ldr	r3, [pc, #456]	; (800259c <main+0xc44>)
 80023d4:	f016 ffc6 	bl	8019364 <__aeabi_dcmpge>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d116      	bne.n	800240c <main+0xab4>
 80023de:	4b6e      	ldr	r3, [pc, #440]	; (8002598 <main+0xc40>)
 80023e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023e4:	f04f 0200 	mov.w	r2, #0
 80023e8:	f04f 0300 	mov.w	r3, #0
 80023ec:	f016 ffa6 	bl	801933c <__aeabi_dcmplt>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d01c      	beq.n	8002430 <main+0xad8>
 80023f6:	4b68      	ldr	r3, [pc, #416]	; (8002598 <main+0xc40>)
 80023f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023fc:	f04f 0200 	mov.w	r2, #0
 8002400:	4b67      	ldr	r3, [pc, #412]	; (80025a0 <main+0xc48>)
 8002402:	f016 ffb9 	bl	8019378 <__aeabi_dcmpgt>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d011      	beq.n	8002430 <main+0xad8>
							sprintf(weatherPrintT, "%.1f'C", temperatureLast);
 800240c:	4b62      	ldr	r3, [pc, #392]	; (8002598 <main+0xc40>)
 800240e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002412:	1d38      	adds	r0, r7, #4
 8002414:	4963      	ldr	r1, [pc, #396]	; (80025a4 <main+0xc4c>)
 8002416:	f018 f8ff 	bl	801a618 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 800241a:	1d3a      	adds	r2, r7, #4
 800241c:	2300      	movs	r3, #0
 800241e:	9301      	str	r3, [sp, #4]
 8002420:	2301      	movs	r3, #1
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	4b60      	ldr	r3, [pc, #384]	; (80025a8 <main+0xc50>)
 8002426:	21bb      	movs	r1, #187	; 0xbb
 8002428:	2001      	movs	r0, #1
 800242a:	f003 f8cb 	bl	80055c4 <LCD_Font>
 800242e:	e04c      	b.n	80024ca <main+0xb72>
						}
						else if (temperatureLast < 10 && temperatureLast > 0) {
 8002430:	4b59      	ldr	r3, [pc, #356]	; (8002598 <main+0xc40>)
 8002432:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002436:	f04f 0200 	mov.w	r2, #0
 800243a:	4b58      	ldr	r3, [pc, #352]	; (800259c <main+0xc44>)
 800243c:	f016 ff7e 	bl	801933c <__aeabi_dcmplt>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d01d      	beq.n	8002482 <main+0xb2a>
 8002446:	4b54      	ldr	r3, [pc, #336]	; (8002598 <main+0xc40>)
 8002448:	e9d3 0100 	ldrd	r0, r1, [r3]
 800244c:	f04f 0200 	mov.w	r2, #0
 8002450:	f04f 0300 	mov.w	r3, #0
 8002454:	f016 ff90 	bl	8019378 <__aeabi_dcmpgt>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d011      	beq.n	8002482 <main+0xb2a>
							sprintf(weatherPrintT, "%.1f'C", temperatureLast);
 800245e:	4b4e      	ldr	r3, [pc, #312]	; (8002598 <main+0xc40>)
 8002460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002464:	1d38      	adds	r0, r7, #4
 8002466:	494f      	ldr	r1, [pc, #316]	; (80025a4 <main+0xc4c>)
 8002468:	f018 f8d6 	bl	801a618 <siprintf>
							LCD_Font(27, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 800246c:	1d3a      	adds	r2, r7, #4
 800246e:	2300      	movs	r3, #0
 8002470:	9301      	str	r3, [sp, #4]
 8002472:	2301      	movs	r3, #1
 8002474:	9300      	str	r3, [sp, #0]
 8002476:	4b4c      	ldr	r3, [pc, #304]	; (80025a8 <main+0xc50>)
 8002478:	21bb      	movs	r1, #187	; 0xbb
 800247a:	201b      	movs	r0, #27
 800247c:	f003 f8a2 	bl	80055c4 <LCD_Font>
 8002480:	e023      	b.n	80024ca <main+0xb72>
						}
						else if (temperatureLast <= -10) {
 8002482:	4b45      	ldr	r3, [pc, #276]	; (8002598 <main+0xc40>)
 8002484:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002488:	f04f 0200 	mov.w	r2, #0
 800248c:	4b44      	ldr	r3, [pc, #272]	; (80025a0 <main+0xc48>)
 800248e:	f016 ff5f 	bl	8019350 <__aeabi_dcmple>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d018      	beq.n	80024ca <main+0xb72>
							sprintf(weatherPrintT, "%2d'C", (int8_t)temperatureLast);
 8002498:	4b3f      	ldr	r3, [pc, #252]	; (8002598 <main+0xc40>)
 800249a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249e:	4610      	mov	r0, r2
 80024a0:	4619      	mov	r1, r3
 80024a2:	f016 ff89 	bl	80193b8 <__aeabi_d2iz>
 80024a6:	4603      	mov	r3, r0
 80024a8:	b25b      	sxtb	r3, r3
 80024aa:	461a      	mov	r2, r3
 80024ac:	1d3b      	adds	r3, r7, #4
 80024ae:	493f      	ldr	r1, [pc, #252]	; (80025ac <main+0xc54>)
 80024b0:	4618      	mov	r0, r3
 80024b2:	f018 f8b1 	bl	801a618 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 80024b6:	1d3a      	adds	r2, r7, #4
 80024b8:	2300      	movs	r3, #0
 80024ba:	9301      	str	r3, [sp, #4]
 80024bc:	2301      	movs	r3, #1
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	4b39      	ldr	r3, [pc, #228]	; (80025a8 <main+0xc50>)
 80024c2:	21bb      	movs	r1, #187	; 0xbb
 80024c4:	2001      	movs	r0, #1
 80024c6:	f003 f87d 	bl	80055c4 <LCD_Font>
						}

						if (temperature >= 10 || (temperature < 0 && temperature > -10)) {
 80024ca:	4b2f      	ldr	r3, [pc, #188]	; (8002588 <main+0xc30>)
 80024cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024d0:	f04f 0200 	mov.w	r2, #0
 80024d4:	4b31      	ldr	r3, [pc, #196]	; (800259c <main+0xc44>)
 80024d6:	f016 ff45 	bl	8019364 <__aeabi_dcmpge>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d116      	bne.n	800250e <main+0xbb6>
 80024e0:	4b29      	ldr	r3, [pc, #164]	; (8002588 <main+0xc30>)
 80024e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024e6:	f04f 0200 	mov.w	r2, #0
 80024ea:	f04f 0300 	mov.w	r3, #0
 80024ee:	f016 ff25 	bl	801933c <__aeabi_dcmplt>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d01c      	beq.n	8002532 <main+0xbda>
 80024f8:	4b23      	ldr	r3, [pc, #140]	; (8002588 <main+0xc30>)
 80024fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024fe:	f04f 0200 	mov.w	r2, #0
 8002502:	4b27      	ldr	r3, [pc, #156]	; (80025a0 <main+0xc48>)
 8002504:	f016 ff38 	bl	8019378 <__aeabi_dcmpgt>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d011      	beq.n	8002532 <main+0xbda>
							sprintf(weatherPrintT, "%.1f'C", temperature);
 800250e:	4b1e      	ldr	r3, [pc, #120]	; (8002588 <main+0xc30>)
 8002510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002514:	1d38      	adds	r0, r7, #4
 8002516:	4923      	ldr	r1, [pc, #140]	; (80025a4 <main+0xc4c>)
 8002518:	f018 f87e 	bl	801a618 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 800251c:	1d3a      	adds	r2, r7, #4
 800251e:	4b24      	ldr	r3, [pc, #144]	; (80025b0 <main+0xc58>)
 8002520:	9301      	str	r3, [sp, #4]
 8002522:	2301      	movs	r3, #1
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	4b20      	ldr	r3, [pc, #128]	; (80025a8 <main+0xc50>)
 8002528:	21bb      	movs	r1, #187	; 0xbb
 800252a:	2001      	movs	r0, #1
 800252c:	f003 f84a 	bl	80055c4 <LCD_Font>
 8002530:	e064      	b.n	80025fc <main+0xca4>
						}
						else if (temperature < 10 && temperature > 0) {
 8002532:	4b15      	ldr	r3, [pc, #84]	; (8002588 <main+0xc30>)
 8002534:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002538:	f04f 0200 	mov.w	r2, #0
 800253c:	4b17      	ldr	r3, [pc, #92]	; (800259c <main+0xc44>)
 800253e:	f016 fefd 	bl	801933c <__aeabi_dcmplt>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d035      	beq.n	80025b4 <main+0xc5c>
 8002548:	4b0f      	ldr	r3, [pc, #60]	; (8002588 <main+0xc30>)
 800254a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800254e:	f04f 0200 	mov.w	r2, #0
 8002552:	f04f 0300 	mov.w	r3, #0
 8002556:	f016 ff0f 	bl	8019378 <__aeabi_dcmpgt>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d029      	beq.n	80025b4 <main+0xc5c>
							sprintf(weatherPrintT, "%.1f'C", temperature);
 8002560:	4b09      	ldr	r3, [pc, #36]	; (8002588 <main+0xc30>)
 8002562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002566:	1d38      	adds	r0, r7, #4
 8002568:	490e      	ldr	r1, [pc, #56]	; (80025a4 <main+0xc4c>)
 800256a:	f018 f855 	bl	801a618 <siprintf>
							LCD_Font(27, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 800256e:	1d3a      	adds	r2, r7, #4
 8002570:	4b0f      	ldr	r3, [pc, #60]	; (80025b0 <main+0xc58>)
 8002572:	9301      	str	r3, [sp, #4]
 8002574:	2301      	movs	r3, #1
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <main+0xc50>)
 800257a:	21bb      	movs	r1, #187	; 0xbb
 800257c:	201b      	movs	r0, #27
 800257e:	f003 f821 	bl	80055c4 <LCD_Font>
 8002582:	e03b      	b.n	80025fc <main+0xca4>
 8002584:	40554000 	.word	0x40554000
 8002588:	20000578 	.word	0x20000578
 800258c:	c0440000 	.word	0xc0440000
 8002590:	20000588 	.word	0x20000588
 8002594:	40590000 	.word	0x40590000
 8002598:	20000580 	.word	0x20000580
 800259c:	40240000 	.word	0x40240000
 80025a0:	c0240000 	.word	0xc0240000
 80025a4:	0805214c 	.word	0x0805214c
 80025a8:	080298b0 	.word	0x080298b0
 80025ac:	08052154 	.word	0x08052154
 80025b0:	00ffa500 	.word	0x00ffa500
						}
						else if (temperature <= -10) {
 80025b4:	4ba4      	ldr	r3, [pc, #656]	; (8002848 <main+0xef0>)
 80025b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025ba:	f04f 0200 	mov.w	r2, #0
 80025be:	4ba3      	ldr	r3, [pc, #652]	; (800284c <main+0xef4>)
 80025c0:	f016 fec6 	bl	8019350 <__aeabi_dcmple>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d018      	beq.n	80025fc <main+0xca4>
							sprintf(weatherPrintT, "%2d'C", (int8_t)temperature);
 80025ca:	4b9f      	ldr	r3, [pc, #636]	; (8002848 <main+0xef0>)
 80025cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d0:	4610      	mov	r0, r2
 80025d2:	4619      	mov	r1, r3
 80025d4:	f016 fef0 	bl	80193b8 <__aeabi_d2iz>
 80025d8:	4603      	mov	r3, r0
 80025da:	b25b      	sxtb	r3, r3
 80025dc:	461a      	mov	r2, r3
 80025de:	1d3b      	adds	r3, r7, #4
 80025e0:	499b      	ldr	r1, [pc, #620]	; (8002850 <main+0xef8>)
 80025e2:	4618      	mov	r0, r3
 80025e4:	f018 f818 	bl	801a618 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 80025e8:	1d3a      	adds	r2, r7, #4
 80025ea:	4b9a      	ldr	r3, [pc, #616]	; (8002854 <main+0xefc>)
 80025ec:	9301      	str	r3, [sp, #4]
 80025ee:	2301      	movs	r3, #1
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	4b99      	ldr	r3, [pc, #612]	; (8002858 <main+0xf00>)
 80025f4:	21bb      	movs	r1, #187	; 0xbb
 80025f6:	2001      	movs	r0, #1
 80025f8:	f002 ffe4 	bl	80055c4 <LCD_Font>
						}

						temperatureLast = temperature;
 80025fc:	4b92      	ldr	r3, [pc, #584]	; (8002848 <main+0xef0>)
 80025fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002602:	4996      	ldr	r1, [pc, #600]	; (800285c <main+0xf04>)
 8002604:	e9c1 2300 	strd	r2, r3, [r1]
					}

					if (humidity != humidityLast) {
 8002608:	4b95      	ldr	r3, [pc, #596]	; (8002860 <main+0xf08>)
 800260a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800260e:	4b95      	ldr	r3, [pc, #596]	; (8002864 <main+0xf0c>)
 8002610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002614:	f016 fe88 	bl	8019328 <__aeabi_dcmpeq>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d15b      	bne.n	80026d6 <main+0xd7e>

						char weatherPrintH[7];

						sprintf(weatherPrintH, "%.1f'H", humidityLast);
 800261e:	4b91      	ldr	r3, [pc, #580]	; (8002864 <main+0xf0c>)
 8002620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002624:	f107 000c 	add.w	r0, r7, #12
 8002628:	498f      	ldr	r1, [pc, #572]	; (8002868 <main+0xf10>)
 800262a:	f017 fff5 	bl	801a618 <siprintf>
						if (humidityLast >= 10)
 800262e:	4b8d      	ldr	r3, [pc, #564]	; (8002864 <main+0xf0c>)
 8002630:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002634:	f04f 0200 	mov.w	r2, #0
 8002638:	4b8c      	ldr	r3, [pc, #560]	; (800286c <main+0xf14>)
 800263a:	f016 fe93 	bl	8019364 <__aeabi_dcmpge>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00b      	beq.n	800265c <main+0xd04>
							LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 8002644:	f107 020c 	add.w	r2, r7, #12
 8002648:	2300      	movs	r3, #0
 800264a:	9301      	str	r3, [sp, #4]
 800264c:	2301      	movs	r3, #1
 800264e:	9300      	str	r3, [sp, #0]
 8002650:	4b81      	ldr	r3, [pc, #516]	; (8002858 <main+0xf00>)
 8002652:	21bb      	movs	r1, #187	; 0xbb
 8002654:	20a0      	movs	r0, #160	; 0xa0
 8002656:	f002 ffb5 	bl	80055c4 <LCD_Font>
 800265a:	e00a      	b.n	8002672 <main+0xd1a>
						else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 800265c:	f107 020c 	add.w	r2, r7, #12
 8002660:	2300      	movs	r3, #0
 8002662:	9301      	str	r3, [sp, #4]
 8002664:	2301      	movs	r3, #1
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	4b7b      	ldr	r3, [pc, #492]	; (8002858 <main+0xf00>)
 800266a:	21bb      	movs	r1, #187	; 0xbb
 800266c:	20ba      	movs	r0, #186	; 0xba
 800266e:	f002 ffa9 	bl	80055c4 <LCD_Font>

						sprintf(weatherPrintH, "%.1f'H", humidity);
 8002672:	4b7b      	ldr	r3, [pc, #492]	; (8002860 <main+0xf08>)
 8002674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002678:	f107 000c 	add.w	r0, r7, #12
 800267c:	497a      	ldr	r1, [pc, #488]	; (8002868 <main+0xf10>)
 800267e:	f017 ffcb 	bl	801a618 <siprintf>
						if (humidity >= 10)
 8002682:	4b77      	ldr	r3, [pc, #476]	; (8002860 <main+0xf08>)
 8002684:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002688:	f04f 0200 	mov.w	r2, #0
 800268c:	4b77      	ldr	r3, [pc, #476]	; (800286c <main+0xf14>)
 800268e:	f016 fe69 	bl	8019364 <__aeabi_dcmpge>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00c      	beq.n	80026b2 <main+0xd5a>
							LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 8002698:	f107 020c 	add.w	r2, r7, #12
 800269c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026a0:	9301      	str	r3, [sp, #4]
 80026a2:	2301      	movs	r3, #1
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	4b6c      	ldr	r3, [pc, #432]	; (8002858 <main+0xf00>)
 80026a8:	21bb      	movs	r1, #187	; 0xbb
 80026aa:	20a0      	movs	r0, #160	; 0xa0
 80026ac:	f002 ff8a 	bl	80055c4 <LCD_Font>
 80026b0:	e00b      	b.n	80026ca <main+0xd72>
						else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 80026b2:	f107 020c 	add.w	r2, r7, #12
 80026b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026ba:	9301      	str	r3, [sp, #4]
 80026bc:	2301      	movs	r3, #1
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	4b65      	ldr	r3, [pc, #404]	; (8002858 <main+0xf00>)
 80026c2:	21bb      	movs	r1, #187	; 0xbb
 80026c4:	20ba      	movs	r0, #186	; 0xba
 80026c6:	f002 ff7d 	bl	80055c4 <LCD_Font>

						humidityLast = humidity;
 80026ca:	4b65      	ldr	r3, [pc, #404]	; (8002860 <main+0xf08>)
 80026cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d0:	4964      	ldr	r1, [pc, #400]	; (8002864 <main+0xf0c>)
 80026d2:	e9c1 2300 	strd	r2, r3, [r1]
					}

					if (pressureLast != pressure) {
 80026d6:	4b66      	ldr	r3, [pc, #408]	; (8002870 <main+0xf18>)
 80026d8:	881a      	ldrh	r2, [r3, #0]
 80026da:	4b66      	ldr	r3, [pc, #408]	; (8002874 <main+0xf1c>)
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d06d      	beq.n	80027be <main+0xe66>

						char weatherPrintP[11];

						if (pressureLast >= 1000) sprintf(weatherPrintP, "%02dP", pressureLast);
 80026e2:	4b63      	ldr	r3, [pc, #396]	; (8002870 <main+0xf18>)
 80026e4:	881b      	ldrh	r3, [r3, #0]
 80026e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026ea:	d308      	bcc.n	80026fe <main+0xda6>
 80026ec:	4b60      	ldr	r3, [pc, #384]	; (8002870 <main+0xf18>)
 80026ee:	881b      	ldrh	r3, [r3, #0]
 80026f0:	461a      	mov	r2, r3
 80026f2:	f107 0314 	add.w	r3, r7, #20
 80026f6:	4960      	ldr	r1, [pc, #384]	; (8002878 <main+0xf20>)
 80026f8:	4618      	mov	r0, r3
 80026fa:	f017 ff8d 	bl	801a618 <siprintf>
						LCD_Font(320, 187, weatherPrintP, &DejaVu_Sans_48, 1, BLACK);
 80026fe:	f107 0214 	add.w	r2, r7, #20
 8002702:	2300      	movs	r3, #0
 8002704:	9301      	str	r3, [sp, #4]
 8002706:	2301      	movs	r3, #1
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	4b53      	ldr	r3, [pc, #332]	; (8002858 <main+0xf00>)
 800270c:	21bb      	movs	r1, #187	; 0xbb
 800270e:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8002712:	f002 ff57 	bl	80055c4 <LCD_Font>

						if (pressureLast < 1000) sprintf(weatherPrintP, " %02dP", pressureLast);
 8002716:	4b56      	ldr	r3, [pc, #344]	; (8002870 <main+0xf18>)
 8002718:	881b      	ldrh	r3, [r3, #0]
 800271a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800271e:	d208      	bcs.n	8002732 <main+0xdda>
 8002720:	4b53      	ldr	r3, [pc, #332]	; (8002870 <main+0xf18>)
 8002722:	881b      	ldrh	r3, [r3, #0]
 8002724:	461a      	mov	r2, r3
 8002726:	f107 0314 	add.w	r3, r7, #20
 800272a:	4954      	ldr	r1, [pc, #336]	; (800287c <main+0xf24>)
 800272c:	4618      	mov	r0, r3
 800272e:	f017 ff73 	bl	801a618 <siprintf>
						LCD_Font(320, 187, weatherPrintP, &DejaVu_Sans_48, 1, BLACK);
 8002732:	f107 0214 	add.w	r2, r7, #20
 8002736:	2300      	movs	r3, #0
 8002738:	9301      	str	r3, [sp, #4]
 800273a:	2301      	movs	r3, #1
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	4b46      	ldr	r3, [pc, #280]	; (8002858 <main+0xf00>)
 8002740:	21bb      	movs	r1, #187	; 0xbb
 8002742:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8002746:	f002 ff3d 	bl	80055c4 <LCD_Font>

						pressureLast = pressure;
 800274a:	4b4a      	ldr	r3, [pc, #296]	; (8002874 <main+0xf1c>)
 800274c:	881a      	ldrh	r2, [r3, #0]
 800274e:	4b48      	ldr	r3, [pc, #288]	; (8002870 <main+0xf18>)
 8002750:	801a      	strh	r2, [r3, #0]

						if (pressureLast >= 1000) sprintf(weatherPrintP, "%02dP", pressureLast);
 8002752:	4b47      	ldr	r3, [pc, #284]	; (8002870 <main+0xf18>)
 8002754:	881b      	ldrh	r3, [r3, #0]
 8002756:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800275a:	d308      	bcc.n	800276e <main+0xe16>
 800275c:	4b44      	ldr	r3, [pc, #272]	; (8002870 <main+0xf18>)
 800275e:	881b      	ldrh	r3, [r3, #0]
 8002760:	461a      	mov	r2, r3
 8002762:	f107 0314 	add.w	r3, r7, #20
 8002766:	4944      	ldr	r1, [pc, #272]	; (8002878 <main+0xf20>)
 8002768:	4618      	mov	r0, r3
 800276a:	f017 ff55 	bl	801a618 <siprintf>
						LCD_Font(320, 187, weatherPrintP, &DejaVu_Sans_48, 1, GREEN);
 800276e:	f107 0214 	add.w	r2, r7, #20
 8002772:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8002776:	9301      	str	r3, [sp, #4]
 8002778:	2301      	movs	r3, #1
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	4b36      	ldr	r3, [pc, #216]	; (8002858 <main+0xf00>)
 800277e:	21bb      	movs	r1, #187	; 0xbb
 8002780:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8002784:	f002 ff1e 	bl	80055c4 <LCD_Font>

						if (pressureLast < 1000) sprintf(weatherPrintP, " %02dP", pressureLast);
 8002788:	4b39      	ldr	r3, [pc, #228]	; (8002870 <main+0xf18>)
 800278a:	881b      	ldrh	r3, [r3, #0]
 800278c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002790:	d208      	bcs.n	80027a4 <main+0xe4c>
 8002792:	4b37      	ldr	r3, [pc, #220]	; (8002870 <main+0xf18>)
 8002794:	881b      	ldrh	r3, [r3, #0]
 8002796:	461a      	mov	r2, r3
 8002798:	f107 0314 	add.w	r3, r7, #20
 800279c:	4937      	ldr	r1, [pc, #220]	; (800287c <main+0xf24>)
 800279e:	4618      	mov	r0, r3
 80027a0:	f017 ff3a 	bl	801a618 <siprintf>
						LCD_Font(320, 187, weatherPrintP, &DejaVu_Sans_48, 1, GREEN);
 80027a4:	f107 0214 	add.w	r2, r7, #20
 80027a8:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80027ac:	9301      	str	r3, [sp, #4]
 80027ae:	2301      	movs	r3, #1
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	4b29      	ldr	r3, [pc, #164]	; (8002858 <main+0xf00>)
 80027b4:	21bb      	movs	r1, #187	; 0xbb
 80027b6:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80027ba:	f002 ff03 	bl	80055c4 <LCD_Font>
					}

					if (AT24XX_Read(0) != rtcHrs) {
 80027be:	2000      	movs	r0, #0
 80027c0:	f7fd fd66 	bl	8000290 <AT24XX_Read>
 80027c4:	4603      	mov	r3, r0
 80027c6:	461a      	mov	r2, r3
 80027c8:	4b2d      	ldr	r3, [pc, #180]	; (8002880 <main+0xf28>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	f000 81e1 	beq.w	8002b94 <main+0x123c>

						AT24XX_Update(0, rtcHrs);
 80027d2:	4b2b      	ldr	r3, [pc, #172]	; (8002880 <main+0xf28>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	4619      	mov	r1, r3
 80027d8:	2000      	movs	r0, #0
 80027da:	f7fd fd83 	bl	80002e4 <AT24XX_Update>

						for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 80027de:	2300      	movs	r3, #0
 80027e0:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 80027e4:	e027      	b.n	8002836 <main+0xede>
 80027e6:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80027ea:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7fd fd4b 	bl	8000290 <AT24XX_Read>
 80027fa:	4603      	mov	r3, r0
 80027fc:	461c      	mov	r4, r3
 80027fe:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	b29b      	uxth	r3, r3
 8002806:	f203 33e9 	addw	r3, r3, #1001	; 0x3e9
 800280a:	b29b      	uxth	r3, r3
 800280c:	4618      	mov	r0, r3
 800280e:	f7fd fd3f 	bl	8000290 <AT24XX_Read>
 8002812:	4603      	mov	r3, r0
 8002814:	4619      	mov	r1, r3
 8002816:	4620      	mov	r0, r4
 8002818:	f7ff f860 	bl	80018dc <byteS>
 800281c:	4603      	mov	r3, r0
 800281e:	461a      	mov	r2, r3
 8002820:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8002824:	b211      	sxth	r1, r2
 8002826:	4a17      	ldr	r2, [pc, #92]	; (8002884 <main+0xf2c>)
 8002828:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800282c:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8002830:	3301      	adds	r3, #1
 8002832:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8002836:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800283a:	2b9a      	cmp	r3, #154	; 0x9a
 800283c:	d9d3      	bls.n	80027e6 <main+0xe8e>
						for (uint16_t i = 154; i > 0; i--) hT[i] = hT[i - 1];
 800283e:	239a      	movs	r3, #154	; 0x9a
 8002840:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
 8002844:	e030      	b.n	80028a8 <main+0xf50>
 8002846:	bf00      	nop
 8002848:	20000578 	.word	0x20000578
 800284c:	c0240000 	.word	0xc0240000
 8002850:	08052154 	.word	0x08052154
 8002854:	00ffa500 	.word	0x00ffa500
 8002858:	080298b0 	.word	0x080298b0
 800285c:	20000580 	.word	0x20000580
 8002860:	20000588 	.word	0x20000588
 8002864:	20000590 	.word	0x20000590
 8002868:	0805215c 	.word	0x0805215c
 800286c:	40240000 	.word	0x40240000
 8002870:	200005ba 	.word	0x200005ba
 8002874:	200005b8 	.word	0x200005b8
 8002878:	08052164 	.word	0x08052164
 800287c:	0805216c 	.word	0x0805216c
 8002880:	2000056f 	.word	0x2000056f
 8002884:	200005bc 	.word	0x200005bc
 8002888:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800288c:	1e5a      	subs	r2, r3, #1
 800288e:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8002892:	499e      	ldr	r1, [pc, #632]	; (8002b0c <main+0x11b4>)
 8002894:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8002898:	4a9c      	ldr	r2, [pc, #624]	; (8002b0c <main+0x11b4>)
 800289a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800289e:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80028a2:	3b01      	subs	r3, #1
 80028a4:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
 80028a8:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1eb      	bne.n	8002888 <main+0xf30>
						hT[0] = (uint16_t) (temperature * 10);
 80028b0:	4b97      	ldr	r3, [pc, #604]	; (8002b10 <main+0x11b8>)
 80028b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028b6:	f04f 0200 	mov.w	r2, #0
 80028ba:	4b96      	ldr	r3, [pc, #600]	; (8002b14 <main+0x11bc>)
 80028bc:	f016 facc 	bl	8018e58 <__aeabi_dmul>
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	4610      	mov	r0, r2
 80028c6:	4619      	mov	r1, r3
 80028c8:	f016 fd9e 	bl	8019408 <__aeabi_d2uiz>
 80028cc:	4603      	mov	r3, r0
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	b21a      	sxth	r2, r3
 80028d2:	4b8e      	ldr	r3, [pc, #568]	; (8002b0c <main+0x11b4>)
 80028d4:	801a      	strh	r2, [r3, #0]

						for (uint16_t i = 0; i < 155; i++) {
 80028d6:	2300      	movs	r3, #0
 80028d8:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
 80028dc:	e02e      	b.n	800293c <main+0xfe4>
							AT24XX_Update(i * 2 + 1000, byteL(hT[i]));
 80028de:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 80028e2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	b29c      	uxth	r4, r3
 80028ec:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 80028f0:	4a86      	ldr	r2, [pc, #536]	; (8002b0c <main+0x11b4>)
 80028f2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7fe ffd3 	bl	80018a4 <byteL>
 80028fe:	4603      	mov	r3, r0
 8002900:	4619      	mov	r1, r3
 8002902:	4620      	mov	r0, r4
 8002904:	f7fd fcee 	bl	80002e4 <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 1000, byteH(hT[i]));
 8002908:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	b29b      	uxth	r3, r3
 8002910:	f203 33e9 	addw	r3, r3, #1001	; 0x3e9
 8002914:	b29c      	uxth	r4, r3
 8002916:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 800291a:	4a7c      	ldr	r2, [pc, #496]	; (8002b0c <main+0x11b4>)
 800291c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002920:	b29b      	uxth	r3, r3
 8002922:	4618      	mov	r0, r3
 8002924:	f7fe ffcb 	bl	80018be <byteH>
 8002928:	4603      	mov	r3, r0
 800292a:	4619      	mov	r1, r3
 800292c:	4620      	mov	r0, r4
 800292e:	f7fd fcd9 	bl	80002e4 <AT24XX_Update>
						for (uint16_t i = 0; i < 155; i++) {
 8002932:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 8002936:	3301      	adds	r3, #1
 8002938:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
 800293c:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 8002940:	2b9a      	cmp	r3, #154	; 0x9a
 8002942:	d9cc      	bls.n	80028de <main+0xf86>
						}

						for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8002944:	2300      	movs	r3, #0
 8002946:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2
 800294a:	e027      	b.n	800299c <main+0x1044>
 800294c:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	; 0xf2
 8002950:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002954:	b29b      	uxth	r3, r3
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	b29b      	uxth	r3, r3
 800295a:	4618      	mov	r0, r3
 800295c:	f7fd fc98 	bl	8000290 <AT24XX_Read>
 8002960:	4603      	mov	r3, r0
 8002962:	461c      	mov	r4, r3
 8002964:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	; 0xf2
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	b29b      	uxth	r3, r3
 800296c:	f203 73d1 	addw	r3, r3, #2001	; 0x7d1
 8002970:	b29b      	uxth	r3, r3
 8002972:	4618      	mov	r0, r3
 8002974:	f7fd fc8c 	bl	8000290 <AT24XX_Read>
 8002978:	4603      	mov	r3, r0
 800297a:	4619      	mov	r1, r3
 800297c:	4620      	mov	r0, r4
 800297e:	f7fe ffad 	bl	80018dc <byteS>
 8002982:	4603      	mov	r3, r0
 8002984:	461a      	mov	r2, r3
 8002986:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	; 0xf2
 800298a:	b211      	sxth	r1, r2
 800298c:	4a62      	ldr	r2, [pc, #392]	; (8002b18 <main+0x11c0>)
 800298e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002992:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	; 0xf2
 8002996:	3301      	adds	r3, #1
 8002998:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2
 800299c:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	; 0xf2
 80029a0:	2b9a      	cmp	r3, #154	; 0x9a
 80029a2:	d9d3      	bls.n	800294c <main+0xff4>
						for (uint16_t i = 154; i > 0; i--) hH[i] = hH[i - 1];
 80029a4:	239a      	movs	r3, #154	; 0x9a
 80029a6:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
 80029aa:	e00f      	b.n	80029cc <main+0x1074>
 80029ac:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 80029b0:	1e5a      	subs	r2, r3, #1
 80029b2:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 80029b6:	4958      	ldr	r1, [pc, #352]	; (8002b18 <main+0x11c0>)
 80029b8:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80029bc:	4a56      	ldr	r2, [pc, #344]	; (8002b18 <main+0x11c0>)
 80029be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80029c2:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 80029c6:	3b01      	subs	r3, #1
 80029c8:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
 80029cc:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1eb      	bne.n	80029ac <main+0x1054>
						hH[0] = (uint16_t) (humidity * 10);
 80029d4:	4b51      	ldr	r3, [pc, #324]	; (8002b1c <main+0x11c4>)
 80029d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029da:	f04f 0200 	mov.w	r2, #0
 80029de:	4b4d      	ldr	r3, [pc, #308]	; (8002b14 <main+0x11bc>)
 80029e0:	f016 fa3a 	bl	8018e58 <__aeabi_dmul>
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	4610      	mov	r0, r2
 80029ea:	4619      	mov	r1, r3
 80029ec:	f016 fd0c 	bl	8019408 <__aeabi_d2uiz>
 80029f0:	4603      	mov	r3, r0
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	b21a      	sxth	r2, r3
 80029f6:	4b48      	ldr	r3, [pc, #288]	; (8002b18 <main+0x11c0>)
 80029f8:	801a      	strh	r2, [r3, #0]

						for (uint16_t i = 0; i < 155; i++) {
 80029fa:	2300      	movs	r3, #0
 80029fc:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
 8002a00:	e02e      	b.n	8002a60 <main+0x1108>
							AT24XX_Update(i * 2 + 2000, byteL(hH[i]));
 8002a02:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8002a06:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	b29c      	uxth	r4, r3
 8002a10:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8002a14:	4a40      	ldr	r2, [pc, #256]	; (8002b18 <main+0x11c0>)
 8002a16:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7fe ff41 	bl	80018a4 <byteL>
 8002a22:	4603      	mov	r3, r0
 8002a24:	4619      	mov	r1, r3
 8002a26:	4620      	mov	r0, r4
 8002a28:	f7fd fc5c 	bl	80002e4 <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 2000, byteH(hH[i]));
 8002a2c:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	f203 73d1 	addw	r3, r3, #2001	; 0x7d1
 8002a38:	b29c      	uxth	r4, r3
 8002a3a:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8002a3e:	4a36      	ldr	r2, [pc, #216]	; (8002b18 <main+0x11c0>)
 8002a40:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7fe ff39 	bl	80018be <byteH>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4620      	mov	r0, r4
 8002a52:	f7fd fc47 	bl	80002e4 <AT24XX_Update>
						for (uint16_t i = 0; i < 155; i++) {
 8002a56:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
 8002a60:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8002a64:	2b9a      	cmp	r3, #154	; 0x9a
 8002a66:	d9cc      	bls.n	8002a02 <main+0x10aa>
						}

						for (uint16_t i = 0; i < 155; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8002a68:	2300      	movs	r3, #0
 8002a6a:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
 8002a6e:	e027      	b.n	8002ac0 <main+0x1168>
 8002a70:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 8002a74:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fd fc06 	bl	8000290 <AT24XX_Read>
 8002a84:	4603      	mov	r3, r0
 8002a86:	461c      	mov	r4, r3
 8002a88:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	f603 33b9 	addw	r3, r3, #3001	; 0xbb9
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fd fbfa 	bl	8000290 <AT24XX_Read>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4620      	mov	r0, r4
 8002aa2:	f7fe ff1b 	bl	80018dc <byteS>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 8002aae:	b211      	sxth	r1, r2
 8002ab0:	4a1b      	ldr	r2, [pc, #108]	; (8002b20 <main+0x11c8>)
 8002ab2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002ab6:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 8002aba:	3301      	adds	r3, #1
 8002abc:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
 8002ac0:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 8002ac4:	2b9a      	cmp	r3, #154	; 0x9a
 8002ac6:	d9d3      	bls.n	8002a70 <main+0x1118>
						for (uint16_t i = 154; i > 0; i--) hP[i] = hP[i - 1];
 8002ac8:	239a      	movs	r3, #154	; 0x9a
 8002aca:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
 8002ace:	e00f      	b.n	8002af0 <main+0x1198>
 8002ad0:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	; 0xea
 8002ad4:	1e5a      	subs	r2, r3, #1
 8002ad6:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	; 0xea
 8002ada:	4911      	ldr	r1, [pc, #68]	; (8002b20 <main+0x11c8>)
 8002adc:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8002ae0:	4a0f      	ldr	r2, [pc, #60]	; (8002b20 <main+0x11c8>)
 8002ae2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002ae6:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	; 0xea
 8002aea:	3b01      	subs	r3, #1
 8002aec:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
 8002af0:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	; 0xea
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d1eb      	bne.n	8002ad0 <main+0x1178>
						hP[0] = (uint16_t)pressure;
 8002af8:	4b0a      	ldr	r3, [pc, #40]	; (8002b24 <main+0x11cc>)
 8002afa:	881b      	ldrh	r3, [r3, #0]
 8002afc:	b21a      	sxth	r2, r3
 8002afe:	4b08      	ldr	r3, [pc, #32]	; (8002b20 <main+0x11c8>)
 8002b00:	801a      	strh	r2, [r3, #0]

						for (uint16_t i = 0; i < 155; i++) {
 8002b02:	2300      	movs	r3, #0
 8002b04:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
 8002b08:	e03d      	b.n	8002b86 <main+0x122e>
 8002b0a:	bf00      	nop
 8002b0c:	200005bc 	.word	0x200005bc
 8002b10:	20000578 	.word	0x20000578
 8002b14:	40240000 	.word	0x40240000
 8002b18:	200006f4 	.word	0x200006f4
 8002b1c:	20000588 	.word	0x20000588
 8002b20:	2000082c 	.word	0x2000082c
 8002b24:	200005b8 	.word	0x200005b8
							AT24XX_Update(i * 2 + 3000, byteL(hP[i]));
 8002b28:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8002b2c:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	b29c      	uxth	r4, r3
 8002b36:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8002b3a:	4abc      	ldr	r2, [pc, #752]	; (8002e2c <main+0x14d4>)
 8002b3c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fe feae 	bl	80018a4 <byteL>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	4620      	mov	r0, r4
 8002b4e:	f7fd fbc9 	bl	80002e4 <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 3000, byteH(hP[i]));
 8002b52:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	f603 33b9 	addw	r3, r3, #3001	; 0xbb9
 8002b5e:	b29c      	uxth	r4, r3
 8002b60:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8002b64:	4ab1      	ldr	r2, [pc, #708]	; (8002e2c <main+0x14d4>)
 8002b66:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7fe fea6 	bl	80018be <byteH>
 8002b72:	4603      	mov	r3, r0
 8002b74:	4619      	mov	r1, r3
 8002b76:	4620      	mov	r0, r4
 8002b78:	f7fd fbb4 	bl	80002e4 <AT24XX_Update>
						for (uint16_t i = 0; i < 155; i++) {
 8002b7c:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8002b80:	3301      	adds	r3, #1
 8002b82:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
 8002b86:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8002b8a:	2b9a      	cmp	r3, #154	; 0x9a
 8002b8c:	d9cc      	bls.n	8002b28 <main+0x11d0>
						}

						viewGraphs = 0;
 8002b8e:	4ba8      	ldr	r3, [pc, #672]	; (8002e30 <main+0x14d8>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	701a      	strb	r2, [r3, #0]
					}

					LCD_Rect(2, 189, 157, 129, 1, BLUE);
 8002b94:	23ff      	movs	r3, #255	; 0xff
 8002b96:	9301      	str	r3, [sp, #4]
 8002b98:	2301      	movs	r3, #1
 8002b9a:	9300      	str	r3, [sp, #0]
 8002b9c:	2381      	movs	r3, #129	; 0x81
 8002b9e:	229d      	movs	r2, #157	; 0x9d
 8002ba0:	21bd      	movs	r1, #189	; 0xbd
 8002ba2:	2002      	movs	r0, #2
 8002ba4:	f001 fd5a 	bl	800465c <LCD_Rect>
					int16_t valMap = map(((int16_t)(temperature * 10)), MIN_TEMPERATURE_X10, MAX_TEMPERATURE_X10, 0, 128);
 8002ba8:	4ba2      	ldr	r3, [pc, #648]	; (8002e34 <main+0x14dc>)
 8002baa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bae:	f04f 0200 	mov.w	r2, #0
 8002bb2:	4ba1      	ldr	r3, [pc, #644]	; (8002e38 <main+0x14e0>)
 8002bb4:	f016 f950 	bl	8018e58 <__aeabi_dmul>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
 8002bbc:	4610      	mov	r0, r2
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	f016 fbfa 	bl	80193b8 <__aeabi_d2iz>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	b21b      	sxth	r3, r3
 8002bc8:	b298      	uxth	r0, r3
 8002bca:	2380      	movs	r3, #128	; 0x80
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	2300      	movs	r3, #0
 8002bd0:	f44f 7291 	mov.w	r2, #290	; 0x122
 8002bd4:	21e2      	movs	r1, #226	; 0xe2
 8002bd6:	f7fe fe39 	bl	800184c <map>
 8002bda:	ec53 2b10 	vmov	r2, r3, d0
 8002bde:	4610      	mov	r0, r2
 8002be0:	4619      	mov	r1, r3
 8002be2:	f016 fbe9 	bl	80193b8 <__aeabi_d2iz>
 8002be6:	4603      	mov	r3, r0
 8002be8:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
					if (valMap < 0) valMap = 0;
 8002bec:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	da02      	bge.n	8002bfa <main+0x12a2>
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
					if (valMap > 127) valMap = 127;
 8002bfa:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002bfe:	2b7f      	cmp	r3, #127	; 0x7f
 8002c00:	dd02      	ble.n	8002c08 <main+0x12b0>
 8002c02:	237f      	movs	r3, #127	; 0x7f
 8002c04:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
					LCD_Line(3 + 155, 191, 3 + 155, 317, 1, BLACK);
 8002c08:	2300      	movs	r3, #0
 8002c0a:	9301      	str	r3, [sp, #4]
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	f240 133d 	movw	r3, #317	; 0x13d
 8002c14:	229e      	movs	r2, #158	; 0x9e
 8002c16:	21bf      	movs	r1, #191	; 0xbf
 8002c18:	209e      	movs	r0, #158	; 0x9e
 8002c1a:	f001 fbb7 	bl	800438c <LCD_Line>
					if (valMap) LCD_Line(3 + 155, 191 + (127 - valMap), 3 + 155, 317,
 8002c1e:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d023      	beq.n	8002c6e <main+0x1316>
 8002c26:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8002c2a:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002c2e:	b29c      	uxth	r4, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002c30:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002c34:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(3 + 155, 191 + (127 - valMap), 3 + 155, 317,
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	b2d8      	uxtb	r0, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002c42:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002c46:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(3 + 155, 191 + (127 - valMap), 3 + 155, 317,
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	461a      	mov	r2, r3
 8002c52:	2100      	movs	r1, #0
 8002c54:	f001 fa79 	bl	800414a <RGB>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	9301      	str	r3, [sp, #4]
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	f240 133d 	movw	r3, #317	; 0x13d
 8002c64:	229e      	movs	r2, #158	; 0x9e
 8002c66:	4621      	mov	r1, r4
 8002c68:	209e      	movs	r0, #158	; 0x9e
 8002c6a:	f001 fb8f 	bl	800438c <LCD_Line>

					LCD_Rect(161, 189, 157, 129, 1, BLUE);
 8002c6e:	23ff      	movs	r3, #255	; 0xff
 8002c70:	9301      	str	r3, [sp, #4]
 8002c72:	2301      	movs	r3, #1
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	2381      	movs	r3, #129	; 0x81
 8002c78:	229d      	movs	r2, #157	; 0x9d
 8002c7a:	21bd      	movs	r1, #189	; 0xbd
 8002c7c:	20a1      	movs	r0, #161	; 0xa1
 8002c7e:	f001 fced 	bl	800465c <LCD_Rect>
					valMap = map(((int16_t)(humidity * 10)), MIN_HUMIDITY_X10, MAX_HUMIDITY_X10, 0, 128);
 8002c82:	4b6e      	ldr	r3, [pc, #440]	; (8002e3c <main+0x14e4>)
 8002c84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c88:	f04f 0200 	mov.w	r2, #0
 8002c8c:	4b6a      	ldr	r3, [pc, #424]	; (8002e38 <main+0x14e0>)
 8002c8e:	f016 f8e3 	bl	8018e58 <__aeabi_dmul>
 8002c92:	4602      	mov	r2, r0
 8002c94:	460b      	mov	r3, r1
 8002c96:	4610      	mov	r0, r2
 8002c98:	4619      	mov	r1, r3
 8002c9a:	f016 fb8d 	bl	80193b8 <__aeabi_d2iz>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	b21b      	sxth	r3, r3
 8002ca2:	b298      	uxth	r0, r3
 8002ca4:	2380      	movs	r3, #128	; 0x80
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	2300      	movs	r3, #0
 8002caa:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8002cae:	2150      	movs	r1, #80	; 0x50
 8002cb0:	f7fe fdcc 	bl	800184c <map>
 8002cb4:	ec53 2b10 	vmov	r2, r3, d0
 8002cb8:	4610      	mov	r0, r2
 8002cba:	4619      	mov	r1, r3
 8002cbc:	f016 fb7c 	bl	80193b8 <__aeabi_d2iz>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
					if (valMap < 0) valMap = 0;
 8002cc6:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	da02      	bge.n	8002cd4 <main+0x137c>
 8002cce:	2300      	movs	r3, #0
 8002cd0:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
					if (valMap > 127) valMap = 127;
 8002cd4:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002cd8:	2b7f      	cmp	r3, #127	; 0x7f
 8002cda:	dd02      	ble.n	8002ce2 <main+0x138a>
 8002cdc:	237f      	movs	r3, #127	; 0x7f
 8002cde:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
					LCD_Line(162 + 155, 191, 162 + 155, 317, 1, BLACK);
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	9301      	str	r3, [sp, #4]
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	f240 133d 	movw	r3, #317	; 0x13d
 8002cee:	f240 123d 	movw	r2, #317	; 0x13d
 8002cf2:	21bf      	movs	r1, #191	; 0xbf
 8002cf4:	f240 103d 	movw	r0, #317	; 0x13d
 8002cf8:	f001 fb48 	bl	800438c <LCD_Line>
					if (valMap) LCD_Line(162 + 155, 191 + (127 - valMap), 162 + 155, 317,
 8002cfc:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d025      	beq.n	8002d50 <main+0x13f8>
 8002d04:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8002d08:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002d0c:	b29c      	uxth	r4, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002d0e:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002d12:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(162 + 155, 191 + (127 - valMap), 162 + 155, 317,
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	b2d8      	uxtb	r0, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002d20:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002d24:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(162 + 155, 191 + (127 - valMap), 162 + 155, 317,
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	461a      	mov	r2, r3
 8002d30:	2100      	movs	r1, #0
 8002d32:	f001 fa0a 	bl	800414a <RGB>
 8002d36:	4603      	mov	r3, r0
 8002d38:	9301      	str	r3, [sp, #4]
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	f240 133d 	movw	r3, #317	; 0x13d
 8002d42:	f240 123d 	movw	r2, #317	; 0x13d
 8002d46:	4621      	mov	r1, r4
 8002d48:	f240 103d 	movw	r0, #317	; 0x13d
 8002d4c:	f001 fb1e 	bl	800438c <LCD_Line>

					LCD_Rect(320, 189, 157, 129, 1, BLUE);
 8002d50:	23ff      	movs	r3, #255	; 0xff
 8002d52:	9301      	str	r3, [sp, #4]
 8002d54:	2301      	movs	r3, #1
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	2381      	movs	r3, #129	; 0x81
 8002d5a:	229d      	movs	r2, #157	; 0x9d
 8002d5c:	21bd      	movs	r1, #189	; 0xbd
 8002d5e:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8002d62:	f001 fc7b 	bl	800465c <LCD_Rect>
					valMap = map(((int16_t)(pressure)), MIN_PRESSURE, MAX_PRESSURE, 0, 128);
 8002d66:	4b36      	ldr	r3, [pc, #216]	; (8002e40 <main+0x14e8>)
 8002d68:	8818      	ldrh	r0, [r3, #0]
 8002d6a:	2380      	movs	r3, #128	; 0x80
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	2300      	movs	r3, #0
 8002d70:	f240 4229 	movw	r2, #1065	; 0x429
 8002d74:	f240 31a9 	movw	r1, #937	; 0x3a9
 8002d78:	f7fe fd68 	bl	800184c <map>
 8002d7c:	ec53 2b10 	vmov	r2, r3, d0
 8002d80:	4610      	mov	r0, r2
 8002d82:	4619      	mov	r1, r3
 8002d84:	f016 fb18 	bl	80193b8 <__aeabi_d2iz>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
					if (valMap < 0) valMap = 0;
 8002d8e:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	da02      	bge.n	8002d9c <main+0x1444>
 8002d96:	2300      	movs	r3, #0
 8002d98:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
					if (valMap > 127) valMap = 127;
 8002d9c:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002da0:	2b7f      	cmp	r3, #127	; 0x7f
 8002da2:	dd02      	ble.n	8002daa <main+0x1452>
 8002da4:	237f      	movs	r3, #127	; 0x7f
 8002da6:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
					LCD_Line(321 + 155, 191, 321 + 155, 317, 1, BLACK);
 8002daa:	2300      	movs	r3, #0
 8002dac:	9301      	str	r3, [sp, #4]
 8002dae:	2301      	movs	r3, #1
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	f240 133d 	movw	r3, #317	; 0x13d
 8002db6:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 8002dba:	21bf      	movs	r1, #191	; 0xbf
 8002dbc:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 8002dc0:	f001 fae4 	bl	800438c <LCD_Line>
					if (valMap) LCD_Line(321 + 155, 191 + (127 - valMap), 321 + 155, 317,
 8002dc4:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d025      	beq.n	8002e18 <main+0x14c0>
 8002dcc:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8002dd0:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002dd4:	b29c      	uxth	r4, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002dd6:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002dda:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(321 + 155, 191 + (127 - valMap), 321 + 155, 317,
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	43db      	mvns	r3, r3
 8002de6:	b2d8      	uxtb	r0, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002de8:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002dec:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(321 + 155, 191 + (127 - valMap), 321 + 155, 317,
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	461a      	mov	r2, r3
 8002df8:	2100      	movs	r1, #0
 8002dfa:	f001 f9a6 	bl	800414a <RGB>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	9301      	str	r3, [sp, #4]
 8002e02:	2301      	movs	r3, #1
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	f240 133d 	movw	r3, #317	; 0x13d
 8002e0a:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 8002e0e:	4621      	mov	r1, r4
 8002e10:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 8002e14:	f001 faba 	bl	800438c <LCD_Line>

					if (!viewGraphs) {
 8002e18:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <main+0x14d8>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f040 8192 	bne.w	8003146 <main+0x17ee>

						for (uint16_t i = 0; i < 155 ; i++) {
 8002e22:	2300      	movs	r3, #0
 8002e24:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
 8002e28:	e07b      	b.n	8002f22 <main+0x15ca>
 8002e2a:	bf00      	nop
 8002e2c:	2000082c 	.word	0x2000082c
 8002e30:	2000056c 	.word	0x2000056c
 8002e34:	20000578 	.word	0x20000578
 8002e38:	40240000 	.word	0x40240000
 8002e3c:	20000588 	.word	0x20000588
 8002e40:	200005b8 	.word	0x200005b8
							valMap = map(((int16_t)hT[i]), MIN_TEMPERATURE_X10, MAX_TEMPERATURE_X10, 0, 128);
 8002e44:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8002e48:	4ab3      	ldr	r2, [pc, #716]	; (8003118 <main+0x17c0>)
 8002e4a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002e4e:	b298      	uxth	r0, r3
 8002e50:	2380      	movs	r3, #128	; 0x80
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	2300      	movs	r3, #0
 8002e56:	f44f 7291 	mov.w	r2, #290	; 0x122
 8002e5a:	21e2      	movs	r1, #226	; 0xe2
 8002e5c:	f7fe fcf6 	bl	800184c <map>
 8002e60:	ec53 2b10 	vmov	r2, r3, d0
 8002e64:	4610      	mov	r0, r2
 8002e66:	4619      	mov	r1, r3
 8002e68:	f016 faa6 	bl	80193b8 <__aeabi_d2iz>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
							if (valMap < 0) valMap = 0;
 8002e72:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	da02      	bge.n	8002e80 <main+0x1528>
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
							if (valMap > 127) valMap = 127;
 8002e80:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002e84:	2b7f      	cmp	r3, #127	; 0x7f
 8002e86:	dd02      	ble.n	8002e8e <main+0x1536>
 8002e88:	237f      	movs	r3, #127	; 0x7f
 8002e8a:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
							LCD_Line(3 + (154-i), 191, 3 + (154-i), 317, 1, BLACK);
 8002e8e:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8002e92:	f1c3 039d 	rsb	r3, r3, #157	; 0x9d
 8002e96:	b298      	uxth	r0, r3
 8002e98:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8002e9c:	f1c3 039d 	rsb	r3, r3, #157	; 0x9d
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	9301      	str	r3, [sp, #4]
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	f240 133d 	movw	r3, #317	; 0x13d
 8002eae:	21bf      	movs	r1, #191	; 0xbf
 8002eb0:	f001 fa6c 	bl	800438c <LCD_Line>
							if (valMap) LCD_Line(3 + (154-i), 191 + (127 - valMap), 3 + (154-i), 317,
 8002eb4:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d02d      	beq.n	8002f18 <main+0x15c0>
 8002ebc:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8002ec0:	f1c3 039d 	rsb	r3, r3, #157	; 0x9d
 8002ec4:	b29c      	uxth	r4, r3
 8002ec6:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8002eca:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002ece:	b29d      	uxth	r5, r3
 8002ed0:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8002ed4:	f1c3 039d 	rsb	r3, r3, #157	; 0x9d
 8002ed8:	b29e      	uxth	r6, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002eda:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002ede:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(3 + (154-i), 191 + (127 - valMap), 3 + (154-i), 317,
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	b2d8      	uxtb	r0, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002eec:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002ef0:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(3 + (154-i), 191 + (127 - valMap), 3 + (154-i), 317,
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	461a      	mov	r2, r3
 8002efc:	2100      	movs	r1, #0
 8002efe:	f001 f924 	bl	800414a <RGB>
 8002f02:	4603      	mov	r3, r0
 8002f04:	9301      	str	r3, [sp, #4]
 8002f06:	2301      	movs	r3, #1
 8002f08:	9300      	str	r3, [sp, #0]
 8002f0a:	f240 133d 	movw	r3, #317	; 0x13d
 8002f0e:	4632      	mov	r2, r6
 8002f10:	4629      	mov	r1, r5
 8002f12:	4620      	mov	r0, r4
 8002f14:	f001 fa3a 	bl	800438c <LCD_Line>
						for (uint16_t i = 0; i < 155 ; i++) {
 8002f18:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
 8002f22:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8002f26:	2b9a      	cmp	r3, #154	; 0x9a
 8002f28:	d98c      	bls.n	8002e44 <main+0x14ec>
						}

						for (uint16_t i = 0; i < 155 ; i++) {
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
 8002f30:	e06e      	b.n	8003010 <main+0x16b8>
							valMap = map(((int16_t)hH[i]), MIN_HUMIDITY_X10, MAX_HUMIDITY_X10, 0, 128);
 8002f32:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 8002f36:	4a79      	ldr	r2, [pc, #484]	; (800311c <main+0x17c4>)
 8002f38:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002f3c:	b298      	uxth	r0, r3
 8002f3e:	2380      	movs	r3, #128	; 0x80
 8002f40:	9300      	str	r3, [sp, #0]
 8002f42:	2300      	movs	r3, #0
 8002f44:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8002f48:	2150      	movs	r1, #80	; 0x50
 8002f4a:	f7fe fc7f 	bl	800184c <map>
 8002f4e:	ec53 2b10 	vmov	r2, r3, d0
 8002f52:	4610      	mov	r0, r2
 8002f54:	4619      	mov	r1, r3
 8002f56:	f016 fa2f 	bl	80193b8 <__aeabi_d2iz>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
							if (valMap < 0) valMap = 0;
 8002f60:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	da02      	bge.n	8002f6e <main+0x1616>
 8002f68:	2300      	movs	r3, #0
 8002f6a:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
							if (valMap > 127) valMap = 127;
 8002f6e:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002f72:	2b7f      	cmp	r3, #127	; 0x7f
 8002f74:	dd02      	ble.n	8002f7c <main+0x1624>
 8002f76:	237f      	movs	r3, #127	; 0x7f
 8002f78:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
							LCD_Line(162 + (154-i), 191, 162 + (154-i), 317, 1, BLACK);
 8002f7c:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 8002f80:	f5c3 739e 	rsb	r3, r3, #316	; 0x13c
 8002f84:	b298      	uxth	r0, r3
 8002f86:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 8002f8a:	f5c3 739e 	rsb	r3, r3, #316	; 0x13c
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	2300      	movs	r3, #0
 8002f92:	9301      	str	r3, [sp, #4]
 8002f94:	2301      	movs	r3, #1
 8002f96:	9300      	str	r3, [sp, #0]
 8002f98:	f240 133d 	movw	r3, #317	; 0x13d
 8002f9c:	21bf      	movs	r1, #191	; 0xbf
 8002f9e:	f001 f9f5 	bl	800438c <LCD_Line>
							if (valMap) LCD_Line(162 + (154-i), 191 + (127 - valMap), 162 + (154-i), 317,
 8002fa2:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d02d      	beq.n	8003006 <main+0x16ae>
 8002faa:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 8002fae:	f5c3 739e 	rsb	r3, r3, #316	; 0x13c
 8002fb2:	b29c      	uxth	r4, r3
 8002fb4:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8002fb8:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002fbc:	b29d      	uxth	r5, r3
 8002fbe:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 8002fc2:	f5c3 739e 	rsb	r3, r3, #316	; 0x13c
 8002fc6:	b29e      	uxth	r6, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002fc8:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002fcc:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(162 + (154-i), 191 + (127 - valMap), 162 + (154-i), 317,
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	b2d8      	uxtb	r0, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002fda:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002fde:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(162 + (154-i), 191 + (127 - valMap), 162 + (154-i), 317,
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	461a      	mov	r2, r3
 8002fea:	2100      	movs	r1, #0
 8002fec:	f001 f8ad 	bl	800414a <RGB>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	9301      	str	r3, [sp, #4]
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	9300      	str	r3, [sp, #0]
 8002ff8:	f240 133d 	movw	r3, #317	; 0x13d
 8002ffc:	4632      	mov	r2, r6
 8002ffe:	4629      	mov	r1, r5
 8003000:	4620      	mov	r0, r4
 8003002:	f001 f9c3 	bl	800438c <LCD_Line>
						for (uint16_t i = 0; i < 155 ; i++) {
 8003006:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 800300a:	3301      	adds	r3, #1
 800300c:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
 8003010:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 8003014:	2b9a      	cmp	r3, #154	; 0x9a
 8003016:	d98c      	bls.n	8002f32 <main+0x15da>
						}

						for (uint16_t i = 0; i < 155 ; i++) {
 8003018:	2300      	movs	r3, #0
 800301a:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
 800301e:	e073      	b.n	8003108 <main+0x17b0>
							valMap = map(((int16_t)hP[i]), MIN_PRESSURE, MAX_PRESSURE, 0, 128);
 8003020:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 8003024:	4a3e      	ldr	r2, [pc, #248]	; (8003120 <main+0x17c8>)
 8003026:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800302a:	b298      	uxth	r0, r3
 800302c:	2380      	movs	r3, #128	; 0x80
 800302e:	9300      	str	r3, [sp, #0]
 8003030:	2300      	movs	r3, #0
 8003032:	f240 4229 	movw	r2, #1065	; 0x429
 8003036:	f240 31a9 	movw	r1, #937	; 0x3a9
 800303a:	f7fe fc07 	bl	800184c <map>
 800303e:	ec53 2b10 	vmov	r2, r3, d0
 8003042:	4610      	mov	r0, r2
 8003044:	4619      	mov	r1, r3
 8003046:	f016 f9b7 	bl	80193b8 <__aeabi_d2iz>
 800304a:	4603      	mov	r3, r0
 800304c:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
							if (valMap < 0) valMap = 0;
 8003050:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8003054:	2b00      	cmp	r3, #0
 8003056:	da02      	bge.n	800305e <main+0x1706>
 8003058:	2300      	movs	r3, #0
 800305a:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
							if (valMap > 127) valMap = 127;
 800305e:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8003062:	2b7f      	cmp	r3, #127	; 0x7f
 8003064:	dd02      	ble.n	800306c <main+0x1714>
 8003066:	237f      	movs	r3, #127	; 0x7f
 8003068:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
							LCD_Line(321 + (154-i), 191, 321 + (154-i), 317, 1, BLACK);
 800306c:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 8003070:	f5c3 73ed 	rsb	r3, r3, #474	; 0x1da
 8003074:	3301      	adds	r3, #1
 8003076:	b298      	uxth	r0, r3
 8003078:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 800307c:	f5c3 73ed 	rsb	r3, r3, #474	; 0x1da
 8003080:	3301      	adds	r3, #1
 8003082:	b29a      	uxth	r2, r3
 8003084:	2300      	movs	r3, #0
 8003086:	9301      	str	r3, [sp, #4]
 8003088:	2301      	movs	r3, #1
 800308a:	9300      	str	r3, [sp, #0]
 800308c:	f240 133d 	movw	r3, #317	; 0x13d
 8003090:	21bf      	movs	r1, #191	; 0xbf
 8003092:	f001 f97b 	bl	800438c <LCD_Line>
							if (valMap) LCD_Line(321 + (154-i), 191 + (127 - valMap), 321 + (154-i), 317,
 8003096:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 800309a:	2b00      	cmp	r3, #0
 800309c:	d02f      	beq.n	80030fe <main+0x17a6>
 800309e:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 80030a2:	f5c3 73ed 	rsb	r3, r3, #474	; 0x1da
 80030a6:	3301      	adds	r3, #1
 80030a8:	b29c      	uxth	r4, r3
 80030aa:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 80030ae:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 80030b2:	b29d      	uxth	r5, r3
 80030b4:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 80030b8:	f5c3 73ed 	rsb	r3, r3, #474	; 0x1da
 80030bc:	3301      	adds	r3, #1
 80030be:	b29e      	uxth	r6, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 80030c0:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 80030c4:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(321 + (154-i), 191 + (127 - valMap), 321 + (154-i), 317,
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	43db      	mvns	r3, r3
 80030d0:	b2d8      	uxtb	r0, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 80030d2:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 80030d6:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(321 + (154-i), 191 + (127 - valMap), 321 + (154-i), 317,
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	461a      	mov	r2, r3
 80030e2:	2100      	movs	r1, #0
 80030e4:	f001 f831 	bl	800414a <RGB>
 80030e8:	4603      	mov	r3, r0
 80030ea:	9301      	str	r3, [sp, #4]
 80030ec:	2301      	movs	r3, #1
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	f240 133d 	movw	r3, #317	; 0x13d
 80030f4:	4632      	mov	r2, r6
 80030f6:	4629      	mov	r1, r5
 80030f8:	4620      	mov	r0, r4
 80030fa:	f001 f947 	bl	800438c <LCD_Line>
						for (uint16_t i = 0; i < 155 ; i++) {
 80030fe:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 8003102:	3301      	adds	r3, #1
 8003104:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
 8003108:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 800310c:	2b9a      	cmp	r3, #154	; 0x9a
 800310e:	d987      	bls.n	8003020 <main+0x16c8>
						}
						for (uint32_t i = 0; i <= 65536; i++) TIM1->CCR1 = i;
 8003110:	2300      	movs	r3, #0
 8003112:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003116:	e00e      	b.n	8003136 <main+0x17de>
 8003118:	200005bc 	.word	0x200005bc
 800311c:	200006f4 	.word	0x200006f4
 8003120:	2000082c 	.word	0x2000082c
 8003124:	4a8e      	ldr	r2, [pc, #568]	; (8003360 <main+0x1a08>)
 8003126:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800312a:	6353      	str	r3, [r2, #52]	; 0x34
 800312c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003130:	3301      	adds	r3, #1
 8003132:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003136:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800313a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800313e:	d9f1      	bls.n	8003124 <main+0x17cc>
						viewGraphs = 1;
 8003140:	4b88      	ldr	r3, [pc, #544]	; (8003364 <main+0x1a0c>)
 8003142:	2201      	movs	r2, #1
 8003144:	701a      	strb	r2, [r3, #0]
					}
				}
			}

			if (rx_index != 0) {
 8003146:	4b88      	ldr	r3, [pc, #544]	; (8003368 <main+0x1a10>)
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	f000 8393 	beq.w	8003876 <main+0x1f1e>
				if (memcmp(rx_buffer, "TS", 2) == 0) {
 8003150:	2202      	movs	r2, #2
 8003152:	4986      	ldr	r1, [pc, #536]	; (800336c <main+0x1a14>)
 8003154:	4886      	ldr	r0, [pc, #536]	; (8003370 <main+0x1a18>)
 8003156:	f01b f85b 	bl	801e210 <memcmp>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	f040 808a 	bne.w	8003276 <main+0x191e>

					char val[2];

					val[0] = rx_buffer[2];
 8003162:	4b83      	ldr	r3, [pc, #524]	; (8003370 <main+0x1a18>)
 8003164:	789b      	ldrb	r3, [r3, #2]
 8003166:	f887 3020 	strb.w	r3, [r7, #32]
					val[1] = rx_buffer[3];
 800316a:	4b81      	ldr	r3, [pc, #516]	; (8003370 <main+0x1a18>)
 800316c:	78db      	ldrb	r3, [r3, #3]
 800316e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					DS3231_setHrs(atoi(val));
 8003172:	f107 0320 	add.w	r3, r7, #32
 8003176:	4618      	mov	r0, r3
 8003178:	f016 fb97 	bl	80198aa <atoi>
 800317c:	4603      	mov	r3, r0
 800317e:	b2db      	uxtb	r3, r3
 8003180:	4618      	mov	r0, r3
 8003182:	f7fd ff81 	bl	8001088 <DS3231_setHrs>

					val[0] = rx_buffer[4];
 8003186:	4b7a      	ldr	r3, [pc, #488]	; (8003370 <main+0x1a18>)
 8003188:	791b      	ldrb	r3, [r3, #4]
 800318a:	f887 3020 	strb.w	r3, [r7, #32]
					val[1] = rx_buffer[5];
 800318e:	4b78      	ldr	r3, [pc, #480]	; (8003370 <main+0x1a18>)
 8003190:	795b      	ldrb	r3, [r3, #5]
 8003192:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					DS3231_setMin(atoi(val));
 8003196:	f107 0320 	add.w	r3, r7, #32
 800319a:	4618      	mov	r0, r3
 800319c:	f016 fb85 	bl	80198aa <atoi>
 80031a0:	4603      	mov	r3, r0
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7fd ff4f 	bl	8001048 <DS3231_setMin>

					val[0] = 0;
 80031aa:	2300      	movs	r3, #0
 80031ac:	f887 3020 	strb.w	r3, [r7, #32]
					val[1] = 0;
 80031b0:	2300      	movs	r3, #0
 80031b2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					DS3231_setSec(atoi(val));
 80031b6:	f107 0320 	add.w	r3, r7, #32
 80031ba:	4618      	mov	r0, r3
 80031bc:	f016 fb75 	bl	80198aa <atoi>
 80031c0:	4603      	mov	r3, r0
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7fd ff1f 	bl	8001008 <DS3231_setSec>

					val[0] = rx_buffer[6];
 80031ca:	4b69      	ldr	r3, [pc, #420]	; (8003370 <main+0x1a18>)
 80031cc:	799b      	ldrb	r3, [r3, #6]
 80031ce:	f887 3020 	strb.w	r3, [r7, #32]
					val[1] = rx_buffer[7];
 80031d2:	4b67      	ldr	r3, [pc, #412]	; (8003370 <main+0x1a18>)
 80031d4:	79db      	ldrb	r3, [r3, #7]
 80031d6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					DS3231_setDate(atoi(val));
 80031da:	f107 0320 	add.w	r3, r7, #32
 80031de:	4618      	mov	r0, r3
 80031e0:	f016 fb63 	bl	80198aa <atoi>
 80031e4:	4603      	mov	r3, r0
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7fd ff8d 	bl	8001108 <DS3231_setDate>

					val[0] = rx_buffer[8];
 80031ee:	4b60      	ldr	r3, [pc, #384]	; (8003370 <main+0x1a18>)
 80031f0:	7a1b      	ldrb	r3, [r3, #8]
 80031f2:	f887 3020 	strb.w	r3, [r7, #32]
					val[1] = rx_buffer[9];
 80031f6:	4b5e      	ldr	r3, [pc, #376]	; (8003370 <main+0x1a18>)
 80031f8:	7a5b      	ldrb	r3, [r3, #9]
 80031fa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					DS3231_setMonth(atoi(val));
 80031fe:	f107 0320 	add.w	r3, r7, #32
 8003202:	4618      	mov	r0, r3
 8003204:	f016 fb51 	bl	80198aa <atoi>
 8003208:	4603      	mov	r3, r0
 800320a:	b2db      	uxtb	r3, r3
 800320c:	4618      	mov	r0, r3
 800320e:	f7fd ff9b 	bl	8001148 <DS3231_setMonth>

					val[0] = rx_buffer[10];
 8003212:	4b57      	ldr	r3, [pc, #348]	; (8003370 <main+0x1a18>)
 8003214:	7a9b      	ldrb	r3, [r3, #10]
 8003216:	f887 3020 	strb.w	r3, [r7, #32]
					val[1] = rx_buffer[11];
 800321a:	4b55      	ldr	r3, [pc, #340]	; (8003370 <main+0x1a18>)
 800321c:	7adb      	ldrb	r3, [r3, #11]
 800321e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					DS3231_setYear(atoi(val));
 8003222:	f107 0320 	add.w	r3, r7, #32
 8003226:	4618      	mov	r0, r3
 8003228:	f016 fb3f 	bl	80198aa <atoi>
 800322c:	4603      	mov	r3, r0
 800322e:	b2db      	uxtb	r3, r3
 8003230:	4618      	mov	r0, r3
 8003232:	f7fd ffa9 	bl	8001188 <DS3231_setYear>

					val[1] = rx_buffer[12];
 8003236:	4b4e      	ldr	r3, [pc, #312]	; (8003370 <main+0x1a18>)
 8003238:	7b1b      	ldrb	r3, [r3, #12]
 800323a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					DS3231_setDay(atoi(val));
 800323e:	f107 0320 	add.w	r3, r7, #32
 8003242:	4618      	mov	r0, r3
 8003244:	f016 fb31 	bl	80198aa <atoi>
 8003248:	4603      	mov	r3, r0
 800324a:	b2db      	uxtb	r3, r3
 800324c:	4618      	mov	r0, r3
 800324e:	f7fd ff3b 	bl	80010c8 <DS3231_setDay>

					for (uint32_t i = 0; i <= 65536; i++) TIM1->CCR1 = i;
 8003252:	2300      	movs	r3, #0
 8003254:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003258:	e008      	b.n	800326c <main+0x1914>
 800325a:	4a41      	ldr	r2, [pc, #260]	; (8003360 <main+0x1a08>)
 800325c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003260:	6353      	str	r3, [r2, #52]	; 0x34
 8003262:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003266:	3301      	adds	r3, #1
 8003268:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800326c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003274:	d9f1      	bls.n	800325a <main+0x1902>
				}

				if (memcmp(rx_buffer, "CE", 2) == 0) {
 8003276:	2202      	movs	r2, #2
 8003278:	493e      	ldr	r1, [pc, #248]	; (8003374 <main+0x1a1c>)
 800327a:	483d      	ldr	r0, [pc, #244]	; (8003370 <main+0x1a18>)
 800327c:	f01a ffc8 	bl	801e210 <memcmp>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d122      	bne.n	80032cc <main+0x1974>
					for (uint16_t i = 0; i < 4096; i++) AT24XX_Update(i, 0);
 8003286:	2300      	movs	r3, #0
 8003288:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
 800328c:	e00a      	b.n	80032a4 <main+0x194c>
 800328e:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8003292:	2100      	movs	r1, #0
 8003294:	4618      	mov	r0, r3
 8003296:	f7fd f825 	bl	80002e4 <AT24XX_Update>
 800329a:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 800329e:	3301      	adds	r3, #1
 80032a0:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
 80032a4:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 80032a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ac:	d3ef      	bcc.n	800328e <main+0x1936>
					uint8_t uartTransmit[] = "EEPROM IS CLEANED\r\n";
 80032ae:	4b32      	ldr	r3, [pc, #200]	; (8003378 <main+0x1a20>)
 80032b0:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80032b4:	461d      	mov	r5, r3
 80032b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032ba:	682b      	ldr	r3, [r5, #0]
 80032bc:	6023      	str	r3, [r4, #0]
					HAL_UART_Transmit(&huart1, uartTransmit, sizeof(uartTransmit), 100);
 80032be:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80032c2:	2364      	movs	r3, #100	; 0x64
 80032c4:	2214      	movs	r2, #20
 80032c6:	482d      	ldr	r0, [pc, #180]	; (800337c <main+0x1a24>)
 80032c8:	f012 fae9 	bl	801589e <HAL_UART_Transmit>
				}

				if (memcmp(rx_buffer, "RS", 2) == 0) {
 80032cc:	2202      	movs	r2, #2
 80032ce:	492c      	ldr	r1, [pc, #176]	; (8003380 <main+0x1a28>)
 80032d0:	4827      	ldr	r0, [pc, #156]	; (8003370 <main+0x1a18>)
 80032d2:	f01a ff9d 	bl	801e210 <memcmp>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f040 82b7 	bne.w	800384c <main+0x1ef4>

					char valT[4] = { 0 };
 80032de:	2300      	movs	r3, #0
 80032e0:	64bb      	str	r3, [r7, #72]	; 0x48

					for (uint8_t i = 0; i < 4; i++) valT[i] = rx_buffer[2 + i];
 80032e2:	2300      	movs	r3, #0
 80032e4:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
 80032e8:	e010      	b.n	800330c <main+0x19b4>
 80032ea:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 80032ee:	1c9a      	adds	r2, r3, #2
 80032f0:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 80032f4:	491e      	ldr	r1, [pc, #120]	; (8003370 <main+0x1a18>)
 80032f6:	5c8a      	ldrb	r2, [r1, r2]
 80032f8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80032fc:	443b      	add	r3, r7
 80032fe:	f803 2cb8 	strb.w	r2, [r3, #-184]
 8003302:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 8003306:	3301      	adds	r3, #1
 8003308:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
 800330c:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 8003310:	2b03      	cmp	r3, #3
 8003312:	d9ea      	bls.n	80032ea <main+0x1992>

					temperatureRemote = atoi(valT);
 8003314:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003318:	4618      	mov	r0, r3
 800331a:	f016 fac6 	bl	80198aa <atoi>
 800331e:	4603      	mov	r3, r0
 8003320:	4618      	mov	r0, r3
 8003322:	f015 fd2f 	bl	8018d84 <__aeabi_i2d>
 8003326:	4602      	mov	r2, r0
 8003328:	460b      	mov	r3, r1
 800332a:	4916      	ldr	r1, [pc, #88]	; (8003384 <main+0x1a2c>)
 800332c:	e9c1 2300 	strd	r2, r3, [r1]
					temperatureRemote = temperatureRemote / 10;
 8003330:	4b14      	ldr	r3, [pc, #80]	; (8003384 <main+0x1a2c>)
 8003332:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003336:	f04f 0200 	mov.w	r2, #0
 800333a:	4b13      	ldr	r3, [pc, #76]	; (8003388 <main+0x1a30>)
 800333c:	f015 feb6 	bl	80190ac <__aeabi_ddiv>
 8003340:	4602      	mov	r2, r0
 8003342:	460b      	mov	r3, r1
 8003344:	490f      	ldr	r1, [pc, #60]	; (8003384 <main+0x1a2c>)
 8003346:	e9c1 2300 	strd	r2, r3, [r1]

					char valH[3] = { 0 };
 800334a:	4b10      	ldr	r3, [pc, #64]	; (800338c <main+0x1a34>)
 800334c:	881b      	ldrh	r3, [r3, #0]
 800334e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003352:	2300      	movs	r3, #0
 8003354:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

					for (uint8_t i = 0; i < 3; i++) valH[i] = rx_buffer[6 + i];
 8003358:	2300      	movs	r3, #0
 800335a:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
 800335e:	e028      	b.n	80033b2 <main+0x1a5a>
 8003360:	40010000 	.word	0x40010000
 8003364:	2000056c 	.word	0x2000056c
 8003368:	20000974 	.word	0x20000974
 800336c:	08052174 	.word	0x08052174
 8003370:	20000964 	.word	0x20000964
 8003374:	08052178 	.word	0x08052178
 8003378:	080521b0 	.word	0x080521b0
 800337c:	200004d8 	.word	0x200004d8
 8003380:	0805217c 	.word	0x0805217c
 8003384:	20000598 	.word	0x20000598
 8003388:	40240000 	.word	0x40240000
 800338c:	08051f54 	.word	0x08051f54
 8003390:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8003394:	1d9a      	adds	r2, r3, #6
 8003396:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 800339a:	499d      	ldr	r1, [pc, #628]	; (8003610 <main+0x1cb8>)
 800339c:	5c8a      	ldrb	r2, [r1, r2]
 800339e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80033a2:	443b      	add	r3, r7
 80033a4:	f803 2cbc 	strb.w	r2, [r3, #-188]
 80033a8:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 80033ac:	3301      	adds	r3, #1
 80033ae:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
 80033b2:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d9ea      	bls.n	8003390 <main+0x1a38>

					humidityRemote = atoi(valH);
 80033ba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80033be:	4618      	mov	r0, r3
 80033c0:	f016 fa73 	bl	80198aa <atoi>
 80033c4:	4603      	mov	r3, r0
 80033c6:	4618      	mov	r0, r3
 80033c8:	f015 fcdc 	bl	8018d84 <__aeabi_i2d>
 80033cc:	4602      	mov	r2, r0
 80033ce:	460b      	mov	r3, r1
 80033d0:	4990      	ldr	r1, [pc, #576]	; (8003614 <main+0x1cbc>)
 80033d2:	e9c1 2300 	strd	r2, r3, [r1]
					humidityRemote = humidityRemote / 10;
 80033d6:	4b8f      	ldr	r3, [pc, #572]	; (8003614 <main+0x1cbc>)
 80033d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033dc:	f04f 0200 	mov.w	r2, #0
 80033e0:	4b8d      	ldr	r3, [pc, #564]	; (8003618 <main+0x1cc0>)
 80033e2:	f015 fe63 	bl	80190ac <__aeabi_ddiv>
 80033e6:	4602      	mov	r2, r0
 80033e8:	460b      	mov	r3, r1
 80033ea:	498a      	ldr	r1, [pc, #552]	; (8003614 <main+0x1cbc>)
 80033ec:	e9c1 2300 	strd	r2, r3, [r1]

					if ((temperatureRemote != temperatureRemoteLast && temperatureRemote < 85 && temperatureRemote > -40) ||
 80033f0:	4b8a      	ldr	r3, [pc, #552]	; (800361c <main+0x1cc4>)
 80033f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033f6:	4b8a      	ldr	r3, [pc, #552]	; (8003620 <main+0x1cc8>)
 80033f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033fc:	f015 ff94 	bl	8019328 <__aeabi_dcmpeq>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d115      	bne.n	8003432 <main+0x1ada>
 8003406:	4b85      	ldr	r3, [pc, #532]	; (800361c <main+0x1cc4>)
 8003408:	e9d3 0100 	ldrd	r0, r1, [r3]
 800340c:	f04f 0200 	mov.w	r2, #0
 8003410:	4b84      	ldr	r3, [pc, #528]	; (8003624 <main+0x1ccc>)
 8003412:	f015 ff93 	bl	801933c <__aeabi_dcmplt>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00a      	beq.n	8003432 <main+0x1ada>
 800341c:	4b7f      	ldr	r3, [pc, #508]	; (800361c <main+0x1cc4>)
 800341e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003422:	f04f 0200 	mov.w	r2, #0
 8003426:	4b80      	ldr	r3, [pc, #512]	; (8003628 <main+0x1cd0>)
 8003428:	f015 ffa6 	bl	8019378 <__aeabi_dcmpgt>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d118      	bne.n	8003464 <main+0x1b0c>
							(humidityRemote != humidityRemoteLast && humidityRemote > 0)) {
 8003432:	4b78      	ldr	r3, [pc, #480]	; (8003614 <main+0x1cbc>)
 8003434:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003438:	4b7c      	ldr	r3, [pc, #496]	; (800362c <main+0x1cd4>)
 800343a:	e9d3 2300 	ldrd	r2, r3, [r3]
					if ((temperatureRemote != temperatureRemoteLast && temperatureRemote < 85 && temperatureRemote > -40) ||
 800343e:	f015 ff73 	bl	8019328 <__aeabi_dcmpeq>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	f040 8201 	bne.w	800384c <main+0x1ef4>
							(humidityRemote != humidityRemoteLast && humidityRemote > 0)) {
 800344a:	4b72      	ldr	r3, [pc, #456]	; (8003614 <main+0x1cbc>)
 800344c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003450:	f04f 0200 	mov.w	r2, #0
 8003454:	f04f 0300 	mov.w	r3, #0
 8003458:	f015 ff8e 	bl	8019378 <__aeabi_dcmpgt>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	f000 81f4 	beq.w	800384c <main+0x1ef4>

						remoteSensorLastUpdate = 0;
 8003464:	4b72      	ldr	r3, [pc, #456]	; (8003630 <main+0x1cd8>)
 8003466:	2200      	movs	r2, #0
 8003468:	801a      	strh	r2, [r3, #0]

						sprintf(clockPrint, "%02d", rtcSecLast);
 800346a:	4b72      	ldr	r3, [pc, #456]	; (8003634 <main+0x1cdc>)
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	461a      	mov	r2, r3
 8003470:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003474:	4970      	ldr	r1, [pc, #448]	; (8003638 <main+0x1ce0>)
 8003476:	4618      	mov	r0, r3
 8003478:	f017 f8ce 	bl	801a618 <siprintf>
						LCD_Font(375, 40, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 800347c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003480:	2300      	movs	r3, #0
 8003482:	9301      	str	r3, [sp, #4]
 8003484:	2301      	movs	r3, #1
 8003486:	9300      	str	r3, [sp, #0]
 8003488:	4b6c      	ldr	r3, [pc, #432]	; (800363c <main+0x1ce4>)
 800348a:	2128      	movs	r1, #40	; 0x28
 800348c:	f240 1077 	movw	r0, #375	; 0x177
 8003490:	f002 f898 	bl	80055c4 <LCD_Font>

						char weatherPrintRemoteT[5];
						if (temperatureRemoteLast <= -10) {
 8003494:	4b62      	ldr	r3, [pc, #392]	; (8003620 <main+0x1cc8>)
 8003496:	e9d3 0100 	ldrd	r0, r1, [r3]
 800349a:	f04f 0200 	mov.w	r2, #0
 800349e:	4b68      	ldr	r3, [pc, #416]	; (8003640 <main+0x1ce8>)
 80034a0:	f015 ff56 	bl	8019350 <__aeabi_dcmple>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d014      	beq.n	80034d4 <main+0x1b7c>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 80034aa:	4b5d      	ldr	r3, [pc, #372]	; (8003620 <main+0x1cc8>)
 80034ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b0:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80034b4:	4963      	ldr	r1, [pc, #396]	; (8003644 <main+0x1cec>)
 80034b6:	f017 f8af 	bl	801a618 <siprintf>
							LCD_Font(353, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 80034ba:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80034be:	2300      	movs	r3, #0
 80034c0:	9301      	str	r3, [sp, #4]
 80034c2:	2301      	movs	r3, #1
 80034c4:	9300      	str	r3, [sp, #0]
 80034c6:	4b5d      	ldr	r3, [pc, #372]	; (800363c <main+0x1ce4>)
 80034c8:	215a      	movs	r1, #90	; 0x5a
 80034ca:	f240 1061 	movw	r0, #353	; 0x161
 80034ce:	f002 f879 	bl	80055c4 <LCD_Font>
 80034d2:	e076      	b.n	80035c2 <main+0x1c6a>
						}
						else if (temperatureRemoteLast < 0 && temperatureRemoteLast > -10) {
 80034d4:	4b52      	ldr	r3, [pc, #328]	; (8003620 <main+0x1cc8>)
 80034d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034da:	f04f 0200 	mov.w	r2, #0
 80034de:	f04f 0300 	mov.w	r3, #0
 80034e2:	f015 ff2b 	bl	801933c <__aeabi_dcmplt>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d01f      	beq.n	800352c <main+0x1bd4>
 80034ec:	4b4c      	ldr	r3, [pc, #304]	; (8003620 <main+0x1cc8>)
 80034ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034f2:	f04f 0200 	mov.w	r2, #0
 80034f6:	4b52      	ldr	r3, [pc, #328]	; (8003640 <main+0x1ce8>)
 80034f8:	f015 ff3e 	bl	8019378 <__aeabi_dcmpgt>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d014      	beq.n	800352c <main+0x1bd4>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 8003502:	4b47      	ldr	r3, [pc, #284]	; (8003620 <main+0x1cc8>)
 8003504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003508:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800350c:	494d      	ldr	r1, [pc, #308]	; (8003644 <main+0x1cec>)
 800350e:	f017 f883 	bl	801a618 <siprintf>
							LCD_Font(385, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8003512:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003516:	2300      	movs	r3, #0
 8003518:	9301      	str	r3, [sp, #4]
 800351a:	2301      	movs	r3, #1
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	4b47      	ldr	r3, [pc, #284]	; (800363c <main+0x1ce4>)
 8003520:	215a      	movs	r1, #90	; 0x5a
 8003522:	f240 1081 	movw	r0, #385	; 0x181
 8003526:	f002 f84d 	bl	80055c4 <LCD_Font>
 800352a:	e04a      	b.n	80035c2 <main+0x1c6a>
						}
						else if (temperatureRemoteLast > 0 && temperatureRemoteLast < 10) {
 800352c:	4b3c      	ldr	r3, [pc, #240]	; (8003620 <main+0x1cc8>)
 800352e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003532:	f04f 0200 	mov.w	r2, #0
 8003536:	f04f 0300 	mov.w	r3, #0
 800353a:	f015 ff1d 	bl	8019378 <__aeabi_dcmpgt>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d01f      	beq.n	8003584 <main+0x1c2c>
 8003544:	4b36      	ldr	r3, [pc, #216]	; (8003620 <main+0x1cc8>)
 8003546:	e9d3 0100 	ldrd	r0, r1, [r3]
 800354a:	f04f 0200 	mov.w	r2, #0
 800354e:	4b32      	ldr	r3, [pc, #200]	; (8003618 <main+0x1cc0>)
 8003550:	f015 fef4 	bl	801933c <__aeabi_dcmplt>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d014      	beq.n	8003584 <main+0x1c2c>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 800355a:	4b31      	ldr	r3, [pc, #196]	; (8003620 <main+0x1cc8>)
 800355c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003560:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8003564:	4938      	ldr	r1, [pc, #224]	; (8003648 <main+0x1cf0>)
 8003566:	f017 f857 	bl	801a618 <siprintf>
							LCD_Font(362, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 800356a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800356e:	2300      	movs	r3, #0
 8003570:	9301      	str	r3, [sp, #4]
 8003572:	2301      	movs	r3, #1
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	4b31      	ldr	r3, [pc, #196]	; (800363c <main+0x1ce4>)
 8003578:	215a      	movs	r1, #90	; 0x5a
 800357a:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 800357e:	f002 f821 	bl	80055c4 <LCD_Font>
 8003582:	e01e      	b.n	80035c2 <main+0x1c6a>
						}
						else if (temperatureRemoteLast >= 10) {
 8003584:	4b26      	ldr	r3, [pc, #152]	; (8003620 <main+0x1cc8>)
 8003586:	e9d3 0100 	ldrd	r0, r1, [r3]
 800358a:	f04f 0200 	mov.w	r2, #0
 800358e:	4b22      	ldr	r3, [pc, #136]	; (8003618 <main+0x1cc0>)
 8003590:	f015 fee8 	bl	8019364 <__aeabi_dcmpge>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d013      	beq.n	80035c2 <main+0x1c6a>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 800359a:	4b21      	ldr	r3, [pc, #132]	; (8003620 <main+0x1cc8>)
 800359c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a0:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80035a4:	4928      	ldr	r1, [pc, #160]	; (8003648 <main+0x1cf0>)
 80035a6:	f017 f837 	bl	801a618 <siprintf>
							LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 80035aa:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80035ae:	2300      	movs	r3, #0
 80035b0:	9301      	str	r3, [sp, #4]
 80035b2:	2301      	movs	r3, #1
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	4b21      	ldr	r3, [pc, #132]	; (800363c <main+0x1ce4>)
 80035b8:	215a      	movs	r1, #90	; 0x5a
 80035ba:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 80035be:	f002 f801 	bl	80055c4 <LCD_Font>
						}
						temperatureRemoteLast = temperatureRemote;
 80035c2:	4b16      	ldr	r3, [pc, #88]	; (800361c <main+0x1cc4>)
 80035c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c8:	4915      	ldr	r1, [pc, #84]	; (8003620 <main+0x1cc8>)
 80035ca:	e9c1 2300 	strd	r2, r3, [r1]
						if (temperatureRemoteLast <= -10) {
 80035ce:	4b14      	ldr	r3, [pc, #80]	; (8003620 <main+0x1cc8>)
 80035d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035d4:	f04f 0200 	mov.w	r2, #0
 80035d8:	4b19      	ldr	r3, [pc, #100]	; (8003640 <main+0x1ce8>)
 80035da:	f015 feb9 	bl	8019350 <__aeabi_dcmple>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d033      	beq.n	800364c <main+0x1cf4>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 80035e4:	4b0e      	ldr	r3, [pc, #56]	; (8003620 <main+0x1cc8>)
 80035e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ea:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80035ee:	4915      	ldr	r1, [pc, #84]	; (8003644 <main+0x1cec>)
 80035f0:	f017 f812 	bl	801a618 <siprintf>
							LCD_Font(353, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 80035f4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80035f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035fc:	9301      	str	r3, [sp, #4]
 80035fe:	2301      	movs	r3, #1
 8003600:	9300      	str	r3, [sp, #0]
 8003602:	4b0e      	ldr	r3, [pc, #56]	; (800363c <main+0x1ce4>)
 8003604:	215a      	movs	r1, #90	; 0x5a
 8003606:	f240 1061 	movw	r0, #353	; 0x161
 800360a:	f001 ffdb 	bl	80055c4 <LCD_Font>
 800360e:	e097      	b.n	8003740 <main+0x1de8>
 8003610:	20000964 	.word	0x20000964
 8003614:	200005a8 	.word	0x200005a8
 8003618:	40240000 	.word	0x40240000
 800361c:	20000598 	.word	0x20000598
 8003620:	200005a0 	.word	0x200005a0
 8003624:	40554000 	.word	0x40554000
 8003628:	c0440000 	.word	0xc0440000
 800362c:	200005b0 	.word	0x200005b0
 8003630:	20000004 	.word	0x20000004
 8003634:	20000000 	.word	0x20000000
 8003638:	08052134 	.word	0x08052134
 800363c:	080298b0 	.word	0x080298b0
 8003640:	c0240000 	.word	0xc0240000
 8003644:	08052180 	.word	0x08052180
 8003648:	08052188 	.word	0x08052188
						}
						else if (temperatureRemoteLast < 0 && temperatureRemoteLast > -10) {
 800364c:	4bac      	ldr	r3, [pc, #688]	; (8003900 <main+0x1fa8>)
 800364e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003652:	f04f 0200 	mov.w	r2, #0
 8003656:	f04f 0300 	mov.w	r3, #0
 800365a:	f015 fe6f 	bl	801933c <__aeabi_dcmplt>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d020      	beq.n	80036a6 <main+0x1d4e>
 8003664:	4ba6      	ldr	r3, [pc, #664]	; (8003900 <main+0x1fa8>)
 8003666:	e9d3 0100 	ldrd	r0, r1, [r3]
 800366a:	f04f 0200 	mov.w	r2, #0
 800366e:	4ba5      	ldr	r3, [pc, #660]	; (8003904 <main+0x1fac>)
 8003670:	f015 fe82 	bl	8019378 <__aeabi_dcmpgt>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d015      	beq.n	80036a6 <main+0x1d4e>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 800367a:	4ba1      	ldr	r3, [pc, #644]	; (8003900 <main+0x1fa8>)
 800367c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003680:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8003684:	49a0      	ldr	r1, [pc, #640]	; (8003908 <main+0x1fb0>)
 8003686:	f016 ffc7 	bl	801a618 <siprintf>
							LCD_Font(385, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 800368a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800368e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003692:	9301      	str	r3, [sp, #4]
 8003694:	2301      	movs	r3, #1
 8003696:	9300      	str	r3, [sp, #0]
 8003698:	4b9c      	ldr	r3, [pc, #624]	; (800390c <main+0x1fb4>)
 800369a:	215a      	movs	r1, #90	; 0x5a
 800369c:	f240 1081 	movw	r0, #385	; 0x181
 80036a0:	f001 ff90 	bl	80055c4 <LCD_Font>
 80036a4:	e04c      	b.n	8003740 <main+0x1de8>
						}
						else if (temperatureRemoteLast > 0 && temperatureRemoteLast < 10) {
 80036a6:	4b96      	ldr	r3, [pc, #600]	; (8003900 <main+0x1fa8>)
 80036a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036ac:	f04f 0200 	mov.w	r2, #0
 80036b0:	f04f 0300 	mov.w	r3, #0
 80036b4:	f015 fe60 	bl	8019378 <__aeabi_dcmpgt>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d020      	beq.n	8003700 <main+0x1da8>
 80036be:	4b90      	ldr	r3, [pc, #576]	; (8003900 <main+0x1fa8>)
 80036c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036c4:	f04f 0200 	mov.w	r2, #0
 80036c8:	4b91      	ldr	r3, [pc, #580]	; (8003910 <main+0x1fb8>)
 80036ca:	f015 fe37 	bl	801933c <__aeabi_dcmplt>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d015      	beq.n	8003700 <main+0x1da8>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 80036d4:	4b8a      	ldr	r3, [pc, #552]	; (8003900 <main+0x1fa8>)
 80036d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036da:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80036de:	498d      	ldr	r1, [pc, #564]	; (8003914 <main+0x1fbc>)
 80036e0:	f016 ff9a 	bl	801a618 <siprintf>
							LCD_Font(362, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 80036e4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80036e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036ec:	9301      	str	r3, [sp, #4]
 80036ee:	2301      	movs	r3, #1
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	4b86      	ldr	r3, [pc, #536]	; (800390c <main+0x1fb4>)
 80036f4:	215a      	movs	r1, #90	; 0x5a
 80036f6:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 80036fa:	f001 ff63 	bl	80055c4 <LCD_Font>
 80036fe:	e01f      	b.n	8003740 <main+0x1de8>
						}
						else if (temperatureRemoteLast >= 10) {
 8003700:	4b7f      	ldr	r3, [pc, #508]	; (8003900 <main+0x1fa8>)
 8003702:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003706:	f04f 0200 	mov.w	r2, #0
 800370a:	4b81      	ldr	r3, [pc, #516]	; (8003910 <main+0x1fb8>)
 800370c:	f015 fe2a 	bl	8019364 <__aeabi_dcmpge>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d014      	beq.n	8003740 <main+0x1de8>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 8003716:	4b7a      	ldr	r3, [pc, #488]	; (8003900 <main+0x1fa8>)
 8003718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800371c:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8003720:	497c      	ldr	r1, [pc, #496]	; (8003914 <main+0x1fbc>)
 8003722:	f016 ff79 	bl	801a618 <siprintf>
							LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 8003726:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800372a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800372e:	9301      	str	r3, [sp, #4]
 8003730:	2301      	movs	r3, #1
 8003732:	9300      	str	r3, [sp, #0]
 8003734:	4b75      	ldr	r3, [pc, #468]	; (800390c <main+0x1fb4>)
 8003736:	215a      	movs	r1, #90	; 0x5a
 8003738:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 800373c:	f001 ff42 	bl	80055c4 <LCD_Font>
						}


						char weatherPrintRemoteH[4];

						if (humidityRemoteLast >= 10) {
 8003740:	4b75      	ldr	r3, [pc, #468]	; (8003918 <main+0x1fc0>)
 8003742:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003746:	f04f 0200 	mov.w	r2, #0
 800374a:	4b71      	ldr	r3, [pc, #452]	; (8003910 <main+0x1fb8>)
 800374c:	f015 fe0a 	bl	8019364 <__aeabi_dcmpge>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d014      	beq.n	8003780 <main+0x1e28>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 8003756:	4b70      	ldr	r3, [pc, #448]	; (8003918 <main+0x1fc0>)
 8003758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375c:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003760:	4969      	ldr	r1, [pc, #420]	; (8003908 <main+0x1fb0>)
 8003762:	f016 ff59 	bl	801a618 <siprintf>
							LCD_Font(371, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 8003766:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800376a:	2300      	movs	r3, #0
 800376c:	9301      	str	r3, [sp, #4]
 800376e:	2301      	movs	r3, #1
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	4b66      	ldr	r3, [pc, #408]	; (800390c <main+0x1fb4>)
 8003774:	2128      	movs	r1, #40	; 0x28
 8003776:	f240 1073 	movw	r0, #371	; 0x173
 800377a:	f001 ff23 	bl	80055c4 <LCD_Font>
 800377e:	e01e      	b.n	80037be <main+0x1e66>
						}
						else if (humidityRemoteLast < 10) {
 8003780:	4b65      	ldr	r3, [pc, #404]	; (8003918 <main+0x1fc0>)
 8003782:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003786:	f04f 0200 	mov.w	r2, #0
 800378a:	4b61      	ldr	r3, [pc, #388]	; (8003910 <main+0x1fb8>)
 800378c:	f015 fdd6 	bl	801933c <__aeabi_dcmplt>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d013      	beq.n	80037be <main+0x1e66>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 8003796:	4b60      	ldr	r3, [pc, #384]	; (8003918 <main+0x1fc0>)
 8003798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379c:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80037a0:	4959      	ldr	r1, [pc, #356]	; (8003908 <main+0x1fb0>)
 80037a2:	f016 ff39 	bl	801a618 <siprintf>
							LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 80037a6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80037aa:	2300      	movs	r3, #0
 80037ac:	9301      	str	r3, [sp, #4]
 80037ae:	2301      	movs	r3, #1
 80037b0:	9300      	str	r3, [sp, #0]
 80037b2:	4b56      	ldr	r3, [pc, #344]	; (800390c <main+0x1fb4>)
 80037b4:	2128      	movs	r1, #40	; 0x28
 80037b6:	f240 1093 	movw	r0, #403	; 0x193
 80037ba:	f001 ff03 	bl	80055c4 <LCD_Font>
						}

						humidityRemoteLast = humidityRemote;
 80037be:	4b57      	ldr	r3, [pc, #348]	; (800391c <main+0x1fc4>)
 80037c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c4:	4954      	ldr	r1, [pc, #336]	; (8003918 <main+0x1fc0>)
 80037c6:	e9c1 2300 	strd	r2, r3, [r1]

						if (humidityRemoteLast >= 10) {
 80037ca:	4b53      	ldr	r3, [pc, #332]	; (8003918 <main+0x1fc0>)
 80037cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037d0:	f04f 0200 	mov.w	r2, #0
 80037d4:	4b4e      	ldr	r3, [pc, #312]	; (8003910 <main+0x1fb8>)
 80037d6:	f015 fdc5 	bl	8019364 <__aeabi_dcmpge>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d015      	beq.n	800380c <main+0x1eb4>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 80037e0:	4b4d      	ldr	r3, [pc, #308]	; (8003918 <main+0x1fc0>)
 80037e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e6:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80037ea:	4947      	ldr	r1, [pc, #284]	; (8003908 <main+0x1fb0>)
 80037ec:	f016 ff14 	bl	801a618 <siprintf>
							LCD_Font(371, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, CYAN);
 80037f0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80037f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037f8:	9301      	str	r3, [sp, #4]
 80037fa:	2301      	movs	r3, #1
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	4b43      	ldr	r3, [pc, #268]	; (800390c <main+0x1fb4>)
 8003800:	2128      	movs	r1, #40	; 0x28
 8003802:	f240 1073 	movw	r0, #371	; 0x173
 8003806:	f001 fedd 	bl	80055c4 <LCD_Font>
 800380a:	e01f      	b.n	800384c <main+0x1ef4>
						}
						else if (humidityRemoteLast < 10) {
 800380c:	4b42      	ldr	r3, [pc, #264]	; (8003918 <main+0x1fc0>)
 800380e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003812:	f04f 0200 	mov.w	r2, #0
 8003816:	4b3e      	ldr	r3, [pc, #248]	; (8003910 <main+0x1fb8>)
 8003818:	f015 fd90 	bl	801933c <__aeabi_dcmplt>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d014      	beq.n	800384c <main+0x1ef4>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 8003822:	4b3d      	ldr	r3, [pc, #244]	; (8003918 <main+0x1fc0>)
 8003824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003828:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800382c:	4936      	ldr	r1, [pc, #216]	; (8003908 <main+0x1fb0>)
 800382e:	f016 fef3 	bl	801a618 <siprintf>
							LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, CYAN);
 8003832:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003836:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800383a:	9301      	str	r3, [sp, #4]
 800383c:	2301      	movs	r3, #1
 800383e:	9300      	str	r3, [sp, #0]
 8003840:	4b32      	ldr	r3, [pc, #200]	; (800390c <main+0x1fb4>)
 8003842:	2128      	movs	r1, #40	; 0x28
 8003844:	f240 1093 	movw	r0, #403	; 0x193
 8003848:	f001 febc 	bl	80055c4 <LCD_Font>
						}
					}
				}
				rx_index = 0;
 800384c:	4b34      	ldr	r3, [pc, #208]	; (8003920 <main+0x1fc8>)
 800384e:	2200      	movs	r2, #0
 8003850:	701a      	strb	r2, [r3, #0]
				for (uint8_t i = 0; i < UART_RX_BUFFER_SIZE; i++) rx_buffer[i] = 0;
 8003852:	2300      	movs	r3, #0
 8003854:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
 8003858:	e009      	b.n	800386e <main+0x1f16>
 800385a:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800385e:	4a31      	ldr	r2, [pc, #196]	; (8003924 <main+0x1fcc>)
 8003860:	2100      	movs	r1, #0
 8003862:	54d1      	strb	r1, [r2, r3]
 8003864:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003868:	3301      	adds	r3, #1
 800386a:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
 800386e:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003872:	2b0f      	cmp	r3, #15
 8003874:	d9f1      	bls.n	800385a <main+0x1f02>
			}

			remoteSensorLastUpdate++;
 8003876:	4b2c      	ldr	r3, [pc, #176]	; (8003928 <main+0x1fd0>)
 8003878:	881b      	ldrh	r3, [r3, #0]
 800387a:	3301      	adds	r3, #1
 800387c:	b29a      	uxth	r2, r3
 800387e:	4b2a      	ldr	r3, [pc, #168]	; (8003928 <main+0x1fd0>)
 8003880:	801a      	strh	r2, [r3, #0]

			if (remoteSensorLastUpdate > WAIT_REMOTE_SENSOR_SEC) {
 8003882:	4b29      	ldr	r3, [pc, #164]	; (8003928 <main+0x1fd0>)
 8003884:	881b      	ldrh	r3, [r3, #0]
 8003886:	2b64      	cmp	r3, #100	; 0x64
 8003888:	f240 813e 	bls.w	8003b08 <main+0x21b0>

				if (temperatureRemoteLast && humidityRemoteLast) {
 800388c:	4b1c      	ldr	r3, [pc, #112]	; (8003900 <main+0x1fa8>)
 800388e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003892:	f04f 0200 	mov.w	r2, #0
 8003896:	f04f 0300 	mov.w	r3, #0
 800389a:	f015 fd45 	bl	8019328 <__aeabi_dcmpeq>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f040 8107 	bne.w	8003ab4 <main+0x215c>
 80038a6:	4b1c      	ldr	r3, [pc, #112]	; (8003918 <main+0x1fc0>)
 80038a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80038ac:	f04f 0200 	mov.w	r2, #0
 80038b0:	f04f 0300 	mov.w	r3, #0
 80038b4:	f015 fd38 	bl	8019328 <__aeabi_dcmpeq>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f040 80fa 	bne.w	8003ab4 <main+0x215c>

					char weatherPrintRemoteT[5];
					if (temperatureRemoteLast <= -10) {
 80038c0:	4b0f      	ldr	r3, [pc, #60]	; (8003900 <main+0x1fa8>)
 80038c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80038c6:	f04f 0200 	mov.w	r2, #0
 80038ca:	4b0e      	ldr	r3, [pc, #56]	; (8003904 <main+0x1fac>)
 80038cc:	f015 fd40 	bl	8019350 <__aeabi_dcmple>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d02a      	beq.n	800392c <main+0x1fd4>
						sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 80038d6:	4b0a      	ldr	r3, [pc, #40]	; (8003900 <main+0x1fa8>)
 80038d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038dc:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80038e0:	4909      	ldr	r1, [pc, #36]	; (8003908 <main+0x1fb0>)
 80038e2:	f016 fe99 	bl	801a618 <siprintf>
						LCD_Font(353, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 80038e6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80038ea:	2300      	movs	r3, #0
 80038ec:	9301      	str	r3, [sp, #4]
 80038ee:	2301      	movs	r3, #1
 80038f0:	9300      	str	r3, [sp, #0]
 80038f2:	4b06      	ldr	r3, [pc, #24]	; (800390c <main+0x1fb4>)
 80038f4:	215a      	movs	r1, #90	; 0x5a
 80038f6:	f240 1061 	movw	r0, #353	; 0x161
 80038fa:	f001 fe63 	bl	80055c4 <LCD_Font>
 80038fe:	e08c      	b.n	8003a1a <main+0x20c2>
 8003900:	200005a0 	.word	0x200005a0
 8003904:	c0240000 	.word	0xc0240000
 8003908:	08052180 	.word	0x08052180
 800390c:	080298b0 	.word	0x080298b0
 8003910:	40240000 	.word	0x40240000
 8003914:	08052188 	.word	0x08052188
 8003918:	200005b0 	.word	0x200005b0
 800391c:	200005a8 	.word	0x200005a8
 8003920:	20000974 	.word	0x20000974
 8003924:	20000964 	.word	0x20000964
 8003928:	20000004 	.word	0x20000004
					}
					else if (temperatureRemoteLast < 0 && temperatureRemoteLast > -10) {
 800392c:	4b7c      	ldr	r3, [pc, #496]	; (8003b20 <main+0x21c8>)
 800392e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003932:	f04f 0200 	mov.w	r2, #0
 8003936:	f04f 0300 	mov.w	r3, #0
 800393a:	f015 fcff 	bl	801933c <__aeabi_dcmplt>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d01f      	beq.n	8003984 <main+0x202c>
 8003944:	4b76      	ldr	r3, [pc, #472]	; (8003b20 <main+0x21c8>)
 8003946:	e9d3 0100 	ldrd	r0, r1, [r3]
 800394a:	f04f 0200 	mov.w	r2, #0
 800394e:	4b75      	ldr	r3, [pc, #468]	; (8003b24 <main+0x21cc>)
 8003950:	f015 fd12 	bl	8019378 <__aeabi_dcmpgt>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d014      	beq.n	8003984 <main+0x202c>
						sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 800395a:	4b71      	ldr	r3, [pc, #452]	; (8003b20 <main+0x21c8>)
 800395c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003960:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8003964:	4970      	ldr	r1, [pc, #448]	; (8003b28 <main+0x21d0>)
 8003966:	f016 fe57 	bl	801a618 <siprintf>
						LCD_Font(385, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 800396a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800396e:	2300      	movs	r3, #0
 8003970:	9301      	str	r3, [sp, #4]
 8003972:	2301      	movs	r3, #1
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	4b6d      	ldr	r3, [pc, #436]	; (8003b2c <main+0x21d4>)
 8003978:	215a      	movs	r1, #90	; 0x5a
 800397a:	f240 1081 	movw	r0, #385	; 0x181
 800397e:	f001 fe21 	bl	80055c4 <LCD_Font>
 8003982:	e04a      	b.n	8003a1a <main+0x20c2>
					}
					else if (temperatureRemoteLast > 0 && temperatureRemoteLast < 10) {
 8003984:	4b66      	ldr	r3, [pc, #408]	; (8003b20 <main+0x21c8>)
 8003986:	e9d3 0100 	ldrd	r0, r1, [r3]
 800398a:	f04f 0200 	mov.w	r2, #0
 800398e:	f04f 0300 	mov.w	r3, #0
 8003992:	f015 fcf1 	bl	8019378 <__aeabi_dcmpgt>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d01f      	beq.n	80039dc <main+0x2084>
 800399c:	4b60      	ldr	r3, [pc, #384]	; (8003b20 <main+0x21c8>)
 800399e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80039a2:	f04f 0200 	mov.w	r2, #0
 80039a6:	4b62      	ldr	r3, [pc, #392]	; (8003b30 <main+0x21d8>)
 80039a8:	f015 fcc8 	bl	801933c <__aeabi_dcmplt>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d014      	beq.n	80039dc <main+0x2084>
						sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 80039b2:	4b5b      	ldr	r3, [pc, #364]	; (8003b20 <main+0x21c8>)
 80039b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b8:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80039bc:	495d      	ldr	r1, [pc, #372]	; (8003b34 <main+0x21dc>)
 80039be:	f016 fe2b 	bl	801a618 <siprintf>
						LCD_Font(362, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 80039c2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80039c6:	2300      	movs	r3, #0
 80039c8:	9301      	str	r3, [sp, #4]
 80039ca:	2301      	movs	r3, #1
 80039cc:	9300      	str	r3, [sp, #0]
 80039ce:	4b57      	ldr	r3, [pc, #348]	; (8003b2c <main+0x21d4>)
 80039d0:	215a      	movs	r1, #90	; 0x5a
 80039d2:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 80039d6:	f001 fdf5 	bl	80055c4 <LCD_Font>
 80039da:	e01e      	b.n	8003a1a <main+0x20c2>
					}
					else if (temperatureRemoteLast >= 10) {
 80039dc:	4b50      	ldr	r3, [pc, #320]	; (8003b20 <main+0x21c8>)
 80039de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80039e2:	f04f 0200 	mov.w	r2, #0
 80039e6:	4b52      	ldr	r3, [pc, #328]	; (8003b30 <main+0x21d8>)
 80039e8:	f015 fcbc 	bl	8019364 <__aeabi_dcmpge>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d013      	beq.n	8003a1a <main+0x20c2>
						sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 80039f2:	4b4b      	ldr	r3, [pc, #300]	; (8003b20 <main+0x21c8>)
 80039f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f8:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80039fc:	494d      	ldr	r1, [pc, #308]	; (8003b34 <main+0x21dc>)
 80039fe:	f016 fe0b 	bl	801a618 <siprintf>
						LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8003a02:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003a06:	2300      	movs	r3, #0
 8003a08:	9301      	str	r3, [sp, #4]
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	9300      	str	r3, [sp, #0]
 8003a0e:	4b47      	ldr	r3, [pc, #284]	; (8003b2c <main+0x21d4>)
 8003a10:	215a      	movs	r1, #90	; 0x5a
 8003a12:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8003a16:	f001 fdd5 	bl	80055c4 <LCD_Font>
					}

					char weatherPrintRemoteH[4];

					if (humidityRemoteLast >= 10) {
 8003a1a:	4b47      	ldr	r3, [pc, #284]	; (8003b38 <main+0x21e0>)
 8003a1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a20:	f04f 0200 	mov.w	r2, #0
 8003a24:	4b42      	ldr	r3, [pc, #264]	; (8003b30 <main+0x21d8>)
 8003a26:	f015 fc9d 	bl	8019364 <__aeabi_dcmpge>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d014      	beq.n	8003a5a <main+0x2102>
						sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 8003a30:	4b41      	ldr	r3, [pc, #260]	; (8003b38 <main+0x21e0>)
 8003a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a36:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8003a3a:	493b      	ldr	r1, [pc, #236]	; (8003b28 <main+0x21d0>)
 8003a3c:	f016 fdec 	bl	801a618 <siprintf>
						LCD_Font(371, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 8003a40:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003a44:	2300      	movs	r3, #0
 8003a46:	9301      	str	r3, [sp, #4]
 8003a48:	2301      	movs	r3, #1
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	4b37      	ldr	r3, [pc, #220]	; (8003b2c <main+0x21d4>)
 8003a4e:	2128      	movs	r1, #40	; 0x28
 8003a50:	f240 1073 	movw	r0, #371	; 0x173
 8003a54:	f001 fdb6 	bl	80055c4 <LCD_Font>
 8003a58:	e01e      	b.n	8003a98 <main+0x2140>
					}
					else if (humidityRemoteLast < 10) {
 8003a5a:	4b37      	ldr	r3, [pc, #220]	; (8003b38 <main+0x21e0>)
 8003a5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a60:	f04f 0200 	mov.w	r2, #0
 8003a64:	4b32      	ldr	r3, [pc, #200]	; (8003b30 <main+0x21d8>)
 8003a66:	f015 fc69 	bl	801933c <__aeabi_dcmplt>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d013      	beq.n	8003a98 <main+0x2140>
						sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 8003a70:	4b31      	ldr	r3, [pc, #196]	; (8003b38 <main+0x21e0>)
 8003a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a76:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8003a7a:	492b      	ldr	r1, [pc, #172]	; (8003b28 <main+0x21d0>)
 8003a7c:	f016 fdcc 	bl	801a618 <siprintf>
						LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 8003a80:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003a84:	2300      	movs	r3, #0
 8003a86:	9301      	str	r3, [sp, #4]
 8003a88:	2301      	movs	r3, #1
 8003a8a:	9300      	str	r3, [sp, #0]
 8003a8c:	4b27      	ldr	r3, [pc, #156]	; (8003b2c <main+0x21d4>)
 8003a8e:	2128      	movs	r1, #40	; 0x28
 8003a90:	f240 1093 	movw	r0, #403	; 0x193
 8003a94:	f001 fd96 	bl	80055c4 <LCD_Font>
					}

					temperatureRemoteLast = 0;
 8003a98:	4921      	ldr	r1, [pc, #132]	; (8003b20 <main+0x21c8>)
 8003a9a:	f04f 0200 	mov.w	r2, #0
 8003a9e:	f04f 0300 	mov.w	r3, #0
 8003aa2:	e9c1 2300 	strd	r2, r3, [r1]
					humidityRemoteLast = 0;
 8003aa6:	4924      	ldr	r1, [pc, #144]	; (8003b38 <main+0x21e0>)
 8003aa8:	f04f 0200 	mov.w	r2, #0
 8003aac:	f04f 0300 	mov.w	r3, #0
 8003ab0:	e9c1 2300 	strd	r2, r3, [r1]
				}

				sprintf(clockPrint, "%02d", rtcSecLast);
 8003ab4:	4b21      	ldr	r3, [pc, #132]	; (8003b3c <main+0x21e4>)
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	461a      	mov	r2, r3
 8003aba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003abe:	4920      	ldr	r1, [pc, #128]	; (8003b40 <main+0x21e8>)
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f016 fda9 	bl	801a618 <siprintf>
				LCD_Font(375, 40, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 8003ac6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003aca:	2300      	movs	r3, #0
 8003acc:	9301      	str	r3, [sp, #4]
 8003ace:	2301      	movs	r3, #1
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	4b16      	ldr	r3, [pc, #88]	; (8003b2c <main+0x21d4>)
 8003ad4:	2128      	movs	r1, #40	; 0x28
 8003ad6:	f240 1077 	movw	r0, #375	; 0x177
 8003ada:	f001 fd73 	bl	80055c4 <LCD_Font>
				sprintf(clockPrint, "%02d", rtcSec);
 8003ade:	4b19      	ldr	r3, [pc, #100]	; (8003b44 <main+0x21ec>)
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003ae8:	4915      	ldr	r1, [pc, #84]	; (8003b40 <main+0x21e8>)
 8003aea:	4618      	mov	r0, r3
 8003aec:	f016 fd94 	bl	801a618 <siprintf>
				LCD_Font(375, 40, clockPrint, &DejaVu_Sans_48, 1, ORANGE);
 8003af0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003af4:	4b14      	ldr	r3, [pc, #80]	; (8003b48 <main+0x21f0>)
 8003af6:	9301      	str	r3, [sp, #4]
 8003af8:	2301      	movs	r3, #1
 8003afa:	9300      	str	r3, [sp, #0]
 8003afc:	4b0b      	ldr	r3, [pc, #44]	; (8003b2c <main+0x21d4>)
 8003afe:	2128      	movs	r1, #40	; 0x28
 8003b00:	f240 1077 	movw	r0, #375	; 0x177
 8003b04:	f001 fd5e 	bl	80055c4 <LCD_Font>
			}
			rtcSecLast = rtcSec;
 8003b08:	4b0e      	ldr	r3, [pc, #56]	; (8003b44 <main+0x21ec>)
 8003b0a:	781a      	ldrb	r2, [r3, #0]
 8003b0c:	4b0b      	ldr	r3, [pc, #44]	; (8003b3c <main+0x21e4>)
 8003b0e:	701a      	strb	r2, [r3, #0]
	{
 8003b10:	f7fe b9c5 	b.w	8001e9e <main+0x546>
		return;
 8003b14:	bf00      	nop
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
  /* USER CODE END 3 */
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	f507 7782 	add.w	r7, r7, #260	; 0x104
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b20:	200005a0 	.word	0x200005a0
 8003b24:	c0240000 	.word	0xc0240000
 8003b28:	08052180 	.word	0x08052180
 8003b2c:	080298b0 	.word	0x080298b0
 8003b30:	40240000 	.word	0x40240000
 8003b34:	08052188 	.word	0x08052188
 8003b38:	200005b0 	.word	0x200005b0
 8003b3c:	20000000 	.word	0x20000000
 8003b40:	08052134 	.word	0x08052134
 8003b44:	2000056d 	.word	0x2000056d
 8003b48:	00ffa500 	.word	0x00ffa500

08003b4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b094      	sub	sp, #80	; 0x50
 8003b50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b52:	f107 0320 	add.w	r3, r7, #32
 8003b56:	2230      	movs	r2, #48	; 0x30
 8003b58:	2100      	movs	r1, #0
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f015 fed4 	bl	8019908 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b60:	f107 030c 	add.w	r3, r7, #12
 8003b64:	2200      	movs	r2, #0
 8003b66:	601a      	str	r2, [r3, #0]
 8003b68:	605a      	str	r2, [r3, #4]
 8003b6a:	609a      	str	r2, [r3, #8]
 8003b6c:	60da      	str	r2, [r3, #12]
 8003b6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b70:	2300      	movs	r3, #0
 8003b72:	607b      	str	r3, [r7, #4]
 8003b74:	4b28      	ldr	r3, [pc, #160]	; (8003c18 <SystemClock_Config+0xcc>)
 8003b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b78:	4a27      	ldr	r2, [pc, #156]	; (8003c18 <SystemClock_Config+0xcc>)
 8003b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b7e:	6413      	str	r3, [r2, #64]	; 0x40
 8003b80:	4b25      	ldr	r3, [pc, #148]	; (8003c18 <SystemClock_Config+0xcc>)
 8003b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b88:	607b      	str	r3, [r7, #4]
 8003b8a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	60bb      	str	r3, [r7, #8]
 8003b90:	4b22      	ldr	r3, [pc, #136]	; (8003c1c <SystemClock_Config+0xd0>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a21      	ldr	r2, [pc, #132]	; (8003c1c <SystemClock_Config+0xd0>)
 8003b96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b9a:	6013      	str	r3, [r2, #0]
 8003b9c:	4b1f      	ldr	r3, [pc, #124]	; (8003c1c <SystemClock_Config+0xd0>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ba4:	60bb      	str	r3, [r7, #8]
 8003ba6:	68bb      	ldr	r3, [r7, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003bac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bb0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003bb6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003bba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003bbc:	2304      	movs	r3, #4
 8003bbe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003bc0:	23a8      	movs	r3, #168	; 0xa8
 8003bc2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003bc8:	2307      	movs	r3, #7
 8003bca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003bcc:	f107 0320 	add.w	r3, r7, #32
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f00d febf 	bl	8011954 <HAL_RCC_OscConfig>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d001      	beq.n	8003be0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003bdc:	f000 fab0 	bl	8004140 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003be0:	230f      	movs	r3, #15
 8003be2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003be4:	2302      	movs	r3, #2
 8003be6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003be8:	2300      	movs	r3, #0
 8003bea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003bec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003bf0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003bf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bf6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003bf8:	f107 030c 	add.w	r3, r7, #12
 8003bfc:	2105      	movs	r1, #5
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f00e f920 	bl	8011e44 <HAL_RCC_ClockConfig>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003c0a:	f000 fa99 	bl	8004140 <Error_Handler>
  }
}
 8003c0e:	bf00      	nop
 8003c10:	3750      	adds	r7, #80	; 0x50
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	40023800 	.word	0x40023800
 8003c1c:	40007000 	.word	0x40007000

08003c20 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8003c26:	463b      	mov	r3, r7
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]
 8003c2c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8003c2e:	4b14      	ldr	r3, [pc, #80]	; (8003c80 <MX_DAC_Init+0x60>)
 8003c30:	4a14      	ldr	r2, [pc, #80]	; (8003c84 <MX_DAC_Init+0x64>)
 8003c32:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8003c34:	4812      	ldr	r0, [pc, #72]	; (8003c80 <MX_DAC_Init+0x60>)
 8003c36:	f003 faa8 	bl	800718a <HAL_DAC_Init>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8003c40:	f000 fa7e 	bl	8004140 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003c44:	2300      	movs	r3, #0
 8003c46:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003c4c:	463b      	mov	r3, r7
 8003c4e:	2200      	movs	r2, #0
 8003c50:	4619      	mov	r1, r3
 8003c52:	480b      	ldr	r0, [pc, #44]	; (8003c80 <MX_DAC_Init+0x60>)
 8003c54:	f003 fd1d 	bl	8007692 <HAL_DAC_ConfigChannel>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8003c5e:	f000 fa6f 	bl	8004140 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8003c62:	463b      	mov	r3, r7
 8003c64:	2210      	movs	r2, #16
 8003c66:	4619      	mov	r1, r3
 8003c68:	4805      	ldr	r0, [pc, #20]	; (8003c80 <MX_DAC_Init+0x60>)
 8003c6a:	f003 fd12 	bl	8007692 <HAL_DAC_ConfigChannel>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d001      	beq.n	8003c78 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8003c74:	f000 fa64 	bl	8004140 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8003c78:	bf00      	nop
 8003c7a:	3708      	adds	r7, #8
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	200002a8 	.word	0x200002a8
 8003c84:	40007400 	.word	0x40007400

08003c88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003c8c:	4b12      	ldr	r3, [pc, #72]	; (8003cd8 <MX_I2C1_Init+0x50>)
 8003c8e:	4a13      	ldr	r2, [pc, #76]	; (8003cdc <MX_I2C1_Init+0x54>)
 8003c90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003c92:	4b11      	ldr	r3, [pc, #68]	; (8003cd8 <MX_I2C1_Init+0x50>)
 8003c94:	4a12      	ldr	r2, [pc, #72]	; (8003ce0 <MX_I2C1_Init+0x58>)
 8003c96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003c98:	4b0f      	ldr	r3, [pc, #60]	; (8003cd8 <MX_I2C1_Init+0x50>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003c9e:	4b0e      	ldr	r3, [pc, #56]	; (8003cd8 <MX_I2C1_Init+0x50>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003ca4:	4b0c      	ldr	r3, [pc, #48]	; (8003cd8 <MX_I2C1_Init+0x50>)
 8003ca6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003caa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003cac:	4b0a      	ldr	r3, [pc, #40]	; (8003cd8 <MX_I2C1_Init+0x50>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003cb2:	4b09      	ldr	r3, [pc, #36]	; (8003cd8 <MX_I2C1_Init+0x50>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003cb8:	4b07      	ldr	r3, [pc, #28]	; (8003cd8 <MX_I2C1_Init+0x50>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003cbe:	4b06      	ldr	r3, [pc, #24]	; (8003cd8 <MX_I2C1_Init+0x50>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003cc4:	4804      	ldr	r0, [pc, #16]	; (8003cd8 <MX_I2C1_Init+0x50>)
 8003cc6:	f007 fa70 	bl	800b1aa <HAL_I2C_Init>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d001      	beq.n	8003cd4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003cd0:	f000 fa36 	bl	8004140 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003cd4:	bf00      	nop
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	200002bc 	.word	0x200002bc
 8003cdc:	40005400 	.word	0x40005400
 8003ce0:	000186a0 	.word	0x000186a0

08003ce4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003ce8:	4b17      	ldr	r3, [pc, #92]	; (8003d48 <MX_SPI1_Init+0x64>)
 8003cea:	4a18      	ldr	r2, [pc, #96]	; (8003d4c <MX_SPI1_Init+0x68>)
 8003cec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003cee:	4b16      	ldr	r3, [pc, #88]	; (8003d48 <MX_SPI1_Init+0x64>)
 8003cf0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003cf4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003cf6:	4b14      	ldr	r3, [pc, #80]	; (8003d48 <MX_SPI1_Init+0x64>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003cfc:	4b12      	ldr	r3, [pc, #72]	; (8003d48 <MX_SPI1_Init+0x64>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d02:	4b11      	ldr	r3, [pc, #68]	; (8003d48 <MX_SPI1_Init+0x64>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003d08:	4b0f      	ldr	r3, [pc, #60]	; (8003d48 <MX_SPI1_Init+0x64>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003d0e:	4b0e      	ldr	r3, [pc, #56]	; (8003d48 <MX_SPI1_Init+0x64>)
 8003d10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d14:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d16:	4b0c      	ldr	r3, [pc, #48]	; (8003d48 <MX_SPI1_Init+0x64>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d1c:	4b0a      	ldr	r3, [pc, #40]	; (8003d48 <MX_SPI1_Init+0x64>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d22:	4b09      	ldr	r3, [pc, #36]	; (8003d48 <MX_SPI1_Init+0x64>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d28:	4b07      	ldr	r3, [pc, #28]	; (8003d48 <MX_SPI1_Init+0x64>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003d2e:	4b06      	ldr	r3, [pc, #24]	; (8003d48 <MX_SPI1_Init+0x64>)
 8003d30:	220a      	movs	r2, #10
 8003d32:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003d34:	4804      	ldr	r0, [pc, #16]	; (8003d48 <MX_SPI1_Init+0x64>)
 8003d36:	f00e fea5 	bl	8012a84 <HAL_SPI_Init>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d001      	beq.n	8003d44 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003d40:	f000 f9fe 	bl	8004140 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003d44:	bf00      	nop
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	20000310 	.word	0x20000310
 8003d4c:	40013000 	.word	0x40013000

08003d50 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003d54:	4b17      	ldr	r3, [pc, #92]	; (8003db4 <MX_SPI2_Init+0x64>)
 8003d56:	4a18      	ldr	r2, [pc, #96]	; (8003db8 <MX_SPI2_Init+0x68>)
 8003d58:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003d5a:	4b16      	ldr	r3, [pc, #88]	; (8003db4 <MX_SPI2_Init+0x64>)
 8003d5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003d60:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003d62:	4b14      	ldr	r3, [pc, #80]	; (8003db4 <MX_SPI2_Init+0x64>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d68:	4b12      	ldr	r3, [pc, #72]	; (8003db4 <MX_SPI2_Init+0x64>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d6e:	4b11      	ldr	r3, [pc, #68]	; (8003db4 <MX_SPI2_Init+0x64>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003d74:	4b0f      	ldr	r3, [pc, #60]	; (8003db4 <MX_SPI2_Init+0x64>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003d7a:	4b0e      	ldr	r3, [pc, #56]	; (8003db4 <MX_SPI2_Init+0x64>)
 8003d7c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003d80:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003d82:	4b0c      	ldr	r3, [pc, #48]	; (8003db4 <MX_SPI2_Init+0x64>)
 8003d84:	2238      	movs	r2, #56	; 0x38
 8003d86:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d88:	4b0a      	ldr	r3, [pc, #40]	; (8003db4 <MX_SPI2_Init+0x64>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d8e:	4b09      	ldr	r3, [pc, #36]	; (8003db4 <MX_SPI2_Init+0x64>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d94:	4b07      	ldr	r3, [pc, #28]	; (8003db4 <MX_SPI2_Init+0x64>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003d9a:	4b06      	ldr	r3, [pc, #24]	; (8003db4 <MX_SPI2_Init+0x64>)
 8003d9c:	220a      	movs	r2, #10
 8003d9e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003da0:	4804      	ldr	r0, [pc, #16]	; (8003db4 <MX_SPI2_Init+0x64>)
 8003da2:	f00e fe6f 	bl	8012a84 <HAL_SPI_Init>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003dac:	f000 f9c8 	bl	8004140 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003db0:	bf00      	nop
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	20000368 	.word	0x20000368
 8003db8:	40003800 	.word	0x40003800

08003dbc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8003dc0:	4b17      	ldr	r3, [pc, #92]	; (8003e20 <MX_SPI3_Init+0x64>)
 8003dc2:	4a18      	ldr	r2, [pc, #96]	; (8003e24 <MX_SPI3_Init+0x68>)
 8003dc4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003dc6:	4b16      	ldr	r3, [pc, #88]	; (8003e20 <MX_SPI3_Init+0x64>)
 8003dc8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003dcc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003dce:	4b14      	ldr	r3, [pc, #80]	; (8003e20 <MX_SPI3_Init+0x64>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003dd4:	4b12      	ldr	r3, [pc, #72]	; (8003e20 <MX_SPI3_Init+0x64>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003dda:	4b11      	ldr	r3, [pc, #68]	; (8003e20 <MX_SPI3_Init+0x64>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003de0:	4b0f      	ldr	r3, [pc, #60]	; (8003e20 <MX_SPI3_Init+0x64>)
 8003de2:	2200      	movs	r2, #0
 8003de4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003de6:	4b0e      	ldr	r3, [pc, #56]	; (8003e20 <MX_SPI3_Init+0x64>)
 8003de8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003dec:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003dee:	4b0c      	ldr	r3, [pc, #48]	; (8003e20 <MX_SPI3_Init+0x64>)
 8003df0:	2238      	movs	r2, #56	; 0x38
 8003df2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003df4:	4b0a      	ldr	r3, [pc, #40]	; (8003e20 <MX_SPI3_Init+0x64>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003dfa:	4b09      	ldr	r3, [pc, #36]	; (8003e20 <MX_SPI3_Init+0x64>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e00:	4b07      	ldr	r3, [pc, #28]	; (8003e20 <MX_SPI3_Init+0x64>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8003e06:	4b06      	ldr	r3, [pc, #24]	; (8003e20 <MX_SPI3_Init+0x64>)
 8003e08:	220a      	movs	r2, #10
 8003e0a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003e0c:	4804      	ldr	r0, [pc, #16]	; (8003e20 <MX_SPI3_Init+0x64>)
 8003e0e:	f00e fe39 	bl	8012a84 <HAL_SPI_Init>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d001      	beq.n	8003e1c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003e18:	f000 f992 	bl	8004140 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003e1c:	bf00      	nop
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	200003c0 	.word	0x200003c0
 8003e24:	40003c00 	.word	0x40003c00

08003e28 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003e2c:	4b11      	ldr	r3, [pc, #68]	; (8003e74 <MX_USART1_UART_Init+0x4c>)
 8003e2e:	4a12      	ldr	r2, [pc, #72]	; (8003e78 <MX_USART1_UART_Init+0x50>)
 8003e30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003e32:	4b10      	ldr	r3, [pc, #64]	; (8003e74 <MX_USART1_UART_Init+0x4c>)
 8003e34:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003e38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003e3a:	4b0e      	ldr	r3, [pc, #56]	; (8003e74 <MX_USART1_UART_Init+0x4c>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003e40:	4b0c      	ldr	r3, [pc, #48]	; (8003e74 <MX_USART1_UART_Init+0x4c>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003e46:	4b0b      	ldr	r3, [pc, #44]	; (8003e74 <MX_USART1_UART_Init+0x4c>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003e4c:	4b09      	ldr	r3, [pc, #36]	; (8003e74 <MX_USART1_UART_Init+0x4c>)
 8003e4e:	220c      	movs	r2, #12
 8003e50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e52:	4b08      	ldr	r3, [pc, #32]	; (8003e74 <MX_USART1_UART_Init+0x4c>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e58:	4b06      	ldr	r3, [pc, #24]	; (8003e74 <MX_USART1_UART_Init+0x4c>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003e5e:	4805      	ldr	r0, [pc, #20]	; (8003e74 <MX_USART1_UART_Init+0x4c>)
 8003e60:	f011 fb76 	bl	8015550 <HAL_UART_Init>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003e6a:	f000 f969 	bl	8004140 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003e6e:	bf00      	nop
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	200004d8 	.word	0x200004d8
 8003e78:	40011000 	.word	0x40011000

08003e7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003e82:	2300      	movs	r3, #0
 8003e84:	607b      	str	r3, [r7, #4]
 8003e86:	4b10      	ldr	r3, [pc, #64]	; (8003ec8 <MX_DMA_Init+0x4c>)
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	4a0f      	ldr	r2, [pc, #60]	; (8003ec8 <MX_DMA_Init+0x4c>)
 8003e8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e90:	6313      	str	r3, [r2, #48]	; 0x30
 8003e92:	4b0d      	ldr	r3, [pc, #52]	; (8003ec8 <MX_DMA_Init+0x4c>)
 8003e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e9a:	607b      	str	r3, [r7, #4]
 8003e9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	200e      	movs	r0, #14
 8003ea4:	f003 f82d 	bl	8006f02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8003ea8:	200e      	movs	r0, #14
 8003eaa:	f003 f846 	bl	8006f3a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8003eae:	2200      	movs	r2, #0
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	200f      	movs	r0, #15
 8003eb4:	f003 f825 	bl	8006f02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003eb8:	200f      	movs	r0, #15
 8003eba:	f003 f83e 	bl	8006f3a <HAL_NVIC_EnableIRQ>

}
 8003ebe:	bf00      	nop
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	40023800 	.word	0x40023800

08003ecc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b08c      	sub	sp, #48	; 0x30
 8003ed0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ed2:	f107 031c 	add.w	r3, r7, #28
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	605a      	str	r2, [r3, #4]
 8003edc:	609a      	str	r2, [r3, #8]
 8003ede:	60da      	str	r2, [r3, #12]
 8003ee0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	607b      	str	r3, [r7, #4]
 8003ee6:	4b60      	ldr	r3, [pc, #384]	; (8004068 <MX_GPIO_Init+0x19c>)
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eea:	4a5f      	ldr	r2, [pc, #380]	; (8004068 <MX_GPIO_Init+0x19c>)
 8003eec:	f043 0310 	orr.w	r3, r3, #16
 8003ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ef2:	4b5d      	ldr	r3, [pc, #372]	; (8004068 <MX_GPIO_Init+0x19c>)
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef6:	f003 0310 	and.w	r3, r3, #16
 8003efa:	607b      	str	r3, [r7, #4]
 8003efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003efe:	2300      	movs	r3, #0
 8003f00:	60bb      	str	r3, [r7, #8]
 8003f02:	4b59      	ldr	r3, [pc, #356]	; (8004068 <MX_GPIO_Init+0x19c>)
 8003f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f06:	4a58      	ldr	r2, [pc, #352]	; (8004068 <MX_GPIO_Init+0x19c>)
 8003f08:	f043 0304 	orr.w	r3, r3, #4
 8003f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f0e:	4b56      	ldr	r3, [pc, #344]	; (8004068 <MX_GPIO_Init+0x19c>)
 8003f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f12:	f003 0304 	and.w	r3, r3, #4
 8003f16:	60bb      	str	r3, [r7, #8]
 8003f18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	60fb      	str	r3, [r7, #12]
 8003f1e:	4b52      	ldr	r3, [pc, #328]	; (8004068 <MX_GPIO_Init+0x19c>)
 8003f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f22:	4a51      	ldr	r2, [pc, #324]	; (8004068 <MX_GPIO_Init+0x19c>)
 8003f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f28:	6313      	str	r3, [r2, #48]	; 0x30
 8003f2a:	4b4f      	ldr	r3, [pc, #316]	; (8004068 <MX_GPIO_Init+0x19c>)
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f32:	60fb      	str	r3, [r7, #12]
 8003f34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f36:	2300      	movs	r3, #0
 8003f38:	613b      	str	r3, [r7, #16]
 8003f3a:	4b4b      	ldr	r3, [pc, #300]	; (8004068 <MX_GPIO_Init+0x19c>)
 8003f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3e:	4a4a      	ldr	r2, [pc, #296]	; (8004068 <MX_GPIO_Init+0x19c>)
 8003f40:	f043 0301 	orr.w	r3, r3, #1
 8003f44:	6313      	str	r3, [r2, #48]	; 0x30
 8003f46:	4b48      	ldr	r3, [pc, #288]	; (8004068 <MX_GPIO_Init+0x19c>)
 8003f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	613b      	str	r3, [r7, #16]
 8003f50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f52:	2300      	movs	r3, #0
 8003f54:	617b      	str	r3, [r7, #20]
 8003f56:	4b44      	ldr	r3, [pc, #272]	; (8004068 <MX_GPIO_Init+0x19c>)
 8003f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5a:	4a43      	ldr	r2, [pc, #268]	; (8004068 <MX_GPIO_Init+0x19c>)
 8003f5c:	f043 0302 	orr.w	r3, r3, #2
 8003f60:	6313      	str	r3, [r2, #48]	; 0x30
 8003f62:	4b41      	ldr	r3, [pc, #260]	; (8004068 <MX_GPIO_Init+0x19c>)
 8003f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	617b      	str	r3, [r7, #20]
 8003f6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f6e:	2300      	movs	r3, #0
 8003f70:	61bb      	str	r3, [r7, #24]
 8003f72:	4b3d      	ldr	r3, [pc, #244]	; (8004068 <MX_GPIO_Init+0x19c>)
 8003f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f76:	4a3c      	ldr	r2, [pc, #240]	; (8004068 <MX_GPIO_Init+0x19c>)
 8003f78:	f043 0308 	orr.w	r3, r3, #8
 8003f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f7e:	4b3a      	ldr	r3, [pc, #232]	; (8004068 <MX_GPIO_Init+0x19c>)
 8003f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f82:	f003 0308 	and.w	r3, r3, #8
 8003f86:	61bb      	str	r3, [r7, #24]
 8003f88:	69bb      	ldr	r3, [r7, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	2140      	movs	r1, #64	; 0x40
 8003f8e:	4837      	ldr	r0, [pc, #220]	; (800406c <MX_GPIO_Init+0x1a0>)
 8003f90:	f007 f88c 	bl	800b0ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8003f94:	2200      	movs	r2, #0
 8003f96:	2180      	movs	r1, #128	; 0x80
 8003f98:	4834      	ldr	r0, [pc, #208]	; (800406c <MX_GPIO_Init+0x1a0>)
 8003f9a:	f007 f887 	bl	800b0ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH25Q_CS_GPIO_Port, FLASH25Q_CS_Pin, GPIO_PIN_RESET);
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	2101      	movs	r1, #1
 8003fa2:	4833      	ldr	r0, [pc, #204]	; (8004070 <MX_GPIO_Init+0x1a4>)
 8003fa4:	f007 f882 	bl	800b0ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SD_D0_Pin|SD_D1_Pin, GPIO_PIN_RESET);
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003fae:	4831      	ldr	r0, [pc, #196]	; (8004074 <MX_GPIO_Init+0x1a8>)
 8003fb0:	f007 f87c 	bl	800b0ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CMD_GPIO_Port, SD_CMD_Pin, GPIO_PIN_RESET);
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	2104      	movs	r1, #4
 8003fb8:	482f      	ldr	r0, [pc, #188]	; (8004078 <MX_GPIO_Init+0x1ac>)
 8003fba:	f007 f877 	bl	800b0ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : KEY_1_Pin KEY_0_Pin */
  GPIO_InitStruct.Pin = KEY_1_Pin|KEY_0_Pin;
 8003fbe:	2318      	movs	r3, #24
 8003fc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003fca:	f107 031c 	add.w	r3, r7, #28
 8003fce:	4619      	mov	r1, r3
 8003fd0:	482a      	ldr	r0, [pc, #168]	; (800407c <MX_GPIO_Init+0x1b0>)
 8003fd2:	f006 fdbb 	bl	800ab4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_A_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = LED_A_Pin|LED_B_Pin;
 8003fd6:	23c0      	movs	r3, #192	; 0xc0
 8003fd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fe6:	f107 031c 	add.w	r3, r7, #28
 8003fea:	4619      	mov	r1, r3
 8003fec:	481f      	ldr	r0, [pc, #124]	; (800406c <MX_GPIO_Init+0x1a0>)
 8003fee:	f006 fdad 	bl	800ab4c <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_IRQ_Pin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8003ff2:	2320      	movs	r3, #32
 8003ff4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003ffe:	f107 031c 	add.w	r3, r7, #28
 8004002:	4619      	mov	r1, r3
 8004004:	481b      	ldr	r0, [pc, #108]	; (8004074 <MX_GPIO_Init+0x1a8>)
 8004006:	f006 fda1 	bl	800ab4c <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH25Q_CS_Pin */
  GPIO_InitStruct.Pin = FLASH25Q_CS_Pin;
 800400a:	2301      	movs	r3, #1
 800400c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800400e:	2301      	movs	r3, #1
 8004010:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004012:	2301      	movs	r3, #1
 8004014:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004016:	2303      	movs	r3, #3
 8004018:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FLASH25Q_CS_GPIO_Port, &GPIO_InitStruct);
 800401a:	f107 031c 	add.w	r3, r7, #28
 800401e:	4619      	mov	r1, r3
 8004020:	4813      	ldr	r0, [pc, #76]	; (8004070 <MX_GPIO_Init+0x1a4>)
 8004022:	f006 fd93 	bl	800ab4c <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_D0_Pin SD_D1_Pin */
  GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin;
 8004026:	f44f 7340 	mov.w	r3, #768	; 0x300
 800402a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800402c:	2301      	movs	r3, #1
 800402e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004030:	2300      	movs	r3, #0
 8004032:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004034:	2300      	movs	r3, #0
 8004036:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004038:	f107 031c 	add.w	r3, r7, #28
 800403c:	4619      	mov	r1, r3
 800403e:	480d      	ldr	r0, [pc, #52]	; (8004074 <MX_GPIO_Init+0x1a8>)
 8004040:	f006 fd84 	bl	800ab4c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CMD_Pin */
  GPIO_InitStruct.Pin = SD_CMD_Pin;
 8004044:	2304      	movs	r3, #4
 8004046:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004048:	2301      	movs	r3, #1
 800404a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800404c:	2300      	movs	r3, #0
 800404e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004050:	2300      	movs	r3, #0
 8004052:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 8004054:	f107 031c 	add.w	r3, r7, #28
 8004058:	4619      	mov	r1, r3
 800405a:	4807      	ldr	r0, [pc, #28]	; (8004078 <MX_GPIO_Init+0x1ac>)
 800405c:	f006 fd76 	bl	800ab4c <HAL_GPIO_Init>

}
 8004060:	bf00      	nop
 8004062:	3730      	adds	r7, #48	; 0x30
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	40023800 	.word	0x40023800
 800406c:	40020000 	.word	0x40020000
 8004070:	40020400 	.word	0x40020400
 8004074:	40020800 	.word	0x40020800
 8004078:	40020c00 	.word	0x40020c00
 800407c:	40021000 	.word	0x40021000

08004080 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b088      	sub	sp, #32
 8004084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8004086:	1d3b      	adds	r3, r7, #4
 8004088:	2200      	movs	r2, #0
 800408a:	601a      	str	r2, [r3, #0]
 800408c:	605a      	str	r2, [r3, #4]
 800408e:	609a      	str	r2, [r3, #8]
 8004090:	60da      	str	r2, [r3, #12]
 8004092:	611a      	str	r2, [r3, #16]
 8004094:	615a      	str	r2, [r3, #20]
 8004096:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8004098:	4b27      	ldr	r3, [pc, #156]	; (8004138 <MX_FSMC_Init+0xb8>)
 800409a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800409e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80040a0:	4b25      	ldr	r3, [pc, #148]	; (8004138 <MX_FSMC_Init+0xb8>)
 80040a2:	4a26      	ldr	r2, [pc, #152]	; (800413c <MX_FSMC_Init+0xbc>)
 80040a4:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80040a6:	4b24      	ldr	r3, [pc, #144]	; (8004138 <MX_FSMC_Init+0xb8>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80040ac:	4b22      	ldr	r3, [pc, #136]	; (8004138 <MX_FSMC_Init+0xb8>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80040b2:	4b21      	ldr	r3, [pc, #132]	; (8004138 <MX_FSMC_Init+0xb8>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80040b8:	4b1f      	ldr	r3, [pc, #124]	; (8004138 <MX_FSMC_Init+0xb8>)
 80040ba:	2210      	movs	r2, #16
 80040bc:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80040be:	4b1e      	ldr	r3, [pc, #120]	; (8004138 <MX_FSMC_Init+0xb8>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80040c4:	4b1c      	ldr	r3, [pc, #112]	; (8004138 <MX_FSMC_Init+0xb8>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80040ca:	4b1b      	ldr	r3, [pc, #108]	; (8004138 <MX_FSMC_Init+0xb8>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80040d0:	4b19      	ldr	r3, [pc, #100]	; (8004138 <MX_FSMC_Init+0xb8>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80040d6:	4b18      	ldr	r3, [pc, #96]	; (8004138 <MX_FSMC_Init+0xb8>)
 80040d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80040dc:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80040de:	4b16      	ldr	r3, [pc, #88]	; (8004138 <MX_FSMC_Init+0xb8>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80040e4:	4b14      	ldr	r3, [pc, #80]	; (8004138 <MX_FSMC_Init+0xb8>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80040ea:	4b13      	ldr	r3, [pc, #76]	; (8004138 <MX_FSMC_Init+0xb8>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80040f0:	4b11      	ldr	r3, [pc, #68]	; (8004138 <MX_FSMC_Init+0xb8>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80040f6:	4b10      	ldr	r3, [pc, #64]	; (8004138 <MX_FSMC_Init+0xb8>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 2;
 80040fc:	2302      	movs	r3, #2
 80040fe:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8004100:	230f      	movs	r3, #15
 8004102:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 5;
 8004104:	2305      	movs	r3, #5
 8004106:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 2;
 8004108:	2302      	movs	r3, #2
 800410a:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800410c:	2310      	movs	r3, #16
 800410e:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8004110:	2311      	movs	r3, #17
 8004112:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8004114:	2300      	movs	r3, #0
 8004116:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8004118:	1d3b      	adds	r3, r7, #4
 800411a:	2200      	movs	r2, #0
 800411c:	4619      	mov	r1, r3
 800411e:	4806      	ldr	r0, [pc, #24]	; (8004138 <MX_FSMC_Init+0xb8>)
 8004120:	f010 ff6c 	bl	8014ffc <HAL_SRAM_Init>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 800412a:	f000 f809 	bl	8004140 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800412e:	bf00      	nop
 8004130:	3720      	adds	r7, #32
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	2000051c 	.word	0x2000051c
 800413c:	a0000104 	.word	0xa0000104

08004140 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004140:	b480      	push	{r7}
 8004142:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004144:	b672      	cpsid	i
}
 8004146:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8004148:	e7fe      	b.n	8004148 <Error_Handler+0x8>

0800414a <RGB>:
#include "ssd1963.h"

uint32_t RGB(uint8_t r, uint8_t g, uint8_t b)
{   
 800414a:	b480      	push	{r7}
 800414c:	b083      	sub	sp, #12
 800414e:	af00      	add	r7, sp, #0
 8004150:	4603      	mov	r3, r0
 8004152:	71fb      	strb	r3, [r7, #7]
 8004154:	460b      	mov	r3, r1
 8004156:	71bb      	strb	r3, [r7, #6]
 8004158:	4613      	mov	r3, r2
 800415a:	717b      	strb	r3, [r7, #5]
    return ((r & 0xFF) << 16) + ((g & 0xFF) << 8) + (b & 0xFF);
 800415c:	79fb      	ldrb	r3, [r7, #7]
 800415e:	041a      	lsls	r2, r3, #16
 8004160:	79bb      	ldrb	r3, [r7, #6]
 8004162:	021b      	lsls	r3, r3, #8
 8004164:	441a      	add	r2, r3
 8004166:	797b      	ldrb	r3, [r7, #5]
 8004168:	4413      	add	r3, r2
}
 800416a:	4618      	mov	r0, r3
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr

08004176 <H24_RGB565>:

uint16_t H24_RGB565(uint8_t reverse, uint32_t color24)
{
 8004176:	b480      	push	{r7}
 8004178:	b085      	sub	sp, #20
 800417a:	af00      	add	r7, sp, #0
 800417c:	4603      	mov	r3, r0
 800417e:	6039      	str	r1, [r7, #0]
 8004180:	71fb      	strb	r3, [r7, #7]
	uint8_t b = (color24 >> 16) & 0xFF;
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	0c1b      	lsrs	r3, r3, #16
 8004186:	73fb      	strb	r3, [r7, #15]
	uint8_t g = (color24 >> 8) & 0xFF;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	0a1b      	lsrs	r3, r3, #8
 800418c:	73bb      	strb	r3, [r7, #14]
	uint8_t r = color24 & 0xFF;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	737b      	strb	r3, [r7, #13]
	if (reverse) return ((b / 8) << 11) | ((g / 4) << 5) | (r / 8);
 8004192:	79fb      	ldrb	r3, [r7, #7]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d013      	beq.n	80041c0 <H24_RGB565+0x4a>
 8004198:	7bfb      	ldrb	r3, [r7, #15]
 800419a:	08db      	lsrs	r3, r3, #3
 800419c:	b2db      	uxtb	r3, r3
 800419e:	02db      	lsls	r3, r3, #11
 80041a0:	b21a      	sxth	r2, r3
 80041a2:	7bbb      	ldrb	r3, [r7, #14]
 80041a4:	089b      	lsrs	r3, r3, #2
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	015b      	lsls	r3, r3, #5
 80041aa:	b21b      	sxth	r3, r3
 80041ac:	4313      	orrs	r3, r2
 80041ae:	b21a      	sxth	r2, r3
 80041b0:	7b7b      	ldrb	r3, [r7, #13]
 80041b2:	08db      	lsrs	r3, r3, #3
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	b21b      	sxth	r3, r3
 80041b8:	4313      	orrs	r3, r2
 80041ba:	b21b      	sxth	r3, r3
 80041bc:	b29b      	uxth	r3, r3
 80041be:	e012      	b.n	80041e6 <H24_RGB565+0x70>
	else return ((r / 8) << 11) | ((g / 4) << 5) | (b / 8);
 80041c0:	7b7b      	ldrb	r3, [r7, #13]
 80041c2:	08db      	lsrs	r3, r3, #3
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	02db      	lsls	r3, r3, #11
 80041c8:	b21a      	sxth	r2, r3
 80041ca:	7bbb      	ldrb	r3, [r7, #14]
 80041cc:	089b      	lsrs	r3, r3, #2
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	015b      	lsls	r3, r3, #5
 80041d2:	b21b      	sxth	r3, r3
 80041d4:	4313      	orrs	r3, r2
 80041d6:	b21a      	sxth	r2, r3
 80041d8:	7bfb      	ldrb	r3, [r7, #15]
 80041da:	08db      	lsrs	r3, r3, #3
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	b21b      	sxth	r3, r3
 80041e0:	4313      	orrs	r3, r2
 80041e2:	b21b      	sxth	r3, r3
 80041e4:	b29b      	uxth	r3, r3
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <LCD_Send_Cmd>:

void LCD_Send_Cmd(uint16_t cmd)
{
 80041f2:	b480      	push	{r7}
 80041f4:	b083      	sub	sp, #12
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	4603      	mov	r3, r0
 80041fa:	80fb      	strh	r3, [r7, #6]
	CMD = cmd;
 80041fc:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8004200:	88fb      	ldrh	r3, [r7, #6]
 8004202:	8013      	strh	r3, [r2, #0]
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <LCD_Send_Dat>:

void LCD_Send_Dat(uint16_t dat)
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	4603      	mov	r3, r0
 8004218:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i = 0; i < 1; i++)
 800421a:	2300      	movs	r3, #0
 800421c:	73fb      	strb	r3, [r7, #15]
 800421e:	e005      	b.n	800422c <LCD_Send_Dat+0x1c>
	DAT = dat;
 8004220:	4a07      	ldr	r2, [pc, #28]	; (8004240 <LCD_Send_Dat+0x30>)
 8004222:	88fb      	ldrh	r3, [r7, #6]
 8004224:	8013      	strh	r3, [r2, #0]
	for (uint8_t i = 0; i < 1; i++)
 8004226:	7bfb      	ldrb	r3, [r7, #15]
 8004228:	3301      	adds	r3, #1
 800422a:	73fb      	strb	r3, [r7, #15]
 800422c:	7bfb      	ldrb	r3, [r7, #15]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d0f6      	beq.n	8004220 <LCD_Send_Dat+0x10>
}
 8004232:	bf00      	nop
 8004234:	bf00      	nop
 8004236:	3714      	adds	r7, #20
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr
 8004240:	60080000 	.word	0x60080000

08004244 <LCD_Window>:

void LCD_Window(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8004244:	b590      	push	{r4, r7, lr}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	4604      	mov	r4, r0
 800424c:	4608      	mov	r0, r1
 800424e:	4611      	mov	r1, r2
 8004250:	461a      	mov	r2, r3
 8004252:	4623      	mov	r3, r4
 8004254:	80fb      	strh	r3, [r7, #6]
 8004256:	4603      	mov	r3, r0
 8004258:	80bb      	strh	r3, [r7, #4]
 800425a:	460b      	mov	r3, r1
 800425c:	807b      	strh	r3, [r7, #2]
 800425e:	4613      	mov	r3, r2
 8004260:	803b      	strh	r3, [r7, #0]
	LCD_Send_Cmd(LCD_COLUMN_ADDR);
 8004262:	202a      	movs	r0, #42	; 0x2a
 8004264:	f7ff ffc5 	bl	80041f2 <LCD_Send_Cmd>
	LCD_Send_Dat(y1 >> 8);
 8004268:	88bb      	ldrh	r3, [r7, #4]
 800426a:	0a1b      	lsrs	r3, r3, #8
 800426c:	b29b      	uxth	r3, r3
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff ffce 	bl	8004210 <LCD_Send_Dat>
	LCD_Send_Dat(y1 & 0x00FF);
 8004274:	88bb      	ldrh	r3, [r7, #4]
 8004276:	b2db      	uxtb	r3, r3
 8004278:	b29b      	uxth	r3, r3
 800427a:	4618      	mov	r0, r3
 800427c:	f7ff ffc8 	bl	8004210 <LCD_Send_Dat>
	LCD_Send_Dat(y2 >> 8);
 8004280:	883b      	ldrh	r3, [r7, #0]
 8004282:	0a1b      	lsrs	r3, r3, #8
 8004284:	b29b      	uxth	r3, r3
 8004286:	4618      	mov	r0, r3
 8004288:	f7ff ffc2 	bl	8004210 <LCD_Send_Dat>
	LCD_Send_Dat(y2 & 0x00FF);
 800428c:	883b      	ldrh	r3, [r7, #0]
 800428e:	b2db      	uxtb	r3, r3
 8004290:	b29b      	uxth	r3, r3
 8004292:	4618      	mov	r0, r3
 8004294:	f7ff ffbc 	bl	8004210 <LCD_Send_Dat>
	LCD_Send_Cmd(LCD_PAGE_ADDR);
 8004298:	202b      	movs	r0, #43	; 0x2b
 800429a:	f7ff ffaa 	bl	80041f2 <LCD_Send_Cmd>
	LCD_Send_Dat(x1 >> 8);
 800429e:	88fb      	ldrh	r3, [r7, #6]
 80042a0:	0a1b      	lsrs	r3, r3, #8
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7ff ffb3 	bl	8004210 <LCD_Send_Dat>
	LCD_Send_Dat(x1 & 0x00FF);
 80042aa:	88fb      	ldrh	r3, [r7, #6]
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7ff ffad 	bl	8004210 <LCD_Send_Dat>
	LCD_Send_Dat(x2 >> 8);
 80042b6:	887b      	ldrh	r3, [r7, #2]
 80042b8:	0a1b      	lsrs	r3, r3, #8
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	4618      	mov	r0, r3
 80042be:	f7ff ffa7 	bl	8004210 <LCD_Send_Dat>
	LCD_Send_Dat(x2 & 0x00FF);
 80042c2:	887b      	ldrh	r3, [r7, #2]
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7ff ffa1 	bl	8004210 <LCD_Send_Dat>
	LCD_Send_Cmd(LCD_GRAM);
 80042ce:	202c      	movs	r0, #44	; 0x2c
 80042d0:	f7ff ff8f 	bl	80041f2 <LCD_Send_Cmd>
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd90      	pop	{r4, r7, pc}

080042dc <LCD_Pixel>:

void LCD_Pixel(uint16_t x, uint16_t y, uint32_t color24)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	4603      	mov	r3, r0
 80042e4:	603a      	str	r2, [r7, #0]
 80042e6:	80fb      	strh	r3, [r7, #6]
 80042e8:	460b      	mov	r3, r1
 80042ea:	80bb      	strh	r3, [r7, #4]
	LCD_Window(x, y, x, y);
 80042ec:	88bb      	ldrh	r3, [r7, #4]
 80042ee:	88fa      	ldrh	r2, [r7, #6]
 80042f0:	88b9      	ldrh	r1, [r7, #4]
 80042f2:	88f8      	ldrh	r0, [r7, #6]
 80042f4:	f7ff ffa6 	bl	8004244 <LCD_Window>
	LCD_Send_Dat(H24_RGB565(1, color24));
 80042f8:	6839      	ldr	r1, [r7, #0]
 80042fa:	2001      	movs	r0, #1
 80042fc:	f7ff ff3b 	bl	8004176 <H24_RGB565>
 8004300:	4603      	mov	r3, r0
 8004302:	4618      	mov	r0, r3
 8004304:	f7ff ff84 	bl	8004210 <LCD_Send_Dat>
}
 8004308:	bf00      	nop
 800430a:	3708      	adds	r7, #8
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <LCD_Rect_Fill>:

void LCD_Rect_Fill(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint32_t color24)
{
 8004310:	b590      	push	{r4, r7, lr}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	4604      	mov	r4, r0
 8004318:	4608      	mov	r0, r1
 800431a:	4611      	mov	r1, r2
 800431c:	461a      	mov	r2, r3
 800431e:	4623      	mov	r3, r4
 8004320:	80fb      	strh	r3, [r7, #6]
 8004322:	4603      	mov	r3, r0
 8004324:	80bb      	strh	r3, [r7, #4]
 8004326:	460b      	mov	r3, r1
 8004328:	807b      	strh	r3, [r7, #2]
 800432a:	4613      	mov	r3, r2
 800432c:	803b      	strh	r3, [r7, #0]
	uint32_t i = 0;
 800432e:	2300      	movs	r3, #0
 8004330:	60fb      	str	r3, [r7, #12]
	uint32_t j = (uint32_t) w * (uint32_t) h;
 8004332:	887b      	ldrh	r3, [r7, #2]
 8004334:	883a      	ldrh	r2, [r7, #0]
 8004336:	fb02 f303 	mul.w	r3, r2, r3
 800433a:	60bb      	str	r3, [r7, #8]
	LCD_Window(y, x, y + h - 1, x + w - 1);
 800433c:	88ba      	ldrh	r2, [r7, #4]
 800433e:	883b      	ldrh	r3, [r7, #0]
 8004340:	4413      	add	r3, r2
 8004342:	b29b      	uxth	r3, r3
 8004344:	3b01      	subs	r3, #1
 8004346:	b29c      	uxth	r4, r3
 8004348:	88fa      	ldrh	r2, [r7, #6]
 800434a:	887b      	ldrh	r3, [r7, #2]
 800434c:	4413      	add	r3, r2
 800434e:	b29b      	uxth	r3, r3
 8004350:	3b01      	subs	r3, #1
 8004352:	b29b      	uxth	r3, r3
 8004354:	88f9      	ldrh	r1, [r7, #6]
 8004356:	88b8      	ldrh	r0, [r7, #4]
 8004358:	4622      	mov	r2, r4
 800435a:	f7ff ff73 	bl	8004244 <LCD_Window>
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 800435e:	2300      	movs	r3, #0
 8004360:	60fb      	str	r3, [r7, #12]
 8004362:	e00a      	b.n	800437a <LCD_Rect_Fill+0x6a>
 8004364:	6a39      	ldr	r1, [r7, #32]
 8004366:	2001      	movs	r0, #1
 8004368:	f7ff ff05 	bl	8004176 <H24_RGB565>
 800436c:	4603      	mov	r3, r0
 800436e:	4618      	mov	r0, r3
 8004370:	f7ff ff4e 	bl	8004210 <LCD_Send_Dat>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	3301      	adds	r3, #1
 8004378:	60fb      	str	r3, [r7, #12]
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	429a      	cmp	r2, r3
 8004380:	d3f0      	bcc.n	8004364 <LCD_Rect_Fill+0x54>
}
 8004382:	bf00      	nop
 8004384:	bf00      	nop
 8004386:	3714      	adds	r7, #20
 8004388:	46bd      	mov	sp, r7
 800438a:	bd90      	pop	{r4, r7, pc}

0800438c <LCD_Line>:

void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
{
 800438c:	b590      	push	{r4, r7, lr}
 800438e:	b08b      	sub	sp, #44	; 0x2c
 8004390:	af02      	add	r7, sp, #8
 8004392:	4604      	mov	r4, r0
 8004394:	4608      	mov	r0, r1
 8004396:	4611      	mov	r1, r2
 8004398:	461a      	mov	r2, r3
 800439a:	4623      	mov	r3, r4
 800439c:	80fb      	strh	r3, [r7, #6]
 800439e:	4603      	mov	r3, r0
 80043a0:	80bb      	strh	r3, [r7, #4]
 80043a2:	460b      	mov	r3, r1
 80043a4:	807b      	strh	r3, [r7, #2]
 80043a6:	4613      	mov	r3, r2
 80043a8:	803b      	strh	r3, [r7, #0]
	int deltaX = abs(x2 - x1);
 80043aa:	887a      	ldrh	r2, [r7, #2]
 80043ac:	88fb      	ldrh	r3, [r7, #6]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	bfb8      	it	lt
 80043b4:	425b      	neglt	r3, r3
 80043b6:	61bb      	str	r3, [r7, #24]
	int deltaY = abs(y2 - y1);
 80043b8:	883a      	ldrh	r2, [r7, #0]
 80043ba:	88bb      	ldrh	r3, [r7, #4]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	bfb8      	it	lt
 80043c2:	425b      	neglt	r3, r3
 80043c4:	617b      	str	r3, [r7, #20]
	int signX = x1 < x2 ? 1 : -1;
 80043c6:	88fa      	ldrh	r2, [r7, #6]
 80043c8:	887b      	ldrh	r3, [r7, #2]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d201      	bcs.n	80043d2 <LCD_Line+0x46>
 80043ce:	2301      	movs	r3, #1
 80043d0:	e001      	b.n	80043d6 <LCD_Line+0x4a>
 80043d2:	f04f 33ff 	mov.w	r3, #4294967295
 80043d6:	613b      	str	r3, [r7, #16]
	int signY = y1 < y2 ? 1 : -1;
 80043d8:	88ba      	ldrh	r2, [r7, #4]
 80043da:	883b      	ldrh	r3, [r7, #0]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d201      	bcs.n	80043e4 <LCD_Line+0x58>
 80043e0:	2301      	movs	r3, #1
 80043e2:	e001      	b.n	80043e8 <LCD_Line+0x5c>
 80043e4:	f04f 33ff 	mov.w	r3, #4294967295
 80043e8:	60fb      	str	r3, [r7, #12]
	int error = deltaX - deltaY;
 80043ea:	69ba      	ldr	r2, [r7, #24]
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	61fb      	str	r3, [r7, #28]
	int error2 = 0;
 80043f2:	2300      	movs	r3, #0
 80043f4:	60bb      	str	r3, [r7, #8]
	for (;;)
	{
		LCD_Rect_Fill(x1, y1, size, size, color24);
 80043f6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004400:	b29c      	uxth	r4, r3
 8004402:	88b9      	ldrh	r1, [r7, #4]
 8004404:	88f8      	ldrh	r0, [r7, #6]
 8004406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	4623      	mov	r3, r4
 800440c:	f7ff ff80 	bl	8004310 <LCD_Rect_Fill>
		if (x1 == x2 && y1 == y2)
 8004410:	88fa      	ldrh	r2, [r7, #6]
 8004412:	887b      	ldrh	r3, [r7, #2]
 8004414:	429a      	cmp	r2, r3
 8004416:	d103      	bne.n	8004420 <LCD_Line+0x94>
 8004418:	88ba      	ldrh	r2, [r7, #4]
 800441a:	883b      	ldrh	r3, [r7, #0]
 800441c:	429a      	cmp	r2, r3
 800441e:	d01e      	beq.n	800445e <LCD_Line+0xd2>
		break;
		error2 = error * 2;
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	005b      	lsls	r3, r3, #1
 8004424:	60bb      	str	r3, [r7, #8]
		if (error2 > -deltaY)
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	425b      	negs	r3, r3
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	429a      	cmp	r2, r3
 800442e:	dd08      	ble.n	8004442 <LCD_Line+0xb6>
		{
			error -= deltaY;
 8004430:	69fa      	ldr	r2, [r7, #28]
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	61fb      	str	r3, [r7, #28]
			x1 += signX;
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	b29a      	uxth	r2, r3
 800443c:	88fb      	ldrh	r3, [r7, #6]
 800443e:	4413      	add	r3, r2
 8004440:	80fb      	strh	r3, [r7, #6]
		}
		if (error2 < deltaX)
 8004442:	68ba      	ldr	r2, [r7, #8]
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	429a      	cmp	r2, r3
 8004448:	dad5      	bge.n	80043f6 <LCD_Line+0x6a>
		{
			error += deltaX;
 800444a:	69fa      	ldr	r2, [r7, #28]
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	4413      	add	r3, r2
 8004450:	61fb      	str	r3, [r7, #28]
			y1 += signY;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	b29a      	uxth	r2, r3
 8004456:	88bb      	ldrh	r3, [r7, #4]
 8004458:	4413      	add	r3, r2
 800445a:	80bb      	strh	r3, [r7, #4]
		LCD_Rect_Fill(x1, y1, size, size, color24);
 800445c:	e7cb      	b.n	80043f6 <LCD_Line+0x6a>
		break;
 800445e:	bf00      	nop
		}
	}
}
 8004460:	bf00      	nop
 8004462:	3724      	adds	r7, #36	; 0x24
 8004464:	46bd      	mov	sp, r7
 8004466:	bd90      	pop	{r4, r7, pc}

08004468 <LCD_Triangle>:

void LCD_Triangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint8_t size, uint32_t color24)
{
 8004468:	b590      	push	{r4, r7, lr}
 800446a:	b085      	sub	sp, #20
 800446c:	af02      	add	r7, sp, #8
 800446e:	4604      	mov	r4, r0
 8004470:	4608      	mov	r0, r1
 8004472:	4611      	mov	r1, r2
 8004474:	461a      	mov	r2, r3
 8004476:	4623      	mov	r3, r4
 8004478:	80fb      	strh	r3, [r7, #6]
 800447a:	4603      	mov	r3, r0
 800447c:	80bb      	strh	r3, [r7, #4]
 800447e:	460b      	mov	r3, r1
 8004480:	807b      	strh	r3, [r7, #2]
 8004482:	4613      	mov	r3, r2
 8004484:	803b      	strh	r3, [r7, #0]
	LCD_Line(x1, y1, x2, y2, size, color24);
 8004486:	883c      	ldrh	r4, [r7, #0]
 8004488:	887a      	ldrh	r2, [r7, #2]
 800448a:	88b9      	ldrh	r1, [r7, #4]
 800448c:	88f8      	ldrh	r0, [r7, #6]
 800448e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004490:	9301      	str	r3, [sp, #4]
 8004492:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004496:	9300      	str	r3, [sp, #0]
 8004498:	4623      	mov	r3, r4
 800449a:	f7ff ff77 	bl	800438c <LCD_Line>
	LCD_Line(x2, y2, x3, y3, size, color24);
 800449e:	8bbc      	ldrh	r4, [r7, #28]
 80044a0:	8b3a      	ldrh	r2, [r7, #24]
 80044a2:	8839      	ldrh	r1, [r7, #0]
 80044a4:	8878      	ldrh	r0, [r7, #2]
 80044a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a8:	9301      	str	r3, [sp, #4]
 80044aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80044ae:	9300      	str	r3, [sp, #0]
 80044b0:	4623      	mov	r3, r4
 80044b2:	f7ff ff6b 	bl	800438c <LCD_Line>
	LCD_Line(x3, y3, x1, y1, size, color24);
 80044b6:	88bc      	ldrh	r4, [r7, #4]
 80044b8:	88fa      	ldrh	r2, [r7, #6]
 80044ba:	8bb9      	ldrh	r1, [r7, #28]
 80044bc:	8b38      	ldrh	r0, [r7, #24]
 80044be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c0:	9301      	str	r3, [sp, #4]
 80044c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	4623      	mov	r3, r4
 80044ca:	f7ff ff5f 	bl	800438c <LCD_Line>
}
 80044ce:	bf00      	nop
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd90      	pop	{r4, r7, pc}

080044d6 <LCD_Triangle_Fill>:

#define ABS(x) ((x) > 0 ? (x) : -(x))

void LCD_Triangle_Fill(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint32_t color24)
{
 80044d6:	b590      	push	{r4, r7, lr}
 80044d8:	b08d      	sub	sp, #52	; 0x34
 80044da:	af02      	add	r7, sp, #8
 80044dc:	4604      	mov	r4, r0
 80044de:	4608      	mov	r0, r1
 80044e0:	4611      	mov	r1, r2
 80044e2:	461a      	mov	r2, r3
 80044e4:	4623      	mov	r3, r4
 80044e6:	80fb      	strh	r3, [r7, #6]
 80044e8:	4603      	mov	r3, r0
 80044ea:	80bb      	strh	r3, [r7, #4]
 80044ec:	460b      	mov	r3, r1
 80044ee:	807b      	strh	r3, [r7, #2]
 80044f0:	4613      	mov	r3, r2
 80044f2:	803b      	strh	r3, [r7, #0]
	int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 80044f4:	2300      	movs	r3, #0
 80044f6:	823b      	strh	r3, [r7, #16]
 80044f8:	2300      	movs	r3, #0
 80044fa:	81fb      	strh	r3, [r7, #14]
 80044fc:	2300      	movs	r3, #0
 80044fe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004500:	2300      	movs	r3, #0
 8004502:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004504:	2300      	movs	r3, #0
 8004506:	847b      	strh	r3, [r7, #34]	; 0x22
 8004508:	2300      	movs	r3, #0
 800450a:	843b      	strh	r3, [r7, #32]
	yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 800450c:	2300      	movs	r3, #0
 800450e:	83fb      	strh	r3, [r7, #30]
 8004510:	2300      	movs	r3, #0
 8004512:	83bb      	strh	r3, [r7, #28]
 8004514:	2300      	movs	r3, #0
 8004516:	837b      	strh	r3, [r7, #26]
 8004518:	2300      	movs	r3, #0
 800451a:	833b      	strh	r3, [r7, #24]
 800451c:	2300      	movs	r3, #0
 800451e:	82fb      	strh	r3, [r7, #22]
 8004520:	2300      	movs	r3, #0
 8004522:	82bb      	strh	r3, [r7, #20]
	curpixel = 0;
 8004524:	2300      	movs	r3, #0
 8004526:	827b      	strh	r3, [r7, #18]
	
	deltax = ABS(x2 - x1);
 8004528:	887a      	ldrh	r2, [r7, #2]
 800452a:	88fb      	ldrh	r3, [r7, #6]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b00      	cmp	r3, #0
 8004530:	bfb8      	it	lt
 8004532:	425b      	neglt	r3, r3
 8004534:	823b      	strh	r3, [r7, #16]
	deltay = ABS(y2 - y1);
 8004536:	883a      	ldrh	r2, [r7, #0]
 8004538:	88bb      	ldrh	r3, [r7, #4]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	2b00      	cmp	r3, #0
 800453e:	bfb8      	it	lt
 8004540:	425b      	neglt	r3, r3
 8004542:	81fb      	strh	r3, [r7, #14]
	x = x1;
 8004544:	88fb      	ldrh	r3, [r7, #6]
 8004546:	84fb      	strh	r3, [r7, #38]	; 0x26
	y = y1;
 8004548:	88bb      	ldrh	r3, [r7, #4]
 800454a:	84bb      	strh	r3, [r7, #36]	; 0x24

	if (x2 >= x1)
 800454c:	887a      	ldrh	r2, [r7, #2]
 800454e:	88fb      	ldrh	r3, [r7, #6]
 8004550:	429a      	cmp	r2, r3
 8004552:	d304      	bcc.n	800455e <LCD_Triangle_Fill+0x88>
	{
		xinc1 = 1;
 8004554:	2301      	movs	r3, #1
 8004556:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = 1;
 8004558:	2301      	movs	r3, #1
 800455a:	843b      	strh	r3, [r7, #32]
 800455c:	e005      	b.n	800456a <LCD_Triangle_Fill+0x94>
	}
	else
	{
		xinc1 = -1;
 800455e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004562:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = -1;
 8004564:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004568:	843b      	strh	r3, [r7, #32]
	}

	if (y2 >= y1)
 800456a:	883a      	ldrh	r2, [r7, #0]
 800456c:	88bb      	ldrh	r3, [r7, #4]
 800456e:	429a      	cmp	r2, r3
 8004570:	d304      	bcc.n	800457c <LCD_Triangle_Fill+0xa6>
	{
		yinc1 = 1;
 8004572:	2301      	movs	r3, #1
 8004574:	83fb      	strh	r3, [r7, #30]
		yinc2 = 1;
 8004576:	2301      	movs	r3, #1
 8004578:	83bb      	strh	r3, [r7, #28]
 800457a:	e005      	b.n	8004588 <LCD_Triangle_Fill+0xb2>
	}
	else
	{
		yinc1 = -1;
 800457c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004580:	83fb      	strh	r3, [r7, #30]
		yinc2 = -1;
 8004582:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004586:	83bb      	strh	r3, [r7, #28]
	}

	if (deltax >= deltay)
 8004588:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800458c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004590:	429a      	cmp	r2, r3
 8004592:	db10      	blt.n	80045b6 <LCD_Triangle_Fill+0xe0>
	{
		xinc1 = 0;
 8004594:	2300      	movs	r3, #0
 8004596:	847b      	strh	r3, [r7, #34]	; 0x22
		yinc2 = 0;
 8004598:	2300      	movs	r3, #0
 800459a:	83bb      	strh	r3, [r7, #28]
		den = deltax;
 800459c:	8a3b      	ldrh	r3, [r7, #16]
 800459e:	837b      	strh	r3, [r7, #26]
		num = deltax / 2;
 80045a0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80045a4:	0fda      	lsrs	r2, r3, #31
 80045a6:	4413      	add	r3, r2
 80045a8:	105b      	asrs	r3, r3, #1
 80045aa:	833b      	strh	r3, [r7, #24]
		numadd = deltay;
 80045ac:	89fb      	ldrh	r3, [r7, #14]
 80045ae:	82fb      	strh	r3, [r7, #22]
		numpixels = deltax;
 80045b0:	8a3b      	ldrh	r3, [r7, #16]
 80045b2:	82bb      	strh	r3, [r7, #20]
 80045b4:	e00f      	b.n	80045d6 <LCD_Triangle_Fill+0x100>
	}
	else
	{
		xinc2 = 0;
 80045b6:	2300      	movs	r3, #0
 80045b8:	843b      	strh	r3, [r7, #32]
		yinc1 = 0;
 80045ba:	2300      	movs	r3, #0
 80045bc:	83fb      	strh	r3, [r7, #30]
		den = deltay;
 80045be:	89fb      	ldrh	r3, [r7, #14]
 80045c0:	837b      	strh	r3, [r7, #26]
		num = deltay / 2;
 80045c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80045c6:	0fda      	lsrs	r2, r3, #31
 80045c8:	4413      	add	r3, r2
 80045ca:	105b      	asrs	r3, r3, #1
 80045cc:	833b      	strh	r3, [r7, #24]
		numadd = deltax;
 80045ce:	8a3b      	ldrh	r3, [r7, #16]
 80045d0:	82fb      	strh	r3, [r7, #22]
		numpixels = deltay;
 80045d2:	89fb      	ldrh	r3, [r7, #14]
 80045d4:	82bb      	strh	r3, [r7, #20]
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80045d6:	2300      	movs	r3, #0
 80045d8:	827b      	strh	r3, [r7, #18]
 80045da:	e034      	b.n	8004646 <LCD_Triangle_Fill+0x170>
	{
		LCD_Line(x, y, x3, y3, 1, color24);
 80045dc:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80045de:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80045e0:	8fbc      	ldrh	r4, [r7, #60]	; 0x3c
 80045e2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80045e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045e6:	9301      	str	r3, [sp, #4]
 80045e8:	2301      	movs	r3, #1
 80045ea:	9300      	str	r3, [sp, #0]
 80045ec:	4623      	mov	r3, r4
 80045ee:	f7ff fecd 	bl	800438c <LCD_Line>

		num += numadd;
 80045f2:	8b3a      	ldrh	r2, [r7, #24]
 80045f4:	8afb      	ldrh	r3, [r7, #22]
 80045f6:	4413      	add	r3, r2
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	833b      	strh	r3, [r7, #24]
		if (num >= den)
 80045fc:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004600:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004604:	429a      	cmp	r2, r3
 8004606:	db0e      	blt.n	8004626 <LCD_Triangle_Fill+0x150>
		{
			num -= den;
 8004608:	8b3a      	ldrh	r2, [r7, #24]
 800460a:	8b7b      	ldrh	r3, [r7, #26]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	b29b      	uxth	r3, r3
 8004610:	833b      	strh	r3, [r7, #24]
			x += xinc1;
 8004612:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004614:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004616:	4413      	add	r3, r2
 8004618:	b29b      	uxth	r3, r3
 800461a:	84fb      	strh	r3, [r7, #38]	; 0x26
			y += yinc1;
 800461c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800461e:	8bfb      	ldrh	r3, [r7, #30]
 8004620:	4413      	add	r3, r2
 8004622:	b29b      	uxth	r3, r3
 8004624:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		x += xinc2;
 8004626:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004628:	8c3b      	ldrh	r3, [r7, #32]
 800462a:	4413      	add	r3, r2
 800462c:	b29b      	uxth	r3, r3
 800462e:	84fb      	strh	r3, [r7, #38]	; 0x26
		y += yinc2;
 8004630:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004632:	8bbb      	ldrh	r3, [r7, #28]
 8004634:	4413      	add	r3, r2
 8004636:	b29b      	uxth	r3, r3
 8004638:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (curpixel = 0; curpixel <= numpixels; curpixel++)
 800463a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800463e:	b29b      	uxth	r3, r3
 8004640:	3301      	adds	r3, #1
 8004642:	b29b      	uxth	r3, r3
 8004644:	827b      	strh	r3, [r7, #18]
 8004646:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800464a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800464e:	429a      	cmp	r2, r3
 8004650:	ddc4      	ble.n	80045dc <LCD_Triangle_Fill+0x106>
	}
}
 8004652:	bf00      	nop
 8004654:	bf00      	nop
 8004656:	372c      	adds	r7, #44	; 0x2c
 8004658:	46bd      	mov	sp, r7
 800465a:	bd90      	pop	{r4, r7, pc}

0800465c <LCD_Rect>:

void LCD_Rect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t size, uint32_t color24)
{
 800465c:	b590      	push	{r4, r7, lr}
 800465e:	b085      	sub	sp, #20
 8004660:	af02      	add	r7, sp, #8
 8004662:	4604      	mov	r4, r0
 8004664:	4608      	mov	r0, r1
 8004666:	4611      	mov	r1, r2
 8004668:	461a      	mov	r2, r3
 800466a:	4623      	mov	r3, r4
 800466c:	80fb      	strh	r3, [r7, #6]
 800466e:	4603      	mov	r3, r0
 8004670:	80bb      	strh	r3, [r7, #4]
 8004672:	460b      	mov	r3, r1
 8004674:	807b      	strh	r3, [r7, #2]
 8004676:	4613      	mov	r3, r2
 8004678:	803b      	strh	r3, [r7, #0]
	LCD_Line(x, y, x + w, y, size, color24);
 800467a:	88fa      	ldrh	r2, [r7, #6]
 800467c:	887b      	ldrh	r3, [r7, #2]
 800467e:	4413      	add	r3, r2
 8004680:	b29a      	uxth	r2, r3
 8004682:	88bc      	ldrh	r4, [r7, #4]
 8004684:	88b9      	ldrh	r1, [r7, #4]
 8004686:	88f8      	ldrh	r0, [r7, #6]
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	9301      	str	r3, [sp, #4]
 800468c:	7e3b      	ldrb	r3, [r7, #24]
 800468e:	9300      	str	r3, [sp, #0]
 8004690:	4623      	mov	r3, r4
 8004692:	f7ff fe7b 	bl	800438c <LCD_Line>
	LCD_Line(x, y + h, x + w, y + h, size, color24);
 8004696:	88ba      	ldrh	r2, [r7, #4]
 8004698:	883b      	ldrh	r3, [r7, #0]
 800469a:	4413      	add	r3, r2
 800469c:	b299      	uxth	r1, r3
 800469e:	88fa      	ldrh	r2, [r7, #6]
 80046a0:	887b      	ldrh	r3, [r7, #2]
 80046a2:	4413      	add	r3, r2
 80046a4:	b29c      	uxth	r4, r3
 80046a6:	88ba      	ldrh	r2, [r7, #4]
 80046a8:	883b      	ldrh	r3, [r7, #0]
 80046aa:	4413      	add	r3, r2
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	88f8      	ldrh	r0, [r7, #6]
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	9301      	str	r3, [sp, #4]
 80046b4:	7e3b      	ldrb	r3, [r7, #24]
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	4613      	mov	r3, r2
 80046ba:	4622      	mov	r2, r4
 80046bc:	f7ff fe66 	bl	800438c <LCD_Line>
	LCD_Line(x, y, x, y + h, size, color24);
 80046c0:	88ba      	ldrh	r2, [r7, #4]
 80046c2:	883b      	ldrh	r3, [r7, #0]
 80046c4:	4413      	add	r3, r2
 80046c6:	b29c      	uxth	r4, r3
 80046c8:	88fa      	ldrh	r2, [r7, #6]
 80046ca:	88b9      	ldrh	r1, [r7, #4]
 80046cc:	88f8      	ldrh	r0, [r7, #6]
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	9301      	str	r3, [sp, #4]
 80046d2:	7e3b      	ldrb	r3, [r7, #24]
 80046d4:	9300      	str	r3, [sp, #0]
 80046d6:	4623      	mov	r3, r4
 80046d8:	f7ff fe58 	bl	800438c <LCD_Line>
	LCD_Line(x + w, y, x + w, y + h, size, color24);
 80046dc:	88fa      	ldrh	r2, [r7, #6]
 80046de:	887b      	ldrh	r3, [r7, #2]
 80046e0:	4413      	add	r3, r2
 80046e2:	b298      	uxth	r0, r3
 80046e4:	88fa      	ldrh	r2, [r7, #6]
 80046e6:	887b      	ldrh	r3, [r7, #2]
 80046e8:	4413      	add	r3, r2
 80046ea:	b29c      	uxth	r4, r3
 80046ec:	88ba      	ldrh	r2, [r7, #4]
 80046ee:	883b      	ldrh	r3, [r7, #0]
 80046f0:	4413      	add	r3, r2
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	88b9      	ldrh	r1, [r7, #4]
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	9301      	str	r3, [sp, #4]
 80046fa:	7e3b      	ldrb	r3, [r7, #24]
 80046fc:	9300      	str	r3, [sp, #0]
 80046fe:	4613      	mov	r3, r2
 8004700:	4622      	mov	r2, r4
 8004702:	f7ff fe43 	bl	800438c <LCD_Line>
}
 8004706:	bf00      	nop
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	bd90      	pop	{r4, r7, pc}

0800470e <LCD_Ellipse>:

void LCD_Ellipse(int16_t x0, int16_t y0, int16_t rx, int16_t ry, uint8_t fill, uint8_t size, uint32_t color24)
{
 800470e:	b590      	push	{r4, r7, lr}
 8004710:	b08b      	sub	sp, #44	; 0x2c
 8004712:	af02      	add	r7, sp, #8
 8004714:	4604      	mov	r4, r0
 8004716:	4608      	mov	r0, r1
 8004718:	4611      	mov	r1, r2
 800471a:	461a      	mov	r2, r3
 800471c:	4623      	mov	r3, r4
 800471e:	80fb      	strh	r3, [r7, #6]
 8004720:	4603      	mov	r3, r0
 8004722:	80bb      	strh	r3, [r7, #4]
 8004724:	460b      	mov	r3, r1
 8004726:	807b      	strh	r3, [r7, #2]
 8004728:	4613      	mov	r3, r2
 800472a:	803b      	strh	r3, [r7, #0]
	int16_t x, y;
	int32_t rx2 = rx * rx;
 800472c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004730:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004734:	fb02 f303 	mul.w	r3, r2, r3
 8004738:	617b      	str	r3, [r7, #20]
	int32_t ry2 = ry * ry;
 800473a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800473e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004742:	fb02 f303 	mul.w	r3, r2, r3
 8004746:	613b      	str	r3, [r7, #16]
	int32_t fx2 = 4 * rx2;
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	60fb      	str	r3, [r7, #12]
	int32_t fy2 = 4 * ry2;
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	60bb      	str	r3, [r7, #8]
	int32_t s;
	if (fill)
 8004754:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004758:	2b00      	cmp	r3, #0
 800475a:	f000 8101 	beq.w	8004960 <LCD_Ellipse+0x252>
	{
		for (x = 0, y = ry, s = 2 * ry2 + rx2 * (1 - 2 * ry); ry2 * x <= rx2 * y; x++)
 800475e:	2300      	movs	r3, #0
 8004760:	83fb      	strh	r3, [r7, #30]
 8004762:	883b      	ldrh	r3, [r7, #0]
 8004764:	83bb      	strh	r3, [r7, #28]
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	005a      	lsls	r2, r3, #1
 800476a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	f1c3 0301 	rsb	r3, r3, #1
 8004774:	6979      	ldr	r1, [r7, #20]
 8004776:	fb01 f303 	mul.w	r3, r1, r3
 800477a:	4413      	add	r3, r2
 800477c:	61bb      	str	r3, [r7, #24]
 800477e:	e062      	b.n	8004846 <LCD_Ellipse+0x138>
		{
			LCD_Line(x0 - x, y0 - y, x0 + x + 1 - size, y0 - y, size, color24);
 8004780:	88fa      	ldrh	r2, [r7, #6]
 8004782:	8bfb      	ldrh	r3, [r7, #30]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	b298      	uxth	r0, r3
 8004788:	88ba      	ldrh	r2, [r7, #4]
 800478a:	8bbb      	ldrh	r3, [r7, #28]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	b299      	uxth	r1, r3
 8004790:	88fa      	ldrh	r2, [r7, #6]
 8004792:	8bfb      	ldrh	r3, [r7, #30]
 8004794:	4413      	add	r3, r2
 8004796:	b29a      	uxth	r2, r3
 8004798:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800479c:	b29b      	uxth	r3, r3
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	3301      	adds	r3, #1
 80047a4:	b29c      	uxth	r4, r3
 80047a6:	88ba      	ldrh	r2, [r7, #4]
 80047a8:	8bbb      	ldrh	r3, [r7, #28]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b0:	9301      	str	r3, [sp, #4]
 80047b2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80047b6:	9300      	str	r3, [sp, #0]
 80047b8:	4613      	mov	r3, r2
 80047ba:	4622      	mov	r2, r4
 80047bc:	f7ff fde6 	bl	800438c <LCD_Line>
			LCD_Line(x0 - x, y0 + y, x0 + x + 1 - size, y0 + y, size, color24);
 80047c0:	88fa      	ldrh	r2, [r7, #6]
 80047c2:	8bfb      	ldrh	r3, [r7, #30]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	b298      	uxth	r0, r3
 80047c8:	88ba      	ldrh	r2, [r7, #4]
 80047ca:	8bbb      	ldrh	r3, [r7, #28]
 80047cc:	4413      	add	r3, r2
 80047ce:	b299      	uxth	r1, r3
 80047d0:	88fa      	ldrh	r2, [r7, #6]
 80047d2:	8bfb      	ldrh	r3, [r7, #30]
 80047d4:	4413      	add	r3, r2
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80047dc:	b29b      	uxth	r3, r3
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	3301      	adds	r3, #1
 80047e4:	b29c      	uxth	r4, r3
 80047e6:	88ba      	ldrh	r2, [r7, #4]
 80047e8:	8bbb      	ldrh	r3, [r7, #28]
 80047ea:	4413      	add	r3, r2
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f0:	9301      	str	r3, [sp, #4]
 80047f2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80047f6:	9300      	str	r3, [sp, #0]
 80047f8:	4613      	mov	r3, r2
 80047fa:	4622      	mov	r2, r4
 80047fc:	f7ff fdc6 	bl	800438c <LCD_Line>
			if (s >= 0)
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	2b00      	cmp	r3, #0
 8004804:	db0f      	blt.n	8004826 <LCD_Ellipse+0x118>
			{
				s += fx2 * (1 - y);
 8004806:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800480a:	f1c3 0301 	rsb	r3, r3, #1
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	fb02 f303 	mul.w	r3, r2, r3
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	4413      	add	r3, r2
 8004818:	61bb      	str	r3, [r7, #24]
				y--;
 800481a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800481e:	b29b      	uxth	r3, r3
 8004820:	3b01      	subs	r3, #1
 8004822:	b29b      	uxth	r3, r3
 8004824:	83bb      	strh	r3, [r7, #28]
			}
			s += ry2 * ((4 * x) + 6);
 8004826:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	3306      	adds	r3, #6
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	fb02 f303 	mul.w	r3, r2, r3
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	4413      	add	r3, r2
 8004838:	61bb      	str	r3, [r7, #24]
		for (x = 0, y = ry, s = 2 * ry2 + rx2 * (1 - 2 * ry); ry2 * x <= rx2 * y; x++)
 800483a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800483e:	b29b      	uxth	r3, r3
 8004840:	3301      	adds	r3, #1
 8004842:	b29b      	uxth	r3, r3
 8004844:	83fb      	strh	r3, [r7, #30]
 8004846:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	fb03 f202 	mul.w	r2, r3, r2
 8004850:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004854:	6979      	ldr	r1, [r7, #20]
 8004856:	fb01 f303 	mul.w	r3, r1, r3
 800485a:	429a      	cmp	r2, r3
 800485c:	dd90      	ble.n	8004780 <LCD_Ellipse+0x72>
		}
		for (x = rx, y = 0, s = 2 * rx2 + ry2 * (1-2 * rx); rx2 * y <= ry2 * x; y++)
 800485e:	887b      	ldrh	r3, [r7, #2]
 8004860:	83fb      	strh	r3, [r7, #30]
 8004862:	2300      	movs	r3, #0
 8004864:	83bb      	strh	r3, [r7, #28]
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	005a      	lsls	r2, r3, #1
 800486a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800486e:	005b      	lsls	r3, r3, #1
 8004870:	f1c3 0301 	rsb	r3, r3, #1
 8004874:	6939      	ldr	r1, [r7, #16]
 8004876:	fb01 f303 	mul.w	r3, r1, r3
 800487a:	4413      	add	r3, r2
 800487c:	61bb      	str	r3, [r7, #24]
 800487e:	e062      	b.n	8004946 <LCD_Ellipse+0x238>
		{
			LCD_Line(x0 - x, y0 - y, x0 + x + 1 - size, y0 - y, size, color24);
 8004880:	88fa      	ldrh	r2, [r7, #6]
 8004882:	8bfb      	ldrh	r3, [r7, #30]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	b298      	uxth	r0, r3
 8004888:	88ba      	ldrh	r2, [r7, #4]
 800488a:	8bbb      	ldrh	r3, [r7, #28]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	b299      	uxth	r1, r3
 8004890:	88fa      	ldrh	r2, [r7, #6]
 8004892:	8bfb      	ldrh	r3, [r7, #30]
 8004894:	4413      	add	r3, r2
 8004896:	b29a      	uxth	r2, r3
 8004898:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800489c:	b29b      	uxth	r3, r3
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	3301      	adds	r3, #1
 80048a4:	b29c      	uxth	r4, r3
 80048a6:	88ba      	ldrh	r2, [r7, #4]
 80048a8:	8bbb      	ldrh	r3, [r7, #28]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	b29a      	uxth	r2, r3
 80048ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b0:	9301      	str	r3, [sp, #4]
 80048b2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	4613      	mov	r3, r2
 80048ba:	4622      	mov	r2, r4
 80048bc:	f7ff fd66 	bl	800438c <LCD_Line>
			LCD_Line(x0 - x, y0 + y, x0 + x + 1 - size, y0 + y, size, color24);
 80048c0:	88fa      	ldrh	r2, [r7, #6]
 80048c2:	8bfb      	ldrh	r3, [r7, #30]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	b298      	uxth	r0, r3
 80048c8:	88ba      	ldrh	r2, [r7, #4]
 80048ca:	8bbb      	ldrh	r3, [r7, #28]
 80048cc:	4413      	add	r3, r2
 80048ce:	b299      	uxth	r1, r3
 80048d0:	88fa      	ldrh	r2, [r7, #6]
 80048d2:	8bfb      	ldrh	r3, [r7, #30]
 80048d4:	4413      	add	r3, r2
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80048dc:	b29b      	uxth	r3, r3
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	3301      	adds	r3, #1
 80048e4:	b29c      	uxth	r4, r3
 80048e6:	88ba      	ldrh	r2, [r7, #4]
 80048e8:	8bbb      	ldrh	r3, [r7, #28]
 80048ea:	4413      	add	r3, r2
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f0:	9301      	str	r3, [sp, #4]
 80048f2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	4613      	mov	r3, r2
 80048fa:	4622      	mov	r2, r4
 80048fc:	f7ff fd46 	bl	800438c <LCD_Line>
			if (s >= 0)
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	2b00      	cmp	r3, #0
 8004904:	db0f      	blt.n	8004926 <LCD_Ellipse+0x218>
			{
				s += fy2 * (1 - x);
 8004906:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800490a:	f1c3 0301 	rsb	r3, r3, #1
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	fb02 f303 	mul.w	r3, r2, r3
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	4413      	add	r3, r2
 8004918:	61bb      	str	r3, [r7, #24]
				x--;
 800491a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800491e:	b29b      	uxth	r3, r3
 8004920:	3b01      	subs	r3, #1
 8004922:	b29b      	uxth	r3, r3
 8004924:	83fb      	strh	r3, [r7, #30]
			}
			s += rx2 * ((4 * y) + 6);
 8004926:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	3306      	adds	r3, #6
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	fb02 f303 	mul.w	r3, r2, r3
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	4413      	add	r3, r2
 8004938:	61bb      	str	r3, [r7, #24]
		for (x = rx, y = 0, s = 2 * rx2 + ry2 * (1-2 * rx); rx2 * y <= ry2 * x; y++)
 800493a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800493e:	b29b      	uxth	r3, r3
 8004940:	3301      	adds	r3, #1
 8004942:	b29b      	uxth	r3, r3
 8004944:	83bb      	strh	r3, [r7, #28]
 8004946:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800494a:	697a      	ldr	r2, [r7, #20]
 800494c:	fb03 f202 	mul.w	r2, r3, r2
 8004950:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004954:	6939      	ldr	r1, [r7, #16]
 8004956:	fb01 f303 	mul.w	r3, r1, r3
 800495a:	429a      	cmp	r2, r3
 800495c:	dd90      	ble.n	8004880 <LCD_Ellipse+0x172>
				x--;
			}
			s += rx2 * ((4 * y) + 6);
		}
	}
}
 800495e:	e117      	b.n	8004b90 <LCD_Ellipse+0x482>
		for (x = 0, y = ry, s = 2 * ry2 + rx2 * (1 - 2 * ry); ry2 * x <= rx2 * y; x++)
 8004960:	2300      	movs	r3, #0
 8004962:	83fb      	strh	r3, [r7, #30]
 8004964:	883b      	ldrh	r3, [r7, #0]
 8004966:	83bb      	strh	r3, [r7, #28]
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	005a      	lsls	r2, r3, #1
 800496c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004970:	005b      	lsls	r3, r3, #1
 8004972:	f1c3 0301 	rsb	r3, r3, #1
 8004976:	6979      	ldr	r1, [r7, #20]
 8004978:	fb01 f303 	mul.w	r3, r1, r3
 800497c:	4413      	add	r3, r2
 800497e:	61bb      	str	r3, [r7, #24]
 8004980:	e06e      	b.n	8004a60 <LCD_Ellipse+0x352>
			LCD_Rect_Fill(x0 + x, y0 + y, size, size, color24);
 8004982:	88fa      	ldrh	r2, [r7, #6]
 8004984:	8bfb      	ldrh	r3, [r7, #30]
 8004986:	4413      	add	r3, r2
 8004988:	b298      	uxth	r0, r3
 800498a:	88ba      	ldrh	r2, [r7, #4]
 800498c:	8bbb      	ldrh	r3, [r7, #28]
 800498e:	4413      	add	r3, r2
 8004990:	b299      	uxth	r1, r3
 8004992:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004996:	b29a      	uxth	r2, r3
 8004998:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800499c:	b29c      	uxth	r4, r3
 800499e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a0:	9300      	str	r3, [sp, #0]
 80049a2:	4623      	mov	r3, r4
 80049a4:	f7ff fcb4 	bl	8004310 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 + y, size, size, color24);
 80049a8:	88fa      	ldrh	r2, [r7, #6]
 80049aa:	8bfb      	ldrh	r3, [r7, #30]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	b298      	uxth	r0, r3
 80049b0:	88ba      	ldrh	r2, [r7, #4]
 80049b2:	8bbb      	ldrh	r3, [r7, #28]
 80049b4:	4413      	add	r3, r2
 80049b6:	b299      	uxth	r1, r3
 80049b8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80049bc:	b29a      	uxth	r2, r3
 80049be:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80049c2:	b29c      	uxth	r4, r3
 80049c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c6:	9300      	str	r3, [sp, #0]
 80049c8:	4623      	mov	r3, r4
 80049ca:	f7ff fca1 	bl	8004310 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + x, y0 - y, size, size, color24);
 80049ce:	88fa      	ldrh	r2, [r7, #6]
 80049d0:	8bfb      	ldrh	r3, [r7, #30]
 80049d2:	4413      	add	r3, r2
 80049d4:	b298      	uxth	r0, r3
 80049d6:	88ba      	ldrh	r2, [r7, #4]
 80049d8:	8bbb      	ldrh	r3, [r7, #28]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	b299      	uxth	r1, r3
 80049de:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80049e8:	b29c      	uxth	r4, r3
 80049ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	4623      	mov	r3, r4
 80049f0:	f7ff fc8e 	bl	8004310 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 - y, size, size, color24);
 80049f4:	88fa      	ldrh	r2, [r7, #6]
 80049f6:	8bfb      	ldrh	r3, [r7, #30]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	b298      	uxth	r0, r3
 80049fc:	88ba      	ldrh	r2, [r7, #4]
 80049fe:	8bbb      	ldrh	r3, [r7, #28]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	b299      	uxth	r1, r3
 8004a04:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004a0e:	b29c      	uxth	r4, r3
 8004a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a12:	9300      	str	r3, [sp, #0]
 8004a14:	4623      	mov	r3, r4
 8004a16:	f7ff fc7b 	bl	8004310 <LCD_Rect_Fill>
			if (s >= 0)
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	db0f      	blt.n	8004a40 <LCD_Ellipse+0x332>
				s += fx2 * (1 - y);
 8004a20:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004a24:	f1c3 0301 	rsb	r3, r3, #1
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	fb02 f303 	mul.w	r3, r2, r3
 8004a2e:	69ba      	ldr	r2, [r7, #24]
 8004a30:	4413      	add	r3, r2
 8004a32:	61bb      	str	r3, [r7, #24]
				y--;
 8004a34:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	83bb      	strh	r3, [r7, #28]
			s += ry2 * ((4 * x) + 6);
 8004a40:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	3306      	adds	r3, #6
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	fb02 f303 	mul.w	r3, r2, r3
 8004a4e:	69ba      	ldr	r2, [r7, #24]
 8004a50:	4413      	add	r3, r2
 8004a52:	61bb      	str	r3, [r7, #24]
		for (x = 0, y = ry, s = 2 * ry2 + rx2 * (1 - 2 * ry); ry2 * x <= rx2 * y; x++)
 8004a54:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	83fb      	strh	r3, [r7, #30]
 8004a60:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004a64:	693a      	ldr	r2, [r7, #16]
 8004a66:	fb03 f202 	mul.w	r2, r3, r2
 8004a6a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004a6e:	6979      	ldr	r1, [r7, #20]
 8004a70:	fb01 f303 	mul.w	r3, r1, r3
 8004a74:	429a      	cmp	r2, r3
 8004a76:	dd84      	ble.n	8004982 <LCD_Ellipse+0x274>
		for (x = rx, y = 0, s = 2 * rx2 + ry2 * (1 - 2 * rx); rx2 * y <= ry2 * x; y++)
 8004a78:	887b      	ldrh	r3, [r7, #2]
 8004a7a:	83fb      	strh	r3, [r7, #30]
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	83bb      	strh	r3, [r7, #28]
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	005a      	lsls	r2, r3, #1
 8004a84:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004a88:	005b      	lsls	r3, r3, #1
 8004a8a:	f1c3 0301 	rsb	r3, r3, #1
 8004a8e:	6939      	ldr	r1, [r7, #16]
 8004a90:	fb01 f303 	mul.w	r3, r1, r3
 8004a94:	4413      	add	r3, r2
 8004a96:	61bb      	str	r3, [r7, #24]
 8004a98:	e06e      	b.n	8004b78 <LCD_Ellipse+0x46a>
			LCD_Rect_Fill(x0 + x, y0 + y, size, size, color24);
 8004a9a:	88fa      	ldrh	r2, [r7, #6]
 8004a9c:	8bfb      	ldrh	r3, [r7, #30]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	b298      	uxth	r0, r3
 8004aa2:	88ba      	ldrh	r2, [r7, #4]
 8004aa4:	8bbb      	ldrh	r3, [r7, #28]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	b299      	uxth	r1, r3
 8004aaa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004aae:	b29a      	uxth	r2, r3
 8004ab0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004ab4:	b29c      	uxth	r4, r3
 8004ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	4623      	mov	r3, r4
 8004abc:	f7ff fc28 	bl	8004310 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 + y, size, size, color24);
 8004ac0:	88fa      	ldrh	r2, [r7, #6]
 8004ac2:	8bfb      	ldrh	r3, [r7, #30]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	b298      	uxth	r0, r3
 8004ac8:	88ba      	ldrh	r2, [r7, #4]
 8004aca:	8bbb      	ldrh	r3, [r7, #28]
 8004acc:	4413      	add	r3, r2
 8004ace:	b299      	uxth	r1, r3
 8004ad0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004ad4:	b29a      	uxth	r2, r3
 8004ad6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004ada:	b29c      	uxth	r4, r3
 8004adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ade:	9300      	str	r3, [sp, #0]
 8004ae0:	4623      	mov	r3, r4
 8004ae2:	f7ff fc15 	bl	8004310 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + x, y0 - y, size, size, color24);
 8004ae6:	88fa      	ldrh	r2, [r7, #6]
 8004ae8:	8bfb      	ldrh	r3, [r7, #30]
 8004aea:	4413      	add	r3, r2
 8004aec:	b298      	uxth	r0, r3
 8004aee:	88ba      	ldrh	r2, [r7, #4]
 8004af0:	8bbb      	ldrh	r3, [r7, #28]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	b299      	uxth	r1, r3
 8004af6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004afa:	b29a      	uxth	r2, r3
 8004afc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004b00:	b29c      	uxth	r4, r3
 8004b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b04:	9300      	str	r3, [sp, #0]
 8004b06:	4623      	mov	r3, r4
 8004b08:	f7ff fc02 	bl	8004310 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 - y, size, size, color24);
 8004b0c:	88fa      	ldrh	r2, [r7, #6]
 8004b0e:	8bfb      	ldrh	r3, [r7, #30]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	b298      	uxth	r0, r3
 8004b14:	88ba      	ldrh	r2, [r7, #4]
 8004b16:	8bbb      	ldrh	r3, [r7, #28]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	b299      	uxth	r1, r3
 8004b1c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004b26:	b29c      	uxth	r4, r3
 8004b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b2a:	9300      	str	r3, [sp, #0]
 8004b2c:	4623      	mov	r3, r4
 8004b2e:	f7ff fbef 	bl	8004310 <LCD_Rect_Fill>
			if (s >= 0)
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	db0f      	blt.n	8004b58 <LCD_Ellipse+0x44a>
				s += fy2 * (1 - x);
 8004b38:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004b3c:	f1c3 0301 	rsb	r3, r3, #1
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	fb02 f303 	mul.w	r3, r2, r3
 8004b46:	69ba      	ldr	r2, [r7, #24]
 8004b48:	4413      	add	r3, r2
 8004b4a:	61bb      	str	r3, [r7, #24]
				x--;
 8004b4c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	3b01      	subs	r3, #1
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	83fb      	strh	r3, [r7, #30]
			s += rx2 * ((4 * y) + 6);
 8004b58:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	3306      	adds	r3, #6
 8004b60:	697a      	ldr	r2, [r7, #20]
 8004b62:	fb02 f303 	mul.w	r3, r2, r3
 8004b66:	69ba      	ldr	r2, [r7, #24]
 8004b68:	4413      	add	r3, r2
 8004b6a:	61bb      	str	r3, [r7, #24]
		for (x = rx, y = 0, s = 2 * rx2 + ry2 * (1 - 2 * rx); rx2 * y <= ry2 * x; y++)
 8004b6c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	3301      	adds	r3, #1
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	83bb      	strh	r3, [r7, #28]
 8004b78:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	fb03 f202 	mul.w	r2, r3, r2
 8004b82:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004b86:	6939      	ldr	r1, [r7, #16]
 8004b88:	fb01 f303 	mul.w	r3, r1, r3
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	dd84      	ble.n	8004a9a <LCD_Ellipse+0x38c>
}
 8004b90:	bf00      	nop
 8004b92:	3724      	adds	r7, #36	; 0x24
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd90      	pop	{r4, r7, pc}

08004b98 <LCD_Circle>:

void LCD_Circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t fill, uint8_t size, uint32_t color24)
{
 8004b98:	b590      	push	{r4, r7, lr}
 8004b9a:	b089      	sub	sp, #36	; 0x24
 8004b9c:	af02      	add	r7, sp, #8
 8004b9e:	4604      	mov	r4, r0
 8004ba0:	4608      	mov	r0, r1
 8004ba2:	4611      	mov	r1, r2
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	4623      	mov	r3, r4
 8004ba8:	80fb      	strh	r3, [r7, #6]
 8004baa:	4603      	mov	r3, r0
 8004bac:	80bb      	strh	r3, [r7, #4]
 8004bae:	460b      	mov	r3, r1
 8004bb0:	70fb      	strb	r3, [r7, #3]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	70bb      	strb	r3, [r7, #2]
	int a_, b_, P;
	a_ = 0;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	617b      	str	r3, [r7, #20]
	b_ = radius;
 8004bba:	78fb      	ldrb	r3, [r7, #3]
 8004bbc:	613b      	str	r3, [r7, #16]
	P = 1 - radius;
 8004bbe:	78fb      	ldrb	r3, [r7, #3]
 8004bc0:	f1c3 0301 	rsb	r3, r3, #1
 8004bc4:	60fb      	str	r3, [r7, #12]
	while (a_ <= b_)
 8004bc6:	e0fc      	b.n	8004dc2 <LCD_Circle+0x22a>
	{
		if (fill == 1)
 8004bc8:	78bb      	ldrb	r3, [r7, #2]
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d136      	bne.n	8004c3c <LCD_Circle+0xa4>
		{
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	88fa      	ldrh	r2, [r7, #6]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	b298      	uxth	r0, r3
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	88ba      	ldrh	r2, [r7, #4]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	b299      	uxth	r1, r3
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	005b      	lsls	r3, r3, #1
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	3301      	adds	r3, #1
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	005b      	lsls	r3, r3, #1
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	b29c      	uxth	r4, r3
 8004bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	4623      	mov	r3, r4
 8004c00:	f7ff fb86 	bl	8004310 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	88fa      	ldrh	r2, [r7, #6]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	b298      	uxth	r0, r3
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	88ba      	ldrh	r2, [r7, #4]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	b299      	uxth	r1, r3
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	005b      	lsls	r3, r3, #1
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	3301      	adds	r3, #1
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	005b      	lsls	r3, r3, #1
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	b29c      	uxth	r4, r3
 8004c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c32:	9300      	str	r3, [sp, #0]
 8004c34:	4623      	mov	r3, r4
 8004c36:	f7ff fb6b 	bl	8004310 <LCD_Rect_Fill>
 8004c3a:	e0a7      	b.n	8004d8c <LCD_Circle+0x1f4>
		}
		else
		{
			LCD_Rect_Fill(a_ + x, b_ + y, size, size, color24);
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	b29a      	uxth	r2, r3
 8004c40:	88fb      	ldrh	r3, [r7, #6]
 8004c42:	4413      	add	r3, r2
 8004c44:	b298      	uxth	r0, r3
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	b29a      	uxth	r2, r3
 8004c4a:	88bb      	ldrh	r3, [r7, #4]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	b299      	uxth	r1, r3
 8004c50:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c5a:	b29c      	uxth	r4, r3
 8004c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c5e:	9300      	str	r3, [sp, #0]
 8004c60:	4623      	mov	r3, r4
 8004c62:	f7ff fb55 	bl	8004310 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, a_ + y, size, size, color24);
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	88fb      	ldrh	r3, [r7, #6]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	b298      	uxth	r0, r3
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	88bb      	ldrh	r3, [r7, #4]
 8004c76:	4413      	add	r3, r2
 8004c78:	b299      	uxth	r1, r3
 8004c7a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c84:	b29c      	uxth	r4, r3
 8004c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	4623      	mov	r3, r4
 8004c8c:	f7ff fb40 	bl	8004310 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, b_ + y, size, size, color24);
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	88fa      	ldrh	r2, [r7, #6]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	b298      	uxth	r0, r3
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	88bb      	ldrh	r3, [r7, #4]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	b299      	uxth	r1, r3
 8004ca4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004cae:	b29c      	uxth	r4, r3
 8004cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb2:	9300      	str	r3, [sp, #0]
 8004cb4:	4623      	mov	r3, r4
 8004cb6:	f7ff fb2b 	bl	8004310 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, a_ + y, size, size, color24);
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	88fa      	ldrh	r2, [r7, #6]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	b298      	uxth	r0, r3
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	88bb      	ldrh	r3, [r7, #4]
 8004cca:	4413      	add	r3, r2
 8004ccc:	b299      	uxth	r1, r3
 8004cce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004cd8:	b29c      	uxth	r4, r3
 8004cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	4623      	mov	r3, r4
 8004ce0:	f7ff fb16 	bl	8004310 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, y - a_, size, size, color24);
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	88fb      	ldrh	r3, [r7, #6]
 8004cea:	4413      	add	r3, r2
 8004cec:	b298      	uxth	r0, r3
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	88ba      	ldrh	r2, [r7, #4]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	b299      	uxth	r1, r3
 8004cf8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d02:	b29c      	uxth	r4, r3
 8004d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d06:	9300      	str	r3, [sp, #0]
 8004d08:	4623      	mov	r3, r4
 8004d0a:	f7ff fb01 	bl	8004310 <LCD_Rect_Fill>
			LCD_Rect_Fill(a_ + x, y - b_, size, size, color24);
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	88fb      	ldrh	r3, [r7, #6]
 8004d14:	4413      	add	r3, r2
 8004d16:	b298      	uxth	r0, r3
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	88ba      	ldrh	r2, [r7, #4]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	b299      	uxth	r1, r3
 8004d22:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d2c:	b29c      	uxth	r4, r3
 8004d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	4623      	mov	r3, r4
 8004d34:	f7ff faec 	bl	8004310 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, y - b_, size, size, color24);
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	88fa      	ldrh	r2, [r7, #6]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	b298      	uxth	r0, r3
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	88ba      	ldrh	r2, [r7, #4]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	b299      	uxth	r1, r3
 8004d4c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d56:	b29c      	uxth	r4, r3
 8004d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d5a:	9300      	str	r3, [sp, #0]
 8004d5c:	4623      	mov	r3, r4
 8004d5e:	f7ff fad7 	bl	8004310 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, size, size, color24);
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	88fa      	ldrh	r2, [r7, #6]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	b298      	uxth	r0, r3
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	88ba      	ldrh	r2, [r7, #4]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	b299      	uxth	r1, r3
 8004d76:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d80:	b29c      	uxth	r4, r3
 8004d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d84:	9300      	str	r3, [sp, #0]
 8004d86:	4623      	mov	r3, r4
 8004d88:	f7ff fac2 	bl	8004310 <LCD_Rect_Fill>
		}
		if (P < 0)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	da09      	bge.n	8004da6 <LCD_Circle+0x20e>
		{
			P = (P + 3) + (2 * a_);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	1cda      	adds	r2, r3, #3
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	005b      	lsls	r3, r3, #1
 8004d9a:	4413      	add	r3, r2
 8004d9c:	60fb      	str	r3, [r7, #12]
			a_++;
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	3301      	adds	r3, #1
 8004da2:	617b      	str	r3, [r7, #20]
 8004da4:	e00d      	b.n	8004dc2 <LCD_Circle+0x22a>
		}
		else
		{
			P = (P + 5) + (2 * (a_ - b_));
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	1d5a      	adds	r2, r3, #5
 8004daa:	6979      	ldr	r1, [r7, #20]
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	1acb      	subs	r3, r1, r3
 8004db0:	005b      	lsls	r3, r3, #1
 8004db2:	4413      	add	r3, r2
 8004db4:	60fb      	str	r3, [r7, #12]
			a_++;
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	3301      	adds	r3, #1
 8004dba:	617b      	str	r3, [r7, #20]
			b_--;
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	613b      	str	r3, [r7, #16]
	while (a_ <= b_)
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	f77f aefe 	ble.w	8004bc8 <LCD_Circle+0x30>
		}
	}
}
 8004dcc:	bf00      	nop
 8004dce:	bf00      	nop
 8004dd0:	371c      	adds	r7, #28
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd90      	pop	{r4, r7, pc}

08004dd6 <LCD_Circle_Helper>:

void LCD_Circle_Helper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint8_t size, uint32_t color24)
{
 8004dd6:	b590      	push	{r4, r7, lr}
 8004dd8:	b089      	sub	sp, #36	; 0x24
 8004dda:	af02      	add	r7, sp, #8
 8004ddc:	4604      	mov	r4, r0
 8004dde:	4608      	mov	r0, r1
 8004de0:	4611      	mov	r1, r2
 8004de2:	461a      	mov	r2, r3
 8004de4:	4623      	mov	r3, r4
 8004de6:	80fb      	strh	r3, [r7, #6]
 8004de8:	4603      	mov	r3, r0
 8004dea:	80bb      	strh	r3, [r7, #4]
 8004dec:	460b      	mov	r3, r1
 8004dee:	807b      	strh	r3, [r7, #2]
 8004df0:	4613      	mov	r3, r2
 8004df2:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8004df4:	887b      	ldrh	r3, [r7, #2]
 8004df6:	f1c3 0301 	rsb	r3, r3, #1
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8004e02:	887b      	ldrh	r3, [r7, #2]
 8004e04:	461a      	mov	r2, r3
 8004e06:	03d2      	lsls	r2, r2, #15
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	005b      	lsls	r3, r3, #1
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8004e10:	2300      	movs	r3, #0
 8004e12:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8004e14:	887b      	ldrh	r3, [r7, #2]
 8004e16:	81fb      	strh	r3, [r7, #14]

	while (x < y) {
 8004e18:	e0cd      	b.n	8004fb6 <LCD_Circle_Helper+0x1e0>
		if (f >= 0) {
 8004e1a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	db0e      	blt.n	8004e40 <LCD_Circle_Helper+0x6a>
			y--;
 8004e22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8004e2e:	8a7b      	ldrh	r3, [r7, #18]
 8004e30:	3302      	adds	r3, #2
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8004e36:	8afa      	ldrh	r2, [r7, #22]
 8004e38:	8a7b      	ldrh	r3, [r7, #18]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8004e40:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	3301      	adds	r3, #1
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8004e4c:	8abb      	ldrh	r3, [r7, #20]
 8004e4e:	3302      	adds	r3, #2
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8004e54:	8afa      	ldrh	r2, [r7, #22]
 8004e56:	8abb      	ldrh	r3, [r7, #20]
 8004e58:	4413      	add	r3, r2
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	82fb      	strh	r3, [r7, #22]
		if (cornername & 0x4) {
 8004e5e:	787b      	ldrb	r3, [r7, #1]
 8004e60:	f003 0304 	and.w	r3, r3, #4
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d025      	beq.n	8004eb4 <LCD_Circle_Helper+0xde>
			LCD_Rect_Fill(x0 + x, y0 + y, size, size, color24);
 8004e68:	88fa      	ldrh	r2, [r7, #6]
 8004e6a:	8a3b      	ldrh	r3, [r7, #16]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	b298      	uxth	r0, r3
 8004e70:	88ba      	ldrh	r2, [r7, #4]
 8004e72:	89fb      	ldrh	r3, [r7, #14]
 8004e74:	4413      	add	r3, r2
 8004e76:	b299      	uxth	r1, r3
 8004e78:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e7c:	b29a      	uxth	r2, r3
 8004e7e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e82:	b29c      	uxth	r4, r3
 8004e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e86:	9300      	str	r3, [sp, #0]
 8004e88:	4623      	mov	r3, r4
 8004e8a:	f7ff fa41 	bl	8004310 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + y, y0 + x, size, size, color24);
 8004e8e:	88fa      	ldrh	r2, [r7, #6]
 8004e90:	89fb      	ldrh	r3, [r7, #14]
 8004e92:	4413      	add	r3, r2
 8004e94:	b298      	uxth	r0, r3
 8004e96:	88ba      	ldrh	r2, [r7, #4]
 8004e98:	8a3b      	ldrh	r3, [r7, #16]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	b299      	uxth	r1, r3
 8004e9e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ea8:	b29c      	uxth	r4, r3
 8004eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eac:	9300      	str	r3, [sp, #0]
 8004eae:	4623      	mov	r3, r4
 8004eb0:	f7ff fa2e 	bl	8004310 <LCD_Rect_Fill>
		}
		if (cornername & 0x2) {
 8004eb4:	787b      	ldrb	r3, [r7, #1]
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d025      	beq.n	8004f0a <LCD_Circle_Helper+0x134>
			LCD_Rect_Fill(x0 + x, y0 - y, size, size, color24);
 8004ebe:	88fa      	ldrh	r2, [r7, #6]
 8004ec0:	8a3b      	ldrh	r3, [r7, #16]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	b298      	uxth	r0, r3
 8004ec6:	88ba      	ldrh	r2, [r7, #4]
 8004ec8:	89fb      	ldrh	r3, [r7, #14]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	b299      	uxth	r1, r3
 8004ece:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ed8:	b29c      	uxth	r4, r3
 8004eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	4623      	mov	r3, r4
 8004ee0:	f7ff fa16 	bl	8004310 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + y, y0 - x, size, size, color24);
 8004ee4:	88fa      	ldrh	r2, [r7, #6]
 8004ee6:	89fb      	ldrh	r3, [r7, #14]
 8004ee8:	4413      	add	r3, r2
 8004eea:	b298      	uxth	r0, r3
 8004eec:	88ba      	ldrh	r2, [r7, #4]
 8004eee:	8a3b      	ldrh	r3, [r7, #16]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	b299      	uxth	r1, r3
 8004ef4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ef8:	b29a      	uxth	r2, r3
 8004efa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004efe:	b29c      	uxth	r4, r3
 8004f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f02:	9300      	str	r3, [sp, #0]
 8004f04:	4623      	mov	r3, r4
 8004f06:	f7ff fa03 	bl	8004310 <LCD_Rect_Fill>
		}
		if (cornername & 0x8) {
 8004f0a:	787b      	ldrb	r3, [r7, #1]
 8004f0c:	f003 0308 	and.w	r3, r3, #8
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d025      	beq.n	8004f60 <LCD_Circle_Helper+0x18a>
			LCD_Rect_Fill(x0 - y, y0 + x, size, size, color24);
 8004f14:	88fa      	ldrh	r2, [r7, #6]
 8004f16:	89fb      	ldrh	r3, [r7, #14]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	b298      	uxth	r0, r3
 8004f1c:	88ba      	ldrh	r2, [r7, #4]
 8004f1e:	8a3b      	ldrh	r3, [r7, #16]
 8004f20:	4413      	add	r3, r2
 8004f22:	b299      	uxth	r1, r3
 8004f24:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f2e:	b29c      	uxth	r4, r3
 8004f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f32:	9300      	str	r3, [sp, #0]
 8004f34:	4623      	mov	r3, r4
 8004f36:	f7ff f9eb 	bl	8004310 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 + y, size, size, color24);
 8004f3a:	88fa      	ldrh	r2, [r7, #6]
 8004f3c:	8a3b      	ldrh	r3, [r7, #16]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	b298      	uxth	r0, r3
 8004f42:	88ba      	ldrh	r2, [r7, #4]
 8004f44:	89fb      	ldrh	r3, [r7, #14]
 8004f46:	4413      	add	r3, r2
 8004f48:	b299      	uxth	r1, r3
 8004f4a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f54:	b29c      	uxth	r4, r3
 8004f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f58:	9300      	str	r3, [sp, #0]
 8004f5a:	4623      	mov	r3, r4
 8004f5c:	f7ff f9d8 	bl	8004310 <LCD_Rect_Fill>
		}
		if (cornername & 0x1) {
 8004f60:	787b      	ldrb	r3, [r7, #1]
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d025      	beq.n	8004fb6 <LCD_Circle_Helper+0x1e0>
			LCD_Rect_Fill(x0 - y, y0 - x, size, size, color24);
 8004f6a:	88fa      	ldrh	r2, [r7, #6]
 8004f6c:	89fb      	ldrh	r3, [r7, #14]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	b298      	uxth	r0, r3
 8004f72:	88ba      	ldrh	r2, [r7, #4]
 8004f74:	8a3b      	ldrh	r3, [r7, #16]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	b299      	uxth	r1, r3
 8004f7a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f84:	b29c      	uxth	r4, r3
 8004f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f88:	9300      	str	r3, [sp, #0]
 8004f8a:	4623      	mov	r3, r4
 8004f8c:	f7ff f9c0 	bl	8004310 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 - y, size, size, color24);
 8004f90:	88fa      	ldrh	r2, [r7, #6]
 8004f92:	8a3b      	ldrh	r3, [r7, #16]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	b298      	uxth	r0, r3
 8004f98:	88ba      	ldrh	r2, [r7, #4]
 8004f9a:	89fb      	ldrh	r3, [r7, #14]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	b299      	uxth	r1, r3
 8004fa0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004faa:	b29c      	uxth	r4, r3
 8004fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fae:	9300      	str	r3, [sp, #0]
 8004fb0:	4623      	mov	r3, r4
 8004fb2:	f7ff f9ad 	bl	8004310 <LCD_Rect_Fill>
	while (x < y) {
 8004fb6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004fba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	f6ff af2b 	blt.w	8004e1a <LCD_Circle_Helper+0x44>
		}
	}
}
 8004fc4:	bf00      	nop
 8004fc6:	bf00      	nop
 8004fc8:	371c      	adds	r7, #28
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd90      	pop	{r4, r7, pc}

08004fce <LCD_Rect_Round>:

void LCD_Rect_Round(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t r, uint8_t size, uint32_t color24)
{
 8004fce:	b590      	push	{r4, r7, lr}
 8004fd0:	b085      	sub	sp, #20
 8004fd2:	af02      	add	r7, sp, #8
 8004fd4:	4604      	mov	r4, r0
 8004fd6:	4608      	mov	r0, r1
 8004fd8:	4611      	mov	r1, r2
 8004fda:	461a      	mov	r2, r3
 8004fdc:	4623      	mov	r3, r4
 8004fde:	80fb      	strh	r3, [r7, #6]
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	80bb      	strh	r3, [r7, #4]
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	807b      	strh	r3, [r7, #2]
 8004fe8:	4613      	mov	r3, r2
 8004fea:	803b      	strh	r3, [r7, #0]
	LCD_Line(x + (r + 2), y, x + length + size - (r + 2), y, size, color24);
 8004fec:	8b3a      	ldrh	r2, [r7, #24]
 8004fee:	88fb      	ldrh	r3, [r7, #6]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	3302      	adds	r3, #2
 8004ff6:	b298      	uxth	r0, r3
 8004ff8:	88fa      	ldrh	r2, [r7, #6]
 8004ffa:	887b      	ldrh	r3, [r7, #2]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	7f3b      	ldrb	r3, [r7, #28]
 8005002:	b29b      	uxth	r3, r3
 8005004:	4413      	add	r3, r2
 8005006:	b29a      	uxth	r2, r3
 8005008:	8b3b      	ldrh	r3, [r7, #24]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	b29b      	uxth	r3, r3
 800500e:	3b02      	subs	r3, #2
 8005010:	b29a      	uxth	r2, r3
 8005012:	88bc      	ldrh	r4, [r7, #4]
 8005014:	88b9      	ldrh	r1, [r7, #4]
 8005016:	6a3b      	ldr	r3, [r7, #32]
 8005018:	9301      	str	r3, [sp, #4]
 800501a:	7f3b      	ldrb	r3, [r7, #28]
 800501c:	9300      	str	r3, [sp, #0]
 800501e:	4623      	mov	r3, r4
 8005020:	f7ff f9b4 	bl	800438c <LCD_Line>
	LCD_Line(x + (r + 2), y + width - 1, x + length + size - (r + 2), y + width - 1, size, color24);
 8005024:	8b3a      	ldrh	r2, [r7, #24]
 8005026:	88fb      	ldrh	r3, [r7, #6]
 8005028:	4413      	add	r3, r2
 800502a:	b29b      	uxth	r3, r3
 800502c:	3302      	adds	r3, #2
 800502e:	b298      	uxth	r0, r3
 8005030:	88ba      	ldrh	r2, [r7, #4]
 8005032:	883b      	ldrh	r3, [r7, #0]
 8005034:	4413      	add	r3, r2
 8005036:	b29b      	uxth	r3, r3
 8005038:	3b01      	subs	r3, #1
 800503a:	b299      	uxth	r1, r3
 800503c:	88fa      	ldrh	r2, [r7, #6]
 800503e:	887b      	ldrh	r3, [r7, #2]
 8005040:	4413      	add	r3, r2
 8005042:	b29a      	uxth	r2, r3
 8005044:	7f3b      	ldrb	r3, [r7, #28]
 8005046:	b29b      	uxth	r3, r3
 8005048:	4413      	add	r3, r2
 800504a:	b29a      	uxth	r2, r3
 800504c:	8b3b      	ldrh	r3, [r7, #24]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	b29b      	uxth	r3, r3
 8005052:	3b02      	subs	r3, #2
 8005054:	b29c      	uxth	r4, r3
 8005056:	88ba      	ldrh	r2, [r7, #4]
 8005058:	883b      	ldrh	r3, [r7, #0]
 800505a:	4413      	add	r3, r2
 800505c:	b29b      	uxth	r3, r3
 800505e:	3b01      	subs	r3, #1
 8005060:	b29a      	uxth	r2, r3
 8005062:	6a3b      	ldr	r3, [r7, #32]
 8005064:	9301      	str	r3, [sp, #4]
 8005066:	7f3b      	ldrb	r3, [r7, #28]
 8005068:	9300      	str	r3, [sp, #0]
 800506a:	4613      	mov	r3, r2
 800506c:	4622      	mov	r2, r4
 800506e:	f7ff f98d 	bl	800438c <LCD_Line>
	LCD_Line(x, y + (r + 2), x, y + width - size - (r + 2), size, color24);
 8005072:	8b3a      	ldrh	r2, [r7, #24]
 8005074:	88bb      	ldrh	r3, [r7, #4]
 8005076:	4413      	add	r3, r2
 8005078:	b29b      	uxth	r3, r3
 800507a:	3302      	adds	r3, #2
 800507c:	b299      	uxth	r1, r3
 800507e:	88ba      	ldrh	r2, [r7, #4]
 8005080:	883b      	ldrh	r3, [r7, #0]
 8005082:	4413      	add	r3, r2
 8005084:	b29a      	uxth	r2, r3
 8005086:	7f3b      	ldrb	r3, [r7, #28]
 8005088:	b29b      	uxth	r3, r3
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	b29a      	uxth	r2, r3
 800508e:	8b3b      	ldrh	r3, [r7, #24]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	b29b      	uxth	r3, r3
 8005094:	3b02      	subs	r3, #2
 8005096:	b29c      	uxth	r4, r3
 8005098:	88fa      	ldrh	r2, [r7, #6]
 800509a:	88f8      	ldrh	r0, [r7, #6]
 800509c:	6a3b      	ldr	r3, [r7, #32]
 800509e:	9301      	str	r3, [sp, #4]
 80050a0:	7f3b      	ldrb	r3, [r7, #28]
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	4623      	mov	r3, r4
 80050a6:	f7ff f971 	bl	800438c <LCD_Line>
	LCD_Line(x + length - 1, y + (r + 2), x + length - 1, y + width - size - (r + 2), size, color24);
 80050aa:	88fa      	ldrh	r2, [r7, #6]
 80050ac:	887b      	ldrh	r3, [r7, #2]
 80050ae:	4413      	add	r3, r2
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	3b01      	subs	r3, #1
 80050b4:	b298      	uxth	r0, r3
 80050b6:	8b3a      	ldrh	r2, [r7, #24]
 80050b8:	88bb      	ldrh	r3, [r7, #4]
 80050ba:	4413      	add	r3, r2
 80050bc:	b29b      	uxth	r3, r3
 80050be:	3302      	adds	r3, #2
 80050c0:	b299      	uxth	r1, r3
 80050c2:	88fa      	ldrh	r2, [r7, #6]
 80050c4:	887b      	ldrh	r3, [r7, #2]
 80050c6:	4413      	add	r3, r2
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	3b01      	subs	r3, #1
 80050cc:	b29c      	uxth	r4, r3
 80050ce:	88ba      	ldrh	r2, [r7, #4]
 80050d0:	883b      	ldrh	r3, [r7, #0]
 80050d2:	4413      	add	r3, r2
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	7f3b      	ldrb	r3, [r7, #28]
 80050d8:	b29b      	uxth	r3, r3
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	b29a      	uxth	r2, r3
 80050de:	8b3b      	ldrh	r3, [r7, #24]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	3b02      	subs	r3, #2
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	6a3b      	ldr	r3, [r7, #32]
 80050ea:	9301      	str	r3, [sp, #4]
 80050ec:	7f3b      	ldrb	r3, [r7, #28]
 80050ee:	9300      	str	r3, [sp, #0]
 80050f0:	4613      	mov	r3, r2
 80050f2:	4622      	mov	r2, r4
 80050f4:	f7ff f94a 	bl	800438c <LCD_Line>

	LCD_Circle_Helper(x + (r + 2), y + (r + 2), (r + 2), 1, size, color24);
 80050f8:	8b3a      	ldrh	r2, [r7, #24]
 80050fa:	88fb      	ldrh	r3, [r7, #6]
 80050fc:	4413      	add	r3, r2
 80050fe:	b29b      	uxth	r3, r3
 8005100:	3302      	adds	r3, #2
 8005102:	b29b      	uxth	r3, r3
 8005104:	b218      	sxth	r0, r3
 8005106:	8b3a      	ldrh	r2, [r7, #24]
 8005108:	88bb      	ldrh	r3, [r7, #4]
 800510a:	4413      	add	r3, r2
 800510c:	b29b      	uxth	r3, r3
 800510e:	3302      	adds	r3, #2
 8005110:	b29b      	uxth	r3, r3
 8005112:	b219      	sxth	r1, r3
 8005114:	8b3b      	ldrh	r3, [r7, #24]
 8005116:	3302      	adds	r3, #2
 8005118:	b29b      	uxth	r3, r3
 800511a:	b21a      	sxth	r2, r3
 800511c:	6a3b      	ldr	r3, [r7, #32]
 800511e:	9301      	str	r3, [sp, #4]
 8005120:	7f3b      	ldrb	r3, [r7, #28]
 8005122:	9300      	str	r3, [sp, #0]
 8005124:	2301      	movs	r3, #1
 8005126:	f7ff fe56 	bl	8004dd6 <LCD_Circle_Helper>
	LCD_Circle_Helper(x + length - (r + 2) - 1, y + (r + 2), (r + 2), 2, size, color24);
 800512a:	88fa      	ldrh	r2, [r7, #6]
 800512c:	887b      	ldrh	r3, [r7, #2]
 800512e:	4413      	add	r3, r2
 8005130:	b29a      	uxth	r2, r3
 8005132:	8b3b      	ldrh	r3, [r7, #24]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	b29b      	uxth	r3, r3
 8005138:	3b03      	subs	r3, #3
 800513a:	b29b      	uxth	r3, r3
 800513c:	b218      	sxth	r0, r3
 800513e:	8b3a      	ldrh	r2, [r7, #24]
 8005140:	88bb      	ldrh	r3, [r7, #4]
 8005142:	4413      	add	r3, r2
 8005144:	b29b      	uxth	r3, r3
 8005146:	3302      	adds	r3, #2
 8005148:	b29b      	uxth	r3, r3
 800514a:	b219      	sxth	r1, r3
 800514c:	8b3b      	ldrh	r3, [r7, #24]
 800514e:	3302      	adds	r3, #2
 8005150:	b29b      	uxth	r3, r3
 8005152:	b21a      	sxth	r2, r3
 8005154:	6a3b      	ldr	r3, [r7, #32]
 8005156:	9301      	str	r3, [sp, #4]
 8005158:	7f3b      	ldrb	r3, [r7, #28]
 800515a:	9300      	str	r3, [sp, #0]
 800515c:	2302      	movs	r3, #2
 800515e:	f7ff fe3a 	bl	8004dd6 <LCD_Circle_Helper>
	LCD_Circle_Helper(x + length - (r + 2) - 1, y + width - (r + 2) - 1, (r + 2), 4, size, color24);
 8005162:	88fa      	ldrh	r2, [r7, #6]
 8005164:	887b      	ldrh	r3, [r7, #2]
 8005166:	4413      	add	r3, r2
 8005168:	b29a      	uxth	r2, r3
 800516a:	8b3b      	ldrh	r3, [r7, #24]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	b29b      	uxth	r3, r3
 8005170:	3b03      	subs	r3, #3
 8005172:	b29b      	uxth	r3, r3
 8005174:	b218      	sxth	r0, r3
 8005176:	88ba      	ldrh	r2, [r7, #4]
 8005178:	883b      	ldrh	r3, [r7, #0]
 800517a:	4413      	add	r3, r2
 800517c:	b29a      	uxth	r2, r3
 800517e:	8b3b      	ldrh	r3, [r7, #24]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	b29b      	uxth	r3, r3
 8005184:	3b03      	subs	r3, #3
 8005186:	b29b      	uxth	r3, r3
 8005188:	b219      	sxth	r1, r3
 800518a:	8b3b      	ldrh	r3, [r7, #24]
 800518c:	3302      	adds	r3, #2
 800518e:	b29b      	uxth	r3, r3
 8005190:	b21a      	sxth	r2, r3
 8005192:	6a3b      	ldr	r3, [r7, #32]
 8005194:	9301      	str	r3, [sp, #4]
 8005196:	7f3b      	ldrb	r3, [r7, #28]
 8005198:	9300      	str	r3, [sp, #0]
 800519a:	2304      	movs	r3, #4
 800519c:	f7ff fe1b 	bl	8004dd6 <LCD_Circle_Helper>
	LCD_Circle_Helper(x + (r + 2), y + width - (r + 2) - 1, (r + 2), 8, size, color24);
 80051a0:	8b3a      	ldrh	r2, [r7, #24]
 80051a2:	88fb      	ldrh	r3, [r7, #6]
 80051a4:	4413      	add	r3, r2
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	3302      	adds	r3, #2
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	b218      	sxth	r0, r3
 80051ae:	88ba      	ldrh	r2, [r7, #4]
 80051b0:	883b      	ldrh	r3, [r7, #0]
 80051b2:	4413      	add	r3, r2
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	8b3b      	ldrh	r3, [r7, #24]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	3b03      	subs	r3, #3
 80051be:	b29b      	uxth	r3, r3
 80051c0:	b219      	sxth	r1, r3
 80051c2:	8b3b      	ldrh	r3, [r7, #24]
 80051c4:	3302      	adds	r3, #2
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	b21a      	sxth	r2, r3
 80051ca:	6a3b      	ldr	r3, [r7, #32]
 80051cc:	9301      	str	r3, [sp, #4]
 80051ce:	7f3b      	ldrb	r3, [r7, #28]
 80051d0:	9300      	str	r3, [sp, #0]
 80051d2:	2308      	movs	r3, #8
 80051d4:	f7ff fdff 	bl	8004dd6 <LCD_Circle_Helper>
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd90      	pop	{r4, r7, pc}

080051e0 <LCD_Circle_Fill_Helper>:

void LCD_Circle_Fill_Helper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint32_t color24)
{
 80051e0:	b590      	push	{r4, r7, lr}
 80051e2:	b089      	sub	sp, #36	; 0x24
 80051e4:	af02      	add	r7, sp, #8
 80051e6:	4604      	mov	r4, r0
 80051e8:	4608      	mov	r0, r1
 80051ea:	4611      	mov	r1, r2
 80051ec:	461a      	mov	r2, r3
 80051ee:	4623      	mov	r3, r4
 80051f0:	80fb      	strh	r3, [r7, #6]
 80051f2:	4603      	mov	r3, r0
 80051f4:	80bb      	strh	r3, [r7, #4]
 80051f6:	460b      	mov	r3, r1
 80051f8:	807b      	strh	r3, [r7, #2]
 80051fa:	4613      	mov	r3, r2
 80051fc:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 80051fe:	887b      	ldrh	r3, [r7, #2]
 8005200:	f1c3 0301 	rsb	r3, r3, #1
 8005204:	b29b      	uxth	r3, r3
 8005206:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8005208:	2301      	movs	r3, #1
 800520a:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 800520c:	887b      	ldrh	r3, [r7, #2]
 800520e:	461a      	mov	r2, r3
 8005210:	03d2      	lsls	r2, r2, #15
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	005b      	lsls	r3, r3, #1
 8005216:	b29b      	uxth	r3, r3
 8005218:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 800521a:	2300      	movs	r3, #0
 800521c:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 800521e:	887b      	ldrh	r3, [r7, #2]
 8005220:	81fb      	strh	r3, [r7, #14]

	while (x < y) {
 8005222:	e0ab      	b.n	800537c <LCD_Circle_Fill_Helper+0x19c>
		if (f >= 0) {
 8005224:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005228:	2b00      	cmp	r3, #0
 800522a:	db0e      	blt.n	800524a <LCD_Circle_Fill_Helper+0x6a>
			y--;
 800522c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005230:	b29b      	uxth	r3, r3
 8005232:	3b01      	subs	r3, #1
 8005234:	b29b      	uxth	r3, r3
 8005236:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8005238:	8a7b      	ldrh	r3, [r7, #18]
 800523a:	3302      	adds	r3, #2
 800523c:	b29b      	uxth	r3, r3
 800523e:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8005240:	8afa      	ldrh	r2, [r7, #22]
 8005242:	8a7b      	ldrh	r3, [r7, #18]
 8005244:	4413      	add	r3, r2
 8005246:	b29b      	uxth	r3, r3
 8005248:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 800524a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800524e:	b29b      	uxth	r3, r3
 8005250:	3301      	adds	r3, #1
 8005252:	b29b      	uxth	r3, r3
 8005254:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8005256:	8abb      	ldrh	r3, [r7, #20]
 8005258:	3302      	adds	r3, #2
 800525a:	b29b      	uxth	r3, r3
 800525c:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 800525e:	8afa      	ldrh	r2, [r7, #22]
 8005260:	8abb      	ldrh	r3, [r7, #20]
 8005262:	4413      	add	r3, r2
 8005264:	b29b      	uxth	r3, r3
 8005266:	82fb      	strh	r3, [r7, #22]

		if (cornername & 0x1) {
 8005268:	787b      	ldrb	r3, [r7, #1]
 800526a:	f003 0301 	and.w	r3, r3, #1
 800526e:	2b00      	cmp	r3, #0
 8005270:	d03f      	beq.n	80052f2 <LCD_Circle_Fill_Helper+0x112>
			LCD_Line(x0 + x, y0 - y, x0 + x, y0 - y + 2 * y + delta, 1, color24);
 8005272:	88fa      	ldrh	r2, [r7, #6]
 8005274:	8a3b      	ldrh	r3, [r7, #16]
 8005276:	4413      	add	r3, r2
 8005278:	b298      	uxth	r0, r3
 800527a:	88ba      	ldrh	r2, [r7, #4]
 800527c:	89fb      	ldrh	r3, [r7, #14]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	b299      	uxth	r1, r3
 8005282:	88fa      	ldrh	r2, [r7, #6]
 8005284:	8a3b      	ldrh	r3, [r7, #16]
 8005286:	4413      	add	r3, r2
 8005288:	b29c      	uxth	r4, r3
 800528a:	88ba      	ldrh	r2, [r7, #4]
 800528c:	89fb      	ldrh	r3, [r7, #14]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	b29a      	uxth	r2, r3
 8005292:	89fb      	ldrh	r3, [r7, #14]
 8005294:	005b      	lsls	r3, r3, #1
 8005296:	b29b      	uxth	r3, r3
 8005298:	4413      	add	r3, r2
 800529a:	b29a      	uxth	r2, r3
 800529c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800529e:	4413      	add	r3, r2
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a4:	9301      	str	r3, [sp, #4]
 80052a6:	2301      	movs	r3, #1
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	4613      	mov	r3, r2
 80052ac:	4622      	mov	r2, r4
 80052ae:	f7ff f86d 	bl	800438c <LCD_Line>
			LCD_Line(x0 + y, y0 - x, x0 + y, y0 - x + 2 * x + delta, 1, color24);
 80052b2:	88fa      	ldrh	r2, [r7, #6]
 80052b4:	89fb      	ldrh	r3, [r7, #14]
 80052b6:	4413      	add	r3, r2
 80052b8:	b298      	uxth	r0, r3
 80052ba:	88ba      	ldrh	r2, [r7, #4]
 80052bc:	8a3b      	ldrh	r3, [r7, #16]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	b299      	uxth	r1, r3
 80052c2:	88fa      	ldrh	r2, [r7, #6]
 80052c4:	89fb      	ldrh	r3, [r7, #14]
 80052c6:	4413      	add	r3, r2
 80052c8:	b29c      	uxth	r4, r3
 80052ca:	88ba      	ldrh	r2, [r7, #4]
 80052cc:	8a3b      	ldrh	r3, [r7, #16]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	8a3b      	ldrh	r3, [r7, #16]
 80052d4:	005b      	lsls	r3, r3, #1
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	4413      	add	r3, r2
 80052da:	b29a      	uxth	r2, r3
 80052dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80052de:	4413      	add	r3, r2
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e4:	9301      	str	r3, [sp, #4]
 80052e6:	2301      	movs	r3, #1
 80052e8:	9300      	str	r3, [sp, #0]
 80052ea:	4613      	mov	r3, r2
 80052ec:	4622      	mov	r2, r4
 80052ee:	f7ff f84d 	bl	800438c <LCD_Line>
		}
		if (cornername & 0x2) {
 80052f2:	787b      	ldrb	r3, [r7, #1]
 80052f4:	f003 0302 	and.w	r3, r3, #2
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d03f      	beq.n	800537c <LCD_Circle_Fill_Helper+0x19c>
			LCD_Line(x0 - x, y0 - y, x0 - x, y0 - y + 2 * y + delta, 1, color24);
 80052fc:	88fa      	ldrh	r2, [r7, #6]
 80052fe:	8a3b      	ldrh	r3, [r7, #16]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	b298      	uxth	r0, r3
 8005304:	88ba      	ldrh	r2, [r7, #4]
 8005306:	89fb      	ldrh	r3, [r7, #14]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	b299      	uxth	r1, r3
 800530c:	88fa      	ldrh	r2, [r7, #6]
 800530e:	8a3b      	ldrh	r3, [r7, #16]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	b29c      	uxth	r4, r3
 8005314:	88ba      	ldrh	r2, [r7, #4]
 8005316:	89fb      	ldrh	r3, [r7, #14]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	b29a      	uxth	r2, r3
 800531c:	89fb      	ldrh	r3, [r7, #14]
 800531e:	005b      	lsls	r3, r3, #1
 8005320:	b29b      	uxth	r3, r3
 8005322:	4413      	add	r3, r2
 8005324:	b29a      	uxth	r2, r3
 8005326:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005328:	4413      	add	r3, r2
 800532a:	b29a      	uxth	r2, r3
 800532c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800532e:	9301      	str	r3, [sp, #4]
 8005330:	2301      	movs	r3, #1
 8005332:	9300      	str	r3, [sp, #0]
 8005334:	4613      	mov	r3, r2
 8005336:	4622      	mov	r2, r4
 8005338:	f7ff f828 	bl	800438c <LCD_Line>
			LCD_Line(x0 - y, y0 - x, x0 - y, y0 - x + 2 * x + delta, 1, color24);
 800533c:	88fa      	ldrh	r2, [r7, #6]
 800533e:	89fb      	ldrh	r3, [r7, #14]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	b298      	uxth	r0, r3
 8005344:	88ba      	ldrh	r2, [r7, #4]
 8005346:	8a3b      	ldrh	r3, [r7, #16]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	b299      	uxth	r1, r3
 800534c:	88fa      	ldrh	r2, [r7, #6]
 800534e:	89fb      	ldrh	r3, [r7, #14]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	b29c      	uxth	r4, r3
 8005354:	88ba      	ldrh	r2, [r7, #4]
 8005356:	8a3b      	ldrh	r3, [r7, #16]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	b29a      	uxth	r2, r3
 800535c:	8a3b      	ldrh	r3, [r7, #16]
 800535e:	005b      	lsls	r3, r3, #1
 8005360:	b29b      	uxth	r3, r3
 8005362:	4413      	add	r3, r2
 8005364:	b29a      	uxth	r2, r3
 8005366:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005368:	4413      	add	r3, r2
 800536a:	b29a      	uxth	r2, r3
 800536c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800536e:	9301      	str	r3, [sp, #4]
 8005370:	2301      	movs	r3, #1
 8005372:	9300      	str	r3, [sp, #0]
 8005374:	4613      	mov	r3, r2
 8005376:	4622      	mov	r2, r4
 8005378:	f7ff f808 	bl	800438c <LCD_Line>
	while (x < y) {
 800537c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8005380:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005384:	429a      	cmp	r2, r3
 8005386:	f6ff af4d 	blt.w	8005224 <LCD_Circle_Fill_Helper+0x44>
		}
	}
}
 800538a:	bf00      	nop
 800538c:	bf00      	nop
 800538e:	371c      	adds	r7, #28
 8005390:	46bd      	mov	sp, r7
 8005392:	bd90      	pop	{r4, r7, pc}

08005394 <LCD_Rect_Round_Fill>:

void LCD_Rect_Round_Fill(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t r, uint32_t color24)
{
 8005394:	b590      	push	{r4, r7, lr}
 8005396:	b085      	sub	sp, #20
 8005398:	af02      	add	r7, sp, #8
 800539a:	4604      	mov	r4, r0
 800539c:	4608      	mov	r0, r1
 800539e:	4611      	mov	r1, r2
 80053a0:	461a      	mov	r2, r3
 80053a2:	4623      	mov	r3, r4
 80053a4:	80fb      	strh	r3, [r7, #6]
 80053a6:	4603      	mov	r3, r0
 80053a8:	80bb      	strh	r3, [r7, #4]
 80053aa:	460b      	mov	r3, r1
 80053ac:	807b      	strh	r3, [r7, #2]
 80053ae:	4613      	mov	r3, r2
 80053b0:	803b      	strh	r3, [r7, #0]
	LCD_Rect_Fill(x + r, y, length - 2 * r, width, color24);
 80053b2:	88fa      	ldrh	r2, [r7, #6]
 80053b4:	8b3b      	ldrh	r3, [r7, #24]
 80053b6:	4413      	add	r3, r2
 80053b8:	b298      	uxth	r0, r3
 80053ba:	8b3b      	ldrh	r3, [r7, #24]
 80053bc:	005b      	lsls	r3, r3, #1
 80053be:	b29b      	uxth	r3, r3
 80053c0:	887a      	ldrh	r2, [r7, #2]
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	883c      	ldrh	r4, [r7, #0]
 80053c8:	88b9      	ldrh	r1, [r7, #4]
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	9300      	str	r3, [sp, #0]
 80053ce:	4623      	mov	r3, r4
 80053d0:	f7fe ff9e 	bl	8004310 <LCD_Rect_Fill>
	LCD_Circle_Fill_Helper(x + length - r - 1, y + r, r, 1, width - 2 * r - 1, color24);
 80053d4:	88fa      	ldrh	r2, [r7, #6]
 80053d6:	887b      	ldrh	r3, [r7, #2]
 80053d8:	4413      	add	r3, r2
 80053da:	b29a      	uxth	r2, r3
 80053dc:	8b3b      	ldrh	r3, [r7, #24]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	3b01      	subs	r3, #1
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	b218      	sxth	r0, r3
 80053e8:	88ba      	ldrh	r2, [r7, #4]
 80053ea:	8b3b      	ldrh	r3, [r7, #24]
 80053ec:	4413      	add	r3, r2
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	b219      	sxth	r1, r3
 80053f2:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 80053f6:	8b3b      	ldrh	r3, [r7, #24]
 80053f8:	005b      	lsls	r3, r3, #1
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	883a      	ldrh	r2, [r7, #0]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	b29b      	uxth	r3, r3
 8005402:	3b01      	subs	r3, #1
 8005404:	b29b      	uxth	r3, r3
 8005406:	b21b      	sxth	r3, r3
 8005408:	69fa      	ldr	r2, [r7, #28]
 800540a:	9201      	str	r2, [sp, #4]
 800540c:	9300      	str	r3, [sp, #0]
 800540e:	2301      	movs	r3, #1
 8005410:	4622      	mov	r2, r4
 8005412:	f7ff fee5 	bl	80051e0 <LCD_Circle_Fill_Helper>
	LCD_Circle_Fill_Helper(x + r, y + r, r, 2, width - 2 * r - 1, color24);
 8005416:	88fa      	ldrh	r2, [r7, #6]
 8005418:	8b3b      	ldrh	r3, [r7, #24]
 800541a:	4413      	add	r3, r2
 800541c:	b29b      	uxth	r3, r3
 800541e:	b218      	sxth	r0, r3
 8005420:	88ba      	ldrh	r2, [r7, #4]
 8005422:	8b3b      	ldrh	r3, [r7, #24]
 8005424:	4413      	add	r3, r2
 8005426:	b29b      	uxth	r3, r3
 8005428:	b219      	sxth	r1, r3
 800542a:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 800542e:	8b3b      	ldrh	r3, [r7, #24]
 8005430:	005b      	lsls	r3, r3, #1
 8005432:	b29b      	uxth	r3, r3
 8005434:	883a      	ldrh	r2, [r7, #0]
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	b29b      	uxth	r3, r3
 800543a:	3b01      	subs	r3, #1
 800543c:	b29b      	uxth	r3, r3
 800543e:	b21b      	sxth	r3, r3
 8005440:	69fa      	ldr	r2, [r7, #28]
 8005442:	9201      	str	r2, [sp, #4]
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	2302      	movs	r3, #2
 8005448:	4622      	mov	r2, r4
 800544a:	f7ff fec9 	bl	80051e0 <LCD_Circle_Fill_Helper>
}
 800544e:	bf00      	nop
 8005450:	370c      	adds	r7, #12
 8005452:	46bd      	mov	sp, r7
 8005454:	bd90      	pop	{r4, r7, pc}

08005456 <LCD_Char>:

static void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24)
{
 8005456:	b590      	push	{r4, r7, lr}
 8005458:	b08b      	sub	sp, #44	; 0x2c
 800545a:	af02      	add	r7, sp, #8
 800545c:	60ba      	str	r2, [r7, #8]
 800545e:	607b      	str	r3, [r7, #4]
 8005460:	4603      	mov	r3, r0
 8005462:	81fb      	strh	r3, [r7, #14]
 8005464:	460b      	mov	r3, r1
 8005466:	81bb      	strh	r3, [r7, #12]
	uint8_t  *bitmap = font -> bitmap;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	617b      	str	r3, [r7, #20]
	uint16_t bo = glyph -> bitmapOffset;
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	881b      	ldrh	r3, [r3, #0]
 8005472:	83fb      	strh	r3, [r7, #30]
	uint8_t bits = 0, bit = 0;
 8005474:	2300      	movs	r3, #0
 8005476:	777b      	strb	r3, [r7, #29]
 8005478:	2300      	movs	r3, #0
 800547a:	773b      	strb	r3, [r7, #28]
	uint16_t set_pixels = 0;
 800547c:	2300      	movs	r3, #0
 800547e:	837b      	strh	r3, [r7, #26]
	uint8_t  cur_x, cur_y;
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8005480:	2300      	movs	r3, #0
 8005482:	763b      	strb	r3, [r7, #24]
 8005484:	e093      	b.n	80055ae <LCD_Char+0x158>
	{
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8005486:	2300      	movs	r3, #0
 8005488:	767b      	strb	r3, [r7, #25]
 800548a:	e052      	b.n	8005532 <LCD_Char+0xdc>
		{
			if(bit == 0)
 800548c:	7f3b      	ldrb	r3, [r7, #28]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d109      	bne.n	80054a6 <LCD_Char+0x50>
			{
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8005492:	8bfb      	ldrh	r3, [r7, #30]
 8005494:	1c5a      	adds	r2, r3, #1
 8005496:	83fa      	strh	r2, [r7, #30]
 8005498:	461a      	mov	r2, r3
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	4413      	add	r3, r2
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	777b      	strb	r3, [r7, #29]
				bit  = 0x80;
 80054a2:	2380      	movs	r3, #128	; 0x80
 80054a4:	773b      	strb	r3, [r7, #28]
			}
			if(bits & bit)
 80054a6:	7f7a      	ldrb	r2, [r7, #29]
 80054a8:	7f3b      	ldrb	r3, [r7, #28]
 80054aa:	4013      	ands	r3, r2
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d003      	beq.n	80054ba <LCD_Char+0x64>
			{
				set_pixels++;
 80054b2:	8b7b      	ldrh	r3, [r7, #26]
 80054b4:	3301      	adds	r3, #1
 80054b6:	837b      	strh	r3, [r7, #26]
 80054b8:	e035      	b.n	8005526 <LCD_Char+0xd0>
			}
			else if (set_pixels > 0)
 80054ba:	8b7b      	ldrh	r3, [r7, #26]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d032      	beq.n	8005526 <LCD_Char+0xd0>
			{
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80054c6:	461a      	mov	r2, r3
 80054c8:	7e7b      	ldrb	r3, [r7, #25]
 80054ca:	441a      	add	r2, r3
 80054cc:	8b7b      	ldrh	r3, [r7, #26]
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	fb12 f303 	smulbb	r3, r2, r3
 80054dc:	b29a      	uxth	r2, r3
 80054de:	89fb      	ldrh	r3, [r7, #14]
 80054e0:	4413      	add	r3, r2
 80054e2:	b298      	uxth	r0, r3
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80054ea:	461a      	mov	r2, r3
 80054ec:	7e3b      	ldrb	r3, [r7, #24]
 80054ee:	4413      	add	r3, r2
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	fb12 f303 	smulbb	r3, r2, r3
 80054fc:	b29a      	uxth	r2, r3
 80054fe:	89bb      	ldrh	r3, [r7, #12]
 8005500:	4413      	add	r3, r2
 8005502:	b299      	uxth	r1, r3
 8005504:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005508:	b29b      	uxth	r3, r3
 800550a:	8b7a      	ldrh	r2, [r7, #26]
 800550c:	fb12 f303 	smulbb	r3, r2, r3
 8005510:	b29a      	uxth	r2, r3
 8005512:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005516:	b29c      	uxth	r4, r3
 8005518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	4623      	mov	r3, r4
 800551e:	f7fe fef7 	bl	8004310 <LCD_Rect_Fill>
				set_pixels = 0;
 8005522:	2300      	movs	r3, #0
 8005524:	837b      	strh	r3, [r7, #26]
			}
			bit >>= 1;
 8005526:	7f3b      	ldrb	r3, [r7, #28]
 8005528:	085b      	lsrs	r3, r3, #1
 800552a:	773b      	strb	r3, [r7, #28]
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 800552c:	7e7b      	ldrb	r3, [r7, #25]
 800552e:	3301      	adds	r3, #1
 8005530:	767b      	strb	r3, [r7, #25]
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	789b      	ldrb	r3, [r3, #2]
 8005536:	7e7a      	ldrb	r2, [r7, #25]
 8005538:	429a      	cmp	r2, r3
 800553a:	d3a7      	bcc.n	800548c <LCD_Char+0x36>
		}
		if (set_pixels > 0)
 800553c:	8b7b      	ldrh	r3, [r7, #26]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d032      	beq.n	80055a8 <LCD_Char+0x152>
		{
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8005548:	461a      	mov	r2, r3
 800554a:	7e7b      	ldrb	r3, [r7, #25]
 800554c:	441a      	add	r2, r3
 800554e:	8b7b      	ldrh	r3, [r7, #26]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	b29a      	uxth	r2, r3
 8005554:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005558:	b29b      	uxth	r3, r3
 800555a:	fb12 f303 	smulbb	r3, r2, r3
 800555e:	b29a      	uxth	r2, r3
 8005560:	89fb      	ldrh	r3, [r7, #14]
 8005562:	4413      	add	r3, r2
 8005564:	b298      	uxth	r0, r3
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800556c:	461a      	mov	r2, r3
 800556e:	7e3b      	ldrb	r3, [r7, #24]
 8005570:	4413      	add	r3, r2
 8005572:	b29a      	uxth	r2, r3
 8005574:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005578:	b29b      	uxth	r3, r3
 800557a:	fb12 f303 	smulbb	r3, r2, r3
 800557e:	b29a      	uxth	r2, r3
 8005580:	89bb      	ldrh	r3, [r7, #12]
 8005582:	4413      	add	r3, r2
 8005584:	b299      	uxth	r1, r3
 8005586:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800558a:	b29b      	uxth	r3, r3
 800558c:	8b7a      	ldrh	r2, [r7, #26]
 800558e:	fb12 f303 	smulbb	r3, r2, r3
 8005592:	b29a      	uxth	r2, r3
 8005594:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005598:	b29c      	uxth	r4, r3
 800559a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800559c:	9300      	str	r3, [sp, #0]
 800559e:	4623      	mov	r3, r4
 80055a0:	f7fe feb6 	bl	8004310 <LCD_Rect_Fill>
			set_pixels = 0;
 80055a4:	2300      	movs	r3, #0
 80055a6:	837b      	strh	r3, [r7, #26]
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 80055a8:	7e3b      	ldrb	r3, [r7, #24]
 80055aa:	3301      	adds	r3, #1
 80055ac:	763b      	strb	r3, [r7, #24]
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	78db      	ldrb	r3, [r3, #3]
 80055b2:	7e3a      	ldrb	r2, [r7, #24]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	f4ff af66 	bcc.w	8005486 <LCD_Char+0x30>
		}
	}
}
 80055ba:	bf00      	nop
 80055bc:	bf00      	nop
 80055be:	3724      	adds	r7, #36	; 0x24
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd90      	pop	{r4, r7, pc}

080055c4 <LCD_Font>:

void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
{
 80055c4:	b590      	push	{r4, r7, lr}
 80055c6:	b08f      	sub	sp, #60	; 0x3c
 80055c8:	af02      	add	r7, sp, #8
 80055ca:	60ba      	str	r2, [r7, #8]
 80055cc:	607b      	str	r3, [r7, #4]
 80055ce:	4603      	mov	r3, r0
 80055d0:	81fb      	strh	r3, [r7, #14]
 80055d2:	460b      	mov	r3, r1
 80055d4:	81bb      	strh	r3, [r7, #12]
	int16_t cursor_x = x;
 80055d6:	89fb      	ldrh	r3, [r7, #14]
 80055d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int16_t cursor_y = y;
 80055da:	89bb      	ldrh	r3, [r7, #12]
 80055dc:	85bb      	strh	r3, [r7, #44]	; 0x2c
	GFXfont font;
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 80055de:	f107 031c 	add.w	r3, r7, #28
 80055e2:	220c      	movs	r2, #12
 80055e4:	6879      	ldr	r1, [r7, #4]
 80055e6:	4618      	mov	r0, r3
 80055e8:	f017 f8f6 	bl	801c7d8 <memcpy>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80055ec:	2300      	movs	r3, #0
 80055ee:	857b      	strh	r3, [r7, #42]	; 0x2a
 80055f0:	e056      	b.n	80056a0 <LCD_Font+0xdc>
	{
		char c = text[text_pos];
 80055f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	4413      	add	r3, r2
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		if(c == '\n')
 80055fe:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005602:	2b0a      	cmp	r3, #10
 8005604:	d10f      	bne.n	8005626 <LCD_Font+0x62>
		{
			cursor_x = x;
 8005606:	89fb      	ldrh	r3, [r7, #14]
 8005608:	85fb      	strh	r3, [r7, #46]	; 0x2e
			cursor_y += font.yAdvance * size;
 800560a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800560e:	b29a      	uxth	r2, r3
 8005610:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8005614:	b29b      	uxth	r3, r3
 8005616:	fb12 f303 	smulbb	r3, r2, r3
 800561a:	b29a      	uxth	r2, r3
 800561c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800561e:	4413      	add	r3, r2
 8005620:	b29b      	uxth	r3, r3
 8005622:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005624:	e039      	b.n	800569a <LCD_Font+0xd6>
		}
		else if(c >= font.first && c <= font.last && c != '\r')
 8005626:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800562a:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800562e:	429a      	cmp	r2, r3
 8005630:	d333      	bcc.n	800569a <LCD_Font+0xd6>
 8005632:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005636:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800563a:	429a      	cmp	r2, r3
 800563c:	d82d      	bhi.n	800569a <LCD_Font+0xd6>
 800563e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005642:	2b0d      	cmp	r3, #13
 8005644:	d029      	beq.n	800569a <LCD_Font+0xd6>
		{
			GFXglyph glyph;
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8005646:	6a3a      	ldr	r2, [r7, #32]
 8005648:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800564c:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8005650:	1a5b      	subs	r3, r3, r1
 8005652:	00db      	lsls	r3, r3, #3
 8005654:	18d1      	adds	r1, r2, r3
 8005656:	f107 0314 	add.w	r3, r7, #20
 800565a:	2208      	movs	r2, #8
 800565c:	4618      	mov	r0, r3
 800565e:	f017 f8bb 	bl	801c7d8 <memcpy>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8005662:	f107 041c 	add.w	r4, r7, #28
 8005666:	f107 0214 	add.w	r2, r7, #20
 800566a:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 800566e:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8005672:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005674:	9301      	str	r3, [sp, #4]
 8005676:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800567a:	9300      	str	r3, [sp, #0]
 800567c:	4623      	mov	r3, r4
 800567e:	f7ff feea 	bl	8005456 <LCD_Char>
			cursor_x += glyph.xAdvance * size;
 8005682:	7e3b      	ldrb	r3, [r7, #24]
 8005684:	b29a      	uxth	r2, r3
 8005686:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800568a:	b29b      	uxth	r3, r3
 800568c:	fb12 f303 	smulbb	r3, r2, r3
 8005690:	b29a      	uxth	r2, r3
 8005692:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005694:	4413      	add	r3, r2
 8005696:	b29b      	uxth	r3, r3
 8005698:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800569a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800569c:	3301      	adds	r3, #1
 800569e:	857b      	strh	r3, [r7, #42]	; 0x2a
 80056a0:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 80056a2:	68b8      	ldr	r0, [r7, #8]
 80056a4:	f013 f9c2 	bl	8018a2c <strlen>
 80056a8:	4603      	mov	r3, r0
 80056aa:	429c      	cmp	r4, r3
 80056ac:	d3a1      	bcc.n	80055f2 <LCD_Font+0x2e>
		}
	}
}
 80056ae:	bf00      	nop
 80056b0:	bf00      	nop
 80056b2:	3734      	adds	r7, #52	; 0x34
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd90      	pop	{r4, r7, pc}

080056b8 <LCD_Init>:

void LCD_Init(void)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	af00      	add	r7, sp, #0
	//		LCD_RST_SET
	//    HAL_Delay (100);
	//    LCD_RST_RESET
	//    HAL_Delay (120);
	//    LCD_RST_SET
	HAL_Delay(150);
 80056bc:	2096      	movs	r0, #150	; 0x96
 80056be:	f001 f929 	bl	8006914 <HAL_Delay>
	3.  Before PLL is locked, SSD1961/2/3 is operating at input clock frequency (e.g. 10MHz), registers
	programming cannot be set faster than half of the input clock frequency (5M words/s in this example).
	Example to program SSD1961 with M = 29, N = 2, VCO = 10M x 30 = 300 MHz, PLL frequency = 300M / 3 = 100
	MHz
	******************************/
	LCD_Send_Cmd(LCD_RESET);
 80056c2:	2001      	movs	r0, #1
 80056c4:	f7fe fd95 	bl	80041f2 <LCD_Send_Cmd>
	LCD_Send_Cmd(LCD_DISPLAY_ON); 		
 80056c8:	2029      	movs	r0, #41	; 0x29
 80056ca:	f7fe fd92 	bl	80041f2 <LCD_Send_Cmd>
	LCD_Send_Cmd(0xE2);//set frequency
 80056ce:	20e2      	movs	r0, #226	; 0xe2
 80056d0:	f7fe fd8f 	bl	80041f2 <LCD_Send_Cmd>
	LCD_Send_Dat(0x1D);  // presceller(M=29) 
 80056d4:	201d      	movs	r0, #29
 80056d6:	f7fe fd9b 	bl	8004210 <LCD_Send_Dat>
	LCD_Send_Dat(0x02);  //multiplier(N=2) 
 80056da:	2002      	movs	r0, #2
 80056dc:	f7fe fd98 	bl	8004210 <LCD_Send_Dat>
	LCD_Send_Dat(0xFF);  //on-off multiplier and presceller
 80056e0:	20ff      	movs	r0, #255	; 0xff
 80056e2:	f7fe fd95 	bl	8004210 <LCD_Send_Dat>
	//3. Turn on the PLL 
	LCD_Send_Cmd(0xE0);
 80056e6:	20e0      	movs	r0, #224	; 0xe0
 80056e8:	f7fe fd83 	bl	80041f2 <LCD_Send_Cmd>
	LCD_Send_Dat(0x01);
 80056ec:	2001      	movs	r0, #1
 80056ee:	f7fe fd8f 	bl	8004210 <LCD_Send_Dat>
	HAL_Delay(120); // Wait for 100us to let the PLL stable and read the PLL lock status bit. 
 80056f2:	2078      	movs	r0, #120	; 0x78
 80056f4:	f001 f90e 	bl	8006914 <HAL_Delay>
	LCD_Send_Cmd(0xE0);
 80056f8:	20e0      	movs	r0, #224	; 0xe0
 80056fa:	f7fe fd7a 	bl	80041f2 <LCD_Send_Cmd>
	//READ COMMAND “0xE4);   (Bit 2 = 1 if PLL locked) 
	LCD_Send_Dat(0x03); // 5. Switch the clock source to PLL 
 80056fe:	2003      	movs	r0, #3
 8005700:	f7fe fd86 	bl	8004210 <LCD_Send_Dat>
	HAL_Delay(120);
 8005704:	2078      	movs	r0, #120	; 0x78
 8005706:	f001 f905 	bl	8006914 <HAL_Delay>
	LCD_Send_Cmd(0x01); //6. Software Reset
 800570a:	2001      	movs	r0, #1
 800570c:	f7fe fd71 	bl	80041f2 <LCD_Send_Cmd>
	HAL_Delay(120);
 8005710:	2078      	movs	r0, #120	; 0x78
 8005712:	f001 f8ff 	bl	8006914 <HAL_Delay>
	/*************
	Dot clock Freq = PLL Freq x (LCDC_FPR + 1) / 2^20
	For example,  22MHz = 100MHz * (LCDC_FPR+1) / 2^20
	LCDC_FPR = 230685 = 0x3851D
	********************/
	LCD_Send_Cmd(0xE6);  // 7. Configure the dot clock frequency
 8005716:	20e6      	movs	r0, #230	; 0xe6
 8005718:	f7fe fd6b 	bl	80041f2 <LCD_Send_Cmd>
	LCD_Send_Dat(0x03);
 800571c:	2003      	movs	r0, #3
 800571e:	f7fe fd77 	bl	8004210 <LCD_Send_Dat>
	LCD_Send_Dat(0x85);
 8005722:	2085      	movs	r0, #133	; 0x85
 8005724:	f7fe fd74 	bl	8004210 <LCD_Send_Dat>
	LCD_Send_Dat(0x1D);
 8005728:	201d      	movs	r0, #29
 800572a:	f7fe fd71 	bl	8004210 <LCD_Send_Dat>
	//8. Configure the LCD panel  
	//a. Set the panel size to 480 x 800 and polarity of LSHIFT, LLINE and LFRAME to active low 
	LCD_Send_Cmd(0xB0);
 800572e:	20b0      	movs	r0, #176	; 0xb0
 8005730:	f7fe fd5f 	bl	80041f2 <LCD_Send_Cmd>
	if (LSHIFT) LCD_Send_Dat(0x0C); /* 0x08 0x0C 0xAE(5') */else LCD_Send_Dat(0xAE); //18bit panel, disable dithering, LSHIFT: Data latch in rising edge, LLINE and LFRAME: active low 
 8005734:	20ae      	movs	r0, #174	; 0xae
 8005736:	f7fe fd6b 	bl	8004210 <LCD_Send_Dat>
	LCD_Send_Dat(0x20);  /* 0x00 0x80 0x20(5') */    // TFT type 
 800573a:	2020      	movs	r0, #32
 800573c:	f7fe fd68 	bl	8004210 <LCD_Send_Dat>
	LCD_Send_Dat(0x03);     // Horizontal Width:  480 - 1 = 0x031F 
 8005740:	2003      	movs	r0, #3
 8005742:	f7fe fd65 	bl	8004210 <LCD_Send_Dat>
	LCD_Send_Dat(0x1F);
 8005746:	201f      	movs	r0, #31
 8005748:	f7fe fd62 	bl	8004210 <LCD_Send_Dat>
	LCD_Send_Dat(0x01);     // Vertical Width :  800 -1 = 0x01DF
 800574c:	2001      	movs	r0, #1
 800574e:	f7fe fd5f 	bl	8004210 <LCD_Send_Dat>
	LCD_Send_Dat(0xDF);
 8005752:	20df      	movs	r0, #223	; 0xdf
 8005754:	f7fe fd5c 	bl	8004210 <LCD_Send_Dat>
	LCD_Send_Dat(0x2D);  /* 0x00 0x2d */   // 000 = режим RGB
 8005758:	202d      	movs	r0, #45	; 0x2d
 800575a:	f7fe fd59 	bl	8004210 <LCD_Send_Dat>
											 //b. Set the horizontal period 
	LCD_Send_Cmd(0xB4); // Horizontal Display Period  
 800575e:	20b4      	movs	r0, #180	; 0xb4
 8005760:	f7fe fd47 	bl	80041f2 <LCD_Send_Cmd>
	LCD_Send_Dat(0x03);    // HT: horizontal total period (display + non-display) – 1 = 520-1 =  519 =0x0207
 8005764:	2003      	movs	r0, #3
 8005766:	f7fe fd53 	bl	8004210 <LCD_Send_Dat>
	LCD_Send_Dat(0xA0);
 800576a:	20a0      	movs	r0, #160	; 0xa0
 800576c:	f7fe fd50 	bl	8004210 <LCD_Send_Dat>
	LCD_Send_Dat(0x00);    // HPS: Horizontal Sync Pulse Start Position = Horizontal Pulse Width + Horizontal Back Porch = 16 = 0x10 
 8005770:	2000      	movs	r0, #0
 8005772:	f7fe fd4d 	bl	8004210 <LCD_Send_Dat>
	LCD_Send_Dat(0x2E);
 8005776:	202e      	movs	r0, #46	; 0x2e
 8005778:	f7fe fd4a 	bl	8004210 <LCD_Send_Dat>
	LCD_Send_Dat(0x30);     // HPW: Horizontal Sync Pulse Width - 1=8-1=7 
 800577c:	2030      	movs	r0, #48	; 0x30
 800577e:	f7fe fd47 	bl	8004210 <LCD_Send_Dat>
	LCD_Send_Dat(0x00);    // LPS: Horizontal Display Period Start Position = 0x0000 
 8005782:	2000      	movs	r0, #0
 8005784:	f7fe fd44 	bl	8004210 <LCD_Send_Dat>
	LCD_Send_Dat(0x0F);
 8005788:	200f      	movs	r0, #15
 800578a:	f7fe fd41 	bl	8004210 <LCD_Send_Dat>
	LCD_Send_Dat(0x00);    // LPSPP: Horizontal Sync Pulse Subpixel Start Position(for serial TFT interface).  Dummy value for TFT interface. 
 800578e:	2000      	movs	r0, #0
 8005790:	f7fe fd3e 	bl	8004210 <LCD_Send_Dat>
							 //c. Set the vertical period 
	LCD_Send_Cmd(0xB6);    // Vertical Display Period  
 8005794:	20b6      	movs	r0, #182	; 0xb6
 8005796:	f7fe fd2c 	bl	80041f2 <LCD_Send_Cmd>
	LCD_Send_Dat(0x02);     // VT: Vertical Total (display + non-display) Period – 1  =647=0x287 
 800579a:	2002      	movs	r0, #2
 800579c:	f7fe fd38 	bl	8004210 <LCD_Send_Dat>
	LCD_Send_Dat(0x0D);
 80057a0:	200d      	movs	r0, #13
 80057a2:	f7fe fd35 	bl	8004210 <LCD_Send_Dat>
	LCD_Send_Dat(0x00);     // VPS: Vertical Sync Pulse Start Position  =     Vertical Pulse Width + Vertical Back Porch = 2+2=4  
 80057a6:	2000      	movs	r0, #0
 80057a8:	f7fe fd32 	bl	8004210 <LCD_Send_Dat>
	LCD_Send_Dat(0x10);
 80057ac:	2010      	movs	r0, #16
 80057ae:	f7fe fd2f 	bl	8004210 <LCD_Send_Dat>
	LCD_Send_Dat(0x10);     //VPW: Vertical Sync Pulse Width – 1 =1 
 80057b2:	2010      	movs	r0, #16
 80057b4:	f7fe fd2c 	bl	8004210 <LCD_Send_Dat>
	LCD_Send_Dat(0x08);     //FPS: Vertical Display Period Start Position = 0 
 80057b8:	2008      	movs	r0, #8
 80057ba:	f7fe fd29 	bl	8004210 <LCD_Send_Dat>
	LCD_Send_Dat(0x00);
 80057be:	2000      	movs	r0, #0
 80057c0:	f7fe fd26 	bl	8004210 <LCD_Send_Dat>
	//9. Set the back light control PWM clock frequency
	//PWM signal frequency = PLL clock / (256 * (PWMF[7:0] + 1)) / 256
	LCD_Send_Cmd(0xBE);    // PWM configuration 
 80057c4:	20be      	movs	r0, #190	; 0xbe
 80057c6:	f7fe fd14 	bl	80041f2 <LCD_Send_Cmd>
	LCD_Send_Dat(0x08);     // set PWM signal frequency to 170Hz when PLL frequency is 100MHz 
 80057ca:	2008      	movs	r0, #8
 80057cc:	f7fe fd20 	bl	8004210 <LCD_Send_Dat>
	LCD_Send_Dat(0xFF);     // PWM duty cycle  (50%) 
 80057d0:	20ff      	movs	r0, #255	; 0xff
 80057d2:	f7fe fd1d 	bl	8004210 <LCD_Send_Dat>
	LCD_Send_Dat(0x01);     // 0x09 = enable DBC, 0x01 = disable DBC  //on
 80057d6:	2001      	movs	r0, #1
 80057d8:	f7fe fd1a 	bl	8004210 <LCD_Send_Dat>
	LCD_Send_Cmd(0x36);     // set address_mode
 80057dc:	2036      	movs	r0, #54	; 0x36
 80057de:	f7fe fd08 	bl	80041f2 <LCD_Send_Cmd>
	if (MIRROR_H) LCD_Send_Dat(0x02); else if (MIRROR_V) LCD_Send_Dat(0x03);
 80057e2:	2003      	movs	r0, #3
 80057e4:	f7fe fd14 	bl	8004210 <LCD_Send_Dat>
	//13. Setup the MCU interface for 16-bit data write (565 RGB)
	LCD_Send_Cmd(0xF0);     // mcu interface config 
 80057e8:	20f0      	movs	r0, #240	; 0xf0
 80057ea:	f7fe fd02 	bl	80041f2 <LCD_Send_Cmd>
	LCD_Send_Dat(0x03);     // 16 bit interface (565)
 80057ee:	2003      	movs	r0, #3
 80057f0:	f7fe fd0e 	bl	8004210 <LCD_Send_Dat>
							//10. Turn on the display 						
	LCD_Send_Cmd(LCD_DISPLAY_ON);     // display on 
 80057f4:	2029      	movs	r0, #41	; 0x29
 80057f6:	f7fe fcfc 	bl	80041f2 <LCD_Send_Cmd>
}
 80057fa:	bf00      	nop
 80057fc:	bd80      	pop	{r7, pc}

080057fe <LCD_Bright>:

void LCD_Bright(uint8_t bright)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b082      	sub	sp, #8
 8005802:	af00      	add	r7, sp, #0
 8005804:	4603      	mov	r3, r0
 8005806:	71fb      	strb	r3, [r7, #7]
	LCD_Send_Cmd(0xBE);  // PWM configuration 
 8005808:	20be      	movs	r0, #190	; 0xbe
 800580a:	f7fe fcf2 	bl	80041f2 <LCD_Send_Cmd>
	LCD_Send_Dat(0x08);     // set PWM signal frequency to 170Hz when PLL frequency is 100MHz 
 800580e:	2008      	movs	r0, #8
 8005810:	f7fe fcfe 	bl	8004210 <LCD_Send_Dat>
	LCD_Send_Dat(bright);   // PWM duty cycle  
 8005814:	79fb      	ldrb	r3, [r7, #7]
 8005816:	b29b      	uxth	r3, r3
 8005818:	4618      	mov	r0, r3
 800581a:	f7fe fcf9 	bl	8004210 <LCD_Send_Dat>
	LCD_Send_Dat(0x01);
 800581e:	2001      	movs	r0, #1
 8005820:	f7fe fcf6 	bl	8004210 <LCD_Send_Dat>
}
 8005824:	bf00      	nop
 8005826:	3708      	adds	r7, #8
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005832:	2300      	movs	r3, #0
 8005834:	603b      	str	r3, [r7, #0]
 8005836:	4b10      	ldr	r3, [pc, #64]	; (8005878 <HAL_MspInit+0x4c>)
 8005838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800583a:	4a0f      	ldr	r2, [pc, #60]	; (8005878 <HAL_MspInit+0x4c>)
 800583c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005840:	6453      	str	r3, [r2, #68]	; 0x44
 8005842:	4b0d      	ldr	r3, [pc, #52]	; (8005878 <HAL_MspInit+0x4c>)
 8005844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800584a:	603b      	str	r3, [r7, #0]
 800584c:	683b      	ldr	r3, [r7, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800584e:	2300      	movs	r3, #0
 8005850:	607b      	str	r3, [r7, #4]
 8005852:	4b09      	ldr	r3, [pc, #36]	; (8005878 <HAL_MspInit+0x4c>)
 8005854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005856:	4a08      	ldr	r2, [pc, #32]	; (8005878 <HAL_MspInit+0x4c>)
 8005858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800585c:	6413      	str	r3, [r2, #64]	; 0x40
 800585e:	4b06      	ldr	r3, [pc, #24]	; (8005878 <HAL_MspInit+0x4c>)
 8005860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005866:	607b      	str	r3, [r7, #4]
 8005868:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800586a:	bf00      	nop
 800586c:	370c      	adds	r7, #12
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	40023800 	.word	0x40023800

0800587c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b08a      	sub	sp, #40	; 0x28
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005884:	f107 0314 	add.w	r3, r7, #20
 8005888:	2200      	movs	r2, #0
 800588a:	601a      	str	r2, [r3, #0]
 800588c:	605a      	str	r2, [r3, #4]
 800588e:	609a      	str	r2, [r3, #8]
 8005890:	60da      	str	r2, [r3, #12]
 8005892:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a17      	ldr	r2, [pc, #92]	; (80058f8 <HAL_DAC_MspInit+0x7c>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d127      	bne.n	80058ee <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800589e:	2300      	movs	r3, #0
 80058a0:	60fb      	str	r3, [r7, #12]
 80058a2:	4b16      	ldr	r3, [pc, #88]	; (80058fc <HAL_DAC_MspInit+0x80>)
 80058a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a6:	4a15      	ldr	r2, [pc, #84]	; (80058fc <HAL_DAC_MspInit+0x80>)
 80058a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058ac:	6413      	str	r3, [r2, #64]	; 0x40
 80058ae:	4b13      	ldr	r3, [pc, #76]	; (80058fc <HAL_DAC_MspInit+0x80>)
 80058b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058b6:	60fb      	str	r3, [r7, #12]
 80058b8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058ba:	2300      	movs	r3, #0
 80058bc:	613b      	str	r3, [r7, #16]
 80058be:	4b0f      	ldr	r3, [pc, #60]	; (80058fc <HAL_DAC_MspInit+0x80>)
 80058c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c2:	4a0e      	ldr	r2, [pc, #56]	; (80058fc <HAL_DAC_MspInit+0x80>)
 80058c4:	f043 0301 	orr.w	r3, r3, #1
 80058c8:	6313      	str	r3, [r2, #48]	; 0x30
 80058ca:	4b0c      	ldr	r3, [pc, #48]	; (80058fc <HAL_DAC_MspInit+0x80>)
 80058cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ce:	f003 0301 	and.w	r3, r3, #1
 80058d2:	613b      	str	r3, [r7, #16]
 80058d4:	693b      	ldr	r3, [r7, #16]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80058d6:	2330      	movs	r3, #48	; 0x30
 80058d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80058da:	2303      	movs	r3, #3
 80058dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058de:	2300      	movs	r3, #0
 80058e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058e2:	f107 0314 	add.w	r3, r7, #20
 80058e6:	4619      	mov	r1, r3
 80058e8:	4805      	ldr	r0, [pc, #20]	; (8005900 <HAL_DAC_MspInit+0x84>)
 80058ea:	f005 f92f 	bl	800ab4c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80058ee:	bf00      	nop
 80058f0:	3728      	adds	r7, #40	; 0x28
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	40007400 	.word	0x40007400
 80058fc:	40023800 	.word	0x40023800
 8005900:	40020000 	.word	0x40020000

08005904 <HAL_DAC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspDeInit(DAC_HandleTypeDef* hdac)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a08      	ldr	r2, [pc, #32]	; (8005934 <HAL_DAC_MspDeInit+0x30>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d109      	bne.n	800592a <HAL_DAC_MspDeInit+0x26>
  {
  /* USER CODE BEGIN DAC_MspDeInit 0 */

  /* USER CODE END DAC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DAC_CLK_DISABLE();
 8005916:	4b08      	ldr	r3, [pc, #32]	; (8005938 <HAL_DAC_MspDeInit+0x34>)
 8005918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591a:	4a07      	ldr	r2, [pc, #28]	; (8005938 <HAL_DAC_MspDeInit+0x34>)
 800591c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005920:	6413      	str	r3, [r2, #64]	; 0x40

    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4|GPIO_PIN_5);
 8005922:	2130      	movs	r1, #48	; 0x30
 8005924:	4805      	ldr	r0, [pc, #20]	; (800593c <HAL_DAC_MspDeInit+0x38>)
 8005926:	f005 faad 	bl	800ae84 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN DAC_MspDeInit 1 */

  /* USER CODE END DAC_MspDeInit 1 */
  }

}
 800592a:	bf00      	nop
 800592c:	3708      	adds	r7, #8
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	40007400 	.word	0x40007400
 8005938:	40023800 	.word	0x40023800
 800593c:	40020000 	.word	0x40020000

08005940 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b08a      	sub	sp, #40	; 0x28
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005948:	f107 0314 	add.w	r3, r7, #20
 800594c:	2200      	movs	r2, #0
 800594e:	601a      	str	r2, [r3, #0]
 8005950:	605a      	str	r2, [r3, #4]
 8005952:	609a      	str	r2, [r3, #8]
 8005954:	60da      	str	r2, [r3, #12]
 8005956:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a21      	ldr	r2, [pc, #132]	; (80059e4 <HAL_I2C_MspInit+0xa4>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d13b      	bne.n	80059da <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005962:	2300      	movs	r3, #0
 8005964:	60fb      	str	r3, [r7, #12]
 8005966:	4b20      	ldr	r3, [pc, #128]	; (80059e8 <HAL_I2C_MspInit+0xa8>)
 8005968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596a:	4a1f      	ldr	r2, [pc, #124]	; (80059e8 <HAL_I2C_MspInit+0xa8>)
 800596c:	f043 0302 	orr.w	r3, r3, #2
 8005970:	6313      	str	r3, [r2, #48]	; 0x30
 8005972:	4b1d      	ldr	r3, [pc, #116]	; (80059e8 <HAL_I2C_MspInit+0xa8>)
 8005974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005976:	f003 0302 	and.w	r3, r3, #2
 800597a:	60fb      	str	r3, [r7, #12]
 800597c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800597e:	23c0      	movs	r3, #192	; 0xc0
 8005980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005982:	2312      	movs	r3, #18
 8005984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005986:	2301      	movs	r3, #1
 8005988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800598a:	2303      	movs	r3, #3
 800598c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800598e:	2304      	movs	r3, #4
 8005990:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005992:	f107 0314 	add.w	r3, r7, #20
 8005996:	4619      	mov	r1, r3
 8005998:	4814      	ldr	r0, [pc, #80]	; (80059ec <HAL_I2C_MspInit+0xac>)
 800599a:	f005 f8d7 	bl	800ab4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800599e:	2300      	movs	r3, #0
 80059a0:	613b      	str	r3, [r7, #16]
 80059a2:	4b11      	ldr	r3, [pc, #68]	; (80059e8 <HAL_I2C_MspInit+0xa8>)
 80059a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a6:	4a10      	ldr	r2, [pc, #64]	; (80059e8 <HAL_I2C_MspInit+0xa8>)
 80059a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80059ac:	6413      	str	r3, [r2, #64]	; 0x40
 80059ae:	4b0e      	ldr	r3, [pc, #56]	; (80059e8 <HAL_I2C_MspInit+0xa8>)
 80059b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059b6:	613b      	str	r3, [r7, #16]
 80059b8:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80059ba:	2200      	movs	r2, #0
 80059bc:	2100      	movs	r1, #0
 80059be:	201f      	movs	r0, #31
 80059c0:	f001 fa9f 	bl	8006f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80059c4:	201f      	movs	r0, #31
 80059c6:	f001 fab8 	bl	8006f3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80059ca:	2200      	movs	r2, #0
 80059cc:	2100      	movs	r1, #0
 80059ce:	2020      	movs	r0, #32
 80059d0:	f001 fa97 	bl	8006f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80059d4:	2020      	movs	r0, #32
 80059d6:	f001 fab0 	bl	8006f3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80059da:	bf00      	nop
 80059dc:	3728      	adds	r7, #40	; 0x28
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	40005400 	.word	0x40005400
 80059e8:	40023800 	.word	0x40023800
 80059ec:	40020400 	.word	0x40020400

080059f0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a0d      	ldr	r2, [pc, #52]	; (8005a34 <HAL_I2C_MspDeInit+0x44>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d113      	bne.n	8005a2a <HAL_I2C_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8005a02:	4b0d      	ldr	r3, [pc, #52]	; (8005a38 <HAL_I2C_MspDeInit+0x48>)
 8005a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a06:	4a0c      	ldr	r2, [pc, #48]	; (8005a38 <HAL_I2C_MspDeInit+0x48>)
 8005a08:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a0c:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8005a0e:	2140      	movs	r1, #64	; 0x40
 8005a10:	480a      	ldr	r0, [pc, #40]	; (8005a3c <HAL_I2C_MspDeInit+0x4c>)
 8005a12:	f005 fa37 	bl	800ae84 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8005a16:	2180      	movs	r1, #128	; 0x80
 8005a18:	4808      	ldr	r0, [pc, #32]	; (8005a3c <HAL_I2C_MspDeInit+0x4c>)
 8005a1a:	f005 fa33 	bl	800ae84 <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8005a1e:	201f      	movs	r0, #31
 8005a20:	f001 fa99 	bl	8006f56 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8005a24:	2020      	movs	r0, #32
 8005a26:	f001 fa96 	bl	8006f56 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8005a2a:	bf00      	nop
 8005a2c:	3708      	adds	r7, #8
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	bf00      	nop
 8005a34:	40005400 	.word	0x40005400
 8005a38:	40023800 	.word	0x40023800
 8005a3c:	40020400 	.word	0x40020400

08005a40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b08e      	sub	sp, #56	; 0x38
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	601a      	str	r2, [r3, #0]
 8005a50:	605a      	str	r2, [r3, #4]
 8005a52:	609a      	str	r2, [r3, #8]
 8005a54:	60da      	str	r2, [r3, #12]
 8005a56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a89      	ldr	r2, [pc, #548]	; (8005c84 <HAL_SPI_MspInit+0x244>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d12c      	bne.n	8005abc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005a62:	2300      	movs	r3, #0
 8005a64:	60bb      	str	r3, [r7, #8]
 8005a66:	4b88      	ldr	r3, [pc, #544]	; (8005c88 <HAL_SPI_MspInit+0x248>)
 8005a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a6a:	4a87      	ldr	r2, [pc, #540]	; (8005c88 <HAL_SPI_MspInit+0x248>)
 8005a6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005a70:	6453      	str	r3, [r2, #68]	; 0x44
 8005a72:	4b85      	ldr	r3, [pc, #532]	; (8005c88 <HAL_SPI_MspInit+0x248>)
 8005a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a7a:	60bb      	str	r3, [r7, #8]
 8005a7c:	68bb      	ldr	r3, [r7, #8]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a7e:	2300      	movs	r3, #0
 8005a80:	60fb      	str	r3, [r7, #12]
 8005a82:	4b81      	ldr	r3, [pc, #516]	; (8005c88 <HAL_SPI_MspInit+0x248>)
 8005a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a86:	4a80      	ldr	r2, [pc, #512]	; (8005c88 <HAL_SPI_MspInit+0x248>)
 8005a88:	f043 0302 	orr.w	r3, r3, #2
 8005a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8005a8e:	4b7e      	ldr	r3, [pc, #504]	; (8005c88 <HAL_SPI_MspInit+0x248>)
 8005a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a92:	f003 0302 	and.w	r3, r3, #2
 8005a96:	60fb      	str	r3, [r7, #12]
 8005a98:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8005a9a:	2338      	movs	r3, #56	; 0x38
 8005a9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a9e:	2302      	movs	r3, #2
 8005aa0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005aaa:	2305      	movs	r3, #5
 8005aac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005aae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	4875      	ldr	r0, [pc, #468]	; (8005c8c <HAL_SPI_MspInit+0x24c>)
 8005ab6:	f005 f849 	bl	800ab4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8005aba:	e0de      	b.n	8005c7a <HAL_SPI_MspInit+0x23a>
  else if(hspi->Instance==SPI2)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a73      	ldr	r2, [pc, #460]	; (8005c90 <HAL_SPI_MspInit+0x250>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	f040 8088 	bne.w	8005bd8 <HAL_SPI_MspInit+0x198>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005ac8:	2300      	movs	r3, #0
 8005aca:	613b      	str	r3, [r7, #16]
 8005acc:	4b6e      	ldr	r3, [pc, #440]	; (8005c88 <HAL_SPI_MspInit+0x248>)
 8005ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad0:	4a6d      	ldr	r2, [pc, #436]	; (8005c88 <HAL_SPI_MspInit+0x248>)
 8005ad2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ad6:	6413      	str	r3, [r2, #64]	; 0x40
 8005ad8:	4b6b      	ldr	r3, [pc, #428]	; (8005c88 <HAL_SPI_MspInit+0x248>)
 8005ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005adc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ae0:	613b      	str	r3, [r7, #16]
 8005ae2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	617b      	str	r3, [r7, #20]
 8005ae8:	4b67      	ldr	r3, [pc, #412]	; (8005c88 <HAL_SPI_MspInit+0x248>)
 8005aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aec:	4a66      	ldr	r2, [pc, #408]	; (8005c88 <HAL_SPI_MspInit+0x248>)
 8005aee:	f043 0302 	orr.w	r3, r3, #2
 8005af2:	6313      	str	r3, [r2, #48]	; 0x30
 8005af4:	4b64      	ldr	r3, [pc, #400]	; (8005c88 <HAL_SPI_MspInit+0x248>)
 8005af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af8:	f003 0302 	and.w	r3, r3, #2
 8005afc:	617b      	str	r3, [r7, #20]
 8005afe:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005b00:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8005b04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b06:	2302      	movs	r3, #2
 8005b08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005b12:	2305      	movs	r3, #5
 8005b14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	485b      	ldr	r0, [pc, #364]	; (8005c8c <HAL_SPI_MspInit+0x24c>)
 8005b1e:	f005 f815 	bl	800ab4c <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8005b22:	4b5c      	ldr	r3, [pc, #368]	; (8005c94 <HAL_SPI_MspInit+0x254>)
 8005b24:	4a5c      	ldr	r2, [pc, #368]	; (8005c98 <HAL_SPI_MspInit+0x258>)
 8005b26:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8005b28:	4b5a      	ldr	r3, [pc, #360]	; (8005c94 <HAL_SPI_MspInit+0x254>)
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005b2e:	4b59      	ldr	r3, [pc, #356]	; (8005c94 <HAL_SPI_MspInit+0x254>)
 8005b30:	2240      	movs	r2, #64	; 0x40
 8005b32:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b34:	4b57      	ldr	r3, [pc, #348]	; (8005c94 <HAL_SPI_MspInit+0x254>)
 8005b36:	2200      	movs	r2, #0
 8005b38:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005b3a:	4b56      	ldr	r3, [pc, #344]	; (8005c94 <HAL_SPI_MspInit+0x254>)
 8005b3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b40:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005b42:	4b54      	ldr	r3, [pc, #336]	; (8005c94 <HAL_SPI_MspInit+0x254>)
 8005b44:	2200      	movs	r2, #0
 8005b46:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005b48:	4b52      	ldr	r3, [pc, #328]	; (8005c94 <HAL_SPI_MspInit+0x254>)
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8005b4e:	4b51      	ldr	r3, [pc, #324]	; (8005c94 <HAL_SPI_MspInit+0x254>)
 8005b50:	2200      	movs	r2, #0
 8005b52:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005b54:	4b4f      	ldr	r3, [pc, #316]	; (8005c94 <HAL_SPI_MspInit+0x254>)
 8005b56:	2200      	movs	r2, #0
 8005b58:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005b5a:	4b4e      	ldr	r3, [pc, #312]	; (8005c94 <HAL_SPI_MspInit+0x254>)
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8005b60:	484c      	ldr	r0, [pc, #304]	; (8005c94 <HAL_SPI_MspInit+0x254>)
 8005b62:	f001 ffad 	bl	8007ac0 <HAL_DMA_Init>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <HAL_SPI_MspInit+0x130>
      Error_Handler();
 8005b6c:	f7fe fae8 	bl	8004140 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a48      	ldr	r2, [pc, #288]	; (8005c94 <HAL_SPI_MspInit+0x254>)
 8005b74:	649a      	str	r2, [r3, #72]	; 0x48
 8005b76:	4a47      	ldr	r2, [pc, #284]	; (8005c94 <HAL_SPI_MspInit+0x254>)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8005b7c:	4b47      	ldr	r3, [pc, #284]	; (8005c9c <HAL_SPI_MspInit+0x25c>)
 8005b7e:	4a48      	ldr	r2, [pc, #288]	; (8005ca0 <HAL_SPI_MspInit+0x260>)
 8005b80:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8005b82:	4b46      	ldr	r3, [pc, #280]	; (8005c9c <HAL_SPI_MspInit+0x25c>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005b88:	4b44      	ldr	r3, [pc, #272]	; (8005c9c <HAL_SPI_MspInit+0x25c>)
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b8e:	4b43      	ldr	r3, [pc, #268]	; (8005c9c <HAL_SPI_MspInit+0x25c>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005b94:	4b41      	ldr	r3, [pc, #260]	; (8005c9c <HAL_SPI_MspInit+0x25c>)
 8005b96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b9a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005b9c:	4b3f      	ldr	r3, [pc, #252]	; (8005c9c <HAL_SPI_MspInit+0x25c>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005ba2:	4b3e      	ldr	r3, [pc, #248]	; (8005c9c <HAL_SPI_MspInit+0x25c>)
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8005ba8:	4b3c      	ldr	r3, [pc, #240]	; (8005c9c <HAL_SPI_MspInit+0x25c>)
 8005baa:	2200      	movs	r2, #0
 8005bac:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005bae:	4b3b      	ldr	r3, [pc, #236]	; (8005c9c <HAL_SPI_MspInit+0x25c>)
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005bb4:	4b39      	ldr	r3, [pc, #228]	; (8005c9c <HAL_SPI_MspInit+0x25c>)
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8005bba:	4838      	ldr	r0, [pc, #224]	; (8005c9c <HAL_SPI_MspInit+0x25c>)
 8005bbc:	f001 ff80 	bl	8007ac0 <HAL_DMA_Init>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d001      	beq.n	8005bca <HAL_SPI_MspInit+0x18a>
      Error_Handler();
 8005bc6:	f7fe fabb 	bl	8004140 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a33      	ldr	r2, [pc, #204]	; (8005c9c <HAL_SPI_MspInit+0x25c>)
 8005bce:	64da      	str	r2, [r3, #76]	; 0x4c
 8005bd0:	4a32      	ldr	r2, [pc, #200]	; (8005c9c <HAL_SPI_MspInit+0x25c>)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6393      	str	r3, [r2, #56]	; 0x38
}
 8005bd6:	e050      	b.n	8005c7a <HAL_SPI_MspInit+0x23a>
  else if(hspi->Instance==SPI3)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a31      	ldr	r2, [pc, #196]	; (8005ca4 <HAL_SPI_MspInit+0x264>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d14b      	bne.n	8005c7a <HAL_SPI_MspInit+0x23a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005be2:	2300      	movs	r3, #0
 8005be4:	61bb      	str	r3, [r7, #24]
 8005be6:	4b28      	ldr	r3, [pc, #160]	; (8005c88 <HAL_SPI_MspInit+0x248>)
 8005be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bea:	4a27      	ldr	r2, [pc, #156]	; (8005c88 <HAL_SPI_MspInit+0x248>)
 8005bec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8005bf2:	4b25      	ldr	r3, [pc, #148]	; (8005c88 <HAL_SPI_MspInit+0x248>)
 8005bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bfa:	61bb      	str	r3, [r7, #24]
 8005bfc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bfe:	2300      	movs	r3, #0
 8005c00:	61fb      	str	r3, [r7, #28]
 8005c02:	4b21      	ldr	r3, [pc, #132]	; (8005c88 <HAL_SPI_MspInit+0x248>)
 8005c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c06:	4a20      	ldr	r2, [pc, #128]	; (8005c88 <HAL_SPI_MspInit+0x248>)
 8005c08:	f043 0301 	orr.w	r3, r3, #1
 8005c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8005c0e:	4b1e      	ldr	r3, [pc, #120]	; (8005c88 <HAL_SPI_MspInit+0x248>)
 8005c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	61fb      	str	r3, [r7, #28]
 8005c18:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	623b      	str	r3, [r7, #32]
 8005c1e:	4b1a      	ldr	r3, [pc, #104]	; (8005c88 <HAL_SPI_MspInit+0x248>)
 8005c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c22:	4a19      	ldr	r2, [pc, #100]	; (8005c88 <HAL_SPI_MspInit+0x248>)
 8005c24:	f043 0304 	orr.w	r3, r3, #4
 8005c28:	6313      	str	r3, [r2, #48]	; 0x30
 8005c2a:	4b17      	ldr	r3, [pc, #92]	; (8005c88 <HAL_SPI_MspInit+0x248>)
 8005c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c2e:	f003 0304 	and.w	r3, r3, #4
 8005c32:	623b      	str	r3, [r7, #32]
 8005c34:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005c36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c3c:	2302      	movs	r3, #2
 8005c3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c40:	2300      	movs	r3, #0
 8005c42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c44:	2303      	movs	r3, #3
 8005c46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005c48:	2306      	movs	r3, #6
 8005c4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c50:	4619      	mov	r1, r3
 8005c52:	4815      	ldr	r0, [pc, #84]	; (8005ca8 <HAL_SPI_MspInit+0x268>)
 8005c54:	f004 ff7a 	bl	800ab4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8005c58:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005c5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c5e:	2302      	movs	r3, #2
 8005c60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c62:	2300      	movs	r3, #0
 8005c64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c66:	2303      	movs	r3, #3
 8005c68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005c6a:	2306      	movs	r3, #6
 8005c6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c72:	4619      	mov	r1, r3
 8005c74:	480d      	ldr	r0, [pc, #52]	; (8005cac <HAL_SPI_MspInit+0x26c>)
 8005c76:	f004 ff69 	bl	800ab4c <HAL_GPIO_Init>
}
 8005c7a:	bf00      	nop
 8005c7c:	3738      	adds	r7, #56	; 0x38
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	40013000 	.word	0x40013000
 8005c88:	40023800 	.word	0x40023800
 8005c8c:	40020400 	.word	0x40020400
 8005c90:	40003800 	.word	0x40003800
 8005c94:	20000418 	.word	0x20000418
 8005c98:	40026070 	.word	0x40026070
 8005c9c:	20000478 	.word	0x20000478
 8005ca0:	40026058 	.word	0x40026058
 8005ca4:	40003c00 	.word	0x40003c00
 8005ca8:	40020000 	.word	0x40020000
 8005cac:	40020800 	.word	0x40020800

08005cb0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a20      	ldr	r2, [pc, #128]	; (8005d40 <HAL_SPI_MspDeInit+0x90>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d10a      	bne.n	8005cd8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8005cc2:	4b20      	ldr	r3, [pc, #128]	; (8005d44 <HAL_SPI_MspDeInit+0x94>)
 8005cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cc6:	4a1f      	ldr	r2, [pc, #124]	; (8005d44 <HAL_SPI_MspDeInit+0x94>)
 8005cc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ccc:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5);
 8005cce:	2138      	movs	r1, #56	; 0x38
 8005cd0:	481d      	ldr	r0, [pc, #116]	; (8005d48 <HAL_SPI_MspDeInit+0x98>)
 8005cd2:	f005 f8d7 	bl	800ae84 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 8005cd6:	e02f      	b.n	8005d38 <HAL_SPI_MspDeInit+0x88>
  else if(hspi->Instance==SPI2)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a1b      	ldr	r2, [pc, #108]	; (8005d4c <HAL_SPI_MspDeInit+0x9c>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d115      	bne.n	8005d0e <HAL_SPI_MspDeInit+0x5e>
    __HAL_RCC_SPI2_CLK_DISABLE();
 8005ce2:	4b18      	ldr	r3, [pc, #96]	; (8005d44 <HAL_SPI_MspDeInit+0x94>)
 8005ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce6:	4a17      	ldr	r2, [pc, #92]	; (8005d44 <HAL_SPI_MspDeInit+0x94>)
 8005ce8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cec:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 8005cee:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8005cf2:	4815      	ldr	r0, [pc, #84]	; (8005d48 <HAL_SPI_MspDeInit+0x98>)
 8005cf4:	f005 f8c6 	bl	800ae84 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f001 ff8d 	bl	8007c1c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmarx);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d06:	4618      	mov	r0, r3
 8005d08:	f001 ff88 	bl	8007c1c <HAL_DMA_DeInit>
}
 8005d0c:	e014      	b.n	8005d38 <HAL_SPI_MspDeInit+0x88>
  else if(hspi->Instance==SPI3)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a0f      	ldr	r2, [pc, #60]	; (8005d50 <HAL_SPI_MspDeInit+0xa0>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d10f      	bne.n	8005d38 <HAL_SPI_MspDeInit+0x88>
    __HAL_RCC_SPI3_CLK_DISABLE();
 8005d18:	4b0a      	ldr	r3, [pc, #40]	; (8005d44 <HAL_SPI_MspDeInit+0x94>)
 8005d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1c:	4a09      	ldr	r2, [pc, #36]	; (8005d44 <HAL_SPI_MspDeInit+0x94>)
 8005d1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d22:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_15);
 8005d24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d28:	480a      	ldr	r0, [pc, #40]	; (8005d54 <HAL_SPI_MspDeInit+0xa4>)
 8005d2a:	f005 f8ab 	bl	800ae84 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);
 8005d2e:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8005d32:	4809      	ldr	r0, [pc, #36]	; (8005d58 <HAL_SPI_MspDeInit+0xa8>)
 8005d34:	f005 f8a6 	bl	800ae84 <HAL_GPIO_DeInit>
}
 8005d38:	bf00      	nop
 8005d3a:	3708      	adds	r7, #8
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	40013000 	.word	0x40013000
 8005d44:	40023800 	.word	0x40023800
 8005d48:	40020400 	.word	0x40020400
 8005d4c:	40003800 	.word	0x40003800
 8005d50:	40003c00 	.word	0x40003c00
 8005d54:	40020000 	.word	0x40020000
 8005d58:	40020800 	.word	0x40020800

08005d5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b08a      	sub	sp, #40	; 0x28
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d64:	f107 0314 	add.w	r3, r7, #20
 8005d68:	2200      	movs	r2, #0
 8005d6a:	601a      	str	r2, [r3, #0]
 8005d6c:	605a      	str	r2, [r3, #4]
 8005d6e:	609a      	str	r2, [r3, #8]
 8005d70:	60da      	str	r2, [r3, #12]
 8005d72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a1d      	ldr	r2, [pc, #116]	; (8005df0 <HAL_UART_MspInit+0x94>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d134      	bne.n	8005de8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005d7e:	2300      	movs	r3, #0
 8005d80:	60fb      	str	r3, [r7, #12]
 8005d82:	4b1c      	ldr	r3, [pc, #112]	; (8005df4 <HAL_UART_MspInit+0x98>)
 8005d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d86:	4a1b      	ldr	r2, [pc, #108]	; (8005df4 <HAL_UART_MspInit+0x98>)
 8005d88:	f043 0310 	orr.w	r3, r3, #16
 8005d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8005d8e:	4b19      	ldr	r3, [pc, #100]	; (8005df4 <HAL_UART_MspInit+0x98>)
 8005d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d92:	f003 0310 	and.w	r3, r3, #16
 8005d96:	60fb      	str	r3, [r7, #12]
 8005d98:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	613b      	str	r3, [r7, #16]
 8005d9e:	4b15      	ldr	r3, [pc, #84]	; (8005df4 <HAL_UART_MspInit+0x98>)
 8005da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da2:	4a14      	ldr	r2, [pc, #80]	; (8005df4 <HAL_UART_MspInit+0x98>)
 8005da4:	f043 0301 	orr.w	r3, r3, #1
 8005da8:	6313      	str	r3, [r2, #48]	; 0x30
 8005daa:	4b12      	ldr	r3, [pc, #72]	; (8005df4 <HAL_UART_MspInit+0x98>)
 8005dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dae:	f003 0301 	and.w	r3, r3, #1
 8005db2:	613b      	str	r3, [r7, #16]
 8005db4:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005db6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005dba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005dc8:	2307      	movs	r3, #7
 8005dca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dcc:	f107 0314 	add.w	r3, r7, #20
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	4809      	ldr	r0, [pc, #36]	; (8005df8 <HAL_UART_MspInit+0x9c>)
 8005dd4:	f004 feba 	bl	800ab4c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005dd8:	2200      	movs	r2, #0
 8005dda:	2100      	movs	r1, #0
 8005ddc:	2025      	movs	r0, #37	; 0x25
 8005dde:	f001 f890 	bl	8006f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005de2:	2025      	movs	r0, #37	; 0x25
 8005de4:	f001 f8a9 	bl	8006f3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005de8:	bf00      	nop
 8005dea:	3728      	adds	r7, #40	; 0x28
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	40011000 	.word	0x40011000
 8005df4:	40023800 	.word	0x40023800
 8005df8:	40020000 	.word	0x40020000

08005dfc <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a0a      	ldr	r2, [pc, #40]	; (8005e34 <HAL_UART_MspDeInit+0x38>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d10d      	bne.n	8005e2a <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8005e0e:	4b0a      	ldr	r3, [pc, #40]	; (8005e38 <HAL_UART_MspDeInit+0x3c>)
 8005e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e12:	4a09      	ldr	r2, [pc, #36]	; (8005e38 <HAL_UART_MspDeInit+0x3c>)
 8005e14:	f023 0310 	bic.w	r3, r3, #16
 8005e18:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8005e1a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005e1e:	4807      	ldr	r0, [pc, #28]	; (8005e3c <HAL_UART_MspDeInit+0x40>)
 8005e20:	f005 f830 	bl	800ae84 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8005e24:	2025      	movs	r0, #37	; 0x25
 8005e26:	f001 f896 	bl	8006f56 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8005e2a:	bf00      	nop
 8005e2c:	3708      	adds	r7, #8
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	40011000 	.word	0x40011000
 8005e38:	40023800 	.word	0x40023800
 8005e3c:	40020000 	.word	0x40020000

08005e40 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b086      	sub	sp, #24
 8005e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8005e46:	1d3b      	adds	r3, r7, #4
 8005e48:	2200      	movs	r2, #0
 8005e4a:	601a      	str	r2, [r3, #0]
 8005e4c:	605a      	str	r2, [r3, #4]
 8005e4e:	609a      	str	r2, [r3, #8]
 8005e50:	60da      	str	r2, [r3, #12]
 8005e52:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8005e54:	4b1c      	ldr	r3, [pc, #112]	; (8005ec8 <HAL_FSMC_MspInit+0x88>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d131      	bne.n	8005ec0 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8005e5c:	4b1a      	ldr	r3, [pc, #104]	; (8005ec8 <HAL_FSMC_MspInit+0x88>)
 8005e5e:	2201      	movs	r2, #1
 8005e60:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8005e62:	2300      	movs	r3, #0
 8005e64:	603b      	str	r3, [r7, #0]
 8005e66:	4b19      	ldr	r3, [pc, #100]	; (8005ecc <HAL_FSMC_MspInit+0x8c>)
 8005e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6a:	4a18      	ldr	r2, [pc, #96]	; (8005ecc <HAL_FSMC_MspInit+0x8c>)
 8005e6c:	f043 0301 	orr.w	r3, r3, #1
 8005e70:	6393      	str	r3, [r2, #56]	; 0x38
 8005e72:	4b16      	ldr	r3, [pc, #88]	; (8005ecc <HAL_FSMC_MspInit+0x8c>)
 8005e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	603b      	str	r3, [r7, #0]
 8005e7c:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8005e7e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8005e82:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e84:	2302      	movs	r3, #2
 8005e86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8005e90:	230c      	movs	r3, #12
 8005e92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005e94:	1d3b      	adds	r3, r7, #4
 8005e96:	4619      	mov	r1, r3
 8005e98:	480d      	ldr	r0, [pc, #52]	; (8005ed0 <HAL_FSMC_MspInit+0x90>)
 8005e9a:	f004 fe57 	bl	800ab4c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8005e9e:	f24e 73b3 	movw	r3, #59315	; 0xe7b3
 8005ea2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ea4:	2302      	movs	r3, #2
 8005ea6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005eac:	2303      	movs	r3, #3
 8005eae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8005eb0:	230c      	movs	r3, #12
 8005eb2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005eb4:	1d3b      	adds	r3, r7, #4
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	4806      	ldr	r0, [pc, #24]	; (8005ed4 <HAL_FSMC_MspInit+0x94>)
 8005eba:	f004 fe47 	bl	800ab4c <HAL_GPIO_Init>
 8005ebe:	e000      	b.n	8005ec2 <HAL_FSMC_MspInit+0x82>
    return;
 8005ec0:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8005ec2:	3718      	adds	r7, #24
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	20000978 	.word	0x20000978
 8005ecc:	40023800 	.word	0x40023800
 8005ed0:	40021000 	.word	0x40021000
 8005ed4:	40020c00 	.word	0x40020c00

08005ed8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8005ee0:	f7ff ffae 	bl	8005e40 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8005ee4:	bf00      	nop
 8005ee6:	3708      	adds	r7, #8
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <HAL_FSMC_MspDeInit>:

static uint32_t FSMC_DeInitialized = 0;

static void HAL_FSMC_MspDeInit(void){
 8005eec:	b580      	push	{r7, lr}
 8005eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspDeInit 0 */

  /* USER CODE END FSMC_MspDeInit 0 */
  if (FSMC_DeInitialized) {
 8005ef0:	4b0c      	ldr	r3, [pc, #48]	; (8005f24 <HAL_FSMC_MspDeInit+0x38>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d113      	bne.n	8005f20 <HAL_FSMC_MspDeInit+0x34>
    return;
  }
  FSMC_DeInitialized = 1;
 8005ef8:	4b0a      	ldr	r3, [pc, #40]	; (8005f24 <HAL_FSMC_MspDeInit+0x38>)
 8005efa:	2201      	movs	r2, #1
 8005efc:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_DISABLE();
 8005efe:	4b0a      	ldr	r3, [pc, #40]	; (8005f28 <HAL_FSMC_MspDeInit+0x3c>)
 8005f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f02:	4a09      	ldr	r2, [pc, #36]	; (8005f28 <HAL_FSMC_MspDeInit+0x3c>)
 8005f04:	f023 0301 	bic.w	r3, r3, #1
 8005f08:	6393      	str	r3, [r2, #56]	; 0x38
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8005f0a:	f64f 7180 	movw	r1, #65408	; 0xff80
 8005f0e:	4807      	ldr	r0, [pc, #28]	; (8005f2c <HAL_FSMC_MspDeInit+0x40>)
 8005f10:	f004 ffb8 	bl	800ae84 <HAL_GPIO_DeInit>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15);

  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8005f14:	f24e 71b3 	movw	r1, #59315	; 0xe7b3
 8005f18:	4805      	ldr	r0, [pc, #20]	; (8005f30 <HAL_FSMC_MspDeInit+0x44>)
 8005f1a:	f004 ffb3 	bl	800ae84 <HAL_GPIO_DeInit>
 8005f1e:	e000      	b.n	8005f22 <HAL_FSMC_MspDeInit+0x36>
    return;
 8005f20:	bf00      	nop
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7);

  /* USER CODE BEGIN FSMC_MspDeInit 1 */

  /* USER CODE END FSMC_MspDeInit 1 */
}
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	2000097c 	.word	0x2000097c
 8005f28:	40023800 	.word	0x40023800
 8005f2c:	40021000 	.word	0x40021000
 8005f30:	40020c00 	.word	0x40020c00

08005f34 <HAL_SRAM_MspDeInit>:

void HAL_SRAM_MspDeInit(SRAM_HandleTypeDef* hsram){
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspDeInit 0 */

  /* USER CODE END SRAM_MspDeInit 0 */
  HAL_FSMC_MspDeInit();
 8005f3c:	f7ff ffd6 	bl	8005eec <HAL_FSMC_MspDeInit>
  /* USER CODE BEGIN SRAM_MspDeInit 1 */

  /* USER CODE END SRAM_MspDeInit 1 */
}
 8005f40:	bf00      	nop
 8005f42:	3708      	adds	r7, #8
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005f4c:	e7fe      	b.n	8005f4c <NMI_Handler+0x4>

08005f4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005f4e:	b480      	push	{r7}
 8005f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005f52:	e7fe      	b.n	8005f52 <HardFault_Handler+0x4>

08005f54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005f54:	b480      	push	{r7}
 8005f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005f58:	e7fe      	b.n	8005f58 <MemManage_Handler+0x4>

08005f5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005f5a:	b480      	push	{r7}
 8005f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005f5e:	e7fe      	b.n	8005f5e <BusFault_Handler+0x4>

08005f60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005f60:	b480      	push	{r7}
 8005f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005f64:	e7fe      	b.n	8005f64 <UsageFault_Handler+0x4>

08005f66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005f66:	b480      	push	{r7}
 8005f68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005f6a:	bf00      	nop
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005f74:	b480      	push	{r7}
 8005f76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005f78:	bf00      	nop
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr

08005f82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005f82:	b480      	push	{r7}
 8005f84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005f86:	bf00      	nop
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005f94:	f000 fc5e 	bl	8006854 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005f98:	bf00      	nop
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8005fa0:	4802      	ldr	r0, [pc, #8]	; (8005fac <DMA1_Stream3_IRQHandler+0x10>)
 8005fa2:	f002 f89d 	bl	80080e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8005fa6:	bf00      	nop
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	20000478 	.word	0x20000478

08005fb0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8005fb4:	4802      	ldr	r0, [pc, #8]	; (8005fc0 <DMA1_Stream4_IRQHandler+0x10>)
 8005fb6:	f002 f893 	bl	80080e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8005fba:	bf00      	nop
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	20000418 	.word	0x20000418

08005fc4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005fc8:	4802      	ldr	r0, [pc, #8]	; (8005fd4 <I2C1_EV_IRQHandler+0x10>)
 8005fca:	f008 ff87 	bl	800eedc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8005fce:	bf00      	nop
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	200002bc 	.word	0x200002bc

08005fd8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005fdc:	4802      	ldr	r0, [pc, #8]	; (8005fe8 <I2C1_ER_IRQHandler+0x10>)
 8005fde:	f009 f8ee 	bl	800f1be <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8005fe2:	bf00      	nop
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	200002bc 	.word	0x200002bc

08005fec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005ff0:	4802      	ldr	r0, [pc, #8]	; (8005ffc <USART1_IRQHandler+0x10>)
 8005ff2:	f010 fe47 	bl	8016c84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005ff6:	bf00      	nop
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	200004d8 	.word	0x200004d8

08006000 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8006000:	b480      	push	{r7}
 8006002:	af00      	add	r7, sp, #0
}
 8006004:	bf00      	nop
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr

0800600e <_getpid>:

int _getpid(void)
{
 800600e:	b480      	push	{r7}
 8006010:	af00      	add	r7, sp, #0
	return 1;
 8006012:	2301      	movs	r3, #1
}
 8006014:	4618      	mov	r0, r3
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr

0800601e <_kill>:

int _kill(int pid, int sig)
{
 800601e:	b580      	push	{r7, lr}
 8006020:	b082      	sub	sp, #8
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
 8006026:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006028:	f013 fc44 	bl	80198b4 <__errno>
 800602c:	4603      	mov	r3, r0
 800602e:	2216      	movs	r2, #22
 8006030:	601a      	str	r2, [r3, #0]
	return -1;
 8006032:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006036:	4618      	mov	r0, r3
 8006038:	3708      	adds	r7, #8
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <_exit>:

void _exit (int status)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b082      	sub	sp, #8
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006046:	f04f 31ff 	mov.w	r1, #4294967295
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f7ff ffe7 	bl	800601e <_kill>
	while (1) {}		/* Make sure we hang here */
 8006050:	e7fe      	b.n	8006050 <_exit+0x12>

08006052 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006052:	b580      	push	{r7, lr}
 8006054:	b086      	sub	sp, #24
 8006056:	af00      	add	r7, sp, #0
 8006058:	60f8      	str	r0, [r7, #12]
 800605a:	60b9      	str	r1, [r7, #8]
 800605c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800605e:	2300      	movs	r3, #0
 8006060:	617b      	str	r3, [r7, #20]
 8006062:	e00a      	b.n	800607a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006064:	f3af 8000 	nop.w
 8006068:	4601      	mov	r1, r0
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	1c5a      	adds	r2, r3, #1
 800606e:	60ba      	str	r2, [r7, #8]
 8006070:	b2ca      	uxtb	r2, r1
 8006072:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	3301      	adds	r3, #1
 8006078:	617b      	str	r3, [r7, #20]
 800607a:	697a      	ldr	r2, [r7, #20]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	429a      	cmp	r2, r3
 8006080:	dbf0      	blt.n	8006064 <_read+0x12>
	}

return len;
 8006082:	687b      	ldr	r3, [r7, #4]
}
 8006084:	4618      	mov	r0, r3
 8006086:	3718      	adds	r7, #24
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b086      	sub	sp, #24
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006098:	2300      	movs	r3, #0
 800609a:	617b      	str	r3, [r7, #20]
 800609c:	e009      	b.n	80060b2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	1c5a      	adds	r2, r3, #1
 80060a2:	60ba      	str	r2, [r7, #8]
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	4618      	mov	r0, r3
 80060a8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	3301      	adds	r3, #1
 80060b0:	617b      	str	r3, [r7, #20]
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	dbf1      	blt.n	800609e <_write+0x12>
	}
	return len;
 80060ba:	687b      	ldr	r3, [r7, #4]
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3718      	adds	r7, #24
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <_close>:

int _close(int file)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
	return -1;
 80060cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80060ec:	605a      	str	r2, [r3, #4]
	return 0;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <_isatty>:

int _isatty(int file)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
	return 1;
 8006104:	2301      	movs	r3, #1
}
 8006106:	4618      	mov	r0, r3
 8006108:	370c      	adds	r7, #12
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr

08006112 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006112:	b480      	push	{r7}
 8006114:	b085      	sub	sp, #20
 8006116:	af00      	add	r7, sp, #0
 8006118:	60f8      	str	r0, [r7, #12]
 800611a:	60b9      	str	r1, [r7, #8]
 800611c:	607a      	str	r2, [r7, #4]
	return 0;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	3714      	adds	r7, #20
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <_open>:

int _open(char *path, int flags, ...)
{
 800612c:	b40e      	push	{r1, r2, r3}
 800612e:	b480      	push	{r7}
 8006130:	b082      	sub	sp, #8
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8006136:	f04f 33ff 	mov.w	r3, #4294967295
}
 800613a:	4618      	mov	r0, r3
 800613c:	3708      	adds	r7, #8
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	b003      	add	sp, #12
 8006146:	4770      	bx	lr

08006148 <_wait>:

int _wait(int *status)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
	errno = ECHILD;
 8006150:	f013 fbb0 	bl	80198b4 <__errno>
 8006154:	4603      	mov	r3, r0
 8006156:	220a      	movs	r2, #10
 8006158:	601a      	str	r2, [r3, #0]
	return -1;
 800615a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800615e:	4618      	mov	r0, r3
 8006160:	3708      	adds	r7, #8
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <_unlink>:

int _unlink(char *name)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b082      	sub	sp, #8
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
	errno = ENOENT;
 800616e:	f013 fba1 	bl	80198b4 <__errno>
 8006172:	4603      	mov	r3, r0
 8006174:	2202      	movs	r2, #2
 8006176:	601a      	str	r2, [r3, #0]
	return -1;
 8006178:	f04f 33ff 	mov.w	r3, #4294967295
}
 800617c:	4618      	mov	r0, r3
 800617e:	3708      	adds	r7, #8
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <_times>:

int _times(struct tms *buf)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
	return -1;
 800618c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006190:	4618      	mov	r0, r3
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <_stat>:

int _stat(char *file, struct stat *st)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80061ac:	605a      	str	r2, [r3, #4]
	return 0;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <_link>:

int _link(char *old, char *new)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
	errno = EMLINK;
 80061c6:	f013 fb75 	bl	80198b4 <__errno>
 80061ca:	4603      	mov	r3, r0
 80061cc:	221f      	movs	r2, #31
 80061ce:	601a      	str	r2, [r3, #0]
	return -1;
 80061d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3708      	adds	r7, #8
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <_fork>:

int _fork(void)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	af00      	add	r7, sp, #0
	errno = EAGAIN;
 80061e0:	f013 fb68 	bl	80198b4 <__errno>
 80061e4:	4603      	mov	r3, r0
 80061e6:	220b      	movs	r2, #11
 80061e8:	601a      	str	r2, [r3, #0]
	return -1;
 80061ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <_execve>:

int _execve(char *name, char **argv, char **env)
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b084      	sub	sp, #16
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	60f8      	str	r0, [r7, #12]
 80061fa:	60b9      	str	r1, [r7, #8]
 80061fc:	607a      	str	r2, [r7, #4]
	errno = ENOMEM;
 80061fe:	f013 fb59 	bl	80198b4 <__errno>
 8006202:	4603      	mov	r3, r0
 8006204:	220c      	movs	r2, #12
 8006206:	601a      	str	r2, [r3, #0]
	return -1;
 8006208:	f04f 33ff 	mov.w	r3, #4294967295
}
 800620c:	4618      	mov	r0, r3
 800620e:	3710      	adds	r7, #16
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b086      	sub	sp, #24
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800621c:	4a14      	ldr	r2, [pc, #80]	; (8006270 <_sbrk+0x5c>)
 800621e:	4b15      	ldr	r3, [pc, #84]	; (8006274 <_sbrk+0x60>)
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006228:	4b13      	ldr	r3, [pc, #76]	; (8006278 <_sbrk+0x64>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d102      	bne.n	8006236 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006230:	4b11      	ldr	r3, [pc, #68]	; (8006278 <_sbrk+0x64>)
 8006232:	4a12      	ldr	r2, [pc, #72]	; (800627c <_sbrk+0x68>)
 8006234:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006236:	4b10      	ldr	r3, [pc, #64]	; (8006278 <_sbrk+0x64>)
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4413      	add	r3, r2
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	429a      	cmp	r2, r3
 8006242:	d207      	bcs.n	8006254 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006244:	f013 fb36 	bl	80198b4 <__errno>
 8006248:	4603      	mov	r3, r0
 800624a:	220c      	movs	r2, #12
 800624c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800624e:	f04f 33ff 	mov.w	r3, #4294967295
 8006252:	e009      	b.n	8006268 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006254:	4b08      	ldr	r3, [pc, #32]	; (8006278 <_sbrk+0x64>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800625a:	4b07      	ldr	r3, [pc, #28]	; (8006278 <_sbrk+0x64>)
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4413      	add	r3, r2
 8006262:	4a05      	ldr	r2, [pc, #20]	; (8006278 <_sbrk+0x64>)
 8006264:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006266:	68fb      	ldr	r3, [r7, #12]
}
 8006268:	4618      	mov	r0, r3
 800626a:	3718      	adds	r7, #24
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	20020000 	.word	0x20020000
 8006274:	00000400 	.word	0x00000400
 8006278:	20000984 	.word	0x20000984
 800627c:	20000dd0 	.word	0x20000dd0

08006280 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006280:	b480      	push	{r7}
 8006282:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006284:	4b06      	ldr	r3, [pc, #24]	; (80062a0 <SystemInit+0x20>)
 8006286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800628a:	4a05      	ldr	r2, [pc, #20]	; (80062a0 <SystemInit+0x20>)
 800628c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006290:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006294:	bf00      	nop
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	e000ed00 	.word	0xe000ed00

080062a4 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b087      	sub	sp, #28
 80062a8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80062aa:	2300      	movs	r3, #0
 80062ac:	613b      	str	r3, [r7, #16]
 80062ae:	2300      	movs	r3, #0
 80062b0:	617b      	str	r3, [r7, #20]
 80062b2:	2302      	movs	r3, #2
 80062b4:	60fb      	str	r3, [r7, #12]
 80062b6:	2300      	movs	r3, #0
 80062b8:	60bb      	str	r3, [r7, #8]
 80062ba:	2302      	movs	r3, #2
 80062bc:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80062be:	4b34      	ldr	r3, [pc, #208]	; (8006390 <SystemCoreClockUpdate+0xec>)
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	f003 030c 	and.w	r3, r3, #12
 80062c6:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	2b08      	cmp	r3, #8
 80062cc:	d011      	beq.n	80062f2 <SystemCoreClockUpdate+0x4e>
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	2b08      	cmp	r3, #8
 80062d2:	d844      	bhi.n	800635e <SystemCoreClockUpdate+0xba>
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d003      	beq.n	80062e2 <SystemCoreClockUpdate+0x3e>
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	2b04      	cmp	r3, #4
 80062de:	d004      	beq.n	80062ea <SystemCoreClockUpdate+0x46>
 80062e0:	e03d      	b.n	800635e <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80062e2:	4b2c      	ldr	r3, [pc, #176]	; (8006394 <SystemCoreClockUpdate+0xf0>)
 80062e4:	4a2c      	ldr	r2, [pc, #176]	; (8006398 <SystemCoreClockUpdate+0xf4>)
 80062e6:	601a      	str	r2, [r3, #0]
      break;
 80062e8:	e03d      	b.n	8006366 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80062ea:	4b2a      	ldr	r3, [pc, #168]	; (8006394 <SystemCoreClockUpdate+0xf0>)
 80062ec:	4a2b      	ldr	r2, [pc, #172]	; (800639c <SystemCoreClockUpdate+0xf8>)
 80062ee:	601a      	str	r2, [r3, #0]
      break;
 80062f0:	e039      	b.n	8006366 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80062f2:	4b27      	ldr	r3, [pc, #156]	; (8006390 <SystemCoreClockUpdate+0xec>)
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	0d9b      	lsrs	r3, r3, #22
 80062f8:	f003 0301 	and.w	r3, r3, #1
 80062fc:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80062fe:	4b24      	ldr	r3, [pc, #144]	; (8006390 <SystemCoreClockUpdate+0xec>)
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006306:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00c      	beq.n	8006328 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800630e:	4a23      	ldr	r2, [pc, #140]	; (800639c <SystemCoreClockUpdate+0xf8>)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	fbb2 f3f3 	udiv	r3, r2, r3
 8006316:	4a1e      	ldr	r2, [pc, #120]	; (8006390 <SystemCoreClockUpdate+0xec>)
 8006318:	6852      	ldr	r2, [r2, #4]
 800631a:	0992      	lsrs	r2, r2, #6
 800631c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006320:	fb02 f303 	mul.w	r3, r2, r3
 8006324:	617b      	str	r3, [r7, #20]
 8006326:	e00b      	b.n	8006340 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8006328:	4a1b      	ldr	r2, [pc, #108]	; (8006398 <SystemCoreClockUpdate+0xf4>)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006330:	4a17      	ldr	r2, [pc, #92]	; (8006390 <SystemCoreClockUpdate+0xec>)
 8006332:	6852      	ldr	r2, [r2, #4]
 8006334:	0992      	lsrs	r2, r2, #6
 8006336:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800633a:	fb02 f303 	mul.w	r3, r2, r3
 800633e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8006340:	4b13      	ldr	r3, [pc, #76]	; (8006390 <SystemCoreClockUpdate+0xec>)
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	0c1b      	lsrs	r3, r3, #16
 8006346:	f003 0303 	and.w	r3, r3, #3
 800634a:	3301      	adds	r3, #1
 800634c:	005b      	lsls	r3, r3, #1
 800634e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8006350:	697a      	ldr	r2, [r7, #20]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	fbb2 f3f3 	udiv	r3, r2, r3
 8006358:	4a0e      	ldr	r2, [pc, #56]	; (8006394 <SystemCoreClockUpdate+0xf0>)
 800635a:	6013      	str	r3, [r2, #0]
      break;
 800635c:	e003      	b.n	8006366 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 800635e:	4b0d      	ldr	r3, [pc, #52]	; (8006394 <SystemCoreClockUpdate+0xf0>)
 8006360:	4a0d      	ldr	r2, [pc, #52]	; (8006398 <SystemCoreClockUpdate+0xf4>)
 8006362:	601a      	str	r2, [r3, #0]
      break;
 8006364:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8006366:	4b0a      	ldr	r3, [pc, #40]	; (8006390 <SystemCoreClockUpdate+0xec>)
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	091b      	lsrs	r3, r3, #4
 800636c:	f003 030f 	and.w	r3, r3, #15
 8006370:	4a0b      	ldr	r2, [pc, #44]	; (80063a0 <SystemCoreClockUpdate+0xfc>)
 8006372:	5cd3      	ldrb	r3, [r2, r3]
 8006374:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8006376:	4b07      	ldr	r3, [pc, #28]	; (8006394 <SystemCoreClockUpdate+0xf0>)
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	fa22 f303 	lsr.w	r3, r2, r3
 8006380:	4a04      	ldr	r2, [pc, #16]	; (8006394 <SystemCoreClockUpdate+0xf0>)
 8006382:	6013      	str	r3, [r2, #0]
}
 8006384:	bf00      	nop
 8006386:	371c      	adds	r7, #28
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr
 8006390:	40023800 	.word	0x40023800
 8006394:	20000058 	.word	0x20000058
 8006398:	00f42400 	.word	0x00f42400
 800639c:	007a1200 	.word	0x007a1200
 80063a0:	08051f58 	.word	0x08051f58

080063a4 <SPI1_Send>:
//w25_info_t  w25_info;
uint8_t rx_buf[1025];
uint8_t tx_buf[10];

void SPI1_Send (uint8_t *dt, uint16_t cnt)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	460b      	mov	r3, r1
 80063ae:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit (&W25QXX_SPI, dt, cnt, 5000);
 80063b0:	887a      	ldrh	r2, [r7, #2]
 80063b2:	f241 3388 	movw	r3, #5000	; 0x1388
 80063b6:	6879      	ldr	r1, [r7, #4]
 80063b8:	4803      	ldr	r0, [pc, #12]	; (80063c8 <SPI1_Send+0x24>)
 80063ba:	f00c fc14 	bl	8012be6 <HAL_SPI_Transmit>
}
 80063be:	bf00      	nop
 80063c0:	3708      	adds	r7, #8
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	20000310 	.word	0x20000310

080063cc <SPI1_Recv>:

void SPI1_Recv (uint8_t *dt, uint16_t cnt)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	460b      	mov	r3, r1
 80063d6:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive (&W25QXX_SPI, dt, cnt, 5000);
 80063d8:	887a      	ldrh	r2, [r7, #2]
 80063da:	f241 3388 	movw	r3, #5000	; 0x1388
 80063de:	6879      	ldr	r1, [r7, #4]
 80063e0:	4803      	ldr	r0, [pc, #12]	; (80063f0 <SPI1_Recv+0x24>)
 80063e2:	f00c fd3c 	bl	8012e5e <HAL_SPI_Receive>
}
 80063e6:	bf00      	nop
 80063e8:	3708      	adds	r7, #8
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	20000310 	.word	0x20000310

080063f4 <W25QXX_Reset>:

void W25QXX_Reset (void)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	af00      	add	r7, sp, #0
	cs_set();
 80063f8:	2200      	movs	r2, #0
 80063fa:	2101      	movs	r1, #1
 80063fc:	4809      	ldr	r0, [pc, #36]	; (8006424 <W25QXX_Reset+0x30>)
 80063fe:	f004 fe55 	bl	800b0ac <HAL_GPIO_WritePin>
	tx_buf[0] = W25QXX_ENABLE_RESET;
 8006402:	4b09      	ldr	r3, [pc, #36]	; (8006428 <W25QXX_Reset+0x34>)
 8006404:	2266      	movs	r2, #102	; 0x66
 8006406:	701a      	strb	r2, [r3, #0]
	tx_buf[1] = W25QXX_RESET;
 8006408:	4b07      	ldr	r3, [pc, #28]	; (8006428 <W25QXX_Reset+0x34>)
 800640a:	2299      	movs	r2, #153	; 0x99
 800640c:	705a      	strb	r2, [r3, #1]
	SPI1_Send(tx_buf, 2);
 800640e:	2102      	movs	r1, #2
 8006410:	4805      	ldr	r0, [pc, #20]	; (8006428 <W25QXX_Reset+0x34>)
 8006412:	f7ff ffc7 	bl	80063a4 <SPI1_Send>
	cs_reset();
 8006416:	2201      	movs	r2, #1
 8006418:	2101      	movs	r1, #1
 800641a:	4802      	ldr	r0, [pc, #8]	; (8006424 <W25QXX_Reset+0x30>)
 800641c:	f004 fe46 	bl	800b0ac <HAL_GPIO_WritePin>
}
 8006420:	bf00      	nop
 8006422:	bd80      	pop	{r7, pc}
 8006424:	40020400 	.word	0x40020400
 8006428:	20000d8c 	.word	0x20000d8c

0800642c <W25QXX_Read_Data>:

void W25QXX_Read_Data(uint32_t addr, uint8_t* data, uint32_t sz)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	607a      	str	r2, [r7, #4]
	cs_set();
 8006438:	2200      	movs	r2, #0
 800643a:	2101      	movs	r1, #1
 800643c:	4813      	ldr	r0, [pc, #76]	; (800648c <W25QXX_Read_Data+0x60>)
 800643e:	f004 fe35 	bl	800b0ac <HAL_GPIO_WritePin>
	tx_buf[0] = W25QXX_READ;
 8006442:	4b13      	ldr	r3, [pc, #76]	; (8006490 <W25QXX_Read_Data+0x64>)
 8006444:	2203      	movs	r2, #3
 8006446:	701a      	strb	r2, [r3, #0]
	tx_buf[1] = (addr >> 16) & 0xFF;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	0c1b      	lsrs	r3, r3, #16
 800644c:	b2da      	uxtb	r2, r3
 800644e:	4b10      	ldr	r3, [pc, #64]	; (8006490 <W25QXX_Read_Data+0x64>)
 8006450:	705a      	strb	r2, [r3, #1]
	tx_buf[2] = (addr >> 8) & 0xFF;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	0a1b      	lsrs	r3, r3, #8
 8006456:	b2da      	uxtb	r2, r3
 8006458:	4b0d      	ldr	r3, [pc, #52]	; (8006490 <W25QXX_Read_Data+0x64>)
 800645a:	709a      	strb	r2, [r3, #2]
	tx_buf[3] = addr & 0xFF;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	b2da      	uxtb	r2, r3
 8006460:	4b0b      	ldr	r3, [pc, #44]	; (8006490 <W25QXX_Read_Data+0x64>)
 8006462:	70da      	strb	r2, [r3, #3]
	SPI1_Send(tx_buf, 4);
 8006464:	2104      	movs	r1, #4
 8006466:	480a      	ldr	r0, [pc, #40]	; (8006490 <W25QXX_Read_Data+0x64>)
 8006468:	f7ff ff9c 	bl	80063a4 <SPI1_Send>
	SPI1_Recv(data, sz);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	b29b      	uxth	r3, r3
 8006470:	4619      	mov	r1, r3
 8006472:	68b8      	ldr	r0, [r7, #8]
 8006474:	f7ff ffaa 	bl	80063cc <SPI1_Recv>
	cs_reset();
 8006478:	2201      	movs	r2, #1
 800647a:	2101      	movs	r1, #1
 800647c:	4803      	ldr	r0, [pc, #12]	; (800648c <W25QXX_Read_Data+0x60>)
 800647e:	f004 fe15 	bl	800b0ac <HAL_GPIO_WritePin>
}
 8006482:	bf00      	nop
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	40020400 	.word	0x40020400
 8006490:	20000d8c 	.word	0x20000d8c

08006494 <W25QXX_Read_ID>:

uint32_t W25QXX_Read_ID(void)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
	uint8_t dt[4];
	tx_buf[0] = W25QXX_GET_JEDEC_ID;
 800649a:	4b11      	ldr	r3, [pc, #68]	; (80064e0 <W25QXX_Read_ID+0x4c>)
 800649c:	229f      	movs	r2, #159	; 0x9f
 800649e:	701a      	strb	r2, [r3, #0]
	cs_set();
 80064a0:	2200      	movs	r2, #0
 80064a2:	2101      	movs	r1, #1
 80064a4:	480f      	ldr	r0, [pc, #60]	; (80064e4 <W25QXX_Read_ID+0x50>)
 80064a6:	f004 fe01 	bl	800b0ac <HAL_GPIO_WritePin>
	SPI1_Send(tx_buf, 1);
 80064aa:	2101      	movs	r1, #1
 80064ac:	480c      	ldr	r0, [pc, #48]	; (80064e0 <W25QXX_Read_ID+0x4c>)
 80064ae:	f7ff ff79 	bl	80063a4 <SPI1_Send>
	SPI1_Recv(dt,3);
 80064b2:	1d3b      	adds	r3, r7, #4
 80064b4:	2103      	movs	r1, #3
 80064b6:	4618      	mov	r0, r3
 80064b8:	f7ff ff88 	bl	80063cc <SPI1_Recv>
	cs_reset();
 80064bc:	2201      	movs	r2, #1
 80064be:	2101      	movs	r1, #1
 80064c0:	4808      	ldr	r0, [pc, #32]	; (80064e4 <W25QXX_Read_ID+0x50>)
 80064c2:	f004 fdf3 	bl	800b0ac <HAL_GPIO_WritePin>
	return (dt[0] << 16) | (dt[1] << 8) | dt[2];
 80064c6:	793b      	ldrb	r3, [r7, #4]
 80064c8:	041a      	lsls	r2, r3, #16
 80064ca:	797b      	ldrb	r3, [r7, #5]
 80064cc:	021b      	lsls	r3, r3, #8
 80064ce:	4313      	orrs	r3, r2
 80064d0:	79ba      	ldrb	r2, [r7, #6]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	bf00      	nop
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3708      	adds	r7, #8
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	20000d8c 	.word	0x20000d8c
 80064e4:	40020400 	.word	0x40020400

080064e8 <W25QXX_Init>:

void W25QXX_Init(void)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 80064ec:	2064      	movs	r0, #100	; 0x64
 80064ee:	f000 fa11 	bl	8006914 <HAL_Delay>
	W25QXX_Reset();
 80064f2:	f7ff ff7f 	bl	80063f4 <W25QXX_Reset>
	HAL_Delay(100);
 80064f6:	2064      	movs	r0, #100	; 0x64
 80064f8:	f000 fa0c 	bl	8006914 <HAL_Delay>
//		HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
//		sprintf(str1,"Block Count: %u\r\n",(unsigned int)w25_info.BlockCount);
//		HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
//		sprintf(str1,"Capacity: %u KB\r\n",(unsigned int)w25_info.NumKB);
//		HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
}
 80064fc:	bf00      	nop
 80064fe:	bd80      	pop	{r7, pc}

08006500 <remap>:
#include "xpt2046.h"

extern SPI_HandleTypeDef XPT2046_SPI;

inline static float remap(float x, float in_min, float in_max, float out_min, float out_max)
{
 8006500:	b480      	push	{r7}
 8006502:	b087      	sub	sp, #28
 8006504:	af00      	add	r7, sp, #0
 8006506:	ed87 0a05 	vstr	s0, [r7, #20]
 800650a:	edc7 0a04 	vstr	s1, [r7, #16]
 800650e:	ed87 1a03 	vstr	s2, [r7, #12]
 8006512:	edc7 1a02 	vstr	s3, [r7, #8]
 8006516:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800651a:	ed97 7a05 	vldr	s14, [r7, #20]
 800651e:	edd7 7a04 	vldr	s15, [r7, #16]
 8006522:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006526:	edd7 6a01 	vldr	s13, [r7, #4]
 800652a:	edd7 7a02 	vldr	s15, [r7, #8]
 800652e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006532:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006536:	ed97 7a03 	vldr	s14, [r7, #12]
 800653a:	edd7 7a04 	vldr	s15, [r7, #16]
 800653e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006546:	edd7 7a02 	vldr	s15, [r7, #8]
 800654a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800654e:	eeb0 0a67 	vmov.f32	s0, s15
 8006552:	371c      	adds	r7, #28
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <XPT2046_Init>:

void XPT2046_Init(void)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	af00      	add	r7, sp, #0
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&XPT2046_SPI, (uint8_t*)XPT2046_ADDR_I, 1, 1000);
 8006560:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006564:	2201      	movs	r2, #1
 8006566:	2180      	movs	r1, #128	; 0x80
 8006568:	4809      	ldr	r0, [pc, #36]	; (8006590 <XPT2046_Init+0x34>)
 800656a:	f00c fb3c 	bl	8012be6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&XPT2046_SPI, 0x00, 1, 1000);
 800656e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006572:	2201      	movs	r2, #1
 8006574:	2100      	movs	r1, #0
 8006576:	4806      	ldr	r0, [pc, #24]	; (8006590 <XPT2046_Init+0x34>)
 8006578:	f00c fb35 	bl	8012be6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&XPT2046_SPI, 0x00, 1, 1000);
 800657c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006580:	2201      	movs	r2, #1
 8006582:	2100      	movs	r1, #0
 8006584:	4802      	ldr	r0, [pc, #8]	; (8006590 <XPT2046_Init+0x34>)
 8006586:	f00c fb2e 	bl	8012be6 <HAL_SPI_Transmit>
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_SET);
}
 800658a:	bf00      	nop
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	20000368 	.word	0x20000368

08006594 <getRaw>:

uint16_t getRaw(uint8_t address)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b086      	sub	sp, #24
 8006598:	af02      	add	r7, sp, #8
 800659a:	4603      	mov	r3, r0
 800659c:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	uint16_t LSB, MSB;
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_RESET);
	HAL_Delay(1);
 800659e:	2001      	movs	r0, #1
 80065a0:	f000 f9b8 	bl	8006914 <HAL_Delay>
	HAL_SPI_Transmit(&XPT2046_SPI, &address, 1, 1000);
 80065a4:	1df9      	adds	r1, r7, #7
 80065a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80065aa:	2201      	movs	r2, #1
 80065ac:	4814      	ldr	r0, [pc, #80]	; (8006600 <getRaw+0x6c>)
 80065ae:	f00c fb1a 	bl	8012be6 <HAL_SPI_Transmit>
	address = 0x00;
 80065b2:	2300      	movs	r3, #0
 80065b4:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&XPT2046_SPI, &address, &data, sizeof(data), 1000);   
 80065b6:	f107 020b 	add.w	r2, r7, #11
 80065ba:	1df9      	adds	r1, r7, #7
 80065bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80065c0:	9300      	str	r3, [sp, #0]
 80065c2:	2301      	movs	r3, #1
 80065c4:	480e      	ldr	r0, [pc, #56]	; (8006600 <getRaw+0x6c>)
 80065c6:	f00c fd5b 	bl	8013080 <HAL_SPI_TransmitReceive>
	MSB = data;   
 80065ca:	7afb      	ldrb	r3, [r7, #11]
 80065cc:	81fb      	strh	r3, [r7, #14]
	address = 0x00;
 80065ce:	2300      	movs	r3, #0
 80065d0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&XPT2046_SPI, &address, &data, sizeof(data), 1000);   
 80065d2:	f107 020b 	add.w	r2, r7, #11
 80065d6:	1df9      	adds	r1, r7, #7
 80065d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80065dc:	9300      	str	r3, [sp, #0]
 80065de:	2301      	movs	r3, #1
 80065e0:	4807      	ldr	r0, [pc, #28]	; (8006600 <getRaw+0x6c>)
 80065e2:	f00c fd4d 	bl	8013080 <HAL_SPI_TransmitReceive>
	LSB = data;
 80065e6:	7afb      	ldrb	r3, [r7, #11]
 80065e8:	81bb      	strh	r3, [r7, #12]
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_SET);
	return ((MSB << 8) | (LSB)) >> 3;
 80065ea:	89fb      	ldrh	r3, [r7, #14]
 80065ec:	021a      	lsls	r2, r3, #8
 80065ee:	89bb      	ldrh	r3, [r7, #12]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	10db      	asrs	r3, r3, #3
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	bf00      	nop
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3710      	adds	r7, #16
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	20000368 	.word	0x20000368

08006604 <X>:

inline static uint16_t X(void)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
	uint16_t x;
	x = (uint16_t) remap(getRaw(XPT2046_ADDR_X), RAW_MIN_X, RAW_MAX_X, OUT_MIN_X, OUT_MAX_X);
 800660a:	20d0      	movs	r0, #208	; 0xd0
 800660c:	f7ff ffc2 	bl	8006594 <getRaw>
 8006610:	4603      	mov	r3, r0
 8006612:	ee07 3a90 	vmov	s15, r3
 8006616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800661a:	ed9f 2a13 	vldr	s4, [pc, #76]	; 8006668 <X+0x64>
 800661e:	eddf 1a13 	vldr	s3, [pc, #76]	; 800666c <X+0x68>
 8006622:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8006670 <X+0x6c>
 8006626:	eddf 0a13 	vldr	s1, [pc, #76]	; 8006674 <X+0x70>
 800662a:	eeb0 0a67 	vmov.f32	s0, s15
 800662e:	f7ff ff67 	bl	8006500 <remap>
 8006632:	eef0 7a40 	vmov.f32	s15, s0
 8006636:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800663a:	ee17 3a90 	vmov	r3, s15
 800663e:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_X) x = OUT_MAX_X - x;
 8006640:	88fb      	ldrh	r3, [r7, #6]
 8006642:	f5c3 7347 	rsb	r3, r3, #796	; 0x31c
 8006646:	3303      	adds	r3, #3
 8006648:	80fb      	strh	r3, [r7, #6]
	if (x > OUT_MIN_X && x < OUT_MAX_X) return x;
 800664a:	88fb      	ldrh	r3, [r7, #6]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d006      	beq.n	800665e <X+0x5a>
 8006650:	88fb      	ldrh	r3, [r7, #6]
 8006652:	f240 321e 	movw	r2, #798	; 0x31e
 8006656:	4293      	cmp	r3, r2
 8006658:	d801      	bhi.n	800665e <X+0x5a>
 800665a:	88fb      	ldrh	r3, [r7, #6]
 800665c:	e000      	b.n	8006660 <X+0x5c>
	else return 0;
 800665e:	2300      	movs	r3, #0
}
 8006660:	4618      	mov	r0, r3
 8006662:	3708      	adds	r7, #8
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}
 8006668:	4447c000 	.word	0x4447c000
 800666c:	00000000 	.word	0x00000000
 8006670:	457a0000 	.word	0x457a0000
 8006674:	43480000 	.word	0x43480000

08006678 <Y>:

inline static uint16_t Y(void)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
	uint16_t y;
	y = (uint16_t) remap(getRaw(XPT2046_ADDR_Y), RAW_MIN_Y, RAW_MAX_Y, OUT_MIN_Y, OUT_MAX_Y);
 800667e:	2090      	movs	r0, #144	; 0x90
 8006680:	f7ff ff88 	bl	8006594 <getRaw>
 8006684:	4603      	mov	r3, r0
 8006686:	ee07 3a90 	vmov	s15, r3
 800668a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800668e:	ed9f 2a10 	vldr	s4, [pc, #64]	; 80066d0 <Y+0x58>
 8006692:	eddf 1a10 	vldr	s3, [pc, #64]	; 80066d4 <Y+0x5c>
 8006696:	ed9f 1a10 	vldr	s2, [pc, #64]	; 80066d8 <Y+0x60>
 800669a:	eddf 0a10 	vldr	s1, [pc, #64]	; 80066dc <Y+0x64>
 800669e:	eeb0 0a67 	vmov.f32	s0, s15
 80066a2:	f7ff ff2d 	bl	8006500 <remap>
 80066a6:	eef0 7a40 	vmov.f32	s15, s0
 80066aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066ae:	ee17 3a90 	vmov	r3, s15
 80066b2:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_Y) y = OUT_MAX_Y - y;
	if (y > OUT_MIN_Y && y < OUT_MAX_Y) return y;
 80066b4:	88fb      	ldrh	r3, [r7, #6]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d005      	beq.n	80066c6 <Y+0x4e>
 80066ba:	88fb      	ldrh	r3, [r7, #6]
 80066bc:	f5b3 7fef 	cmp.w	r3, #478	; 0x1de
 80066c0:	d801      	bhi.n	80066c6 <Y+0x4e>
 80066c2:	88fb      	ldrh	r3, [r7, #6]
 80066c4:	e000      	b.n	80066c8 <Y+0x50>
	else return 0;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3708      	adds	r7, #8
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	43ef8000 	.word	0x43ef8000
 80066d4:	00000000 	.word	0x00000000
 80066d8:	456d8000 	.word	0x456d8000
 80066dc:	43480000 	.word	0x43480000

080066e0 <getX>:

uint16_t getX(void)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
	if (XPT2046_ACCURACY)
	{
		uint16_t x[2] = { 1, 2 };
 80066e6:	4b0a      	ldr	r3, [pc, #40]	; (8006710 <getX+0x30>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	607b      	str	r3, [r7, #4]
		while (x[0] != x[1])
 80066ec:	e007      	b.n	80066fe <getX+0x1e>
		{
			if (XPT2046_REVERSED) { x[0] = Y(); x[1] = Y(); }
			else { x[0] = X(); x[1] = X(); }
 80066ee:	f7ff ff89 	bl	8006604 <X>
 80066f2:	4603      	mov	r3, r0
 80066f4:	80bb      	strh	r3, [r7, #4]
 80066f6:	f7ff ff85 	bl	8006604 <X>
 80066fa:	4603      	mov	r3, r0
 80066fc:	80fb      	strh	r3, [r7, #6]
		while (x[0] != x[1])
 80066fe:	88ba      	ldrh	r2, [r7, #4]
 8006700:	88fb      	ldrh	r3, [r7, #6]
 8006702:	429a      	cmp	r2, r3
 8006704:	d1f3      	bne.n	80066ee <getX+0xe>
		}
		return x[0];
 8006706:	88bb      	ldrh	r3, [r7, #4]
	} 
	else if (XPT2046_REVERSED) return Y(); else return X();
}
 8006708:	4618      	mov	r0, r3
 800670a:	3708      	adds	r7, #8
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	08051f70 	.word	0x08051f70

08006714 <getY>:

uint16_t getY(void)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
	if (XPT2046_ACCURACY)
	{
		uint16_t y[2] = { 1, 2 };
 800671a:	4b0a      	ldr	r3, [pc, #40]	; (8006744 <getY+0x30>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	607b      	str	r3, [r7, #4]
		while (y[0] != y[1])
 8006720:	e007      	b.n	8006732 <getY+0x1e>
		{
			if (XPT2046_REVERSED) { y[0] = X(); y[1] = X(); }
			else { y[0] = Y(); y[1] = Y(); }
 8006722:	f7ff ffa9 	bl	8006678 <Y>
 8006726:	4603      	mov	r3, r0
 8006728:	80bb      	strh	r3, [r7, #4]
 800672a:	f7ff ffa5 	bl	8006678 <Y>
 800672e:	4603      	mov	r3, r0
 8006730:	80fb      	strh	r3, [r7, #6]
		while (y[0] != y[1])
 8006732:	88ba      	ldrh	r2, [r7, #4]
 8006734:	88fb      	ldrh	r3, [r7, #6]
 8006736:	429a      	cmp	r2, r3
 8006738:	d1f3      	bne.n	8006722 <getY+0xe>
		}
		return y[0];
 800673a:	88bb      	ldrh	r3, [r7, #4]
	}
	else if (XPT2046_REVERSED) return X(); else return Y();
}
 800673c:	4618      	mov	r0, r3
 800673e:	3708      	adds	r7, #8
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	08051f70 	.word	0x08051f70

08006748 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800674c:	4b0e      	ldr	r3, [pc, #56]	; (8006788 <HAL_Init+0x40>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a0d      	ldr	r2, [pc, #52]	; (8006788 <HAL_Init+0x40>)
 8006752:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006756:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006758:	4b0b      	ldr	r3, [pc, #44]	; (8006788 <HAL_Init+0x40>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a0a      	ldr	r2, [pc, #40]	; (8006788 <HAL_Init+0x40>)
 800675e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006762:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006764:	4b08      	ldr	r3, [pc, #32]	; (8006788 <HAL_Init+0x40>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a07      	ldr	r2, [pc, #28]	; (8006788 <HAL_Init+0x40>)
 800676a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800676e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006770:	2003      	movs	r0, #3
 8006772:	f000 fbbb 	bl	8006eec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006776:	2000      	movs	r0, #0
 8006778:	f000 f83b 	bl	80067f2 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800677c:	f7ff f856 	bl	800582c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	40023c00 	.word	0x40023c00

0800678c <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8006790:	4b13      	ldr	r3, [pc, #76]	; (80067e0 <HAL_DeInit+0x54>)
 8006792:	f04f 32ff 	mov.w	r2, #4294967295
 8006796:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8006798:	4b11      	ldr	r3, [pc, #68]	; (80067e0 <HAL_DeInit+0x54>)
 800679a:	2200      	movs	r2, #0
 800679c:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 800679e:	4b10      	ldr	r3, [pc, #64]	; (80067e0 <HAL_DeInit+0x54>)
 80067a0:	f04f 32ff 	mov.w	r2, #4294967295
 80067a4:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 80067a6:	4b0e      	ldr	r3, [pc, #56]	; (80067e0 <HAL_DeInit+0x54>)
 80067a8:	2200      	movs	r2, #0
 80067aa:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 80067ac:	4b0c      	ldr	r3, [pc, #48]	; (80067e0 <HAL_DeInit+0x54>)
 80067ae:	f04f 32ff 	mov.w	r2, #4294967295
 80067b2:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 80067b4:	4b0a      	ldr	r3, [pc, #40]	; (80067e0 <HAL_DeInit+0x54>)
 80067b6:	2200      	movs	r2, #0
 80067b8:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 80067ba:	4b09      	ldr	r3, [pc, #36]	; (80067e0 <HAL_DeInit+0x54>)
 80067bc:	f04f 32ff 	mov.w	r2, #4294967295
 80067c0:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 80067c2:	4b07      	ldr	r3, [pc, #28]	; (80067e0 <HAL_DeInit+0x54>)
 80067c4:	2200      	movs	r2, #0
 80067c6:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 80067c8:	4b05      	ldr	r3, [pc, #20]	; (80067e0 <HAL_DeInit+0x54>)
 80067ca:	f04f 32ff 	mov.w	r2, #4294967295
 80067ce:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 80067d0:	4b03      	ldr	r3, [pc, #12]	; (80067e0 <HAL_DeInit+0x54>)
 80067d2:	2200      	movs	r2, #0
 80067d4:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 80067d6:	f000 f805 	bl	80067e4 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	40023800 	.word	0x40023800

080067e4 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80067e4:	b480      	push	{r7}
 80067e6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 80067e8:	bf00      	nop
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr

080067f2 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b082      	sub	sp, #8
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80067fa:	4b13      	ldr	r3, [pc, #76]	; (8006848 <HAL_InitTick+0x56>)
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	4b13      	ldr	r3, [pc, #76]	; (800684c <HAL_InitTick+0x5a>)
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	4619      	mov	r1, r3
 8006804:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006808:	fbb3 f3f1 	udiv	r3, r3, r1
 800680c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006810:	4618      	mov	r0, r3
 8006812:	f000 fbb2 	bl	8006f7a <HAL_SYSTICK_Config>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d001      	beq.n	8006820 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	e00e      	b.n	800683e <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2b0f      	cmp	r3, #15
 8006824:	d80a      	bhi.n	800683c <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006826:	2200      	movs	r2, #0
 8006828:	6879      	ldr	r1, [r7, #4]
 800682a:	f04f 30ff 	mov.w	r0, #4294967295
 800682e:	f000 fb68 	bl	8006f02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006832:	4a07      	ldr	r2, [pc, #28]	; (8006850 <HAL_InitTick+0x5e>)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006838:	2300      	movs	r3, #0
 800683a:	e000      	b.n	800683e <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800683c:	2301      	movs	r3, #1
}
 800683e:	4618      	mov	r0, r3
 8006840:	3708      	adds	r7, #8
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	20000058 	.word	0x20000058
 800684c:	20000060 	.word	0x20000060
 8006850:	2000005c 	.word	0x2000005c

08006854 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006854:	b480      	push	{r7}
 8006856:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006858:	4b06      	ldr	r3, [pc, #24]	; (8006874 <HAL_IncTick+0x20>)
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	461a      	mov	r2, r3
 800685e:	4b06      	ldr	r3, [pc, #24]	; (8006878 <HAL_IncTick+0x24>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4413      	add	r3, r2
 8006864:	4a04      	ldr	r2, [pc, #16]	; (8006878 <HAL_IncTick+0x24>)
 8006866:	6013      	str	r3, [r2, #0]
}
 8006868:	bf00      	nop
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	20000060 	.word	0x20000060
 8006878:	20000d98 	.word	0x20000d98

0800687c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800687c:	b480      	push	{r7}
 800687e:	af00      	add	r7, sp, #0
  return uwTick;
 8006880:	4b03      	ldr	r3, [pc, #12]	; (8006890 <HAL_GetTick+0x14>)
 8006882:	681b      	ldr	r3, [r3, #0]
}
 8006884:	4618      	mov	r0, r3
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop
 8006890:	20000d98 	.word	0x20000d98

08006894 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8006894:	b480      	push	{r7}
 8006896:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8006898:	4b03      	ldr	r3, [pc, #12]	; (80068a8 <HAL_GetTickPrio+0x14>)
 800689a:	681b      	ldr	r3, [r3, #0]
}
 800689c:	4618      	mov	r0, r3
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
 80068a6:	bf00      	nop
 80068a8:	2000005c 	.word	0x2000005c

080068ac <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	4603      	mov	r3, r0
 80068b4:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
 80068b6:	2300      	movs	r3, #0
 80068b8:	73fb      	strb	r3, [r7, #15]
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 80068ba:	4b0e      	ldr	r3, [pc, #56]	; (80068f4 <HAL_SetTickFreq+0x48>)
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	79fa      	ldrb	r2, [r7, #7]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d012      	beq.n	80068ea <HAL_SetTickFreq+0x3e>
  {
    /* Back up uwTickFreq frequency */
    prevTickFreq = uwTickFreq;
 80068c4:	4b0b      	ldr	r3, [pc, #44]	; (80068f4 <HAL_SetTickFreq+0x48>)
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	73bb      	strb	r3, [r7, #14]

    /* Update uwTickFreq global variable used by HAL_InitTick() */
    uwTickFreq = Freq;
 80068ca:	4a0a      	ldr	r2, [pc, #40]	; (80068f4 <HAL_SetTickFreq+0x48>)
 80068cc:	79fb      	ldrb	r3, [r7, #7]
 80068ce:	7013      	strb	r3, [r2, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 80068d0:	4b09      	ldr	r3, [pc, #36]	; (80068f8 <HAL_SetTickFreq+0x4c>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4618      	mov	r0, r3
 80068d6:	f7ff ff8c 	bl	80067f2 <HAL_InitTick>
 80068da:	4603      	mov	r3, r0
 80068dc:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK)
 80068de:	7bfb      	ldrb	r3, [r7, #15]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d002      	beq.n	80068ea <HAL_SetTickFreq+0x3e>
    {
      /* Restore previous tick frequency */
      uwTickFreq = prevTickFreq;
 80068e4:	4a03      	ldr	r2, [pc, #12]	; (80068f4 <HAL_SetTickFreq+0x48>)
 80068e6:	7bbb      	ldrb	r3, [r7, #14]
 80068e8:	7013      	strb	r3, [r2, #0]
    }
  }

  return status;
 80068ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3710      	adds	r7, #16
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	20000060 	.word	0x20000060
 80068f8:	2000005c 	.word	0x2000005c

080068fc <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80068fc:	b480      	push	{r7}
 80068fe:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8006900:	4b03      	ldr	r3, [pc, #12]	; (8006910 <HAL_GetTickFreq+0x14>)
 8006902:	781b      	ldrb	r3, [r3, #0]
}
 8006904:	4618      	mov	r0, r3
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr
 800690e:	bf00      	nop
 8006910:	20000060 	.word	0x20000060

08006914 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800691c:	f7ff ffae 	bl	800687c <HAL_GetTick>
 8006920:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800692c:	d005      	beq.n	800693a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800692e:	4b0a      	ldr	r3, [pc, #40]	; (8006958 <HAL_Delay+0x44>)
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	461a      	mov	r2, r3
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	4413      	add	r3, r2
 8006938:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800693a:	bf00      	nop
 800693c:	f7ff ff9e 	bl	800687c <HAL_GetTick>
 8006940:	4602      	mov	r2, r0
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	1ad3      	subs	r3, r2, r3
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	429a      	cmp	r2, r3
 800694a:	d8f7      	bhi.n	800693c <HAL_Delay+0x28>
  {
  }
}
 800694c:	bf00      	nop
 800694e:	bf00      	nop
 8006950:	3710      	adds	r7, #16
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	20000060 	.word	0x20000060

0800695c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800695c:	b480      	push	{r7}
 800695e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8006960:	4b05      	ldr	r3, [pc, #20]	; (8006978 <HAL_SuspendTick+0x1c>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a04      	ldr	r2, [pc, #16]	; (8006978 <HAL_SuspendTick+0x1c>)
 8006966:	f023 0302 	bic.w	r3, r3, #2
 800696a:	6013      	str	r3, [r2, #0]
}
 800696c:	bf00      	nop
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr
 8006976:	bf00      	nop
 8006978:	e000e010 	.word	0xe000e010

0800697c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800697c:	b480      	push	{r7}
 800697e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8006980:	4b05      	ldr	r3, [pc, #20]	; (8006998 <HAL_ResumeTick+0x1c>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a04      	ldr	r2, [pc, #16]	; (8006998 <HAL_ResumeTick+0x1c>)
 8006986:	f043 0302 	orr.w	r3, r3, #2
 800698a:	6013      	str	r3, [r2, #0]
}
 800698c:	bf00      	nop
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	e000e010 	.word	0xe000e010

0800699c <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 800699c:	b480      	push	{r7}
 800699e:	af00      	add	r7, sp, #0
  return __STM32F4xx_HAL_VERSION;
 80069a0:	4b02      	ldr	r3, [pc, #8]	; (80069ac <HAL_GetHalVersion+0x10>)
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr
 80069ac:	01070d00 	.word	0x01070d00

080069b0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80069b0:	b480      	push	{r7}
 80069b2:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) >> 16U);
 80069b4:	4b03      	ldr	r3, [pc, #12]	; (80069c4 <HAL_GetREVID+0x14>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	0c1b      	lsrs	r3, r3, #16
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr
 80069c4:	e0042000 	.word	0xe0042000

080069c8 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 80069c8:	b480      	push	{r7}
 80069ca:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 80069cc:	4b04      	ldr	r3, [pc, #16]	; (80069e0 <HAL_GetDEVID+0x18>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	e0042000 	.word	0xe0042000

080069e4 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80069e4:	b480      	push	{r7}
 80069e6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80069e8:	4b05      	ldr	r3, [pc, #20]	; (8006a00 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	4a04      	ldr	r2, [pc, #16]	; (8006a00 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80069ee:	f043 0301 	orr.w	r3, r3, #1
 80069f2:	6053      	str	r3, [r2, #4]
}
 80069f4:	bf00      	nop
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	e0042000 	.word	0xe0042000

08006a04 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8006a04:	b480      	push	{r7}
 8006a06:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8006a08:	4b05      	ldr	r3, [pc, #20]	; (8006a20 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	4a04      	ldr	r2, [pc, #16]	; (8006a20 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
 8006a0e:	f023 0301 	bic.w	r3, r3, #1
 8006a12:	6053      	str	r3, [r2, #4]
}
 8006a14:	bf00      	nop
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop
 8006a20:	e0042000 	.word	0xe0042000

08006a24 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8006a24:	b480      	push	{r7}
 8006a26:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8006a28:	4b05      	ldr	r3, [pc, #20]	; (8006a40 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	4a04      	ldr	r2, [pc, #16]	; (8006a40 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 8006a2e:	f043 0302 	orr.w	r3, r3, #2
 8006a32:	6053      	str	r3, [r2, #4]
}
 8006a34:	bf00      	nop
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	e0042000 	.word	0xe0042000

08006a44 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8006a44:	b480      	push	{r7}
 8006a46:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8006a48:	4b05      	ldr	r3, [pc, #20]	; (8006a60 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	4a04      	ldr	r2, [pc, #16]	; (8006a60 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
 8006a4e:	f023 0302 	bic.w	r3, r3, #2
 8006a52:	6053      	str	r3, [r2, #4]
}
 8006a54:	bf00      	nop
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr
 8006a5e:	bf00      	nop
 8006a60:	e0042000 	.word	0xe0042000

08006a64 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8006a64:	b480      	push	{r7}
 8006a66:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8006a68:	4b05      	ldr	r3, [pc, #20]	; (8006a80 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	4a04      	ldr	r2, [pc, #16]	; (8006a80 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 8006a6e:	f043 0304 	orr.w	r3, r3, #4
 8006a72:	6053      	str	r3, [r2, #4]
}
 8006a74:	bf00      	nop
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	e0042000 	.word	0xe0042000

08006a84 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8006a84:	b480      	push	{r7}
 8006a86:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8006a88:	4b05      	ldr	r3, [pc, #20]	; (8006aa0 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	4a04      	ldr	r2, [pc, #16]	; (8006aa0 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 8006a8e:	f023 0304 	bic.w	r3, r3, #4
 8006a92:	6053      	str	r3, [r2, #4]
}
 8006a94:	bf00      	nop
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop
 8006aa0:	e0042000 	.word	0xe0042000

08006aa4 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)ENABLE;
 8006aa8:	4b03      	ldr	r3, [pc, #12]	; (8006ab8 <HAL_EnableCompensationCell+0x14>)
 8006aaa:	2201      	movs	r2, #1
 8006aac:	601a      	str	r2, [r3, #0]
}
 8006aae:	bf00      	nop
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr
 8006ab8:	42270400 	.word	0x42270400

08006abc <HAL_DisableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_DisableCompensationCell(void)
{
 8006abc:	b480      	push	{r7}
 8006abe:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)DISABLE;
 8006ac0:	4b03      	ldr	r3, [pc, #12]	; (8006ad0 <HAL_DisableCompensationCell+0x14>)
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	601a      	str	r2, [r3, #0]
}
 8006ac6:	bf00      	nop
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr
 8006ad0:	42270400 	.word	0x42270400

08006ad4 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8006ad8:	4b03      	ldr	r3, [pc, #12]	; (8006ae8 <HAL_GetUIDw0+0x14>)
 8006ada:	681b      	ldr	r3, [r3, #0]
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	1fff7a10 	.word	0x1fff7a10

08006aec <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8006aec:	b480      	push	{r7}
 8006aee:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8006af0:	4b03      	ldr	r3, [pc, #12]	; (8006b00 <HAL_GetUIDw1+0x14>)
 8006af2:	681b      	ldr	r3, [r3, #0]
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop
 8006b00:	1fff7a14 	.word	0x1fff7a14

08006b04 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8006b04:	b480      	push	{r7}
 8006b06:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8006b08:	4b03      	ldr	r3, [pc, #12]	; (8006b18 <HAL_GetUIDw2+0x14>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr
 8006b16:	bf00      	nop
 8006b18:	1fff7a18 	.word	0x1fff7a18

08006b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b085      	sub	sp, #20
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f003 0307 	and.w	r3, r3, #7
 8006b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006b2c:	4b0c      	ldr	r3, [pc, #48]	; (8006b60 <__NVIC_SetPriorityGrouping+0x44>)
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006b32:	68ba      	ldr	r2, [r7, #8]
 8006b34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006b38:	4013      	ands	r3, r2
 8006b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006b44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006b4e:	4a04      	ldr	r2, [pc, #16]	; (8006b60 <__NVIC_SetPriorityGrouping+0x44>)
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	60d3      	str	r3, [r2, #12]
}
 8006b54:	bf00      	nop
 8006b56:	3714      	adds	r7, #20
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr
 8006b60:	e000ed00 	.word	0xe000ed00

08006b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006b64:	b480      	push	{r7}
 8006b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006b68:	4b04      	ldr	r3, [pc, #16]	; (8006b7c <__NVIC_GetPriorityGrouping+0x18>)
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	0a1b      	lsrs	r3, r3, #8
 8006b6e:	f003 0307 	and.w	r3, r3, #7
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr
 8006b7c:	e000ed00 	.word	0xe000ed00

08006b80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	4603      	mov	r3, r0
 8006b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	db0b      	blt.n	8006baa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006b92:	79fb      	ldrb	r3, [r7, #7]
 8006b94:	f003 021f 	and.w	r2, r3, #31
 8006b98:	4907      	ldr	r1, [pc, #28]	; (8006bb8 <__NVIC_EnableIRQ+0x38>)
 8006b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b9e:	095b      	lsrs	r3, r3, #5
 8006ba0:	2001      	movs	r0, #1
 8006ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8006ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006baa:	bf00      	nop
 8006bac:	370c      	adds	r7, #12
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr
 8006bb6:	bf00      	nop
 8006bb8:	e000e100 	.word	0xe000e100

08006bbc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	db12      	blt.n	8006bf4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006bce:	79fb      	ldrb	r3, [r7, #7]
 8006bd0:	f003 021f 	and.w	r2, r3, #31
 8006bd4:	490a      	ldr	r1, [pc, #40]	; (8006c00 <__NVIC_DisableIRQ+0x44>)
 8006bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bda:	095b      	lsrs	r3, r3, #5
 8006bdc:	2001      	movs	r0, #1
 8006bde:	fa00 f202 	lsl.w	r2, r0, r2
 8006be2:	3320      	adds	r3, #32
 8006be4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006be8:	f3bf 8f4f 	dsb	sy
}
 8006bec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006bee:	f3bf 8f6f 	isb	sy
}
 8006bf2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006bf4:	bf00      	nop
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr
 8006c00:	e000e100 	.word	0xe000e100

08006c04 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	db0e      	blt.n	8006c34 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8006c16:	4a0b      	ldr	r2, [pc, #44]	; (8006c44 <__NVIC_GetPendingIRQ+0x40>)
 8006c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c1c:	095b      	lsrs	r3, r3, #5
 8006c1e:	3340      	adds	r3, #64	; 0x40
 8006c20:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006c24:	79fb      	ldrb	r3, [r7, #7]
 8006c26:	f003 031f 	and.w	r3, r3, #31
 8006c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c2e:	f003 0301 	and.w	r3, r3, #1
 8006c32:	e000      	b.n	8006c36 <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 8006c34:	2300      	movs	r3, #0
  }
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	370c      	adds	r7, #12
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop
 8006c44:	e000e100 	.word	0xe000e100

08006c48 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	4603      	mov	r3, r0
 8006c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	db0c      	blt.n	8006c74 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c5a:	79fb      	ldrb	r3, [r7, #7]
 8006c5c:	f003 021f 	and.w	r2, r3, #31
 8006c60:	4907      	ldr	r1, [pc, #28]	; (8006c80 <__NVIC_SetPendingIRQ+0x38>)
 8006c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c66:	095b      	lsrs	r3, r3, #5
 8006c68:	2001      	movs	r0, #1
 8006c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8006c6e:	3340      	adds	r3, #64	; 0x40
 8006c70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006c74:	bf00      	nop
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr
 8006c80:	e000e100 	.word	0xe000e100

08006c84 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	db0c      	blt.n	8006cb0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c96:	79fb      	ldrb	r3, [r7, #7]
 8006c98:	f003 021f 	and.w	r2, r3, #31
 8006c9c:	4907      	ldr	r1, [pc, #28]	; (8006cbc <__NVIC_ClearPendingIRQ+0x38>)
 8006c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ca2:	095b      	lsrs	r3, r3, #5
 8006ca4:	2001      	movs	r0, #1
 8006ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8006caa:	3360      	adds	r3, #96	; 0x60
 8006cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006cb0:	bf00      	nop
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr
 8006cbc:	e000e100 	.word	0xe000e100

08006cc0 <__NVIC_GetActive>:
  \return             0  Interrupt status is not active.
  \return             1  Interrupt status is active.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	db0e      	blt.n	8006cf0 <__NVIC_GetActive+0x30>
  {
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8006cd2:	4a0b      	ldr	r2, [pc, #44]	; (8006d00 <__NVIC_GetActive+0x40>)
 8006cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cd8:	095b      	lsrs	r3, r3, #5
 8006cda:	3380      	adds	r3, #128	; 0x80
 8006cdc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006ce0:	79fb      	ldrb	r3, [r7, #7]
 8006ce2:	f003 031f 	and.w	r3, r3, #31
 8006ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8006cea:	f003 0301 	and.w	r3, r3, #1
 8006cee:	e000      	b.n	8006cf2 <__NVIC_GetActive+0x32>
  }
  else
  {
    return(0U);
 8006cf0:	2300      	movs	r3, #0
  }
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	370c      	adds	r7, #12
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr
 8006cfe:	bf00      	nop
 8006d00:	e000e100 	.word	0xe000e100

08006d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	6039      	str	r1, [r7, #0]
 8006d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	db0a      	blt.n	8006d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	b2da      	uxtb	r2, r3
 8006d1c:	490c      	ldr	r1, [pc, #48]	; (8006d50 <__NVIC_SetPriority+0x4c>)
 8006d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d22:	0112      	lsls	r2, r2, #4
 8006d24:	b2d2      	uxtb	r2, r2
 8006d26:	440b      	add	r3, r1
 8006d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006d2c:	e00a      	b.n	8006d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	b2da      	uxtb	r2, r3
 8006d32:	4908      	ldr	r1, [pc, #32]	; (8006d54 <__NVIC_SetPriority+0x50>)
 8006d34:	79fb      	ldrb	r3, [r7, #7]
 8006d36:	f003 030f 	and.w	r3, r3, #15
 8006d3a:	3b04      	subs	r3, #4
 8006d3c:	0112      	lsls	r2, r2, #4
 8006d3e:	b2d2      	uxtb	r2, r2
 8006d40:	440b      	add	r3, r1
 8006d42:	761a      	strb	r2, [r3, #24]
}
 8006d44:	bf00      	nop
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr
 8006d50:	e000e100 	.word	0xe000e100
 8006d54:	e000ed00 	.word	0xe000ed00

08006d58 <__NVIC_GetPriority>:
  \param [in]   IRQn  Interrupt number.
  \return             Interrupt Priority.
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	4603      	mov	r3, r0
 8006d60:	71fb      	strb	r3, [r7, #7]

  if ((int32_t)(IRQn) >= 0)
 8006d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	db09      	blt.n	8006d7e <__NVIC_GetPriority+0x26>
  {
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 8006d6a:	4a0d      	ldr	r2, [pc, #52]	; (8006da0 <__NVIC_GetPriority+0x48>)
 8006d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d70:	4413      	add	r3, r2
 8006d72:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	091b      	lsrs	r3, r3, #4
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	e009      	b.n	8006d92 <__NVIC_GetPriority+0x3a>
  }
  else
  {
    return(((uint32_t)SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 8006d7e:	4a09      	ldr	r2, [pc, #36]	; (8006da4 <__NVIC_GetPriority+0x4c>)
 8006d80:	79fb      	ldrb	r3, [r7, #7]
 8006d82:	f003 030f 	and.w	r3, r3, #15
 8006d86:	3b04      	subs	r3, #4
 8006d88:	4413      	add	r3, r2
 8006d8a:	7e1b      	ldrb	r3, [r3, #24]
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	091b      	lsrs	r3, r3, #4
 8006d90:	b2db      	uxtb	r3, r3
  }
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	370c      	adds	r7, #12
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr
 8006d9e:	bf00      	nop
 8006da0:	e000e100 	.word	0xe000e100
 8006da4:	e000ed00 	.word	0xe000ed00

08006da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b089      	sub	sp, #36	; 0x24
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f003 0307 	and.w	r3, r3, #7
 8006dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	f1c3 0307 	rsb	r3, r3, #7
 8006dc2:	2b04      	cmp	r3, #4
 8006dc4:	bf28      	it	cs
 8006dc6:	2304      	movcs	r3, #4
 8006dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	3304      	adds	r3, #4
 8006dce:	2b06      	cmp	r3, #6
 8006dd0:	d902      	bls.n	8006dd8 <NVIC_EncodePriority+0x30>
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	3b03      	subs	r3, #3
 8006dd6:	e000      	b.n	8006dda <NVIC_EncodePriority+0x32>
 8006dd8:	2300      	movs	r3, #0
 8006dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	fa02 f303 	lsl.w	r3, r2, r3
 8006de6:	43da      	mvns	r2, r3
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	401a      	ands	r2, r3
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006df0:	f04f 31ff 	mov.w	r1, #4294967295
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	fa01 f303 	lsl.w	r3, r1, r3
 8006dfa:	43d9      	mvns	r1, r3
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e00:	4313      	orrs	r3, r2
         );
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3724      	adds	r7, #36	; 0x24
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr

08006e0e <NVIC_DecodePriority>:
  \param [in]     PriorityGroup  Used priority group.
  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
  \param [out]     pSubPriority  Subpriority value (starting from 0).
 */
__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
 8006e0e:	b480      	push	{r7}
 8006e10:	b089      	sub	sp, #36	; 0x24
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	60f8      	str	r0, [r7, #12]
 8006e16:	60b9      	str	r1, [r7, #8]
 8006e18:	607a      	str	r2, [r7, #4]
 8006e1a:	603b      	str	r3, [r7, #0]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	f003 0307 	and.w	r3, r3, #7
 8006e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	f1c3 0307 	rsb	r3, r3, #7
 8006e2a:	2b04      	cmp	r3, #4
 8006e2c:	bf28      	it	cs
 8006e2e:	2304      	movcs	r3, #4
 8006e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e32:	69fb      	ldr	r3, [r7, #28]
 8006e34:	3304      	adds	r3, #4
 8006e36:	2b06      	cmp	r3, #6
 8006e38:	d902      	bls.n	8006e40 <NVIC_DecodePriority+0x32>
 8006e3a:	69fb      	ldr	r3, [r7, #28]
 8006e3c:	3b03      	subs	r3, #3
 8006e3e:	e000      	b.n	8006e42 <NVIC_DecodePriority+0x34>
 8006e40:	2300      	movs	r3, #0
 8006e42:	617b      	str	r3, [r7, #20]

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 8006e44:	68fa      	ldr	r2, [r7, #12]
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	40da      	lsrs	r2, r3
 8006e4a:	f04f 31ff 	mov.w	r1, #4294967295
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	fa01 f303 	lsl.w	r3, r1, r3
 8006e54:	43db      	mvns	r3, r3
 8006e56:	401a      	ands	r2, r3
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	601a      	str	r2, [r3, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 8006e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	fa02 f303 	lsl.w	r3, r2, r3
 8006e66:	43da      	mvns	r2, r3
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	401a      	ands	r2, r3
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	601a      	str	r2, [r3, #0]
}
 8006e70:	bf00      	nop
 8006e72:	3724      	adds	r7, #36	; 0x24
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8006e80:	f3bf 8f4f 	dsb	sy
}
 8006e84:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006e86:	4b06      	ldr	r3, [pc, #24]	; (8006ea0 <__NVIC_SystemReset+0x24>)
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006e8e:	4904      	ldr	r1, [pc, #16]	; (8006ea0 <__NVIC_SystemReset+0x24>)
 8006e90:	4b04      	ldr	r3, [pc, #16]	; (8006ea4 <__NVIC_SystemReset+0x28>)
 8006e92:	4313      	orrs	r3, r2
 8006e94:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8006e96:	f3bf 8f4f 	dsb	sy
}
 8006e9a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8006e9c:	bf00      	nop
 8006e9e:	e7fd      	b.n	8006e9c <__NVIC_SystemReset+0x20>
 8006ea0:	e000ed00 	.word	0xe000ed00
 8006ea4:	05fa0004 	.word	0x05fa0004

08006ea8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006eb8:	d301      	bcc.n	8006ebe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e00f      	b.n	8006ede <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006ebe:	4a0a      	ldr	r2, [pc, #40]	; (8006ee8 <SysTick_Config+0x40>)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006ec6:	210f      	movs	r1, #15
 8006ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ecc:	f7ff ff1a 	bl	8006d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006ed0:	4b05      	ldr	r3, [pc, #20]	; (8006ee8 <SysTick_Config+0x40>)
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006ed6:	4b04      	ldr	r3, [pc, #16]	; (8006ee8 <SysTick_Config+0x40>)
 8006ed8:	2207      	movs	r2, #7
 8006eda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3708      	adds	r7, #8
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	e000e010 	.word	0xe000e010

08006eec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f7ff fe11 	bl	8006b1c <__NVIC_SetPriorityGrouping>
}
 8006efa:	bf00      	nop
 8006efc:	3708      	adds	r7, #8
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b086      	sub	sp, #24
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	4603      	mov	r3, r0
 8006f0a:	60b9      	str	r1, [r7, #8]
 8006f0c:	607a      	str	r2, [r7, #4]
 8006f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006f10:	2300      	movs	r3, #0
 8006f12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006f14:	f7ff fe26 	bl	8006b64 <__NVIC_GetPriorityGrouping>
 8006f18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	68b9      	ldr	r1, [r7, #8]
 8006f1e:	6978      	ldr	r0, [r7, #20]
 8006f20:	f7ff ff42 	bl	8006da8 <NVIC_EncodePriority>
 8006f24:	4602      	mov	r2, r0
 8006f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f2a:	4611      	mov	r1, r2
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f7ff fee9 	bl	8006d04 <__NVIC_SetPriority>
}
 8006f32:	bf00      	nop
 8006f34:	3718      	adds	r7, #24
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f3a:	b580      	push	{r7, lr}
 8006f3c:	b082      	sub	sp, #8
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	4603      	mov	r3, r0
 8006f42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7ff fe19 	bl	8006b80 <__NVIC_EnableIRQ>
}
 8006f4e:	bf00      	nop
 8006f50:	3708      	adds	r7, #8
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b082      	sub	sp, #8
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7ff fe29 	bl	8006bbc <__NVIC_DisableIRQ>
}
 8006f6a:	bf00      	nop
 8006f6c:	3708      	adds	r7, #8
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}

08006f72 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8006f76:	f7ff ff81 	bl	8006e7c <__NVIC_SystemReset>

08006f7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b082      	sub	sp, #8
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f7ff ff90 	bl	8006ea8 <SysTick_Config>
 8006f88:	4603      	mov	r3, r0
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3708      	adds	r7, #8
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}

08006f92 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8006f92:	b480      	push	{r7}
 8006f94:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8006f96:	f3bf 8f5f 	dmb	sy
}
 8006f9a:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006f9c:	4b06      	ldr	r3, [pc, #24]	; (8006fb8 <HAL_MPU_Disable+0x26>)
 8006f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa0:	4a05      	ldr	r2, [pc, #20]	; (8006fb8 <HAL_MPU_Disable+0x26>)
 8006fa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fa6:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0U;
 8006fa8:	4b04      	ldr	r3, [pc, #16]	; (8006fbc <HAL_MPU_Disable+0x2a>)
 8006faa:	2200      	movs	r2, #0
 8006fac:	605a      	str	r2, [r3, #4]
}
 8006fae:	bf00      	nop
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr
 8006fb8:	e000ed00 	.word	0xe000ed00
 8006fbc:	e000ed90 	.word	0xe000ed90

08006fc0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006fc8:	4a0b      	ldr	r2, [pc, #44]	; (8006ff8 <HAL_MPU_Enable+0x38>)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f043 0301 	orr.w	r3, r3, #1
 8006fd0:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006fd2:	4b0a      	ldr	r3, [pc, #40]	; (8006ffc <HAL_MPU_Enable+0x3c>)
 8006fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd6:	4a09      	ldr	r2, [pc, #36]	; (8006ffc <HAL_MPU_Enable+0x3c>)
 8006fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fdc:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006fde:	f3bf 8f4f 	dsb	sy
}
 8006fe2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006fe4:	f3bf 8f6f 	isb	sy
}
 8006fe8:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006fea:	bf00      	nop
 8006fec:	370c      	adds	r7, #12
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr
 8006ff6:	bf00      	nop
 8006ff8:	e000ed90 	.word	0xe000ed90
 8006ffc:	e000ed00 	.word	0xe000ed00

08007000 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	785a      	ldrb	r2, [r3, #1]
 800700c:	4b1d      	ldr	r3, [pc, #116]	; (8007084 <HAL_MPU_ConfigRegion+0x84>)
 800700e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d029      	beq.n	800706c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8007018:	4a1a      	ldr	r2, [pc, #104]	; (8007084 <HAL_MPU_ConfigRegion+0x84>)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	7b1b      	ldrb	r3, [r3, #12]
 8007024:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	7adb      	ldrb	r3, [r3, #11]
 800702a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800702c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	7a9b      	ldrb	r3, [r3, #10]
 8007032:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8007034:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	7b5b      	ldrb	r3, [r3, #13]
 800703a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800703c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	7b9b      	ldrb	r3, [r3, #14]
 8007042:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8007044:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	7bdb      	ldrb	r3, [r3, #15]
 800704a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800704c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	7a5b      	ldrb	r3, [r3, #9]
 8007052:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8007054:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	7a1b      	ldrb	r3, [r3, #8]
 800705a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800705c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	7812      	ldrb	r2, [r2, #0]
 8007062:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007064:	4a07      	ldr	r2, [pc, #28]	; (8007084 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007066:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007068:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00U;
    MPU->RASR = 0x00U;
  }
}
 800706a:	e005      	b.n	8007078 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00U;
 800706c:	4b05      	ldr	r3, [pc, #20]	; (8007084 <HAL_MPU_ConfigRegion+0x84>)
 800706e:	2200      	movs	r2, #0
 8007070:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00U;
 8007072:	4b04      	ldr	r3, [pc, #16]	; (8007084 <HAL_MPU_ConfigRegion+0x84>)
 8007074:	2200      	movs	r2, #0
 8007076:	611a      	str	r2, [r3, #16]
}
 8007078:	bf00      	nop
 800707a:	370c      	adds	r7, #12
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr
 8007084:	e000ed90 	.word	0xe000ed90

08007088 <HAL_NVIC_GetPriorityGrouping>:
/**
  * @brief  Gets the priority grouping field from the NVIC Interrupt Controller.
  * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	af00      	add	r7, sp, #0
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
 800708c:	f7ff fd6a 	bl	8006b64 <__NVIC_GetPriorityGrouping>
 8007090:	4603      	mov	r3, r0
}
 8007092:	4618      	mov	r0, r3
 8007094:	bd80      	pop	{r7, pc}

08007096 <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
 8007096:	b580      	push	{r7, lr}
 8007098:	b084      	sub	sp, #16
 800709a:	af00      	add	r7, sp, #0
 800709c:	60b9      	str	r1, [r7, #8]
 800709e:	607a      	str	r2, [r7, #4]
 80070a0:	603b      	str	r3, [r7, #0]
 80070a2:	4603      	mov	r3, r0
 80070a4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
 80070a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070aa:	4618      	mov	r0, r3
 80070ac:	f7ff fe54 	bl	8006d58 <__NVIC_GetPriority>
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	68b9      	ldr	r1, [r7, #8]
 80070b6:	f7ff feaa 	bl	8006e0e <NVIC_DecodePriority>
}
 80070ba:	bf00      	nop
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b082      	sub	sp, #8
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	4603      	mov	r3, r0
 80070ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80070cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070d0:	4618      	mov	r0, r3
 80070d2:	f7ff fdb9 	bl	8006c48 <__NVIC_SetPendingIRQ>
}
 80070d6:	bf00      	nop
 80070d8:	3708      	adds	r7, #8
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}

080070de <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 80070de:	b580      	push	{r7, lr}
 80070e0:	b082      	sub	sp, #8
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	4603      	mov	r3, r0
 80070e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 80070e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070ec:	4618      	mov	r0, r3
 80070ee:	f7ff fd89 	bl	8006c04 <__NVIC_GetPendingIRQ>
 80070f2:	4603      	mov	r3, r0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3708      	adds	r7, #8
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b082      	sub	sp, #8
 8007100:	af00      	add	r7, sp, #0
 8007102:	4603      	mov	r3, r0
 8007104:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8007106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800710a:	4618      	mov	r0, r3
 800710c:	f7ff fdba 	bl	8006c84 <__NVIC_ClearPendingIRQ>
}
 8007110:	bf00      	nop
 8007112:	3708      	adds	r7, #8
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <HAL_NVIC_GetActive>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
 800711e:	4603      	mov	r3, r0
 8007120:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
 8007122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007126:	4618      	mov	r0, r3
 8007128:	f7ff fdca 	bl	8006cc0 <__NVIC_GetActive>
 800712c:	4603      	mov	r3, r0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3708      	adds	r7, #8
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8007136:	b480      	push	{r7}
 8007138:	b083      	sub	sp, #12
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2b04      	cmp	r3, #4
 8007142:	d106      	bne.n	8007152 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8007144:	4b09      	ldr	r3, [pc, #36]	; (800716c <HAL_SYSTICK_CLKSourceConfig+0x36>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a08      	ldr	r2, [pc, #32]	; (800716c <HAL_SYSTICK_CLKSourceConfig+0x36>)
 800714a:	f043 0304 	orr.w	r3, r3, #4
 800714e:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8007150:	e005      	b.n	800715e <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8007152:	4b06      	ldr	r3, [pc, #24]	; (800716c <HAL_SYSTICK_CLKSourceConfig+0x36>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a05      	ldr	r2, [pc, #20]	; (800716c <HAL_SYSTICK_CLKSourceConfig+0x36>)
 8007158:	f023 0304 	bic.w	r3, r3, #4
 800715c:	6013      	str	r3, [r2, #0]
}
 800715e:	bf00      	nop
 8007160:	370c      	adds	r7, #12
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	e000e010 	.word	0xe000e010

08007170 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8007174:	f000 f802 	bl	800717c <HAL_SYSTICK_Callback>
}
 8007178:	bf00      	nop
 800717a:	bd80      	pop	{r7, pc}

0800717c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800717c:	b480      	push	{r7}
 800717e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8007180:	bf00      	nop
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr

0800718a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800718a:	b580      	push	{r7, lr}
 800718c:	b082      	sub	sp, #8
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d101      	bne.n	800719c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	e014      	b.n	80071c6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	791b      	ldrb	r3, [r3, #4]
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d105      	bne.n	80071b2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f7fe fb65 	bl	800587c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2202      	movs	r2, #2
 80071b6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2201      	movs	r2, #1
 80071c2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3708      	adds	r7, #8
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}

080071ce <HAL_DAC_DeInit>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_DeInit(DAC_HandleTypeDef *hdac)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b082      	sub	sp, #8
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d101      	bne.n	80071e0 <HAL_DAC_DeInit+0x12>
  {
    return HAL_ERROR;
 80071dc:	2301      	movs	r3, #1
 80071de:	e00f      	b.n	8007200 <HAL_DAC_DeInit+0x32>

  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2202      	movs	r2, #2
 80071e4:	711a      	strb	r2, [r3, #4]
  }
  /* DeInit the low level hardware */
  hdac->MspDeInitCallback(hdac);
#else
  /* DeInit the low level hardware */
  HAL_DAC_MspDeInit(hdac);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f7fe fb8c 	bl	8005904 <HAL_DAC_MspDeInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	611a      	str	r2, [r3, #16]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_RESET;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	711a      	strb	r2, [r3, #4]

  /* Release Lock */
  __HAL_UNLOCK(hdac);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3708      	adds	r7, #8
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	795b      	ldrb	r3, [r3, #5]
 8007216:	2b01      	cmp	r3, #1
 8007218:	d101      	bne.n	800721e <HAL_DAC_Start+0x16>
 800721a:	2302      	movs	r3, #2
 800721c:	e040      	b.n	80072a0 <HAL_DAC_Start+0x98>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2201      	movs	r2, #1
 8007222:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2202      	movs	r2, #2
 8007228:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	6819      	ldr	r1, [r3, #0]
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	f003 0310 	and.w	r3, r3, #16
 8007236:	2201      	movs	r2, #1
 8007238:	409a      	lsls	r2, r3
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	430a      	orrs	r2, r1
 8007240:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d10f      	bne.n	8007268 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8007252:	2b3c      	cmp	r3, #60	; 0x3c
 8007254:	d11d      	bne.n	8007292 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	685a      	ldr	r2, [r3, #4]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f042 0201 	orr.w	r2, r2, #1
 8007264:	605a      	str	r2, [r3, #4]
 8007266:	e014      	b.n	8007292 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	f003 0310 	and.w	r3, r3, #16
 8007278:	213c      	movs	r1, #60	; 0x3c
 800727a:	fa01 f303 	lsl.w	r3, r1, r3
 800727e:	429a      	cmp	r2, r3
 8007280:	d107      	bne.n	8007292 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	685a      	ldr	r2, [r3, #4]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f042 0202 	orr.w	r2, r2, #2
 8007290:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2201      	movs	r2, #1
 8007296:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	370c      	adds	r7, #12
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	6819      	ldr	r1, [r3, #0]
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	f003 0310 	and.w	r3, r3, #16
 80072c2:	2201      	movs	r2, #1
 80072c4:	fa02 f303 	lsl.w	r3, r2, r3
 80072c8:	43da      	mvns	r2, r3
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	400a      	ands	r2, r1
 80072d0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2201      	movs	r2, #1
 80072d6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	370c      	adds	r7, #12
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr

080072e6 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b086      	sub	sp, #24
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	60f8      	str	r0, [r7, #12]
 80072ee:	60b9      	str	r1, [r7, #8]
 80072f0:	607a      	str	r2, [r7, #4]
 80072f2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072f4:	2300      	movs	r3, #0
 80072f6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 80072f8:	2300      	movs	r3, #0
 80072fa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	795b      	ldrb	r3, [r3, #5]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d101      	bne.n	8007308 <HAL_DAC_Start_DMA+0x22>
 8007304:	2302      	movs	r3, #2
 8007306:	e0ab      	b.n	8007460 <HAL_DAC_Start_DMA+0x17a>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2201      	movs	r2, #1
 800730c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2202      	movs	r2, #2
 8007312:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d12f      	bne.n	800737a <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	4a52      	ldr	r2, [pc, #328]	; (8007468 <HAL_DAC_Start_DMA+0x182>)
 8007320:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	4a51      	ldr	r2, [pc, #324]	; (800746c <HAL_DAC_Start_DMA+0x186>)
 8007328:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	4a50      	ldr	r2, [pc, #320]	; (8007470 <HAL_DAC_Start_DMA+0x18a>)
 8007330:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007340:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8007342:	6a3b      	ldr	r3, [r7, #32]
 8007344:	2b08      	cmp	r3, #8
 8007346:	d013      	beq.n	8007370 <HAL_DAC_Start_DMA+0x8a>
 8007348:	6a3b      	ldr	r3, [r7, #32]
 800734a:	2b08      	cmp	r3, #8
 800734c:	d845      	bhi.n	80073da <HAL_DAC_Start_DMA+0xf4>
 800734e:	6a3b      	ldr	r3, [r7, #32]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d003      	beq.n	800735c <HAL_DAC_Start_DMA+0x76>
 8007354:	6a3b      	ldr	r3, [r7, #32]
 8007356:	2b04      	cmp	r3, #4
 8007358:	d005      	beq.n	8007366 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800735a:	e03e      	b.n	80073da <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	3308      	adds	r3, #8
 8007362:	613b      	str	r3, [r7, #16]
        break;
 8007364:	e03c      	b.n	80073e0 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	330c      	adds	r3, #12
 800736c:	613b      	str	r3, [r7, #16]
        break;
 800736e:	e037      	b.n	80073e0 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	3310      	adds	r3, #16
 8007376:	613b      	str	r3, [r7, #16]
        break;
 8007378:	e032      	b.n	80073e0 <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	4a3d      	ldr	r2, [pc, #244]	; (8007474 <HAL_DAC_Start_DMA+0x18e>)
 8007380:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	4a3c      	ldr	r2, [pc, #240]	; (8007478 <HAL_DAC_Start_DMA+0x192>)
 8007388:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	4a3b      	ldr	r2, [pc, #236]	; (800747c <HAL_DAC_Start_DMA+0x196>)
 8007390:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80073a0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80073a2:	6a3b      	ldr	r3, [r7, #32]
 80073a4:	2b08      	cmp	r3, #8
 80073a6:	d013      	beq.n	80073d0 <HAL_DAC_Start_DMA+0xea>
 80073a8:	6a3b      	ldr	r3, [r7, #32]
 80073aa:	2b08      	cmp	r3, #8
 80073ac:	d817      	bhi.n	80073de <HAL_DAC_Start_DMA+0xf8>
 80073ae:	6a3b      	ldr	r3, [r7, #32]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d003      	beq.n	80073bc <HAL_DAC_Start_DMA+0xd6>
 80073b4:	6a3b      	ldr	r3, [r7, #32]
 80073b6:	2b04      	cmp	r3, #4
 80073b8:	d005      	beq.n	80073c6 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80073ba:	e010      	b.n	80073de <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	3314      	adds	r3, #20
 80073c2:	613b      	str	r3, [r7, #16]
        break;
 80073c4:	e00c      	b.n	80073e0 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	3318      	adds	r3, #24
 80073cc:	613b      	str	r3, [r7, #16]
        break;
 80073ce:	e007      	b.n	80073e0 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	331c      	adds	r3, #28
 80073d6:	613b      	str	r3, [r7, #16]
        break;
 80073d8:	e002      	b.n	80073e0 <HAL_DAC_Start_DMA+0xfa>
        break;
 80073da:	bf00      	nop
 80073dc:	e000      	b.n	80073e0 <HAL_DAC_Start_DMA+0xfa>
        break;
 80073de:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d111      	bne.n	800740a <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80073f4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6898      	ldr	r0, [r3, #8]
 80073fa:	6879      	ldr	r1, [r7, #4]
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	693a      	ldr	r2, [r7, #16]
 8007400:	f000 fca5 	bl	8007d4e <HAL_DMA_Start_IT>
 8007404:	4603      	mov	r3, r0
 8007406:	75fb      	strb	r3, [r7, #23]
 8007408:	e010      	b.n	800742c <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8007418:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	68d8      	ldr	r0, [r3, #12]
 800741e:	6879      	ldr	r1, [r7, #4]
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	693a      	ldr	r2, [r7, #16]
 8007424:	f000 fc93 	bl	8007d4e <HAL_DMA_Start_IT>
 8007428:	4603      	mov	r3, r0
 800742a:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2200      	movs	r2, #0
 8007430:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8007432:	7dfb      	ldrb	r3, [r7, #23]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d10c      	bne.n	8007452 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	6819      	ldr	r1, [r3, #0]
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	f003 0310 	and.w	r3, r3, #16
 8007444:	2201      	movs	r2, #1
 8007446:	409a      	lsls	r2, r3
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	430a      	orrs	r2, r1
 800744e:	601a      	str	r2, [r3, #0]
 8007450:	e005      	b.n	800745e <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	f043 0204 	orr.w	r2, r3, #4
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800745e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007460:	4618      	mov	r0, r3
 8007462:	3718      	adds	r7, #24
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}
 8007468:	08007763 	.word	0x08007763
 800746c:	08007785 	.word	0x08007785
 8007470:	080077a1 	.word	0x080077a1
 8007474:	08007a55 	.word	0x08007a55
 8007478:	08007a77 	.word	0x08007a77
 800747c:	08007a93 	.word	0x08007a93

08007480 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	6819      	ldr	r1, [r3, #0]
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	f003 0310 	and.w	r3, r3, #16
 8007496:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800749a:	fa02 f303 	lsl.w	r3, r2, r3
 800749e:	43da      	mvns	r2, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	400a      	ands	r2, r1
 80074a6:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	6819      	ldr	r1, [r3, #0]
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	f003 0310 	and.w	r3, r3, #16
 80074b4:	2201      	movs	r2, #1
 80074b6:	fa02 f303 	lsl.w	r3, r2, r3
 80074ba:	43da      	mvns	r2, r3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	400a      	ands	r2, r1
 80074c2:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d10d      	bne.n	80074e6 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	4618      	mov	r0, r3
 80074d0:	f000 fc95 	bl	8007dfe <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80074e2:	601a      	str	r2, [r3, #0]
 80074e4:	e00c      	b.n	8007500 <HAL_DAC_Stop_DMA+0x80>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	4618      	mov	r0, r3
 80074ec:	f000 fc87 	bl	8007dfe <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80074fe:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	3708      	adds	r7, #8
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007522:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007526:	d120      	bne.n	800756a <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800752e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007532:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007536:	d118      	bne.n	800756a <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2204      	movs	r2, #4
 800753c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	691b      	ldr	r3, [r3, #16]
 8007542:	f043 0201 	orr.w	r2, r3, #1
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007552:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007562:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 f870 	bl	800764a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007574:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007578:	d120      	bne.n	80075bc <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007580:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007584:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007588:	d118      	bne.n	80075bc <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2204      	movs	r2, #4
 800758e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	691b      	ldr	r3, [r3, #16]
 8007594:	f043 0202 	orr.w	r2, r3, #2
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80075a4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80075b4:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 fa28 	bl	8007a0c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 80075bc:	bf00      	nop
 80075be:	3708      	adds	r7, #8
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b087      	sub	sp, #28
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	607a      	str	r2, [r7, #4]
 80075d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80075d2:	2300      	movs	r3, #0
 80075d4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d105      	bne.n	80075ee <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80075e2:	697a      	ldr	r2, [r7, #20]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	4413      	add	r3, r2
 80075e8:	3308      	adds	r3, #8
 80075ea:	617b      	str	r3, [r7, #20]
 80075ec:	e004      	b.n	80075f8 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80075ee:	697a      	ldr	r2, [r7, #20]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4413      	add	r3, r2
 80075f4:	3314      	adds	r3, #20
 80075f6:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	461a      	mov	r2, r3
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8007600:	2300      	movs	r3, #0
}
 8007602:	4618      	mov	r0, r3
 8007604:	371c      	adds	r7, #28
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr

0800760e <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800760e:	b480      	push	{r7}
 8007610:	b083      	sub	sp, #12
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8007616:	bf00      	nop
 8007618:	370c      	adds	r7, #12
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr

08007622 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007622:	b480      	push	{r7}
 8007624:	b083      	sub	sp, #12
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800762a:	bf00      	nop
 800762c:	370c      	adds	r7, #12
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr

08007636 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007636:	b480      	push	{r7}
 8007638:	b083      	sub	sp, #12
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800763e:	bf00      	nop
 8007640:	370c      	adds	r7, #12
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr

0800764a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800764a:	b480      	push	{r7}
 800764c:	b083      	sub	sp, #12
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8007652:	bf00      	nop
 8007654:	370c      	adds	r7, #12
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr

0800765e <HAL_DAC_GetValue>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800765e:	b480      	push	{r7}
 8007660:	b085      	sub	sp, #20
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
 8007666:	6039      	str	r1, [r7, #0]
  uint32_t result = 0;
 8007668:	2300      	movs	r3, #0
 800766a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  if (Channel == DAC_CHANNEL_1)
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d104      	bne.n	800767c <HAL_DAC_GetValue+0x1e>
  {
    result = hdac->Instance->DOR1;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007678:	60fb      	str	r3, [r7, #12]
 800767a:	e003      	b.n	8007684 <HAL_DAC_GetValue+0x26>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    result = hdac->Instance->DOR2;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007682:	60fb      	str	r3, [r7, #12]
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  /* Returns the DAC channel data output register value */
  return result;
 8007684:	68fb      	ldr	r3, [r7, #12]
}
 8007686:	4618      	mov	r0, r3
 8007688:	3714      	adds	r7, #20
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr

08007692 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007692:	b480      	push	{r7}
 8007694:	b087      	sub	sp, #28
 8007696:	af00      	add	r7, sp, #0
 8007698:	60f8      	str	r0, [r7, #12]
 800769a:	60b9      	str	r1, [r7, #8]
 800769c:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	795b      	ldrb	r3, [r3, #5]
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d101      	bne.n	80076aa <HAL_DAC_ConfigChannel+0x18>
 80076a6:	2302      	movs	r3, #2
 80076a8:	e03c      	b.n	8007724 <HAL_DAC_ConfigChannel+0x92>
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2201      	movs	r2, #1
 80076ae:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2202      	movs	r2, #2
 80076b4:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f003 0310 	and.w	r3, r3, #16
 80076c4:	f640 72fe 	movw	r2, #4094	; 0xffe
 80076c8:	fa02 f303 	lsl.w	r3, r2, r3
 80076cc:	43db      	mvns	r3, r3
 80076ce:	697a      	ldr	r2, [r7, #20]
 80076d0:	4013      	ands	r3, r2
 80076d2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	4313      	orrs	r3, r2
 80076de:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f003 0310 	and.w	r3, r3, #16
 80076e6:	693a      	ldr	r2, [r7, #16]
 80076e8:	fa02 f303 	lsl.w	r3, r2, r3
 80076ec:	697a      	ldr	r2, [r7, #20]
 80076ee:	4313      	orrs	r3, r2
 80076f0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	697a      	ldr	r2, [r7, #20]
 80076f8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	6819      	ldr	r1, [r3, #0]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f003 0310 	and.w	r3, r3, #16
 8007706:	22c0      	movs	r2, #192	; 0xc0
 8007708:	fa02 f303 	lsl.w	r3, r2, r3
 800770c:	43da      	mvns	r2, r3
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	400a      	ands	r2, r1
 8007714:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2201      	movs	r2, #1
 800771a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2200      	movs	r2, #0
 8007720:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007722:	2300      	movs	r3, #0
}
 8007724:	4618      	mov	r0, r3
 8007726:	371c      	adds	r7, #28
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <HAL_DAC_GetState>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL state
  */
HAL_DAC_StateTypeDef HAL_DAC_GetState(DAC_HandleTypeDef *hdac)
{
 8007730:	b480      	push	{r7}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  /* Return DAC handle state */
  return hdac->State;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	791b      	ldrb	r3, [r3, #4]
 800773c:	b2db      	uxtb	r3, r3
}
 800773e:	4618      	mov	r0, r3
 8007740:	370c      	adds	r7, #12
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr

0800774a <HAL_DAC_GetError>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval DAC Error Code
  */
uint32_t HAL_DAC_GetError(DAC_HandleTypeDef *hdac)
{
 800774a:	b480      	push	{r7}
 800774c:	b083      	sub	sp, #12
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
  return hdac->ErrorCode;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	691b      	ldr	r3, [r3, #16]
}
 8007756:	4618      	mov	r0, r3
 8007758:	370c      	adds	r7, #12
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr

08007762 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007762:	b580      	push	{r7, lr}
 8007764:	b084      	sub	sp, #16
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800776e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8007770:	68f8      	ldr	r0, [r7, #12]
 8007772:	f7ff ff4c 	bl	800760e <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2201      	movs	r2, #1
 800777a:	711a      	strb	r2, [r3, #4]
}
 800777c:	bf00      	nop
 800777e:	3710      	adds	r7, #16
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007790:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8007792:	68f8      	ldr	r0, [r7, #12]
 8007794:	f7ff ff45 	bl	8007622 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007798:	bf00      	nop
 800779a:	3710      	adds	r7, #16
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ac:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	691b      	ldr	r3, [r3, #16]
 80077b2:	f043 0204 	orr.w	r2, r3, #4
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80077ba:	68f8      	ldr	r0, [r7, #12]
 80077bc:	f7ff ff3b 	bl	8007636 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2201      	movs	r2, #1
 80077c4:	711a      	strb	r2, [r3, #4]
}
 80077c6:	bf00      	nop
 80077c8:	3710      	adds	r7, #16
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}

080077ce <HAL_DACEx_DualStart>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_DualStart(DAC_HandleTypeDef *hdac)
{
 80077ce:	b480      	push	{r7}
 80077d0:	b085      	sub	sp, #20
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
  uint32_t tmp_swtrig = 0UL;
 80077d6:	2300      	movs	r3, #0
 80077d8:	60fb      	str	r3, [r7, #12]


  /* Process locked */
  __HAL_LOCK(hdac);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	795b      	ldrb	r3, [r3, #5]
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d101      	bne.n	80077e6 <HAL_DACEx_DualStart+0x18>
 80077e2:	2302      	movs	r3, #2
 80077e4:	e03b      	b.n	800785e <HAL_DACEx_DualStart+0x90>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2201      	movs	r2, #1
 80077ea:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2202      	movs	r2, #2
 80077f0:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, DAC_CHANNEL_1);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f042 0201 	orr.w	r2, r2, #1
 8007800:	601a      	str	r2, [r3, #0]
  __HAL_DAC_ENABLE(hdac, DAC_CHANNEL_2);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007810:	601a      	str	r2, [r3, #0]

  /* Check if software trigger enabled */
  if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800781c:	2b3c      	cmp	r3, #60	; 0x3c
 800781e:	d103      	bne.n	8007828 <HAL_DACEx_DualStart+0x5a>
  {
    tmp_swtrig |= DAC_SWTRIGR_SWTRIG1;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f043 0301 	orr.w	r3, r3, #1
 8007826:	60fb      	str	r3, [r7, #12]
  }
  if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (DAC_CHANNEL_2 & 0x10UL)))
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8007832:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 8007836:	d103      	bne.n	8007840 <HAL_DACEx_DualStart+0x72>
  {
    tmp_swtrig |= DAC_SWTRIGR_SWTRIG2;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f043 0302 	orr.w	r3, r3, #2
 800783e:	60fb      	str	r3, [r7, #12]
  }
  /* Enable the selected DAC software conversion*/
  SET_BIT(hdac->Instance->SWTRIGR, tmp_swtrig);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	6859      	ldr	r1, [r3, #4]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	68fa      	ldr	r2, [r7, #12]
 800784c:	430a      	orrs	r2, r1
 800784e:	605a      	str	r2, [r3, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	3714      	adds	r7, #20
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr

0800786a <HAL_DACEx_DualStop>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_DualStop(DAC_HandleTypeDef *hdac)
{
 800786a:	b480      	push	{r7}
 800786c:	b083      	sub	sp, #12
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, DAC_CHANNEL_1);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f022 0201 	bic.w	r2, r2, #1
 8007880:	601a      	str	r2, [r3, #0]
  __HAL_DAC_DISABLE(hdac, DAC_CHANNEL_2);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007890:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2201      	movs	r2, #1
 8007896:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007898:	2300      	movs	r3, #0
}
 800789a:	4618      	mov	r0, r3
 800789c:	370c      	adds	r7, #12
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr

080078a6 <HAL_DACEx_TriangleWaveGenerate>:
  *            @arg DAC_TRIANGLEAMPLITUDE_2047: Select max triangle amplitude of 2047
  *            @arg DAC_TRIANGLEAMPLITUDE_4095: Select max triangle amplitude of 4095
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_TriangleWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude)
{
 80078a6:	b480      	push	{r7}
 80078a8:	b085      	sub	sp, #20
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	60f8      	str	r0, [r7, #12]
 80078ae:	60b9      	str	r1, [r7, #8]
 80078b0:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));

  /* Process locked */
  __HAL_LOCK(hdac);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	795b      	ldrb	r3, [r3, #5]
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d101      	bne.n	80078be <HAL_DACEx_TriangleWaveGenerate+0x18>
 80078ba:	2302      	movs	r3, #2
 80078bc:	e024      	b.n	8007908 <HAL_DACEx_TriangleWaveGenerate+0x62>
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2201      	movs	r2, #1
 80078c2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2202      	movs	r2, #2
 80078c8:	711a      	strb	r2, [r3, #4]

  /* Enable the triangle wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL),
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	f003 0310 	and.w	r3, r3, #16
 80078d6:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 80078da:	fa01 f303 	lsl.w	r3, r1, r3
 80078de:	43db      	mvns	r3, r3
 80078e0:	ea02 0103 	and.w	r1, r2, r3
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	f003 0310 	and.w	r3, r3, #16
 80078f0:	409a      	lsls	r2, r3
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	430a      	orrs	r2, r1
 80078f8:	601a      	str	r2, [r3, #0]
             (DAC_CR_WAVE1_1 | Amplitude) << (Channel & 0x10UL));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2201      	movs	r2, #1
 80078fe:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2200      	movs	r2, #0
 8007904:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007906:	2300      	movs	r3, #0
}
 8007908:	4618      	mov	r0, r3
 800790a:	3714      	adds	r7, #20
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <HAL_DACEx_NoiseWaveGenerate>:
  *            @arg DAC_LFSRUNMASK_BITS10_0: Unmask DAC channel LFSR bit[10:0] for noise wave generation
  *            @arg DAC_LFSRUNMASK_BITS11_0: Unmask DAC channel LFSR bit[11:0] for noise wave generation
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_NoiseWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude)
{
 8007914:	b480      	push	{r7}
 8007916:	b085      	sub	sp, #20
 8007918:	af00      	add	r7, sp, #0
 800791a:	60f8      	str	r0, [r7, #12]
 800791c:	60b9      	str	r1, [r7, #8]
 800791e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	795b      	ldrb	r3, [r3, #5]
 8007924:	2b01      	cmp	r3, #1
 8007926:	d101      	bne.n	800792c <HAL_DACEx_NoiseWaveGenerate+0x18>
 8007928:	2302      	movs	r3, #2
 800792a:	e024      	b.n	8007976 <HAL_DACEx_NoiseWaveGenerate+0x62>
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2201      	movs	r2, #1
 8007930:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2202      	movs	r2, #2
 8007936:	711a      	strb	r2, [r3, #4]

  /* Enable the noise wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL),
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	f003 0310 	and.w	r3, r3, #16
 8007944:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 8007948:	fa01 f303 	lsl.w	r3, r1, r3
 800794c:	43db      	mvns	r3, r3
 800794e:	ea02 0103 	and.w	r1, r2, r3
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	f003 0310 	and.w	r3, r3, #16
 800795e:	409a      	lsls	r2, r3
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	430a      	orrs	r2, r1
 8007966:	601a      	str	r2, [r3, #0]
             (DAC_CR_WAVE1_0 | Amplitude) << (Channel & 0x10UL));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2201      	movs	r2, #1
 800796c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2200      	movs	r2, #0
 8007972:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007974:	2300      	movs	r3, #0
}
 8007976:	4618      	mov	r0, r3
 8007978:	3714      	adds	r7, #20
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr

08007982 <HAL_DACEx_DualSetValue>:
  * @note   In dual mode, a unique register access is required to write in both
  *          DAC channels at the same time.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_DualSetValue(DAC_HandleTypeDef *hdac, uint32_t Alignment, uint32_t Data1, uint32_t Data2)
{
 8007982:	b480      	push	{r7}
 8007984:	b087      	sub	sp, #28
 8007986:	af00      	add	r7, sp, #0
 8007988:	60f8      	str	r0, [r7, #12]
 800798a:	60b9      	str	r1, [r7, #8]
 800798c:	607a      	str	r2, [r7, #4]
 800798e:	603b      	str	r3, [r7, #0]
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));

  /* Calculate and set dual DAC data holding register value */
  if (Alignment == DAC_ALIGN_8B_R)
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	2b08      	cmp	r3, #8
 8007994:	d105      	bne.n	80079a2 <HAL_DACEx_DualSetValue+0x20>
  {
    data = ((uint32_t)Data2 << 8U) | Data1;
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	021b      	lsls	r3, r3, #8
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	4313      	orrs	r3, r2
 800799e:	617b      	str	r3, [r7, #20]
 80079a0:	e004      	b.n	80079ac <HAL_DACEx_DualSetValue+0x2a>
  }
  else
  {
    data = ((uint32_t)Data2 << 16U) | Data1;
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	041b      	lsls	r3, r3, #16
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	4313      	orrs	r3, r2
 80079aa:	617b      	str	r3, [r7, #20]
  }

  tmp = (uint32_t)hdac->Instance;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	613b      	str	r3, [r7, #16]
  tmp += DAC_DHR12RD_ALIGNMENT(Alignment);
 80079b2:	68ba      	ldr	r2, [r7, #8]
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	4413      	add	r3, r2
 80079b8:	3320      	adds	r3, #32
 80079ba:	613b      	str	r3, [r7, #16]

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	697a      	ldr	r2, [r7, #20]
 80079c0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80079c2:	2300      	movs	r3, #0
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	371c      	adds	r7, #28
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr

080079d0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80079d8:	bf00      	nop
 80079da:	370c      	adds	r7, #12
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80079ec:	bf00      	nop
 80079ee:	370c      	adds	r7, #12
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr

080079f8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b083      	sub	sp, #12
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8007a00:	bf00      	nop
 8007a02:	370c      	adds	r7, #12
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8007a14:	bf00      	nop
 8007a16:	370c      	adds	r7, #12
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <HAL_DACEx_DualGetValue>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DACEx_DualGetValue(DAC_HandleTypeDef *hdac)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b085      	sub	sp, #20
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0UL;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	60fb      	str	r3, [r7, #12]

  tmp |= hdac->Instance->DOR1;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	4313      	orrs	r3, r2
 8007a36:	60fb      	str	r3, [r7, #12]

  tmp |= hdac->Instance->DOR2 << 16UL;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a3e:	041b      	lsls	r3, r3, #16
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	60fb      	str	r3, [r7, #12]

  /* Returns the DAC channel data output register value */
  return tmp;
 8007a46:	68fb      	ldr	r3, [r7, #12]
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3714      	adds	r7, #20
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a60:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8007a62:	68f8      	ldr	r0, [r7, #12]
 8007a64:	f7ff ffb4 	bl	80079d0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	711a      	strb	r2, [r3, #4]
}
 8007a6e:	bf00      	nop
 8007a70:	3710      	adds	r7, #16
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}

08007a76 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007a76:	b580      	push	{r7, lr}
 8007a78:	b084      	sub	sp, #16
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a82:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8007a84:	68f8      	ldr	r0, [r7, #12]
 8007a86:	f7ff ffad 	bl	80079e4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007a8a:	bf00      	nop
 8007a8c:	3710      	adds	r7, #16
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}

08007a92 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8007a92:	b580      	push	{r7, lr}
 8007a94:	b084      	sub	sp, #16
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a9e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	691b      	ldr	r3, [r3, #16]
 8007aa4:	f043 0204 	orr.w	r2, r3, #4
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8007aac:	68f8      	ldr	r0, [r7, #12]
 8007aae:	f7ff ffa3 	bl	80079f8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	711a      	strb	r2, [r3, #4]
}
 8007ab8:	bf00      	nop
 8007aba:	3710      	adds	r7, #16
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b086      	sub	sp, #24
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007acc:	f7fe fed6 	bl	800687c <HAL_GetTick>
 8007ad0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d101      	bne.n	8007adc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e099      	b.n	8007c10 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2202      	movs	r2, #2
 8007ae0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f022 0201 	bic.w	r2, r2, #1
 8007afa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007afc:	e00f      	b.n	8007b1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007afe:	f7fe febd 	bl	800687c <HAL_GetTick>
 8007b02:	4602      	mov	r2, r0
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	1ad3      	subs	r3, r2, r3
 8007b08:	2b05      	cmp	r3, #5
 8007b0a:	d908      	bls.n	8007b1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2220      	movs	r2, #32
 8007b10:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2203      	movs	r2, #3
 8007b16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007b1a:	2303      	movs	r3, #3
 8007b1c:	e078      	b.n	8007c10 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f003 0301 	and.w	r3, r3, #1
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d1e8      	bne.n	8007afe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007b34:	697a      	ldr	r2, [r7, #20]
 8007b36:	4b38      	ldr	r3, [pc, #224]	; (8007c18 <HAL_DMA_Init+0x158>)
 8007b38:	4013      	ands	r3, r2
 8007b3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	685a      	ldr	r2, [r3, #4]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	691b      	ldr	r3, [r3, #16]
 8007b50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	699b      	ldr	r3, [r3, #24]
 8007b5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6a1b      	ldr	r3, [r3, #32]
 8007b68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b6a:	697a      	ldr	r2, [r7, #20]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b74:	2b04      	cmp	r3, #4
 8007b76:	d107      	bne.n	8007b88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b80:	4313      	orrs	r3, r2
 8007b82:	697a      	ldr	r2, [r7, #20]
 8007b84:	4313      	orrs	r3, r2
 8007b86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	697a      	ldr	r2, [r7, #20]
 8007b8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	695b      	ldr	r3, [r3, #20]
 8007b96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	f023 0307 	bic.w	r3, r3, #7
 8007b9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba4:	697a      	ldr	r2, [r7, #20]
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bae:	2b04      	cmp	r3, #4
 8007bb0:	d117      	bne.n	8007be2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb6:	697a      	ldr	r2, [r7, #20]
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d00e      	beq.n	8007be2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 fd4d 	bl	8008664 <DMA_CheckFifoParam>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d008      	beq.n	8007be2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2240      	movs	r2, #64	; 0x40
 8007bd4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2201      	movs	r2, #1
 8007bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007bde:	2301      	movs	r3, #1
 8007be0:	e016      	b.n	8007c10 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	697a      	ldr	r2, [r7, #20]
 8007be8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 fd05 	bl	80085fa <DMA_CalcBaseAndBitshift>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bf8:	223f      	movs	r2, #63	; 0x3f
 8007bfa:	409a      	lsls	r2, r3
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2201      	movs	r2, #1
 8007c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007c0e:	2300      	movs	r3, #0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3718      	adds	r7, #24
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	f010803f 	.word	0xf010803f

08007c1c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d101      	bne.n	8007c2e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e050      	b.n	8007cd0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	2b02      	cmp	r3, #2
 8007c38:	d101      	bne.n	8007c3e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8007c3a:	2302      	movs	r3, #2
 8007c3c:	e048      	b.n	8007cd0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f022 0201 	bic.w	r2, r2, #1
 8007c4c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2200      	movs	r2, #0
 8007c54:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	2200      	movs	r2, #0
 8007c64:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	2200      	movs	r2, #0
 8007c74:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2221      	movs	r2, #33	; 0x21
 8007c7c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 fcbb 	bl	80085fa <DMA_CalcBaseAndBitshift>
 8007c84:	4603      	mov	r3, r0
 8007c86:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cb0:	223f      	movs	r2, #63	; 0x3f
 8007cb2:	409a      	lsls	r2, r3
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007cce:	2300      	movs	r3, #0
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3710      	adds	r7, #16
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b086      	sub	sp, #24
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	60b9      	str	r1, [r7, #8]
 8007ce2:	607a      	str	r2, [r7, #4]
 8007ce4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d101      	bne.n	8007cf8 <HAL_DMA_Start+0x20>
 8007cf4:	2302      	movs	r3, #2
 8007cf6:	e026      	b.n	8007d46 <HAL_DMA_Start+0x6e>
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d115      	bne.n	8007d38 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2202      	movs	r2, #2
 8007d10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2200      	movs	r2, #0
 8007d18:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	68b9      	ldr	r1, [r7, #8]
 8007d20:	68f8      	ldr	r0, [r7, #12]
 8007d22:	f000 fc3c 	bl	800859e <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f042 0201 	orr.w	r2, r2, #1
 8007d34:	601a      	str	r2, [r3, #0]
 8007d36:	e005      	b.n	8007d44 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007d40:	2302      	movs	r3, #2
 8007d42:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8007d44:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3718      	adds	r7, #24
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}

08007d4e <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b086      	sub	sp, #24
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	60f8      	str	r0, [r7, #12]
 8007d56:	60b9      	str	r1, [r7, #8]
 8007d58:	607a      	str	r2, [r7, #4]
 8007d5a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d64:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d101      	bne.n	8007d74 <HAL_DMA_Start_IT+0x26>
 8007d70:	2302      	movs	r3, #2
 8007d72:	e040      	b.n	8007df6 <HAL_DMA_Start_IT+0xa8>
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2201      	movs	r2, #1
 8007d78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d12f      	bne.n	8007de8 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2202      	movs	r2, #2
 8007d8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2200      	movs	r2, #0
 8007d94:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	68b9      	ldr	r1, [r7, #8]
 8007d9c:	68f8      	ldr	r0, [r7, #12]
 8007d9e:	f000 fbfe 	bl	800859e <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007da6:	223f      	movs	r2, #63	; 0x3f
 8007da8:	409a      	lsls	r2, r3
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f042 0216 	orr.w	r2, r2, #22
 8007dbc:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d007      	beq.n	8007dd6 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f042 0208 	orr.w	r2, r2, #8
 8007dd4:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f042 0201 	orr.w	r2, r2, #1
 8007de4:	601a      	str	r2, [r3, #0]
 8007de6:	e005      	b.n	8007df4 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2200      	movs	r2, #0
 8007dec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007df0:	2302      	movs	r3, #2
 8007df2:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007df4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3718      	adds	r7, #24
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}

08007dfe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b084      	sub	sp, #16
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e0a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007e0c:	f7fe fd36 	bl	800687c <HAL_GetTick>
 8007e10:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	2b02      	cmp	r3, #2
 8007e1c:	d008      	beq.n	8007e30 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2280      	movs	r2, #128	; 0x80
 8007e22:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	e052      	b.n	8007ed6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f022 0216 	bic.w	r2, r2, #22
 8007e3e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	695a      	ldr	r2, [r3, #20]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e4e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d103      	bne.n	8007e60 <HAL_DMA_Abort+0x62>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d007      	beq.n	8007e70 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f022 0208 	bic.w	r2, r2, #8
 8007e6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f022 0201 	bic.w	r2, r2, #1
 8007e7e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007e80:	e013      	b.n	8007eaa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007e82:	f7fe fcfb 	bl	800687c <HAL_GetTick>
 8007e86:	4602      	mov	r2, r0
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	1ad3      	subs	r3, r2, r3
 8007e8c:	2b05      	cmp	r3, #5
 8007e8e:	d90c      	bls.n	8007eaa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2220      	movs	r2, #32
 8007e94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2203      	movs	r2, #3
 8007e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007ea6:	2303      	movs	r3, #3
 8007ea8:	e015      	b.n	8007ed6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f003 0301 	and.w	r3, r3, #1
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d1e4      	bne.n	8007e82 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ebc:	223f      	movs	r2, #63	; 0x3f
 8007ebe:	409a      	lsls	r2, r3
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3710      	adds	r7, #16
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007ede:	b480      	push	{r7}
 8007ee0:	b083      	sub	sp, #12
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	2b02      	cmp	r3, #2
 8007ef0:	d004      	beq.n	8007efc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2280      	movs	r2, #128	; 0x80
 8007ef6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	e00c      	b.n	8007f16 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2205      	movs	r2, #5
 8007f00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f022 0201 	bic.w	r2, r2, #1
 8007f12:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007f14:	2300      	movs	r3, #0
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	370c      	adds	r7, #12
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr

08007f22 <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode). 
  * @param  Timeout       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b08a      	sub	sp, #40	; 0x28
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	60f8      	str	r0, [r7, #12]
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	607a      	str	r2, [r7, #4]
 8007f2e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK; 
 8007f30:	2300      	movs	r3, #0
 8007f32:	77fb      	strb	r3, [r7, #31]
  uint32_t mask_cpltlevel;
  uint32_t tickstart = HAL_GetTick(); 
 8007f34:	f7fe fca2 	bl	800687c <HAL_GetTick>
 8007f38:	61b8      	str	r0, [r7, #24]
  uint32_t tmpisr;
  
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007f40:	b2db      	uxtb	r3, r3
 8007f42:	2b02      	cmp	r3, #2
 8007f44:	d008      	beq.n	8007f58 <HAL_DMA_PollForTransfer+0x36>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2280      	movs	r2, #128	; 0x80
 8007f4a:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007f54:	2301      	movs	r3, #1
 8007f56:	e0bf      	b.n	80080d8 <HAL_DMA_PollForTransfer+0x1b6>
  }

  /* Polling mode not supported in circular mode and double buffering mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d005      	beq.n	8007f72 <HAL_DMA_PollForTransfer+0x50>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f6c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	e0b2      	b.n	80080d8 <HAL_DMA_PollForTransfer+0x1b6>
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8007f72:	7afb      	ldrb	r3, [r7, #11]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d106      	bne.n	8007f86 <HAL_DMA_PollForTransfer+0x64>
  {
    /* Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f7c:	2220      	movs	r2, #32
 8007f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f82:	627b      	str	r3, [r7, #36]	; 0x24
 8007f84:	e005      	b.n	8007f92 <HAL_DMA_PollForTransfer+0x70>
  }
  else
  {
    /* Half Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f8a:	2210      	movs	r2, #16
 8007f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f90:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f96:	617b      	str	r3, [r7, #20]
  tmpisr = regs->ISR;
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	623b      	str	r3, [r7, #32]
  
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 8007f9e:	e05a      	b.n	8008056 <HAL_DMA_PollForTransfer+0x134>
  {
    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fa6:	d017      	beq.n	8007fd8 <HAL_DMA_PollForTransfer+0xb6>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d007      	beq.n	8007fbe <HAL_DMA_PollForTransfer+0x9c>
 8007fae:	f7fe fc65 	bl	800687c <HAL_GetTick>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	69bb      	ldr	r3, [r7, #24]
 8007fb6:	1ad3      	subs	r3, r2, r3
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d20c      	bcs.n	8007fd8 <HAL_DMA_PollForTransfer+0xb6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2220      	movs	r2, #32
 8007fc2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007fd4:	2303      	movs	r3, #3
 8007fd6:	e07f      	b.n	80080d8 <HAL_DMA_PollForTransfer+0x1b6>
      }
    }

    /* Get the ISR register value */
    tmpisr = regs->ISR;
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	623b      	str	r3, [r7, #32]

    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fe2:	2208      	movs	r2, #8
 8007fe4:	409a      	lsls	r2, r3
 8007fe6:	6a3b      	ldr	r3, [r7, #32]
 8007fe8:	4013      	ands	r3, r2
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d00b      	beq.n	8008006 <HAL_DMA_PollForTransfer+0xe4>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ff2:	f043 0201 	orr.w	r2, r3, #1
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ffe:	2208      	movs	r2, #8
 8008000:	409a      	lsls	r2, r3
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800800a:	2201      	movs	r2, #1
 800800c:	409a      	lsls	r2, r3
 800800e:	6a3b      	ldr	r3, [r7, #32]
 8008010:	4013      	ands	r3, r2
 8008012:	2b00      	cmp	r3, #0
 8008014:	d00b      	beq.n	800802e <HAL_DMA_PollForTransfer+0x10c>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800801a:	f043 0202 	orr.w	r2, r3, #2
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008026:	2201      	movs	r2, #1
 8008028:	409a      	lsls	r2, r3
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008032:	2204      	movs	r2, #4
 8008034:	409a      	lsls	r2, r3
 8008036:	6a3b      	ldr	r3, [r7, #32]
 8008038:	4013      	ands	r3, r2
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00b      	beq.n	8008056 <HAL_DMA_PollForTransfer+0x134>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008042:	f043 0204 	orr.w	r2, r3, #4
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the Direct Mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800804e:	2204      	movs	r2, #4
 8008050:	409a      	lsls	r2, r3
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	609a      	str	r2, [r3, #8]
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 8008056:	6a3a      	ldr	r2, [r7, #32]
 8008058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805a:	4013      	ands	r3, r2
 800805c:	2b00      	cmp	r3, #0
 800805e:	d105      	bne.n	800806c <HAL_DMA_PollForTransfer+0x14a>
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008064:	f003 0301 	and.w	r3, r3, #1
 8008068:	2b00      	cmp	r3, #0
 800806a:	d099      	beq.n	8007fa0 <HAL_DMA_PollForTransfer+0x7e>
    }
  }
  
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008070:	2b00      	cmp	r3, #0
 8008072:	d018      	beq.n	80080a6 <HAL_DMA_PollForTransfer+0x184>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008078:	f003 0301 	and.w	r3, r3, #1
 800807c:	2b00      	cmp	r3, #0
 800807e:	d012      	beq.n	80080a6 <HAL_DMA_PollForTransfer+0x184>
    {
      HAL_DMA_Abort(hdma);
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	f7ff febc 	bl	8007dfe <HAL_DMA_Abort>
    
      /* Clear the half transfer and transfer complete flags */
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800808a:	2230      	movs	r2, #48	; 0x30
 800808c:	409a      	lsls	r2, r3
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	609a      	str	r2, [r3, #8]
    
      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2201      	movs	r2, #1
 8008096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2200      	movs	r2, #0
 800809e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      return HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	e018      	b.n	80080d8 <HAL_DMA_PollForTransfer+0x1b6>
   }
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 80080a6:	7afb      	ldrb	r3, [r7, #11]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d10e      	bne.n	80080ca <HAL_DMA_PollForTransfer+0x1a8>
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080b0:	2230      	movs	r2, #48	; 0x30
 80080b2:	409a      	lsls	r2, r3
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	609a      	str	r2, [r3, #8]
    
    hdma->State = HAL_DMA_STATE_READY;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2200      	movs	r2, #0
 80080c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80080c8:	e005      	b.n	80080d6 <HAL_DMA_PollForTransfer+0x1b4>
  }
  else
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080ce:	2210      	movs	r2, #16
 80080d0:	409a      	lsls	r2, r3
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	609a      	str	r2, [r3, #8]
  }
  
  return status;
 80080d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3728      	adds	r7, #40	; 0x28
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b086      	sub	sp, #24
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80080e8:	2300      	movs	r3, #0
 80080ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80080ec:	4b8e      	ldr	r3, [pc, #568]	; (8008328 <HAL_DMA_IRQHandler+0x248>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a8e      	ldr	r2, [pc, #568]	; (800832c <HAL_DMA_IRQHandler+0x24c>)
 80080f2:	fba2 2303 	umull	r2, r3, r2, r3
 80080f6:	0a9b      	lsrs	r3, r3, #10
 80080f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800810a:	2208      	movs	r2, #8
 800810c:	409a      	lsls	r2, r3
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	4013      	ands	r3, r2
 8008112:	2b00      	cmp	r3, #0
 8008114:	d01a      	beq.n	800814c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f003 0304 	and.w	r3, r3, #4
 8008120:	2b00      	cmp	r3, #0
 8008122:	d013      	beq.n	800814c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f022 0204 	bic.w	r2, r2, #4
 8008132:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008138:	2208      	movs	r2, #8
 800813a:	409a      	lsls	r2, r3
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008144:	f043 0201 	orr.w	r2, r3, #1
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008150:	2201      	movs	r2, #1
 8008152:	409a      	lsls	r2, r3
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	4013      	ands	r3, r2
 8008158:	2b00      	cmp	r3, #0
 800815a:	d012      	beq.n	8008182 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	695b      	ldr	r3, [r3, #20]
 8008162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008166:	2b00      	cmp	r3, #0
 8008168:	d00b      	beq.n	8008182 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800816e:	2201      	movs	r2, #1
 8008170:	409a      	lsls	r2, r3
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800817a:	f043 0202 	orr.w	r2, r3, #2
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008186:	2204      	movs	r2, #4
 8008188:	409a      	lsls	r2, r3
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	4013      	ands	r3, r2
 800818e:	2b00      	cmp	r3, #0
 8008190:	d012      	beq.n	80081b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f003 0302 	and.w	r3, r3, #2
 800819c:	2b00      	cmp	r3, #0
 800819e:	d00b      	beq.n	80081b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081a4:	2204      	movs	r2, #4
 80081a6:	409a      	lsls	r2, r3
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081b0:	f043 0204 	orr.w	r2, r3, #4
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081bc:	2210      	movs	r2, #16
 80081be:	409a      	lsls	r2, r3
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	4013      	ands	r3, r2
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d043      	beq.n	8008250 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f003 0308 	and.w	r3, r3, #8
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d03c      	beq.n	8008250 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081da:	2210      	movs	r2, #16
 80081dc:	409a      	lsls	r2, r3
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d018      	beq.n	8008222 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d108      	bne.n	8008210 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008202:	2b00      	cmp	r3, #0
 8008204:	d024      	beq.n	8008250 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	4798      	blx	r3
 800820e:	e01f      	b.n	8008250 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008214:	2b00      	cmp	r3, #0
 8008216:	d01b      	beq.n	8008250 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	4798      	blx	r3
 8008220:	e016      	b.n	8008250 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800822c:	2b00      	cmp	r3, #0
 800822e:	d107      	bne.n	8008240 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f022 0208 	bic.w	r2, r2, #8
 800823e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008244:	2b00      	cmp	r3, #0
 8008246:	d003      	beq.n	8008250 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008254:	2220      	movs	r2, #32
 8008256:	409a      	lsls	r2, r3
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	4013      	ands	r3, r2
 800825c:	2b00      	cmp	r3, #0
 800825e:	f000 808f 	beq.w	8008380 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f003 0310 	and.w	r3, r3, #16
 800826c:	2b00      	cmp	r3, #0
 800826e:	f000 8087 	beq.w	8008380 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008276:	2220      	movs	r2, #32
 8008278:	409a      	lsls	r2, r3
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008284:	b2db      	uxtb	r3, r3
 8008286:	2b05      	cmp	r3, #5
 8008288:	d136      	bne.n	80082f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f022 0216 	bic.w	r2, r2, #22
 8008298:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	695a      	ldr	r2, [r3, #20]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80082a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d103      	bne.n	80082ba <HAL_DMA_IRQHandler+0x1da>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d007      	beq.n	80082ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f022 0208 	bic.w	r2, r2, #8
 80082c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082ce:	223f      	movs	r2, #63	; 0x3f
 80082d0:	409a      	lsls	r2, r3
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2201      	movs	r2, #1
 80082da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d07e      	beq.n	80083ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	4798      	blx	r3
        }
        return;
 80082f6:	e079      	b.n	80083ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008302:	2b00      	cmp	r3, #0
 8008304:	d01d      	beq.n	8008342 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008310:	2b00      	cmp	r3, #0
 8008312:	d10d      	bne.n	8008330 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008318:	2b00      	cmp	r3, #0
 800831a:	d031      	beq.n	8008380 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	4798      	blx	r3
 8008324:	e02c      	b.n	8008380 <HAL_DMA_IRQHandler+0x2a0>
 8008326:	bf00      	nop
 8008328:	20000058 	.word	0x20000058
 800832c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008334:	2b00      	cmp	r3, #0
 8008336:	d023      	beq.n	8008380 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	4798      	blx	r3
 8008340:	e01e      	b.n	8008380 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800834c:	2b00      	cmp	r3, #0
 800834e:	d10f      	bne.n	8008370 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f022 0210 	bic.w	r2, r2, #16
 800835e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2201      	movs	r2, #1
 8008364:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2200      	movs	r2, #0
 800836c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008374:	2b00      	cmp	r3, #0
 8008376:	d003      	beq.n	8008380 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008384:	2b00      	cmp	r3, #0
 8008386:	d032      	beq.n	80083ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800838c:	f003 0301 	and.w	r3, r3, #1
 8008390:	2b00      	cmp	r3, #0
 8008392:	d022      	beq.n	80083da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2205      	movs	r2, #5
 8008398:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f022 0201 	bic.w	r2, r2, #1
 80083aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	3301      	adds	r3, #1
 80083b0:	60bb      	str	r3, [r7, #8]
 80083b2:	697a      	ldr	r2, [r7, #20]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d307      	bcc.n	80083c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f003 0301 	and.w	r3, r3, #1
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d1f2      	bne.n	80083ac <HAL_DMA_IRQHandler+0x2cc>
 80083c6:	e000      	b.n	80083ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80083c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2201      	movs	r2, #1
 80083ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2200      	movs	r2, #0
 80083d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d005      	beq.n	80083ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	4798      	blx	r3
 80083ea:	e000      	b.n	80083ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80083ec:	bf00      	nop
    }
  }
}
 80083ee:	3718      	adds	r7, #24
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 80083f4:	b480      	push	{r7}
 80083f6:	b087      	sub	sp, #28
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	460b      	mov	r3, r1
 80083fe:	607a      	str	r2, [r7, #4]
 8008400:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 8008402:	2300      	movs	r3, #0
 8008404:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800840c:	2b01      	cmp	r3, #1
 800840e:	d101      	bne.n	8008414 <HAL_DMA_RegisterCallback+0x20>
 8008410:	2302      	movs	r3, #2
 8008412:	e03c      	b.n	800848e <HAL_DMA_RegisterCallback+0x9a>
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2201      	movs	r2, #1
 8008418:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008422:	b2db      	uxtb	r3, r3
 8008424:	2b01      	cmp	r3, #1
 8008426:	d129      	bne.n	800847c <HAL_DMA_RegisterCallback+0x88>
  {
    switch (CallbackID)
 8008428:	7afb      	ldrb	r3, [r7, #11]
 800842a:	2b05      	cmp	r3, #5
 800842c:	d829      	bhi.n	8008482 <HAL_DMA_RegisterCallback+0x8e>
 800842e:	a201      	add	r2, pc, #4	; (adr r2, 8008434 <HAL_DMA_RegisterCallback+0x40>)
 8008430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008434:	0800844d 	.word	0x0800844d
 8008438:	08008455 	.word	0x08008455
 800843c:	0800845d 	.word	0x0800845d
 8008440:	08008465 	.word	0x08008465
 8008444:	0800846d 	.word	0x0800846d
 8008448:	08008475 	.word	0x08008475
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8008452:	e017      	b.n	8008484 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800845a:	e013      	b.n	8008484 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 8008462:	e00f      	b.n	8008484 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 800846a:	e00b      	b.n	8008484 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 8008472:	e007      	b.n	8008484 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800847a:	e003      	b.n	8008484 <HAL_DMA_RegisterCallback+0x90>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800847c:	2301      	movs	r3, #1
 800847e:	75fb      	strb	r3, [r7, #23]
 8008480:	e000      	b.n	8008484 <HAL_DMA_RegisterCallback+0x90>
      break;
 8008482:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2200      	movs	r2, #0
 8008488:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 800848c:	7dfb      	ldrb	r3, [r7, #23]
}
 800848e:	4618      	mov	r0, r3
 8008490:	371c      	adds	r7, #28
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr

0800849a <HAL_DMA_UnRegisterCallback>:
  * @param  CallbackID           User Callback identifer
  *                               a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */              
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
 800849a:	b480      	push	{r7}
 800849c:	b085      	sub	sp, #20
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
 80084a2:	460b      	mov	r3, r1
 80084a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80084a6:	2300      	movs	r3, #0
 80084a8:	73fb      	strb	r3, [r7, #15]
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d101      	bne.n	80084b8 <HAL_DMA_UnRegisterCallback+0x1e>
 80084b4:	2302      	movs	r3, #2
 80084b6:	e052      	b.n	800855e <HAL_DMA_UnRegisterCallback+0xc4>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2201      	movs	r2, #1
 80084bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d141      	bne.n	8008550 <HAL_DMA_UnRegisterCallback+0xb6>
  {
    switch (CallbackID)
 80084cc:	78fb      	ldrb	r3, [r7, #3]
 80084ce:	2b06      	cmp	r3, #6
 80084d0:	d83b      	bhi.n	800854a <HAL_DMA_UnRegisterCallback+0xb0>
 80084d2:	a201      	add	r2, pc, #4	; (adr r2, 80084d8 <HAL_DMA_UnRegisterCallback+0x3e>)
 80084d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d8:	080084f5 	.word	0x080084f5
 80084dc:	080084fd 	.word	0x080084fd
 80084e0:	08008505 	.word	0x08008505
 80084e4:	0800850d 	.word	0x0800850d
 80084e8:	08008515 	.word	0x08008515
 80084ec:	0800851d 	.word	0x0800851d
 80084f0:	08008525 	.word	0x08008525
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = NULL;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 80084fa:	e02b      	b.n	8008554 <HAL_DMA_UnRegisterCallback+0xba>
      
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = NULL;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2200      	movs	r2, #0
 8008500:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8008502:	e027      	b.n	8008554 <HAL_DMA_UnRegisterCallback+0xba>
      
    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = NULL;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 800850a:	e023      	b.n	8008554 <HAL_DMA_UnRegisterCallback+0xba>
      
    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = NULL;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 8008512:	e01f      	b.n	8008554 <HAL_DMA_UnRegisterCallback+0xba>
      
    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = NULL;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2200      	movs	r2, #0
 8008518:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 800851a:	e01b      	b.n	8008554 <HAL_DMA_UnRegisterCallback+0xba>
      
    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = NULL;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
 8008522:	e017      	b.n	8008554 <HAL_DMA_UnRegisterCallback+0xba>
      
    case   HAL_DMA_XFER_ALL_CB_ID:
      hdma->XferCpltCallback = NULL;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2200      	movs	r2, #0
 8008528:	63da      	str	r2, [r3, #60]	; 0x3c
      hdma->XferHalfCpltCallback = NULL;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	641a      	str	r2, [r3, #64]	; 0x40
      hdma->XferM1CpltCallback = NULL;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2200      	movs	r2, #0
 8008534:	645a      	str	r2, [r3, #68]	; 0x44
      hdma->XferM1HalfCpltCallback = NULL;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2200      	movs	r2, #0
 800853a:	649a      	str	r2, [r3, #72]	; 0x48
      hdma->XferErrorCallback = NULL;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2200      	movs	r2, #0
 8008540:	64da      	str	r2, [r3, #76]	; 0x4c
      hdma->XferAbortCallback = NULL;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2200      	movs	r2, #0
 8008546:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
 8008548:	e004      	b.n	8008554 <HAL_DMA_UnRegisterCallback+0xba>
      
    default:
      status = HAL_ERROR;
 800854a:	2301      	movs	r3, #1
 800854c:	73fb      	strb	r3, [r7, #15]
      break;
 800854e:	e001      	b.n	8008554 <HAL_DMA_UnRegisterCallback+0xba>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 800855c:	7bfb      	ldrb	r3, [r7, #15]
}
 800855e:	4618      	mov	r0, r3
 8008560:	3714      	adds	r7, #20
 8008562:	46bd      	mov	sp, r7
 8008564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008568:	4770      	bx	lr

0800856a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800856a:	b480      	push	{r7}
 800856c:	b083      	sub	sp, #12
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008578:	b2db      	uxtb	r3, r3
}
 800857a:	4618      	mov	r0, r3
 800857c:	370c      	adds	r7, #12
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr

08008586 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008586:	b480      	push	{r7}
 8008588:	b083      	sub	sp, #12
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008592:	4618      	mov	r0, r3
 8008594:	370c      	adds	r7, #12
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr

0800859e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800859e:	b480      	push	{r7}
 80085a0:	b085      	sub	sp, #20
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	60f8      	str	r0, [r7, #12]
 80085a6:	60b9      	str	r1, [r7, #8]
 80085a8:	607a      	str	r2, [r7, #4]
 80085aa:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80085ba:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	683a      	ldr	r2, [r7, #0]
 80085c2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	2b40      	cmp	r3, #64	; 0x40
 80085ca:	d108      	bne.n	80085de <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	68ba      	ldr	r2, [r7, #8]
 80085da:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80085dc:	e007      	b.n	80085ee <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	68ba      	ldr	r2, [r7, #8]
 80085e4:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	60da      	str	r2, [r3, #12]
}
 80085ee:	bf00      	nop
 80085f0:	3714      	adds	r7, #20
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr

080085fa <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80085fa:	b480      	push	{r7}
 80085fc:	b085      	sub	sp, #20
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	b2db      	uxtb	r3, r3
 8008608:	3b10      	subs	r3, #16
 800860a:	4a14      	ldr	r2, [pc, #80]	; (800865c <DMA_CalcBaseAndBitshift+0x62>)
 800860c:	fba2 2303 	umull	r2, r3, r2, r3
 8008610:	091b      	lsrs	r3, r3, #4
 8008612:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008614:	4a12      	ldr	r2, [pc, #72]	; (8008660 <DMA_CalcBaseAndBitshift+0x66>)
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	4413      	add	r3, r2
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	461a      	mov	r2, r3
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2b03      	cmp	r3, #3
 8008626:	d909      	bls.n	800863c <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008630:	f023 0303 	bic.w	r3, r3, #3
 8008634:	1d1a      	adds	r2, r3, #4
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	659a      	str	r2, [r3, #88]	; 0x58
 800863a:	e007      	b.n	800864c <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008644:	f023 0303 	bic.w	r3, r3, #3
 8008648:	687a      	ldr	r2, [r7, #4]
 800864a:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008650:	4618      	mov	r0, r3
 8008652:	3714      	adds	r7, #20
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr
 800865c:	aaaaaaab 	.word	0xaaaaaaab
 8008660:	08051f74 	.word	0x08051f74

08008664 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008664:	b480      	push	{r7}
 8008666:	b085      	sub	sp, #20
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800866c:	2300      	movs	r3, #0
 800866e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008674:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	699b      	ldr	r3, [r3, #24]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d11f      	bne.n	80086be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	2b03      	cmp	r3, #3
 8008682:	d856      	bhi.n	8008732 <DMA_CheckFifoParam+0xce>
 8008684:	a201      	add	r2, pc, #4	; (adr r2, 800868c <DMA_CheckFifoParam+0x28>)
 8008686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800868a:	bf00      	nop
 800868c:	0800869d 	.word	0x0800869d
 8008690:	080086af 	.word	0x080086af
 8008694:	0800869d 	.word	0x0800869d
 8008698:	08008733 	.word	0x08008733
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d046      	beq.n	8008736 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80086a8:	2301      	movs	r3, #1
 80086aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80086ac:	e043      	b.n	8008736 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80086b6:	d140      	bne.n	800873a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80086bc:	e03d      	b.n	800873a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	699b      	ldr	r3, [r3, #24]
 80086c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086c6:	d121      	bne.n	800870c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	2b03      	cmp	r3, #3
 80086cc:	d837      	bhi.n	800873e <DMA_CheckFifoParam+0xda>
 80086ce:	a201      	add	r2, pc, #4	; (adr r2, 80086d4 <DMA_CheckFifoParam+0x70>)
 80086d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086d4:	080086e5 	.word	0x080086e5
 80086d8:	080086eb 	.word	0x080086eb
 80086dc:	080086e5 	.word	0x080086e5
 80086e0:	080086fd 	.word	0x080086fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	73fb      	strb	r3, [r7, #15]
      break;
 80086e8:	e030      	b.n	800874c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d025      	beq.n	8008742 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80086f6:	2301      	movs	r3, #1
 80086f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80086fa:	e022      	b.n	8008742 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008700:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008704:	d11f      	bne.n	8008746 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008706:	2301      	movs	r3, #1
 8008708:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800870a:	e01c      	b.n	8008746 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	2b02      	cmp	r3, #2
 8008710:	d903      	bls.n	800871a <DMA_CheckFifoParam+0xb6>
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	2b03      	cmp	r3, #3
 8008716:	d003      	beq.n	8008720 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008718:	e018      	b.n	800874c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800871a:	2301      	movs	r3, #1
 800871c:	73fb      	strb	r3, [r7, #15]
      break;
 800871e:	e015      	b.n	800874c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008724:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008728:	2b00      	cmp	r3, #0
 800872a:	d00e      	beq.n	800874a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800872c:	2301      	movs	r3, #1
 800872e:	73fb      	strb	r3, [r7, #15]
      break;
 8008730:	e00b      	b.n	800874a <DMA_CheckFifoParam+0xe6>
      break;
 8008732:	bf00      	nop
 8008734:	e00a      	b.n	800874c <DMA_CheckFifoParam+0xe8>
      break;
 8008736:	bf00      	nop
 8008738:	e008      	b.n	800874c <DMA_CheckFifoParam+0xe8>
      break;
 800873a:	bf00      	nop
 800873c:	e006      	b.n	800874c <DMA_CheckFifoParam+0xe8>
      break;
 800873e:	bf00      	nop
 8008740:	e004      	b.n	800874c <DMA_CheckFifoParam+0xe8>
      break;
 8008742:	bf00      	nop
 8008744:	e002      	b.n	800874c <DMA_CheckFifoParam+0xe8>
      break;   
 8008746:	bf00      	nop
 8008748:	e000      	b.n	800874c <DMA_CheckFifoParam+0xe8>
      break;
 800874a:	bf00      	nop
    }
  } 
  
  return status; 
 800874c:	7bfb      	ldrb	r3, [r7, #15]
}
 800874e:	4618      	mov	r0, r3
 8008750:	3714      	adds	r7, #20
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr

0800875a <HAL_DMAEx_MultiBufferStart>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 800875a:	b580      	push	{r7, lr}
 800875c:	b086      	sub	sp, #24
 800875e:	af00      	add	r7, sp, #0
 8008760:	60f8      	str	r0, [r7, #12]
 8008762:	60b9      	str	r1, [r7, #8]
 8008764:	607a      	str	r2, [r7, #4]
 8008766:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008768:	2300      	movs	r3, #0
 800876a:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	2b80      	cmp	r3, #128	; 0x80
 8008772:	d106      	bne.n	8008782 <HAL_DMAEx_MultiBufferStart+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f44f 7280 	mov.w	r2, #256	; 0x100
 800877a:	655a      	str	r2, [r3, #84]	; 0x54
    status = HAL_ERROR;
 800877c:	2301      	movs	r3, #1
 800877e:	75fb      	strb	r3, [r7, #23]
 8008780:	e031      	b.n	80087e6 <HAL_DMAEx_MultiBufferStart+0x8c>
  }
  else
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008788:	2b01      	cmp	r3, #1
 800878a:	d101      	bne.n	8008790 <HAL_DMAEx_MultiBufferStart+0x36>
 800878c:	2302      	movs	r3, #2
 800878e:	e02b      	b.n	80087e8 <HAL_DMAEx_MultiBufferStart+0x8e>
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2201      	movs	r2, #1
 8008794:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    if(HAL_DMA_STATE_READY == hdma->State)
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d11e      	bne.n	80087e2 <HAL_DMAEx_MultiBufferStart+0x88>
    {
      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_BUSY; 
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2202      	movs	r2, #2
 80087a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      /* Enable the double buffer mode */
      hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	681a      	ldr	r2, [r3, #0]
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80087ba:	601a      	str	r2, [r3, #0]
      
      /* Configure DMA Stream destination address */
      hdma->Instance->M1AR = SecondMemAddress;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	683a      	ldr	r2, [r7, #0]
 80087c2:	611a      	str	r2, [r3, #16]
      
      /* Configure the source, destination address and the data length */
      DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80087c4:	6a3b      	ldr	r3, [r7, #32]
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	68b9      	ldr	r1, [r7, #8]
 80087ca:	68f8      	ldr	r0, [r7, #12]
 80087cc:	f001 f972 	bl	8009ab4 <DMA_MultiBufferSetConfig>
      
      /* Enable the peripheral */
      __HAL_DMA_ENABLE(hdma);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	681a      	ldr	r2, [r3, #0]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f042 0201 	orr.w	r2, r2, #1
 80087de:	601a      	str	r2, [r3, #0]
 80087e0:	e001      	b.n	80087e6 <HAL_DMAEx_MultiBufferStart+0x8c>
    }
    else
    {
      /* Return error status */
      status = HAL_BUSY;
 80087e2:	2302      	movs	r3, #2
 80087e4:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 80087e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3718      	adds	r7, #24
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b086      	sub	sp, #24
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	607a      	str	r2, [r7, #4]
 80087fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80087fe:	2300      	movs	r3, #0
 8008800:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	2b80      	cmp	r3, #128	; 0x80
 8008808:	d106      	bne.n	8008818 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008810:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008812:	2301      	movs	r3, #1
 8008814:	f001 b911 	b.w	8009a3a <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800881c:	2b00      	cmp	r3, #0
 800881e:	d007      	beq.n	8008830 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008824:	2b00      	cmp	r3, #0
 8008826:	d003      	beq.n	8008830 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800882c:	2b00      	cmp	r3, #0
 800882e:	d105      	bne.n	800883c <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2240      	movs	r2, #64	; 0x40
 8008834:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008836:	2301      	movs	r3, #1
 8008838:	f001 b8ff 	b.w	8009a3a <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008842:	2b01      	cmp	r3, #1
 8008844:	d102      	bne.n	800884c <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 8008846:	2302      	movs	r3, #2
 8008848:	f001 b8f7 	b.w	8009a3a <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2201      	movs	r2, #1
 8008850:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800885a:	b2db      	uxtb	r3, r3
 800885c:	2b01      	cmp	r3, #1
 800885e:	f041 80e5 	bne.w	8009a2c <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2202      	movs	r2, #2
 8008866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2200      	movs	r2, #0
 800886e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800887e:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	683a      	ldr	r2, [r7, #0]
 8008886:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8008888:	6a3b      	ldr	r3, [r7, #32]
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	68b9      	ldr	r1, [r7, #8]
 800888e:	68f8      	ldr	r0, [r7, #12]
 8008890:	f001 f910 	bl	8009ab4 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	461a      	mov	r2, r3
 800889a:	4b8d      	ldr	r3, [pc, #564]	; (8008ad0 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 800889c:	429a      	cmp	r2, r3
 800889e:	d960      	bls.n	8008962 <HAL_DMAEx_MultiBufferStart_IT+0x172>
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a8b      	ldr	r2, [pc, #556]	; (8008ad4 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d057      	beq.n	800895a <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a8a      	ldr	r2, [pc, #552]	; (8008ad8 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d050      	beq.n	8008956 <HAL_DMAEx_MultiBufferStart_IT+0x166>
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a88      	ldr	r2, [pc, #544]	; (8008adc <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d049      	beq.n	8008952 <HAL_DMAEx_MultiBufferStart_IT+0x162>
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a87      	ldr	r2, [pc, #540]	; (8008ae0 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d042      	beq.n	800894e <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a85      	ldr	r2, [pc, #532]	; (8008ae4 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d03a      	beq.n	8008948 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a84      	ldr	r2, [pc, #528]	; (8008ae8 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d032      	beq.n	8008942 <HAL_DMAEx_MultiBufferStart_IT+0x152>
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a82      	ldr	r2, [pc, #520]	; (8008aec <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d02a      	beq.n	800893c <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a81      	ldr	r2, [pc, #516]	; (8008af0 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d022      	beq.n	8008936 <HAL_DMAEx_MultiBufferStart_IT+0x146>
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a7f      	ldr	r2, [pc, #508]	; (8008af4 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d01a      	beq.n	8008930 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a7e      	ldr	r2, [pc, #504]	; (8008af8 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d012      	beq.n	800892a <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a7c      	ldr	r2, [pc, #496]	; (8008afc <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d00a      	beq.n	8008924 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a7b      	ldr	r2, [pc, #492]	; (8008b00 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d102      	bne.n	800891e <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8008918:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800891c:	e01e      	b.n	800895c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800891e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008922:	e01b      	b.n	800895c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8008924:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008928:	e018      	b.n	800895c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800892a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800892e:	e015      	b.n	800895c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8008930:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008934:	e012      	b.n	800895c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8008936:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800893a:	e00f      	b.n	800895c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800893c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008940:	e00c      	b.n	800895c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8008942:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008946:	e009      	b.n	800895c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8008948:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800894c:	e006      	b.n	800895c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800894e:	2320      	movs	r3, #32
 8008950:	e004      	b.n	800895c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8008952:	2320      	movs	r3, #32
 8008954:	e002      	b.n	800895c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8008956:	2320      	movs	r3, #32
 8008958:	e000      	b.n	800895c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800895a:	2320      	movs	r3, #32
 800895c:	4a69      	ldr	r2, [pc, #420]	; (8008b04 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 800895e:	60d3      	str	r3, [r2, #12]
 8008960:	e14f      	b.n	8008c02 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	461a      	mov	r2, r3
 8008968:	4b67      	ldr	r3, [pc, #412]	; (8008b08 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 800896a:	429a      	cmp	r2, r3
 800896c:	d960      	bls.n	8008a30 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a58      	ldr	r2, [pc, #352]	; (8008ad4 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d057      	beq.n	8008a28 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a56      	ldr	r2, [pc, #344]	; (8008ad8 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d050      	beq.n	8008a24 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a55      	ldr	r2, [pc, #340]	; (8008adc <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d049      	beq.n	8008a20 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a53      	ldr	r2, [pc, #332]	; (8008ae0 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d042      	beq.n	8008a1c <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a52      	ldr	r2, [pc, #328]	; (8008ae4 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d03a      	beq.n	8008a16 <HAL_DMAEx_MultiBufferStart_IT+0x226>
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a50      	ldr	r2, [pc, #320]	; (8008ae8 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d032      	beq.n	8008a10 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4a4f      	ldr	r2, [pc, #316]	; (8008aec <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d02a      	beq.n	8008a0a <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a4d      	ldr	r2, [pc, #308]	; (8008af0 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d022      	beq.n	8008a04 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a4c      	ldr	r2, [pc, #304]	; (8008af4 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d01a      	beq.n	80089fe <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a4a      	ldr	r2, [pc, #296]	; (8008af8 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d012      	beq.n	80089f8 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a49      	ldr	r2, [pc, #292]	; (8008afc <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d00a      	beq.n	80089f2 <HAL_DMAEx_MultiBufferStart_IT+0x202>
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a47      	ldr	r2, [pc, #284]	; (8008b00 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d102      	bne.n	80089ec <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 80089e6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80089ea:	e01e      	b.n	8008a2a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80089ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80089f0:	e01b      	b.n	8008a2a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80089f2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80089f6:	e018      	b.n	8008a2a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80089f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80089fc:	e015      	b.n	8008a2a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80089fe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008a02:	e012      	b.n	8008a2a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8008a04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008a08:	e00f      	b.n	8008a2a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8008a0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008a0e:	e00c      	b.n	8008a2a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8008a10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008a14:	e009      	b.n	8008a2a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8008a16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008a1a:	e006      	b.n	8008a2a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8008a1c:	2320      	movs	r3, #32
 8008a1e:	e004      	b.n	8008a2a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8008a20:	2320      	movs	r3, #32
 8008a22:	e002      	b.n	8008a2a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8008a24:	2320      	movs	r3, #32
 8008a26:	e000      	b.n	8008a2a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8008a28:	2320      	movs	r3, #32
 8008a2a:	4a36      	ldr	r2, [pc, #216]	; (8008b04 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8008a2c:	6093      	str	r3, [r2, #8]
 8008a2e:	e0e8      	b.n	8008c02 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	461a      	mov	r2, r3
 8008a36:	4b35      	ldr	r3, [pc, #212]	; (8008b0c <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	f240 8082 	bls.w	8008b42 <HAL_DMAEx_MultiBufferStart_IT+0x352>
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4a24      	ldr	r2, [pc, #144]	; (8008ad4 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d078      	beq.n	8008b3a <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a22      	ldr	r2, [pc, #136]	; (8008ad8 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d071      	beq.n	8008b36 <HAL_DMAEx_MultiBufferStart_IT+0x346>
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4a21      	ldr	r2, [pc, #132]	; (8008adc <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d06a      	beq.n	8008b32 <HAL_DMAEx_MultiBufferStart_IT+0x342>
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a1f      	ldr	r2, [pc, #124]	; (8008ae0 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d063      	beq.n	8008b2e <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a1e      	ldr	r2, [pc, #120]	; (8008ae4 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d05b      	beq.n	8008b28 <HAL_DMAEx_MultiBufferStart_IT+0x338>
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a1c      	ldr	r2, [pc, #112]	; (8008ae8 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d053      	beq.n	8008b22 <HAL_DMAEx_MultiBufferStart_IT+0x332>
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a1b      	ldr	r2, [pc, #108]	; (8008aec <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d04b      	beq.n	8008b1c <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a19      	ldr	r2, [pc, #100]	; (8008af0 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d043      	beq.n	8008b16 <HAL_DMAEx_MultiBufferStart_IT+0x326>
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a18      	ldr	r2, [pc, #96]	; (8008af4 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d03b      	beq.n	8008b10 <HAL_DMAEx_MultiBufferStart_IT+0x320>
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a16      	ldr	r2, [pc, #88]	; (8008af8 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d012      	beq.n	8008ac8 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a15      	ldr	r2, [pc, #84]	; (8008afc <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d00a      	beq.n	8008ac2 <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a13      	ldr	r2, [pc, #76]	; (8008b00 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d102      	bne.n	8008abc <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 8008ab6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008aba:	e03f      	b.n	8008b3c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008abc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008ac0:	e03c      	b.n	8008b3c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008ac2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008ac6:	e039      	b.n	8008b3c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008ac8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008acc:	e036      	b.n	8008b3c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008ace:	bf00      	nop
 8008ad0:	40026458 	.word	0x40026458
 8008ad4:	40026010 	.word	0x40026010
 8008ad8:	40026410 	.word	0x40026410
 8008adc:	40026070 	.word	0x40026070
 8008ae0:	40026470 	.word	0x40026470
 8008ae4:	40026028 	.word	0x40026028
 8008ae8:	40026428 	.word	0x40026428
 8008aec:	40026088 	.word	0x40026088
 8008af0:	40026488 	.word	0x40026488
 8008af4:	40026040 	.word	0x40026040
 8008af8:	40026440 	.word	0x40026440
 8008afc:	400260a0 	.word	0x400260a0
 8008b00:	400264a0 	.word	0x400264a0
 8008b04:	40026400 	.word	0x40026400
 8008b08:	400260b8 	.word	0x400260b8
 8008b0c:	40026058 	.word	0x40026058
 8008b10:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008b14:	e012      	b.n	8008b3c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008b16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b1a:	e00f      	b.n	8008b3c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008b1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b20:	e00c      	b.n	8008b3c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008b22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b26:	e009      	b.n	8008b3c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008b28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b2c:	e006      	b.n	8008b3c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008b2e:	2320      	movs	r3, #32
 8008b30:	e004      	b.n	8008b3c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008b32:	2320      	movs	r3, #32
 8008b34:	e002      	b.n	8008b3c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008b36:	2320      	movs	r3, #32
 8008b38:	e000      	b.n	8008b3c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008b3a:	2320      	movs	r3, #32
 8008b3c:	4a8c      	ldr	r2, [pc, #560]	; (8008d70 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8008b3e:	60d3      	str	r3, [r2, #12]
 8008b40:	e05f      	b.n	8008c02 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a8b      	ldr	r2, [pc, #556]	; (8008d74 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d057      	beq.n	8008bfc <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a89      	ldr	r2, [pc, #548]	; (8008d78 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d050      	beq.n	8008bf8 <HAL_DMAEx_MultiBufferStart_IT+0x408>
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a88      	ldr	r2, [pc, #544]	; (8008d7c <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d049      	beq.n	8008bf4 <HAL_DMAEx_MultiBufferStart_IT+0x404>
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a86      	ldr	r2, [pc, #536]	; (8008d80 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d042      	beq.n	8008bf0 <HAL_DMAEx_MultiBufferStart_IT+0x400>
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a85      	ldr	r2, [pc, #532]	; (8008d84 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d03a      	beq.n	8008bea <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a83      	ldr	r2, [pc, #524]	; (8008d88 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d032      	beq.n	8008be4 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a82      	ldr	r2, [pc, #520]	; (8008d8c <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d02a      	beq.n	8008bde <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a80      	ldr	r2, [pc, #512]	; (8008d90 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d022      	beq.n	8008bd8 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a7f      	ldr	r2, [pc, #508]	; (8008d94 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d01a      	beq.n	8008bd2 <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a7d      	ldr	r2, [pc, #500]	; (8008d98 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d012      	beq.n	8008bcc <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a7c      	ldr	r2, [pc, #496]	; (8008d9c <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d00a      	beq.n	8008bc6 <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a7a      	ldr	r2, [pc, #488]	; (8008da0 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d102      	bne.n	8008bc0 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 8008bba:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008bbe:	e01e      	b.n	8008bfe <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008bc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008bc4:	e01b      	b.n	8008bfe <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008bc6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008bca:	e018      	b.n	8008bfe <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008bcc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008bd0:	e015      	b.n	8008bfe <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008bd2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008bd6:	e012      	b.n	8008bfe <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008bd8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008bdc:	e00f      	b.n	8008bfe <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008bde:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008be2:	e00c      	b.n	8008bfe <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008be4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008be8:	e009      	b.n	8008bfe <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008bea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008bee:	e006      	b.n	8008bfe <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008bf0:	2320      	movs	r3, #32
 8008bf2:	e004      	b.n	8008bfe <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008bf4:	2320      	movs	r3, #32
 8008bf6:	e002      	b.n	8008bfe <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008bf8:	2320      	movs	r3, #32
 8008bfa:	e000      	b.n	8008bfe <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008bfc:	2320      	movs	r3, #32
 8008bfe:	4a5c      	ldr	r2, [pc, #368]	; (8008d70 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8008c00:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	461a      	mov	r2, r3
 8008c08:	4b66      	ldr	r3, [pc, #408]	; (8008da4 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d960      	bls.n	8008cd0 <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4a58      	ldr	r2, [pc, #352]	; (8008d74 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d057      	beq.n	8008cc8 <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a56      	ldr	r2, [pc, #344]	; (8008d78 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d050      	beq.n	8008cc4 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4a55      	ldr	r2, [pc, #340]	; (8008d7c <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d049      	beq.n	8008cc0 <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a53      	ldr	r2, [pc, #332]	; (8008d80 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d042      	beq.n	8008cbc <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4a52      	ldr	r2, [pc, #328]	; (8008d84 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d03a      	beq.n	8008cb6 <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4a50      	ldr	r2, [pc, #320]	; (8008d88 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d032      	beq.n	8008cb0 <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4a4f      	ldr	r2, [pc, #316]	; (8008d8c <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d02a      	beq.n	8008caa <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4a4d      	ldr	r2, [pc, #308]	; (8008d90 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d022      	beq.n	8008ca4 <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4a4c      	ldr	r2, [pc, #304]	; (8008d94 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d01a      	beq.n	8008c9e <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a4a      	ldr	r2, [pc, #296]	; (8008d98 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d012      	beq.n	8008c98 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a49      	ldr	r2, [pc, #292]	; (8008d9c <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d00a      	beq.n	8008c92 <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a47      	ldr	r2, [pc, #284]	; (8008da0 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d102      	bne.n	8008c8c <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 8008c86:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008c8a:	e01e      	b.n	8008cca <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008c8c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008c90:	e01b      	b.n	8008cca <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008c92:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008c96:	e018      	b.n	8008cca <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008c98:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008c9c:	e015      	b.n	8008cca <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008c9e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008ca2:	e012      	b.n	8008cca <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008ca4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ca8:	e00f      	b.n	8008cca <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008caa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cae:	e00c      	b.n	8008cca <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008cb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cb4:	e009      	b.n	8008cca <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008cb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cba:	e006      	b.n	8008cca <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008cbc:	2310      	movs	r3, #16
 8008cbe:	e004      	b.n	8008cca <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008cc0:	2310      	movs	r3, #16
 8008cc2:	e002      	b.n	8008cca <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008cc4:	2310      	movs	r3, #16
 8008cc6:	e000      	b.n	8008cca <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008cc8:	2310      	movs	r3, #16
 8008cca:	4a37      	ldr	r2, [pc, #220]	; (8008da8 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8008ccc:	60d3      	str	r3, [r2, #12]
 8008cce:	e14f      	b.n	8008f70 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	4b35      	ldr	r3, [pc, #212]	; (8008dac <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	f240 8082 	bls.w	8008de2 <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4a24      	ldr	r2, [pc, #144]	; (8008d74 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d078      	beq.n	8008dda <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a22      	ldr	r2, [pc, #136]	; (8008d78 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d071      	beq.n	8008dd6 <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a21      	ldr	r2, [pc, #132]	; (8008d7c <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d06a      	beq.n	8008dd2 <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a1f      	ldr	r2, [pc, #124]	; (8008d80 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d063      	beq.n	8008dce <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a1e      	ldr	r2, [pc, #120]	; (8008d84 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d05b      	beq.n	8008dc8 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a1c      	ldr	r2, [pc, #112]	; (8008d88 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d053      	beq.n	8008dc2 <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4a1b      	ldr	r2, [pc, #108]	; (8008d8c <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d04b      	beq.n	8008dbc <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a19      	ldr	r2, [pc, #100]	; (8008d90 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d043      	beq.n	8008db6 <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a18      	ldr	r2, [pc, #96]	; (8008d94 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d03b      	beq.n	8008db0 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a16      	ldr	r2, [pc, #88]	; (8008d98 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d012      	beq.n	8008d68 <HAL_DMAEx_MultiBufferStart_IT+0x578>
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a15      	ldr	r2, [pc, #84]	; (8008d9c <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d00a      	beq.n	8008d62 <HAL_DMAEx_MultiBufferStart_IT+0x572>
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a13      	ldr	r2, [pc, #76]	; (8008da0 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d102      	bne.n	8008d5c <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 8008d56:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008d5a:	e03f      	b.n	8008ddc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008d5c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008d60:	e03c      	b.n	8008ddc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008d62:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008d66:	e039      	b.n	8008ddc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008d68:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008d6c:	e036      	b.n	8008ddc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008d6e:	bf00      	nop
 8008d70:	40026000 	.word	0x40026000
 8008d74:	40026010 	.word	0x40026010
 8008d78:	40026410 	.word	0x40026410
 8008d7c:	40026070 	.word	0x40026070
 8008d80:	40026470 	.word	0x40026470
 8008d84:	40026028 	.word	0x40026028
 8008d88:	40026428 	.word	0x40026428
 8008d8c:	40026088 	.word	0x40026088
 8008d90:	40026488 	.word	0x40026488
 8008d94:	40026040 	.word	0x40026040
 8008d98:	40026440 	.word	0x40026440
 8008d9c:	400260a0 	.word	0x400260a0
 8008da0:	400264a0 	.word	0x400264a0
 8008da4:	40026458 	.word	0x40026458
 8008da8:	40026400 	.word	0x40026400
 8008dac:	400260b8 	.word	0x400260b8
 8008db0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008db4:	e012      	b.n	8008ddc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008db6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008dba:	e00f      	b.n	8008ddc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008dbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008dc0:	e00c      	b.n	8008ddc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008dc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008dc6:	e009      	b.n	8008ddc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008dc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008dcc:	e006      	b.n	8008ddc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008dce:	2310      	movs	r3, #16
 8008dd0:	e004      	b.n	8008ddc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008dd2:	2310      	movs	r3, #16
 8008dd4:	e002      	b.n	8008ddc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008dd6:	2310      	movs	r3, #16
 8008dd8:	e000      	b.n	8008ddc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008dda:	2310      	movs	r3, #16
 8008ddc:	4a8c      	ldr	r2, [pc, #560]	; (8009010 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8008dde:	6093      	str	r3, [r2, #8]
 8008de0:	e0c6      	b.n	8008f70 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	461a      	mov	r2, r3
 8008de8:	4b8a      	ldr	r3, [pc, #552]	; (8009014 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d960      	bls.n	8008eb0 <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a89      	ldr	r2, [pc, #548]	; (8009018 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d057      	beq.n	8008ea8 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a87      	ldr	r2, [pc, #540]	; (800901c <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d050      	beq.n	8008ea4 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a86      	ldr	r2, [pc, #536]	; (8009020 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d049      	beq.n	8008ea0 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a84      	ldr	r2, [pc, #528]	; (8009024 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d042      	beq.n	8008e9c <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a83      	ldr	r2, [pc, #524]	; (8009028 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d03a      	beq.n	8008e96 <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a81      	ldr	r2, [pc, #516]	; (800902c <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d032      	beq.n	8008e90 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a80      	ldr	r2, [pc, #512]	; (8009030 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d02a      	beq.n	8008e8a <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a7e      	ldr	r2, [pc, #504]	; (8009034 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d022      	beq.n	8008e84 <HAL_DMAEx_MultiBufferStart_IT+0x694>
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4a7d      	ldr	r2, [pc, #500]	; (8009038 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d01a      	beq.n	8008e7e <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a7b      	ldr	r2, [pc, #492]	; (800903c <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d012      	beq.n	8008e78 <HAL_DMAEx_MultiBufferStart_IT+0x688>
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a7a      	ldr	r2, [pc, #488]	; (8009040 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d00a      	beq.n	8008e72 <HAL_DMAEx_MultiBufferStart_IT+0x682>
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a78      	ldr	r2, [pc, #480]	; (8009044 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d102      	bne.n	8008e6c <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 8008e66:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008e6a:	e01e      	b.n	8008eaa <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008e6c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008e70:	e01b      	b.n	8008eaa <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008e72:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008e76:	e018      	b.n	8008eaa <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008e78:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008e7c:	e015      	b.n	8008eaa <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008e7e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008e82:	e012      	b.n	8008eaa <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008e84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e88:	e00f      	b.n	8008eaa <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008e8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e8e:	e00c      	b.n	8008eaa <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008e90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e94:	e009      	b.n	8008eaa <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008e96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e9a:	e006      	b.n	8008eaa <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008e9c:	2310      	movs	r3, #16
 8008e9e:	e004      	b.n	8008eaa <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008ea0:	2310      	movs	r3, #16
 8008ea2:	e002      	b.n	8008eaa <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008ea4:	2310      	movs	r3, #16
 8008ea6:	e000      	b.n	8008eaa <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008ea8:	2310      	movs	r3, #16
 8008eaa:	4a67      	ldr	r2, [pc, #412]	; (8009048 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8008eac:	60d3      	str	r3, [r2, #12]
 8008eae:	e05f      	b.n	8008f70 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a58      	ldr	r2, [pc, #352]	; (8009018 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d057      	beq.n	8008f6a <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4a57      	ldr	r2, [pc, #348]	; (800901c <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d050      	beq.n	8008f66 <HAL_DMAEx_MultiBufferStart_IT+0x776>
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a55      	ldr	r2, [pc, #340]	; (8009020 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d049      	beq.n	8008f62 <HAL_DMAEx_MultiBufferStart_IT+0x772>
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4a54      	ldr	r2, [pc, #336]	; (8009024 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d042      	beq.n	8008f5e <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a52      	ldr	r2, [pc, #328]	; (8009028 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d03a      	beq.n	8008f58 <HAL_DMAEx_MultiBufferStart_IT+0x768>
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4a51      	ldr	r2, [pc, #324]	; (800902c <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d032      	beq.n	8008f52 <HAL_DMAEx_MultiBufferStart_IT+0x762>
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a4f      	ldr	r2, [pc, #316]	; (8009030 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d02a      	beq.n	8008f4c <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a4e      	ldr	r2, [pc, #312]	; (8009034 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d022      	beq.n	8008f46 <HAL_DMAEx_MultiBufferStart_IT+0x756>
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4a4c      	ldr	r2, [pc, #304]	; (8009038 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d01a      	beq.n	8008f40 <HAL_DMAEx_MultiBufferStart_IT+0x750>
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4a4b      	ldr	r2, [pc, #300]	; (800903c <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d012      	beq.n	8008f3a <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4a49      	ldr	r2, [pc, #292]	; (8009040 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d00a      	beq.n	8008f34 <HAL_DMAEx_MultiBufferStart_IT+0x744>
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4a48      	ldr	r2, [pc, #288]	; (8009044 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d102      	bne.n	8008f2e <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 8008f28:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008f2c:	e01e      	b.n	8008f6c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008f2e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008f32:	e01b      	b.n	8008f6c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008f34:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008f38:	e018      	b.n	8008f6c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008f3a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008f3e:	e015      	b.n	8008f6c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008f40:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008f44:	e012      	b.n	8008f6c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008f46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f4a:	e00f      	b.n	8008f6c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008f4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f50:	e00c      	b.n	8008f6c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008f52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f56:	e009      	b.n	8008f6c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008f58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f5c:	e006      	b.n	8008f6c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008f5e:	2310      	movs	r3, #16
 8008f60:	e004      	b.n	8008f6c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008f62:	2310      	movs	r3, #16
 8008f64:	e002      	b.n	8008f6c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008f66:	2310      	movs	r3, #16
 8008f68:	e000      	b.n	8008f6c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008f6a:	2310      	movs	r3, #16
 8008f6c:	4a36      	ldr	r2, [pc, #216]	; (8009048 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8008f6e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	461a      	mov	r2, r3
 8008f76:	4b35      	ldr	r3, [pc, #212]	; (800904c <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	f240 8082 	bls.w	8009082 <HAL_DMAEx_MultiBufferStart_IT+0x892>
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4a25      	ldr	r2, [pc, #148]	; (8009018 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d078      	beq.n	800907a <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a23      	ldr	r2, [pc, #140]	; (800901c <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d071      	beq.n	8009076 <HAL_DMAEx_MultiBufferStart_IT+0x886>
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4a22      	ldr	r2, [pc, #136]	; (8009020 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d06a      	beq.n	8009072 <HAL_DMAEx_MultiBufferStart_IT+0x882>
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a20      	ldr	r2, [pc, #128]	; (8009024 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d063      	beq.n	800906e <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a1f      	ldr	r2, [pc, #124]	; (8009028 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d05b      	beq.n	8009068 <HAL_DMAEx_MultiBufferStart_IT+0x878>
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a1d      	ldr	r2, [pc, #116]	; (800902c <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d053      	beq.n	8009062 <HAL_DMAEx_MultiBufferStart_IT+0x872>
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a1c      	ldr	r2, [pc, #112]	; (8009030 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d04b      	beq.n	800905c <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a1a      	ldr	r2, [pc, #104]	; (8009034 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d043      	beq.n	8009056 <HAL_DMAEx_MultiBufferStart_IT+0x866>
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a19      	ldr	r2, [pc, #100]	; (8009038 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d03b      	beq.n	8009050 <HAL_DMAEx_MultiBufferStart_IT+0x860>
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a17      	ldr	r2, [pc, #92]	; (800903c <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d012      	beq.n	8009008 <HAL_DMAEx_MultiBufferStart_IT+0x818>
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a16      	ldr	r2, [pc, #88]	; (8009040 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d00a      	beq.n	8009002 <HAL_DMAEx_MultiBufferStart_IT+0x812>
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a14      	ldr	r2, [pc, #80]	; (8009044 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d102      	bne.n	8008ffc <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 8008ff6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008ffa:	e03f      	b.n	800907c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8008ffc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009000:	e03c      	b.n	800907c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8009002:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009006:	e039      	b.n	800907c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8009008:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800900c:	e036      	b.n	800907c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800900e:	bf00      	nop
 8009010:	40026400 	.word	0x40026400
 8009014:	40026058 	.word	0x40026058
 8009018:	40026010 	.word	0x40026010
 800901c:	40026410 	.word	0x40026410
 8009020:	40026070 	.word	0x40026070
 8009024:	40026470 	.word	0x40026470
 8009028:	40026028 	.word	0x40026028
 800902c:	40026428 	.word	0x40026428
 8009030:	40026088 	.word	0x40026088
 8009034:	40026488 	.word	0x40026488
 8009038:	40026040 	.word	0x40026040
 800903c:	40026440 	.word	0x40026440
 8009040:	400260a0 	.word	0x400260a0
 8009044:	400264a0 	.word	0x400264a0
 8009048:	40026000 	.word	0x40026000
 800904c:	40026458 	.word	0x40026458
 8009050:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009054:	e012      	b.n	800907c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8009056:	f44f 7300 	mov.w	r3, #512	; 0x200
 800905a:	e00f      	b.n	800907c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800905c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009060:	e00c      	b.n	800907c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8009062:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009066:	e009      	b.n	800907c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8009068:	f44f 7300 	mov.w	r3, #512	; 0x200
 800906c:	e006      	b.n	800907c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800906e:	2308      	movs	r3, #8
 8009070:	e004      	b.n	800907c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8009072:	2308      	movs	r3, #8
 8009074:	e002      	b.n	800907c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8009076:	2308      	movs	r3, #8
 8009078:	e000      	b.n	800907c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800907a:	2308      	movs	r3, #8
 800907c:	4a8c      	ldr	r2, [pc, #560]	; (80092b0 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 800907e:	60d3      	str	r3, [r2, #12]
 8009080:	e14e      	b.n	8009320 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	461a      	mov	r2, r3
 8009088:	4b8a      	ldr	r3, [pc, #552]	; (80092b4 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 800908a:	429a      	cmp	r2, r3
 800908c:	d960      	bls.n	8009150 <HAL_DMAEx_MultiBufferStart_IT+0x960>
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a89      	ldr	r2, [pc, #548]	; (80092b8 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d057      	beq.n	8009148 <HAL_DMAEx_MultiBufferStart_IT+0x958>
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4a87      	ldr	r2, [pc, #540]	; (80092bc <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d050      	beq.n	8009144 <HAL_DMAEx_MultiBufferStart_IT+0x954>
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4a86      	ldr	r2, [pc, #536]	; (80092c0 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d049      	beq.n	8009140 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a84      	ldr	r2, [pc, #528]	; (80092c4 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d042      	beq.n	800913c <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	4a83      	ldr	r2, [pc, #524]	; (80092c8 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d03a      	beq.n	8009136 <HAL_DMAEx_MultiBufferStart_IT+0x946>
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4a81      	ldr	r2, [pc, #516]	; (80092cc <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d032      	beq.n	8009130 <HAL_DMAEx_MultiBufferStart_IT+0x940>
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4a80      	ldr	r2, [pc, #512]	; (80092d0 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d02a      	beq.n	800912a <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4a7e      	ldr	r2, [pc, #504]	; (80092d4 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d022      	beq.n	8009124 <HAL_DMAEx_MultiBufferStart_IT+0x934>
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4a7d      	ldr	r2, [pc, #500]	; (80092d8 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d01a      	beq.n	800911e <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	4a7b      	ldr	r2, [pc, #492]	; (80092dc <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d012      	beq.n	8009118 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4a7a      	ldr	r2, [pc, #488]	; (80092e0 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d00a      	beq.n	8009112 <HAL_DMAEx_MultiBufferStart_IT+0x922>
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4a78      	ldr	r2, [pc, #480]	; (80092e4 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d102      	bne.n	800910c <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 8009106:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800910a:	e01e      	b.n	800914a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800910c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009110:	e01b      	b.n	800914a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8009112:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009116:	e018      	b.n	800914a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8009118:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800911c:	e015      	b.n	800914a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800911e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009122:	e012      	b.n	800914a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8009124:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009128:	e00f      	b.n	800914a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800912a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800912e:	e00c      	b.n	800914a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8009130:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009134:	e009      	b.n	800914a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8009136:	f44f 7300 	mov.w	r3, #512	; 0x200
 800913a:	e006      	b.n	800914a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800913c:	2308      	movs	r3, #8
 800913e:	e004      	b.n	800914a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8009140:	2308      	movs	r3, #8
 8009142:	e002      	b.n	800914a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8009144:	2308      	movs	r3, #8
 8009146:	e000      	b.n	800914a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8009148:	2308      	movs	r3, #8
 800914a:	4a59      	ldr	r2, [pc, #356]	; (80092b0 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 800914c:	6093      	str	r3, [r2, #8]
 800914e:	e0e7      	b.n	8009320 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	461a      	mov	r2, r3
 8009156:	4b64      	ldr	r3, [pc, #400]	; (80092e8 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8009158:	429a      	cmp	r2, r3
 800915a:	d960      	bls.n	800921e <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a55      	ldr	r2, [pc, #340]	; (80092b8 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d057      	beq.n	8009216 <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a54      	ldr	r2, [pc, #336]	; (80092bc <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d050      	beq.n	8009212 <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4a52      	ldr	r2, [pc, #328]	; (80092c0 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d049      	beq.n	800920e <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4a51      	ldr	r2, [pc, #324]	; (80092c4 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d042      	beq.n	800920a <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4a4f      	ldr	r2, [pc, #316]	; (80092c8 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d03a      	beq.n	8009204 <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	4a4e      	ldr	r2, [pc, #312]	; (80092cc <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d032      	beq.n	80091fe <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a4c      	ldr	r2, [pc, #304]	; (80092d0 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d02a      	beq.n	80091f8 <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4a4b      	ldr	r2, [pc, #300]	; (80092d4 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d022      	beq.n	80091f2 <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a49      	ldr	r2, [pc, #292]	; (80092d8 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d01a      	beq.n	80091ec <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4a48      	ldr	r2, [pc, #288]	; (80092dc <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d012      	beq.n	80091e6 <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a46      	ldr	r2, [pc, #280]	; (80092e0 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d00a      	beq.n	80091e0 <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4a45      	ldr	r2, [pc, #276]	; (80092e4 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d102      	bne.n	80091da <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 80091d4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80091d8:	e01e      	b.n	8009218 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80091da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80091de:	e01b      	b.n	8009218 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80091e0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80091e4:	e018      	b.n	8009218 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80091e6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80091ea:	e015      	b.n	8009218 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80091ec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80091f0:	e012      	b.n	8009218 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80091f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091f6:	e00f      	b.n	8009218 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80091f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091fc:	e00c      	b.n	8009218 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80091fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009202:	e009      	b.n	8009218 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8009204:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009208:	e006      	b.n	8009218 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800920a:	2308      	movs	r3, #8
 800920c:	e004      	b.n	8009218 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800920e:	2308      	movs	r3, #8
 8009210:	e002      	b.n	8009218 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8009212:	2308      	movs	r3, #8
 8009214:	e000      	b.n	8009218 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8009216:	2308      	movs	r3, #8
 8009218:	4a34      	ldr	r2, [pc, #208]	; (80092ec <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 800921a:	60d3      	str	r3, [r2, #12]
 800921c:	e080      	b.n	8009320 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4a25      	ldr	r2, [pc, #148]	; (80092b8 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d078      	beq.n	800931a <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a23      	ldr	r2, [pc, #140]	; (80092bc <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d071      	beq.n	8009316 <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4a22      	ldr	r2, [pc, #136]	; (80092c0 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d06a      	beq.n	8009312 <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a20      	ldr	r2, [pc, #128]	; (80092c4 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d063      	beq.n	800930e <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a1f      	ldr	r2, [pc, #124]	; (80092c8 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d05b      	beq.n	8009308 <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a1d      	ldr	r2, [pc, #116]	; (80092cc <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d053      	beq.n	8009302 <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4a1c      	ldr	r2, [pc, #112]	; (80092d0 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d04b      	beq.n	80092fc <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4a1a      	ldr	r2, [pc, #104]	; (80092d4 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d043      	beq.n	80092f6 <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4a19      	ldr	r2, [pc, #100]	; (80092d8 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d03b      	beq.n	80092f0 <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4a17      	ldr	r2, [pc, #92]	; (80092dc <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d012      	beq.n	80092a8 <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4a16      	ldr	r2, [pc, #88]	; (80092e0 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d00a      	beq.n	80092a2 <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4a14      	ldr	r2, [pc, #80]	; (80092e4 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d102      	bne.n	800929c <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 8009296:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800929a:	e03f      	b.n	800931c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800929c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80092a0:	e03c      	b.n	800931c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80092a2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80092a6:	e039      	b.n	800931c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80092a8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80092ac:	e036      	b.n	800931c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80092ae:	bf00      	nop
 80092b0:	40026400 	.word	0x40026400
 80092b4:	400260b8 	.word	0x400260b8
 80092b8:	40026010 	.word	0x40026010
 80092bc:	40026410 	.word	0x40026410
 80092c0:	40026070 	.word	0x40026070
 80092c4:	40026470 	.word	0x40026470
 80092c8:	40026028 	.word	0x40026028
 80092cc:	40026428 	.word	0x40026428
 80092d0:	40026088 	.word	0x40026088
 80092d4:	40026488 	.word	0x40026488
 80092d8:	40026040 	.word	0x40026040
 80092dc:	40026440 	.word	0x40026440
 80092e0:	400260a0 	.word	0x400260a0
 80092e4:	400264a0 	.word	0x400264a0
 80092e8:	40026058 	.word	0x40026058
 80092ec:	40026000 	.word	0x40026000
 80092f0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80092f4:	e012      	b.n	800931c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80092f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092fa:	e00f      	b.n	800931c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80092fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009300:	e00c      	b.n	800931c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8009302:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009306:	e009      	b.n	800931c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8009308:	f44f 7300 	mov.w	r3, #512	; 0x200
 800930c:	e006      	b.n	800931c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800930e:	2308      	movs	r3, #8
 8009310:	e004      	b.n	800931c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8009312:	2308      	movs	r3, #8
 8009314:	e002      	b.n	800931c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8009316:	2308      	movs	r3, #8
 8009318:	e000      	b.n	800931c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800931a:	2308      	movs	r3, #8
 800931c:	4a8a      	ldr	r2, [pc, #552]	; (8009548 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 800931e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	461a      	mov	r2, r3
 8009326:	4b89      	ldr	r3, [pc, #548]	; (800954c <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8009328:	429a      	cmp	r2, r3
 800932a:	d960      	bls.n	80093ee <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a87      	ldr	r2, [pc, #540]	; (8009550 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d057      	beq.n	80093e6 <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a86      	ldr	r2, [pc, #536]	; (8009554 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d050      	beq.n	80093e2 <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a84      	ldr	r2, [pc, #528]	; (8009558 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d049      	beq.n	80093de <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a83      	ldr	r2, [pc, #524]	; (800955c <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d042      	beq.n	80093da <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a81      	ldr	r2, [pc, #516]	; (8009560 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d03a      	beq.n	80093d4 <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4a80      	ldr	r2, [pc, #512]	; (8009564 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d032      	beq.n	80093ce <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a7e      	ldr	r2, [pc, #504]	; (8009568 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d02a      	beq.n	80093c8 <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a7d      	ldr	r2, [pc, #500]	; (800956c <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d022      	beq.n	80093c2 <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a7b      	ldr	r2, [pc, #492]	; (8009570 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d01a      	beq.n	80093bc <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4a7a      	ldr	r2, [pc, #488]	; (8009574 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d012      	beq.n	80093b6 <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a78      	ldr	r2, [pc, #480]	; (8009578 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d00a      	beq.n	80093b0 <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4a77      	ldr	r2, [pc, #476]	; (800957c <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d102      	bne.n	80093aa <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 80093a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80093a8:	e01e      	b.n	80093e8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80093aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80093ae:	e01b      	b.n	80093e8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80093b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80093b4:	e018      	b.n	80093e8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80093b6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80093ba:	e015      	b.n	80093e8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80093bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80093c0:	e012      	b.n	80093e8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80093c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093c6:	e00f      	b.n	80093e8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80093c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093cc:	e00c      	b.n	80093e8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80093ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093d2:	e009      	b.n	80093e8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80093d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093d8:	e006      	b.n	80093e8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80093da:	2304      	movs	r3, #4
 80093dc:	e004      	b.n	80093e8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80093de:	2304      	movs	r3, #4
 80093e0:	e002      	b.n	80093e8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80093e2:	2304      	movs	r3, #4
 80093e4:	e000      	b.n	80093e8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80093e6:	2304      	movs	r3, #4
 80093e8:	4a65      	ldr	r2, [pc, #404]	; (8009580 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 80093ea:	60d3      	str	r3, [r2, #12]
 80093ec:	e150      	b.n	8009690 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	461a      	mov	r2, r3
 80093f4:	4b63      	ldr	r3, [pc, #396]	; (8009584 <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d960      	bls.n	80094bc <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	4a54      	ldr	r2, [pc, #336]	; (8009550 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d057      	beq.n	80094b4 <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4a52      	ldr	r2, [pc, #328]	; (8009554 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d050      	beq.n	80094b0 <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4a51      	ldr	r2, [pc, #324]	; (8009558 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d049      	beq.n	80094ac <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a4f      	ldr	r2, [pc, #316]	; (800955c <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d042      	beq.n	80094a8 <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4a4e      	ldr	r2, [pc, #312]	; (8009560 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d03a      	beq.n	80094a2 <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4a4c      	ldr	r2, [pc, #304]	; (8009564 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d032      	beq.n	800949c <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4a4b      	ldr	r2, [pc, #300]	; (8009568 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d02a      	beq.n	8009496 <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4a49      	ldr	r2, [pc, #292]	; (800956c <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d022      	beq.n	8009490 <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4a48      	ldr	r2, [pc, #288]	; (8009570 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d01a      	beq.n	800948a <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a46      	ldr	r2, [pc, #280]	; (8009574 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d012      	beq.n	8009484 <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4a45      	ldr	r2, [pc, #276]	; (8009578 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d00a      	beq.n	800947e <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4a43      	ldr	r2, [pc, #268]	; (800957c <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d102      	bne.n	8009478 <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 8009472:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009476:	e01e      	b.n	80094b6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009478:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800947c:	e01b      	b.n	80094b6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800947e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009482:	e018      	b.n	80094b6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009484:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009488:	e015      	b.n	80094b6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800948a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800948e:	e012      	b.n	80094b6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009490:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009494:	e00f      	b.n	80094b6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009496:	f44f 7380 	mov.w	r3, #256	; 0x100
 800949a:	e00c      	b.n	80094b6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800949c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80094a0:	e009      	b.n	80094b6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80094a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80094a6:	e006      	b.n	80094b6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80094a8:	2304      	movs	r3, #4
 80094aa:	e004      	b.n	80094b6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80094ac:	2304      	movs	r3, #4
 80094ae:	e002      	b.n	80094b6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80094b0:	2304      	movs	r3, #4
 80094b2:	e000      	b.n	80094b6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80094b4:	2304      	movs	r3, #4
 80094b6:	4a32      	ldr	r2, [pc, #200]	; (8009580 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 80094b8:	6093      	str	r3, [r2, #8]
 80094ba:	e0e9      	b.n	8009690 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	461a      	mov	r2, r3
 80094c2:	4b31      	ldr	r3, [pc, #196]	; (8009588 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 80094c4:	429a      	cmp	r2, r3
 80094c6:	f240 8083 	bls.w	80095d0 <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4a20      	ldr	r2, [pc, #128]	; (8009550 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d079      	beq.n	80095c8 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	4a1e      	ldr	r2, [pc, #120]	; (8009554 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d072      	beq.n	80095c4 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4a1d      	ldr	r2, [pc, #116]	; (8009558 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d06b      	beq.n	80095c0 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4a1b      	ldr	r2, [pc, #108]	; (800955c <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d064      	beq.n	80095bc <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4a1a      	ldr	r2, [pc, #104]	; (8009560 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d05c      	beq.n	80095b6 <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	4a18      	ldr	r2, [pc, #96]	; (8009564 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d054      	beq.n	80095b0 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4a17      	ldr	r2, [pc, #92]	; (8009568 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d04c      	beq.n	80095aa <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a15      	ldr	r2, [pc, #84]	; (800956c <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d044      	beq.n	80095a4 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4a14      	ldr	r2, [pc, #80]	; (8009570 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d03c      	beq.n	800959e <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4a12      	ldr	r2, [pc, #72]	; (8009574 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d034      	beq.n	8009598 <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4a11      	ldr	r2, [pc, #68]	; (8009578 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d02c      	beq.n	8009592 <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4a0f      	ldr	r2, [pc, #60]	; (800957c <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d124      	bne.n	800958c <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 8009542:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009546:	e040      	b.n	80095ca <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009548:	40026000 	.word	0x40026000
 800954c:	40026458 	.word	0x40026458
 8009550:	40026010 	.word	0x40026010
 8009554:	40026410 	.word	0x40026410
 8009558:	40026070 	.word	0x40026070
 800955c:	40026470 	.word	0x40026470
 8009560:	40026028 	.word	0x40026028
 8009564:	40026428 	.word	0x40026428
 8009568:	40026088 	.word	0x40026088
 800956c:	40026488 	.word	0x40026488
 8009570:	40026040 	.word	0x40026040
 8009574:	40026440 	.word	0x40026440
 8009578:	400260a0 	.word	0x400260a0
 800957c:	400264a0 	.word	0x400264a0
 8009580:	40026400 	.word	0x40026400
 8009584:	400260b8 	.word	0x400260b8
 8009588:	40026058 	.word	0x40026058
 800958c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009590:	e01b      	b.n	80095ca <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009592:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009596:	e018      	b.n	80095ca <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009598:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800959c:	e015      	b.n	80095ca <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800959e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80095a2:	e012      	b.n	80095ca <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80095a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80095a8:	e00f      	b.n	80095ca <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80095aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80095ae:	e00c      	b.n	80095ca <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80095b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80095b4:	e009      	b.n	80095ca <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80095b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80095ba:	e006      	b.n	80095ca <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80095bc:	2304      	movs	r3, #4
 80095be:	e004      	b.n	80095ca <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80095c0:	2304      	movs	r3, #4
 80095c2:	e002      	b.n	80095ca <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80095c4:	2304      	movs	r3, #4
 80095c6:	e000      	b.n	80095ca <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80095c8:	2304      	movs	r3, #4
 80095ca:	4a8b      	ldr	r2, [pc, #556]	; (80097f8 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 80095cc:	60d3      	str	r3, [r2, #12]
 80095ce:	e05f      	b.n	8009690 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a89      	ldr	r2, [pc, #548]	; (80097fc <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d057      	beq.n	800968a <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4a88      	ldr	r2, [pc, #544]	; (8009800 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d050      	beq.n	8009686 <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a86      	ldr	r2, [pc, #536]	; (8009804 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d049      	beq.n	8009682 <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	4a85      	ldr	r2, [pc, #532]	; (8009808 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d042      	beq.n	800967e <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a83      	ldr	r2, [pc, #524]	; (800980c <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d03a      	beq.n	8009678 <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4a82      	ldr	r2, [pc, #520]	; (8009810 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d032      	beq.n	8009672 <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a80      	ldr	r2, [pc, #512]	; (8009814 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d02a      	beq.n	800966c <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a7f      	ldr	r2, [pc, #508]	; (8009818 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d022      	beq.n	8009666 <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a7d      	ldr	r2, [pc, #500]	; (800981c <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d01a      	beq.n	8009660 <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a7c      	ldr	r2, [pc, #496]	; (8009820 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d012      	beq.n	800965a <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a7a      	ldr	r2, [pc, #488]	; (8009824 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d00a      	beq.n	8009654 <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a79      	ldr	r2, [pc, #484]	; (8009828 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d102      	bne.n	800964e <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 8009648:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800964c:	e01e      	b.n	800968c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800964e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009652:	e01b      	b.n	800968c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009654:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009658:	e018      	b.n	800968c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800965a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800965e:	e015      	b.n	800968c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009660:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009664:	e012      	b.n	800968c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009666:	f44f 7380 	mov.w	r3, #256	; 0x100
 800966a:	e00f      	b.n	800968c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800966c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009670:	e00c      	b.n	800968c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009672:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009676:	e009      	b.n	800968c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009678:	f44f 7380 	mov.w	r3, #256	; 0x100
 800967c:	e006      	b.n	800968c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800967e:	2304      	movs	r3, #4
 8009680:	e004      	b.n	800968c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009682:	2304      	movs	r3, #4
 8009684:	e002      	b.n	800968c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009686:	2304      	movs	r3, #4
 8009688:	e000      	b.n	800968c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800968a:	2304      	movs	r3, #4
 800968c:	4a5a      	ldr	r2, [pc, #360]	; (80097f8 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 800968e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	461a      	mov	r2, r3
 8009696:	4b65      	ldr	r3, [pc, #404]	; (800982c <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8009698:	429a      	cmp	r2, r3
 800969a:	d95c      	bls.n	8009756 <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a56      	ldr	r2, [pc, #344]	; (80097fc <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d053      	beq.n	800974e <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4a55      	ldr	r2, [pc, #340]	; (8009800 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d04c      	beq.n	800974a <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a53      	ldr	r2, [pc, #332]	; (8009804 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d045      	beq.n	8009746 <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4a52      	ldr	r2, [pc, #328]	; (8009808 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d03e      	beq.n	8009742 <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4a50      	ldr	r2, [pc, #320]	; (800980c <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d037      	beq.n	800973e <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4a4f      	ldr	r2, [pc, #316]	; (8009810 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d030      	beq.n	800973a <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4a4d      	ldr	r2, [pc, #308]	; (8009814 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d029      	beq.n	8009736 <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4a4c      	ldr	r2, [pc, #304]	; (8009818 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d022      	beq.n	8009732 <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a4a      	ldr	r2, [pc, #296]	; (800981c <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d01a      	beq.n	800972c <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a49      	ldr	r2, [pc, #292]	; (8009820 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d012      	beq.n	8009726 <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a47      	ldr	r2, [pc, #284]	; (8009824 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d00a      	beq.n	8009720 <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	4a46      	ldr	r2, [pc, #280]	; (8009828 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d102      	bne.n	800971a <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 8009714:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009718:	e01a      	b.n	8009750 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800971a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800971e:	e017      	b.n	8009750 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8009720:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009724:	e014      	b.n	8009750 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8009726:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800972a:	e011      	b.n	8009750 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800972c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009730:	e00e      	b.n	8009750 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8009732:	2340      	movs	r3, #64	; 0x40
 8009734:	e00c      	b.n	8009750 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8009736:	2340      	movs	r3, #64	; 0x40
 8009738:	e00a      	b.n	8009750 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800973a:	2340      	movs	r3, #64	; 0x40
 800973c:	e008      	b.n	8009750 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800973e:	2340      	movs	r3, #64	; 0x40
 8009740:	e006      	b.n	8009750 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8009742:	2301      	movs	r3, #1
 8009744:	e004      	b.n	8009750 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8009746:	2301      	movs	r3, #1
 8009748:	e002      	b.n	8009750 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800974a:	2301      	movs	r3, #1
 800974c:	e000      	b.n	8009750 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800974e:	2301      	movs	r3, #1
 8009750:	4a37      	ldr	r2, [pc, #220]	; (8009830 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8009752:	60d3      	str	r3, [r2, #12]
 8009754:	e141      	b.n	80099da <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	461a      	mov	r2, r3
 800975c:	4b35      	ldr	r3, [pc, #212]	; (8009834 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 800975e:	429a      	cmp	r2, r3
 8009760:	d97c      	bls.n	800985c <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4a25      	ldr	r2, [pc, #148]	; (80097fc <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d073      	beq.n	8009854 <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4a23      	ldr	r2, [pc, #140]	; (8009800 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d06c      	beq.n	8009850 <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4a22      	ldr	r2, [pc, #136]	; (8009804 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d065      	beq.n	800984c <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4a20      	ldr	r2, [pc, #128]	; (8009808 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d05e      	beq.n	8009848 <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a1f      	ldr	r2, [pc, #124]	; (800980c <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d057      	beq.n	8009844 <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4a1d      	ldr	r2, [pc, #116]	; (8009810 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d050      	beq.n	8009840 <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	4a1c      	ldr	r2, [pc, #112]	; (8009814 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d049      	beq.n	800983c <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	4a1a      	ldr	r2, [pc, #104]	; (8009818 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d042      	beq.n	8009838 <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4a19      	ldr	r2, [pc, #100]	; (800981c <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d01a      	beq.n	80097f2 <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a17      	ldr	r2, [pc, #92]	; (8009820 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d012      	beq.n	80097ec <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	4a16      	ldr	r2, [pc, #88]	; (8009824 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d00a      	beq.n	80097e6 <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4a14      	ldr	r2, [pc, #80]	; (8009828 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d102      	bne.n	80097e0 <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 80097da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80097de:	e03a      	b.n	8009856 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80097e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80097e4:	e037      	b.n	8009856 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80097e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80097ea:	e034      	b.n	8009856 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80097ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80097f0:	e031      	b.n	8009856 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80097f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80097f6:	e02e      	b.n	8009856 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80097f8:	40026000 	.word	0x40026000
 80097fc:	40026010 	.word	0x40026010
 8009800:	40026410 	.word	0x40026410
 8009804:	40026070 	.word	0x40026070
 8009808:	40026470 	.word	0x40026470
 800980c:	40026028 	.word	0x40026028
 8009810:	40026428 	.word	0x40026428
 8009814:	40026088 	.word	0x40026088
 8009818:	40026488 	.word	0x40026488
 800981c:	40026040 	.word	0x40026040
 8009820:	40026440 	.word	0x40026440
 8009824:	400260a0 	.word	0x400260a0
 8009828:	400264a0 	.word	0x400264a0
 800982c:	40026458 	.word	0x40026458
 8009830:	40026400 	.word	0x40026400
 8009834:	400260b8 	.word	0x400260b8
 8009838:	2340      	movs	r3, #64	; 0x40
 800983a:	e00c      	b.n	8009856 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800983c:	2340      	movs	r3, #64	; 0x40
 800983e:	e00a      	b.n	8009856 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009840:	2340      	movs	r3, #64	; 0x40
 8009842:	e008      	b.n	8009856 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009844:	2340      	movs	r3, #64	; 0x40
 8009846:	e006      	b.n	8009856 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009848:	2301      	movs	r3, #1
 800984a:	e004      	b.n	8009856 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800984c:	2301      	movs	r3, #1
 800984e:	e002      	b.n	8009856 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009850:	2301      	movs	r3, #1
 8009852:	e000      	b.n	8009856 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009854:	2301      	movs	r3, #1
 8009856:	4a7b      	ldr	r2, [pc, #492]	; (8009a44 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 8009858:	6093      	str	r3, [r2, #8]
 800985a:	e0be      	b.n	80099da <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	461a      	mov	r2, r3
 8009862:	4b79      	ldr	r3, [pc, #484]	; (8009a48 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8009864:	429a      	cmp	r2, r3
 8009866:	d95c      	bls.n	8009922 <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4a77      	ldr	r2, [pc, #476]	; (8009a4c <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d053      	beq.n	800991a <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4a76      	ldr	r2, [pc, #472]	; (8009a50 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8009878:	4293      	cmp	r3, r2
 800987a:	d04c      	beq.n	8009916 <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4a74      	ldr	r2, [pc, #464]	; (8009a54 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8009882:	4293      	cmp	r3, r2
 8009884:	d045      	beq.n	8009912 <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4a73      	ldr	r2, [pc, #460]	; (8009a58 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d03e      	beq.n	800990e <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	4a71      	ldr	r2, [pc, #452]	; (8009a5c <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d037      	beq.n	800990a <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	4a70      	ldr	r2, [pc, #448]	; (8009a60 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d030      	beq.n	8009906 <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	4a6e      	ldr	r2, [pc, #440]	; (8009a64 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d029      	beq.n	8009902 <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	4a6d      	ldr	r2, [pc, #436]	; (8009a68 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d022      	beq.n	80098fe <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4a6b      	ldr	r2, [pc, #428]	; (8009a6c <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d01a      	beq.n	80098f8 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4a6a      	ldr	r2, [pc, #424]	; (8009a70 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d012      	beq.n	80098f2 <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a68      	ldr	r2, [pc, #416]	; (8009a74 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d00a      	beq.n	80098ec <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4a67      	ldr	r2, [pc, #412]	; (8009a78 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d102      	bne.n	80098e6 <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 80098e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80098e4:	e01a      	b.n	800991c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80098e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80098ea:	e017      	b.n	800991c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80098ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80098f0:	e014      	b.n	800991c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80098f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80098f6:	e011      	b.n	800991c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80098f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80098fc:	e00e      	b.n	800991c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80098fe:	2340      	movs	r3, #64	; 0x40
 8009900:	e00c      	b.n	800991c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8009902:	2340      	movs	r3, #64	; 0x40
 8009904:	e00a      	b.n	800991c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8009906:	2340      	movs	r3, #64	; 0x40
 8009908:	e008      	b.n	800991c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800990a:	2340      	movs	r3, #64	; 0x40
 800990c:	e006      	b.n	800991c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800990e:	2301      	movs	r3, #1
 8009910:	e004      	b.n	800991c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8009912:	2301      	movs	r3, #1
 8009914:	e002      	b.n	800991c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8009916:	2301      	movs	r3, #1
 8009918:	e000      	b.n	800991c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800991a:	2301      	movs	r3, #1
 800991c:	4a57      	ldr	r2, [pc, #348]	; (8009a7c <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 800991e:	60d3      	str	r3, [r2, #12]
 8009920:	e05b      	b.n	80099da <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	4a49      	ldr	r2, [pc, #292]	; (8009a4c <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d053      	beq.n	80099d4 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a47      	ldr	r2, [pc, #284]	; (8009a50 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d04c      	beq.n	80099d0 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4a46      	ldr	r2, [pc, #280]	; (8009a54 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d045      	beq.n	80099cc <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4a44      	ldr	r2, [pc, #272]	; (8009a58 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d03e      	beq.n	80099c8 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4a43      	ldr	r2, [pc, #268]	; (8009a5c <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d037      	beq.n	80099c4 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4a41      	ldr	r2, [pc, #260]	; (8009a60 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d030      	beq.n	80099c0 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4a40      	ldr	r2, [pc, #256]	; (8009a64 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d029      	beq.n	80099bc <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a3e      	ldr	r2, [pc, #248]	; (8009a68 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d022      	beq.n	80099b8 <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4a3d      	ldr	r2, [pc, #244]	; (8009a6c <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d01a      	beq.n	80099b2 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a3b      	ldr	r2, [pc, #236]	; (8009a70 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d012      	beq.n	80099ac <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4a3a      	ldr	r2, [pc, #232]	; (8009a74 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d00a      	beq.n	80099a6 <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	4a38      	ldr	r2, [pc, #224]	; (8009a78 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d102      	bne.n	80099a0 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 800999a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800999e:	e01a      	b.n	80099d6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80099a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80099a4:	e017      	b.n	80099d6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80099a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80099aa:	e014      	b.n	80099d6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80099ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80099b0:	e011      	b.n	80099d6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80099b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80099b6:	e00e      	b.n	80099d6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80099b8:	2340      	movs	r3, #64	; 0x40
 80099ba:	e00c      	b.n	80099d6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80099bc:	2340      	movs	r3, #64	; 0x40
 80099be:	e00a      	b.n	80099d6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80099c0:	2340      	movs	r3, #64	; 0x40
 80099c2:	e008      	b.n	80099d6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80099c4:	2340      	movs	r3, #64	; 0x40
 80099c6:	e006      	b.n	80099d6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80099c8:	2301      	movs	r3, #1
 80099ca:	e004      	b.n	80099d6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80099cc:	2301      	movs	r3, #1
 80099ce:	e002      	b.n	80099d6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80099d0:	2301      	movs	r3, #1
 80099d2:	e000      	b.n	80099d6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80099d4:	2301      	movs	r3, #1
 80099d6:	4a29      	ldr	r2, [pc, #164]	; (8009a7c <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 80099d8:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	681a      	ldr	r2, [r3, #0]
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f042 0216 	orr.w	r2, r2, #22
 80099e8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	695a      	ldr	r2, [r3, #20]
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80099f8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d103      	bne.n	8009a0a <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d007      	beq.n	8009a1a <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	681a      	ldr	r2, [r3, #0]
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f042 0208 	orr.w	r2, r2, #8
 8009a18:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f042 0201 	orr.w	r2, r2, #1
 8009a28:	601a      	str	r2, [r3, #0]
 8009a2a:	e005      	b.n	8009a38 <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8009a34:	2302      	movs	r3, #2
 8009a36:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8009a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3718      	adds	r7, #24
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
 8009a42:	bf00      	nop
 8009a44:	40026400 	.word	0x40026400
 8009a48:	40026058 	.word	0x40026058
 8009a4c:	40026010 	.word	0x40026010
 8009a50:	40026410 	.word	0x40026410
 8009a54:	40026070 	.word	0x40026070
 8009a58:	40026470 	.word	0x40026470
 8009a5c:	40026028 	.word	0x40026028
 8009a60:	40026428 	.word	0x40026428
 8009a64:	40026088 	.word	0x40026088
 8009a68:	40026488 	.word	0x40026488
 8009a6c:	40026040 	.word	0x40026040
 8009a70:	40026440 	.word	0x40026440
 8009a74:	400260a0 	.word	0x400260a0
 8009a78:	400264a0 	.word	0x400264a0
 8009a7c:	40026000 	.word	0x40026000

08009a80 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b085      	sub	sp, #20
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	60f8      	str	r0, [r7, #12]
 8009a88:	60b9      	str	r1, [r7, #8]
 8009a8a:	4613      	mov	r3, r2
 8009a8c:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 8009a8e:	79fb      	ldrb	r3, [r7, #7]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d104      	bne.n	8009a9e <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	68ba      	ldr	r2, [r7, #8]
 8009a9a:	60da      	str	r2, [r3, #12]
 8009a9c:	e003      	b.n	8009aa6 <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	68ba      	ldr	r2, [r7, #8]
 8009aa4:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009aa6:	2300      	movs	r3, #0
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3714      	adds	r7, #20
 8009aac:	46bd      	mov	sp, r7
 8009aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab2:	4770      	bx	lr

08009ab4 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8009ab4:	b480      	push	{r7}
 8009ab6:	b085      	sub	sp, #20
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	60f8      	str	r0, [r7, #12]
 8009abc:	60b9      	str	r1, [r7, #8]
 8009abe:	607a      	str	r2, [r7, #4]
 8009ac0:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	683a      	ldr	r2, [r7, #0]
 8009ac8:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	689b      	ldr	r3, [r3, #8]
 8009ace:	2b40      	cmp	r3, #64	; 0x40
 8009ad0:	d108      	bne.n	8009ae4 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	687a      	ldr	r2, [r7, #4]
 8009ad8:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	68ba      	ldr	r2, [r7, #8]
 8009ae0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8009ae2:	e007      	b.n	8009af4 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	68ba      	ldr	r2, [r7, #8]
 8009aea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	60da      	str	r2, [r3, #12]
}
 8009af4:	bf00      	nop
 8009af6:	3714      	adds	r7, #20
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr

08009b00 <HAL_EXTI_SetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on EXTI configuration to be set.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_SetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b087      	sub	sp, #28
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d002      	beq.n	8009b16 <HAL_EXTI_SetConfigLine+0x16>
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d101      	bne.n	8009b1a <HAL_EXTI_SetConfigLine+0x1a>
  {
    return HAL_ERROR;
 8009b16:	2301      	movs	r3, #1
 8009b18:	e08f      	b.n	8009c3a <HAL_EXTI_SetConfigLine+0x13a>
  /* Check parameters */
  assert_param(IS_EXTI_LINE(pExtiConfig->Line));
  assert_param(IS_EXTI_MODE(pExtiConfig->Mode));

  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	681a      	ldr	r2, [r3, #0]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	601a      	str	r2, [r3, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f003 031f 	and.w	r3, r3, #31
 8009b2a:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	fa02 f303 	lsl.w	r3, r2, r3
 8009b34:	613b      	str	r3, [r7, #16]

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d052      	beq.n	8009be8 <HAL_EXTI_SetConfigLine+0xe8>
  {
    assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));

    /* Configure rising trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	689b      	ldr	r3, [r3, #8]
 8009b46:	f003 0301 	and.w	r3, r3, #1
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d006      	beq.n	8009b5c <HAL_EXTI_SetConfigLine+0x5c>
    {
      EXTI->RTSR |= maskline;
 8009b4e:	4b3e      	ldr	r3, [pc, #248]	; (8009c48 <HAL_EXTI_SetConfigLine+0x148>)
 8009b50:	689a      	ldr	r2, [r3, #8]
 8009b52:	493d      	ldr	r1, [pc, #244]	; (8009c48 <HAL_EXTI_SetConfigLine+0x148>)
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	4313      	orrs	r3, r2
 8009b58:	608b      	str	r3, [r1, #8]
 8009b5a:	e006      	b.n	8009b6a <HAL_EXTI_SetConfigLine+0x6a>
    }
    else
    {
      EXTI->RTSR &= ~maskline;
 8009b5c:	4b3a      	ldr	r3, [pc, #232]	; (8009c48 <HAL_EXTI_SetConfigLine+0x148>)
 8009b5e:	689a      	ldr	r2, [r3, #8]
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	43db      	mvns	r3, r3
 8009b64:	4938      	ldr	r1, [pc, #224]	; (8009c48 <HAL_EXTI_SetConfigLine+0x148>)
 8009b66:	4013      	ands	r3, r2
 8009b68:	608b      	str	r3, [r1, #8]
    }

    /* Configure falling trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	689b      	ldr	r3, [r3, #8]
 8009b6e:	f003 0302 	and.w	r3, r3, #2
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d006      	beq.n	8009b84 <HAL_EXTI_SetConfigLine+0x84>
    {
      EXTI->FTSR |= maskline;
 8009b76:	4b34      	ldr	r3, [pc, #208]	; (8009c48 <HAL_EXTI_SetConfigLine+0x148>)
 8009b78:	68da      	ldr	r2, [r3, #12]
 8009b7a:	4933      	ldr	r1, [pc, #204]	; (8009c48 <HAL_EXTI_SetConfigLine+0x148>)
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	60cb      	str	r3, [r1, #12]
 8009b82:	e006      	b.n	8009b92 <HAL_EXTI_SetConfigLine+0x92>
    }
    else
    {
      EXTI->FTSR &= ~maskline;
 8009b84:	4b30      	ldr	r3, [pc, #192]	; (8009c48 <HAL_EXTI_SetConfigLine+0x148>)
 8009b86:	68da      	ldr	r2, [r3, #12]
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	43db      	mvns	r3, r3
 8009b8c:	492e      	ldr	r1, [pc, #184]	; (8009c48 <HAL_EXTI_SetConfigLine+0x148>)
 8009b8e:	4013      	ands	r3, r2
 8009b90:	60cb      	str	r3, [r1, #12]
    }


    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8009b9a:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8009b9e:	d123      	bne.n	8009be8 <HAL_EXTI_SetConfigLine+0xe8>
    {
      assert_param(IS_EXTI_GPIO_PORT(pExtiConfig->GPIOSel));
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
 8009ba0:	4a2a      	ldr	r2, [pc, #168]	; (8009c4c <HAL_EXTI_SetConfigLine+0x14c>)
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	089b      	lsrs	r3, r3, #2
 8009ba6:	3302      	adds	r3, #2
 8009ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009bac:	60fb      	str	r3, [r7, #12]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	f003 0303 	and.w	r3, r3, #3
 8009bb4:	009b      	lsls	r3, r3, #2
 8009bb6:	220f      	movs	r2, #15
 8009bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8009bbc:	43db      	mvns	r3, r3
 8009bbe:	68fa      	ldr	r2, [r7, #12]
 8009bc0:	4013      	ands	r3, r2
 8009bc2:	60fb      	str	r3, [r7, #12]
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	68da      	ldr	r2, [r3, #12]
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	f003 0303 	and.w	r3, r3, #3
 8009bce:	009b      	lsls	r3, r3, #2
 8009bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8009bd4:	68fa      	ldr	r2, [r7, #12]
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	60fb      	str	r3, [r7, #12]
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 8009bda:	491c      	ldr	r1, [pc, #112]	; (8009c4c <HAL_EXTI_SetConfigLine+0x14c>)
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	089b      	lsrs	r3, r3, #2
 8009be0:	3302      	adds	r3, #2
 8009be2:	68fa      	ldr	r2, [r7, #12]
 8009be4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  /* Configure interrupt mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	685b      	ldr	r3, [r3, #4]
 8009bec:	f003 0301 	and.w	r3, r3, #1
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d006      	beq.n	8009c02 <HAL_EXTI_SetConfigLine+0x102>
  {
    EXTI->IMR |= maskline;
 8009bf4:	4b14      	ldr	r3, [pc, #80]	; (8009c48 <HAL_EXTI_SetConfigLine+0x148>)
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	4913      	ldr	r1, [pc, #76]	; (8009c48 <HAL_EXTI_SetConfigLine+0x148>)
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	4313      	orrs	r3, r2
 8009bfe:	600b      	str	r3, [r1, #0]
 8009c00:	e006      	b.n	8009c10 <HAL_EXTI_SetConfigLine+0x110>
  }
  else
  {
    EXTI->IMR &= ~maskline;
 8009c02:	4b11      	ldr	r3, [pc, #68]	; (8009c48 <HAL_EXTI_SetConfigLine+0x148>)
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	43db      	mvns	r3, r3
 8009c0a:	490f      	ldr	r1, [pc, #60]	; (8009c48 <HAL_EXTI_SetConfigLine+0x148>)
 8009c0c:	4013      	ands	r3, r2
 8009c0e:	600b      	str	r3, [r1, #0]
  }

  /* Configure event mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	f003 0302 	and.w	r3, r3, #2
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d006      	beq.n	8009c2a <HAL_EXTI_SetConfigLine+0x12a>
  {
    EXTI->EMR |= maskline;
 8009c1c:	4b0a      	ldr	r3, [pc, #40]	; (8009c48 <HAL_EXTI_SetConfigLine+0x148>)
 8009c1e:	685a      	ldr	r2, [r3, #4]
 8009c20:	4909      	ldr	r1, [pc, #36]	; (8009c48 <HAL_EXTI_SetConfigLine+0x148>)
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	4313      	orrs	r3, r2
 8009c26:	604b      	str	r3, [r1, #4]
 8009c28:	e006      	b.n	8009c38 <HAL_EXTI_SetConfigLine+0x138>
  }
  else
  {
    EXTI->EMR &= ~maskline;
 8009c2a:	4b07      	ldr	r3, [pc, #28]	; (8009c48 <HAL_EXTI_SetConfigLine+0x148>)
 8009c2c:	685a      	ldr	r2, [r3, #4]
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	43db      	mvns	r3, r3
 8009c32:	4905      	ldr	r1, [pc, #20]	; (8009c48 <HAL_EXTI_SetConfigLine+0x148>)
 8009c34:	4013      	ands	r3, r2
 8009c36:	604b      	str	r3, [r1, #4]
  }

  return HAL_OK;
 8009c38:	2300      	movs	r3, #0
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	371c      	adds	r7, #28
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c44:	4770      	bx	lr
 8009c46:	bf00      	nop
 8009c48:	40013c00 	.word	0x40013c00
 8009c4c:	40013800 	.word	0x40013800

08009c50 <HAL_EXTI_GetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on structure to store Exti configuration.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b087      	sub	sp, #28
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
 8009c58:	6039      	str	r1, [r7, #0]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d002      	beq.n	8009c66 <HAL_EXTI_GetConfigLine+0x16>
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d101      	bne.n	8009c6a <HAL_EXTI_GetConfigLine+0x1a>
  {
    return HAL_ERROR;
 8009c66:	2301      	movs	r3, #1
 8009c68:	e061      	b.n	8009d2e <HAL_EXTI_GetConfigLine+0xde>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* Store handle line number to configuration structure */
  pExtiConfig->Line = hexti->Line;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681a      	ldr	r2, [r3, #0]
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	601a      	str	r2, [r3, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f003 031f 	and.w	r3, r3, #31
 8009c7a:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	fa02 f303 	lsl.w	r3, r2, r3
 8009c84:	613b      	str	r3, [r7, #16]

  /* 1] Get core mode : interrupt */

  /* Check if selected line is enable */
  if ((EXTI->IMR & maskline) != 0x00u)
 8009c86:	4b2d      	ldr	r3, [pc, #180]	; (8009d3c <HAL_EXTI_GetConfigLine+0xec>)
 8009c88:	681a      	ldr	r2, [r3, #0]
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	4013      	ands	r3, r2
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d003      	beq.n	8009c9a <HAL_EXTI_GetConfigLine+0x4a>
  {
    pExtiConfig->Mode = EXTI_MODE_INTERRUPT;
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	2201      	movs	r2, #1
 8009c96:	605a      	str	r2, [r3, #4]
 8009c98:	e002      	b.n	8009ca0 <HAL_EXTI_GetConfigLine+0x50>
  }
  else
  {
    pExtiConfig->Mode = EXTI_MODE_NONE;
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	605a      	str	r2, [r3, #4]
  }

  /* Get event mode */
  /* Check if selected line is enable */
  if ((EXTI->EMR & maskline) != 0x00u)
 8009ca0:	4b26      	ldr	r3, [pc, #152]	; (8009d3c <HAL_EXTI_GetConfigLine+0xec>)
 8009ca2:	685a      	ldr	r2, [r3, #4]
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	4013      	ands	r3, r2
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d005      	beq.n	8009cb8 <HAL_EXTI_GetConfigLine+0x68>
  {
    pExtiConfig->Mode |= EXTI_MODE_EVENT;
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	685b      	ldr	r3, [r3, #4]
 8009cb0:	f043 0202 	orr.w	r2, r3, #2
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	605a      	str	r2, [r3, #4]
  }

  /* Get default Trigger and GPIOSel configuration */
  pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	609a      	str	r2, [r3, #8]
  pExtiConfig->GPIOSel = 0x00u;
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	60da      	str	r2, [r3, #12]

  /* 2] Get trigger for configurable lines : rising */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d02d      	beq.n	8009d2c <HAL_EXTI_GetConfigLine+0xdc>
  {
    /* Check if configuration of selected line is enable */
    if ((EXTI->RTSR & maskline) != 0x00u)
 8009cd0:	4b1a      	ldr	r3, [pc, #104]	; (8009d3c <HAL_EXTI_GetConfigLine+0xec>)
 8009cd2:	689a      	ldr	r2, [r3, #8]
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	4013      	ands	r3, r2
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d002      	beq.n	8009ce2 <HAL_EXTI_GetConfigLine+0x92>
    {
      pExtiConfig->Trigger = EXTI_TRIGGER_RISING;
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	2201      	movs	r2, #1
 8009ce0:	609a      	str	r2, [r3, #8]
    }

    /* Get falling configuration */
    /* Check if configuration of selected line is enable */
    if ((EXTI->FTSR & maskline) != 0x00u)
 8009ce2:	4b16      	ldr	r3, [pc, #88]	; (8009d3c <HAL_EXTI_GetConfigLine+0xec>)
 8009ce4:	68da      	ldr	r2, [r3, #12]
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	4013      	ands	r3, r2
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d005      	beq.n	8009cfa <HAL_EXTI_GetConfigLine+0xaa>
    {
      pExtiConfig->Trigger |= EXTI_TRIGGER_FALLING;
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	689b      	ldr	r3, [r3, #8]
 8009cf2:	f043 0202 	orr.w	r2, r3, #2
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	609a      	str	r2, [r3, #8]
    }

    /* Get Gpio port selection for gpio lines */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8009d02:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8009d06:	d111      	bne.n	8009d2c <HAL_EXTI_GetConfigLine+0xdc>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
 8009d08:	4a0d      	ldr	r2, [pc, #52]	; (8009d40 <HAL_EXTI_GetConfigLine+0xf0>)
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	089b      	lsrs	r3, r3, #2
 8009d0e:	3302      	adds	r3, #2
 8009d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d14:	60fb      	str	r3, [r7, #12]
      pExtiConfig->GPIOSel = ((regval << (SYSCFG_EXTICR1_EXTI1_Pos * (3uL - (linepos & 0x03u)))) >> 24);
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	43db      	mvns	r3, r3
 8009d1a:	f003 0303 	and.w	r3, r3, #3
 8009d1e:	009b      	lsls	r3, r3, #2
 8009d20:	68fa      	ldr	r2, [r7, #12]
 8009d22:	fa02 f303 	lsl.w	r3, r2, r3
 8009d26:	0e1a      	lsrs	r2, r3, #24
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	60da      	str	r2, [r3, #12]
    }
  }

  return HAL_OK;
 8009d2c:	2300      	movs	r3, #0
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	371c      	adds	r7, #28
 8009d32:	46bd      	mov	sp, r7
 8009d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d38:	4770      	bx	lr
 8009d3a:	bf00      	nop
 8009d3c:	40013c00 	.word	0x40013c00
 8009d40:	40013800 	.word	0x40013800

08009d44 <HAL_EXTI_ClearConfigLine>:
  * @brief  Clear whole configuration of a dedicated Exti line.
  * @param  hexti Exti handle.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_ClearConfigLine(EXTI_HandleTypeDef *hexti)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b087      	sub	sp, #28
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if (hexti == NULL)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d101      	bne.n	8009d56 <HAL_EXTI_ClearConfigLine+0x12>
  {
    return HAL_ERROR;
 8009d52:	2301      	movs	r3, #1
 8009d54:	e04c      	b.n	8009df0 <HAL_EXTI_ClearConfigLine+0xac>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f003 031f 	and.w	r3, r3, #31
 8009d5e:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 8009d60:	2201      	movs	r2, #1
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	fa02 f303 	lsl.w	r3, r2, r3
 8009d68:	613b      	str	r3, [r7, #16]

  /* 1] Clear interrupt mode */
  EXTI->IMR = (EXTI->IMR & ~maskline);
 8009d6a:	4b24      	ldr	r3, [pc, #144]	; (8009dfc <HAL_EXTI_ClearConfigLine+0xb8>)
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	43db      	mvns	r3, r3
 8009d72:	4922      	ldr	r1, [pc, #136]	; (8009dfc <HAL_EXTI_ClearConfigLine+0xb8>)
 8009d74:	4013      	ands	r3, r2
 8009d76:	600b      	str	r3, [r1, #0]

  /* 2] Clear event mode */
  EXTI->EMR = (EXTI->EMR & ~maskline);
 8009d78:	4b20      	ldr	r3, [pc, #128]	; (8009dfc <HAL_EXTI_ClearConfigLine+0xb8>)
 8009d7a:	685a      	ldr	r2, [r3, #4]
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	43db      	mvns	r3, r3
 8009d80:	491e      	ldr	r1, [pc, #120]	; (8009dfc <HAL_EXTI_ClearConfigLine+0xb8>)
 8009d82:	4013      	ands	r3, r2
 8009d84:	604b      	str	r3, [r1, #4]

  /* 3] Clear triggers in case of configurable lines */
  if ((hexti->Line & EXTI_CONFIG) != 0x00u)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d02d      	beq.n	8009dee <HAL_EXTI_ClearConfigLine+0xaa>
  {
    EXTI->RTSR = (EXTI->RTSR & ~maskline);
 8009d92:	4b1a      	ldr	r3, [pc, #104]	; (8009dfc <HAL_EXTI_ClearConfigLine+0xb8>)
 8009d94:	689a      	ldr	r2, [r3, #8]
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	43db      	mvns	r3, r3
 8009d9a:	4918      	ldr	r1, [pc, #96]	; (8009dfc <HAL_EXTI_ClearConfigLine+0xb8>)
 8009d9c:	4013      	ands	r3, r2
 8009d9e:	608b      	str	r3, [r1, #8]
    EXTI->FTSR = (EXTI->FTSR & ~maskline);
 8009da0:	4b16      	ldr	r3, [pc, #88]	; (8009dfc <HAL_EXTI_ClearConfigLine+0xb8>)
 8009da2:	68da      	ldr	r2, [r3, #12]
 8009da4:	693b      	ldr	r3, [r7, #16]
 8009da6:	43db      	mvns	r3, r3
 8009da8:	4914      	ldr	r1, [pc, #80]	; (8009dfc <HAL_EXTI_ClearConfigLine+0xb8>)
 8009daa:	4013      	ands	r3, r2
 8009dac:	60cb      	str	r3, [r1, #12]

    /* Get Gpio port selection for gpio lines */
    if ((hexti->Line & EXTI_GPIO) == EXTI_GPIO)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8009db6:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8009dba:	d118      	bne.n	8009dee <HAL_EXTI_ClearConfigLine+0xaa>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
 8009dbc:	4a10      	ldr	r2, [pc, #64]	; (8009e00 <HAL_EXTI_ClearConfigLine+0xbc>)
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	089b      	lsrs	r3, r3, #2
 8009dc2:	3302      	adds	r3, #2
 8009dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009dc8:	60fb      	str	r3, [r7, #12]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	f003 0303 	and.w	r3, r3, #3
 8009dd0:	009b      	lsls	r3, r3, #2
 8009dd2:	220f      	movs	r2, #15
 8009dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8009dd8:	43db      	mvns	r3, r3
 8009dda:	68fa      	ldr	r2, [r7, #12]
 8009ddc:	4013      	ands	r3, r2
 8009dde:	60fb      	str	r3, [r7, #12]
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 8009de0:	4907      	ldr	r1, [pc, #28]	; (8009e00 <HAL_EXTI_ClearConfigLine+0xbc>)
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	089b      	lsrs	r3, r3, #2
 8009de6:	3302      	adds	r3, #2
 8009de8:	68fa      	ldr	r2, [r7, #12]
 8009dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  return HAL_OK;
 8009dee:	2300      	movs	r3, #0
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	371c      	adds	r7, #28
 8009df4:	46bd      	mov	sp, r7
 8009df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfa:	4770      	bx	lr
 8009dfc:	40013c00 	.word	0x40013c00
 8009e00:	40013800 	.word	0x40013800

08009e04 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8009e04:	b480      	push	{r7}
 8009e06:	b087      	sub	sp, #28
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	60f8      	str	r0, [r7, #12]
 8009e0c:	460b      	mov	r3, r1
 8009e0e:	607a      	str	r2, [r7, #4]
 8009e10:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009e12:	2300      	movs	r3, #0
 8009e14:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8009e16:	7afb      	ldrb	r3, [r7, #11]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d103      	bne.n	8009e24 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	687a      	ldr	r2, [r7, #4]
 8009e20:	605a      	str	r2, [r3, #4]
      break;
 8009e22:	e002      	b.n	8009e2a <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8009e24:	2301      	movs	r3, #1
 8009e26:	75fb      	strb	r3, [r7, #23]
      break;
 8009e28:	bf00      	nop
  }

  return status;
 8009e2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	371c      	adds	r7, #28
 8009e30:	46bd      	mov	sp, r7
 8009e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e36:	4770      	bx	lr

08009e38 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b083      	sub	sp, #12
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d101      	bne.n	8009e4c <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8009e48:	2301      	movs	r3, #1
 8009e4a:	e003      	b.n	8009e54 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	683a      	ldr	r2, [r7, #0]
 8009e50:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8009e52:	2300      	movs	r3, #0
  }
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	370c      	adds	r7, #12
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr

08009e60 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b084      	sub	sp, #16
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f003 031f 	and.w	r3, r3, #31
 8009e70:	2201      	movs	r2, #1
 8009e72:	fa02 f303 	lsl.w	r3, r2, r3
 8009e76:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8009e78:	4b0a      	ldr	r3, [pc, #40]	; (8009ea4 <HAL_EXTI_IRQHandler+0x44>)
 8009e7a:	695b      	ldr	r3, [r3, #20]
 8009e7c:	68fa      	ldr	r2, [r7, #12]
 8009e7e:	4013      	ands	r3, r2
 8009e80:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d009      	beq.n	8009e9c <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8009e88:	4a06      	ldr	r2, [pc, #24]	; (8009ea4 <HAL_EXTI_IRQHandler+0x44>)
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	685b      	ldr	r3, [r3, #4]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d002      	beq.n	8009e9c <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	685b      	ldr	r3, [r3, #4]
 8009e9a:	4798      	blx	r3
    }
  }
}
 8009e9c:	bf00      	nop
 8009e9e:	3710      	adds	r7, #16
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}
 8009ea4:	40013c00 	.word	0x40013c00

08009ea8 <HAL_EXTI_GetPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval 1 if interrupt is pending else 0.
  */
uint32_t HAL_EXTI_GetPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b087      	sub	sp, #28
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f003 031f 	and.w	r3, r3, #31
 8009eba:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ec4:	613b      	str	r3, [r7, #16]

  /* return 1 if bit is set else 0 */
  regval = ((EXTI->PR & maskline) >> linepos);
 8009ec6:	4b07      	ldr	r3, [pc, #28]	; (8009ee4 <HAL_EXTI_GetPending+0x3c>)
 8009ec8:	695a      	ldr	r2, [r3, #20]
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	401a      	ands	r2, r3
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8009ed4:	60fb      	str	r3, [r7, #12]
  return regval;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	371c      	adds	r7, #28
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr
 8009ee4:	40013c00 	.word	0x40013c00

08009ee8 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b085      	sub	sp, #20
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f003 031f 	and.w	r3, r3, #31
 8009efa:	2201      	movs	r2, #1
 8009efc:	fa02 f303 	lsl.w	r3, r2, r3
 8009f00:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 8009f02:	4a04      	ldr	r2, [pc, #16]	; (8009f14 <HAL_EXTI_ClearPending+0x2c>)
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	6153      	str	r3, [r2, #20]
}
 8009f08:	bf00      	nop
 8009f0a:	3714      	adds	r7, #20
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr
 8009f14:	40013c00 	.word	0x40013c00

08009f18 <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b085      	sub	sp, #20
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f003 031f 	and.w	r3, r3, #31
 8009f28:	2201      	movs	r2, #1
 8009f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8009f2e:	60fb      	str	r3, [r7, #12]

  /* Generate Software interrupt */
  EXTI->SWIER = maskline;
 8009f30:	4a04      	ldr	r2, [pc, #16]	; (8009f44 <HAL_EXTI_GenerateSWI+0x2c>)
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	6113      	str	r3, [r2, #16]
}
 8009f36:	bf00      	nop
 8009f38:	3714      	adds	r7, #20
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f40:	4770      	bx	lr
 8009f42:	bf00      	nop
 8009f44:	40013c00 	.word	0x40013c00

08009f48 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b086      	sub	sp, #24
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	60f8      	str	r0, [r7, #12]
 8009f50:	60b9      	str	r1, [r7, #8]
 8009f52:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009f56:	2301      	movs	r3, #1
 8009f58:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009f5a:	4b23      	ldr	r3, [pc, #140]	; (8009fe8 <HAL_FLASH_Program+0xa0>)
 8009f5c:	7e1b      	ldrb	r3, [r3, #24]
 8009f5e:	2b01      	cmp	r3, #1
 8009f60:	d101      	bne.n	8009f66 <HAL_FLASH_Program+0x1e>
 8009f62:	2302      	movs	r3, #2
 8009f64:	e03b      	b.n	8009fde <HAL_FLASH_Program+0x96>
 8009f66:	4b20      	ldr	r3, [pc, #128]	; (8009fe8 <HAL_FLASH_Program+0xa0>)
 8009f68:	2201      	movs	r2, #1
 8009f6a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009f6c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009f70:	f000 f9be 	bl	800a2f0 <FLASH_WaitForLastOperation>
 8009f74:	4603      	mov	r3, r0
 8009f76:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8009f78:	7dfb      	ldrb	r3, [r7, #23]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d12b      	bne.n	8009fd6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d105      	bne.n	8009f90 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8009f84:	783b      	ldrb	r3, [r7, #0]
 8009f86:	4619      	mov	r1, r3
 8009f88:	68b8      	ldr	r0, [r7, #8]
 8009f8a:	f000 fa69 	bl	800a460 <FLASH_Program_Byte>
 8009f8e:	e016      	b.n	8009fbe <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2b01      	cmp	r3, #1
 8009f94:	d105      	bne.n	8009fa2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8009f96:	883b      	ldrh	r3, [r7, #0]
 8009f98:	4619      	mov	r1, r3
 8009f9a:	68b8      	ldr	r0, [r7, #8]
 8009f9c:	f000 fa3c 	bl	800a418 <FLASH_Program_HalfWord>
 8009fa0:	e00d      	b.n	8009fbe <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	2b02      	cmp	r3, #2
 8009fa6:	d105      	bne.n	8009fb4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	4619      	mov	r1, r3
 8009fac:	68b8      	ldr	r0, [r7, #8]
 8009fae:	f000 fa11 	bl	800a3d4 <FLASH_Program_Word>
 8009fb2:	e004      	b.n	8009fbe <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8009fb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fb8:	68b8      	ldr	r0, [r7, #8]
 8009fba:	f000 f9d9 	bl	800a370 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009fbe:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009fc2:	f000 f995 	bl	800a2f0 <FLASH_WaitForLastOperation>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8009fca:	4b08      	ldr	r3, [pc, #32]	; (8009fec <HAL_FLASH_Program+0xa4>)
 8009fcc:	691b      	ldr	r3, [r3, #16]
 8009fce:	4a07      	ldr	r2, [pc, #28]	; (8009fec <HAL_FLASH_Program+0xa4>)
 8009fd0:	f023 0301 	bic.w	r3, r3, #1
 8009fd4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009fd6:	4b04      	ldr	r3, [pc, #16]	; (8009fe8 <HAL_FLASH_Program+0xa0>)
 8009fd8:	2200      	movs	r2, #0
 8009fda:	761a      	strb	r2, [r3, #24]
  
  return status;
 8009fdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3718      	adds	r7, #24
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}
 8009fe6:	bf00      	nop
 8009fe8:	20000d9c 	.word	0x20000d9c
 8009fec:	40023c00 	.word	0x40023c00

08009ff0 <HAL_FLASH_Program_IT>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b086      	sub	sp, #24
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	60f8      	str	r0, [r7, #12]
 8009ff8:	60b9      	str	r1, [r7, #8]
 8009ffa:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_OK;
 8009ffe:	2300      	movs	r3, #0
 800a000:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a002:	4b20      	ldr	r3, [pc, #128]	; (800a084 <HAL_FLASH_Program_IT+0x94>)
 800a004:	7e1b      	ldrb	r3, [r3, #24]
 800a006:	2b01      	cmp	r3, #1
 800a008:	d101      	bne.n	800a00e <HAL_FLASH_Program_IT+0x1e>
 800a00a:	2302      	movs	r3, #2
 800a00c:	e035      	b.n	800a07a <HAL_FLASH_Program_IT+0x8a>
 800a00e:	4b1d      	ldr	r3, [pc, #116]	; (800a084 <HAL_FLASH_Program_IT+0x94>)
 800a010:	2201      	movs	r2, #1
 800a012:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Enable End of FLASH Operation interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
 800a014:	4b1c      	ldr	r3, [pc, #112]	; (800a088 <HAL_FLASH_Program_IT+0x98>)
 800a016:	691b      	ldr	r3, [r3, #16]
 800a018:	4a1b      	ldr	r2, [pc, #108]	; (800a088 <HAL_FLASH_Program_IT+0x98>)
 800a01a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a01e:	6113      	str	r3, [r2, #16]
  
  /* Enable Error source interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
 800a020:	4b19      	ldr	r3, [pc, #100]	; (800a088 <HAL_FLASH_Program_IT+0x98>)
 800a022:	691b      	ldr	r3, [r3, #16]
 800a024:	4a18      	ldr	r2, [pc, #96]	; (800a088 <HAL_FLASH_Program_IT+0x98>)
 800a026:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a02a:	6113      	str	r3, [r2, #16]

  pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM;
 800a02c:	4b15      	ldr	r3, [pc, #84]	; (800a084 <HAL_FLASH_Program_IT+0x94>)
 800a02e:	2203      	movs	r2, #3
 800a030:	701a      	strb	r2, [r3, #0]
  pFlash.Address = Address;
 800a032:	4a14      	ldr	r2, [pc, #80]	; (800a084 <HAL_FLASH_Program_IT+0x94>)
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	6153      	str	r3, [r2, #20]

  if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d105      	bne.n	800a04a <HAL_FLASH_Program_IT+0x5a>
  {
    /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800a03e:	783b      	ldrb	r3, [r7, #0]
 800a040:	4619      	mov	r1, r3
 800a042:	68b8      	ldr	r0, [r7, #8]
 800a044:	f000 fa0c 	bl	800a460 <FLASH_Program_Byte>
 800a048:	e016      	b.n	800a078 <HAL_FLASH_Program_IT+0x88>
  }
  else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d105      	bne.n	800a05c <HAL_FLASH_Program_IT+0x6c>
  {
    /*Program halfword (16-bit) at a specified address.*/
    FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800a050:	883b      	ldrh	r3, [r7, #0]
 800a052:	4619      	mov	r1, r3
 800a054:	68b8      	ldr	r0, [r7, #8]
 800a056:	f000 f9df 	bl	800a418 <FLASH_Program_HalfWord>
 800a05a:	e00d      	b.n	800a078 <HAL_FLASH_Program_IT+0x88>
  }
  else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2b02      	cmp	r3, #2
 800a060:	d105      	bne.n	800a06e <HAL_FLASH_Program_IT+0x7e>
  {
    /*Program word (32-bit) at a specified address.*/
    FLASH_Program_Word(Address, (uint32_t) Data);
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	4619      	mov	r1, r3
 800a066:	68b8      	ldr	r0, [r7, #8]
 800a068:	f000 f9b4 	bl	800a3d4 <FLASH_Program_Word>
 800a06c:	e004      	b.n	800a078 <HAL_FLASH_Program_IT+0x88>
  }
  else
  {
    /*Program double word (64-bit) at a specified address.*/
    FLASH_Program_DoubleWord(Address, Data);
 800a06e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a072:	68b8      	ldr	r0, [r7, #8]
 800a074:	f000 f97c 	bl	800a370 <FLASH_Program_DoubleWord>
  }

  return status;
 800a078:	7dfb      	ldrb	r3, [r7, #23]
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3718      	adds	r7, #24
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}
 800a082:	bf00      	nop
 800a084:	20000d9c 	.word	0x20000d9c
 800a088:	40023c00 	.word	0x40023c00

0800a08c <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b082      	sub	sp, #8
 800a090:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 800a092:	2300      	movs	r3, #0
 800a094:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800a096:	4b4b      	ldr	r3, [pc, #300]	; (800a1c4 <HAL_FLASH_IRQHandler+0x138>)
 800a098:	68db      	ldr	r3, [r3, #12]
 800a09a:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d020      	beq.n	800a0e4 <HAL_FLASH_IRQHandler+0x58>
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800a0a2:	4b49      	ldr	r3, [pc, #292]	; (800a1c8 <HAL_FLASH_IRQHandler+0x13c>)
 800a0a4:	781b      	ldrb	r3, [r3, #0]
 800a0a6:	b2db      	uxtb	r3, r3
 800a0a8:	2b01      	cmp	r3, #1
 800a0aa:	d107      	bne.n	800a0bc <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 800a0ac:	4b46      	ldr	r3, [pc, #280]	; (800a1c8 <HAL_FLASH_IRQHandler+0x13c>)
 800a0ae:	68db      	ldr	r3, [r3, #12]
 800a0b0:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 800a0b2:	4b45      	ldr	r3, [pc, #276]	; (800a1c8 <HAL_FLASH_IRQHandler+0x13c>)
 800a0b4:	f04f 32ff 	mov.w	r2, #4294967295
 800a0b8:	60da      	str	r2, [r3, #12]
 800a0ba:	e00b      	b.n	800a0d4 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 800a0bc:	4b42      	ldr	r3, [pc, #264]	; (800a1c8 <HAL_FLASH_IRQHandler+0x13c>)
 800a0be:	781b      	ldrb	r3, [r3, #0]
 800a0c0:	b2db      	uxtb	r3, r3
 800a0c2:	2b02      	cmp	r3, #2
 800a0c4:	d103      	bne.n	800a0ce <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 800a0c6:	4b40      	ldr	r3, [pc, #256]	; (800a1c8 <HAL_FLASH_IRQHandler+0x13c>)
 800a0c8:	691b      	ldr	r3, [r3, #16]
 800a0ca:	607b      	str	r3, [r7, #4]
 800a0cc:	e002      	b.n	800a0d4 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 800a0ce:	4b3e      	ldr	r3, [pc, #248]	; (800a1c8 <HAL_FLASH_IRQHandler+0x13c>)
 800a0d0:	695b      	ldr	r3, [r3, #20]
 800a0d2:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 800a0d4:	f000 f9e6 	bl	800a4a4 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f000 f881 	bl	800a1e0 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800a0de:	4b3a      	ldr	r3, [pc, #232]	; (800a1c8 <HAL_FLASH_IRQHandler+0x13c>)
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800a0e4:	4b37      	ldr	r3, [pc, #220]	; (800a1c4 <HAL_FLASH_IRQHandler+0x138>)
 800a0e6:	68db      	ldr	r3, [r3, #12]
 800a0e8:	f003 0301 	and.w	r3, r3, #1
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d04a      	beq.n	800a186 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800a0f0:	4b34      	ldr	r3, [pc, #208]	; (800a1c4 <HAL_FLASH_IRQHandler+0x138>)
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800a0f6:	4b34      	ldr	r3, [pc, #208]	; (800a1c8 <HAL_FLASH_IRQHandler+0x13c>)
 800a0f8:	781b      	ldrb	r3, [r3, #0]
 800a0fa:	b2db      	uxtb	r3, r3
 800a0fc:	2b01      	cmp	r3, #1
 800a0fe:	d12d      	bne.n	800a15c <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 800a100:	4b31      	ldr	r3, [pc, #196]	; (800a1c8 <HAL_FLASH_IRQHandler+0x13c>)
 800a102:	685b      	ldr	r3, [r3, #4]
 800a104:	3b01      	subs	r3, #1
 800a106:	4a30      	ldr	r2, [pc, #192]	; (800a1c8 <HAL_FLASH_IRQHandler+0x13c>)
 800a108:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 800a10a:	4b2f      	ldr	r3, [pc, #188]	; (800a1c8 <HAL_FLASH_IRQHandler+0x13c>)
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d015      	beq.n	800a13e <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 800a112:	4b2d      	ldr	r3, [pc, #180]	; (800a1c8 <HAL_FLASH_IRQHandler+0x13c>)
 800a114:	68db      	ldr	r3, [r3, #12]
 800a116:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f000 f857 	bl	800a1cc <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 800a11e:	4b2a      	ldr	r3, [pc, #168]	; (800a1c8 <HAL_FLASH_IRQHandler+0x13c>)
 800a120:	68db      	ldr	r3, [r3, #12]
 800a122:	3301      	adds	r3, #1
 800a124:	4a28      	ldr	r2, [pc, #160]	; (800a1c8 <HAL_FLASH_IRQHandler+0x13c>)
 800a126:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 800a128:	4b27      	ldr	r3, [pc, #156]	; (800a1c8 <HAL_FLASH_IRQHandler+0x13c>)
 800a12a:	68db      	ldr	r3, [r3, #12]
 800a12c:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 800a12e:	4b26      	ldr	r3, [pc, #152]	; (800a1c8 <HAL_FLASH_IRQHandler+0x13c>)
 800a130:	7a1b      	ldrb	r3, [r3, #8]
 800a132:	b2db      	uxtb	r3, r3
 800a134:	4619      	mov	r1, r3
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f000 fb84 	bl	800a844 <FLASH_Erase_Sector>
 800a13c:	e023      	b.n	800a186 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 800a13e:	f04f 33ff 	mov.w	r3, #4294967295
 800a142:	607b      	str	r3, [r7, #4]
 800a144:	4a20      	ldr	r2, [pc, #128]	; (800a1c8 <HAL_FLASH_IRQHandler+0x13c>)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800a14a:	4b1f      	ldr	r3, [pc, #124]	; (800a1c8 <HAL_FLASH_IRQHandler+0x13c>)
 800a14c:	2200      	movs	r2, #0
 800a14e:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 800a150:	f000 fcb6 	bl	800aac0 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f000 f839 	bl	800a1cc <HAL_FLASH_EndOfOperationCallback>
 800a15a:	e014      	b.n	800a186 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 800a15c:	4b1a      	ldr	r3, [pc, #104]	; (800a1c8 <HAL_FLASH_IRQHandler+0x13c>)
 800a15e:	781b      	ldrb	r3, [r3, #0]
 800a160:	b2db      	uxtb	r3, r3
 800a162:	2b02      	cmp	r3, #2
 800a164:	d107      	bne.n	800a176 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 800a166:	f000 fcab 	bl	800aac0 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 800a16a:	4b17      	ldr	r3, [pc, #92]	; (800a1c8 <HAL_FLASH_IRQHandler+0x13c>)
 800a16c:	691b      	ldr	r3, [r3, #16]
 800a16e:	4618      	mov	r0, r3
 800a170:	f000 f82c 	bl	800a1cc <HAL_FLASH_EndOfOperationCallback>
 800a174:	e004      	b.n	800a180 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 800a176:	4b14      	ldr	r3, [pc, #80]	; (800a1c8 <HAL_FLASH_IRQHandler+0x13c>)
 800a178:	695b      	ldr	r3, [r3, #20]
 800a17a:	4618      	mov	r0, r3
 800a17c:	f000 f826 	bl	800a1cc <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800a180:	4b11      	ldr	r3, [pc, #68]	; (800a1c8 <HAL_FLASH_IRQHandler+0x13c>)
 800a182:	2200      	movs	r2, #0
 800a184:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 800a186:	4b10      	ldr	r3, [pc, #64]	; (800a1c8 <HAL_FLASH_IRQHandler+0x13c>)
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	b2db      	uxtb	r3, r3
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d114      	bne.n	800a1ba <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 800a190:	4b0c      	ldr	r3, [pc, #48]	; (800a1c4 <HAL_FLASH_IRQHandler+0x138>)
 800a192:	691b      	ldr	r3, [r3, #16]
 800a194:	4a0b      	ldr	r2, [pc, #44]	; (800a1c4 <HAL_FLASH_IRQHandler+0x138>)
 800a196:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a19a:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 800a19c:	4b09      	ldr	r3, [pc, #36]	; (800a1c4 <HAL_FLASH_IRQHandler+0x138>)
 800a19e:	691b      	ldr	r3, [r3, #16]
 800a1a0:	4a08      	ldr	r2, [pc, #32]	; (800a1c4 <HAL_FLASH_IRQHandler+0x138>)
 800a1a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a1a6:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 800a1a8:	4b06      	ldr	r3, [pc, #24]	; (800a1c4 <HAL_FLASH_IRQHandler+0x138>)
 800a1aa:	691b      	ldr	r3, [r3, #16]
 800a1ac:	4a05      	ldr	r2, [pc, #20]	; (800a1c4 <HAL_FLASH_IRQHandler+0x138>)
 800a1ae:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a1b2:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800a1b4:	4b04      	ldr	r3, [pc, #16]	; (800a1c8 <HAL_FLASH_IRQHandler+0x13c>)
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	761a      	strb	r2, [r3, #24]
  }
}
 800a1ba:	bf00      	nop
 800a1bc:	3708      	adds	r7, #8
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
 800a1c2:	bf00      	nop
 800a1c4:	40023c00 	.word	0x40023c00
 800a1c8:	20000d9c 	.word	0x20000d9c

0800a1cc <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b083      	sub	sp, #12
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 800a1d4:	bf00      	nop
 800a1d6:	370c      	adds	r7, #12
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1de:	4770      	bx	lr

0800a1e0 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b083      	sub	sp, #12
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 800a1e8:	bf00      	nop
 800a1ea:	370c      	adds	r7, #12
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr

0800a1f4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b083      	sub	sp, #12
 800a1f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800a1fe:	4b0b      	ldr	r3, [pc, #44]	; (800a22c <HAL_FLASH_Unlock+0x38>)
 800a200:	691b      	ldr	r3, [r3, #16]
 800a202:	2b00      	cmp	r3, #0
 800a204:	da0b      	bge.n	800a21e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800a206:	4b09      	ldr	r3, [pc, #36]	; (800a22c <HAL_FLASH_Unlock+0x38>)
 800a208:	4a09      	ldr	r2, [pc, #36]	; (800a230 <HAL_FLASH_Unlock+0x3c>)
 800a20a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800a20c:	4b07      	ldr	r3, [pc, #28]	; (800a22c <HAL_FLASH_Unlock+0x38>)
 800a20e:	4a09      	ldr	r2, [pc, #36]	; (800a234 <HAL_FLASH_Unlock+0x40>)
 800a210:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800a212:	4b06      	ldr	r3, [pc, #24]	; (800a22c <HAL_FLASH_Unlock+0x38>)
 800a214:	691b      	ldr	r3, [r3, #16]
 800a216:	2b00      	cmp	r3, #0
 800a218:	da01      	bge.n	800a21e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800a21a:	2301      	movs	r3, #1
 800a21c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800a21e:	79fb      	ldrb	r3, [r7, #7]
}
 800a220:	4618      	mov	r0, r3
 800a222:	370c      	adds	r7, #12
 800a224:	46bd      	mov	sp, r7
 800a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22a:	4770      	bx	lr
 800a22c:	40023c00 	.word	0x40023c00
 800a230:	45670123 	.word	0x45670123
 800a234:	cdef89ab 	.word	0xcdef89ab

0800a238 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800a238:	b480      	push	{r7}
 800a23a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800a23c:	4b05      	ldr	r3, [pc, #20]	; (800a254 <HAL_FLASH_Lock+0x1c>)
 800a23e:	691b      	ldr	r3, [r3, #16]
 800a240:	4a04      	ldr	r2, [pc, #16]	; (800a254 <HAL_FLASH_Lock+0x1c>)
 800a242:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a246:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800a248:	2300      	movs	r3, #0
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	46bd      	mov	sp, r7
 800a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a252:	4770      	bx	lr
 800a254:	40023c00 	.word	0x40023c00

0800a258 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 800a258:	b480      	push	{r7}
 800a25a:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 800a25c:	4b09      	ldr	r3, [pc, #36]	; (800a284 <HAL_FLASH_OB_Unlock+0x2c>)
 800a25e:	695b      	ldr	r3, [r3, #20]
 800a260:	f003 0301 	and.w	r3, r3, #1
 800a264:	2b00      	cmp	r3, #0
 800a266:	d007      	beq.n	800a278 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 800a268:	4b06      	ldr	r3, [pc, #24]	; (800a284 <HAL_FLASH_OB_Unlock+0x2c>)
 800a26a:	4a07      	ldr	r2, [pc, #28]	; (800a288 <HAL_FLASH_OB_Unlock+0x30>)
 800a26c:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800a26e:	4b05      	ldr	r3, [pc, #20]	; (800a284 <HAL_FLASH_OB_Unlock+0x2c>)
 800a270:	4a06      	ldr	r2, [pc, #24]	; (800a28c <HAL_FLASH_OB_Unlock+0x34>)
 800a272:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 800a274:	2300      	movs	r3, #0
 800a276:	e000      	b.n	800a27a <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 800a278:	2301      	movs	r3, #1
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	46bd      	mov	sp, r7
 800a27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a282:	4770      	bx	lr
 800a284:	40023c00 	.word	0x40023c00
 800a288:	08192a3b 	.word	0x08192a3b
 800a28c:	4c5d6e7f 	.word	0x4c5d6e7f

0800a290 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 800a290:	b480      	push	{r7}
 800a292:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800a294:	4b05      	ldr	r3, [pc, #20]	; (800a2ac <HAL_FLASH_OB_Lock+0x1c>)
 800a296:	695b      	ldr	r3, [r3, #20]
 800a298:	4a04      	ldr	r2, [pc, #16]	; (800a2ac <HAL_FLASH_OB_Lock+0x1c>)
 800a29a:	f043 0301 	orr.w	r3, r3, #1
 800a29e:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 800a2a0:	2300      	movs	r3, #0
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr
 800a2ac:	40023c00 	.word	0x40023c00

0800a2b0 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	af00      	add	r7, sp, #0
  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 800a2b4:	4b07      	ldr	r3, [pc, #28]	; (800a2d4 <HAL_FLASH_OB_Launch+0x24>)
 800a2b6:	781b      	ldrb	r3, [r3, #0]
 800a2b8:	b2db      	uxtb	r3, r3
 800a2ba:	4a06      	ldr	r2, [pc, #24]	; (800a2d4 <HAL_FLASH_OB_Launch+0x24>)
 800a2bc:	f043 0302 	orr.w	r3, r3, #2
 800a2c0:	b2db      	uxtb	r3, r3
 800a2c2:	7013      	strb	r3, [r2, #0]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE)); 
 800a2c4:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a2c8:	f000 f812 	bl	800a2f0 <FLASH_WaitForLastOperation>
 800a2cc:	4603      	mov	r3, r0
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	bd80      	pop	{r7, pc}
 800a2d2:	bf00      	nop
 800a2d4:	40023c14 	.word	0x40023c14

0800a2d8 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 800a2d8:	b480      	push	{r7}
 800a2da:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 800a2dc:	4b03      	ldr	r3, [pc, #12]	; (800a2ec <HAL_FLASH_GetError+0x14>)
 800a2de:	69db      	ldr	r3, [r3, #28]
}  
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e8:	4770      	bx	lr
 800a2ea:	bf00      	nop
 800a2ec:	20000d9c 	.word	0x20000d9c

0800a2f0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b084      	sub	sp, #16
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a2fc:	4b1a      	ldr	r3, [pc, #104]	; (800a368 <FLASH_WaitForLastOperation+0x78>)
 800a2fe:	2200      	movs	r2, #0
 800a300:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800a302:	f7fc fabb 	bl	800687c <HAL_GetTick>
 800a306:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800a308:	e010      	b.n	800a32c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a310:	d00c      	beq.n	800a32c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d007      	beq.n	800a328 <FLASH_WaitForLastOperation+0x38>
 800a318:	f7fc fab0 	bl	800687c <HAL_GetTick>
 800a31c:	4602      	mov	r2, r0
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	1ad3      	subs	r3, r2, r3
 800a322:	687a      	ldr	r2, [r7, #4]
 800a324:	429a      	cmp	r2, r3
 800a326:	d201      	bcs.n	800a32c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800a328:	2303      	movs	r3, #3
 800a32a:	e019      	b.n	800a360 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800a32c:	4b0f      	ldr	r3, [pc, #60]	; (800a36c <FLASH_WaitForLastOperation+0x7c>)
 800a32e:	68db      	ldr	r3, [r3, #12]
 800a330:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a334:	2b00      	cmp	r3, #0
 800a336:	d1e8      	bne.n	800a30a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800a338:	4b0c      	ldr	r3, [pc, #48]	; (800a36c <FLASH_WaitForLastOperation+0x7c>)
 800a33a:	68db      	ldr	r3, [r3, #12]
 800a33c:	f003 0301 	and.w	r3, r3, #1
 800a340:	2b00      	cmp	r3, #0
 800a342:	d002      	beq.n	800a34a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800a344:	4b09      	ldr	r3, [pc, #36]	; (800a36c <FLASH_WaitForLastOperation+0x7c>)
 800a346:	2201      	movs	r2, #1
 800a348:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800a34a:	4b08      	ldr	r3, [pc, #32]	; (800a36c <FLASH_WaitForLastOperation+0x7c>)
 800a34c:	68db      	ldr	r3, [r3, #12]
 800a34e:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800a352:	2b00      	cmp	r3, #0
 800a354:	d003      	beq.n	800a35e <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800a356:	f000 f8a5 	bl	800a4a4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800a35a:	2301      	movs	r3, #1
 800a35c:	e000      	b.n	800a360 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800a35e:	2300      	movs	r3, #0
  
}  
 800a360:	4618      	mov	r0, r3
 800a362:	3710      	adds	r7, #16
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}
 800a368:	20000d9c 	.word	0x20000d9c
 800a36c:	40023c00 	.word	0x40023c00

0800a370 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800a370:	b480      	push	{r7}
 800a372:	b085      	sub	sp, #20
 800a374:	af00      	add	r7, sp, #0
 800a376:	60f8      	str	r0, [r7, #12]
 800a378:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a37c:	4b14      	ldr	r3, [pc, #80]	; (800a3d0 <FLASH_Program_DoubleWord+0x60>)
 800a37e:	691b      	ldr	r3, [r3, #16]
 800a380:	4a13      	ldr	r2, [pc, #76]	; (800a3d0 <FLASH_Program_DoubleWord+0x60>)
 800a382:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a386:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800a388:	4b11      	ldr	r3, [pc, #68]	; (800a3d0 <FLASH_Program_DoubleWord+0x60>)
 800a38a:	691b      	ldr	r3, [r3, #16]
 800a38c:	4a10      	ldr	r2, [pc, #64]	; (800a3d0 <FLASH_Program_DoubleWord+0x60>)
 800a38e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a392:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a394:	4b0e      	ldr	r3, [pc, #56]	; (800a3d0 <FLASH_Program_DoubleWord+0x60>)
 800a396:	691b      	ldr	r3, [r3, #16]
 800a398:	4a0d      	ldr	r2, [pc, #52]	; (800a3d0 <FLASH_Program_DoubleWord+0x60>)
 800a39a:	f043 0301 	orr.w	r3, r3, #1
 800a39e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	683a      	ldr	r2, [r7, #0]
 800a3a4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800a3a6:	f3bf 8f6f 	isb	sy
}
 800a3aa:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800a3ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a3b0:	f04f 0200 	mov.w	r2, #0
 800a3b4:	f04f 0300 	mov.w	r3, #0
 800a3b8:	000a      	movs	r2, r1
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	68f9      	ldr	r1, [r7, #12]
 800a3be:	3104      	adds	r1, #4
 800a3c0:	4613      	mov	r3, r2
 800a3c2:	600b      	str	r3, [r1, #0]
}
 800a3c4:	bf00      	nop
 800a3c6:	3714      	adds	r7, #20
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ce:	4770      	bx	lr
 800a3d0:	40023c00 	.word	0x40023c00

0800a3d4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b083      	sub	sp, #12
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a3de:	4b0d      	ldr	r3, [pc, #52]	; (800a414 <FLASH_Program_Word+0x40>)
 800a3e0:	691b      	ldr	r3, [r3, #16]
 800a3e2:	4a0c      	ldr	r2, [pc, #48]	; (800a414 <FLASH_Program_Word+0x40>)
 800a3e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3e8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800a3ea:	4b0a      	ldr	r3, [pc, #40]	; (800a414 <FLASH_Program_Word+0x40>)
 800a3ec:	691b      	ldr	r3, [r3, #16]
 800a3ee:	4a09      	ldr	r2, [pc, #36]	; (800a414 <FLASH_Program_Word+0x40>)
 800a3f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a3f4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a3f6:	4b07      	ldr	r3, [pc, #28]	; (800a414 <FLASH_Program_Word+0x40>)
 800a3f8:	691b      	ldr	r3, [r3, #16]
 800a3fa:	4a06      	ldr	r2, [pc, #24]	; (800a414 <FLASH_Program_Word+0x40>)
 800a3fc:	f043 0301 	orr.w	r3, r3, #1
 800a400:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	683a      	ldr	r2, [r7, #0]
 800a406:	601a      	str	r2, [r3, #0]
}
 800a408:	bf00      	nop
 800a40a:	370c      	adds	r7, #12
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr
 800a414:	40023c00 	.word	0x40023c00

0800a418 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800a418:	b480      	push	{r7}
 800a41a:	b083      	sub	sp, #12
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
 800a420:	460b      	mov	r3, r1
 800a422:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a424:	4b0d      	ldr	r3, [pc, #52]	; (800a45c <FLASH_Program_HalfWord+0x44>)
 800a426:	691b      	ldr	r3, [r3, #16]
 800a428:	4a0c      	ldr	r2, [pc, #48]	; (800a45c <FLASH_Program_HalfWord+0x44>)
 800a42a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a42e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800a430:	4b0a      	ldr	r3, [pc, #40]	; (800a45c <FLASH_Program_HalfWord+0x44>)
 800a432:	691b      	ldr	r3, [r3, #16]
 800a434:	4a09      	ldr	r2, [pc, #36]	; (800a45c <FLASH_Program_HalfWord+0x44>)
 800a436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a43a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a43c:	4b07      	ldr	r3, [pc, #28]	; (800a45c <FLASH_Program_HalfWord+0x44>)
 800a43e:	691b      	ldr	r3, [r3, #16]
 800a440:	4a06      	ldr	r2, [pc, #24]	; (800a45c <FLASH_Program_HalfWord+0x44>)
 800a442:	f043 0301 	orr.w	r3, r3, #1
 800a446:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	887a      	ldrh	r2, [r7, #2]
 800a44c:	801a      	strh	r2, [r3, #0]
}
 800a44e:	bf00      	nop
 800a450:	370c      	adds	r7, #12
 800a452:	46bd      	mov	sp, r7
 800a454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a458:	4770      	bx	lr
 800a45a:	bf00      	nop
 800a45c:	40023c00 	.word	0x40023c00

0800a460 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800a460:	b480      	push	{r7}
 800a462:	b083      	sub	sp, #12
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	460b      	mov	r3, r1
 800a46a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a46c:	4b0c      	ldr	r3, [pc, #48]	; (800a4a0 <FLASH_Program_Byte+0x40>)
 800a46e:	691b      	ldr	r3, [r3, #16]
 800a470:	4a0b      	ldr	r2, [pc, #44]	; (800a4a0 <FLASH_Program_Byte+0x40>)
 800a472:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a476:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800a478:	4b09      	ldr	r3, [pc, #36]	; (800a4a0 <FLASH_Program_Byte+0x40>)
 800a47a:	4a09      	ldr	r2, [pc, #36]	; (800a4a0 <FLASH_Program_Byte+0x40>)
 800a47c:	691b      	ldr	r3, [r3, #16]
 800a47e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a480:	4b07      	ldr	r3, [pc, #28]	; (800a4a0 <FLASH_Program_Byte+0x40>)
 800a482:	691b      	ldr	r3, [r3, #16]
 800a484:	4a06      	ldr	r2, [pc, #24]	; (800a4a0 <FLASH_Program_Byte+0x40>)
 800a486:	f043 0301 	orr.w	r3, r3, #1
 800a48a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	78fa      	ldrb	r2, [r7, #3]
 800a490:	701a      	strb	r2, [r3, #0]
}
 800a492:	bf00      	nop
 800a494:	370c      	adds	r7, #12
 800a496:	46bd      	mov	sp, r7
 800a498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49c:	4770      	bx	lr
 800a49e:	bf00      	nop
 800a4a0:	40023c00 	.word	0x40023c00

0800a4a4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800a4a4:	b480      	push	{r7}
 800a4a6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800a4a8:	4b27      	ldr	r3, [pc, #156]	; (800a548 <FLASH_SetErrorCode+0xa4>)
 800a4aa:	68db      	ldr	r3, [r3, #12]
 800a4ac:	f003 0310 	and.w	r3, r3, #16
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d008      	beq.n	800a4c6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800a4b4:	4b25      	ldr	r3, [pc, #148]	; (800a54c <FLASH_SetErrorCode+0xa8>)
 800a4b6:	69db      	ldr	r3, [r3, #28]
 800a4b8:	f043 0310 	orr.w	r3, r3, #16
 800a4bc:	4a23      	ldr	r2, [pc, #140]	; (800a54c <FLASH_SetErrorCode+0xa8>)
 800a4be:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800a4c0:	4b21      	ldr	r3, [pc, #132]	; (800a548 <FLASH_SetErrorCode+0xa4>)
 800a4c2:	2210      	movs	r2, #16
 800a4c4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800a4c6:	4b20      	ldr	r3, [pc, #128]	; (800a548 <FLASH_SetErrorCode+0xa4>)
 800a4c8:	68db      	ldr	r3, [r3, #12]
 800a4ca:	f003 0320 	and.w	r3, r3, #32
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d008      	beq.n	800a4e4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800a4d2:	4b1e      	ldr	r3, [pc, #120]	; (800a54c <FLASH_SetErrorCode+0xa8>)
 800a4d4:	69db      	ldr	r3, [r3, #28]
 800a4d6:	f043 0308 	orr.w	r3, r3, #8
 800a4da:	4a1c      	ldr	r2, [pc, #112]	; (800a54c <FLASH_SetErrorCode+0xa8>)
 800a4dc:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800a4de:	4b1a      	ldr	r3, [pc, #104]	; (800a548 <FLASH_SetErrorCode+0xa4>)
 800a4e0:	2220      	movs	r2, #32
 800a4e2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800a4e4:	4b18      	ldr	r3, [pc, #96]	; (800a548 <FLASH_SetErrorCode+0xa4>)
 800a4e6:	68db      	ldr	r3, [r3, #12]
 800a4e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d008      	beq.n	800a502 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800a4f0:	4b16      	ldr	r3, [pc, #88]	; (800a54c <FLASH_SetErrorCode+0xa8>)
 800a4f2:	69db      	ldr	r3, [r3, #28]
 800a4f4:	f043 0304 	orr.w	r3, r3, #4
 800a4f8:	4a14      	ldr	r2, [pc, #80]	; (800a54c <FLASH_SetErrorCode+0xa8>)
 800a4fa:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800a4fc:	4b12      	ldr	r3, [pc, #72]	; (800a548 <FLASH_SetErrorCode+0xa4>)
 800a4fe:	2240      	movs	r2, #64	; 0x40
 800a500:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800a502:	4b11      	ldr	r3, [pc, #68]	; (800a548 <FLASH_SetErrorCode+0xa4>)
 800a504:	68db      	ldr	r3, [r3, #12]
 800a506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d008      	beq.n	800a520 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800a50e:	4b0f      	ldr	r3, [pc, #60]	; (800a54c <FLASH_SetErrorCode+0xa8>)
 800a510:	69db      	ldr	r3, [r3, #28]
 800a512:	f043 0302 	orr.w	r3, r3, #2
 800a516:	4a0d      	ldr	r2, [pc, #52]	; (800a54c <FLASH_SetErrorCode+0xa8>)
 800a518:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800a51a:	4b0b      	ldr	r3, [pc, #44]	; (800a548 <FLASH_SetErrorCode+0xa4>)
 800a51c:	2280      	movs	r2, #128	; 0x80
 800a51e:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800a520:	4b09      	ldr	r3, [pc, #36]	; (800a548 <FLASH_SetErrorCode+0xa4>)
 800a522:	68db      	ldr	r3, [r3, #12]
 800a524:	f003 0302 	and.w	r3, r3, #2
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d008      	beq.n	800a53e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800a52c:	4b07      	ldr	r3, [pc, #28]	; (800a54c <FLASH_SetErrorCode+0xa8>)
 800a52e:	69db      	ldr	r3, [r3, #28]
 800a530:	f043 0320 	orr.w	r3, r3, #32
 800a534:	4a05      	ldr	r2, [pc, #20]	; (800a54c <FLASH_SetErrorCode+0xa8>)
 800a536:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800a538:	4b03      	ldr	r3, [pc, #12]	; (800a548 <FLASH_SetErrorCode+0xa4>)
 800a53a:	2202      	movs	r2, #2
 800a53c:	60da      	str	r2, [r3, #12]
  }
}
 800a53e:	bf00      	nop
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr
 800a548:	40023c00 	.word	0x40023c00
 800a54c:	20000d9c 	.word	0x20000d9c

0800a550 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b084      	sub	sp, #16
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a55a:	2301      	movs	r3, #1
 800a55c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800a55e:	2300      	movs	r3, #0
 800a560:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a562:	4b31      	ldr	r3, [pc, #196]	; (800a628 <HAL_FLASHEx_Erase+0xd8>)
 800a564:	7e1b      	ldrb	r3, [r3, #24]
 800a566:	2b01      	cmp	r3, #1
 800a568:	d101      	bne.n	800a56e <HAL_FLASHEx_Erase+0x1e>
 800a56a:	2302      	movs	r3, #2
 800a56c:	e058      	b.n	800a620 <HAL_FLASHEx_Erase+0xd0>
 800a56e:	4b2e      	ldr	r3, [pc, #184]	; (800a628 <HAL_FLASHEx_Erase+0xd8>)
 800a570:	2201      	movs	r2, #1
 800a572:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a574:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a578:	f7ff feba 	bl	800a2f0 <FLASH_WaitForLastOperation>
 800a57c:	4603      	mov	r3, r0
 800a57e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800a580:	7bfb      	ldrb	r3, [r7, #15]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d148      	bne.n	800a618 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	f04f 32ff 	mov.w	r2, #4294967295
 800a58c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	2b01      	cmp	r3, #1
 800a594:	d115      	bne.n	800a5c2 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	691b      	ldr	r3, [r3, #16]
 800a59a:	b2da      	uxtb	r2, r3
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	685b      	ldr	r3, [r3, #4]
 800a5a0:	4619      	mov	r1, r3
 800a5a2:	4610      	mov	r0, r2
 800a5a4:	f000 f92b 	bl	800a7fe <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a5a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a5ac:	f7ff fea0 	bl	800a2f0 <FLASH_WaitForLastOperation>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800a5b4:	4b1d      	ldr	r3, [pc, #116]	; (800a62c <HAL_FLASHEx_Erase+0xdc>)
 800a5b6:	691b      	ldr	r3, [r3, #16]
 800a5b8:	4a1c      	ldr	r2, [pc, #112]	; (800a62c <HAL_FLASHEx_Erase+0xdc>)
 800a5ba:	f023 0304 	bic.w	r3, r3, #4
 800a5be:	6113      	str	r3, [r2, #16]
 800a5c0:	e028      	b.n	800a614 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	689b      	ldr	r3, [r3, #8]
 800a5c6:	60bb      	str	r3, [r7, #8]
 800a5c8:	e01c      	b.n	800a604 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	691b      	ldr	r3, [r3, #16]
 800a5ce:	b2db      	uxtb	r3, r3
 800a5d0:	4619      	mov	r1, r3
 800a5d2:	68b8      	ldr	r0, [r7, #8]
 800a5d4:	f000 f936 	bl	800a844 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a5d8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a5dc:	f7ff fe88 	bl	800a2f0 <FLASH_WaitForLastOperation>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800a5e4:	4b11      	ldr	r3, [pc, #68]	; (800a62c <HAL_FLASHEx_Erase+0xdc>)
 800a5e6:	691b      	ldr	r3, [r3, #16]
 800a5e8:	4a10      	ldr	r2, [pc, #64]	; (800a62c <HAL_FLASHEx_Erase+0xdc>)
 800a5ea:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800a5ee:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800a5f0:	7bfb      	ldrb	r3, [r7, #15]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d003      	beq.n	800a5fe <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	68ba      	ldr	r2, [r7, #8]
 800a5fa:	601a      	str	r2, [r3, #0]
          break;
 800a5fc:	e00a      	b.n	800a614 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	3301      	adds	r3, #1
 800a602:	60bb      	str	r3, [r7, #8]
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	68da      	ldr	r2, [r3, #12]
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	689b      	ldr	r3, [r3, #8]
 800a60c:	4413      	add	r3, r2
 800a60e:	68ba      	ldr	r2, [r7, #8]
 800a610:	429a      	cmp	r2, r3
 800a612:	d3da      	bcc.n	800a5ca <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800a614:	f000 fa54 	bl	800aac0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a618:	4b03      	ldr	r3, [pc, #12]	; (800a628 <HAL_FLASHEx_Erase+0xd8>)
 800a61a:	2200      	movs	r2, #0
 800a61c:	761a      	strb	r2, [r3, #24]

  return status;
 800a61e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a620:	4618      	mov	r0, r3
 800a622:	3710      	adds	r7, #16
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}
 800a628:	20000d9c 	.word	0x20000d9c
 800a62c:	40023c00 	.word	0x40023c00

0800a630 <HAL_FLASHEx_Erase_IT>:
  *         contains the configuration information for the erasing.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b084      	sub	sp, #16
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a638:	2300      	movs	r3, #0
 800a63a:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a63c:	4b25      	ldr	r3, [pc, #148]	; (800a6d4 <HAL_FLASHEx_Erase_IT+0xa4>)
 800a63e:	7e1b      	ldrb	r3, [r3, #24]
 800a640:	2b01      	cmp	r3, #1
 800a642:	d101      	bne.n	800a648 <HAL_FLASHEx_Erase_IT+0x18>
 800a644:	2302      	movs	r3, #2
 800a646:	e040      	b.n	800a6ca <HAL_FLASHEx_Erase_IT+0x9a>
 800a648:	4b22      	ldr	r3, [pc, #136]	; (800a6d4 <HAL_FLASHEx_Erase_IT+0xa4>)
 800a64a:	2201      	movs	r2, #1
 800a64c:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Enable End of FLASH Operation interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
 800a64e:	4b22      	ldr	r3, [pc, #136]	; (800a6d8 <HAL_FLASHEx_Erase_IT+0xa8>)
 800a650:	691b      	ldr	r3, [r3, #16]
 800a652:	4a21      	ldr	r2, [pc, #132]	; (800a6d8 <HAL_FLASHEx_Erase_IT+0xa8>)
 800a654:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a658:	6113      	str	r3, [r2, #16]

  /* Enable Error source interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
 800a65a:	4b1f      	ldr	r3, [pc, #124]	; (800a6d8 <HAL_FLASHEx_Erase_IT+0xa8>)
 800a65c:	691b      	ldr	r3, [r3, #16]
 800a65e:	4a1e      	ldr	r2, [pc, #120]	; (800a6d8 <HAL_FLASHEx_Erase_IT+0xa8>)
 800a660:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a664:	6113      	str	r3, [r2, #16]

  /* Clear pending flags (if any) */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP    | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | \
 800a666:	4b1c      	ldr	r3, [pc, #112]	; (800a6d8 <HAL_FLASHEx_Erase_IT+0xa8>)
 800a668:	22f3      	movs	r2, #243	; 0xf3
 800a66a:	60da      	str	r2, [r3, #12]
                         FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	2b01      	cmp	r3, #1
 800a672:	d110      	bne.n	800a696 <HAL_FLASHEx_Erase_IT+0x66>
  {
    /*Mass erase to be done*/
    pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE;
 800a674:	4b17      	ldr	r3, [pc, #92]	; (800a6d4 <HAL_FLASHEx_Erase_IT+0xa4>)
 800a676:	2202      	movs	r2, #2
 800a678:	701a      	strb	r2, [r3, #0]
    pFlash.Bank = pEraseInit->Banks;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	4a15      	ldr	r2, [pc, #84]	; (800a6d4 <HAL_FLASHEx_Erase_IT+0xa4>)
 800a680:	6113      	str	r3, [r2, #16]
    FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	691b      	ldr	r3, [r3, #16]
 800a686:	b2da      	uxtb	r2, r3
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	4619      	mov	r1, r3
 800a68e:	4610      	mov	r0, r2
 800a690:	f000 f8b5 	bl	800a7fe <FLASH_MassErase>
 800a694:	e018      	b.n	800a6c8 <HAL_FLASHEx_Erase_IT+0x98>
    /* Erase by sector to be done*/

    /* Check the parameters */
    assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

    pFlash.ProcedureOnGoing = FLASH_PROC_SECTERASE;
 800a696:	4b0f      	ldr	r3, [pc, #60]	; (800a6d4 <HAL_FLASHEx_Erase_IT+0xa4>)
 800a698:	2201      	movs	r2, #1
 800a69a:	701a      	strb	r2, [r3, #0]
    pFlash.NbSectorsToErase = pEraseInit->NbSectors;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	68db      	ldr	r3, [r3, #12]
 800a6a0:	4a0c      	ldr	r2, [pc, #48]	; (800a6d4 <HAL_FLASHEx_Erase_IT+0xa4>)
 800a6a2:	6053      	str	r3, [r2, #4]
    pFlash.Sector = pEraseInit->Sector;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	689b      	ldr	r3, [r3, #8]
 800a6a8:	4a0a      	ldr	r2, [pc, #40]	; (800a6d4 <HAL_FLASHEx_Erase_IT+0xa4>)
 800a6aa:	60d3      	str	r3, [r2, #12]
    pFlash.VoltageForErase = (uint8_t)pEraseInit->VoltageRange;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	691b      	ldr	r3, [r3, #16]
 800a6b0:	b2da      	uxtb	r2, r3
 800a6b2:	4b08      	ldr	r3, [pc, #32]	; (800a6d4 <HAL_FLASHEx_Erase_IT+0xa4>)
 800a6b4:	721a      	strb	r2, [r3, #8]

    /*Erase 1st sector and wait for IT*/
    FLASH_Erase_Sector(pEraseInit->Sector, pEraseInit->VoltageRange);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	689a      	ldr	r2, [r3, #8]
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	691b      	ldr	r3, [r3, #16]
 800a6be:	b2db      	uxtb	r3, r3
 800a6c0:	4619      	mov	r1, r3
 800a6c2:	4610      	mov	r0, r2
 800a6c4:	f000 f8be 	bl	800a844 <FLASH_Erase_Sector>
  }

  return status;
 800a6c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3710      	adds	r7, #16
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}
 800a6d2:	bf00      	nop
 800a6d4:	20000d9c 	.word	0x20000d9c
 800a6d8:	40023c00 	.word	0x40023c00

0800a6dc <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b084      	sub	sp, #16
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a6e8:	4b32      	ldr	r3, [pc, #200]	; (800a7b4 <HAL_FLASHEx_OBProgram+0xd8>)
 800a6ea:	7e1b      	ldrb	r3, [r3, #24]
 800a6ec:	2b01      	cmp	r3, #1
 800a6ee:	d101      	bne.n	800a6f4 <HAL_FLASHEx_OBProgram+0x18>
 800a6f0:	2302      	movs	r3, #2
 800a6f2:	e05b      	b.n	800a7ac <HAL_FLASHEx_OBProgram+0xd0>
 800a6f4:	4b2f      	ldr	r3, [pc, #188]	; (800a7b4 <HAL_FLASHEx_OBProgram+0xd8>)
 800a6f6:	2201      	movs	r2, #1
 800a6f8:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /*Write protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f003 0301 	and.w	r3, r3, #1
 800a702:	2b00      	cmp	r3, #0
 800a704:	d018      	beq.n	800a738 <HAL_FLASHEx_OBProgram+0x5c>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	2b01      	cmp	r3, #1
 800a70c:	d10a      	bne.n	800a724 <HAL_FLASHEx_OBProgram+0x48>
    {
      /*Enable of Write protection on the selected Sector*/
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector, pOBInit->Banks);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	689a      	ldr	r2, [r3, #8]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	68db      	ldr	r3, [r3, #12]
 800a716:	4619      	mov	r1, r3
 800a718:	4610      	mov	r0, r2
 800a71a:	f000 f8db 	bl	800a8d4 <FLASH_OB_EnableWRP>
 800a71e:	4603      	mov	r3, r0
 800a720:	73fb      	strb	r3, [r7, #15]
 800a722:	e009      	b.n	800a738 <HAL_FLASHEx_OBProgram+0x5c>
    }
    else
    {
      /*Disable of Write protection on the selected Sector*/
      status = FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	689a      	ldr	r2, [r3, #8]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	68db      	ldr	r3, [r3, #12]
 800a72c:	4619      	mov	r1, r3
 800a72e:	4610      	mov	r0, r2
 800a730:	f000 f8f2 	bl	800a918 <FLASH_OB_DisableWRP>
 800a734:	4603      	mov	r3, r0
 800a736:	73fb      	strb	r3, [r7, #15]
    }
  }

  /*Read protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f003 0302 	and.w	r3, r3, #2
 800a740:	2b00      	cmp	r3, #0
 800a742:	d007      	beq.n	800a754 <HAL_FLASHEx_OBProgram+0x78>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	691b      	ldr	r3, [r3, #16]
 800a748:	b2db      	uxtb	r3, r3
 800a74a:	4618      	mov	r0, r3
 800a74c:	f000 f904 	bl	800a958 <FLASH_OB_RDP_LevelConfig>
 800a750:	4603      	mov	r3, r0
 800a752:	73fb      	strb	r3, [r7, #15]
  }

  /*USER  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f003 0304 	and.w	r3, r3, #4
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d013      	beq.n	800a788 <HAL_FLASHEx_OBProgram+0xac>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	7e1b      	ldrb	r3, [r3, #24]
 800a764:	f003 0320 	and.w	r3, r3, #32
 800a768:	b2d8      	uxtb	r0, r3
                                 pOBInit->USERConfig & OB_STOP_NO_RST,
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 800a76e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a772:	b2d9      	uxtb	r1, r3
                                 pOBInit->USERConfig & OB_STDBY_NO_RST);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 800a778:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a77c:	b2db      	uxtb	r3, r3
 800a77e:	461a      	mov	r2, r3
 800a780:	f000 f904 	bl	800a98c <FLASH_OB_UserConfig>
 800a784:	4603      	mov	r3, r0
 800a786:	73fb      	strb	r3, [r7, #15]
  }

  /*BOR Level  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f003 0308 	and.w	r3, r3, #8
 800a790:	2b00      	cmp	r3, #0
 800a792:	d007      	beq.n	800a7a4 <HAL_FLASHEx_OBProgram+0xc8>
  {
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	695b      	ldr	r3, [r3, #20]
 800a798:	b2db      	uxtb	r3, r3
 800a79a:	4618      	mov	r0, r3
 800a79c:	f000 f926 	bl	800a9ec <FLASH_OB_BOR_LevelConfig>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a7a4:	4b03      	ldr	r3, [pc, #12]	; (800a7b4 <HAL_FLASHEx_OBProgram+0xd8>)
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	761a      	strb	r2, [r3, #24]

  return status;
 800a7aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3710      	adds	r7, #16
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}
 800a7b4:	20000d9c 	.word	0x20000d9c

0800a7b8 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b082      	sub	sp, #8
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	220f      	movs	r2, #15
 800a7c4:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 800a7c6:	f000 f93f 	bl	800aa48 <FLASH_OB_GetWRP>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 800a7d2:	f000 f945 	bl	800aa60 <FLASH_OB_GetRDP>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	461a      	mov	r2, r3
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 800a7de:	f000 f923 	bl	800aa28 <FLASH_OB_GetUser>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	461a      	mov	r2, r3
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 800a7ea:	f000 f959 	bl	800aaa0 <FLASH_OB_GetBOR>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	461a      	mov	r2, r3
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	615a      	str	r2, [r3, #20]
}
 800a7f6:	bf00      	nop
 800a7f8:	3708      	adds	r7, #8
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}

0800a7fe <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800a7fe:	b480      	push	{r7}
 800a800:	b083      	sub	sp, #12
 800a802:	af00      	add	r7, sp, #0
 800a804:	4603      	mov	r3, r0
 800a806:	6039      	str	r1, [r7, #0]
 800a808:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a80a:	4b0d      	ldr	r3, [pc, #52]	; (800a840 <FLASH_MassErase+0x42>)
 800a80c:	691b      	ldr	r3, [r3, #16]
 800a80e:	4a0c      	ldr	r2, [pc, #48]	; (800a840 <FLASH_MassErase+0x42>)
 800a810:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a814:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800a816:	4b0a      	ldr	r3, [pc, #40]	; (800a840 <FLASH_MassErase+0x42>)
 800a818:	691b      	ldr	r3, [r3, #16]
 800a81a:	4a09      	ldr	r2, [pc, #36]	; (800a840 <FLASH_MassErase+0x42>)
 800a81c:	f043 0304 	orr.w	r3, r3, #4
 800a820:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800a822:	4b07      	ldr	r3, [pc, #28]	; (800a840 <FLASH_MassErase+0x42>)
 800a824:	691a      	ldr	r2, [r3, #16]
 800a826:	79fb      	ldrb	r3, [r7, #7]
 800a828:	021b      	lsls	r3, r3, #8
 800a82a:	4313      	orrs	r3, r2
 800a82c:	4a04      	ldr	r2, [pc, #16]	; (800a840 <FLASH_MassErase+0x42>)
 800a82e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a832:	6113      	str	r3, [r2, #16]
}
 800a834:	bf00      	nop
 800a836:	370c      	adds	r7, #12
 800a838:	46bd      	mov	sp, r7
 800a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83e:	4770      	bx	lr
 800a840:	40023c00 	.word	0x40023c00

0800a844 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800a844:	b480      	push	{r7}
 800a846:	b085      	sub	sp, #20
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
 800a84c:	460b      	mov	r3, r1
 800a84e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800a850:	2300      	movs	r3, #0
 800a852:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800a854:	78fb      	ldrb	r3, [r7, #3]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d102      	bne.n	800a860 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800a85a:	2300      	movs	r3, #0
 800a85c:	60fb      	str	r3, [r7, #12]
 800a85e:	e010      	b.n	800a882 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800a860:	78fb      	ldrb	r3, [r7, #3]
 800a862:	2b01      	cmp	r3, #1
 800a864:	d103      	bne.n	800a86e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800a866:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a86a:	60fb      	str	r3, [r7, #12]
 800a86c:	e009      	b.n	800a882 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800a86e:	78fb      	ldrb	r3, [r7, #3]
 800a870:	2b02      	cmp	r3, #2
 800a872:	d103      	bne.n	800a87c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800a874:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a878:	60fb      	str	r3, [r7, #12]
 800a87a:	e002      	b.n	800a882 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800a87c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a880:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a882:	4b13      	ldr	r3, [pc, #76]	; (800a8d0 <FLASH_Erase_Sector+0x8c>)
 800a884:	691b      	ldr	r3, [r3, #16]
 800a886:	4a12      	ldr	r2, [pc, #72]	; (800a8d0 <FLASH_Erase_Sector+0x8c>)
 800a888:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a88c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800a88e:	4b10      	ldr	r3, [pc, #64]	; (800a8d0 <FLASH_Erase_Sector+0x8c>)
 800a890:	691a      	ldr	r2, [r3, #16]
 800a892:	490f      	ldr	r1, [pc, #60]	; (800a8d0 <FLASH_Erase_Sector+0x8c>)
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	4313      	orrs	r3, r2
 800a898:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800a89a:	4b0d      	ldr	r3, [pc, #52]	; (800a8d0 <FLASH_Erase_Sector+0x8c>)
 800a89c:	691b      	ldr	r3, [r3, #16]
 800a89e:	4a0c      	ldr	r2, [pc, #48]	; (800a8d0 <FLASH_Erase_Sector+0x8c>)
 800a8a0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800a8a4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800a8a6:	4b0a      	ldr	r3, [pc, #40]	; (800a8d0 <FLASH_Erase_Sector+0x8c>)
 800a8a8:	691a      	ldr	r2, [r3, #16]
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	00db      	lsls	r3, r3, #3
 800a8ae:	4313      	orrs	r3, r2
 800a8b0:	4a07      	ldr	r2, [pc, #28]	; (800a8d0 <FLASH_Erase_Sector+0x8c>)
 800a8b2:	f043 0302 	orr.w	r3, r3, #2
 800a8b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800a8b8:	4b05      	ldr	r3, [pc, #20]	; (800a8d0 <FLASH_Erase_Sector+0x8c>)
 800a8ba:	691b      	ldr	r3, [r3, #16]
 800a8bc:	4a04      	ldr	r2, [pc, #16]	; (800a8d0 <FLASH_Erase_Sector+0x8c>)
 800a8be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8c2:	6113      	str	r3, [r2, #16]
}
 800a8c4:	bf00      	nop
 800a8c6:	3714      	adds	r7, #20
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ce:	4770      	bx	lr
 800a8d0:	40023c00 	.word	0x40023c00

0800a8d4 <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b084      	sub	sp, #16
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a8e2:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a8e6:	f7ff fd03 	bl	800a2f0 <FLASH_WaitForLastOperation>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800a8ee:	7bfb      	ldrb	r3, [r7, #15]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d10a      	bne.n	800a90a <FLASH_OB_EnableWRP+0x36>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS &= (~WRPSector);
 800a8f4:	4b07      	ldr	r3, [pc, #28]	; (800a914 <FLASH_OB_EnableWRP+0x40>)
 800a8f6:	881b      	ldrh	r3, [r3, #0]
 800a8f8:	b29a      	uxth	r2, r3
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	b29b      	uxth	r3, r3
 800a8fe:	43db      	mvns	r3, r3
 800a900:	b29b      	uxth	r3, r3
 800a902:	4904      	ldr	r1, [pc, #16]	; (800a914 <FLASH_OB_EnableWRP+0x40>)
 800a904:	4013      	ands	r3, r2
 800a906:	b29b      	uxth	r3, r3
 800a908:	800b      	strh	r3, [r1, #0]
  }

  return status;
 800a90a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3710      	adds	r7, #16
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}
 800a914:	40023c16 	.word	0x40023c16

0800a918 <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b084      	sub	sp, #16
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a922:	2300      	movs	r3, #0
 800a924:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a926:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a92a:	f7ff fce1 	bl	800a2f0 <FLASH_WaitForLastOperation>
 800a92e:	4603      	mov	r3, r0
 800a930:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800a932:	7bfb      	ldrb	r3, [r7, #15]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d108      	bne.n	800a94a <FLASH_OB_DisableWRP+0x32>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS |= (uint16_t)WRPSector;
 800a938:	4b06      	ldr	r3, [pc, #24]	; (800a954 <FLASH_OB_DisableWRP+0x3c>)
 800a93a:	881b      	ldrh	r3, [r3, #0]
 800a93c:	b29a      	uxth	r2, r3
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	b29b      	uxth	r3, r3
 800a942:	4904      	ldr	r1, [pc, #16]	; (800a954 <FLASH_OB_DisableWRP+0x3c>)
 800a944:	4313      	orrs	r3, r2
 800a946:	b29b      	uxth	r3, r3
 800a948:	800b      	strh	r3, [r1, #0]
  }

  return status;
 800a94a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3710      	adds	r7, #16
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}
 800a954:	40023c16 	.word	0x40023c16

0800a958 <FLASH_OB_RDP_LevelConfig>:
  * @note WARNING: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b084      	sub	sp, #16
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	4603      	mov	r3, r0
 800a960:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800a962:	2300      	movs	r3, #0
 800a964:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a966:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a96a:	f7ff fcc1 	bl	800a2f0 <FLASH_WaitForLastOperation>
 800a96e:	4603      	mov	r3, r0
 800a970:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800a972:	7bfb      	ldrb	r3, [r7, #15]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d102      	bne.n	800a97e <FLASH_OB_RDP_LevelConfig+0x26>
  {
    *(__IO uint8_t *)OPTCR_BYTE1_ADDRESS = Level;
 800a978:	4a03      	ldr	r2, [pc, #12]	; (800a988 <FLASH_OB_RDP_LevelConfig+0x30>)
 800a97a:	79fb      	ldrb	r3, [r7, #7]
 800a97c:	7013      	strb	r3, [r2, #0]
  }

  return status;
 800a97e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a980:	4618      	mov	r0, r3
 800a982:	3710      	adds	r7, #16
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}
 800a988:	40023c15 	.word	0x40023c15

0800a98c <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NO_RST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t Iwdg, uint8_t Stop, uint8_t Stdby)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b084      	sub	sp, #16
 800a990:	af00      	add	r7, sp, #0
 800a992:	4603      	mov	r3, r0
 800a994:	71fb      	strb	r3, [r7, #7]
 800a996:	460b      	mov	r3, r1
 800a998:	71bb      	strb	r3, [r7, #6]
 800a99a:	4613      	mov	r3, r2
 800a99c:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
 800a99e:	23ff      	movs	r3, #255	; 0xff
 800a9a0:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef status = HAL_OK;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	73bb      	strb	r3, [r7, #14]
  assert_param(IS_OB_IWDG_SOURCE(Iwdg));
  assert_param(IS_OB_STOP_SOURCE(Stop));
  assert_param(IS_OB_STDBY_SOURCE(Stdby));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a9a6:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a9aa:	f7ff fca1 	bl	800a2f0 <FLASH_WaitForLastOperation>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	73bb      	strb	r3, [r7, #14]

  if (status == HAL_OK)
 800a9b2:	7bbb      	ldrb	r3, [r7, #14]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d111      	bne.n	800a9dc <FLASH_OB_UserConfig+0x50>
  {
    /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
    optiontmp = (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
 800a9b8:	4b0b      	ldr	r3, [pc, #44]	; (800a9e8 <FLASH_OB_UserConfig+0x5c>)
 800a9ba:	781b      	ldrb	r3, [r3, #0]
 800a9bc:	b2db      	uxtb	r3, r3
 800a9be:	f003 031f 	and.w	r3, r3, #31
 800a9c2:	73fb      	strb	r3, [r7, #15]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)optiontmp)));
 800a9c4:	79ba      	ldrb	r2, [r7, #6]
 800a9c6:	7bfb      	ldrb	r3, [r7, #15]
 800a9c8:	4313      	orrs	r3, r2
 800a9ca:	b2da      	uxtb	r2, r3
 800a9cc:	797b      	ldrb	r3, [r7, #5]
 800a9ce:	4313      	orrs	r3, r2
 800a9d0:	b2da      	uxtb	r2, r3
 800a9d2:	4905      	ldr	r1, [pc, #20]	; (800a9e8 <FLASH_OB_UserConfig+0x5c>)
 800a9d4:	79fb      	ldrb	r3, [r7, #7]
 800a9d6:	4313      	orrs	r3, r2
 800a9d8:	b2db      	uxtb	r3, r3
 800a9da:	700b      	strb	r3, [r1, #0]
  }

  return status;
 800a9dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3710      	adds	r7, #16
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}
 800a9e6:	bf00      	nop
 800a9e8:	40023c14 	.word	0x40023c14

0800a9ec <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b083      	sub	sp, #12
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 800a9f6:	4b0b      	ldr	r3, [pc, #44]	; (800aa24 <FLASH_OB_BOR_LevelConfig+0x38>)
 800a9f8:	781b      	ldrb	r3, [r3, #0]
 800a9fa:	b2db      	uxtb	r3, r3
 800a9fc:	4a09      	ldr	r2, [pc, #36]	; (800aa24 <FLASH_OB_BOR_LevelConfig+0x38>)
 800a9fe:	f023 030c 	bic.w	r3, r3, #12
 800aa02:	b2db      	uxtb	r3, r3
 800aa04:	7013      	strb	r3, [r2, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= Level;
 800aa06:	4b07      	ldr	r3, [pc, #28]	; (800aa24 <FLASH_OB_BOR_LevelConfig+0x38>)
 800aa08:	781b      	ldrb	r3, [r3, #0]
 800aa0a:	b2da      	uxtb	r2, r3
 800aa0c:	4905      	ldr	r1, [pc, #20]	; (800aa24 <FLASH_OB_BOR_LevelConfig+0x38>)
 800aa0e:	79fb      	ldrb	r3, [r7, #7]
 800aa10:	4313      	orrs	r3, r2
 800aa12:	b2db      	uxtb	r3, r3
 800aa14:	700b      	strb	r3, [r1, #0]

  return HAL_OK;
 800aa16:	2300      	movs	r3, #0

}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	370c      	adds	r7, #12
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa22:	4770      	bx	lr
 800aa24:	40023c14 	.word	0x40023c14

0800aa28 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 800aa28:	b480      	push	{r7}
 800aa2a:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 800aa2c:	4b05      	ldr	r3, [pc, #20]	; (800aa44 <FLASH_OB_GetUser+0x1c>)
 800aa2e:	695b      	ldr	r3, [r3, #20]
 800aa30:	b2db      	uxtb	r3, r3
 800aa32:	f023 031f 	bic.w	r3, r3, #31
 800aa36:	b2db      	uxtb	r3, r3
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr
 800aa42:	bf00      	nop
 800aa44:	40023c00 	.word	0x40023c00

0800aa48 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 800aa4c:	4b03      	ldr	r3, [pc, #12]	; (800aa5c <FLASH_OB_GetWRP+0x14>)
 800aa4e:	881b      	ldrh	r3, [r3, #0]
 800aa50:	b29b      	uxth	r3, r3
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	46bd      	mov	sp, r7
 800aa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5a:	4770      	bx	lr
 800aa5c:	40023c16 	.word	0x40023c16

0800aa60 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b083      	sub	sp, #12
 800aa64:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 800aa66:	23aa      	movs	r3, #170	; 0xaa
 800aa68:	71fb      	strb	r3, [r7, #7]

  if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2)
 800aa6a:	4b0c      	ldr	r3, [pc, #48]	; (800aa9c <FLASH_OB_GetRDP+0x3c>)
 800aa6c:	781b      	ldrb	r3, [r3, #0]
 800aa6e:	b2db      	uxtb	r3, r3
 800aa70:	2bcc      	cmp	r3, #204	; 0xcc
 800aa72:	d102      	bne.n	800aa7a <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 800aa74:	23cc      	movs	r3, #204	; 0xcc
 800aa76:	71fb      	strb	r3, [r7, #7]
 800aa78:	e009      	b.n	800aa8e <FLASH_OB_GetRDP+0x2e>
  }
  else if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0)
 800aa7a:	4b08      	ldr	r3, [pc, #32]	; (800aa9c <FLASH_OB_GetRDP+0x3c>)
 800aa7c:	781b      	ldrb	r3, [r3, #0]
 800aa7e:	b2db      	uxtb	r3, r3
 800aa80:	2baa      	cmp	r3, #170	; 0xaa
 800aa82:	d102      	bne.n	800aa8a <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 800aa84:	23aa      	movs	r3, #170	; 0xaa
 800aa86:	71fb      	strb	r3, [r7, #7]
 800aa88:	e001      	b.n	800aa8e <FLASH_OB_GetRDP+0x2e>
  }
  else
  {
    readstatus = OB_RDP_LEVEL_1;
 800aa8a:	2355      	movs	r3, #85	; 0x55
 800aa8c:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 800aa8e:	79fb      	ldrb	r3, [r7, #7]
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	370c      	adds	r7, #12
 800aa94:	46bd      	mov	sp, r7
 800aa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9a:	4770      	bx	lr
 800aa9c:	40023c15 	.word	0x40023c15

0800aaa0 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 800aaa4:	4b05      	ldr	r3, [pc, #20]	; (800aabc <FLASH_OB_GetBOR+0x1c>)
 800aaa6:	781b      	ldrb	r3, [r3, #0]
 800aaa8:	b2db      	uxtb	r3, r3
 800aaaa:	f003 030c 	and.w	r3, r3, #12
 800aaae:	b2db      	uxtb	r3, r3
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	46bd      	mov	sp, r7
 800aab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab8:	4770      	bx	lr
 800aaba:	bf00      	nop
 800aabc:	40023c14 	.word	0x40023c14

0800aac0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800aac0:	b480      	push	{r7}
 800aac2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800aac4:	4b20      	ldr	r3, [pc, #128]	; (800ab48 <FLASH_FlushCaches+0x88>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d017      	beq.n	800ab00 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800aad0:	4b1d      	ldr	r3, [pc, #116]	; (800ab48 <FLASH_FlushCaches+0x88>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	4a1c      	ldr	r2, [pc, #112]	; (800ab48 <FLASH_FlushCaches+0x88>)
 800aad6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aada:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800aadc:	4b1a      	ldr	r3, [pc, #104]	; (800ab48 <FLASH_FlushCaches+0x88>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	4a19      	ldr	r2, [pc, #100]	; (800ab48 <FLASH_FlushCaches+0x88>)
 800aae2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800aae6:	6013      	str	r3, [r2, #0]
 800aae8:	4b17      	ldr	r3, [pc, #92]	; (800ab48 <FLASH_FlushCaches+0x88>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	4a16      	ldr	r2, [pc, #88]	; (800ab48 <FLASH_FlushCaches+0x88>)
 800aaee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aaf2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800aaf4:	4b14      	ldr	r3, [pc, #80]	; (800ab48 <FLASH_FlushCaches+0x88>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	4a13      	ldr	r2, [pc, #76]	; (800ab48 <FLASH_FlushCaches+0x88>)
 800aafa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aafe:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800ab00:	4b11      	ldr	r3, [pc, #68]	; (800ab48 <FLASH_FlushCaches+0x88>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d017      	beq.n	800ab3c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800ab0c:	4b0e      	ldr	r3, [pc, #56]	; (800ab48 <FLASH_FlushCaches+0x88>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	4a0d      	ldr	r2, [pc, #52]	; (800ab48 <FLASH_FlushCaches+0x88>)
 800ab12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ab16:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800ab18:	4b0b      	ldr	r3, [pc, #44]	; (800ab48 <FLASH_FlushCaches+0x88>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	4a0a      	ldr	r2, [pc, #40]	; (800ab48 <FLASH_FlushCaches+0x88>)
 800ab1e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ab22:	6013      	str	r3, [r2, #0]
 800ab24:	4b08      	ldr	r3, [pc, #32]	; (800ab48 <FLASH_FlushCaches+0x88>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	4a07      	ldr	r2, [pc, #28]	; (800ab48 <FLASH_FlushCaches+0x88>)
 800ab2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab2e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800ab30:	4b05      	ldr	r3, [pc, #20]	; (800ab48 <FLASH_FlushCaches+0x88>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	4a04      	ldr	r2, [pc, #16]	; (800ab48 <FLASH_FlushCaches+0x88>)
 800ab36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ab3a:	6013      	str	r3, [r2, #0]
  }
}
 800ab3c:	bf00      	nop
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab44:	4770      	bx	lr
 800ab46:	bf00      	nop
 800ab48:	40023c00 	.word	0x40023c00

0800ab4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b089      	sub	sp, #36	; 0x24
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800ab56:	2300      	movs	r3, #0
 800ab58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ab62:	2300      	movs	r3, #0
 800ab64:	61fb      	str	r3, [r7, #28]
 800ab66:	e16b      	b.n	800ae40 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800ab68:	2201      	movs	r2, #1
 800ab6a:	69fb      	ldr	r3, [r7, #28]
 800ab6c:	fa02 f303 	lsl.w	r3, r2, r3
 800ab70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	697a      	ldr	r2, [r7, #20]
 800ab78:	4013      	ands	r3, r2
 800ab7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800ab7c:	693a      	ldr	r2, [r7, #16]
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	429a      	cmp	r2, r3
 800ab82:	f040 815a 	bne.w	800ae3a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	f003 0303 	and.w	r3, r3, #3
 800ab8e:	2b01      	cmp	r3, #1
 800ab90:	d005      	beq.n	800ab9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	685b      	ldr	r3, [r3, #4]
 800ab96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800ab9a:	2b02      	cmp	r3, #2
 800ab9c:	d130      	bne.n	800ac00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	689b      	ldr	r3, [r3, #8]
 800aba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800aba4:	69fb      	ldr	r3, [r7, #28]
 800aba6:	005b      	lsls	r3, r3, #1
 800aba8:	2203      	movs	r2, #3
 800abaa:	fa02 f303 	lsl.w	r3, r2, r3
 800abae:	43db      	mvns	r3, r3
 800abb0:	69ba      	ldr	r2, [r7, #24]
 800abb2:	4013      	ands	r3, r2
 800abb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	68da      	ldr	r2, [r3, #12]
 800abba:	69fb      	ldr	r3, [r7, #28]
 800abbc:	005b      	lsls	r3, r3, #1
 800abbe:	fa02 f303 	lsl.w	r3, r2, r3
 800abc2:	69ba      	ldr	r2, [r7, #24]
 800abc4:	4313      	orrs	r3, r2
 800abc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	69ba      	ldr	r2, [r7, #24]
 800abcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	685b      	ldr	r3, [r3, #4]
 800abd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800abd4:	2201      	movs	r2, #1
 800abd6:	69fb      	ldr	r3, [r7, #28]
 800abd8:	fa02 f303 	lsl.w	r3, r2, r3
 800abdc:	43db      	mvns	r3, r3
 800abde:	69ba      	ldr	r2, [r7, #24]
 800abe0:	4013      	ands	r3, r2
 800abe2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	685b      	ldr	r3, [r3, #4]
 800abe8:	091b      	lsrs	r3, r3, #4
 800abea:	f003 0201 	and.w	r2, r3, #1
 800abee:	69fb      	ldr	r3, [r7, #28]
 800abf0:	fa02 f303 	lsl.w	r3, r2, r3
 800abf4:	69ba      	ldr	r2, [r7, #24]
 800abf6:	4313      	orrs	r3, r2
 800abf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	69ba      	ldr	r2, [r7, #24]
 800abfe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	685b      	ldr	r3, [r3, #4]
 800ac04:	f003 0303 	and.w	r3, r3, #3
 800ac08:	2b03      	cmp	r3, #3
 800ac0a:	d017      	beq.n	800ac3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	68db      	ldr	r3, [r3, #12]
 800ac10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800ac12:	69fb      	ldr	r3, [r7, #28]
 800ac14:	005b      	lsls	r3, r3, #1
 800ac16:	2203      	movs	r2, #3
 800ac18:	fa02 f303 	lsl.w	r3, r2, r3
 800ac1c:	43db      	mvns	r3, r3
 800ac1e:	69ba      	ldr	r2, [r7, #24]
 800ac20:	4013      	ands	r3, r2
 800ac22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	689a      	ldr	r2, [r3, #8]
 800ac28:	69fb      	ldr	r3, [r7, #28]
 800ac2a:	005b      	lsls	r3, r3, #1
 800ac2c:	fa02 f303 	lsl.w	r3, r2, r3
 800ac30:	69ba      	ldr	r2, [r7, #24]
 800ac32:	4313      	orrs	r3, r2
 800ac34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	69ba      	ldr	r2, [r7, #24]
 800ac3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	685b      	ldr	r3, [r3, #4]
 800ac40:	f003 0303 	and.w	r3, r3, #3
 800ac44:	2b02      	cmp	r3, #2
 800ac46:	d123      	bne.n	800ac90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ac48:	69fb      	ldr	r3, [r7, #28]
 800ac4a:	08da      	lsrs	r2, r3, #3
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	3208      	adds	r2, #8
 800ac50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800ac56:	69fb      	ldr	r3, [r7, #28]
 800ac58:	f003 0307 	and.w	r3, r3, #7
 800ac5c:	009b      	lsls	r3, r3, #2
 800ac5e:	220f      	movs	r2, #15
 800ac60:	fa02 f303 	lsl.w	r3, r2, r3
 800ac64:	43db      	mvns	r3, r3
 800ac66:	69ba      	ldr	r2, [r7, #24]
 800ac68:	4013      	ands	r3, r2
 800ac6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	691a      	ldr	r2, [r3, #16]
 800ac70:	69fb      	ldr	r3, [r7, #28]
 800ac72:	f003 0307 	and.w	r3, r3, #7
 800ac76:	009b      	lsls	r3, r3, #2
 800ac78:	fa02 f303 	lsl.w	r3, r2, r3
 800ac7c:	69ba      	ldr	r2, [r7, #24]
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ac82:	69fb      	ldr	r3, [r7, #28]
 800ac84:	08da      	lsrs	r2, r3, #3
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	3208      	adds	r2, #8
 800ac8a:	69b9      	ldr	r1, [r7, #24]
 800ac8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ac96:	69fb      	ldr	r3, [r7, #28]
 800ac98:	005b      	lsls	r3, r3, #1
 800ac9a:	2203      	movs	r2, #3
 800ac9c:	fa02 f303 	lsl.w	r3, r2, r3
 800aca0:	43db      	mvns	r3, r3
 800aca2:	69ba      	ldr	r2, [r7, #24]
 800aca4:	4013      	ands	r3, r2
 800aca6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	685b      	ldr	r3, [r3, #4]
 800acac:	f003 0203 	and.w	r2, r3, #3
 800acb0:	69fb      	ldr	r3, [r7, #28]
 800acb2:	005b      	lsls	r3, r3, #1
 800acb4:	fa02 f303 	lsl.w	r3, r2, r3
 800acb8:	69ba      	ldr	r2, [r7, #24]
 800acba:	4313      	orrs	r3, r2
 800acbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	69ba      	ldr	r2, [r7, #24]
 800acc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	685b      	ldr	r3, [r3, #4]
 800acc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800accc:	2b00      	cmp	r3, #0
 800acce:	f000 80b4 	beq.w	800ae3a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800acd2:	2300      	movs	r3, #0
 800acd4:	60fb      	str	r3, [r7, #12]
 800acd6:	4b60      	ldr	r3, [pc, #384]	; (800ae58 <HAL_GPIO_Init+0x30c>)
 800acd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acda:	4a5f      	ldr	r2, [pc, #380]	; (800ae58 <HAL_GPIO_Init+0x30c>)
 800acdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ace0:	6453      	str	r3, [r2, #68]	; 0x44
 800ace2:	4b5d      	ldr	r3, [pc, #372]	; (800ae58 <HAL_GPIO_Init+0x30c>)
 800ace4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ace6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800acea:	60fb      	str	r3, [r7, #12]
 800acec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800acee:	4a5b      	ldr	r2, [pc, #364]	; (800ae5c <HAL_GPIO_Init+0x310>)
 800acf0:	69fb      	ldr	r3, [r7, #28]
 800acf2:	089b      	lsrs	r3, r3, #2
 800acf4:	3302      	adds	r3, #2
 800acf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800acfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800acfc:	69fb      	ldr	r3, [r7, #28]
 800acfe:	f003 0303 	and.w	r3, r3, #3
 800ad02:	009b      	lsls	r3, r3, #2
 800ad04:	220f      	movs	r2, #15
 800ad06:	fa02 f303 	lsl.w	r3, r2, r3
 800ad0a:	43db      	mvns	r3, r3
 800ad0c:	69ba      	ldr	r2, [r7, #24]
 800ad0e:	4013      	ands	r3, r2
 800ad10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	4a52      	ldr	r2, [pc, #328]	; (800ae60 <HAL_GPIO_Init+0x314>)
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d02b      	beq.n	800ad72 <HAL_GPIO_Init+0x226>
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	4a51      	ldr	r2, [pc, #324]	; (800ae64 <HAL_GPIO_Init+0x318>)
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d025      	beq.n	800ad6e <HAL_GPIO_Init+0x222>
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	4a50      	ldr	r2, [pc, #320]	; (800ae68 <HAL_GPIO_Init+0x31c>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d01f      	beq.n	800ad6a <HAL_GPIO_Init+0x21e>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	4a4f      	ldr	r2, [pc, #316]	; (800ae6c <HAL_GPIO_Init+0x320>)
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d019      	beq.n	800ad66 <HAL_GPIO_Init+0x21a>
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	4a4e      	ldr	r2, [pc, #312]	; (800ae70 <HAL_GPIO_Init+0x324>)
 800ad36:	4293      	cmp	r3, r2
 800ad38:	d013      	beq.n	800ad62 <HAL_GPIO_Init+0x216>
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	4a4d      	ldr	r2, [pc, #308]	; (800ae74 <HAL_GPIO_Init+0x328>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d00d      	beq.n	800ad5e <HAL_GPIO_Init+0x212>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	4a4c      	ldr	r2, [pc, #304]	; (800ae78 <HAL_GPIO_Init+0x32c>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d007      	beq.n	800ad5a <HAL_GPIO_Init+0x20e>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	4a4b      	ldr	r2, [pc, #300]	; (800ae7c <HAL_GPIO_Init+0x330>)
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	d101      	bne.n	800ad56 <HAL_GPIO_Init+0x20a>
 800ad52:	2307      	movs	r3, #7
 800ad54:	e00e      	b.n	800ad74 <HAL_GPIO_Init+0x228>
 800ad56:	2308      	movs	r3, #8
 800ad58:	e00c      	b.n	800ad74 <HAL_GPIO_Init+0x228>
 800ad5a:	2306      	movs	r3, #6
 800ad5c:	e00a      	b.n	800ad74 <HAL_GPIO_Init+0x228>
 800ad5e:	2305      	movs	r3, #5
 800ad60:	e008      	b.n	800ad74 <HAL_GPIO_Init+0x228>
 800ad62:	2304      	movs	r3, #4
 800ad64:	e006      	b.n	800ad74 <HAL_GPIO_Init+0x228>
 800ad66:	2303      	movs	r3, #3
 800ad68:	e004      	b.n	800ad74 <HAL_GPIO_Init+0x228>
 800ad6a:	2302      	movs	r3, #2
 800ad6c:	e002      	b.n	800ad74 <HAL_GPIO_Init+0x228>
 800ad6e:	2301      	movs	r3, #1
 800ad70:	e000      	b.n	800ad74 <HAL_GPIO_Init+0x228>
 800ad72:	2300      	movs	r3, #0
 800ad74:	69fa      	ldr	r2, [r7, #28]
 800ad76:	f002 0203 	and.w	r2, r2, #3
 800ad7a:	0092      	lsls	r2, r2, #2
 800ad7c:	4093      	lsls	r3, r2
 800ad7e:	69ba      	ldr	r2, [r7, #24]
 800ad80:	4313      	orrs	r3, r2
 800ad82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ad84:	4935      	ldr	r1, [pc, #212]	; (800ae5c <HAL_GPIO_Init+0x310>)
 800ad86:	69fb      	ldr	r3, [r7, #28]
 800ad88:	089b      	lsrs	r3, r3, #2
 800ad8a:	3302      	adds	r3, #2
 800ad8c:	69ba      	ldr	r2, [r7, #24]
 800ad8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ad92:	4b3b      	ldr	r3, [pc, #236]	; (800ae80 <HAL_GPIO_Init+0x334>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ad98:	693b      	ldr	r3, [r7, #16]
 800ad9a:	43db      	mvns	r3, r3
 800ad9c:	69ba      	ldr	r2, [r7, #24]
 800ad9e:	4013      	ands	r3, r2
 800ada0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d003      	beq.n	800adb6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800adae:	69ba      	ldr	r2, [r7, #24]
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	4313      	orrs	r3, r2
 800adb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800adb6:	4a32      	ldr	r2, [pc, #200]	; (800ae80 <HAL_GPIO_Init+0x334>)
 800adb8:	69bb      	ldr	r3, [r7, #24]
 800adba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800adbc:	4b30      	ldr	r3, [pc, #192]	; (800ae80 <HAL_GPIO_Init+0x334>)
 800adbe:	685b      	ldr	r3, [r3, #4]
 800adc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800adc2:	693b      	ldr	r3, [r7, #16]
 800adc4:	43db      	mvns	r3, r3
 800adc6:	69ba      	ldr	r2, [r7, #24]
 800adc8:	4013      	ands	r3, r2
 800adca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	685b      	ldr	r3, [r3, #4]
 800add0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800add4:	2b00      	cmp	r3, #0
 800add6:	d003      	beq.n	800ade0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800add8:	69ba      	ldr	r2, [r7, #24]
 800adda:	693b      	ldr	r3, [r7, #16]
 800addc:	4313      	orrs	r3, r2
 800adde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800ade0:	4a27      	ldr	r2, [pc, #156]	; (800ae80 <HAL_GPIO_Init+0x334>)
 800ade2:	69bb      	ldr	r3, [r7, #24]
 800ade4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ade6:	4b26      	ldr	r3, [pc, #152]	; (800ae80 <HAL_GPIO_Init+0x334>)
 800ade8:	689b      	ldr	r3, [r3, #8]
 800adea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800adec:	693b      	ldr	r3, [r7, #16]
 800adee:	43db      	mvns	r3, r3
 800adf0:	69ba      	ldr	r2, [r7, #24]
 800adf2:	4013      	ands	r3, r2
 800adf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	685b      	ldr	r3, [r3, #4]
 800adfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d003      	beq.n	800ae0a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800ae02:	69ba      	ldr	r2, [r7, #24]
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	4313      	orrs	r3, r2
 800ae08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800ae0a:	4a1d      	ldr	r2, [pc, #116]	; (800ae80 <HAL_GPIO_Init+0x334>)
 800ae0c:	69bb      	ldr	r3, [r7, #24]
 800ae0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800ae10:	4b1b      	ldr	r3, [pc, #108]	; (800ae80 <HAL_GPIO_Init+0x334>)
 800ae12:	68db      	ldr	r3, [r3, #12]
 800ae14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	43db      	mvns	r3, r3
 800ae1a:	69ba      	ldr	r2, [r7, #24]
 800ae1c:	4013      	ands	r3, r2
 800ae1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	685b      	ldr	r3, [r3, #4]
 800ae24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d003      	beq.n	800ae34 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800ae2c:	69ba      	ldr	r2, [r7, #24]
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	4313      	orrs	r3, r2
 800ae32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800ae34:	4a12      	ldr	r2, [pc, #72]	; (800ae80 <HAL_GPIO_Init+0x334>)
 800ae36:	69bb      	ldr	r3, [r7, #24]
 800ae38:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ae3a:	69fb      	ldr	r3, [r7, #28]
 800ae3c:	3301      	adds	r3, #1
 800ae3e:	61fb      	str	r3, [r7, #28]
 800ae40:	69fb      	ldr	r3, [r7, #28]
 800ae42:	2b0f      	cmp	r3, #15
 800ae44:	f67f ae90 	bls.w	800ab68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800ae48:	bf00      	nop
 800ae4a:	bf00      	nop
 800ae4c:	3724      	adds	r7, #36	; 0x24
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae54:	4770      	bx	lr
 800ae56:	bf00      	nop
 800ae58:	40023800 	.word	0x40023800
 800ae5c:	40013800 	.word	0x40013800
 800ae60:	40020000 	.word	0x40020000
 800ae64:	40020400 	.word	0x40020400
 800ae68:	40020800 	.word	0x40020800
 800ae6c:	40020c00 	.word	0x40020c00
 800ae70:	40021000 	.word	0x40021000
 800ae74:	40021400 	.word	0x40021400
 800ae78:	40021800 	.word	0x40021800
 800ae7c:	40021c00 	.word	0x40021c00
 800ae80:	40013c00 	.word	0x40013c00

0800ae84 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800ae84:	b480      	push	{r7}
 800ae86:	b087      	sub	sp, #28
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800ae92:	2300      	movs	r3, #0
 800ae94:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800ae96:	2300      	movs	r3, #0
 800ae98:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	617b      	str	r3, [r7, #20]
 800ae9e:	e0cd      	b.n	800b03c <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800aea0:	2201      	movs	r2, #1
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	fa02 f303 	lsl.w	r3, r2, r3
 800aea8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800aeaa:	683a      	ldr	r2, [r7, #0]
 800aeac:	693b      	ldr	r3, [r7, #16]
 800aeae:	4013      	ands	r3, r2
 800aeb0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800aeb2:	68fa      	ldr	r2, [r7, #12]
 800aeb4:	693b      	ldr	r3, [r7, #16]
 800aeb6:	429a      	cmp	r2, r3
 800aeb8:	f040 80bd 	bne.w	800b036 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800aebc:	4a65      	ldr	r2, [pc, #404]	; (800b054 <HAL_GPIO_DeInit+0x1d0>)
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	089b      	lsrs	r3, r3, #2
 800aec2:	3302      	adds	r3, #2
 800aec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aec8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	f003 0303 	and.w	r3, r3, #3
 800aed0:	009b      	lsls	r3, r3, #2
 800aed2:	220f      	movs	r2, #15
 800aed4:	fa02 f303 	lsl.w	r3, r2, r3
 800aed8:	68ba      	ldr	r2, [r7, #8]
 800aeda:	4013      	ands	r3, r2
 800aedc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	4a5d      	ldr	r2, [pc, #372]	; (800b058 <HAL_GPIO_DeInit+0x1d4>)
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d02b      	beq.n	800af3e <HAL_GPIO_DeInit+0xba>
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	4a5c      	ldr	r2, [pc, #368]	; (800b05c <HAL_GPIO_DeInit+0x1d8>)
 800aeea:	4293      	cmp	r3, r2
 800aeec:	d025      	beq.n	800af3a <HAL_GPIO_DeInit+0xb6>
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	4a5b      	ldr	r2, [pc, #364]	; (800b060 <HAL_GPIO_DeInit+0x1dc>)
 800aef2:	4293      	cmp	r3, r2
 800aef4:	d01f      	beq.n	800af36 <HAL_GPIO_DeInit+0xb2>
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	4a5a      	ldr	r2, [pc, #360]	; (800b064 <HAL_GPIO_DeInit+0x1e0>)
 800aefa:	4293      	cmp	r3, r2
 800aefc:	d019      	beq.n	800af32 <HAL_GPIO_DeInit+0xae>
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	4a59      	ldr	r2, [pc, #356]	; (800b068 <HAL_GPIO_DeInit+0x1e4>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d013      	beq.n	800af2e <HAL_GPIO_DeInit+0xaa>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	4a58      	ldr	r2, [pc, #352]	; (800b06c <HAL_GPIO_DeInit+0x1e8>)
 800af0a:	4293      	cmp	r3, r2
 800af0c:	d00d      	beq.n	800af2a <HAL_GPIO_DeInit+0xa6>
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	4a57      	ldr	r2, [pc, #348]	; (800b070 <HAL_GPIO_DeInit+0x1ec>)
 800af12:	4293      	cmp	r3, r2
 800af14:	d007      	beq.n	800af26 <HAL_GPIO_DeInit+0xa2>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	4a56      	ldr	r2, [pc, #344]	; (800b074 <HAL_GPIO_DeInit+0x1f0>)
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d101      	bne.n	800af22 <HAL_GPIO_DeInit+0x9e>
 800af1e:	2307      	movs	r3, #7
 800af20:	e00e      	b.n	800af40 <HAL_GPIO_DeInit+0xbc>
 800af22:	2308      	movs	r3, #8
 800af24:	e00c      	b.n	800af40 <HAL_GPIO_DeInit+0xbc>
 800af26:	2306      	movs	r3, #6
 800af28:	e00a      	b.n	800af40 <HAL_GPIO_DeInit+0xbc>
 800af2a:	2305      	movs	r3, #5
 800af2c:	e008      	b.n	800af40 <HAL_GPIO_DeInit+0xbc>
 800af2e:	2304      	movs	r3, #4
 800af30:	e006      	b.n	800af40 <HAL_GPIO_DeInit+0xbc>
 800af32:	2303      	movs	r3, #3
 800af34:	e004      	b.n	800af40 <HAL_GPIO_DeInit+0xbc>
 800af36:	2302      	movs	r3, #2
 800af38:	e002      	b.n	800af40 <HAL_GPIO_DeInit+0xbc>
 800af3a:	2301      	movs	r3, #1
 800af3c:	e000      	b.n	800af40 <HAL_GPIO_DeInit+0xbc>
 800af3e:	2300      	movs	r3, #0
 800af40:	697a      	ldr	r2, [r7, #20]
 800af42:	f002 0203 	and.w	r2, r2, #3
 800af46:	0092      	lsls	r2, r2, #2
 800af48:	4093      	lsls	r3, r2
 800af4a:	68ba      	ldr	r2, [r7, #8]
 800af4c:	429a      	cmp	r2, r3
 800af4e:	d132      	bne.n	800afb6 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800af50:	4b49      	ldr	r3, [pc, #292]	; (800b078 <HAL_GPIO_DeInit+0x1f4>)
 800af52:	681a      	ldr	r2, [r3, #0]
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	43db      	mvns	r3, r3
 800af58:	4947      	ldr	r1, [pc, #284]	; (800b078 <HAL_GPIO_DeInit+0x1f4>)
 800af5a:	4013      	ands	r3, r2
 800af5c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800af5e:	4b46      	ldr	r3, [pc, #280]	; (800b078 <HAL_GPIO_DeInit+0x1f4>)
 800af60:	685a      	ldr	r2, [r3, #4]
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	43db      	mvns	r3, r3
 800af66:	4944      	ldr	r1, [pc, #272]	; (800b078 <HAL_GPIO_DeInit+0x1f4>)
 800af68:	4013      	ands	r3, r2
 800af6a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800af6c:	4b42      	ldr	r3, [pc, #264]	; (800b078 <HAL_GPIO_DeInit+0x1f4>)
 800af6e:	689a      	ldr	r2, [r3, #8]
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	43db      	mvns	r3, r3
 800af74:	4940      	ldr	r1, [pc, #256]	; (800b078 <HAL_GPIO_DeInit+0x1f4>)
 800af76:	4013      	ands	r3, r2
 800af78:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800af7a:	4b3f      	ldr	r3, [pc, #252]	; (800b078 <HAL_GPIO_DeInit+0x1f4>)
 800af7c:	68da      	ldr	r2, [r3, #12]
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	43db      	mvns	r3, r3
 800af82:	493d      	ldr	r1, [pc, #244]	; (800b078 <HAL_GPIO_DeInit+0x1f4>)
 800af84:	4013      	ands	r3, r2
 800af86:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	f003 0303 	and.w	r3, r3, #3
 800af8e:	009b      	lsls	r3, r3, #2
 800af90:	220f      	movs	r2, #15
 800af92:	fa02 f303 	lsl.w	r3, r2, r3
 800af96:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800af98:	4a2e      	ldr	r2, [pc, #184]	; (800b054 <HAL_GPIO_DeInit+0x1d0>)
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	089b      	lsrs	r3, r3, #2
 800af9e:	3302      	adds	r3, #2
 800afa0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	43da      	mvns	r2, r3
 800afa8:	482a      	ldr	r0, [pc, #168]	; (800b054 <HAL_GPIO_DeInit+0x1d0>)
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	089b      	lsrs	r3, r3, #2
 800afae:	400a      	ands	r2, r1
 800afb0:	3302      	adds	r3, #2
 800afb2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681a      	ldr	r2, [r3, #0]
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	005b      	lsls	r3, r3, #1
 800afbe:	2103      	movs	r1, #3
 800afc0:	fa01 f303 	lsl.w	r3, r1, r3
 800afc4:	43db      	mvns	r3, r3
 800afc6:	401a      	ands	r2, r3
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800afcc:	697b      	ldr	r3, [r7, #20]
 800afce:	08da      	lsrs	r2, r3, #3
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	3208      	adds	r2, #8
 800afd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800afd8:	697b      	ldr	r3, [r7, #20]
 800afda:	f003 0307 	and.w	r3, r3, #7
 800afde:	009b      	lsls	r3, r3, #2
 800afe0:	220f      	movs	r2, #15
 800afe2:	fa02 f303 	lsl.w	r3, r2, r3
 800afe6:	43db      	mvns	r3, r3
 800afe8:	697a      	ldr	r2, [r7, #20]
 800afea:	08d2      	lsrs	r2, r2, #3
 800afec:	4019      	ands	r1, r3
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	3208      	adds	r2, #8
 800aff2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	68da      	ldr	r2, [r3, #12]
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	005b      	lsls	r3, r3, #1
 800affe:	2103      	movs	r1, #3
 800b000:	fa01 f303 	lsl.w	r3, r1, r3
 800b004:	43db      	mvns	r3, r3
 800b006:	401a      	ands	r2, r3
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	685a      	ldr	r2, [r3, #4]
 800b010:	2101      	movs	r1, #1
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	fa01 f303 	lsl.w	r3, r1, r3
 800b018:	43db      	mvns	r3, r3
 800b01a:	401a      	ands	r2, r3
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	689a      	ldr	r2, [r3, #8]
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	005b      	lsls	r3, r3, #1
 800b028:	2103      	movs	r1, #3
 800b02a:	fa01 f303 	lsl.w	r3, r1, r3
 800b02e:	43db      	mvns	r3, r3
 800b030:	401a      	ands	r2, r3
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	3301      	adds	r3, #1
 800b03a:	617b      	str	r3, [r7, #20]
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	2b0f      	cmp	r3, #15
 800b040:	f67f af2e 	bls.w	800aea0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800b044:	bf00      	nop
 800b046:	bf00      	nop
 800b048:	371c      	adds	r7, #28
 800b04a:	46bd      	mov	sp, r7
 800b04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b050:	4770      	bx	lr
 800b052:	bf00      	nop
 800b054:	40013800 	.word	0x40013800
 800b058:	40020000 	.word	0x40020000
 800b05c:	40020400 	.word	0x40020400
 800b060:	40020800 	.word	0x40020800
 800b064:	40020c00 	.word	0x40020c00
 800b068:	40021000 	.word	0x40021000
 800b06c:	40021400 	.word	0x40021400
 800b070:	40021800 	.word	0x40021800
 800b074:	40021c00 	.word	0x40021c00
 800b078:	40013c00 	.word	0x40013c00

0800b07c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b07c:	b480      	push	{r7}
 800b07e:	b085      	sub	sp, #20
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
 800b084:	460b      	mov	r3, r1
 800b086:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	691a      	ldr	r2, [r3, #16]
 800b08c:	887b      	ldrh	r3, [r7, #2]
 800b08e:	4013      	ands	r3, r2
 800b090:	2b00      	cmp	r3, #0
 800b092:	d002      	beq.n	800b09a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b094:	2301      	movs	r3, #1
 800b096:	73fb      	strb	r3, [r7, #15]
 800b098:	e001      	b.n	800b09e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b09a:	2300      	movs	r3, #0
 800b09c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b09e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3714      	adds	r7, #20
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr

0800b0ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b083      	sub	sp, #12
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
 800b0b4:	460b      	mov	r3, r1
 800b0b6:	807b      	strh	r3, [r7, #2]
 800b0b8:	4613      	mov	r3, r2
 800b0ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b0bc:	787b      	ldrb	r3, [r7, #1]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d003      	beq.n	800b0ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b0c2:	887a      	ldrh	r2, [r7, #2]
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b0c8:	e003      	b.n	800b0d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b0ca:	887b      	ldrh	r3, [r7, #2]
 800b0cc:	041a      	lsls	r2, r3, #16
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	619a      	str	r2, [r3, #24]
}
 800b0d2:	bf00      	nop
 800b0d4:	370c      	adds	r7, #12
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0dc:	4770      	bx	lr

0800b0de <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b0de:	b480      	push	{r7}
 800b0e0:	b085      	sub	sp, #20
 800b0e2:	af00      	add	r7, sp, #0
 800b0e4:	6078      	str	r0, [r7, #4]
 800b0e6:	460b      	mov	r3, r1
 800b0e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	695b      	ldr	r3, [r3, #20]
 800b0ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b0f0:	887a      	ldrh	r2, [r7, #2]
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	4013      	ands	r3, r2
 800b0f6:	041a      	lsls	r2, r3, #16
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	43d9      	mvns	r1, r3
 800b0fc:	887b      	ldrh	r3, [r7, #2]
 800b0fe:	400b      	ands	r3, r1
 800b100:	431a      	orrs	r2, r3
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	619a      	str	r2, [r3, #24]
}
 800b106:	bf00      	nop
 800b108:	3714      	adds	r7, #20
 800b10a:	46bd      	mov	sp, r7
 800b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b110:	4770      	bx	lr

0800b112 <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin specifies the port bit to be locked.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b112:	b480      	push	{r7}
 800b114:	b085      	sub	sp, #20
 800b116:	af00      	add	r7, sp, #0
 800b118:	6078      	str	r0, [r7, #4]
 800b11a:	460b      	mov	r3, r1
 800b11c:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 800b11e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b122:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
 800b124:	887a      	ldrh	r2, [r7, #2]
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	4313      	orrs	r3, r2
 800b12a:	60fb      	str	r3, [r7, #12]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 800b12c:	68fa      	ldr	r2, [r7, #12]
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	61da      	str	r2, [r3, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 800b132:	887a      	ldrh	r2, [r7, #2]
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	61da      	str	r2, [r3, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 800b138:	68fa      	ldr	r2, [r7, #12]
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	61da      	str	r2, [r3, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  tmp = GPIOx->LCKR;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	69db      	ldr	r3, [r3, #28]
 800b142:	60fb      	str	r3, [r7, #12]

  /* Read again in order to confirm lock is active */
 if((GPIOx->LCKR & GPIO_LCKR_LCKK) != RESET)
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	69db      	ldr	r3, [r3, #28]
 800b148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d001      	beq.n	800b154 <HAL_GPIO_LockPin+0x42>
  {
    return HAL_OK;
 800b150:	2300      	movs	r3, #0
 800b152:	e000      	b.n	800b156 <HAL_GPIO_LockPin+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b154:	2301      	movs	r3, #1
  }
}
 800b156:	4618      	mov	r0, r3
 800b158:	3714      	adds	r7, #20
 800b15a:	46bd      	mov	sp, r7
 800b15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b160:	4770      	bx	lr

0800b162 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b162:	b580      	push	{r7, lr}
 800b164:	b082      	sub	sp, #8
 800b166:	af00      	add	r7, sp, #0
 800b168:	4603      	mov	r3, r0
 800b16a:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800b16c:	4b08      	ldr	r3, [pc, #32]	; (800b190 <HAL_GPIO_EXTI_IRQHandler+0x2e>)
 800b16e:	695a      	ldr	r2, [r3, #20]
 800b170:	88fb      	ldrh	r3, [r7, #6]
 800b172:	4013      	ands	r3, r2
 800b174:	2b00      	cmp	r3, #0
 800b176:	d006      	beq.n	800b186 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b178:	4a05      	ldr	r2, [pc, #20]	; (800b190 <HAL_GPIO_EXTI_IRQHandler+0x2e>)
 800b17a:	88fb      	ldrh	r3, [r7, #6]
 800b17c:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b17e:	88fb      	ldrh	r3, [r7, #6]
 800b180:	4618      	mov	r0, r3
 800b182:	f000 f807 	bl	800b194 <HAL_GPIO_EXTI_Callback>
  }
}
 800b186:	bf00      	nop
 800b188:	3708      	adds	r7, #8
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}
 800b18e:	bf00      	nop
 800b190:	40013c00 	.word	0x40013c00

0800b194 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800b194:	b480      	push	{r7}
 800b196:	b083      	sub	sp, #12
 800b198:	af00      	add	r7, sp, #0
 800b19a:	4603      	mov	r3, r0
 800b19c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800b19e:	bf00      	nop
 800b1a0:	370c      	adds	r7, #12
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a8:	4770      	bx	lr

0800b1aa <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b1aa:	b580      	push	{r7, lr}
 800b1ac:	b084      	sub	sp, #16
 800b1ae:	af00      	add	r7, sp, #0
 800b1b0:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d101      	bne.n	800b1bc <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	e12b      	b.n	800b414 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1c2:	b2db      	uxtb	r3, r3
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d106      	bne.n	800b1d6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f7fa fbb5 	bl	8005940 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2224      	movs	r2, #36	; 0x24
 800b1da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	681a      	ldr	r2, [r3, #0]
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	f022 0201 	bic.w	r2, r2, #1
 800b1ec:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	681a      	ldr	r2, [r3, #0]
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b1fc:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	681a      	ldr	r2, [r3, #0]
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b20c:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b20e:	f007 f891 	bl	8012334 <HAL_RCC_GetPCLK1Freq>
 800b212:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	685b      	ldr	r3, [r3, #4]
 800b218:	4a80      	ldr	r2, [pc, #512]	; (800b41c <HAL_I2C_Init+0x272>)
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d807      	bhi.n	800b22e <HAL_I2C_Init+0x84>
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	4a7f      	ldr	r2, [pc, #508]	; (800b420 <HAL_I2C_Init+0x276>)
 800b222:	4293      	cmp	r3, r2
 800b224:	bf94      	ite	ls
 800b226:	2301      	movls	r3, #1
 800b228:	2300      	movhi	r3, #0
 800b22a:	b2db      	uxtb	r3, r3
 800b22c:	e006      	b.n	800b23c <HAL_I2C_Init+0x92>
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	4a7c      	ldr	r2, [pc, #496]	; (800b424 <HAL_I2C_Init+0x27a>)
 800b232:	4293      	cmp	r3, r2
 800b234:	bf94      	ite	ls
 800b236:	2301      	movls	r3, #1
 800b238:	2300      	movhi	r3, #0
 800b23a:	b2db      	uxtb	r3, r3
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d001      	beq.n	800b244 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b240:	2301      	movs	r3, #1
 800b242:	e0e7      	b.n	800b414 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	4a78      	ldr	r2, [pc, #480]	; (800b428 <HAL_I2C_Init+0x27e>)
 800b248:	fba2 2303 	umull	r2, r3, r2, r3
 800b24c:	0c9b      	lsrs	r3, r3, #18
 800b24e:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	685b      	ldr	r3, [r3, #4]
 800b256:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	68ba      	ldr	r2, [r7, #8]
 800b260:	430a      	orrs	r2, r1
 800b262:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	6a1b      	ldr	r3, [r3, #32]
 800b26a:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	685b      	ldr	r3, [r3, #4]
 800b272:	4a6a      	ldr	r2, [pc, #424]	; (800b41c <HAL_I2C_Init+0x272>)
 800b274:	4293      	cmp	r3, r2
 800b276:	d802      	bhi.n	800b27e <HAL_I2C_Init+0xd4>
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	3301      	adds	r3, #1
 800b27c:	e009      	b.n	800b292 <HAL_I2C_Init+0xe8>
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b284:	fb02 f303 	mul.w	r3, r2, r3
 800b288:	4a68      	ldr	r2, [pc, #416]	; (800b42c <HAL_I2C_Init+0x282>)
 800b28a:	fba2 2303 	umull	r2, r3, r2, r3
 800b28e:	099b      	lsrs	r3, r3, #6
 800b290:	3301      	adds	r3, #1
 800b292:	687a      	ldr	r2, [r7, #4]
 800b294:	6812      	ldr	r2, [r2, #0]
 800b296:	430b      	orrs	r3, r1
 800b298:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	69db      	ldr	r3, [r3, #28]
 800b2a0:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b2a4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	685b      	ldr	r3, [r3, #4]
 800b2ac:	495b      	ldr	r1, [pc, #364]	; (800b41c <HAL_I2C_Init+0x272>)
 800b2ae:	428b      	cmp	r3, r1
 800b2b0:	d819      	bhi.n	800b2e6 <HAL_I2C_Init+0x13c>
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	1e59      	subs	r1, r3, #1
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	685b      	ldr	r3, [r3, #4]
 800b2ba:	005b      	lsls	r3, r3, #1
 800b2bc:	fbb1 f3f3 	udiv	r3, r1, r3
 800b2c0:	1c59      	adds	r1, r3, #1
 800b2c2:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b2c6:	400b      	ands	r3, r1
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d00a      	beq.n	800b2e2 <HAL_I2C_Init+0x138>
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	1e59      	subs	r1, r3, #1
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	685b      	ldr	r3, [r3, #4]
 800b2d4:	005b      	lsls	r3, r3, #1
 800b2d6:	fbb1 f3f3 	udiv	r3, r1, r3
 800b2da:	3301      	adds	r3, #1
 800b2dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b2e0:	e051      	b.n	800b386 <HAL_I2C_Init+0x1dc>
 800b2e2:	2304      	movs	r3, #4
 800b2e4:	e04f      	b.n	800b386 <HAL_I2C_Init+0x1dc>
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	689b      	ldr	r3, [r3, #8]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d111      	bne.n	800b312 <HAL_I2C_Init+0x168>
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	1e58      	subs	r0, r3, #1
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6859      	ldr	r1, [r3, #4]
 800b2f6:	460b      	mov	r3, r1
 800b2f8:	005b      	lsls	r3, r3, #1
 800b2fa:	440b      	add	r3, r1
 800b2fc:	fbb0 f3f3 	udiv	r3, r0, r3
 800b300:	3301      	adds	r3, #1
 800b302:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b306:	2b00      	cmp	r3, #0
 800b308:	bf0c      	ite	eq
 800b30a:	2301      	moveq	r3, #1
 800b30c:	2300      	movne	r3, #0
 800b30e:	b2db      	uxtb	r3, r3
 800b310:	e012      	b.n	800b338 <HAL_I2C_Init+0x18e>
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	1e58      	subs	r0, r3, #1
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6859      	ldr	r1, [r3, #4]
 800b31a:	460b      	mov	r3, r1
 800b31c:	009b      	lsls	r3, r3, #2
 800b31e:	440b      	add	r3, r1
 800b320:	0099      	lsls	r1, r3, #2
 800b322:	440b      	add	r3, r1
 800b324:	fbb0 f3f3 	udiv	r3, r0, r3
 800b328:	3301      	adds	r3, #1
 800b32a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b32e:	2b00      	cmp	r3, #0
 800b330:	bf0c      	ite	eq
 800b332:	2301      	moveq	r3, #1
 800b334:	2300      	movne	r3, #0
 800b336:	b2db      	uxtb	r3, r3
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d001      	beq.n	800b340 <HAL_I2C_Init+0x196>
 800b33c:	2301      	movs	r3, #1
 800b33e:	e022      	b.n	800b386 <HAL_I2C_Init+0x1dc>
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	689b      	ldr	r3, [r3, #8]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d10e      	bne.n	800b366 <HAL_I2C_Init+0x1bc>
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	1e58      	subs	r0, r3, #1
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6859      	ldr	r1, [r3, #4]
 800b350:	460b      	mov	r3, r1
 800b352:	005b      	lsls	r3, r3, #1
 800b354:	440b      	add	r3, r1
 800b356:	fbb0 f3f3 	udiv	r3, r0, r3
 800b35a:	3301      	adds	r3, #1
 800b35c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b360:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b364:	e00f      	b.n	800b386 <HAL_I2C_Init+0x1dc>
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	1e58      	subs	r0, r3, #1
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6859      	ldr	r1, [r3, #4]
 800b36e:	460b      	mov	r3, r1
 800b370:	009b      	lsls	r3, r3, #2
 800b372:	440b      	add	r3, r1
 800b374:	0099      	lsls	r1, r3, #2
 800b376:	440b      	add	r3, r1
 800b378:	fbb0 f3f3 	udiv	r3, r0, r3
 800b37c:	3301      	adds	r3, #1
 800b37e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b382:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b386:	6879      	ldr	r1, [r7, #4]
 800b388:	6809      	ldr	r1, [r1, #0]
 800b38a:	4313      	orrs	r3, r2
 800b38c:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	69da      	ldr	r2, [r3, #28]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6a1b      	ldr	r3, [r3, #32]
 800b3a0:	431a      	orrs	r2, r3
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	430a      	orrs	r2, r1
 800b3a8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	689b      	ldr	r3, [r3, #8]
 800b3b0:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b3b4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b3b8:	687a      	ldr	r2, [r7, #4]
 800b3ba:	6911      	ldr	r1, [r2, #16]
 800b3bc:	687a      	ldr	r2, [r7, #4]
 800b3be:	68d2      	ldr	r2, [r2, #12]
 800b3c0:	4311      	orrs	r1, r2
 800b3c2:	687a      	ldr	r2, [r7, #4]
 800b3c4:	6812      	ldr	r2, [r2, #0]
 800b3c6:	430b      	orrs	r3, r1
 800b3c8:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	68db      	ldr	r3, [r3, #12]
 800b3d0:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	695a      	ldr	r2, [r3, #20]
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	699b      	ldr	r3, [r3, #24]
 800b3dc:	431a      	orrs	r2, r3
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	430a      	orrs	r2, r1
 800b3e4:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	681a      	ldr	r2, [r3, #0]
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	f042 0201 	orr.w	r2, r2, #1
 800b3f4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2220      	movs	r2, #32
 800b400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2200      	movs	r2, #0
 800b408:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2200      	movs	r2, #0
 800b40e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b412:	2300      	movs	r3, #0
}
 800b414:	4618      	mov	r0, r3
 800b416:	3710      	adds	r7, #16
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}
 800b41c:	000186a0 	.word	0x000186a0
 800b420:	001e847f 	.word	0x001e847f
 800b424:	003d08ff 	.word	0x003d08ff
 800b428:	431bde83 	.word	0x431bde83
 800b42c:	10624dd3 	.word	0x10624dd3

0800b430 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b082      	sub	sp, #8
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d101      	bne.n	800b442 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800b43e:	2301      	movs	r3, #1
 800b440:	e021      	b.n	800b486 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2224      	movs	r2, #36	; 0x24
 800b446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	681a      	ldr	r2, [r3, #0]
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f022 0201 	bic.w	r2, r2, #1
 800b458:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f7fa fac8 	bl	80059f0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2200      	movs	r2, #0
 800b464:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2200      	movs	r2, #0
 800b46a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2200      	movs	r2, #0
 800b472:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2200      	movs	r2, #0
 800b478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2200      	movs	r2, #0
 800b480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b484:	2300      	movs	r3, #0
}
 800b486:	4618      	mov	r0, r3
 800b488:	3708      	adds	r7, #8
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}

0800b48e <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b48e:	b580      	push	{r7, lr}
 800b490:	b088      	sub	sp, #32
 800b492:	af02      	add	r7, sp, #8
 800b494:	60f8      	str	r0, [r7, #12]
 800b496:	607a      	str	r2, [r7, #4]
 800b498:	461a      	mov	r2, r3
 800b49a:	460b      	mov	r3, r1
 800b49c:	817b      	strh	r3, [r7, #10]
 800b49e:	4613      	mov	r3, r2
 800b4a0:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b4a2:	f7fb f9eb 	bl	800687c <HAL_GetTick>
 800b4a6:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b4ae:	b2db      	uxtb	r3, r3
 800b4b0:	2b20      	cmp	r3, #32
 800b4b2:	f040 80e0 	bne.w	800b676 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	9300      	str	r3, [sp, #0]
 800b4ba:	2319      	movs	r3, #25
 800b4bc:	2201      	movs	r2, #1
 800b4be:	4970      	ldr	r1, [pc, #448]	; (800b680 <HAL_I2C_Master_Transmit+0x1f2>)
 800b4c0:	68f8      	ldr	r0, [r7, #12]
 800b4c2:	f005 fd97 	bl	8010ff4 <I2C_WaitOnFlagUntilTimeout>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d001      	beq.n	800b4d0 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800b4cc:	2302      	movs	r3, #2
 800b4ce:	e0d3      	b.n	800b678 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b4d6:	2b01      	cmp	r3, #1
 800b4d8:	d101      	bne.n	800b4de <HAL_I2C_Master_Transmit+0x50>
 800b4da:	2302      	movs	r3, #2
 800b4dc:	e0cc      	b.n	800b678 <HAL_I2C_Master_Transmit+0x1ea>
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	2201      	movs	r2, #1
 800b4e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	f003 0301 	and.w	r3, r3, #1
 800b4f0:	2b01      	cmp	r3, #1
 800b4f2:	d007      	beq.n	800b504 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	681a      	ldr	r2, [r3, #0]
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f042 0201 	orr.w	r2, r2, #1
 800b502:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	681a      	ldr	r2, [r3, #0]
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b512:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	2221      	movs	r2, #33	; 0x21
 800b518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	2210      	movs	r2, #16
 800b520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	2200      	movs	r2, #0
 800b528:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	687a      	ldr	r2, [r7, #4]
 800b52e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	893a      	ldrh	r2, [r7, #8]
 800b534:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b53a:	b29a      	uxth	r2, r3
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	4a50      	ldr	r2, [pc, #320]	; (800b684 <HAL_I2C_Master_Transmit+0x1f6>)
 800b544:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b546:	8979      	ldrh	r1, [r7, #10]
 800b548:	697b      	ldr	r3, [r7, #20]
 800b54a:	6a3a      	ldr	r2, [r7, #32]
 800b54c:	68f8      	ldr	r0, [r7, #12]
 800b54e:	f005 f8c9 	bl	80106e4 <I2C_MasterRequestWrite>
 800b552:	4603      	mov	r3, r0
 800b554:	2b00      	cmp	r3, #0
 800b556:	d001      	beq.n	800b55c <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b558:	2301      	movs	r3, #1
 800b55a:	e08d      	b.n	800b678 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b55c:	2300      	movs	r3, #0
 800b55e:	613b      	str	r3, [r7, #16]
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	695b      	ldr	r3, [r3, #20]
 800b566:	613b      	str	r3, [r7, #16]
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	699b      	ldr	r3, [r3, #24]
 800b56e:	613b      	str	r3, [r7, #16]
 800b570:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b572:	e066      	b.n	800b642 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b574:	697a      	ldr	r2, [r7, #20]
 800b576:	6a39      	ldr	r1, [r7, #32]
 800b578:	68f8      	ldr	r0, [r7, #12]
 800b57a:	f005 fe11 	bl	80111a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800b57e:	4603      	mov	r3, r0
 800b580:	2b00      	cmp	r3, #0
 800b582:	d00d      	beq.n	800b5a0 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b588:	2b04      	cmp	r3, #4
 800b58a:	d107      	bne.n	800b59c <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	681a      	ldr	r2, [r3, #0]
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b59a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b59c:	2301      	movs	r3, #1
 800b59e:	e06b      	b.n	800b678 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5a4:	781a      	ldrb	r2, [r3, #0]
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b0:	1c5a      	adds	r2, r3, #1
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5ba:	b29b      	uxth	r3, r3
 800b5bc:	3b01      	subs	r3, #1
 800b5be:	b29a      	uxth	r2, r3
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5c8:	3b01      	subs	r3, #1
 800b5ca:	b29a      	uxth	r2, r3
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	695b      	ldr	r3, [r3, #20]
 800b5d6:	f003 0304 	and.w	r3, r3, #4
 800b5da:	2b04      	cmp	r3, #4
 800b5dc:	d11b      	bne.n	800b616 <HAL_I2C_Master_Transmit+0x188>
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d017      	beq.n	800b616 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ea:	781a      	ldrb	r2, [r3, #0]
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5f6:	1c5a      	adds	r2, r3, #1
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b600:	b29b      	uxth	r3, r3
 800b602:	3b01      	subs	r3, #1
 800b604:	b29a      	uxth	r2, r3
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b60e:	3b01      	subs	r3, #1
 800b610:	b29a      	uxth	r2, r3
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b616:	697a      	ldr	r2, [r7, #20]
 800b618:	6a39      	ldr	r1, [r7, #32]
 800b61a:	68f8      	ldr	r0, [r7, #12]
 800b61c:	f005 fe01 	bl	8011222 <I2C_WaitOnBTFFlagUntilTimeout>
 800b620:	4603      	mov	r3, r0
 800b622:	2b00      	cmp	r3, #0
 800b624:	d00d      	beq.n	800b642 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b62a:	2b04      	cmp	r3, #4
 800b62c:	d107      	bne.n	800b63e <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	681a      	ldr	r2, [r3, #0]
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b63c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b63e:	2301      	movs	r3, #1
 800b640:	e01a      	b.n	800b678 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b646:	2b00      	cmp	r3, #0
 800b648:	d194      	bne.n	800b574 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	681a      	ldr	r2, [r3, #0]
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b658:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	2220      	movs	r2, #32
 800b65e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	2200      	movs	r2, #0
 800b666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	2200      	movs	r2, #0
 800b66e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b672:	2300      	movs	r3, #0
 800b674:	e000      	b.n	800b678 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b676:	2302      	movs	r3, #2
  }
}
 800b678:	4618      	mov	r0, r3
 800b67a:	3718      	adds	r7, #24
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}
 800b680:	00100002 	.word	0x00100002
 800b684:	ffff0000 	.word	0xffff0000

0800b688 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b08c      	sub	sp, #48	; 0x30
 800b68c:	af02      	add	r7, sp, #8
 800b68e:	60f8      	str	r0, [r7, #12]
 800b690:	607a      	str	r2, [r7, #4]
 800b692:	461a      	mov	r2, r3
 800b694:	460b      	mov	r3, r1
 800b696:	817b      	strh	r3, [r7, #10]
 800b698:	4613      	mov	r3, r2
 800b69a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b69c:	f7fb f8ee 	bl	800687c <HAL_GetTick>
 800b6a0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6a8:	b2db      	uxtb	r3, r3
 800b6aa:	2b20      	cmp	r3, #32
 800b6ac:	f040 820b 	bne.w	800bac6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b2:	9300      	str	r3, [sp, #0]
 800b6b4:	2319      	movs	r3, #25
 800b6b6:	2201      	movs	r2, #1
 800b6b8:	497c      	ldr	r1, [pc, #496]	; (800b8ac <HAL_I2C_Master_Receive+0x224>)
 800b6ba:	68f8      	ldr	r0, [r7, #12]
 800b6bc:	f005 fc9a 	bl	8010ff4 <I2C_WaitOnFlagUntilTimeout>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d001      	beq.n	800b6ca <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800b6c6:	2302      	movs	r3, #2
 800b6c8:	e1fe      	b.n	800bac8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b6d0:	2b01      	cmp	r3, #1
 800b6d2:	d101      	bne.n	800b6d8 <HAL_I2C_Master_Receive+0x50>
 800b6d4:	2302      	movs	r3, #2
 800b6d6:	e1f7      	b.n	800bac8 <HAL_I2C_Master_Receive+0x440>
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	2201      	movs	r2, #1
 800b6dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	f003 0301 	and.w	r3, r3, #1
 800b6ea:	2b01      	cmp	r3, #1
 800b6ec:	d007      	beq.n	800b6fe <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	681a      	ldr	r2, [r3, #0]
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f042 0201 	orr.w	r2, r2, #1
 800b6fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	681a      	ldr	r2, [r3, #0]
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b70c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	2222      	movs	r2, #34	; 0x22
 800b712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	2210      	movs	r2, #16
 800b71a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	2200      	movs	r2, #0
 800b722:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	687a      	ldr	r2, [r7, #4]
 800b728:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	893a      	ldrh	r2, [r7, #8]
 800b72e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b734:	b29a      	uxth	r2, r3
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	4a5c      	ldr	r2, [pc, #368]	; (800b8b0 <HAL_I2C_Master_Receive+0x228>)
 800b73e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b740:	8979      	ldrh	r1, [r7, #10]
 800b742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b746:	68f8      	ldr	r0, [r7, #12]
 800b748:	f005 f84e 	bl	80107e8 <I2C_MasterRequestRead>
 800b74c:	4603      	mov	r3, r0
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d001      	beq.n	800b756 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800b752:	2301      	movs	r3, #1
 800b754:	e1b8      	b.n	800bac8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d113      	bne.n	800b786 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b75e:	2300      	movs	r3, #0
 800b760:	617b      	str	r3, [r7, #20]
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	695b      	ldr	r3, [r3, #20]
 800b768:	617b      	str	r3, [r7, #20]
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	699b      	ldr	r3, [r3, #24]
 800b770:	617b      	str	r3, [r7, #20]
 800b772:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	681a      	ldr	r2, [r3, #0]
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b782:	601a      	str	r2, [r3, #0]
 800b784:	e18c      	b.n	800baa0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b78a:	2b01      	cmp	r3, #1
 800b78c:	d11b      	bne.n	800b7c6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	681a      	ldr	r2, [r3, #0]
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b79c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b79e:	2300      	movs	r3, #0
 800b7a0:	61bb      	str	r3, [r7, #24]
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	695b      	ldr	r3, [r3, #20]
 800b7a8:	61bb      	str	r3, [r7, #24]
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	699b      	ldr	r3, [r3, #24]
 800b7b0:	61bb      	str	r3, [r7, #24]
 800b7b2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	681a      	ldr	r2, [r3, #0]
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b7c2:	601a      	str	r2, [r3, #0]
 800b7c4:	e16c      	b.n	800baa0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7ca:	2b02      	cmp	r3, #2
 800b7cc:	d11b      	bne.n	800b806 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	681a      	ldr	r2, [r3, #0]
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b7dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	681a      	ldr	r2, [r3, #0]
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b7ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	61fb      	str	r3, [r7, #28]
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	695b      	ldr	r3, [r3, #20]
 800b7f8:	61fb      	str	r3, [r7, #28]
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	699b      	ldr	r3, [r3, #24]
 800b800:	61fb      	str	r3, [r7, #28]
 800b802:	69fb      	ldr	r3, [r7, #28]
 800b804:	e14c      	b.n	800baa0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	681a      	ldr	r2, [r3, #0]
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b814:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b816:	2300      	movs	r3, #0
 800b818:	623b      	str	r3, [r7, #32]
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	695b      	ldr	r3, [r3, #20]
 800b820:	623b      	str	r3, [r7, #32]
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	699b      	ldr	r3, [r3, #24]
 800b828:	623b      	str	r3, [r7, #32]
 800b82a:	6a3b      	ldr	r3, [r7, #32]
    }

    while (hi2c->XferSize > 0U)
 800b82c:	e138      	b.n	800baa0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b832:	2b03      	cmp	r3, #3
 800b834:	f200 80f1 	bhi.w	800ba1a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b83c:	2b01      	cmp	r3, #1
 800b83e:	d123      	bne.n	800b888 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b842:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b844:	68f8      	ldr	r0, [r7, #12]
 800b846:	f005 fd9d 	bl	8011384 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b84a:	4603      	mov	r3, r0
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d001      	beq.n	800b854 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800b850:	2301      	movs	r3, #1
 800b852:	e139      	b.n	800bac8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	691a      	ldr	r2, [r3, #16]
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b85e:	b2d2      	uxtb	r2, r2
 800b860:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b866:	1c5a      	adds	r2, r3, #1
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b870:	3b01      	subs	r3, #1
 800b872:	b29a      	uxth	r2, r3
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b87c:	b29b      	uxth	r3, r3
 800b87e:	3b01      	subs	r3, #1
 800b880:	b29a      	uxth	r2, r3
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b886:	e10b      	b.n	800baa0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b88c:	2b02      	cmp	r3, #2
 800b88e:	d14e      	bne.n	800b92e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b892:	9300      	str	r3, [sp, #0]
 800b894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b896:	2200      	movs	r2, #0
 800b898:	4906      	ldr	r1, [pc, #24]	; (800b8b4 <HAL_I2C_Master_Receive+0x22c>)
 800b89a:	68f8      	ldr	r0, [r7, #12]
 800b89c:	f005 fbaa 	bl	8010ff4 <I2C_WaitOnFlagUntilTimeout>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d008      	beq.n	800b8b8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800b8a6:	2301      	movs	r3, #1
 800b8a8:	e10e      	b.n	800bac8 <HAL_I2C_Master_Receive+0x440>
 800b8aa:	bf00      	nop
 800b8ac:	00100002 	.word	0x00100002
 800b8b0:	ffff0000 	.word	0xffff0000
 800b8b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	681a      	ldr	r2, [r3, #0]
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b8c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	691a      	ldr	r2, [r3, #16]
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8d2:	b2d2      	uxtb	r2, r2
 800b8d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8da:	1c5a      	adds	r2, r3, #1
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8e4:	3b01      	subs	r3, #1
 800b8e6:	b29a      	uxth	r2, r3
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8f0:	b29b      	uxth	r3, r3
 800b8f2:	3b01      	subs	r3, #1
 800b8f4:	b29a      	uxth	r2, r3
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	691a      	ldr	r2, [r3, #16]
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b904:	b2d2      	uxtb	r2, r2
 800b906:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b90c:	1c5a      	adds	r2, r3, #1
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b916:	3b01      	subs	r3, #1
 800b918:	b29a      	uxth	r2, r3
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b922:	b29b      	uxth	r3, r3
 800b924:	3b01      	subs	r3, #1
 800b926:	b29a      	uxth	r2, r3
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b92c:	e0b8      	b.n	800baa0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b930:	9300      	str	r3, [sp, #0]
 800b932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b934:	2200      	movs	r2, #0
 800b936:	4966      	ldr	r1, [pc, #408]	; (800bad0 <HAL_I2C_Master_Receive+0x448>)
 800b938:	68f8      	ldr	r0, [r7, #12]
 800b93a:	f005 fb5b 	bl	8010ff4 <I2C_WaitOnFlagUntilTimeout>
 800b93e:	4603      	mov	r3, r0
 800b940:	2b00      	cmp	r3, #0
 800b942:	d001      	beq.n	800b948 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800b944:	2301      	movs	r3, #1
 800b946:	e0bf      	b.n	800bac8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	681a      	ldr	r2, [r3, #0]
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b956:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	691a      	ldr	r2, [r3, #16]
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b962:	b2d2      	uxtb	r2, r2
 800b964:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b96a:	1c5a      	adds	r2, r3, #1
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b974:	3b01      	subs	r3, #1
 800b976:	b29a      	uxth	r2, r3
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b980:	b29b      	uxth	r3, r3
 800b982:	3b01      	subs	r3, #1
 800b984:	b29a      	uxth	r2, r3
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b98c:	9300      	str	r3, [sp, #0]
 800b98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b990:	2200      	movs	r2, #0
 800b992:	494f      	ldr	r1, [pc, #316]	; (800bad0 <HAL_I2C_Master_Receive+0x448>)
 800b994:	68f8      	ldr	r0, [r7, #12]
 800b996:	f005 fb2d 	bl	8010ff4 <I2C_WaitOnFlagUntilTimeout>
 800b99a:	4603      	mov	r3, r0
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d001      	beq.n	800b9a4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	e091      	b.n	800bac8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	681a      	ldr	r2, [r3, #0]
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b9b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	691a      	ldr	r2, [r3, #16]
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9be:	b2d2      	uxtb	r2, r2
 800b9c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9c6:	1c5a      	adds	r2, r3, #1
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9d0:	3b01      	subs	r3, #1
 800b9d2:	b29a      	uxth	r2, r3
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9dc:	b29b      	uxth	r3, r3
 800b9de:	3b01      	subs	r3, #1
 800b9e0:	b29a      	uxth	r2, r3
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	691a      	ldr	r2, [r3, #16]
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9f0:	b2d2      	uxtb	r2, r2
 800b9f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9f8:	1c5a      	adds	r2, r3, #1
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba02:	3b01      	subs	r3, #1
 800ba04:	b29a      	uxth	r2, r3
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba0e:	b29b      	uxth	r3, r3
 800ba10:	3b01      	subs	r3, #1
 800ba12:	b29a      	uxth	r2, r3
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ba18:	e042      	b.n	800baa0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ba1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ba1e:	68f8      	ldr	r0, [r7, #12]
 800ba20:	f005 fcb0 	bl	8011384 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ba24:	4603      	mov	r3, r0
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d001      	beq.n	800ba2e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	e04c      	b.n	800bac8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	691a      	ldr	r2, [r3, #16]
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba38:	b2d2      	uxtb	r2, r2
 800ba3a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba40:	1c5a      	adds	r2, r3, #1
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba4a:	3b01      	subs	r3, #1
 800ba4c:	b29a      	uxth	r2, r3
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba56:	b29b      	uxth	r3, r3
 800ba58:	3b01      	subs	r3, #1
 800ba5a:	b29a      	uxth	r2, r3
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	695b      	ldr	r3, [r3, #20]
 800ba66:	f003 0304 	and.w	r3, r3, #4
 800ba6a:	2b04      	cmp	r3, #4
 800ba6c:	d118      	bne.n	800baa0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	691a      	ldr	r2, [r3, #16]
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba78:	b2d2      	uxtb	r2, r2
 800ba7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba80:	1c5a      	adds	r2, r3, #1
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba8a:	3b01      	subs	r3, #1
 800ba8c:	b29a      	uxth	r2, r3
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba96:	b29b      	uxth	r3, r3
 800ba98:	3b01      	subs	r3, #1
 800ba9a:	b29a      	uxth	r2, r3
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	f47f aec2 	bne.w	800b82e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	2220      	movs	r2, #32
 800baae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	2200      	movs	r2, #0
 800bab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	2200      	movs	r2, #0
 800babe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800bac2:	2300      	movs	r3, #0
 800bac4:	e000      	b.n	800bac8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800bac6:	2302      	movs	r3, #2
  }
}
 800bac8:	4618      	mov	r0, r3
 800baca:	3728      	adds	r7, #40	; 0x28
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}
 800bad0:	00010004 	.word	0x00010004

0800bad4 <HAL_I2C_Slave_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b08a      	sub	sp, #40	; 0x28
 800bad8:	af02      	add	r7, sp, #8
 800bada:	60f8      	str	r0, [r7, #12]
 800badc:	60b9      	str	r1, [r7, #8]
 800bade:	603b      	str	r3, [r7, #0]
 800bae0:	4613      	mov	r3, r2
 800bae2:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800bae4:	f7fa feca 	bl	800687c <HAL_GetTick>
 800bae8:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800baf0:	b2db      	uxtb	r3, r3
 800baf2:	2b20      	cmp	r3, #32
 800baf4:	f040 80fb 	bne.w	800bcee <HAL_I2C_Slave_Transmit+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d002      	beq.n	800bb04 <HAL_I2C_Slave_Transmit+0x30>
 800bafe:	88fb      	ldrh	r3, [r7, #6]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d101      	bne.n	800bb08 <HAL_I2C_Slave_Transmit+0x34>
    {
      return  HAL_ERROR;
 800bb04:	2301      	movs	r3, #1
 800bb06:	e0f3      	b.n	800bcf0 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb0e:	2b01      	cmp	r3, #1
 800bb10:	d101      	bne.n	800bb16 <HAL_I2C_Slave_Transmit+0x42>
 800bb12:	2302      	movs	r3, #2
 800bb14:	e0ec      	b.n	800bcf0 <HAL_I2C_Slave_Transmit+0x21c>
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	2201      	movs	r2, #1
 800bb1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	f003 0301 	and.w	r3, r3, #1
 800bb28:	2b01      	cmp	r3, #1
 800bb2a:	d007      	beq.n	800bb3c <HAL_I2C_Slave_Transmit+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	681a      	ldr	r2, [r3, #0]
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f042 0201 	orr.w	r2, r2, #1
 800bb3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	681a      	ldr	r2, [r3, #0]
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bb4a:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	2221      	movs	r2, #33	; 0x21
 800bb50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	2220      	movs	r2, #32
 800bb58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	2200      	movs	r2, #0
 800bb60:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	68ba      	ldr	r2, [r7, #8]
 800bb66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	88fa      	ldrh	r2, [r7, #6]
 800bb6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb72:	b29a      	uxth	r2, r3
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	4a5f      	ldr	r2, [pc, #380]	; (800bcf8 <HAL_I2C_Slave_Transmit+0x224>)
 800bb7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	681a      	ldr	r2, [r3, #0]
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bb8c:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800bb8e:	69fb      	ldr	r3, [r7, #28]
 800bb90:	9300      	str	r3, [sp, #0]
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	2200      	movs	r2, #0
 800bb96:	4959      	ldr	r1, [pc, #356]	; (800bcfc <HAL_I2C_Slave_Transmit+0x228>)
 800bb98:	68f8      	ldr	r0, [r7, #12]
 800bb9a:	f005 fa2b 	bl	8010ff4 <I2C_WaitOnFlagUntilTimeout>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d001      	beq.n	800bba8 <HAL_I2C_Slave_Transmit+0xd4>
    {
      return HAL_ERROR;
 800bba4:	2301      	movs	r3, #1
 800bba6:	e0a3      	b.n	800bcf0 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bba8:	2300      	movs	r3, #0
 800bbaa:	617b      	str	r3, [r7, #20]
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	695b      	ldr	r3, [r3, #20]
 800bbb2:	617b      	str	r3, [r7, #20]
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	699b      	ldr	r3, [r3, #24]
 800bbba:	617b      	str	r3, [r7, #20]
 800bbbc:	697b      	ldr	r3, [r7, #20]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	691b      	ldr	r3, [r3, #16]
 800bbc2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800bbc6:	d165      	bne.n	800bc94 <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800bbc8:	69fb      	ldr	r3, [r7, #28]
 800bbca:	9300      	str	r3, [sp, #0]
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	2200      	movs	r2, #0
 800bbd0:	494a      	ldr	r1, [pc, #296]	; (800bcfc <HAL_I2C_Slave_Transmit+0x228>)
 800bbd2:	68f8      	ldr	r0, [r7, #12]
 800bbd4:	f005 fa0e 	bl	8010ff4 <I2C_WaitOnFlagUntilTimeout>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d001      	beq.n	800bbe2 <HAL_I2C_Slave_Transmit+0x10e>
      {
        return HAL_ERROR;
 800bbde:	2301      	movs	r3, #1
 800bbe0:	e086      	b.n	800bcf0 <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	61bb      	str	r3, [r7, #24]
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	695b      	ldr	r3, [r3, #20]
 800bbec:	61bb      	str	r3, [r7, #24]
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	699b      	ldr	r3, [r3, #24]
 800bbf4:	61bb      	str	r3, [r7, #24]
 800bbf6:	69bb      	ldr	r3, [r7, #24]
    }

    while (hi2c->XferSize > 0U)
 800bbf8:	e04c      	b.n	800bc94 <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bbfa:	69fa      	ldr	r2, [r7, #28]
 800bbfc:	6839      	ldr	r1, [r7, #0]
 800bbfe:	68f8      	ldr	r0, [r7, #12]
 800bc00:	f005 face 	bl	80111a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800bc04:	4603      	mov	r3, r0
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d009      	beq.n	800bc1e <HAL_I2C_Slave_Transmit+0x14a>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	681a      	ldr	r2, [r3, #0]
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bc18:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 800bc1a:	2301      	movs	r3, #1
 800bc1c:	e068      	b.n	800bcf0 <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc22:	781a      	ldrb	r2, [r3, #0]
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc2e:	1c5a      	adds	r2, r3, #1
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc38:	b29b      	uxth	r3, r3
 800bc3a:	3b01      	subs	r3, #1
 800bc3c:	b29a      	uxth	r2, r3
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc46:	3b01      	subs	r3, #1
 800bc48:	b29a      	uxth	r2, r3
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	695b      	ldr	r3, [r3, #20]
 800bc54:	f003 0304 	and.w	r3, r3, #4
 800bc58:	2b04      	cmp	r3, #4
 800bc5a:	d11b      	bne.n	800bc94 <HAL_I2C_Slave_Transmit+0x1c0>
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d017      	beq.n	800bc94 <HAL_I2C_Slave_Transmit+0x1c0>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc68:	781a      	ldrb	r2, [r3, #0]
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc74:	1c5a      	adds	r2, r3, #1
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc7e:	b29b      	uxth	r3, r3
 800bc80:	3b01      	subs	r3, #1
 800bc82:	b29a      	uxth	r2, r3
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc8c:	3b01      	subs	r3, #1
 800bc8e:	b29a      	uxth	r2, r3
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	851a      	strh	r2, [r3, #40]	; 0x28
    while (hi2c->XferSize > 0U)
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d1ae      	bne.n	800bbfa <HAL_I2C_Slave_Transmit+0x126>
      }
    }

    /* Wait until AF flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_AF, RESET, Timeout, tickstart) != HAL_OK)
 800bc9c:	69fb      	ldr	r3, [r7, #28]
 800bc9e:	9300      	str	r3, [sp, #0]
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	2200      	movs	r2, #0
 800bca4:	f44f 3182 	mov.w	r1, #66560	; 0x10400
 800bca8:	68f8      	ldr	r0, [r7, #12]
 800bcaa:	f005 f9a3 	bl	8010ff4 <I2C_WaitOnFlagUntilTimeout>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d001      	beq.n	800bcb8 <HAL_I2C_Slave_Transmit+0x1e4>
    {
      return HAL_ERROR;
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	e01b      	b.n	800bcf0 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bcc0:	615a      	str	r2, [r3, #20]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	681a      	ldr	r2, [r3, #0]
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bcd0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	2220      	movs	r2, #32
 800bcd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	2200      	movs	r2, #0
 800bcde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	2200      	movs	r2, #0
 800bce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800bcea:	2300      	movs	r3, #0
 800bcec:	e000      	b.n	800bcf0 <HAL_I2C_Slave_Transmit+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800bcee:	2302      	movs	r3, #2
  }
}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	3720      	adds	r7, #32
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}
 800bcf8:	ffff0000 	.word	0xffff0000
 800bcfc:	00010002 	.word	0x00010002

0800bd00 <HAL_I2C_Slave_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b08a      	sub	sp, #40	; 0x28
 800bd04:	af02      	add	r7, sp, #8
 800bd06:	60f8      	str	r0, [r7, #12]
 800bd08:	60b9      	str	r1, [r7, #8]
 800bd0a:	603b      	str	r3, [r7, #0]
 800bd0c:	4613      	mov	r3, r2
 800bd0e:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800bd10:	f7fa fdb4 	bl	800687c <HAL_GetTick>
 800bd14:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd1c:	b2db      	uxtb	r3, r3
 800bd1e:	2b20      	cmp	r3, #32
 800bd20:	f040 80ee 	bne.w	800bf00 <HAL_I2C_Slave_Receive+0x200>
  {
    if ((pData == NULL) || (Size == (uint16_t)0))
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d002      	beq.n	800bd30 <HAL_I2C_Slave_Receive+0x30>
 800bd2a:	88fb      	ldrh	r3, [r7, #6]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d101      	bne.n	800bd34 <HAL_I2C_Slave_Receive+0x34>
    {
      return HAL_ERROR;
 800bd30:	2301      	movs	r3, #1
 800bd32:	e0e6      	b.n	800bf02 <HAL_I2C_Slave_Receive+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd3a:	2b01      	cmp	r3, #1
 800bd3c:	d101      	bne.n	800bd42 <HAL_I2C_Slave_Receive+0x42>
 800bd3e:	2302      	movs	r3, #2
 800bd40:	e0df      	b.n	800bf02 <HAL_I2C_Slave_Receive+0x202>
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	2201      	movs	r2, #1
 800bd46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	f003 0301 	and.w	r3, r3, #1
 800bd54:	2b01      	cmp	r3, #1
 800bd56:	d007      	beq.n	800bd68 <HAL_I2C_Slave_Receive+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	681a      	ldr	r2, [r3, #0]
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	f042 0201 	orr.w	r2, r2, #1
 800bd66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	681a      	ldr	r2, [r3, #0]
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bd76:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	2222      	movs	r2, #34	; 0x22
 800bd7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	2220      	movs	r2, #32
 800bd84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	68ba      	ldr	r2, [r7, #8]
 800bd92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	88fa      	ldrh	r2, [r7, #6]
 800bd98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd9e:	b29a      	uxth	r2, r3
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	4a59      	ldr	r2, [pc, #356]	; (800bf0c <HAL_I2C_Slave_Receive+0x20c>)
 800bda8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	681a      	ldr	r2, [r3, #0]
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bdb8:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800bdba:	69fb      	ldr	r3, [r7, #28]
 800bdbc:	9300      	str	r3, [sp, #0]
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	4953      	ldr	r1, [pc, #332]	; (800bf10 <HAL_I2C_Slave_Receive+0x210>)
 800bdc4:	68f8      	ldr	r0, [r7, #12]
 800bdc6:	f005 f915 	bl	8010ff4 <I2C_WaitOnFlagUntilTimeout>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d001      	beq.n	800bdd4 <HAL_I2C_Slave_Receive+0xd4>
    {
      return HAL_ERROR;
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	e096      	b.n	800bf02 <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	617b      	str	r3, [r7, #20]
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	695b      	ldr	r3, [r3, #20]
 800bdde:	617b      	str	r3, [r7, #20]
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	699b      	ldr	r3, [r3, #24]
 800bde6:	617b      	str	r3, [r7, #20]
 800bde8:	697b      	ldr	r3, [r7, #20]

    while (hi2c->XferSize > 0U)
 800bdea:	e04e      	b.n	800be8a <HAL_I2C_Slave_Receive+0x18a>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bdec:	69fa      	ldr	r2, [r7, #28]
 800bdee:	6839      	ldr	r1, [r7, #0]
 800bdf0:	68f8      	ldr	r0, [r7, #12]
 800bdf2:	f005 fac7 	bl	8011384 <I2C_WaitOnRXNEFlagUntilTimeout>
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d009      	beq.n	800be10 <HAL_I2C_Slave_Receive+0x110>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	681a      	ldr	r2, [r3, #0]
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800be0a:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 800be0c:	2301      	movs	r3, #1
 800be0e:	e078      	b.n	800bf02 <HAL_I2C_Slave_Receive+0x202>
      }

      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	691a      	ldr	r2, [r3, #16]
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be1a:	b2d2      	uxtb	r2, r2
 800be1c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be22:	1c5a      	adds	r2, r3, #1
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be2c:	3b01      	subs	r3, #1
 800be2e:	b29a      	uxth	r2, r3
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be38:	b29b      	uxth	r3, r3
 800be3a:	3b01      	subs	r3, #1
 800be3c:	b29a      	uxth	r2, r3
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	695b      	ldr	r3, [r3, #20]
 800be48:	f003 0304 	and.w	r3, r3, #4
 800be4c:	2b04      	cmp	r3, #4
 800be4e:	d11c      	bne.n	800be8a <HAL_I2C_Slave_Receive+0x18a>
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be54:	2b00      	cmp	r3, #0
 800be56:	d018      	beq.n	800be8a <HAL_I2C_Slave_Receive+0x18a>
      {
        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	691a      	ldr	r2, [r3, #16]
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be62:	b2d2      	uxtb	r2, r2
 800be64:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be6a:	1c5a      	adds	r2, r3, #1
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be74:	3b01      	subs	r3, #1
 800be76:	b29a      	uxth	r2, r3
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be80:	b29b      	uxth	r3, r3
 800be82:	3b01      	subs	r3, #1
 800be84:	b29a      	uxth	r2, r3
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d1ac      	bne.n	800bdec <HAL_I2C_Slave_Receive+0xec>
      }
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800be92:	69fa      	ldr	r2, [r7, #28]
 800be94:	6839      	ldr	r1, [r7, #0]
 800be96:	68f8      	ldr	r0, [r7, #12]
 800be98:	f005 fa04 	bl	80112a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800be9c:	4603      	mov	r3, r0
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d009      	beq.n	800beb6 <HAL_I2C_Slave_Receive+0x1b6>
    {
      /* Disable Address Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	681a      	ldr	r2, [r3, #0]
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800beb0:	601a      	str	r2, [r3, #0]

      return HAL_ERROR;
 800beb2:	2301      	movs	r3, #1
 800beb4:	e025      	b.n	800bf02 <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800beb6:	2300      	movs	r3, #0
 800beb8:	61bb      	str	r3, [r7, #24]
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	695b      	ldr	r3, [r3, #20]
 800bec0:	61bb      	str	r3, [r7, #24]
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	681a      	ldr	r2, [r3, #0]
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	f042 0201 	orr.w	r2, r2, #1
 800bed0:	601a      	str	r2, [r3, #0]
 800bed2:	69bb      	ldr	r3, [r7, #24]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	681a      	ldr	r2, [r3, #0]
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bee2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	2220      	movs	r2, #32
 800bee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	2200      	movs	r2, #0
 800bef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	2200      	movs	r2, #0
 800bef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800befc:	2300      	movs	r3, #0
 800befe:	e000      	b.n	800bf02 <HAL_I2C_Slave_Receive+0x202>
  }
  else
  {
    return HAL_BUSY;
 800bf00:	2302      	movs	r3, #2
  }
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	3720      	adds	r7, #32
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}
 800bf0a:	bf00      	nop
 800bf0c:	ffff0000 	.word	0xffff0000
 800bf10:	00010002 	.word	0x00010002

0800bf14 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800bf14:	b480      	push	{r7}
 800bf16:	b087      	sub	sp, #28
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	60f8      	str	r0, [r7, #12]
 800bf1c:	607a      	str	r2, [r7, #4]
 800bf1e:	461a      	mov	r2, r3
 800bf20:	460b      	mov	r3, r1
 800bf22:	817b      	strh	r3, [r7, #10]
 800bf24:	4613      	mov	r3, r2
 800bf26:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf32:	b2db      	uxtb	r3, r3
 800bf34:	2b20      	cmp	r3, #32
 800bf36:	f040 8085 	bne.w	800c044 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800bf3a:	4b46      	ldr	r3, [pc, #280]	; (800c054 <HAL_I2C_Master_Transmit_IT+0x140>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	08db      	lsrs	r3, r3, #3
 800bf40:	4a45      	ldr	r2, [pc, #276]	; (800c058 <HAL_I2C_Master_Transmit_IT+0x144>)
 800bf42:	fba2 2303 	umull	r2, r3, r2, r3
 800bf46:	0a1a      	lsrs	r2, r3, #8
 800bf48:	4613      	mov	r3, r2
 800bf4a:	009b      	lsls	r3, r3, #2
 800bf4c:	4413      	add	r3, r2
 800bf4e:	009a      	lsls	r2, r3, #2
 800bf50:	4413      	add	r3, r2
 800bf52:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800bf54:	697b      	ldr	r3, [r7, #20]
 800bf56:	3b01      	subs	r3, #1
 800bf58:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800bf5a:	697b      	ldr	r3, [r7, #20]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d116      	bne.n	800bf8e <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	2200      	movs	r2, #0
 800bf64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	2220      	movs	r2, #32
 800bf6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	2200      	movs	r2, #0
 800bf72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf7a:	f043 0220 	orr.w	r2, r3, #32
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	2200      	movs	r2, #0
 800bf86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	e05b      	b.n	800c046 <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	699b      	ldr	r3, [r3, #24]
 800bf94:	f003 0302 	and.w	r3, r3, #2
 800bf98:	2b02      	cmp	r3, #2
 800bf9a:	d0db      	beq.n	800bf54 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bfa2:	2b01      	cmp	r3, #1
 800bfa4:	d101      	bne.n	800bfaa <HAL_I2C_Master_Transmit_IT+0x96>
 800bfa6:	2302      	movs	r3, #2
 800bfa8:	e04d      	b.n	800c046 <HAL_I2C_Master_Transmit_IT+0x132>
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	2201      	movs	r2, #1
 800bfae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	f003 0301 	and.w	r3, r3, #1
 800bfbc:	2b01      	cmp	r3, #1
 800bfbe:	d007      	beq.n	800bfd0 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	681a      	ldr	r2, [r3, #0]
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	f042 0201 	orr.w	r2, r2, #1
 800bfce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	681a      	ldr	r2, [r3, #0]
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bfde:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	2221      	movs	r2, #33	; 0x21
 800bfe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	2210      	movs	r2, #16
 800bfec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	2200      	movs	r2, #0
 800bff4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	687a      	ldr	r2, [r7, #4]
 800bffa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	893a      	ldrh	r2, [r7, #8]
 800c000:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c006:	b29a      	uxth	r2, r3
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	4a13      	ldr	r2, [pc, #76]	; (800c05c <HAL_I2C_Master_Transmit_IT+0x148>)
 800c010:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800c012:	897a      	ldrh	r2, [r7, #10]
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	2200      	movs	r2, #0
 800c01c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	685a      	ldr	r2, [r3, #4]
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800c02e:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	681a      	ldr	r2, [r3, #0]
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c03e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800c040:	2300      	movs	r3, #0
 800c042:	e000      	b.n	800c046 <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 800c044:	2302      	movs	r3, #2
  }
}
 800c046:	4618      	mov	r0, r3
 800c048:	371c      	adds	r7, #28
 800c04a:	46bd      	mov	sp, r7
 800c04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c050:	4770      	bx	lr
 800c052:	bf00      	nop
 800c054:	20000058 	.word	0x20000058
 800c058:	14f8b589 	.word	0x14f8b589
 800c05c:	ffff0000 	.word	0xffff0000

0800c060 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800c060:	b480      	push	{r7}
 800c062:	b087      	sub	sp, #28
 800c064:	af00      	add	r7, sp, #0
 800c066:	60f8      	str	r0, [r7, #12]
 800c068:	607a      	str	r2, [r7, #4]
 800c06a:	461a      	mov	r2, r3
 800c06c:	460b      	mov	r3, r1
 800c06e:	817b      	strh	r3, [r7, #10]
 800c070:	4613      	mov	r3, r2
 800c072:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800c074:	2300      	movs	r3, #0
 800c076:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c07e:	b2db      	uxtb	r3, r3
 800c080:	2b20      	cmp	r3, #32
 800c082:	f040 808d 	bne.w	800c1a0 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800c086:	4b4a      	ldr	r3, [pc, #296]	; (800c1b0 <HAL_I2C_Master_Receive_IT+0x150>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	08db      	lsrs	r3, r3, #3
 800c08c:	4a49      	ldr	r2, [pc, #292]	; (800c1b4 <HAL_I2C_Master_Receive_IT+0x154>)
 800c08e:	fba2 2303 	umull	r2, r3, r2, r3
 800c092:	0a1a      	lsrs	r2, r3, #8
 800c094:	4613      	mov	r3, r2
 800c096:	009b      	lsls	r3, r3, #2
 800c098:	4413      	add	r3, r2
 800c09a:	009a      	lsls	r2, r3, #2
 800c09c:	4413      	add	r3, r2
 800c09e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	3b01      	subs	r3, #1
 800c0a4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800c0a6:	697b      	ldr	r3, [r7, #20]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d116      	bne.n	800c0da <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	2220      	movs	r2, #32
 800c0b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	2200      	movs	r2, #0
 800c0be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0c6:	f043 0220 	orr.w	r2, r3, #32
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	e063      	b.n	800c1a2 <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	699b      	ldr	r3, [r3, #24]
 800c0e0:	f003 0302 	and.w	r3, r3, #2
 800c0e4:	2b02      	cmp	r3, #2
 800c0e6:	d0db      	beq.n	800c0a0 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c0ee:	2b01      	cmp	r3, #1
 800c0f0:	d101      	bne.n	800c0f6 <HAL_I2C_Master_Receive_IT+0x96>
 800c0f2:	2302      	movs	r3, #2
 800c0f4:	e055      	b.n	800c1a2 <HAL_I2C_Master_Receive_IT+0x142>
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	2201      	movs	r2, #1
 800c0fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	f003 0301 	and.w	r3, r3, #1
 800c108:	2b01      	cmp	r3, #1
 800c10a:	d007      	beq.n	800c11c <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	681a      	ldr	r2, [r3, #0]
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	f042 0201 	orr.w	r2, r2, #1
 800c11a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	681a      	ldr	r2, [r3, #0]
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c12a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	2222      	movs	r2, #34	; 0x22
 800c130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	2210      	movs	r2, #16
 800c138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	2200      	movs	r2, #0
 800c140:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	687a      	ldr	r2, [r7, #4]
 800c146:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	893a      	ldrh	r2, [r7, #8]
 800c14c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c152:	b29a      	uxth	r2, r3
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	4a17      	ldr	r2, [pc, #92]	; (800c1b8 <HAL_I2C_Master_Receive_IT+0x158>)
 800c15c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800c15e:	897a      	ldrh	r2, [r7, #10]
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	2200      	movs	r2, #0
 800c168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	685a      	ldr	r2, [r3, #4]
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800c17a:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	681a      	ldr	r2, [r3, #0]
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c18a:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	681a      	ldr	r2, [r3, #0]
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c19a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800c19c:	2300      	movs	r3, #0
 800c19e:	e000      	b.n	800c1a2 <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 800c1a0:	2302      	movs	r3, #2
  }
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	371c      	adds	r7, #28
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ac:	4770      	bx	lr
 800c1ae:	bf00      	nop
 800c1b0:	20000058 	.word	0x20000058
 800c1b4:	14f8b589 	.word	0x14f8b589
 800c1b8:	ffff0000 	.word	0xffff0000

0800c1bc <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b085      	sub	sp, #20
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	60f8      	str	r0, [r7, #12]
 800c1c4:	60b9      	str	r1, [r7, #8]
 800c1c6:	4613      	mov	r3, r2
 800c1c8:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c1d0:	b2db      	uxtb	r3, r3
 800c1d2:	2b20      	cmp	r3, #32
 800c1d4:	d158      	bne.n	800c288 <HAL_I2C_Slave_Transmit_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 800c1d6:	68bb      	ldr	r3, [r7, #8]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d002      	beq.n	800c1e2 <HAL_I2C_Slave_Transmit_IT+0x26>
 800c1dc:	88fb      	ldrh	r3, [r7, #6]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d101      	bne.n	800c1e6 <HAL_I2C_Slave_Transmit_IT+0x2a>
    {
      return  HAL_ERROR;
 800c1e2:	2301      	movs	r3, #1
 800c1e4:	e051      	b.n	800c28a <HAL_I2C_Slave_Transmit_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c1ec:	2b01      	cmp	r3, #1
 800c1ee:	d101      	bne.n	800c1f4 <HAL_I2C_Slave_Transmit_IT+0x38>
 800c1f0:	2302      	movs	r3, #2
 800c1f2:	e04a      	b.n	800c28a <HAL_I2C_Slave_Transmit_IT+0xce>
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	2201      	movs	r2, #1
 800c1f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	f003 0301 	and.w	r3, r3, #1
 800c206:	2b01      	cmp	r3, #1
 800c208:	d007      	beq.n	800c21a <HAL_I2C_Slave_Transmit_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	681a      	ldr	r2, [r3, #0]
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	f042 0201 	orr.w	r2, r2, #1
 800c218:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	681a      	ldr	r2, [r3, #0]
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c228:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	2221      	movs	r2, #33	; 0x21
 800c22e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	2220      	movs	r2, #32
 800c236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	2200      	movs	r2, #0
 800c23e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	68ba      	ldr	r2, [r7, #8]
 800c244:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	88fa      	ldrh	r2, [r7, #6]
 800c24a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c250:	b29a      	uxth	r2, r3
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	4a0f      	ldr	r2, [pc, #60]	; (800c298 <HAL_I2C_Slave_Transmit_IT+0xdc>)
 800c25a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	681a      	ldr	r2, [r3, #0]
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c26a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	2200      	movs	r2, #0
 800c270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	685a      	ldr	r2, [r3, #4]
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800c282:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800c284:	2300      	movs	r3, #0
 800c286:	e000      	b.n	800c28a <HAL_I2C_Slave_Transmit_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 800c288:	2302      	movs	r3, #2
  }
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	3714      	adds	r7, #20
 800c28e:	46bd      	mov	sp, r7
 800c290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c294:	4770      	bx	lr
 800c296:	bf00      	nop
 800c298:	ffff0000 	.word	0xffff0000

0800c29c <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800c29c:	b480      	push	{r7}
 800c29e:	b085      	sub	sp, #20
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	60f8      	str	r0, [r7, #12]
 800c2a4:	60b9      	str	r1, [r7, #8]
 800c2a6:	4613      	mov	r3, r2
 800c2a8:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c2b0:	b2db      	uxtb	r3, r3
 800c2b2:	2b20      	cmp	r3, #32
 800c2b4:	d158      	bne.n	800c368 <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 800c2b6:	68bb      	ldr	r3, [r7, #8]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d002      	beq.n	800c2c2 <HAL_I2C_Slave_Receive_IT+0x26>
 800c2bc:	88fb      	ldrh	r3, [r7, #6]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d101      	bne.n	800c2c6 <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	e051      	b.n	800c36a <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c2cc:	2b01      	cmp	r3, #1
 800c2ce:	d101      	bne.n	800c2d4 <HAL_I2C_Slave_Receive_IT+0x38>
 800c2d0:	2302      	movs	r3, #2
 800c2d2:	e04a      	b.n	800c36a <HAL_I2C_Slave_Receive_IT+0xce>
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	2201      	movs	r2, #1
 800c2d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	f003 0301 	and.w	r3, r3, #1
 800c2e6:	2b01      	cmp	r3, #1
 800c2e8:	d007      	beq.n	800c2fa <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	681a      	ldr	r2, [r3, #0]
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	f042 0201 	orr.w	r2, r2, #1
 800c2f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	681a      	ldr	r2, [r3, #0]
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c308:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	2222      	movs	r2, #34	; 0x22
 800c30e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	2220      	movs	r2, #32
 800c316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	2200      	movs	r2, #0
 800c31e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	68ba      	ldr	r2, [r7, #8]
 800c324:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	88fa      	ldrh	r2, [r7, #6]
 800c32a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c330:	b29a      	uxth	r2, r3
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	4a0f      	ldr	r2, [pc, #60]	; (800c378 <HAL_I2C_Slave_Receive_IT+0xdc>)
 800c33a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	681a      	ldr	r2, [r3, #0]
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c34a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	2200      	movs	r2, #0
 800c350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	685a      	ldr	r2, [r3, #4]
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800c362:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800c364:	2300      	movs	r3, #0
 800c366:	e000      	b.n	800c36a <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 800c368:	2302      	movs	r3, #2
  }
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	3714      	adds	r7, #20
 800c36e:	46bd      	mov	sp, r7
 800c370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c374:	4770      	bx	lr
 800c376:	bf00      	nop
 800c378:	ffff0000 	.word	0xffff0000

0800c37c <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b086      	sub	sp, #24
 800c380:	af00      	add	r7, sp, #0
 800c382:	60f8      	str	r0, [r7, #12]
 800c384:	607a      	str	r2, [r7, #4]
 800c386:	461a      	mov	r2, r3
 800c388:	460b      	mov	r3, r1
 800c38a:	817b      	strh	r3, [r7, #10]
 800c38c:	4613      	mov	r3, r2
 800c38e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800c390:	2300      	movs	r3, #0
 800c392:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c39a:	b2db      	uxtb	r3, r3
 800c39c:	2b20      	cmp	r3, #32
 800c39e:	f040 810d 	bne.w	800c5bc <HAL_I2C_Master_Transmit_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800c3a2:	4b89      	ldr	r3, [pc, #548]	; (800c5c8 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	08db      	lsrs	r3, r3, #3
 800c3a8:	4a88      	ldr	r2, [pc, #544]	; (800c5cc <HAL_I2C_Master_Transmit_DMA+0x250>)
 800c3aa:	fba2 2303 	umull	r2, r3, r2, r3
 800c3ae:	0a1a      	lsrs	r2, r3, #8
 800c3b0:	4613      	mov	r3, r2
 800c3b2:	009b      	lsls	r3, r3, #2
 800c3b4:	4413      	add	r3, r2
 800c3b6:	009a      	lsls	r2, r3, #2
 800c3b8:	4413      	add	r3, r2
 800c3ba:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 800c3bc:	693b      	ldr	r3, [r7, #16]
 800c3be:	3b01      	subs	r3, #1
 800c3c0:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 800c3c2:	693b      	ldr	r3, [r7, #16]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d116      	bne.n	800c3f6 <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	2220      	movs	r2, #32
 800c3d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	2200      	movs	r2, #0
 800c3da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3e2:	f043 0220 	orr.w	r2, r3, #32
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c3f2:	2301      	movs	r3, #1
 800c3f4:	e0e3      	b.n	800c5be <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	699b      	ldr	r3, [r3, #24]
 800c3fc:	f003 0302 	and.w	r3, r3, #2
 800c400:	2b02      	cmp	r3, #2
 800c402:	d0db      	beq.n	800c3bc <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c40a:	2b01      	cmp	r3, #1
 800c40c:	d101      	bne.n	800c412 <HAL_I2C_Master_Transmit_DMA+0x96>
 800c40e:	2302      	movs	r3, #2
 800c410:	e0d5      	b.n	800c5be <HAL_I2C_Master_Transmit_DMA+0x242>
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	2201      	movs	r2, #1
 800c416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	f003 0301 	and.w	r3, r3, #1
 800c424:	2b01      	cmp	r3, #1
 800c426:	d007      	beq.n	800c438 <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	681a      	ldr	r2, [r3, #0]
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	f042 0201 	orr.w	r2, r2, #1
 800c436:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	681a      	ldr	r2, [r3, #0]
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c446:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	2221      	movs	r2, #33	; 0x21
 800c44c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	2210      	movs	r2, #16
 800c454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	2200      	movs	r2, #0
 800c45c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	687a      	ldr	r2, [r7, #4]
 800c462:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	893a      	ldrh	r2, [r7, #8]
 800c468:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c46e:	b29a      	uxth	r2, r3
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	4a56      	ldr	r2, [pc, #344]	; (800c5d0 <HAL_I2C_Master_Transmit_DMA+0x254>)
 800c478:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800c47a:	897a      	ldrh	r2, [r7, #10]
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c484:	2b00      	cmp	r3, #0
 800c486:	d07b      	beq.n	800c580 <HAL_I2C_Master_Transmit_DMA+0x204>
    {
      if (hi2c->hdmatx != NULL)
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d02a      	beq.n	800c4e6 <HAL_I2C_Master_Transmit_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c494:	4a4f      	ldr	r2, [pc, #316]	; (800c5d4 <HAL_I2C_Master_Transmit_DMA+0x258>)
 800c496:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c49c:	4a4e      	ldr	r2, [pc, #312]	; (800c5d8 <HAL_I2C_Master_Transmit_DMA+0x25c>)
 800c49e:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4bc:	2200      	movs	r2, #0
 800c4be:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4c8:	4619      	mov	r1, r3
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	3310      	adds	r3, #16
 800c4d0:	461a      	mov	r2, r3
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c4d6:	f7fb fc3a 	bl	8007d4e <HAL_DMA_Start_IT>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800c4de:	7dfb      	ldrb	r3, [r7, #23]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d139      	bne.n	800c558 <HAL_I2C_Master_Transmit_DMA+0x1dc>
 800c4e4:	e013      	b.n	800c50e <HAL_I2C_Master_Transmit_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	2220      	movs	r2, #32
 800c4ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4fa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	2200      	movs	r2, #0
 800c506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800c50a:	2301      	movs	r3, #1
 800c50c:	e057      	b.n	800c5be <HAL_I2C_Master_Transmit_DMA+0x242>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	2200      	movs	r2, #0
 800c512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	685a      	ldr	r2, [r3, #4]
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800c524:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	685a      	ldr	r2, [r3, #4]
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c534:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	681a      	ldr	r2, [r3, #0]
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c544:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	681a      	ldr	r2, [r3, #0]
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c554:	601a      	str	r2, [r3, #0]
 800c556:	e02f      	b.n	800c5b8 <HAL_I2C_Master_Transmit_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	2220      	movs	r2, #32
 800c55c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	2200      	movs	r2, #0
 800c564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c56c:	f043 0210 	orr.w	r2, r3, #16
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	2200      	movs	r2, #0
 800c578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c57c:	2301      	movs	r3, #1
 800c57e:	e01e      	b.n	800c5be <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	681a      	ldr	r2, [r3, #0]
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c58e:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	681a      	ldr	r2, [r3, #0]
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c59e:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	685a      	ldr	r2, [r3, #4]
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800c5b6:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	e000      	b.n	800c5be <HAL_I2C_Master_Transmit_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 800c5bc:	2302      	movs	r3, #2
  }
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	3718      	adds	r7, #24
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}
 800c5c6:	bf00      	nop
 800c5c8:	20000058 	.word	0x20000058
 800c5cc:	14f8b589 	.word	0x14f8b589
 800c5d0:	ffff0000 	.word	0xffff0000
 800c5d4:	08010c81 	.word	0x08010c81
 800c5d8:	08010e2b 	.word	0x08010e2b

0800c5dc <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b086      	sub	sp, #24
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	60f8      	str	r0, [r7, #12]
 800c5e4:	607a      	str	r2, [r7, #4]
 800c5e6:	461a      	mov	r2, r3
 800c5e8:	460b      	mov	r3, r1
 800c5ea:	817b      	strh	r3, [r7, #10]
 800c5ec:	4613      	mov	r3, r2
 800c5ee:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c5fa:	b2db      	uxtb	r3, r3
 800c5fc:	2b20      	cmp	r3, #32
 800c5fe:	f040 810d 	bne.w	800c81c <HAL_I2C_Master_Receive_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800c602:	4b89      	ldr	r3, [pc, #548]	; (800c828 <HAL_I2C_Master_Receive_DMA+0x24c>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	08db      	lsrs	r3, r3, #3
 800c608:	4a88      	ldr	r2, [pc, #544]	; (800c82c <HAL_I2C_Master_Receive_DMA+0x250>)
 800c60a:	fba2 2303 	umull	r2, r3, r2, r3
 800c60e:	0a1a      	lsrs	r2, r3, #8
 800c610:	4613      	mov	r3, r2
 800c612:	009b      	lsls	r3, r3, #2
 800c614:	4413      	add	r3, r2
 800c616:	009a      	lsls	r2, r3, #2
 800c618:	4413      	add	r3, r2
 800c61a:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 800c61c:	693b      	ldr	r3, [r7, #16]
 800c61e:	3b01      	subs	r3, #1
 800c620:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 800c622:	693b      	ldr	r3, [r7, #16]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d116      	bne.n	800c656 <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	2200      	movs	r2, #0
 800c62c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	2220      	movs	r2, #32
 800c632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	2200      	movs	r2, #0
 800c63a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c642:	f043 0220 	orr.w	r2, r3, #32
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	2200      	movs	r2, #0
 800c64e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c652:	2301      	movs	r3, #1
 800c654:	e0e3      	b.n	800c81e <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	699b      	ldr	r3, [r3, #24]
 800c65c:	f003 0302 	and.w	r3, r3, #2
 800c660:	2b02      	cmp	r3, #2
 800c662:	d0db      	beq.n	800c61c <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c66a:	2b01      	cmp	r3, #1
 800c66c:	d101      	bne.n	800c672 <HAL_I2C_Master_Receive_DMA+0x96>
 800c66e:	2302      	movs	r3, #2
 800c670:	e0d5      	b.n	800c81e <HAL_I2C_Master_Receive_DMA+0x242>
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	2201      	movs	r2, #1
 800c676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	f003 0301 	and.w	r3, r3, #1
 800c684:	2b01      	cmp	r3, #1
 800c686:	d007      	beq.n	800c698 <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	681a      	ldr	r2, [r3, #0]
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	f042 0201 	orr.w	r2, r2, #1
 800c696:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	681a      	ldr	r2, [r3, #0]
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c6a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	2222      	movs	r2, #34	; 0x22
 800c6ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	2210      	movs	r2, #16
 800c6b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	687a      	ldr	r2, [r7, #4]
 800c6c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	893a      	ldrh	r2, [r7, #8]
 800c6c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c6ce:	b29a      	uxth	r2, r3
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	4a56      	ldr	r2, [pc, #344]	; (800c830 <HAL_I2C_Master_Receive_DMA+0x254>)
 800c6d8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800c6da:	897a      	ldrh	r2, [r7, #10]
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d07b      	beq.n	800c7e0 <HAL_I2C_Master_Receive_DMA+0x204>
    {
      if (hi2c->hdmarx != NULL)
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d02a      	beq.n	800c746 <HAL_I2C_Master_Receive_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6f4:	4a4f      	ldr	r2, [pc, #316]	; (800c834 <HAL_I2C_Master_Receive_DMA+0x258>)
 800c6f6:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6fc:	4a4e      	ldr	r2, [pc, #312]	; (800c838 <HAL_I2C_Master_Receive_DMA+0x25c>)
 800c6fe:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c704:	2200      	movs	r2, #0
 800c706:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c70c:	2200      	movs	r2, #0
 800c70e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c714:	2200      	movs	r2, #0
 800c716:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c71c:	2200      	movs	r2, #0
 800c71e:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	3310      	adds	r3, #16
 800c72a:	4619      	mov	r1, r3
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c730:	461a      	mov	r2, r3
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c736:	f7fb fb0a 	bl	8007d4e <HAL_DMA_Start_IT>
 800c73a:	4603      	mov	r3, r0
 800c73c:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800c73e:	7dfb      	ldrb	r3, [r7, #23]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d139      	bne.n	800c7b8 <HAL_I2C_Master_Receive_DMA+0x1dc>
 800c744:	e013      	b.n	800c76e <HAL_I2C_Master_Receive_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	2220      	movs	r2, #32
 800c74a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	2200      	movs	r2, #0
 800c752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c75a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	2200      	movs	r2, #0
 800c766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800c76a:	2301      	movs	r3, #1
 800c76c:	e057      	b.n	800c81e <HAL_I2C_Master_Receive_DMA+0x242>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	681a      	ldr	r2, [r3, #0]
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c77c:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	681a      	ldr	r2, [r3, #0]
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c78c:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	2200      	movs	r2, #0
 800c792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	685a      	ldr	r2, [r3, #4]
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800c7a4:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	685a      	ldr	r2, [r3, #4]
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c7b4:	605a      	str	r2, [r3, #4]
 800c7b6:	e02f      	b.n	800c818 <HAL_I2C_Master_Receive_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	2220      	movs	r2, #32
 800c7bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7cc:	f043 0210 	orr.w	r2, r3, #16
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c7dc:	2301      	movs	r3, #1
 800c7de:	e01e      	b.n	800c81e <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	685a      	ldr	r2, [r3, #4]
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800c7f6:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	681a      	ldr	r2, [r3, #0]
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c806:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	681a      	ldr	r2, [r3, #0]
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c816:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800c818:	2300      	movs	r3, #0
 800c81a:	e000      	b.n	800c81e <HAL_I2C_Master_Receive_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 800c81c:	2302      	movs	r3, #2
  }
}
 800c81e:	4618      	mov	r0, r3
 800c820:	3718      	adds	r7, #24
 800c822:	46bd      	mov	sp, r7
 800c824:	bd80      	pop	{r7, pc}
 800c826:	bf00      	nop
 800c828:	20000058 	.word	0x20000058
 800c82c:	14f8b589 	.word	0x14f8b589
 800c830:	ffff0000 	.word	0xffff0000
 800c834:	08010c81 	.word	0x08010c81
 800c838:	08010e2b 	.word	0x08010e2b

0800c83c <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b086      	sub	sp, #24
 800c840:	af00      	add	r7, sp, #0
 800c842:	60f8      	str	r0, [r7, #12]
 800c844:	60b9      	str	r1, [r7, #8]
 800c846:	4613      	mov	r3, r2
 800c848:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c850:	b2db      	uxtb	r3, r3
 800c852:	2b20      	cmp	r3, #32
 800c854:	f040 80b8 	bne.w	800c9c8 <HAL_I2C_Slave_Transmit_DMA+0x18c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c858:	68bb      	ldr	r3, [r7, #8]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d002      	beq.n	800c864 <HAL_I2C_Slave_Transmit_DMA+0x28>
 800c85e:	88fb      	ldrh	r3, [r7, #6]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d101      	bne.n	800c868 <HAL_I2C_Slave_Transmit_DMA+0x2c>
    {
      return  HAL_ERROR;
 800c864:	2301      	movs	r3, #1
 800c866:	e0b0      	b.n	800c9ca <HAL_I2C_Slave_Transmit_DMA+0x18e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c86e:	2b01      	cmp	r3, #1
 800c870:	d101      	bne.n	800c876 <HAL_I2C_Slave_Transmit_DMA+0x3a>
 800c872:	2302      	movs	r3, #2
 800c874:	e0a9      	b.n	800c9ca <HAL_I2C_Slave_Transmit_DMA+0x18e>
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	2201      	movs	r2, #1
 800c87a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	f003 0301 	and.w	r3, r3, #1
 800c888:	2b01      	cmp	r3, #1
 800c88a:	d007      	beq.n	800c89c <HAL_I2C_Slave_Transmit_DMA+0x60>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	681a      	ldr	r2, [r3, #0]
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	f042 0201 	orr.w	r2, r2, #1
 800c89a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	681a      	ldr	r2, [r3, #0]
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c8aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	2221      	movs	r2, #33	; 0x21
 800c8b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	2220      	movs	r2, #32
 800c8b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	2200      	movs	r2, #0
 800c8c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	68ba      	ldr	r2, [r7, #8]
 800c8c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	88fa      	ldrh	r2, [r7, #6]
 800c8cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c8d2:	b29a      	uxth	r2, r3
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	4a3e      	ldr	r2, [pc, #248]	; (800c9d4 <HAL_I2C_Slave_Transmit_DMA+0x198>)
 800c8dc:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmatx != NULL)
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d02a      	beq.n	800c93c <HAL_I2C_Slave_Transmit_DMA+0x100>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8ea:	4a3b      	ldr	r2, [pc, #236]	; (800c9d8 <HAL_I2C_Slave_Transmit_DMA+0x19c>)
 800c8ec:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8f2:	4a3a      	ldr	r2, [pc, #232]	; (800c9dc <HAL_I2C_Slave_Transmit_DMA+0x1a0>)
 800c8f4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferM1CpltCallback = NULL;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c902:	2200      	movs	r2, #0
 800c904:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c90a:	2200      	movs	r2, #0
 800c90c:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmatx->XferAbortCallback = NULL;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c912:	2200      	movs	r2, #0
 800c914:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c91e:	4619      	mov	r1, r3
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	3310      	adds	r3, #16
 800c926:	461a      	mov	r2, r3
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c92c:	f7fb fa0f 	bl	8007d4e <HAL_DMA_Start_IT>
 800c930:	4603      	mov	r3, r0
 800c932:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800c934:	7dfb      	ldrb	r3, [r7, #23]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d132      	bne.n	800c9a0 <HAL_I2C_Slave_Transmit_DMA+0x164>
 800c93a:	e013      	b.n	800c964 <HAL_I2C_Slave_Transmit_DMA+0x128>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	2228      	movs	r2, #40	; 0x28
 800c940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	2200      	movs	r2, #0
 800c948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c950:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	2200      	movs	r2, #0
 800c95c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800c960:	2301      	movs	r3, #1
 800c962:	e032      	b.n	800c9ca <HAL_I2C_Slave_Transmit_DMA+0x18e>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	681a      	ldr	r2, [r3, #0]
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c972:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	2200      	movs	r2, #0
 800c978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	685a      	ldr	r2, [r3, #4]
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800c98a:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	685a      	ldr	r2, [r3, #4]
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c99a:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 800c99c:	2300      	movs	r3, #0
 800c99e:	e014      	b.n	800c9ca <HAL_I2C_Slave_Transmit_DMA+0x18e>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	2220      	movs	r2, #32
 800c9a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9b4:	f043 0210 	orr.w	r2, r3, #16
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	2200      	movs	r2, #0
 800c9c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c9c4:	2301      	movs	r3, #1
 800c9c6:	e000      	b.n	800c9ca <HAL_I2C_Slave_Transmit_DMA+0x18e>
    }
  }
  else
  {
    return HAL_BUSY;
 800c9c8:	2302      	movs	r3, #2
  }
}
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	3718      	adds	r7, #24
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}
 800c9d2:	bf00      	nop
 800c9d4:	ffff0000 	.word	0xffff0000
 800c9d8:	08010c81 	.word	0x08010c81
 800c9dc:	08010e2b 	.word	0x08010e2b

0800c9e0 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b086      	sub	sp, #24
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	60f8      	str	r0, [r7, #12]
 800c9e8:	60b9      	str	r1, [r7, #8]
 800c9ea:	4613      	mov	r3, r2
 800c9ec:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c9f4:	b2db      	uxtb	r3, r3
 800c9f6:	2b20      	cmp	r3, #32
 800c9f8:	f040 80b8 	bne.w	800cb6c <HAL_I2C_Slave_Receive_DMA+0x18c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d002      	beq.n	800ca08 <HAL_I2C_Slave_Receive_DMA+0x28>
 800ca02:	88fb      	ldrh	r3, [r7, #6]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d101      	bne.n	800ca0c <HAL_I2C_Slave_Receive_DMA+0x2c>
    {
      return  HAL_ERROR;
 800ca08:	2301      	movs	r3, #1
 800ca0a:	e0b0      	b.n	800cb6e <HAL_I2C_Slave_Receive_DMA+0x18e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca12:	2b01      	cmp	r3, #1
 800ca14:	d101      	bne.n	800ca1a <HAL_I2C_Slave_Receive_DMA+0x3a>
 800ca16:	2302      	movs	r3, #2
 800ca18:	e0a9      	b.n	800cb6e <HAL_I2C_Slave_Receive_DMA+0x18e>
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	2201      	movs	r2, #1
 800ca1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	f003 0301 	and.w	r3, r3, #1
 800ca2c:	2b01      	cmp	r3, #1
 800ca2e:	d007      	beq.n	800ca40 <HAL_I2C_Slave_Receive_DMA+0x60>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	681a      	ldr	r2, [r3, #0]
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	f042 0201 	orr.w	r2, r2, #1
 800ca3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	681a      	ldr	r2, [r3, #0]
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ca4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	2222      	movs	r2, #34	; 0x22
 800ca54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	2220      	movs	r2, #32
 800ca5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	2200      	movs	r2, #0
 800ca64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	68ba      	ldr	r2, [r7, #8]
 800ca6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	88fa      	ldrh	r2, [r7, #6]
 800ca70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca76:	b29a      	uxth	r2, r3
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	4a3e      	ldr	r2, [pc, #248]	; (800cb78 <HAL_I2C_Slave_Receive_DMA+0x198>)
 800ca80:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmarx != NULL)
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d02a      	beq.n	800cae0 <HAL_I2C_Slave_Receive_DMA+0x100>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca8e:	4a3b      	ldr	r2, [pc, #236]	; (800cb7c <HAL_I2C_Slave_Receive_DMA+0x19c>)
 800ca90:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca96:	4a3a      	ldr	r2, [pc, #232]	; (800cb80 <HAL_I2C_Slave_Receive_DMA+0x1a0>)
 800ca98:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca9e:	2200      	movs	r2, #0
 800caa0:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caa6:	2200      	movs	r2, #0
 800caa8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caae:	2200      	movs	r2, #0
 800cab0:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cab6:	2200      	movs	r2, #0
 800cab8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	3310      	adds	r3, #16
 800cac4:	4619      	mov	r1, r3
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caca:	461a      	mov	r2, r3
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cad0:	f7fb f93d 	bl	8007d4e <HAL_DMA_Start_IT>
 800cad4:	4603      	mov	r3, r0
 800cad6:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800cad8:	7dfb      	ldrb	r3, [r7, #23]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d132      	bne.n	800cb44 <HAL_I2C_Slave_Receive_DMA+0x164>
 800cade:	e013      	b.n	800cb08 <HAL_I2C_Slave_Receive_DMA+0x128>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	2228      	movs	r2, #40	; 0x28
 800cae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	2200      	movs	r2, #0
 800caec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caf4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	2200      	movs	r2, #0
 800cb00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800cb04:	2301      	movs	r3, #1
 800cb06:	e032      	b.n	800cb6e <HAL_I2C_Slave_Receive_DMA+0x18e>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	681a      	ldr	r2, [r3, #0]
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cb16:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	685a      	ldr	r2, [r3, #4]
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800cb2e:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	685a      	ldr	r2, [r3, #4]
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cb3e:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 800cb40:	2300      	movs	r3, #0
 800cb42:	e014      	b.n	800cb6e <HAL_I2C_Slave_Receive_DMA+0x18e>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	2220      	movs	r2, #32
 800cb48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	2200      	movs	r2, #0
 800cb50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb58:	f043 0210 	orr.w	r2, r3, #16
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	2200      	movs	r2, #0
 800cb64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800cb68:	2301      	movs	r3, #1
 800cb6a:	e000      	b.n	800cb6e <HAL_I2C_Slave_Receive_DMA+0x18e>
    }
  }
  else
  {
    return HAL_BUSY;
 800cb6c:	2302      	movs	r3, #2
  }
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	3718      	adds	r7, #24
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}
 800cb76:	bf00      	nop
 800cb78:	ffff0000 	.word	0xffff0000
 800cb7c:	08010c81 	.word	0x08010c81
 800cb80:	08010e2b 	.word	0x08010e2b

0800cb84 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b088      	sub	sp, #32
 800cb88:	af02      	add	r7, sp, #8
 800cb8a:	60f8      	str	r0, [r7, #12]
 800cb8c:	4608      	mov	r0, r1
 800cb8e:	4611      	mov	r1, r2
 800cb90:	461a      	mov	r2, r3
 800cb92:	4603      	mov	r3, r0
 800cb94:	817b      	strh	r3, [r7, #10]
 800cb96:	460b      	mov	r3, r1
 800cb98:	813b      	strh	r3, [r7, #8]
 800cb9a:	4613      	mov	r3, r2
 800cb9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800cb9e:	f7f9 fe6d 	bl	800687c <HAL_GetTick>
 800cba2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cbaa:	b2db      	uxtb	r3, r3
 800cbac:	2b20      	cmp	r3, #32
 800cbae:	f040 80d9 	bne.w	800cd64 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800cbb2:	697b      	ldr	r3, [r7, #20]
 800cbb4:	9300      	str	r3, [sp, #0]
 800cbb6:	2319      	movs	r3, #25
 800cbb8:	2201      	movs	r2, #1
 800cbba:	496d      	ldr	r1, [pc, #436]	; (800cd70 <HAL_I2C_Mem_Write+0x1ec>)
 800cbbc:	68f8      	ldr	r0, [r7, #12]
 800cbbe:	f004 fa19 	bl	8010ff4 <I2C_WaitOnFlagUntilTimeout>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d001      	beq.n	800cbcc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800cbc8:	2302      	movs	r3, #2
 800cbca:	e0cc      	b.n	800cd66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cbd2:	2b01      	cmp	r3, #1
 800cbd4:	d101      	bne.n	800cbda <HAL_I2C_Mem_Write+0x56>
 800cbd6:	2302      	movs	r3, #2
 800cbd8:	e0c5      	b.n	800cd66 <HAL_I2C_Mem_Write+0x1e2>
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	2201      	movs	r2, #1
 800cbde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	f003 0301 	and.w	r3, r3, #1
 800cbec:	2b01      	cmp	r3, #1
 800cbee:	d007      	beq.n	800cc00 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	681a      	ldr	r2, [r3, #0]
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	f042 0201 	orr.w	r2, r2, #1
 800cbfe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	681a      	ldr	r2, [r3, #0]
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cc0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	2221      	movs	r2, #33	; 0x21
 800cc14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	2240      	movs	r2, #64	; 0x40
 800cc1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	2200      	movs	r2, #0
 800cc24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	6a3a      	ldr	r2, [r7, #32]
 800cc2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cc30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc36:	b29a      	uxth	r2, r3
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	4a4d      	ldr	r2, [pc, #308]	; (800cd74 <HAL_I2C_Mem_Write+0x1f0>)
 800cc40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800cc42:	88f8      	ldrh	r0, [r7, #6]
 800cc44:	893a      	ldrh	r2, [r7, #8]
 800cc46:	8979      	ldrh	r1, [r7, #10]
 800cc48:	697b      	ldr	r3, [r7, #20]
 800cc4a:	9301      	str	r3, [sp, #4]
 800cc4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc4e:	9300      	str	r3, [sp, #0]
 800cc50:	4603      	mov	r3, r0
 800cc52:	68f8      	ldr	r0, [r7, #12]
 800cc54:	f003 fe96 	bl	8010984 <I2C_RequestMemoryWrite>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d052      	beq.n	800cd04 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800cc5e:	2301      	movs	r3, #1
 800cc60:	e081      	b.n	800cd66 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cc62:	697a      	ldr	r2, [r7, #20]
 800cc64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cc66:	68f8      	ldr	r0, [r7, #12]
 800cc68:	f004 fa9a 	bl	80111a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d00d      	beq.n	800cc8e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc76:	2b04      	cmp	r3, #4
 800cc78:	d107      	bne.n	800cc8a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	681a      	ldr	r2, [r3, #0]
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cc88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	e06b      	b.n	800cd66 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc92:	781a      	ldrb	r2, [r3, #0]
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc9e:	1c5a      	adds	r2, r3, #1
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cca8:	3b01      	subs	r3, #1
 800ccaa:	b29a      	uxth	r2, r3
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ccb4:	b29b      	uxth	r3, r3
 800ccb6:	3b01      	subs	r3, #1
 800ccb8:	b29a      	uxth	r2, r3
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	695b      	ldr	r3, [r3, #20]
 800ccc4:	f003 0304 	and.w	r3, r3, #4
 800ccc8:	2b04      	cmp	r3, #4
 800ccca:	d11b      	bne.n	800cd04 <HAL_I2C_Mem_Write+0x180>
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d017      	beq.n	800cd04 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccd8:	781a      	ldrb	r2, [r3, #0]
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cce4:	1c5a      	adds	r2, r3, #1
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccee:	3b01      	subs	r3, #1
 800ccf0:	b29a      	uxth	r2, r3
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ccfa:	b29b      	uxth	r3, r3
 800ccfc:	3b01      	subs	r3, #1
 800ccfe:	b29a      	uxth	r2, r3
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d1aa      	bne.n	800cc62 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cd0c:	697a      	ldr	r2, [r7, #20]
 800cd0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cd10:	68f8      	ldr	r0, [r7, #12]
 800cd12:	f004 fa86 	bl	8011222 <I2C_WaitOnBTFFlagUntilTimeout>
 800cd16:	4603      	mov	r3, r0
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d00d      	beq.n	800cd38 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd20:	2b04      	cmp	r3, #4
 800cd22:	d107      	bne.n	800cd34 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	681a      	ldr	r2, [r3, #0]
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cd32:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800cd34:	2301      	movs	r3, #1
 800cd36:	e016      	b.n	800cd66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	681a      	ldr	r2, [r3, #0]
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cd46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	2220      	movs	r2, #32
 800cd4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	2200      	movs	r2, #0
 800cd54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800cd60:	2300      	movs	r3, #0
 800cd62:	e000      	b.n	800cd66 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800cd64:	2302      	movs	r3, #2
  }
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	3718      	adds	r7, #24
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}
 800cd6e:	bf00      	nop
 800cd70:	00100002 	.word	0x00100002
 800cd74:	ffff0000 	.word	0xffff0000

0800cd78 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b08c      	sub	sp, #48	; 0x30
 800cd7c:	af02      	add	r7, sp, #8
 800cd7e:	60f8      	str	r0, [r7, #12]
 800cd80:	4608      	mov	r0, r1
 800cd82:	4611      	mov	r1, r2
 800cd84:	461a      	mov	r2, r3
 800cd86:	4603      	mov	r3, r0
 800cd88:	817b      	strh	r3, [r7, #10]
 800cd8a:	460b      	mov	r3, r1
 800cd8c:	813b      	strh	r3, [r7, #8]
 800cd8e:	4613      	mov	r3, r2
 800cd90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800cd92:	f7f9 fd73 	bl	800687c <HAL_GetTick>
 800cd96:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd9e:	b2db      	uxtb	r3, r3
 800cda0:	2b20      	cmp	r3, #32
 800cda2:	f040 8208 	bne.w	800d1b6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800cda6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda8:	9300      	str	r3, [sp, #0]
 800cdaa:	2319      	movs	r3, #25
 800cdac:	2201      	movs	r2, #1
 800cdae:	497b      	ldr	r1, [pc, #492]	; (800cf9c <HAL_I2C_Mem_Read+0x224>)
 800cdb0:	68f8      	ldr	r0, [r7, #12]
 800cdb2:	f004 f91f 	bl	8010ff4 <I2C_WaitOnFlagUntilTimeout>
 800cdb6:	4603      	mov	r3, r0
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d001      	beq.n	800cdc0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800cdbc:	2302      	movs	r3, #2
 800cdbe:	e1fb      	b.n	800d1b8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cdc6:	2b01      	cmp	r3, #1
 800cdc8:	d101      	bne.n	800cdce <HAL_I2C_Mem_Read+0x56>
 800cdca:	2302      	movs	r3, #2
 800cdcc:	e1f4      	b.n	800d1b8 <HAL_I2C_Mem_Read+0x440>
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	2201      	movs	r2, #1
 800cdd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	f003 0301 	and.w	r3, r3, #1
 800cde0:	2b01      	cmp	r3, #1
 800cde2:	d007      	beq.n	800cdf4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	681a      	ldr	r2, [r3, #0]
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	f042 0201 	orr.w	r2, r2, #1
 800cdf2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	681a      	ldr	r2, [r3, #0]
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ce02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	2222      	movs	r2, #34	; 0x22
 800ce08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	2240      	movs	r2, #64	; 0x40
 800ce10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	2200      	movs	r2, #0
 800ce18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800ce24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce2a:	b29a      	uxth	r2, r3
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	4a5b      	ldr	r2, [pc, #364]	; (800cfa0 <HAL_I2C_Mem_Read+0x228>)
 800ce34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ce36:	88f8      	ldrh	r0, [r7, #6]
 800ce38:	893a      	ldrh	r2, [r7, #8]
 800ce3a:	8979      	ldrh	r1, [r7, #10]
 800ce3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce3e:	9301      	str	r3, [sp, #4]
 800ce40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce42:	9300      	str	r3, [sp, #0]
 800ce44:	4603      	mov	r3, r0
 800ce46:	68f8      	ldr	r0, [r7, #12]
 800ce48:	f003 fe32 	bl	8010ab0 <I2C_RequestMemoryRead>
 800ce4c:	4603      	mov	r3, r0
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d001      	beq.n	800ce56 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800ce52:	2301      	movs	r3, #1
 800ce54:	e1b0      	b.n	800d1b8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d113      	bne.n	800ce86 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ce5e:	2300      	movs	r3, #0
 800ce60:	617b      	str	r3, [r7, #20]
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	695b      	ldr	r3, [r3, #20]
 800ce68:	617b      	str	r3, [r7, #20]
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	699b      	ldr	r3, [r3, #24]
 800ce70:	617b      	str	r3, [r7, #20]
 800ce72:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	681a      	ldr	r2, [r3, #0]
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ce82:	601a      	str	r2, [r3, #0]
 800ce84:	e184      	b.n	800d190 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce8a:	2b01      	cmp	r3, #1
 800ce8c:	d11b      	bne.n	800cec6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	681a      	ldr	r2, [r3, #0]
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ce9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ce9e:	2300      	movs	r3, #0
 800cea0:	61bb      	str	r3, [r7, #24]
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	695b      	ldr	r3, [r3, #20]
 800cea8:	61bb      	str	r3, [r7, #24]
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	699b      	ldr	r3, [r3, #24]
 800ceb0:	61bb      	str	r3, [r7, #24]
 800ceb2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	681a      	ldr	r2, [r3, #0]
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cec2:	601a      	str	r2, [r3, #0]
 800cec4:	e164      	b.n	800d190 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ceca:	2b02      	cmp	r3, #2
 800cecc:	d11b      	bne.n	800cf06 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	681a      	ldr	r2, [r3, #0]
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cedc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	681a      	ldr	r2, [r3, #0]
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ceec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ceee:	2300      	movs	r3, #0
 800cef0:	61fb      	str	r3, [r7, #28]
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	695b      	ldr	r3, [r3, #20]
 800cef8:	61fb      	str	r3, [r7, #28]
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	699b      	ldr	r3, [r3, #24]
 800cf00:	61fb      	str	r3, [r7, #28]
 800cf02:	69fb      	ldr	r3, [r7, #28]
 800cf04:	e144      	b.n	800d190 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cf06:	2300      	movs	r3, #0
 800cf08:	623b      	str	r3, [r7, #32]
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	695b      	ldr	r3, [r3, #20]
 800cf10:	623b      	str	r3, [r7, #32]
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	699b      	ldr	r3, [r3, #24]
 800cf18:	623b      	str	r3, [r7, #32]
 800cf1a:	6a3b      	ldr	r3, [r7, #32]
    }

    while (hi2c->XferSize > 0U)
 800cf1c:	e138      	b.n	800d190 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf22:	2b03      	cmp	r3, #3
 800cf24:	f200 80f1 	bhi.w	800d10a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf2c:	2b01      	cmp	r3, #1
 800cf2e:	d123      	bne.n	800cf78 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cf30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cf34:	68f8      	ldr	r0, [r7, #12]
 800cf36:	f004 fa25 	bl	8011384 <I2C_WaitOnRXNEFlagUntilTimeout>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d001      	beq.n	800cf44 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800cf40:	2301      	movs	r3, #1
 800cf42:	e139      	b.n	800d1b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	691a      	ldr	r2, [r3, #16]
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf4e:	b2d2      	uxtb	r2, r2
 800cf50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf56:	1c5a      	adds	r2, r3, #1
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf60:	3b01      	subs	r3, #1
 800cf62:	b29a      	uxth	r2, r3
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf6c:	b29b      	uxth	r3, r3
 800cf6e:	3b01      	subs	r3, #1
 800cf70:	b29a      	uxth	r2, r3
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cf76:	e10b      	b.n	800d190 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf7c:	2b02      	cmp	r3, #2
 800cf7e:	d14e      	bne.n	800d01e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800cf80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf82:	9300      	str	r3, [sp, #0]
 800cf84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf86:	2200      	movs	r2, #0
 800cf88:	4906      	ldr	r1, [pc, #24]	; (800cfa4 <HAL_I2C_Mem_Read+0x22c>)
 800cf8a:	68f8      	ldr	r0, [r7, #12]
 800cf8c:	f004 f832 	bl	8010ff4 <I2C_WaitOnFlagUntilTimeout>
 800cf90:	4603      	mov	r3, r0
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d008      	beq.n	800cfa8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800cf96:	2301      	movs	r3, #1
 800cf98:	e10e      	b.n	800d1b8 <HAL_I2C_Mem_Read+0x440>
 800cf9a:	bf00      	nop
 800cf9c:	00100002 	.word	0x00100002
 800cfa0:	ffff0000 	.word	0xffff0000
 800cfa4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	681a      	ldr	r2, [r3, #0]
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cfb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	691a      	ldr	r2, [r3, #16]
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfc2:	b2d2      	uxtb	r2, r2
 800cfc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfca:	1c5a      	adds	r2, r3, #1
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cfd4:	3b01      	subs	r3, #1
 800cfd6:	b29a      	uxth	r2, r3
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cfe0:	b29b      	uxth	r3, r3
 800cfe2:	3b01      	subs	r3, #1
 800cfe4:	b29a      	uxth	r2, r3
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	691a      	ldr	r2, [r3, #16]
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cff4:	b2d2      	uxtb	r2, r2
 800cff6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cffc:	1c5a      	adds	r2, r3, #1
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d006:	3b01      	subs	r3, #1
 800d008:	b29a      	uxth	r2, r3
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d012:	b29b      	uxth	r3, r3
 800d014:	3b01      	subs	r3, #1
 800d016:	b29a      	uxth	r2, r3
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d01c:	e0b8      	b.n	800d190 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d020:	9300      	str	r3, [sp, #0]
 800d022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d024:	2200      	movs	r2, #0
 800d026:	4966      	ldr	r1, [pc, #408]	; (800d1c0 <HAL_I2C_Mem_Read+0x448>)
 800d028:	68f8      	ldr	r0, [r7, #12]
 800d02a:	f003 ffe3 	bl	8010ff4 <I2C_WaitOnFlagUntilTimeout>
 800d02e:	4603      	mov	r3, r0
 800d030:	2b00      	cmp	r3, #0
 800d032:	d001      	beq.n	800d038 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800d034:	2301      	movs	r3, #1
 800d036:	e0bf      	b.n	800d1b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	681a      	ldr	r2, [r3, #0]
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d046:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	691a      	ldr	r2, [r3, #16]
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d052:	b2d2      	uxtb	r2, r2
 800d054:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d05a:	1c5a      	adds	r2, r3, #1
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d064:	3b01      	subs	r3, #1
 800d066:	b29a      	uxth	r2, r3
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d070:	b29b      	uxth	r3, r3
 800d072:	3b01      	subs	r3, #1
 800d074:	b29a      	uxth	r2, r3
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d07c:	9300      	str	r3, [sp, #0]
 800d07e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d080:	2200      	movs	r2, #0
 800d082:	494f      	ldr	r1, [pc, #316]	; (800d1c0 <HAL_I2C_Mem_Read+0x448>)
 800d084:	68f8      	ldr	r0, [r7, #12]
 800d086:	f003 ffb5 	bl	8010ff4 <I2C_WaitOnFlagUntilTimeout>
 800d08a:	4603      	mov	r3, r0
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d001      	beq.n	800d094 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800d090:	2301      	movs	r3, #1
 800d092:	e091      	b.n	800d1b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	681a      	ldr	r2, [r3, #0]
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d0a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	691a      	ldr	r2, [r3, #16]
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0ae:	b2d2      	uxtb	r2, r2
 800d0b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0b6:	1c5a      	adds	r2, r3, #1
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d0c0:	3b01      	subs	r3, #1
 800d0c2:	b29a      	uxth	r2, r3
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0cc:	b29b      	uxth	r3, r3
 800d0ce:	3b01      	subs	r3, #1
 800d0d0:	b29a      	uxth	r2, r3
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	691a      	ldr	r2, [r3, #16]
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0e0:	b2d2      	uxtb	r2, r2
 800d0e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0e8:	1c5a      	adds	r2, r3, #1
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d0f2:	3b01      	subs	r3, #1
 800d0f4:	b29a      	uxth	r2, r3
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0fe:	b29b      	uxth	r3, r3
 800d100:	3b01      	subs	r3, #1
 800d102:	b29a      	uxth	r2, r3
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d108:	e042      	b.n	800d190 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d10a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d10c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d10e:	68f8      	ldr	r0, [r7, #12]
 800d110:	f004 f938 	bl	8011384 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d114:	4603      	mov	r3, r0
 800d116:	2b00      	cmp	r3, #0
 800d118:	d001      	beq.n	800d11e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800d11a:	2301      	movs	r3, #1
 800d11c:	e04c      	b.n	800d1b8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	691a      	ldr	r2, [r3, #16]
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d128:	b2d2      	uxtb	r2, r2
 800d12a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d130:	1c5a      	adds	r2, r3, #1
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d13a:	3b01      	subs	r3, #1
 800d13c:	b29a      	uxth	r2, r3
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d146:	b29b      	uxth	r3, r3
 800d148:	3b01      	subs	r3, #1
 800d14a:	b29a      	uxth	r2, r3
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	695b      	ldr	r3, [r3, #20]
 800d156:	f003 0304 	and.w	r3, r3, #4
 800d15a:	2b04      	cmp	r3, #4
 800d15c:	d118      	bne.n	800d190 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	691a      	ldr	r2, [r3, #16]
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d168:	b2d2      	uxtb	r2, r2
 800d16a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d170:	1c5a      	adds	r2, r3, #1
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d17a:	3b01      	subs	r3, #1
 800d17c:	b29a      	uxth	r2, r3
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d186:	b29b      	uxth	r3, r3
 800d188:	3b01      	subs	r3, #1
 800d18a:	b29a      	uxth	r2, r3
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d194:	2b00      	cmp	r3, #0
 800d196:	f47f aec2 	bne.w	800cf1e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	2220      	movs	r2, #32
 800d19e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	e000      	b.n	800d1b8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800d1b6:	2302      	movs	r3, #2
  }
}
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	3728      	adds	r7, #40	; 0x28
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bd80      	pop	{r7, pc}
 800d1c0:	00010004 	.word	0x00010004

0800d1c4 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800d1c4:	b480      	push	{r7}
 800d1c6:	b087      	sub	sp, #28
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	60f8      	str	r0, [r7, #12]
 800d1cc:	4608      	mov	r0, r1
 800d1ce:	4611      	mov	r1, r2
 800d1d0:	461a      	mov	r2, r3
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	817b      	strh	r3, [r7, #10]
 800d1d6:	460b      	mov	r3, r1
 800d1d8:	813b      	strh	r3, [r7, #8]
 800d1da:	4613      	mov	r3, r2
 800d1dc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d1e8:	b2db      	uxtb	r3, r3
 800d1ea:	2b20      	cmp	r3, #32
 800d1ec:	f040 808e 	bne.w	800d30c <HAL_I2C_Mem_Write_IT+0x148>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800d1f0:	4b4a      	ldr	r3, [pc, #296]	; (800d31c <HAL_I2C_Mem_Write_IT+0x158>)
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	08db      	lsrs	r3, r3, #3
 800d1f6:	4a4a      	ldr	r2, [pc, #296]	; (800d320 <HAL_I2C_Mem_Write_IT+0x15c>)
 800d1f8:	fba2 2303 	umull	r2, r3, r2, r3
 800d1fc:	0a1a      	lsrs	r2, r3, #8
 800d1fe:	4613      	mov	r3, r2
 800d200:	009b      	lsls	r3, r3, #2
 800d202:	4413      	add	r3, r2
 800d204:	009a      	lsls	r2, r3, #2
 800d206:	4413      	add	r3, r2
 800d208:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800d20a:	697b      	ldr	r3, [r7, #20]
 800d20c:	3b01      	subs	r3, #1
 800d20e:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800d210:	697b      	ldr	r3, [r7, #20]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d116      	bne.n	800d244 <HAL_I2C_Mem_Write_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	2200      	movs	r2, #0
 800d21a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	2220      	movs	r2, #32
 800d220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	2200      	movs	r2, #0
 800d228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d230:	f043 0220 	orr.w	r2, r3, #32
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	2200      	movs	r2, #0
 800d23c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d240:	2301      	movs	r3, #1
 800d242:	e064      	b.n	800d30e <HAL_I2C_Mem_Write_IT+0x14a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	699b      	ldr	r3, [r3, #24]
 800d24a:	f003 0302 	and.w	r3, r3, #2
 800d24e:	2b02      	cmp	r3, #2
 800d250:	d0db      	beq.n	800d20a <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d258:	2b01      	cmp	r3, #1
 800d25a:	d101      	bne.n	800d260 <HAL_I2C_Mem_Write_IT+0x9c>
 800d25c:	2302      	movs	r3, #2
 800d25e:	e056      	b.n	800d30e <HAL_I2C_Mem_Write_IT+0x14a>
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	2201      	movs	r2, #1
 800d264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	f003 0301 	and.w	r3, r3, #1
 800d272:	2b01      	cmp	r3, #1
 800d274:	d007      	beq.n	800d286 <HAL_I2C_Mem_Write_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	681a      	ldr	r2, [r3, #0]
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	f042 0201 	orr.w	r2, r2, #1
 800d284:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	681a      	ldr	r2, [r3, #0]
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d294:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	2221      	movs	r2, #33	; 0x21
 800d29a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	2240      	movs	r2, #64	; 0x40
 800d2a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	6a3a      	ldr	r2, [r7, #32]
 800d2b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d2b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2bc:	b29a      	uxth	r2, r3
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	4a17      	ldr	r2, [pc, #92]	; (800d324 <HAL_I2C_Mem_Write_IT+0x160>)
 800d2c6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800d2c8:	897a      	ldrh	r2, [r7, #10]
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800d2ce:	893a      	ldrh	r2, [r7, #8]
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800d2d4:	88fa      	ldrh	r2, [r7, #6]
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	2200      	movs	r2, #0
 800d2de:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	681a      	ldr	r2, [r3, #0]
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d2ee:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	685a      	ldr	r2, [r3, #4]
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800d306:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800d308:	2300      	movs	r3, #0
 800d30a:	e000      	b.n	800d30e <HAL_I2C_Mem_Write_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800d30c:	2302      	movs	r3, #2
  }
}
 800d30e:	4618      	mov	r0, r3
 800d310:	371c      	adds	r7, #28
 800d312:	46bd      	mov	sp, r7
 800d314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d318:	4770      	bx	lr
 800d31a:	bf00      	nop
 800d31c:	20000058 	.word	0x20000058
 800d320:	14f8b589 	.word	0x14f8b589
 800d324:	ffff0000 	.word	0xffff0000

0800d328 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800d328:	b480      	push	{r7}
 800d32a:	b087      	sub	sp, #28
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	60f8      	str	r0, [r7, #12]
 800d330:	4608      	mov	r0, r1
 800d332:	4611      	mov	r1, r2
 800d334:	461a      	mov	r2, r3
 800d336:	4603      	mov	r3, r0
 800d338:	817b      	strh	r3, [r7, #10]
 800d33a:	460b      	mov	r3, r1
 800d33c:	813b      	strh	r3, [r7, #8]
 800d33e:	4613      	mov	r3, r2
 800d340:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800d342:	2300      	movs	r3, #0
 800d344:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d34c:	b2db      	uxtb	r3, r3
 800d34e:	2b20      	cmp	r3, #32
 800d350:	f040 809a 	bne.w	800d488 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800d354:	4b50      	ldr	r3, [pc, #320]	; (800d498 <HAL_I2C_Mem_Read_IT+0x170>)
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	08db      	lsrs	r3, r3, #3
 800d35a:	4a50      	ldr	r2, [pc, #320]	; (800d49c <HAL_I2C_Mem_Read_IT+0x174>)
 800d35c:	fba2 2303 	umull	r2, r3, r2, r3
 800d360:	0a1a      	lsrs	r2, r3, #8
 800d362:	4613      	mov	r3, r2
 800d364:	009b      	lsls	r3, r3, #2
 800d366:	4413      	add	r3, r2
 800d368:	009a      	lsls	r2, r3, #2
 800d36a:	4413      	add	r3, r2
 800d36c:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800d36e:	697b      	ldr	r3, [r7, #20]
 800d370:	3b01      	subs	r3, #1
 800d372:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800d374:	697b      	ldr	r3, [r7, #20]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d116      	bne.n	800d3a8 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	2200      	movs	r2, #0
 800d37e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	2220      	movs	r2, #32
 800d384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	2200      	movs	r2, #0
 800d38c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d394:	f043 0220 	orr.w	r2, r3, #32
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	2200      	movs	r2, #0
 800d3a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d3a4:	2301      	movs	r3, #1
 800d3a6:	e070      	b.n	800d48a <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	699b      	ldr	r3, [r3, #24]
 800d3ae:	f003 0302 	and.w	r3, r3, #2
 800d3b2:	2b02      	cmp	r3, #2
 800d3b4:	d0db      	beq.n	800d36e <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d3bc:	2b01      	cmp	r3, #1
 800d3be:	d101      	bne.n	800d3c4 <HAL_I2C_Mem_Read_IT+0x9c>
 800d3c0:	2302      	movs	r3, #2
 800d3c2:	e062      	b.n	800d48a <HAL_I2C_Mem_Read_IT+0x162>
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	2201      	movs	r2, #1
 800d3c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	f003 0301 	and.w	r3, r3, #1
 800d3d6:	2b01      	cmp	r3, #1
 800d3d8:	d007      	beq.n	800d3ea <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	681a      	ldr	r2, [r3, #0]
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	f042 0201 	orr.w	r2, r2, #1
 800d3e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	681a      	ldr	r2, [r3, #0]
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d3f8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	2222      	movs	r2, #34	; 0x22
 800d3fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	2240      	movs	r2, #64	; 0x40
 800d406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	2200      	movs	r2, #0
 800d40e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	6a3a      	ldr	r2, [r7, #32]
 800d414:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d41a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d420:	b29a      	uxth	r2, r3
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	4a1d      	ldr	r2, [pc, #116]	; (800d4a0 <HAL_I2C_Mem_Read_IT+0x178>)
 800d42a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800d42c:	897a      	ldrh	r2, [r7, #10]
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800d432:	893a      	ldrh	r2, [r7, #8]
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800d438:	88fa      	ldrh	r2, [r7, #6]
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	2200      	movs	r2, #0
 800d442:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	681a      	ldr	r2, [r3, #0]
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d452:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	681a      	ldr	r2, [r3, #0]
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d462:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	2200      	movs	r2, #0
 800d468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d470:	2b00      	cmp	r3, #0
 800d472:	d007      	beq.n	800d484 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	685a      	ldr	r2, [r3, #4]
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800d482:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 800d484:	2300      	movs	r3, #0
 800d486:	e000      	b.n	800d48a <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 800d488:	2302      	movs	r3, #2
  }
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	371c      	adds	r7, #28
 800d48e:	46bd      	mov	sp, r7
 800d490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d494:	4770      	bx	lr
 800d496:	bf00      	nop
 800d498:	20000058 	.word	0x20000058
 800d49c:	14f8b589 	.word	0x14f8b589
 800d4a0:	ffff0000 	.word	0xffff0000

0800d4a4 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b08a      	sub	sp, #40	; 0x28
 800d4a8:	af02      	add	r7, sp, #8
 800d4aa:	60f8      	str	r0, [r7, #12]
 800d4ac:	4608      	mov	r0, r1
 800d4ae:	4611      	mov	r1, r2
 800d4b0:	461a      	mov	r2, r3
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	817b      	strh	r3, [r7, #10]
 800d4b6:	460b      	mov	r3, r1
 800d4b8:	813b      	strh	r3, [r7, #8]
 800d4ba:	4613      	mov	r3, r2
 800d4bc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800d4be:	2300      	movs	r3, #0
 800d4c0:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d4c2:	f7f9 f9db 	bl	800687c <HAL_GetTick>
 800d4c6:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d4ce:	b2db      	uxtb	r3, r3
 800d4d0:	2b20      	cmp	r3, #32
 800d4d2:	f040 8145 	bne.w	800d760 <HAL_I2C_Mem_Write_DMA+0x2bc>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800d4d6:	4b9d      	ldr	r3, [pc, #628]	; (800d74c <HAL_I2C_Mem_Write_DMA+0x2a8>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	08db      	lsrs	r3, r3, #3
 800d4dc:	4a9c      	ldr	r2, [pc, #624]	; (800d750 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 800d4de:	fba2 2303 	umull	r2, r3, r2, r3
 800d4e2:	0a1a      	lsrs	r2, r3, #8
 800d4e4:	4613      	mov	r3, r2
 800d4e6:	009b      	lsls	r3, r3, #2
 800d4e8:	4413      	add	r3, r2
 800d4ea:	009a      	lsls	r2, r3, #2
 800d4ec:	4413      	add	r3, r2
 800d4ee:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800d4f0:	697b      	ldr	r3, [r7, #20]
 800d4f2:	3b01      	subs	r3, #1
 800d4f4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800d4f6:	697b      	ldr	r3, [r7, #20]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d116      	bne.n	800d52a <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	2200      	movs	r2, #0
 800d500:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	2220      	movs	r2, #32
 800d506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	2200      	movs	r2, #0
 800d50e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d516:	f043 0220 	orr.w	r2, r3, #32
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	2200      	movs	r2, #0
 800d522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d526:	2301      	movs	r3, #1
 800d528:	e11b      	b.n	800d762 <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	699b      	ldr	r3, [r3, #24]
 800d530:	f003 0302 	and.w	r3, r3, #2
 800d534:	2b02      	cmp	r3, #2
 800d536:	d0db      	beq.n	800d4f0 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d53e:	2b01      	cmp	r3, #1
 800d540:	d101      	bne.n	800d546 <HAL_I2C_Mem_Write_DMA+0xa2>
 800d542:	2302      	movs	r3, #2
 800d544:	e10d      	b.n	800d762 <HAL_I2C_Mem_Write_DMA+0x2be>
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	2201      	movs	r2, #1
 800d54a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	f003 0301 	and.w	r3, r3, #1
 800d558:	2b01      	cmp	r3, #1
 800d55a:	d007      	beq.n	800d56c <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	681a      	ldr	r2, [r3, #0]
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	f042 0201 	orr.w	r2, r2, #1
 800d56a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	681a      	ldr	r2, [r3, #0]
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d57a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	2221      	movs	r2, #33	; 0x21
 800d580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	2240      	movs	r2, #64	; 0x40
 800d588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	2200      	movs	r2, #0
 800d590:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d596:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800d59c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d5a2:	b29a      	uxth	r2, r3
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	4a6a      	ldr	r2, [pc, #424]	; (800d754 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 800d5ac:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800d5ae:	897a      	ldrh	r2, [r7, #10]
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800d5b4:	893a      	ldrh	r2, [r7, #8]
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800d5ba:	88fa      	ldrh	r2, [r7, #6]
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	f000 80a9 	beq.w	800d722 <HAL_I2C_Mem_Write_DMA+0x27e>
    {
      if (hi2c->hdmatx != NULL)
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d02a      	beq.n	800d62e <HAL_I2C_Mem_Write_DMA+0x18a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5dc:	4a5e      	ldr	r2, [pc, #376]	; (800d758 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 800d5de:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5e4:	4a5d      	ldr	r2, [pc, #372]	; (800d75c <HAL_I2C_Mem_Write_DMA+0x2b8>)
 800d5e6:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d604:	2200      	movs	r2, #0
 800d606:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d610:	4619      	mov	r1, r3
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	3310      	adds	r3, #16
 800d618:	461a      	mov	r2, r3
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d61e:	f7fa fb96 	bl	8007d4e <HAL_DMA_Start_IT>
 800d622:	4603      	mov	r3, r0
 800d624:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800d626:	7efb      	ldrb	r3, [r7, #27]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d166      	bne.n	800d6fa <HAL_I2C_Mem_Write_DMA+0x256>
 800d62c:	e013      	b.n	800d656 <HAL_I2C_Mem_Write_DMA+0x1b2>
        hi2c->State     = HAL_I2C_STATE_READY;
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	2220      	movs	r2, #32
 800d632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	2200      	movs	r2, #0
 800d63a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d642:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	2200      	movs	r2, #0
 800d64e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800d652:	2301      	movs	r3, #1
 800d654:	e085      	b.n	800d762 <HAL_I2C_Mem_Write_DMA+0x2be>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800d656:	88f8      	ldrh	r0, [r7, #6]
 800d658:	893a      	ldrh	r2, [r7, #8]
 800d65a:	8979      	ldrh	r1, [r7, #10]
 800d65c:	69fb      	ldr	r3, [r7, #28]
 800d65e:	9301      	str	r3, [sp, #4]
 800d660:	2323      	movs	r3, #35	; 0x23
 800d662:	9300      	str	r3, [sp, #0]
 800d664:	4603      	mov	r3, r0
 800d666:	68f8      	ldr	r0, [r7, #12]
 800d668:	f003 f98c 	bl	8010984 <I2C_RequestMemoryWrite>
 800d66c:	4603      	mov	r3, r0
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d022      	beq.n	800d6b8 <HAL_I2C_Mem_Write_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d676:	4618      	mov	r0, r3
 800d678:	f7fa fc31 	bl	8007ede <HAL_DMA_Abort_IT>
 800d67c:	4603      	mov	r3, r0
 800d67e:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d684:	2200      	movs	r2, #0
 800d686:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	681a      	ldr	r2, [r3, #0]
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d696:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	2200      	movs	r2, #0
 800d69c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	681a      	ldr	r2, [r3, #0]
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	f022 0201 	bic.w	r2, r2, #1
 800d6b2:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800d6b4:	2301      	movs	r3, #1
 800d6b6:	e054      	b.n	800d762 <HAL_I2C_Mem_Write_DMA+0x2be>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	613b      	str	r3, [r7, #16]
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	695b      	ldr	r3, [r3, #20]
 800d6c2:	613b      	str	r3, [r7, #16]
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	699b      	ldr	r3, [r3, #24]
 800d6ca:	613b      	str	r3, [r7, #16]
 800d6cc:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	685a      	ldr	r2, [r3, #4]
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d6e4:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	685a      	ldr	r2, [r3, #4]
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d6f4:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	e033      	b.n	800d762 <HAL_I2C_Mem_Write_DMA+0x2be>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	2220      	movs	r2, #32
 800d6fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	2200      	movs	r2, #0
 800d706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d70e:	f043 0210 	orr.w	r2, r3, #16
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	2200      	movs	r2, #0
 800d71a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d71e:	2301      	movs	r3, #1
 800d720:	e01f      	b.n	800d762 <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	2220      	movs	r2, #32
 800d726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	2200      	movs	r2, #0
 800d72e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d736:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	2200      	movs	r2, #0
 800d742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d746:	2301      	movs	r3, #1
 800d748:	e00b      	b.n	800d762 <HAL_I2C_Mem_Write_DMA+0x2be>
 800d74a:	bf00      	nop
 800d74c:	20000058 	.word	0x20000058
 800d750:	14f8b589 	.word	0x14f8b589
 800d754:	ffff0000 	.word	0xffff0000
 800d758:	08010c81 	.word	0x08010c81
 800d75c:	08010e2b 	.word	0x08010e2b
    }
  }
  else
  {
    return HAL_BUSY;
 800d760:	2302      	movs	r3, #2
  }
}
 800d762:	4618      	mov	r0, r3
 800d764:	3720      	adds	r7, #32
 800d766:	46bd      	mov	sp, r7
 800d768:	bd80      	pop	{r7, pc}

0800d76a <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800d76a:	b580      	push	{r7, lr}
 800d76c:	b08c      	sub	sp, #48	; 0x30
 800d76e:	af02      	add	r7, sp, #8
 800d770:	60f8      	str	r0, [r7, #12]
 800d772:	4608      	mov	r0, r1
 800d774:	4611      	mov	r1, r2
 800d776:	461a      	mov	r2, r3
 800d778:	4603      	mov	r3, r0
 800d77a:	817b      	strh	r3, [r7, #10]
 800d77c:	460b      	mov	r3, r1
 800d77e:	813b      	strh	r3, [r7, #8]
 800d780:	4613      	mov	r3, r2
 800d782:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d784:	f7f9 f87a 	bl	800687c <HAL_GetTick>
 800d788:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 800d78a:	2300      	movs	r3, #0
 800d78c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d794:	b2db      	uxtb	r3, r3
 800d796:	2b20      	cmp	r3, #32
 800d798:	f040 8175 	bne.w	800da86 <HAL_I2C_Mem_Read_DMA+0x31c>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800d79c:	4b94      	ldr	r3, [pc, #592]	; (800d9f0 <HAL_I2C_Mem_Read_DMA+0x286>)
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	08db      	lsrs	r3, r3, #3
 800d7a2:	4a94      	ldr	r2, [pc, #592]	; (800d9f4 <HAL_I2C_Mem_Read_DMA+0x28a>)
 800d7a4:	fba2 2303 	umull	r2, r3, r2, r3
 800d7a8:	0a1a      	lsrs	r2, r3, #8
 800d7aa:	4613      	mov	r3, r2
 800d7ac:	009b      	lsls	r3, r3, #2
 800d7ae:	4413      	add	r3, r2
 800d7b0:	009a      	lsls	r2, r3, #2
 800d7b2:	4413      	add	r3, r2
 800d7b4:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 800d7b6:	69fb      	ldr	r3, [r7, #28]
 800d7b8:	3b01      	subs	r3, #1
 800d7ba:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800d7bc:	69fb      	ldr	r3, [r7, #28]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d116      	bne.n	800d7f0 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	2220      	movs	r2, #32
 800d7cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7dc:	f043 0220 	orr.w	r2, r3, #32
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d7ec:	2301      	movs	r3, #1
 800d7ee:	e14b      	b.n	800da88 <HAL_I2C_Mem_Read_DMA+0x31e>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	699b      	ldr	r3, [r3, #24]
 800d7f6:	f003 0302 	and.w	r3, r3, #2
 800d7fa:	2b02      	cmp	r3, #2
 800d7fc:	d0db      	beq.n	800d7b6 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d804:	2b01      	cmp	r3, #1
 800d806:	d101      	bne.n	800d80c <HAL_I2C_Mem_Read_DMA+0xa2>
 800d808:	2302      	movs	r3, #2
 800d80a:	e13d      	b.n	800da88 <HAL_I2C_Mem_Read_DMA+0x31e>
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	2201      	movs	r2, #1
 800d810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	f003 0301 	and.w	r3, r3, #1
 800d81e:	2b01      	cmp	r3, #1
 800d820:	d007      	beq.n	800d832 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	681a      	ldr	r2, [r3, #0]
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	f042 0201 	orr.w	r2, r2, #1
 800d830:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	681a      	ldr	r2, [r3, #0]
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d840:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	2222      	movs	r2, #34	; 0x22
 800d846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	2240      	movs	r2, #64	; 0x40
 800d84e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	2200      	movs	r2, #0
 800d856:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d85c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800d862:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d868:	b29a      	uxth	r2, r3
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	4a61      	ldr	r2, [pc, #388]	; (800d9f8 <HAL_I2C_Mem_Read_DMA+0x28e>)
 800d872:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800d874:	897a      	ldrh	r2, [r7, #10]
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800d87a:	893a      	ldrh	r2, [r7, #8]
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800d880:	88fa      	ldrh	r2, [r7, #6]
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	2200      	movs	r2, #0
 800d88a:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d890:	2b00      	cmp	r3, #0
 800d892:	f000 80cb 	beq.w	800da2c <HAL_I2C_Mem_Read_DMA+0x2c2>
    {
      if (hi2c->hdmarx != NULL)
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d02d      	beq.n	800d8fa <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8a2:	4a56      	ldr	r2, [pc, #344]	; (800d9fc <HAL_I2C_Mem_Read_DMA+0x292>)
 800d8a4:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8aa:	4a55      	ldr	r2, [pc, #340]	; (800da00 <HAL_I2C_Mem_Read_DMA+0x296>)
 800d8ac:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	3310      	adds	r3, #16
 800d8d8:	4619      	mov	r1, r3
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8de:	461a      	mov	r2, r3
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d8e4:	f7fa fa33 	bl	8007d4e <HAL_DMA_Start_IT>
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800d8ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	f040 8086 	bne.w	800da04 <HAL_I2C_Mem_Read_DMA+0x29a>
 800d8f8:	e013      	b.n	800d922 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	2220      	movs	r2, #32
 800d8fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	2200      	movs	r2, #0
 800d906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d90e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	2200      	movs	r2, #0
 800d91a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800d91e:	2301      	movs	r3, #1
 800d920:	e0b2      	b.n	800da88 <HAL_I2C_Mem_Read_DMA+0x31e>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800d922:	88f8      	ldrh	r0, [r7, #6]
 800d924:	893a      	ldrh	r2, [r7, #8]
 800d926:	8979      	ldrh	r1, [r7, #10]
 800d928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d92a:	9301      	str	r3, [sp, #4]
 800d92c:	2323      	movs	r3, #35	; 0x23
 800d92e:	9300      	str	r3, [sp, #0]
 800d930:	4603      	mov	r3, r0
 800d932:	68f8      	ldr	r0, [r7, #12]
 800d934:	f003 f8bc 	bl	8010ab0 <I2C_RequestMemoryRead>
 800d938:	4603      	mov	r3, r0
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d023      	beq.n	800d986 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d942:	4618      	mov	r0, r3
 800d944:	f7fa facb 	bl	8007ede <HAL_DMA_Abort_IT>
 800d948:	4603      	mov	r3, r0
 800d94a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d952:	2200      	movs	r2, #0
 800d954:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	681a      	ldr	r2, [r3, #0]
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d964:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	2200      	movs	r2, #0
 800d96a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	2200      	movs	r2, #0
 800d970:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	681a      	ldr	r2, [r3, #0]
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	f022 0201 	bic.w	r2, r2, #1
 800d980:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800d982:	2301      	movs	r3, #1
 800d984:	e080      	b.n	800da88 <HAL_I2C_Mem_Read_DMA+0x31e>
        }

        if (hi2c->XferSize == 1U)
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d98a:	2b01      	cmp	r3, #1
 800d98c:	d108      	bne.n	800d9a0 <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	681a      	ldr	r2, [r3, #0]
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d99c:	601a      	str	r2, [r3, #0]
 800d99e:	e007      	b.n	800d9b0 <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	685a      	ldr	r2, [r3, #4]
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d9ae:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	617b      	str	r3, [r7, #20]
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	695b      	ldr	r3, [r3, #20]
 800d9ba:	617b      	str	r3, [r7, #20]
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	699b      	ldr	r3, [r3, #24]
 800d9c2:	617b      	str	r3, [r7, #20]
 800d9c4:	697b      	ldr	r3, [r7, #20]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	685a      	ldr	r2, [r3, #4]
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d9dc:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	685a      	ldr	r2, [r3, #4]
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d9ec:	605a      	str	r2, [r3, #4]
 800d9ee:	e048      	b.n	800da82 <HAL_I2C_Mem_Read_DMA+0x318>
 800d9f0:	20000058 	.word	0x20000058
 800d9f4:	14f8b589 	.word	0x14f8b589
 800d9f8:	ffff0000 	.word	0xffff0000
 800d9fc:	08010c81 	.word	0x08010c81
 800da00:	08010e2b 	.word	0x08010e2b
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	2220      	movs	r2, #32
 800da08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	2200      	movs	r2, #0
 800da10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da18:	f043 0210 	orr.w	r2, r3, #16
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	2200      	movs	r2, #0
 800da24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800da28:	2301      	movs	r3, #1
 800da2a:	e02d      	b.n	800da88 <HAL_I2C_Mem_Read_DMA+0x31e>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800da2c:	88f8      	ldrh	r0, [r7, #6]
 800da2e:	893a      	ldrh	r2, [r7, #8]
 800da30:	8979      	ldrh	r1, [r7, #10]
 800da32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da34:	9301      	str	r3, [sp, #4]
 800da36:	2323      	movs	r3, #35	; 0x23
 800da38:	9300      	str	r3, [sp, #0]
 800da3a:	4603      	mov	r3, r0
 800da3c:	68f8      	ldr	r0, [r7, #12]
 800da3e:	f003 f837 	bl	8010ab0 <I2C_RequestMemoryRead>
 800da42:	4603      	mov	r3, r0
 800da44:	2b00      	cmp	r3, #0
 800da46:	d001      	beq.n	800da4c <HAL_I2C_Mem_Read_DMA+0x2e2>
      {
        return HAL_ERROR;
 800da48:	2301      	movs	r3, #1
 800da4a:	e01d      	b.n	800da88 <HAL_I2C_Mem_Read_DMA+0x31e>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800da4c:	2300      	movs	r3, #0
 800da4e:	61bb      	str	r3, [r7, #24]
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	695b      	ldr	r3, [r3, #20]
 800da56:	61bb      	str	r3, [r7, #24]
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	699b      	ldr	r3, [r3, #24]
 800da5e:	61bb      	str	r3, [r7, #24]
 800da60:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	681a      	ldr	r2, [r3, #0]
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800da70:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	2220      	movs	r2, #32
 800da76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	2200      	movs	r2, #0
 800da7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 800da82:	2300      	movs	r3, #0
 800da84:	e000      	b.n	800da88 <HAL_I2C_Mem_Read_DMA+0x31e>
  }
  else
  {
    return HAL_BUSY;
 800da86:	2302      	movs	r3, #2
  }
}
 800da88:	4618      	mov	r0, r3
 800da8a:	3728      	adds	r7, #40	; 0x28
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd80      	pop	{r7, pc}

0800da90 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b08a      	sub	sp, #40	; 0x28
 800da94:	af02      	add	r7, sp, #8
 800da96:	60f8      	str	r0, [r7, #12]
 800da98:	607a      	str	r2, [r7, #4]
 800da9a:	603b      	str	r3, [r7, #0]
 800da9c:	460b      	mov	r3, r1
 800da9e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800daa0:	f7f8 feec 	bl	800687c <HAL_GetTick>
 800daa4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800daa6:	2301      	movs	r3, #1
 800daa8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dab0:	b2db      	uxtb	r3, r3
 800dab2:	2b20      	cmp	r3, #32
 800dab4:	f040 8111 	bne.w	800dcda <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800dab8:	69fb      	ldr	r3, [r7, #28]
 800daba:	9300      	str	r3, [sp, #0]
 800dabc:	2319      	movs	r3, #25
 800dabe:	2201      	movs	r2, #1
 800dac0:	4988      	ldr	r1, [pc, #544]	; (800dce4 <HAL_I2C_IsDeviceReady+0x254>)
 800dac2:	68f8      	ldr	r0, [r7, #12]
 800dac4:	f003 fa96 	bl	8010ff4 <I2C_WaitOnFlagUntilTimeout>
 800dac8:	4603      	mov	r3, r0
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d001      	beq.n	800dad2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800dace:	2302      	movs	r3, #2
 800dad0:	e104      	b.n	800dcdc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dad8:	2b01      	cmp	r3, #1
 800dada:	d101      	bne.n	800dae0 <HAL_I2C_IsDeviceReady+0x50>
 800dadc:	2302      	movs	r3, #2
 800dade:	e0fd      	b.n	800dcdc <HAL_I2C_IsDeviceReady+0x24c>
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	2201      	movs	r2, #1
 800dae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	f003 0301 	and.w	r3, r3, #1
 800daf2:	2b01      	cmp	r3, #1
 800daf4:	d007      	beq.n	800db06 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	681a      	ldr	r2, [r3, #0]
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	f042 0201 	orr.w	r2, r2, #1
 800db04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	681a      	ldr	r2, [r3, #0]
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800db14:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	2224      	movs	r2, #36	; 0x24
 800db1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	2200      	movs	r2, #0
 800db22:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	4a70      	ldr	r2, [pc, #448]	; (800dce8 <HAL_I2C_IsDeviceReady+0x258>)
 800db28:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	681a      	ldr	r2, [r3, #0]
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800db38:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800db3a:	69fb      	ldr	r3, [r7, #28]
 800db3c:	9300      	str	r3, [sp, #0]
 800db3e:	683b      	ldr	r3, [r7, #0]
 800db40:	2200      	movs	r2, #0
 800db42:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800db46:	68f8      	ldr	r0, [r7, #12]
 800db48:	f003 fa54 	bl	8010ff4 <I2C_WaitOnFlagUntilTimeout>
 800db4c:	4603      	mov	r3, r0
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d00d      	beq.n	800db6e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db60:	d103      	bne.n	800db6a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	f44f 7200 	mov.w	r2, #512	; 0x200
 800db68:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800db6a:	2303      	movs	r3, #3
 800db6c:	e0b6      	b.n	800dcdc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800db6e:	897b      	ldrh	r3, [r7, #10]
 800db70:	b2db      	uxtb	r3, r3
 800db72:	461a      	mov	r2, r3
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800db7c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800db7e:	f7f8 fe7d 	bl	800687c <HAL_GetTick>
 800db82:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	695b      	ldr	r3, [r3, #20]
 800db8a:	f003 0302 	and.w	r3, r3, #2
 800db8e:	2b02      	cmp	r3, #2
 800db90:	bf0c      	ite	eq
 800db92:	2301      	moveq	r3, #1
 800db94:	2300      	movne	r3, #0
 800db96:	b2db      	uxtb	r3, r3
 800db98:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	695b      	ldr	r3, [r3, #20]
 800dba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dba4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dba8:	bf0c      	ite	eq
 800dbaa:	2301      	moveq	r3, #1
 800dbac:	2300      	movne	r3, #0
 800dbae:	b2db      	uxtb	r3, r3
 800dbb0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800dbb2:	e025      	b.n	800dc00 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800dbb4:	f7f8 fe62 	bl	800687c <HAL_GetTick>
 800dbb8:	4602      	mov	r2, r0
 800dbba:	69fb      	ldr	r3, [r7, #28]
 800dbbc:	1ad3      	subs	r3, r2, r3
 800dbbe:	683a      	ldr	r2, [r7, #0]
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	d302      	bcc.n	800dbca <HAL_I2C_IsDeviceReady+0x13a>
 800dbc4:	683b      	ldr	r3, [r7, #0]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d103      	bne.n	800dbd2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	22a0      	movs	r2, #160	; 0xa0
 800dbce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	695b      	ldr	r3, [r3, #20]
 800dbd8:	f003 0302 	and.w	r3, r3, #2
 800dbdc:	2b02      	cmp	r3, #2
 800dbde:	bf0c      	ite	eq
 800dbe0:	2301      	moveq	r3, #1
 800dbe2:	2300      	movne	r3, #0
 800dbe4:	b2db      	uxtb	r3, r3
 800dbe6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	695b      	ldr	r3, [r3, #20]
 800dbee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dbf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dbf6:	bf0c      	ite	eq
 800dbf8:	2301      	moveq	r3, #1
 800dbfa:	2300      	movne	r3, #0
 800dbfc:	b2db      	uxtb	r3, r3
 800dbfe:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dc06:	b2db      	uxtb	r3, r3
 800dc08:	2ba0      	cmp	r3, #160	; 0xa0
 800dc0a:	d005      	beq.n	800dc18 <HAL_I2C_IsDeviceReady+0x188>
 800dc0c:	7dfb      	ldrb	r3, [r7, #23]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d102      	bne.n	800dc18 <HAL_I2C_IsDeviceReady+0x188>
 800dc12:	7dbb      	ldrb	r3, [r7, #22]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d0cd      	beq.n	800dbb4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	2220      	movs	r2, #32
 800dc1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	695b      	ldr	r3, [r3, #20]
 800dc26:	f003 0302 	and.w	r3, r3, #2
 800dc2a:	2b02      	cmp	r3, #2
 800dc2c:	d129      	bne.n	800dc82 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	681a      	ldr	r2, [r3, #0]
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dc3c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dc3e:	2300      	movs	r3, #0
 800dc40:	613b      	str	r3, [r7, #16]
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	695b      	ldr	r3, [r3, #20]
 800dc48:	613b      	str	r3, [r7, #16]
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	699b      	ldr	r3, [r3, #24]
 800dc50:	613b      	str	r3, [r7, #16]
 800dc52:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800dc54:	69fb      	ldr	r3, [r7, #28]
 800dc56:	9300      	str	r3, [sp, #0]
 800dc58:	2319      	movs	r3, #25
 800dc5a:	2201      	movs	r2, #1
 800dc5c:	4921      	ldr	r1, [pc, #132]	; (800dce4 <HAL_I2C_IsDeviceReady+0x254>)
 800dc5e:	68f8      	ldr	r0, [r7, #12]
 800dc60:	f003 f9c8 	bl	8010ff4 <I2C_WaitOnFlagUntilTimeout>
 800dc64:	4603      	mov	r3, r0
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d001      	beq.n	800dc6e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800dc6a:	2301      	movs	r3, #1
 800dc6c:	e036      	b.n	800dcdc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	2220      	movs	r2, #32
 800dc72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	2200      	movs	r2, #0
 800dc7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800dc7e:	2300      	movs	r3, #0
 800dc80:	e02c      	b.n	800dcdc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	681a      	ldr	r2, [r3, #0]
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dc90:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800dc9a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800dc9c:	69fb      	ldr	r3, [r7, #28]
 800dc9e:	9300      	str	r3, [sp, #0]
 800dca0:	2319      	movs	r3, #25
 800dca2:	2201      	movs	r2, #1
 800dca4:	490f      	ldr	r1, [pc, #60]	; (800dce4 <HAL_I2C_IsDeviceReady+0x254>)
 800dca6:	68f8      	ldr	r0, [r7, #12]
 800dca8:	f003 f9a4 	bl	8010ff4 <I2C_WaitOnFlagUntilTimeout>
 800dcac:	4603      	mov	r3, r0
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d001      	beq.n	800dcb6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800dcb2:	2301      	movs	r3, #1
 800dcb4:	e012      	b.n	800dcdc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800dcb6:	69bb      	ldr	r3, [r7, #24]
 800dcb8:	3301      	adds	r3, #1
 800dcba:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800dcbc:	69ba      	ldr	r2, [r7, #24]
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	429a      	cmp	r2, r3
 800dcc2:	f4ff af32 	bcc.w	800db2a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	2220      	movs	r2, #32
 800dcca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800dcd6:	2301      	movs	r3, #1
 800dcd8:	e000      	b.n	800dcdc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800dcda:	2302      	movs	r3, #2
  }
}
 800dcdc:	4618      	mov	r0, r3
 800dcde:	3720      	adds	r7, #32
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}
 800dce4:	00100002 	.word	0x00100002
 800dce8:	ffff0000 	.word	0xffff0000

0800dcec <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800dcec:	b480      	push	{r7}
 800dcee:	b087      	sub	sp, #28
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	60f8      	str	r0, [r7, #12]
 800dcf4:	607a      	str	r2, [r7, #4]
 800dcf6:	461a      	mov	r2, r3
 800dcf8:	460b      	mov	r3, r1
 800dcfa:	817b      	strh	r3, [r7, #10]
 800dcfc:	4613      	mov	r3, r2
 800dcfe:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 800dd00:	2300      	movs	r3, #0
 800dd02:	617b      	str	r3, [r7, #20]
  __IO uint32_t count      = 0x00U;
 800dd04:	2300      	movs	r3, #0
 800dd06:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dd0e:	b2db      	uxtb	r3, r3
 800dd10:	2b20      	cmp	r3, #32
 800dd12:	f040 80a6 	bne.w	800de62 <HAL_I2C_Master_Seq_Transmit_IT+0x176>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dd20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dd24:	d005      	beq.n	800dd32 <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 800dd26:	6a3b      	ldr	r3, [r7, #32]
 800dd28:	2b08      	cmp	r3, #8
 800dd2a:	d002      	beq.n	800dd32 <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 800dd2c:	6a3b      	ldr	r3, [r7, #32]
 800dd2e:	2b01      	cmp	r3, #1
 800dd30:	d130      	bne.n	800dd94 <HAL_I2C_Master_Seq_Transmit_IT+0xa8>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800dd32:	4b4f      	ldr	r3, [pc, #316]	; (800de70 <HAL_I2C_Master_Seq_Transmit_IT+0x184>)
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	08db      	lsrs	r3, r3, #3
 800dd38:	4a4e      	ldr	r2, [pc, #312]	; (800de74 <HAL_I2C_Master_Seq_Transmit_IT+0x188>)
 800dd3a:	fba2 2303 	umull	r2, r3, r2, r3
 800dd3e:	0a1a      	lsrs	r2, r3, #8
 800dd40:	4613      	mov	r3, r2
 800dd42:	009b      	lsls	r3, r3, #2
 800dd44:	4413      	add	r3, r2
 800dd46:	009a      	lsls	r2, r3, #2
 800dd48:	4413      	add	r3, r2
 800dd4a:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 800dd4c:	693b      	ldr	r3, [r7, #16]
 800dd4e:	3b01      	subs	r3, #1
 800dd50:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 800dd52:	693b      	ldr	r3, [r7, #16]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d116      	bne.n	800dd86 <HAL_I2C_Master_Seq_Transmit_IT+0x9a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	2220      	movs	r2, #32
 800dd62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	2200      	movs	r2, #0
 800dd6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd72:	f043 0220 	orr.w	r2, r3, #32
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800dd82:	2301      	movs	r3, #1
 800dd84:	e06e      	b.n	800de64 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	699b      	ldr	r3, [r3, #24]
 800dd8c:	f003 0302 	and.w	r3, r3, #2
 800dd90:	2b02      	cmp	r3, #2
 800dd92:	d0db      	beq.n	800dd4c <HAL_I2C_Master_Seq_Transmit_IT+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dd9a:	2b01      	cmp	r3, #1
 800dd9c:	d101      	bne.n	800dda2 <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
 800dd9e:	2302      	movs	r3, #2
 800dda0:	e060      	b.n	800de64 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	2201      	movs	r2, #1
 800dda6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	f003 0301 	and.w	r3, r3, #1
 800ddb4:	2b01      	cmp	r3, #1
 800ddb6:	d007      	beq.n	800ddc8 <HAL_I2C_Master_Seq_Transmit_IT+0xdc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	681a      	ldr	r2, [r3, #0]
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	f042 0201 	orr.w	r2, r2, #1
 800ddc6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	681a      	ldr	r2, [r3, #0]
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ddd6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	2221      	movs	r2, #33	; 0x21
 800dddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	2210      	movs	r2, #16
 800dde4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	2200      	movs	r2, #0
 800ddec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	687a      	ldr	r2, [r7, #4]
 800ddf2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	893a      	ldrh	r2, [r7, #8]
 800ddf8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ddfe:	b29a      	uxth	r2, r3
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	6a3a      	ldr	r2, [r7, #32]
 800de08:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800de0a:	897a      	ldrh	r2, [r7, #10]
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de14:	617b      	str	r3, [r7, #20]

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800de16:	697b      	ldr	r3, [r7, #20]
 800de18:	2b11      	cmp	r3, #17
 800de1a:	d10c      	bne.n	800de36 <HAL_I2C_Master_Seq_Transmit_IT+0x14a>
 800de1c:	6a3b      	ldr	r3, [r7, #32]
 800de1e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800de22:	d003      	beq.n	800de2c <HAL_I2C_Master_Seq_Transmit_IT+0x140>
 800de24:	6a3b      	ldr	r3, [r7, #32]
 800de26:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800de2a:	d101      	bne.n	800de30 <HAL_I2C_Master_Seq_Transmit_IT+0x144>
 800de2c:	2301      	movs	r3, #1
 800de2e:	e000      	b.n	800de32 <HAL_I2C_Master_Seq_Transmit_IT+0x146>
 800de30:	2300      	movs	r3, #0
 800de32:	2b01      	cmp	r3, #1
 800de34:	d107      	bne.n	800de46 <HAL_I2C_Master_Seq_Transmit_IT+0x15a>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	681a      	ldr	r2, [r3, #0]
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800de44:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	2200      	movs	r2, #0
 800de4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	685a      	ldr	r2, [r3, #4]
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800de5c:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800de5e:	2300      	movs	r3, #0
 800de60:	e000      	b.n	800de64 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 800de62:	2302      	movs	r3, #2
  }
}
 800de64:	4618      	mov	r0, r3
 800de66:	371c      	adds	r7, #28
 800de68:	46bd      	mov	sp, r7
 800de6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6e:	4770      	bx	lr
 800de70:	20000058 	.word	0x20000058
 800de74:	14f8b589 	.word	0x14f8b589

0800de78 <HAL_I2C_Master_Seq_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b088      	sub	sp, #32
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	60f8      	str	r0, [r7, #12]
 800de80:	607a      	str	r2, [r7, #4]
 800de82:	461a      	mov	r2, r3
 800de84:	460b      	mov	r3, r1
 800de86:	817b      	strh	r3, [r7, #10]
 800de88:	4613      	mov	r3, r2
 800de8a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 800de8c:	2300      	movs	r3, #0
 800de8e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count      = 0x00U;
 800de90:	2300      	movs	r3, #0
 800de92:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800de9a:	b2db      	uxtb	r3, r3
 800de9c:	2b20      	cmp	r3, #32
 800de9e:	f040 8149 	bne.w	800e134 <HAL_I2C_Master_Seq_Transmit_DMA+0x2bc>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800deac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800deb0:	d005      	beq.n	800debe <HAL_I2C_Master_Seq_Transmit_DMA+0x46>
 800deb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deb4:	2b08      	cmp	r3, #8
 800deb6:	d002      	beq.n	800debe <HAL_I2C_Master_Seq_Transmit_DMA+0x46>
 800deb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deba:	2b01      	cmp	r3, #1
 800debc:	d130      	bne.n	800df20 <HAL_I2C_Master_Seq_Transmit_DMA+0xa8>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800debe:	4b99      	ldr	r3, [pc, #612]	; (800e124 <HAL_I2C_Master_Seq_Transmit_DMA+0x2ac>)
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	08db      	lsrs	r3, r3, #3
 800dec4:	4a98      	ldr	r2, [pc, #608]	; (800e128 <HAL_I2C_Master_Seq_Transmit_DMA+0x2b0>)
 800dec6:	fba2 2303 	umull	r2, r3, r2, r3
 800deca:	0a1a      	lsrs	r2, r3, #8
 800decc:	4613      	mov	r3, r2
 800dece:	009b      	lsls	r3, r3, #2
 800ded0:	4413      	add	r3, r2
 800ded2:	009a      	lsls	r2, r3, #2
 800ded4:	4413      	add	r3, r2
 800ded6:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 800ded8:	697b      	ldr	r3, [r7, #20]
 800deda:	3b01      	subs	r3, #1
 800dedc:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 800dede:	697b      	ldr	r3, [r7, #20]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d116      	bne.n	800df12 <HAL_I2C_Master_Seq_Transmit_DMA+0x9a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	2200      	movs	r2, #0
 800dee8:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	2220      	movs	r2, #32
 800deee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	2200      	movs	r2, #0
 800def6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800defe:	f043 0220 	orr.w	r2, r3, #32
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	2200      	movs	r2, #0
 800df0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800df0e:	2301      	movs	r3, #1
 800df10:	e111      	b.n	800e136 <HAL_I2C_Master_Seq_Transmit_DMA+0x2be>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	699b      	ldr	r3, [r3, #24]
 800df18:	f003 0302 	and.w	r3, r3, #2
 800df1c:	2b02      	cmp	r3, #2
 800df1e:	d0db      	beq.n	800ded8 <HAL_I2C_Master_Seq_Transmit_DMA+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800df26:	2b01      	cmp	r3, #1
 800df28:	d101      	bne.n	800df2e <HAL_I2C_Master_Seq_Transmit_DMA+0xb6>
 800df2a:	2302      	movs	r3, #2
 800df2c:	e103      	b.n	800e136 <HAL_I2C_Master_Seq_Transmit_DMA+0x2be>
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	2201      	movs	r2, #1
 800df32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	f003 0301 	and.w	r3, r3, #1
 800df40:	2b01      	cmp	r3, #1
 800df42:	d007      	beq.n	800df54 <HAL_I2C_Master_Seq_Transmit_DMA+0xdc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	681a      	ldr	r2, [r3, #0]
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	f042 0201 	orr.w	r2, r2, #1
 800df52:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	681a      	ldr	r2, [r3, #0]
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800df62:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	2221      	movs	r2, #33	; 0x21
 800df68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	2210      	movs	r2, #16
 800df70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	2200      	movs	r2, #0
 800df78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	687a      	ldr	r2, [r7, #4]
 800df7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	893a      	ldrh	r2, [r7, #8]
 800df84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800df8a:	b29a      	uxth	r2, r3
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df94:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800df96:	897a      	ldrh	r2, [r7, #10]
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfa0:	61bb      	str	r3, [r7, #24]

    if (hi2c->XferSize > 0U)
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	f000 808d 	beq.w	800e0c6 <HAL_I2C_Master_Seq_Transmit_DMA+0x24e>
    {
      if (hi2c->hdmatx != NULL)
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d022      	beq.n	800dffa <HAL_I2C_Master_Seq_Transmit_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfb8:	4a5c      	ldr	r2, [pc, #368]	; (800e12c <HAL_I2C_Master_Seq_Transmit_DMA+0x2b4>)
 800dfba:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfc0:	4a5b      	ldr	r2, [pc, #364]	; (800e130 <HAL_I2C_Master_Seq_Transmit_DMA+0x2b8>)
 800dfc2:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfc8:	2200      	movs	r2, #0
 800dfca:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfdc:	4619      	mov	r1, r3
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	3310      	adds	r3, #16
 800dfe4:	461a      	mov	r2, r3
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dfea:	f7f9 feb0 	bl	8007d4e <HAL_DMA_Start_IT>
 800dfee:	4603      	mov	r3, r0
 800dff0:	77fb      	strb	r3, [r7, #31]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800dff2:	7ffb      	ldrb	r3, [r7, #31]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d152      	bne.n	800e09e <HAL_I2C_Master_Seq_Transmit_DMA+0x226>
 800dff8:	e013      	b.n	800e022 <HAL_I2C_Master_Seq_Transmit_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	2220      	movs	r2, #32
 800dffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	2200      	movs	r2, #0
 800e006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e00e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	2200      	movs	r2, #0
 800e01a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800e01e:	2301      	movs	r3, #1
 800e020:	e089      	b.n	800e136 <HAL_I2C_Master_Seq_Transmit_DMA+0x2be>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	681a      	ldr	r2, [r3, #0]
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e030:	601a      	str	r2, [r3, #0]

        /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
        /* Mean Previous state is same as current state */
        if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800e032:	69bb      	ldr	r3, [r7, #24]
 800e034:	2b11      	cmp	r3, #17
 800e036:	d10c      	bne.n	800e052 <HAL_I2C_Master_Seq_Transmit_DMA+0x1da>
 800e038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e03a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800e03e:	d003      	beq.n	800e048 <HAL_I2C_Master_Seq_Transmit_DMA+0x1d0>
 800e040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e042:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e046:	d101      	bne.n	800e04c <HAL_I2C_Master_Seq_Transmit_DMA+0x1d4>
 800e048:	2301      	movs	r3, #1
 800e04a:	e000      	b.n	800e04e <HAL_I2C_Master_Seq_Transmit_DMA+0x1d6>
 800e04c:	2300      	movs	r3, #0
 800e04e:	2b01      	cmp	r3, #1
 800e050:	d107      	bne.n	800e062 <HAL_I2C_Master_Seq_Transmit_DMA+0x1ea>
        {
          /* Generate Start */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	681a      	ldr	r2, [r3, #0]
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e060:	601a      	str	r2, [r3, #0]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	2200      	movs	r2, #0
 800e066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* If XferOptions is not associated to a new frame, mean no start bit is request, enable directly the DMA request */
        /* In other cases, DMA request is enabled after Slave address treatment in IRQHandler */
        if ((XferOptions == I2C_NEXT_FRAME) || (XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 800e06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e06c:	2b04      	cmp	r3, #4
 800e06e:	d005      	beq.n	800e07c <HAL_I2C_Master_Seq_Transmit_DMA+0x204>
 800e070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e072:	2b20      	cmp	r3, #32
 800e074:	d002      	beq.n	800e07c <HAL_I2C_Master_Seq_Transmit_DMA+0x204>
 800e076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e078:	2b10      	cmp	r3, #16
 800e07a:	d107      	bne.n	800e08c <HAL_I2C_Master_Seq_Transmit_DMA+0x214>
        {
          /* Enable DMA Request */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	685a      	ldr	r2, [r3, #4]
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e08a:	605a      	str	r2, [r3, #4]
        }

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	685a      	ldr	r2, [r3, #4]
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800e09a:	605a      	str	r2, [r3, #4]
 800e09c:	e03f      	b.n	800e11e <HAL_I2C_Master_Seq_Transmit_DMA+0x2a6>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	2220      	movs	r2, #32
 800e0a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0b2:	f043 0210 	orr.w	r2, r3, #16
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	2200      	movs	r2, #0
 800e0be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e0c2:	2301      	movs	r3, #1
 800e0c4:	e037      	b.n	800e136 <HAL_I2C_Master_Seq_Transmit_DMA+0x2be>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	681a      	ldr	r2, [r3, #0]
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e0d4:	601a      	str	r2, [r3, #0]

      /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
      /* Mean Previous state is same as current state */
      if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800e0d6:	69bb      	ldr	r3, [r7, #24]
 800e0d8:	2b11      	cmp	r3, #17
 800e0da:	d10c      	bne.n	800e0f6 <HAL_I2C_Master_Seq_Transmit_DMA+0x27e>
 800e0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0de:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800e0e2:	d003      	beq.n	800e0ec <HAL_I2C_Master_Seq_Transmit_DMA+0x274>
 800e0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0e6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e0ea:	d101      	bne.n	800e0f0 <HAL_I2C_Master_Seq_Transmit_DMA+0x278>
 800e0ec:	2301      	movs	r3, #1
 800e0ee:	e000      	b.n	800e0f2 <HAL_I2C_Master_Seq_Transmit_DMA+0x27a>
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	2b01      	cmp	r3, #1
 800e0f4:	d107      	bne.n	800e106 <HAL_I2C_Master_Seq_Transmit_DMA+0x28e>
      {
        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	681a      	ldr	r2, [r3, #0]
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e104:	601a      	str	r2, [r3, #0]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	2200      	movs	r2, #0
 800e10a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	685a      	ldr	r2, [r3, #4]
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800e11c:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 800e11e:	2300      	movs	r3, #0
 800e120:	e009      	b.n	800e136 <HAL_I2C_Master_Seq_Transmit_DMA+0x2be>
 800e122:	bf00      	nop
 800e124:	20000058 	.word	0x20000058
 800e128:	14f8b589 	.word	0x14f8b589
 800e12c:	08010c81 	.word	0x08010c81
 800e130:	08010e2b 	.word	0x08010e2b
  }
  else
  {
    return HAL_BUSY;
 800e134:	2302      	movs	r3, #2
  }
}
 800e136:	4618      	mov	r0, r3
 800e138:	3720      	adds	r7, #32
 800e13a:	46bd      	mov	sp, r7
 800e13c:	bd80      	pop	{r7, pc}

0800e13e <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800e13e:	b480      	push	{r7}
 800e140:	b089      	sub	sp, #36	; 0x24
 800e142:	af00      	add	r7, sp, #0
 800e144:	60f8      	str	r0, [r7, #12]
 800e146:	607a      	str	r2, [r7, #4]
 800e148:	461a      	mov	r2, r3
 800e14a:	460b      	mov	r3, r1
 800e14c:	817b      	strh	r3, [r7, #10]
 800e14e:	4613      	mov	r3, r2
 800e150:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 800e152:	2300      	movs	r3, #0
 800e154:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800e156:	2300      	movs	r3, #0
 800e158:	617b      	str	r3, [r7, #20]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e15a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800e15e:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e166:	b2db      	uxtb	r3, r3
 800e168:	2b20      	cmp	r3, #32
 800e16a:	f040 80da 	bne.w	800e322 <HAL_I2C_Master_Seq_Receive_IT+0x1e4>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e178:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e17c:	d005      	beq.n	800e18a <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 800e17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e180:	2b08      	cmp	r3, #8
 800e182:	d002      	beq.n	800e18a <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 800e184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e186:	2b01      	cmp	r3, #1
 800e188:	d130      	bne.n	800e1ec <HAL_I2C_Master_Seq_Receive_IT+0xae>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800e18a:	4b69      	ldr	r3, [pc, #420]	; (800e330 <HAL_I2C_Master_Seq_Receive_IT+0x1f2>)
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	08db      	lsrs	r3, r3, #3
 800e190:	4a68      	ldr	r2, [pc, #416]	; (800e334 <HAL_I2C_Master_Seq_Receive_IT+0x1f6>)
 800e192:	fba2 2303 	umull	r2, r3, r2, r3
 800e196:	0a1a      	lsrs	r2, r3, #8
 800e198:	4613      	mov	r3, r2
 800e19a:	009b      	lsls	r3, r3, #2
 800e19c:	4413      	add	r3, r2
 800e19e:	009a      	lsls	r2, r3, #2
 800e1a0:	4413      	add	r3, r2
 800e1a2:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 800e1a4:	697b      	ldr	r3, [r7, #20]
 800e1a6:	3b01      	subs	r3, #1
 800e1a8:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 800e1aa:	697b      	ldr	r3, [r7, #20]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d116      	bne.n	800e1de <HAL_I2C_Master_Seq_Receive_IT+0xa0>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	2220      	movs	r2, #32
 800e1ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1ca:	f043 0220 	orr.w	r2, r3, #32
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800e1da:	2301      	movs	r3, #1
 800e1dc:	e0a2      	b.n	800e324 <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	699b      	ldr	r3, [r3, #24]
 800e1e4:	f003 0302 	and.w	r3, r3, #2
 800e1e8:	2b02      	cmp	r3, #2
 800e1ea:	d0db      	beq.n	800e1a4 <HAL_I2C_Master_Seq_Receive_IT+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e1f2:	2b01      	cmp	r3, #1
 800e1f4:	d101      	bne.n	800e1fa <HAL_I2C_Master_Seq_Receive_IT+0xbc>
 800e1f6:	2302      	movs	r3, #2
 800e1f8:	e094      	b.n	800e324 <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	2201      	movs	r2, #1
 800e1fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	f003 0301 	and.w	r3, r3, #1
 800e20c:	2b01      	cmp	r3, #1
 800e20e:	d007      	beq.n	800e220 <HAL_I2C_Master_Seq_Receive_IT+0xe2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	681a      	ldr	r2, [r3, #0]
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	f042 0201 	orr.w	r2, r2, #1
 800e21e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	681a      	ldr	r2, [r3, #0]
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e22e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	2222      	movs	r2, #34	; 0x22
 800e234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	2210      	movs	r2, #16
 800e23c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	2200      	movs	r2, #0
 800e244:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	687a      	ldr	r2, [r7, #4]
 800e24a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	893a      	ldrh	r2, [r7, #8]
 800e250:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e256:	b29a      	uxth	r2, r3
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e260:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800e262:	897a      	ldrh	r2, [r7, #10]
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e26c:	61bb      	str	r3, [r7, #24]

    if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e272:	b29b      	uxth	r3, r3
 800e274:	2b02      	cmp	r3, #2
 800e276:	d126      	bne.n	800e2c6 <HAL_I2C_Master_Seq_Receive_IT+0x188>
 800e278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e27a:	2b20      	cmp	r3, #32
 800e27c:	d002      	beq.n	800e284 <HAL_I2C_Master_Seq_Receive_IT+0x146>
 800e27e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e280:	2b10      	cmp	r3, #16
 800e282:	d120      	bne.n	800e2c6 <HAL_I2C_Master_Seq_Receive_IT+0x188>
    {
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800e284:	69bb      	ldr	r3, [r7, #24]
 800e286:	2b12      	cmp	r3, #18
 800e288:	d114      	bne.n	800e2b4 <HAL_I2C_Master_Seq_Receive_IT+0x176>
      {
        /* Disable Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	681a      	ldr	r2, [r3, #0]
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e298:	601a      	str	r2, [r3, #0]

        /* Enable Pos */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	681a      	ldr	r2, [r3, #0]
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e2a8:	601a      	str	r2, [r3, #0]

        /* Remove Enabling of IT_BUF, mean RXNE treatment, treat the 2 bytes through BTF */
        enableIT &= ~I2C_IT_BUF;
 800e2aa:	69fb      	ldr	r3, [r7, #28]
 800e2ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e2b0:	61fb      	str	r3, [r7, #28]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800e2b2:	e010      	b.n	800e2d6 <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	681a      	ldr	r2, [r3, #0]
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e2c2:	601a      	str	r2, [r3, #0]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800e2c4:	e007      	b.n	800e2d6 <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	681a      	ldr	r2, [r3, #0]
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e2d4:	601a      	str	r2, [r3, #0]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800e2d6:	69bb      	ldr	r3, [r7, #24]
 800e2d8:	2b12      	cmp	r3, #18
 800e2da:	d10c      	bne.n	800e2f6 <HAL_I2C_Master_Seq_Receive_IT+0x1b8>
 800e2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2de:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800e2e2:	d003      	beq.n	800e2ec <HAL_I2C_Master_Seq_Receive_IT+0x1ae>
 800e2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2e6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e2ea:	d101      	bne.n	800e2f0 <HAL_I2C_Master_Seq_Receive_IT+0x1b2>
 800e2ec:	2301      	movs	r3, #1
 800e2ee:	e000      	b.n	800e2f2 <HAL_I2C_Master_Seq_Receive_IT+0x1b4>
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	2b01      	cmp	r3, #1
 800e2f4:	d107      	bne.n	800e306 <HAL_I2C_Master_Seq_Receive_IT+0x1c8>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	681a      	ldr	r2, [r3, #0]
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e304:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	2200      	movs	r2, #0
 800e30a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable interrupts */
    __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	6859      	ldr	r1, [r3, #4]
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	69fa      	ldr	r2, [r7, #28]
 800e31a:	430a      	orrs	r2, r1
 800e31c:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800e31e:	2300      	movs	r3, #0
 800e320:	e000      	b.n	800e324 <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 800e322:	2302      	movs	r3, #2
  }
}
 800e324:	4618      	mov	r0, r3
 800e326:	3724      	adds	r7, #36	; 0x24
 800e328:	46bd      	mov	sp, r7
 800e32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32e:	4770      	bx	lr
 800e330:	20000058 	.word	0x20000058
 800e334:	14f8b589 	.word	0x14f8b589

0800e338 <HAL_I2C_Master_Seq_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b088      	sub	sp, #32
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	60f8      	str	r0, [r7, #12]
 800e340:	607a      	str	r2, [r7, #4]
 800e342:	461a      	mov	r2, r3
 800e344:	460b      	mov	r3, r1
 800e346:	817b      	strh	r3, [r7, #10]
 800e348:	4613      	mov	r3, r2
 800e34a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 800e34c:	2300      	movs	r3, #0
 800e34e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800e350:	2300      	movs	r3, #0
 800e352:	613b      	str	r3, [r7, #16]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e354:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800e358:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e360:	b2db      	uxtb	r3, r3
 800e362:	2b20      	cmp	r3, #32
 800e364:	f040 8199 	bne.w	800e69a <HAL_I2C_Master_Seq_Receive_DMA+0x362>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e372:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e376:	d005      	beq.n	800e384 <HAL_I2C_Master_Seq_Receive_DMA+0x4c>
 800e378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e37a:	2b08      	cmp	r3, #8
 800e37c:	d002      	beq.n	800e384 <HAL_I2C_Master_Seq_Receive_DMA+0x4c>
 800e37e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e380:	2b01      	cmp	r3, #1
 800e382:	d130      	bne.n	800e3e6 <HAL_I2C_Master_Seq_Receive_DMA+0xae>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800e384:	4b8f      	ldr	r3, [pc, #572]	; (800e5c4 <HAL_I2C_Master_Seq_Receive_DMA+0x28c>)
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	08db      	lsrs	r3, r3, #3
 800e38a:	4a8f      	ldr	r2, [pc, #572]	; (800e5c8 <HAL_I2C_Master_Seq_Receive_DMA+0x290>)
 800e38c:	fba2 2303 	umull	r2, r3, r2, r3
 800e390:	0a1a      	lsrs	r2, r3, #8
 800e392:	4613      	mov	r3, r2
 800e394:	009b      	lsls	r3, r3, #2
 800e396:	4413      	add	r3, r2
 800e398:	009a      	lsls	r2, r3, #2
 800e39a:	4413      	add	r3, r2
 800e39c:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 800e39e:	693b      	ldr	r3, [r7, #16]
 800e3a0:	3b01      	subs	r3, #1
 800e3a2:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 800e3a4:	693b      	ldr	r3, [r7, #16]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d116      	bne.n	800e3d8 <HAL_I2C_Master_Seq_Receive_DMA+0xa0>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	2220      	movs	r2, #32
 800e3b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3c4:	f043 0220 	orr.w	r2, r3, #32
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800e3d4:	2301      	movs	r3, #1
 800e3d6:	e161      	b.n	800e69c <HAL_I2C_Master_Seq_Receive_DMA+0x364>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	699b      	ldr	r3, [r3, #24]
 800e3de:	f003 0302 	and.w	r3, r3, #2
 800e3e2:	2b02      	cmp	r3, #2
 800e3e4:	d0db      	beq.n	800e39e <HAL_I2C_Master_Seq_Receive_DMA+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e3ec:	2b01      	cmp	r3, #1
 800e3ee:	d101      	bne.n	800e3f4 <HAL_I2C_Master_Seq_Receive_DMA+0xbc>
 800e3f0:	2302      	movs	r3, #2
 800e3f2:	e153      	b.n	800e69c <HAL_I2C_Master_Seq_Receive_DMA+0x364>
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	2201      	movs	r2, #1
 800e3f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	f003 0301 	and.w	r3, r3, #1
 800e406:	2b01      	cmp	r3, #1
 800e408:	d007      	beq.n	800e41a <HAL_I2C_Master_Seq_Receive_DMA+0xe2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	681a      	ldr	r2, [r3, #0]
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	f042 0201 	orr.w	r2, r2, #1
 800e418:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	681a      	ldr	r2, [r3, #0]
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e428:	601a      	str	r2, [r3, #0]

    /* Clear Last DMA bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	685a      	ldr	r2, [r3, #4]
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e438:	605a      	str	r2, [r3, #4]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	2222      	movs	r2, #34	; 0x22
 800e43e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	2210      	movs	r2, #16
 800e446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	2200      	movs	r2, #0
 800e44e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	687a      	ldr	r2, [r7, #4]
 800e454:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	893a      	ldrh	r2, [r7, #8]
 800e45a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e460:	b29a      	uxth	r2, r3
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e46a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800e46c:	897a      	ldrh	r2, [r7, #10]
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e476:	617b      	str	r3, [r7, #20]

    if (hi2c->XferSize > 0U)
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	f000 80de 	beq.w	800e63e <HAL_I2C_Master_Seq_Receive_DMA+0x306>
    {
      if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e486:	b29b      	uxth	r3, r3
 800e488:	2b02      	cmp	r3, #2
 800e48a:	d12a      	bne.n	800e4e2 <HAL_I2C_Master_Seq_Receive_DMA+0x1aa>
 800e48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e48e:	2b20      	cmp	r3, #32
 800e490:	d002      	beq.n	800e498 <HAL_I2C_Master_Seq_Receive_DMA+0x160>
 800e492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e494:	2b10      	cmp	r3, #16
 800e496:	d124      	bne.n	800e4e2 <HAL_I2C_Master_Seq_Receive_DMA+0x1aa>
      {
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800e498:	697b      	ldr	r3, [r7, #20]
 800e49a:	2b12      	cmp	r3, #18
 800e49c:	d118      	bne.n	800e4d0 <HAL_I2C_Master_Seq_Receive_DMA+0x198>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	681a      	ldr	r2, [r3, #0]
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e4ac:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	681a      	ldr	r2, [r3, #0]
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e4bc:	601a      	str	r2, [r3, #0]

          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	685a      	ldr	r2, [r3, #4]
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e4cc:	605a      	str	r2, [r3, #4]
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800e4ce:	e022      	b.n	800e516 <HAL_I2C_Master_Seq_Receive_DMA+0x1de>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	681a      	ldr	r2, [r3, #0]
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e4de:	601a      	str	r2, [r3, #0]
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800e4e0:	e019      	b.n	800e516 <HAL_I2C_Master_Seq_Receive_DMA+0x1de>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	681a      	ldr	r2, [r3, #0]
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e4f0:	601a      	str	r2, [r3, #0]

        if ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_OTHER_AND_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 800e4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4f4:	2b20      	cmp	r3, #32
 800e4f6:	d006      	beq.n	800e506 <HAL_I2C_Master_Seq_Receive_DMA+0x1ce>
 800e4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4fa:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e4fe:	d002      	beq.n	800e506 <HAL_I2C_Master_Seq_Receive_DMA+0x1ce>
 800e500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e502:	2b10      	cmp	r3, #16
 800e504:	d107      	bne.n	800e516 <HAL_I2C_Master_Seq_Receive_DMA+0x1de>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	685a      	ldr	r2, [r3, #4]
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e514:	605a      	str	r2, [r3, #4]
        }
      }
      if (hi2c->hdmarx != NULL)
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d022      	beq.n	800e564 <HAL_I2C_Master_Seq_Receive_DMA+0x22c>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e522:	4a2a      	ldr	r2, [pc, #168]	; (800e5cc <HAL_I2C_Master_Seq_Receive_DMA+0x294>)
 800e524:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e52a:	4a29      	ldr	r2, [pc, #164]	; (800e5d0 <HAL_I2C_Master_Seq_Receive_DMA+0x298>)
 800e52c:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e532:	2200      	movs	r2, #0
 800e534:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e53a:	2200      	movs	r2, #0
 800e53c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	3310      	adds	r3, #16
 800e548:	4619      	mov	r1, r3
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e54e:	461a      	mov	r2, r3
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e554:	f7f9 fbfb 	bl	8007d4e <HAL_DMA_Start_IT>
 800e558:	4603      	mov	r3, r0
 800e55a:	76fb      	strb	r3, [r7, #27]
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }
      if (dmaxferstatus == HAL_OK)
 800e55c:	7efb      	ldrb	r3, [r7, #27]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d159      	bne.n	800e616 <HAL_I2C_Master_Seq_Receive_DMA+0x2de>
 800e562:	e013      	b.n	800e58c <HAL_I2C_Master_Seq_Receive_DMA+0x254>
        hi2c->State     = HAL_I2C_STATE_READY;
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	2220      	movs	r2, #32
 800e568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	2200      	movs	r2, #0
 800e570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e578:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	2200      	movs	r2, #0
 800e584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800e588:	2301      	movs	r3, #1
 800e58a:	e087      	b.n	800e69c <HAL_I2C_Master_Seq_Receive_DMA+0x364>
      {
        /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
        /* Mean Previous state is same as current state */
        if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800e58c:	697b      	ldr	r3, [r7, #20]
 800e58e:	2b12      	cmp	r3, #18
 800e590:	d10c      	bne.n	800e5ac <HAL_I2C_Master_Seq_Receive_DMA+0x274>
 800e592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e594:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800e598:	d003      	beq.n	800e5a2 <HAL_I2C_Master_Seq_Receive_DMA+0x26a>
 800e59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e59c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e5a0:	d101      	bne.n	800e5a6 <HAL_I2C_Master_Seq_Receive_DMA+0x26e>
 800e5a2:	2301      	movs	r3, #1
 800e5a4:	e000      	b.n	800e5a8 <HAL_I2C_Master_Seq_Receive_DMA+0x270>
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	2b01      	cmp	r3, #1
 800e5aa:	d113      	bne.n	800e5d4 <HAL_I2C_Master_Seq_Receive_DMA+0x29c>
        {
          /* Generate Start */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	681a      	ldr	r2, [r3, #0]
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e5ba:	601a      	str	r2, [r3, #0]

          /* Update interrupt for only EVT and ERR */
          enableIT = (I2C_IT_EVT | I2C_IT_ERR);
 800e5bc:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e5c0:	61fb      	str	r3, [r7, #28]
 800e5c2:	e00a      	b.n	800e5da <HAL_I2C_Master_Seq_Receive_DMA+0x2a2>
 800e5c4:	20000058 	.word	0x20000058
 800e5c8:	14f8b589 	.word	0x14f8b589
 800e5cc:	08010c81 	.word	0x08010c81
 800e5d0:	08010e2b 	.word	0x08010e2b
        }
        else
        {
          /* Update interrupt for only ERR */
          enableIT = I2C_IT_ERR;
 800e5d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e5d8:	61fb      	str	r3, [r7, #28]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	2200      	movs	r2, #0
 800e5de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* If XferOptions is not associated to a new frame, mean no start bit is request, enable directly the DMA request */
        /* In other cases, DMA request is enabled after Slave address treatment in IRQHandler */
        if ((XferOptions == I2C_NEXT_FRAME) || (XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 800e5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5e4:	2b04      	cmp	r3, #4
 800e5e6:	d005      	beq.n	800e5f4 <HAL_I2C_Master_Seq_Receive_DMA+0x2bc>
 800e5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5ea:	2b20      	cmp	r3, #32
 800e5ec:	d002      	beq.n	800e5f4 <HAL_I2C_Master_Seq_Receive_DMA+0x2bc>
 800e5ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5f0:	2b10      	cmp	r3, #16
 800e5f2:	d107      	bne.n	800e604 <HAL_I2C_Master_Seq_Receive_DMA+0x2cc>
        {
          /* Enable DMA Request */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	685a      	ldr	r2, [r3, #4]
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e602:	605a      	str	r2, [r3, #4]
        }

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	6859      	ldr	r1, [r3, #4]
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	69fa      	ldr	r2, [r7, #28]
 800e610:	430a      	orrs	r2, r1
 800e612:	605a      	str	r2, [r3, #4]
 800e614:	e03f      	b.n	800e696 <HAL_I2C_Master_Seq_Receive_DMA+0x35e>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	2220      	movs	r2, #32
 800e61a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	2200      	movs	r2, #0
 800e622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e62a:	f043 0210 	orr.w	r2, r3, #16
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	2200      	movs	r2, #0
 800e636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e63a:	2301      	movs	r3, #1
 800e63c:	e02e      	b.n	800e69c <HAL_I2C_Master_Seq_Receive_DMA+0x364>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	681a      	ldr	r2, [r3, #0]
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e64c:	601a      	str	r2, [r3, #0]

      /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
      /* Mean Previous state is same as current state */
      if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800e64e:	697b      	ldr	r3, [r7, #20]
 800e650:	2b12      	cmp	r3, #18
 800e652:	d10c      	bne.n	800e66e <HAL_I2C_Master_Seq_Receive_DMA+0x336>
 800e654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e656:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800e65a:	d003      	beq.n	800e664 <HAL_I2C_Master_Seq_Receive_DMA+0x32c>
 800e65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e65e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e662:	d101      	bne.n	800e668 <HAL_I2C_Master_Seq_Receive_DMA+0x330>
 800e664:	2301      	movs	r3, #1
 800e666:	e000      	b.n	800e66a <HAL_I2C_Master_Seq_Receive_DMA+0x332>
 800e668:	2300      	movs	r3, #0
 800e66a:	2b01      	cmp	r3, #1
 800e66c:	d107      	bne.n	800e67e <HAL_I2C_Master_Seq_Receive_DMA+0x346>
      {
        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	681a      	ldr	r2, [r3, #0]
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e67c:	601a      	str	r2, [r3, #0]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	2200      	movs	r2, #0
 800e682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable interrupts */
      __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	6859      	ldr	r1, [r3, #4]
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	69fa      	ldr	r2, [r7, #28]
 800e692:	430a      	orrs	r2, r1
 800e694:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 800e696:	2300      	movs	r3, #0
 800e698:	e000      	b.n	800e69c <HAL_I2C_Master_Seq_Receive_DMA+0x364>
  }
  else
  {
    return HAL_BUSY;
 800e69a:	2302      	movs	r3, #2
  }
}
 800e69c:	4618      	mov	r0, r3
 800e69e:	3720      	adds	r7, #32
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	bd80      	pop	{r7, pc}

0800e6a4 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800e6a4:	b480      	push	{r7}
 800e6a6:	b087      	sub	sp, #28
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	60f8      	str	r0, [r7, #12]
 800e6ac:	60b9      	str	r1, [r7, #8]
 800e6ae:	603b      	str	r3, [r7, #0]
 800e6b0:	4613      	mov	r3, r2
 800e6b2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e6ba:	b2db      	uxtb	r3, r3
 800e6bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e6c0:	2b28      	cmp	r3, #40	; 0x28
 800e6c2:	d15b      	bne.n	800e77c <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 800e6c4:	68bb      	ldr	r3, [r7, #8]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d002      	beq.n	800e6d0 <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 800e6ca:	88fb      	ldrh	r3, [r7, #6]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d101      	bne.n	800e6d4 <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 800e6d0:	2301      	movs	r3, #1
 800e6d2:	e054      	b.n	800e77e <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e6da:	2b01      	cmp	r3, #1
 800e6dc:	d101      	bne.n	800e6e2 <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 800e6de:	2302      	movs	r3, #2
 800e6e0:	e04d      	b.n	800e77e <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	2201      	movs	r2, #1
 800e6e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	f003 0301 	and.w	r3, r3, #1
 800e6f4:	2b01      	cmp	r3, #1
 800e6f6:	d007      	beq.n	800e708 <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	681a      	ldr	r2, [r3, #0]
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	f042 0201 	orr.w	r2, r2, #1
 800e706:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	681a      	ldr	r2, [r3, #0]
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e716:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	2229      	movs	r2, #41	; 0x29
 800e71c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	2220      	movs	r2, #32
 800e724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	2200      	movs	r2, #0
 800e72c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	68ba      	ldr	r2, [r7, #8]
 800e732:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	88fa      	ldrh	r2, [r7, #6]
 800e738:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e73e:	b29a      	uxth	r2, r3
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	683a      	ldr	r2, [r7, #0]
 800e748:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e74a:	2300      	movs	r3, #0
 800e74c:	617b      	str	r3, [r7, #20]
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	695b      	ldr	r3, [r3, #20]
 800e754:	617b      	str	r3, [r7, #20]
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	699b      	ldr	r3, [r3, #24]
 800e75c:	617b      	str	r3, [r7, #20]
 800e75e:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	2200      	movs	r2, #0
 800e764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	685a      	ldr	r2, [r3, #4]
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800e776:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800e778:	2300      	movs	r3, #0
 800e77a:	e000      	b.n	800e77e <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 800e77c:	2302      	movs	r3, #2
  }
}
 800e77e:	4618      	mov	r0, r3
 800e780:	371c      	adds	r7, #28
 800e782:	46bd      	mov	sp, r7
 800e784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e788:	4770      	bx	lr

0800e78a <HAL_I2C_Slave_Seq_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800e78a:	b580      	push	{r7, lr}
 800e78c:	b086      	sub	sp, #24
 800e78e:	af00      	add	r7, sp, #0
 800e790:	60f8      	str	r0, [r7, #12]
 800e792:	60b9      	str	r1, [r7, #8]
 800e794:	603b      	str	r3, [r7, #0]
 800e796:	4613      	mov	r3, r2
 800e798:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e7a0:	b2db      	uxtb	r3, r3
 800e7a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e7a6:	2b28      	cmp	r3, #40	; 0x28
 800e7a8:	f040 811e 	bne.w	800e9e8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x25e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e7ac:	68bb      	ldr	r3, [r7, #8]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d002      	beq.n	800e7b8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x2e>
 800e7b2:	88fb      	ldrh	r3, [r7, #6]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d101      	bne.n	800e7bc <HAL_I2C_Slave_Seq_Transmit_DMA+0x32>
    {
      return  HAL_ERROR;
 800e7b8:	2301      	movs	r3, #1
 800e7ba:	e116      	b.n	800e9ea <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e7c2:	2b01      	cmp	r3, #1
 800e7c4:	d101      	bne.n	800e7ca <HAL_I2C_Slave_Seq_Transmit_DMA+0x40>
 800e7c6:	2302      	movs	r3, #2
 800e7c8:	e10f      	b.n	800e9ea <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	2201      	movs	r2, #1
 800e7ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	685a      	ldr	r2, [r3, #4]
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800e7e0:	605a      	str	r2, [r3, #4]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e7e8:	b2db      	uxtb	r3, r3
 800e7ea:	2b2a      	cmp	r3, #42	; 0x2a
 800e7ec:	d127      	bne.n	800e83e <HAL_I2C_Slave_Seq_Transmit_DMA+0xb4>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	685b      	ldr	r3, [r3, #4]
 800e7f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e7f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e7fc:	d14c      	bne.n	800e898 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e802:	2b00      	cmp	r3, #0
 800e804:	d048      	beq.n	800e898 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
        {
          CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	685a      	ldr	r2, [r3, #4]
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e814:	605a      	str	r2, [r3, #4]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e81a:	4a76      	ldr	r2, [pc, #472]	; (800e9f4 <HAL_I2C_Slave_Seq_Transmit_DMA+0x26a>)
 800e81c:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e822:	4618      	mov	r0, r3
 800e824:	f7f9 fb5b 	bl	8007ede <HAL_DMA_Abort_IT>
 800e828:	4603      	mov	r3, r0
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d034      	beq.n	800e898 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e834:	68fa      	ldr	r2, [r7, #12]
 800e836:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e838:	4610      	mov	r0, r2
 800e83a:	4798      	blx	r3
 800e83c:	e02c      	b.n	800e898 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e844:	b2db      	uxtb	r3, r3
 800e846:	2b29      	cmp	r3, #41	; 0x29
 800e848:	d126      	bne.n	800e898 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	685b      	ldr	r3, [r3, #4]
 800e850:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e854:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e858:	d11e      	bne.n	800e898 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
      {
        CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	685a      	ldr	r2, [r3, #4]
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e868:	605a      	str	r2, [r3, #4]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d012      	beq.n	800e898 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e876:	4a5f      	ldr	r2, [pc, #380]	; (800e9f4 <HAL_I2C_Slave_Seq_Transmit_DMA+0x26a>)
 800e878:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e87e:	4618      	mov	r0, r3
 800e880:	f7f9 fb2d 	bl	8007ede <HAL_DMA_Abort_IT>
 800e884:	4603      	mov	r3, r0
 800e886:	2b00      	cmp	r3, #0
 800e888:	d006      	beq.n	800e898 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e88e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e890:	68fa      	ldr	r2, [r7, #12]
 800e892:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e894:	4610      	mov	r0, r2
 800e896:	4798      	blx	r3
    {
      /* Nothing to do */
    }

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	f003 0301 	and.w	r3, r3, #1
 800e8a2:	2b01      	cmp	r3, #1
 800e8a4:	d007      	beq.n	800e8b6 <HAL_I2C_Slave_Seq_Transmit_DMA+0x12c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	681a      	ldr	r2, [r3, #0]
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	f042 0201 	orr.w	r2, r2, #1
 800e8b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	681a      	ldr	r2, [r3, #0]
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e8c4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	2229      	movs	r2, #41	; 0x29
 800e8ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	2220      	movs	r2, #32
 800e8d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	2200      	movs	r2, #0
 800e8da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	68ba      	ldr	r2, [r7, #8]
 800e8e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	88fa      	ldrh	r2, [r7, #6]
 800e8e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e8ec:	b29a      	uxth	r2, r3
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	683a      	ldr	r2, [r7, #0]
 800e8f6:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmatx != NULL)
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d022      	beq.n	800e946 <HAL_I2C_Slave_Seq_Transmit_DMA+0x1bc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e904:	4a3c      	ldr	r2, [pc, #240]	; (800e9f8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x26e>)
 800e906:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e90c:	4a3b      	ldr	r2, [pc, #236]	; (800e9fc <HAL_I2C_Slave_Seq_Transmit_DMA+0x272>)
 800e90e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e914:	2200      	movs	r2, #0
 800e916:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e91c:	2200      	movs	r2, #0
 800e91e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e928:	4619      	mov	r1, r3
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	3310      	adds	r3, #16
 800e930:	461a      	mov	r2, r3
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e936:	f7f9 fa0a 	bl	8007d4e <HAL_DMA_Start_IT>
 800e93a:	4603      	mov	r3, r0
 800e93c:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800e93e:	7dfb      	ldrb	r3, [r7, #23]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d13d      	bne.n	800e9c0 <HAL_I2C_Slave_Seq_Transmit_DMA+0x236>
 800e944:	e013      	b.n	800e96e <HAL_I2C_Slave_Seq_Transmit_DMA+0x1e4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	2228      	movs	r2, #40	; 0x28
 800e94a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	2200      	movs	r2, #0
 800e952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e95a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	2200      	movs	r2, #0
 800e966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800e96a:	2301      	movs	r3, #1
 800e96c:	e03d      	b.n	800e9ea <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	681a      	ldr	r2, [r3, #0]
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e97c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e97e:	2300      	movs	r3, #0
 800e980:	613b      	str	r3, [r7, #16]
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	695b      	ldr	r3, [r3, #20]
 800e988:	613b      	str	r3, [r7, #16]
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	699b      	ldr	r3, [r3, #24]
 800e990:	613b      	str	r3, [r7, #16]
 800e992:	693b      	ldr	r3, [r7, #16]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	2200      	movs	r2, #0
 800e998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	685a      	ldr	r2, [r3, #4]
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800e9aa:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	685a      	ldr	r2, [r3, #4]
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e9ba:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 800e9bc:	2300      	movs	r3, #0
 800e9be:	e014      	b.n	800e9ea <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	2220      	movs	r2, #32
 800e9c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9d4:	f043 0210 	orr.w	r2, r3, #16
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	2200      	movs	r2, #0
 800e9e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e9e4:	2301      	movs	r3, #1
 800e9e6:	e000      	b.n	800e9ea <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }
  }
  else
  {
    return HAL_BUSY;
 800e9e8:	2302      	movs	r3, #2
  }
}
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	3718      	adds	r7, #24
 800e9ee:	46bd      	mov	sp, r7
 800e9f0:	bd80      	pop	{r7, pc}
 800e9f2:	bf00      	nop
 800e9f4:	08010ea5 	.word	0x08010ea5
 800e9f8:	08010c81 	.word	0x08010c81
 800e9fc:	08010e2b 	.word	0x08010e2b

0800ea00 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800ea00:	b480      	push	{r7}
 800ea02:	b087      	sub	sp, #28
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	60f8      	str	r0, [r7, #12]
 800ea08:	60b9      	str	r1, [r7, #8]
 800ea0a:	603b      	str	r3, [r7, #0]
 800ea0c:	4613      	mov	r3, r2
 800ea0e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ea16:	b2db      	uxtb	r3, r3
 800ea18:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800ea1c:	2b28      	cmp	r3, #40	; 0x28
 800ea1e:	d15b      	bne.n	800ead8 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 800ea20:	68bb      	ldr	r3, [r7, #8]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d002      	beq.n	800ea2c <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 800ea26:	88fb      	ldrh	r3, [r7, #6]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d101      	bne.n	800ea30 <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 800ea2c:	2301      	movs	r3, #1
 800ea2e:	e054      	b.n	800eada <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ea36:	2b01      	cmp	r3, #1
 800ea38:	d101      	bne.n	800ea3e <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 800ea3a:	2302      	movs	r3, #2
 800ea3c:	e04d      	b.n	800eada <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	2201      	movs	r2, #1
 800ea42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	f003 0301 	and.w	r3, r3, #1
 800ea50:	2b01      	cmp	r3, #1
 800ea52:	d007      	beq.n	800ea64 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	681a      	ldr	r2, [r3, #0]
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	f042 0201 	orr.w	r2, r2, #1
 800ea62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	681a      	ldr	r2, [r3, #0]
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ea72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	222a      	movs	r2, #42	; 0x2a
 800ea78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	2220      	movs	r2, #32
 800ea80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	2200      	movs	r2, #0
 800ea88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	68ba      	ldr	r2, [r7, #8]
 800ea8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	88fa      	ldrh	r2, [r7, #6]
 800ea94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ea9a:	b29a      	uxth	r2, r3
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	683a      	ldr	r2, [r7, #0]
 800eaa4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	617b      	str	r3, [r7, #20]
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	695b      	ldr	r3, [r3, #20]
 800eab0:	617b      	str	r3, [r7, #20]
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	699b      	ldr	r3, [r3, #24]
 800eab8:	617b      	str	r3, [r7, #20]
 800eaba:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	2200      	movs	r2, #0
 800eac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	685a      	ldr	r2, [r3, #4]
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800ead2:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800ead4:	2300      	movs	r3, #0
 800ead6:	e000      	b.n	800eada <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 800ead8:	2302      	movs	r3, #2
  }
}
 800eada:	4618      	mov	r0, r3
 800eadc:	371c      	adds	r7, #28
 800eade:	46bd      	mov	sp, r7
 800eae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae4:	4770      	bx	lr

0800eae6 <HAL_I2C_Slave_Seq_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800eae6:	b580      	push	{r7, lr}
 800eae8:	b086      	sub	sp, #24
 800eaea:	af00      	add	r7, sp, #0
 800eaec:	60f8      	str	r0, [r7, #12]
 800eaee:	60b9      	str	r1, [r7, #8]
 800eaf0:	603b      	str	r3, [r7, #0]
 800eaf2:	4613      	mov	r3, r2
 800eaf4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eafc:	b2db      	uxtb	r3, r3
 800eafe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800eb02:	2b28      	cmp	r3, #40	; 0x28
 800eb04:	f040 811e 	bne.w	800ed44 <HAL_I2C_Slave_Seq_Receive_DMA+0x25e>
  {
    if ((pData == NULL) || (Size == 0U))
 800eb08:	68bb      	ldr	r3, [r7, #8]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d002      	beq.n	800eb14 <HAL_I2C_Slave_Seq_Receive_DMA+0x2e>
 800eb0e:	88fb      	ldrh	r3, [r7, #6]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d101      	bne.n	800eb18 <HAL_I2C_Slave_Seq_Receive_DMA+0x32>
    {
      return  HAL_ERROR;
 800eb14:	2301      	movs	r3, #1
 800eb16:	e116      	b.n	800ed46 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eb1e:	2b01      	cmp	r3, #1
 800eb20:	d101      	bne.n	800eb26 <HAL_I2C_Slave_Seq_Receive_DMA+0x40>
 800eb22:	2302      	movs	r3, #2
 800eb24:	e10f      	b.n	800ed46 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	2201      	movs	r2, #1
 800eb2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	685a      	ldr	r2, [r3, #4]
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800eb3c:	605a      	str	r2, [r3, #4]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eb44:	b2db      	uxtb	r3, r3
 800eb46:	2b2a      	cmp	r3, #42	; 0x2a
 800eb48:	d127      	bne.n	800eb9a <HAL_I2C_Slave_Seq_Receive_DMA+0xb4>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	685b      	ldr	r3, [r3, #4]
 800eb50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eb54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eb58:	d14c      	bne.n	800ebf4 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d048      	beq.n	800ebf4 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
        {
          CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	685a      	ldr	r2, [r3, #4]
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800eb70:	605a      	str	r2, [r3, #4]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb76:	4a76      	ldr	r2, [pc, #472]	; (800ed50 <HAL_I2C_Slave_Seq_Receive_DMA+0x26a>)
 800eb78:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb7e:	4618      	mov	r0, r3
 800eb80:	f7f9 f9ad 	bl	8007ede <HAL_DMA_Abort_IT>
 800eb84:	4603      	mov	r3, r0
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d034      	beq.n	800ebf4 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb90:	68fa      	ldr	r2, [r7, #12]
 800eb92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800eb94:	4610      	mov	r0, r2
 800eb96:	4798      	blx	r3
 800eb98:	e02c      	b.n	800ebf4 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eba0:	b2db      	uxtb	r3, r3
 800eba2:	2b29      	cmp	r3, #41	; 0x29
 800eba4:	d126      	bne.n	800ebf4 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	685b      	ldr	r3, [r3, #4]
 800ebac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ebb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ebb4:	d11e      	bne.n	800ebf4 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
      {
        CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	685a      	ldr	r2, [r3, #4]
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ebc4:	605a      	str	r2, [r3, #4]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d012      	beq.n	800ebf4 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebd2:	4a5f      	ldr	r2, [pc, #380]	; (800ed50 <HAL_I2C_Slave_Seq_Receive_DMA+0x26a>)
 800ebd4:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebda:	4618      	mov	r0, r3
 800ebdc:	f7f9 f97f 	bl	8007ede <HAL_DMA_Abort_IT>
 800ebe0:	4603      	mov	r3, r0
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d006      	beq.n	800ebf4 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ebec:	68fa      	ldr	r2, [r7, #12]
 800ebee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ebf0:	4610      	mov	r0, r2
 800ebf2:	4798      	blx	r3
    {
      /* Nothing to do */
    }

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	f003 0301 	and.w	r3, r3, #1
 800ebfe:	2b01      	cmp	r3, #1
 800ec00:	d007      	beq.n	800ec12 <HAL_I2C_Slave_Seq_Receive_DMA+0x12c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	681a      	ldr	r2, [r3, #0]
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	f042 0201 	orr.w	r2, r2, #1
 800ec10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	681a      	ldr	r2, [r3, #0]
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ec20:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	222a      	movs	r2, #42	; 0x2a
 800ec26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	2220      	movs	r2, #32
 800ec2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	2200      	movs	r2, #0
 800ec36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	68ba      	ldr	r2, [r7, #8]
 800ec3c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	88fa      	ldrh	r2, [r7, #6]
 800ec42:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ec48:	b29a      	uxth	r2, r3
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	683a      	ldr	r2, [r7, #0]
 800ec52:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmarx != NULL)
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d022      	beq.n	800eca2 <HAL_I2C_Slave_Seq_Receive_DMA+0x1bc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec60:	4a3c      	ldr	r2, [pc, #240]	; (800ed54 <HAL_I2C_Slave_Seq_Receive_DMA+0x26e>)
 800ec62:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec68:	4a3b      	ldr	r2, [pc, #236]	; (800ed58 <HAL_I2C_Slave_Seq_Receive_DMA+0x272>)
 800ec6a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec70:	2200      	movs	r2, #0
 800ec72:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec78:	2200      	movs	r2, #0
 800ec7a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	3310      	adds	r3, #16
 800ec86:	4619      	mov	r1, r3
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec8c:	461a      	mov	r2, r3
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ec92:	f7f9 f85c 	bl	8007d4e <HAL_DMA_Start_IT>
 800ec96:	4603      	mov	r3, r0
 800ec98:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800ec9a:	7dfb      	ldrb	r3, [r7, #23]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d13d      	bne.n	800ed1c <HAL_I2C_Slave_Seq_Receive_DMA+0x236>
 800eca0:	e013      	b.n	800ecca <HAL_I2C_Slave_Seq_Receive_DMA+0x1e4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	2228      	movs	r2, #40	; 0x28
 800eca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	2200      	movs	r2, #0
 800ecae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecb6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800ecc6:	2301      	movs	r3, #1
 800ecc8:	e03d      	b.n	800ed46 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	681a      	ldr	r2, [r3, #0]
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ecd8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ecda:	2300      	movs	r3, #0
 800ecdc:	613b      	str	r3, [r7, #16]
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	695b      	ldr	r3, [r3, #20]
 800ece4:	613b      	str	r3, [r7, #16]
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	699b      	ldr	r3, [r3, #24]
 800ecec:	613b      	str	r3, [r7, #16]
 800ecee:	693b      	ldr	r3, [r7, #16]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	685a      	ldr	r2, [r3, #4]
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ed06:	605a      	str	r2, [r3, #4]

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	685a      	ldr	r2, [r3, #4]
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800ed16:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 800ed18:	2300      	movs	r3, #0
 800ed1a:	e014      	b.n	800ed46 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	2220      	movs	r2, #32
 800ed20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	2200      	movs	r2, #0
 800ed28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed30:	f043 0210 	orr.w	r2, r3, #16
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ed40:	2301      	movs	r3, #1
 800ed42:	e000      	b.n	800ed46 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }
  }
  else
  {
    return HAL_BUSY;
 800ed44:	2302      	movs	r3, #2
  }
}
 800ed46:	4618      	mov	r0, r3
 800ed48:	3718      	adds	r7, #24
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd80      	pop	{r7, pc}
 800ed4e:	bf00      	nop
 800ed50:	08010ea5 	.word	0x08010ea5
 800ed54:	08010c81 	.word	0x08010c81
 800ed58:	08010e2b 	.word	0x08010e2b

0800ed5c <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800ed5c:	b480      	push	{r7}
 800ed5e:	b083      	sub	sp, #12
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ed6a:	b2db      	uxtb	r3, r3
 800ed6c:	2b20      	cmp	r3, #32
 800ed6e:	d124      	bne.n	800edba <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	2228      	movs	r2, #40	; 0x28
 800ed74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	f003 0301 	and.w	r3, r3, #1
 800ed82:	2b01      	cmp	r3, #1
 800ed84:	d007      	beq.n	800ed96 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	681a      	ldr	r2, [r3, #0]
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	f042 0201 	orr.w	r2, r2, #1
 800ed94:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	681a      	ldr	r2, [r3, #0]
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800eda4:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	685a      	ldr	r2, [r3, #4]
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800edb4:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800edb6:	2300      	movs	r3, #0
 800edb8:	e000      	b.n	800edbc <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800edba:	2302      	movs	r3, #2
  }
}
 800edbc:	4618      	mov	r0, r3
 800edbe:	370c      	adds	r7, #12
 800edc0:	46bd      	mov	sp, r7
 800edc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc6:	4770      	bx	lr

0800edc8 <HAL_I2C_DisableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DisableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800edc8:	b480      	push	{r7}
 800edca:	b085      	sub	sp, #20
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp;

  /* Disable Address listen mode only if a transfer is not ongoing */
  if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800edd6:	b2db      	uxtb	r3, r3
 800edd8:	2b28      	cmp	r3, #40	; 0x28
 800edda:	d129      	bne.n	800ee30 <HAL_I2C_DisableListen_IT+0x68>
  {
    tmp = (uint32_t)(hi2c->State) & I2C_STATE_MSK;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ede2:	b2db      	uxtb	r3, r3
 800ede4:	f003 0303 	and.w	r3, r3, #3
 800ede8:	60fb      	str	r3, [r7, #12]
    hi2c->PreviousState = tmp | (uint32_t)(hi2c->Mode);
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800edf0:	b2db      	uxtb	r3, r3
 800edf2:	461a      	mov	r2, r3
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	431a      	orrs	r2, r3
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	2220      	movs	r2, #32
 800ee00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	2200      	movs	r2, #0
 800ee08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	681a      	ldr	r2, [r3, #0]
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ee1a:	601a      	str	r2, [r3, #0]

    /* Disable EVT and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	685a      	ldr	r2, [r3, #4]
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800ee2a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	e000      	b.n	800ee32 <HAL_I2C_DisableListen_IT+0x6a>
  }
  else
  {
    return HAL_BUSY;
 800ee30:	2302      	movs	r3, #2
  }
}
 800ee32:	4618      	mov	r0, r3
 800ee34:	3714      	adds	r7, #20
 800ee36:	46bd      	mov	sp, r7
 800ee38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3c:	4770      	bx	lr

0800ee3e <HAL_I2C_Master_Abort_IT>:
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Abort_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress)
{
 800ee3e:	b580      	push	{r7, lr}
 800ee40:	b084      	sub	sp, #16
 800ee42:	af00      	add	r7, sp, #0
 800ee44:	6078      	str	r0, [r7, #4]
 800ee46:	460b      	mov	r3, r1
 800ee48:	807b      	strh	r3, [r7, #2]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ee50:	73fb      	strb	r3, [r7, #15]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(DevAddress);

  /* Abort Master transfer during Receive or Transmit process    */
  if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && (CurrentMode == HAL_I2C_MODE_MASTER))
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	699b      	ldr	r3, [r3, #24]
 800ee58:	f003 0302 	and.w	r3, r3, #2
 800ee5c:	2b02      	cmp	r3, #2
 800ee5e:	d138      	bne.n	800eed2 <HAL_I2C_Master_Abort_IT+0x94>
 800ee60:	7bfb      	ldrb	r3, [r7, #15]
 800ee62:	2b10      	cmp	r3, #16
 800ee64:	d135      	bne.n	800eed2 <HAL_I2C_Master_Abort_IT+0x94>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ee6c:	2b01      	cmp	r3, #1
 800ee6e:	d101      	bne.n	800ee74 <HAL_I2C_Master_Abort_IT+0x36>
 800ee70:	2302      	movs	r3, #2
 800ee72:	e02f      	b.n	800eed4 <HAL_I2C_Master_Abort_IT+0x96>
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	2201      	movs	r2, #1
 800ee78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    hi2c->PreviousState = I2C_STATE_NONE;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	2200      	movs	r2, #0
 800ee80:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_ABORT;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	2260      	movs	r2, #96	; 0x60
 800ee86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	681a      	ldr	r2, [r3, #0]
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ee98:	601a      	str	r2, [r3, #0]

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	681a      	ldr	r2, [r3, #0]
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800eea8:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	2200      	movs	r2, #0
 800eeae:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	685a      	ldr	r2, [r3, #4]
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800eebe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	2200      	movs	r2, #0
 800eec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800eec8:	6878      	ldr	r0, [r7, #4]
 800eeca:	f001 fad9 	bl	8010480 <I2C_ITError>

    return HAL_OK;
 800eece:	2300      	movs	r3, #0
 800eed0:	e000      	b.n	800eed4 <HAL_I2C_Master_Abort_IT+0x96>
  else
  {
    /* Wrong usage of abort function */
    /* This function should be used only in case of abort monitored by master device */
    /* Or periphal is not in busy state, mean there is no active sequence to be abort */
    return HAL_ERROR;
 800eed2:	2301      	movs	r3, #1
  }
}
 800eed4:	4618      	mov	r0, r3
 800eed6:	3710      	adds	r7, #16
 800eed8:	46bd      	mov	sp, r7
 800eeda:	bd80      	pop	{r7, pc}

0800eedc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800eedc:	b580      	push	{r7, lr}
 800eede:	b088      	sub	sp, #32
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800eee4:	2300      	movs	r3, #0
 800eee6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	685b      	ldr	r3, [r3, #4]
 800eeee:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eef4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800eefc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ef04:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800ef06:	7bfb      	ldrb	r3, [r7, #15]
 800ef08:	2b10      	cmp	r3, #16
 800ef0a:	d003      	beq.n	800ef14 <HAL_I2C_EV_IRQHandler+0x38>
 800ef0c:	7bfb      	ldrb	r3, [r7, #15]
 800ef0e:	2b40      	cmp	r3, #64	; 0x40
 800ef10:	f040 80c1 	bne.w	800f096 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	699b      	ldr	r3, [r3, #24]
 800ef1a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	695b      	ldr	r3, [r3, #20]
 800ef22:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800ef24:	69fb      	ldr	r3, [r7, #28]
 800ef26:	f003 0301 	and.w	r3, r3, #1
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d10d      	bne.n	800ef4a <HAL_I2C_EV_IRQHandler+0x6e>
 800ef2e:	693b      	ldr	r3, [r7, #16]
 800ef30:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800ef34:	d003      	beq.n	800ef3e <HAL_I2C_EV_IRQHandler+0x62>
 800ef36:	693b      	ldr	r3, [r7, #16]
 800ef38:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800ef3c:	d101      	bne.n	800ef42 <HAL_I2C_EV_IRQHandler+0x66>
 800ef3e:	2301      	movs	r3, #1
 800ef40:	e000      	b.n	800ef44 <HAL_I2C_EV_IRQHandler+0x68>
 800ef42:	2300      	movs	r3, #0
 800ef44:	2b01      	cmp	r3, #1
 800ef46:	f000 8132 	beq.w	800f1ae <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ef4a:	69fb      	ldr	r3, [r7, #28]
 800ef4c:	f003 0301 	and.w	r3, r3, #1
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d00c      	beq.n	800ef6e <HAL_I2C_EV_IRQHandler+0x92>
 800ef54:	697b      	ldr	r3, [r7, #20]
 800ef56:	0a5b      	lsrs	r3, r3, #9
 800ef58:	f003 0301 	and.w	r3, r3, #1
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d006      	beq.n	800ef6e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800ef60:	6878      	ldr	r0, [r7, #4]
 800ef62:	f002 fa94 	bl	801148e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800ef66:	6878      	ldr	r0, [r7, #4]
 800ef68:	f000 fda1 	bl	800faae <I2C_Master_SB>
 800ef6c:	e092      	b.n	800f094 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ef6e:	69fb      	ldr	r3, [r7, #28]
 800ef70:	08db      	lsrs	r3, r3, #3
 800ef72:	f003 0301 	and.w	r3, r3, #1
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d009      	beq.n	800ef8e <HAL_I2C_EV_IRQHandler+0xb2>
 800ef7a:	697b      	ldr	r3, [r7, #20]
 800ef7c:	0a5b      	lsrs	r3, r3, #9
 800ef7e:	f003 0301 	and.w	r3, r3, #1
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d003      	beq.n	800ef8e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800ef86:	6878      	ldr	r0, [r7, #4]
 800ef88:	f000 fe17 	bl	800fbba <I2C_Master_ADD10>
 800ef8c:	e082      	b.n	800f094 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ef8e:	69fb      	ldr	r3, [r7, #28]
 800ef90:	085b      	lsrs	r3, r3, #1
 800ef92:	f003 0301 	and.w	r3, r3, #1
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d009      	beq.n	800efae <HAL_I2C_EV_IRQHandler+0xd2>
 800ef9a:	697b      	ldr	r3, [r7, #20]
 800ef9c:	0a5b      	lsrs	r3, r3, #9
 800ef9e:	f003 0301 	and.w	r3, r3, #1
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d003      	beq.n	800efae <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800efa6:	6878      	ldr	r0, [r7, #4]
 800efa8:	f000 fe31 	bl	800fc0e <I2C_Master_ADDR>
 800efac:	e072      	b.n	800f094 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800efae:	69bb      	ldr	r3, [r7, #24]
 800efb0:	089b      	lsrs	r3, r3, #2
 800efb2:	f003 0301 	and.w	r3, r3, #1
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d03b      	beq.n	800f032 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	685b      	ldr	r3, [r3, #4]
 800efc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800efc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800efc8:	f000 80f3 	beq.w	800f1b2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800efcc:	69fb      	ldr	r3, [r7, #28]
 800efce:	09db      	lsrs	r3, r3, #7
 800efd0:	f003 0301 	and.w	r3, r3, #1
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d00f      	beq.n	800eff8 <HAL_I2C_EV_IRQHandler+0x11c>
 800efd8:	697b      	ldr	r3, [r7, #20]
 800efda:	0a9b      	lsrs	r3, r3, #10
 800efdc:	f003 0301 	and.w	r3, r3, #1
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d009      	beq.n	800eff8 <HAL_I2C_EV_IRQHandler+0x11c>
 800efe4:	69fb      	ldr	r3, [r7, #28]
 800efe6:	089b      	lsrs	r3, r3, #2
 800efe8:	f003 0301 	and.w	r3, r3, #1
 800efec:	2b00      	cmp	r3, #0
 800efee:	d103      	bne.n	800eff8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800eff0:	6878      	ldr	r0, [r7, #4]
 800eff2:	f000 fa1b 	bl	800f42c <I2C_MasterTransmit_TXE>
 800eff6:	e04d      	b.n	800f094 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800eff8:	69fb      	ldr	r3, [r7, #28]
 800effa:	089b      	lsrs	r3, r3, #2
 800effc:	f003 0301 	and.w	r3, r3, #1
 800f000:	2b00      	cmp	r3, #0
 800f002:	f000 80d6 	beq.w	800f1b2 <HAL_I2C_EV_IRQHandler+0x2d6>
 800f006:	697b      	ldr	r3, [r7, #20]
 800f008:	0a5b      	lsrs	r3, r3, #9
 800f00a:	f003 0301 	and.w	r3, r3, #1
 800f00e:	2b00      	cmp	r3, #0
 800f010:	f000 80cf 	beq.w	800f1b2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800f014:	7bbb      	ldrb	r3, [r7, #14]
 800f016:	2b21      	cmp	r3, #33	; 0x21
 800f018:	d103      	bne.n	800f022 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800f01a:	6878      	ldr	r0, [r7, #4]
 800f01c:	f000 faa2 	bl	800f564 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f020:	e0c7      	b.n	800f1b2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800f022:	7bfb      	ldrb	r3, [r7, #15]
 800f024:	2b40      	cmp	r3, #64	; 0x40
 800f026:	f040 80c4 	bne.w	800f1b2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800f02a:	6878      	ldr	r0, [r7, #4]
 800f02c:	f000 fb10 	bl	800f650 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f030:	e0bf      	b.n	800f1b2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	685b      	ldr	r3, [r3, #4]
 800f038:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f03c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f040:	f000 80b7 	beq.w	800f1b2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800f044:	69fb      	ldr	r3, [r7, #28]
 800f046:	099b      	lsrs	r3, r3, #6
 800f048:	f003 0301 	and.w	r3, r3, #1
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d00f      	beq.n	800f070 <HAL_I2C_EV_IRQHandler+0x194>
 800f050:	697b      	ldr	r3, [r7, #20]
 800f052:	0a9b      	lsrs	r3, r3, #10
 800f054:	f003 0301 	and.w	r3, r3, #1
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d009      	beq.n	800f070 <HAL_I2C_EV_IRQHandler+0x194>
 800f05c:	69fb      	ldr	r3, [r7, #28]
 800f05e:	089b      	lsrs	r3, r3, #2
 800f060:	f003 0301 	and.w	r3, r3, #1
 800f064:	2b00      	cmp	r3, #0
 800f066:	d103      	bne.n	800f070 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800f068:	6878      	ldr	r0, [r7, #4]
 800f06a:	f000 fb85 	bl	800f778 <I2C_MasterReceive_RXNE>
 800f06e:	e011      	b.n	800f094 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f070:	69fb      	ldr	r3, [r7, #28]
 800f072:	089b      	lsrs	r3, r3, #2
 800f074:	f003 0301 	and.w	r3, r3, #1
 800f078:	2b00      	cmp	r3, #0
 800f07a:	f000 809a 	beq.w	800f1b2 <HAL_I2C_EV_IRQHandler+0x2d6>
 800f07e:	697b      	ldr	r3, [r7, #20]
 800f080:	0a5b      	lsrs	r3, r3, #9
 800f082:	f003 0301 	and.w	r3, r3, #1
 800f086:	2b00      	cmp	r3, #0
 800f088:	f000 8093 	beq.w	800f1b2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800f08c:	6878      	ldr	r0, [r7, #4]
 800f08e:	f000 fc24 	bl	800f8da <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f092:	e08e      	b.n	800f1b2 <HAL_I2C_EV_IRQHandler+0x2d6>
 800f094:	e08d      	b.n	800f1b2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d004      	beq.n	800f0a8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	695b      	ldr	r3, [r3, #20]
 800f0a4:	61fb      	str	r3, [r7, #28]
 800f0a6:	e007      	b.n	800f0b8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	699b      	ldr	r3, [r3, #24]
 800f0ae:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	695b      	ldr	r3, [r3, #20]
 800f0b6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f0b8:	69fb      	ldr	r3, [r7, #28]
 800f0ba:	085b      	lsrs	r3, r3, #1
 800f0bc:	f003 0301 	and.w	r3, r3, #1
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d012      	beq.n	800f0ea <HAL_I2C_EV_IRQHandler+0x20e>
 800f0c4:	697b      	ldr	r3, [r7, #20]
 800f0c6:	0a5b      	lsrs	r3, r3, #9
 800f0c8:	f003 0301 	and.w	r3, r3, #1
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d00c      	beq.n	800f0ea <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d003      	beq.n	800f0e0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	699b      	ldr	r3, [r3, #24]
 800f0de:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800f0e0:	69b9      	ldr	r1, [r7, #24]
 800f0e2:	6878      	ldr	r0, [r7, #4]
 800f0e4:	f000 ffe2 	bl	80100ac <I2C_Slave_ADDR>
 800f0e8:	e066      	b.n	800f1b8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f0ea:	69fb      	ldr	r3, [r7, #28]
 800f0ec:	091b      	lsrs	r3, r3, #4
 800f0ee:	f003 0301 	and.w	r3, r3, #1
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d009      	beq.n	800f10a <HAL_I2C_EV_IRQHandler+0x22e>
 800f0f6:	697b      	ldr	r3, [r7, #20]
 800f0f8:	0a5b      	lsrs	r3, r3, #9
 800f0fa:	f003 0301 	and.w	r3, r3, #1
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d003      	beq.n	800f10a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800f102:	6878      	ldr	r0, [r7, #4]
 800f104:	f001 f81c 	bl	8010140 <I2C_Slave_STOPF>
 800f108:	e056      	b.n	800f1b8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800f10a:	7bbb      	ldrb	r3, [r7, #14]
 800f10c:	2b21      	cmp	r3, #33	; 0x21
 800f10e:	d002      	beq.n	800f116 <HAL_I2C_EV_IRQHandler+0x23a>
 800f110:	7bbb      	ldrb	r3, [r7, #14]
 800f112:	2b29      	cmp	r3, #41	; 0x29
 800f114:	d125      	bne.n	800f162 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800f116:	69fb      	ldr	r3, [r7, #28]
 800f118:	09db      	lsrs	r3, r3, #7
 800f11a:	f003 0301 	and.w	r3, r3, #1
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d00f      	beq.n	800f142 <HAL_I2C_EV_IRQHandler+0x266>
 800f122:	697b      	ldr	r3, [r7, #20]
 800f124:	0a9b      	lsrs	r3, r3, #10
 800f126:	f003 0301 	and.w	r3, r3, #1
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d009      	beq.n	800f142 <HAL_I2C_EV_IRQHandler+0x266>
 800f12e:	69fb      	ldr	r3, [r7, #28]
 800f130:	089b      	lsrs	r3, r3, #2
 800f132:	f003 0301 	and.w	r3, r3, #1
 800f136:	2b00      	cmp	r3, #0
 800f138:	d103      	bne.n	800f142 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800f13a:	6878      	ldr	r0, [r7, #4]
 800f13c:	f000 fef8 	bl	800ff30 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800f140:	e039      	b.n	800f1b6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f142:	69fb      	ldr	r3, [r7, #28]
 800f144:	089b      	lsrs	r3, r3, #2
 800f146:	f003 0301 	and.w	r3, r3, #1
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d033      	beq.n	800f1b6 <HAL_I2C_EV_IRQHandler+0x2da>
 800f14e:	697b      	ldr	r3, [r7, #20]
 800f150:	0a5b      	lsrs	r3, r3, #9
 800f152:	f003 0301 	and.w	r3, r3, #1
 800f156:	2b00      	cmp	r3, #0
 800f158:	d02d      	beq.n	800f1b6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800f15a:	6878      	ldr	r0, [r7, #4]
 800f15c:	f000 ff25 	bl	800ffaa <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800f160:	e029      	b.n	800f1b6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800f162:	69fb      	ldr	r3, [r7, #28]
 800f164:	099b      	lsrs	r3, r3, #6
 800f166:	f003 0301 	and.w	r3, r3, #1
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d00f      	beq.n	800f18e <HAL_I2C_EV_IRQHandler+0x2b2>
 800f16e:	697b      	ldr	r3, [r7, #20]
 800f170:	0a9b      	lsrs	r3, r3, #10
 800f172:	f003 0301 	and.w	r3, r3, #1
 800f176:	2b00      	cmp	r3, #0
 800f178:	d009      	beq.n	800f18e <HAL_I2C_EV_IRQHandler+0x2b2>
 800f17a:	69fb      	ldr	r3, [r7, #28]
 800f17c:	089b      	lsrs	r3, r3, #2
 800f17e:	f003 0301 	and.w	r3, r3, #1
 800f182:	2b00      	cmp	r3, #0
 800f184:	d103      	bne.n	800f18e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800f186:	6878      	ldr	r0, [r7, #4]
 800f188:	f000 ff30 	bl	800ffec <I2C_SlaveReceive_RXNE>
 800f18c:	e014      	b.n	800f1b8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f18e:	69fb      	ldr	r3, [r7, #28]
 800f190:	089b      	lsrs	r3, r3, #2
 800f192:	f003 0301 	and.w	r3, r3, #1
 800f196:	2b00      	cmp	r3, #0
 800f198:	d00e      	beq.n	800f1b8 <HAL_I2C_EV_IRQHandler+0x2dc>
 800f19a:	697b      	ldr	r3, [r7, #20]
 800f19c:	0a5b      	lsrs	r3, r3, #9
 800f19e:	f003 0301 	and.w	r3, r3, #1
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d008      	beq.n	800f1b8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800f1a6:	6878      	ldr	r0, [r7, #4]
 800f1a8:	f000 ff5e 	bl	8010068 <I2C_SlaveReceive_BTF>
 800f1ac:	e004      	b.n	800f1b8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800f1ae:	bf00      	nop
 800f1b0:	e002      	b.n	800f1b8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f1b2:	bf00      	nop
 800f1b4:	e000      	b.n	800f1b8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800f1b6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800f1b8:	3720      	adds	r7, #32
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	bd80      	pop	{r7, pc}

0800f1be <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800f1be:	b580      	push	{r7, lr}
 800f1c0:	b08a      	sub	sp, #40	; 0x28
 800f1c2:	af00      	add	r7, sp, #0
 800f1c4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	695b      	ldr	r3, [r3, #20]
 800f1cc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	685b      	ldr	r3, [r3, #4]
 800f1d4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f1e0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800f1e2:	6a3b      	ldr	r3, [r7, #32]
 800f1e4:	0a1b      	lsrs	r3, r3, #8
 800f1e6:	f003 0301 	and.w	r3, r3, #1
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d00e      	beq.n	800f20c <HAL_I2C_ER_IRQHandler+0x4e>
 800f1ee:	69fb      	ldr	r3, [r7, #28]
 800f1f0:	0a1b      	lsrs	r3, r3, #8
 800f1f2:	f003 0301 	and.w	r3, r3, #1
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d008      	beq.n	800f20c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800f1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1fc:	f043 0301 	orr.w	r3, r3, #1
 800f200:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f20a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800f20c:	6a3b      	ldr	r3, [r7, #32]
 800f20e:	0a5b      	lsrs	r3, r3, #9
 800f210:	f003 0301 	and.w	r3, r3, #1
 800f214:	2b00      	cmp	r3, #0
 800f216:	d00e      	beq.n	800f236 <HAL_I2C_ER_IRQHandler+0x78>
 800f218:	69fb      	ldr	r3, [r7, #28]
 800f21a:	0a1b      	lsrs	r3, r3, #8
 800f21c:	f003 0301 	and.w	r3, r3, #1
 800f220:	2b00      	cmp	r3, #0
 800f222:	d008      	beq.n	800f236 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800f224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f226:	f043 0302 	orr.w	r3, r3, #2
 800f22a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800f234:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800f236:	6a3b      	ldr	r3, [r7, #32]
 800f238:	0a9b      	lsrs	r3, r3, #10
 800f23a:	f003 0301 	and.w	r3, r3, #1
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d03f      	beq.n	800f2c2 <HAL_I2C_ER_IRQHandler+0x104>
 800f242:	69fb      	ldr	r3, [r7, #28]
 800f244:	0a1b      	lsrs	r3, r3, #8
 800f246:	f003 0301 	and.w	r3, r3, #1
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d039      	beq.n	800f2c2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800f24e:	7efb      	ldrb	r3, [r7, #27]
 800f250:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f256:	b29b      	uxth	r3, r3
 800f258:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f260:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f266:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800f268:	7ebb      	ldrb	r3, [r7, #26]
 800f26a:	2b20      	cmp	r3, #32
 800f26c:	d112      	bne.n	800f294 <HAL_I2C_ER_IRQHandler+0xd6>
 800f26e:	697b      	ldr	r3, [r7, #20]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d10f      	bne.n	800f294 <HAL_I2C_ER_IRQHandler+0xd6>
 800f274:	7cfb      	ldrb	r3, [r7, #19]
 800f276:	2b21      	cmp	r3, #33	; 0x21
 800f278:	d008      	beq.n	800f28c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800f27a:	7cfb      	ldrb	r3, [r7, #19]
 800f27c:	2b29      	cmp	r3, #41	; 0x29
 800f27e:	d005      	beq.n	800f28c <HAL_I2C_ER_IRQHandler+0xce>
 800f280:	7cfb      	ldrb	r3, [r7, #19]
 800f282:	2b28      	cmp	r3, #40	; 0x28
 800f284:	d106      	bne.n	800f294 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	2b21      	cmp	r3, #33	; 0x21
 800f28a:	d103      	bne.n	800f294 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800f28c:	6878      	ldr	r0, [r7, #4]
 800f28e:	f001 f887 	bl	80103a0 <I2C_Slave_AF>
 800f292:	e016      	b.n	800f2c2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800f29c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800f29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2a0:	f043 0304 	orr.w	r3, r3, #4
 800f2a4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800f2a6:	7efb      	ldrb	r3, [r7, #27]
 800f2a8:	2b10      	cmp	r3, #16
 800f2aa:	d002      	beq.n	800f2b2 <HAL_I2C_ER_IRQHandler+0xf4>
 800f2ac:	7efb      	ldrb	r3, [r7, #27]
 800f2ae:	2b40      	cmp	r3, #64	; 0x40
 800f2b0:	d107      	bne.n	800f2c2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	681a      	ldr	r2, [r3, #0]
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f2c0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800f2c2:	6a3b      	ldr	r3, [r7, #32]
 800f2c4:	0adb      	lsrs	r3, r3, #11
 800f2c6:	f003 0301 	and.w	r3, r3, #1
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d00e      	beq.n	800f2ec <HAL_I2C_ER_IRQHandler+0x12e>
 800f2ce:	69fb      	ldr	r3, [r7, #28]
 800f2d0:	0a1b      	lsrs	r3, r3, #8
 800f2d2:	f003 0301 	and.w	r3, r3, #1
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d008      	beq.n	800f2ec <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800f2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2dc:	f043 0308 	orr.w	r3, r3, #8
 800f2e0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800f2ea:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800f2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d008      	beq.n	800f304 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2f8:	431a      	orrs	r2, r3
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800f2fe:	6878      	ldr	r0, [r7, #4]
 800f300:	f001 f8be 	bl	8010480 <I2C_ITError>
  }
}
 800f304:	bf00      	nop
 800f306:	3728      	adds	r7, #40	; 0x28
 800f308:	46bd      	mov	sp, r7
 800f30a:	bd80      	pop	{r7, pc}

0800f30c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f30c:	b480      	push	{r7}
 800f30e:	b083      	sub	sp, #12
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800f314:	bf00      	nop
 800f316:	370c      	adds	r7, #12
 800f318:	46bd      	mov	sp, r7
 800f31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31e:	4770      	bx	lr

0800f320 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f320:	b480      	push	{r7}
 800f322:	b083      	sub	sp, #12
 800f324:	af00      	add	r7, sp, #0
 800f326:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800f328:	bf00      	nop
 800f32a:	370c      	adds	r7, #12
 800f32c:	46bd      	mov	sp, r7
 800f32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f332:	4770      	bx	lr

0800f334 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f334:	b480      	push	{r7}
 800f336:	b083      	sub	sp, #12
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800f33c:	bf00      	nop
 800f33e:	370c      	adds	r7, #12
 800f340:	46bd      	mov	sp, r7
 800f342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f346:	4770      	bx	lr

0800f348 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f348:	b480      	push	{r7}
 800f34a:	b083      	sub	sp, #12
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800f350:	bf00      	nop
 800f352:	370c      	adds	r7, #12
 800f354:	46bd      	mov	sp, r7
 800f356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35a:	4770      	bx	lr

0800f35c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800f35c:	b480      	push	{r7}
 800f35e:	b083      	sub	sp, #12
 800f360:	af00      	add	r7, sp, #0
 800f362:	6078      	str	r0, [r7, #4]
 800f364:	460b      	mov	r3, r1
 800f366:	70fb      	strb	r3, [r7, #3]
 800f368:	4613      	mov	r3, r2
 800f36a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800f36c:	bf00      	nop
 800f36e:	370c      	adds	r7, #12
 800f370:	46bd      	mov	sp, r7
 800f372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f376:	4770      	bx	lr

0800f378 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f378:	b480      	push	{r7}
 800f37a:	b083      	sub	sp, #12
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800f380:	bf00      	nop
 800f382:	370c      	adds	r7, #12
 800f384:	46bd      	mov	sp, r7
 800f386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38a:	4770      	bx	lr

0800f38c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f38c:	b480      	push	{r7}
 800f38e:	b083      	sub	sp, #12
 800f390:	af00      	add	r7, sp, #0
 800f392:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800f394:	bf00      	nop
 800f396:	370c      	adds	r7, #12
 800f398:	46bd      	mov	sp, r7
 800f39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39e:	4770      	bx	lr

0800f3a0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f3a0:	b480      	push	{r7}
 800f3a2:	b083      	sub	sp, #12
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800f3a8:	bf00      	nop
 800f3aa:	370c      	adds	r7, #12
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b2:	4770      	bx	lr

0800f3b4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800f3b4:	b480      	push	{r7}
 800f3b6:	b083      	sub	sp, #12
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800f3bc:	bf00      	nop
 800f3be:	370c      	adds	r7, #12
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c6:	4770      	bx	lr

0800f3c8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f3c8:	b480      	push	{r7}
 800f3ca:	b083      	sub	sp, #12
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800f3d0:	bf00      	nop
 800f3d2:	370c      	adds	r7, #12
 800f3d4:	46bd      	mov	sp, r7
 800f3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3da:	4770      	bx	lr

0800f3dc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800f3dc:	b480      	push	{r7}
 800f3de:	b083      	sub	sp, #12
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f3ea:	b2db      	uxtb	r3, r3
}
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	370c      	adds	r7, #12
 800f3f0:	46bd      	mov	sp, r7
 800f3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f6:	4770      	bx	lr

0800f3f8 <HAL_I2C_GetMode>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL mode
  */
HAL_I2C_ModeTypeDef HAL_I2C_GetMode(I2C_HandleTypeDef *hi2c)
{
 800f3f8:	b480      	push	{r7}
 800f3fa:	b083      	sub	sp, #12
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	6078      	str	r0, [r7, #4]
  return hi2c->Mode;
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f406:	b2db      	uxtb	r3, r3
}
 800f408:	4618      	mov	r0, r3
 800f40a:	370c      	adds	r7, #12
 800f40c:	46bd      	mov	sp, r7
 800f40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f412:	4770      	bx	lr

0800f414 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800f414:	b480      	push	{r7}
 800f416:	b083      	sub	sp, #12
 800f418:	af00      	add	r7, sp, #0
 800f41a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800f420:	4618      	mov	r0, r3
 800f422:	370c      	adds	r7, #12
 800f424:	46bd      	mov	sp, r7
 800f426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f42a:	4770      	bx	lr

0800f42c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b084      	sub	sp, #16
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f43a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f442:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f448:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d150      	bne.n	800f4f4 <I2C_MasterTransmit_TXE+0xc8>
 800f452:	7bfb      	ldrb	r3, [r7, #15]
 800f454:	2b21      	cmp	r3, #33	; 0x21
 800f456:	d14d      	bne.n	800f4f4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800f458:	68bb      	ldr	r3, [r7, #8]
 800f45a:	2b08      	cmp	r3, #8
 800f45c:	d01d      	beq.n	800f49a <I2C_MasterTransmit_TXE+0x6e>
 800f45e:	68bb      	ldr	r3, [r7, #8]
 800f460:	2b20      	cmp	r3, #32
 800f462:	d01a      	beq.n	800f49a <I2C_MasterTransmit_TXE+0x6e>
 800f464:	68bb      	ldr	r3, [r7, #8]
 800f466:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800f46a:	d016      	beq.n	800f49a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	685a      	ldr	r2, [r3, #4]
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f47a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	2211      	movs	r2, #17
 800f480:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	2200      	movs	r2, #0
 800f486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	2220      	movs	r2, #32
 800f48e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800f492:	6878      	ldr	r0, [r7, #4]
 800f494:	f7ff ff3a 	bl	800f30c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800f498:	e060      	b.n	800f55c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	685a      	ldr	r2, [r3, #4]
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f4a8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	681a      	ldr	r2, [r3, #0]
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f4b8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	2200      	movs	r2, #0
 800f4be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	2220      	movs	r2, #32
 800f4c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f4ce:	b2db      	uxtb	r3, r3
 800f4d0:	2b40      	cmp	r3, #64	; 0x40
 800f4d2:	d107      	bne.n	800f4e4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800f4dc:	6878      	ldr	r0, [r7, #4]
 800f4de:	f7ff ff55 	bl	800f38c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800f4e2:	e03b      	b.n	800f55c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800f4ec:	6878      	ldr	r0, [r7, #4]
 800f4ee:	f7ff ff0d 	bl	800f30c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800f4f2:	e033      	b.n	800f55c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800f4f4:	7bfb      	ldrb	r3, [r7, #15]
 800f4f6:	2b21      	cmp	r3, #33	; 0x21
 800f4f8:	d005      	beq.n	800f506 <I2C_MasterTransmit_TXE+0xda>
 800f4fa:	7bbb      	ldrb	r3, [r7, #14]
 800f4fc:	2b40      	cmp	r3, #64	; 0x40
 800f4fe:	d12d      	bne.n	800f55c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800f500:	7bfb      	ldrb	r3, [r7, #15]
 800f502:	2b22      	cmp	r3, #34	; 0x22
 800f504:	d12a      	bne.n	800f55c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f50a:	b29b      	uxth	r3, r3
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d108      	bne.n	800f522 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	685a      	ldr	r2, [r3, #4]
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f51e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800f520:	e01c      	b.n	800f55c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f528:	b2db      	uxtb	r3, r3
 800f52a:	2b40      	cmp	r3, #64	; 0x40
 800f52c:	d103      	bne.n	800f536 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800f52e:	6878      	ldr	r0, [r7, #4]
 800f530:	f000 f88e 	bl	800f650 <I2C_MemoryTransmit_TXE_BTF>
}
 800f534:	e012      	b.n	800f55c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f53a:	781a      	ldrb	r2, [r3, #0]
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f546:	1c5a      	adds	r2, r3, #1
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f550:	b29b      	uxth	r3, r3
 800f552:	3b01      	subs	r3, #1
 800f554:	b29a      	uxth	r2, r3
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800f55a:	e7ff      	b.n	800f55c <I2C_MasterTransmit_TXE+0x130>
 800f55c:	bf00      	nop
 800f55e:	3710      	adds	r7, #16
 800f560:	46bd      	mov	sp, r7
 800f562:	bd80      	pop	{r7, pc}

0800f564 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800f564:	b580      	push	{r7, lr}
 800f566:	b084      	sub	sp, #16
 800f568:	af00      	add	r7, sp, #0
 800f56a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f570:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f578:	b2db      	uxtb	r3, r3
 800f57a:	2b21      	cmp	r3, #33	; 0x21
 800f57c:	d164      	bne.n	800f648 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f582:	b29b      	uxth	r3, r3
 800f584:	2b00      	cmp	r3, #0
 800f586:	d012      	beq.n	800f5ae <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f58c:	781a      	ldrb	r2, [r3, #0]
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f598:	1c5a      	adds	r2, r3, #1
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f5a2:	b29b      	uxth	r3, r3
 800f5a4:	3b01      	subs	r3, #1
 800f5a6:	b29a      	uxth	r2, r3
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800f5ac:	e04c      	b.n	800f648 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	2b08      	cmp	r3, #8
 800f5b2:	d01d      	beq.n	800f5f0 <I2C_MasterTransmit_BTF+0x8c>
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	2b20      	cmp	r3, #32
 800f5b8:	d01a      	beq.n	800f5f0 <I2C_MasterTransmit_BTF+0x8c>
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800f5c0:	d016      	beq.n	800f5f0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	685a      	ldr	r2, [r3, #4]
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f5d0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	2211      	movs	r2, #17
 800f5d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	2200      	movs	r2, #0
 800f5dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	2220      	movs	r2, #32
 800f5e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800f5e8:	6878      	ldr	r0, [r7, #4]
 800f5ea:	f7ff fe8f 	bl	800f30c <HAL_I2C_MasterTxCpltCallback>
}
 800f5ee:	e02b      	b.n	800f648 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	685a      	ldr	r2, [r3, #4]
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f5fe:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	681a      	ldr	r2, [r3, #0]
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f60e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	2200      	movs	r2, #0
 800f614:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	2220      	movs	r2, #32
 800f61a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f624:	b2db      	uxtb	r3, r3
 800f626:	2b40      	cmp	r3, #64	; 0x40
 800f628:	d107      	bne.n	800f63a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	2200      	movs	r2, #0
 800f62e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800f632:	6878      	ldr	r0, [r7, #4]
 800f634:	f7ff feaa 	bl	800f38c <HAL_I2C_MemTxCpltCallback>
}
 800f638:	e006      	b.n	800f648 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	2200      	movs	r2, #0
 800f63e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800f642:	6878      	ldr	r0, [r7, #4]
 800f644:	f7ff fe62 	bl	800f30c <HAL_I2C_MasterTxCpltCallback>
}
 800f648:	bf00      	nop
 800f64a:	3710      	adds	r7, #16
 800f64c:	46bd      	mov	sp, r7
 800f64e:	bd80      	pop	{r7, pc}

0800f650 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800f650:	b580      	push	{r7, lr}
 800f652:	b084      	sub	sp, #16
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f65e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f664:	2b00      	cmp	r3, #0
 800f666:	d11d      	bne.n	800f6a4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f66c:	2b01      	cmp	r3, #1
 800f66e:	d10b      	bne.n	800f688 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f674:	b2da      	uxtb	r2, r3
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f680:	1c9a      	adds	r2, r3, #2
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800f686:	e073      	b.n	800f770 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f68c:	b29b      	uxth	r3, r3
 800f68e:	121b      	asrs	r3, r3, #8
 800f690:	b2da      	uxtb	r2, r3
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f69c:	1c5a      	adds	r2, r3, #1
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	651a      	str	r2, [r3, #80]	; 0x50
}
 800f6a2:	e065      	b.n	800f770 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f6a8:	2b01      	cmp	r3, #1
 800f6aa:	d10b      	bne.n	800f6c4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f6b0:	b2da      	uxtb	r2, r3
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f6bc:	1c5a      	adds	r2, r3, #1
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	651a      	str	r2, [r3, #80]	; 0x50
}
 800f6c2:	e055      	b.n	800f770 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f6c8:	2b02      	cmp	r3, #2
 800f6ca:	d151      	bne.n	800f770 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800f6cc:	7bfb      	ldrb	r3, [r7, #15]
 800f6ce:	2b22      	cmp	r3, #34	; 0x22
 800f6d0:	d10d      	bne.n	800f6ee <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	681a      	ldr	r2, [r3, #0]
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f6e0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f6e6:	1c5a      	adds	r2, r3, #1
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	651a      	str	r2, [r3, #80]	; 0x50
}
 800f6ec:	e040      	b.n	800f770 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f6f2:	b29b      	uxth	r3, r3
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d015      	beq.n	800f724 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800f6f8:	7bfb      	ldrb	r3, [r7, #15]
 800f6fa:	2b21      	cmp	r3, #33	; 0x21
 800f6fc:	d112      	bne.n	800f724 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f702:	781a      	ldrb	r2, [r3, #0]
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f70e:	1c5a      	adds	r2, r3, #1
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f718:	b29b      	uxth	r3, r3
 800f71a:	3b01      	subs	r3, #1
 800f71c:	b29a      	uxth	r2, r3
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800f722:	e025      	b.n	800f770 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f728:	b29b      	uxth	r3, r3
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d120      	bne.n	800f770 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800f72e:	7bfb      	ldrb	r3, [r7, #15]
 800f730:	2b21      	cmp	r3, #33	; 0x21
 800f732:	d11d      	bne.n	800f770 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	685a      	ldr	r2, [r3, #4]
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f742:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	681a      	ldr	r2, [r3, #0]
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f752:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	2200      	movs	r2, #0
 800f758:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	2220      	movs	r2, #32
 800f75e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	2200      	movs	r2, #0
 800f766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800f76a:	6878      	ldr	r0, [r7, #4]
 800f76c:	f7ff fe0e 	bl	800f38c <HAL_I2C_MemTxCpltCallback>
}
 800f770:	bf00      	nop
 800f772:	3710      	adds	r7, #16
 800f774:	46bd      	mov	sp, r7
 800f776:	bd80      	pop	{r7, pc}

0800f778 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800f778:	b580      	push	{r7, lr}
 800f77a:	b084      	sub	sp, #16
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f786:	b2db      	uxtb	r3, r3
 800f788:	2b22      	cmp	r3, #34	; 0x22
 800f78a:	f040 80a2 	bne.w	800f8d2 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f792:	b29b      	uxth	r3, r3
 800f794:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	2b03      	cmp	r3, #3
 800f79a:	d921      	bls.n	800f7e0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	691a      	ldr	r2, [r3, #16]
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7a6:	b2d2      	uxtb	r2, r2
 800f7a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7ae:	1c5a      	adds	r2, r3, #1
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f7b8:	b29b      	uxth	r3, r3
 800f7ba:	3b01      	subs	r3, #1
 800f7bc:	b29a      	uxth	r2, r3
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f7c6:	b29b      	uxth	r3, r3
 800f7c8:	2b03      	cmp	r3, #3
 800f7ca:	f040 8082 	bne.w	800f8d2 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	685a      	ldr	r2, [r3, #4]
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f7dc:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800f7de:	e078      	b.n	800f8d2 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7e4:	2b02      	cmp	r3, #2
 800f7e6:	d074      	beq.n	800f8d2 <I2C_MasterReceive_RXNE+0x15a>
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	2b01      	cmp	r3, #1
 800f7ec:	d002      	beq.n	800f7f4 <I2C_MasterReceive_RXNE+0x7c>
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d16e      	bne.n	800f8d2 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800f7f4:	6878      	ldr	r0, [r7, #4]
 800f7f6:	f001 fd92 	bl	801131e <I2C_WaitOnSTOPRequestThroughIT>
 800f7fa:	4603      	mov	r3, r0
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d142      	bne.n	800f886 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	681a      	ldr	r2, [r3, #0]
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f80e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	685a      	ldr	r2, [r3, #4]
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f81e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	691a      	ldr	r2, [r3, #16]
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f82a:	b2d2      	uxtb	r2, r2
 800f82c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f832:	1c5a      	adds	r2, r3, #1
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f83c:	b29b      	uxth	r3, r3
 800f83e:	3b01      	subs	r3, #1
 800f840:	b29a      	uxth	r2, r3
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	2220      	movs	r2, #32
 800f84a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f854:	b2db      	uxtb	r3, r3
 800f856:	2b40      	cmp	r3, #64	; 0x40
 800f858:	d10a      	bne.n	800f870 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	2200      	movs	r2, #0
 800f85e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	2200      	movs	r2, #0
 800f866:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800f868:	6878      	ldr	r0, [r7, #4]
 800f86a:	f7ff fd99 	bl	800f3a0 <HAL_I2C_MemRxCpltCallback>
}
 800f86e:	e030      	b.n	800f8d2 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	2200      	movs	r2, #0
 800f874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	2212      	movs	r2, #18
 800f87c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800f87e:	6878      	ldr	r0, [r7, #4]
 800f880:	f7ff fd4e 	bl	800f320 <HAL_I2C_MasterRxCpltCallback>
}
 800f884:	e025      	b.n	800f8d2 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	685a      	ldr	r2, [r3, #4]
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f894:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	691a      	ldr	r2, [r3, #16]
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8a0:	b2d2      	uxtb	r2, r2
 800f8a2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8a8:	1c5a      	adds	r2, r3, #1
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f8b2:	b29b      	uxth	r3, r3
 800f8b4:	3b01      	subs	r3, #1
 800f8b6:	b29a      	uxth	r2, r3
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	2220      	movs	r2, #32
 800f8c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800f8cc:	6878      	ldr	r0, [r7, #4]
 800f8ce:	f7ff fd71 	bl	800f3b4 <HAL_I2C_ErrorCallback>
}
 800f8d2:	bf00      	nop
 800f8d4:	3710      	adds	r7, #16
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	bd80      	pop	{r7, pc}

0800f8da <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800f8da:	b580      	push	{r7, lr}
 800f8dc:	b084      	sub	sp, #16
 800f8de:	af00      	add	r7, sp, #0
 800f8e0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8e6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f8ec:	b29b      	uxth	r3, r3
 800f8ee:	2b04      	cmp	r3, #4
 800f8f0:	d11b      	bne.n	800f92a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	685a      	ldr	r2, [r3, #4]
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f900:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	691a      	ldr	r2, [r3, #16]
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f90c:	b2d2      	uxtb	r2, r2
 800f90e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f914:	1c5a      	adds	r2, r3, #1
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f91e:	b29b      	uxth	r3, r3
 800f920:	3b01      	subs	r3, #1
 800f922:	b29a      	uxth	r2, r3
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800f928:	e0bd      	b.n	800faa6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f92e:	b29b      	uxth	r3, r3
 800f930:	2b03      	cmp	r3, #3
 800f932:	d129      	bne.n	800f988 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	685a      	ldr	r2, [r3, #4]
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f942:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	2b04      	cmp	r3, #4
 800f948:	d00a      	beq.n	800f960 <I2C_MasterReceive_BTF+0x86>
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	2b02      	cmp	r3, #2
 800f94e:	d007      	beq.n	800f960 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	681a      	ldr	r2, [r3, #0]
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f95e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	691a      	ldr	r2, [r3, #16]
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f96a:	b2d2      	uxtb	r2, r2
 800f96c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f972:	1c5a      	adds	r2, r3, #1
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f97c:	b29b      	uxth	r3, r3
 800f97e:	3b01      	subs	r3, #1
 800f980:	b29a      	uxth	r2, r3
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800f986:	e08e      	b.n	800faa6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f98c:	b29b      	uxth	r3, r3
 800f98e:	2b02      	cmp	r3, #2
 800f990:	d176      	bne.n	800fa80 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	2b01      	cmp	r3, #1
 800f996:	d002      	beq.n	800f99e <I2C_MasterReceive_BTF+0xc4>
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	2b10      	cmp	r3, #16
 800f99c:	d108      	bne.n	800f9b0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	681a      	ldr	r2, [r3, #0]
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f9ac:	601a      	str	r2, [r3, #0]
 800f9ae:	e019      	b.n	800f9e4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	2b04      	cmp	r3, #4
 800f9b4:	d002      	beq.n	800f9bc <I2C_MasterReceive_BTF+0xe2>
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	2b02      	cmp	r3, #2
 800f9ba:	d108      	bne.n	800f9ce <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	681a      	ldr	r2, [r3, #0]
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f9ca:	601a      	str	r2, [r3, #0]
 800f9cc:	e00a      	b.n	800f9e4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	2b10      	cmp	r3, #16
 800f9d2:	d007      	beq.n	800f9e4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	681a      	ldr	r2, [r3, #0]
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f9e2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	691a      	ldr	r2, [r3, #16]
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9ee:	b2d2      	uxtb	r2, r2
 800f9f0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9f6:	1c5a      	adds	r2, r3, #1
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fa00:	b29b      	uxth	r3, r3
 800fa02:	3b01      	subs	r3, #1
 800fa04:	b29a      	uxth	r2, r3
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	691a      	ldr	r2, [r3, #16]
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa14:	b2d2      	uxtb	r2, r2
 800fa16:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa1c:	1c5a      	adds	r2, r3, #1
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fa26:	b29b      	uxth	r3, r3
 800fa28:	3b01      	subs	r3, #1
 800fa2a:	b29a      	uxth	r2, r3
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	685a      	ldr	r2, [r3, #4]
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800fa3e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	2220      	movs	r2, #32
 800fa44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fa4e:	b2db      	uxtb	r3, r3
 800fa50:	2b40      	cmp	r3, #64	; 0x40
 800fa52:	d10a      	bne.n	800fa6a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	2200      	movs	r2, #0
 800fa58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	2200      	movs	r2, #0
 800fa60:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800fa62:	6878      	ldr	r0, [r7, #4]
 800fa64:	f7ff fc9c 	bl	800f3a0 <HAL_I2C_MemRxCpltCallback>
}
 800fa68:	e01d      	b.n	800faa6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	2200      	movs	r2, #0
 800fa6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	2212      	movs	r2, #18
 800fa76:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800fa78:	6878      	ldr	r0, [r7, #4]
 800fa7a:	f7ff fc51 	bl	800f320 <HAL_I2C_MasterRxCpltCallback>
}
 800fa7e:	e012      	b.n	800faa6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	691a      	ldr	r2, [r3, #16]
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa8a:	b2d2      	uxtb	r2, r2
 800fa8c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa92:	1c5a      	adds	r2, r3, #1
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fa9c:	b29b      	uxth	r3, r3
 800fa9e:	3b01      	subs	r3, #1
 800faa0:	b29a      	uxth	r2, r3
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800faa6:	bf00      	nop
 800faa8:	3710      	adds	r7, #16
 800faaa:	46bd      	mov	sp, r7
 800faac:	bd80      	pop	{r7, pc}

0800faae <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800faae:	b480      	push	{r7}
 800fab0:	b083      	sub	sp, #12
 800fab2:	af00      	add	r7, sp, #0
 800fab4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fabc:	b2db      	uxtb	r3, r3
 800fabe:	2b40      	cmp	r3, #64	; 0x40
 800fac0:	d117      	bne.n	800faf2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d109      	bne.n	800fade <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800face:	b2db      	uxtb	r3, r3
 800fad0:	461a      	mov	r2, r3
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800fada:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800fadc:	e067      	b.n	800fbae <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fae2:	b2db      	uxtb	r3, r3
 800fae4:	f043 0301 	orr.w	r3, r3, #1
 800fae8:	b2da      	uxtb	r2, r3
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	611a      	str	r2, [r3, #16]
}
 800faf0:	e05d      	b.n	800fbae <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	691b      	ldr	r3, [r3, #16]
 800faf6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fafa:	d133      	bne.n	800fb64 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fb02:	b2db      	uxtb	r3, r3
 800fb04:	2b21      	cmp	r3, #33	; 0x21
 800fb06:	d109      	bne.n	800fb1c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb0c:	b2db      	uxtb	r3, r3
 800fb0e:	461a      	mov	r2, r3
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800fb18:	611a      	str	r2, [r3, #16]
 800fb1a:	e008      	b.n	800fb2e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb20:	b2db      	uxtb	r3, r3
 800fb22:	f043 0301 	orr.w	r3, r3, #1
 800fb26:	b2da      	uxtb	r2, r3
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d004      	beq.n	800fb40 <I2C_Master_SB+0x92>
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d108      	bne.n	800fb52 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d032      	beq.n	800fbae <I2C_Master_SB+0x100>
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d02d      	beq.n	800fbae <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	685a      	ldr	r2, [r3, #4]
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fb60:	605a      	str	r2, [r3, #4]
}
 800fb62:	e024      	b.n	800fbae <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d10e      	bne.n	800fb8a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb70:	b29b      	uxth	r3, r3
 800fb72:	11db      	asrs	r3, r3, #7
 800fb74:	b2db      	uxtb	r3, r3
 800fb76:	f003 0306 	and.w	r3, r3, #6
 800fb7a:	b2db      	uxtb	r3, r3
 800fb7c:	f063 030f 	orn	r3, r3, #15
 800fb80:	b2da      	uxtb	r2, r3
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	611a      	str	r2, [r3, #16]
}
 800fb88:	e011      	b.n	800fbae <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb8e:	2b01      	cmp	r3, #1
 800fb90:	d10d      	bne.n	800fbae <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb96:	b29b      	uxth	r3, r3
 800fb98:	11db      	asrs	r3, r3, #7
 800fb9a:	b2db      	uxtb	r3, r3
 800fb9c:	f003 0306 	and.w	r3, r3, #6
 800fba0:	b2db      	uxtb	r3, r3
 800fba2:	f063 030e 	orn	r3, r3, #14
 800fba6:	b2da      	uxtb	r2, r3
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	611a      	str	r2, [r3, #16]
}
 800fbae:	bf00      	nop
 800fbb0:	370c      	adds	r7, #12
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb8:	4770      	bx	lr

0800fbba <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800fbba:	b480      	push	{r7}
 800fbbc:	b083      	sub	sp, #12
 800fbbe:	af00      	add	r7, sp, #0
 800fbc0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fbc6:	b2da      	uxtb	r2, r3
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d004      	beq.n	800fbe0 <I2C_Master_ADD10+0x26>
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fbda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d108      	bne.n	800fbf2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d00c      	beq.n	800fc02 <I2C_Master_ADD10+0x48>
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d007      	beq.n	800fc02 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	685a      	ldr	r2, [r3, #4]
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fc00:	605a      	str	r2, [r3, #4]
  }
}
 800fc02:	bf00      	nop
 800fc04:	370c      	adds	r7, #12
 800fc06:	46bd      	mov	sp, r7
 800fc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc0c:	4770      	bx	lr

0800fc0e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800fc0e:	b480      	push	{r7}
 800fc10:	b091      	sub	sp, #68	; 0x44
 800fc12:	af00      	add	r7, sp, #0
 800fc14:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fc1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc24:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc2a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fc32:	b2db      	uxtb	r3, r3
 800fc34:	2b22      	cmp	r3, #34	; 0x22
 800fc36:	f040 8169 	bne.w	800ff0c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d10f      	bne.n	800fc62 <I2C_Master_ADDR+0x54>
 800fc42:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fc46:	2b40      	cmp	r3, #64	; 0x40
 800fc48:	d10b      	bne.n	800fc62 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	60fb      	str	r3, [r7, #12]
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	695b      	ldr	r3, [r3, #20]
 800fc54:	60fb      	str	r3, [r7, #12]
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	699b      	ldr	r3, [r3, #24]
 800fc5c:	60fb      	str	r3, [r7, #12]
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	e160      	b.n	800ff24 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d11d      	bne.n	800fca6 <I2C_Master_ADDR+0x98>
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	691b      	ldr	r3, [r3, #16]
 800fc6e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800fc72:	d118      	bne.n	800fca6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fc74:	2300      	movs	r3, #0
 800fc76:	613b      	str	r3, [r7, #16]
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	695b      	ldr	r3, [r3, #20]
 800fc7e:	613b      	str	r3, [r7, #16]
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	699b      	ldr	r3, [r3, #24]
 800fc86:	613b      	str	r3, [r7, #16]
 800fc88:	693b      	ldr	r3, [r7, #16]

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	681a      	ldr	r2, [r3, #0]
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fc98:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc9e:	1c5a      	adds	r2, r3, #1
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	651a      	str	r2, [r3, #80]	; 0x50
 800fca4:	e13e      	b.n	800ff24 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fcaa:	b29b      	uxth	r3, r3
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d113      	bne.n	800fcd8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	617b      	str	r3, [r7, #20]
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	695b      	ldr	r3, [r3, #20]
 800fcba:	617b      	str	r3, [r7, #20]
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	699b      	ldr	r3, [r3, #24]
 800fcc2:	617b      	str	r3, [r7, #20]
 800fcc4:	697b      	ldr	r3, [r7, #20]

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	681a      	ldr	r2, [r3, #0]
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fcd4:	601a      	str	r2, [r3, #0]
 800fcd6:	e115      	b.n	800ff04 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fcdc:	b29b      	uxth	r3, r3
 800fcde:	2b01      	cmp	r3, #1
 800fce0:	f040 808a 	bne.w	800fdf8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800fce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fce6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800fcea:	d137      	bne.n	800fd5c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	681a      	ldr	r2, [r3, #0]
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fcfa:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	685b      	ldr	r3, [r3, #4]
 800fd02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fd06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fd0a:	d113      	bne.n	800fd34 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	681a      	ldr	r2, [r3, #0]
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fd1a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fd1c:	2300      	movs	r3, #0
 800fd1e:	61bb      	str	r3, [r7, #24]
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	695b      	ldr	r3, [r3, #20]
 800fd26:	61bb      	str	r3, [r7, #24]
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	699b      	ldr	r3, [r3, #24]
 800fd2e:	61bb      	str	r3, [r7, #24]
 800fd30:	69bb      	ldr	r3, [r7, #24]
 800fd32:	e0e7      	b.n	800ff04 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fd34:	2300      	movs	r3, #0
 800fd36:	61fb      	str	r3, [r7, #28]
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	695b      	ldr	r3, [r3, #20]
 800fd3e:	61fb      	str	r3, [r7, #28]
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	699b      	ldr	r3, [r3, #24]
 800fd46:	61fb      	str	r3, [r7, #28]
 800fd48:	69fb      	ldr	r3, [r7, #28]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	681a      	ldr	r2, [r3, #0]
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fd58:	601a      	str	r2, [r3, #0]
 800fd5a:	e0d3      	b.n	800ff04 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800fd5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd5e:	2b08      	cmp	r3, #8
 800fd60:	d02e      	beq.n	800fdc0 <I2C_Master_ADDR+0x1b2>
 800fd62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd64:	2b20      	cmp	r3, #32
 800fd66:	d02b      	beq.n	800fdc0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800fd68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd6a:	2b12      	cmp	r3, #18
 800fd6c:	d102      	bne.n	800fd74 <I2C_Master_ADDR+0x166>
 800fd6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd70:	2b01      	cmp	r3, #1
 800fd72:	d125      	bne.n	800fdc0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800fd74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd76:	2b04      	cmp	r3, #4
 800fd78:	d00e      	beq.n	800fd98 <I2C_Master_ADDR+0x18a>
 800fd7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd7c:	2b02      	cmp	r3, #2
 800fd7e:	d00b      	beq.n	800fd98 <I2C_Master_ADDR+0x18a>
 800fd80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd82:	2b10      	cmp	r3, #16
 800fd84:	d008      	beq.n	800fd98 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	681a      	ldr	r2, [r3, #0]
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fd94:	601a      	str	r2, [r3, #0]
 800fd96:	e007      	b.n	800fda8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	681a      	ldr	r2, [r3, #0]
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fda6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fda8:	2300      	movs	r3, #0
 800fdaa:	623b      	str	r3, [r7, #32]
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	695b      	ldr	r3, [r3, #20]
 800fdb2:	623b      	str	r3, [r7, #32]
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	699b      	ldr	r3, [r3, #24]
 800fdba:	623b      	str	r3, [r7, #32]
 800fdbc:	6a3b      	ldr	r3, [r7, #32]
 800fdbe:	e0a1      	b.n	800ff04 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	681a      	ldr	r2, [r3, #0]
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fdce:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	627b      	str	r3, [r7, #36]	; 0x24
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	695b      	ldr	r3, [r3, #20]
 800fdda:	627b      	str	r3, [r7, #36]	; 0x24
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	699b      	ldr	r3, [r3, #24]
 800fde2:	627b      	str	r3, [r7, #36]	; 0x24
 800fde4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	681a      	ldr	r2, [r3, #0]
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fdf4:	601a      	str	r2, [r3, #0]
 800fdf6:	e085      	b.n	800ff04 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fdfc:	b29b      	uxth	r3, r3
 800fdfe:	2b02      	cmp	r3, #2
 800fe00:	d14d      	bne.n	800fe9e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800fe02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe04:	2b04      	cmp	r3, #4
 800fe06:	d016      	beq.n	800fe36 <I2C_Master_ADDR+0x228>
 800fe08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe0a:	2b02      	cmp	r3, #2
 800fe0c:	d013      	beq.n	800fe36 <I2C_Master_ADDR+0x228>
 800fe0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe10:	2b10      	cmp	r3, #16
 800fe12:	d010      	beq.n	800fe36 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	681a      	ldr	r2, [r3, #0]
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fe22:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	681a      	ldr	r2, [r3, #0]
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fe32:	601a      	str	r2, [r3, #0]
 800fe34:	e007      	b.n	800fe46 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	681a      	ldr	r2, [r3, #0]
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fe44:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	685b      	ldr	r3, [r3, #4]
 800fe4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fe50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fe54:	d117      	bne.n	800fe86 <I2C_Master_ADDR+0x278>
 800fe56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800fe5c:	d00b      	beq.n	800fe76 <I2C_Master_ADDR+0x268>
 800fe5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe60:	2b01      	cmp	r3, #1
 800fe62:	d008      	beq.n	800fe76 <I2C_Master_ADDR+0x268>
 800fe64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe66:	2b08      	cmp	r3, #8
 800fe68:	d005      	beq.n	800fe76 <I2C_Master_ADDR+0x268>
 800fe6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe6c:	2b10      	cmp	r3, #16
 800fe6e:	d002      	beq.n	800fe76 <I2C_Master_ADDR+0x268>
 800fe70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe72:	2b20      	cmp	r3, #32
 800fe74:	d107      	bne.n	800fe86 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	685a      	ldr	r2, [r3, #4]
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800fe84:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fe86:	2300      	movs	r3, #0
 800fe88:	62bb      	str	r3, [r7, #40]	; 0x28
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	695b      	ldr	r3, [r3, #20]
 800fe90:	62bb      	str	r3, [r7, #40]	; 0x28
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	699b      	ldr	r3, [r3, #24]
 800fe98:	62bb      	str	r3, [r7, #40]	; 0x28
 800fe9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe9c:	e032      	b.n	800ff04 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	681a      	ldr	r2, [r3, #0]
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800feac:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	685b      	ldr	r3, [r3, #4]
 800feb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800feb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800febc:	d117      	bne.n	800feee <I2C_Master_ADDR+0x2e0>
 800febe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fec0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800fec4:	d00b      	beq.n	800fede <I2C_Master_ADDR+0x2d0>
 800fec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fec8:	2b01      	cmp	r3, #1
 800feca:	d008      	beq.n	800fede <I2C_Master_ADDR+0x2d0>
 800fecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fece:	2b08      	cmp	r3, #8
 800fed0:	d005      	beq.n	800fede <I2C_Master_ADDR+0x2d0>
 800fed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fed4:	2b10      	cmp	r3, #16
 800fed6:	d002      	beq.n	800fede <I2C_Master_ADDR+0x2d0>
 800fed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feda:	2b20      	cmp	r3, #32
 800fedc:	d107      	bne.n	800feee <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	685a      	ldr	r2, [r3, #4]
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800feec:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800feee:	2300      	movs	r3, #0
 800fef0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	695b      	ldr	r3, [r3, #20]
 800fef8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	699b      	ldr	r3, [r3, #24]
 800ff00:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ff02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	2200      	movs	r2, #0
 800ff08:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800ff0a:	e00b      	b.n	800ff24 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	633b      	str	r3, [r7, #48]	; 0x30
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	695b      	ldr	r3, [r3, #20]
 800ff16:	633b      	str	r3, [r7, #48]	; 0x30
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	699b      	ldr	r3, [r3, #24]
 800ff1e:	633b      	str	r3, [r7, #48]	; 0x30
 800ff20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800ff22:	e7ff      	b.n	800ff24 <I2C_Master_ADDR+0x316>
 800ff24:	bf00      	nop
 800ff26:	3744      	adds	r7, #68	; 0x44
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2e:	4770      	bx	lr

0800ff30 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800ff30:	b580      	push	{r7, lr}
 800ff32:	b084      	sub	sp, #16
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ff3e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ff44:	b29b      	uxth	r3, r3
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d02b      	beq.n	800ffa2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff4e:	781a      	ldrb	r2, [r3, #0]
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff5a:	1c5a      	adds	r2, r3, #1
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ff64:	b29b      	uxth	r3, r3
 800ff66:	3b01      	subs	r3, #1
 800ff68:	b29a      	uxth	r2, r3
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ff72:	b29b      	uxth	r3, r3
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d114      	bne.n	800ffa2 <I2C_SlaveTransmit_TXE+0x72>
 800ff78:	7bfb      	ldrb	r3, [r7, #15]
 800ff7a:	2b29      	cmp	r3, #41	; 0x29
 800ff7c:	d111      	bne.n	800ffa2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	685a      	ldr	r2, [r3, #4]
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ff8c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	2221      	movs	r2, #33	; 0x21
 800ff92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	2228      	movs	r2, #40	; 0x28
 800ff98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800ff9c:	6878      	ldr	r0, [r7, #4]
 800ff9e:	f7ff f9c9 	bl	800f334 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800ffa2:	bf00      	nop
 800ffa4:	3710      	adds	r7, #16
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	bd80      	pop	{r7, pc}

0800ffaa <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800ffaa:	b480      	push	{r7}
 800ffac:	b083      	sub	sp, #12
 800ffae:	af00      	add	r7, sp, #0
 800ffb0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ffb6:	b29b      	uxth	r3, r3
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d011      	beq.n	800ffe0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffc0:	781a      	ldrb	r2, [r3, #0]
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffcc:	1c5a      	adds	r2, r3, #1
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ffd6:	b29b      	uxth	r3, r3
 800ffd8:	3b01      	subs	r3, #1
 800ffda:	b29a      	uxth	r2, r3
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800ffe0:	bf00      	nop
 800ffe2:	370c      	adds	r7, #12
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffea:	4770      	bx	lr

0800ffec <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800ffec:	b580      	push	{r7, lr}
 800ffee:	b084      	sub	sp, #16
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fffa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010000:	b29b      	uxth	r3, r3
 8010002:	2b00      	cmp	r3, #0
 8010004:	d02c      	beq.n	8010060 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	691a      	ldr	r2, [r3, #16]
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010010:	b2d2      	uxtb	r2, r2
 8010012:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010018:	1c5a      	adds	r2, r3, #1
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010022:	b29b      	uxth	r3, r3
 8010024:	3b01      	subs	r3, #1
 8010026:	b29a      	uxth	r2, r3
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010030:	b29b      	uxth	r3, r3
 8010032:	2b00      	cmp	r3, #0
 8010034:	d114      	bne.n	8010060 <I2C_SlaveReceive_RXNE+0x74>
 8010036:	7bfb      	ldrb	r3, [r7, #15]
 8010038:	2b2a      	cmp	r3, #42	; 0x2a
 801003a:	d111      	bne.n	8010060 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	685a      	ldr	r2, [r3, #4]
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801004a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	2222      	movs	r2, #34	; 0x22
 8010050:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	2228      	movs	r2, #40	; 0x28
 8010056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 801005a:	6878      	ldr	r0, [r7, #4]
 801005c:	f7ff f974 	bl	800f348 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8010060:	bf00      	nop
 8010062:	3710      	adds	r7, #16
 8010064:	46bd      	mov	sp, r7
 8010066:	bd80      	pop	{r7, pc}

08010068 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8010068:	b480      	push	{r7}
 801006a:	b083      	sub	sp, #12
 801006c:	af00      	add	r7, sp, #0
 801006e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010074:	b29b      	uxth	r3, r3
 8010076:	2b00      	cmp	r3, #0
 8010078:	d012      	beq.n	80100a0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	691a      	ldr	r2, [r3, #16]
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010084:	b2d2      	uxtb	r2, r2
 8010086:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801008c:	1c5a      	adds	r2, r3, #1
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010096:	b29b      	uxth	r3, r3
 8010098:	3b01      	subs	r3, #1
 801009a:	b29a      	uxth	r2, r3
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80100a0:	bf00      	nop
 80100a2:	370c      	adds	r7, #12
 80100a4:	46bd      	mov	sp, r7
 80100a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100aa:	4770      	bx	lr

080100ac <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b084      	sub	sp, #16
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	6078      	str	r0, [r7, #4]
 80100b4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80100b6:	2300      	movs	r3, #0
 80100b8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80100c0:	b2db      	uxtb	r3, r3
 80100c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80100c6:	2b28      	cmp	r3, #40	; 0x28
 80100c8:	d127      	bne.n	801011a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	685a      	ldr	r2, [r3, #4]
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80100d8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80100da:	683b      	ldr	r3, [r7, #0]
 80100dc:	089b      	lsrs	r3, r3, #2
 80100de:	f003 0301 	and.w	r3, r3, #1
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d101      	bne.n	80100ea <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80100e6:	2301      	movs	r3, #1
 80100e8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80100ea:	683b      	ldr	r3, [r7, #0]
 80100ec:	09db      	lsrs	r3, r3, #7
 80100ee:	f003 0301 	and.w	r3, r3, #1
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d103      	bne.n	80100fe <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	68db      	ldr	r3, [r3, #12]
 80100fa:	81bb      	strh	r3, [r7, #12]
 80100fc:	e002      	b.n	8010104 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	699b      	ldr	r3, [r3, #24]
 8010102:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	2200      	movs	r2, #0
 8010108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 801010c:	89ba      	ldrh	r2, [r7, #12]
 801010e:	7bfb      	ldrb	r3, [r7, #15]
 8010110:	4619      	mov	r1, r3
 8010112:	6878      	ldr	r0, [r7, #4]
 8010114:	f7ff f922 	bl	800f35c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8010118:	e00e      	b.n	8010138 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801011a:	2300      	movs	r3, #0
 801011c:	60bb      	str	r3, [r7, #8]
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	695b      	ldr	r3, [r3, #20]
 8010124:	60bb      	str	r3, [r7, #8]
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	699b      	ldr	r3, [r3, #24]
 801012c:	60bb      	str	r3, [r7, #8]
 801012e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	2200      	movs	r2, #0
 8010134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8010138:	bf00      	nop
 801013a:	3710      	adds	r7, #16
 801013c:	46bd      	mov	sp, r7
 801013e:	bd80      	pop	{r7, pc}

08010140 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8010140:	b580      	push	{r7, lr}
 8010142:	b084      	sub	sp, #16
 8010144:	af00      	add	r7, sp, #0
 8010146:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801014e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	685a      	ldr	r2, [r3, #4]
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801015e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8010160:	2300      	movs	r3, #0
 8010162:	60bb      	str	r3, [r7, #8]
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	695b      	ldr	r3, [r3, #20]
 801016a:	60bb      	str	r3, [r7, #8]
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	681a      	ldr	r2, [r3, #0]
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	f042 0201 	orr.w	r2, r2, #1
 801017a:	601a      	str	r2, [r3, #0]
 801017c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	681a      	ldr	r2, [r3, #0]
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801018c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	685b      	ldr	r3, [r3, #4]
 8010194:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010198:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801019c:	d172      	bne.n	8010284 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801019e:	7bfb      	ldrb	r3, [r7, #15]
 80101a0:	2b22      	cmp	r3, #34	; 0x22
 80101a2:	d002      	beq.n	80101aa <I2C_Slave_STOPF+0x6a>
 80101a4:	7bfb      	ldrb	r3, [r7, #15]
 80101a6:	2b2a      	cmp	r3, #42	; 0x2a
 80101a8:	d135      	bne.n	8010216 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	685b      	ldr	r3, [r3, #4]
 80101b2:	b29a      	uxth	r2, r3
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80101bc:	b29b      	uxth	r3, r3
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d005      	beq.n	80101ce <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101c6:	f043 0204 	orr.w	r2, r3, #4
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	685a      	ldr	r2, [r3, #4]
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80101dc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101e2:	4618      	mov	r0, r3
 80101e4:	f7f8 f9c1 	bl	800856a <HAL_DMA_GetState>
 80101e8:	4603      	mov	r3, r0
 80101ea:	2b01      	cmp	r3, #1
 80101ec:	d049      	beq.n	8010282 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101f2:	4a69      	ldr	r2, [pc, #420]	; (8010398 <I2C_Slave_STOPF+0x258>)
 80101f4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101fa:	4618      	mov	r0, r3
 80101fc:	f7f7 fe6f 	bl	8007ede <HAL_DMA_Abort_IT>
 8010200:	4603      	mov	r3, r0
 8010202:	2b00      	cmp	r3, #0
 8010204:	d03d      	beq.n	8010282 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801020a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801020c:	687a      	ldr	r2, [r7, #4]
 801020e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8010210:	4610      	mov	r0, r2
 8010212:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010214:	e035      	b.n	8010282 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	685b      	ldr	r3, [r3, #4]
 801021e:	b29a      	uxth	r2, r3
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010228:	b29b      	uxth	r3, r3
 801022a:	2b00      	cmp	r3, #0
 801022c:	d005      	beq.n	801023a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010232:	f043 0204 	orr.w	r2, r3, #4
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	685a      	ldr	r2, [r3, #4]
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010248:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801024e:	4618      	mov	r0, r3
 8010250:	f7f8 f98b 	bl	800856a <HAL_DMA_GetState>
 8010254:	4603      	mov	r3, r0
 8010256:	2b01      	cmp	r3, #1
 8010258:	d014      	beq.n	8010284 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801025e:	4a4e      	ldr	r2, [pc, #312]	; (8010398 <I2C_Slave_STOPF+0x258>)
 8010260:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010266:	4618      	mov	r0, r3
 8010268:	f7f7 fe39 	bl	8007ede <HAL_DMA_Abort_IT>
 801026c:	4603      	mov	r3, r0
 801026e:	2b00      	cmp	r3, #0
 8010270:	d008      	beq.n	8010284 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010278:	687a      	ldr	r2, [r7, #4]
 801027a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801027c:	4610      	mov	r0, r2
 801027e:	4798      	blx	r3
 8010280:	e000      	b.n	8010284 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010282:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010288:	b29b      	uxth	r3, r3
 801028a:	2b00      	cmp	r3, #0
 801028c:	d03e      	beq.n	801030c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	695b      	ldr	r3, [r3, #20]
 8010294:	f003 0304 	and.w	r3, r3, #4
 8010298:	2b04      	cmp	r3, #4
 801029a:	d112      	bne.n	80102c2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	691a      	ldr	r2, [r3, #16]
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102a6:	b2d2      	uxtb	r2, r2
 80102a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102ae:	1c5a      	adds	r2, r3, #1
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80102b8:	b29b      	uxth	r3, r3
 80102ba:	3b01      	subs	r3, #1
 80102bc:	b29a      	uxth	r2, r3
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	695b      	ldr	r3, [r3, #20]
 80102c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80102cc:	2b40      	cmp	r3, #64	; 0x40
 80102ce:	d112      	bne.n	80102f6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	691a      	ldr	r2, [r3, #16]
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102da:	b2d2      	uxtb	r2, r2
 80102dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102e2:	1c5a      	adds	r2, r3, #1
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80102ec:	b29b      	uxth	r3, r3
 80102ee:	3b01      	subs	r3, #1
 80102f0:	b29a      	uxth	r2, r3
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80102fa:	b29b      	uxth	r3, r3
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d005      	beq.n	801030c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010304:	f043 0204 	orr.w	r2, r3, #4
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010310:	2b00      	cmp	r3, #0
 8010312:	d003      	beq.n	801031c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8010314:	6878      	ldr	r0, [r7, #4]
 8010316:	f000 f8b3 	bl	8010480 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 801031a:	e039      	b.n	8010390 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 801031c:	7bfb      	ldrb	r3, [r7, #15]
 801031e:	2b2a      	cmp	r3, #42	; 0x2a
 8010320:	d109      	bne.n	8010336 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	2200      	movs	r2, #0
 8010326:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	2228      	movs	r2, #40	; 0x28
 801032c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8010330:	6878      	ldr	r0, [r7, #4]
 8010332:	f7ff f809 	bl	800f348 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801033c:	b2db      	uxtb	r3, r3
 801033e:	2b28      	cmp	r3, #40	; 0x28
 8010340:	d111      	bne.n	8010366 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	4a15      	ldr	r2, [pc, #84]	; (801039c <I2C_Slave_STOPF+0x25c>)
 8010346:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	2200      	movs	r2, #0
 801034c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	2220      	movs	r2, #32
 8010352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	2200      	movs	r2, #0
 801035a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 801035e:	6878      	ldr	r0, [r7, #4]
 8010360:	f7ff f80a 	bl	800f378 <HAL_I2C_ListenCpltCallback>
}
 8010364:	e014      	b.n	8010390 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801036a:	2b22      	cmp	r3, #34	; 0x22
 801036c:	d002      	beq.n	8010374 <I2C_Slave_STOPF+0x234>
 801036e:	7bfb      	ldrb	r3, [r7, #15]
 8010370:	2b22      	cmp	r3, #34	; 0x22
 8010372:	d10d      	bne.n	8010390 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	2200      	movs	r2, #0
 8010378:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	2220      	movs	r2, #32
 801037e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	2200      	movs	r2, #0
 8010386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 801038a:	6878      	ldr	r0, [r7, #4]
 801038c:	f7fe ffdc 	bl	800f348 <HAL_I2C_SlaveRxCpltCallback>
}
 8010390:	bf00      	nop
 8010392:	3710      	adds	r7, #16
 8010394:	46bd      	mov	sp, r7
 8010396:	bd80      	pop	{r7, pc}
 8010398:	08010ea5 	.word	0x08010ea5
 801039c:	ffff0000 	.word	0xffff0000

080103a0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80103a0:	b580      	push	{r7, lr}
 80103a2:	b084      	sub	sp, #16
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80103ae:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103b4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80103b6:	68bb      	ldr	r3, [r7, #8]
 80103b8:	2b08      	cmp	r3, #8
 80103ba:	d002      	beq.n	80103c2 <I2C_Slave_AF+0x22>
 80103bc:	68bb      	ldr	r3, [r7, #8]
 80103be:	2b20      	cmp	r3, #32
 80103c0:	d129      	bne.n	8010416 <I2C_Slave_AF+0x76>
 80103c2:	7bfb      	ldrb	r3, [r7, #15]
 80103c4:	2b28      	cmp	r3, #40	; 0x28
 80103c6:	d126      	bne.n	8010416 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	4a2c      	ldr	r2, [pc, #176]	; (801047c <I2C_Slave_AF+0xdc>)
 80103cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	685a      	ldr	r2, [r3, #4]
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80103dc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80103e6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	681a      	ldr	r2, [r3, #0]
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80103f6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	2200      	movs	r2, #0
 80103fc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	2220      	movs	r2, #32
 8010402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	2200      	movs	r2, #0
 801040a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 801040e:	6878      	ldr	r0, [r7, #4]
 8010410:	f7fe ffb2 	bl	800f378 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8010414:	e02e      	b.n	8010474 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8010416:	7bfb      	ldrb	r3, [r7, #15]
 8010418:	2b21      	cmp	r3, #33	; 0x21
 801041a:	d126      	bne.n	801046a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	4a17      	ldr	r2, [pc, #92]	; (801047c <I2C_Slave_AF+0xdc>)
 8010420:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	2221      	movs	r2, #33	; 0x21
 8010426:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	2220      	movs	r2, #32
 801042c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	2200      	movs	r2, #0
 8010434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	685a      	ldr	r2, [r3, #4]
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8010446:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8010450:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	681a      	ldr	r2, [r3, #0]
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010460:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8010462:	6878      	ldr	r0, [r7, #4]
 8010464:	f7fe ff66 	bl	800f334 <HAL_I2C_SlaveTxCpltCallback>
}
 8010468:	e004      	b.n	8010474 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8010472:	615a      	str	r2, [r3, #20]
}
 8010474:	bf00      	nop
 8010476:	3710      	adds	r7, #16
 8010478:	46bd      	mov	sp, r7
 801047a:	bd80      	pop	{r7, pc}
 801047c:	ffff0000 	.word	0xffff0000

08010480 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8010480:	b580      	push	{r7, lr}
 8010482:	b084      	sub	sp, #16
 8010484:	af00      	add	r7, sp, #0
 8010486:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801048e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010496:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8010498:	7bbb      	ldrb	r3, [r7, #14]
 801049a:	2b10      	cmp	r3, #16
 801049c:	d002      	beq.n	80104a4 <I2C_ITError+0x24>
 801049e:	7bbb      	ldrb	r3, [r7, #14]
 80104a0:	2b40      	cmp	r3, #64	; 0x40
 80104a2:	d10a      	bne.n	80104ba <I2C_ITError+0x3a>
 80104a4:	7bfb      	ldrb	r3, [r7, #15]
 80104a6:	2b22      	cmp	r3, #34	; 0x22
 80104a8:	d107      	bne.n	80104ba <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	681a      	ldr	r2, [r3, #0]
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80104b8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80104ba:	7bfb      	ldrb	r3, [r7, #15]
 80104bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80104c0:	2b28      	cmp	r3, #40	; 0x28
 80104c2:	d107      	bne.n	80104d4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	2200      	movs	r2, #0
 80104c8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	2228      	movs	r2, #40	; 0x28
 80104ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80104d2:	e015      	b.n	8010500 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	685b      	ldr	r3, [r3, #4]
 80104da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80104de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80104e2:	d00a      	beq.n	80104fa <I2C_ITError+0x7a>
 80104e4:	7bfb      	ldrb	r3, [r7, #15]
 80104e6:	2b60      	cmp	r3, #96	; 0x60
 80104e8:	d007      	beq.n	80104fa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	2220      	movs	r2, #32
 80104ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	2200      	movs	r2, #0
 80104f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	2200      	movs	r2, #0
 80104fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	685b      	ldr	r3, [r3, #4]
 8010506:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801050a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801050e:	d162      	bne.n	80105d6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	685a      	ldr	r2, [r3, #4]
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801051e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010524:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8010528:	b2db      	uxtb	r3, r3
 801052a:	2b01      	cmp	r3, #1
 801052c:	d020      	beq.n	8010570 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010532:	4a6a      	ldr	r2, [pc, #424]	; (80106dc <I2C_ITError+0x25c>)
 8010534:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801053a:	4618      	mov	r0, r3
 801053c:	f7f7 fccf 	bl	8007ede <HAL_DMA_Abort_IT>
 8010540:	4603      	mov	r3, r0
 8010542:	2b00      	cmp	r3, #0
 8010544:	f000 8089 	beq.w	801065a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	681a      	ldr	r2, [r3, #0]
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	f022 0201 	bic.w	r2, r2, #1
 8010556:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	2220      	movs	r2, #32
 801055c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010566:	687a      	ldr	r2, [r7, #4]
 8010568:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801056a:	4610      	mov	r0, r2
 801056c:	4798      	blx	r3
 801056e:	e074      	b.n	801065a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010574:	4a59      	ldr	r2, [pc, #356]	; (80106dc <I2C_ITError+0x25c>)
 8010576:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801057c:	4618      	mov	r0, r3
 801057e:	f7f7 fcae 	bl	8007ede <HAL_DMA_Abort_IT>
 8010582:	4603      	mov	r3, r0
 8010584:	2b00      	cmp	r3, #0
 8010586:	d068      	beq.n	801065a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	695b      	ldr	r3, [r3, #20]
 801058e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010592:	2b40      	cmp	r3, #64	; 0x40
 8010594:	d10b      	bne.n	80105ae <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	691a      	ldr	r2, [r3, #16]
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105a0:	b2d2      	uxtb	r2, r2
 80105a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105a8:	1c5a      	adds	r2, r3, #1
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	681a      	ldr	r2, [r3, #0]
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	f022 0201 	bic.w	r2, r2, #1
 80105bc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	2220      	movs	r2, #32
 80105c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80105cc:	687a      	ldr	r2, [r7, #4]
 80105ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80105d0:	4610      	mov	r0, r2
 80105d2:	4798      	blx	r3
 80105d4:	e041      	b.n	801065a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80105dc:	b2db      	uxtb	r3, r3
 80105de:	2b60      	cmp	r3, #96	; 0x60
 80105e0:	d125      	bne.n	801062e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	2220      	movs	r2, #32
 80105e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	2200      	movs	r2, #0
 80105ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	695b      	ldr	r3, [r3, #20]
 80105f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80105fa:	2b40      	cmp	r3, #64	; 0x40
 80105fc:	d10b      	bne.n	8010616 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	691a      	ldr	r2, [r3, #16]
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010608:	b2d2      	uxtb	r2, r2
 801060a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010610:	1c5a      	adds	r2, r3, #1
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	681a      	ldr	r2, [r3, #0]
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	f022 0201 	bic.w	r2, r2, #1
 8010624:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8010626:	6878      	ldr	r0, [r7, #4]
 8010628:	f7fe fece 	bl	800f3c8 <HAL_I2C_AbortCpltCallback>
 801062c:	e015      	b.n	801065a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	695b      	ldr	r3, [r3, #20]
 8010634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010638:	2b40      	cmp	r3, #64	; 0x40
 801063a:	d10b      	bne.n	8010654 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	691a      	ldr	r2, [r3, #16]
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010646:	b2d2      	uxtb	r2, r2
 8010648:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801064e:	1c5a      	adds	r2, r3, #1
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8010654:	6878      	ldr	r0, [r7, #4]
 8010656:	f7fe fead 	bl	800f3b4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801065e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8010660:	68bb      	ldr	r3, [r7, #8]
 8010662:	f003 0301 	and.w	r3, r3, #1
 8010666:	2b00      	cmp	r3, #0
 8010668:	d10e      	bne.n	8010688 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 801066a:	68bb      	ldr	r3, [r7, #8]
 801066c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8010670:	2b00      	cmp	r3, #0
 8010672:	d109      	bne.n	8010688 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8010674:	68bb      	ldr	r3, [r7, #8]
 8010676:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 801067a:	2b00      	cmp	r3, #0
 801067c:	d104      	bne.n	8010688 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 801067e:	68bb      	ldr	r3, [r7, #8]
 8010680:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8010684:	2b00      	cmp	r3, #0
 8010686:	d007      	beq.n	8010698 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	685a      	ldr	r2, [r3, #4]
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8010696:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801069e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106a4:	f003 0304 	and.w	r3, r3, #4
 80106a8:	2b04      	cmp	r3, #4
 80106aa:	d113      	bne.n	80106d4 <I2C_ITError+0x254>
 80106ac:	7bfb      	ldrb	r3, [r7, #15]
 80106ae:	2b28      	cmp	r3, #40	; 0x28
 80106b0:	d110      	bne.n	80106d4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	4a0a      	ldr	r2, [pc, #40]	; (80106e0 <I2C_ITError+0x260>)
 80106b6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	2200      	movs	r2, #0
 80106bc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	2220      	movs	r2, #32
 80106c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	2200      	movs	r2, #0
 80106ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80106ce:	6878      	ldr	r0, [r7, #4]
 80106d0:	f7fe fe52 	bl	800f378 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80106d4:	bf00      	nop
 80106d6:	3710      	adds	r7, #16
 80106d8:	46bd      	mov	sp, r7
 80106da:	bd80      	pop	{r7, pc}
 80106dc:	08010ea5 	.word	0x08010ea5
 80106e0:	ffff0000 	.word	0xffff0000

080106e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80106e4:	b580      	push	{r7, lr}
 80106e6:	b088      	sub	sp, #32
 80106e8:	af02      	add	r7, sp, #8
 80106ea:	60f8      	str	r0, [r7, #12]
 80106ec:	607a      	str	r2, [r7, #4]
 80106ee:	603b      	str	r3, [r7, #0]
 80106f0:	460b      	mov	r3, r1
 80106f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80106fa:	697b      	ldr	r3, [r7, #20]
 80106fc:	2b08      	cmp	r3, #8
 80106fe:	d006      	beq.n	801070e <I2C_MasterRequestWrite+0x2a>
 8010700:	697b      	ldr	r3, [r7, #20]
 8010702:	2b01      	cmp	r3, #1
 8010704:	d003      	beq.n	801070e <I2C_MasterRequestWrite+0x2a>
 8010706:	697b      	ldr	r3, [r7, #20]
 8010708:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801070c:	d108      	bne.n	8010720 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	681a      	ldr	r2, [r3, #0]
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801071c:	601a      	str	r2, [r3, #0]
 801071e:	e00b      	b.n	8010738 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010724:	2b12      	cmp	r3, #18
 8010726:	d107      	bne.n	8010738 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	681a      	ldr	r2, [r3, #0]
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010736:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8010738:	683b      	ldr	r3, [r7, #0]
 801073a:	9300      	str	r3, [sp, #0]
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	2200      	movs	r2, #0
 8010740:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8010744:	68f8      	ldr	r0, [r7, #12]
 8010746:	f000 fc55 	bl	8010ff4 <I2C_WaitOnFlagUntilTimeout>
 801074a:	4603      	mov	r3, r0
 801074c:	2b00      	cmp	r3, #0
 801074e:	d00d      	beq.n	801076c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801075a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801075e:	d103      	bne.n	8010768 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010766:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8010768:	2303      	movs	r3, #3
 801076a:	e035      	b.n	80107d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	691b      	ldr	r3, [r3, #16]
 8010770:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010774:	d108      	bne.n	8010788 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8010776:	897b      	ldrh	r3, [r7, #10]
 8010778:	b2db      	uxtb	r3, r3
 801077a:	461a      	mov	r2, r3
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8010784:	611a      	str	r2, [r3, #16]
 8010786:	e01b      	b.n	80107c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8010788:	897b      	ldrh	r3, [r7, #10]
 801078a:	11db      	asrs	r3, r3, #7
 801078c:	b2db      	uxtb	r3, r3
 801078e:	f003 0306 	and.w	r3, r3, #6
 8010792:	b2db      	uxtb	r3, r3
 8010794:	f063 030f 	orn	r3, r3, #15
 8010798:	b2da      	uxtb	r2, r3
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80107a0:	683b      	ldr	r3, [r7, #0]
 80107a2:	687a      	ldr	r2, [r7, #4]
 80107a4:	490e      	ldr	r1, [pc, #56]	; (80107e0 <I2C_MasterRequestWrite+0xfc>)
 80107a6:	68f8      	ldr	r0, [r7, #12]
 80107a8:	f000 fc7b 	bl	80110a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80107ac:	4603      	mov	r3, r0
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d001      	beq.n	80107b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80107b2:	2301      	movs	r3, #1
 80107b4:	e010      	b.n	80107d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80107b6:	897b      	ldrh	r3, [r7, #10]
 80107b8:	b2da      	uxtb	r2, r3
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80107c0:	683b      	ldr	r3, [r7, #0]
 80107c2:	687a      	ldr	r2, [r7, #4]
 80107c4:	4907      	ldr	r1, [pc, #28]	; (80107e4 <I2C_MasterRequestWrite+0x100>)
 80107c6:	68f8      	ldr	r0, [r7, #12]
 80107c8:	f000 fc6b 	bl	80110a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80107cc:	4603      	mov	r3, r0
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d001      	beq.n	80107d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80107d2:	2301      	movs	r3, #1
 80107d4:	e000      	b.n	80107d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80107d6:	2300      	movs	r3, #0
}
 80107d8:	4618      	mov	r0, r3
 80107da:	3718      	adds	r7, #24
 80107dc:	46bd      	mov	sp, r7
 80107de:	bd80      	pop	{r7, pc}
 80107e0:	00010008 	.word	0x00010008
 80107e4:	00010002 	.word	0x00010002

080107e8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80107e8:	b580      	push	{r7, lr}
 80107ea:	b088      	sub	sp, #32
 80107ec:	af02      	add	r7, sp, #8
 80107ee:	60f8      	str	r0, [r7, #12]
 80107f0:	607a      	str	r2, [r7, #4]
 80107f2:	603b      	str	r3, [r7, #0]
 80107f4:	460b      	mov	r3, r1
 80107f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107fc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	681a      	ldr	r2, [r3, #0]
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801080c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 801080e:	697b      	ldr	r3, [r7, #20]
 8010810:	2b08      	cmp	r3, #8
 8010812:	d006      	beq.n	8010822 <I2C_MasterRequestRead+0x3a>
 8010814:	697b      	ldr	r3, [r7, #20]
 8010816:	2b01      	cmp	r3, #1
 8010818:	d003      	beq.n	8010822 <I2C_MasterRequestRead+0x3a>
 801081a:	697b      	ldr	r3, [r7, #20]
 801081c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8010820:	d108      	bne.n	8010834 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	681a      	ldr	r2, [r3, #0]
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010830:	601a      	str	r2, [r3, #0]
 8010832:	e00b      	b.n	801084c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010838:	2b11      	cmp	r3, #17
 801083a:	d107      	bne.n	801084c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	681a      	ldr	r2, [r3, #0]
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801084a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801084c:	683b      	ldr	r3, [r7, #0]
 801084e:	9300      	str	r3, [sp, #0]
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	2200      	movs	r2, #0
 8010854:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8010858:	68f8      	ldr	r0, [r7, #12]
 801085a:	f000 fbcb 	bl	8010ff4 <I2C_WaitOnFlagUntilTimeout>
 801085e:	4603      	mov	r3, r0
 8010860:	2b00      	cmp	r3, #0
 8010862:	d00d      	beq.n	8010880 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801086e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010872:	d103      	bne.n	801087c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	f44f 7200 	mov.w	r2, #512	; 0x200
 801087a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801087c:	2303      	movs	r3, #3
 801087e:	e079      	b.n	8010974 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	691b      	ldr	r3, [r3, #16]
 8010884:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010888:	d108      	bne.n	801089c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 801088a:	897b      	ldrh	r3, [r7, #10]
 801088c:	b2db      	uxtb	r3, r3
 801088e:	f043 0301 	orr.w	r3, r3, #1
 8010892:	b2da      	uxtb	r2, r3
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	611a      	str	r2, [r3, #16]
 801089a:	e05f      	b.n	801095c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 801089c:	897b      	ldrh	r3, [r7, #10]
 801089e:	11db      	asrs	r3, r3, #7
 80108a0:	b2db      	uxtb	r3, r3
 80108a2:	f003 0306 	and.w	r3, r3, #6
 80108a6:	b2db      	uxtb	r3, r3
 80108a8:	f063 030f 	orn	r3, r3, #15
 80108ac:	b2da      	uxtb	r2, r3
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80108b4:	683b      	ldr	r3, [r7, #0]
 80108b6:	687a      	ldr	r2, [r7, #4]
 80108b8:	4930      	ldr	r1, [pc, #192]	; (801097c <I2C_MasterRequestRead+0x194>)
 80108ba:	68f8      	ldr	r0, [r7, #12]
 80108bc:	f000 fbf1 	bl	80110a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80108c0:	4603      	mov	r3, r0
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d001      	beq.n	80108ca <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80108c6:	2301      	movs	r3, #1
 80108c8:	e054      	b.n	8010974 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80108ca:	897b      	ldrh	r3, [r7, #10]
 80108cc:	b2da      	uxtb	r2, r3
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80108d4:	683b      	ldr	r3, [r7, #0]
 80108d6:	687a      	ldr	r2, [r7, #4]
 80108d8:	4929      	ldr	r1, [pc, #164]	; (8010980 <I2C_MasterRequestRead+0x198>)
 80108da:	68f8      	ldr	r0, [r7, #12]
 80108dc:	f000 fbe1 	bl	80110a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80108e0:	4603      	mov	r3, r0
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d001      	beq.n	80108ea <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80108e6:	2301      	movs	r3, #1
 80108e8:	e044      	b.n	8010974 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80108ea:	2300      	movs	r3, #0
 80108ec:	613b      	str	r3, [r7, #16]
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	695b      	ldr	r3, [r3, #20]
 80108f4:	613b      	str	r3, [r7, #16]
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	699b      	ldr	r3, [r3, #24]
 80108fc:	613b      	str	r3, [r7, #16]
 80108fe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	681a      	ldr	r2, [r3, #0]
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801090e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8010910:	683b      	ldr	r3, [r7, #0]
 8010912:	9300      	str	r3, [sp, #0]
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	2200      	movs	r2, #0
 8010918:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801091c:	68f8      	ldr	r0, [r7, #12]
 801091e:	f000 fb69 	bl	8010ff4 <I2C_WaitOnFlagUntilTimeout>
 8010922:	4603      	mov	r3, r0
 8010924:	2b00      	cmp	r3, #0
 8010926:	d00d      	beq.n	8010944 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010932:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010936:	d103      	bne.n	8010940 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801093e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8010940:	2303      	movs	r3, #3
 8010942:	e017      	b.n	8010974 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8010944:	897b      	ldrh	r3, [r7, #10]
 8010946:	11db      	asrs	r3, r3, #7
 8010948:	b2db      	uxtb	r3, r3
 801094a:	f003 0306 	and.w	r3, r3, #6
 801094e:	b2db      	uxtb	r3, r3
 8010950:	f063 030e 	orn	r3, r3, #14
 8010954:	b2da      	uxtb	r2, r3
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801095c:	683b      	ldr	r3, [r7, #0]
 801095e:	687a      	ldr	r2, [r7, #4]
 8010960:	4907      	ldr	r1, [pc, #28]	; (8010980 <I2C_MasterRequestRead+0x198>)
 8010962:	68f8      	ldr	r0, [r7, #12]
 8010964:	f000 fb9d 	bl	80110a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010968:	4603      	mov	r3, r0
 801096a:	2b00      	cmp	r3, #0
 801096c:	d001      	beq.n	8010972 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 801096e:	2301      	movs	r3, #1
 8010970:	e000      	b.n	8010974 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8010972:	2300      	movs	r3, #0
}
 8010974:	4618      	mov	r0, r3
 8010976:	3718      	adds	r7, #24
 8010978:	46bd      	mov	sp, r7
 801097a:	bd80      	pop	{r7, pc}
 801097c:	00010008 	.word	0x00010008
 8010980:	00010002 	.word	0x00010002

08010984 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8010984:	b580      	push	{r7, lr}
 8010986:	b088      	sub	sp, #32
 8010988:	af02      	add	r7, sp, #8
 801098a:	60f8      	str	r0, [r7, #12]
 801098c:	4608      	mov	r0, r1
 801098e:	4611      	mov	r1, r2
 8010990:	461a      	mov	r2, r3
 8010992:	4603      	mov	r3, r0
 8010994:	817b      	strh	r3, [r7, #10]
 8010996:	460b      	mov	r3, r1
 8010998:	813b      	strh	r3, [r7, #8]
 801099a:	4613      	mov	r3, r2
 801099c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	681a      	ldr	r2, [r3, #0]
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80109ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80109ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109b0:	9300      	str	r3, [sp, #0]
 80109b2:	6a3b      	ldr	r3, [r7, #32]
 80109b4:	2200      	movs	r2, #0
 80109b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80109ba:	68f8      	ldr	r0, [r7, #12]
 80109bc:	f000 fb1a 	bl	8010ff4 <I2C_WaitOnFlagUntilTimeout>
 80109c0:	4603      	mov	r3, r0
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d00d      	beq.n	80109e2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80109d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80109d4:	d103      	bne.n	80109de <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80109dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80109de:	2303      	movs	r3, #3
 80109e0:	e05f      	b.n	8010aa2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80109e2:	897b      	ldrh	r3, [r7, #10]
 80109e4:	b2db      	uxtb	r3, r3
 80109e6:	461a      	mov	r2, r3
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80109f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80109f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109f4:	6a3a      	ldr	r2, [r7, #32]
 80109f6:	492d      	ldr	r1, [pc, #180]	; (8010aac <I2C_RequestMemoryWrite+0x128>)
 80109f8:	68f8      	ldr	r0, [r7, #12]
 80109fa:	f000 fb52 	bl	80110a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80109fe:	4603      	mov	r3, r0
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d001      	beq.n	8010a08 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8010a04:	2301      	movs	r3, #1
 8010a06:	e04c      	b.n	8010aa2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8010a08:	2300      	movs	r3, #0
 8010a0a:	617b      	str	r3, [r7, #20]
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	695b      	ldr	r3, [r3, #20]
 8010a12:	617b      	str	r3, [r7, #20]
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	699b      	ldr	r3, [r3, #24]
 8010a1a:	617b      	str	r3, [r7, #20]
 8010a1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a20:	6a39      	ldr	r1, [r7, #32]
 8010a22:	68f8      	ldr	r0, [r7, #12]
 8010a24:	f000 fbbc 	bl	80111a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8010a28:	4603      	mov	r3, r0
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d00d      	beq.n	8010a4a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a32:	2b04      	cmp	r3, #4
 8010a34:	d107      	bne.n	8010a46 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	681a      	ldr	r2, [r3, #0]
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010a44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8010a46:	2301      	movs	r3, #1
 8010a48:	e02b      	b.n	8010aa2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8010a4a:	88fb      	ldrh	r3, [r7, #6]
 8010a4c:	2b01      	cmp	r3, #1
 8010a4e:	d105      	bne.n	8010a5c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8010a50:	893b      	ldrh	r3, [r7, #8]
 8010a52:	b2da      	uxtb	r2, r3
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	611a      	str	r2, [r3, #16]
 8010a5a:	e021      	b.n	8010aa0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8010a5c:	893b      	ldrh	r3, [r7, #8]
 8010a5e:	0a1b      	lsrs	r3, r3, #8
 8010a60:	b29b      	uxth	r3, r3
 8010a62:	b2da      	uxtb	r2, r3
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a6c:	6a39      	ldr	r1, [r7, #32]
 8010a6e:	68f8      	ldr	r0, [r7, #12]
 8010a70:	f000 fb96 	bl	80111a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8010a74:	4603      	mov	r3, r0
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d00d      	beq.n	8010a96 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a7e:	2b04      	cmp	r3, #4
 8010a80:	d107      	bne.n	8010a92 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	681a      	ldr	r2, [r3, #0]
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010a90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8010a92:	2301      	movs	r3, #1
 8010a94:	e005      	b.n	8010aa2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8010a96:	893b      	ldrh	r3, [r7, #8]
 8010a98:	b2da      	uxtb	r2, r3
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8010aa0:	2300      	movs	r3, #0
}
 8010aa2:	4618      	mov	r0, r3
 8010aa4:	3718      	adds	r7, #24
 8010aa6:	46bd      	mov	sp, r7
 8010aa8:	bd80      	pop	{r7, pc}
 8010aaa:	bf00      	nop
 8010aac:	00010002 	.word	0x00010002

08010ab0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	b088      	sub	sp, #32
 8010ab4:	af02      	add	r7, sp, #8
 8010ab6:	60f8      	str	r0, [r7, #12]
 8010ab8:	4608      	mov	r0, r1
 8010aba:	4611      	mov	r1, r2
 8010abc:	461a      	mov	r2, r3
 8010abe:	4603      	mov	r3, r0
 8010ac0:	817b      	strh	r3, [r7, #10]
 8010ac2:	460b      	mov	r3, r1
 8010ac4:	813b      	strh	r3, [r7, #8]
 8010ac6:	4613      	mov	r3, r2
 8010ac8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	681a      	ldr	r2, [r3, #0]
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010ad8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	681a      	ldr	r2, [r3, #0]
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010ae8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8010aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aec:	9300      	str	r3, [sp, #0]
 8010aee:	6a3b      	ldr	r3, [r7, #32]
 8010af0:	2200      	movs	r2, #0
 8010af2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8010af6:	68f8      	ldr	r0, [r7, #12]
 8010af8:	f000 fa7c 	bl	8010ff4 <I2C_WaitOnFlagUntilTimeout>
 8010afc:	4603      	mov	r3, r0
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d00d      	beq.n	8010b1e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010b0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010b10:	d103      	bne.n	8010b1a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010b18:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8010b1a:	2303      	movs	r3, #3
 8010b1c:	e0aa      	b.n	8010c74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8010b1e:	897b      	ldrh	r3, [r7, #10]
 8010b20:	b2db      	uxtb	r3, r3
 8010b22:	461a      	mov	r2, r3
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8010b2c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8010b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b30:	6a3a      	ldr	r2, [r7, #32]
 8010b32:	4952      	ldr	r1, [pc, #328]	; (8010c7c <I2C_RequestMemoryRead+0x1cc>)
 8010b34:	68f8      	ldr	r0, [r7, #12]
 8010b36:	f000 fab4 	bl	80110a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010b3a:	4603      	mov	r3, r0
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d001      	beq.n	8010b44 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8010b40:	2301      	movs	r3, #1
 8010b42:	e097      	b.n	8010c74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8010b44:	2300      	movs	r3, #0
 8010b46:	617b      	str	r3, [r7, #20]
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	695b      	ldr	r3, [r3, #20]
 8010b4e:	617b      	str	r3, [r7, #20]
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	699b      	ldr	r3, [r3, #24]
 8010b56:	617b      	str	r3, [r7, #20]
 8010b58:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b5c:	6a39      	ldr	r1, [r7, #32]
 8010b5e:	68f8      	ldr	r0, [r7, #12]
 8010b60:	f000 fb1e 	bl	80111a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8010b64:	4603      	mov	r3, r0
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d00d      	beq.n	8010b86 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b6e:	2b04      	cmp	r3, #4
 8010b70:	d107      	bne.n	8010b82 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	681a      	ldr	r2, [r3, #0]
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010b80:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8010b82:	2301      	movs	r3, #1
 8010b84:	e076      	b.n	8010c74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8010b86:	88fb      	ldrh	r3, [r7, #6]
 8010b88:	2b01      	cmp	r3, #1
 8010b8a:	d105      	bne.n	8010b98 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8010b8c:	893b      	ldrh	r3, [r7, #8]
 8010b8e:	b2da      	uxtb	r2, r3
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	611a      	str	r2, [r3, #16]
 8010b96:	e021      	b.n	8010bdc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8010b98:	893b      	ldrh	r3, [r7, #8]
 8010b9a:	0a1b      	lsrs	r3, r3, #8
 8010b9c:	b29b      	uxth	r3, r3
 8010b9e:	b2da      	uxtb	r2, r3
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ba8:	6a39      	ldr	r1, [r7, #32]
 8010baa:	68f8      	ldr	r0, [r7, #12]
 8010bac:	f000 faf8 	bl	80111a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8010bb0:	4603      	mov	r3, r0
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d00d      	beq.n	8010bd2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bba:	2b04      	cmp	r3, #4
 8010bbc:	d107      	bne.n	8010bce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	681a      	ldr	r2, [r3, #0]
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010bcc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8010bce:	2301      	movs	r3, #1
 8010bd0:	e050      	b.n	8010c74 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8010bd2:	893b      	ldrh	r3, [r7, #8]
 8010bd4:	b2da      	uxtb	r2, r3
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010bde:	6a39      	ldr	r1, [r7, #32]
 8010be0:	68f8      	ldr	r0, [r7, #12]
 8010be2:	f000 fadd 	bl	80111a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8010be6:	4603      	mov	r3, r0
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d00d      	beq.n	8010c08 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bf0:	2b04      	cmp	r3, #4
 8010bf2:	d107      	bne.n	8010c04 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	681a      	ldr	r2, [r3, #0]
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010c02:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8010c04:	2301      	movs	r3, #1
 8010c06:	e035      	b.n	8010c74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	681a      	ldr	r2, [r3, #0]
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010c16:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8010c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c1a:	9300      	str	r3, [sp, #0]
 8010c1c:	6a3b      	ldr	r3, [r7, #32]
 8010c1e:	2200      	movs	r2, #0
 8010c20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8010c24:	68f8      	ldr	r0, [r7, #12]
 8010c26:	f000 f9e5 	bl	8010ff4 <I2C_WaitOnFlagUntilTimeout>
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d00d      	beq.n	8010c4c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010c3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010c3e:	d103      	bne.n	8010c48 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010c46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8010c48:	2303      	movs	r3, #3
 8010c4a:	e013      	b.n	8010c74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8010c4c:	897b      	ldrh	r3, [r7, #10]
 8010c4e:	b2db      	uxtb	r3, r3
 8010c50:	f043 0301 	orr.w	r3, r3, #1
 8010c54:	b2da      	uxtb	r2, r3
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8010c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c5e:	6a3a      	ldr	r2, [r7, #32]
 8010c60:	4906      	ldr	r1, [pc, #24]	; (8010c7c <I2C_RequestMemoryRead+0x1cc>)
 8010c62:	68f8      	ldr	r0, [r7, #12]
 8010c64:	f000 fa1d 	bl	80110a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010c68:	4603      	mov	r3, r0
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d001      	beq.n	8010c72 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8010c6e:	2301      	movs	r3, #1
 8010c70:	e000      	b.n	8010c74 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8010c72:	2300      	movs	r3, #0
}
 8010c74:	4618      	mov	r0, r3
 8010c76:	3718      	adds	r7, #24
 8010c78:	46bd      	mov	sp, r7
 8010c7a:	bd80      	pop	{r7, pc}
 8010c7c:	00010002 	.word	0x00010002

08010c80 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8010c80:	b580      	push	{r7, lr}
 8010c82:	b086      	sub	sp, #24
 8010c84:	af00      	add	r7, sp, #0
 8010c86:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c8c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8010c8e:	697b      	ldr	r3, [r7, #20]
 8010c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010c94:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8010c96:	697b      	ldr	r3, [r7, #20]
 8010c98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010c9c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8010c9e:	697b      	ldr	r3, [r7, #20]
 8010ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ca2:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8010ca4:	697b      	ldr	r3, [r7, #20]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	685a      	ldr	r2, [r3, #4]
 8010caa:	697b      	ldr	r3, [r7, #20]
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8010cb2:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8010cb4:	697b      	ldr	r3, [r7, #20]
 8010cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d003      	beq.n	8010cc4 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8010cbc:	697b      	ldr	r3, [r7, #20]
 8010cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cc0:	2200      	movs	r2, #0
 8010cc2:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8010cc4:	697b      	ldr	r3, [r7, #20]
 8010cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d003      	beq.n	8010cd4 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8010ccc:	697b      	ldr	r3, [r7, #20]
 8010cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cd0:	2200      	movs	r2, #0
 8010cd2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8010cd4:	7cfb      	ldrb	r3, [r7, #19]
 8010cd6:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8010cda:	2b21      	cmp	r3, #33	; 0x21
 8010cdc:	d007      	beq.n	8010cee <I2C_DMAXferCplt+0x6e>
 8010cde:	7cfb      	ldrb	r3, [r7, #19]
 8010ce0:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8010ce4:	2b22      	cmp	r3, #34	; 0x22
 8010ce6:	d131      	bne.n	8010d4c <I2C_DMAXferCplt+0xcc>
 8010ce8:	7cbb      	ldrb	r3, [r7, #18]
 8010cea:	2b20      	cmp	r3, #32
 8010cec:	d12e      	bne.n	8010d4c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8010cee:	697b      	ldr	r3, [r7, #20]
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	685a      	ldr	r2, [r3, #4]
 8010cf4:	697b      	ldr	r3, [r7, #20]
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010cfc:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8010cfe:	697b      	ldr	r3, [r7, #20]
 8010d00:	2200      	movs	r2, #0
 8010d02:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8010d04:	7cfb      	ldrb	r3, [r7, #19]
 8010d06:	2b29      	cmp	r3, #41	; 0x29
 8010d08:	d10a      	bne.n	8010d20 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8010d0a:	697b      	ldr	r3, [r7, #20]
 8010d0c:	2221      	movs	r2, #33	; 0x21
 8010d0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8010d10:	697b      	ldr	r3, [r7, #20]
 8010d12:	2228      	movs	r2, #40	; 0x28
 8010d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8010d18:	6978      	ldr	r0, [r7, #20]
 8010d1a:	f7fe fb0b 	bl	800f334 <HAL_I2C_SlaveTxCpltCallback>
 8010d1e:	e00c      	b.n	8010d3a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8010d20:	7cfb      	ldrb	r3, [r7, #19]
 8010d22:	2b2a      	cmp	r3, #42	; 0x2a
 8010d24:	d109      	bne.n	8010d3a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8010d26:	697b      	ldr	r3, [r7, #20]
 8010d28:	2222      	movs	r2, #34	; 0x22
 8010d2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8010d2c:	697b      	ldr	r3, [r7, #20]
 8010d2e:	2228      	movs	r2, #40	; 0x28
 8010d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8010d34:	6978      	ldr	r0, [r7, #20]
 8010d36:	f7fe fb07 	bl	800f348 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8010d3a:	697b      	ldr	r3, [r7, #20]
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	685a      	ldr	r2, [r3, #4]
 8010d40:	697b      	ldr	r3, [r7, #20]
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8010d48:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8010d4a:	e06a      	b.n	8010e22 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8010d4c:	697b      	ldr	r3, [r7, #20]
 8010d4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010d52:	b2db      	uxtb	r3, r3
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d064      	beq.n	8010e22 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8010d58:	697b      	ldr	r3, [r7, #20]
 8010d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010d5c:	b29b      	uxth	r3, r3
 8010d5e:	2b01      	cmp	r3, #1
 8010d60:	d107      	bne.n	8010d72 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010d62:	697b      	ldr	r3, [r7, #20]
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	681a      	ldr	r2, [r3, #0]
 8010d68:	697b      	ldr	r3, [r7, #20]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010d70:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8010d72:	697b      	ldr	r3, [r7, #20]
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	685a      	ldr	r2, [r3, #4]
 8010d78:	697b      	ldr	r3, [r7, #20]
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8010d80:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8010d88:	d009      	beq.n	8010d9e <I2C_DMAXferCplt+0x11e>
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	2b08      	cmp	r3, #8
 8010d8e:	d006      	beq.n	8010d9e <I2C_DMAXferCplt+0x11e>
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8010d96:	d002      	beq.n	8010d9e <I2C_DMAXferCplt+0x11e>
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	2b20      	cmp	r3, #32
 8010d9c:	d107      	bne.n	8010dae <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010d9e:	697b      	ldr	r3, [r7, #20]
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	681a      	ldr	r2, [r3, #0]
 8010da4:	697b      	ldr	r3, [r7, #20]
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010dac:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8010dae:	697b      	ldr	r3, [r7, #20]
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	685a      	ldr	r2, [r3, #4]
 8010db4:	697b      	ldr	r3, [r7, #20]
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8010dbc:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8010dbe:	697b      	ldr	r3, [r7, #20]
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	685a      	ldr	r2, [r3, #4]
 8010dc4:	697b      	ldr	r3, [r7, #20]
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010dcc:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8010dce:	697b      	ldr	r3, [r7, #20]
 8010dd0:	2200      	movs	r2, #0
 8010dd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8010dd4:	697b      	ldr	r3, [r7, #20]
 8010dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d003      	beq.n	8010de4 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8010ddc:	6978      	ldr	r0, [r7, #20]
 8010dde:	f7fe fae9 	bl	800f3b4 <HAL_I2C_ErrorCallback>
}
 8010de2:	e01e      	b.n	8010e22 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8010de4:	697b      	ldr	r3, [r7, #20]
 8010de6:	2220      	movs	r2, #32
 8010de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8010dec:	697b      	ldr	r3, [r7, #20]
 8010dee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010df2:	b2db      	uxtb	r3, r3
 8010df4:	2b40      	cmp	r3, #64	; 0x40
 8010df6:	d10a      	bne.n	8010e0e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010df8:	697b      	ldr	r3, [r7, #20]
 8010dfa:	2200      	movs	r2, #0
 8010dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8010e00:	697b      	ldr	r3, [r7, #20]
 8010e02:	2200      	movs	r2, #0
 8010e04:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8010e06:	6978      	ldr	r0, [r7, #20]
 8010e08:	f7fe faca 	bl	800f3a0 <HAL_I2C_MemRxCpltCallback>
}
 8010e0c:	e009      	b.n	8010e22 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010e0e:	697b      	ldr	r3, [r7, #20]
 8010e10:	2200      	movs	r2, #0
 8010e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8010e16:	697b      	ldr	r3, [r7, #20]
 8010e18:	2212      	movs	r2, #18
 8010e1a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8010e1c:	6978      	ldr	r0, [r7, #20]
 8010e1e:	f7fe fa7f 	bl	800f320 <HAL_I2C_MasterRxCpltCallback>
}
 8010e22:	bf00      	nop
 8010e24:	3718      	adds	r7, #24
 8010e26:	46bd      	mov	sp, r7
 8010e28:	bd80      	pop	{r7, pc}

08010e2a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8010e2a:	b580      	push	{r7, lr}
 8010e2c:	b084      	sub	sp, #16
 8010e2e:	af00      	add	r7, sp, #0
 8010e30:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e36:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d003      	beq.n	8010e48 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e44:	2200      	movs	r2, #0
 8010e46:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d003      	beq.n	8010e58 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e54:	2200      	movs	r2, #0
 8010e56:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8010e58:	6878      	ldr	r0, [r7, #4]
 8010e5a:	f7f7 fb94 	bl	8008586 <HAL_DMA_GetError>
 8010e5e:	4603      	mov	r3, r0
 8010e60:	2b02      	cmp	r3, #2
 8010e62:	d01b      	beq.n	8010e9c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	681a      	ldr	r2, [r3, #0]
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010e72:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	2200      	movs	r2, #0
 8010e78:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	2220      	movs	r2, #32
 8010e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	2200      	movs	r2, #0
 8010e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e8e:	f043 0210 	orr.w	r2, r3, #16
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8010e96:	68f8      	ldr	r0, [r7, #12]
 8010e98:	f7fe fa8c 	bl	800f3b4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010e9c:	bf00      	nop
 8010e9e:	3710      	adds	r7, #16
 8010ea0:	46bd      	mov	sp, r7
 8010ea2:	bd80      	pop	{r7, pc}

08010ea4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	b086      	sub	sp, #24
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010eac:	2300      	movs	r3, #0
 8010eae:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010eb4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8010eb6:	697b      	ldr	r3, [r7, #20]
 8010eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010ebc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8010ebe:	4b4b      	ldr	r3, [pc, #300]	; (8010fec <I2C_DMAAbort+0x148>)
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	08db      	lsrs	r3, r3, #3
 8010ec4:	4a4a      	ldr	r2, [pc, #296]	; (8010ff0 <I2C_DMAAbort+0x14c>)
 8010ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8010eca:	0a1a      	lsrs	r2, r3, #8
 8010ecc:	4613      	mov	r3, r2
 8010ece:	009b      	lsls	r3, r3, #2
 8010ed0:	4413      	add	r3, r2
 8010ed2:	00da      	lsls	r2, r3, #3
 8010ed4:	1ad3      	subs	r3, r2, r3
 8010ed6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d106      	bne.n	8010eec <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010ede:	697b      	ldr	r3, [r7, #20]
 8010ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ee2:	f043 0220 	orr.w	r2, r3, #32
 8010ee6:	697b      	ldr	r3, [r7, #20]
 8010ee8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8010eea:	e00a      	b.n	8010f02 <I2C_DMAAbort+0x5e>
    }
    count--;
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	3b01      	subs	r3, #1
 8010ef0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8010ef2:	697b      	ldr	r3, [r7, #20]
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010efc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010f00:	d0ea      	beq.n	8010ed8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8010f02:	697b      	ldr	r3, [r7, #20]
 8010f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d003      	beq.n	8010f12 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8010f0a:	697b      	ldr	r3, [r7, #20]
 8010f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f0e:	2200      	movs	r2, #0
 8010f10:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8010f12:	697b      	ldr	r3, [r7, #20]
 8010f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d003      	beq.n	8010f22 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8010f1a:	697b      	ldr	r3, [r7, #20]
 8010f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f1e:	2200      	movs	r2, #0
 8010f20:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010f22:	697b      	ldr	r3, [r7, #20]
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	681a      	ldr	r2, [r3, #0]
 8010f28:	697b      	ldr	r3, [r7, #20]
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010f30:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8010f32:	697b      	ldr	r3, [r7, #20]
 8010f34:	2200      	movs	r2, #0
 8010f36:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8010f38:	697b      	ldr	r3, [r7, #20]
 8010f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d003      	beq.n	8010f48 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8010f40:	697b      	ldr	r3, [r7, #20]
 8010f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f44:	2200      	movs	r2, #0
 8010f46:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8010f48:	697b      	ldr	r3, [r7, #20]
 8010f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d003      	beq.n	8010f58 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8010f50:	697b      	ldr	r3, [r7, #20]
 8010f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f54:	2200      	movs	r2, #0
 8010f56:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8010f58:	697b      	ldr	r3, [r7, #20]
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	681a      	ldr	r2, [r3, #0]
 8010f5e:	697b      	ldr	r3, [r7, #20]
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	f022 0201 	bic.w	r2, r2, #1
 8010f66:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8010f68:	697b      	ldr	r3, [r7, #20]
 8010f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010f6e:	b2db      	uxtb	r3, r3
 8010f70:	2b60      	cmp	r3, #96	; 0x60
 8010f72:	d10e      	bne.n	8010f92 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8010f74:	697b      	ldr	r3, [r7, #20]
 8010f76:	2220      	movs	r2, #32
 8010f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8010f7c:	697b      	ldr	r3, [r7, #20]
 8010f7e:	2200      	movs	r2, #0
 8010f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8010f84:	697b      	ldr	r3, [r7, #20]
 8010f86:	2200      	movs	r2, #0
 8010f88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8010f8a:	6978      	ldr	r0, [r7, #20]
 8010f8c:	f7fe fa1c 	bl	800f3c8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010f90:	e027      	b.n	8010fe2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8010f92:	7cfb      	ldrb	r3, [r7, #19]
 8010f94:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8010f98:	2b28      	cmp	r3, #40	; 0x28
 8010f9a:	d117      	bne.n	8010fcc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8010f9c:	697b      	ldr	r3, [r7, #20]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	681a      	ldr	r2, [r3, #0]
 8010fa2:	697b      	ldr	r3, [r7, #20]
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	f042 0201 	orr.w	r2, r2, #1
 8010faa:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010fac:	697b      	ldr	r3, [r7, #20]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	681a      	ldr	r2, [r3, #0]
 8010fb2:	697b      	ldr	r3, [r7, #20]
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010fba:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8010fbc:	697b      	ldr	r3, [r7, #20]
 8010fbe:	2200      	movs	r2, #0
 8010fc0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8010fc2:	697b      	ldr	r3, [r7, #20]
 8010fc4:	2228      	movs	r2, #40	; 0x28
 8010fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8010fca:	e007      	b.n	8010fdc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8010fcc:	697b      	ldr	r3, [r7, #20]
 8010fce:	2220      	movs	r2, #32
 8010fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010fd4:	697b      	ldr	r3, [r7, #20]
 8010fd6:	2200      	movs	r2, #0
 8010fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8010fdc:	6978      	ldr	r0, [r7, #20]
 8010fde:	f7fe f9e9 	bl	800f3b4 <HAL_I2C_ErrorCallback>
}
 8010fe2:	bf00      	nop
 8010fe4:	3718      	adds	r7, #24
 8010fe6:	46bd      	mov	sp, r7
 8010fe8:	bd80      	pop	{r7, pc}
 8010fea:	bf00      	nop
 8010fec:	20000058 	.word	0x20000058
 8010ff0:	14f8b589 	.word	0x14f8b589

08010ff4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8010ff4:	b580      	push	{r7, lr}
 8010ff6:	b084      	sub	sp, #16
 8010ff8:	af00      	add	r7, sp, #0
 8010ffa:	60f8      	str	r0, [r7, #12]
 8010ffc:	60b9      	str	r1, [r7, #8]
 8010ffe:	603b      	str	r3, [r7, #0]
 8011000:	4613      	mov	r3, r2
 8011002:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8011004:	e025      	b.n	8011052 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011006:	683b      	ldr	r3, [r7, #0]
 8011008:	f1b3 3fff 	cmp.w	r3, #4294967295
 801100c:	d021      	beq.n	8011052 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801100e:	f7f5 fc35 	bl	800687c <HAL_GetTick>
 8011012:	4602      	mov	r2, r0
 8011014:	69bb      	ldr	r3, [r7, #24]
 8011016:	1ad3      	subs	r3, r2, r3
 8011018:	683a      	ldr	r2, [r7, #0]
 801101a:	429a      	cmp	r2, r3
 801101c:	d302      	bcc.n	8011024 <I2C_WaitOnFlagUntilTimeout+0x30>
 801101e:	683b      	ldr	r3, [r7, #0]
 8011020:	2b00      	cmp	r3, #0
 8011022:	d116      	bne.n	8011052 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	2200      	movs	r2, #0
 8011028:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	2220      	movs	r2, #32
 801102e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	2200      	movs	r2, #0
 8011036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801103e:	f043 0220 	orr.w	r2, r3, #32
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	2200      	movs	r2, #0
 801104a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801104e:	2301      	movs	r3, #1
 8011050:	e023      	b.n	801109a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8011052:	68bb      	ldr	r3, [r7, #8]
 8011054:	0c1b      	lsrs	r3, r3, #16
 8011056:	b2db      	uxtb	r3, r3
 8011058:	2b01      	cmp	r3, #1
 801105a:	d10d      	bne.n	8011078 <I2C_WaitOnFlagUntilTimeout+0x84>
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	695b      	ldr	r3, [r3, #20]
 8011062:	43da      	mvns	r2, r3
 8011064:	68bb      	ldr	r3, [r7, #8]
 8011066:	4013      	ands	r3, r2
 8011068:	b29b      	uxth	r3, r3
 801106a:	2b00      	cmp	r3, #0
 801106c:	bf0c      	ite	eq
 801106e:	2301      	moveq	r3, #1
 8011070:	2300      	movne	r3, #0
 8011072:	b2db      	uxtb	r3, r3
 8011074:	461a      	mov	r2, r3
 8011076:	e00c      	b.n	8011092 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	699b      	ldr	r3, [r3, #24]
 801107e:	43da      	mvns	r2, r3
 8011080:	68bb      	ldr	r3, [r7, #8]
 8011082:	4013      	ands	r3, r2
 8011084:	b29b      	uxth	r3, r3
 8011086:	2b00      	cmp	r3, #0
 8011088:	bf0c      	ite	eq
 801108a:	2301      	moveq	r3, #1
 801108c:	2300      	movne	r3, #0
 801108e:	b2db      	uxtb	r3, r3
 8011090:	461a      	mov	r2, r3
 8011092:	79fb      	ldrb	r3, [r7, #7]
 8011094:	429a      	cmp	r2, r3
 8011096:	d0b6      	beq.n	8011006 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8011098:	2300      	movs	r3, #0
}
 801109a:	4618      	mov	r0, r3
 801109c:	3710      	adds	r7, #16
 801109e:	46bd      	mov	sp, r7
 80110a0:	bd80      	pop	{r7, pc}

080110a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80110a2:	b580      	push	{r7, lr}
 80110a4:	b084      	sub	sp, #16
 80110a6:	af00      	add	r7, sp, #0
 80110a8:	60f8      	str	r0, [r7, #12]
 80110aa:	60b9      	str	r1, [r7, #8]
 80110ac:	607a      	str	r2, [r7, #4]
 80110ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80110b0:	e051      	b.n	8011156 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	695b      	ldr	r3, [r3, #20]
 80110b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80110bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80110c0:	d123      	bne.n	801110a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	681a      	ldr	r2, [r3, #0]
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80110d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80110da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	2200      	movs	r2, #0
 80110e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	2220      	movs	r2, #32
 80110e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	2200      	movs	r2, #0
 80110ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110f6:	f043 0204 	orr.w	r2, r3, #4
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	2200      	movs	r2, #0
 8011102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8011106:	2301      	movs	r3, #1
 8011108:	e046      	b.n	8011198 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011110:	d021      	beq.n	8011156 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011112:	f7f5 fbb3 	bl	800687c <HAL_GetTick>
 8011116:	4602      	mov	r2, r0
 8011118:	683b      	ldr	r3, [r7, #0]
 801111a:	1ad3      	subs	r3, r2, r3
 801111c:	687a      	ldr	r2, [r7, #4]
 801111e:	429a      	cmp	r2, r3
 8011120:	d302      	bcc.n	8011128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d116      	bne.n	8011156 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	2200      	movs	r2, #0
 801112c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	2220      	movs	r2, #32
 8011132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	2200      	movs	r2, #0
 801113a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011142:	f043 0220 	orr.w	r2, r3, #32
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	2200      	movs	r2, #0
 801114e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8011152:	2301      	movs	r3, #1
 8011154:	e020      	b.n	8011198 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8011156:	68bb      	ldr	r3, [r7, #8]
 8011158:	0c1b      	lsrs	r3, r3, #16
 801115a:	b2db      	uxtb	r3, r3
 801115c:	2b01      	cmp	r3, #1
 801115e:	d10c      	bne.n	801117a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	695b      	ldr	r3, [r3, #20]
 8011166:	43da      	mvns	r2, r3
 8011168:	68bb      	ldr	r3, [r7, #8]
 801116a:	4013      	ands	r3, r2
 801116c:	b29b      	uxth	r3, r3
 801116e:	2b00      	cmp	r3, #0
 8011170:	bf14      	ite	ne
 8011172:	2301      	movne	r3, #1
 8011174:	2300      	moveq	r3, #0
 8011176:	b2db      	uxtb	r3, r3
 8011178:	e00b      	b.n	8011192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	699b      	ldr	r3, [r3, #24]
 8011180:	43da      	mvns	r2, r3
 8011182:	68bb      	ldr	r3, [r7, #8]
 8011184:	4013      	ands	r3, r2
 8011186:	b29b      	uxth	r3, r3
 8011188:	2b00      	cmp	r3, #0
 801118a:	bf14      	ite	ne
 801118c:	2301      	movne	r3, #1
 801118e:	2300      	moveq	r3, #0
 8011190:	b2db      	uxtb	r3, r3
 8011192:	2b00      	cmp	r3, #0
 8011194:	d18d      	bne.n	80110b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8011196:	2300      	movs	r3, #0
}
 8011198:	4618      	mov	r0, r3
 801119a:	3710      	adds	r7, #16
 801119c:	46bd      	mov	sp, r7
 801119e:	bd80      	pop	{r7, pc}

080111a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80111a0:	b580      	push	{r7, lr}
 80111a2:	b084      	sub	sp, #16
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	60f8      	str	r0, [r7, #12]
 80111a8:	60b9      	str	r1, [r7, #8]
 80111aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80111ac:	e02d      	b.n	801120a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80111ae:	68f8      	ldr	r0, [r7, #12]
 80111b0:	f000 f93e 	bl	8011430 <I2C_IsAcknowledgeFailed>
 80111b4:	4603      	mov	r3, r0
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d001      	beq.n	80111be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80111ba:	2301      	movs	r3, #1
 80111bc:	e02d      	b.n	801121a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80111be:	68bb      	ldr	r3, [r7, #8]
 80111c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111c4:	d021      	beq.n	801120a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80111c6:	f7f5 fb59 	bl	800687c <HAL_GetTick>
 80111ca:	4602      	mov	r2, r0
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	1ad3      	subs	r3, r2, r3
 80111d0:	68ba      	ldr	r2, [r7, #8]
 80111d2:	429a      	cmp	r2, r3
 80111d4:	d302      	bcc.n	80111dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80111d6:	68bb      	ldr	r3, [r7, #8]
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d116      	bne.n	801120a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	2200      	movs	r2, #0
 80111e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	2220      	movs	r2, #32
 80111e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	2200      	movs	r2, #0
 80111ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80111f6:	f043 0220 	orr.w	r2, r3, #32
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	2200      	movs	r2, #0
 8011202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8011206:	2301      	movs	r3, #1
 8011208:	e007      	b.n	801121a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	695b      	ldr	r3, [r3, #20]
 8011210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011214:	2b80      	cmp	r3, #128	; 0x80
 8011216:	d1ca      	bne.n	80111ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8011218:	2300      	movs	r3, #0
}
 801121a:	4618      	mov	r0, r3
 801121c:	3710      	adds	r7, #16
 801121e:	46bd      	mov	sp, r7
 8011220:	bd80      	pop	{r7, pc}

08011222 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8011222:	b580      	push	{r7, lr}
 8011224:	b084      	sub	sp, #16
 8011226:	af00      	add	r7, sp, #0
 8011228:	60f8      	str	r0, [r7, #12]
 801122a:	60b9      	str	r1, [r7, #8]
 801122c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 801122e:	e02d      	b.n	801128c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8011230:	68f8      	ldr	r0, [r7, #12]
 8011232:	f000 f8fd 	bl	8011430 <I2C_IsAcknowledgeFailed>
 8011236:	4603      	mov	r3, r0
 8011238:	2b00      	cmp	r3, #0
 801123a:	d001      	beq.n	8011240 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 801123c:	2301      	movs	r3, #1
 801123e:	e02d      	b.n	801129c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011240:	68bb      	ldr	r3, [r7, #8]
 8011242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011246:	d021      	beq.n	801128c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011248:	f7f5 fb18 	bl	800687c <HAL_GetTick>
 801124c:	4602      	mov	r2, r0
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	1ad3      	subs	r3, r2, r3
 8011252:	68ba      	ldr	r2, [r7, #8]
 8011254:	429a      	cmp	r2, r3
 8011256:	d302      	bcc.n	801125e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8011258:	68bb      	ldr	r3, [r7, #8]
 801125a:	2b00      	cmp	r3, #0
 801125c:	d116      	bne.n	801128c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	2200      	movs	r2, #0
 8011262:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	2220      	movs	r2, #32
 8011268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	2200      	movs	r2, #0
 8011270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011278:	f043 0220 	orr.w	r2, r3, #32
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	2200      	movs	r2, #0
 8011284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8011288:	2301      	movs	r3, #1
 801128a:	e007      	b.n	801129c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	695b      	ldr	r3, [r3, #20]
 8011292:	f003 0304 	and.w	r3, r3, #4
 8011296:	2b04      	cmp	r3, #4
 8011298:	d1ca      	bne.n	8011230 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801129a:	2300      	movs	r3, #0
}
 801129c:	4618      	mov	r0, r3
 801129e:	3710      	adds	r7, #16
 80112a0:	46bd      	mov	sp, r7
 80112a2:	bd80      	pop	{r7, pc}

080112a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80112a4:	b580      	push	{r7, lr}
 80112a6:	b084      	sub	sp, #16
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	60f8      	str	r0, [r7, #12]
 80112ac:	60b9      	str	r1, [r7, #8]
 80112ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80112b0:	e029      	b.n	8011306 <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80112b2:	68f8      	ldr	r0, [r7, #12]
 80112b4:	f000 f8bc 	bl	8011430 <I2C_IsAcknowledgeFailed>
 80112b8:	4603      	mov	r3, r0
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d001      	beq.n	80112c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80112be:	2301      	movs	r3, #1
 80112c0:	e029      	b.n	8011316 <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80112c2:	f7f5 fadb 	bl	800687c <HAL_GetTick>
 80112c6:	4602      	mov	r2, r0
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	1ad3      	subs	r3, r2, r3
 80112cc:	68ba      	ldr	r2, [r7, #8]
 80112ce:	429a      	cmp	r2, r3
 80112d0:	d302      	bcc.n	80112d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 80112d2:	68bb      	ldr	r3, [r7, #8]
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d116      	bne.n	8011306 <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	2200      	movs	r2, #0
 80112dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	2220      	movs	r2, #32
 80112e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	2200      	movs	r2, #0
 80112ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112f2:	f043 0220 	orr.w	r2, r3, #32
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	2200      	movs	r2, #0
 80112fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8011302:	2301      	movs	r3, #1
 8011304:	e007      	b.n	8011316 <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	695b      	ldr	r3, [r3, #20]
 801130c:	f003 0310 	and.w	r3, r3, #16
 8011310:	2b10      	cmp	r3, #16
 8011312:	d1ce      	bne.n	80112b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8011314:	2300      	movs	r3, #0
}
 8011316:	4618      	mov	r0, r3
 8011318:	3710      	adds	r7, #16
 801131a:	46bd      	mov	sp, r7
 801131c:	bd80      	pop	{r7, pc}

0801131e <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 801131e:	b480      	push	{r7}
 8011320:	b085      	sub	sp, #20
 8011322:	af00      	add	r7, sp, #0
 8011324:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011326:	2300      	movs	r3, #0
 8011328:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 801132a:	4b14      	ldr	r3, [pc, #80]	; (801137c <I2C_WaitOnSTOPRequestThroughIT+0x5e>)
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	08db      	lsrs	r3, r3, #3
 8011330:	4a13      	ldr	r2, [pc, #76]	; (8011380 <I2C_WaitOnSTOPRequestThroughIT+0x62>)
 8011332:	fba2 2303 	umull	r2, r3, r2, r3
 8011336:	0a1a      	lsrs	r2, r3, #8
 8011338:	4613      	mov	r3, r2
 801133a:	009b      	lsls	r3, r3, #2
 801133c:	4413      	add	r3, r2
 801133e:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	3b01      	subs	r3, #1
 8011344:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	2b00      	cmp	r3, #0
 801134a:	d107      	bne.n	801135c <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011350:	f043 0220 	orr.w	r2, r3, #32
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8011358:	2301      	movs	r3, #1
 801135a:	e008      	b.n	801136e <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011366:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801136a:	d0e9      	beq.n	8011340 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 801136c:	2300      	movs	r3, #0
}
 801136e:	4618      	mov	r0, r3
 8011370:	3714      	adds	r7, #20
 8011372:	46bd      	mov	sp, r7
 8011374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011378:	4770      	bx	lr
 801137a:	bf00      	nop
 801137c:	20000058 	.word	0x20000058
 8011380:	14f8b589 	.word	0x14f8b589

08011384 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8011384:	b580      	push	{r7, lr}
 8011386:	b084      	sub	sp, #16
 8011388:	af00      	add	r7, sp, #0
 801138a:	60f8      	str	r0, [r7, #12]
 801138c:	60b9      	str	r1, [r7, #8]
 801138e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8011390:	e042      	b.n	8011418 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	695b      	ldr	r3, [r3, #20]
 8011398:	f003 0310 	and.w	r3, r3, #16
 801139c:	2b10      	cmp	r3, #16
 801139e:	d119      	bne.n	80113d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	f06f 0210 	mvn.w	r2, #16
 80113a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	2200      	movs	r2, #0
 80113ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	2220      	movs	r2, #32
 80113b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	2200      	movs	r2, #0
 80113bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	2200      	movs	r2, #0
 80113cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80113d0:	2301      	movs	r3, #1
 80113d2:	e029      	b.n	8011428 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80113d4:	f7f5 fa52 	bl	800687c <HAL_GetTick>
 80113d8:	4602      	mov	r2, r0
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	1ad3      	subs	r3, r2, r3
 80113de:	68ba      	ldr	r2, [r7, #8]
 80113e0:	429a      	cmp	r2, r3
 80113e2:	d302      	bcc.n	80113ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80113e4:	68bb      	ldr	r3, [r7, #8]
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d116      	bne.n	8011418 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	2200      	movs	r2, #0
 80113ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	2220      	movs	r2, #32
 80113f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	2200      	movs	r2, #0
 80113fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011404:	f043 0220 	orr.w	r2, r3, #32
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	2200      	movs	r2, #0
 8011410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8011414:	2301      	movs	r3, #1
 8011416:	e007      	b.n	8011428 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	695b      	ldr	r3, [r3, #20]
 801141e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011422:	2b40      	cmp	r3, #64	; 0x40
 8011424:	d1b5      	bne.n	8011392 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8011426:	2300      	movs	r3, #0
}
 8011428:	4618      	mov	r0, r3
 801142a:	3710      	adds	r7, #16
 801142c:	46bd      	mov	sp, r7
 801142e:	bd80      	pop	{r7, pc}

08011430 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8011430:	b480      	push	{r7}
 8011432:	b083      	sub	sp, #12
 8011434:	af00      	add	r7, sp, #0
 8011436:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	695b      	ldr	r3, [r3, #20]
 801143e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011446:	d11b      	bne.n	8011480 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8011450:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	2200      	movs	r2, #0
 8011456:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	2220      	movs	r2, #32
 801145c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	2200      	movs	r2, #0
 8011464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801146c:	f043 0204 	orr.w	r2, r3, #4
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	2200      	movs	r2, #0
 8011478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 801147c:	2301      	movs	r3, #1
 801147e:	e000      	b.n	8011482 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8011480:	2300      	movs	r3, #0
}
 8011482:	4618      	mov	r0, r3
 8011484:	370c      	adds	r7, #12
 8011486:	46bd      	mov	sp, r7
 8011488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801148c:	4770      	bx	lr

0801148e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 801148e:	b480      	push	{r7}
 8011490:	b083      	sub	sp, #12
 8011492:	af00      	add	r7, sp, #0
 8011494:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801149a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 801149e:	d103      	bne.n	80114a8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	2201      	movs	r2, #1
 80114a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80114a6:	e007      	b.n	80114b8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114ac:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80114b0:	d102      	bne.n	80114b8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	2208      	movs	r2, #8
 80114b6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80114b8:	bf00      	nop
 80114ba:	370c      	adds	r7, #12
 80114bc:	46bd      	mov	sp, r7
 80114be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c2:	4770      	bx	lr

080114c4 <HAL_PWR_DeInit>:
/**
  * @brief Deinitializes the HAL PWR peripheral registers to their default reset values.
  * @retval None
  */
void HAL_PWR_DeInit(void)
{
 80114c4:	b480      	push	{r7}
 80114c6:	af00      	add	r7, sp, #0
  __HAL_RCC_PWR_FORCE_RESET();
 80114c8:	4b08      	ldr	r3, [pc, #32]	; (80114ec <HAL_PWR_DeInit+0x28>)
 80114ca:	6a1b      	ldr	r3, [r3, #32]
 80114cc:	4a07      	ldr	r2, [pc, #28]	; (80114ec <HAL_PWR_DeInit+0x28>)
 80114ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80114d2:	6213      	str	r3, [r2, #32]
  __HAL_RCC_PWR_RELEASE_RESET();
 80114d4:	4b05      	ldr	r3, [pc, #20]	; (80114ec <HAL_PWR_DeInit+0x28>)
 80114d6:	6a1b      	ldr	r3, [r3, #32]
 80114d8:	4a04      	ldr	r2, [pc, #16]	; (80114ec <HAL_PWR_DeInit+0x28>)
 80114da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80114de:	6213      	str	r3, [r2, #32]
}
 80114e0:	bf00      	nop
 80114e2:	46bd      	mov	sp, r7
 80114e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e8:	4770      	bx	lr
 80114ea:	bf00      	nop
 80114ec:	40023800 	.word	0x40023800

080114f0 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80114f0:	b480      	push	{r7}
 80114f2:	b083      	sub	sp, #12
 80114f4:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80114f6:	4b06      	ldr	r3, [pc, #24]	; (8011510 <HAL_PWR_EnableBkUpAccess+0x20>)
 80114f8:	2201      	movs	r2, #1
 80114fa:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80114fc:	4b05      	ldr	r3, [pc, #20]	; (8011514 <HAL_PWR_EnableBkUpAccess+0x24>)
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8011502:	687b      	ldr	r3, [r7, #4]
}
 8011504:	bf00      	nop
 8011506:	370c      	adds	r7, #12
 8011508:	46bd      	mov	sp, r7
 801150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801150e:	4770      	bx	lr
 8011510:	420e0020 	.word	0x420e0020
 8011514:	40007000 	.word	0x40007000

08011518 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8011518:	b480      	push	{r7}
 801151a:	b083      	sub	sp, #12
 801151c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 801151e:	4b06      	ldr	r3, [pc, #24]	; (8011538 <HAL_PWR_DisableBkUpAccess+0x20>)
 8011520:	2200      	movs	r2, #0
 8011522:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8011524:	4b05      	ldr	r3, [pc, #20]	; (801153c <HAL_PWR_DisableBkUpAccess+0x24>)
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 801152a:	687b      	ldr	r3, [r7, #4]
}
 801152c:	bf00      	nop
 801152e:	370c      	adds	r7, #12
 8011530:	46bd      	mov	sp, r7
 8011532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011536:	4770      	bx	lr
 8011538:	420e0020 	.word	0x420e0020
 801153c:	40007000 	.word	0x40007000

08011540 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage threshold corresponding to each 
  *         detection level.
  * @retval None
  */
void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8011540:	b480      	push	{r7}
 8011542:	b083      	sub	sp, #12
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));
  
  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 8011548:	4b2b      	ldr	r3, [pc, #172]	; (80115f8 <HAL_PWR_ConfigPVD+0xb8>)
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	4928      	ldr	r1, [pc, #160]	; (80115f8 <HAL_PWR_ConfigPVD+0xb8>)
 8011556:	4313      	orrs	r3, r2
 8011558:	600b      	str	r3, [r1, #0]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 801155a:	4b28      	ldr	r3, [pc, #160]	; (80115fc <HAL_PWR_ConfigPVD+0xbc>)
 801155c:	685b      	ldr	r3, [r3, #4]
 801155e:	4a27      	ldr	r2, [pc, #156]	; (80115fc <HAL_PWR_ConfigPVD+0xbc>)
 8011560:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011564:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8011566:	4b25      	ldr	r3, [pc, #148]	; (80115fc <HAL_PWR_ConfigPVD+0xbc>)
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	4a24      	ldr	r2, [pc, #144]	; (80115fc <HAL_PWR_ConfigPVD+0xbc>)
 801156c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011570:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8011572:	4b22      	ldr	r3, [pc, #136]	; (80115fc <HAL_PWR_ConfigPVD+0xbc>)
 8011574:	689b      	ldr	r3, [r3, #8]
 8011576:	4a21      	ldr	r2, [pc, #132]	; (80115fc <HAL_PWR_ConfigPVD+0xbc>)
 8011578:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801157c:	6093      	str	r3, [r2, #8]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 801157e:	4b1f      	ldr	r3, [pc, #124]	; (80115fc <HAL_PWR_ConfigPVD+0xbc>)
 8011580:	68db      	ldr	r3, [r3, #12]
 8011582:	4a1e      	ldr	r2, [pc, #120]	; (80115fc <HAL_PWR_ConfigPVD+0xbc>)
 8011584:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011588:	60d3      	str	r3, [r2, #12]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	685b      	ldr	r3, [r3, #4]
 801158e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011592:	2b00      	cmp	r3, #0
 8011594:	d005      	beq.n	80115a2 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8011596:	4b19      	ldr	r3, [pc, #100]	; (80115fc <HAL_PWR_ConfigPVD+0xbc>)
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	4a18      	ldr	r2, [pc, #96]	; (80115fc <HAL_PWR_ConfigPVD+0xbc>)
 801159c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80115a0:	6013      	str	r3, [r2, #0]
  }
  
  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	685b      	ldr	r3, [r3, #4]
 80115a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d005      	beq.n	80115ba <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 80115ae:	4b13      	ldr	r3, [pc, #76]	; (80115fc <HAL_PWR_ConfigPVD+0xbc>)
 80115b0:	685b      	ldr	r3, [r3, #4]
 80115b2:	4a12      	ldr	r2, [pc, #72]	; (80115fc <HAL_PWR_ConfigPVD+0xbc>)
 80115b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80115b8:	6053      	str	r3, [r2, #4]
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	685b      	ldr	r3, [r3, #4]
 80115be:	f003 0301 	and.w	r3, r3, #1
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d005      	beq.n	80115d2 <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 80115c6:	4b0d      	ldr	r3, [pc, #52]	; (80115fc <HAL_PWR_ConfigPVD+0xbc>)
 80115c8:	689b      	ldr	r3, [r3, #8]
 80115ca:	4a0c      	ldr	r2, [pc, #48]	; (80115fc <HAL_PWR_ConfigPVD+0xbc>)
 80115cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80115d0:	6093      	str	r3, [r2, #8]
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	685b      	ldr	r3, [r3, #4]
 80115d6:	f003 0302 	and.w	r3, r3, #2
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d005      	beq.n	80115ea <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 80115de:	4b07      	ldr	r3, [pc, #28]	; (80115fc <HAL_PWR_ConfigPVD+0xbc>)
 80115e0:	68db      	ldr	r3, [r3, #12]
 80115e2:	4a06      	ldr	r2, [pc, #24]	; (80115fc <HAL_PWR_ConfigPVD+0xbc>)
 80115e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80115e8:	60d3      	str	r3, [r2, #12]
  }
}
 80115ea:	bf00      	nop
 80115ec:	370c      	adds	r7, #12
 80115ee:	46bd      	mov	sp, r7
 80115f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f4:	4770      	bx	lr
 80115f6:	bf00      	nop
 80115f8:	40007000 	.word	0x40007000
 80115fc:	40013c00 	.word	0x40013c00

08011600 <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8011600:	b480      	push	{r7}
 8011602:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)ENABLE;
 8011604:	4b03      	ldr	r3, [pc, #12]	; (8011614 <HAL_PWR_EnablePVD+0x14>)
 8011606:	2201      	movs	r2, #1
 8011608:	601a      	str	r2, [r3, #0]
}
 801160a:	bf00      	nop
 801160c:	46bd      	mov	sp, r7
 801160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011612:	4770      	bx	lr
 8011614:	420e0010 	.word	0x420e0010

08011618 <HAL_PWR_DisablePVD>:
/**
  * @brief Disables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
 8011618:	b480      	push	{r7}
 801161a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)DISABLE;
 801161c:	4b03      	ldr	r3, [pc, #12]	; (801162c <HAL_PWR_DisablePVD+0x14>)
 801161e:	2200      	movs	r2, #0
 8011620:	601a      	str	r2, [r3, #0]
}
 8011622:	bf00      	nop
 8011624:	46bd      	mov	sp, r7
 8011626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801162a:	4770      	bx	lr
 801162c:	420e0010 	.word	0x420e0010

08011630 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8011630:	b480      	push	{r7}
 8011632:	b083      	sub	sp, #12
 8011634:	af00      	add	r7, sp, #0
 8011636:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8011638:	4b05      	ldr	r3, [pc, #20]	; (8011650 <HAL_PWR_EnableWakeUpPin+0x20>)
 801163a:	685a      	ldr	r2, [r3, #4]
 801163c:	4904      	ldr	r1, [pc, #16]	; (8011650 <HAL_PWR_EnableWakeUpPin+0x20>)
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	4313      	orrs	r3, r2
 8011642:	604b      	str	r3, [r1, #4]
}
 8011644:	bf00      	nop
 8011646:	370c      	adds	r7, #12
 8011648:	46bd      	mov	sp, r7
 801164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801164e:	4770      	bx	lr
 8011650:	40007000 	.word	0x40007000

08011654 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8011654:	b480      	push	{r7}
 8011656:	b083      	sub	sp, #12
 8011658:	af00      	add	r7, sp, #0
 801165a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 801165c:	4b06      	ldr	r3, [pc, #24]	; (8011678 <HAL_PWR_DisableWakeUpPin+0x24>)
 801165e:	685a      	ldr	r2, [r3, #4]
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	43db      	mvns	r3, r3
 8011664:	4904      	ldr	r1, [pc, #16]	; (8011678 <HAL_PWR_DisableWakeUpPin+0x24>)
 8011666:	4013      	ands	r3, r2
 8011668:	604b      	str	r3, [r1, #4]
}
 801166a:	bf00      	nop
 801166c:	370c      	adds	r7, #12
 801166e:	46bd      	mov	sp, r7
 8011670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011674:	4770      	bx	lr
 8011676:	bf00      	nop
 8011678:	40007000 	.word	0x40007000

0801167c <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 801167c:	b480      	push	{r7}
 801167e:	b083      	sub	sp, #12
 8011680:	af00      	add	r7, sp, #0
 8011682:	6078      	str	r0, [r7, #4]
 8011684:	460b      	mov	r3, r1
 8011686:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8011688:	4b09      	ldr	r3, [pc, #36]	; (80116b0 <HAL_PWR_EnterSLEEPMode+0x34>)
 801168a:	691b      	ldr	r3, [r3, #16]
 801168c:	4a08      	ldr	r2, [pc, #32]	; (80116b0 <HAL_PWR_EnterSLEEPMode+0x34>)
 801168e:	f023 0304 	bic.w	r3, r3, #4
 8011692:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8011694:	78fb      	ldrb	r3, [r7, #3]
 8011696:	2b01      	cmp	r3, #1
 8011698:	d101      	bne.n	801169e <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 801169a:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 801169c:	e002      	b.n	80116a4 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 801169e:	bf40      	sev
    __WFE();
 80116a0:	bf20      	wfe
    __WFE();
 80116a2:	bf20      	wfe
}
 80116a4:	bf00      	nop
 80116a6:	370c      	adds	r7, #12
 80116a8:	46bd      	mov	sp, r7
 80116aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ae:	4770      	bx	lr
 80116b0:	e000ed00 	.word	0xe000ed00

080116b4 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80116b4:	b480      	push	{r7}
 80116b6:	b083      	sub	sp, #12
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	6078      	str	r0, [r7, #4]
 80116bc:	460b      	mov	r3, r1
 80116be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 80116c0:	4b10      	ldr	r3, [pc, #64]	; (8011704 <HAL_PWR_EnterSTOPMode+0x50>)
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	f023 0203 	bic.w	r2, r3, #3
 80116c8:	490e      	ldr	r1, [pc, #56]	; (8011704 <HAL_PWR_EnterSTOPMode+0x50>)
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	4313      	orrs	r3, r2
 80116ce:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80116d0:	4b0d      	ldr	r3, [pc, #52]	; (8011708 <HAL_PWR_EnterSTOPMode+0x54>)
 80116d2:	691b      	ldr	r3, [r3, #16]
 80116d4:	4a0c      	ldr	r2, [pc, #48]	; (8011708 <HAL_PWR_EnterSTOPMode+0x54>)
 80116d6:	f043 0304 	orr.w	r3, r3, #4
 80116da:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80116dc:	78fb      	ldrb	r3, [r7, #3]
 80116de:	2b01      	cmp	r3, #1
 80116e0:	d101      	bne.n	80116e6 <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 80116e2:	bf30      	wfi
 80116e4:	e002      	b.n	80116ec <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80116e6:	bf40      	sev
    __WFE();
 80116e8:	bf20      	wfe
    __WFE();
 80116ea:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 80116ec:	4b06      	ldr	r3, [pc, #24]	; (8011708 <HAL_PWR_EnterSTOPMode+0x54>)
 80116ee:	691b      	ldr	r3, [r3, #16]
 80116f0:	4a05      	ldr	r2, [pc, #20]	; (8011708 <HAL_PWR_EnterSTOPMode+0x54>)
 80116f2:	f023 0304 	bic.w	r3, r3, #4
 80116f6:	6113      	str	r3, [r2, #16]
}
 80116f8:	bf00      	nop
 80116fa:	370c      	adds	r7, #12
 80116fc:	46bd      	mov	sp, r7
 80116fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011702:	4770      	bx	lr
 8011704:	40007000 	.word	0x40007000
 8011708:	e000ed00 	.word	0xe000ed00

0801170c <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 801170c:	b480      	push	{r7}
 801170e:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8011710:	4b08      	ldr	r3, [pc, #32]	; (8011734 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	4a07      	ldr	r2, [pc, #28]	; (8011734 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8011716:	f043 0302 	orr.w	r3, r3, #2
 801171a:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 801171c:	4b06      	ldr	r3, [pc, #24]	; (8011738 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 801171e:	691b      	ldr	r3, [r3, #16]
 8011720:	4a05      	ldr	r2, [pc, #20]	; (8011738 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8011722:	f043 0304 	orr.w	r3, r3, #4
 8011726:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8011728:	bf30      	wfi
}
 801172a:	bf00      	nop
 801172c:	46bd      	mov	sp, r7
 801172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011732:	4770      	bx	lr
 8011734:	40007000 	.word	0x40007000
 8011738:	e000ed00 	.word	0xe000ed00

0801173c <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 801173c:	b580      	push	{r7, lr}
 801173e:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8011740:	4b06      	ldr	r3, [pc, #24]	; (801175c <HAL_PWR_PVD_IRQHandler+0x20>)
 8011742:	695b      	ldr	r3, [r3, #20]
 8011744:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011748:	2b00      	cmp	r3, #0
 801174a:	d005      	beq.n	8011758 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 801174c:	f000 f808 	bl	8011760 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8011750:	4b02      	ldr	r3, [pc, #8]	; (801175c <HAL_PWR_PVD_IRQHandler+0x20>)
 8011752:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8011756:	615a      	str	r2, [r3, #20]
  }
}
 8011758:	bf00      	nop
 801175a:	bd80      	pop	{r7, pc}
 801175c:	40013c00 	.word	0x40013c00

08011760 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8011760:	b480      	push	{r7}
 8011762:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8011764:	bf00      	nop
 8011766:	46bd      	mov	sp, r7
 8011768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801176c:	4770      	bx	lr

0801176e <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 801176e:	b480      	push	{r7}
 8011770:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8011772:	4b05      	ldr	r3, [pc, #20]	; (8011788 <HAL_PWR_EnableSleepOnExit+0x1a>)
 8011774:	691b      	ldr	r3, [r3, #16]
 8011776:	4a04      	ldr	r2, [pc, #16]	; (8011788 <HAL_PWR_EnableSleepOnExit+0x1a>)
 8011778:	f043 0302 	orr.w	r3, r3, #2
 801177c:	6113      	str	r3, [r2, #16]
}
 801177e:	bf00      	nop
 8011780:	46bd      	mov	sp, r7
 8011782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011786:	4770      	bx	lr
 8011788:	e000ed00 	.word	0xe000ed00

0801178c <HAL_PWR_DisableSleepOnExit>:
  * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
  *       re-enters SLEEP mode when an interruption handling is over.          
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 801178c:	b480      	push	{r7}
 801178e:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8011790:	4b05      	ldr	r3, [pc, #20]	; (80117a8 <HAL_PWR_DisableSleepOnExit+0x1c>)
 8011792:	691b      	ldr	r3, [r3, #16]
 8011794:	4a04      	ldr	r2, [pc, #16]	; (80117a8 <HAL_PWR_DisableSleepOnExit+0x1c>)
 8011796:	f023 0302 	bic.w	r3, r3, #2
 801179a:	6113      	str	r3, [r2, #16]
}
 801179c:	bf00      	nop
 801179e:	46bd      	mov	sp, r7
 80117a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a4:	4770      	bx	lr
 80117a6:	bf00      	nop
 80117a8:	e000ed00 	.word	0xe000ed00

080117ac <HAL_PWR_EnableSEVOnPend>:
  * @note Sets SEVONPEND bit of SCR register. When this bit is set, this causes 
  *       WFE to wake up when an interrupt moves from inactive to pended.
  * @retval None
  */
void HAL_PWR_EnableSEVOnPend(void)
{
 80117ac:	b480      	push	{r7}
 80117ae:	af00      	add	r7, sp, #0
  /* Set SEVONPEND bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 80117b0:	4b05      	ldr	r3, [pc, #20]	; (80117c8 <HAL_PWR_EnableSEVOnPend+0x1c>)
 80117b2:	691b      	ldr	r3, [r3, #16]
 80117b4:	4a04      	ldr	r2, [pc, #16]	; (80117c8 <HAL_PWR_EnableSEVOnPend+0x1c>)
 80117b6:	f043 0310 	orr.w	r3, r3, #16
 80117ba:	6113      	str	r3, [r2, #16]
}
 80117bc:	bf00      	nop
 80117be:	46bd      	mov	sp, r7
 80117c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c4:	4770      	bx	lr
 80117c6:	bf00      	nop
 80117c8:	e000ed00 	.word	0xe000ed00

080117cc <HAL_PWR_DisableSEVOnPend>:
  * @note Clears SEVONPEND bit of SCR register. When this bit is set, this causes 
  *       WFE to wake up when an interrupt moves from inactive to pended.         
  * @retval None
  */
void HAL_PWR_DisableSEVOnPend(void)
{
 80117cc:	b480      	push	{r7}
 80117ce:	af00      	add	r7, sp, #0
  /* Clear SEVONPEND bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 80117d0:	4b05      	ldr	r3, [pc, #20]	; (80117e8 <HAL_PWR_DisableSEVOnPend+0x1c>)
 80117d2:	691b      	ldr	r3, [r3, #16]
 80117d4:	4a04      	ldr	r2, [pc, #16]	; (80117e8 <HAL_PWR_DisableSEVOnPend+0x1c>)
 80117d6:	f023 0310 	bic.w	r3, r3, #16
 80117da:	6113      	str	r3, [r2, #16]
}
 80117dc:	bf00      	nop
 80117de:	46bd      	mov	sp, r7
 80117e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e4:	4770      	bx	lr
 80117e6:	bf00      	nop
 80117e8:	e000ed00 	.word	0xe000ed00

080117ec <HAL_PWREx_EnableBkUpReg>:
/**
  * @brief Enables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg(void)
{
 80117ec:	b580      	push	{r7, lr}
 80117ee:	b082      	sub	sp, #8
 80117f0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80117f2:	2300      	movs	r3, #0
 80117f4:	607b      	str	r3, [r7, #4]

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)ENABLE;
 80117f6:	4b0e      	ldr	r3, [pc, #56]	; (8011830 <HAL_PWREx_EnableBkUpReg+0x44>)
 80117f8:	2201      	movs	r2, #1
 80117fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80117fc:	f7f5 f83e 	bl	800687c <HAL_GetTick>
 8011800:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 8011802:	e009      	b.n	8011818 <HAL_PWREx_EnableBkUpReg+0x2c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 8011804:	f7f5 f83a 	bl	800687c <HAL_GetTick>
 8011808:	4602      	mov	r2, r0
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	1ad3      	subs	r3, r2, r3
 801180e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011812:	d901      	bls.n	8011818 <HAL_PWREx_EnableBkUpReg+0x2c>
    {
      return HAL_TIMEOUT;
 8011814:	2303      	movs	r3, #3
 8011816:	e006      	b.n	8011826 <HAL_PWREx_EnableBkUpReg+0x3a>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 8011818:	4b06      	ldr	r3, [pc, #24]	; (8011834 <HAL_PWREx_EnableBkUpReg+0x48>)
 801181a:	685b      	ldr	r3, [r3, #4]
 801181c:	f003 0308 	and.w	r3, r3, #8
 8011820:	2b08      	cmp	r3, #8
 8011822:	d1ef      	bne.n	8011804 <HAL_PWREx_EnableBkUpReg+0x18>
    } 
  }
  return HAL_OK;
 8011824:	2300      	movs	r3, #0
}
 8011826:	4618      	mov	r0, r3
 8011828:	3708      	adds	r7, #8
 801182a:	46bd      	mov	sp, r7
 801182c:	bd80      	pop	{r7, pc}
 801182e:	bf00      	nop
 8011830:	420e00a4 	.word	0x420e00a4
 8011834:	40007000 	.word	0x40007000

08011838 <HAL_PWREx_DisableBkUpReg>:
/**
  * @brief Disables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_DisableBkUpReg(void)
{
 8011838:	b580      	push	{r7, lr}
 801183a:	b082      	sub	sp, #8
 801183c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 801183e:	2300      	movs	r3, #0
 8011840:	607b      	str	r3, [r7, #4]

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)DISABLE;
 8011842:	4b0e      	ldr	r3, [pc, #56]	; (801187c <HAL_PWREx_DisableBkUpReg+0x44>)
 8011844:	2200      	movs	r2, #0
 8011846:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8011848:	f7f5 f818 	bl	800687c <HAL_GetTick>
 801184c:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
 801184e:	e009      	b.n	8011864 <HAL_PWREx_DisableBkUpReg+0x2c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 8011850:	f7f5 f814 	bl	800687c <HAL_GetTick>
 8011854:	4602      	mov	r2, r0
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	1ad3      	subs	r3, r2, r3
 801185a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801185e:	d901      	bls.n	8011864 <HAL_PWREx_DisableBkUpReg+0x2c>
    {
      return HAL_TIMEOUT;
 8011860:	2303      	movs	r3, #3
 8011862:	e006      	b.n	8011872 <HAL_PWREx_DisableBkUpReg+0x3a>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
 8011864:	4b06      	ldr	r3, [pc, #24]	; (8011880 <HAL_PWREx_DisableBkUpReg+0x48>)
 8011866:	685b      	ldr	r3, [r3, #4]
 8011868:	f003 0308 	and.w	r3, r3, #8
 801186c:	2b08      	cmp	r3, #8
 801186e:	d0ef      	beq.n	8011850 <HAL_PWREx_DisableBkUpReg+0x18>
    } 
  }
  return HAL_OK;
 8011870:	2300      	movs	r3, #0
}
 8011872:	4618      	mov	r0, r3
 8011874:	3708      	adds	r7, #8
 8011876:	46bd      	mov	sp, r7
 8011878:	bd80      	pop	{r7, pc}
 801187a:	bf00      	nop
 801187c:	420e00a4 	.word	0x420e00a4
 8011880:	40007000 	.word	0x40007000

08011884 <HAL_PWREx_EnableFlashPowerDown>:
/**
  * @brief Enables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_EnableFlashPowerDown(void)
{
 8011884:	b480      	push	{r7}
 8011886:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)ENABLE;
 8011888:	4b03      	ldr	r3, [pc, #12]	; (8011898 <HAL_PWREx_EnableFlashPowerDown+0x14>)
 801188a:	2201      	movs	r2, #1
 801188c:	601a      	str	r2, [r3, #0]
}
 801188e:	bf00      	nop
 8011890:	46bd      	mov	sp, r7
 8011892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011896:	4770      	bx	lr
 8011898:	420e0024 	.word	0x420e0024

0801189c <HAL_PWREx_DisableFlashPowerDown>:
/**
  * @brief Disables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_DisableFlashPowerDown(void)
{
 801189c:	b480      	push	{r7}
 801189e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)DISABLE;
 80118a0:	4b03      	ldr	r3, [pc, #12]	; (80118b0 <HAL_PWREx_DisableFlashPowerDown+0x14>)
 80118a2:	2200      	movs	r2, #0
 80118a4:	601a      	str	r2, [r3, #0]
}
 80118a6:	bf00      	nop
 80118a8:	46bd      	mov	sp, r7
 80118aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ae:	4770      	bx	lr
 80118b0:	420e0024 	.word	0x420e0024

080118b4 <HAL_PWREx_GetVoltageRange>:
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE1: Regulator voltage output Scale 1 mode
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE2: Regulator voltage output Scale 2 mode
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE3: Regulator voltage output Scale 3 mode
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80118b4:	b480      	push	{r7}
 80118b6:	af00      	add	r7, sp, #0
  return (PWR->CR & PWR_CR_VOS);
 80118b8:	4b04      	ldr	r3, [pc, #16]	; (80118cc <HAL_PWREx_GetVoltageRange+0x18>)
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
}
 80118c0:	4618      	mov	r0, r3
 80118c2:	46bd      	mov	sp, r7
 80118c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c8:	4770      	bx	lr
 80118ca:	bf00      	nop
 80118cc:	40007000 	.word	0x40007000

080118d0 <HAL_PWREx_ControlVoltageScaling>:
  *        When moving from Range 2 to Range 1, the system frequency can be increased to
  *        a value up to 168 MHz after calling HAL_PWREx_ConfigVoltageScaling() API.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80118d0:	b580      	push	{r7, lr}
 80118d2:	b086      	sub	sp, #24
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80118d8:	2300      	movs	r3, #0
 80118da:	617b      	str	r3, [r7, #20]
  
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* Enable PWR RCC Clock Peripheral */
  __HAL_RCC_PWR_CLK_ENABLE();
 80118dc:	2300      	movs	r3, #0
 80118de:	60fb      	str	r3, [r7, #12]
 80118e0:	4b1a      	ldr	r3, [pc, #104]	; (801194c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80118e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118e4:	4a19      	ldr	r2, [pc, #100]	; (801194c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80118e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80118ea:	6413      	str	r3, [r2, #64]	; 0x40
 80118ec:	4b17      	ldr	r3, [pc, #92]	; (801194c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80118ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80118f4:	60fb      	str	r3, [r7, #12]
 80118f6:	68fb      	ldr	r3, [r7, #12]
  
  /* Set Range */
  __HAL_PWR_VOLTAGESCALING_CONFIG(VoltageScaling);
 80118f8:	2300      	movs	r3, #0
 80118fa:	613b      	str	r3, [r7, #16]
 80118fc:	4b14      	ldr	r3, [pc, #80]	; (8011950 <HAL_PWREx_ControlVoltageScaling+0x80>)
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8011904:	4912      	ldr	r1, [pc, #72]	; (8011950 <HAL_PWREx_ControlVoltageScaling+0x80>)
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	4313      	orrs	r3, r2
 801190a:	600b      	str	r3, [r1, #0]
 801190c:	4b10      	ldr	r3, [pc, #64]	; (8011950 <HAL_PWREx_ControlVoltageScaling+0x80>)
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011914:	613b      	str	r3, [r7, #16]
 8011916:	693b      	ldr	r3, [r7, #16]
  
  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8011918:	f7f4 ffb0 	bl	800687c <HAL_GetTick>
 801191c:	6178      	str	r0, [r7, #20]
  while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
 801191e:	e009      	b.n	8011934 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    if((HAL_GetTick() - tickstart ) > PWR_VOSRDY_TIMEOUT_VALUE)
 8011920:	f7f4 ffac 	bl	800687c <HAL_GetTick>
 8011924:	4602      	mov	r2, r0
 8011926:	697b      	ldr	r3, [r7, #20]
 8011928:	1ad3      	subs	r3, r2, r3
 801192a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801192e:	d901      	bls.n	8011934 <HAL_PWREx_ControlVoltageScaling+0x64>
    {
      return HAL_TIMEOUT;
 8011930:	2303      	movs	r3, #3
 8011932:	e007      	b.n	8011944 <HAL_PWREx_ControlVoltageScaling+0x74>
  while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
 8011934:	4b06      	ldr	r3, [pc, #24]	; (8011950 <HAL_PWREx_ControlVoltageScaling+0x80>)
 8011936:	685b      	ldr	r3, [r3, #4]
 8011938:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801193c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011940:	d1ee      	bne.n	8011920 <HAL_PWREx_ControlVoltageScaling+0x50>
    } 
  }

  return HAL_OK;
 8011942:	2300      	movs	r3, #0
}
 8011944:	4618      	mov	r0, r3
 8011946:	3718      	adds	r7, #24
 8011948:	46bd      	mov	sp, r7
 801194a:	bd80      	pop	{r7, pc}
 801194c:	40023800 	.word	0x40023800
 8011950:	40007000 	.word	0x40007000

08011954 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011954:	b580      	push	{r7, lr}
 8011956:	b086      	sub	sp, #24
 8011958:	af00      	add	r7, sp, #0
 801195a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d101      	bne.n	8011966 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8011962:	2301      	movs	r3, #1
 8011964:	e267      	b.n	8011e36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	f003 0301 	and.w	r3, r3, #1
 801196e:	2b00      	cmp	r3, #0
 8011970:	d075      	beq.n	8011a5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8011972:	4b88      	ldr	r3, [pc, #544]	; (8011b94 <HAL_RCC_OscConfig+0x240>)
 8011974:	689b      	ldr	r3, [r3, #8]
 8011976:	f003 030c 	and.w	r3, r3, #12
 801197a:	2b04      	cmp	r3, #4
 801197c:	d00c      	beq.n	8011998 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801197e:	4b85      	ldr	r3, [pc, #532]	; (8011b94 <HAL_RCC_OscConfig+0x240>)
 8011980:	689b      	ldr	r3, [r3, #8]
 8011982:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8011986:	2b08      	cmp	r3, #8
 8011988:	d112      	bne.n	80119b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801198a:	4b82      	ldr	r3, [pc, #520]	; (8011b94 <HAL_RCC_OscConfig+0x240>)
 801198c:	685b      	ldr	r3, [r3, #4]
 801198e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011992:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011996:	d10b      	bne.n	80119b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011998:	4b7e      	ldr	r3, [pc, #504]	; (8011b94 <HAL_RCC_OscConfig+0x240>)
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d05b      	beq.n	8011a5c <HAL_RCC_OscConfig+0x108>
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	685b      	ldr	r3, [r3, #4]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d157      	bne.n	8011a5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80119ac:	2301      	movs	r3, #1
 80119ae:	e242      	b.n	8011e36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	685b      	ldr	r3, [r3, #4]
 80119b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80119b8:	d106      	bne.n	80119c8 <HAL_RCC_OscConfig+0x74>
 80119ba:	4b76      	ldr	r3, [pc, #472]	; (8011b94 <HAL_RCC_OscConfig+0x240>)
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	4a75      	ldr	r2, [pc, #468]	; (8011b94 <HAL_RCC_OscConfig+0x240>)
 80119c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80119c4:	6013      	str	r3, [r2, #0]
 80119c6:	e01d      	b.n	8011a04 <HAL_RCC_OscConfig+0xb0>
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	685b      	ldr	r3, [r3, #4]
 80119cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80119d0:	d10c      	bne.n	80119ec <HAL_RCC_OscConfig+0x98>
 80119d2:	4b70      	ldr	r3, [pc, #448]	; (8011b94 <HAL_RCC_OscConfig+0x240>)
 80119d4:	681b      	ldr	r3, [r3, #0]
 80119d6:	4a6f      	ldr	r2, [pc, #444]	; (8011b94 <HAL_RCC_OscConfig+0x240>)
 80119d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80119dc:	6013      	str	r3, [r2, #0]
 80119de:	4b6d      	ldr	r3, [pc, #436]	; (8011b94 <HAL_RCC_OscConfig+0x240>)
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	4a6c      	ldr	r2, [pc, #432]	; (8011b94 <HAL_RCC_OscConfig+0x240>)
 80119e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80119e8:	6013      	str	r3, [r2, #0]
 80119ea:	e00b      	b.n	8011a04 <HAL_RCC_OscConfig+0xb0>
 80119ec:	4b69      	ldr	r3, [pc, #420]	; (8011b94 <HAL_RCC_OscConfig+0x240>)
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	4a68      	ldr	r2, [pc, #416]	; (8011b94 <HAL_RCC_OscConfig+0x240>)
 80119f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80119f6:	6013      	str	r3, [r2, #0]
 80119f8:	4b66      	ldr	r3, [pc, #408]	; (8011b94 <HAL_RCC_OscConfig+0x240>)
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	4a65      	ldr	r2, [pc, #404]	; (8011b94 <HAL_RCC_OscConfig+0x240>)
 80119fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011a02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	685b      	ldr	r3, [r3, #4]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d013      	beq.n	8011a34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011a0c:	f7f4 ff36 	bl	800687c <HAL_GetTick>
 8011a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011a12:	e008      	b.n	8011a26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011a14:	f7f4 ff32 	bl	800687c <HAL_GetTick>
 8011a18:	4602      	mov	r2, r0
 8011a1a:	693b      	ldr	r3, [r7, #16]
 8011a1c:	1ad3      	subs	r3, r2, r3
 8011a1e:	2b64      	cmp	r3, #100	; 0x64
 8011a20:	d901      	bls.n	8011a26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8011a22:	2303      	movs	r3, #3
 8011a24:	e207      	b.n	8011e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011a26:	4b5b      	ldr	r3, [pc, #364]	; (8011b94 <HAL_RCC_OscConfig+0x240>)
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d0f0      	beq.n	8011a14 <HAL_RCC_OscConfig+0xc0>
 8011a32:	e014      	b.n	8011a5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011a34:	f7f4 ff22 	bl	800687c <HAL_GetTick>
 8011a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011a3a:	e008      	b.n	8011a4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011a3c:	f7f4 ff1e 	bl	800687c <HAL_GetTick>
 8011a40:	4602      	mov	r2, r0
 8011a42:	693b      	ldr	r3, [r7, #16]
 8011a44:	1ad3      	subs	r3, r2, r3
 8011a46:	2b64      	cmp	r3, #100	; 0x64
 8011a48:	d901      	bls.n	8011a4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8011a4a:	2303      	movs	r3, #3
 8011a4c:	e1f3      	b.n	8011e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011a4e:	4b51      	ldr	r3, [pc, #324]	; (8011b94 <HAL_RCC_OscConfig+0x240>)
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d1f0      	bne.n	8011a3c <HAL_RCC_OscConfig+0xe8>
 8011a5a:	e000      	b.n	8011a5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	f003 0302 	and.w	r3, r3, #2
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d063      	beq.n	8011b32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8011a6a:	4b4a      	ldr	r3, [pc, #296]	; (8011b94 <HAL_RCC_OscConfig+0x240>)
 8011a6c:	689b      	ldr	r3, [r3, #8]
 8011a6e:	f003 030c 	and.w	r3, r3, #12
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d00b      	beq.n	8011a8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8011a76:	4b47      	ldr	r3, [pc, #284]	; (8011b94 <HAL_RCC_OscConfig+0x240>)
 8011a78:	689b      	ldr	r3, [r3, #8]
 8011a7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8011a7e:	2b08      	cmp	r3, #8
 8011a80:	d11c      	bne.n	8011abc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8011a82:	4b44      	ldr	r3, [pc, #272]	; (8011b94 <HAL_RCC_OscConfig+0x240>)
 8011a84:	685b      	ldr	r3, [r3, #4]
 8011a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d116      	bne.n	8011abc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011a8e:	4b41      	ldr	r3, [pc, #260]	; (8011b94 <HAL_RCC_OscConfig+0x240>)
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	f003 0302 	and.w	r3, r3, #2
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d005      	beq.n	8011aa6 <HAL_RCC_OscConfig+0x152>
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	68db      	ldr	r3, [r3, #12]
 8011a9e:	2b01      	cmp	r3, #1
 8011aa0:	d001      	beq.n	8011aa6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8011aa2:	2301      	movs	r3, #1
 8011aa4:	e1c7      	b.n	8011e36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011aa6:	4b3b      	ldr	r3, [pc, #236]	; (8011b94 <HAL_RCC_OscConfig+0x240>)
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	691b      	ldr	r3, [r3, #16]
 8011ab2:	00db      	lsls	r3, r3, #3
 8011ab4:	4937      	ldr	r1, [pc, #220]	; (8011b94 <HAL_RCC_OscConfig+0x240>)
 8011ab6:	4313      	orrs	r3, r2
 8011ab8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011aba:	e03a      	b.n	8011b32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	68db      	ldr	r3, [r3, #12]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d020      	beq.n	8011b06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8011ac4:	4b34      	ldr	r3, [pc, #208]	; (8011b98 <HAL_RCC_OscConfig+0x244>)
 8011ac6:	2201      	movs	r2, #1
 8011ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011aca:	f7f4 fed7 	bl	800687c <HAL_GetTick>
 8011ace:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011ad0:	e008      	b.n	8011ae4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011ad2:	f7f4 fed3 	bl	800687c <HAL_GetTick>
 8011ad6:	4602      	mov	r2, r0
 8011ad8:	693b      	ldr	r3, [r7, #16]
 8011ada:	1ad3      	subs	r3, r2, r3
 8011adc:	2b02      	cmp	r3, #2
 8011ade:	d901      	bls.n	8011ae4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8011ae0:	2303      	movs	r3, #3
 8011ae2:	e1a8      	b.n	8011e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011ae4:	4b2b      	ldr	r3, [pc, #172]	; (8011b94 <HAL_RCC_OscConfig+0x240>)
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	f003 0302 	and.w	r3, r3, #2
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d0f0      	beq.n	8011ad2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011af0:	4b28      	ldr	r3, [pc, #160]	; (8011b94 <HAL_RCC_OscConfig+0x240>)
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	691b      	ldr	r3, [r3, #16]
 8011afc:	00db      	lsls	r3, r3, #3
 8011afe:	4925      	ldr	r1, [pc, #148]	; (8011b94 <HAL_RCC_OscConfig+0x240>)
 8011b00:	4313      	orrs	r3, r2
 8011b02:	600b      	str	r3, [r1, #0]
 8011b04:	e015      	b.n	8011b32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8011b06:	4b24      	ldr	r3, [pc, #144]	; (8011b98 <HAL_RCC_OscConfig+0x244>)
 8011b08:	2200      	movs	r2, #0
 8011b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011b0c:	f7f4 feb6 	bl	800687c <HAL_GetTick>
 8011b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011b12:	e008      	b.n	8011b26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011b14:	f7f4 feb2 	bl	800687c <HAL_GetTick>
 8011b18:	4602      	mov	r2, r0
 8011b1a:	693b      	ldr	r3, [r7, #16]
 8011b1c:	1ad3      	subs	r3, r2, r3
 8011b1e:	2b02      	cmp	r3, #2
 8011b20:	d901      	bls.n	8011b26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8011b22:	2303      	movs	r3, #3
 8011b24:	e187      	b.n	8011e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011b26:	4b1b      	ldr	r3, [pc, #108]	; (8011b94 <HAL_RCC_OscConfig+0x240>)
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	f003 0302 	and.w	r3, r3, #2
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d1f0      	bne.n	8011b14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	f003 0308 	and.w	r3, r3, #8
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d036      	beq.n	8011bac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	695b      	ldr	r3, [r3, #20]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d016      	beq.n	8011b74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8011b46:	4b15      	ldr	r3, [pc, #84]	; (8011b9c <HAL_RCC_OscConfig+0x248>)
 8011b48:	2201      	movs	r2, #1
 8011b4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011b4c:	f7f4 fe96 	bl	800687c <HAL_GetTick>
 8011b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011b52:	e008      	b.n	8011b66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011b54:	f7f4 fe92 	bl	800687c <HAL_GetTick>
 8011b58:	4602      	mov	r2, r0
 8011b5a:	693b      	ldr	r3, [r7, #16]
 8011b5c:	1ad3      	subs	r3, r2, r3
 8011b5e:	2b02      	cmp	r3, #2
 8011b60:	d901      	bls.n	8011b66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8011b62:	2303      	movs	r3, #3
 8011b64:	e167      	b.n	8011e36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011b66:	4b0b      	ldr	r3, [pc, #44]	; (8011b94 <HAL_RCC_OscConfig+0x240>)
 8011b68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011b6a:	f003 0302 	and.w	r3, r3, #2
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d0f0      	beq.n	8011b54 <HAL_RCC_OscConfig+0x200>
 8011b72:	e01b      	b.n	8011bac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8011b74:	4b09      	ldr	r3, [pc, #36]	; (8011b9c <HAL_RCC_OscConfig+0x248>)
 8011b76:	2200      	movs	r2, #0
 8011b78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011b7a:	f7f4 fe7f 	bl	800687c <HAL_GetTick>
 8011b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011b80:	e00e      	b.n	8011ba0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011b82:	f7f4 fe7b 	bl	800687c <HAL_GetTick>
 8011b86:	4602      	mov	r2, r0
 8011b88:	693b      	ldr	r3, [r7, #16]
 8011b8a:	1ad3      	subs	r3, r2, r3
 8011b8c:	2b02      	cmp	r3, #2
 8011b8e:	d907      	bls.n	8011ba0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8011b90:	2303      	movs	r3, #3
 8011b92:	e150      	b.n	8011e36 <HAL_RCC_OscConfig+0x4e2>
 8011b94:	40023800 	.word	0x40023800
 8011b98:	42470000 	.word	0x42470000
 8011b9c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011ba0:	4b88      	ldr	r3, [pc, #544]	; (8011dc4 <HAL_RCC_OscConfig+0x470>)
 8011ba2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ba4:	f003 0302 	and.w	r3, r3, #2
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d1ea      	bne.n	8011b82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	f003 0304 	and.w	r3, r3, #4
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	f000 8097 	beq.w	8011ce8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8011bba:	2300      	movs	r3, #0
 8011bbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8011bbe:	4b81      	ldr	r3, [pc, #516]	; (8011dc4 <HAL_RCC_OscConfig+0x470>)
 8011bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d10f      	bne.n	8011bea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8011bca:	2300      	movs	r3, #0
 8011bcc:	60bb      	str	r3, [r7, #8]
 8011bce:	4b7d      	ldr	r3, [pc, #500]	; (8011dc4 <HAL_RCC_OscConfig+0x470>)
 8011bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bd2:	4a7c      	ldr	r2, [pc, #496]	; (8011dc4 <HAL_RCC_OscConfig+0x470>)
 8011bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8011bda:	4b7a      	ldr	r3, [pc, #488]	; (8011dc4 <HAL_RCC_OscConfig+0x470>)
 8011bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011be2:	60bb      	str	r3, [r7, #8]
 8011be4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8011be6:	2301      	movs	r3, #1
 8011be8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011bea:	4b77      	ldr	r3, [pc, #476]	; (8011dc8 <HAL_RCC_OscConfig+0x474>)
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d118      	bne.n	8011c28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011bf6:	4b74      	ldr	r3, [pc, #464]	; (8011dc8 <HAL_RCC_OscConfig+0x474>)
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	4a73      	ldr	r2, [pc, #460]	; (8011dc8 <HAL_RCC_OscConfig+0x474>)
 8011bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011c00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8011c02:	f7f4 fe3b 	bl	800687c <HAL_GetTick>
 8011c06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011c08:	e008      	b.n	8011c1c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011c0a:	f7f4 fe37 	bl	800687c <HAL_GetTick>
 8011c0e:	4602      	mov	r2, r0
 8011c10:	693b      	ldr	r3, [r7, #16]
 8011c12:	1ad3      	subs	r3, r2, r3
 8011c14:	2b02      	cmp	r3, #2
 8011c16:	d901      	bls.n	8011c1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8011c18:	2303      	movs	r3, #3
 8011c1a:	e10c      	b.n	8011e36 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011c1c:	4b6a      	ldr	r3, [pc, #424]	; (8011dc8 <HAL_RCC_OscConfig+0x474>)
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d0f0      	beq.n	8011c0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	689b      	ldr	r3, [r3, #8]
 8011c2c:	2b01      	cmp	r3, #1
 8011c2e:	d106      	bne.n	8011c3e <HAL_RCC_OscConfig+0x2ea>
 8011c30:	4b64      	ldr	r3, [pc, #400]	; (8011dc4 <HAL_RCC_OscConfig+0x470>)
 8011c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c34:	4a63      	ldr	r2, [pc, #396]	; (8011dc4 <HAL_RCC_OscConfig+0x470>)
 8011c36:	f043 0301 	orr.w	r3, r3, #1
 8011c3a:	6713      	str	r3, [r2, #112]	; 0x70
 8011c3c:	e01c      	b.n	8011c78 <HAL_RCC_OscConfig+0x324>
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	689b      	ldr	r3, [r3, #8]
 8011c42:	2b05      	cmp	r3, #5
 8011c44:	d10c      	bne.n	8011c60 <HAL_RCC_OscConfig+0x30c>
 8011c46:	4b5f      	ldr	r3, [pc, #380]	; (8011dc4 <HAL_RCC_OscConfig+0x470>)
 8011c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c4a:	4a5e      	ldr	r2, [pc, #376]	; (8011dc4 <HAL_RCC_OscConfig+0x470>)
 8011c4c:	f043 0304 	orr.w	r3, r3, #4
 8011c50:	6713      	str	r3, [r2, #112]	; 0x70
 8011c52:	4b5c      	ldr	r3, [pc, #368]	; (8011dc4 <HAL_RCC_OscConfig+0x470>)
 8011c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c56:	4a5b      	ldr	r2, [pc, #364]	; (8011dc4 <HAL_RCC_OscConfig+0x470>)
 8011c58:	f043 0301 	orr.w	r3, r3, #1
 8011c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8011c5e:	e00b      	b.n	8011c78 <HAL_RCC_OscConfig+0x324>
 8011c60:	4b58      	ldr	r3, [pc, #352]	; (8011dc4 <HAL_RCC_OscConfig+0x470>)
 8011c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c64:	4a57      	ldr	r2, [pc, #348]	; (8011dc4 <HAL_RCC_OscConfig+0x470>)
 8011c66:	f023 0301 	bic.w	r3, r3, #1
 8011c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8011c6c:	4b55      	ldr	r3, [pc, #340]	; (8011dc4 <HAL_RCC_OscConfig+0x470>)
 8011c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c70:	4a54      	ldr	r2, [pc, #336]	; (8011dc4 <HAL_RCC_OscConfig+0x470>)
 8011c72:	f023 0304 	bic.w	r3, r3, #4
 8011c76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	689b      	ldr	r3, [r3, #8]
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d015      	beq.n	8011cac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011c80:	f7f4 fdfc 	bl	800687c <HAL_GetTick>
 8011c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011c86:	e00a      	b.n	8011c9e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011c88:	f7f4 fdf8 	bl	800687c <HAL_GetTick>
 8011c8c:	4602      	mov	r2, r0
 8011c8e:	693b      	ldr	r3, [r7, #16]
 8011c90:	1ad3      	subs	r3, r2, r3
 8011c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8011c96:	4293      	cmp	r3, r2
 8011c98:	d901      	bls.n	8011c9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8011c9a:	2303      	movs	r3, #3
 8011c9c:	e0cb      	b.n	8011e36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011c9e:	4b49      	ldr	r3, [pc, #292]	; (8011dc4 <HAL_RCC_OscConfig+0x470>)
 8011ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ca2:	f003 0302 	and.w	r3, r3, #2
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d0ee      	beq.n	8011c88 <HAL_RCC_OscConfig+0x334>
 8011caa:	e014      	b.n	8011cd6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011cac:	f7f4 fde6 	bl	800687c <HAL_GetTick>
 8011cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011cb2:	e00a      	b.n	8011cca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011cb4:	f7f4 fde2 	bl	800687c <HAL_GetTick>
 8011cb8:	4602      	mov	r2, r0
 8011cba:	693b      	ldr	r3, [r7, #16]
 8011cbc:	1ad3      	subs	r3, r2, r3
 8011cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8011cc2:	4293      	cmp	r3, r2
 8011cc4:	d901      	bls.n	8011cca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8011cc6:	2303      	movs	r3, #3
 8011cc8:	e0b5      	b.n	8011e36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011cca:	4b3e      	ldr	r3, [pc, #248]	; (8011dc4 <HAL_RCC_OscConfig+0x470>)
 8011ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011cce:	f003 0302 	and.w	r3, r3, #2
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d1ee      	bne.n	8011cb4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8011cd6:	7dfb      	ldrb	r3, [r7, #23]
 8011cd8:	2b01      	cmp	r3, #1
 8011cda:	d105      	bne.n	8011ce8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8011cdc:	4b39      	ldr	r3, [pc, #228]	; (8011dc4 <HAL_RCC_OscConfig+0x470>)
 8011cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ce0:	4a38      	ldr	r2, [pc, #224]	; (8011dc4 <HAL_RCC_OscConfig+0x470>)
 8011ce2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011ce6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	699b      	ldr	r3, [r3, #24]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	f000 80a1 	beq.w	8011e34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8011cf2:	4b34      	ldr	r3, [pc, #208]	; (8011dc4 <HAL_RCC_OscConfig+0x470>)
 8011cf4:	689b      	ldr	r3, [r3, #8]
 8011cf6:	f003 030c 	and.w	r3, r3, #12
 8011cfa:	2b08      	cmp	r3, #8
 8011cfc:	d05c      	beq.n	8011db8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	699b      	ldr	r3, [r3, #24]
 8011d02:	2b02      	cmp	r3, #2
 8011d04:	d141      	bne.n	8011d8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011d06:	4b31      	ldr	r3, [pc, #196]	; (8011dcc <HAL_RCC_OscConfig+0x478>)
 8011d08:	2200      	movs	r2, #0
 8011d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011d0c:	f7f4 fdb6 	bl	800687c <HAL_GetTick>
 8011d10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011d12:	e008      	b.n	8011d26 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011d14:	f7f4 fdb2 	bl	800687c <HAL_GetTick>
 8011d18:	4602      	mov	r2, r0
 8011d1a:	693b      	ldr	r3, [r7, #16]
 8011d1c:	1ad3      	subs	r3, r2, r3
 8011d1e:	2b02      	cmp	r3, #2
 8011d20:	d901      	bls.n	8011d26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8011d22:	2303      	movs	r3, #3
 8011d24:	e087      	b.n	8011e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011d26:	4b27      	ldr	r3, [pc, #156]	; (8011dc4 <HAL_RCC_OscConfig+0x470>)
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d1f0      	bne.n	8011d14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	69da      	ldr	r2, [r3, #28]
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	6a1b      	ldr	r3, [r3, #32]
 8011d3a:	431a      	orrs	r2, r3
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d40:	019b      	lsls	r3, r3, #6
 8011d42:	431a      	orrs	r2, r3
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d48:	085b      	lsrs	r3, r3, #1
 8011d4a:	3b01      	subs	r3, #1
 8011d4c:	041b      	lsls	r3, r3, #16
 8011d4e:	431a      	orrs	r2, r3
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d54:	061b      	lsls	r3, r3, #24
 8011d56:	491b      	ldr	r1, [pc, #108]	; (8011dc4 <HAL_RCC_OscConfig+0x470>)
 8011d58:	4313      	orrs	r3, r2
 8011d5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8011d5c:	4b1b      	ldr	r3, [pc, #108]	; (8011dcc <HAL_RCC_OscConfig+0x478>)
 8011d5e:	2201      	movs	r2, #1
 8011d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011d62:	f7f4 fd8b 	bl	800687c <HAL_GetTick>
 8011d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011d68:	e008      	b.n	8011d7c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011d6a:	f7f4 fd87 	bl	800687c <HAL_GetTick>
 8011d6e:	4602      	mov	r2, r0
 8011d70:	693b      	ldr	r3, [r7, #16]
 8011d72:	1ad3      	subs	r3, r2, r3
 8011d74:	2b02      	cmp	r3, #2
 8011d76:	d901      	bls.n	8011d7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8011d78:	2303      	movs	r3, #3
 8011d7a:	e05c      	b.n	8011e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011d7c:	4b11      	ldr	r3, [pc, #68]	; (8011dc4 <HAL_RCC_OscConfig+0x470>)
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d0f0      	beq.n	8011d6a <HAL_RCC_OscConfig+0x416>
 8011d88:	e054      	b.n	8011e34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011d8a:	4b10      	ldr	r3, [pc, #64]	; (8011dcc <HAL_RCC_OscConfig+0x478>)
 8011d8c:	2200      	movs	r2, #0
 8011d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011d90:	f7f4 fd74 	bl	800687c <HAL_GetTick>
 8011d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011d96:	e008      	b.n	8011daa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011d98:	f7f4 fd70 	bl	800687c <HAL_GetTick>
 8011d9c:	4602      	mov	r2, r0
 8011d9e:	693b      	ldr	r3, [r7, #16]
 8011da0:	1ad3      	subs	r3, r2, r3
 8011da2:	2b02      	cmp	r3, #2
 8011da4:	d901      	bls.n	8011daa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8011da6:	2303      	movs	r3, #3
 8011da8:	e045      	b.n	8011e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011daa:	4b06      	ldr	r3, [pc, #24]	; (8011dc4 <HAL_RCC_OscConfig+0x470>)
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d1f0      	bne.n	8011d98 <HAL_RCC_OscConfig+0x444>
 8011db6:	e03d      	b.n	8011e34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	699b      	ldr	r3, [r3, #24]
 8011dbc:	2b01      	cmp	r3, #1
 8011dbe:	d107      	bne.n	8011dd0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8011dc0:	2301      	movs	r3, #1
 8011dc2:	e038      	b.n	8011e36 <HAL_RCC_OscConfig+0x4e2>
 8011dc4:	40023800 	.word	0x40023800
 8011dc8:	40007000 	.word	0x40007000
 8011dcc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8011dd0:	4b1b      	ldr	r3, [pc, #108]	; (8011e40 <HAL_RCC_OscConfig+0x4ec>)
 8011dd2:	685b      	ldr	r3, [r3, #4]
 8011dd4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	699b      	ldr	r3, [r3, #24]
 8011dda:	2b01      	cmp	r3, #1
 8011ddc:	d028      	beq.n	8011e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011dde:	68fb      	ldr	r3, [r7, #12]
 8011de0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011de8:	429a      	cmp	r2, r3
 8011dea:	d121      	bne.n	8011e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011df6:	429a      	cmp	r2, r3
 8011df8:	d11a      	bne.n	8011e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8011dfa:	68fa      	ldr	r2, [r7, #12]
 8011dfc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8011e00:	4013      	ands	r3, r2
 8011e02:	687a      	ldr	r2, [r7, #4]
 8011e04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8011e06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8011e08:	4293      	cmp	r3, r2
 8011e0a:	d111      	bne.n	8011e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e16:	085b      	lsrs	r3, r3, #1
 8011e18:	3b01      	subs	r3, #1
 8011e1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8011e1c:	429a      	cmp	r2, r3
 8011e1e:	d107      	bne.n	8011e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8011e2c:	429a      	cmp	r2, r3
 8011e2e:	d001      	beq.n	8011e34 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8011e30:	2301      	movs	r3, #1
 8011e32:	e000      	b.n	8011e36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8011e34:	2300      	movs	r3, #0
}
 8011e36:	4618      	mov	r0, r3
 8011e38:	3718      	adds	r7, #24
 8011e3a:	46bd      	mov	sp, r7
 8011e3c:	bd80      	pop	{r7, pc}
 8011e3e:	bf00      	nop
 8011e40:	40023800 	.word	0x40023800

08011e44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011e44:	b580      	push	{r7, lr}
 8011e46:	b084      	sub	sp, #16
 8011e48:	af00      	add	r7, sp, #0
 8011e4a:	6078      	str	r0, [r7, #4]
 8011e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d101      	bne.n	8011e58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8011e54:	2301      	movs	r3, #1
 8011e56:	e0cc      	b.n	8011ff2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8011e58:	4b68      	ldr	r3, [pc, #416]	; (8011ffc <HAL_RCC_ClockConfig+0x1b8>)
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	f003 0307 	and.w	r3, r3, #7
 8011e60:	683a      	ldr	r2, [r7, #0]
 8011e62:	429a      	cmp	r2, r3
 8011e64:	d90c      	bls.n	8011e80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011e66:	4b65      	ldr	r3, [pc, #404]	; (8011ffc <HAL_RCC_ClockConfig+0x1b8>)
 8011e68:	683a      	ldr	r2, [r7, #0]
 8011e6a:	b2d2      	uxtb	r2, r2
 8011e6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011e6e:	4b63      	ldr	r3, [pc, #396]	; (8011ffc <HAL_RCC_ClockConfig+0x1b8>)
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	f003 0307 	and.w	r3, r3, #7
 8011e76:	683a      	ldr	r2, [r7, #0]
 8011e78:	429a      	cmp	r2, r3
 8011e7a:	d001      	beq.n	8011e80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8011e7c:	2301      	movs	r3, #1
 8011e7e:	e0b8      	b.n	8011ff2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	f003 0302 	and.w	r3, r3, #2
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d020      	beq.n	8011ece <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	f003 0304 	and.w	r3, r3, #4
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d005      	beq.n	8011ea4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8011e98:	4b59      	ldr	r3, [pc, #356]	; (8012000 <HAL_RCC_ClockConfig+0x1bc>)
 8011e9a:	689b      	ldr	r3, [r3, #8]
 8011e9c:	4a58      	ldr	r2, [pc, #352]	; (8012000 <HAL_RCC_ClockConfig+0x1bc>)
 8011e9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8011ea2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	f003 0308 	and.w	r3, r3, #8
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d005      	beq.n	8011ebc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8011eb0:	4b53      	ldr	r3, [pc, #332]	; (8012000 <HAL_RCC_ClockConfig+0x1bc>)
 8011eb2:	689b      	ldr	r3, [r3, #8]
 8011eb4:	4a52      	ldr	r2, [pc, #328]	; (8012000 <HAL_RCC_ClockConfig+0x1bc>)
 8011eb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8011eba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011ebc:	4b50      	ldr	r3, [pc, #320]	; (8012000 <HAL_RCC_ClockConfig+0x1bc>)
 8011ebe:	689b      	ldr	r3, [r3, #8]
 8011ec0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	689b      	ldr	r3, [r3, #8]
 8011ec8:	494d      	ldr	r1, [pc, #308]	; (8012000 <HAL_RCC_ClockConfig+0x1bc>)
 8011eca:	4313      	orrs	r3, r2
 8011ecc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	f003 0301 	and.w	r3, r3, #1
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d044      	beq.n	8011f64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	685b      	ldr	r3, [r3, #4]
 8011ede:	2b01      	cmp	r3, #1
 8011ee0:	d107      	bne.n	8011ef2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011ee2:	4b47      	ldr	r3, [pc, #284]	; (8012000 <HAL_RCC_ClockConfig+0x1bc>)
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d119      	bne.n	8011f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8011eee:	2301      	movs	r3, #1
 8011ef0:	e07f      	b.n	8011ff2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	685b      	ldr	r3, [r3, #4]
 8011ef6:	2b02      	cmp	r3, #2
 8011ef8:	d003      	beq.n	8011f02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8011efe:	2b03      	cmp	r3, #3
 8011f00:	d107      	bne.n	8011f12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011f02:	4b3f      	ldr	r3, [pc, #252]	; (8012000 <HAL_RCC_ClockConfig+0x1bc>)
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d109      	bne.n	8011f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8011f0e:	2301      	movs	r3, #1
 8011f10:	e06f      	b.n	8011ff2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011f12:	4b3b      	ldr	r3, [pc, #236]	; (8012000 <HAL_RCC_ClockConfig+0x1bc>)
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	f003 0302 	and.w	r3, r3, #2
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d101      	bne.n	8011f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8011f1e:	2301      	movs	r3, #1
 8011f20:	e067      	b.n	8011ff2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8011f22:	4b37      	ldr	r3, [pc, #220]	; (8012000 <HAL_RCC_ClockConfig+0x1bc>)
 8011f24:	689b      	ldr	r3, [r3, #8]
 8011f26:	f023 0203 	bic.w	r2, r3, #3
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	685b      	ldr	r3, [r3, #4]
 8011f2e:	4934      	ldr	r1, [pc, #208]	; (8012000 <HAL_RCC_ClockConfig+0x1bc>)
 8011f30:	4313      	orrs	r3, r2
 8011f32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8011f34:	f7f4 fca2 	bl	800687c <HAL_GetTick>
 8011f38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011f3a:	e00a      	b.n	8011f52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011f3c:	f7f4 fc9e 	bl	800687c <HAL_GetTick>
 8011f40:	4602      	mov	r2, r0
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	1ad3      	subs	r3, r2, r3
 8011f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8011f4a:	4293      	cmp	r3, r2
 8011f4c:	d901      	bls.n	8011f52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8011f4e:	2303      	movs	r3, #3
 8011f50:	e04f      	b.n	8011ff2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011f52:	4b2b      	ldr	r3, [pc, #172]	; (8012000 <HAL_RCC_ClockConfig+0x1bc>)
 8011f54:	689b      	ldr	r3, [r3, #8]
 8011f56:	f003 020c 	and.w	r2, r3, #12
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	685b      	ldr	r3, [r3, #4]
 8011f5e:	009b      	lsls	r3, r3, #2
 8011f60:	429a      	cmp	r2, r3
 8011f62:	d1eb      	bne.n	8011f3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8011f64:	4b25      	ldr	r3, [pc, #148]	; (8011ffc <HAL_RCC_ClockConfig+0x1b8>)
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	f003 0307 	and.w	r3, r3, #7
 8011f6c:	683a      	ldr	r2, [r7, #0]
 8011f6e:	429a      	cmp	r2, r3
 8011f70:	d20c      	bcs.n	8011f8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011f72:	4b22      	ldr	r3, [pc, #136]	; (8011ffc <HAL_RCC_ClockConfig+0x1b8>)
 8011f74:	683a      	ldr	r2, [r7, #0]
 8011f76:	b2d2      	uxtb	r2, r2
 8011f78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011f7a:	4b20      	ldr	r3, [pc, #128]	; (8011ffc <HAL_RCC_ClockConfig+0x1b8>)
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	f003 0307 	and.w	r3, r3, #7
 8011f82:	683a      	ldr	r2, [r7, #0]
 8011f84:	429a      	cmp	r2, r3
 8011f86:	d001      	beq.n	8011f8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8011f88:	2301      	movs	r3, #1
 8011f8a:	e032      	b.n	8011ff2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	f003 0304 	and.w	r3, r3, #4
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d008      	beq.n	8011faa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8011f98:	4b19      	ldr	r3, [pc, #100]	; (8012000 <HAL_RCC_ClockConfig+0x1bc>)
 8011f9a:	689b      	ldr	r3, [r3, #8]
 8011f9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	68db      	ldr	r3, [r3, #12]
 8011fa4:	4916      	ldr	r1, [pc, #88]	; (8012000 <HAL_RCC_ClockConfig+0x1bc>)
 8011fa6:	4313      	orrs	r3, r2
 8011fa8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	f003 0308 	and.w	r3, r3, #8
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d009      	beq.n	8011fca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8011fb6:	4b12      	ldr	r3, [pc, #72]	; (8012000 <HAL_RCC_ClockConfig+0x1bc>)
 8011fb8:	689b      	ldr	r3, [r3, #8]
 8011fba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	691b      	ldr	r3, [r3, #16]
 8011fc2:	00db      	lsls	r3, r3, #3
 8011fc4:	490e      	ldr	r1, [pc, #56]	; (8012000 <HAL_RCC_ClockConfig+0x1bc>)
 8011fc6:	4313      	orrs	r3, r2
 8011fc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8011fca:	f000 f8a1 	bl	8012110 <HAL_RCC_GetSysClockFreq>
 8011fce:	4602      	mov	r2, r0
 8011fd0:	4b0b      	ldr	r3, [pc, #44]	; (8012000 <HAL_RCC_ClockConfig+0x1bc>)
 8011fd2:	689b      	ldr	r3, [r3, #8]
 8011fd4:	091b      	lsrs	r3, r3, #4
 8011fd6:	f003 030f 	and.w	r3, r3, #15
 8011fda:	490a      	ldr	r1, [pc, #40]	; (8012004 <HAL_RCC_ClockConfig+0x1c0>)
 8011fdc:	5ccb      	ldrb	r3, [r1, r3]
 8011fde:	fa22 f303 	lsr.w	r3, r2, r3
 8011fe2:	4a09      	ldr	r2, [pc, #36]	; (8012008 <HAL_RCC_ClockConfig+0x1c4>)
 8011fe4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8011fe6:	4b09      	ldr	r3, [pc, #36]	; (801200c <HAL_RCC_ClockConfig+0x1c8>)
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	4618      	mov	r0, r3
 8011fec:	f7f4 fc01 	bl	80067f2 <HAL_InitTick>

  return HAL_OK;
 8011ff0:	2300      	movs	r3, #0
}
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	3710      	adds	r7, #16
 8011ff6:	46bd      	mov	sp, r7
 8011ff8:	bd80      	pop	{r7, pc}
 8011ffa:	bf00      	nop
 8011ffc:	40023c00 	.word	0x40023c00
 8012000:	40023800 	.word	0x40023800
 8012004:	08051f58 	.word	0x08051f58
 8012008:	20000058 	.word	0x20000058
 801200c:	2000005c 	.word	0x2000005c

08012010 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8012010:	b580      	push	{r7, lr}
 8012012:	b08c      	sub	sp, #48	; 0x30
 8012014:	af00      	add	r7, sp, #0
 8012016:	60f8      	str	r0, [r7, #12]
 8012018:	60b9      	str	r1, [r7, #8]
 801201a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	2b00      	cmp	r3, #0
 8012020:	d129      	bne.n	8012076 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8012022:	2300      	movs	r3, #0
 8012024:	617b      	str	r3, [r7, #20]
 8012026:	4b2b      	ldr	r3, [pc, #172]	; (80120d4 <HAL_RCC_MCOConfig+0xc4>)
 8012028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801202a:	4a2a      	ldr	r2, [pc, #168]	; (80120d4 <HAL_RCC_MCOConfig+0xc4>)
 801202c:	f043 0301 	orr.w	r3, r3, #1
 8012030:	6313      	str	r3, [r2, #48]	; 0x30
 8012032:	4b28      	ldr	r3, [pc, #160]	; (80120d4 <HAL_RCC_MCOConfig+0xc4>)
 8012034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012036:	f003 0301 	and.w	r3, r3, #1
 801203a:	617b      	str	r3, [r7, #20]
 801203c:	697b      	ldr	r3, [r7, #20]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 801203e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012044:	2302      	movs	r3, #2
 8012046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012048:	2303      	movs	r3, #3
 801204a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801204c:	2300      	movs	r3, #0
 801204e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8012050:	2300      	movs	r3, #0
 8012052:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8012054:	f107 031c 	add.w	r3, r7, #28
 8012058:	4619      	mov	r1, r3
 801205a:	481f      	ldr	r0, [pc, #124]	; (80120d8 <HAL_RCC_MCOConfig+0xc8>)
 801205c:	f7f8 fd76 	bl	800ab4c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8012060:	4b1c      	ldr	r3, [pc, #112]	; (80120d4 <HAL_RCC_MCOConfig+0xc4>)
 8012062:	689b      	ldr	r3, [r3, #8]
 8012064:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8012068:	68b9      	ldr	r1, [r7, #8]
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	430b      	orrs	r3, r1
 801206e:	4919      	ldr	r1, [pc, #100]	; (80120d4 <HAL_RCC_MCOConfig+0xc4>)
 8012070:	4313      	orrs	r3, r2
 8012072:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8012074:	e029      	b.n	80120ca <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8012076:	2300      	movs	r3, #0
 8012078:	61bb      	str	r3, [r7, #24]
 801207a:	4b16      	ldr	r3, [pc, #88]	; (80120d4 <HAL_RCC_MCOConfig+0xc4>)
 801207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801207e:	4a15      	ldr	r2, [pc, #84]	; (80120d4 <HAL_RCC_MCOConfig+0xc4>)
 8012080:	f043 0304 	orr.w	r3, r3, #4
 8012084:	6313      	str	r3, [r2, #48]	; 0x30
 8012086:	4b13      	ldr	r3, [pc, #76]	; (80120d4 <HAL_RCC_MCOConfig+0xc4>)
 8012088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801208a:	f003 0304 	and.w	r3, r3, #4
 801208e:	61bb      	str	r3, [r7, #24]
 8012090:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8012092:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012096:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012098:	2302      	movs	r3, #2
 801209a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801209c:	2303      	movs	r3, #3
 801209e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80120a0:	2300      	movs	r3, #0
 80120a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80120a4:	2300      	movs	r3, #0
 80120a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80120a8:	f107 031c 	add.w	r3, r7, #28
 80120ac:	4619      	mov	r1, r3
 80120ae:	480b      	ldr	r0, [pc, #44]	; (80120dc <HAL_RCC_MCOConfig+0xcc>)
 80120b0:	f7f8 fd4c 	bl	800ab4c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 80120b4:	4b07      	ldr	r3, [pc, #28]	; (80120d4 <HAL_RCC_MCOConfig+0xc4>)
 80120b6:	689b      	ldr	r3, [r3, #8]
 80120b8:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	00d9      	lsls	r1, r3, #3
 80120c0:	68bb      	ldr	r3, [r7, #8]
 80120c2:	430b      	orrs	r3, r1
 80120c4:	4903      	ldr	r1, [pc, #12]	; (80120d4 <HAL_RCC_MCOConfig+0xc4>)
 80120c6:	4313      	orrs	r3, r2
 80120c8:	608b      	str	r3, [r1, #8]
}
 80120ca:	bf00      	nop
 80120cc:	3730      	adds	r7, #48	; 0x30
 80120ce:	46bd      	mov	sp, r7
 80120d0:	bd80      	pop	{r7, pc}
 80120d2:	bf00      	nop
 80120d4:	40023800 	.word	0x40023800
 80120d8:	40020000 	.word	0x40020000
 80120dc:	40020800 	.word	0x40020800

080120e0 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80120e0:	b480      	push	{r7}
 80120e2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80120e4:	4b03      	ldr	r3, [pc, #12]	; (80120f4 <HAL_RCC_EnableCSS+0x14>)
 80120e6:	2201      	movs	r2, #1
 80120e8:	601a      	str	r2, [r3, #0]
}
 80120ea:	bf00      	nop
 80120ec:	46bd      	mov	sp, r7
 80120ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120f2:	4770      	bx	lr
 80120f4:	4247004c 	.word	0x4247004c

080120f8 <HAL_RCC_DisableCSS>:
/**
  * @brief  Disables the Clock Security System.
  * @retval None
  */
void HAL_RCC_DisableCSS(void)
{
 80120f8:	b480      	push	{r7}
 80120fa:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
 80120fc:	4b03      	ldr	r3, [pc, #12]	; (801210c <HAL_RCC_DisableCSS+0x14>)
 80120fe:	2200      	movs	r2, #0
 8012100:	601a      	str	r2, [r3, #0]
}
 8012102:	bf00      	nop
 8012104:	46bd      	mov	sp, r7
 8012106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801210a:	4770      	bx	lr
 801210c:	4247004c 	.word	0x4247004c

08012110 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8012110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012114:	b094      	sub	sp, #80	; 0x50
 8012116:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8012118:	2300      	movs	r3, #0
 801211a:	647b      	str	r3, [r7, #68]	; 0x44
 801211c:	2300      	movs	r3, #0
 801211e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012120:	2300      	movs	r3, #0
 8012122:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8012124:	2300      	movs	r3, #0
 8012126:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8012128:	4b79      	ldr	r3, [pc, #484]	; (8012310 <HAL_RCC_GetSysClockFreq+0x200>)
 801212a:	689b      	ldr	r3, [r3, #8]
 801212c:	f003 030c 	and.w	r3, r3, #12
 8012130:	2b08      	cmp	r3, #8
 8012132:	d00d      	beq.n	8012150 <HAL_RCC_GetSysClockFreq+0x40>
 8012134:	2b08      	cmp	r3, #8
 8012136:	f200 80e1 	bhi.w	80122fc <HAL_RCC_GetSysClockFreq+0x1ec>
 801213a:	2b00      	cmp	r3, #0
 801213c:	d002      	beq.n	8012144 <HAL_RCC_GetSysClockFreq+0x34>
 801213e:	2b04      	cmp	r3, #4
 8012140:	d003      	beq.n	801214a <HAL_RCC_GetSysClockFreq+0x3a>
 8012142:	e0db      	b.n	80122fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8012144:	4b73      	ldr	r3, [pc, #460]	; (8012314 <HAL_RCC_GetSysClockFreq+0x204>)
 8012146:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8012148:	e0db      	b.n	8012302 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801214a:	4b73      	ldr	r3, [pc, #460]	; (8012318 <HAL_RCC_GetSysClockFreq+0x208>)
 801214c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801214e:	e0d8      	b.n	8012302 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8012150:	4b6f      	ldr	r3, [pc, #444]	; (8012310 <HAL_RCC_GetSysClockFreq+0x200>)
 8012152:	685b      	ldr	r3, [r3, #4]
 8012154:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012158:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801215a:	4b6d      	ldr	r3, [pc, #436]	; (8012310 <HAL_RCC_GetSysClockFreq+0x200>)
 801215c:	685b      	ldr	r3, [r3, #4]
 801215e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012162:	2b00      	cmp	r3, #0
 8012164:	d063      	beq.n	801222e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8012166:	4b6a      	ldr	r3, [pc, #424]	; (8012310 <HAL_RCC_GetSysClockFreq+0x200>)
 8012168:	685b      	ldr	r3, [r3, #4]
 801216a:	099b      	lsrs	r3, r3, #6
 801216c:	2200      	movs	r2, #0
 801216e:	63bb      	str	r3, [r7, #56]	; 0x38
 8012170:	63fa      	str	r2, [r7, #60]	; 0x3c
 8012172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012174:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012178:	633b      	str	r3, [r7, #48]	; 0x30
 801217a:	2300      	movs	r3, #0
 801217c:	637b      	str	r3, [r7, #52]	; 0x34
 801217e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8012182:	4622      	mov	r2, r4
 8012184:	462b      	mov	r3, r5
 8012186:	f04f 0000 	mov.w	r0, #0
 801218a:	f04f 0100 	mov.w	r1, #0
 801218e:	0159      	lsls	r1, r3, #5
 8012190:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8012194:	0150      	lsls	r0, r2, #5
 8012196:	4602      	mov	r2, r0
 8012198:	460b      	mov	r3, r1
 801219a:	4621      	mov	r1, r4
 801219c:	1a51      	subs	r1, r2, r1
 801219e:	6139      	str	r1, [r7, #16]
 80121a0:	4629      	mov	r1, r5
 80121a2:	eb63 0301 	sbc.w	r3, r3, r1
 80121a6:	617b      	str	r3, [r7, #20]
 80121a8:	f04f 0200 	mov.w	r2, #0
 80121ac:	f04f 0300 	mov.w	r3, #0
 80121b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80121b4:	4659      	mov	r1, fp
 80121b6:	018b      	lsls	r3, r1, #6
 80121b8:	4651      	mov	r1, sl
 80121ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80121be:	4651      	mov	r1, sl
 80121c0:	018a      	lsls	r2, r1, #6
 80121c2:	4651      	mov	r1, sl
 80121c4:	ebb2 0801 	subs.w	r8, r2, r1
 80121c8:	4659      	mov	r1, fp
 80121ca:	eb63 0901 	sbc.w	r9, r3, r1
 80121ce:	f04f 0200 	mov.w	r2, #0
 80121d2:	f04f 0300 	mov.w	r3, #0
 80121d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80121da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80121de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80121e2:	4690      	mov	r8, r2
 80121e4:	4699      	mov	r9, r3
 80121e6:	4623      	mov	r3, r4
 80121e8:	eb18 0303 	adds.w	r3, r8, r3
 80121ec:	60bb      	str	r3, [r7, #8]
 80121ee:	462b      	mov	r3, r5
 80121f0:	eb49 0303 	adc.w	r3, r9, r3
 80121f4:	60fb      	str	r3, [r7, #12]
 80121f6:	f04f 0200 	mov.w	r2, #0
 80121fa:	f04f 0300 	mov.w	r3, #0
 80121fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8012202:	4629      	mov	r1, r5
 8012204:	024b      	lsls	r3, r1, #9
 8012206:	4621      	mov	r1, r4
 8012208:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 801220c:	4621      	mov	r1, r4
 801220e:	024a      	lsls	r2, r1, #9
 8012210:	4610      	mov	r0, r2
 8012212:	4619      	mov	r1, r3
 8012214:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012216:	2200      	movs	r2, #0
 8012218:	62bb      	str	r3, [r7, #40]	; 0x28
 801221a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801221c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8012220:	f007 f998 	bl	8019554 <__aeabi_uldivmod>
 8012224:	4602      	mov	r2, r0
 8012226:	460b      	mov	r3, r1
 8012228:	4613      	mov	r3, r2
 801222a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801222c:	e058      	b.n	80122e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801222e:	4b38      	ldr	r3, [pc, #224]	; (8012310 <HAL_RCC_GetSysClockFreq+0x200>)
 8012230:	685b      	ldr	r3, [r3, #4]
 8012232:	099b      	lsrs	r3, r3, #6
 8012234:	2200      	movs	r2, #0
 8012236:	4618      	mov	r0, r3
 8012238:	4611      	mov	r1, r2
 801223a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 801223e:	623b      	str	r3, [r7, #32]
 8012240:	2300      	movs	r3, #0
 8012242:	627b      	str	r3, [r7, #36]	; 0x24
 8012244:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8012248:	4642      	mov	r2, r8
 801224a:	464b      	mov	r3, r9
 801224c:	f04f 0000 	mov.w	r0, #0
 8012250:	f04f 0100 	mov.w	r1, #0
 8012254:	0159      	lsls	r1, r3, #5
 8012256:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801225a:	0150      	lsls	r0, r2, #5
 801225c:	4602      	mov	r2, r0
 801225e:	460b      	mov	r3, r1
 8012260:	4641      	mov	r1, r8
 8012262:	ebb2 0a01 	subs.w	sl, r2, r1
 8012266:	4649      	mov	r1, r9
 8012268:	eb63 0b01 	sbc.w	fp, r3, r1
 801226c:	f04f 0200 	mov.w	r2, #0
 8012270:	f04f 0300 	mov.w	r3, #0
 8012274:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8012278:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 801227c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8012280:	ebb2 040a 	subs.w	r4, r2, sl
 8012284:	eb63 050b 	sbc.w	r5, r3, fp
 8012288:	f04f 0200 	mov.w	r2, #0
 801228c:	f04f 0300 	mov.w	r3, #0
 8012290:	00eb      	lsls	r3, r5, #3
 8012292:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8012296:	00e2      	lsls	r2, r4, #3
 8012298:	4614      	mov	r4, r2
 801229a:	461d      	mov	r5, r3
 801229c:	4643      	mov	r3, r8
 801229e:	18e3      	adds	r3, r4, r3
 80122a0:	603b      	str	r3, [r7, #0]
 80122a2:	464b      	mov	r3, r9
 80122a4:	eb45 0303 	adc.w	r3, r5, r3
 80122a8:	607b      	str	r3, [r7, #4]
 80122aa:	f04f 0200 	mov.w	r2, #0
 80122ae:	f04f 0300 	mov.w	r3, #0
 80122b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80122b6:	4629      	mov	r1, r5
 80122b8:	028b      	lsls	r3, r1, #10
 80122ba:	4621      	mov	r1, r4
 80122bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80122c0:	4621      	mov	r1, r4
 80122c2:	028a      	lsls	r2, r1, #10
 80122c4:	4610      	mov	r0, r2
 80122c6:	4619      	mov	r1, r3
 80122c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80122ca:	2200      	movs	r2, #0
 80122cc:	61bb      	str	r3, [r7, #24]
 80122ce:	61fa      	str	r2, [r7, #28]
 80122d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80122d4:	f007 f93e 	bl	8019554 <__aeabi_uldivmod>
 80122d8:	4602      	mov	r2, r0
 80122da:	460b      	mov	r3, r1
 80122dc:	4613      	mov	r3, r2
 80122de:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80122e0:	4b0b      	ldr	r3, [pc, #44]	; (8012310 <HAL_RCC_GetSysClockFreq+0x200>)
 80122e2:	685b      	ldr	r3, [r3, #4]
 80122e4:	0c1b      	lsrs	r3, r3, #16
 80122e6:	f003 0303 	and.w	r3, r3, #3
 80122ea:	3301      	adds	r3, #1
 80122ec:	005b      	lsls	r3, r3, #1
 80122ee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80122f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80122f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80122f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80122f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80122fa:	e002      	b.n	8012302 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80122fc:	4b05      	ldr	r3, [pc, #20]	; (8012314 <HAL_RCC_GetSysClockFreq+0x204>)
 80122fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8012300:	bf00      	nop
    }
  }
  return sysclockfreq;
 8012302:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8012304:	4618      	mov	r0, r3
 8012306:	3750      	adds	r7, #80	; 0x50
 8012308:	46bd      	mov	sp, r7
 801230a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801230e:	bf00      	nop
 8012310:	40023800 	.word	0x40023800
 8012314:	00f42400 	.word	0x00f42400
 8012318:	007a1200 	.word	0x007a1200

0801231c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801231c:	b480      	push	{r7}
 801231e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8012320:	4b03      	ldr	r3, [pc, #12]	; (8012330 <HAL_RCC_GetHCLKFreq+0x14>)
 8012322:	681b      	ldr	r3, [r3, #0]
}
 8012324:	4618      	mov	r0, r3
 8012326:	46bd      	mov	sp, r7
 8012328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801232c:	4770      	bx	lr
 801232e:	bf00      	nop
 8012330:	20000058 	.word	0x20000058

08012334 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8012334:	b580      	push	{r7, lr}
 8012336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8012338:	f7ff fff0 	bl	801231c <HAL_RCC_GetHCLKFreq>
 801233c:	4602      	mov	r2, r0
 801233e:	4b05      	ldr	r3, [pc, #20]	; (8012354 <HAL_RCC_GetPCLK1Freq+0x20>)
 8012340:	689b      	ldr	r3, [r3, #8]
 8012342:	0a9b      	lsrs	r3, r3, #10
 8012344:	f003 0307 	and.w	r3, r3, #7
 8012348:	4903      	ldr	r1, [pc, #12]	; (8012358 <HAL_RCC_GetPCLK1Freq+0x24>)
 801234a:	5ccb      	ldrb	r3, [r1, r3]
 801234c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8012350:	4618      	mov	r0, r3
 8012352:	bd80      	pop	{r7, pc}
 8012354:	40023800 	.word	0x40023800
 8012358:	08051f68 	.word	0x08051f68

0801235c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801235c:	b580      	push	{r7, lr}
 801235e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8012360:	f7ff ffdc 	bl	801231c <HAL_RCC_GetHCLKFreq>
 8012364:	4602      	mov	r2, r0
 8012366:	4b05      	ldr	r3, [pc, #20]	; (801237c <HAL_RCC_GetPCLK2Freq+0x20>)
 8012368:	689b      	ldr	r3, [r3, #8]
 801236a:	0b5b      	lsrs	r3, r3, #13
 801236c:	f003 0307 	and.w	r3, r3, #7
 8012370:	4903      	ldr	r1, [pc, #12]	; (8012380 <HAL_RCC_GetPCLK2Freq+0x24>)
 8012372:	5ccb      	ldrb	r3, [r1, r3]
 8012374:	fa22 f303 	lsr.w	r3, r2, r3
}
 8012378:	4618      	mov	r0, r3
 801237a:	bd80      	pop	{r7, pc}
 801237c:	40023800 	.word	0x40023800
 8012380:	08051f68 	.word	0x08051f68

08012384 <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
  * will be configured.
  * @retval None
  */
__weak void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012384:	b480      	push	{r7}
 8012386:	b083      	sub	sp, #12
 8012388:	af00      	add	r7, sp, #0
 801238a:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	220f      	movs	r2, #15
 8012390:	601a      	str	r2, [r3, #0]

  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8012392:	4b45      	ldr	r3, [pc, #276]	; (80124a8 <HAL_RCC_GetOscConfig+0x124>)
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801239a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801239e:	d104      	bne.n	80123aa <HAL_RCC_GetOscConfig+0x26>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80123a6:	605a      	str	r2, [r3, #4]
 80123a8:	e00e      	b.n	80123c8 <HAL_RCC_GetOscConfig+0x44>
  }
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 80123aa:	4b3f      	ldr	r3, [pc, #252]	; (80124a8 <HAL_RCC_GetOscConfig+0x124>)
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80123b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80123b6:	d104      	bne.n	80123c2 <HAL_RCC_GetOscConfig+0x3e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80123be:	605a      	str	r2, [r3, #4]
 80123c0:	e002      	b.n	80123c8 <HAL_RCC_GetOscConfig+0x44>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	2200      	movs	r2, #0
 80123c6:	605a      	str	r2, [r3, #4]
  }

  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 80123c8:	4b37      	ldr	r3, [pc, #220]	; (80124a8 <HAL_RCC_GetOscConfig+0x124>)
 80123ca:	681b      	ldr	r3, [r3, #0]
 80123cc:	f003 0301 	and.w	r3, r3, #1
 80123d0:	2b01      	cmp	r3, #1
 80123d2:	d103      	bne.n	80123dc <HAL_RCC_GetOscConfig+0x58>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	2201      	movs	r2, #1
 80123d8:	60da      	str	r2, [r3, #12]
 80123da:	e002      	b.n	80123e2 <HAL_RCC_GetOscConfig+0x5e>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	2200      	movs	r2, #0
 80123e0:	60da      	str	r2, [r3, #12]
  }

  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
 80123e2:	4b31      	ldr	r3, [pc, #196]	; (80124a8 <HAL_RCC_GetOscConfig+0x124>)
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	08db      	lsrs	r3, r3, #3
 80123e8:	f003 021f 	and.w	r2, r3, #31
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	611a      	str	r2, [r3, #16]

  /* Get the LSE configuration -----------------------------------------------*/
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 80123f0:	4b2d      	ldr	r3, [pc, #180]	; (80124a8 <HAL_RCC_GetOscConfig+0x124>)
 80123f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123f4:	f003 0304 	and.w	r3, r3, #4
 80123f8:	2b04      	cmp	r3, #4
 80123fa:	d103      	bne.n	8012404 <HAL_RCC_GetOscConfig+0x80>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	2205      	movs	r2, #5
 8012400:	609a      	str	r2, [r3, #8]
 8012402:	e00c      	b.n	801241e <HAL_RCC_GetOscConfig+0x9a>
  }
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 8012404:	4b28      	ldr	r3, [pc, #160]	; (80124a8 <HAL_RCC_GetOscConfig+0x124>)
 8012406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012408:	f003 0301 	and.w	r3, r3, #1
 801240c:	2b01      	cmp	r3, #1
 801240e:	d103      	bne.n	8012418 <HAL_RCC_GetOscConfig+0x94>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	2201      	movs	r2, #1
 8012414:	609a      	str	r2, [r3, #8]
 8012416:	e002      	b.n	801241e <HAL_RCC_GetOscConfig+0x9a>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	2200      	movs	r2, #0
 801241c:	609a      	str	r2, [r3, #8]
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 801241e:	4b22      	ldr	r3, [pc, #136]	; (80124a8 <HAL_RCC_GetOscConfig+0x124>)
 8012420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012422:	f003 0301 	and.w	r3, r3, #1
 8012426:	2b01      	cmp	r3, #1
 8012428:	d103      	bne.n	8012432 <HAL_RCC_GetOscConfig+0xae>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	2201      	movs	r2, #1
 801242e:	615a      	str	r2, [r3, #20]
 8012430:	e002      	b.n	8012438 <HAL_RCC_GetOscConfig+0xb4>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	2200      	movs	r2, #0
 8012436:	615a      	str	r2, [r3, #20]
  }

  /* Get the PLL configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 8012438:	4b1b      	ldr	r3, [pc, #108]	; (80124a8 <HAL_RCC_GetOscConfig+0x124>)
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012440:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8012444:	d103      	bne.n	801244e <HAL_RCC_GetOscConfig+0xca>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	2202      	movs	r2, #2
 801244a:	619a      	str	r2, [r3, #24]
 801244c:	e002      	b.n	8012454 <HAL_RCC_GetOscConfig+0xd0>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	2201      	movs	r2, #1
 8012452:	619a      	str	r2, [r3, #24]
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8012454:	4b14      	ldr	r3, [pc, #80]	; (80124a8 <HAL_RCC_GetOscConfig+0x124>)
 8012456:	685b      	ldr	r3, [r3, #4]
 8012458:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
 8012460:	4b11      	ldr	r3, [pc, #68]	; (80124a8 <HAL_RCC_GetOscConfig+0x124>)
 8012462:	685b      	ldr	r3, [r3, #4]
 8012464:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801246c:	4b0e      	ldr	r3, [pc, #56]	; (80124a8 <HAL_RCC_GetOscConfig+0x124>)
 801246e:	685b      	ldr	r3, [r3, #4]
 8012470:	099b      	lsrs	r3, r3, #6
 8012472:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0) << 1U) >> RCC_PLLCFGR_PLLP_Pos);
 801247a:	4b0b      	ldr	r3, [pc, #44]	; (80124a8 <HAL_RCC_GetOscConfig+0x124>)
 801247c:	685b      	ldr	r3, [r3, #4]
 801247e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8012482:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8012486:	005b      	lsls	r3, r3, #1
 8012488:	0c1a      	lsrs	r2, r3, #16
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos);
 801248e:	4b06      	ldr	r3, [pc, #24]	; (80124a8 <HAL_RCC_GetOscConfig+0x124>)
 8012490:	685b      	ldr	r3, [r3, #4]
 8012492:	0e1b      	lsrs	r3, r3, #24
 8012494:	f003 020f 	and.w	r2, r3, #15
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 801249c:	bf00      	nop
 801249e:	370c      	adds	r7, #12
 80124a0:	46bd      	mov	sp, r7
 80124a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a6:	4770      	bx	lr
 80124a8:	40023800 	.word	0x40023800

080124ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80124ac:	b480      	push	{r7}
 80124ae:	b083      	sub	sp, #12
 80124b0:	af00      	add	r7, sp, #0
 80124b2:	6078      	str	r0, [r7, #4]
 80124b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	220f      	movs	r2, #15
 80124ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80124bc:	4b12      	ldr	r3, [pc, #72]	; (8012508 <HAL_RCC_GetClockConfig+0x5c>)
 80124be:	689b      	ldr	r3, [r3, #8]
 80124c0:	f003 0203 	and.w	r2, r3, #3
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80124c8:	4b0f      	ldr	r3, [pc, #60]	; (8012508 <HAL_RCC_GetClockConfig+0x5c>)
 80124ca:	689b      	ldr	r3, [r3, #8]
 80124cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80124d4:	4b0c      	ldr	r3, [pc, #48]	; (8012508 <HAL_RCC_GetClockConfig+0x5c>)
 80124d6:	689b      	ldr	r3, [r3, #8]
 80124d8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80124e0:	4b09      	ldr	r3, [pc, #36]	; (8012508 <HAL_RCC_GetClockConfig+0x5c>)
 80124e2:	689b      	ldr	r3, [r3, #8]
 80124e4:	08db      	lsrs	r3, r3, #3
 80124e6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80124ee:	4b07      	ldr	r3, [pc, #28]	; (801250c <HAL_RCC_GetClockConfig+0x60>)
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	f003 0207 	and.w	r2, r3, #7
 80124f6:	683b      	ldr	r3, [r7, #0]
 80124f8:	601a      	str	r2, [r3, #0]
}
 80124fa:	bf00      	nop
 80124fc:	370c      	adds	r7, #12
 80124fe:	46bd      	mov	sp, r7
 8012500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012504:	4770      	bx	lr
 8012506:	bf00      	nop
 8012508:	40023800 	.word	0x40023800
 801250c:	40023c00 	.word	0x40023c00

08012510 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8012510:	b580      	push	{r7, lr}
 8012512:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8012514:	4b06      	ldr	r3, [pc, #24]	; (8012530 <HAL_RCC_NMI_IRQHandler+0x20>)
 8012516:	68db      	ldr	r3, [r3, #12]
 8012518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801251c:	2b80      	cmp	r3, #128	; 0x80
 801251e:	d104      	bne.n	801252a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8012520:	f000 f80a 	bl	8012538 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8012524:	4b03      	ldr	r3, [pc, #12]	; (8012534 <HAL_RCC_NMI_IRQHandler+0x24>)
 8012526:	2280      	movs	r2, #128	; 0x80
 8012528:	701a      	strb	r2, [r3, #0]
  }
}
 801252a:	bf00      	nop
 801252c:	bd80      	pop	{r7, pc}
 801252e:	bf00      	nop
 8012530:	40023800 	.word	0x40023800
 8012534:	4002380e 	.word	0x4002380e

08012538 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8012538:	b480      	push	{r7}
 801253a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 801253c:	bf00      	nop
 801253e:	46bd      	mov	sp, r7
 8012540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012544:	4770      	bx	lr

08012546 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8012546:	b580      	push	{r7, lr}
 8012548:	b086      	sub	sp, #24
 801254a:	af00      	add	r7, sp, #0
 801254c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801254e:	2300      	movs	r3, #0
 8012550:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8012552:	2300      	movs	r3, #0
 8012554:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	f003 0301 	and.w	r3, r3, #1
 801255e:	2b00      	cmp	r3, #0
 8012560:	d105      	bne.n	801256e <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 801256a:	2b00      	cmp	r3, #0
 801256c:	d035      	beq.n	80125da <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 801256e:	4b62      	ldr	r3, [pc, #392]	; (80126f8 <HAL_RCCEx_PeriphCLKConfig+0x1b2>)
 8012570:	2200      	movs	r2, #0
 8012572:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8012574:	f7f4 f982 	bl	800687c <HAL_GetTick>
 8012578:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801257a:	e008      	b.n	801258e <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 801257c:	f7f4 f97e 	bl	800687c <HAL_GetTick>
 8012580:	4602      	mov	r2, r0
 8012582:	697b      	ldr	r3, [r7, #20]
 8012584:	1ad3      	subs	r3, r2, r3
 8012586:	2b02      	cmp	r3, #2
 8012588:	d901      	bls.n	801258e <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801258a:	2303      	movs	r3, #3
 801258c:	e0b0      	b.n	80126f0 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801258e:	4b5b      	ldr	r3, [pc, #364]	; (80126fc <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012596:	2b00      	cmp	r3, #0
 8012598:	d1f0      	bne.n	801257c <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	685b      	ldr	r3, [r3, #4]
 801259e:	019a      	lsls	r2, r3, #6
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	689b      	ldr	r3, [r3, #8]
 80125a4:	071b      	lsls	r3, r3, #28
 80125a6:	4955      	ldr	r1, [pc, #340]	; (80126fc <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 80125a8:	4313      	orrs	r3, r2
 80125aa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80125ae:	4b52      	ldr	r3, [pc, #328]	; (80126f8 <HAL_RCCEx_PeriphCLKConfig+0x1b2>)
 80125b0:	2201      	movs	r2, #1
 80125b2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80125b4:	f7f4 f962 	bl	800687c <HAL_GetTick>
 80125b8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80125ba:	e008      	b.n	80125ce <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80125bc:	f7f4 f95e 	bl	800687c <HAL_GetTick>
 80125c0:	4602      	mov	r2, r0
 80125c2:	697b      	ldr	r3, [r7, #20]
 80125c4:	1ad3      	subs	r3, r2, r3
 80125c6:	2b02      	cmp	r3, #2
 80125c8:	d901      	bls.n	80125ce <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80125ca:	2303      	movs	r3, #3
 80125cc:	e090      	b.n	80126f0 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80125ce:	4b4b      	ldr	r3, [pc, #300]	; (80126fc <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d0f0      	beq.n	80125bc <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	f003 0302 	and.w	r3, r3, #2
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	f000 8083 	beq.w	80126ee <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80125e8:	2300      	movs	r3, #0
 80125ea:	60fb      	str	r3, [r7, #12]
 80125ec:	4b43      	ldr	r3, [pc, #268]	; (80126fc <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 80125ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80125f0:	4a42      	ldr	r2, [pc, #264]	; (80126fc <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 80125f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80125f6:	6413      	str	r3, [r2, #64]	; 0x40
 80125f8:	4b40      	ldr	r3, [pc, #256]	; (80126fc <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 80125fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80125fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012600:	60fb      	str	r3, [r7, #12]
 8012602:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8012604:	4b3e      	ldr	r3, [pc, #248]	; (8012700 <HAL_RCCEx_PeriphCLKConfig+0x1ba>)
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	4a3d      	ldr	r2, [pc, #244]	; (8012700 <HAL_RCCEx_PeriphCLKConfig+0x1ba>)
 801260a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801260e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8012610:	f7f4 f934 	bl	800687c <HAL_GetTick>
 8012614:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8012616:	e008      	b.n	801262a <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8012618:	f7f4 f930 	bl	800687c <HAL_GetTick>
 801261c:	4602      	mov	r2, r0
 801261e:	697b      	ldr	r3, [r7, #20]
 8012620:	1ad3      	subs	r3, r2, r3
 8012622:	2b02      	cmp	r3, #2
 8012624:	d901      	bls.n	801262a <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8012626:	2303      	movs	r3, #3
 8012628:	e062      	b.n	80126f0 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 801262a:	4b35      	ldr	r3, [pc, #212]	; (8012700 <HAL_RCCEx_PeriphCLKConfig+0x1ba>)
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012632:	2b00      	cmp	r3, #0
 8012634:	d0f0      	beq.n	8012618 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8012636:	4b31      	ldr	r3, [pc, #196]	; (80126fc <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801263a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801263e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8012640:	693b      	ldr	r3, [r7, #16]
 8012642:	2b00      	cmp	r3, #0
 8012644:	d02f      	beq.n	80126a6 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	68db      	ldr	r3, [r3, #12]
 801264a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801264e:	693a      	ldr	r2, [r7, #16]
 8012650:	429a      	cmp	r2, r3
 8012652:	d028      	beq.n	80126a6 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8012654:	4b29      	ldr	r3, [pc, #164]	; (80126fc <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801265c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801265e:	4b29      	ldr	r3, [pc, #164]	; (8012704 <HAL_RCCEx_PeriphCLKConfig+0x1be>)
 8012660:	2201      	movs	r2, #1
 8012662:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8012664:	4b27      	ldr	r3, [pc, #156]	; (8012704 <HAL_RCCEx_PeriphCLKConfig+0x1be>)
 8012666:	2200      	movs	r2, #0
 8012668:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 801266a:	4a24      	ldr	r2, [pc, #144]	; (80126fc <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 801266c:	693b      	ldr	r3, [r7, #16]
 801266e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8012670:	4b22      	ldr	r3, [pc, #136]	; (80126fc <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012674:	f003 0301 	and.w	r3, r3, #1
 8012678:	2b01      	cmp	r3, #1
 801267a:	d114      	bne.n	80126a6 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 801267c:	f7f4 f8fe 	bl	800687c <HAL_GetTick>
 8012680:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012682:	e00a      	b.n	801269a <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012684:	f7f4 f8fa 	bl	800687c <HAL_GetTick>
 8012688:	4602      	mov	r2, r0
 801268a:	697b      	ldr	r3, [r7, #20]
 801268c:	1ad3      	subs	r3, r2, r3
 801268e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012692:	4293      	cmp	r3, r2
 8012694:	d901      	bls.n	801269a <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8012696:	2303      	movs	r3, #3
 8012698:	e02a      	b.n	80126f0 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801269a:	4b18      	ldr	r3, [pc, #96]	; (80126fc <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 801269c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801269e:	f003 0302 	and.w	r3, r3, #2
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d0ee      	beq.n	8012684 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	68db      	ldr	r3, [r3, #12]
 80126aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80126ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80126b2:	d10d      	bne.n	80126d0 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80126b4:	4b11      	ldr	r3, [pc, #68]	; (80126fc <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 80126b6:	689b      	ldr	r3, [r3, #8]
 80126b8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	68db      	ldr	r3, [r3, #12]
 80126c0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80126c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80126c8:	490c      	ldr	r1, [pc, #48]	; (80126fc <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 80126ca:	4313      	orrs	r3, r2
 80126cc:	608b      	str	r3, [r1, #8]
 80126ce:	e005      	b.n	80126dc <HAL_RCCEx_PeriphCLKConfig+0x196>
 80126d0:	4b0a      	ldr	r3, [pc, #40]	; (80126fc <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 80126d2:	689b      	ldr	r3, [r3, #8]
 80126d4:	4a09      	ldr	r2, [pc, #36]	; (80126fc <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 80126d6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80126da:	6093      	str	r3, [r2, #8]
 80126dc:	4b07      	ldr	r3, [pc, #28]	; (80126fc <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 80126de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	68db      	ldr	r3, [r3, #12]
 80126e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80126e8:	4904      	ldr	r1, [pc, #16]	; (80126fc <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 80126ea:	4313      	orrs	r3, r2
 80126ec:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80126ee:	2300      	movs	r3, #0
}
 80126f0:	4618      	mov	r0, r3
 80126f2:	3718      	adds	r7, #24
 80126f4:	46bd      	mov	sp, r7
 80126f6:	bd80      	pop	{r7, pc}
 80126f8:	42470068 	.word	0x42470068
 80126fc:	40023800 	.word	0x40023800
 8012700:	40007000 	.word	0x40007000
 8012704:	42470e40 	.word	0x42470e40

08012708 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8012708:	b480      	push	{r7}
 801270a:	b085      	sub	sp, #20
 801270c:	af00      	add	r7, sp, #0
 801270e:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	2203      	movs	r2, #3
 8012714:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8012716:	4b11      	ldr	r3, [pc, #68]	; (801275c <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8012718:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801271c:	099b      	lsrs	r3, r3, #6
 801271e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8012726:	4b0d      	ldr	r3, [pc, #52]	; (801275c <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8012728:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801272c:	0f1b      	lsrs	r3, r3, #28
 801272e:	f003 0207 	and.w	r2, r3, #7
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8012736:	4b09      	ldr	r3, [pc, #36]	; (801275c <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8012738:	689b      	ldr	r3, [r3, #8]
 801273a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 801273e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8012740:	4b06      	ldr	r3, [pc, #24]	; (801275c <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8012742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012744:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	431a      	orrs	r2, r3
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8012750:	bf00      	nop
 8012752:	3714      	adds	r7, #20
 8012754:	46bd      	mov	sp, r7
 8012756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801275a:	4770      	bx	lr
 801275c:	40023800 	.word	0x40023800

08012760 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8012760:	b480      	push	{r7}
 8012762:	b087      	sub	sp, #28
 8012764:	af00      	add	r7, sp, #0
 8012766:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8012768:	2300      	movs	r3, #0
 801276a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 801276c:	2300      	movs	r3, #0
 801276e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8012770:	2300      	movs	r3, #0
 8012772:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8012774:	2300      	movs	r3, #0
 8012776:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	2b01      	cmp	r3, #1
 801277c:	d13e      	bne.n	80127fc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 801277e:	4b23      	ldr	r3, [pc, #140]	; (801280c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8012780:	689b      	ldr	r3, [r3, #8]
 8012782:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012786:	60fb      	str	r3, [r7, #12]
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	2b00      	cmp	r3, #0
 801278c:	d005      	beq.n	801279a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	2b01      	cmp	r3, #1
 8012792:	d12f      	bne.n	80127f4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8012794:	4b1e      	ldr	r3, [pc, #120]	; (8012810 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8012796:	617b      	str	r3, [r7, #20]
          break;
 8012798:	e02f      	b.n	80127fa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 801279a:	4b1c      	ldr	r3, [pc, #112]	; (801280c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 801279c:	685b      	ldr	r3, [r3, #4]
 801279e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80127a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80127a6:	d108      	bne.n	80127ba <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80127a8:	4b18      	ldr	r3, [pc, #96]	; (801280c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80127aa:	685b      	ldr	r3, [r3, #4]
 80127ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80127b0:	4a18      	ldr	r2, [pc, #96]	; (8012814 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80127b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80127b6:	613b      	str	r3, [r7, #16]
 80127b8:	e007      	b.n	80127ca <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80127ba:	4b14      	ldr	r3, [pc, #80]	; (801280c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80127bc:	685b      	ldr	r3, [r3, #4]
 80127be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80127c2:	4a15      	ldr	r2, [pc, #84]	; (8012818 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80127c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80127c8:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80127ca:	4b10      	ldr	r3, [pc, #64]	; (801280c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80127cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80127d0:	099b      	lsrs	r3, r3, #6
 80127d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80127d6:	693b      	ldr	r3, [r7, #16]
 80127d8:	fb02 f303 	mul.w	r3, r2, r3
 80127dc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80127de:	4b0b      	ldr	r3, [pc, #44]	; (801280c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80127e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80127e4:	0f1b      	lsrs	r3, r3, #28
 80127e6:	f003 0307 	and.w	r3, r3, #7
 80127ea:	68ba      	ldr	r2, [r7, #8]
 80127ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80127f0:	617b      	str	r3, [r7, #20]
          break;
 80127f2:	e002      	b.n	80127fa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80127f4:	2300      	movs	r3, #0
 80127f6:	617b      	str	r3, [r7, #20]
          break;
 80127f8:	bf00      	nop
        }
      }
      break;
 80127fa:	bf00      	nop
    }
  }
  return frequency;
 80127fc:	697b      	ldr	r3, [r7, #20]
}
 80127fe:	4618      	mov	r0, r3
 8012800:	371c      	adds	r7, #28
 8012802:	46bd      	mov	sp, r7
 8012804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012808:	4770      	bx	lr
 801280a:	bf00      	nop
 801280c:	40023800 	.word	0x40023800
 8012810:	00bb8000 	.word	0x00bb8000
 8012814:	007a1200 	.word	0x007a1200
 8012818:	00f42400 	.word	0x00f42400

0801281c <HAL_RCCEx_EnablePLLI2S>:
  * @param  PLLI2SInit  pointer to an RCC_PLLI2SInitTypeDef structure that
  *         contains the configuration information for the PLLI2S
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_EnablePLLI2S(RCC_PLLI2SInitTypeDef  *PLLI2SInit)
{
 801281c:	b580      	push	{r7, lr}
 801281e:	b084      	sub	sp, #16
 8012820:	af00      	add	r7, sp, #0
 8012822:	6078      	str	r0, [r7, #4]
#if defined(RCC_PLLI2SCFGR_PLLI2SQ)
  assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SInit->PLLI2SQ));
#endif /* RCC_PLLI2SCFGR_PLLI2SQ */

  /* Disable the PLLI2S */
  __HAL_RCC_PLLI2S_DISABLE();
 8012824:	4b1d      	ldr	r3, [pc, #116]	; (801289c <HAL_RCCEx_EnablePLLI2S+0x80>)
 8012826:	2200      	movs	r2, #0
 8012828:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is disabled */
  tickstart = HAL_GetTick();
 801282a:	f7f4 f827 	bl	800687c <HAL_GetTick>
 801282e:	60f8      	str	r0, [r7, #12]
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
 8012830:	e008      	b.n	8012844 <HAL_RCCEx_EnablePLLI2S+0x28>
  {
    if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8012832:	f7f4 f823 	bl	800687c <HAL_GetTick>
 8012836:	4602      	mov	r2, r0
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	1ad3      	subs	r3, r2, r3
 801283c:	2b02      	cmp	r3, #2
 801283e:	d901      	bls.n	8012844 <HAL_RCCEx_EnablePLLI2S+0x28>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
 8012840:	2303      	movs	r3, #3
 8012842:	e026      	b.n	8012892 <HAL_RCCEx_EnablePLLI2S+0x76>
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
 8012844:	4b16      	ldr	r3, [pc, #88]	; (80128a0 <HAL_RCCEx_EnablePLLI2S+0x84>)
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801284c:	2b00      	cmp	r3, #0
 801284e:	d1f0      	bne.n	8012832 <HAL_RCCEx_EnablePLLI2S+0x16>
  /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
  __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PLLI2SInit->PLLI2SM, PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SR);
#else
  /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x PLLI2SN */
  /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
  __HAL_RCC_PLLI2S_CONFIG(PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SR);
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	019a      	lsls	r2, r3, #6
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	685b      	ldr	r3, [r3, #4]
 801285a:	071b      	lsls	r3, r3, #28
 801285c:	4910      	ldr	r1, [pc, #64]	; (80128a0 <HAL_RCCEx_EnablePLLI2S+0x84>)
 801285e:	4313      	orrs	r3, r2
 8012860:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F446xx */

  /* Enable the PLLI2S */
  __HAL_RCC_PLLI2S_ENABLE();
 8012864:	4b0d      	ldr	r3, [pc, #52]	; (801289c <HAL_RCCEx_EnablePLLI2S+0x80>)
 8012866:	2201      	movs	r2, #1
 8012868:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is ready */
  tickstart = HAL_GetTick();
 801286a:	f7f4 f807 	bl	800687c <HAL_GetTick>
 801286e:	60f8      	str	r0, [r7, #12]
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
 8012870:	e008      	b.n	8012884 <HAL_RCCEx_EnablePLLI2S+0x68>
  {
    if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8012872:	f7f4 f803 	bl	800687c <HAL_GetTick>
 8012876:	4602      	mov	r2, r0
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	1ad3      	subs	r3, r2, r3
 801287c:	2b02      	cmp	r3, #2
 801287e:	d901      	bls.n	8012884 <HAL_RCCEx_EnablePLLI2S+0x68>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
 8012880:	2303      	movs	r3, #3
 8012882:	e006      	b.n	8012892 <HAL_RCCEx_EnablePLLI2S+0x76>
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
 8012884:	4b06      	ldr	r3, [pc, #24]	; (80128a0 <HAL_RCCEx_EnablePLLI2S+0x84>)
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801288c:	2b00      	cmp	r3, #0
 801288e:	d0f0      	beq.n	8012872 <HAL_RCCEx_EnablePLLI2S+0x56>
    }
  }

 return HAL_OK;
 8012890:	2300      	movs	r3, #0
}
 8012892:	4618      	mov	r0, r3
 8012894:	3710      	adds	r7, #16
 8012896:	46bd      	mov	sp, r7
 8012898:	bd80      	pop	{r7, pc}
 801289a:	bf00      	nop
 801289c:	42470068 	.word	0x42470068
 80128a0:	40023800 	.word	0x40023800

080128a4 <HAL_RCCEx_DisablePLLI2S>:
/**
  * @brief  Disable PLLI2S.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_DisablePLLI2S(void)
{
 80128a4:	b580      	push	{r7, lr}
 80128a6:	b082      	sub	sp, #8
 80128a8:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Disable the PLLI2S */
  __HAL_RCC_PLLI2S_DISABLE();
 80128aa:	4b0d      	ldr	r3, [pc, #52]	; (80128e0 <HAL_RCCEx_DisablePLLI2S+0x3c>)
 80128ac:	2200      	movs	r2, #0
 80128ae:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is disabled */
  tickstart = HAL_GetTick();
 80128b0:	f7f3 ffe4 	bl	800687c <HAL_GetTick>
 80128b4:	6078      	str	r0, [r7, #4]
  while(READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80128b6:	e008      	b.n	80128ca <HAL_RCCEx_DisablePLLI2S+0x26>
  {
    if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80128b8:	f7f3 ffe0 	bl	800687c <HAL_GetTick>
 80128bc:	4602      	mov	r2, r0
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	1ad3      	subs	r3, r2, r3
 80128c2:	2b02      	cmp	r3, #2
 80128c4:	d901      	bls.n	80128ca <HAL_RCCEx_DisablePLLI2S+0x26>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
 80128c6:	2303      	movs	r3, #3
 80128c8:	e006      	b.n	80128d8 <HAL_RCCEx_DisablePLLI2S+0x34>
  while(READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80128ca:	4b06      	ldr	r3, [pc, #24]	; (80128e4 <HAL_RCCEx_DisablePLLI2S+0x40>)
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d1f0      	bne.n	80128b8 <HAL_RCCEx_DisablePLLI2S+0x14>
    }
  }

  return HAL_OK;
 80128d6:	2300      	movs	r3, #0
}
 80128d8:	4618      	mov	r0, r3
 80128da:	3708      	adds	r7, #8
 80128dc:	46bd      	mov	sp, r7
 80128de:	bd80      	pop	{r7, pc}
 80128e0:	42470068 	.word	0x42470068
 80128e4:	40023800 	.word	0x40023800

080128e8 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80128e8:	b580      	push	{r7, lr}
 80128ea:	b082      	sub	sp, #8
 80128ec:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80128ee:	f7f3 ffc5 	bl	800687c <HAL_GetTick>
 80128f2:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80128f4:	4b5d      	ldr	r3, [pc, #372]	; (8012a6c <HAL_RCC_DeInit+0x184>)
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	4a5c      	ldr	r2, [pc, #368]	; (8012a6c <HAL_RCC_DeInit+0x184>)
 80128fa:	f043 0301 	orr.w	r3, r3, #1
 80128fe:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8012900:	e008      	b.n	8012914 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8012902:	f7f3 ffbb 	bl	800687c <HAL_GetTick>
 8012906:	4602      	mov	r2, r0
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	1ad3      	subs	r3, r2, r3
 801290c:	2b02      	cmp	r3, #2
 801290e:	d901      	bls.n	8012914 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8012910:	2303      	movs	r3, #3
 8012912:	e0a7      	b.n	8012a64 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8012914:	4b55      	ldr	r3, [pc, #340]	; (8012a6c <HAL_RCC_DeInit+0x184>)
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	f003 0302 	and.w	r3, r3, #2
 801291c:	2b00      	cmp	r3, #0
 801291e:	d0f0      	beq.n	8012902 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8012920:	4b52      	ldr	r3, [pc, #328]	; (8012a6c <HAL_RCC_DeInit+0x184>)
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	4a51      	ldr	r2, [pc, #324]	; (8012a6c <HAL_RCC_DeInit+0x184>)
 8012926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801292a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 801292c:	f7f3 ffa6 	bl	800687c <HAL_GetTick>
 8012930:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8012932:	4b4e      	ldr	r3, [pc, #312]	; (8012a6c <HAL_RCC_DeInit+0x184>)
 8012934:	2200      	movs	r2, #0
 8012936:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8012938:	e00a      	b.n	8012950 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801293a:	f7f3 ff9f 	bl	800687c <HAL_GetTick>
 801293e:	4602      	mov	r2, r0
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	1ad3      	subs	r3, r2, r3
 8012944:	f241 3288 	movw	r2, #5000	; 0x1388
 8012948:	4293      	cmp	r3, r2
 801294a:	d901      	bls.n	8012950 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 801294c:	2303      	movs	r3, #3
 801294e:	e089      	b.n	8012a64 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8012950:	4b46      	ldr	r3, [pc, #280]	; (8012a6c <HAL_RCC_DeInit+0x184>)
 8012952:	689b      	ldr	r3, [r3, #8]
 8012954:	f003 030c 	and.w	r3, r3, #12
 8012958:	2b00      	cmp	r3, #0
 801295a:	d1ee      	bne.n	801293a <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 801295c:	f7f3 ff8e 	bl	800687c <HAL_GetTick>
 8012960:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8012962:	4b42      	ldr	r3, [pc, #264]	; (8012a6c <HAL_RCC_DeInit+0x184>)
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	4a41      	ldr	r2, [pc, #260]	; (8012a6c <HAL_RCC_DeInit+0x184>)
 8012968:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 801296c:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 801296e:	e008      	b.n	8012982 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8012970:	f7f3 ff84 	bl	800687c <HAL_GetTick>
 8012974:	4602      	mov	r2, r0
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	1ad3      	subs	r3, r2, r3
 801297a:	2b64      	cmp	r3, #100	; 0x64
 801297c:	d901      	bls.n	8012982 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 801297e:	2303      	movs	r3, #3
 8012980:	e070      	b.n	8012a64 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8012982:	4b3a      	ldr	r3, [pc, #232]	; (8012a6c <HAL_RCC_DeInit+0x184>)
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801298a:	2b00      	cmp	r3, #0
 801298c:	d1f0      	bne.n	8012970 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 801298e:	f7f3 ff75 	bl	800687c <HAL_GetTick>
 8012992:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8012994:	4b35      	ldr	r3, [pc, #212]	; (8012a6c <HAL_RCC_DeInit+0x184>)
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	4a34      	ldr	r2, [pc, #208]	; (8012a6c <HAL_RCC_DeInit+0x184>)
 801299a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801299e:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80129a0:	e008      	b.n	80129b4 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80129a2:	f7f3 ff6b 	bl	800687c <HAL_GetTick>
 80129a6:	4602      	mov	r2, r0
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	1ad3      	subs	r3, r2, r3
 80129ac:	2b02      	cmp	r3, #2
 80129ae:	d901      	bls.n	80129b4 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 80129b0:	2303      	movs	r3, #3
 80129b2:	e057      	b.n	8012a64 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80129b4:	4b2d      	ldr	r3, [pc, #180]	; (8012a6c <HAL_RCC_DeInit+0x184>)
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d1f0      	bne.n	80129a2 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80129c0:	f7f3 ff5c 	bl	800687c <HAL_GetTick>
 80129c4:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 80129c6:	4b29      	ldr	r3, [pc, #164]	; (8012a6c <HAL_RCC_DeInit+0x184>)
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	4a28      	ldr	r2, [pc, #160]	; (8012a6c <HAL_RCC_DeInit+0x184>)
 80129cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80129d0:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80129d2:	e008      	b.n	80129e6 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80129d4:	f7f3 ff52 	bl	800687c <HAL_GetTick>
 80129d8:	4602      	mov	r2, r0
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	1ad3      	subs	r3, r2, r3
 80129de:	2b02      	cmp	r3, #2
 80129e0:	d901      	bls.n	80129e6 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 80129e2:	2303      	movs	r3, #3
 80129e4:	e03e      	b.n	8012a64 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80129e6:	4b21      	ldr	r3, [pc, #132]	; (8012a6c <HAL_RCC_DeInit+0x184>)
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d1f0      	bne.n	80129d4 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 80129f2:	4b1e      	ldr	r3, [pc, #120]	; (8012a6c <HAL_RCC_DeInit+0x184>)
 80129f4:	4a1e      	ldr	r2, [pc, #120]	; (8012a70 <HAL_RCC_DeInit+0x188>)
 80129f6:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 80129f8:	4b1c      	ldr	r3, [pc, #112]	; (8012a6c <HAL_RCC_DeInit+0x184>)
 80129fa:	4a1e      	ldr	r2, [pc, #120]	; (8012a74 <HAL_RCC_DeInit+0x18c>)
 80129fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8012a00:	4b1a      	ldr	r3, [pc, #104]	; (8012a6c <HAL_RCC_DeInit+0x184>)
 8012a02:	68db      	ldr	r3, [r3, #12]
 8012a04:	4a19      	ldr	r2, [pc, #100]	; (8012a6c <HAL_RCC_DeInit+0x184>)
 8012a06:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8012a0a:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8012a0c:	4b17      	ldr	r3, [pc, #92]	; (8012a6c <HAL_RCC_DeInit+0x184>)
 8012a0e:	68db      	ldr	r3, [r3, #12]
 8012a10:	4a16      	ldr	r2, [pc, #88]	; (8012a6c <HAL_RCC_DeInit+0x184>)
 8012a12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012a16:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8012a18:	4b14      	ldr	r3, [pc, #80]	; (8012a6c <HAL_RCC_DeInit+0x184>)
 8012a1a:	68db      	ldr	r3, [r3, #12]
 8012a1c:	4a13      	ldr	r2, [pc, #76]	; (8012a6c <HAL_RCC_DeInit+0x184>)
 8012a1e:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8012a22:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8012a24:	4b11      	ldr	r3, [pc, #68]	; (8012a6c <HAL_RCC_DeInit+0x184>)
 8012a26:	68db      	ldr	r3, [r3, #12]
 8012a28:	4a10      	ldr	r2, [pc, #64]	; (8012a6c <HAL_RCC_DeInit+0x184>)
 8012a2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012a2e:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8012a30:	4b0e      	ldr	r3, [pc, #56]	; (8012a6c <HAL_RCC_DeInit+0x184>)
 8012a32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a34:	4a0d      	ldr	r2, [pc, #52]	; (8012a6c <HAL_RCC_DeInit+0x184>)
 8012a36:	f023 0301 	bic.w	r3, r3, #1
 8012a3a:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8012a3c:	4b0b      	ldr	r3, [pc, #44]	; (8012a6c <HAL_RCC_DeInit+0x184>)
 8012a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a40:	4a0a      	ldr	r2, [pc, #40]	; (8012a6c <HAL_RCC_DeInit+0x184>)
 8012a42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8012a46:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8012a48:	4b0b      	ldr	r3, [pc, #44]	; (8012a78 <HAL_RCC_DeInit+0x190>)
 8012a4a:	4a0c      	ldr	r2, [pc, #48]	; (8012a7c <HAL_RCC_DeInit+0x194>)
 8012a4c:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8012a4e:	4b0c      	ldr	r3, [pc, #48]	; (8012a80 <HAL_RCC_DeInit+0x198>)
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	4618      	mov	r0, r3
 8012a54:	f7f3 fecd 	bl	80067f2 <HAL_InitTick>
 8012a58:	4603      	mov	r3, r0
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d001      	beq.n	8012a62 <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 8012a5e:	2301      	movs	r3, #1
 8012a60:	e000      	b.n	8012a64 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 8012a62:	2300      	movs	r3, #0
  }
}
 8012a64:	4618      	mov	r0, r3
 8012a66:	3708      	adds	r7, #8
 8012a68:	46bd      	mov	sp, r7
 8012a6a:	bd80      	pop	{r7, pc}
 8012a6c:	40023800 	.word	0x40023800
 8012a70:	04003010 	.word	0x04003010
 8012a74:	20003000 	.word	0x20003000
 8012a78:	20000058 	.word	0x20000058
 8012a7c:	00f42400 	.word	0x00f42400
 8012a80:	2000005c 	.word	0x2000005c

08012a84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8012a84:	b580      	push	{r7, lr}
 8012a86:	b082      	sub	sp, #8
 8012a88:	af00      	add	r7, sp, #0
 8012a8a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d101      	bne.n	8012a96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8012a92:	2301      	movs	r3, #1
 8012a94:	e07b      	b.n	8012b8e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d108      	bne.n	8012ab0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	685b      	ldr	r3, [r3, #4]
 8012aa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012aa6:	d009      	beq.n	8012abc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	2200      	movs	r2, #0
 8012aac:	61da      	str	r2, [r3, #28]
 8012aae:	e005      	b.n	8012abc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	2200      	movs	r2, #0
 8012ab4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	2200      	movs	r2, #0
 8012aba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	2200      	movs	r2, #0
 8012ac0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012ac8:	b2db      	uxtb	r3, r3
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d106      	bne.n	8012adc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	2200      	movs	r2, #0
 8012ad2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8012ad6:	6878      	ldr	r0, [r7, #4]
 8012ad8:	f7f2 ffb2 	bl	8005a40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	2202      	movs	r2, #2
 8012ae0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	681a      	ldr	r2, [r3, #0]
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012af2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	685b      	ldr	r3, [r3, #4]
 8012af8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	689b      	ldr	r3, [r3, #8]
 8012b00:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8012b04:	431a      	orrs	r2, r3
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	68db      	ldr	r3, [r3, #12]
 8012b0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012b0e:	431a      	orrs	r2, r3
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	691b      	ldr	r3, [r3, #16]
 8012b14:	f003 0302 	and.w	r3, r3, #2
 8012b18:	431a      	orrs	r2, r3
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	695b      	ldr	r3, [r3, #20]
 8012b1e:	f003 0301 	and.w	r3, r3, #1
 8012b22:	431a      	orrs	r2, r3
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	699b      	ldr	r3, [r3, #24]
 8012b28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012b2c:	431a      	orrs	r2, r3
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	69db      	ldr	r3, [r3, #28]
 8012b32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012b36:	431a      	orrs	r2, r3
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	6a1b      	ldr	r3, [r3, #32]
 8012b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012b40:	ea42 0103 	orr.w	r1, r2, r3
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b48:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	430a      	orrs	r2, r1
 8012b52:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	699b      	ldr	r3, [r3, #24]
 8012b58:	0c1b      	lsrs	r3, r3, #16
 8012b5a:	f003 0104 	and.w	r1, r3, #4
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b62:	f003 0210 	and.w	r2, r3, #16
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	430a      	orrs	r2, r1
 8012b6c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	69da      	ldr	r2, [r3, #28]
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012b7c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	2200      	movs	r2, #0
 8012b82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	2201      	movs	r2, #1
 8012b88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8012b8c:	2300      	movs	r3, #0
}
 8012b8e:	4618      	mov	r0, r3
 8012b90:	3708      	adds	r7, #8
 8012b92:	46bd      	mov	sp, r7
 8012b94:	bd80      	pop	{r7, pc}

08012b96 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8012b96:	b580      	push	{r7, lr}
 8012b98:	b082      	sub	sp, #8
 8012b9a:	af00      	add	r7, sp, #0
 8012b9c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d101      	bne.n	8012ba8 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8012ba4:	2301      	movs	r3, #1
 8012ba6:	e01a      	b.n	8012bde <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	2202      	movs	r2, #2
 8012bac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	681a      	ldr	r2, [r3, #0]
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012bbe:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8012bc0:	6878      	ldr	r0, [r7, #4]
 8012bc2:	f7f3 f875 	bl	8005cb0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	2200      	movs	r2, #0
 8012bca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	2200      	movs	r2, #0
 8012bd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	2200      	movs	r2, #0
 8012bd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8012bdc:	2300      	movs	r3, #0
}
 8012bde:	4618      	mov	r0, r3
 8012be0:	3708      	adds	r7, #8
 8012be2:	46bd      	mov	sp, r7
 8012be4:	bd80      	pop	{r7, pc}

08012be6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012be6:	b580      	push	{r7, lr}
 8012be8:	b088      	sub	sp, #32
 8012bea:	af00      	add	r7, sp, #0
 8012bec:	60f8      	str	r0, [r7, #12]
 8012bee:	60b9      	str	r1, [r7, #8]
 8012bf0:	603b      	str	r3, [r7, #0]
 8012bf2:	4613      	mov	r3, r2
 8012bf4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8012bf6:	2300      	movs	r3, #0
 8012bf8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012c00:	2b01      	cmp	r3, #1
 8012c02:	d101      	bne.n	8012c08 <HAL_SPI_Transmit+0x22>
 8012c04:	2302      	movs	r3, #2
 8012c06:	e126      	b.n	8012e56 <HAL_SPI_Transmit+0x270>
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	2201      	movs	r2, #1
 8012c0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8012c10:	f7f3 fe34 	bl	800687c <HAL_GetTick>
 8012c14:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8012c16:	88fb      	ldrh	r3, [r7, #6]
 8012c18:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8012c1a:	68fb      	ldr	r3, [r7, #12]
 8012c1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012c20:	b2db      	uxtb	r3, r3
 8012c22:	2b01      	cmp	r3, #1
 8012c24:	d002      	beq.n	8012c2c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8012c26:	2302      	movs	r3, #2
 8012c28:	77fb      	strb	r3, [r7, #31]
    goto error;
 8012c2a:	e10b      	b.n	8012e44 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8012c2c:	68bb      	ldr	r3, [r7, #8]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d002      	beq.n	8012c38 <HAL_SPI_Transmit+0x52>
 8012c32:	88fb      	ldrh	r3, [r7, #6]
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d102      	bne.n	8012c3e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8012c38:	2301      	movs	r3, #1
 8012c3a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8012c3c:	e102      	b.n	8012e44 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8012c3e:	68fb      	ldr	r3, [r7, #12]
 8012c40:	2203      	movs	r2, #3
 8012c42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	2200      	movs	r2, #0
 8012c4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	68ba      	ldr	r2, [r7, #8]
 8012c50:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	88fa      	ldrh	r2, [r7, #6]
 8012c56:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	88fa      	ldrh	r2, [r7, #6]
 8012c5c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	2200      	movs	r2, #0
 8012c62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	2200      	movs	r2, #0
 8012c68:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	2200      	movs	r2, #0
 8012c6e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	2200      	movs	r2, #0
 8012c74:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8012c76:	68fb      	ldr	r3, [r7, #12]
 8012c78:	2200      	movs	r2, #0
 8012c7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	689b      	ldr	r3, [r3, #8]
 8012c80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012c84:	d10f      	bne.n	8012ca6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8012c86:	68fb      	ldr	r3, [r7, #12]
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	681a      	ldr	r2, [r3, #0]
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012c94:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8012c96:	68fb      	ldr	r3, [r7, #12]
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	681a      	ldr	r2, [r3, #0]
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012ca4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012cb0:	2b40      	cmp	r3, #64	; 0x40
 8012cb2:	d007      	beq.n	8012cc4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	681b      	ldr	r3, [r3, #0]
 8012cb8:	681a      	ldr	r2, [r3, #0]
 8012cba:	68fb      	ldr	r3, [r7, #12]
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012cc2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8012cc4:	68fb      	ldr	r3, [r7, #12]
 8012cc6:	68db      	ldr	r3, [r3, #12]
 8012cc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012ccc:	d14b      	bne.n	8012d66 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	685b      	ldr	r3, [r3, #4]
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d002      	beq.n	8012cdc <HAL_SPI_Transmit+0xf6>
 8012cd6:	8afb      	ldrh	r3, [r7, #22]
 8012cd8:	2b01      	cmp	r3, #1
 8012cda:	d13e      	bne.n	8012d5a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ce0:	881a      	ldrh	r2, [r3, #0]
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cec:	1c9a      	adds	r2, r3, #2
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012cf6:	b29b      	uxth	r3, r3
 8012cf8:	3b01      	subs	r3, #1
 8012cfa:	b29a      	uxth	r2, r3
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8012d00:	e02b      	b.n	8012d5a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8012d02:	68fb      	ldr	r3, [r7, #12]
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	689b      	ldr	r3, [r3, #8]
 8012d08:	f003 0302 	and.w	r3, r3, #2
 8012d0c:	2b02      	cmp	r3, #2
 8012d0e:	d112      	bne.n	8012d36 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d14:	881a      	ldrh	r2, [r3, #0]
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d20:	1c9a      	adds	r2, r3, #2
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012d2a:	b29b      	uxth	r3, r3
 8012d2c:	3b01      	subs	r3, #1
 8012d2e:	b29a      	uxth	r2, r3
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	86da      	strh	r2, [r3, #54]	; 0x36
 8012d34:	e011      	b.n	8012d5a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012d36:	f7f3 fda1 	bl	800687c <HAL_GetTick>
 8012d3a:	4602      	mov	r2, r0
 8012d3c:	69bb      	ldr	r3, [r7, #24]
 8012d3e:	1ad3      	subs	r3, r2, r3
 8012d40:	683a      	ldr	r2, [r7, #0]
 8012d42:	429a      	cmp	r2, r3
 8012d44:	d803      	bhi.n	8012d4e <HAL_SPI_Transmit+0x168>
 8012d46:	683b      	ldr	r3, [r7, #0]
 8012d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d4c:	d102      	bne.n	8012d54 <HAL_SPI_Transmit+0x16e>
 8012d4e:	683b      	ldr	r3, [r7, #0]
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d102      	bne.n	8012d5a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8012d54:	2303      	movs	r3, #3
 8012d56:	77fb      	strb	r3, [r7, #31]
          goto error;
 8012d58:	e074      	b.n	8012e44 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012d5e:	b29b      	uxth	r3, r3
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d1ce      	bne.n	8012d02 <HAL_SPI_Transmit+0x11c>
 8012d64:	e04c      	b.n	8012e00 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012d66:	68fb      	ldr	r3, [r7, #12]
 8012d68:	685b      	ldr	r3, [r3, #4]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d002      	beq.n	8012d74 <HAL_SPI_Transmit+0x18e>
 8012d6e:	8afb      	ldrh	r3, [r7, #22]
 8012d70:	2b01      	cmp	r3, #1
 8012d72:	d140      	bne.n	8012df6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8012d74:	68fb      	ldr	r3, [r7, #12]
 8012d76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	330c      	adds	r3, #12
 8012d7e:	7812      	ldrb	r2, [r2, #0]
 8012d80:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d86:	1c5a      	adds	r2, r3, #1
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012d90:	b29b      	uxth	r3, r3
 8012d92:	3b01      	subs	r3, #1
 8012d94:	b29a      	uxth	r2, r3
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8012d9a:	e02c      	b.n	8012df6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	681b      	ldr	r3, [r3, #0]
 8012da0:	689b      	ldr	r3, [r3, #8]
 8012da2:	f003 0302 	and.w	r3, r3, #2
 8012da6:	2b02      	cmp	r3, #2
 8012da8:	d113      	bne.n	8012dd2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	330c      	adds	r3, #12
 8012db4:	7812      	ldrb	r2, [r2, #0]
 8012db6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012dbc:	1c5a      	adds	r2, r3, #1
 8012dbe:	68fb      	ldr	r3, [r7, #12]
 8012dc0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012dc6:	b29b      	uxth	r3, r3
 8012dc8:	3b01      	subs	r3, #1
 8012dca:	b29a      	uxth	r2, r3
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	86da      	strh	r2, [r3, #54]	; 0x36
 8012dd0:	e011      	b.n	8012df6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012dd2:	f7f3 fd53 	bl	800687c <HAL_GetTick>
 8012dd6:	4602      	mov	r2, r0
 8012dd8:	69bb      	ldr	r3, [r7, #24]
 8012dda:	1ad3      	subs	r3, r2, r3
 8012ddc:	683a      	ldr	r2, [r7, #0]
 8012dde:	429a      	cmp	r2, r3
 8012de0:	d803      	bhi.n	8012dea <HAL_SPI_Transmit+0x204>
 8012de2:	683b      	ldr	r3, [r7, #0]
 8012de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012de8:	d102      	bne.n	8012df0 <HAL_SPI_Transmit+0x20a>
 8012dea:	683b      	ldr	r3, [r7, #0]
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d102      	bne.n	8012df6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8012df0:	2303      	movs	r3, #3
 8012df2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8012df4:	e026      	b.n	8012e44 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012dfa:	b29b      	uxth	r3, r3
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d1cd      	bne.n	8012d9c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8012e00:	69ba      	ldr	r2, [r7, #24]
 8012e02:	6839      	ldr	r1, [r7, #0]
 8012e04:	68f8      	ldr	r0, [r7, #12]
 8012e06:	f001 ff3e 	bl	8014c86 <SPI_EndRxTxTransaction>
 8012e0a:	4603      	mov	r3, r0
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d002      	beq.n	8012e16 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	2220      	movs	r2, #32
 8012e14:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	689b      	ldr	r3, [r3, #8]
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d10a      	bne.n	8012e34 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012e1e:	2300      	movs	r3, #0
 8012e20:	613b      	str	r3, [r7, #16]
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	68db      	ldr	r3, [r3, #12]
 8012e28:	613b      	str	r3, [r7, #16]
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	689b      	ldr	r3, [r3, #8]
 8012e30:	613b      	str	r3, [r7, #16]
 8012e32:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d002      	beq.n	8012e42 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8012e3c:	2301      	movs	r3, #1
 8012e3e:	77fb      	strb	r3, [r7, #31]
 8012e40:	e000      	b.n	8012e44 <HAL_SPI_Transmit+0x25e>
  }

error:
 8012e42:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	2201      	movs	r2, #1
 8012e48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	2200      	movs	r2, #0
 8012e50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8012e54:	7ffb      	ldrb	r3, [r7, #31]
}
 8012e56:	4618      	mov	r0, r3
 8012e58:	3720      	adds	r7, #32
 8012e5a:	46bd      	mov	sp, r7
 8012e5c:	bd80      	pop	{r7, pc}

08012e5e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012e5e:	b580      	push	{r7, lr}
 8012e60:	b088      	sub	sp, #32
 8012e62:	af02      	add	r7, sp, #8
 8012e64:	60f8      	str	r0, [r7, #12]
 8012e66:	60b9      	str	r1, [r7, #8]
 8012e68:	603b      	str	r3, [r7, #0]
 8012e6a:	4613      	mov	r3, r2
 8012e6c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8012e6e:	2300      	movs	r3, #0
 8012e70:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	685b      	ldr	r3, [r3, #4]
 8012e76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012e7a:	d112      	bne.n	8012ea2 <HAL_SPI_Receive+0x44>
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	689b      	ldr	r3, [r3, #8]
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d10e      	bne.n	8012ea2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	2204      	movs	r2, #4
 8012e88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8012e8c:	88fa      	ldrh	r2, [r7, #6]
 8012e8e:	683b      	ldr	r3, [r7, #0]
 8012e90:	9300      	str	r3, [sp, #0]
 8012e92:	4613      	mov	r3, r2
 8012e94:	68ba      	ldr	r2, [r7, #8]
 8012e96:	68b9      	ldr	r1, [r7, #8]
 8012e98:	68f8      	ldr	r0, [r7, #12]
 8012e9a:	f000 f8f1 	bl	8013080 <HAL_SPI_TransmitReceive>
 8012e9e:	4603      	mov	r3, r0
 8012ea0:	e0ea      	b.n	8013078 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8012ea2:	68fb      	ldr	r3, [r7, #12]
 8012ea4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012ea8:	2b01      	cmp	r3, #1
 8012eaa:	d101      	bne.n	8012eb0 <HAL_SPI_Receive+0x52>
 8012eac:	2302      	movs	r3, #2
 8012eae:	e0e3      	b.n	8013078 <HAL_SPI_Receive+0x21a>
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	2201      	movs	r2, #1
 8012eb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8012eb8:	f7f3 fce0 	bl	800687c <HAL_GetTick>
 8012ebc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012ec4:	b2db      	uxtb	r3, r3
 8012ec6:	2b01      	cmp	r3, #1
 8012ec8:	d002      	beq.n	8012ed0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8012eca:	2302      	movs	r3, #2
 8012ecc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8012ece:	e0ca      	b.n	8013066 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8012ed0:	68bb      	ldr	r3, [r7, #8]
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d002      	beq.n	8012edc <HAL_SPI_Receive+0x7e>
 8012ed6:	88fb      	ldrh	r3, [r7, #6]
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d102      	bne.n	8012ee2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8012edc:	2301      	movs	r3, #1
 8012ede:	75fb      	strb	r3, [r7, #23]
    goto error;
 8012ee0:	e0c1      	b.n	8013066 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8012ee2:	68fb      	ldr	r3, [r7, #12]
 8012ee4:	2204      	movs	r2, #4
 8012ee6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012eea:	68fb      	ldr	r3, [r7, #12]
 8012eec:	2200      	movs	r2, #0
 8012eee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	68ba      	ldr	r2, [r7, #8]
 8012ef4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	88fa      	ldrh	r2, [r7, #6]
 8012efa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	88fa      	ldrh	r2, [r7, #6]
 8012f00:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	2200      	movs	r2, #0
 8012f06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	2200      	movs	r2, #0
 8012f0c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	2200      	movs	r2, #0
 8012f12:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	2200      	movs	r2, #0
 8012f18:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	2200      	movs	r2, #0
 8012f1e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	689b      	ldr	r3, [r3, #8]
 8012f24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012f28:	d10f      	bne.n	8012f4a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	681a      	ldr	r2, [r3, #0]
 8012f30:	68fb      	ldr	r3, [r7, #12]
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012f38:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	681a      	ldr	r2, [r3, #0]
 8012f40:	68fb      	ldr	r3, [r7, #12]
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8012f48:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012f54:	2b40      	cmp	r3, #64	; 0x40
 8012f56:	d007      	beq.n	8012f68 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	681a      	ldr	r2, [r3, #0]
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012f66:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	68db      	ldr	r3, [r3, #12]
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d162      	bne.n	8013036 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8012f70:	e02e      	b.n	8012fd0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	689b      	ldr	r3, [r3, #8]
 8012f78:	f003 0301 	and.w	r3, r3, #1
 8012f7c:	2b01      	cmp	r3, #1
 8012f7e:	d115      	bne.n	8012fac <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	681b      	ldr	r3, [r3, #0]
 8012f84:	f103 020c 	add.w	r2, r3, #12
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f8c:	7812      	ldrb	r2, [r2, #0]
 8012f8e:	b2d2      	uxtb	r2, r2
 8012f90:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f96:	1c5a      	adds	r2, r3, #1
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012fa0:	b29b      	uxth	r3, r3
 8012fa2:	3b01      	subs	r3, #1
 8012fa4:	b29a      	uxth	r2, r3
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8012faa:	e011      	b.n	8012fd0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012fac:	f7f3 fc66 	bl	800687c <HAL_GetTick>
 8012fb0:	4602      	mov	r2, r0
 8012fb2:	693b      	ldr	r3, [r7, #16]
 8012fb4:	1ad3      	subs	r3, r2, r3
 8012fb6:	683a      	ldr	r2, [r7, #0]
 8012fb8:	429a      	cmp	r2, r3
 8012fba:	d803      	bhi.n	8012fc4 <HAL_SPI_Receive+0x166>
 8012fbc:	683b      	ldr	r3, [r7, #0]
 8012fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fc2:	d102      	bne.n	8012fca <HAL_SPI_Receive+0x16c>
 8012fc4:	683b      	ldr	r3, [r7, #0]
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d102      	bne.n	8012fd0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8012fca:	2303      	movs	r3, #3
 8012fcc:	75fb      	strb	r3, [r7, #23]
          goto error;
 8012fce:	e04a      	b.n	8013066 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8012fd0:	68fb      	ldr	r3, [r7, #12]
 8012fd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012fd4:	b29b      	uxth	r3, r3
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d1cb      	bne.n	8012f72 <HAL_SPI_Receive+0x114>
 8012fda:	e031      	b.n	8013040 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	689b      	ldr	r3, [r3, #8]
 8012fe2:	f003 0301 	and.w	r3, r3, #1
 8012fe6:	2b01      	cmp	r3, #1
 8012fe8:	d113      	bne.n	8013012 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	681b      	ldr	r3, [r3, #0]
 8012fee:	68da      	ldr	r2, [r3, #12]
 8012ff0:	68fb      	ldr	r3, [r7, #12]
 8012ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ff4:	b292      	uxth	r2, r2
 8012ff6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ffc:	1c9a      	adds	r2, r3, #2
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013006:	b29b      	uxth	r3, r3
 8013008:	3b01      	subs	r3, #1
 801300a:	b29a      	uxth	r2, r3
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8013010:	e011      	b.n	8013036 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013012:	f7f3 fc33 	bl	800687c <HAL_GetTick>
 8013016:	4602      	mov	r2, r0
 8013018:	693b      	ldr	r3, [r7, #16]
 801301a:	1ad3      	subs	r3, r2, r3
 801301c:	683a      	ldr	r2, [r7, #0]
 801301e:	429a      	cmp	r2, r3
 8013020:	d803      	bhi.n	801302a <HAL_SPI_Receive+0x1cc>
 8013022:	683b      	ldr	r3, [r7, #0]
 8013024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013028:	d102      	bne.n	8013030 <HAL_SPI_Receive+0x1d2>
 801302a:	683b      	ldr	r3, [r7, #0]
 801302c:	2b00      	cmp	r3, #0
 801302e:	d102      	bne.n	8013036 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8013030:	2303      	movs	r3, #3
 8013032:	75fb      	strb	r3, [r7, #23]
          goto error;
 8013034:	e017      	b.n	8013066 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8013036:	68fb      	ldr	r3, [r7, #12]
 8013038:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801303a:	b29b      	uxth	r3, r3
 801303c:	2b00      	cmp	r3, #0
 801303e:	d1cd      	bne.n	8012fdc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013040:	693a      	ldr	r2, [r7, #16]
 8013042:	6839      	ldr	r1, [r7, #0]
 8013044:	68f8      	ldr	r0, [r7, #12]
 8013046:	f001 fdb9 	bl	8014bbc <SPI_EndRxTransaction>
 801304a:	4603      	mov	r3, r0
 801304c:	2b00      	cmp	r3, #0
 801304e:	d002      	beq.n	8013056 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	2220      	movs	r2, #32
 8013054:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801305a:	2b00      	cmp	r3, #0
 801305c:	d002      	beq.n	8013064 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 801305e:	2301      	movs	r3, #1
 8013060:	75fb      	strb	r3, [r7, #23]
 8013062:	e000      	b.n	8013066 <HAL_SPI_Receive+0x208>
  }

error :
 8013064:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	2201      	movs	r2, #1
 801306a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	2200      	movs	r2, #0
 8013072:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013076:	7dfb      	ldrb	r3, [r7, #23]
}
 8013078:	4618      	mov	r0, r3
 801307a:	3718      	adds	r7, #24
 801307c:	46bd      	mov	sp, r7
 801307e:	bd80      	pop	{r7, pc}

08013080 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8013080:	b580      	push	{r7, lr}
 8013082:	b08c      	sub	sp, #48	; 0x30
 8013084:	af00      	add	r7, sp, #0
 8013086:	60f8      	str	r0, [r7, #12]
 8013088:	60b9      	str	r1, [r7, #8]
 801308a:	607a      	str	r2, [r7, #4]
 801308c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801308e:	2301      	movs	r3, #1
 8013090:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8013092:	2300      	movs	r3, #0
 8013094:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013098:	68fb      	ldr	r3, [r7, #12]
 801309a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801309e:	2b01      	cmp	r3, #1
 80130a0:	d101      	bne.n	80130a6 <HAL_SPI_TransmitReceive+0x26>
 80130a2:	2302      	movs	r3, #2
 80130a4:	e18a      	b.n	80133bc <HAL_SPI_TransmitReceive+0x33c>
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	2201      	movs	r2, #1
 80130aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80130ae:	f7f3 fbe5 	bl	800687c <HAL_GetTick>
 80130b2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80130ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80130be:	68fb      	ldr	r3, [r7, #12]
 80130c0:	685b      	ldr	r3, [r3, #4]
 80130c2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80130c4:	887b      	ldrh	r3, [r7, #2]
 80130c6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80130c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80130cc:	2b01      	cmp	r3, #1
 80130ce:	d00f      	beq.n	80130f0 <HAL_SPI_TransmitReceive+0x70>
 80130d0:	69fb      	ldr	r3, [r7, #28]
 80130d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80130d6:	d107      	bne.n	80130e8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	689b      	ldr	r3, [r3, #8]
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d103      	bne.n	80130e8 <HAL_SPI_TransmitReceive+0x68>
 80130e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80130e4:	2b04      	cmp	r3, #4
 80130e6:	d003      	beq.n	80130f0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80130e8:	2302      	movs	r3, #2
 80130ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80130ee:	e15b      	b.n	80133a8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80130f0:	68bb      	ldr	r3, [r7, #8]
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d005      	beq.n	8013102 <HAL_SPI_TransmitReceive+0x82>
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d002      	beq.n	8013102 <HAL_SPI_TransmitReceive+0x82>
 80130fc:	887b      	ldrh	r3, [r7, #2]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d103      	bne.n	801310a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8013102:	2301      	movs	r3, #1
 8013104:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8013108:	e14e      	b.n	80133a8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013110:	b2db      	uxtb	r3, r3
 8013112:	2b04      	cmp	r3, #4
 8013114:	d003      	beq.n	801311e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	2205      	movs	r2, #5
 801311a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801311e:	68fb      	ldr	r3, [r7, #12]
 8013120:	2200      	movs	r2, #0
 8013122:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8013124:	68fb      	ldr	r3, [r7, #12]
 8013126:	687a      	ldr	r2, [r7, #4]
 8013128:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	887a      	ldrh	r2, [r7, #2]
 801312e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	887a      	ldrh	r2, [r7, #2]
 8013134:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	68ba      	ldr	r2, [r7, #8]
 801313a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	887a      	ldrh	r2, [r7, #2]
 8013140:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	887a      	ldrh	r2, [r7, #2]
 8013146:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	2200      	movs	r2, #0
 801314c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	2200      	movs	r2, #0
 8013152:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	681b      	ldr	r3, [r3, #0]
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801315e:	2b40      	cmp	r3, #64	; 0x40
 8013160:	d007      	beq.n	8013172 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013162:	68fb      	ldr	r3, [r7, #12]
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	681a      	ldr	r2, [r3, #0]
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013170:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8013172:	68fb      	ldr	r3, [r7, #12]
 8013174:	68db      	ldr	r3, [r3, #12]
 8013176:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801317a:	d178      	bne.n	801326e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	685b      	ldr	r3, [r3, #4]
 8013180:	2b00      	cmp	r3, #0
 8013182:	d002      	beq.n	801318a <HAL_SPI_TransmitReceive+0x10a>
 8013184:	8b7b      	ldrh	r3, [r7, #26]
 8013186:	2b01      	cmp	r3, #1
 8013188:	d166      	bne.n	8013258 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801318e:	881a      	ldrh	r2, [r3, #0]
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801319a:	1c9a      	adds	r2, r3, #2
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80131a0:	68fb      	ldr	r3, [r7, #12]
 80131a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80131a4:	b29b      	uxth	r3, r3
 80131a6:	3b01      	subs	r3, #1
 80131a8:	b29a      	uxth	r2, r3
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80131ae:	e053      	b.n	8013258 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80131b0:	68fb      	ldr	r3, [r7, #12]
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	689b      	ldr	r3, [r3, #8]
 80131b6:	f003 0302 	and.w	r3, r3, #2
 80131ba:	2b02      	cmp	r3, #2
 80131bc:	d11b      	bne.n	80131f6 <HAL_SPI_TransmitReceive+0x176>
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80131c2:	b29b      	uxth	r3, r3
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d016      	beq.n	80131f6 <HAL_SPI_TransmitReceive+0x176>
 80131c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131ca:	2b01      	cmp	r3, #1
 80131cc:	d113      	bne.n	80131f6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80131ce:	68fb      	ldr	r3, [r7, #12]
 80131d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131d2:	881a      	ldrh	r2, [r3, #0]
 80131d4:	68fb      	ldr	r3, [r7, #12]
 80131d6:	681b      	ldr	r3, [r3, #0]
 80131d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131de:	1c9a      	adds	r2, r3, #2
 80131e0:	68fb      	ldr	r3, [r7, #12]
 80131e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80131e4:	68fb      	ldr	r3, [r7, #12]
 80131e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80131e8:	b29b      	uxth	r3, r3
 80131ea:	3b01      	subs	r3, #1
 80131ec:	b29a      	uxth	r2, r3
 80131ee:	68fb      	ldr	r3, [r7, #12]
 80131f0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80131f2:	2300      	movs	r3, #0
 80131f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	689b      	ldr	r3, [r3, #8]
 80131fc:	f003 0301 	and.w	r3, r3, #1
 8013200:	2b01      	cmp	r3, #1
 8013202:	d119      	bne.n	8013238 <HAL_SPI_TransmitReceive+0x1b8>
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013208:	b29b      	uxth	r3, r3
 801320a:	2b00      	cmp	r3, #0
 801320c:	d014      	beq.n	8013238 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801320e:	68fb      	ldr	r3, [r7, #12]
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	68da      	ldr	r2, [r3, #12]
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013218:	b292      	uxth	r2, r2
 801321a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801321c:	68fb      	ldr	r3, [r7, #12]
 801321e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013220:	1c9a      	adds	r2, r3, #2
 8013222:	68fb      	ldr	r3, [r7, #12]
 8013224:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801322a:	b29b      	uxth	r3, r3
 801322c:	3b01      	subs	r3, #1
 801322e:	b29a      	uxth	r2, r3
 8013230:	68fb      	ldr	r3, [r7, #12]
 8013232:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8013234:	2301      	movs	r3, #1
 8013236:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8013238:	f7f3 fb20 	bl	800687c <HAL_GetTick>
 801323c:	4602      	mov	r2, r0
 801323e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013240:	1ad3      	subs	r3, r2, r3
 8013242:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013244:	429a      	cmp	r2, r3
 8013246:	d807      	bhi.n	8013258 <HAL_SPI_TransmitReceive+0x1d8>
 8013248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801324a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801324e:	d003      	beq.n	8013258 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8013250:	2303      	movs	r3, #3
 8013252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8013256:	e0a7      	b.n	80133a8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013258:	68fb      	ldr	r3, [r7, #12]
 801325a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801325c:	b29b      	uxth	r3, r3
 801325e:	2b00      	cmp	r3, #0
 8013260:	d1a6      	bne.n	80131b0 <HAL_SPI_TransmitReceive+0x130>
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013266:	b29b      	uxth	r3, r3
 8013268:	2b00      	cmp	r3, #0
 801326a:	d1a1      	bne.n	80131b0 <HAL_SPI_TransmitReceive+0x130>
 801326c:	e07c      	b.n	8013368 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	685b      	ldr	r3, [r3, #4]
 8013272:	2b00      	cmp	r3, #0
 8013274:	d002      	beq.n	801327c <HAL_SPI_TransmitReceive+0x1fc>
 8013276:	8b7b      	ldrh	r3, [r7, #26]
 8013278:	2b01      	cmp	r3, #1
 801327a:	d16b      	bne.n	8013354 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013280:	68fb      	ldr	r3, [r7, #12]
 8013282:	681b      	ldr	r3, [r3, #0]
 8013284:	330c      	adds	r3, #12
 8013286:	7812      	ldrb	r2, [r2, #0]
 8013288:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801328a:	68fb      	ldr	r3, [r7, #12]
 801328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801328e:	1c5a      	adds	r2, r3, #1
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013298:	b29b      	uxth	r3, r3
 801329a:	3b01      	subs	r3, #1
 801329c:	b29a      	uxth	r2, r3
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80132a2:	e057      	b.n	8013354 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	681b      	ldr	r3, [r3, #0]
 80132a8:	689b      	ldr	r3, [r3, #8]
 80132aa:	f003 0302 	and.w	r3, r3, #2
 80132ae:	2b02      	cmp	r3, #2
 80132b0:	d11c      	bne.n	80132ec <HAL_SPI_TransmitReceive+0x26c>
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80132b6:	b29b      	uxth	r3, r3
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d017      	beq.n	80132ec <HAL_SPI_TransmitReceive+0x26c>
 80132bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132be:	2b01      	cmp	r3, #1
 80132c0:	d114      	bne.n	80132ec <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80132c6:	68fb      	ldr	r3, [r7, #12]
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	330c      	adds	r3, #12
 80132cc:	7812      	ldrb	r2, [r2, #0]
 80132ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132d4:	1c5a      	adds	r2, r3, #1
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80132da:	68fb      	ldr	r3, [r7, #12]
 80132dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80132de:	b29b      	uxth	r3, r3
 80132e0:	3b01      	subs	r3, #1
 80132e2:	b29a      	uxth	r2, r3
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80132e8:	2300      	movs	r3, #0
 80132ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	689b      	ldr	r3, [r3, #8]
 80132f2:	f003 0301 	and.w	r3, r3, #1
 80132f6:	2b01      	cmp	r3, #1
 80132f8:	d119      	bne.n	801332e <HAL_SPI_TransmitReceive+0x2ae>
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80132fe:	b29b      	uxth	r3, r3
 8013300:	2b00      	cmp	r3, #0
 8013302:	d014      	beq.n	801332e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	68da      	ldr	r2, [r3, #12]
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801330e:	b2d2      	uxtb	r2, r2
 8013310:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013316:	1c5a      	adds	r2, r3, #1
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013320:	b29b      	uxth	r3, r3
 8013322:	3b01      	subs	r3, #1
 8013324:	b29a      	uxth	r2, r3
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801332a:	2301      	movs	r3, #1
 801332c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801332e:	f7f3 faa5 	bl	800687c <HAL_GetTick>
 8013332:	4602      	mov	r2, r0
 8013334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013336:	1ad3      	subs	r3, r2, r3
 8013338:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801333a:	429a      	cmp	r2, r3
 801333c:	d803      	bhi.n	8013346 <HAL_SPI_TransmitReceive+0x2c6>
 801333e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013344:	d102      	bne.n	801334c <HAL_SPI_TransmitReceive+0x2cc>
 8013346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013348:	2b00      	cmp	r3, #0
 801334a:	d103      	bne.n	8013354 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 801334c:	2303      	movs	r3, #3
 801334e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8013352:	e029      	b.n	80133a8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013358:	b29b      	uxth	r3, r3
 801335a:	2b00      	cmp	r3, #0
 801335c:	d1a2      	bne.n	80132a4 <HAL_SPI_TransmitReceive+0x224>
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013362:	b29b      	uxth	r3, r3
 8013364:	2b00      	cmp	r3, #0
 8013366:	d19d      	bne.n	80132a4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801336a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801336c:	68f8      	ldr	r0, [r7, #12]
 801336e:	f001 fc8a 	bl	8014c86 <SPI_EndRxTxTransaction>
 8013372:	4603      	mov	r3, r0
 8013374:	2b00      	cmp	r3, #0
 8013376:	d006      	beq.n	8013386 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8013378:	2301      	movs	r3, #1
 801337a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	2220      	movs	r2, #32
 8013382:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8013384:	e010      	b.n	80133a8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	689b      	ldr	r3, [r3, #8]
 801338a:	2b00      	cmp	r3, #0
 801338c:	d10b      	bne.n	80133a6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801338e:	2300      	movs	r3, #0
 8013390:	617b      	str	r3, [r7, #20]
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	681b      	ldr	r3, [r3, #0]
 8013396:	68db      	ldr	r3, [r3, #12]
 8013398:	617b      	str	r3, [r7, #20]
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	689b      	ldr	r3, [r3, #8]
 80133a0:	617b      	str	r3, [r7, #20]
 80133a2:	697b      	ldr	r3, [r7, #20]
 80133a4:	e000      	b.n	80133a8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80133a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	2201      	movs	r2, #1
 80133ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	2200      	movs	r2, #0
 80133b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80133b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80133bc:	4618      	mov	r0, r3
 80133be:	3730      	adds	r7, #48	; 0x30
 80133c0:	46bd      	mov	sp, r7
 80133c2:	bd80      	pop	{r7, pc}

080133c4 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80133c4:	b480      	push	{r7}
 80133c6:	b087      	sub	sp, #28
 80133c8:	af00      	add	r7, sp, #0
 80133ca:	60f8      	str	r0, [r7, #12]
 80133cc:	60b9      	str	r1, [r7, #8]
 80133ce:	4613      	mov	r3, r2
 80133d0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80133d2:	2300      	movs	r3, #0
 80133d4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80133dc:	2b01      	cmp	r3, #1
 80133de:	d101      	bne.n	80133e4 <HAL_SPI_Transmit_IT+0x20>
 80133e0:	2302      	movs	r3, #2
 80133e2:	e06f      	b.n	80134c4 <HAL_SPI_Transmit_IT+0x100>
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	2201      	movs	r2, #1
 80133e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 80133ec:	68bb      	ldr	r3, [r7, #8]
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d002      	beq.n	80133f8 <HAL_SPI_Transmit_IT+0x34>
 80133f2:	88fb      	ldrh	r3, [r7, #6]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d102      	bne.n	80133fe <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 80133f8:	2301      	movs	r3, #1
 80133fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80133fc:	e05d      	b.n	80134ba <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80133fe:	68fb      	ldr	r3, [r7, #12]
 8013400:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013404:	b2db      	uxtb	r3, r3
 8013406:	2b01      	cmp	r3, #1
 8013408:	d002      	beq.n	8013410 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 801340a:	2302      	movs	r3, #2
 801340c:	75fb      	strb	r3, [r7, #23]
    goto error;
 801340e:	e054      	b.n	80134ba <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8013410:	68fb      	ldr	r3, [r7, #12]
 8013412:	2203      	movs	r2, #3
 8013414:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013418:	68fb      	ldr	r3, [r7, #12]
 801341a:	2200      	movs	r2, #0
 801341c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	68ba      	ldr	r2, [r7, #8]
 8013422:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	88fa      	ldrh	r2, [r7, #6]
 8013428:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 801342a:	68fb      	ldr	r3, [r7, #12]
 801342c:	88fa      	ldrh	r2, [r7, #6]
 801342e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	2200      	movs	r2, #0
 8013434:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	2200      	movs	r2, #0
 801343a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	2200      	movs	r2, #0
 8013440:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	2200      	movs	r2, #0
 8013446:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	68db      	ldr	r3, [r3, #12]
 801344c:	2b00      	cmp	r3, #0
 801344e:	d003      	beq.n	8013458 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	4a1f      	ldr	r2, [pc, #124]	; (80134d0 <HAL_SPI_Transmit_IT+0x10c>)
 8013454:	645a      	str	r2, [r3, #68]	; 0x44
 8013456:	e002      	b.n	801345e <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	4a1e      	ldr	r2, [pc, #120]	; (80134d4 <HAL_SPI_Transmit_IT+0x110>)
 801345c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	689b      	ldr	r3, [r3, #8]
 8013462:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013466:	d10f      	bne.n	8013488 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8013468:	68fb      	ldr	r3, [r7, #12]
 801346a:	681b      	ldr	r3, [r3, #0]
 801346c:	681a      	ldr	r2, [r3, #0]
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013476:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	681a      	ldr	r2, [r3, #0]
 801347e:	68fb      	ldr	r3, [r7, #12]
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8013486:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	685a      	ldr	r2, [r3, #4]
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8013496:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013498:	68fb      	ldr	r3, [r7, #12]
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80134a2:	2b40      	cmp	r3, #64	; 0x40
 80134a4:	d008      	beq.n	80134b8 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80134a6:	68fb      	ldr	r3, [r7, #12]
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	681a      	ldr	r2, [r3, #0]
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80134b4:	601a      	str	r2, [r3, #0]
 80134b6:	e000      	b.n	80134ba <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 80134b8:	bf00      	nop
  __HAL_UNLOCK(hspi);
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	2200      	movs	r2, #0
 80134be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80134c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80134c4:	4618      	mov	r0, r3
 80134c6:	371c      	adds	r7, #28
 80134c8:	46bd      	mov	sp, r7
 80134ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ce:	4770      	bx	lr
 80134d0:	08014a69 	.word	0x08014a69
 80134d4:	08014a23 	.word	0x08014a23

080134d8 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80134d8:	b580      	push	{r7, lr}
 80134da:	b086      	sub	sp, #24
 80134dc:	af00      	add	r7, sp, #0
 80134de:	60f8      	str	r0, [r7, #12]
 80134e0:	60b9      	str	r1, [r7, #8]
 80134e2:	4613      	mov	r3, r2
 80134e4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80134e6:	2300      	movs	r3, #0
 80134e8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	689b      	ldr	r3, [r3, #8]
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d110      	bne.n	8013514 <HAL_SPI_Receive_IT+0x3c>
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	685b      	ldr	r3, [r3, #4]
 80134f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80134fa:	d10b      	bne.n	8013514 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	2204      	movs	r2, #4
 8013500:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8013504:	88fb      	ldrh	r3, [r7, #6]
 8013506:	68ba      	ldr	r2, [r7, #8]
 8013508:	68b9      	ldr	r1, [r7, #8]
 801350a:	68f8      	ldr	r0, [r7, #12]
 801350c:	f000 f882 	bl	8013614 <HAL_SPI_TransmitReceive_IT>
 8013510:	4603      	mov	r3, r0
 8013512:	e076      	b.n	8013602 <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801351a:	2b01      	cmp	r3, #1
 801351c:	d101      	bne.n	8013522 <HAL_SPI_Receive_IT+0x4a>
 801351e:	2302      	movs	r3, #2
 8013520:	e06f      	b.n	8013602 <HAL_SPI_Receive_IT+0x12a>
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	2201      	movs	r2, #1
 8013526:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013530:	b2db      	uxtb	r3, r3
 8013532:	2b01      	cmp	r3, #1
 8013534:	d002      	beq.n	801353c <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8013536:	2302      	movs	r3, #2
 8013538:	75fb      	strb	r3, [r7, #23]
    goto error;
 801353a:	e05d      	b.n	80135f8 <HAL_SPI_Receive_IT+0x120>
  }

  if ((pData == NULL) || (Size == 0U))
 801353c:	68bb      	ldr	r3, [r7, #8]
 801353e:	2b00      	cmp	r3, #0
 8013540:	d002      	beq.n	8013548 <HAL_SPI_Receive_IT+0x70>
 8013542:	88fb      	ldrh	r3, [r7, #6]
 8013544:	2b00      	cmp	r3, #0
 8013546:	d102      	bne.n	801354e <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8013548:	2301      	movs	r3, #1
 801354a:	75fb      	strb	r3, [r7, #23]
    goto error;
 801354c:	e054      	b.n	80135f8 <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	2204      	movs	r2, #4
 8013552:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	2200      	movs	r2, #0
 801355a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	68ba      	ldr	r2, [r7, #8]
 8013560:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	88fa      	ldrh	r2, [r7, #6]
 8013566:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8013568:	68fb      	ldr	r3, [r7, #12]
 801356a:	88fa      	ldrh	r2, [r7, #6]
 801356c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801356e:	68fb      	ldr	r3, [r7, #12]
 8013570:	2200      	movs	r2, #0
 8013572:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	2200      	movs	r2, #0
 8013578:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	2200      	movs	r2, #0
 801357e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 8013580:	68fb      	ldr	r3, [r7, #12]
 8013582:	2200      	movs	r2, #0
 8013584:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	68db      	ldr	r3, [r3, #12]
 801358a:	2b00      	cmp	r3, #0
 801358c:	d003      	beq.n	8013596 <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	4a1e      	ldr	r2, [pc, #120]	; (801360c <HAL_SPI_Receive_IT+0x134>)
 8013592:	641a      	str	r2, [r3, #64]	; 0x40
 8013594:	e002      	b.n	801359c <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	4a1d      	ldr	r2, [pc, #116]	; (8013610 <HAL_SPI_Receive_IT+0x138>)
 801359a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	689b      	ldr	r3, [r3, #8]
 80135a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80135a4:	d10f      	bne.n	80135c6 <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80135a6:	68fb      	ldr	r3, [r7, #12]
 80135a8:	681b      	ldr	r3, [r3, #0]
 80135aa:	681a      	ldr	r2, [r3, #0]
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80135b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80135b6:	68fb      	ldr	r3, [r7, #12]
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	681a      	ldr	r2, [r3, #0]
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80135c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	685a      	ldr	r2, [r3, #4]
 80135cc:	68fb      	ldr	r3, [r7, #12]
 80135ce:	681b      	ldr	r3, [r3, #0]
 80135d0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80135d4:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80135e0:	2b40      	cmp	r3, #64	; 0x40
 80135e2:	d008      	beq.n	80135f6 <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80135e4:	68fb      	ldr	r3, [r7, #12]
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	681a      	ldr	r2, [r3, #0]
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	681b      	ldr	r3, [r3, #0]
 80135ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80135f2:	601a      	str	r2, [r3, #0]
 80135f4:	e000      	b.n	80135f8 <HAL_SPI_Receive_IT+0x120>
  }

error :
 80135f6:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80135f8:	68fb      	ldr	r3, [r7, #12]
 80135fa:	2200      	movs	r2, #0
 80135fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013600:	7dfb      	ldrb	r3, [r7, #23]
}
 8013602:	4618      	mov	r0, r3
 8013604:	3718      	adds	r7, #24
 8013606:	46bd      	mov	sp, r7
 8013608:	bd80      	pop	{r7, pc}
 801360a:	bf00      	nop
 801360c:	080149dd 	.word	0x080149dd
 8013610:	08014993 	.word	0x08014993

08013614 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8013614:	b480      	push	{r7}
 8013616:	b087      	sub	sp, #28
 8013618:	af00      	add	r7, sp, #0
 801361a:	60f8      	str	r0, [r7, #12]
 801361c:	60b9      	str	r1, [r7, #8]
 801361e:	607a      	str	r2, [r7, #4]
 8013620:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8013622:	2300      	movs	r3, #0
 8013624:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8013626:	68fb      	ldr	r3, [r7, #12]
 8013628:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801362c:	2b01      	cmp	r3, #1
 801362e:	d101      	bne.n	8013634 <HAL_SPI_TransmitReceive_IT+0x20>
 8013630:	2302      	movs	r3, #2
 8013632:	e075      	b.n	8013720 <HAL_SPI_TransmitReceive_IT+0x10c>
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	2201      	movs	r2, #1
 8013638:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013642:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	685b      	ldr	r3, [r3, #4]
 8013648:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801364a:	7dbb      	ldrb	r3, [r7, #22]
 801364c:	2b01      	cmp	r3, #1
 801364e:	d00d      	beq.n	801366c <HAL_SPI_TransmitReceive_IT+0x58>
 8013650:	693b      	ldr	r3, [r7, #16]
 8013652:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013656:	d106      	bne.n	8013666 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8013658:	68fb      	ldr	r3, [r7, #12]
 801365a:	689b      	ldr	r3, [r3, #8]
 801365c:	2b00      	cmp	r3, #0
 801365e:	d102      	bne.n	8013666 <HAL_SPI_TransmitReceive_IT+0x52>
 8013660:	7dbb      	ldrb	r3, [r7, #22]
 8013662:	2b04      	cmp	r3, #4
 8013664:	d002      	beq.n	801366c <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8013666:	2302      	movs	r3, #2
 8013668:	75fb      	strb	r3, [r7, #23]
    goto error;
 801366a:	e054      	b.n	8013716 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801366c:	68bb      	ldr	r3, [r7, #8]
 801366e:	2b00      	cmp	r3, #0
 8013670:	d005      	beq.n	801367e <HAL_SPI_TransmitReceive_IT+0x6a>
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	2b00      	cmp	r3, #0
 8013676:	d002      	beq.n	801367e <HAL_SPI_TransmitReceive_IT+0x6a>
 8013678:	887b      	ldrh	r3, [r7, #2]
 801367a:	2b00      	cmp	r3, #0
 801367c:	d102      	bne.n	8013684 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 801367e:	2301      	movs	r3, #1
 8013680:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013682:	e048      	b.n	8013716 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801368a:	b2db      	uxtb	r3, r3
 801368c:	2b04      	cmp	r3, #4
 801368e:	d003      	beq.n	8013698 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	2205      	movs	r2, #5
 8013694:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	2200      	movs	r2, #0
 801369c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801369e:	68fb      	ldr	r3, [r7, #12]
 80136a0:	68ba      	ldr	r2, [r7, #8]
 80136a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	887a      	ldrh	r2, [r7, #2]
 80136a8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	887a      	ldrh	r2, [r7, #2]
 80136ae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	687a      	ldr	r2, [r7, #4]
 80136b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	887a      	ldrh	r2, [r7, #2]
 80136ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	887a      	ldrh	r2, [r7, #2]
 80136c0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	68db      	ldr	r3, [r3, #12]
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d006      	beq.n	80136d8 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80136ca:	68fb      	ldr	r3, [r7, #12]
 80136cc:	4a17      	ldr	r2, [pc, #92]	; (801372c <HAL_SPI_TransmitReceive_IT+0x118>)
 80136ce:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	4a17      	ldr	r2, [pc, #92]	; (8013730 <HAL_SPI_TransmitReceive_IT+0x11c>)
 80136d4:	645a      	str	r2, [r3, #68]	; 0x44
 80136d6:	e005      	b.n	80136e4 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	4a16      	ldr	r2, [pc, #88]	; (8013734 <HAL_SPI_TransmitReceive_IT+0x120>)
 80136dc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80136de:	68fb      	ldr	r3, [r7, #12]
 80136e0:	4a15      	ldr	r2, [pc, #84]	; (8013738 <HAL_SPI_TransmitReceive_IT+0x124>)
 80136e2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	681b      	ldr	r3, [r3, #0]
 80136e8:	685a      	ldr	r2, [r3, #4]
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80136f2:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80136f4:	68fb      	ldr	r3, [r7, #12]
 80136f6:	681b      	ldr	r3, [r3, #0]
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80136fe:	2b40      	cmp	r3, #64	; 0x40
 8013700:	d008      	beq.n	8013714 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	681b      	ldr	r3, [r3, #0]
 8013706:	681a      	ldr	r2, [r3, #0]
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	681b      	ldr	r3, [r3, #0]
 801370c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013710:	601a      	str	r2, [r3, #0]
 8013712:	e000      	b.n	8013716 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8013714:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	2200      	movs	r2, #0
 801371a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801371e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013720:	4618      	mov	r0, r3
 8013722:	371c      	adds	r7, #28
 8013724:	46bd      	mov	sp, r7
 8013726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801372a:	4770      	bx	lr
 801372c:	080148d5 	.word	0x080148d5
 8013730:	08014935 	.word	0x08014935
 8013734:	08014811 	.word	0x08014811
 8013738:	08014875 	.word	0x08014875

0801373c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 801373c:	b580      	push	{r7, lr}
 801373e:	b086      	sub	sp, #24
 8013740:	af00      	add	r7, sp, #0
 8013742:	60f8      	str	r0, [r7, #12]
 8013744:	60b9      	str	r1, [r7, #8]
 8013746:	4613      	mov	r3, r2
 8013748:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 801374a:	2300      	movs	r3, #0
 801374c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013754:	2b01      	cmp	r3, #1
 8013756:	d101      	bne.n	801375c <HAL_SPI_Transmit_DMA+0x20>
 8013758:	2302      	movs	r3, #2
 801375a:	e09b      	b.n	8013894 <HAL_SPI_Transmit_DMA+0x158>
 801375c:	68fb      	ldr	r3, [r7, #12]
 801375e:	2201      	movs	r2, #1
 8013760:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801376a:	b2db      	uxtb	r3, r3
 801376c:	2b01      	cmp	r3, #1
 801376e:	d002      	beq.n	8013776 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8013770:	2302      	movs	r3, #2
 8013772:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013774:	e089      	b.n	801388a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8013776:	68bb      	ldr	r3, [r7, #8]
 8013778:	2b00      	cmp	r3, #0
 801377a:	d002      	beq.n	8013782 <HAL_SPI_Transmit_DMA+0x46>
 801377c:	88fb      	ldrh	r3, [r7, #6]
 801377e:	2b00      	cmp	r3, #0
 8013780:	d102      	bne.n	8013788 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8013782:	2301      	movs	r3, #1
 8013784:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013786:	e080      	b.n	801388a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8013788:	68fb      	ldr	r3, [r7, #12]
 801378a:	2203      	movs	r2, #3
 801378c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013790:	68fb      	ldr	r3, [r7, #12]
 8013792:	2200      	movs	r2, #0
 8013794:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	68ba      	ldr	r2, [r7, #8]
 801379a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 801379c:	68fb      	ldr	r3, [r7, #12]
 801379e:	88fa      	ldrh	r2, [r7, #6]
 80137a0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	88fa      	ldrh	r2, [r7, #6]
 80137a6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	2200      	movs	r2, #0
 80137ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80137ae:	68fb      	ldr	r3, [r7, #12]
 80137b0:	2200      	movs	r2, #0
 80137b2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	2200      	movs	r2, #0
 80137b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	2200      	movs	r2, #0
 80137be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	2200      	movs	r2, #0
 80137c4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	689b      	ldr	r3, [r3, #8]
 80137ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80137ce:	d10f      	bne.n	80137f0 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	681b      	ldr	r3, [r3, #0]
 80137d4:	681a      	ldr	r2, [r3, #0]
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80137de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	681b      	ldr	r3, [r3, #0]
 80137e4:	681a      	ldr	r2, [r3, #0]
 80137e6:	68fb      	ldr	r3, [r7, #12]
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80137ee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80137f4:	4a29      	ldr	r2, [pc, #164]	; (801389c <HAL_SPI_Transmit_DMA+0x160>)
 80137f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80137f8:	68fb      	ldr	r3, [r7, #12]
 80137fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80137fc:	4a28      	ldr	r2, [pc, #160]	; (80138a0 <HAL_SPI_Transmit_DMA+0x164>)
 80137fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8013800:	68fb      	ldr	r3, [r7, #12]
 8013802:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013804:	4a27      	ldr	r2, [pc, #156]	; (80138a4 <HAL_SPI_Transmit_DMA+0x168>)
 8013806:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8013808:	68fb      	ldr	r3, [r7, #12]
 801380a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801380c:	2200      	movs	r2, #0
 801380e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8013810:	68fb      	ldr	r3, [r7, #12]
 8013812:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013818:	4619      	mov	r1, r3
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	330c      	adds	r3, #12
 8013820:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013826:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8013828:	f7f4 fa91 	bl	8007d4e <HAL_DMA_Start_IT>
 801382c:	4603      	mov	r3, r0
 801382e:	2b00      	cmp	r3, #0
 8013830:	d00c      	beq.n	801384c <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8013832:	68fb      	ldr	r3, [r7, #12]
 8013834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013836:	f043 0210 	orr.w	r2, r3, #16
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 801383e:	2301      	movs	r3, #1
 8013840:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	2201      	movs	r2, #1
 8013846:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 801384a:	e01e      	b.n	801388a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013856:	2b40      	cmp	r3, #64	; 0x40
 8013858:	d007      	beq.n	801386a <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	681b      	ldr	r3, [r3, #0]
 801385e:	681a      	ldr	r2, [r3, #0]
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013868:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	681b      	ldr	r3, [r3, #0]
 801386e:	685a      	ldr	r2, [r3, #4]
 8013870:	68fb      	ldr	r3, [r7, #12]
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	f042 0220 	orr.w	r2, r2, #32
 8013878:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 801387a:	68fb      	ldr	r3, [r7, #12]
 801387c:	681b      	ldr	r3, [r3, #0]
 801387e:	685a      	ldr	r2, [r3, #4]
 8013880:	68fb      	ldr	r3, [r7, #12]
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	f042 0202 	orr.w	r2, r2, #2
 8013888:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	2200      	movs	r2, #0
 801388e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013892:	7dfb      	ldrb	r3, [r7, #23]
}
 8013894:	4618      	mov	r0, r3
 8013896:	3718      	adds	r7, #24
 8013898:	46bd      	mov	sp, r7
 801389a:	bd80      	pop	{r7, pc}
 801389c:	080145c1 	.word	0x080145c1
 80138a0:	080143e1 	.word	0x080143e1
 80138a4:	08014615 	.word	0x08014615

080138a8 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80138a8:	b580      	push	{r7, lr}
 80138aa:	b086      	sub	sp, #24
 80138ac:	af00      	add	r7, sp, #0
 80138ae:	60f8      	str	r0, [r7, #12]
 80138b0:	60b9      	str	r1, [r7, #8]
 80138b2:	4613      	mov	r3, r2
 80138b4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80138b6:	2300      	movs	r3, #0
 80138b8:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	689b      	ldr	r3, [r3, #8]
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d110      	bne.n	80138e4 <HAL_SPI_Receive_DMA+0x3c>
 80138c2:	68fb      	ldr	r3, [r7, #12]
 80138c4:	685b      	ldr	r3, [r3, #4]
 80138c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80138ca:	d10b      	bne.n	80138e4 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	2204      	movs	r2, #4
 80138d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80138d4:	88fb      	ldrh	r3, [r7, #6]
 80138d6:	68ba      	ldr	r2, [r7, #8]
 80138d8:	68b9      	ldr	r1, [r7, #8]
 80138da:	68f8      	ldr	r0, [r7, #12]
 80138dc:	f000 f8ac 	bl	8013a38 <HAL_SPI_TransmitReceive_DMA>
 80138e0:	4603      	mov	r3, r0
 80138e2:	e09f      	b.n	8013a24 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80138ea:	2b01      	cmp	r3, #1
 80138ec:	d101      	bne.n	80138f2 <HAL_SPI_Receive_DMA+0x4a>
 80138ee:	2302      	movs	r3, #2
 80138f0:	e098      	b.n	8013a24 <HAL_SPI_Receive_DMA+0x17c>
 80138f2:	68fb      	ldr	r3, [r7, #12]
 80138f4:	2201      	movs	r2, #1
 80138f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013900:	b2db      	uxtb	r3, r3
 8013902:	2b01      	cmp	r3, #1
 8013904:	d002      	beq.n	801390c <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8013906:	2302      	movs	r3, #2
 8013908:	75fb      	strb	r3, [r7, #23]
    goto error;
 801390a:	e086      	b.n	8013a1a <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 801390c:	68bb      	ldr	r3, [r7, #8]
 801390e:	2b00      	cmp	r3, #0
 8013910:	d002      	beq.n	8013918 <HAL_SPI_Receive_DMA+0x70>
 8013912:	88fb      	ldrh	r3, [r7, #6]
 8013914:	2b00      	cmp	r3, #0
 8013916:	d102      	bne.n	801391e <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8013918:	2301      	movs	r3, #1
 801391a:	75fb      	strb	r3, [r7, #23]
    goto error;
 801391c:	e07d      	b.n	8013a1a <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	2204      	movs	r2, #4
 8013922:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	2200      	movs	r2, #0
 801392a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	68ba      	ldr	r2, [r7, #8]
 8013930:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	88fa      	ldrh	r2, [r7, #6]
 8013936:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	88fa      	ldrh	r2, [r7, #6]
 801393c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	2200      	movs	r2, #0
 8013942:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	2200      	movs	r2, #0
 8013948:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	2200      	movs	r2, #0
 801394e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	2200      	movs	r2, #0
 8013954:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	689b      	ldr	r3, [r3, #8]
 801395a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801395e:	d10f      	bne.n	8013980 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	681a      	ldr	r2, [r3, #0]
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	681b      	ldr	r3, [r3, #0]
 801396a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801396e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	681a      	ldr	r2, [r3, #0]
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801397e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013984:	4a29      	ldr	r2, [pc, #164]	; (8013a2c <HAL_SPI_Receive_DMA+0x184>)
 8013986:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801398c:	4a28      	ldr	r2, [pc, #160]	; (8013a30 <HAL_SPI_Receive_DMA+0x188>)
 801398e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013994:	4a27      	ldr	r2, [pc, #156]	; (8013a34 <HAL_SPI_Receive_DMA+0x18c>)
 8013996:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801399c:	2200      	movs	r2, #0
 801399e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80139a0:	68fb      	ldr	r3, [r7, #12]
 80139a2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	330c      	adds	r3, #12
 80139aa:	4619      	mov	r1, r3
 80139ac:	68fb      	ldr	r3, [r7, #12]
 80139ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80139b0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80139b6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80139b8:	f7f4 f9c9 	bl	8007d4e <HAL_DMA_Start_IT>
 80139bc:	4603      	mov	r3, r0
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d00c      	beq.n	80139dc <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80139c2:	68fb      	ldr	r3, [r7, #12]
 80139c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80139c6:	f043 0210 	orr.w	r2, r3, #16
 80139ca:	68fb      	ldr	r3, [r7, #12]
 80139cc:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80139ce:	2301      	movs	r3, #1
 80139d0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80139d2:	68fb      	ldr	r3, [r7, #12]
 80139d4:	2201      	movs	r2, #1
 80139d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80139da:	e01e      	b.n	8013a1a <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	681b      	ldr	r3, [r3, #0]
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80139e6:	2b40      	cmp	r3, #64	; 0x40
 80139e8:	d007      	beq.n	80139fa <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	681a      	ldr	r2, [r3, #0]
 80139f0:	68fb      	ldr	r3, [r7, #12]
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80139f8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	681b      	ldr	r3, [r3, #0]
 80139fe:	685a      	ldr	r2, [r3, #4]
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	681b      	ldr	r3, [r3, #0]
 8013a04:	f042 0220 	orr.w	r2, r2, #32
 8013a08:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8013a0a:	68fb      	ldr	r3, [r7, #12]
 8013a0c:	681b      	ldr	r3, [r3, #0]
 8013a0e:	685a      	ldr	r2, [r3, #4]
 8013a10:	68fb      	ldr	r3, [r7, #12]
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	f042 0201 	orr.w	r2, r2, #1
 8013a18:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	2200      	movs	r2, #0
 8013a1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013a22:	7dfb      	ldrb	r3, [r7, #23]
}
 8013a24:	4618      	mov	r0, r3
 8013a26:	3718      	adds	r7, #24
 8013a28:	46bd      	mov	sp, r7
 8013a2a:	bd80      	pop	{r7, pc}
 8013a2c:	080145dd 	.word	0x080145dd
 8013a30:	08014489 	.word	0x08014489
 8013a34:	08014615 	.word	0x08014615

08013a38 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8013a38:	b580      	push	{r7, lr}
 8013a3a:	b086      	sub	sp, #24
 8013a3c:	af00      	add	r7, sp, #0
 8013a3e:	60f8      	str	r0, [r7, #12]
 8013a40:	60b9      	str	r1, [r7, #8]
 8013a42:	607a      	str	r2, [r7, #4]
 8013a44:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013a46:	2300      	movs	r3, #0
 8013a48:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013a50:	2b01      	cmp	r3, #1
 8013a52:	d101      	bne.n	8013a58 <HAL_SPI_TransmitReceive_DMA+0x20>
 8013a54:	2302      	movs	r3, #2
 8013a56:	e0e3      	b.n	8013c20 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	2201      	movs	r2, #1
 8013a5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013a66:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	685b      	ldr	r3, [r3, #4]
 8013a6c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8013a6e:	7dbb      	ldrb	r3, [r7, #22]
 8013a70:	2b01      	cmp	r3, #1
 8013a72:	d00d      	beq.n	8013a90 <HAL_SPI_TransmitReceive_DMA+0x58>
 8013a74:	693b      	ldr	r3, [r7, #16]
 8013a76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013a7a:	d106      	bne.n	8013a8a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	689b      	ldr	r3, [r3, #8]
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d102      	bne.n	8013a8a <HAL_SPI_TransmitReceive_DMA+0x52>
 8013a84:	7dbb      	ldrb	r3, [r7, #22]
 8013a86:	2b04      	cmp	r3, #4
 8013a88:	d002      	beq.n	8013a90 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8013a8a:	2302      	movs	r3, #2
 8013a8c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013a8e:	e0c2      	b.n	8013c16 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8013a90:	68bb      	ldr	r3, [r7, #8]
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d005      	beq.n	8013aa2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d002      	beq.n	8013aa2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8013a9c:	887b      	ldrh	r3, [r7, #2]
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d102      	bne.n	8013aa8 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8013aa2:	2301      	movs	r3, #1
 8013aa4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013aa6:	e0b6      	b.n	8013c16 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013aae:	b2db      	uxtb	r3, r3
 8013ab0:	2b04      	cmp	r3, #4
 8013ab2:	d003      	beq.n	8013abc <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	2205      	movs	r2, #5
 8013ab8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	2200      	movs	r2, #0
 8013ac0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	68ba      	ldr	r2, [r7, #8]
 8013ac6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	887a      	ldrh	r2, [r7, #2]
 8013acc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	887a      	ldrh	r2, [r7, #2]
 8013ad2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8013ad4:	68fb      	ldr	r3, [r7, #12]
 8013ad6:	687a      	ldr	r2, [r7, #4]
 8013ad8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	887a      	ldrh	r2, [r7, #2]
 8013ade:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	887a      	ldrh	r2, [r7, #2]
 8013ae4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	2200      	movs	r2, #0
 8013aea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	2200      	movs	r2, #0
 8013af0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013af8:	b2db      	uxtb	r3, r3
 8013afa:	2b04      	cmp	r3, #4
 8013afc:	d108      	bne.n	8013b10 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8013afe:	68fb      	ldr	r3, [r7, #12]
 8013b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013b02:	4a49      	ldr	r2, [pc, #292]	; (8013c28 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8013b04:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013b0a:	4a48      	ldr	r2, [pc, #288]	; (8013c2c <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8013b0c:	63da      	str	r2, [r3, #60]	; 0x3c
 8013b0e:	e007      	b.n	8013b20 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8013b10:	68fb      	ldr	r3, [r7, #12]
 8013b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013b14:	4a46      	ldr	r2, [pc, #280]	; (8013c30 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8013b16:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013b1c:	4a45      	ldr	r2, [pc, #276]	; (8013c34 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8013b1e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013b24:	4a44      	ldr	r2, [pc, #272]	; (8013c38 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8013b26:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013b2c:	2200      	movs	r2, #0
 8013b2e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8013b30:	68fb      	ldr	r3, [r7, #12]
 8013b32:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	330c      	adds	r3, #12
 8013b3a:	4619      	mov	r1, r3
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b40:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013b46:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8013b48:	f7f4 f901 	bl	8007d4e <HAL_DMA_Start_IT>
 8013b4c:	4603      	mov	r3, r0
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d00c      	beq.n	8013b6c <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013b56:	f043 0210 	orr.w	r2, r3, #16
 8013b5a:	68fb      	ldr	r3, [r7, #12]
 8013b5c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8013b5e:	2301      	movs	r3, #1
 8013b60:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	2201      	movs	r2, #1
 8013b66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8013b6a:	e054      	b.n	8013c16 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	681b      	ldr	r3, [r3, #0]
 8013b70:	685a      	ldr	r2, [r3, #4]
 8013b72:	68fb      	ldr	r3, [r7, #12]
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	f042 0201 	orr.w	r2, r2, #1
 8013b7a:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8013b7c:	68fb      	ldr	r3, [r7, #12]
 8013b7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013b80:	2200      	movs	r2, #0
 8013b82:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8013b84:	68fb      	ldr	r3, [r7, #12]
 8013b86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013b88:	2200      	movs	r2, #0
 8013b8a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8013b8c:	68fb      	ldr	r3, [r7, #12]
 8013b8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013b90:	2200      	movs	r2, #0
 8013b92:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013b98:	2200      	movs	r2, #0
 8013b9a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8013ba0:	68fb      	ldr	r3, [r7, #12]
 8013ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ba4:	4619      	mov	r1, r3
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	330c      	adds	r3, #12
 8013bac:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8013bae:	68fb      	ldr	r3, [r7, #12]
 8013bb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013bb2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8013bb4:	f7f4 f8cb 	bl	8007d4e <HAL_DMA_Start_IT>
 8013bb8:	4603      	mov	r3, r0
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d00c      	beq.n	8013bd8 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013bc2:	f043 0210 	orr.w	r2, r3, #16
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8013bca:	2301      	movs	r3, #1
 8013bcc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	2201      	movs	r2, #1
 8013bd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8013bd6:	e01e      	b.n	8013c16 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	681b      	ldr	r3, [r3, #0]
 8013bdc:	681b      	ldr	r3, [r3, #0]
 8013bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013be2:	2b40      	cmp	r3, #64	; 0x40
 8013be4:	d007      	beq.n	8013bf6 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	681b      	ldr	r3, [r3, #0]
 8013bea:	681a      	ldr	r2, [r3, #0]
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013bf4:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	685a      	ldr	r2, [r3, #4]
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	f042 0220 	orr.w	r2, r2, #32
 8013c04:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	685a      	ldr	r2, [r3, #4]
 8013c0c:	68fb      	ldr	r3, [r7, #12]
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	f042 0202 	orr.w	r2, r2, #2
 8013c14:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	2200      	movs	r2, #0
 8013c1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c20:	4618      	mov	r0, r3
 8013c22:	3718      	adds	r7, #24
 8013c24:	46bd      	mov	sp, r7
 8013c26:	bd80      	pop	{r7, pc}
 8013c28:	080145dd 	.word	0x080145dd
 8013c2c:	08014489 	.word	0x08014489
 8013c30:	080145f9 	.word	0x080145f9
 8013c34:	08014531 	.word	0x08014531
 8013c38:	08014615 	.word	0x08014615

08013c3c <HAL_SPI_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
 8013c3c:	b580      	push	{r7, lr}
 8013c3e:	b088      	sub	sp, #32
 8013c40:	af00      	add	r7, sp, #0
 8013c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 8013c44:	2300      	movs	r3, #0
 8013c46:	77fb      	strb	r3, [r7, #31]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8013c48:	4b6e      	ldr	r3, [pc, #440]	; (8013e04 <HAL_SPI_Abort+0x1c8>)
 8013c4a:	681b      	ldr	r3, [r3, #0]
 8013c4c:	4a6e      	ldr	r2, [pc, #440]	; (8013e08 <HAL_SPI_Abort+0x1cc>)
 8013c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8013c52:	0a5b      	lsrs	r3, r3, #9
 8013c54:	2264      	movs	r2, #100	; 0x64
 8013c56:	fb02 f303 	mul.w	r3, r2, r3
 8013c5a:	617b      	str	r3, [r7, #20]
  count = resetcount;
 8013c5c:	697b      	ldr	r3, [r7, #20]
 8013c5e:	61bb      	str	r3, [r7, #24]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	685a      	ldr	r2, [r3, #4]
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	f022 0220 	bic.w	r2, r2, #32
 8013c6e:	605a      	str	r2, [r3, #4]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	681b      	ldr	r3, [r3, #0]
 8013c74:	685b      	ldr	r3, [r3, #4]
 8013c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013c7a:	2b80      	cmp	r3, #128	; 0x80
 8013c7c:	d117      	bne.n	8013cae <HAL_SPI_Abort+0x72>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	4a62      	ldr	r2, [pc, #392]	; (8013e0c <HAL_SPI_Abort+0x1d0>)
 8013c82:	645a      	str	r2, [r3, #68]	; 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8013c84:	69bb      	ldr	r3, [r7, #24]
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d106      	bne.n	8013c98 <HAL_SPI_Abort+0x5c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013c8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8013c96:	e008      	b.n	8013caa <HAL_SPI_Abort+0x6e>
      }
      count--;
 8013c98:	69bb      	ldr	r3, [r7, #24]
 8013c9a:	3b01      	subs	r3, #1
 8013c9c:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013ca4:	b2db      	uxtb	r3, r3
 8013ca6:	2b07      	cmp	r3, #7
 8013ca8:	d1ec      	bne.n	8013c84 <HAL_SPI_Abort+0x48>
    /* Reset Timeout Counter */
    count = resetcount;
 8013caa:	697b      	ldr	r3, [r7, #20]
 8013cac:	61bb      	str	r3, [r7, #24]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	681b      	ldr	r3, [r3, #0]
 8013cb2:	685b      	ldr	r3, [r3, #4]
 8013cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013cb8:	2b40      	cmp	r3, #64	; 0x40
 8013cba:	d117      	bne.n	8013cec <HAL_SPI_Abort+0xb0>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	4a54      	ldr	r2, [pc, #336]	; (8013e10 <HAL_SPI_Abort+0x1d4>)
 8013cc0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8013cc2:	69bb      	ldr	r3, [r7, #24]
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d106      	bne.n	8013cd6 <HAL_SPI_Abort+0x9a>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013ccc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8013cd4:	e008      	b.n	8013ce8 <HAL_SPI_Abort+0xac>
      }
      count--;
 8013cd6:	69bb      	ldr	r3, [r7, #24]
 8013cd8:	3b01      	subs	r3, #1
 8013cda:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013ce2:	b2db      	uxtb	r3, r3
 8013ce4:	2b07      	cmp	r3, #7
 8013ce6:	d1ec      	bne.n	8013cc2 <HAL_SPI_Abort+0x86>
    /* Reset Timeout Counter */
    count = resetcount;
 8013ce8:	697b      	ldr	r3, [r7, #20]
 8013cea:	61bb      	str	r3, [r7, #24]
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	685b      	ldr	r3, [r3, #4]
 8013cf2:	f003 0302 	and.w	r3, r3, #2
 8013cf6:	2b02      	cmp	r3, #2
 8013cf8:	d12e      	bne.n	8013d58 <HAL_SPI_Abort+0x11c>
  {
    /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmatx != NULL)
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d02a      	beq.n	8013d58 <HAL_SPI_Abort+0x11c>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmatx->XferAbortCallback = NULL;
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013d06:	2200      	movs	r2, #0
 8013d08:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013d0e:	4618      	mov	r0, r3
 8013d10:	f7f4 f875 	bl	8007dfe <HAL_DMA_Abort>
 8013d14:	4603      	mov	r3, r0
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d002      	beq.n	8013d20 <HAL_SPI_Abort+0xe4>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	2240      	movs	r2, #64	; 0x40
 8013d1e:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Disable Tx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN));
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	681b      	ldr	r3, [r3, #0]
 8013d24:	685a      	ldr	r2, [r3, #4]
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	681b      	ldr	r3, [r3, #0]
 8013d2a:	f022 0202 	bic.w	r2, r2, #2
 8013d2e:	605a      	str	r2, [r3, #4]

      /* Wait until TXE flag is set */
      do
      {
        if (count == 0U)
 8013d30:	69bb      	ldr	r3, [r7, #24]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d106      	bne.n	8013d44 <HAL_SPI_Abort+0x108>
        {
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013d3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	655a      	str	r2, [r3, #84]	; 0x54
          break;
 8013d42:	e009      	b.n	8013d58 <HAL_SPI_Abort+0x11c>
        }
        count--;
 8013d44:	69bb      	ldr	r3, [r7, #24]
 8013d46:	3b01      	subs	r3, #1
 8013d48:	61bb      	str	r3, [r7, #24]
      } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	681b      	ldr	r3, [r3, #0]
 8013d4e:	689b      	ldr	r3, [r3, #8]
 8013d50:	f003 0302 	and.w	r3, r3, #2
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d0eb      	beq.n	8013d30 <HAL_SPI_Abort+0xf4>
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	681b      	ldr	r3, [r3, #0]
 8013d5c:	685b      	ldr	r3, [r3, #4]
 8013d5e:	f003 0301 	and.w	r3, r3, #1
 8013d62:	2b01      	cmp	r3, #1
 8013d64:	d122      	bne.n	8013dac <HAL_SPI_Abort+0x170>
  {
    /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmarx != NULL)
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d01e      	beq.n	8013dac <HAL_SPI_Abort+0x170>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmarx->XferAbortCallback = NULL;
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013d72:	2200      	movs	r2, #0
 8013d74:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013d7a:	4618      	mov	r0, r3
 8013d7c:	f7f4 f83f 	bl	8007dfe <HAL_DMA_Abort>
 8013d80:	4603      	mov	r3, r0
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d002      	beq.n	8013d8c <HAL_SPI_Abort+0x150>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	2240      	movs	r2, #64	; 0x40
 8013d8a:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Disable peripheral */
      __HAL_SPI_DISABLE(hspi);
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	681a      	ldr	r2, [r3, #0]
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013d9a:	601a      	str	r2, [r3, #0]

      /* Disable Rx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXDMAEN));
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	681b      	ldr	r3, [r3, #0]
 8013da0:	685a      	ldr	r2, [r3, #4]
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	681b      	ldr	r3, [r3, #0]
 8013da6:	f022 0201 	bic.w	r2, r2, #1
 8013daa:	605a      	str	r2, [r3, #4]
    }
  }
  /* Reset Tx and Rx transfer counters */
  hspi->RxXferCount = 0U;
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	2200      	movs	r2, #0
 8013db0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	2200      	movs	r2, #0
 8013db6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check error during Abort procedure */
  if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013dbc:	2b40      	cmp	r3, #64	; 0x40
 8013dbe:	d102      	bne.n	8013dc6 <HAL_SPI_Abort+0x18a>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
 8013dc0:	2301      	movs	r3, #1
 8013dc2:	77fb      	strb	r3, [r7, #31]
 8013dc4:	e002      	b.n	8013dcc <HAL_SPI_Abort+0x190>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	2200      	movs	r2, #0
 8013dca:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013dcc:	2300      	movs	r3, #0
 8013dce:	60fb      	str	r3, [r7, #12]
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	68db      	ldr	r3, [r3, #12]
 8013dd6:	60fb      	str	r3, [r7, #12]
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	689b      	ldr	r3, [r3, #8]
 8013dde:	60fb      	str	r3, [r7, #12]
 8013de0:	68fb      	ldr	r3, [r7, #12]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8013de2:	2300      	movs	r3, #0
 8013de4:	613b      	str	r3, [r7, #16]
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	689b      	ldr	r3, [r3, #8]
 8013dec:	613b      	str	r3, [r7, #16]
 8013dee:	693b      	ldr	r3, [r7, #16]

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	2201      	movs	r2, #1
 8013df4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return errorcode;
 8013df8:	7ffb      	ldrb	r3, [r7, #31]
}
 8013dfa:	4618      	mov	r0, r3
 8013dfc:	3720      	adds	r7, #32
 8013dfe:	46bd      	mov	sp, r7
 8013e00:	bd80      	pop	{r7, pc}
 8013e02:	bf00      	nop
 8013e04:	20000058 	.word	0x20000058
 8013e08:	057619f1 	.word	0x057619f1
 8013e0c:	08014fc1 	.word	0x08014fc1
 8013e10:	08014f31 	.word	0x08014f31

08013e14 <HAL_SPI_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort_IT(SPI_HandleTypeDef *hspi)
{
 8013e14:	b580      	push	{r7, lr}
 8013e16:	b088      	sub	sp, #32
 8013e18:	af00      	add	r7, sp, #0
 8013e1a:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt ;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 8013e1c:	2300      	movs	r3, #0
 8013e1e:	77fb      	strb	r3, [r7, #31]
  abortcplt = 1U;
 8013e20:	2301      	movs	r3, #1
 8013e22:	61bb      	str	r3, [r7, #24]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8013e24:	4b72      	ldr	r3, [pc, #456]	; (8013ff0 <HAL_SPI_Abort_IT+0x1dc>)
 8013e26:	681b      	ldr	r3, [r3, #0]
 8013e28:	4a72      	ldr	r2, [pc, #456]	; (8013ff4 <HAL_SPI_Abort_IT+0x1e0>)
 8013e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8013e2e:	0a5b      	lsrs	r3, r3, #9
 8013e30:	2264      	movs	r2, #100	; 0x64
 8013e32:	fb02 f303 	mul.w	r3, r2, r3
 8013e36:	613b      	str	r3, [r7, #16]
  count = resetcount;
 8013e38:	693b      	ldr	r3, [r7, #16]
 8013e3a:	617b      	str	r3, [r7, #20]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	685a      	ldr	r2, [r3, #4]
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	681b      	ldr	r3, [r3, #0]
 8013e46:	f022 0220 	bic.w	r2, r2, #32
 8013e4a:	605a      	str	r2, [r3, #4]

  /* Change Rx and Tx Irq Handler to Disable TXEIE, RXNEIE and ERRIE interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	685b      	ldr	r3, [r3, #4]
 8013e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013e56:	2b80      	cmp	r3, #128	; 0x80
 8013e58:	d117      	bne.n	8013e8a <HAL_SPI_Abort_IT+0x76>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	4a66      	ldr	r2, [pc, #408]	; (8013ff8 <HAL_SPI_Abort_IT+0x1e4>)
 8013e5e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8013e60:	697b      	ldr	r3, [r7, #20]
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d106      	bne.n	8013e74 <HAL_SPI_Abort_IT+0x60>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013e6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8013e72:	e008      	b.n	8013e86 <HAL_SPI_Abort_IT+0x72>
      }
      count--;
 8013e74:	697b      	ldr	r3, [r7, #20]
 8013e76:	3b01      	subs	r3, #1
 8013e78:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013e80:	b2db      	uxtb	r3, r3
 8013e82:	2b07      	cmp	r3, #7
 8013e84:	d1ec      	bne.n	8013e60 <HAL_SPI_Abort_IT+0x4c>
    /* Reset Timeout Counter */
    count = resetcount;
 8013e86:	693b      	ldr	r3, [r7, #16]
 8013e88:	617b      	str	r3, [r7, #20]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	685b      	ldr	r3, [r3, #4]
 8013e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013e94:	2b40      	cmp	r3, #64	; 0x40
 8013e96:	d117      	bne.n	8013ec8 <HAL_SPI_Abort_IT+0xb4>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	4a58      	ldr	r2, [pc, #352]	; (8013ffc <HAL_SPI_Abort_IT+0x1e8>)
 8013e9c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8013e9e:	697b      	ldr	r3, [r7, #20]
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d106      	bne.n	8013eb2 <HAL_SPI_Abort_IT+0x9e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013ea8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8013eb0:	e008      	b.n	8013ec4 <HAL_SPI_Abort_IT+0xb0>
      }
      count--;
 8013eb2:	697b      	ldr	r3, [r7, #20]
 8013eb4:	3b01      	subs	r3, #1
 8013eb6:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013ebe:	b2db      	uxtb	r3, r3
 8013ec0:	2b07      	cmp	r3, #7
 8013ec2:	d1ec      	bne.n	8013e9e <HAL_SPI_Abort_IT+0x8a>
    /* Reset Timeout Counter */
    count = resetcount;
 8013ec4:	693b      	ldr	r3, [r7, #16]
 8013ec6:	617b      	str	r3, [r7, #20]
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to SPI Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (hspi->hdmatx != NULL)
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d00f      	beq.n	8013ef0 <HAL_SPI_Abort_IT+0xdc>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	681b      	ldr	r3, [r3, #0]
 8013ed4:	685b      	ldr	r3, [r3, #4]
 8013ed6:	f003 0302 	and.w	r3, r3, #2
 8013eda:	2b02      	cmp	r3, #2
 8013edc:	d104      	bne.n	8013ee8 <HAL_SPI_Abort_IT+0xd4>
    {
      hspi->hdmatx->XferAbortCallback = SPI_DMATxAbortCallback;
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013ee2:	4a47      	ldr	r2, [pc, #284]	; (8014000 <HAL_SPI_Abort_IT+0x1ec>)
 8013ee4:	651a      	str	r2, [r3, #80]	; 0x50
 8013ee6:	e003      	b.n	8013ef0 <HAL_SPI_Abort_IT+0xdc>
    }
    else
    {
      hspi->hdmatx->XferAbortCallback = NULL;
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013eec:	2200      	movs	r2, #0
 8013eee:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (hspi->hdmarx != NULL)
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d00f      	beq.n	8013f18 <HAL_SPI_Abort_IT+0x104>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	685b      	ldr	r3, [r3, #4]
 8013efe:	f003 0301 	and.w	r3, r3, #1
 8013f02:	2b01      	cmp	r3, #1
 8013f04:	d104      	bne.n	8013f10 <HAL_SPI_Abort_IT+0xfc>
    {
      hspi->hdmarx->XferAbortCallback = SPI_DMARxAbortCallback;
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013f0a:	4a3e      	ldr	r2, [pc, #248]	; (8014004 <HAL_SPI_Abort_IT+0x1f0>)
 8013f0c:	651a      	str	r2, [r3, #80]	; 0x50
 8013f0e:	e003      	b.n	8013f18 <HAL_SPI_Abort_IT+0x104>
    }
    else
    {
      hspi->hdmarx->XferAbortCallback = NULL;
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013f14:	2200      	movs	r2, #0
 8013f16:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	681b      	ldr	r3, [r3, #0]
 8013f1c:	685b      	ldr	r3, [r3, #4]
 8013f1e:	f003 0302 	and.w	r3, r3, #2
 8013f22:	2b02      	cmp	r3, #2
 8013f24:	d115      	bne.n	8013f52 <HAL_SPI_Abort_IT+0x13e>
  {
    /* Abort the SPI DMA Tx Stream/Channel */
    if (hspi->hdmatx != NULL)
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d011      	beq.n	8013f52 <HAL_SPI_Abort_IT+0x13e>
    {
      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013f32:	4618      	mov	r0, r3
 8013f34:	f7f3 ffd3 	bl	8007ede <HAL_DMA_Abort_IT>
 8013f38:	4603      	mov	r3, r0
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d007      	beq.n	8013f4e <HAL_SPI_Abort_IT+0x13a>
      {
        hspi->hdmatx->XferAbortCallback = NULL;
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013f42:	2200      	movs	r2, #0
 8013f44:	651a      	str	r2, [r3, #80]	; 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	2240      	movs	r2, #64	; 0x40
 8013f4a:	655a      	str	r2, [r3, #84]	; 0x54
 8013f4c:	e001      	b.n	8013f52 <HAL_SPI_Abort_IT+0x13e>
      }
      else
      {
        abortcplt = 0U;
 8013f4e:	2300      	movs	r3, #0
 8013f50:	61bb      	str	r3, [r7, #24]
      }
    }
  }
  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	681b      	ldr	r3, [r3, #0]
 8013f56:	685b      	ldr	r3, [r3, #4]
 8013f58:	f003 0301 	and.w	r3, r3, #1
 8013f5c:	2b01      	cmp	r3, #1
 8013f5e:	d115      	bne.n	8013f8c <HAL_SPI_Abort_IT+0x178>
  {
    /* Abort the SPI DMA Rx Stream/Channel */
    if (hspi->hdmarx != NULL)
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d011      	beq.n	8013f8c <HAL_SPI_Abort_IT+0x178>
    {
      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmarx) !=  HAL_OK)
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013f6c:	4618      	mov	r0, r3
 8013f6e:	f7f3 ffb6 	bl	8007ede <HAL_DMA_Abort_IT>
 8013f72:	4603      	mov	r3, r0
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d007      	beq.n	8013f88 <HAL_SPI_Abort_IT+0x174>
      {
        hspi->hdmarx->XferAbortCallback = NULL;
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013f7c:	2200      	movs	r2, #0
 8013f7e:	651a      	str	r2, [r3, #80]	; 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	2240      	movs	r2, #64	; 0x40
 8013f84:	655a      	str	r2, [r3, #84]	; 0x54
 8013f86:	e001      	b.n	8013f8c <HAL_SPI_Abort_IT+0x178>
      }
      else
      {
        abortcplt = 0U;
 8013f88:	2300      	movs	r3, #0
 8013f8a:	61bb      	str	r3, [r7, #24]
      }
    }
  }

  if (abortcplt == 1U)
 8013f8c:	69bb      	ldr	r3, [r7, #24]
 8013f8e:	2b01      	cmp	r3, #1
 8013f90:	d128      	bne.n	8013fe4 <HAL_SPI_Abort_IT+0x1d0>
  {
    /* Reset Tx and Rx transfer counters */
    hspi->RxXferCount = 0U;
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	2200      	movs	r2, #0
 8013f96:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->TxXferCount = 0U;
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	2200      	movs	r2, #0
 8013f9c:	86da      	strh	r2, [r3, #54]	; 0x36

    /* Check error during Abort procedure */
    if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013fa2:	2b40      	cmp	r3, #64	; 0x40
 8013fa4:	d102      	bne.n	8013fac <HAL_SPI_Abort_IT+0x198>
    {
      /* return HAL_Error in case of error during Abort procedure */
      errorcode = HAL_ERROR;
 8013fa6:	2301      	movs	r3, #1
 8013fa8:	77fb      	strb	r3, [r7, #31]
 8013faa:	e002      	b.n	8013fb2 <HAL_SPI_Abort_IT+0x19e>
    }
    else
    {
      /* Reset errorCode */
      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	2200      	movs	r2, #0
 8013fb0:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear the Error flags in the SR register */
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013fb2:	2300      	movs	r3, #0
 8013fb4:	60bb      	str	r3, [r7, #8]
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	681b      	ldr	r3, [r3, #0]
 8013fba:	68db      	ldr	r3, [r3, #12]
 8013fbc:	60bb      	str	r3, [r7, #8]
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	681b      	ldr	r3, [r3, #0]
 8013fc2:	689b      	ldr	r3, [r3, #8]
 8013fc4:	60bb      	str	r3, [r7, #8]
 8013fc6:	68bb      	ldr	r3, [r7, #8]
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8013fc8:	2300      	movs	r3, #0
 8013fca:	60fb      	str	r3, [r7, #12]
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	681b      	ldr	r3, [r3, #0]
 8013fd0:	689b      	ldr	r3, [r3, #8]
 8013fd2:	60fb      	str	r3, [r7, #12]
 8013fd4:	68fb      	ldr	r3, [r7, #12]

    /* Restore hspi->State to Ready */
    hspi->State = HAL_SPI_STATE_READY;
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	2201      	movs	r2, #1
 8013fda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* As no DMA to be aborted, call directly user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->AbortCpltCallback(hspi);
#else
    HAL_SPI_AbortCpltCallback(hspi);
 8013fde:	6878      	ldr	r0, [r7, #4]
 8013fe0:	f000 f9da 	bl	8014398 <HAL_SPI_AbortCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  return errorcode;
 8013fe4:	7ffb      	ldrb	r3, [r7, #31]
}
 8013fe6:	4618      	mov	r0, r3
 8013fe8:	3720      	adds	r7, #32
 8013fea:	46bd      	mov	sp, r7
 8013fec:	bd80      	pop	{r7, pc}
 8013fee:	bf00      	nop
 8013ff0:	20000058 	.word	0x20000058
 8013ff4:	057619f1 	.word	0x057619f1
 8013ff8:	08014fc1 	.word	0x08014fc1
 8013ffc:	08014f31 	.word	0x08014f31
 8014000:	0801467d 	.word	0x0801467d
 8014004:	08014751 	.word	0x08014751

08014008 <HAL_SPI_DMAPause>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAPause(SPI_HandleTypeDef *hspi)
{
 8014008:	b480      	push	{r7}
 801400a:	b083      	sub	sp, #12
 801400c:	af00      	add	r7, sp, #0
 801400e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014016:	2b01      	cmp	r3, #1
 8014018:	d101      	bne.n	801401e <HAL_SPI_DMAPause+0x16>
 801401a:	2302      	movs	r3, #2
 801401c:	e010      	b.n	8014040 <HAL_SPI_DMAPause+0x38>
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	2201      	movs	r2, #1
 8014022:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	681b      	ldr	r3, [r3, #0]
 801402a:	685a      	ldr	r2, [r3, #4]
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	f022 0203 	bic.w	r2, r2, #3
 8014034:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	2200      	movs	r2, #0
 801403a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 801403e:	2300      	movs	r3, #0
}
 8014040:	4618      	mov	r0, r3
 8014042:	370c      	adds	r7, #12
 8014044:	46bd      	mov	sp, r7
 8014046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801404a:	4770      	bx	lr

0801404c <HAL_SPI_DMAResume>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAResume(SPI_HandleTypeDef *hspi)
{
 801404c:	b480      	push	{r7}
 801404e:	b083      	sub	sp, #12
 8014050:	af00      	add	r7, sp, #0
 8014052:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801405a:	2b01      	cmp	r3, #1
 801405c:	d101      	bne.n	8014062 <HAL_SPI_DMAResume+0x16>
 801405e:	2302      	movs	r3, #2
 8014060:	e010      	b.n	8014084 <HAL_SPI_DMAResume+0x38>
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	2201      	movs	r2, #1
 8014066:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Enable the SPI DMA Tx & Rx requests */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	685a      	ldr	r2, [r3, #4]
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	681b      	ldr	r3, [r3, #0]
 8014074:	f042 0203 	orr.w	r2, r2, #3
 8014078:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	2200      	movs	r2, #0
 801407e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8014082:	2300      	movs	r3, #0
}
 8014084:	4618      	mov	r0, r3
 8014086:	370c      	adds	r7, #12
 8014088:	46bd      	mov	sp, r7
 801408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801408e:	4770      	bx	lr

08014090 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 8014090:	b580      	push	{r7, lr}
 8014092:	b084      	sub	sp, #16
 8014094:	af00      	add	r7, sp, #0
 8014096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8014098:	2300      	movs	r3, #0
 801409a:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d00f      	beq.n	80140c4 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80140a8:	4618      	mov	r0, r3
 80140aa:	f7f3 fea8 	bl	8007dfe <HAL_DMA_Abort>
 80140ae:	4603      	mov	r3, r0
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d007      	beq.n	80140c4 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80140b8:	f043 0210 	orr.w	r2, r3, #16
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 80140c0:	2301      	movs	r3, #1
 80140c2:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d00f      	beq.n	80140ec <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80140d0:	4618      	mov	r0, r3
 80140d2:	f7f3 fe94 	bl	8007dfe <HAL_DMA_Abort>
 80140d6:	4603      	mov	r3, r0
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d007      	beq.n	80140ec <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80140e0:	f043 0210 	orr.w	r2, r3, #16
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 80140e8:	2301      	movs	r3, #1
 80140ea:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	681b      	ldr	r3, [r3, #0]
 80140f0:	685a      	ldr	r2, [r3, #4]
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	681b      	ldr	r3, [r3, #0]
 80140f6:	f022 0203 	bic.w	r2, r2, #3
 80140fa:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	2201      	movs	r2, #1
 8014100:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  return errorcode;
 8014104:	7bfb      	ldrb	r3, [r7, #15]
}
 8014106:	4618      	mov	r0, r3
 8014108:	3710      	adds	r7, #16
 801410a:	46bd      	mov	sp, r7
 801410c:	bd80      	pop	{r7, pc}

0801410e <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 801410e:	b580      	push	{r7, lr}
 8014110:	b088      	sub	sp, #32
 8014112:	af00      	add	r7, sp, #0
 8014114:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	685b      	ldr	r3, [r3, #4]
 801411c:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	681b      	ldr	r3, [r3, #0]
 8014122:	689b      	ldr	r3, [r3, #8]
 8014124:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8014126:	69bb      	ldr	r3, [r7, #24]
 8014128:	099b      	lsrs	r3, r3, #6
 801412a:	f003 0301 	and.w	r3, r3, #1
 801412e:	2b00      	cmp	r3, #0
 8014130:	d10f      	bne.n	8014152 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8014132:	69bb      	ldr	r3, [r7, #24]
 8014134:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8014138:	2b00      	cmp	r3, #0
 801413a:	d00a      	beq.n	8014152 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 801413c:	69fb      	ldr	r3, [r7, #28]
 801413e:	099b      	lsrs	r3, r3, #6
 8014140:	f003 0301 	and.w	r3, r3, #1
 8014144:	2b00      	cmp	r3, #0
 8014146:	d004      	beq.n	8014152 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801414c:	6878      	ldr	r0, [r7, #4]
 801414e:	4798      	blx	r3
    return;
 8014150:	e0d7      	b.n	8014302 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8014152:	69bb      	ldr	r3, [r7, #24]
 8014154:	085b      	lsrs	r3, r3, #1
 8014156:	f003 0301 	and.w	r3, r3, #1
 801415a:	2b00      	cmp	r3, #0
 801415c:	d00a      	beq.n	8014174 <HAL_SPI_IRQHandler+0x66>
 801415e:	69fb      	ldr	r3, [r7, #28]
 8014160:	09db      	lsrs	r3, r3, #7
 8014162:	f003 0301 	and.w	r3, r3, #1
 8014166:	2b00      	cmp	r3, #0
 8014168:	d004      	beq.n	8014174 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801416e:	6878      	ldr	r0, [r7, #4]
 8014170:	4798      	blx	r3
    return;
 8014172:	e0c6      	b.n	8014302 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8014174:	69bb      	ldr	r3, [r7, #24]
 8014176:	095b      	lsrs	r3, r3, #5
 8014178:	f003 0301 	and.w	r3, r3, #1
 801417c:	2b00      	cmp	r3, #0
 801417e:	d10c      	bne.n	801419a <HAL_SPI_IRQHandler+0x8c>
 8014180:	69bb      	ldr	r3, [r7, #24]
 8014182:	099b      	lsrs	r3, r3, #6
 8014184:	f003 0301 	and.w	r3, r3, #1
 8014188:	2b00      	cmp	r3, #0
 801418a:	d106      	bne.n	801419a <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 801418c:	69bb      	ldr	r3, [r7, #24]
 801418e:	0a1b      	lsrs	r3, r3, #8
 8014190:	f003 0301 	and.w	r3, r3, #1
 8014194:	2b00      	cmp	r3, #0
 8014196:	f000 80b4 	beq.w	8014302 <HAL_SPI_IRQHandler+0x1f4>
 801419a:	69fb      	ldr	r3, [r7, #28]
 801419c:	095b      	lsrs	r3, r3, #5
 801419e:	f003 0301 	and.w	r3, r3, #1
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	f000 80ad 	beq.w	8014302 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80141a8:	69bb      	ldr	r3, [r7, #24]
 80141aa:	099b      	lsrs	r3, r3, #6
 80141ac:	f003 0301 	and.w	r3, r3, #1
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d023      	beq.n	80141fc <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80141ba:	b2db      	uxtb	r3, r3
 80141bc:	2b03      	cmp	r3, #3
 80141be:	d011      	beq.n	80141e4 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80141c4:	f043 0204 	orr.w	r2, r3, #4
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80141cc:	2300      	movs	r3, #0
 80141ce:	60bb      	str	r3, [r7, #8]
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	681b      	ldr	r3, [r3, #0]
 80141d4:	68db      	ldr	r3, [r3, #12]
 80141d6:	60bb      	str	r3, [r7, #8]
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	689b      	ldr	r3, [r3, #8]
 80141de:	60bb      	str	r3, [r7, #8]
 80141e0:	68bb      	ldr	r3, [r7, #8]
 80141e2:	e00b      	b.n	80141fc <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80141e4:	2300      	movs	r3, #0
 80141e6:	60fb      	str	r3, [r7, #12]
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	681b      	ldr	r3, [r3, #0]
 80141ec:	68db      	ldr	r3, [r3, #12]
 80141ee:	60fb      	str	r3, [r7, #12]
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	689b      	ldr	r3, [r3, #8]
 80141f6:	60fb      	str	r3, [r7, #12]
 80141f8:	68fb      	ldr	r3, [r7, #12]
        return;
 80141fa:	e082      	b.n	8014302 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80141fc:	69bb      	ldr	r3, [r7, #24]
 80141fe:	095b      	lsrs	r3, r3, #5
 8014200:	f003 0301 	and.w	r3, r3, #1
 8014204:	2b00      	cmp	r3, #0
 8014206:	d014      	beq.n	8014232 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801420c:	f043 0201 	orr.w	r2, r3, #1
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8014214:	2300      	movs	r3, #0
 8014216:	613b      	str	r3, [r7, #16]
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	689b      	ldr	r3, [r3, #8]
 801421e:	613b      	str	r3, [r7, #16]
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	681b      	ldr	r3, [r3, #0]
 8014224:	681a      	ldr	r2, [r3, #0]
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	681b      	ldr	r3, [r3, #0]
 801422a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801422e:	601a      	str	r2, [r3, #0]
 8014230:	693b      	ldr	r3, [r7, #16]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8014232:	69bb      	ldr	r3, [r7, #24]
 8014234:	0a1b      	lsrs	r3, r3, #8
 8014236:	f003 0301 	and.w	r3, r3, #1
 801423a:	2b00      	cmp	r3, #0
 801423c:	d00c      	beq.n	8014258 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014242:	f043 0208 	orr.w	r2, r3, #8
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 801424a:	2300      	movs	r3, #0
 801424c:	617b      	str	r3, [r7, #20]
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	689b      	ldr	r3, [r3, #8]
 8014254:	617b      	str	r3, [r7, #20]
 8014256:	697b      	ldr	r3, [r7, #20]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801425c:	2b00      	cmp	r3, #0
 801425e:	d04f      	beq.n	8014300 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	681b      	ldr	r3, [r3, #0]
 8014264:	685a      	ldr	r2, [r3, #4]
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801426e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	2201      	movs	r2, #1
 8014274:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8014278:	69fb      	ldr	r3, [r7, #28]
 801427a:	f003 0302 	and.w	r3, r3, #2
 801427e:	2b00      	cmp	r3, #0
 8014280:	d104      	bne.n	801428c <HAL_SPI_IRQHandler+0x17e>
 8014282:	69fb      	ldr	r3, [r7, #28]
 8014284:	f003 0301 	and.w	r3, r3, #1
 8014288:	2b00      	cmp	r3, #0
 801428a:	d034      	beq.n	80142f6 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	681b      	ldr	r3, [r3, #0]
 8014290:	685a      	ldr	r2, [r3, #4]
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	681b      	ldr	r3, [r3, #0]
 8014296:	f022 0203 	bic.w	r2, r2, #3
 801429a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d011      	beq.n	80142c8 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80142a8:	4a17      	ldr	r2, [pc, #92]	; (8014308 <HAL_SPI_IRQHandler+0x1fa>)
 80142aa:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80142b0:	4618      	mov	r0, r3
 80142b2:	f7f3 fe14 	bl	8007ede <HAL_DMA_Abort_IT>
 80142b6:	4603      	mov	r3, r0
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d005      	beq.n	80142c8 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80142c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d016      	beq.n	80142fe <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80142d4:	4a0c      	ldr	r2, [pc, #48]	; (8014308 <HAL_SPI_IRQHandler+0x1fa>)
 80142d6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80142dc:	4618      	mov	r0, r3
 80142de:	f7f3 fdfe 	bl	8007ede <HAL_DMA_Abort_IT>
 80142e2:	4603      	mov	r3, r0
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d00a      	beq.n	80142fe <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80142ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80142f4:	e003      	b.n	80142fe <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80142f6:	6878      	ldr	r0, [r7, #4]
 80142f8:	f000 f844 	bl	8014384 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80142fc:	e000      	b.n	8014300 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80142fe:	bf00      	nop
    return;
 8014300:	bf00      	nop
  }
}
 8014302:	3720      	adds	r7, #32
 8014304:	46bd      	mov	sp, r7
 8014306:	bd80      	pop	{r7, pc}
 8014308:	08014655 	.word	0x08014655

0801430c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 801430c:	b480      	push	{r7}
 801430e:	b083      	sub	sp, #12
 8014310:	af00      	add	r7, sp, #0
 8014312:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8014314:	bf00      	nop
 8014316:	370c      	adds	r7, #12
 8014318:	46bd      	mov	sp, r7
 801431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801431e:	4770      	bx	lr

08014320 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8014320:	b480      	push	{r7}
 8014322:	b083      	sub	sp, #12
 8014324:	af00      	add	r7, sp, #0
 8014326:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8014328:	bf00      	nop
 801432a:	370c      	adds	r7, #12
 801432c:	46bd      	mov	sp, r7
 801432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014332:	4770      	bx	lr

08014334 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8014334:	b480      	push	{r7}
 8014336:	b083      	sub	sp, #12
 8014338:	af00      	add	r7, sp, #0
 801433a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 801433c:	bf00      	nop
 801433e:	370c      	adds	r7, #12
 8014340:	46bd      	mov	sp, r7
 8014342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014346:	4770      	bx	lr

08014348 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8014348:	b480      	push	{r7}
 801434a:	b083      	sub	sp, #12
 801434c:	af00      	add	r7, sp, #0
 801434e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8014350:	bf00      	nop
 8014352:	370c      	adds	r7, #12
 8014354:	46bd      	mov	sp, r7
 8014356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801435a:	4770      	bx	lr

0801435c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 801435c:	b480      	push	{r7}
 801435e:	b083      	sub	sp, #12
 8014360:	af00      	add	r7, sp, #0
 8014362:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8014364:	bf00      	nop
 8014366:	370c      	adds	r7, #12
 8014368:	46bd      	mov	sp, r7
 801436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801436e:	4770      	bx	lr

08014370 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8014370:	b480      	push	{r7}
 8014372:	b083      	sub	sp, #12
 8014374:	af00      	add	r7, sp, #0
 8014376:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8014378:	bf00      	nop
 801437a:	370c      	adds	r7, #12
 801437c:	46bd      	mov	sp, r7
 801437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014382:	4770      	bx	lr

08014384 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8014384:	b480      	push	{r7}
 8014386:	b083      	sub	sp, #12
 8014388:	af00      	add	r7, sp, #0
 801438a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 801438c:	bf00      	nop
 801438e:	370c      	adds	r7, #12
 8014390:	46bd      	mov	sp, r7
 8014392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014396:	4770      	bx	lr

08014398 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8014398:	b480      	push	{r7}
 801439a:	b083      	sub	sp, #12
 801439c:	af00      	add	r7, sp, #0
 801439e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 80143a0:	bf00      	nop
 80143a2:	370c      	adds	r7, #12
 80143a4:	46bd      	mov	sp, r7
 80143a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143aa:	4770      	bx	lr

080143ac <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80143ac:	b480      	push	{r7}
 80143ae:	b083      	sub	sp, #12
 80143b0:	af00      	add	r7, sp, #0
 80143b2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80143ba:	b2db      	uxtb	r3, r3
}
 80143bc:	4618      	mov	r0, r3
 80143be:	370c      	adds	r7, #12
 80143c0:	46bd      	mov	sp, r7
 80143c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143c6:	4770      	bx	lr

080143c8 <HAL_SPI_GetError>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI error code in bitmap format
  */
uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi)
{
 80143c8:	b480      	push	{r7}
 80143ca:	b083      	sub	sp, #12
 80143cc:	af00      	add	r7, sp, #0
 80143ce:	6078      	str	r0, [r7, #4]
  /* Return SPI ErrorCode */
  return hspi->ErrorCode;
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80143d4:	4618      	mov	r0, r3
 80143d6:	370c      	adds	r7, #12
 80143d8:	46bd      	mov	sp, r7
 80143da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143de:	4770      	bx	lr

080143e0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80143e0:	b580      	push	{r7, lr}
 80143e2:	b086      	sub	sp, #24
 80143e4:	af00      	add	r7, sp, #0
 80143e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80143ec:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80143ee:	f7f2 fa45 	bl	800687c <HAL_GetTick>
 80143f2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	681b      	ldr	r3, [r3, #0]
 80143f8:	681b      	ldr	r3, [r3, #0]
 80143fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80143fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014402:	d03b      	beq.n	801447c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8014404:	697b      	ldr	r3, [r7, #20]
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	685a      	ldr	r2, [r3, #4]
 801440a:	697b      	ldr	r3, [r7, #20]
 801440c:	681b      	ldr	r3, [r3, #0]
 801440e:	f022 0220 	bic.w	r2, r2, #32
 8014412:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8014414:	697b      	ldr	r3, [r7, #20]
 8014416:	681b      	ldr	r3, [r3, #0]
 8014418:	685a      	ldr	r2, [r3, #4]
 801441a:	697b      	ldr	r3, [r7, #20]
 801441c:	681b      	ldr	r3, [r3, #0]
 801441e:	f022 0202 	bic.w	r2, r2, #2
 8014422:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8014424:	693a      	ldr	r2, [r7, #16]
 8014426:	2164      	movs	r1, #100	; 0x64
 8014428:	6978      	ldr	r0, [r7, #20]
 801442a:	f000 fc2c 	bl	8014c86 <SPI_EndRxTxTransaction>
 801442e:	4603      	mov	r3, r0
 8014430:	2b00      	cmp	r3, #0
 8014432:	d005      	beq.n	8014440 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014434:	697b      	ldr	r3, [r7, #20]
 8014436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014438:	f043 0220 	orr.w	r2, r3, #32
 801443c:	697b      	ldr	r3, [r7, #20]
 801443e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8014440:	697b      	ldr	r3, [r7, #20]
 8014442:	689b      	ldr	r3, [r3, #8]
 8014444:	2b00      	cmp	r3, #0
 8014446:	d10a      	bne.n	801445e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014448:	2300      	movs	r3, #0
 801444a:	60fb      	str	r3, [r7, #12]
 801444c:	697b      	ldr	r3, [r7, #20]
 801444e:	681b      	ldr	r3, [r3, #0]
 8014450:	68db      	ldr	r3, [r3, #12]
 8014452:	60fb      	str	r3, [r7, #12]
 8014454:	697b      	ldr	r3, [r7, #20]
 8014456:	681b      	ldr	r3, [r3, #0]
 8014458:	689b      	ldr	r3, [r3, #8]
 801445a:	60fb      	str	r3, [r7, #12]
 801445c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 801445e:	697b      	ldr	r3, [r7, #20]
 8014460:	2200      	movs	r2, #0
 8014462:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8014464:	697b      	ldr	r3, [r7, #20]
 8014466:	2201      	movs	r2, #1
 8014468:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801446c:	697b      	ldr	r3, [r7, #20]
 801446e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014470:	2b00      	cmp	r3, #0
 8014472:	d003      	beq.n	801447c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8014474:	6978      	ldr	r0, [r7, #20]
 8014476:	f7ff ff85 	bl	8014384 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 801447a:	e002      	b.n	8014482 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 801447c:	6978      	ldr	r0, [r7, #20]
 801447e:	f7ff ff45 	bl	801430c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8014482:	3718      	adds	r7, #24
 8014484:	46bd      	mov	sp, r7
 8014486:	bd80      	pop	{r7, pc}

08014488 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8014488:	b580      	push	{r7, lr}
 801448a:	b084      	sub	sp, #16
 801448c:	af00      	add	r7, sp, #0
 801448e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014494:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014496:	f7f2 f9f1 	bl	800687c <HAL_GetTick>
 801449a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	681b      	ldr	r3, [r3, #0]
 80144a0:	681b      	ldr	r3, [r3, #0]
 80144a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80144a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80144aa:	d03b      	beq.n	8014524 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80144ac:	68fb      	ldr	r3, [r7, #12]
 80144ae:	681b      	ldr	r3, [r3, #0]
 80144b0:	685a      	ldr	r2, [r3, #4]
 80144b2:	68fb      	ldr	r3, [r7, #12]
 80144b4:	681b      	ldr	r3, [r3, #0]
 80144b6:	f022 0220 	bic.w	r2, r2, #32
 80144ba:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	689b      	ldr	r3, [r3, #8]
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d10d      	bne.n	80144e0 <SPI_DMAReceiveCplt+0x58>
 80144c4:	68fb      	ldr	r3, [r7, #12]
 80144c6:	685b      	ldr	r3, [r3, #4]
 80144c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80144cc:	d108      	bne.n	80144e0 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80144ce:	68fb      	ldr	r3, [r7, #12]
 80144d0:	681b      	ldr	r3, [r3, #0]
 80144d2:	685a      	ldr	r2, [r3, #4]
 80144d4:	68fb      	ldr	r3, [r7, #12]
 80144d6:	681b      	ldr	r3, [r3, #0]
 80144d8:	f022 0203 	bic.w	r2, r2, #3
 80144dc:	605a      	str	r2, [r3, #4]
 80144de:	e007      	b.n	80144f0 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80144e0:	68fb      	ldr	r3, [r7, #12]
 80144e2:	681b      	ldr	r3, [r3, #0]
 80144e4:	685a      	ldr	r2, [r3, #4]
 80144e6:	68fb      	ldr	r3, [r7, #12]
 80144e8:	681b      	ldr	r3, [r3, #0]
 80144ea:	f022 0201 	bic.w	r2, r2, #1
 80144ee:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80144f0:	68ba      	ldr	r2, [r7, #8]
 80144f2:	2164      	movs	r1, #100	; 0x64
 80144f4:	68f8      	ldr	r0, [r7, #12]
 80144f6:	f000 fb61 	bl	8014bbc <SPI_EndRxTransaction>
 80144fa:	4603      	mov	r3, r0
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d002      	beq.n	8014506 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8014500:	68fb      	ldr	r3, [r7, #12]
 8014502:	2220      	movs	r2, #32
 8014504:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8014506:	68fb      	ldr	r3, [r7, #12]
 8014508:	2200      	movs	r2, #0
 801450a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 801450c:	68fb      	ldr	r3, [r7, #12]
 801450e:	2201      	movs	r2, #1
 8014510:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014514:	68fb      	ldr	r3, [r7, #12]
 8014516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014518:	2b00      	cmp	r3, #0
 801451a:	d003      	beq.n	8014524 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 801451c:	68f8      	ldr	r0, [r7, #12]
 801451e:	f7ff ff31 	bl	8014384 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8014522:	e002      	b.n	801452a <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8014524:	68f8      	ldr	r0, [r7, #12]
 8014526:	f7ff fefb 	bl	8014320 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801452a:	3710      	adds	r7, #16
 801452c:	46bd      	mov	sp, r7
 801452e:	bd80      	pop	{r7, pc}

08014530 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8014530:	b580      	push	{r7, lr}
 8014532:	b084      	sub	sp, #16
 8014534:	af00      	add	r7, sp, #0
 8014536:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801453c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801453e:	f7f2 f99d 	bl	800687c <HAL_GetTick>
 8014542:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	681b      	ldr	r3, [r3, #0]
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801454e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014552:	d02f      	beq.n	80145b4 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8014554:	68fb      	ldr	r3, [r7, #12]
 8014556:	681b      	ldr	r3, [r3, #0]
 8014558:	685a      	ldr	r2, [r3, #4]
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	681b      	ldr	r3, [r3, #0]
 801455e:	f022 0220 	bic.w	r2, r2, #32
 8014562:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8014564:	68ba      	ldr	r2, [r7, #8]
 8014566:	2164      	movs	r1, #100	; 0x64
 8014568:	68f8      	ldr	r0, [r7, #12]
 801456a:	f000 fb8c 	bl	8014c86 <SPI_EndRxTxTransaction>
 801456e:	4603      	mov	r3, r0
 8014570:	2b00      	cmp	r3, #0
 8014572:	d005      	beq.n	8014580 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014574:	68fb      	ldr	r3, [r7, #12]
 8014576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014578:	f043 0220 	orr.w	r2, r3, #32
 801457c:	68fb      	ldr	r3, [r7, #12]
 801457e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	681b      	ldr	r3, [r3, #0]
 8014584:	685a      	ldr	r2, [r3, #4]
 8014586:	68fb      	ldr	r3, [r7, #12]
 8014588:	681b      	ldr	r3, [r3, #0]
 801458a:	f022 0203 	bic.w	r2, r2, #3
 801458e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8014590:	68fb      	ldr	r3, [r7, #12]
 8014592:	2200      	movs	r2, #0
 8014594:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8014596:	68fb      	ldr	r3, [r7, #12]
 8014598:	2200      	movs	r2, #0
 801459a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 801459c:	68fb      	ldr	r3, [r7, #12]
 801459e:	2201      	movs	r2, #1
 80145a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80145a4:	68fb      	ldr	r3, [r7, #12]
 80145a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d003      	beq.n	80145b4 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80145ac:	68f8      	ldr	r0, [r7, #12]
 80145ae:	f7ff fee9 	bl	8014384 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80145b2:	e002      	b.n	80145ba <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80145b4:	68f8      	ldr	r0, [r7, #12]
 80145b6:	f7ff febd 	bl	8014334 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80145ba:	3710      	adds	r7, #16
 80145bc:	46bd      	mov	sp, r7
 80145be:	bd80      	pop	{r7, pc}

080145c0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80145c0:	b580      	push	{r7, lr}
 80145c2:	b084      	sub	sp, #16
 80145c4:	af00      	add	r7, sp, #0
 80145c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80145cc:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80145ce:	68f8      	ldr	r0, [r7, #12]
 80145d0:	f7ff feba 	bl	8014348 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80145d4:	bf00      	nop
 80145d6:	3710      	adds	r7, #16
 80145d8:	46bd      	mov	sp, r7
 80145da:	bd80      	pop	{r7, pc}

080145dc <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80145dc:	b580      	push	{r7, lr}
 80145de:	b084      	sub	sp, #16
 80145e0:	af00      	add	r7, sp, #0
 80145e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80145e8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80145ea:	68f8      	ldr	r0, [r7, #12]
 80145ec:	f7ff feb6 	bl	801435c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80145f0:	bf00      	nop
 80145f2:	3710      	adds	r7, #16
 80145f4:	46bd      	mov	sp, r7
 80145f6:	bd80      	pop	{r7, pc}

080145f8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80145f8:	b580      	push	{r7, lr}
 80145fa:	b084      	sub	sp, #16
 80145fc:	af00      	add	r7, sp, #0
 80145fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014604:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8014606:	68f8      	ldr	r0, [r7, #12]
 8014608:	f7ff feb2 	bl	8014370 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801460c:	bf00      	nop
 801460e:	3710      	adds	r7, #16
 8014610:	46bd      	mov	sp, r7
 8014612:	bd80      	pop	{r7, pc}

08014614 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8014614:	b580      	push	{r7, lr}
 8014616:	b084      	sub	sp, #16
 8014618:	af00      	add	r7, sp, #0
 801461a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014620:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8014622:	68fb      	ldr	r3, [r7, #12]
 8014624:	681b      	ldr	r3, [r3, #0]
 8014626:	685a      	ldr	r2, [r3, #4]
 8014628:	68fb      	ldr	r3, [r7, #12]
 801462a:	681b      	ldr	r3, [r3, #0]
 801462c:	f022 0203 	bic.w	r2, r2, #3
 8014630:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8014632:	68fb      	ldr	r3, [r7, #12]
 8014634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014636:	f043 0210 	orr.w	r2, r3, #16
 801463a:	68fb      	ldr	r3, [r7, #12]
 801463c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 801463e:	68fb      	ldr	r3, [r7, #12]
 8014640:	2201      	movs	r2, #1
 8014642:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8014646:	68f8      	ldr	r0, [r7, #12]
 8014648:	f7ff fe9c 	bl	8014384 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801464c:	bf00      	nop
 801464e:	3710      	adds	r7, #16
 8014650:	46bd      	mov	sp, r7
 8014652:	bd80      	pop	{r7, pc}

08014654 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8014654:	b580      	push	{r7, lr}
 8014656:	b084      	sub	sp, #16
 8014658:	af00      	add	r7, sp, #0
 801465a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014660:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8014662:	68fb      	ldr	r3, [r7, #12]
 8014664:	2200      	movs	r2, #0
 8014666:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8014668:	68fb      	ldr	r3, [r7, #12]
 801466a:	2200      	movs	r2, #0
 801466c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801466e:	68f8      	ldr	r0, [r7, #12]
 8014670:	f7ff fe88 	bl	8014384 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8014674:	bf00      	nop
 8014676:	3710      	adds	r7, #16
 8014678:	46bd      	mov	sp, r7
 801467a:	bd80      	pop	{r7, pc}

0801467c <SPI_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 801467c:	b580      	push	{r7, lr}
 801467e:	b086      	sub	sp, #24
 8014680:	af00      	add	r7, sp, #0
 8014682:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014688:	617b      	str	r3, [r7, #20]
  __IO uint32_t count;

  hspi->hdmatx->XferAbortCallback = NULL;
 801468a:	697b      	ldr	r3, [r7, #20]
 801468c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801468e:	2200      	movs	r2, #0
 8014690:	651a      	str	r2, [r3, #80]	; 0x50
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8014692:	4b2d      	ldr	r3, [pc, #180]	; (8014748 <SPI_DMATxAbortCallback+0xcc>)
 8014694:	681b      	ldr	r3, [r3, #0]
 8014696:	4a2d      	ldr	r2, [pc, #180]	; (801474c <SPI_DMATxAbortCallback+0xd0>)
 8014698:	fba2 2303 	umull	r2, r3, r2, r3
 801469c:	0a5b      	lsrs	r3, r3, #9
 801469e:	2264      	movs	r2, #100	; 0x64
 80146a0:	fb02 f303 	mul.w	r3, r2, r3
 80146a4:	613b      	str	r3, [r7, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80146a6:	697b      	ldr	r3, [r7, #20]
 80146a8:	681b      	ldr	r3, [r3, #0]
 80146aa:	685a      	ldr	r2, [r3, #4]
 80146ac:	697b      	ldr	r3, [r7, #20]
 80146ae:	681b      	ldr	r3, [r3, #0]
 80146b0:	f022 0202 	bic.w	r2, r2, #2
 80146b4:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80146b6:	693b      	ldr	r3, [r7, #16]
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d106      	bne.n	80146ca <SPI_DMATxAbortCallback+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80146bc:	697b      	ldr	r3, [r7, #20]
 80146be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80146c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80146c4:	697b      	ldr	r3, [r7, #20]
 80146c6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80146c8:	e009      	b.n	80146de <SPI_DMATxAbortCallback+0x62>
    }
    count--;
 80146ca:	693b      	ldr	r3, [r7, #16]
 80146cc:	3b01      	subs	r3, #1
 80146ce:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80146d0:	697b      	ldr	r3, [r7, #20]
 80146d2:	681b      	ldr	r3, [r3, #0]
 80146d4:	689b      	ldr	r3, [r3, #8]
 80146d6:	f003 0302 	and.w	r3, r3, #2
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d0eb      	beq.n	80146b6 <SPI_DMATxAbortCallback+0x3a>

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmarx != NULL)
 80146de:	697b      	ldr	r3, [r7, #20]
 80146e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d004      	beq.n	80146f0 <SPI_DMATxAbortCallback+0x74>
  {
    if (hspi->hdmarx->XferAbortCallback != NULL)
 80146e6:	697b      	ldr	r3, [r7, #20]
 80146e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80146ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d126      	bne.n	801473e <SPI_DMATxAbortCallback+0xc2>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 80146f0:	697b      	ldr	r3, [r7, #20]
 80146f2:	2200      	movs	r2, #0
 80146f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80146f6:	697b      	ldr	r3, [r7, #20]
 80146f8:	2200      	movs	r2, #0
 80146fa:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 80146fc:	697b      	ldr	r3, [r7, #20]
 80146fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014700:	2b40      	cmp	r3, #64	; 0x40
 8014702:	d002      	beq.n	801470a <SPI_DMATxAbortCallback+0x8e>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8014704:	697b      	ldr	r3, [r7, #20]
 8014706:	2200      	movs	r2, #0
 8014708:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801470a:	2300      	movs	r3, #0
 801470c:	60bb      	str	r3, [r7, #8]
 801470e:	697b      	ldr	r3, [r7, #20]
 8014710:	681b      	ldr	r3, [r3, #0]
 8014712:	68db      	ldr	r3, [r3, #12]
 8014714:	60bb      	str	r3, [r7, #8]
 8014716:	697b      	ldr	r3, [r7, #20]
 8014718:	681b      	ldr	r3, [r3, #0]
 801471a:	689b      	ldr	r3, [r3, #8]
 801471c:	60bb      	str	r3, [r7, #8]
 801471e:	68bb      	ldr	r3, [r7, #8]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8014720:	2300      	movs	r3, #0
 8014722:	60fb      	str	r3, [r7, #12]
 8014724:	697b      	ldr	r3, [r7, #20]
 8014726:	681b      	ldr	r3, [r3, #0]
 8014728:	689b      	ldr	r3, [r3, #8]
 801472a:	60fb      	str	r3, [r7, #12]
 801472c:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 801472e:	697b      	ldr	r3, [r7, #20]
 8014730:	2201      	movs	r2, #1
 8014732:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 8014736:	6978      	ldr	r0, [r7, #20]
 8014738:	f7ff fe2e 	bl	8014398 <HAL_SPI_AbortCpltCallback>
 801473c:	e000      	b.n	8014740 <SPI_DMATxAbortCallback+0xc4>
      return;
 801473e:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8014740:	3718      	adds	r7, #24
 8014742:	46bd      	mov	sp, r7
 8014744:	bd80      	pop	{r7, pc}
 8014746:	bf00      	nop
 8014748:	20000058 	.word	0x20000058
 801474c:	057619f1 	.word	0x057619f1

08014750 <SPI_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8014750:	b580      	push	{r7, lr}
 8014752:	b086      	sub	sp, #24
 8014754:	af00      	add	r7, sp, #0
 8014756:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801475c:	617b      	str	r3, [r7, #20]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 801475e:	697b      	ldr	r3, [r7, #20]
 8014760:	681b      	ldr	r3, [r3, #0]
 8014762:	681a      	ldr	r2, [r3, #0]
 8014764:	697b      	ldr	r3, [r7, #20]
 8014766:	681b      	ldr	r3, [r3, #0]
 8014768:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801476c:	601a      	str	r2, [r3, #0]

  hspi->hdmarx->XferAbortCallback = NULL;
 801476e:	697b      	ldr	r3, [r7, #20]
 8014770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014772:	2200      	movs	r2, #0
 8014774:	651a      	str	r2, [r3, #80]	; 0x50

  /* Disable Rx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8014776:	697b      	ldr	r3, [r7, #20]
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	685a      	ldr	r2, [r3, #4]
 801477c:	697b      	ldr	r3, [r7, #20]
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	f022 0201 	bic.w	r2, r2, #1
 8014784:	605a      	str	r2, [r3, #4]

  /* Check Busy flag */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8014786:	f7f2 f879 	bl	800687c <HAL_GetTick>
 801478a:	4603      	mov	r3, r0
 801478c:	461a      	mov	r2, r3
 801478e:	2164      	movs	r1, #100	; 0x64
 8014790:	6978      	ldr	r0, [r7, #20]
 8014792:	f000 fa78 	bl	8014c86 <SPI_EndRxTxTransaction>
 8014796:	4603      	mov	r3, r0
 8014798:	2b00      	cmp	r3, #0
 801479a:	d005      	beq.n	80147a8 <SPI_DMARxAbortCallback+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801479c:	697b      	ldr	r3, [r7, #20]
 801479e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80147a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80147a4:	697b      	ldr	r3, [r7, #20]
 80147a6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmatx != NULL)
 80147a8:	697b      	ldr	r3, [r7, #20]
 80147aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d004      	beq.n	80147ba <SPI_DMARxAbortCallback+0x6a>
  {
    if (hspi->hdmatx->XferAbortCallback != NULL)
 80147b0:	697b      	ldr	r3, [r7, #20]
 80147b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80147b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d126      	bne.n	8014808 <SPI_DMARxAbortCallback+0xb8>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 80147ba:	697b      	ldr	r3, [r7, #20]
 80147bc:	2200      	movs	r2, #0
 80147be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80147c0:	697b      	ldr	r3, [r7, #20]
 80147c2:	2200      	movs	r2, #0
 80147c4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 80147c6:	697b      	ldr	r3, [r7, #20]
 80147c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80147ca:	2b40      	cmp	r3, #64	; 0x40
 80147cc:	d002      	beq.n	80147d4 <SPI_DMARxAbortCallback+0x84>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80147ce:	697b      	ldr	r3, [r7, #20]
 80147d0:	2200      	movs	r2, #0
 80147d2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80147d4:	2300      	movs	r3, #0
 80147d6:	60fb      	str	r3, [r7, #12]
 80147d8:	697b      	ldr	r3, [r7, #20]
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	68db      	ldr	r3, [r3, #12]
 80147de:	60fb      	str	r3, [r7, #12]
 80147e0:	697b      	ldr	r3, [r7, #20]
 80147e2:	681b      	ldr	r3, [r3, #0]
 80147e4:	689b      	ldr	r3, [r3, #8]
 80147e6:	60fb      	str	r3, [r7, #12]
 80147e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 80147ea:	2300      	movs	r3, #0
 80147ec:	613b      	str	r3, [r7, #16]
 80147ee:	697b      	ldr	r3, [r7, #20]
 80147f0:	681b      	ldr	r3, [r3, #0]
 80147f2:	689b      	ldr	r3, [r3, #8]
 80147f4:	613b      	str	r3, [r7, #16]
 80147f6:	693b      	ldr	r3, [r7, #16]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 80147f8:	697b      	ldr	r3, [r7, #20]
 80147fa:	2201      	movs	r2, #1
 80147fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 8014800:	6978      	ldr	r0, [r7, #20]
 8014802:	f7ff fdc9 	bl	8014398 <HAL_SPI_AbortCpltCallback>
 8014806:	e000      	b.n	801480a <SPI_DMARxAbortCallback+0xba>
      return;
 8014808:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801480a:	3718      	adds	r7, #24
 801480c:	46bd      	mov	sp, r7
 801480e:	bd80      	pop	{r7, pc}

08014810 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8014810:	b580      	push	{r7, lr}
 8014812:	b082      	sub	sp, #8
 8014814:	af00      	add	r7, sp, #0
 8014816:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	681b      	ldr	r3, [r3, #0]
 801481c:	f103 020c 	add.w	r2, r3, #12
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014824:	7812      	ldrb	r2, [r2, #0]
 8014826:	b2d2      	uxtb	r2, r2
 8014828:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801482e:	1c5a      	adds	r2, r3, #1
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014838:	b29b      	uxth	r3, r3
 801483a:	3b01      	subs	r3, #1
 801483c:	b29a      	uxth	r2, r3
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014846:	b29b      	uxth	r3, r3
 8014848:	2b00      	cmp	r3, #0
 801484a:	d10f      	bne.n	801486c <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	685a      	ldr	r2, [r3, #4]
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801485a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014860:	b29b      	uxth	r3, r3
 8014862:	2b00      	cmp	r3, #0
 8014864:	d102      	bne.n	801486c <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8014866:	6878      	ldr	r0, [r7, #4]
 8014868:	f000 fa4e 	bl	8014d08 <SPI_CloseRxTx_ISR>
    }
  }
}
 801486c:	bf00      	nop
 801486e:	3708      	adds	r7, #8
 8014870:	46bd      	mov	sp, r7
 8014872:	bd80      	pop	{r7, pc}

08014874 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8014874:	b580      	push	{r7, lr}
 8014876:	b082      	sub	sp, #8
 8014878:	af00      	add	r7, sp, #0
 801487a:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	330c      	adds	r3, #12
 8014886:	7812      	ldrb	r2, [r2, #0]
 8014888:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801488e:	1c5a      	adds	r2, r3, #1
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014898:	b29b      	uxth	r3, r3
 801489a:	3b01      	subs	r3, #1
 801489c:	b29a      	uxth	r2, r3
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80148a6:	b29b      	uxth	r3, r3
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d10f      	bne.n	80148cc <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	681b      	ldr	r3, [r3, #0]
 80148b0:	685a      	ldr	r2, [r3, #4]
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	681b      	ldr	r3, [r3, #0]
 80148b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80148ba:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80148c0:	b29b      	uxth	r3, r3
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d102      	bne.n	80148cc <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80148c6:	6878      	ldr	r0, [r7, #4]
 80148c8:	f000 fa1e 	bl	8014d08 <SPI_CloseRxTx_ISR>
    }
  }
}
 80148cc:	bf00      	nop
 80148ce:	3708      	adds	r7, #8
 80148d0:	46bd      	mov	sp, r7
 80148d2:	bd80      	pop	{r7, pc}

080148d4 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80148d4:	b580      	push	{r7, lr}
 80148d6:	b082      	sub	sp, #8
 80148d8:	af00      	add	r7, sp, #0
 80148da:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	681b      	ldr	r3, [r3, #0]
 80148e0:	68da      	ldr	r2, [r3, #12]
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80148e6:	b292      	uxth	r2, r2
 80148e8:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80148ee:	1c9a      	adds	r2, r3, #2
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80148f8:	b29b      	uxth	r3, r3
 80148fa:	3b01      	subs	r3, #1
 80148fc:	b29a      	uxth	r2, r3
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014906:	b29b      	uxth	r3, r3
 8014908:	2b00      	cmp	r3, #0
 801490a:	d10f      	bne.n	801492c <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	681b      	ldr	r3, [r3, #0]
 8014910:	685a      	ldr	r2, [r3, #4]
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	681b      	ldr	r3, [r3, #0]
 8014916:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801491a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014920:	b29b      	uxth	r3, r3
 8014922:	2b00      	cmp	r3, #0
 8014924:	d102      	bne.n	801492c <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8014926:	6878      	ldr	r0, [r7, #4]
 8014928:	f000 f9ee 	bl	8014d08 <SPI_CloseRxTx_ISR>
    }
  }
}
 801492c:	bf00      	nop
 801492e:	3708      	adds	r7, #8
 8014930:	46bd      	mov	sp, r7
 8014932:	bd80      	pop	{r7, pc}

08014934 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8014934:	b580      	push	{r7, lr}
 8014936:	b082      	sub	sp, #8
 8014938:	af00      	add	r7, sp, #0
 801493a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014940:	881a      	ldrh	r2, [r3, #0]
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	681b      	ldr	r3, [r3, #0]
 8014946:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801494c:	1c9a      	adds	r2, r3, #2
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014956:	b29b      	uxth	r3, r3
 8014958:	3b01      	subs	r3, #1
 801495a:	b29a      	uxth	r2, r3
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014964:	b29b      	uxth	r3, r3
 8014966:	2b00      	cmp	r3, #0
 8014968:	d10f      	bne.n	801498a <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	681b      	ldr	r3, [r3, #0]
 801496e:	685a      	ldr	r2, [r3, #4]
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	681b      	ldr	r3, [r3, #0]
 8014974:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014978:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801497e:	b29b      	uxth	r3, r3
 8014980:	2b00      	cmp	r3, #0
 8014982:	d102      	bne.n	801498a <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8014984:	6878      	ldr	r0, [r7, #4]
 8014986:	f000 f9bf 	bl	8014d08 <SPI_CloseRxTx_ISR>
    }
  }
}
 801498a:	bf00      	nop
 801498c:	3708      	adds	r7, #8
 801498e:	46bd      	mov	sp, r7
 8014990:	bd80      	pop	{r7, pc}

08014992 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8014992:	b580      	push	{r7, lr}
 8014994:	b082      	sub	sp, #8
 8014996:	af00      	add	r7, sp, #0
 8014998:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	681b      	ldr	r3, [r3, #0]
 801499e:	f103 020c 	add.w	r2, r3, #12
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80149a6:	7812      	ldrb	r2, [r2, #0]
 80149a8:	b2d2      	uxtb	r2, r2
 80149aa:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80149b0:	1c5a      	adds	r2, r3, #1
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80149ba:	b29b      	uxth	r3, r3
 80149bc:	3b01      	subs	r3, #1
 80149be:	b29a      	uxth	r2, r3
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80149c8:	b29b      	uxth	r3, r3
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d102      	bne.n	80149d4 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80149ce:	6878      	ldr	r0, [r7, #4]
 80149d0:	f000 fa0e 	bl	8014df0 <SPI_CloseRx_ISR>
  }
}
 80149d4:	bf00      	nop
 80149d6:	3708      	adds	r7, #8
 80149d8:	46bd      	mov	sp, r7
 80149da:	bd80      	pop	{r7, pc}

080149dc <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80149dc:	b580      	push	{r7, lr}
 80149de:	b082      	sub	sp, #8
 80149e0:	af00      	add	r7, sp, #0
 80149e2:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	68da      	ldr	r2, [r3, #12]
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80149ee:	b292      	uxth	r2, r2
 80149f0:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80149f6:	1c9a      	adds	r2, r3, #2
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014a00:	b29b      	uxth	r3, r3
 8014a02:	3b01      	subs	r3, #1
 8014a04:	b29a      	uxth	r2, r3
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014a0e:	b29b      	uxth	r3, r3
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	d102      	bne.n	8014a1a <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8014a14:	6878      	ldr	r0, [r7, #4]
 8014a16:	f000 f9eb 	bl	8014df0 <SPI_CloseRx_ISR>
  }
}
 8014a1a:	bf00      	nop
 8014a1c:	3708      	adds	r7, #8
 8014a1e:	46bd      	mov	sp, r7
 8014a20:	bd80      	pop	{r7, pc}

08014a22 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8014a22:	b580      	push	{r7, lr}
 8014a24:	b082      	sub	sp, #8
 8014a26:	af00      	add	r7, sp, #0
 8014a28:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	681b      	ldr	r3, [r3, #0]
 8014a32:	330c      	adds	r3, #12
 8014a34:	7812      	ldrb	r2, [r2, #0]
 8014a36:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a3c:	1c5a      	adds	r2, r3, #1
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014a46:	b29b      	uxth	r3, r3
 8014a48:	3b01      	subs	r3, #1
 8014a4a:	b29a      	uxth	r2, r3
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014a54:	b29b      	uxth	r3, r3
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d102      	bne.n	8014a60 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8014a5a:	6878      	ldr	r0, [r7, #4]
 8014a5c:	f000 fa07 	bl	8014e6e <SPI_CloseTx_ISR>
  }
}
 8014a60:	bf00      	nop
 8014a62:	3708      	adds	r7, #8
 8014a64:	46bd      	mov	sp, r7
 8014a66:	bd80      	pop	{r7, pc}

08014a68 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8014a68:	b580      	push	{r7, lr}
 8014a6a:	b082      	sub	sp, #8
 8014a6c:	af00      	add	r7, sp, #0
 8014a6e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a74:	881a      	ldrh	r2, [r3, #0]
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	681b      	ldr	r3, [r3, #0]
 8014a7a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a80:	1c9a      	adds	r2, r3, #2
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014a8a:	b29b      	uxth	r3, r3
 8014a8c:	3b01      	subs	r3, #1
 8014a8e:	b29a      	uxth	r2, r3
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014a98:	b29b      	uxth	r3, r3
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d102      	bne.n	8014aa4 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8014a9e:	6878      	ldr	r0, [r7, #4]
 8014aa0:	f000 f9e5 	bl	8014e6e <SPI_CloseTx_ISR>
  }
}
 8014aa4:	bf00      	nop
 8014aa6:	3708      	adds	r7, #8
 8014aa8:	46bd      	mov	sp, r7
 8014aaa:	bd80      	pop	{r7, pc}

08014aac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8014aac:	b580      	push	{r7, lr}
 8014aae:	b088      	sub	sp, #32
 8014ab0:	af00      	add	r7, sp, #0
 8014ab2:	60f8      	str	r0, [r7, #12]
 8014ab4:	60b9      	str	r1, [r7, #8]
 8014ab6:	603b      	str	r3, [r7, #0]
 8014ab8:	4613      	mov	r3, r2
 8014aba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8014abc:	f7f1 fede 	bl	800687c <HAL_GetTick>
 8014ac0:	4602      	mov	r2, r0
 8014ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ac4:	1a9b      	subs	r3, r3, r2
 8014ac6:	683a      	ldr	r2, [r7, #0]
 8014ac8:	4413      	add	r3, r2
 8014aca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8014acc:	f7f1 fed6 	bl	800687c <HAL_GetTick>
 8014ad0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8014ad2:	4b39      	ldr	r3, [pc, #228]	; (8014bb8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8014ad4:	681b      	ldr	r3, [r3, #0]
 8014ad6:	015b      	lsls	r3, r3, #5
 8014ad8:	0d1b      	lsrs	r3, r3, #20
 8014ada:	69fa      	ldr	r2, [r7, #28]
 8014adc:	fb02 f303 	mul.w	r3, r2, r3
 8014ae0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8014ae2:	e054      	b.n	8014b8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8014ae4:	683b      	ldr	r3, [r7, #0]
 8014ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014aea:	d050      	beq.n	8014b8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8014aec:	f7f1 fec6 	bl	800687c <HAL_GetTick>
 8014af0:	4602      	mov	r2, r0
 8014af2:	69bb      	ldr	r3, [r7, #24]
 8014af4:	1ad3      	subs	r3, r2, r3
 8014af6:	69fa      	ldr	r2, [r7, #28]
 8014af8:	429a      	cmp	r2, r3
 8014afa:	d902      	bls.n	8014b02 <SPI_WaitFlagStateUntilTimeout+0x56>
 8014afc:	69fb      	ldr	r3, [r7, #28]
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d13d      	bne.n	8014b7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8014b02:	68fb      	ldr	r3, [r7, #12]
 8014b04:	681b      	ldr	r3, [r3, #0]
 8014b06:	685a      	ldr	r2, [r3, #4]
 8014b08:	68fb      	ldr	r3, [r7, #12]
 8014b0a:	681b      	ldr	r3, [r3, #0]
 8014b0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8014b10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	685b      	ldr	r3, [r3, #4]
 8014b16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014b1a:	d111      	bne.n	8014b40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8014b1c:	68fb      	ldr	r3, [r7, #12]
 8014b1e:	689b      	ldr	r3, [r3, #8]
 8014b20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014b24:	d004      	beq.n	8014b30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8014b26:	68fb      	ldr	r3, [r7, #12]
 8014b28:	689b      	ldr	r3, [r3, #8]
 8014b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014b2e:	d107      	bne.n	8014b40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8014b30:	68fb      	ldr	r3, [r7, #12]
 8014b32:	681b      	ldr	r3, [r3, #0]
 8014b34:	681a      	ldr	r2, [r3, #0]
 8014b36:	68fb      	ldr	r3, [r7, #12]
 8014b38:	681b      	ldr	r3, [r3, #0]
 8014b3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014b3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8014b40:	68fb      	ldr	r3, [r7, #12]
 8014b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014b48:	d10f      	bne.n	8014b6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8014b4a:	68fb      	ldr	r3, [r7, #12]
 8014b4c:	681b      	ldr	r3, [r3, #0]
 8014b4e:	681a      	ldr	r2, [r3, #0]
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8014b58:	601a      	str	r2, [r3, #0]
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	681b      	ldr	r3, [r3, #0]
 8014b5e:	681a      	ldr	r2, [r3, #0]
 8014b60:	68fb      	ldr	r3, [r7, #12]
 8014b62:	681b      	ldr	r3, [r3, #0]
 8014b64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8014b68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8014b6a:	68fb      	ldr	r3, [r7, #12]
 8014b6c:	2201      	movs	r2, #1
 8014b6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	2200      	movs	r2, #0
 8014b76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8014b7a:	2303      	movs	r3, #3
 8014b7c:	e017      	b.n	8014bae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8014b7e:	697b      	ldr	r3, [r7, #20]
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	d101      	bne.n	8014b88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8014b84:	2300      	movs	r3, #0
 8014b86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8014b88:	697b      	ldr	r3, [r7, #20]
 8014b8a:	3b01      	subs	r3, #1
 8014b8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	681b      	ldr	r3, [r3, #0]
 8014b92:	689a      	ldr	r2, [r3, #8]
 8014b94:	68bb      	ldr	r3, [r7, #8]
 8014b96:	4013      	ands	r3, r2
 8014b98:	68ba      	ldr	r2, [r7, #8]
 8014b9a:	429a      	cmp	r2, r3
 8014b9c:	bf0c      	ite	eq
 8014b9e:	2301      	moveq	r3, #1
 8014ba0:	2300      	movne	r3, #0
 8014ba2:	b2db      	uxtb	r3, r3
 8014ba4:	461a      	mov	r2, r3
 8014ba6:	79fb      	ldrb	r3, [r7, #7]
 8014ba8:	429a      	cmp	r2, r3
 8014baa:	d19b      	bne.n	8014ae4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8014bac:	2300      	movs	r3, #0
}
 8014bae:	4618      	mov	r0, r3
 8014bb0:	3720      	adds	r7, #32
 8014bb2:	46bd      	mov	sp, r7
 8014bb4:	bd80      	pop	{r7, pc}
 8014bb6:	bf00      	nop
 8014bb8:	20000058 	.word	0x20000058

08014bbc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8014bbc:	b580      	push	{r7, lr}
 8014bbe:	b086      	sub	sp, #24
 8014bc0:	af02      	add	r7, sp, #8
 8014bc2:	60f8      	str	r0, [r7, #12]
 8014bc4:	60b9      	str	r1, [r7, #8]
 8014bc6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014bc8:	68fb      	ldr	r3, [r7, #12]
 8014bca:	685b      	ldr	r3, [r3, #4]
 8014bcc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014bd0:	d111      	bne.n	8014bf6 <SPI_EndRxTransaction+0x3a>
 8014bd2:	68fb      	ldr	r3, [r7, #12]
 8014bd4:	689b      	ldr	r3, [r3, #8]
 8014bd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014bda:	d004      	beq.n	8014be6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8014bdc:	68fb      	ldr	r3, [r7, #12]
 8014bde:	689b      	ldr	r3, [r3, #8]
 8014be0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014be4:	d107      	bne.n	8014bf6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	681b      	ldr	r3, [r3, #0]
 8014bea:	681a      	ldr	r2, [r3, #0]
 8014bec:	68fb      	ldr	r3, [r7, #12]
 8014bee:	681b      	ldr	r3, [r3, #0]
 8014bf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014bf4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	685b      	ldr	r3, [r3, #4]
 8014bfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014bfe:	d12a      	bne.n	8014c56 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8014c00:	68fb      	ldr	r3, [r7, #12]
 8014c02:	689b      	ldr	r3, [r3, #8]
 8014c04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014c08:	d012      	beq.n	8014c30 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	9300      	str	r3, [sp, #0]
 8014c0e:	68bb      	ldr	r3, [r7, #8]
 8014c10:	2200      	movs	r2, #0
 8014c12:	2180      	movs	r1, #128	; 0x80
 8014c14:	68f8      	ldr	r0, [r7, #12]
 8014c16:	f7ff ff49 	bl	8014aac <SPI_WaitFlagStateUntilTimeout>
 8014c1a:	4603      	mov	r3, r0
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d02d      	beq.n	8014c7c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014c20:	68fb      	ldr	r3, [r7, #12]
 8014c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014c24:	f043 0220 	orr.w	r2, r3, #32
 8014c28:	68fb      	ldr	r3, [r7, #12]
 8014c2a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8014c2c:	2303      	movs	r3, #3
 8014c2e:	e026      	b.n	8014c7e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	9300      	str	r3, [sp, #0]
 8014c34:	68bb      	ldr	r3, [r7, #8]
 8014c36:	2200      	movs	r2, #0
 8014c38:	2101      	movs	r1, #1
 8014c3a:	68f8      	ldr	r0, [r7, #12]
 8014c3c:	f7ff ff36 	bl	8014aac <SPI_WaitFlagStateUntilTimeout>
 8014c40:	4603      	mov	r3, r0
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d01a      	beq.n	8014c7c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014c4a:	f043 0220 	orr.w	r2, r3, #32
 8014c4e:	68fb      	ldr	r3, [r7, #12]
 8014c50:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8014c52:	2303      	movs	r3, #3
 8014c54:	e013      	b.n	8014c7e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	9300      	str	r3, [sp, #0]
 8014c5a:	68bb      	ldr	r3, [r7, #8]
 8014c5c:	2200      	movs	r2, #0
 8014c5e:	2101      	movs	r1, #1
 8014c60:	68f8      	ldr	r0, [r7, #12]
 8014c62:	f7ff ff23 	bl	8014aac <SPI_WaitFlagStateUntilTimeout>
 8014c66:	4603      	mov	r3, r0
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d007      	beq.n	8014c7c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014c6c:	68fb      	ldr	r3, [r7, #12]
 8014c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014c70:	f043 0220 	orr.w	r2, r3, #32
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8014c78:	2303      	movs	r3, #3
 8014c7a:	e000      	b.n	8014c7e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8014c7c:	2300      	movs	r3, #0
}
 8014c7e:	4618      	mov	r0, r3
 8014c80:	3710      	adds	r7, #16
 8014c82:	46bd      	mov	sp, r7
 8014c84:	bd80      	pop	{r7, pc}

08014c86 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8014c86:	b580      	push	{r7, lr}
 8014c88:	b088      	sub	sp, #32
 8014c8a:	af02      	add	r7, sp, #8
 8014c8c:	60f8      	str	r0, [r7, #12]
 8014c8e:	60b9      	str	r1, [r7, #8]
 8014c90:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8014c92:	4b1b      	ldr	r3, [pc, #108]	; (8014d00 <SPI_EndRxTxTransaction+0x7a>)
 8014c94:	681b      	ldr	r3, [r3, #0]
 8014c96:	4a1b      	ldr	r2, [pc, #108]	; (8014d04 <SPI_EndRxTxTransaction+0x7e>)
 8014c98:	fba2 2303 	umull	r2, r3, r2, r3
 8014c9c:	0d5b      	lsrs	r3, r3, #21
 8014c9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014ca2:	fb02 f303 	mul.w	r3, r2, r3
 8014ca6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	685b      	ldr	r3, [r3, #4]
 8014cac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014cb0:	d112      	bne.n	8014cd8 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	9300      	str	r3, [sp, #0]
 8014cb6:	68bb      	ldr	r3, [r7, #8]
 8014cb8:	2200      	movs	r2, #0
 8014cba:	2180      	movs	r1, #128	; 0x80
 8014cbc:	68f8      	ldr	r0, [r7, #12]
 8014cbe:	f7ff fef5 	bl	8014aac <SPI_WaitFlagStateUntilTimeout>
 8014cc2:	4603      	mov	r3, r0
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d016      	beq.n	8014cf6 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014ccc:	f043 0220 	orr.w	r2, r3, #32
 8014cd0:	68fb      	ldr	r3, [r7, #12]
 8014cd2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8014cd4:	2303      	movs	r3, #3
 8014cd6:	e00f      	b.n	8014cf8 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8014cd8:	697b      	ldr	r3, [r7, #20]
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d00a      	beq.n	8014cf4 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8014cde:	697b      	ldr	r3, [r7, #20]
 8014ce0:	3b01      	subs	r3, #1
 8014ce2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8014ce4:	68fb      	ldr	r3, [r7, #12]
 8014ce6:	681b      	ldr	r3, [r3, #0]
 8014ce8:	689b      	ldr	r3, [r3, #8]
 8014cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014cee:	2b80      	cmp	r3, #128	; 0x80
 8014cf0:	d0f2      	beq.n	8014cd8 <SPI_EndRxTxTransaction+0x52>
 8014cf2:	e000      	b.n	8014cf6 <SPI_EndRxTxTransaction+0x70>
        break;
 8014cf4:	bf00      	nop
  }

  return HAL_OK;
 8014cf6:	2300      	movs	r3, #0
}
 8014cf8:	4618      	mov	r0, r3
 8014cfa:	3718      	adds	r7, #24
 8014cfc:	46bd      	mov	sp, r7
 8014cfe:	bd80      	pop	{r7, pc}
 8014d00:	20000058 	.word	0x20000058
 8014d04:	165e9f81 	.word	0x165e9f81

08014d08 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8014d08:	b580      	push	{r7, lr}
 8014d0a:	b086      	sub	sp, #24
 8014d0c:	af00      	add	r7, sp, #0
 8014d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8014d10:	4b35      	ldr	r3, [pc, #212]	; (8014de8 <SPI_CloseRxTx_ISR+0xe0>)
 8014d12:	681b      	ldr	r3, [r3, #0]
 8014d14:	4a35      	ldr	r2, [pc, #212]	; (8014dec <SPI_CloseRxTx_ISR+0xe4>)
 8014d16:	fba2 2303 	umull	r2, r3, r2, r3
 8014d1a:	0a5b      	lsrs	r3, r3, #9
 8014d1c:	2264      	movs	r2, #100	; 0x64
 8014d1e:	fb02 f303 	mul.w	r3, r2, r3
 8014d22:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8014d24:	f7f1 fdaa 	bl	800687c <HAL_GetTick>
 8014d28:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	681b      	ldr	r3, [r3, #0]
 8014d2e:	685a      	ldr	r2, [r3, #4]
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	681b      	ldr	r3, [r3, #0]
 8014d34:	f022 0220 	bic.w	r2, r2, #32
 8014d38:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8014d3a:	693b      	ldr	r3, [r7, #16]
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	d106      	bne.n	8014d4e <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014d44:	f043 0220 	orr.w	r2, r3, #32
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8014d4c:	e009      	b.n	8014d62 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8014d4e:	693b      	ldr	r3, [r7, #16]
 8014d50:	3b01      	subs	r3, #1
 8014d52:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	681b      	ldr	r3, [r3, #0]
 8014d58:	689b      	ldr	r3, [r3, #8]
 8014d5a:	f003 0302 	and.w	r3, r3, #2
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	d0eb      	beq.n	8014d3a <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8014d62:	697a      	ldr	r2, [r7, #20]
 8014d64:	2164      	movs	r1, #100	; 0x64
 8014d66:	6878      	ldr	r0, [r7, #4]
 8014d68:	f7ff ff8d 	bl	8014c86 <SPI_EndRxTxTransaction>
 8014d6c:	4603      	mov	r3, r0
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d005      	beq.n	8014d7e <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014d76:	f043 0220 	orr.w	r2, r3, #32
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	689b      	ldr	r3, [r3, #8]
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d10a      	bne.n	8014d9c <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014d86:	2300      	movs	r3, #0
 8014d88:	60fb      	str	r3, [r7, #12]
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	681b      	ldr	r3, [r3, #0]
 8014d8e:	68db      	ldr	r3, [r3, #12]
 8014d90:	60fb      	str	r3, [r7, #12]
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	681b      	ldr	r3, [r3, #0]
 8014d96:	689b      	ldr	r3, [r3, #8]
 8014d98:	60fb      	str	r3, [r7, #12]
 8014d9a:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d115      	bne.n	8014dd0 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014daa:	b2db      	uxtb	r3, r3
 8014dac:	2b04      	cmp	r3, #4
 8014dae:	d107      	bne.n	8014dc0 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	2201      	movs	r2, #1
 8014db4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8014db8:	6878      	ldr	r0, [r7, #4]
 8014dba:	f7ff fab1 	bl	8014320 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8014dbe:	e00e      	b.n	8014dde <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	2201      	movs	r2, #1
 8014dc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8014dc8:	6878      	ldr	r0, [r7, #4]
 8014dca:	f7ff fab3 	bl	8014334 <HAL_SPI_TxRxCpltCallback>
}
 8014dce:	e006      	b.n	8014dde <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	2201      	movs	r2, #1
 8014dd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8014dd8:	6878      	ldr	r0, [r7, #4]
 8014dda:	f7ff fad3 	bl	8014384 <HAL_SPI_ErrorCallback>
}
 8014dde:	bf00      	nop
 8014de0:	3718      	adds	r7, #24
 8014de2:	46bd      	mov	sp, r7
 8014de4:	bd80      	pop	{r7, pc}
 8014de6:	bf00      	nop
 8014de8:	20000058 	.word	0x20000058
 8014dec:	057619f1 	.word	0x057619f1

08014df0 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8014df0:	b580      	push	{r7, lr}
 8014df2:	b084      	sub	sp, #16
 8014df4:	af00      	add	r7, sp, #0
 8014df6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	681b      	ldr	r3, [r3, #0]
 8014dfc:	685a      	ldr	r2, [r3, #4]
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	681b      	ldr	r3, [r3, #0]
 8014e02:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8014e06:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8014e08:	f7f1 fd38 	bl	800687c <HAL_GetTick>
 8014e0c:	4603      	mov	r3, r0
 8014e0e:	461a      	mov	r2, r3
 8014e10:	2164      	movs	r1, #100	; 0x64
 8014e12:	6878      	ldr	r0, [r7, #4]
 8014e14:	f7ff fed2 	bl	8014bbc <SPI_EndRxTransaction>
 8014e18:	4603      	mov	r3, r0
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d005      	beq.n	8014e2a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014e22:	f043 0220 	orr.w	r2, r3, #32
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	689b      	ldr	r3, [r3, #8]
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	d10a      	bne.n	8014e48 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014e32:	2300      	movs	r3, #0
 8014e34:	60fb      	str	r3, [r7, #12]
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	68db      	ldr	r3, [r3, #12]
 8014e3c:	60fb      	str	r3, [r7, #12]
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	681b      	ldr	r3, [r3, #0]
 8014e42:	689b      	ldr	r3, [r3, #8]
 8014e44:	60fb      	str	r3, [r7, #12]
 8014e46:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	2201      	movs	r2, #1
 8014e4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d103      	bne.n	8014e60 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8014e58:	6878      	ldr	r0, [r7, #4]
 8014e5a:	f7ff fa61 	bl	8014320 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8014e5e:	e002      	b.n	8014e66 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8014e60:	6878      	ldr	r0, [r7, #4]
 8014e62:	f7ff fa8f 	bl	8014384 <HAL_SPI_ErrorCallback>
}
 8014e66:	bf00      	nop
 8014e68:	3710      	adds	r7, #16
 8014e6a:	46bd      	mov	sp, r7
 8014e6c:	bd80      	pop	{r7, pc}

08014e6e <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8014e6e:	b580      	push	{r7, lr}
 8014e70:	b086      	sub	sp, #24
 8014e72:	af00      	add	r7, sp, #0
 8014e74:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8014e76:	4b2c      	ldr	r3, [pc, #176]	; (8014f28 <SPI_CloseTx_ISR+0xba>)
 8014e78:	681b      	ldr	r3, [r3, #0]
 8014e7a:	4a2c      	ldr	r2, [pc, #176]	; (8014f2c <SPI_CloseTx_ISR+0xbe>)
 8014e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8014e80:	0a5b      	lsrs	r3, r3, #9
 8014e82:	2264      	movs	r2, #100	; 0x64
 8014e84:	fb02 f303 	mul.w	r3, r2, r3
 8014e88:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014e8a:	f7f1 fcf7 	bl	800687c <HAL_GetTick>
 8014e8e:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8014e90:	693b      	ldr	r3, [r7, #16]
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d106      	bne.n	8014ea4 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014e9a:	f043 0220 	orr.w	r2, r3, #32
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8014ea2:	e009      	b.n	8014eb8 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8014ea4:	693b      	ldr	r3, [r7, #16]
 8014ea6:	3b01      	subs	r3, #1
 8014ea8:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	681b      	ldr	r3, [r3, #0]
 8014eae:	689b      	ldr	r3, [r3, #8]
 8014eb0:	f003 0302 	and.w	r3, r3, #2
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	d0eb      	beq.n	8014e90 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	681b      	ldr	r3, [r3, #0]
 8014ebc:	685a      	ldr	r2, [r3, #4]
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	681b      	ldr	r3, [r3, #0]
 8014ec2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8014ec6:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8014ec8:	697a      	ldr	r2, [r7, #20]
 8014eca:	2164      	movs	r1, #100	; 0x64
 8014ecc:	6878      	ldr	r0, [r7, #4]
 8014ece:	f7ff feda 	bl	8014c86 <SPI_EndRxTxTransaction>
 8014ed2:	4603      	mov	r3, r0
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d005      	beq.n	8014ee4 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014edc:	f043 0220 	orr.w	r2, r3, #32
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	689b      	ldr	r3, [r3, #8]
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d10a      	bne.n	8014f02 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014eec:	2300      	movs	r3, #0
 8014eee:	60fb      	str	r3, [r7, #12]
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	681b      	ldr	r3, [r3, #0]
 8014ef4:	68db      	ldr	r3, [r3, #12]
 8014ef6:	60fb      	str	r3, [r7, #12]
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	681b      	ldr	r3, [r3, #0]
 8014efc:	689b      	ldr	r3, [r3, #8]
 8014efe:	60fb      	str	r3, [r7, #12]
 8014f00:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	2201      	movs	r2, #1
 8014f06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d003      	beq.n	8014f1a <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8014f12:	6878      	ldr	r0, [r7, #4]
 8014f14:	f7ff fa36 	bl	8014384 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8014f18:	e002      	b.n	8014f20 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8014f1a:	6878      	ldr	r0, [r7, #4]
 8014f1c:	f7ff f9f6 	bl	801430c <HAL_SPI_TxCpltCallback>
}
 8014f20:	bf00      	nop
 8014f22:	3718      	adds	r7, #24
 8014f24:	46bd      	mov	sp, r7
 8014f26:	bd80      	pop	{r7, pc}
 8014f28:	20000058 	.word	0x20000058
 8014f2c:	057619f1 	.word	0x057619f1

08014f30 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 8014f30:	b480      	push	{r7}
 8014f32:	b085      	sub	sp, #20
 8014f34:	af00      	add	r7, sp, #0
 8014f36:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8014f38:	2300      	movs	r3, #0
 8014f3a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8014f3c:	4b1e      	ldr	r3, [pc, #120]	; (8014fb8 <SPI_AbortRx_ISR+0x88>)
 8014f3e:	681b      	ldr	r3, [r3, #0]
 8014f40:	4a1e      	ldr	r2, [pc, #120]	; (8014fbc <SPI_AbortRx_ISR+0x8c>)
 8014f42:	fba2 2303 	umull	r2, r3, r2, r3
 8014f46:	0a5b      	lsrs	r3, r3, #9
 8014f48:	2264      	movs	r2, #100	; 0x64
 8014f4a:	fb02 f303 	mul.w	r3, r2, r3
 8014f4e:	60bb      	str	r3, [r7, #8]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8014f50:	68bb      	ldr	r3, [r7, #8]
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d106      	bne.n	8014f64 <SPI_AbortRx_ISR+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014f5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8014f62:	e009      	b.n	8014f78 <SPI_AbortRx_ISR+0x48>
    }
    count--;
 8014f64:	68bb      	ldr	r3, [r7, #8]
 8014f66:	3b01      	subs	r3, #1
 8014f68:	60bb      	str	r3, [r7, #8]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	681b      	ldr	r3, [r3, #0]
 8014f6e:	689b      	ldr	r3, [r3, #8]
 8014f70:	f003 0302 	and.w	r3, r3, #2
 8014f74:	2b00      	cmp	r3, #0
 8014f76:	d0eb      	beq.n	8014f50 <SPI_AbortRx_ISR+0x20>

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	681b      	ldr	r3, [r3, #0]
 8014f7c:	681a      	ldr	r2, [r3, #0]
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	681b      	ldr	r3, [r3, #0]
 8014f82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014f86:	601a      	str	r2, [r3, #0]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	681b      	ldr	r3, [r3, #0]
 8014f8c:	685a      	ldr	r2, [r3, #4]
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	681b      	ldr	r3, [r3, #0]
 8014f92:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8014f96:	605a      	str	r2, [r3, #4]

  /* Flush Data Register by a blank read */
  tmpreg = READ_REG(hspi->Instance->DR);
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	681b      	ldr	r3, [r3, #0]
 8014f9c:	68db      	ldr	r3, [r3, #12]
 8014f9e:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8014fa0:	68fb      	ldr	r3, [r7, #12]

  hspi->State = HAL_SPI_STATE_ABORT;
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	2207      	movs	r2, #7
 8014fa6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 8014faa:	bf00      	nop
 8014fac:	3714      	adds	r7, #20
 8014fae:	46bd      	mov	sp, r7
 8014fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fb4:	4770      	bx	lr
 8014fb6:	bf00      	nop
 8014fb8:	20000058 	.word	0x20000058
 8014fbc:	057619f1 	.word	0x057619f1

08014fc0 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 8014fc0:	b480      	push	{r7}
 8014fc2:	b083      	sub	sp, #12
 8014fc4:	af00      	add	r7, sp, #0
 8014fc6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	681b      	ldr	r3, [r3, #0]
 8014fcc:	685a      	ldr	r2, [r3, #4]
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	681b      	ldr	r3, [r3, #0]
 8014fd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014fd6:	605a      	str	r2, [r3, #4]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	681b      	ldr	r3, [r3, #0]
 8014fdc:	681a      	ldr	r2, [r3, #0]
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	681b      	ldr	r3, [r3, #0]
 8014fe2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014fe6:	601a      	str	r2, [r3, #0]

  hspi->State = HAL_SPI_STATE_ABORT;
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	2207      	movs	r2, #7
 8014fec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 8014ff0:	bf00      	nop
 8014ff2:	370c      	adds	r7, #12
 8014ff4:	46bd      	mov	sp, r7
 8014ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ffa:	4770      	bx	lr

08014ffc <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8014ffc:	b580      	push	{r7, lr}
 8014ffe:	b084      	sub	sp, #16
 8015000:	af00      	add	r7, sp, #0
 8015002:	60f8      	str	r0, [r7, #12]
 8015004:	60b9      	str	r1, [r7, #8]
 8015006:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8015008:	68fb      	ldr	r3, [r7, #12]
 801500a:	2b00      	cmp	r3, #0
 801500c:	d101      	bne.n	8015012 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 801500e:	2301      	movs	r3, #1
 8015010:	e034      	b.n	801507c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8015012:	68fb      	ldr	r3, [r7, #12]
 8015014:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8015018:	b2db      	uxtb	r3, r3
 801501a:	2b00      	cmp	r3, #0
 801501c:	d106      	bne.n	801502c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 801501e:	68fb      	ldr	r3, [r7, #12]
 8015020:	2200      	movs	r2, #0
 8015022:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8015026:	68f8      	ldr	r0, [r7, #12]
 8015028:	f7f0 ff56 	bl	8005ed8 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 801502c:	68fb      	ldr	r3, [r7, #12]
 801502e:	681a      	ldr	r2, [r3, #0]
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	3308      	adds	r3, #8
 8015034:	4619      	mov	r1, r3
 8015036:	4610      	mov	r0, r2
 8015038:	f003 f9a0 	bl	801837c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 801503c:	68fb      	ldr	r3, [r7, #12]
 801503e:	6818      	ldr	r0, [r3, #0]
 8015040:	68fb      	ldr	r3, [r7, #12]
 8015042:	689b      	ldr	r3, [r3, #8]
 8015044:	461a      	mov	r2, r3
 8015046:	68b9      	ldr	r1, [r7, #8]
 8015048:	f003 fa1e 	bl	8018488 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 801504c:	68fb      	ldr	r3, [r7, #12]
 801504e:	6858      	ldr	r0, [r3, #4]
 8015050:	68fb      	ldr	r3, [r7, #12]
 8015052:	689a      	ldr	r2, [r3, #8]
 8015054:	68fb      	ldr	r3, [r7, #12]
 8015056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015058:	6879      	ldr	r1, [r7, #4]
 801505a:	f003 fa52 	bl	8018502 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 801505e:	68fb      	ldr	r3, [r7, #12]
 8015060:	681b      	ldr	r3, [r3, #0]
 8015062:	68fa      	ldr	r2, [r7, #12]
 8015064:	6892      	ldr	r2, [r2, #8]
 8015066:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801506a:	68fb      	ldr	r3, [r7, #12]
 801506c:	681b      	ldr	r3, [r3, #0]
 801506e:	68fa      	ldr	r2, [r7, #12]
 8015070:	6892      	ldr	r2, [r2, #8]
 8015072:	f041 0101 	orr.w	r1, r1, #1
 8015076:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 801507a:	2300      	movs	r3, #0
}
 801507c:	4618      	mov	r0, r3
 801507e:	3710      	adds	r7, #16
 8015080:	46bd      	mov	sp, r7
 8015082:	bd80      	pop	{r7, pc}

08015084 <HAL_SRAM_DeInit>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_SRAM_DeInit(SRAM_HandleTypeDef *hsram)
{ 
 8015084:	b580      	push	{r7, lr}
 8015086:	b082      	sub	sp, #8
 8015088:	af00      	add	r7, sp, #0
 801508a:	6078      	str	r0, [r7, #4]

  /* DeInit the low level hardware */
  hsram->MspDeInitCallback(hsram);
#else
  /* De-Initialize the low level hardware (MSP) */
  HAL_SRAM_MspDeInit(hsram);
 801508c:	6878      	ldr	r0, [r7, #4]
 801508e:	f7f0 ff51 	bl	8005f34 <HAL_SRAM_MspDeInit>
#endif

  /* Configure the SRAM registers with their reset values */
  FMC_NORSRAM_DeInit(hsram->Instance, hsram->Extended, hsram->Init.NSBank);
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	6818      	ldr	r0, [r3, #0]
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	6859      	ldr	r1, [r3, #4]
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	689b      	ldr	r3, [r3, #8]
 801509e:	461a      	mov	r2, r3
 80150a0:	f003 f9be 	bl	8018420 <FSMC_NORSRAM_DeInit>

  hsram->State = HAL_SRAM_STATE_RESET;
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	2200      	movs	r2, #0
 80150a8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Release Lock */
  __HAL_UNLOCK(hsram);
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	2200      	movs	r2, #0
 80150b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 80150b4:	2300      	movs	r3, #0
}
 80150b6:	4618      	mov	r0, r3
 80150b8:	3708      	adds	r7, #8
 80150ba:	46bd      	mov	sp, r7
 80150bc:	bd80      	pop	{r7, pc}

080150be <HAL_SRAM_DMA_XferCpltCallback>:
  * @param  hdma pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval None
  */
__weak void HAL_SRAM_DMA_XferCpltCallback(DMA_HandleTypeDef *hdma)
{
 80150be:	b480      	push	{r7}
 80150c0:	b083      	sub	sp, #12
 80150c2:	af00      	add	r7, sp, #0
 80150c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdma);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SRAM_DMA_XferCpltCallback could be implemented in the user file
   */ 
}
 80150c6:	bf00      	nop
 80150c8:	370c      	adds	r7, #12
 80150ca:	46bd      	mov	sp, r7
 80150cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150d0:	4770      	bx	lr

080150d2 <HAL_SRAM_DMA_XferErrorCallback>:
  * @param  hdma pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval None
  */
__weak void HAL_SRAM_DMA_XferErrorCallback(DMA_HandleTypeDef *hdma)
{
 80150d2:	b480      	push	{r7}
 80150d4:	b083      	sub	sp, #12
 80150d6:	af00      	add	r7, sp, #0
 80150d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdma);
    /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SRAM_DMA_XferErrorCallback could be implemented in the user file
   */ 
}
 80150da:	bf00      	nop
 80150dc:	370c      	adds	r7, #12
 80150de:	46bd      	mov	sp, r7
 80150e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150e4:	4770      	bx	lr

080150e6 <HAL_SRAM_Read_8b>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Read_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pDstBuffer, uint32_t BufferSize)
{
 80150e6:	b480      	push	{r7}
 80150e8:	b087      	sub	sp, #28
 80150ea:	af00      	add	r7, sp, #0
 80150ec:	60f8      	str	r0, [r7, #12]
 80150ee:	60b9      	str	r1, [r7, #8]
 80150f0:	607a      	str	r2, [r7, #4]
 80150f2:	603b      	str	r3, [r7, #0]
  __IO uint8_t * pSramAddress = (uint8_t *)pAddress;
 80150f4:	68bb      	ldr	r3, [r7, #8]
 80150f6:	617b      	str	r3, [r7, #20]
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 80150f8:	68fb      	ldr	r3, [r7, #12]
 80150fa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80150fe:	2b01      	cmp	r3, #1
 8015100:	d101      	bne.n	8015106 <HAL_SRAM_Read_8b+0x20>
 8015102:	2302      	movs	r3, #2
 8015104:	e022      	b.n	801514c <HAL_SRAM_Read_8b+0x66>
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	2201      	movs	r2, #1
 801510a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY;  
 801510e:	68fb      	ldr	r3, [r7, #12]
 8015110:	2202      	movs	r2, #2
 8015112:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Read data from memory */
  for(; BufferSize != 0U; BufferSize--)
 8015116:	e00d      	b.n	8015134 <HAL_SRAM_Read_8b+0x4e>
  {
    *pDstBuffer = *(__IO uint8_t *)pSramAddress;
 8015118:	697b      	ldr	r3, [r7, #20]
 801511a:	781b      	ldrb	r3, [r3, #0]
 801511c:	b2da      	uxtb	r2, r3
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	701a      	strb	r2, [r3, #0]
    pDstBuffer++;
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	3301      	adds	r3, #1
 8015126:	607b      	str	r3, [r7, #4]
    pSramAddress++;
 8015128:	697b      	ldr	r3, [r7, #20]
 801512a:	3301      	adds	r3, #1
 801512c:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0U; BufferSize--)
 801512e:	683b      	ldr	r3, [r7, #0]
 8015130:	3b01      	subs	r3, #1
 8015132:	603b      	str	r3, [r7, #0]
 8015134:	683b      	ldr	r3, [r7, #0]
 8015136:	2b00      	cmp	r3, #0
 8015138:	d1ee      	bne.n	8015118 <HAL_SRAM_Read_8b+0x32>
  }
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;    
 801513a:	68fb      	ldr	r3, [r7, #12]
 801513c:	2201      	movs	r2, #1
 801513e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process unlocked */
  __HAL_UNLOCK(hsram); 
 8015142:	68fb      	ldr	r3, [r7, #12]
 8015144:	2200      	movs	r2, #0
 8015146:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;   
 801514a:	2300      	movs	r3, #0
}
 801514c:	4618      	mov	r0, r3
 801514e:	371c      	adds	r7, #28
 8015150:	46bd      	mov	sp, r7
 8015152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015156:	4770      	bx	lr

08015158 <HAL_SRAM_Write_8b>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pSrcBuffer, uint32_t BufferSize)
{
 8015158:	b480      	push	{r7}
 801515a:	b087      	sub	sp, #28
 801515c:	af00      	add	r7, sp, #0
 801515e:	60f8      	str	r0, [r7, #12]
 8015160:	60b9      	str	r1, [r7, #8]
 8015162:	607a      	str	r2, [r7, #4]
 8015164:	603b      	str	r3, [r7, #0]
  __IO uint8_t * pSramAddress = (uint8_t *)pAddress;
 8015166:	68bb      	ldr	r3, [r7, #8]
 8015168:	617b      	str	r3, [r7, #20]
  
  /* Check the SRAM controller state */
  if(hsram->State == HAL_SRAM_STATE_PROTECTED)
 801516a:	68fb      	ldr	r3, [r7, #12]
 801516c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8015170:	b2db      	uxtb	r3, r3
 8015172:	2b04      	cmp	r3, #4
 8015174:	d101      	bne.n	801517a <HAL_SRAM_Write_8b+0x22>
  {
    return  HAL_ERROR; 
 8015176:	2301      	movs	r3, #1
 8015178:	e028      	b.n	80151cc <HAL_SRAM_Write_8b+0x74>
  }
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 801517a:	68fb      	ldr	r3, [r7, #12]
 801517c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015180:	2b01      	cmp	r3, #1
 8015182:	d101      	bne.n	8015188 <HAL_SRAM_Write_8b+0x30>
 8015184:	2302      	movs	r3, #2
 8015186:	e021      	b.n	80151cc <HAL_SRAM_Write_8b+0x74>
 8015188:	68fb      	ldr	r3, [r7, #12]
 801518a:	2201      	movs	r2, #1
 801518c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY; 
 8015190:	68fb      	ldr	r3, [r7, #12]
 8015192:	2202      	movs	r2, #2
 8015194:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Write data to memory */
  for(; BufferSize != 0U; BufferSize--)
 8015198:	e00c      	b.n	80151b4 <HAL_SRAM_Write_8b+0x5c>
  {
    *(__IO uint8_t *)pSramAddress = *pSrcBuffer; 
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	781a      	ldrb	r2, [r3, #0]
 801519e:	697b      	ldr	r3, [r7, #20]
 80151a0:	701a      	strb	r2, [r3, #0]
    pSrcBuffer++;
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	3301      	adds	r3, #1
 80151a6:	607b      	str	r3, [r7, #4]
    pSramAddress++;    
 80151a8:	697b      	ldr	r3, [r7, #20]
 80151aa:	3301      	adds	r3, #1
 80151ac:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0U; BufferSize--)
 80151ae:	683b      	ldr	r3, [r7, #0]
 80151b0:	3b01      	subs	r3, #1
 80151b2:	603b      	str	r3, [r7, #0]
 80151b4:	683b      	ldr	r3, [r7, #0]
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	d1ef      	bne.n	801519a <HAL_SRAM_Write_8b+0x42>
  }    

  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY; 
 80151ba:	68fb      	ldr	r3, [r7, #12]
 80151bc:	2201      	movs	r2, #1
 80151be:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram);
 80151c2:	68fb      	ldr	r3, [r7, #12]
 80151c4:	2200      	movs	r2, #0
 80151c6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;   
 80151ca:	2300      	movs	r3, #0
}
 80151cc:	4618      	mov	r0, r3
 80151ce:	371c      	adds	r7, #28
 80151d0:	46bd      	mov	sp, r7
 80151d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151d6:	4770      	bx	lr

080151d8 <HAL_SRAM_Read_16b>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Read_16b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint16_t *pDstBuffer, uint32_t BufferSize)
{
 80151d8:	b480      	push	{r7}
 80151da:	b087      	sub	sp, #28
 80151dc:	af00      	add	r7, sp, #0
 80151de:	60f8      	str	r0, [r7, #12]
 80151e0:	60b9      	str	r1, [r7, #8]
 80151e2:	607a      	str	r2, [r7, #4]
 80151e4:	603b      	str	r3, [r7, #0]
  __IO uint16_t * pSramAddress = (uint16_t *)pAddress;
 80151e6:	68bb      	ldr	r3, [r7, #8]
 80151e8:	617b      	str	r3, [r7, #20]
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 80151ea:	68fb      	ldr	r3, [r7, #12]
 80151ec:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80151f0:	2b01      	cmp	r3, #1
 80151f2:	d101      	bne.n	80151f8 <HAL_SRAM_Read_16b+0x20>
 80151f4:	2302      	movs	r3, #2
 80151f6:	e022      	b.n	801523e <HAL_SRAM_Read_16b+0x66>
 80151f8:	68fb      	ldr	r3, [r7, #12]
 80151fa:	2201      	movs	r2, #1
 80151fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY;  
 8015200:	68fb      	ldr	r3, [r7, #12]
 8015202:	2202      	movs	r2, #2
 8015204:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Read data from memory */
  for(; BufferSize != 0U; BufferSize--)
 8015208:	e00d      	b.n	8015226 <HAL_SRAM_Read_16b+0x4e>
  {
    *pDstBuffer = *(__IO uint16_t *)pSramAddress;
 801520a:	697b      	ldr	r3, [r7, #20]
 801520c:	881b      	ldrh	r3, [r3, #0]
 801520e:	b29a      	uxth	r2, r3
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	801a      	strh	r2, [r3, #0]
    pDstBuffer++;
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	3302      	adds	r3, #2
 8015218:	607b      	str	r3, [r7, #4]
    pSramAddress++;
 801521a:	697b      	ldr	r3, [r7, #20]
 801521c:	3302      	adds	r3, #2
 801521e:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0U; BufferSize--)
 8015220:	683b      	ldr	r3, [r7, #0]
 8015222:	3b01      	subs	r3, #1
 8015224:	603b      	str	r3, [r7, #0]
 8015226:	683b      	ldr	r3, [r7, #0]
 8015228:	2b00      	cmp	r3, #0
 801522a:	d1ee      	bne.n	801520a <HAL_SRAM_Read_16b+0x32>
  }
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;    
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	2201      	movs	r2, #1
 8015230:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process unlocked */
  __HAL_UNLOCK(hsram); 
 8015234:	68fb      	ldr	r3, [r7, #12]
 8015236:	2200      	movs	r2, #0
 8015238:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;  
 801523c:	2300      	movs	r3, #0
}
 801523e:	4618      	mov	r0, r3
 8015240:	371c      	adds	r7, #28
 8015242:	46bd      	mov	sp, r7
 8015244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015248:	4770      	bx	lr

0801524a <HAL_SRAM_Write_16b>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_16b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint16_t *pSrcBuffer, uint32_t BufferSize)
{
 801524a:	b480      	push	{r7}
 801524c:	b087      	sub	sp, #28
 801524e:	af00      	add	r7, sp, #0
 8015250:	60f8      	str	r0, [r7, #12]
 8015252:	60b9      	str	r1, [r7, #8]
 8015254:	607a      	str	r2, [r7, #4]
 8015256:	603b      	str	r3, [r7, #0]
  __IO uint16_t * pSramAddress = (uint16_t *)pAddress; 
 8015258:	68bb      	ldr	r3, [r7, #8]
 801525a:	617b      	str	r3, [r7, #20]
  
  /* Check the SRAM controller state */
  if(hsram->State == HAL_SRAM_STATE_PROTECTED)
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8015262:	b2db      	uxtb	r3, r3
 8015264:	2b04      	cmp	r3, #4
 8015266:	d101      	bne.n	801526c <HAL_SRAM_Write_16b+0x22>
  {
    return  HAL_ERROR; 
 8015268:	2301      	movs	r3, #1
 801526a:	e028      	b.n	80152be <HAL_SRAM_Write_16b+0x74>
  }
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 801526c:	68fb      	ldr	r3, [r7, #12]
 801526e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015272:	2b01      	cmp	r3, #1
 8015274:	d101      	bne.n	801527a <HAL_SRAM_Write_16b+0x30>
 8015276:	2302      	movs	r3, #2
 8015278:	e021      	b.n	80152be <HAL_SRAM_Write_16b+0x74>
 801527a:	68fb      	ldr	r3, [r7, #12]
 801527c:	2201      	movs	r2, #1
 801527e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY; 
 8015282:	68fb      	ldr	r3, [r7, #12]
 8015284:	2202      	movs	r2, #2
 8015286:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Write data to memory */
  for(; BufferSize != 0U; BufferSize--)
 801528a:	e00c      	b.n	80152a6 <HAL_SRAM_Write_16b+0x5c>
  {
    *(__IO uint16_t *)pSramAddress = *pSrcBuffer; 
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	881a      	ldrh	r2, [r3, #0]
 8015290:	697b      	ldr	r3, [r7, #20]
 8015292:	801a      	strh	r2, [r3, #0]
    pSrcBuffer++;
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	3302      	adds	r3, #2
 8015298:	607b      	str	r3, [r7, #4]
    pSramAddress++;    
 801529a:	697b      	ldr	r3, [r7, #20]
 801529c:	3302      	adds	r3, #2
 801529e:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0U; BufferSize--)
 80152a0:	683b      	ldr	r3, [r7, #0]
 80152a2:	3b01      	subs	r3, #1
 80152a4:	603b      	str	r3, [r7, #0]
 80152a6:	683b      	ldr	r3, [r7, #0]
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	d1ef      	bne.n	801528c <HAL_SRAM_Write_16b+0x42>
  }    

  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY; 
 80152ac:	68fb      	ldr	r3, [r7, #12]
 80152ae:	2201      	movs	r2, #1
 80152b0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram);
 80152b4:	68fb      	ldr	r3, [r7, #12]
 80152b6:	2200      	movs	r2, #0
 80152b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;  
 80152bc:	2300      	movs	r3, #0
}
 80152be:	4618      	mov	r0, r3
 80152c0:	371c      	adds	r7, #28
 80152c2:	46bd      	mov	sp, r7
 80152c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152c8:	4770      	bx	lr

080152ca <HAL_SRAM_Read_32b>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Read_32b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pDstBuffer, uint32_t BufferSize)
{
 80152ca:	b480      	push	{r7}
 80152cc:	b085      	sub	sp, #20
 80152ce:	af00      	add	r7, sp, #0
 80152d0:	60f8      	str	r0, [r7, #12]
 80152d2:	60b9      	str	r1, [r7, #8]
 80152d4:	607a      	str	r2, [r7, #4]
 80152d6:	603b      	str	r3, [r7, #0]
  /* Process Locked */
  __HAL_LOCK(hsram);
 80152d8:	68fb      	ldr	r3, [r7, #12]
 80152da:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80152de:	2b01      	cmp	r3, #1
 80152e0:	d101      	bne.n	80152e6 <HAL_SRAM_Read_32b+0x1c>
 80152e2:	2302      	movs	r3, #2
 80152e4:	e021      	b.n	801532a <HAL_SRAM_Read_32b+0x60>
 80152e6:	68fb      	ldr	r3, [r7, #12]
 80152e8:	2201      	movs	r2, #1
 80152ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY;  
 80152ee:	68fb      	ldr	r3, [r7, #12]
 80152f0:	2202      	movs	r2, #2
 80152f2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Read data from memory */
  for(; BufferSize != 0U; BufferSize--)
 80152f6:	e00c      	b.n	8015312 <HAL_SRAM_Read_32b+0x48>
  {
    *pDstBuffer = *(__IO uint32_t *)pAddress;
 80152f8:	68bb      	ldr	r3, [r7, #8]
 80152fa:	681a      	ldr	r2, [r3, #0]
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	601a      	str	r2, [r3, #0]
    pDstBuffer++;
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	3304      	adds	r3, #4
 8015304:	607b      	str	r3, [r7, #4]
    pAddress++;
 8015306:	68bb      	ldr	r3, [r7, #8]
 8015308:	3304      	adds	r3, #4
 801530a:	60bb      	str	r3, [r7, #8]
  for(; BufferSize != 0U; BufferSize--)
 801530c:	683b      	ldr	r3, [r7, #0]
 801530e:	3b01      	subs	r3, #1
 8015310:	603b      	str	r3, [r7, #0]
 8015312:	683b      	ldr	r3, [r7, #0]
 8015314:	2b00      	cmp	r3, #0
 8015316:	d1ef      	bne.n	80152f8 <HAL_SRAM_Read_32b+0x2e>
  }
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;    
 8015318:	68fb      	ldr	r3, [r7, #12]
 801531a:	2201      	movs	r2, #1
 801531c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process unlocked */
  __HAL_UNLOCK(hsram); 
 8015320:	68fb      	ldr	r3, [r7, #12]
 8015322:	2200      	movs	r2, #0
 8015324:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;  
 8015328:	2300      	movs	r3, #0
}
 801532a:	4618      	mov	r0, r3
 801532c:	3714      	adds	r7, #20
 801532e:	46bd      	mov	sp, r7
 8015330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015334:	4770      	bx	lr

08015336 <HAL_SRAM_Write_32b>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_32b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pSrcBuffer, uint32_t BufferSize)
{
 8015336:	b480      	push	{r7}
 8015338:	b085      	sub	sp, #20
 801533a:	af00      	add	r7, sp, #0
 801533c:	60f8      	str	r0, [r7, #12]
 801533e:	60b9      	str	r1, [r7, #8]
 8015340:	607a      	str	r2, [r7, #4]
 8015342:	603b      	str	r3, [r7, #0]
  /* Check the SRAM controller state */
  if(hsram->State == HAL_SRAM_STATE_PROTECTED)
 8015344:	68fb      	ldr	r3, [r7, #12]
 8015346:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 801534a:	b2db      	uxtb	r3, r3
 801534c:	2b04      	cmp	r3, #4
 801534e:	d101      	bne.n	8015354 <HAL_SRAM_Write_32b+0x1e>
  {
    return  HAL_ERROR; 
 8015350:	2301      	movs	r3, #1
 8015352:	e028      	b.n	80153a6 <HAL_SRAM_Write_32b+0x70>
  }
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801535a:	2b01      	cmp	r3, #1
 801535c:	d101      	bne.n	8015362 <HAL_SRAM_Write_32b+0x2c>
 801535e:	2302      	movs	r3, #2
 8015360:	e021      	b.n	80153a6 <HAL_SRAM_Write_32b+0x70>
 8015362:	68fb      	ldr	r3, [r7, #12]
 8015364:	2201      	movs	r2, #1
 8015366:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY; 
 801536a:	68fb      	ldr	r3, [r7, #12]
 801536c:	2202      	movs	r2, #2
 801536e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Write data to memory */
  for(; BufferSize != 0U; BufferSize--)
 8015372:	e00c      	b.n	801538e <HAL_SRAM_Write_32b+0x58>
  {
    *(__IO uint32_t *)pAddress = *pSrcBuffer; 
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	681a      	ldr	r2, [r3, #0]
 8015378:	68bb      	ldr	r3, [r7, #8]
 801537a:	601a      	str	r2, [r3, #0]
    pSrcBuffer++;
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	3304      	adds	r3, #4
 8015380:	607b      	str	r3, [r7, #4]
    pAddress++;    
 8015382:	68bb      	ldr	r3, [r7, #8]
 8015384:	3304      	adds	r3, #4
 8015386:	60bb      	str	r3, [r7, #8]
  for(; BufferSize != 0U; BufferSize--)
 8015388:	683b      	ldr	r3, [r7, #0]
 801538a:	3b01      	subs	r3, #1
 801538c:	603b      	str	r3, [r7, #0]
 801538e:	683b      	ldr	r3, [r7, #0]
 8015390:	2b00      	cmp	r3, #0
 8015392:	d1ef      	bne.n	8015374 <HAL_SRAM_Write_32b+0x3e>
  }    

  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY; 
 8015394:	68fb      	ldr	r3, [r7, #12]
 8015396:	2201      	movs	r2, #1
 8015398:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram);
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	2200      	movs	r2, #0
 80153a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;   
 80153a4:	2300      	movs	r3, #0
}
 80153a6:	4618      	mov	r0, r3
 80153a8:	3714      	adds	r7, #20
 80153aa:	46bd      	mov	sp, r7
 80153ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153b0:	4770      	bx	lr

080153b2 <HAL_SRAM_Read_DMA>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Read_DMA(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pDstBuffer, uint32_t BufferSize)
{
 80153b2:	b580      	push	{r7, lr}
 80153b4:	b084      	sub	sp, #16
 80153b6:	af00      	add	r7, sp, #0
 80153b8:	60f8      	str	r0, [r7, #12]
 80153ba:	60b9      	str	r1, [r7, #8]
 80153bc:	607a      	str	r2, [r7, #4]
 80153be:	603b      	str	r3, [r7, #0]
  /* Process Locked */
  __HAL_LOCK(hsram);  
 80153c0:	68fb      	ldr	r3, [r7, #12]
 80153c2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80153c6:	2b01      	cmp	r3, #1
 80153c8:	d101      	bne.n	80153ce <HAL_SRAM_Read_DMA+0x1c>
 80153ca:	2302      	movs	r3, #2
 80153cc:	e01f      	b.n	801540e <HAL_SRAM_Read_DMA+0x5c>
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	2201      	movs	r2, #1
 80153d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY;   
 80153d6:	68fb      	ldr	r3, [r7, #12]
 80153d8:	2202      	movs	r2, #2
 80153da:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Configure DMA user callbacks */
  hsram->hdma->XferCpltCallback  = HAL_SRAM_DMA_XferCpltCallback;
 80153de:	68fb      	ldr	r3, [r7, #12]
 80153e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80153e2:	4a0d      	ldr	r2, [pc, #52]	; (8015418 <HAL_SRAM_Read_DMA+0x66>)
 80153e4:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram->hdma->XferErrorCallback = HAL_SRAM_DMA_XferErrorCallback;
 80153e6:	68fb      	ldr	r3, [r7, #12]
 80153e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80153ea:	4a0c      	ldr	r2, [pc, #48]	; (801541c <HAL_SRAM_Read_DMA+0x6a>)
 80153ec:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the DMA Stream */
  HAL_DMA_Start_IT(hsram->hdma, (uint32_t)pAddress, (uint32_t)pDstBuffer, (uint32_t)BufferSize);
 80153ee:	68fb      	ldr	r3, [r7, #12]
 80153f0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80153f2:	68b9      	ldr	r1, [r7, #8]
 80153f4:	687a      	ldr	r2, [r7, #4]
 80153f6:	683b      	ldr	r3, [r7, #0]
 80153f8:	f7f2 fca9 	bl	8007d4e <HAL_DMA_Start_IT>
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY; 
 80153fc:	68fb      	ldr	r3, [r7, #12]
 80153fe:	2201      	movs	r2, #1
 8015400:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram);  
 8015404:	68fb      	ldr	r3, [r7, #12]
 8015406:	2200      	movs	r2, #0
 8015408:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  return HAL_OK; 
 801540c:	2300      	movs	r3, #0
}
 801540e:	4618      	mov	r0, r3
 8015410:	3710      	adds	r7, #16
 8015412:	46bd      	mov	sp, r7
 8015414:	bd80      	pop	{r7, pc}
 8015416:	bf00      	nop
 8015418:	080150bf 	.word	0x080150bf
 801541c:	080150d3 	.word	0x080150d3

08015420 <HAL_SRAM_Write_DMA>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_DMA(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pSrcBuffer, uint32_t BufferSize)
{
 8015420:	b580      	push	{r7, lr}
 8015422:	b084      	sub	sp, #16
 8015424:	af00      	add	r7, sp, #0
 8015426:	60f8      	str	r0, [r7, #12]
 8015428:	60b9      	str	r1, [r7, #8]
 801542a:	607a      	str	r2, [r7, #4]
 801542c:	603b      	str	r3, [r7, #0]
  /* Check the SRAM controller state */
  if(hsram->State == HAL_SRAM_STATE_PROTECTED)
 801542e:	68fb      	ldr	r3, [r7, #12]
 8015430:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8015434:	b2db      	uxtb	r3, r3
 8015436:	2b04      	cmp	r3, #4
 8015438:	d101      	bne.n	801543e <HAL_SRAM_Write_DMA+0x1e>
  {
    return  HAL_ERROR; 
 801543a:	2301      	movs	r3, #1
 801543c:	e026      	b.n	801548c <HAL_SRAM_Write_DMA+0x6c>
  }
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 801543e:	68fb      	ldr	r3, [r7, #12]
 8015440:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015444:	2b01      	cmp	r3, #1
 8015446:	d101      	bne.n	801544c <HAL_SRAM_Write_DMA+0x2c>
 8015448:	2302      	movs	r3, #2
 801544a:	e01f      	b.n	801548c <HAL_SRAM_Write_DMA+0x6c>
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	2201      	movs	r2, #1
 8015450:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY; 
 8015454:	68fb      	ldr	r3, [r7, #12]
 8015456:	2202      	movs	r2, #2
 8015458:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Configure DMA user callbacks */
  hsram->hdma->XferCpltCallback  = HAL_SRAM_DMA_XferCpltCallback;
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015460:	4a0c      	ldr	r2, [pc, #48]	; (8015494 <HAL_SRAM_Write_DMA+0x74>)
 8015462:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram->hdma->XferErrorCallback = HAL_SRAM_DMA_XferErrorCallback;
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015468:	4a0b      	ldr	r2, [pc, #44]	; (8015498 <HAL_SRAM_Write_DMA+0x78>)
 801546a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the DMA Stream */
  HAL_DMA_Start_IT(hsram->hdma, (uint32_t)pSrcBuffer, (uint32_t)pAddress, (uint32_t)BufferSize);
 801546c:	68fb      	ldr	r3, [r7, #12]
 801546e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8015470:	6879      	ldr	r1, [r7, #4]
 8015472:	68ba      	ldr	r2, [r7, #8]
 8015474:	683b      	ldr	r3, [r7, #0]
 8015476:	f7f2 fc6a 	bl	8007d4e <HAL_DMA_Start_IT>
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;  
 801547a:	68fb      	ldr	r3, [r7, #12]
 801547c:	2201      	movs	r2, #1
 801547e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram);  
 8015482:	68fb      	ldr	r3, [r7, #12]
 8015484:	2200      	movs	r2, #0
 8015486:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  return HAL_OK;
 801548a:	2300      	movs	r3, #0
}
 801548c:	4618      	mov	r0, r3
 801548e:	3710      	adds	r7, #16
 8015490:	46bd      	mov	sp, r7
 8015492:	bd80      	pop	{r7, pc}
 8015494:	080150bf 	.word	0x080150bf
 8015498:	080150d3 	.word	0x080150d3

0801549c <HAL_SRAM_WriteOperation_Enable>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_WriteOperation_Enable(SRAM_HandleTypeDef *hsram)
{
 801549c:	b580      	push	{r7, lr}
 801549e:	b082      	sub	sp, #8
 80154a0:	af00      	add	r7, sp, #0
 80154a2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hsram);
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80154aa:	2b01      	cmp	r3, #1
 80154ac:	d101      	bne.n	80154b2 <HAL_SRAM_WriteOperation_Enable+0x16>
 80154ae:	2302      	movs	r3, #2
 80154b0:	e014      	b.n	80154dc <HAL_SRAM_WriteOperation_Enable+0x40>
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	2201      	movs	r2, #1
 80154b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Enable write operation */
  FMC_NORSRAM_WriteOperation_Enable(hsram->Instance, hsram->Init.NSBank); 
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	681a      	ldr	r2, [r3, #0]
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	689b      	ldr	r3, [r3, #8]
 80154c2:	4619      	mov	r1, r3
 80154c4:	4610      	mov	r0, r2
 80154c6:	f003 f85b 	bl	8018580 <FSMC_NORSRAM_WriteOperation_Enable>
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	2201      	movs	r2, #1
 80154ce:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram); 
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	2200      	movs	r2, #0
 80154d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  return HAL_OK;  
 80154da:	2300      	movs	r3, #0
}
 80154dc:	4618      	mov	r0, r3
 80154de:	3708      	adds	r7, #8
 80154e0:	46bd      	mov	sp, r7
 80154e2:	bd80      	pop	{r7, pc}

080154e4 <HAL_SRAM_WriteOperation_Disable>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_WriteOperation_Disable(SRAM_HandleTypeDef *hsram)
{
 80154e4:	b580      	push	{r7, lr}
 80154e6:	b082      	sub	sp, #8
 80154e8:	af00      	add	r7, sp, #0
 80154ea:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hsram);
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80154f2:	2b01      	cmp	r3, #1
 80154f4:	d101      	bne.n	80154fa <HAL_SRAM_WriteOperation_Disable+0x16>
 80154f6:	2302      	movs	r3, #2
 80154f8:	e018      	b.n	801552c <HAL_SRAM_WriteOperation_Disable+0x48>
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	2201      	movs	r2, #1
 80154fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY;
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	2202      	movs	r2, #2
 8015506:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    
  /* Disable write operation */
  FMC_NORSRAM_WriteOperation_Disable(hsram->Instance, hsram->Init.NSBank); 
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	681a      	ldr	r2, [r3, #0]
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	689b      	ldr	r3, [r3, #8]
 8015512:	4619      	mov	r1, r3
 8015514:	4610      	mov	r0, r2
 8015516:	f003 f849 	bl	80185ac <FSMC_NORSRAM_WriteOperation_Disable>
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_PROTECTED;
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	2204      	movs	r2, #4
 801551e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram); 
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	2200      	movs	r2, #0
 8015526:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  return HAL_OK;  
 801552a:	2300      	movs	r3, #0
}
 801552c:	4618      	mov	r0, r3
 801552e:	3708      	adds	r7, #8
 8015530:	46bd      	mov	sp, r7
 8015532:	bd80      	pop	{r7, pc}

08015534 <HAL_SRAM_GetState>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval HAL state
  */
HAL_SRAM_StateTypeDef HAL_SRAM_GetState(SRAM_HandleTypeDef *hsram)
{
 8015534:	b480      	push	{r7}
 8015536:	b083      	sub	sp, #12
 8015538:	af00      	add	r7, sp, #0
 801553a:	6078      	str	r0, [r7, #4]
  return hsram->State;
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8015542:	b2db      	uxtb	r3, r3
}
 8015544:	4618      	mov	r0, r3
 8015546:	370c      	adds	r7, #12
 8015548:	46bd      	mov	sp, r7
 801554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801554e:	4770      	bx	lr

08015550 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8015550:	b580      	push	{r7, lr}
 8015552:	b082      	sub	sp, #8
 8015554:	af00      	add	r7, sp, #0
 8015556:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	2b00      	cmp	r3, #0
 801555c:	d101      	bne.n	8015562 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801555e:	2301      	movs	r3, #1
 8015560:	e03f      	b.n	80155e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015568:	b2db      	uxtb	r3, r3
 801556a:	2b00      	cmp	r3, #0
 801556c:	d106      	bne.n	801557c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	2200      	movs	r2, #0
 8015572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8015576:	6878      	ldr	r0, [r7, #4]
 8015578:	f7f0 fbf0 	bl	8005d5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	2224      	movs	r2, #36	; 0x24
 8015580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	681b      	ldr	r3, [r3, #0]
 8015588:	68da      	ldr	r2, [r3, #12]
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	681b      	ldr	r3, [r3, #0]
 801558e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8015592:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8015594:	6878      	ldr	r0, [r7, #4]
 8015596:	f002 fc7e 	bl	8017e96 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	681b      	ldr	r3, [r3, #0]
 801559e:	691a      	ldr	r2, [r3, #16]
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	681b      	ldr	r3, [r3, #0]
 80155a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80155a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	681b      	ldr	r3, [r3, #0]
 80155ae:	695a      	ldr	r2, [r3, #20]
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	681b      	ldr	r3, [r3, #0]
 80155b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80155b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	681b      	ldr	r3, [r3, #0]
 80155be:	68da      	ldr	r2, [r3, #12]
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	681b      	ldr	r3, [r3, #0]
 80155c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80155c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	2200      	movs	r2, #0
 80155ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	2220      	movs	r2, #32
 80155d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	2220      	movs	r2, #32
 80155dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80155e0:	2300      	movs	r3, #0
}
 80155e2:	4618      	mov	r0, r3
 80155e4:	3708      	adds	r7, #8
 80155e6:	46bd      	mov	sp, r7
 80155e8:	bd80      	pop	{r7, pc}

080155ea <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80155ea:	b580      	push	{r7, lr}
 80155ec:	b082      	sub	sp, #8
 80155ee:	af00      	add	r7, sp, #0
 80155f0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d101      	bne.n	80155fc <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80155f8:	2301      	movs	r3, #1
 80155fa:	e047      	b.n	801568c <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015602:	b2db      	uxtb	r3, r3
 8015604:	2b00      	cmp	r3, #0
 8015606:	d106      	bne.n	8015616 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	2200      	movs	r2, #0
 801560c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8015610:	6878      	ldr	r0, [r7, #4]
 8015612:	f7f0 fba3 	bl	8005d5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	2224      	movs	r2, #36	; 0x24
 801561a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	681b      	ldr	r3, [r3, #0]
 8015622:	68da      	ldr	r2, [r3, #12]
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	681b      	ldr	r3, [r3, #0]
 8015628:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801562c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 801562e:	6878      	ldr	r0, [r7, #4]
 8015630:	f002 fc31 	bl	8017e96 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	681b      	ldr	r3, [r3, #0]
 8015638:	691a      	ldr	r2, [r3, #16]
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	681b      	ldr	r3, [r3, #0]
 801563e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8015642:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	681b      	ldr	r3, [r3, #0]
 8015648:	695a      	ldr	r2, [r3, #20]
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	681b      	ldr	r3, [r3, #0]
 801564e:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8015652:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	681b      	ldr	r3, [r3, #0]
 8015658:	695a      	ldr	r2, [r3, #20]
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	681b      	ldr	r3, [r3, #0]
 801565e:	f042 0208 	orr.w	r2, r2, #8
 8015662:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	681b      	ldr	r3, [r3, #0]
 8015668:	68da      	ldr	r2, [r3, #12]
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	681b      	ldr	r3, [r3, #0]
 801566e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8015672:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	2200      	movs	r2, #0
 8015678:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	2220      	movs	r2, #32
 801567e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	2220      	movs	r2, #32
 8015686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 801568a:	2300      	movs	r3, #0
}
 801568c:	4618      	mov	r0, r3
 801568e:	3708      	adds	r7, #8
 8015690:	46bd      	mov	sp, r7
 8015692:	bd80      	pop	{r7, pc}

08015694 <HAL_LIN_Init>:
  *            @arg UART_LINBREAKDETECTLENGTH_10B: 10-bit break detection
  *            @arg UART_LINBREAKDETECTLENGTH_11B: 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 8015694:	b580      	push	{r7, lr}
 8015696:	b082      	sub	sp, #8
 8015698:	af00      	add	r7, sp, #0
 801569a:	6078      	str	r0, [r7, #4]
 801569c:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d101      	bne.n	80156a8 <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 80156a4:	2301      	movs	r3, #1
 80156a6:	e057      	b.n	8015758 <HAL_LIN_Init+0xc4>
  /* Check the Break detection length parameter */
  assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
  assert_param(IS_UART_LIN_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_LIN_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80156ae:	b2db      	uxtb	r3, r3
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	d106      	bne.n	80156c2 <HAL_LIN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	2200      	movs	r2, #0
 80156b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80156bc:	6878      	ldr	r0, [r7, #4]
 80156be:	f7f0 fb4d 	bl	8005d5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	2224      	movs	r2, #36	; 0x24
 80156c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	681b      	ldr	r3, [r3, #0]
 80156ce:	68da      	ldr	r2, [r3, #12]
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	681b      	ldr	r3, [r3, #0]
 80156d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80156d8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80156da:	6878      	ldr	r0, [r7, #4]
 80156dc:	f002 fbdb 	bl	8017e96 <UART_SetConfig>

  /* In LIN mode, the following bits must be kept cleared:
     - CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_CLKEN));
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	681b      	ldr	r3, [r3, #0]
 80156e4:	691a      	ldr	r2, [r3, #16]
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	681b      	ldr	r3, [r3, #0]
 80156ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80156ee:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	681b      	ldr	r3, [r3, #0]
 80156f4:	695a      	ldr	r2, [r3, #20]
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	681b      	ldr	r3, [r3, #0]
 80156fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80156fe:	615a      	str	r2, [r3, #20]

  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	681b      	ldr	r3, [r3, #0]
 8015704:	691a      	ldr	r2, [r3, #16]
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	681b      	ldr	r3, [r3, #0]
 801570a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801570e:	611a      	str	r2, [r3, #16]

  /* Set the USART LIN Break detection length. */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_LBDL);
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	681b      	ldr	r3, [r3, #0]
 8015714:	691a      	ldr	r2, [r3, #16]
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	681b      	ldr	r3, [r3, #0]
 801571a:	f022 0220 	bic.w	r2, r2, #32
 801571e:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, BreakDetectLength);
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	681b      	ldr	r3, [r3, #0]
 8015724:	6919      	ldr	r1, [r3, #16]
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	681b      	ldr	r3, [r3, #0]
 801572a:	683a      	ldr	r2, [r7, #0]
 801572c:	430a      	orrs	r2, r1
 801572e:	611a      	str	r2, [r3, #16]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	681b      	ldr	r3, [r3, #0]
 8015734:	68da      	ldr	r2, [r3, #12]
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	681b      	ldr	r3, [r3, #0]
 801573a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801573e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	2200      	movs	r2, #0
 8015744:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	2220      	movs	r2, #32
 801574a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	2220      	movs	r2, #32
 8015752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8015756:	2300      	movs	r3, #0
}
 8015758:	4618      	mov	r0, r3
 801575a:	3708      	adds	r7, #8
 801575c:	46bd      	mov	sp, r7
 801575e:	bd80      	pop	{r7, pc}

08015760 <HAL_MultiProcessor_Init>:
  *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
  *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 8015760:	b580      	push	{r7, lr}
 8015762:	b084      	sub	sp, #16
 8015764:	af00      	add	r7, sp, #0
 8015766:	60f8      	str	r0, [r7, #12]
 8015768:	460b      	mov	r3, r1
 801576a:	607a      	str	r2, [r7, #4]
 801576c:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801576e:	68fb      	ldr	r3, [r7, #12]
 8015770:	2b00      	cmp	r3, #0
 8015772:	d101      	bne.n	8015778 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 8015774:	2301      	movs	r3, #1
 8015776:	e05f      	b.n	8015838 <HAL_MultiProcessor_Init+0xd8>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
  assert_param(IS_UART_ADDRESS(Address));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8015778:	68fb      	ldr	r3, [r7, #12]
 801577a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801577e:	b2db      	uxtb	r3, r3
 8015780:	2b00      	cmp	r3, #0
 8015782:	d106      	bne.n	8015792 <HAL_MultiProcessor_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8015784:	68fb      	ldr	r3, [r7, #12]
 8015786:	2200      	movs	r2, #0
 8015788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801578c:	68f8      	ldr	r0, [r7, #12]
 801578e:	f7f0 fae5 	bl	8005d5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8015792:	68fb      	ldr	r3, [r7, #12]
 8015794:	2224      	movs	r2, #36	; 0x24
 8015796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 801579a:	68fb      	ldr	r3, [r7, #12]
 801579c:	681b      	ldr	r3, [r3, #0]
 801579e:	68da      	ldr	r2, [r3, #12]
 80157a0:	68fb      	ldr	r3, [r7, #12]
 80157a2:	681b      	ldr	r3, [r3, #0]
 80157a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80157a8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80157aa:	68f8      	ldr	r0, [r7, #12]
 80157ac:	f002 fb73 	bl	8017e96 <UART_SetConfig>

  /* In Multi-Processor mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80157b0:	68fb      	ldr	r3, [r7, #12]
 80157b2:	681b      	ldr	r3, [r3, #0]
 80157b4:	691a      	ldr	r2, [r3, #16]
 80157b6:	68fb      	ldr	r3, [r7, #12]
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80157be:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80157c0:	68fb      	ldr	r3, [r7, #12]
 80157c2:	681b      	ldr	r3, [r3, #0]
 80157c4:	695a      	ldr	r2, [r3, #20]
 80157c6:	68fb      	ldr	r3, [r7, #12]
 80157c8:	681b      	ldr	r3, [r3, #0]
 80157ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80157ce:	615a      	str	r2, [r3, #20]

  /* Set the USART address node */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 80157d0:	68fb      	ldr	r3, [r7, #12]
 80157d2:	681b      	ldr	r3, [r3, #0]
 80157d4:	691a      	ldr	r2, [r3, #16]
 80157d6:	68fb      	ldr	r3, [r7, #12]
 80157d8:	681b      	ldr	r3, [r3, #0]
 80157da:	f022 020f 	bic.w	r2, r2, #15
 80157de:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, Address);
 80157e0:	68fb      	ldr	r3, [r7, #12]
 80157e2:	681b      	ldr	r3, [r3, #0]
 80157e4:	6919      	ldr	r1, [r3, #16]
 80157e6:	7afa      	ldrb	r2, [r7, #11]
 80157e8:	68fb      	ldr	r3, [r7, #12]
 80157ea:	681b      	ldr	r3, [r3, #0]
 80157ec:	430a      	orrs	r2, r1
 80157ee:	611a      	str	r2, [r3, #16]

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 80157f0:	68fb      	ldr	r3, [r7, #12]
 80157f2:	681b      	ldr	r3, [r3, #0]
 80157f4:	68da      	ldr	r2, [r3, #12]
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	681b      	ldr	r3, [r3, #0]
 80157fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80157fe:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR1, WakeUpMethod);
 8015800:	68fb      	ldr	r3, [r7, #12]
 8015802:	681b      	ldr	r3, [r3, #0]
 8015804:	68d9      	ldr	r1, [r3, #12]
 8015806:	68fb      	ldr	r3, [r7, #12]
 8015808:	681b      	ldr	r3, [r3, #0]
 801580a:	687a      	ldr	r2, [r7, #4]
 801580c:	430a      	orrs	r2, r1
 801580e:	60da      	str	r2, [r3, #12]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8015810:	68fb      	ldr	r3, [r7, #12]
 8015812:	681b      	ldr	r3, [r3, #0]
 8015814:	68da      	ldr	r2, [r3, #12]
 8015816:	68fb      	ldr	r3, [r7, #12]
 8015818:	681b      	ldr	r3, [r3, #0]
 801581a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801581e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015820:	68fb      	ldr	r3, [r7, #12]
 8015822:	2200      	movs	r2, #0
 8015824:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	2220      	movs	r2, #32
 801582a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 801582e:	68fb      	ldr	r3, [r7, #12]
 8015830:	2220      	movs	r2, #32
 8015832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8015836:	2300      	movs	r3, #0
}
 8015838:	4618      	mov	r0, r3
 801583a:	3710      	adds	r7, #16
 801583c:	46bd      	mov	sp, r7
 801583e:	bd80      	pop	{r7, pc}

08015840 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8015840:	b580      	push	{r7, lr}
 8015842:	b082      	sub	sp, #8
 8015844:	af00      	add	r7, sp, #0
 8015846:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	2b00      	cmp	r3, #0
 801584c:	d101      	bne.n	8015852 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 801584e:	2301      	movs	r3, #1
 8015850:	e021      	b.n	8015896 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	2224      	movs	r2, #36	; 0x24
 8015856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	681b      	ldr	r3, [r3, #0]
 801585e:	68da      	ldr	r2, [r3, #12]
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	681b      	ldr	r3, [r3, #0]
 8015864:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8015868:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 801586a:	6878      	ldr	r0, [r7, #4]
 801586c:	f7f0 fac6 	bl	8005dfc <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	2200      	movs	r2, #0
 8015874:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	2200      	movs	r2, #0
 801587a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 801587e:	687b      	ldr	r3, [r7, #4]
 8015880:	2200      	movs	r2, #0
 8015882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	2200      	movs	r2, #0
 801588a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	2200      	movs	r2, #0
 8015890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015894:	2300      	movs	r3, #0
}
 8015896:	4618      	mov	r0, r3
 8015898:	3708      	adds	r7, #8
 801589a:	46bd      	mov	sp, r7
 801589c:	bd80      	pop	{r7, pc}

0801589e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801589e:	b580      	push	{r7, lr}
 80158a0:	b08a      	sub	sp, #40	; 0x28
 80158a2:	af02      	add	r7, sp, #8
 80158a4:	60f8      	str	r0, [r7, #12]
 80158a6:	60b9      	str	r1, [r7, #8]
 80158a8:	603b      	str	r3, [r7, #0]
 80158aa:	4613      	mov	r3, r2
 80158ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80158ae:	2300      	movs	r3, #0
 80158b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80158b2:	68fb      	ldr	r3, [r7, #12]
 80158b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80158b8:	b2db      	uxtb	r3, r3
 80158ba:	2b20      	cmp	r3, #32
 80158bc:	d17c      	bne.n	80159b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80158be:	68bb      	ldr	r3, [r7, #8]
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d002      	beq.n	80158ca <HAL_UART_Transmit+0x2c>
 80158c4:	88fb      	ldrh	r3, [r7, #6]
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d101      	bne.n	80158ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80158ca:	2301      	movs	r3, #1
 80158cc:	e075      	b.n	80159ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80158d4:	2b01      	cmp	r3, #1
 80158d6:	d101      	bne.n	80158dc <HAL_UART_Transmit+0x3e>
 80158d8:	2302      	movs	r3, #2
 80158da:	e06e      	b.n	80159ba <HAL_UART_Transmit+0x11c>
 80158dc:	68fb      	ldr	r3, [r7, #12]
 80158de:	2201      	movs	r2, #1
 80158e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80158e4:	68fb      	ldr	r3, [r7, #12]
 80158e6:	2200      	movs	r2, #0
 80158e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80158ea:	68fb      	ldr	r3, [r7, #12]
 80158ec:	2221      	movs	r2, #33	; 0x21
 80158ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80158f2:	f7f0 ffc3 	bl	800687c <HAL_GetTick>
 80158f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80158f8:	68fb      	ldr	r3, [r7, #12]
 80158fa:	88fa      	ldrh	r2, [r7, #6]
 80158fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80158fe:	68fb      	ldr	r3, [r7, #12]
 8015900:	88fa      	ldrh	r2, [r7, #6]
 8015902:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015904:	68fb      	ldr	r3, [r7, #12]
 8015906:	689b      	ldr	r3, [r3, #8]
 8015908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801590c:	d108      	bne.n	8015920 <HAL_UART_Transmit+0x82>
 801590e:	68fb      	ldr	r3, [r7, #12]
 8015910:	691b      	ldr	r3, [r3, #16]
 8015912:	2b00      	cmp	r3, #0
 8015914:	d104      	bne.n	8015920 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8015916:	2300      	movs	r3, #0
 8015918:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 801591a:	68bb      	ldr	r3, [r7, #8]
 801591c:	61bb      	str	r3, [r7, #24]
 801591e:	e003      	b.n	8015928 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8015920:	68bb      	ldr	r3, [r7, #8]
 8015922:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8015924:	2300      	movs	r3, #0
 8015926:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8015928:	68fb      	ldr	r3, [r7, #12]
 801592a:	2200      	movs	r2, #0
 801592c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8015930:	e02a      	b.n	8015988 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8015932:	683b      	ldr	r3, [r7, #0]
 8015934:	9300      	str	r3, [sp, #0]
 8015936:	697b      	ldr	r3, [r7, #20]
 8015938:	2200      	movs	r2, #0
 801593a:	2180      	movs	r1, #128	; 0x80
 801593c:	68f8      	ldr	r0, [r7, #12]
 801593e:	f001 ff19 	bl	8017774 <UART_WaitOnFlagUntilTimeout>
 8015942:	4603      	mov	r3, r0
 8015944:	2b00      	cmp	r3, #0
 8015946:	d001      	beq.n	801594c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8015948:	2303      	movs	r3, #3
 801594a:	e036      	b.n	80159ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 801594c:	69fb      	ldr	r3, [r7, #28]
 801594e:	2b00      	cmp	r3, #0
 8015950:	d10b      	bne.n	801596a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8015952:	69bb      	ldr	r3, [r7, #24]
 8015954:	881b      	ldrh	r3, [r3, #0]
 8015956:	461a      	mov	r2, r3
 8015958:	68fb      	ldr	r3, [r7, #12]
 801595a:	681b      	ldr	r3, [r3, #0]
 801595c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8015960:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8015962:	69bb      	ldr	r3, [r7, #24]
 8015964:	3302      	adds	r3, #2
 8015966:	61bb      	str	r3, [r7, #24]
 8015968:	e007      	b.n	801597a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 801596a:	69fb      	ldr	r3, [r7, #28]
 801596c:	781a      	ldrb	r2, [r3, #0]
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	681b      	ldr	r3, [r3, #0]
 8015972:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8015974:	69fb      	ldr	r3, [r7, #28]
 8015976:	3301      	adds	r3, #1
 8015978:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801597a:	68fb      	ldr	r3, [r7, #12]
 801597c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801597e:	b29b      	uxth	r3, r3
 8015980:	3b01      	subs	r3, #1
 8015982:	b29a      	uxth	r2, r3
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8015988:	68fb      	ldr	r3, [r7, #12]
 801598a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801598c:	b29b      	uxth	r3, r3
 801598e:	2b00      	cmp	r3, #0
 8015990:	d1cf      	bne.n	8015932 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8015992:	683b      	ldr	r3, [r7, #0]
 8015994:	9300      	str	r3, [sp, #0]
 8015996:	697b      	ldr	r3, [r7, #20]
 8015998:	2200      	movs	r2, #0
 801599a:	2140      	movs	r1, #64	; 0x40
 801599c:	68f8      	ldr	r0, [r7, #12]
 801599e:	f001 fee9 	bl	8017774 <UART_WaitOnFlagUntilTimeout>
 80159a2:	4603      	mov	r3, r0
 80159a4:	2b00      	cmp	r3, #0
 80159a6:	d001      	beq.n	80159ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80159a8:	2303      	movs	r3, #3
 80159aa:	e006      	b.n	80159ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80159ac:	68fb      	ldr	r3, [r7, #12]
 80159ae:	2220      	movs	r2, #32
 80159b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80159b4:	2300      	movs	r3, #0
 80159b6:	e000      	b.n	80159ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80159b8:	2302      	movs	r3, #2
  }
}
 80159ba:	4618      	mov	r0, r3
 80159bc:	3720      	adds	r7, #32
 80159be:	46bd      	mov	sp, r7
 80159c0:	bd80      	pop	{r7, pc}

080159c2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80159c2:	b580      	push	{r7, lr}
 80159c4:	b08a      	sub	sp, #40	; 0x28
 80159c6:	af02      	add	r7, sp, #8
 80159c8:	60f8      	str	r0, [r7, #12]
 80159ca:	60b9      	str	r1, [r7, #8]
 80159cc:	603b      	str	r3, [r7, #0]
 80159ce:	4613      	mov	r3, r2
 80159d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80159d2:	2300      	movs	r3, #0
 80159d4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80159d6:	68fb      	ldr	r3, [r7, #12]
 80159d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80159dc:	b2db      	uxtb	r3, r3
 80159de:	2b20      	cmp	r3, #32
 80159e0:	f040 808c 	bne.w	8015afc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80159e4:	68bb      	ldr	r3, [r7, #8]
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d002      	beq.n	80159f0 <HAL_UART_Receive+0x2e>
 80159ea:	88fb      	ldrh	r3, [r7, #6]
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d101      	bne.n	80159f4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80159f0:	2301      	movs	r3, #1
 80159f2:	e084      	b.n	8015afe <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80159f4:	68fb      	ldr	r3, [r7, #12]
 80159f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80159fa:	2b01      	cmp	r3, #1
 80159fc:	d101      	bne.n	8015a02 <HAL_UART_Receive+0x40>
 80159fe:	2302      	movs	r3, #2
 8015a00:	e07d      	b.n	8015afe <HAL_UART_Receive+0x13c>
 8015a02:	68fb      	ldr	r3, [r7, #12]
 8015a04:	2201      	movs	r2, #1
 8015a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015a0a:	68fb      	ldr	r3, [r7, #12]
 8015a0c:	2200      	movs	r2, #0
 8015a0e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8015a10:	68fb      	ldr	r3, [r7, #12]
 8015a12:	2222      	movs	r2, #34	; 0x22
 8015a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015a18:	68fb      	ldr	r3, [r7, #12]
 8015a1a:	2200      	movs	r2, #0
 8015a1c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8015a1e:	f7f0 ff2d 	bl	800687c <HAL_GetTick>
 8015a22:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8015a24:	68fb      	ldr	r3, [r7, #12]
 8015a26:	88fa      	ldrh	r2, [r7, #6]
 8015a28:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8015a2a:	68fb      	ldr	r3, [r7, #12]
 8015a2c:	88fa      	ldrh	r2, [r7, #6]
 8015a2e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015a30:	68fb      	ldr	r3, [r7, #12]
 8015a32:	689b      	ldr	r3, [r3, #8]
 8015a34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015a38:	d108      	bne.n	8015a4c <HAL_UART_Receive+0x8a>
 8015a3a:	68fb      	ldr	r3, [r7, #12]
 8015a3c:	691b      	ldr	r3, [r3, #16]
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d104      	bne.n	8015a4c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8015a42:	2300      	movs	r3, #0
 8015a44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8015a46:	68bb      	ldr	r3, [r7, #8]
 8015a48:	61bb      	str	r3, [r7, #24]
 8015a4a:	e003      	b.n	8015a54 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8015a4c:	68bb      	ldr	r3, [r7, #8]
 8015a4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8015a50:	2300      	movs	r3, #0
 8015a52:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8015a54:	68fb      	ldr	r3, [r7, #12]
 8015a56:	2200      	movs	r2, #0
 8015a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8015a5c:	e043      	b.n	8015ae6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8015a5e:	683b      	ldr	r3, [r7, #0]
 8015a60:	9300      	str	r3, [sp, #0]
 8015a62:	697b      	ldr	r3, [r7, #20]
 8015a64:	2200      	movs	r2, #0
 8015a66:	2120      	movs	r1, #32
 8015a68:	68f8      	ldr	r0, [r7, #12]
 8015a6a:	f001 fe83 	bl	8017774 <UART_WaitOnFlagUntilTimeout>
 8015a6e:	4603      	mov	r3, r0
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d001      	beq.n	8015a78 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8015a74:	2303      	movs	r3, #3
 8015a76:	e042      	b.n	8015afe <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8015a78:	69fb      	ldr	r3, [r7, #28]
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	d10c      	bne.n	8015a98 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8015a7e:	68fb      	ldr	r3, [r7, #12]
 8015a80:	681b      	ldr	r3, [r3, #0]
 8015a82:	685b      	ldr	r3, [r3, #4]
 8015a84:	b29b      	uxth	r3, r3
 8015a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015a8a:	b29a      	uxth	r2, r3
 8015a8c:	69bb      	ldr	r3, [r7, #24]
 8015a8e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8015a90:	69bb      	ldr	r3, [r7, #24]
 8015a92:	3302      	adds	r3, #2
 8015a94:	61bb      	str	r3, [r7, #24]
 8015a96:	e01f      	b.n	8015ad8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8015a98:	68fb      	ldr	r3, [r7, #12]
 8015a9a:	689b      	ldr	r3, [r3, #8]
 8015a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015aa0:	d007      	beq.n	8015ab2 <HAL_UART_Receive+0xf0>
 8015aa2:	68fb      	ldr	r3, [r7, #12]
 8015aa4:	689b      	ldr	r3, [r3, #8]
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	d10a      	bne.n	8015ac0 <HAL_UART_Receive+0xfe>
 8015aaa:	68fb      	ldr	r3, [r7, #12]
 8015aac:	691b      	ldr	r3, [r3, #16]
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	d106      	bne.n	8015ac0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8015ab2:	68fb      	ldr	r3, [r7, #12]
 8015ab4:	681b      	ldr	r3, [r3, #0]
 8015ab6:	685b      	ldr	r3, [r3, #4]
 8015ab8:	b2da      	uxtb	r2, r3
 8015aba:	69fb      	ldr	r3, [r7, #28]
 8015abc:	701a      	strb	r2, [r3, #0]
 8015abe:	e008      	b.n	8015ad2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8015ac0:	68fb      	ldr	r3, [r7, #12]
 8015ac2:	681b      	ldr	r3, [r3, #0]
 8015ac4:	685b      	ldr	r3, [r3, #4]
 8015ac6:	b2db      	uxtb	r3, r3
 8015ac8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015acc:	b2da      	uxtb	r2, r3
 8015ace:	69fb      	ldr	r3, [r7, #28]
 8015ad0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8015ad2:	69fb      	ldr	r3, [r7, #28]
 8015ad4:	3301      	adds	r3, #1
 8015ad6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8015ad8:	68fb      	ldr	r3, [r7, #12]
 8015ada:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8015adc:	b29b      	uxth	r3, r3
 8015ade:	3b01      	subs	r3, #1
 8015ae0:	b29a      	uxth	r2, r3
 8015ae2:	68fb      	ldr	r3, [r7, #12]
 8015ae4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8015ae6:	68fb      	ldr	r3, [r7, #12]
 8015ae8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8015aea:	b29b      	uxth	r3, r3
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d1b6      	bne.n	8015a5e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8015af0:	68fb      	ldr	r3, [r7, #12]
 8015af2:	2220      	movs	r2, #32
 8015af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8015af8:	2300      	movs	r3, #0
 8015afa:	e000      	b.n	8015afe <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8015afc:	2302      	movs	r3, #2
  }
}
 8015afe:	4618      	mov	r0, r3
 8015b00:	3720      	adds	r7, #32
 8015b02:	46bd      	mov	sp, r7
 8015b04:	bd80      	pop	{r7, pc}

08015b06 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015b06:	b480      	push	{r7}
 8015b08:	b085      	sub	sp, #20
 8015b0a:	af00      	add	r7, sp, #0
 8015b0c:	60f8      	str	r0, [r7, #12]
 8015b0e:	60b9      	str	r1, [r7, #8]
 8015b10:	4613      	mov	r3, r2
 8015b12:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015b14:	68fb      	ldr	r3, [r7, #12]
 8015b16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015b1a:	b2db      	uxtb	r3, r3
 8015b1c:	2b20      	cmp	r3, #32
 8015b1e:	d130      	bne.n	8015b82 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8015b20:	68bb      	ldr	r3, [r7, #8]
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	d002      	beq.n	8015b2c <HAL_UART_Transmit_IT+0x26>
 8015b26:	88fb      	ldrh	r3, [r7, #6]
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	d101      	bne.n	8015b30 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8015b2c:	2301      	movs	r3, #1
 8015b2e:	e029      	b.n	8015b84 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8015b30:	68fb      	ldr	r3, [r7, #12]
 8015b32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015b36:	2b01      	cmp	r3, #1
 8015b38:	d101      	bne.n	8015b3e <HAL_UART_Transmit_IT+0x38>
 8015b3a:	2302      	movs	r3, #2
 8015b3c:	e022      	b.n	8015b84 <HAL_UART_Transmit_IT+0x7e>
 8015b3e:	68fb      	ldr	r3, [r7, #12]
 8015b40:	2201      	movs	r2, #1
 8015b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8015b46:	68fb      	ldr	r3, [r7, #12]
 8015b48:	68ba      	ldr	r2, [r7, #8]
 8015b4a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8015b4c:	68fb      	ldr	r3, [r7, #12]
 8015b4e:	88fa      	ldrh	r2, [r7, #6]
 8015b50:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8015b52:	68fb      	ldr	r3, [r7, #12]
 8015b54:	88fa      	ldrh	r2, [r7, #6]
 8015b56:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015b58:	68fb      	ldr	r3, [r7, #12]
 8015b5a:	2200      	movs	r2, #0
 8015b5c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8015b5e:	68fb      	ldr	r3, [r7, #12]
 8015b60:	2221      	movs	r2, #33	; 0x21
 8015b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8015b66:	68fb      	ldr	r3, [r7, #12]
 8015b68:	2200      	movs	r2, #0
 8015b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8015b6e:	68fb      	ldr	r3, [r7, #12]
 8015b70:	681b      	ldr	r3, [r3, #0]
 8015b72:	68da      	ldr	r2, [r3, #12]
 8015b74:	68fb      	ldr	r3, [r7, #12]
 8015b76:	681b      	ldr	r3, [r3, #0]
 8015b78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8015b7c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8015b7e:	2300      	movs	r3, #0
 8015b80:	e000      	b.n	8015b84 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8015b82:	2302      	movs	r3, #2
  }
}
 8015b84:	4618      	mov	r0, r3
 8015b86:	3714      	adds	r7, #20
 8015b88:	46bd      	mov	sp, r7
 8015b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b8e:	4770      	bx	lr

08015b90 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015b90:	b580      	push	{r7, lr}
 8015b92:	b084      	sub	sp, #16
 8015b94:	af00      	add	r7, sp, #0
 8015b96:	60f8      	str	r0, [r7, #12]
 8015b98:	60b9      	str	r1, [r7, #8]
 8015b9a:	4613      	mov	r3, r2
 8015b9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015b9e:	68fb      	ldr	r3, [r7, #12]
 8015ba0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015ba4:	b2db      	uxtb	r3, r3
 8015ba6:	2b20      	cmp	r3, #32
 8015ba8:	d11d      	bne.n	8015be6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8015baa:	68bb      	ldr	r3, [r7, #8]
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d002      	beq.n	8015bb6 <HAL_UART_Receive_IT+0x26>
 8015bb0:	88fb      	ldrh	r3, [r7, #6]
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d101      	bne.n	8015bba <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8015bb6:	2301      	movs	r3, #1
 8015bb8:	e016      	b.n	8015be8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8015bba:	68fb      	ldr	r3, [r7, #12]
 8015bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015bc0:	2b01      	cmp	r3, #1
 8015bc2:	d101      	bne.n	8015bc8 <HAL_UART_Receive_IT+0x38>
 8015bc4:	2302      	movs	r3, #2
 8015bc6:	e00f      	b.n	8015be8 <HAL_UART_Receive_IT+0x58>
 8015bc8:	68fb      	ldr	r3, [r7, #12]
 8015bca:	2201      	movs	r2, #1
 8015bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015bd0:	68fb      	ldr	r3, [r7, #12]
 8015bd2:	2200      	movs	r2, #0
 8015bd4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8015bd6:	88fb      	ldrh	r3, [r7, #6]
 8015bd8:	461a      	mov	r2, r3
 8015bda:	68b9      	ldr	r1, [r7, #8]
 8015bdc:	68f8      	ldr	r0, [r7, #12]
 8015bde:	f001 fe37 	bl	8017850 <UART_Start_Receive_IT>
 8015be2:	4603      	mov	r3, r0
 8015be4:	e000      	b.n	8015be8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8015be6:	2302      	movs	r3, #2
  }
}
 8015be8:	4618      	mov	r0, r3
 8015bea:	3710      	adds	r7, #16
 8015bec:	46bd      	mov	sp, r7
 8015bee:	bd80      	pop	{r7, pc}

08015bf0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015bf0:	b580      	push	{r7, lr}
 8015bf2:	b08c      	sub	sp, #48	; 0x30
 8015bf4:	af00      	add	r7, sp, #0
 8015bf6:	60f8      	str	r0, [r7, #12]
 8015bf8:	60b9      	str	r1, [r7, #8]
 8015bfa:	4613      	mov	r3, r2
 8015bfc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015bfe:	68fb      	ldr	r3, [r7, #12]
 8015c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015c04:	b2db      	uxtb	r3, r3
 8015c06:	2b20      	cmp	r3, #32
 8015c08:	d165      	bne.n	8015cd6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8015c0a:	68bb      	ldr	r3, [r7, #8]
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	d002      	beq.n	8015c16 <HAL_UART_Transmit_DMA+0x26>
 8015c10:	88fb      	ldrh	r3, [r7, #6]
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d101      	bne.n	8015c1a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8015c16:	2301      	movs	r3, #1
 8015c18:	e05e      	b.n	8015cd8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8015c1a:	68fb      	ldr	r3, [r7, #12]
 8015c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015c20:	2b01      	cmp	r3, #1
 8015c22:	d101      	bne.n	8015c28 <HAL_UART_Transmit_DMA+0x38>
 8015c24:	2302      	movs	r3, #2
 8015c26:	e057      	b.n	8015cd8 <HAL_UART_Transmit_DMA+0xe8>
 8015c28:	68fb      	ldr	r3, [r7, #12]
 8015c2a:	2201      	movs	r2, #1
 8015c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8015c30:	68ba      	ldr	r2, [r7, #8]
 8015c32:	68fb      	ldr	r3, [r7, #12]
 8015c34:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8015c36:	68fb      	ldr	r3, [r7, #12]
 8015c38:	88fa      	ldrh	r2, [r7, #6]
 8015c3a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8015c3c:	68fb      	ldr	r3, [r7, #12]
 8015c3e:	88fa      	ldrh	r2, [r7, #6]
 8015c40:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015c42:	68fb      	ldr	r3, [r7, #12]
 8015c44:	2200      	movs	r2, #0
 8015c46:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8015c48:	68fb      	ldr	r3, [r7, #12]
 8015c4a:	2221      	movs	r2, #33	; 0x21
 8015c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8015c50:	68fb      	ldr	r3, [r7, #12]
 8015c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015c54:	4a22      	ldr	r2, [pc, #136]	; (8015ce0 <HAL_UART_Transmit_DMA+0xf0>)
 8015c56:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8015c58:	68fb      	ldr	r3, [r7, #12]
 8015c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015c5c:	4a21      	ldr	r2, [pc, #132]	; (8015ce4 <HAL_UART_Transmit_DMA+0xf4>)
 8015c5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8015c60:	68fb      	ldr	r3, [r7, #12]
 8015c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015c64:	4a20      	ldr	r2, [pc, #128]	; (8015ce8 <HAL_UART_Transmit_DMA+0xf8>)
 8015c66:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8015c68:	68fb      	ldr	r3, [r7, #12]
 8015c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015c6c:	2200      	movs	r2, #0
 8015c6e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8015c70:	f107 0308 	add.w	r3, r7, #8
 8015c74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8015c76:	68fb      	ldr	r3, [r7, #12]
 8015c78:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8015c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c7c:	6819      	ldr	r1, [r3, #0]
 8015c7e:	68fb      	ldr	r3, [r7, #12]
 8015c80:	681b      	ldr	r3, [r3, #0]
 8015c82:	3304      	adds	r3, #4
 8015c84:	461a      	mov	r2, r3
 8015c86:	88fb      	ldrh	r3, [r7, #6]
 8015c88:	f7f2 f861 	bl	8007d4e <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8015c8c:	68fb      	ldr	r3, [r7, #12]
 8015c8e:	681b      	ldr	r3, [r3, #0]
 8015c90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8015c94:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8015c96:	68fb      	ldr	r3, [r7, #12]
 8015c98:	2200      	movs	r2, #0
 8015c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8015c9e:	68fb      	ldr	r3, [r7, #12]
 8015ca0:	681b      	ldr	r3, [r3, #0]
 8015ca2:	3314      	adds	r3, #20
 8015ca4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015ca6:	69bb      	ldr	r3, [r7, #24]
 8015ca8:	e853 3f00 	ldrex	r3, [r3]
 8015cac:	617b      	str	r3, [r7, #20]
   return(result);
 8015cae:	697b      	ldr	r3, [r7, #20]
 8015cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015cb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8015cb6:	68fb      	ldr	r3, [r7, #12]
 8015cb8:	681b      	ldr	r3, [r3, #0]
 8015cba:	3314      	adds	r3, #20
 8015cbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015cbe:	627a      	str	r2, [r7, #36]	; 0x24
 8015cc0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015cc2:	6a39      	ldr	r1, [r7, #32]
 8015cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015cc6:	e841 2300 	strex	r3, r2, [r1]
 8015cca:	61fb      	str	r3, [r7, #28]
   return(result);
 8015ccc:	69fb      	ldr	r3, [r7, #28]
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d1e5      	bne.n	8015c9e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8015cd2:	2300      	movs	r3, #0
 8015cd4:	e000      	b.n	8015cd8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8015cd6:	2302      	movs	r3, #2
  }
}
 8015cd8:	4618      	mov	r0, r3
 8015cda:	3730      	adds	r7, #48	; 0x30
 8015cdc:	46bd      	mov	sp, r7
 8015cde:	bd80      	pop	{r7, pc}
 8015ce0:	080174cf 	.word	0x080174cf
 8015ce4:	08017569 	.word	0x08017569
 8015ce8:	080176e1 	.word	0x080176e1

08015cec <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015cec:	b580      	push	{r7, lr}
 8015cee:	b084      	sub	sp, #16
 8015cf0:	af00      	add	r7, sp, #0
 8015cf2:	60f8      	str	r0, [r7, #12]
 8015cf4:	60b9      	str	r1, [r7, #8]
 8015cf6:	4613      	mov	r3, r2
 8015cf8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015cfa:	68fb      	ldr	r3, [r7, #12]
 8015cfc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015d00:	b2db      	uxtb	r3, r3
 8015d02:	2b20      	cmp	r3, #32
 8015d04:	d11d      	bne.n	8015d42 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8015d06:	68bb      	ldr	r3, [r7, #8]
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	d002      	beq.n	8015d12 <HAL_UART_Receive_DMA+0x26>
 8015d0c:	88fb      	ldrh	r3, [r7, #6]
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	d101      	bne.n	8015d16 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8015d12:	2301      	movs	r3, #1
 8015d14:	e016      	b.n	8015d44 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8015d16:	68fb      	ldr	r3, [r7, #12]
 8015d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015d1c:	2b01      	cmp	r3, #1
 8015d1e:	d101      	bne.n	8015d24 <HAL_UART_Receive_DMA+0x38>
 8015d20:	2302      	movs	r3, #2
 8015d22:	e00f      	b.n	8015d44 <HAL_UART_Receive_DMA+0x58>
 8015d24:	68fb      	ldr	r3, [r7, #12]
 8015d26:	2201      	movs	r2, #1
 8015d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015d2c:	68fb      	ldr	r3, [r7, #12]
 8015d2e:	2200      	movs	r2, #0
 8015d30:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8015d32:	88fb      	ldrh	r3, [r7, #6]
 8015d34:	461a      	mov	r2, r3
 8015d36:	68b9      	ldr	r1, [r7, #8]
 8015d38:	68f8      	ldr	r0, [r7, #12]
 8015d3a:	f001 fdc3 	bl	80178c4 <UART_Start_Receive_DMA>
 8015d3e:	4603      	mov	r3, r0
 8015d40:	e000      	b.n	8015d44 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8015d42:	2302      	movs	r3, #2
  }
}
 8015d44:	4618      	mov	r0, r3
 8015d46:	3710      	adds	r7, #16
 8015d48:	46bd      	mov	sp, r7
 8015d4a:	bd80      	pop	{r7, pc}

08015d4c <HAL_UART_DMAPause>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 8015d4c:	b480      	push	{r7}
 8015d4e:	b09d      	sub	sp, #116	; 0x74
 8015d50:	af00      	add	r7, sp, #0
 8015d52:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8015d54:	2300      	movs	r3, #0
 8015d56:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Process Locked */
  __HAL_LOCK(huart);
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015d5e:	2b01      	cmp	r3, #1
 8015d60:	d101      	bne.n	8015d66 <HAL_UART_DMAPause+0x1a>
 8015d62:	2302      	movs	r3, #2
 8015d64:	e098      	b.n	8015e98 <HAL_UART_DMAPause+0x14c>
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	2201      	movs	r2, #1
 8015d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	681b      	ldr	r3, [r3, #0]
 8015d72:	695b      	ldr	r3, [r3, #20]
 8015d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015d78:	2b80      	cmp	r3, #128	; 0x80
 8015d7a:	bf0c      	ite	eq
 8015d7c:	2301      	moveq	r3, #1
 8015d7e:	2300      	movne	r3, #0
 8015d80:	b2db      	uxtb	r3, r3
 8015d82:	66fb      	str	r3, [r7, #108]	; 0x6c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015d8a:	b2db      	uxtb	r3, r3
 8015d8c:	2b21      	cmp	r3, #33	; 0x21
 8015d8e:	d11c      	bne.n	8015dca <HAL_UART_DMAPause+0x7e>
 8015d90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	d019      	beq.n	8015dca <HAL_UART_DMAPause+0x7e>
  {
    /* Disable the UART DMA Tx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	681b      	ldr	r3, [r3, #0]
 8015d9a:	3314      	adds	r3, #20
 8015d9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015d9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015da0:	e853 3f00 	ldrex	r3, [r3]
 8015da4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8015da6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015da8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015dac:	66bb      	str	r3, [r7, #104]	; 0x68
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	681b      	ldr	r3, [r3, #0]
 8015db2:	3314      	adds	r3, #20
 8015db4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015db6:	65ba      	str	r2, [r7, #88]	; 0x58
 8015db8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015dba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8015dbc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015dbe:	e841 2300 	strex	r3, r2, [r1]
 8015dc2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8015dc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	d1e5      	bne.n	8015d96 <HAL_UART_DMAPause+0x4a>
  }

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	681b      	ldr	r3, [r3, #0]
 8015dce:	695b      	ldr	r3, [r3, #20]
 8015dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015dd4:	2b40      	cmp	r3, #64	; 0x40
 8015dd6:	bf0c      	ite	eq
 8015dd8:	2301      	moveq	r3, #1
 8015dda:	2300      	movne	r3, #0
 8015ddc:	b2db      	uxtb	r3, r3
 8015dde:	66fb      	str	r3, [r7, #108]	; 0x6c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015de6:	b2db      	uxtb	r3, r3
 8015de8:	2b22      	cmp	r3, #34	; 0x22
 8015dea:	d150      	bne.n	8015e8e <HAL_UART_DMAPause+0x142>
 8015dec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d04d      	beq.n	8015e8e <HAL_UART_DMAPause+0x142>
  {
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	681b      	ldr	r3, [r3, #0]
 8015df6:	330c      	adds	r3, #12
 8015df8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015dfc:	e853 3f00 	ldrex	r3, [r3]
 8015e00:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8015e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015e04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015e08:	667b      	str	r3, [r7, #100]	; 0x64
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	681b      	ldr	r3, [r3, #0]
 8015e0e:	330c      	adds	r3, #12
 8015e10:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015e12:	647a      	str	r2, [r7, #68]	; 0x44
 8015e14:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015e16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015e18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015e1a:	e841 2300 	strex	r3, r2, [r1]
 8015e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8015e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d1e5      	bne.n	8015df2 <HAL_UART_DMAPause+0xa6>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	681b      	ldr	r3, [r3, #0]
 8015e2a:	3314      	adds	r3, #20
 8015e2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e30:	e853 3f00 	ldrex	r3, [r3]
 8015e34:	623b      	str	r3, [r7, #32]
   return(result);
 8015e36:	6a3b      	ldr	r3, [r7, #32]
 8015e38:	f023 0301 	bic.w	r3, r3, #1
 8015e3c:	663b      	str	r3, [r7, #96]	; 0x60
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	681b      	ldr	r3, [r3, #0]
 8015e42:	3314      	adds	r3, #20
 8015e44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015e46:	633a      	str	r2, [r7, #48]	; 0x30
 8015e48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015e4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015e4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015e4e:	e841 2300 	strex	r3, r2, [r1]
 8015e52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8015e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	d1e5      	bne.n	8015e26 <HAL_UART_DMAPause+0xda>

    /* Disable the UART DMA Rx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	681b      	ldr	r3, [r3, #0]
 8015e5e:	3314      	adds	r3, #20
 8015e60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015e62:	693b      	ldr	r3, [r7, #16]
 8015e64:	e853 3f00 	ldrex	r3, [r3]
 8015e68:	60fb      	str	r3, [r7, #12]
   return(result);
 8015e6a:	68fb      	ldr	r3, [r7, #12]
 8015e6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015e70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	681b      	ldr	r3, [r3, #0]
 8015e76:	3314      	adds	r3, #20
 8015e78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015e7a:	61fa      	str	r2, [r7, #28]
 8015e7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015e7e:	69b9      	ldr	r1, [r7, #24]
 8015e80:	69fa      	ldr	r2, [r7, #28]
 8015e82:	e841 2300 	strex	r3, r2, [r1]
 8015e86:	617b      	str	r3, [r7, #20]
   return(result);
 8015e88:	697b      	ldr	r3, [r7, #20]
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d1e5      	bne.n	8015e5a <HAL_UART_DMAPause+0x10e>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	2200      	movs	r2, #0
 8015e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015e96:	2300      	movs	r3, #0
}
 8015e98:	4618      	mov	r0, r3
 8015e9a:	3774      	adds	r7, #116	; 0x74
 8015e9c:	46bd      	mov	sp, r7
 8015e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ea2:	4770      	bx	lr

08015ea4 <HAL_UART_DMAResume>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 8015ea4:	b480      	push	{r7}
 8015ea6:	b09d      	sub	sp, #116	; 0x74
 8015ea8:	af00      	add	r7, sp, #0
 8015eaa:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015eb2:	2b01      	cmp	r3, #1
 8015eb4:	d101      	bne.n	8015eba <HAL_UART_DMAResume+0x16>
 8015eb6:	2302      	movs	r3, #2
 8015eb8:	e087      	b.n	8015fca <HAL_UART_DMAResume+0x126>
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	2201      	movs	r2, #1
 8015ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015ec8:	b2db      	uxtb	r3, r3
 8015eca:	2b21      	cmp	r3, #33	; 0x21
 8015ecc:	d119      	bne.n	8015f02 <HAL_UART_DMAResume+0x5e>
  {
    /* Enable the UART DMA Tx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	681b      	ldr	r3, [r3, #0]
 8015ed2:	3314      	adds	r3, #20
 8015ed4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015ed6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015ed8:	e853 3f00 	ldrex	r3, [r3]
 8015edc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8015ede:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015ee4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	681b      	ldr	r3, [r3, #0]
 8015eea:	3314      	adds	r3, #20
 8015eec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015eee:	65fa      	str	r2, [r7, #92]	; 0x5c
 8015ef0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ef2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015ef4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015ef6:	e841 2300 	strex	r3, r2, [r1]
 8015efa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8015efc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	d1e5      	bne.n	8015ece <HAL_UART_DMAResume+0x2a>
  }

  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015f08:	b2db      	uxtb	r3, r3
 8015f0a:	2b22      	cmp	r3, #34	; 0x22
 8015f0c:	d158      	bne.n	8015fc0 <HAL_UART_DMAResume+0x11c>
  {
    /* Clear the Overrun flag before resuming the Rx transfer*/
    __HAL_UART_CLEAR_OREFLAG(huart);
 8015f0e:	2300      	movs	r3, #0
 8015f10:	60fb      	str	r3, [r7, #12]
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	681b      	ldr	r3, [r3, #0]
 8015f16:	681b      	ldr	r3, [r3, #0]
 8015f18:	60fb      	str	r3, [r7, #12]
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	681b      	ldr	r3, [r3, #0]
 8015f1e:	685b      	ldr	r3, [r3, #4]
 8015f20:	60fb      	str	r3, [r7, #12]
 8015f22:	68fb      	ldr	r3, [r7, #12]

    /* Re-enable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	681b      	ldr	r3, [r3, #0]
 8015f28:	330c      	adds	r3, #12
 8015f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015f2e:	e853 3f00 	ldrex	r3, [r3]
 8015f32:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015f3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	681b      	ldr	r3, [r3, #0]
 8015f40:	330c      	adds	r3, #12
 8015f42:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015f44:	64ba      	str	r2, [r7, #72]	; 0x48
 8015f46:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f48:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015f4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015f4c:	e841 2300 	strex	r3, r2, [r1]
 8015f50:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8015f52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	d1e5      	bne.n	8015f24 <HAL_UART_DMAResume+0x80>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	681b      	ldr	r3, [r3, #0]
 8015f5c:	3314      	adds	r3, #20
 8015f5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f62:	e853 3f00 	ldrex	r3, [r3]
 8015f66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f6a:	f043 0301 	orr.w	r3, r3, #1
 8015f6e:	667b      	str	r3, [r7, #100]	; 0x64
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	681b      	ldr	r3, [r3, #0]
 8015f74:	3314      	adds	r3, #20
 8015f76:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015f78:	637a      	str	r2, [r7, #52]	; 0x34
 8015f7a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015f7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015f80:	e841 2300 	strex	r3, r2, [r1]
 8015f84:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8015f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d1e5      	bne.n	8015f58 <HAL_UART_DMAResume+0xb4>

    /* Enable the UART DMA Rx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	681b      	ldr	r3, [r3, #0]
 8015f90:	3314      	adds	r3, #20
 8015f92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f94:	697b      	ldr	r3, [r7, #20]
 8015f96:	e853 3f00 	ldrex	r3, [r3]
 8015f9a:	613b      	str	r3, [r7, #16]
   return(result);
 8015f9c:	693b      	ldr	r3, [r7, #16]
 8015f9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015fa2:	663b      	str	r3, [r7, #96]	; 0x60
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	681b      	ldr	r3, [r3, #0]
 8015fa8:	3314      	adds	r3, #20
 8015faa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015fac:	623a      	str	r2, [r7, #32]
 8015fae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015fb0:	69f9      	ldr	r1, [r7, #28]
 8015fb2:	6a3a      	ldr	r2, [r7, #32]
 8015fb4:	e841 2300 	strex	r3, r2, [r1]
 8015fb8:	61bb      	str	r3, [r7, #24]
   return(result);
 8015fba:	69bb      	ldr	r3, [r7, #24]
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d1e5      	bne.n	8015f8c <HAL_UART_DMAResume+0xe8>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	2200      	movs	r2, #0
 8015fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015fc8:	2300      	movs	r3, #0
}
 8015fca:	4618      	mov	r0, r3
 8015fcc:	3774      	adds	r7, #116	; 0x74
 8015fce:	46bd      	mov	sp, r7
 8015fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fd4:	4770      	bx	lr

08015fd6 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8015fd6:	b580      	push	{r7, lr}
 8015fd8:	b090      	sub	sp, #64	; 0x40
 8015fda:	af00      	add	r7, sp, #0
 8015fdc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8015fde:	2300      	movs	r3, #0
 8015fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	681b      	ldr	r3, [r3, #0]
 8015fe6:	695b      	ldr	r3, [r3, #20]
 8015fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015fec:	2b80      	cmp	r3, #128	; 0x80
 8015fee:	bf0c      	ite	eq
 8015ff0:	2301      	moveq	r3, #1
 8015ff2:	2300      	movne	r3, #0
 8015ff4:	b2db      	uxtb	r3, r3
 8015ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015ffe:	b2db      	uxtb	r3, r3
 8016000:	2b21      	cmp	r3, #33	; 0x21
 8016002:	d128      	bne.n	8016056 <HAL_UART_DMAStop+0x80>
 8016004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016006:	2b00      	cmp	r3, #0
 8016008:	d025      	beq.n	8016056 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	681b      	ldr	r3, [r3, #0]
 801600e:	3314      	adds	r3, #20
 8016010:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016014:	e853 3f00 	ldrex	r3, [r3]
 8016018:	623b      	str	r3, [r7, #32]
   return(result);
 801601a:	6a3b      	ldr	r3, [r7, #32]
 801601c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016020:	63bb      	str	r3, [r7, #56]	; 0x38
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	681b      	ldr	r3, [r3, #0]
 8016026:	3314      	adds	r3, #20
 8016028:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801602a:	633a      	str	r2, [r7, #48]	; 0x30
 801602c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801602e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016032:	e841 2300 	strex	r3, r2, [r1]
 8016036:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801603a:	2b00      	cmp	r3, #0
 801603c:	d1e5      	bne.n	801600a <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016042:	2b00      	cmp	r3, #0
 8016044:	d004      	beq.n	8016050 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801604a:	4618      	mov	r0, r3
 801604c:	f7f1 fed7 	bl	8007dfe <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8016050:	6878      	ldr	r0, [r7, #4]
 8016052:	f001 fcd1 	bl	80179f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	681b      	ldr	r3, [r3, #0]
 801605a:	695b      	ldr	r3, [r3, #20]
 801605c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016060:	2b40      	cmp	r3, #64	; 0x40
 8016062:	bf0c      	ite	eq
 8016064:	2301      	moveq	r3, #1
 8016066:	2300      	movne	r3, #0
 8016068:	b2db      	uxtb	r3, r3
 801606a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8016072:	b2db      	uxtb	r3, r3
 8016074:	2b22      	cmp	r3, #34	; 0x22
 8016076:	d128      	bne.n	80160ca <HAL_UART_DMAStop+0xf4>
 8016078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801607a:	2b00      	cmp	r3, #0
 801607c:	d025      	beq.n	80160ca <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	681b      	ldr	r3, [r3, #0]
 8016082:	3314      	adds	r3, #20
 8016084:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016086:	693b      	ldr	r3, [r7, #16]
 8016088:	e853 3f00 	ldrex	r3, [r3]
 801608c:	60fb      	str	r3, [r7, #12]
   return(result);
 801608e:	68fb      	ldr	r3, [r7, #12]
 8016090:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016094:	637b      	str	r3, [r7, #52]	; 0x34
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	681b      	ldr	r3, [r3, #0]
 801609a:	3314      	adds	r3, #20
 801609c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801609e:	61fa      	str	r2, [r7, #28]
 80160a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80160a2:	69b9      	ldr	r1, [r7, #24]
 80160a4:	69fa      	ldr	r2, [r7, #28]
 80160a6:	e841 2300 	strex	r3, r2, [r1]
 80160aa:	617b      	str	r3, [r7, #20]
   return(result);
 80160ac:	697b      	ldr	r3, [r7, #20]
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	d1e5      	bne.n	801607e <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	d004      	beq.n	80160c4 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80160be:	4618      	mov	r0, r3
 80160c0:	f7f1 fe9d 	bl	8007dfe <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80160c4:	6878      	ldr	r0, [r7, #4]
 80160c6:	f001 fcbf 	bl	8017a48 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80160ca:	2300      	movs	r3, #0
}
 80160cc:	4618      	mov	r0, r3
 80160ce:	3740      	adds	r7, #64	; 0x40
 80160d0:	46bd      	mov	sp, r7
 80160d2:	bd80      	pop	{r7, pc}

080160d4 <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 80160d4:	b580      	push	{r7, lr}
 80160d6:	b088      	sub	sp, #32
 80160d8:	af00      	add	r7, sp, #0
 80160da:	60f8      	str	r0, [r7, #12]
 80160dc:	60b9      	str	r1, [r7, #8]
 80160de:	603b      	str	r3, [r7, #0]
 80160e0:	4613      	mov	r3, r2
 80160e2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80160e4:	68fb      	ldr	r3, [r7, #12]
 80160e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80160ea:	b2db      	uxtb	r3, r3
 80160ec:	2b20      	cmp	r3, #32
 80160ee:	f040 80c9 	bne.w	8016284 <HAL_UARTEx_ReceiveToIdle+0x1b0>
  {
    if ((pData == NULL) || (Size == 0U))
 80160f2:	68bb      	ldr	r3, [r7, #8]
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	d002      	beq.n	80160fe <HAL_UARTEx_ReceiveToIdle+0x2a>
 80160f8:	88fb      	ldrh	r3, [r7, #6]
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d101      	bne.n	8016102 <HAL_UARTEx_ReceiveToIdle+0x2e>
    {
      return  HAL_ERROR;
 80160fe:	2301      	movs	r3, #1
 8016100:	e0c1      	b.n	8016286 <HAL_UARTEx_ReceiveToIdle+0x1b2>
    }

    __HAL_LOCK(huart);
 8016102:	68fb      	ldr	r3, [r7, #12]
 8016104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016108:	2b01      	cmp	r3, #1
 801610a:	d101      	bne.n	8016110 <HAL_UARTEx_ReceiveToIdle+0x3c>
 801610c:	2302      	movs	r3, #2
 801610e:	e0ba      	b.n	8016286 <HAL_UARTEx_ReceiveToIdle+0x1b2>
 8016110:	68fb      	ldr	r3, [r7, #12]
 8016112:	2201      	movs	r2, #1
 8016114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016118:	68fb      	ldr	r3, [r7, #12]
 801611a:	2200      	movs	r2, #0
 801611c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801611e:	68fb      	ldr	r3, [r7, #12]
 8016120:	2222      	movs	r2, #34	; 0x22
 8016122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8016126:	68fb      	ldr	r3, [r7, #12]
 8016128:	2201      	movs	r2, #1
 801612a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801612c:	f7f0 fba6 	bl	800687c <HAL_GetTick>
 8016130:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8016132:	68fb      	ldr	r3, [r7, #12]
 8016134:	88fa      	ldrh	r2, [r7, #6]
 8016136:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8016138:	68fb      	ldr	r3, [r7, #12]
 801613a:	88fa      	ldrh	r2, [r7, #6]
 801613c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801613e:	68fb      	ldr	r3, [r7, #12]
 8016140:	689b      	ldr	r3, [r3, #8]
 8016142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016146:	d108      	bne.n	801615a <HAL_UARTEx_ReceiveToIdle+0x86>
 8016148:	68fb      	ldr	r3, [r7, #12]
 801614a:	691b      	ldr	r3, [r3, #16]
 801614c:	2b00      	cmp	r3, #0
 801614e:	d104      	bne.n	801615a <HAL_UARTEx_ReceiveToIdle+0x86>
    {
      pdata8bits  = NULL;
 8016150:	2300      	movs	r3, #0
 8016152:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8016154:	68bb      	ldr	r3, [r7, #8]
 8016156:	61bb      	str	r3, [r7, #24]
 8016158:	e003      	b.n	8016162 <HAL_UARTEx_ReceiveToIdle+0x8e>
    }
    else
    {
      pdata8bits  = pData;
 801615a:	68bb      	ldr	r3, [r7, #8]
 801615c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801615e:	2300      	movs	r3, #0
 8016160:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8016162:	68fb      	ldr	r3, [r7, #12]
 8016164:	2200      	movs	r2, #0
 8016166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Initialize output number of received elements */
    *RxLen = 0U;
 801616a:	683b      	ldr	r3, [r7, #0]
 801616c:	2200      	movs	r2, #0
 801616e:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8016170:	e074      	b.n	801625c <HAL_UARTEx_ReceiveToIdle+0x188>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8016172:	68fb      	ldr	r3, [r7, #12]
 8016174:	681b      	ldr	r3, [r3, #0]
 8016176:	681b      	ldr	r3, [r3, #0]
 8016178:	f003 0310 	and.w	r3, r3, #16
 801617c:	2b10      	cmp	r3, #16
 801617e:	d114      	bne.n	80161aa <HAL_UARTEx_ReceiveToIdle+0xd6>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8016180:	2300      	movs	r3, #0
 8016182:	613b      	str	r3, [r7, #16]
 8016184:	68fb      	ldr	r3, [r7, #12]
 8016186:	681b      	ldr	r3, [r3, #0]
 8016188:	681b      	ldr	r3, [r3, #0]
 801618a:	613b      	str	r3, [r7, #16]
 801618c:	68fb      	ldr	r3, [r7, #12]
 801618e:	681b      	ldr	r3, [r3, #0]
 8016190:	685b      	ldr	r3, [r3, #4]
 8016192:	613b      	str	r3, [r7, #16]
 8016194:	693b      	ldr	r3, [r7, #16]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 8016196:	683b      	ldr	r3, [r7, #0]
 8016198:	881b      	ldrh	r3, [r3, #0]
 801619a:	2b00      	cmp	r3, #0
 801619c:	d005      	beq.n	80161aa <HAL_UARTEx_ReceiveToIdle+0xd6>
        {
          huart->RxState = HAL_UART_STATE_READY;
 801619e:	68fb      	ldr	r3, [r7, #12]
 80161a0:	2220      	movs	r2, #32
 80161a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

          return HAL_OK;
 80161a6:	2300      	movs	r3, #0
 80161a8:	e06d      	b.n	8016286 <HAL_UARTEx_ReceiveToIdle+0x1b2>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 80161aa:	68fb      	ldr	r3, [r7, #12]
 80161ac:	681b      	ldr	r3, [r3, #0]
 80161ae:	681b      	ldr	r3, [r3, #0]
 80161b0:	f003 0320 	and.w	r3, r3, #32
 80161b4:	2b20      	cmp	r3, #32
 80161b6:	d13c      	bne.n	8016232 <HAL_UARTEx_ReceiveToIdle+0x15e>
      {
        if (pdata8bits == NULL)
 80161b8:	69fb      	ldr	r3, [r7, #28]
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d10c      	bne.n	80161d8 <HAL_UARTEx_ReceiveToIdle+0x104>
        {
          *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80161be:	68fb      	ldr	r3, [r7, #12]
 80161c0:	681b      	ldr	r3, [r3, #0]
 80161c2:	685b      	ldr	r3, [r3, #4]
 80161c4:	b29b      	uxth	r3, r3
 80161c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80161ca:	b29a      	uxth	r2, r3
 80161cc:	69bb      	ldr	r3, [r7, #24]
 80161ce:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 80161d0:	69bb      	ldr	r3, [r7, #24]
 80161d2:	3302      	adds	r3, #2
 80161d4:	61bb      	str	r3, [r7, #24]
 80161d6:	e01f      	b.n	8016218 <HAL_UARTEx_ReceiveToIdle+0x144>
        }
        else
        {
          if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80161d8:	68fb      	ldr	r3, [r7, #12]
 80161da:	689b      	ldr	r3, [r3, #8]
 80161dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80161e0:	d007      	beq.n	80161f2 <HAL_UARTEx_ReceiveToIdle+0x11e>
 80161e2:	68fb      	ldr	r3, [r7, #12]
 80161e4:	689b      	ldr	r3, [r3, #8]
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	d10a      	bne.n	8016200 <HAL_UARTEx_ReceiveToIdle+0x12c>
 80161ea:	68fb      	ldr	r3, [r7, #12]
 80161ec:	691b      	ldr	r3, [r3, #16]
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	d106      	bne.n	8016200 <HAL_UARTEx_ReceiveToIdle+0x12c>
          {
            *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80161f2:	68fb      	ldr	r3, [r7, #12]
 80161f4:	681b      	ldr	r3, [r3, #0]
 80161f6:	685b      	ldr	r3, [r3, #4]
 80161f8:	b2da      	uxtb	r2, r3
 80161fa:	69fb      	ldr	r3, [r7, #28]
 80161fc:	701a      	strb	r2, [r3, #0]
 80161fe:	e008      	b.n	8016212 <HAL_UARTEx_ReceiveToIdle+0x13e>
          }
          else
          {
            *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8016200:	68fb      	ldr	r3, [r7, #12]
 8016202:	681b      	ldr	r3, [r3, #0]
 8016204:	685b      	ldr	r3, [r3, #4]
 8016206:	b2db      	uxtb	r3, r3
 8016208:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801620c:	b2da      	uxtb	r2, r3
 801620e:	69fb      	ldr	r3, [r7, #28]
 8016210:	701a      	strb	r2, [r3, #0]
          }

          pdata8bits++;
 8016212:	69fb      	ldr	r3, [r7, #28]
 8016214:	3301      	adds	r3, #1
 8016216:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 8016218:	683b      	ldr	r3, [r7, #0]
 801621a:	881b      	ldrh	r3, [r3, #0]
 801621c:	3301      	adds	r3, #1
 801621e:	b29a      	uxth	r2, r3
 8016220:	683b      	ldr	r3, [r7, #0]
 8016222:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 8016224:	68fb      	ldr	r3, [r7, #12]
 8016226:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8016228:	b29b      	uxth	r3, r3
 801622a:	3b01      	subs	r3, #1
 801622c:	b29a      	uxth	r2, r3
 801622e:	68fb      	ldr	r3, [r7, #12]
 8016230:	85da      	strh	r2, [r3, #46]	; 0x2e
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8016232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016238:	d010      	beq.n	801625c <HAL_UARTEx_ReceiveToIdle+0x188>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801623a:	f7f0 fb1f 	bl	800687c <HAL_GetTick>
 801623e:	4602      	mov	r2, r0
 8016240:	697b      	ldr	r3, [r7, #20]
 8016242:	1ad3      	subs	r3, r2, r3
 8016244:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016246:	429a      	cmp	r2, r3
 8016248:	d302      	bcc.n	8016250 <HAL_UARTEx_ReceiveToIdle+0x17c>
 801624a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801624c:	2b00      	cmp	r3, #0
 801624e:	d105      	bne.n	801625c <HAL_UARTEx_ReceiveToIdle+0x188>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8016250:	68fb      	ldr	r3, [r7, #12]
 8016252:	2220      	movs	r2, #32
 8016254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

          return HAL_TIMEOUT;
 8016258:	2303      	movs	r3, #3
 801625a:	e014      	b.n	8016286 <HAL_UARTEx_ReceiveToIdle+0x1b2>
    while (huart->RxXferCount > 0U)
 801625c:	68fb      	ldr	r3, [r7, #12]
 801625e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8016260:	b29b      	uxth	r3, r3
 8016262:	2b00      	cmp	r3, #0
 8016264:	d185      	bne.n	8016172 <HAL_UARTEx_ReceiveToIdle+0x9e>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 8016266:	68fb      	ldr	r3, [r7, #12]
 8016268:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801626a:	68fb      	ldr	r3, [r7, #12]
 801626c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801626e:	b29b      	uxth	r3, r3
 8016270:	1ad3      	subs	r3, r2, r3
 8016272:	b29a      	uxth	r2, r3
 8016274:	683b      	ldr	r3, [r7, #0]
 8016276:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8016278:	68fb      	ldr	r3, [r7, #12]
 801627a:	2220      	movs	r2, #32
 801627c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8016280:	2300      	movs	r3, #0
 8016282:	e000      	b.n	8016286 <HAL_UARTEx_ReceiveToIdle+0x1b2>
  }
  else
  {
    return HAL_BUSY;
 8016284:	2302      	movs	r3, #2
  }
}
 8016286:	4618      	mov	r0, r3
 8016288:	3720      	adds	r7, #32
 801628a:	46bd      	mov	sp, r7
 801628c:	bd80      	pop	{r7, pc}

0801628e <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801628e:	b580      	push	{r7, lr}
 8016290:	b08c      	sub	sp, #48	; 0x30
 8016292:	af00      	add	r7, sp, #0
 8016294:	60f8      	str	r0, [r7, #12]
 8016296:	60b9      	str	r1, [r7, #8]
 8016298:	4613      	mov	r3, r2
 801629a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801629c:	68fb      	ldr	r3, [r7, #12]
 801629e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80162a2:	b2db      	uxtb	r3, r3
 80162a4:	2b20      	cmp	r3, #32
 80162a6:	d152      	bne.n	801634e <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80162a8:	68bb      	ldr	r3, [r7, #8]
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	d002      	beq.n	80162b4 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 80162ae:	88fb      	ldrh	r3, [r7, #6]
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	d101      	bne.n	80162b8 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 80162b4:	2301      	movs	r3, #1
 80162b6:	e04b      	b.n	8016350 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
    }

    __HAL_LOCK(huart);
 80162b8:	68fb      	ldr	r3, [r7, #12]
 80162ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80162be:	2b01      	cmp	r3, #1
 80162c0:	d101      	bne.n	80162c6 <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 80162c2:	2302      	movs	r3, #2
 80162c4:	e044      	b.n	8016350 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
 80162c6:	68fb      	ldr	r3, [r7, #12]
 80162c8:	2201      	movs	r2, #1
 80162ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80162ce:	68fb      	ldr	r3, [r7, #12]
 80162d0:	2201      	movs	r2, #1
 80162d2:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80162d4:	88fb      	ldrh	r3, [r7, #6]
 80162d6:	461a      	mov	r2, r3
 80162d8:	68b9      	ldr	r1, [r7, #8]
 80162da:	68f8      	ldr	r0, [r7, #12]
 80162dc:	f001 fab8 	bl	8017850 <UART_Start_Receive_IT>
 80162e0:	4603      	mov	r3, r0
 80162e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80162e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80162ea:	2b00      	cmp	r3, #0
 80162ec:	d12c      	bne.n	8016348 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80162ee:	68fb      	ldr	r3, [r7, #12]
 80162f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80162f2:	2b01      	cmp	r3, #1
 80162f4:	d125      	bne.n	8016342 <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80162f6:	2300      	movs	r3, #0
 80162f8:	613b      	str	r3, [r7, #16]
 80162fa:	68fb      	ldr	r3, [r7, #12]
 80162fc:	681b      	ldr	r3, [r3, #0]
 80162fe:	681b      	ldr	r3, [r3, #0]
 8016300:	613b      	str	r3, [r7, #16]
 8016302:	68fb      	ldr	r3, [r7, #12]
 8016304:	681b      	ldr	r3, [r3, #0]
 8016306:	685b      	ldr	r3, [r3, #4]
 8016308:	613b      	str	r3, [r7, #16]
 801630a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801630c:	68fb      	ldr	r3, [r7, #12]
 801630e:	681b      	ldr	r3, [r3, #0]
 8016310:	330c      	adds	r3, #12
 8016312:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016314:	69bb      	ldr	r3, [r7, #24]
 8016316:	e853 3f00 	ldrex	r3, [r3]
 801631a:	617b      	str	r3, [r7, #20]
   return(result);
 801631c:	697b      	ldr	r3, [r7, #20]
 801631e:	f043 0310 	orr.w	r3, r3, #16
 8016322:	62bb      	str	r3, [r7, #40]	; 0x28
 8016324:	68fb      	ldr	r3, [r7, #12]
 8016326:	681b      	ldr	r3, [r3, #0]
 8016328:	330c      	adds	r3, #12
 801632a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801632c:	627a      	str	r2, [r7, #36]	; 0x24
 801632e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016330:	6a39      	ldr	r1, [r7, #32]
 8016332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016334:	e841 2300 	strex	r3, r2, [r1]
 8016338:	61fb      	str	r3, [r7, #28]
   return(result);
 801633a:	69fb      	ldr	r3, [r7, #28]
 801633c:	2b00      	cmp	r3, #0
 801633e:	d1e5      	bne.n	801630c <HAL_UARTEx_ReceiveToIdle_IT+0x7e>
 8016340:	e002      	b.n	8016348 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8016342:	2301      	movs	r3, #1
 8016344:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8016348:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801634c:	e000      	b.n	8016350 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 801634e:	2302      	movs	r3, #2
  }
}
 8016350:	4618      	mov	r0, r3
 8016352:	3730      	adds	r7, #48	; 0x30
 8016354:	46bd      	mov	sp, r7
 8016356:	bd80      	pop	{r7, pc}

08016358 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8016358:	b580      	push	{r7, lr}
 801635a:	b08c      	sub	sp, #48	; 0x30
 801635c:	af00      	add	r7, sp, #0
 801635e:	60f8      	str	r0, [r7, #12]
 8016360:	60b9      	str	r1, [r7, #8]
 8016362:	4613      	mov	r3, r2
 8016364:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8016366:	68fb      	ldr	r3, [r7, #12]
 8016368:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801636c:	b2db      	uxtb	r3, r3
 801636e:	2b20      	cmp	r3, #32
 8016370:	d152      	bne.n	8016418 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8016372:	68bb      	ldr	r3, [r7, #8]
 8016374:	2b00      	cmp	r3, #0
 8016376:	d002      	beq.n	801637e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8016378:	88fb      	ldrh	r3, [r7, #6]
 801637a:	2b00      	cmp	r3, #0
 801637c:	d101      	bne.n	8016382 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 801637e:	2301      	movs	r3, #1
 8016380:	e04b      	b.n	801641a <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8016382:	68fb      	ldr	r3, [r7, #12]
 8016384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016388:	2b01      	cmp	r3, #1
 801638a:	d101      	bne.n	8016390 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 801638c:	2302      	movs	r3, #2
 801638e:	e044      	b.n	801641a <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8016390:	68fb      	ldr	r3, [r7, #12]
 8016392:	2201      	movs	r2, #1
 8016394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8016398:	68fb      	ldr	r3, [r7, #12]
 801639a:	2201      	movs	r2, #1
 801639c:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 801639e:	88fb      	ldrh	r3, [r7, #6]
 80163a0:	461a      	mov	r2, r3
 80163a2:	68b9      	ldr	r1, [r7, #8]
 80163a4:	68f8      	ldr	r0, [r7, #12]
 80163a6:	f001 fa8d 	bl	80178c4 <UART_Start_Receive_DMA>
 80163aa:	4603      	mov	r3, r0
 80163ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80163b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	d12c      	bne.n	8016412 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80163b8:	68fb      	ldr	r3, [r7, #12]
 80163ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80163bc:	2b01      	cmp	r3, #1
 80163be:	d125      	bne.n	801640c <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80163c0:	2300      	movs	r3, #0
 80163c2:	613b      	str	r3, [r7, #16]
 80163c4:	68fb      	ldr	r3, [r7, #12]
 80163c6:	681b      	ldr	r3, [r3, #0]
 80163c8:	681b      	ldr	r3, [r3, #0]
 80163ca:	613b      	str	r3, [r7, #16]
 80163cc:	68fb      	ldr	r3, [r7, #12]
 80163ce:	681b      	ldr	r3, [r3, #0]
 80163d0:	685b      	ldr	r3, [r3, #4]
 80163d2:	613b      	str	r3, [r7, #16]
 80163d4:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80163d6:	68fb      	ldr	r3, [r7, #12]
 80163d8:	681b      	ldr	r3, [r3, #0]
 80163da:	330c      	adds	r3, #12
 80163dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80163de:	69bb      	ldr	r3, [r7, #24]
 80163e0:	e853 3f00 	ldrex	r3, [r3]
 80163e4:	617b      	str	r3, [r7, #20]
   return(result);
 80163e6:	697b      	ldr	r3, [r7, #20]
 80163e8:	f043 0310 	orr.w	r3, r3, #16
 80163ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80163ee:	68fb      	ldr	r3, [r7, #12]
 80163f0:	681b      	ldr	r3, [r3, #0]
 80163f2:	330c      	adds	r3, #12
 80163f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80163f6:	627a      	str	r2, [r7, #36]	; 0x24
 80163f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80163fa:	6a39      	ldr	r1, [r7, #32]
 80163fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80163fe:	e841 2300 	strex	r3, r2, [r1]
 8016402:	61fb      	str	r3, [r7, #28]
   return(result);
 8016404:	69fb      	ldr	r3, [r7, #28]
 8016406:	2b00      	cmp	r3, #0
 8016408:	d1e5      	bne.n	80163d6 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 801640a:	e002      	b.n	8016412 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 801640c:	2301      	movs	r3, #1
 801640e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8016412:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016416:	e000      	b.n	801641a <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8016418:	2302      	movs	r3, #2
  }
}
 801641a:	4618      	mov	r0, r3
 801641c:	3730      	adds	r7, #48	; 0x30
 801641e:	46bd      	mov	sp, r7
 8016420:	bd80      	pop	{r7, pc}

08016422 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8016422:	b580      	push	{r7, lr}
 8016424:	b0a0      	sub	sp, #128	; 0x80
 8016426:	af00      	add	r7, sp, #0
 8016428:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	681b      	ldr	r3, [r3, #0]
 801642e:	330c      	adds	r3, #12
 8016430:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016432:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016434:	e853 3f00 	ldrex	r3, [r3]
 8016438:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 801643a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801643c:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8016440:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	681b      	ldr	r3, [r3, #0]
 8016446:	330c      	adds	r3, #12
 8016448:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801644a:	66ba      	str	r2, [r7, #104]	; 0x68
 801644c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801644e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8016450:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8016452:	e841 2300 	strex	r3, r2, [r1]
 8016456:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8016458:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801645a:	2b00      	cmp	r3, #0
 801645c:	d1e5      	bne.n	801642a <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	681b      	ldr	r3, [r3, #0]
 8016462:	3314      	adds	r3, #20
 8016464:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016466:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016468:	e853 3f00 	ldrex	r3, [r3]
 801646c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801646e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016470:	f023 0301 	bic.w	r3, r3, #1
 8016474:	67bb      	str	r3, [r7, #120]	; 0x78
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	681b      	ldr	r3, [r3, #0]
 801647a:	3314      	adds	r3, #20
 801647c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801647e:	657a      	str	r2, [r7, #84]	; 0x54
 8016480:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016482:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016484:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016486:	e841 2300 	strex	r3, r2, [r1]
 801648a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801648c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801648e:	2b00      	cmp	r3, #0
 8016490:	d1e5      	bne.n	801645e <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016496:	2b01      	cmp	r3, #1
 8016498:	d119      	bne.n	80164ce <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 801649a:	687b      	ldr	r3, [r7, #4]
 801649c:	681b      	ldr	r3, [r3, #0]
 801649e:	330c      	adds	r3, #12
 80164a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80164a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80164a4:	e853 3f00 	ldrex	r3, [r3]
 80164a8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80164aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164ac:	f023 0310 	bic.w	r3, r3, #16
 80164b0:	677b      	str	r3, [r7, #116]	; 0x74
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	681b      	ldr	r3, [r3, #0]
 80164b6:	330c      	adds	r3, #12
 80164b8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80164ba:	643a      	str	r2, [r7, #64]	; 0x40
 80164bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80164be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80164c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80164c2:	e841 2300 	strex	r3, r2, [r1]
 80164c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80164c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	d1e5      	bne.n	801649a <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	681b      	ldr	r3, [r3, #0]
 80164d2:	695b      	ldr	r3, [r3, #20]
 80164d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80164d8:	2b80      	cmp	r3, #128	; 0x80
 80164da:	d136      	bne.n	801654a <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	681b      	ldr	r3, [r3, #0]
 80164e0:	3314      	adds	r3, #20
 80164e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80164e4:	6a3b      	ldr	r3, [r7, #32]
 80164e6:	e853 3f00 	ldrex	r3, [r3]
 80164ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80164ec:	69fb      	ldr	r3, [r7, #28]
 80164ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80164f2:	673b      	str	r3, [r7, #112]	; 0x70
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	681b      	ldr	r3, [r3, #0]
 80164f8:	3314      	adds	r3, #20
 80164fa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80164fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80164fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016500:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016502:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016504:	e841 2300 	strex	r3, r2, [r1]
 8016508:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801650a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801650c:	2b00      	cmp	r3, #0
 801650e:	d1e5      	bne.n	80164dc <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016514:	2b00      	cmp	r3, #0
 8016516:	d018      	beq.n	801654a <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801651c:	2200      	movs	r2, #0
 801651e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016524:	4618      	mov	r0, r3
 8016526:	f7f1 fc6a 	bl	8007dfe <HAL_DMA_Abort>
 801652a:	4603      	mov	r3, r0
 801652c:	2b00      	cmp	r3, #0
 801652e:	d00c      	beq.n	801654a <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016534:	4618      	mov	r0, r3
 8016536:	f7f2 f826 	bl	8008586 <HAL_DMA_GetError>
 801653a:	4603      	mov	r3, r0
 801653c:	2b20      	cmp	r3, #32
 801653e:	d104      	bne.n	801654a <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	2210      	movs	r2, #16
 8016544:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8016546:	2303      	movs	r3, #3
 8016548:	e052      	b.n	80165f0 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	681b      	ldr	r3, [r3, #0]
 801654e:	695b      	ldr	r3, [r3, #20]
 8016550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016554:	2b40      	cmp	r3, #64	; 0x40
 8016556:	d136      	bne.n	80165c6 <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	681b      	ldr	r3, [r3, #0]
 801655c:	3314      	adds	r3, #20
 801655e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016560:	68fb      	ldr	r3, [r7, #12]
 8016562:	e853 3f00 	ldrex	r3, [r3]
 8016566:	60bb      	str	r3, [r7, #8]
   return(result);
 8016568:	68bb      	ldr	r3, [r7, #8]
 801656a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801656e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	681b      	ldr	r3, [r3, #0]
 8016574:	3314      	adds	r3, #20
 8016576:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016578:	61ba      	str	r2, [r7, #24]
 801657a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801657c:	6979      	ldr	r1, [r7, #20]
 801657e:	69ba      	ldr	r2, [r7, #24]
 8016580:	e841 2300 	strex	r3, r2, [r1]
 8016584:	613b      	str	r3, [r7, #16]
   return(result);
 8016586:	693b      	ldr	r3, [r7, #16]
 8016588:	2b00      	cmp	r3, #0
 801658a:	d1e5      	bne.n	8016558 <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016590:	2b00      	cmp	r3, #0
 8016592:	d018      	beq.n	80165c6 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016598:	2200      	movs	r2, #0
 801659a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 801659c:	687b      	ldr	r3, [r7, #4]
 801659e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80165a0:	4618      	mov	r0, r3
 80165a2:	f7f1 fc2c 	bl	8007dfe <HAL_DMA_Abort>
 80165a6:	4603      	mov	r3, r0
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	d00c      	beq.n	80165c6 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80165b0:	4618      	mov	r0, r3
 80165b2:	f7f1 ffe8 	bl	8008586 <HAL_DMA_GetError>
 80165b6:	4603      	mov	r3, r0
 80165b8:	2b20      	cmp	r3, #32
 80165ba:	d104      	bne.n	80165c6 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	2210      	movs	r2, #16
 80165c0:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 80165c2:	2303      	movs	r3, #3
 80165c4:	e014      	b.n	80165f0 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	2200      	movs	r2, #0
 80165ca:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	2200      	movs	r2, #0
 80165d0:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	2200      	movs	r2, #0
 80165d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	2220      	movs	r2, #32
 80165dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->gState = HAL_UART_STATE_READY;
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	2220      	movs	r2, #32
 80165e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80165e8:	687b      	ldr	r3, [r7, #4]
 80165ea:	2200      	movs	r2, #0
 80165ec:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80165ee:	2300      	movs	r3, #0
}
 80165f0:	4618      	mov	r0, r3
 80165f2:	3780      	adds	r7, #128	; 0x80
 80165f4:	46bd      	mov	sp, r7
 80165f6:	bd80      	pop	{r7, pc}

080165f8 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 80165f8:	b580      	push	{r7, lr}
 80165fa:	b08e      	sub	sp, #56	; 0x38
 80165fc:	af00      	add	r7, sp, #0
 80165fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	681b      	ldr	r3, [r3, #0]
 8016604:	330c      	adds	r3, #12
 8016606:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016608:	6a3b      	ldr	r3, [r7, #32]
 801660a:	e853 3f00 	ldrex	r3, [r3]
 801660e:	61fb      	str	r3, [r7, #28]
   return(result);
 8016610:	69fb      	ldr	r3, [r7, #28]
 8016612:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8016616:	637b      	str	r3, [r7, #52]	; 0x34
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	681b      	ldr	r3, [r3, #0]
 801661c:	330c      	adds	r3, #12
 801661e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016620:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016622:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016624:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016626:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016628:	e841 2300 	strex	r3, r2, [r1]
 801662c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801662e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016630:	2b00      	cmp	r3, #0
 8016632:	d1e5      	bne.n	8016600 <HAL_UART_AbortTransmit+0x8>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	681b      	ldr	r3, [r3, #0]
 8016638:	695b      	ldr	r3, [r3, #20]
 801663a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801663e:	2b80      	cmp	r3, #128	; 0x80
 8016640:	d136      	bne.n	80166b0 <HAL_UART_AbortTransmit+0xb8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8016642:	687b      	ldr	r3, [r7, #4]
 8016644:	681b      	ldr	r3, [r3, #0]
 8016646:	3314      	adds	r3, #20
 8016648:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801664a:	68fb      	ldr	r3, [r7, #12]
 801664c:	e853 3f00 	ldrex	r3, [r3]
 8016650:	60bb      	str	r3, [r7, #8]
   return(result);
 8016652:	68bb      	ldr	r3, [r7, #8]
 8016654:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016658:	633b      	str	r3, [r7, #48]	; 0x30
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	681b      	ldr	r3, [r3, #0]
 801665e:	3314      	adds	r3, #20
 8016660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016662:	61ba      	str	r2, [r7, #24]
 8016664:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016666:	6979      	ldr	r1, [r7, #20]
 8016668:	69ba      	ldr	r2, [r7, #24]
 801666a:	e841 2300 	strex	r3, r2, [r1]
 801666e:	613b      	str	r3, [r7, #16]
   return(result);
 8016670:	693b      	ldr	r3, [r7, #16]
 8016672:	2b00      	cmp	r3, #0
 8016674:	d1e5      	bne.n	8016642 <HAL_UART_AbortTransmit+0x4a>

    /* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801667a:	2b00      	cmp	r3, #0
 801667c:	d018      	beq.n	80166b0 <HAL_UART_AbortTransmit+0xb8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016682:	2200      	movs	r2, #0
 8016684:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801668a:	4618      	mov	r0, r3
 801668c:	f7f1 fbb7 	bl	8007dfe <HAL_DMA_Abort>
 8016690:	4603      	mov	r3, r0
 8016692:	2b00      	cmp	r3, #0
 8016694:	d00c      	beq.n	80166b0 <HAL_UART_AbortTransmit+0xb8>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801669a:	4618      	mov	r0, r3
 801669c:	f7f1 ff73 	bl	8008586 <HAL_DMA_GetError>
 80166a0:	4603      	mov	r3, r0
 80166a2:	2b20      	cmp	r3, #32
 80166a4:	d104      	bne.n	80166b0 <HAL_UART_AbortTransmit+0xb8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	2210      	movs	r2, #16
 80166aa:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 80166ac:	2303      	movs	r3, #3
 80166ae:	e007      	b.n	80166c0 <HAL_UART_AbortTransmit+0xc8>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0x00U;
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	2200      	movs	r2, #0
 80166b4:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	2220      	movs	r2, #32
 80166ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80166be:	2300      	movs	r3, #0
}
 80166c0:	4618      	mov	r0, r3
 80166c2:	3738      	adds	r7, #56	; 0x38
 80166c4:	46bd      	mov	sp, r7
 80166c6:	bd80      	pop	{r7, pc}

080166c8 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80166c8:	b580      	push	{r7, lr}
 80166ca:	b09a      	sub	sp, #104	; 0x68
 80166cc:	af00      	add	r7, sp, #0
 80166ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	681b      	ldr	r3, [r3, #0]
 80166d4:	330c      	adds	r3, #12
 80166d6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80166d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80166da:	e853 3f00 	ldrex	r3, [r3]
 80166de:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80166e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80166e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80166e6:	667b      	str	r3, [r7, #100]	; 0x64
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	681b      	ldr	r3, [r3, #0]
 80166ec:	330c      	adds	r3, #12
 80166ee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80166f0:	657a      	str	r2, [r7, #84]	; 0x54
 80166f2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80166f4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80166f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80166f8:	e841 2300 	strex	r3, r2, [r1]
 80166fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80166fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016700:	2b00      	cmp	r3, #0
 8016702:	d1e5      	bne.n	80166d0 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	681b      	ldr	r3, [r3, #0]
 8016708:	3314      	adds	r3, #20
 801670a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801670c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801670e:	e853 3f00 	ldrex	r3, [r3]
 8016712:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8016714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016716:	f023 0301 	bic.w	r3, r3, #1
 801671a:	663b      	str	r3, [r7, #96]	; 0x60
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	681b      	ldr	r3, [r3, #0]
 8016720:	3314      	adds	r3, #20
 8016722:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016724:	643a      	str	r2, [r7, #64]	; 0x40
 8016726:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016728:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801672a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801672c:	e841 2300 	strex	r3, r2, [r1]
 8016730:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016734:	2b00      	cmp	r3, #0
 8016736:	d1e5      	bne.n	8016704 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801673c:	2b01      	cmp	r3, #1
 801673e:	d119      	bne.n	8016774 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	681b      	ldr	r3, [r3, #0]
 8016744:	330c      	adds	r3, #12
 8016746:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016748:	6a3b      	ldr	r3, [r7, #32]
 801674a:	e853 3f00 	ldrex	r3, [r3]
 801674e:	61fb      	str	r3, [r7, #28]
   return(result);
 8016750:	69fb      	ldr	r3, [r7, #28]
 8016752:	f023 0310 	bic.w	r3, r3, #16
 8016756:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	681b      	ldr	r3, [r3, #0]
 801675c:	330c      	adds	r3, #12
 801675e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016760:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016762:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016764:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016766:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016768:	e841 2300 	strex	r3, r2, [r1]
 801676c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801676e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016770:	2b00      	cmp	r3, #0
 8016772:	d1e5      	bne.n	8016740 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	681b      	ldr	r3, [r3, #0]
 8016778:	695b      	ldr	r3, [r3, #20]
 801677a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801677e:	2b40      	cmp	r3, #64	; 0x40
 8016780:	d136      	bne.n	80167f0 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	681b      	ldr	r3, [r3, #0]
 8016786:	3314      	adds	r3, #20
 8016788:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801678a:	68fb      	ldr	r3, [r7, #12]
 801678c:	e853 3f00 	ldrex	r3, [r3]
 8016790:	60bb      	str	r3, [r7, #8]
   return(result);
 8016792:	68bb      	ldr	r3, [r7, #8]
 8016794:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016798:	65bb      	str	r3, [r7, #88]	; 0x58
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	681b      	ldr	r3, [r3, #0]
 801679e:	3314      	adds	r3, #20
 80167a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80167a2:	61ba      	str	r2, [r7, #24]
 80167a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80167a6:	6979      	ldr	r1, [r7, #20]
 80167a8:	69ba      	ldr	r2, [r7, #24]
 80167aa:	e841 2300 	strex	r3, r2, [r1]
 80167ae:	613b      	str	r3, [r7, #16]
   return(result);
 80167b0:	693b      	ldr	r3, [r7, #16]
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	d1e5      	bne.n	8016782 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80167ba:	2b00      	cmp	r3, #0
 80167bc:	d018      	beq.n	80167f0 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80167c2:	2200      	movs	r2, #0
 80167c4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80167ca:	4618      	mov	r0, r3
 80167cc:	f7f1 fb17 	bl	8007dfe <HAL_DMA_Abort>
 80167d0:	4603      	mov	r3, r0
 80167d2:	2b00      	cmp	r3, #0
 80167d4:	d00c      	beq.n	80167f0 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80167da:	4618      	mov	r0, r3
 80167dc:	f7f1 fed3 	bl	8008586 <HAL_DMA_GetError>
 80167e0:	4603      	mov	r3, r0
 80167e2:	2b20      	cmp	r3, #32
 80167e4:	d104      	bne.n	80167f0 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	2210      	movs	r2, #16
 80167ea:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 80167ec:	2303      	movs	r3, #3
 80167ee:	e00a      	b.n	8016806 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	2200      	movs	r2, #0
 80167f4:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	2220      	movs	r2, #32
 80167fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	2200      	movs	r2, #0
 8016802:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8016804:	2300      	movs	r3, #0
}
 8016806:	4618      	mov	r0, r3
 8016808:	3768      	adds	r7, #104	; 0x68
 801680a:	46bd      	mov	sp, r7
 801680c:	bd80      	pop	{r7, pc}

0801680e <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 801680e:	b580      	push	{r7, lr}
 8016810:	b0a2      	sub	sp, #136	; 0x88
 8016812:	af00      	add	r7, sp, #0
 8016814:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 8016816:	2301      	movs	r3, #1
 8016818:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	681b      	ldr	r3, [r3, #0]
 8016820:	330c      	adds	r3, #12
 8016822:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016824:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016826:	e853 3f00 	ldrex	r3, [r3]
 801682a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801682c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801682e:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8016832:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	681b      	ldr	r3, [r3, #0]
 801683a:	330c      	adds	r3, #12
 801683c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016840:	66fa      	str	r2, [r7, #108]	; 0x6c
 8016842:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016844:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8016846:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016848:	e841 2300 	strex	r3, r2, [r1]
 801684c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801684e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016850:	2b00      	cmp	r3, #0
 8016852:	d1e3      	bne.n	801681c <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	681b      	ldr	r3, [r3, #0]
 8016858:	3314      	adds	r3, #20
 801685a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801685c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801685e:	e853 3f00 	ldrex	r3, [r3]
 8016862:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8016864:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016866:	f023 0301 	bic.w	r3, r3, #1
 801686a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	681b      	ldr	r3, [r3, #0]
 8016870:	3314      	adds	r3, #20
 8016872:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8016874:	65ba      	str	r2, [r7, #88]	; 0x58
 8016876:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016878:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801687a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801687c:	e841 2300 	strex	r3, r2, [r1]
 8016880:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8016882:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016884:	2b00      	cmp	r3, #0
 8016886:	d1e5      	bne.n	8016854 <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801688c:	2b01      	cmp	r3, #1
 801688e:	d119      	bne.n	80168c4 <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	681b      	ldr	r3, [r3, #0]
 8016894:	330c      	adds	r3, #12
 8016896:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801689a:	e853 3f00 	ldrex	r3, [r3]
 801689e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80168a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80168a2:	f023 0310 	bic.w	r3, r3, #16
 80168a6:	67bb      	str	r3, [r7, #120]	; 0x78
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	681b      	ldr	r3, [r3, #0]
 80168ac:	330c      	adds	r3, #12
 80168ae:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80168b0:	647a      	str	r2, [r7, #68]	; 0x44
 80168b2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80168b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80168b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80168b8:	e841 2300 	strex	r3, r2, [r1]
 80168bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80168be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80168c0:	2b00      	cmp	r3, #0
 80168c2:	d1e5      	bne.n	8016890 <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80168c8:	2b00      	cmp	r3, #0
 80168ca:	d00f      	beq.n	80168ec <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	681b      	ldr	r3, [r3, #0]
 80168d0:	695b      	ldr	r3, [r3, #20]
 80168d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80168d6:	2b80      	cmp	r3, #128	; 0x80
 80168d8:	d104      	bne.n	80168e4 <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80168de:	4a54      	ldr	r2, [pc, #336]	; (8016a30 <HAL_UART_Abort_IT+0x222>)
 80168e0:	651a      	str	r2, [r3, #80]	; 0x50
 80168e2:	e003      	b.n	80168ec <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80168e8:	2200      	movs	r2, #0
 80168ea:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	d00f      	beq.n	8016914 <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	681b      	ldr	r3, [r3, #0]
 80168f8:	695b      	ldr	r3, [r3, #20]
 80168fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80168fe:	2b40      	cmp	r3, #64	; 0x40
 8016900:	d104      	bne.n	801690c <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016906:	4a4b      	ldr	r2, [pc, #300]	; (8016a34 <HAL_UART_Abort_IT+0x226>)
 8016908:	651a      	str	r2, [r3, #80]	; 0x50
 801690a:	e003      	b.n	8016914 <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016910:	2200      	movs	r2, #0
 8016912:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	681b      	ldr	r3, [r3, #0]
 8016918:	695b      	ldr	r3, [r3, #20]
 801691a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801691e:	2b80      	cmp	r3, #128	; 0x80
 8016920:	d12d      	bne.n	801697e <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	681b      	ldr	r3, [r3, #0]
 8016926:	3314      	adds	r3, #20
 8016928:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801692a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801692c:	e853 3f00 	ldrex	r3, [r3]
 8016930:	623b      	str	r3, [r7, #32]
   return(result);
 8016932:	6a3b      	ldr	r3, [r7, #32]
 8016934:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016938:	677b      	str	r3, [r7, #116]	; 0x74
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	681b      	ldr	r3, [r3, #0]
 801693e:	3314      	adds	r3, #20
 8016940:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016942:	633a      	str	r2, [r7, #48]	; 0x30
 8016944:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016946:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016948:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801694a:	e841 2300 	strex	r3, r2, [r1]
 801694e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016952:	2b00      	cmp	r3, #0
 8016954:	d1e5      	bne.n	8016922 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801695a:	2b00      	cmp	r3, #0
 801695c:	d00f      	beq.n	801697e <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016962:	4618      	mov	r0, r3
 8016964:	f7f1 fabb 	bl	8007ede <HAL_DMA_Abort_IT>
 8016968:	4603      	mov	r3, r0
 801696a:	2b00      	cmp	r3, #0
 801696c:	d004      	beq.n	8016978 <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016972:	2200      	movs	r2, #0
 8016974:	651a      	str	r2, [r3, #80]	; 0x50
 8016976:	e002      	b.n	801697e <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 8016978:	2300      	movs	r3, #0
 801697a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	681b      	ldr	r3, [r3, #0]
 8016982:	695b      	ldr	r3, [r3, #20]
 8016984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016988:	2b40      	cmp	r3, #64	; 0x40
 801698a:	d130      	bne.n	80169ee <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	681b      	ldr	r3, [r3, #0]
 8016990:	3314      	adds	r3, #20
 8016992:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016994:	693b      	ldr	r3, [r7, #16]
 8016996:	e853 3f00 	ldrex	r3, [r3]
 801699a:	60fb      	str	r3, [r7, #12]
   return(result);
 801699c:	68fb      	ldr	r3, [r7, #12]
 801699e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80169a2:	673b      	str	r3, [r7, #112]	; 0x70
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	681b      	ldr	r3, [r3, #0]
 80169a8:	3314      	adds	r3, #20
 80169aa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80169ac:	61fa      	str	r2, [r7, #28]
 80169ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80169b0:	69b9      	ldr	r1, [r7, #24]
 80169b2:	69fa      	ldr	r2, [r7, #28]
 80169b4:	e841 2300 	strex	r3, r2, [r1]
 80169b8:	617b      	str	r3, [r7, #20]
   return(result);
 80169ba:	697b      	ldr	r3, [r7, #20]
 80169bc:	2b00      	cmp	r3, #0
 80169be:	d1e5      	bne.n	801698c <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	d012      	beq.n	80169ee <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80169cc:	4618      	mov	r0, r3
 80169ce:	f7f1 fa86 	bl	8007ede <HAL_DMA_Abort_IT>
 80169d2:	4603      	mov	r3, r0
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	d007      	beq.n	80169e8 <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80169dc:	2200      	movs	r2, #0
 80169de:	651a      	str	r2, [r3, #80]	; 0x50
        AbortCplt = 0x01U;
 80169e0:	2301      	movs	r3, #1
 80169e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80169e6:	e002      	b.n	80169ee <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 80169e8:	2300      	movs	r3, #0
 80169ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 80169ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80169f2:	2b01      	cmp	r3, #1
 80169f4:	d116      	bne.n	8016a24 <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	2200      	movs	r2, #0
 80169fa:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	2200      	movs	r2, #0
 8016a00:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	2200      	movs	r2, #0
 8016a06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	2220      	movs	r2, #32
 8016a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	2220      	movs	r2, #32
 8016a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	2200      	movs	r2, #0
 8016a1c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8016a1e:	6878      	ldr	r0, [r7, #4]
 8016a20:	f000 fbe5 	bl	80171ee <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8016a24:	2300      	movs	r3, #0
}
 8016a26:	4618      	mov	r0, r3
 8016a28:	3788      	adds	r7, #136	; 0x88
 8016a2a:	46bd      	mov	sp, r7
 8016a2c:	bd80      	pop	{r7, pc}
 8016a2e:	bf00      	nop
 8016a30:	08017b37 	.word	0x08017b37
 8016a34:	08017b97 	.word	0x08017b97

08016a38 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 8016a38:	b580      	push	{r7, lr}
 8016a3a:	b08e      	sub	sp, #56	; 0x38
 8016a3c:	af00      	add	r7, sp, #0
 8016a3e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	681b      	ldr	r3, [r3, #0]
 8016a44:	330c      	adds	r3, #12
 8016a46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016a48:	6a3b      	ldr	r3, [r7, #32]
 8016a4a:	e853 3f00 	ldrex	r3, [r3]
 8016a4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8016a50:	69fb      	ldr	r3, [r7, #28]
 8016a52:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8016a56:	637b      	str	r3, [r7, #52]	; 0x34
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	681b      	ldr	r3, [r3, #0]
 8016a5c:	330c      	adds	r3, #12
 8016a5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016a60:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016a62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016a64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016a66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016a68:	e841 2300 	strex	r3, r2, [r1]
 8016a6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a70:	2b00      	cmp	r3, #0
 8016a72:	d1e5      	bne.n	8016a40 <HAL_UART_AbortTransmit_IT+0x8>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	681b      	ldr	r3, [r3, #0]
 8016a78:	695b      	ldr	r3, [r3, #20]
 8016a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016a7e:	2b80      	cmp	r3, #128	; 0x80
 8016a80:	d13c      	bne.n	8016afc <HAL_UART_AbortTransmit_IT+0xc4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	681b      	ldr	r3, [r3, #0]
 8016a86:	3314      	adds	r3, #20
 8016a88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016a8a:	68fb      	ldr	r3, [r7, #12]
 8016a8c:	e853 3f00 	ldrex	r3, [r3]
 8016a90:	60bb      	str	r3, [r7, #8]
   return(result);
 8016a92:	68bb      	ldr	r3, [r7, #8]
 8016a94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016a98:	633b      	str	r3, [r7, #48]	; 0x30
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	681b      	ldr	r3, [r3, #0]
 8016a9e:	3314      	adds	r3, #20
 8016aa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016aa2:	61ba      	str	r2, [r7, #24]
 8016aa4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016aa6:	6979      	ldr	r1, [r7, #20]
 8016aa8:	69ba      	ldr	r2, [r7, #24]
 8016aaa:	e841 2300 	strex	r3, r2, [r1]
 8016aae:	613b      	str	r3, [r7, #16]
   return(result);
 8016ab0:	693b      	ldr	r3, [r7, #16]
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	d1e5      	bne.n	8016a82 <HAL_UART_AbortTransmit_IT+0x4a>

    /* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016aba:	2b00      	cmp	r3, #0
 8016abc:	d013      	beq.n	8016ae6 <HAL_UART_AbortTransmit_IT+0xae>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 8016abe:	687b      	ldr	r3, [r7, #4]
 8016ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016ac2:	4a16      	ldr	r2, [pc, #88]	; (8016b1c <HAL_UART_AbortTransmit_IT+0xe4>)
 8016ac4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8016ac6:	687b      	ldr	r3, [r7, #4]
 8016ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016aca:	4618      	mov	r0, r3
 8016acc:	f7f1 fa07 	bl	8007ede <HAL_DMA_Abort_IT>
 8016ad0:	4603      	mov	r3, r0
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	d01c      	beq.n	8016b10 <HAL_UART_AbortTransmit_IT+0xd8>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 8016ad6:	687b      	ldr	r3, [r7, #4]
 8016ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016adc:	687a      	ldr	r2, [r7, #4]
 8016ade:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8016ae0:	4610      	mov	r0, r2
 8016ae2:	4798      	blx	r3
 8016ae4:	e014      	b.n	8016b10 <HAL_UART_AbortTransmit_IT+0xd8>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0x00U;
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	2200      	movs	r2, #0
 8016aea:	84da      	strh	r2, [r3, #38]	; 0x26

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	2220      	movs	r2, #32
 8016af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 8016af4:	6878      	ldr	r0, [r7, #4]
 8016af6:	f000 fb84 	bl	8017202 <HAL_UART_AbortTransmitCpltCallback>
 8016afa:	e009      	b.n	8016b10 <HAL_UART_AbortTransmit_IT+0xd8>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0x00U;
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	2200      	movs	r2, #0
 8016b00:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	2220      	movs	r2, #32
 8016b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 8016b0a:	6878      	ldr	r0, [r7, #4]
 8016b0c:	f000 fb79 	bl	8017202 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8016b10:	2300      	movs	r3, #0
}
 8016b12:	4618      	mov	r0, r3
 8016b14:	3738      	adds	r7, #56	; 0x38
 8016b16:	46bd      	mov	sp, r7
 8016b18:	bd80      	pop	{r7, pc}
 8016b1a:	bf00      	nop
 8016b1c:	08017bf7 	.word	0x08017bf7

08016b20 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8016b20:	b580      	push	{r7, lr}
 8016b22:	b09a      	sub	sp, #104	; 0x68
 8016b24:	af00      	add	r7, sp, #0
 8016b26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	681b      	ldr	r3, [r3, #0]
 8016b2c:	330c      	adds	r3, #12
 8016b2e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016b30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016b32:	e853 3f00 	ldrex	r3, [r3]
 8016b36:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8016b38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016b3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8016b3e:	667b      	str	r3, [r7, #100]	; 0x64
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	681b      	ldr	r3, [r3, #0]
 8016b44:	330c      	adds	r3, #12
 8016b46:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8016b48:	657a      	str	r2, [r7, #84]	; 0x54
 8016b4a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016b4c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016b4e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016b50:	e841 2300 	strex	r3, r2, [r1]
 8016b54:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8016b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016b58:	2b00      	cmp	r3, #0
 8016b5a:	d1e5      	bne.n	8016b28 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	681b      	ldr	r3, [r3, #0]
 8016b60:	3314      	adds	r3, #20
 8016b62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b66:	e853 3f00 	ldrex	r3, [r3]
 8016b6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8016b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b6e:	f023 0301 	bic.w	r3, r3, #1
 8016b72:	663b      	str	r3, [r7, #96]	; 0x60
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	681b      	ldr	r3, [r3, #0]
 8016b78:	3314      	adds	r3, #20
 8016b7a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016b7c:	643a      	str	r2, [r7, #64]	; 0x40
 8016b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016b80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016b82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016b84:	e841 2300 	strex	r3, r2, [r1]
 8016b88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	d1e5      	bne.n	8016b5c <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016b90:	687b      	ldr	r3, [r7, #4]
 8016b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016b94:	2b01      	cmp	r3, #1
 8016b96:	d119      	bne.n	8016bcc <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	681b      	ldr	r3, [r3, #0]
 8016b9c:	330c      	adds	r3, #12
 8016b9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016ba0:	6a3b      	ldr	r3, [r7, #32]
 8016ba2:	e853 3f00 	ldrex	r3, [r3]
 8016ba6:	61fb      	str	r3, [r7, #28]
   return(result);
 8016ba8:	69fb      	ldr	r3, [r7, #28]
 8016baa:	f023 0310 	bic.w	r3, r3, #16
 8016bae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	681b      	ldr	r3, [r3, #0]
 8016bb4:	330c      	adds	r3, #12
 8016bb6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016bb8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016bba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016bbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016bbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016bc0:	e841 2300 	strex	r3, r2, [r1]
 8016bc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	d1e5      	bne.n	8016b98 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	681b      	ldr	r3, [r3, #0]
 8016bd0:	695b      	ldr	r3, [r3, #20]
 8016bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016bd6:	2b40      	cmp	r3, #64	; 0x40
 8016bd8:	d13f      	bne.n	8016c5a <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	681b      	ldr	r3, [r3, #0]
 8016bde:	3314      	adds	r3, #20
 8016be0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016be2:	68fb      	ldr	r3, [r7, #12]
 8016be4:	e853 3f00 	ldrex	r3, [r3]
 8016be8:	60bb      	str	r3, [r7, #8]
   return(result);
 8016bea:	68bb      	ldr	r3, [r7, #8]
 8016bec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016bf0:	65bb      	str	r3, [r7, #88]	; 0x58
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	681b      	ldr	r3, [r3, #0]
 8016bf6:	3314      	adds	r3, #20
 8016bf8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016bfa:	61ba      	str	r2, [r7, #24]
 8016bfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016bfe:	6979      	ldr	r1, [r7, #20]
 8016c00:	69ba      	ldr	r2, [r7, #24]
 8016c02:	e841 2300 	strex	r3, r2, [r1]
 8016c06:	613b      	str	r3, [r7, #16]
   return(result);
 8016c08:	693b      	ldr	r3, [r7, #16]
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	d1e5      	bne.n	8016bda <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016c12:	2b00      	cmp	r3, #0
 8016c14:	d013      	beq.n	8016c3e <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016c1a:	4a19      	ldr	r2, [pc, #100]	; (8016c80 <HAL_UART_AbortReceive_IT+0x160>)
 8016c1c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016c22:	4618      	mov	r0, r3
 8016c24:	f7f1 f95b 	bl	8007ede <HAL_DMA_Abort_IT>
 8016c28:	4603      	mov	r3, r0
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	d022      	beq.n	8016c74 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016c34:	687a      	ldr	r2, [r7, #4]
 8016c36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8016c38:	4610      	mov	r0, r2
 8016c3a:	4798      	blx	r3
 8016c3c:	e01a      	b.n	8016c74 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8016c3e:	687b      	ldr	r3, [r7, #4]
 8016c40:	2200      	movs	r2, #0
 8016c42:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	2220      	movs	r2, #32
 8016c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	2200      	movs	r2, #0
 8016c50:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8016c52:	6878      	ldr	r0, [r7, #4]
 8016c54:	f000 fadf 	bl	8017216 <HAL_UART_AbortReceiveCpltCallback>
 8016c58:	e00c      	b.n	8016c74 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	2200      	movs	r2, #0
 8016c5e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	2220      	movs	r2, #32
 8016c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	2200      	movs	r2, #0
 8016c6c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8016c6e:	6878      	ldr	r0, [r7, #4]
 8016c70:	f000 fad1 	bl	8017216 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8016c74:	2300      	movs	r3, #0
}
 8016c76:	4618      	mov	r0, r3
 8016c78:	3768      	adds	r7, #104	; 0x68
 8016c7a:	46bd      	mov	sp, r7
 8016c7c:	bd80      	pop	{r7, pc}
 8016c7e:	bf00      	nop
 8016c80:	08017c21 	.word	0x08017c21

08016c84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8016c84:	b580      	push	{r7, lr}
 8016c86:	b0ba      	sub	sp, #232	; 0xe8
 8016c88:	af00      	add	r7, sp, #0
 8016c8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	681b      	ldr	r3, [r3, #0]
 8016c90:	681b      	ldr	r3, [r3, #0]
 8016c92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	681b      	ldr	r3, [r3, #0]
 8016c9a:	68db      	ldr	r3, [r3, #12]
 8016c9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	681b      	ldr	r3, [r3, #0]
 8016ca4:	695b      	ldr	r3, [r3, #20]
 8016ca6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8016caa:	2300      	movs	r3, #0
 8016cac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8016cb0:	2300      	movs	r3, #0
 8016cb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8016cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016cba:	f003 030f 	and.w	r3, r3, #15
 8016cbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8016cc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8016cc6:	2b00      	cmp	r3, #0
 8016cc8:	d10f      	bne.n	8016cea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8016cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016cce:	f003 0320 	and.w	r3, r3, #32
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	d009      	beq.n	8016cea <HAL_UART_IRQHandler+0x66>
 8016cd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016cda:	f003 0320 	and.w	r3, r3, #32
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	d003      	beq.n	8016cea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8016ce2:	6878      	ldr	r0, [r7, #4]
 8016ce4:	f001 f81c 	bl	8017d20 <UART_Receive_IT>
      return;
 8016ce8:	e256      	b.n	8017198 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8016cea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8016cee:	2b00      	cmp	r3, #0
 8016cf0:	f000 80de 	beq.w	8016eb0 <HAL_UART_IRQHandler+0x22c>
 8016cf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016cf8:	f003 0301 	and.w	r3, r3, #1
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	d106      	bne.n	8016d0e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8016d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016d04:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8016d08:	2b00      	cmp	r3, #0
 8016d0a:	f000 80d1 	beq.w	8016eb0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8016d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016d12:	f003 0301 	and.w	r3, r3, #1
 8016d16:	2b00      	cmp	r3, #0
 8016d18:	d00b      	beq.n	8016d32 <HAL_UART_IRQHandler+0xae>
 8016d1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	d005      	beq.n	8016d32 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8016d26:	687b      	ldr	r3, [r7, #4]
 8016d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016d2a:	f043 0201 	orr.w	r2, r3, #1
 8016d2e:	687b      	ldr	r3, [r7, #4]
 8016d30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8016d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016d36:	f003 0304 	and.w	r3, r3, #4
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	d00b      	beq.n	8016d56 <HAL_UART_IRQHandler+0xd2>
 8016d3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016d42:	f003 0301 	and.w	r3, r3, #1
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	d005      	beq.n	8016d56 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016d4e:	f043 0202 	orr.w	r2, r3, #2
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8016d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016d5a:	f003 0302 	and.w	r3, r3, #2
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	d00b      	beq.n	8016d7a <HAL_UART_IRQHandler+0xf6>
 8016d62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016d66:	f003 0301 	and.w	r3, r3, #1
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	d005      	beq.n	8016d7a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016d72:	f043 0204 	orr.w	r2, r3, #4
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8016d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016d7e:	f003 0308 	and.w	r3, r3, #8
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	d011      	beq.n	8016daa <HAL_UART_IRQHandler+0x126>
 8016d86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016d8a:	f003 0320 	and.w	r3, r3, #32
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d105      	bne.n	8016d9e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8016d92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016d96:	f003 0301 	and.w	r3, r3, #1
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	d005      	beq.n	8016daa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016da2:	f043 0208 	orr.w	r2, r3, #8
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016dae:	2b00      	cmp	r3, #0
 8016db0:	f000 81ed 	beq.w	801718e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8016db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016db8:	f003 0320 	and.w	r3, r3, #32
 8016dbc:	2b00      	cmp	r3, #0
 8016dbe:	d008      	beq.n	8016dd2 <HAL_UART_IRQHandler+0x14e>
 8016dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016dc4:	f003 0320 	and.w	r3, r3, #32
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	d002      	beq.n	8016dd2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8016dcc:	6878      	ldr	r0, [r7, #4]
 8016dce:	f000 ffa7 	bl	8017d20 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	681b      	ldr	r3, [r3, #0]
 8016dd6:	695b      	ldr	r3, [r3, #20]
 8016dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016ddc:	2b40      	cmp	r3, #64	; 0x40
 8016dde:	bf0c      	ite	eq
 8016de0:	2301      	moveq	r3, #1
 8016de2:	2300      	movne	r3, #0
 8016de4:	b2db      	uxtb	r3, r3
 8016de6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016dee:	f003 0308 	and.w	r3, r3, #8
 8016df2:	2b00      	cmp	r3, #0
 8016df4:	d103      	bne.n	8016dfe <HAL_UART_IRQHandler+0x17a>
 8016df6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016dfa:	2b00      	cmp	r3, #0
 8016dfc:	d04f      	beq.n	8016e9e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8016dfe:	6878      	ldr	r0, [r7, #4]
 8016e00:	f000 fe22 	bl	8017a48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	681b      	ldr	r3, [r3, #0]
 8016e08:	695b      	ldr	r3, [r3, #20]
 8016e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016e0e:	2b40      	cmp	r3, #64	; 0x40
 8016e10:	d141      	bne.n	8016e96 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	681b      	ldr	r3, [r3, #0]
 8016e16:	3314      	adds	r3, #20
 8016e18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016e1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016e20:	e853 3f00 	ldrex	r3, [r3]
 8016e24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8016e28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016e2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016e30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8016e34:	687b      	ldr	r3, [r7, #4]
 8016e36:	681b      	ldr	r3, [r3, #0]
 8016e38:	3314      	adds	r3, #20
 8016e3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8016e3e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8016e42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016e46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8016e4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8016e4e:	e841 2300 	strex	r3, r2, [r1]
 8016e52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8016e56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016e5a:	2b00      	cmp	r3, #0
 8016e5c:	d1d9      	bne.n	8016e12 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8016e5e:	687b      	ldr	r3, [r7, #4]
 8016e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	d013      	beq.n	8016e8e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e6a:	4a7d      	ldr	r2, [pc, #500]	; (8017060 <HAL_UART_IRQHandler+0x3dc>)
 8016e6c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e72:	4618      	mov	r0, r3
 8016e74:	f7f1 f833 	bl	8007ede <HAL_DMA_Abort_IT>
 8016e78:	4603      	mov	r3, r0
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d016      	beq.n	8016eac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016e84:	687a      	ldr	r2, [r7, #4]
 8016e86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8016e88:	4610      	mov	r0, r2
 8016e8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016e8c:	e00e      	b.n	8016eac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8016e8e:	6878      	ldr	r0, [r7, #4]
 8016e90:	f000 f9a3 	bl	80171da <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016e94:	e00a      	b.n	8016eac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8016e96:	6878      	ldr	r0, [r7, #4]
 8016e98:	f000 f99f 	bl	80171da <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016e9c:	e006      	b.n	8016eac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8016e9e:	6878      	ldr	r0, [r7, #4]
 8016ea0:	f000 f99b 	bl	80171da <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	2200      	movs	r2, #0
 8016ea8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8016eaa:	e170      	b.n	801718e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016eac:	bf00      	nop
    return;
 8016eae:	e16e      	b.n	801718e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016eb4:	2b01      	cmp	r3, #1
 8016eb6:	f040 814a 	bne.w	801714e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8016eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016ebe:	f003 0310 	and.w	r3, r3, #16
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	f000 8143 	beq.w	801714e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8016ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016ecc:	f003 0310 	and.w	r3, r3, #16
 8016ed0:	2b00      	cmp	r3, #0
 8016ed2:	f000 813c 	beq.w	801714e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8016ed6:	2300      	movs	r3, #0
 8016ed8:	60bb      	str	r3, [r7, #8]
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	681b      	ldr	r3, [r3, #0]
 8016ede:	681b      	ldr	r3, [r3, #0]
 8016ee0:	60bb      	str	r3, [r7, #8]
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	681b      	ldr	r3, [r3, #0]
 8016ee6:	685b      	ldr	r3, [r3, #4]
 8016ee8:	60bb      	str	r3, [r7, #8]
 8016eea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	681b      	ldr	r3, [r3, #0]
 8016ef0:	695b      	ldr	r3, [r3, #20]
 8016ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016ef6:	2b40      	cmp	r3, #64	; 0x40
 8016ef8:	f040 80b4 	bne.w	8017064 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016f00:	681b      	ldr	r3, [r3, #0]
 8016f02:	685b      	ldr	r3, [r3, #4]
 8016f04:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8016f08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	f000 8140 	beq.w	8017192 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8016f16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8016f1a:	429a      	cmp	r2, r3
 8016f1c:	f080 8139 	bcs.w	8017192 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8016f26:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016f2c:	69db      	ldr	r3, [r3, #28]
 8016f2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016f32:	f000 8088 	beq.w	8017046 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016f36:	687b      	ldr	r3, [r7, #4]
 8016f38:	681b      	ldr	r3, [r3, #0]
 8016f3a:	330c      	adds	r3, #12
 8016f3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016f40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016f44:	e853 3f00 	ldrex	r3, [r3]
 8016f48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8016f4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016f50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016f54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	681b      	ldr	r3, [r3, #0]
 8016f5c:	330c      	adds	r3, #12
 8016f5e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8016f62:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8016f66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016f6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8016f6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8016f72:	e841 2300 	strex	r3, r2, [r1]
 8016f76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8016f7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016f7e:	2b00      	cmp	r3, #0
 8016f80:	d1d9      	bne.n	8016f36 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	681b      	ldr	r3, [r3, #0]
 8016f86:	3314      	adds	r3, #20
 8016f88:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016f8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016f8c:	e853 3f00 	ldrex	r3, [r3]
 8016f90:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8016f92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016f94:	f023 0301 	bic.w	r3, r3, #1
 8016f98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	681b      	ldr	r3, [r3, #0]
 8016fa0:	3314      	adds	r3, #20
 8016fa2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8016fa6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8016faa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016fac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8016fae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016fb2:	e841 2300 	strex	r3, r2, [r1]
 8016fb6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8016fb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d1e1      	bne.n	8016f82 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	681b      	ldr	r3, [r3, #0]
 8016fc2:	3314      	adds	r3, #20
 8016fc4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016fc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016fc8:	e853 3f00 	ldrex	r3, [r3]
 8016fcc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8016fce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016fd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016fd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	681b      	ldr	r3, [r3, #0]
 8016fdc:	3314      	adds	r3, #20
 8016fde:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8016fe2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8016fe4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016fe6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8016fe8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016fea:	e841 2300 	strex	r3, r2, [r1]
 8016fee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8016ff0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	d1e3      	bne.n	8016fbe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	2220      	movs	r2, #32
 8016ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	2200      	movs	r2, #0
 8017002:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	681b      	ldr	r3, [r3, #0]
 8017008:	330c      	adds	r3, #12
 801700a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801700c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801700e:	e853 3f00 	ldrex	r3, [r3]
 8017012:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8017014:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017016:	f023 0310 	bic.w	r3, r3, #16
 801701a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801701e:	687b      	ldr	r3, [r7, #4]
 8017020:	681b      	ldr	r3, [r3, #0]
 8017022:	330c      	adds	r3, #12
 8017024:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8017028:	65ba      	str	r2, [r7, #88]	; 0x58
 801702a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801702c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801702e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017030:	e841 2300 	strex	r3, r2, [r1]
 8017034:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8017036:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017038:	2b00      	cmp	r3, #0
 801703a:	d1e3      	bne.n	8017004 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017040:	4618      	mov	r0, r3
 8017042:	f7f0 fedc 	bl	8007dfe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801704e:	b29b      	uxth	r3, r3
 8017050:	1ad3      	subs	r3, r2, r3
 8017052:	b29b      	uxth	r3, r3
 8017054:	4619      	mov	r1, r3
 8017056:	6878      	ldr	r0, [r7, #4]
 8017058:	f000 f8e7 	bl	801722a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801705c:	e099      	b.n	8017192 <HAL_UART_IRQHandler+0x50e>
 801705e:	bf00      	nop
 8017060:	08017b0f 	.word	0x08017b0f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8017064:	687b      	ldr	r3, [r7, #4]
 8017066:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8017068:	687b      	ldr	r3, [r7, #4]
 801706a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801706c:	b29b      	uxth	r3, r3
 801706e:	1ad3      	subs	r3, r2, r3
 8017070:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8017078:	b29b      	uxth	r3, r3
 801707a:	2b00      	cmp	r3, #0
 801707c:	f000 808b 	beq.w	8017196 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8017080:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8017084:	2b00      	cmp	r3, #0
 8017086:	f000 8086 	beq.w	8017196 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	681b      	ldr	r3, [r3, #0]
 801708e:	330c      	adds	r3, #12
 8017090:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017094:	e853 3f00 	ldrex	r3, [r3]
 8017098:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801709a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801709c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80170a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80170a4:	687b      	ldr	r3, [r7, #4]
 80170a6:	681b      	ldr	r3, [r3, #0]
 80170a8:	330c      	adds	r3, #12
 80170aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80170ae:	647a      	str	r2, [r7, #68]	; 0x44
 80170b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80170b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80170b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80170b6:	e841 2300 	strex	r3, r2, [r1]
 80170ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80170bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80170be:	2b00      	cmp	r3, #0
 80170c0:	d1e3      	bne.n	801708a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80170c2:	687b      	ldr	r3, [r7, #4]
 80170c4:	681b      	ldr	r3, [r3, #0]
 80170c6:	3314      	adds	r3, #20
 80170c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80170ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170cc:	e853 3f00 	ldrex	r3, [r3]
 80170d0:	623b      	str	r3, [r7, #32]
   return(result);
 80170d2:	6a3b      	ldr	r3, [r7, #32]
 80170d4:	f023 0301 	bic.w	r3, r3, #1
 80170d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	681b      	ldr	r3, [r3, #0]
 80170e0:	3314      	adds	r3, #20
 80170e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80170e6:	633a      	str	r2, [r7, #48]	; 0x30
 80170e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80170ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80170ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80170ee:	e841 2300 	strex	r3, r2, [r1]
 80170f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80170f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170f6:	2b00      	cmp	r3, #0
 80170f8:	d1e3      	bne.n	80170c2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	2220      	movs	r2, #32
 80170fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017102:	687b      	ldr	r3, [r7, #4]
 8017104:	2200      	movs	r2, #0
 8017106:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	681b      	ldr	r3, [r3, #0]
 801710c:	330c      	adds	r3, #12
 801710e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017110:	693b      	ldr	r3, [r7, #16]
 8017112:	e853 3f00 	ldrex	r3, [r3]
 8017116:	60fb      	str	r3, [r7, #12]
   return(result);
 8017118:	68fb      	ldr	r3, [r7, #12]
 801711a:	f023 0310 	bic.w	r3, r3, #16
 801711e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8017122:	687b      	ldr	r3, [r7, #4]
 8017124:	681b      	ldr	r3, [r3, #0]
 8017126:	330c      	adds	r3, #12
 8017128:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801712c:	61fa      	str	r2, [r7, #28]
 801712e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017130:	69b9      	ldr	r1, [r7, #24]
 8017132:	69fa      	ldr	r2, [r7, #28]
 8017134:	e841 2300 	strex	r3, r2, [r1]
 8017138:	617b      	str	r3, [r7, #20]
   return(result);
 801713a:	697b      	ldr	r3, [r7, #20]
 801713c:	2b00      	cmp	r3, #0
 801713e:	d1e3      	bne.n	8017108 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8017140:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8017144:	4619      	mov	r1, r3
 8017146:	6878      	ldr	r0, [r7, #4]
 8017148:	f000 f86f 	bl	801722a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801714c:	e023      	b.n	8017196 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 801714e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017156:	2b00      	cmp	r3, #0
 8017158:	d009      	beq.n	801716e <HAL_UART_IRQHandler+0x4ea>
 801715a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801715e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017162:	2b00      	cmp	r3, #0
 8017164:	d003      	beq.n	801716e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8017166:	6878      	ldr	r0, [r7, #4]
 8017168:	f000 fd72 	bl	8017c50 <UART_Transmit_IT>
    return;
 801716c:	e014      	b.n	8017198 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 801716e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017176:	2b00      	cmp	r3, #0
 8017178:	d00e      	beq.n	8017198 <HAL_UART_IRQHandler+0x514>
 801717a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801717e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017182:	2b00      	cmp	r3, #0
 8017184:	d008      	beq.n	8017198 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8017186:	6878      	ldr	r0, [r7, #4]
 8017188:	f000 fdb2 	bl	8017cf0 <UART_EndTransmit_IT>
    return;
 801718c:	e004      	b.n	8017198 <HAL_UART_IRQHandler+0x514>
    return;
 801718e:	bf00      	nop
 8017190:	e002      	b.n	8017198 <HAL_UART_IRQHandler+0x514>
      return;
 8017192:	bf00      	nop
 8017194:	e000      	b.n	8017198 <HAL_UART_IRQHandler+0x514>
      return;
 8017196:	bf00      	nop
  }
}
 8017198:	37e8      	adds	r7, #232	; 0xe8
 801719a:	46bd      	mov	sp, r7
 801719c:	bd80      	pop	{r7, pc}

0801719e <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801719e:	b480      	push	{r7}
 80171a0:	b083      	sub	sp, #12
 80171a2:	af00      	add	r7, sp, #0
 80171a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80171a6:	bf00      	nop
 80171a8:	370c      	adds	r7, #12
 80171aa:	46bd      	mov	sp, r7
 80171ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171b0:	4770      	bx	lr

080171b2 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80171b2:	b480      	push	{r7}
 80171b4:	b083      	sub	sp, #12
 80171b6:	af00      	add	r7, sp, #0
 80171b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80171ba:	bf00      	nop
 80171bc:	370c      	adds	r7, #12
 80171be:	46bd      	mov	sp, r7
 80171c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171c4:	4770      	bx	lr

080171c6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80171c6:	b480      	push	{r7}
 80171c8:	b083      	sub	sp, #12
 80171ca:	af00      	add	r7, sp, #0
 80171cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80171ce:	bf00      	nop
 80171d0:	370c      	adds	r7, #12
 80171d2:	46bd      	mov	sp, r7
 80171d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171d8:	4770      	bx	lr

080171da <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80171da:	b480      	push	{r7}
 80171dc:	b083      	sub	sp, #12
 80171de:	af00      	add	r7, sp, #0
 80171e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80171e2:	bf00      	nop
 80171e4:	370c      	adds	r7, #12
 80171e6:	46bd      	mov	sp, r7
 80171e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171ec:	4770      	bx	lr

080171ee <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80171ee:	b480      	push	{r7}
 80171f0:	b083      	sub	sp, #12
 80171f2:	af00      	add	r7, sp, #0
 80171f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80171f6:	bf00      	nop
 80171f8:	370c      	adds	r7, #12
 80171fa:	46bd      	mov	sp, r7
 80171fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017200:	4770      	bx	lr

08017202 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8017202:	b480      	push	{r7}
 8017204:	b083      	sub	sp, #12
 8017206:	af00      	add	r7, sp, #0
 8017208:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 801720a:	bf00      	nop
 801720c:	370c      	adds	r7, #12
 801720e:	46bd      	mov	sp, r7
 8017210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017214:	4770      	bx	lr

08017216 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8017216:	b480      	push	{r7}
 8017218:	b083      	sub	sp, #12
 801721a:	af00      	add	r7, sp, #0
 801721c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 801721e:	bf00      	nop
 8017220:	370c      	adds	r7, #12
 8017222:	46bd      	mov	sp, r7
 8017224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017228:	4770      	bx	lr

0801722a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801722a:	b480      	push	{r7}
 801722c:	b083      	sub	sp, #12
 801722e:	af00      	add	r7, sp, #0
 8017230:	6078      	str	r0, [r7, #4]
 8017232:	460b      	mov	r3, r1
 8017234:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8017236:	bf00      	nop
 8017238:	370c      	adds	r7, #12
 801723a:	46bd      	mov	sp, r7
 801723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017240:	4770      	bx	lr

08017242 <HAL_LIN_SendBreak>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
{
 8017242:	b480      	push	{r7}
 8017244:	b089      	sub	sp, #36	; 0x24
 8017246:	af00      	add	r7, sp, #0
 8017248:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017250:	2b01      	cmp	r3, #1
 8017252:	d101      	bne.n	8017258 <HAL_LIN_SendBreak+0x16>
 8017254:	2302      	movs	r3, #2
 8017256:	e02a      	b.n	80172ae <HAL_LIN_SendBreak+0x6c>
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	2201      	movs	r2, #1
 801725c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	2224      	movs	r2, #36	; 0x24
 8017264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Send break characters */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_SBK);
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	681b      	ldr	r3, [r3, #0]
 801726c:	330c      	adds	r3, #12
 801726e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017270:	68fb      	ldr	r3, [r7, #12]
 8017272:	e853 3f00 	ldrex	r3, [r3]
 8017276:	60bb      	str	r3, [r7, #8]
   return(result);
 8017278:	68bb      	ldr	r3, [r7, #8]
 801727a:	f043 0301 	orr.w	r3, r3, #1
 801727e:	61fb      	str	r3, [r7, #28]
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	681b      	ldr	r3, [r3, #0]
 8017284:	330c      	adds	r3, #12
 8017286:	69fa      	ldr	r2, [r7, #28]
 8017288:	61ba      	str	r2, [r7, #24]
 801728a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801728c:	6979      	ldr	r1, [r7, #20]
 801728e:	69ba      	ldr	r2, [r7, #24]
 8017290:	e841 2300 	strex	r3, r2, [r1]
 8017294:	613b      	str	r3, [r7, #16]
   return(result);
 8017296:	693b      	ldr	r3, [r7, #16]
 8017298:	2b00      	cmp	r3, #0
 801729a:	d1e5      	bne.n	8017268 <HAL_LIN_SendBreak+0x26>

  huart->gState = HAL_UART_STATE_READY;
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	2220      	movs	r2, #32
 80172a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80172a4:	687b      	ldr	r3, [r7, #4]
 80172a6:	2200      	movs	r2, #0
 80172a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80172ac:	2300      	movs	r3, #0
}
 80172ae:	4618      	mov	r0, r3
 80172b0:	3724      	adds	r7, #36	; 0x24
 80172b2:	46bd      	mov	sp, r7
 80172b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172b8:	4770      	bx	lr

080172ba <HAL_MultiProcessor_EnterMuteMode>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart)
{
 80172ba:	b480      	push	{r7}
 80172bc:	b089      	sub	sp, #36	; 0x24
 80172be:	af00      	add	r7, sp, #0
 80172c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80172c2:	687b      	ldr	r3, [r7, #4]
 80172c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80172c8:	2b01      	cmp	r3, #1
 80172ca:	d101      	bne.n	80172d0 <HAL_MultiProcessor_EnterMuteMode+0x16>
 80172cc:	2302      	movs	r3, #2
 80172ce:	e02a      	b.n	8017326 <HAL_MultiProcessor_EnterMuteMode+0x6c>
 80172d0:	687b      	ldr	r3, [r7, #4]
 80172d2:	2201      	movs	r2, #1
 80172d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	2224      	movs	r2, #36	; 0x24
 80172dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RWU);
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	681b      	ldr	r3, [r3, #0]
 80172e4:	330c      	adds	r3, #12
 80172e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80172e8:	68fb      	ldr	r3, [r7, #12]
 80172ea:	e853 3f00 	ldrex	r3, [r3]
 80172ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80172f0:	68bb      	ldr	r3, [r7, #8]
 80172f2:	f043 0302 	orr.w	r3, r3, #2
 80172f6:	61fb      	str	r3, [r7, #28]
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	681b      	ldr	r3, [r3, #0]
 80172fc:	330c      	adds	r3, #12
 80172fe:	69fa      	ldr	r2, [r7, #28]
 8017300:	61ba      	str	r2, [r7, #24]
 8017302:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017304:	6979      	ldr	r1, [r7, #20]
 8017306:	69ba      	ldr	r2, [r7, #24]
 8017308:	e841 2300 	strex	r3, r2, [r1]
 801730c:	613b      	str	r3, [r7, #16]
   return(result);
 801730e:	693b      	ldr	r3, [r7, #16]
 8017310:	2b00      	cmp	r3, #0
 8017312:	d1e5      	bne.n	80172e0 <HAL_MultiProcessor_EnterMuteMode+0x26>

  huart->gState = HAL_UART_STATE_READY;
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	2220      	movs	r2, #32
 8017318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	2200      	movs	r2, #0
 8017320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8017324:	2300      	movs	r3, #0
}
 8017326:	4618      	mov	r0, r3
 8017328:	3724      	adds	r7, #36	; 0x24
 801732a:	46bd      	mov	sp, r7
 801732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017330:	4770      	bx	lr

08017332 <HAL_MultiProcessor_ExitMuteMode>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_ExitMuteMode(UART_HandleTypeDef *huart)
{
 8017332:	b480      	push	{r7}
 8017334:	b089      	sub	sp, #36	; 0x24
 8017336:	af00      	add	r7, sp, #0
 8017338:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017340:	2b01      	cmp	r3, #1
 8017342:	d101      	bne.n	8017348 <HAL_MultiProcessor_ExitMuteMode+0x16>
 8017344:	2302      	movs	r3, #2
 8017346:	e02a      	b.n	801739e <HAL_MultiProcessor_ExitMuteMode+0x6c>
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	2201      	movs	r2, #1
 801734c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	2224      	movs	r2, #36	; 0x24
 8017354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RWU);
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	681b      	ldr	r3, [r3, #0]
 801735c:	330c      	adds	r3, #12
 801735e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017360:	68fb      	ldr	r3, [r7, #12]
 8017362:	e853 3f00 	ldrex	r3, [r3]
 8017366:	60bb      	str	r3, [r7, #8]
   return(result);
 8017368:	68bb      	ldr	r3, [r7, #8]
 801736a:	f023 0302 	bic.w	r3, r3, #2
 801736e:	61fb      	str	r3, [r7, #28]
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	681b      	ldr	r3, [r3, #0]
 8017374:	330c      	adds	r3, #12
 8017376:	69fa      	ldr	r2, [r7, #28]
 8017378:	61ba      	str	r2, [r7, #24]
 801737a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801737c:	6979      	ldr	r1, [r7, #20]
 801737e:	69ba      	ldr	r2, [r7, #24]
 8017380:	e841 2300 	strex	r3, r2, [r1]
 8017384:	613b      	str	r3, [r7, #16]
   return(result);
 8017386:	693b      	ldr	r3, [r7, #16]
 8017388:	2b00      	cmp	r3, #0
 801738a:	d1e5      	bne.n	8017358 <HAL_MultiProcessor_ExitMuteMode+0x26>

  huart->gState = HAL_UART_STATE_READY;
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	2220      	movs	r2, #32
 8017390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	2200      	movs	r2, #0
 8017398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801739c:	2300      	movs	r3, #0
}
 801739e:	4618      	mov	r0, r3
 80173a0:	3724      	adds	r7, #36	; 0x24
 80173a2:	46bd      	mov	sp, r7
 80173a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173a8:	4770      	bx	lr

080173aa <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 80173aa:	b480      	push	{r7}
 80173ac:	b085      	sub	sp, #20
 80173ae:	af00      	add	r7, sp, #0
 80173b0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80173b2:	2300      	movs	r3, #0
 80173b4:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 80173b6:	687b      	ldr	r3, [r7, #4]
 80173b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80173bc:	2b01      	cmp	r3, #1
 80173be:	d101      	bne.n	80173c4 <HAL_HalfDuplex_EnableTransmitter+0x1a>
 80173c0:	2302      	movs	r3, #2
 80173c2:	e020      	b.n	8017406 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	2201      	movs	r2, #1
 80173c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	2224      	movs	r2, #36	; 0x24
 80173d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	681b      	ldr	r3, [r3, #0]
 80173d8:	68db      	ldr	r3, [r3, #12]
 80173da:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 80173dc:	68fb      	ldr	r3, [r7, #12]
 80173de:	f023 030c 	bic.w	r3, r3, #12
 80173e2:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 80173e4:	68fb      	ldr	r3, [r7, #12]
 80173e6:	f043 0308 	orr.w	r3, r3, #8
 80173ea:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	681b      	ldr	r3, [r3, #0]
 80173f0:	68fa      	ldr	r2, [r7, #12]
 80173f2:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 80173f4:	687b      	ldr	r3, [r7, #4]
 80173f6:	2220      	movs	r2, #32
 80173f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80173fc:	687b      	ldr	r3, [r7, #4]
 80173fe:	2200      	movs	r2, #0
 8017400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8017404:	2300      	movs	r3, #0
}
 8017406:	4618      	mov	r0, r3
 8017408:	3714      	adds	r7, #20
 801740a:	46bd      	mov	sp, r7
 801740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017410:	4770      	bx	lr

08017412 <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8017412:	b480      	push	{r7}
 8017414:	b085      	sub	sp, #20
 8017416:	af00      	add	r7, sp, #0
 8017418:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 801741a:	2300      	movs	r3, #0
 801741c:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 801741e:	687b      	ldr	r3, [r7, #4]
 8017420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017424:	2b01      	cmp	r3, #1
 8017426:	d101      	bne.n	801742c <HAL_HalfDuplex_EnableReceiver+0x1a>
 8017428:	2302      	movs	r3, #2
 801742a:	e020      	b.n	801746e <HAL_HalfDuplex_EnableReceiver+0x5c>
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	2201      	movs	r2, #1
 8017430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	2224      	movs	r2, #36	; 0x24
 8017438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	681b      	ldr	r3, [r3, #0]
 8017440:	68db      	ldr	r3, [r3, #12]
 8017442:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8017444:	68fb      	ldr	r3, [r7, #12]
 8017446:	f023 030c 	bic.w	r3, r3, #12
 801744a:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 801744c:	68fb      	ldr	r3, [r7, #12]
 801744e:	f043 0304 	orr.w	r3, r3, #4
 8017452:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	681b      	ldr	r3, [r3, #0]
 8017458:	68fa      	ldr	r2, [r7, #12]
 801745a:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	2220      	movs	r2, #32
 8017460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017464:	687b      	ldr	r3, [r7, #4]
 8017466:	2200      	movs	r2, #0
 8017468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801746c:	2300      	movs	r3, #0
}
 801746e:	4618      	mov	r0, r3
 8017470:	3714      	adds	r7, #20
 8017472:	46bd      	mov	sp, r7
 8017474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017478:	4770      	bx	lr

0801747a <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 801747a:	b480      	push	{r7}
 801747c:	b085      	sub	sp, #20
 801747e:	af00      	add	r7, sp, #0
 8017480:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8017482:	2300      	movs	r3, #0
 8017484:	60fb      	str	r3, [r7, #12]
 8017486:	2300      	movs	r3, #0
 8017488:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017490:	b2db      	uxtb	r3, r3
 8017492:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801749a:	b2db      	uxtb	r3, r3
 801749c:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 801749e:	68fb      	ldr	r3, [r7, #12]
 80174a0:	b2da      	uxtb	r2, r3
 80174a2:	68bb      	ldr	r3, [r7, #8]
 80174a4:	b2db      	uxtb	r3, r3
 80174a6:	4313      	orrs	r3, r2
 80174a8:	b2db      	uxtb	r3, r3
}
 80174aa:	4618      	mov	r0, r3
 80174ac:	3714      	adds	r7, #20
 80174ae:	46bd      	mov	sp, r7
 80174b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174b4:	4770      	bx	lr

080174b6 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 80174b6:	b480      	push	{r7}
 80174b8:	b083      	sub	sp, #12
 80174ba:	af00      	add	r7, sp, #0
 80174bc:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 80174be:	687b      	ldr	r3, [r7, #4]
 80174c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80174c2:	4618      	mov	r0, r3
 80174c4:	370c      	adds	r7, #12
 80174c6:	46bd      	mov	sp, r7
 80174c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174cc:	4770      	bx	lr

080174ce <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80174ce:	b580      	push	{r7, lr}
 80174d0:	b090      	sub	sp, #64	; 0x40
 80174d2:	af00      	add	r7, sp, #0
 80174d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80174da:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	681b      	ldr	r3, [r3, #0]
 80174e0:	681b      	ldr	r3, [r3, #0]
 80174e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80174e6:	2b00      	cmp	r3, #0
 80174e8:	d137      	bne.n	801755a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80174ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80174ec:	2200      	movs	r2, #0
 80174ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80174f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80174f2:	681b      	ldr	r3, [r3, #0]
 80174f4:	3314      	adds	r3, #20
 80174f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80174f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174fa:	e853 3f00 	ldrex	r3, [r3]
 80174fe:	623b      	str	r3, [r7, #32]
   return(result);
 8017500:	6a3b      	ldr	r3, [r7, #32]
 8017502:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8017506:	63bb      	str	r3, [r7, #56]	; 0x38
 8017508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801750a:	681b      	ldr	r3, [r3, #0]
 801750c:	3314      	adds	r3, #20
 801750e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017510:	633a      	str	r2, [r7, #48]	; 0x30
 8017512:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017514:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017516:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017518:	e841 2300 	strex	r3, r2, [r1]
 801751c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801751e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017520:	2b00      	cmp	r3, #0
 8017522:	d1e5      	bne.n	80174f0 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8017524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017526:	681b      	ldr	r3, [r3, #0]
 8017528:	330c      	adds	r3, #12
 801752a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801752c:	693b      	ldr	r3, [r7, #16]
 801752e:	e853 3f00 	ldrex	r3, [r3]
 8017532:	60fb      	str	r3, [r7, #12]
   return(result);
 8017534:	68fb      	ldr	r3, [r7, #12]
 8017536:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801753a:	637b      	str	r3, [r7, #52]	; 0x34
 801753c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801753e:	681b      	ldr	r3, [r3, #0]
 8017540:	330c      	adds	r3, #12
 8017542:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017544:	61fa      	str	r2, [r7, #28]
 8017546:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017548:	69b9      	ldr	r1, [r7, #24]
 801754a:	69fa      	ldr	r2, [r7, #28]
 801754c:	e841 2300 	strex	r3, r2, [r1]
 8017550:	617b      	str	r3, [r7, #20]
   return(result);
 8017552:	697b      	ldr	r3, [r7, #20]
 8017554:	2b00      	cmp	r3, #0
 8017556:	d1e5      	bne.n	8017524 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8017558:	e002      	b.n	8017560 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 801755a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801755c:	f7ff fe1f 	bl	801719e <HAL_UART_TxCpltCallback>
}
 8017560:	bf00      	nop
 8017562:	3740      	adds	r7, #64	; 0x40
 8017564:	46bd      	mov	sp, r7
 8017566:	bd80      	pop	{r7, pc}

08017568 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8017568:	b580      	push	{r7, lr}
 801756a:	b084      	sub	sp, #16
 801756c:	af00      	add	r7, sp, #0
 801756e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017570:	687b      	ldr	r3, [r7, #4]
 8017572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017574:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8017576:	68f8      	ldr	r0, [r7, #12]
 8017578:	f7ff fe1b 	bl	80171b2 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801757c:	bf00      	nop
 801757e:	3710      	adds	r7, #16
 8017580:	46bd      	mov	sp, r7
 8017582:	bd80      	pop	{r7, pc}

08017584 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8017584:	b580      	push	{r7, lr}
 8017586:	b09c      	sub	sp, #112	; 0x70
 8017588:	af00      	add	r7, sp, #0
 801758a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801758c:	687b      	ldr	r3, [r7, #4]
 801758e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017590:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8017592:	687b      	ldr	r3, [r7, #4]
 8017594:	681b      	ldr	r3, [r3, #0]
 8017596:	681b      	ldr	r3, [r3, #0]
 8017598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801759c:	2b00      	cmp	r3, #0
 801759e:	d172      	bne.n	8017686 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80175a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80175a2:	2200      	movs	r2, #0
 80175a4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80175a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80175a8:	681b      	ldr	r3, [r3, #0]
 80175aa:	330c      	adds	r3, #12
 80175ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80175ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80175b0:	e853 3f00 	ldrex	r3, [r3]
 80175b4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80175b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80175b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80175bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80175be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80175c0:	681b      	ldr	r3, [r3, #0]
 80175c2:	330c      	adds	r3, #12
 80175c4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80175c6:	65ba      	str	r2, [r7, #88]	; 0x58
 80175c8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80175ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80175cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80175ce:	e841 2300 	strex	r3, r2, [r1]
 80175d2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80175d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80175d6:	2b00      	cmp	r3, #0
 80175d8:	d1e5      	bne.n	80175a6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80175da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80175dc:	681b      	ldr	r3, [r3, #0]
 80175de:	3314      	adds	r3, #20
 80175e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80175e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175e4:	e853 3f00 	ldrex	r3, [r3]
 80175e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80175ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80175ec:	f023 0301 	bic.w	r3, r3, #1
 80175f0:	667b      	str	r3, [r7, #100]	; 0x64
 80175f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80175f4:	681b      	ldr	r3, [r3, #0]
 80175f6:	3314      	adds	r3, #20
 80175f8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80175fa:	647a      	str	r2, [r7, #68]	; 0x44
 80175fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80175fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8017600:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017602:	e841 2300 	strex	r3, r2, [r1]
 8017606:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8017608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801760a:	2b00      	cmp	r3, #0
 801760c:	d1e5      	bne.n	80175da <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801760e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017610:	681b      	ldr	r3, [r3, #0]
 8017612:	3314      	adds	r3, #20
 8017614:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017618:	e853 3f00 	ldrex	r3, [r3]
 801761c:	623b      	str	r3, [r7, #32]
   return(result);
 801761e:	6a3b      	ldr	r3, [r7, #32]
 8017620:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017624:	663b      	str	r3, [r7, #96]	; 0x60
 8017626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017628:	681b      	ldr	r3, [r3, #0]
 801762a:	3314      	adds	r3, #20
 801762c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801762e:	633a      	str	r2, [r7, #48]	; 0x30
 8017630:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017632:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017636:	e841 2300 	strex	r3, r2, [r1]
 801763a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801763c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801763e:	2b00      	cmp	r3, #0
 8017640:	d1e5      	bne.n	801760e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8017642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017644:	2220      	movs	r2, #32
 8017646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801764a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801764c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801764e:	2b01      	cmp	r3, #1
 8017650:	d119      	bne.n	8017686 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017654:	681b      	ldr	r3, [r3, #0]
 8017656:	330c      	adds	r3, #12
 8017658:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801765a:	693b      	ldr	r3, [r7, #16]
 801765c:	e853 3f00 	ldrex	r3, [r3]
 8017660:	60fb      	str	r3, [r7, #12]
   return(result);
 8017662:	68fb      	ldr	r3, [r7, #12]
 8017664:	f023 0310 	bic.w	r3, r3, #16
 8017668:	65fb      	str	r3, [r7, #92]	; 0x5c
 801766a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801766c:	681b      	ldr	r3, [r3, #0]
 801766e:	330c      	adds	r3, #12
 8017670:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8017672:	61fa      	str	r2, [r7, #28]
 8017674:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017676:	69b9      	ldr	r1, [r7, #24]
 8017678:	69fa      	ldr	r2, [r7, #28]
 801767a:	e841 2300 	strex	r3, r2, [r1]
 801767e:	617b      	str	r3, [r7, #20]
   return(result);
 8017680:	697b      	ldr	r3, [r7, #20]
 8017682:	2b00      	cmp	r3, #0
 8017684:	d1e5      	bne.n	8017652 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801768a:	2b01      	cmp	r3, #1
 801768c:	d106      	bne.n	801769c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801768e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017690:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8017692:	4619      	mov	r1, r3
 8017694:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8017696:	f7ff fdc8 	bl	801722a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801769a:	e002      	b.n	80176a2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 801769c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801769e:	f7ea f933 	bl	8001908 <HAL_UART_RxCpltCallback>
}
 80176a2:	bf00      	nop
 80176a4:	3770      	adds	r7, #112	; 0x70
 80176a6:	46bd      	mov	sp, r7
 80176a8:	bd80      	pop	{r7, pc}

080176aa <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80176aa:	b580      	push	{r7, lr}
 80176ac:	b084      	sub	sp, #16
 80176ae:	af00      	add	r7, sp, #0
 80176b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80176b6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80176b8:	68fb      	ldr	r3, [r7, #12]
 80176ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80176bc:	2b01      	cmp	r3, #1
 80176be:	d108      	bne.n	80176d2 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80176c0:	68fb      	ldr	r3, [r7, #12]
 80176c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80176c4:	085b      	lsrs	r3, r3, #1
 80176c6:	b29b      	uxth	r3, r3
 80176c8:	4619      	mov	r1, r3
 80176ca:	68f8      	ldr	r0, [r7, #12]
 80176cc:	f7ff fdad 	bl	801722a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80176d0:	e002      	b.n	80176d8 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80176d2:	68f8      	ldr	r0, [r7, #12]
 80176d4:	f7ff fd77 	bl	80171c6 <HAL_UART_RxHalfCpltCallback>
}
 80176d8:	bf00      	nop
 80176da:	3710      	adds	r7, #16
 80176dc:	46bd      	mov	sp, r7
 80176de:	bd80      	pop	{r7, pc}

080176e0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80176e0:	b580      	push	{r7, lr}
 80176e2:	b084      	sub	sp, #16
 80176e4:	af00      	add	r7, sp, #0
 80176e6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80176e8:	2300      	movs	r3, #0
 80176ea:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80176f0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80176f2:	68bb      	ldr	r3, [r7, #8]
 80176f4:	681b      	ldr	r3, [r3, #0]
 80176f6:	695b      	ldr	r3, [r3, #20]
 80176f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80176fc:	2b80      	cmp	r3, #128	; 0x80
 80176fe:	bf0c      	ite	eq
 8017700:	2301      	moveq	r3, #1
 8017702:	2300      	movne	r3, #0
 8017704:	b2db      	uxtb	r3, r3
 8017706:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8017708:	68bb      	ldr	r3, [r7, #8]
 801770a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801770e:	b2db      	uxtb	r3, r3
 8017710:	2b21      	cmp	r3, #33	; 0x21
 8017712:	d108      	bne.n	8017726 <UART_DMAError+0x46>
 8017714:	68fb      	ldr	r3, [r7, #12]
 8017716:	2b00      	cmp	r3, #0
 8017718:	d005      	beq.n	8017726 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 801771a:	68bb      	ldr	r3, [r7, #8]
 801771c:	2200      	movs	r2, #0
 801771e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8017720:	68b8      	ldr	r0, [r7, #8]
 8017722:	f000 f969 	bl	80179f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8017726:	68bb      	ldr	r3, [r7, #8]
 8017728:	681b      	ldr	r3, [r3, #0]
 801772a:	695b      	ldr	r3, [r3, #20]
 801772c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017730:	2b40      	cmp	r3, #64	; 0x40
 8017732:	bf0c      	ite	eq
 8017734:	2301      	moveq	r3, #1
 8017736:	2300      	movne	r3, #0
 8017738:	b2db      	uxtb	r3, r3
 801773a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 801773c:	68bb      	ldr	r3, [r7, #8]
 801773e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8017742:	b2db      	uxtb	r3, r3
 8017744:	2b22      	cmp	r3, #34	; 0x22
 8017746:	d108      	bne.n	801775a <UART_DMAError+0x7a>
 8017748:	68fb      	ldr	r3, [r7, #12]
 801774a:	2b00      	cmp	r3, #0
 801774c:	d005      	beq.n	801775a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 801774e:	68bb      	ldr	r3, [r7, #8]
 8017750:	2200      	movs	r2, #0
 8017752:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8017754:	68b8      	ldr	r0, [r7, #8]
 8017756:	f000 f977 	bl	8017a48 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801775a:	68bb      	ldr	r3, [r7, #8]
 801775c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801775e:	f043 0210 	orr.w	r2, r3, #16
 8017762:	68bb      	ldr	r3, [r7, #8]
 8017764:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8017766:	68b8      	ldr	r0, [r7, #8]
 8017768:	f7ff fd37 	bl	80171da <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801776c:	bf00      	nop
 801776e:	3710      	adds	r7, #16
 8017770:	46bd      	mov	sp, r7
 8017772:	bd80      	pop	{r7, pc}

08017774 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8017774:	b580      	push	{r7, lr}
 8017776:	b090      	sub	sp, #64	; 0x40
 8017778:	af00      	add	r7, sp, #0
 801777a:	60f8      	str	r0, [r7, #12]
 801777c:	60b9      	str	r1, [r7, #8]
 801777e:	603b      	str	r3, [r7, #0]
 8017780:	4613      	mov	r3, r2
 8017782:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8017784:	e050      	b.n	8017828 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8017786:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017788:	f1b3 3fff 	cmp.w	r3, #4294967295
 801778c:	d04c      	beq.n	8017828 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 801778e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017790:	2b00      	cmp	r3, #0
 8017792:	d007      	beq.n	80177a4 <UART_WaitOnFlagUntilTimeout+0x30>
 8017794:	f7ef f872 	bl	800687c <HAL_GetTick>
 8017798:	4602      	mov	r2, r0
 801779a:	683b      	ldr	r3, [r7, #0]
 801779c:	1ad3      	subs	r3, r2, r3
 801779e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80177a0:	429a      	cmp	r2, r3
 80177a2:	d241      	bcs.n	8017828 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80177a4:	68fb      	ldr	r3, [r7, #12]
 80177a6:	681b      	ldr	r3, [r3, #0]
 80177a8:	330c      	adds	r3, #12
 80177aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80177ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177ae:	e853 3f00 	ldrex	r3, [r3]
 80177b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80177b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80177ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80177bc:	68fb      	ldr	r3, [r7, #12]
 80177be:	681b      	ldr	r3, [r3, #0]
 80177c0:	330c      	adds	r3, #12
 80177c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80177c4:	637a      	str	r2, [r7, #52]	; 0x34
 80177c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80177c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80177ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80177cc:	e841 2300 	strex	r3, r2, [r1]
 80177d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80177d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177d4:	2b00      	cmp	r3, #0
 80177d6:	d1e5      	bne.n	80177a4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80177d8:	68fb      	ldr	r3, [r7, #12]
 80177da:	681b      	ldr	r3, [r3, #0]
 80177dc:	3314      	adds	r3, #20
 80177de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80177e0:	697b      	ldr	r3, [r7, #20]
 80177e2:	e853 3f00 	ldrex	r3, [r3]
 80177e6:	613b      	str	r3, [r7, #16]
   return(result);
 80177e8:	693b      	ldr	r3, [r7, #16]
 80177ea:	f023 0301 	bic.w	r3, r3, #1
 80177ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80177f0:	68fb      	ldr	r3, [r7, #12]
 80177f2:	681b      	ldr	r3, [r3, #0]
 80177f4:	3314      	adds	r3, #20
 80177f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80177f8:	623a      	str	r2, [r7, #32]
 80177fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80177fc:	69f9      	ldr	r1, [r7, #28]
 80177fe:	6a3a      	ldr	r2, [r7, #32]
 8017800:	e841 2300 	strex	r3, r2, [r1]
 8017804:	61bb      	str	r3, [r7, #24]
   return(result);
 8017806:	69bb      	ldr	r3, [r7, #24]
 8017808:	2b00      	cmp	r3, #0
 801780a:	d1e5      	bne.n	80177d8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 801780c:	68fb      	ldr	r3, [r7, #12]
 801780e:	2220      	movs	r2, #32
 8017810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8017814:	68fb      	ldr	r3, [r7, #12]
 8017816:	2220      	movs	r2, #32
 8017818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 801781c:	68fb      	ldr	r3, [r7, #12]
 801781e:	2200      	movs	r2, #0
 8017820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8017824:	2303      	movs	r3, #3
 8017826:	e00f      	b.n	8017848 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8017828:	68fb      	ldr	r3, [r7, #12]
 801782a:	681b      	ldr	r3, [r3, #0]
 801782c:	681a      	ldr	r2, [r3, #0]
 801782e:	68bb      	ldr	r3, [r7, #8]
 8017830:	4013      	ands	r3, r2
 8017832:	68ba      	ldr	r2, [r7, #8]
 8017834:	429a      	cmp	r2, r3
 8017836:	bf0c      	ite	eq
 8017838:	2301      	moveq	r3, #1
 801783a:	2300      	movne	r3, #0
 801783c:	b2db      	uxtb	r3, r3
 801783e:	461a      	mov	r2, r3
 8017840:	79fb      	ldrb	r3, [r7, #7]
 8017842:	429a      	cmp	r2, r3
 8017844:	d09f      	beq.n	8017786 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8017846:	2300      	movs	r3, #0
}
 8017848:	4618      	mov	r0, r3
 801784a:	3740      	adds	r7, #64	; 0x40
 801784c:	46bd      	mov	sp, r7
 801784e:	bd80      	pop	{r7, pc}

08017850 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017850:	b480      	push	{r7}
 8017852:	b085      	sub	sp, #20
 8017854:	af00      	add	r7, sp, #0
 8017856:	60f8      	str	r0, [r7, #12]
 8017858:	60b9      	str	r1, [r7, #8]
 801785a:	4613      	mov	r3, r2
 801785c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 801785e:	68fb      	ldr	r3, [r7, #12]
 8017860:	68ba      	ldr	r2, [r7, #8]
 8017862:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8017864:	68fb      	ldr	r3, [r7, #12]
 8017866:	88fa      	ldrh	r2, [r7, #6]
 8017868:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 801786a:	68fb      	ldr	r3, [r7, #12]
 801786c:	88fa      	ldrh	r2, [r7, #6]
 801786e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017870:	68fb      	ldr	r3, [r7, #12]
 8017872:	2200      	movs	r2, #0
 8017874:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8017876:	68fb      	ldr	r3, [r7, #12]
 8017878:	2222      	movs	r2, #34	; 0x22
 801787a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801787e:	68fb      	ldr	r3, [r7, #12]
 8017880:	2200      	movs	r2, #0
 8017882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8017886:	68fb      	ldr	r3, [r7, #12]
 8017888:	681b      	ldr	r3, [r3, #0]
 801788a:	68da      	ldr	r2, [r3, #12]
 801788c:	68fb      	ldr	r3, [r7, #12]
 801788e:	681b      	ldr	r3, [r3, #0]
 8017890:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017894:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8017896:	68fb      	ldr	r3, [r7, #12]
 8017898:	681b      	ldr	r3, [r3, #0]
 801789a:	695a      	ldr	r2, [r3, #20]
 801789c:	68fb      	ldr	r3, [r7, #12]
 801789e:	681b      	ldr	r3, [r3, #0]
 80178a0:	f042 0201 	orr.w	r2, r2, #1
 80178a4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80178a6:	68fb      	ldr	r3, [r7, #12]
 80178a8:	681b      	ldr	r3, [r3, #0]
 80178aa:	68da      	ldr	r2, [r3, #12]
 80178ac:	68fb      	ldr	r3, [r7, #12]
 80178ae:	681b      	ldr	r3, [r3, #0]
 80178b0:	f042 0220 	orr.w	r2, r2, #32
 80178b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80178b6:	2300      	movs	r3, #0
}
 80178b8:	4618      	mov	r0, r3
 80178ba:	3714      	adds	r7, #20
 80178bc:	46bd      	mov	sp, r7
 80178be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178c2:	4770      	bx	lr

080178c4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80178c4:	b580      	push	{r7, lr}
 80178c6:	b098      	sub	sp, #96	; 0x60
 80178c8:	af00      	add	r7, sp, #0
 80178ca:	60f8      	str	r0, [r7, #12]
 80178cc:	60b9      	str	r1, [r7, #8]
 80178ce:	4613      	mov	r3, r2
 80178d0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80178d2:	68ba      	ldr	r2, [r7, #8]
 80178d4:	68fb      	ldr	r3, [r7, #12]
 80178d6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80178d8:	68fb      	ldr	r3, [r7, #12]
 80178da:	88fa      	ldrh	r2, [r7, #6]
 80178dc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80178de:	68fb      	ldr	r3, [r7, #12]
 80178e0:	2200      	movs	r2, #0
 80178e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80178e4:	68fb      	ldr	r3, [r7, #12]
 80178e6:	2222      	movs	r2, #34	; 0x22
 80178e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80178ec:	68fb      	ldr	r3, [r7, #12]
 80178ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80178f0:	4a3e      	ldr	r2, [pc, #248]	; (80179ec <UART_Start_Receive_DMA+0x128>)
 80178f2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80178f4:	68fb      	ldr	r3, [r7, #12]
 80178f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80178f8:	4a3d      	ldr	r2, [pc, #244]	; (80179f0 <UART_Start_Receive_DMA+0x12c>)
 80178fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80178fc:	68fb      	ldr	r3, [r7, #12]
 80178fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017900:	4a3c      	ldr	r2, [pc, #240]	; (80179f4 <UART_Start_Receive_DMA+0x130>)
 8017902:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8017904:	68fb      	ldr	r3, [r7, #12]
 8017906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017908:	2200      	movs	r2, #0
 801790a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 801790c:	f107 0308 	add.w	r3, r7, #8
 8017910:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8017912:	68fb      	ldr	r3, [r7, #12]
 8017914:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8017916:	68fb      	ldr	r3, [r7, #12]
 8017918:	681b      	ldr	r3, [r3, #0]
 801791a:	3304      	adds	r3, #4
 801791c:	4619      	mov	r1, r3
 801791e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017920:	681a      	ldr	r2, [r3, #0]
 8017922:	88fb      	ldrh	r3, [r7, #6]
 8017924:	f7f0 fa13 	bl	8007d4e <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8017928:	2300      	movs	r3, #0
 801792a:	613b      	str	r3, [r7, #16]
 801792c:	68fb      	ldr	r3, [r7, #12]
 801792e:	681b      	ldr	r3, [r3, #0]
 8017930:	681b      	ldr	r3, [r3, #0]
 8017932:	613b      	str	r3, [r7, #16]
 8017934:	68fb      	ldr	r3, [r7, #12]
 8017936:	681b      	ldr	r3, [r3, #0]
 8017938:	685b      	ldr	r3, [r3, #4]
 801793a:	613b      	str	r3, [r7, #16]
 801793c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801793e:	68fb      	ldr	r3, [r7, #12]
 8017940:	2200      	movs	r2, #0
 8017942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017946:	68fb      	ldr	r3, [r7, #12]
 8017948:	681b      	ldr	r3, [r3, #0]
 801794a:	330c      	adds	r3, #12
 801794c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801794e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017950:	e853 3f00 	ldrex	r3, [r3]
 8017954:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8017956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801795c:	65bb      	str	r3, [r7, #88]	; 0x58
 801795e:	68fb      	ldr	r3, [r7, #12]
 8017960:	681b      	ldr	r3, [r3, #0]
 8017962:	330c      	adds	r3, #12
 8017964:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017966:	64fa      	str	r2, [r7, #76]	; 0x4c
 8017968:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801796a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801796c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801796e:	e841 2300 	strex	r3, r2, [r1]
 8017972:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8017974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017976:	2b00      	cmp	r3, #0
 8017978:	d1e5      	bne.n	8017946 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801797a:	68fb      	ldr	r3, [r7, #12]
 801797c:	681b      	ldr	r3, [r3, #0]
 801797e:	3314      	adds	r3, #20
 8017980:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017984:	e853 3f00 	ldrex	r3, [r3]
 8017988:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801798a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801798c:	f043 0301 	orr.w	r3, r3, #1
 8017990:	657b      	str	r3, [r7, #84]	; 0x54
 8017992:	68fb      	ldr	r3, [r7, #12]
 8017994:	681b      	ldr	r3, [r3, #0]
 8017996:	3314      	adds	r3, #20
 8017998:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801799a:	63ba      	str	r2, [r7, #56]	; 0x38
 801799c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801799e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80179a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80179a2:	e841 2300 	strex	r3, r2, [r1]
 80179a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80179a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179aa:	2b00      	cmp	r3, #0
 80179ac:	d1e5      	bne.n	801797a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80179ae:	68fb      	ldr	r3, [r7, #12]
 80179b0:	681b      	ldr	r3, [r3, #0]
 80179b2:	3314      	adds	r3, #20
 80179b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80179b6:	69bb      	ldr	r3, [r7, #24]
 80179b8:	e853 3f00 	ldrex	r3, [r3]
 80179bc:	617b      	str	r3, [r7, #20]
   return(result);
 80179be:	697b      	ldr	r3, [r7, #20]
 80179c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80179c4:	653b      	str	r3, [r7, #80]	; 0x50
 80179c6:	68fb      	ldr	r3, [r7, #12]
 80179c8:	681b      	ldr	r3, [r3, #0]
 80179ca:	3314      	adds	r3, #20
 80179cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80179ce:	627a      	str	r2, [r7, #36]	; 0x24
 80179d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80179d2:	6a39      	ldr	r1, [r7, #32]
 80179d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80179d6:	e841 2300 	strex	r3, r2, [r1]
 80179da:	61fb      	str	r3, [r7, #28]
   return(result);
 80179dc:	69fb      	ldr	r3, [r7, #28]
 80179de:	2b00      	cmp	r3, #0
 80179e0:	d1e5      	bne.n	80179ae <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80179e2:	2300      	movs	r3, #0
}
 80179e4:	4618      	mov	r0, r3
 80179e6:	3760      	adds	r7, #96	; 0x60
 80179e8:	46bd      	mov	sp, r7
 80179ea:	bd80      	pop	{r7, pc}
 80179ec:	08017585 	.word	0x08017585
 80179f0:	080176ab 	.word	0x080176ab
 80179f4:	080176e1 	.word	0x080176e1

080179f8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80179f8:	b480      	push	{r7}
 80179fa:	b089      	sub	sp, #36	; 0x24
 80179fc:	af00      	add	r7, sp, #0
 80179fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	681b      	ldr	r3, [r3, #0]
 8017a04:	330c      	adds	r3, #12
 8017a06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017a08:	68fb      	ldr	r3, [r7, #12]
 8017a0a:	e853 3f00 	ldrex	r3, [r3]
 8017a0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8017a10:	68bb      	ldr	r3, [r7, #8]
 8017a12:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8017a16:	61fb      	str	r3, [r7, #28]
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	681b      	ldr	r3, [r3, #0]
 8017a1c:	330c      	adds	r3, #12
 8017a1e:	69fa      	ldr	r2, [r7, #28]
 8017a20:	61ba      	str	r2, [r7, #24]
 8017a22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017a24:	6979      	ldr	r1, [r7, #20]
 8017a26:	69ba      	ldr	r2, [r7, #24]
 8017a28:	e841 2300 	strex	r3, r2, [r1]
 8017a2c:	613b      	str	r3, [r7, #16]
   return(result);
 8017a2e:	693b      	ldr	r3, [r7, #16]
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	d1e5      	bne.n	8017a00 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	2220      	movs	r2, #32
 8017a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8017a3c:	bf00      	nop
 8017a3e:	3724      	adds	r7, #36	; 0x24
 8017a40:	46bd      	mov	sp, r7
 8017a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a46:	4770      	bx	lr

08017a48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8017a48:	b480      	push	{r7}
 8017a4a:	b095      	sub	sp, #84	; 0x54
 8017a4c:	af00      	add	r7, sp, #0
 8017a4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017a50:	687b      	ldr	r3, [r7, #4]
 8017a52:	681b      	ldr	r3, [r3, #0]
 8017a54:	330c      	adds	r3, #12
 8017a56:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017a5a:	e853 3f00 	ldrex	r3, [r3]
 8017a5e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8017a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8017a66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	681b      	ldr	r3, [r3, #0]
 8017a6c:	330c      	adds	r3, #12
 8017a6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017a70:	643a      	str	r2, [r7, #64]	; 0x40
 8017a72:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017a74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017a76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017a78:	e841 2300 	strex	r3, r2, [r1]
 8017a7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8017a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a80:	2b00      	cmp	r3, #0
 8017a82:	d1e5      	bne.n	8017a50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017a84:	687b      	ldr	r3, [r7, #4]
 8017a86:	681b      	ldr	r3, [r3, #0]
 8017a88:	3314      	adds	r3, #20
 8017a8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017a8c:	6a3b      	ldr	r3, [r7, #32]
 8017a8e:	e853 3f00 	ldrex	r3, [r3]
 8017a92:	61fb      	str	r3, [r7, #28]
   return(result);
 8017a94:	69fb      	ldr	r3, [r7, #28]
 8017a96:	f023 0301 	bic.w	r3, r3, #1
 8017a9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	681b      	ldr	r3, [r3, #0]
 8017aa0:	3314      	adds	r3, #20
 8017aa2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017aa4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8017aa6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017aa8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017aaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017aac:	e841 2300 	strex	r3, r2, [r1]
 8017ab0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8017ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ab4:	2b00      	cmp	r3, #0
 8017ab6:	d1e5      	bne.n	8017a84 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017ab8:	687b      	ldr	r3, [r7, #4]
 8017aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017abc:	2b01      	cmp	r3, #1
 8017abe:	d119      	bne.n	8017af4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	681b      	ldr	r3, [r3, #0]
 8017ac4:	330c      	adds	r3, #12
 8017ac6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017ac8:	68fb      	ldr	r3, [r7, #12]
 8017aca:	e853 3f00 	ldrex	r3, [r3]
 8017ace:	60bb      	str	r3, [r7, #8]
   return(result);
 8017ad0:	68bb      	ldr	r3, [r7, #8]
 8017ad2:	f023 0310 	bic.w	r3, r3, #16
 8017ad6:	647b      	str	r3, [r7, #68]	; 0x44
 8017ad8:	687b      	ldr	r3, [r7, #4]
 8017ada:	681b      	ldr	r3, [r3, #0]
 8017adc:	330c      	adds	r3, #12
 8017ade:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017ae0:	61ba      	str	r2, [r7, #24]
 8017ae2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017ae4:	6979      	ldr	r1, [r7, #20]
 8017ae6:	69ba      	ldr	r2, [r7, #24]
 8017ae8:	e841 2300 	strex	r3, r2, [r1]
 8017aec:	613b      	str	r3, [r7, #16]
   return(result);
 8017aee:	693b      	ldr	r3, [r7, #16]
 8017af0:	2b00      	cmp	r3, #0
 8017af2:	d1e5      	bne.n	8017ac0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8017af4:	687b      	ldr	r3, [r7, #4]
 8017af6:	2220      	movs	r2, #32
 8017af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017afc:	687b      	ldr	r3, [r7, #4]
 8017afe:	2200      	movs	r2, #0
 8017b00:	631a      	str	r2, [r3, #48]	; 0x30
}
 8017b02:	bf00      	nop
 8017b04:	3754      	adds	r7, #84	; 0x54
 8017b06:	46bd      	mov	sp, r7
 8017b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b0c:	4770      	bx	lr

08017b0e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8017b0e:	b580      	push	{r7, lr}
 8017b10:	b084      	sub	sp, #16
 8017b12:	af00      	add	r7, sp, #0
 8017b14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017b1a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8017b1c:	68fb      	ldr	r3, [r7, #12]
 8017b1e:	2200      	movs	r2, #0
 8017b20:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8017b22:	68fb      	ldr	r3, [r7, #12]
 8017b24:	2200      	movs	r2, #0
 8017b26:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8017b28:	68f8      	ldr	r0, [r7, #12]
 8017b2a:	f7ff fb56 	bl	80171da <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017b2e:	bf00      	nop
 8017b30:	3710      	adds	r7, #16
 8017b32:	46bd      	mov	sp, r7
 8017b34:	bd80      	pop	{r7, pc}

08017b36 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8017b36:	b580      	push	{r7, lr}
 8017b38:	b084      	sub	sp, #16
 8017b3a:	af00      	add	r7, sp, #0
 8017b3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017b3e:	687b      	ldr	r3, [r7, #4]
 8017b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017b42:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8017b44:	68fb      	ldr	r3, [r7, #12]
 8017b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017b48:	2200      	movs	r2, #0
 8017b4a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8017b4c:	68fb      	ldr	r3, [r7, #12]
 8017b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017b50:	2b00      	cmp	r3, #0
 8017b52:	d004      	beq.n	8017b5e <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8017b54:	68fb      	ldr	r3, [r7, #12]
 8017b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	d117      	bne.n	8017b8e <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8017b5e:	68fb      	ldr	r3, [r7, #12]
 8017b60:	2200      	movs	r2, #0
 8017b62:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8017b64:	68fb      	ldr	r3, [r7, #12]
 8017b66:	2200      	movs	r2, #0
 8017b68:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017b6a:	68fb      	ldr	r3, [r7, #12]
 8017b6c:	2200      	movs	r2, #0
 8017b6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8017b70:	68fb      	ldr	r3, [r7, #12]
 8017b72:	2220      	movs	r2, #32
 8017b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8017b78:	68fb      	ldr	r3, [r7, #12]
 8017b7a:	2220      	movs	r2, #32
 8017b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017b80:	68fb      	ldr	r3, [r7, #12]
 8017b82:	2200      	movs	r2, #0
 8017b84:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8017b86:	68f8      	ldr	r0, [r7, #12]
 8017b88:	f7ff fb31 	bl	80171ee <HAL_UART_AbortCpltCallback>
 8017b8c:	e000      	b.n	8017b90 <UART_DMATxAbortCallback+0x5a>
      return;
 8017b8e:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017b90:	3710      	adds	r7, #16
 8017b92:	46bd      	mov	sp, r7
 8017b94:	bd80      	pop	{r7, pc}

08017b96 <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8017b96:	b580      	push	{r7, lr}
 8017b98:	b084      	sub	sp, #16
 8017b9a:	af00      	add	r7, sp, #0
 8017b9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017b9e:	687b      	ldr	r3, [r7, #4]
 8017ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017ba2:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8017ba4:	68fb      	ldr	r3, [r7, #12]
 8017ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017ba8:	2200      	movs	r2, #0
 8017baa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8017bac:	68fb      	ldr	r3, [r7, #12]
 8017bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017bb0:	2b00      	cmp	r3, #0
 8017bb2:	d004      	beq.n	8017bbe <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8017bb4:	68fb      	ldr	r3, [r7, #12]
 8017bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017bba:	2b00      	cmp	r3, #0
 8017bbc:	d117      	bne.n	8017bee <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8017bbe:	68fb      	ldr	r3, [r7, #12]
 8017bc0:	2200      	movs	r2, #0
 8017bc2:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8017bc4:	68fb      	ldr	r3, [r7, #12]
 8017bc6:	2200      	movs	r2, #0
 8017bc8:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017bca:	68fb      	ldr	r3, [r7, #12]
 8017bcc:	2200      	movs	r2, #0
 8017bce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8017bd0:	68fb      	ldr	r3, [r7, #12]
 8017bd2:	2220      	movs	r2, #32
 8017bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8017bd8:	68fb      	ldr	r3, [r7, #12]
 8017bda:	2220      	movs	r2, #32
 8017bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017be0:	68fb      	ldr	r3, [r7, #12]
 8017be2:	2200      	movs	r2, #0
 8017be4:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8017be6:	68f8      	ldr	r0, [r7, #12]
 8017be8:	f7ff fb01 	bl	80171ee <HAL_UART_AbortCpltCallback>
 8017bec:	e000      	b.n	8017bf0 <UART_DMARxAbortCallback+0x5a>
      return;
 8017bee:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017bf0:	3710      	adds	r7, #16
 8017bf2:	46bd      	mov	sp, r7
 8017bf4:	bd80      	pop	{r7, pc}

08017bf6 <UART_DMATxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8017bf6:	b580      	push	{r7, lr}
 8017bf8:	b084      	sub	sp, #16
 8017bfa:	af00      	add	r7, sp, #0
 8017bfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017bfe:	687b      	ldr	r3, [r7, #4]
 8017c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017c02:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0x00U;
 8017c04:	68fb      	ldr	r3, [r7, #12]
 8017c06:	2200      	movs	r2, #0
 8017c08:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8017c0a:	68fb      	ldr	r3, [r7, #12]
 8017c0c:	2220      	movs	r2, #32
 8017c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 8017c12:	68f8      	ldr	r0, [r7, #12]
 8017c14:	f7ff faf5 	bl	8017202 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017c18:	bf00      	nop
 8017c1a:	3710      	adds	r7, #16
 8017c1c:	46bd      	mov	sp, r7
 8017c1e:	bd80      	pop	{r7, pc}

08017c20 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8017c20:	b580      	push	{r7, lr}
 8017c22:	b084      	sub	sp, #16
 8017c24:	af00      	add	r7, sp, #0
 8017c26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017c2c:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8017c2e:	68fb      	ldr	r3, [r7, #12]
 8017c30:	2200      	movs	r2, #0
 8017c32:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8017c34:	68fb      	ldr	r3, [r7, #12]
 8017c36:	2220      	movs	r2, #32
 8017c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017c3c:	68fb      	ldr	r3, [r7, #12]
 8017c3e:	2200      	movs	r2, #0
 8017c40:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8017c42:	68f8      	ldr	r0, [r7, #12]
 8017c44:	f7ff fae7 	bl	8017216 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017c48:	bf00      	nop
 8017c4a:	3710      	adds	r7, #16
 8017c4c:	46bd      	mov	sp, r7
 8017c4e:	bd80      	pop	{r7, pc}

08017c50 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8017c50:	b480      	push	{r7}
 8017c52:	b085      	sub	sp, #20
 8017c54:	af00      	add	r7, sp, #0
 8017c56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017c5e:	b2db      	uxtb	r3, r3
 8017c60:	2b21      	cmp	r3, #33	; 0x21
 8017c62:	d13e      	bne.n	8017ce2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017c64:	687b      	ldr	r3, [r7, #4]
 8017c66:	689b      	ldr	r3, [r3, #8]
 8017c68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017c6c:	d114      	bne.n	8017c98 <UART_Transmit_IT+0x48>
 8017c6e:	687b      	ldr	r3, [r7, #4]
 8017c70:	691b      	ldr	r3, [r3, #16]
 8017c72:	2b00      	cmp	r3, #0
 8017c74:	d110      	bne.n	8017c98 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8017c76:	687b      	ldr	r3, [r7, #4]
 8017c78:	6a1b      	ldr	r3, [r3, #32]
 8017c7a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8017c7c:	68fb      	ldr	r3, [r7, #12]
 8017c7e:	881b      	ldrh	r3, [r3, #0]
 8017c80:	461a      	mov	r2, r3
 8017c82:	687b      	ldr	r3, [r7, #4]
 8017c84:	681b      	ldr	r3, [r3, #0]
 8017c86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8017c8a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8017c8c:	687b      	ldr	r3, [r7, #4]
 8017c8e:	6a1b      	ldr	r3, [r3, #32]
 8017c90:	1c9a      	adds	r2, r3, #2
 8017c92:	687b      	ldr	r3, [r7, #4]
 8017c94:	621a      	str	r2, [r3, #32]
 8017c96:	e008      	b.n	8017caa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	6a1b      	ldr	r3, [r3, #32]
 8017c9c:	1c59      	adds	r1, r3, #1
 8017c9e:	687a      	ldr	r2, [r7, #4]
 8017ca0:	6211      	str	r1, [r2, #32]
 8017ca2:	781a      	ldrb	r2, [r3, #0]
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	681b      	ldr	r3, [r3, #0]
 8017ca8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8017caa:	687b      	ldr	r3, [r7, #4]
 8017cac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8017cae:	b29b      	uxth	r3, r3
 8017cb0:	3b01      	subs	r3, #1
 8017cb2:	b29b      	uxth	r3, r3
 8017cb4:	687a      	ldr	r2, [r7, #4]
 8017cb6:	4619      	mov	r1, r3
 8017cb8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8017cba:	2b00      	cmp	r3, #0
 8017cbc:	d10f      	bne.n	8017cde <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8017cbe:	687b      	ldr	r3, [r7, #4]
 8017cc0:	681b      	ldr	r3, [r3, #0]
 8017cc2:	68da      	ldr	r2, [r3, #12]
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	681b      	ldr	r3, [r3, #0]
 8017cc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8017ccc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8017cce:	687b      	ldr	r3, [r7, #4]
 8017cd0:	681b      	ldr	r3, [r3, #0]
 8017cd2:	68da      	ldr	r2, [r3, #12]
 8017cd4:	687b      	ldr	r3, [r7, #4]
 8017cd6:	681b      	ldr	r3, [r3, #0]
 8017cd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8017cdc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8017cde:	2300      	movs	r3, #0
 8017ce0:	e000      	b.n	8017ce4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8017ce2:	2302      	movs	r3, #2
  }
}
 8017ce4:	4618      	mov	r0, r3
 8017ce6:	3714      	adds	r7, #20
 8017ce8:	46bd      	mov	sp, r7
 8017cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cee:	4770      	bx	lr

08017cf0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8017cf0:	b580      	push	{r7, lr}
 8017cf2:	b082      	sub	sp, #8
 8017cf4:	af00      	add	r7, sp, #0
 8017cf6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	681b      	ldr	r3, [r3, #0]
 8017cfc:	68da      	ldr	r2, [r3, #12]
 8017cfe:	687b      	ldr	r3, [r7, #4]
 8017d00:	681b      	ldr	r3, [r3, #0]
 8017d02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8017d06:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8017d08:	687b      	ldr	r3, [r7, #4]
 8017d0a:	2220      	movs	r2, #32
 8017d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8017d10:	6878      	ldr	r0, [r7, #4]
 8017d12:	f7ff fa44 	bl	801719e <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8017d16:	2300      	movs	r3, #0
}
 8017d18:	4618      	mov	r0, r3
 8017d1a:	3708      	adds	r7, #8
 8017d1c:	46bd      	mov	sp, r7
 8017d1e:	bd80      	pop	{r7, pc}

08017d20 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8017d20:	b580      	push	{r7, lr}
 8017d22:	b08c      	sub	sp, #48	; 0x30
 8017d24:	af00      	add	r7, sp, #0
 8017d26:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8017d28:	687b      	ldr	r3, [r7, #4]
 8017d2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8017d2e:	b2db      	uxtb	r3, r3
 8017d30:	2b22      	cmp	r3, #34	; 0x22
 8017d32:	f040 80ab 	bne.w	8017e8c <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017d36:	687b      	ldr	r3, [r7, #4]
 8017d38:	689b      	ldr	r3, [r3, #8]
 8017d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017d3e:	d117      	bne.n	8017d70 <UART_Receive_IT+0x50>
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	691b      	ldr	r3, [r3, #16]
 8017d44:	2b00      	cmp	r3, #0
 8017d46:	d113      	bne.n	8017d70 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8017d48:	2300      	movs	r3, #0
 8017d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8017d4c:	687b      	ldr	r3, [r7, #4]
 8017d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017d50:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8017d52:	687b      	ldr	r3, [r7, #4]
 8017d54:	681b      	ldr	r3, [r3, #0]
 8017d56:	685b      	ldr	r3, [r3, #4]
 8017d58:	b29b      	uxth	r3, r3
 8017d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017d5e:	b29a      	uxth	r2, r3
 8017d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d62:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017d68:	1c9a      	adds	r2, r3, #2
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	629a      	str	r2, [r3, #40]	; 0x28
 8017d6e:	e026      	b.n	8017dbe <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017d74:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8017d76:	2300      	movs	r3, #0
 8017d78:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8017d7a:	687b      	ldr	r3, [r7, #4]
 8017d7c:	689b      	ldr	r3, [r3, #8]
 8017d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017d82:	d007      	beq.n	8017d94 <UART_Receive_IT+0x74>
 8017d84:	687b      	ldr	r3, [r7, #4]
 8017d86:	689b      	ldr	r3, [r3, #8]
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	d10a      	bne.n	8017da2 <UART_Receive_IT+0x82>
 8017d8c:	687b      	ldr	r3, [r7, #4]
 8017d8e:	691b      	ldr	r3, [r3, #16]
 8017d90:	2b00      	cmp	r3, #0
 8017d92:	d106      	bne.n	8017da2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	681b      	ldr	r3, [r3, #0]
 8017d98:	685b      	ldr	r3, [r3, #4]
 8017d9a:	b2da      	uxtb	r2, r3
 8017d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d9e:	701a      	strb	r2, [r3, #0]
 8017da0:	e008      	b.n	8017db4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8017da2:	687b      	ldr	r3, [r7, #4]
 8017da4:	681b      	ldr	r3, [r3, #0]
 8017da6:	685b      	ldr	r3, [r3, #4]
 8017da8:	b2db      	uxtb	r3, r3
 8017daa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017dae:	b2da      	uxtb	r2, r3
 8017db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017db2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017db8:	1c5a      	adds	r2, r3, #1
 8017dba:	687b      	ldr	r3, [r7, #4]
 8017dbc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8017dbe:	687b      	ldr	r3, [r7, #4]
 8017dc0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8017dc2:	b29b      	uxth	r3, r3
 8017dc4:	3b01      	subs	r3, #1
 8017dc6:	b29b      	uxth	r3, r3
 8017dc8:	687a      	ldr	r2, [r7, #4]
 8017dca:	4619      	mov	r1, r3
 8017dcc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8017dce:	2b00      	cmp	r3, #0
 8017dd0:	d15a      	bne.n	8017e88 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8017dd2:	687b      	ldr	r3, [r7, #4]
 8017dd4:	681b      	ldr	r3, [r3, #0]
 8017dd6:	68da      	ldr	r2, [r3, #12]
 8017dd8:	687b      	ldr	r3, [r7, #4]
 8017dda:	681b      	ldr	r3, [r3, #0]
 8017ddc:	f022 0220 	bic.w	r2, r2, #32
 8017de0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8017de2:	687b      	ldr	r3, [r7, #4]
 8017de4:	681b      	ldr	r3, [r3, #0]
 8017de6:	68da      	ldr	r2, [r3, #12]
 8017de8:	687b      	ldr	r3, [r7, #4]
 8017dea:	681b      	ldr	r3, [r3, #0]
 8017dec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8017df0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8017df2:	687b      	ldr	r3, [r7, #4]
 8017df4:	681b      	ldr	r3, [r3, #0]
 8017df6:	695a      	ldr	r2, [r3, #20]
 8017df8:	687b      	ldr	r3, [r7, #4]
 8017dfa:	681b      	ldr	r3, [r3, #0]
 8017dfc:	f022 0201 	bic.w	r2, r2, #1
 8017e00:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8017e02:	687b      	ldr	r3, [r7, #4]
 8017e04:	2220      	movs	r2, #32
 8017e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017e0a:	687b      	ldr	r3, [r7, #4]
 8017e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017e0e:	2b01      	cmp	r3, #1
 8017e10:	d135      	bne.n	8017e7e <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017e12:	687b      	ldr	r3, [r7, #4]
 8017e14:	2200      	movs	r2, #0
 8017e16:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017e18:	687b      	ldr	r3, [r7, #4]
 8017e1a:	681b      	ldr	r3, [r3, #0]
 8017e1c:	330c      	adds	r3, #12
 8017e1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017e20:	697b      	ldr	r3, [r7, #20]
 8017e22:	e853 3f00 	ldrex	r3, [r3]
 8017e26:	613b      	str	r3, [r7, #16]
   return(result);
 8017e28:	693b      	ldr	r3, [r7, #16]
 8017e2a:	f023 0310 	bic.w	r3, r3, #16
 8017e2e:	627b      	str	r3, [r7, #36]	; 0x24
 8017e30:	687b      	ldr	r3, [r7, #4]
 8017e32:	681b      	ldr	r3, [r3, #0]
 8017e34:	330c      	adds	r3, #12
 8017e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017e38:	623a      	str	r2, [r7, #32]
 8017e3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017e3c:	69f9      	ldr	r1, [r7, #28]
 8017e3e:	6a3a      	ldr	r2, [r7, #32]
 8017e40:	e841 2300 	strex	r3, r2, [r1]
 8017e44:	61bb      	str	r3, [r7, #24]
   return(result);
 8017e46:	69bb      	ldr	r3, [r7, #24]
 8017e48:	2b00      	cmp	r3, #0
 8017e4a:	d1e5      	bne.n	8017e18 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8017e4c:	687b      	ldr	r3, [r7, #4]
 8017e4e:	681b      	ldr	r3, [r3, #0]
 8017e50:	681b      	ldr	r3, [r3, #0]
 8017e52:	f003 0310 	and.w	r3, r3, #16
 8017e56:	2b10      	cmp	r3, #16
 8017e58:	d10a      	bne.n	8017e70 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8017e5a:	2300      	movs	r3, #0
 8017e5c:	60fb      	str	r3, [r7, #12]
 8017e5e:	687b      	ldr	r3, [r7, #4]
 8017e60:	681b      	ldr	r3, [r3, #0]
 8017e62:	681b      	ldr	r3, [r3, #0]
 8017e64:	60fb      	str	r3, [r7, #12]
 8017e66:	687b      	ldr	r3, [r7, #4]
 8017e68:	681b      	ldr	r3, [r3, #0]
 8017e6a:	685b      	ldr	r3, [r3, #4]
 8017e6c:	60fb      	str	r3, [r7, #12]
 8017e6e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8017e70:	687b      	ldr	r3, [r7, #4]
 8017e72:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8017e74:	4619      	mov	r1, r3
 8017e76:	6878      	ldr	r0, [r7, #4]
 8017e78:	f7ff f9d7 	bl	801722a <HAL_UARTEx_RxEventCallback>
 8017e7c:	e002      	b.n	8017e84 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8017e7e:	6878      	ldr	r0, [r7, #4]
 8017e80:	f7e9 fd42 	bl	8001908 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8017e84:	2300      	movs	r3, #0
 8017e86:	e002      	b.n	8017e8e <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8017e88:	2300      	movs	r3, #0
 8017e8a:	e000      	b.n	8017e8e <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8017e8c:	2302      	movs	r3, #2
  }
}
 8017e8e:	4618      	mov	r0, r3
 8017e90:	3730      	adds	r7, #48	; 0x30
 8017e92:	46bd      	mov	sp, r7
 8017e94:	bd80      	pop	{r7, pc}

08017e96 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8017e96:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8017e9a:	b0c0      	sub	sp, #256	; 0x100
 8017e9c:	af00      	add	r7, sp, #0
 8017e9e:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8017ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017ea6:	681b      	ldr	r3, [r3, #0]
 8017ea8:	691b      	ldr	r3, [r3, #16]
 8017eaa:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8017eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017eb2:	68d9      	ldr	r1, [r3, #12]
 8017eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017eb8:	681a      	ldr	r2, [r3, #0]
 8017eba:	ea40 0301 	orr.w	r3, r0, r1
 8017ebe:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8017ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017ec4:	689a      	ldr	r2, [r3, #8]
 8017ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017eca:	691b      	ldr	r3, [r3, #16]
 8017ecc:	431a      	orrs	r2, r3
 8017ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017ed2:	695b      	ldr	r3, [r3, #20]
 8017ed4:	431a      	orrs	r2, r3
 8017ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017eda:	69db      	ldr	r3, [r3, #28]
 8017edc:	4313      	orrs	r3, r2
 8017ede:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8017ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017ee6:	681b      	ldr	r3, [r3, #0]
 8017ee8:	68db      	ldr	r3, [r3, #12]
 8017eea:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8017eee:	f021 010c 	bic.w	r1, r1, #12
 8017ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017ef6:	681a      	ldr	r2, [r3, #0]
 8017ef8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8017efc:	430b      	orrs	r3, r1
 8017efe:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8017f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017f04:	681b      	ldr	r3, [r3, #0]
 8017f06:	695b      	ldr	r3, [r3, #20]
 8017f08:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8017f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017f10:	6999      	ldr	r1, [r3, #24]
 8017f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017f16:	681a      	ldr	r2, [r3, #0]
 8017f18:	ea40 0301 	orr.w	r3, r0, r1
 8017f1c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8017f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017f22:	681a      	ldr	r2, [r3, #0]
 8017f24:	4b8e      	ldr	r3, [pc, #568]	; (8018160 <UART_SetConfig+0x2ca>)
 8017f26:	429a      	cmp	r2, r3
 8017f28:	d005      	beq.n	8017f36 <UART_SetConfig+0xa0>
 8017f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017f2e:	681a      	ldr	r2, [r3, #0]
 8017f30:	4b8c      	ldr	r3, [pc, #560]	; (8018164 <UART_SetConfig+0x2ce>)
 8017f32:	429a      	cmp	r2, r3
 8017f34:	d104      	bne.n	8017f40 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8017f36:	f7fa fa11 	bl	801235c <HAL_RCC_GetPCLK2Freq>
 8017f3a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8017f3e:	e003      	b.n	8017f48 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8017f40:	f7fa f9f8 	bl	8012334 <HAL_RCC_GetPCLK1Freq>
 8017f44:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8017f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017f4c:	69db      	ldr	r3, [r3, #28]
 8017f4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8017f52:	f040 810b 	bne.w	801816c <UART_SetConfig+0x2d6>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8017f56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8017f5a:	2200      	movs	r2, #0
 8017f5c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8017f60:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8017f64:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8017f68:	4622      	mov	r2, r4
 8017f6a:	462b      	mov	r3, r5
 8017f6c:	1891      	adds	r1, r2, r2
 8017f6e:	65b9      	str	r1, [r7, #88]	; 0x58
 8017f70:	415b      	adcs	r3, r3
 8017f72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8017f74:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8017f78:	4621      	mov	r1, r4
 8017f7a:	eb12 0801 	adds.w	r8, r2, r1
 8017f7e:	4629      	mov	r1, r5
 8017f80:	eb43 0901 	adc.w	r9, r3, r1
 8017f84:	f04f 0200 	mov.w	r2, #0
 8017f88:	f04f 0300 	mov.w	r3, #0
 8017f8c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8017f90:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8017f94:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8017f98:	4690      	mov	r8, r2
 8017f9a:	4699      	mov	r9, r3
 8017f9c:	4623      	mov	r3, r4
 8017f9e:	eb18 0303 	adds.w	r3, r8, r3
 8017fa2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8017fa6:	462b      	mov	r3, r5
 8017fa8:	eb49 0303 	adc.w	r3, r9, r3
 8017fac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8017fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017fb4:	685b      	ldr	r3, [r3, #4]
 8017fb6:	2200      	movs	r2, #0
 8017fb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8017fbc:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8017fc0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8017fc4:	460b      	mov	r3, r1
 8017fc6:	18db      	adds	r3, r3, r3
 8017fc8:	653b      	str	r3, [r7, #80]	; 0x50
 8017fca:	4613      	mov	r3, r2
 8017fcc:	eb42 0303 	adc.w	r3, r2, r3
 8017fd0:	657b      	str	r3, [r7, #84]	; 0x54
 8017fd2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8017fd6:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8017fda:	f001 fabb 	bl	8019554 <__aeabi_uldivmod>
 8017fde:	4602      	mov	r2, r0
 8017fe0:	460b      	mov	r3, r1
 8017fe2:	4b61      	ldr	r3, [pc, #388]	; (8018168 <UART_SetConfig+0x2d2>)
 8017fe4:	fba3 2302 	umull	r2, r3, r3, r2
 8017fe8:	095b      	lsrs	r3, r3, #5
 8017fea:	011c      	lsls	r4, r3, #4
 8017fec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8017ff0:	2200      	movs	r2, #0
 8017ff2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8017ff6:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8017ffa:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8017ffe:	4642      	mov	r2, r8
 8018000:	464b      	mov	r3, r9
 8018002:	1891      	adds	r1, r2, r2
 8018004:	64b9      	str	r1, [r7, #72]	; 0x48
 8018006:	415b      	adcs	r3, r3
 8018008:	64fb      	str	r3, [r7, #76]	; 0x4c
 801800a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801800e:	4641      	mov	r1, r8
 8018010:	eb12 0a01 	adds.w	sl, r2, r1
 8018014:	4649      	mov	r1, r9
 8018016:	eb43 0b01 	adc.w	fp, r3, r1
 801801a:	f04f 0200 	mov.w	r2, #0
 801801e:	f04f 0300 	mov.w	r3, #0
 8018022:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8018026:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 801802a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801802e:	4692      	mov	sl, r2
 8018030:	469b      	mov	fp, r3
 8018032:	4643      	mov	r3, r8
 8018034:	eb1a 0303 	adds.w	r3, sl, r3
 8018038:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801803c:	464b      	mov	r3, r9
 801803e:	eb4b 0303 	adc.w	r3, fp, r3
 8018042:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8018046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801804a:	685b      	ldr	r3, [r3, #4]
 801804c:	2200      	movs	r2, #0
 801804e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8018052:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8018056:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 801805a:	460b      	mov	r3, r1
 801805c:	18db      	adds	r3, r3, r3
 801805e:	643b      	str	r3, [r7, #64]	; 0x40
 8018060:	4613      	mov	r3, r2
 8018062:	eb42 0303 	adc.w	r3, r2, r3
 8018066:	647b      	str	r3, [r7, #68]	; 0x44
 8018068:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801806c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8018070:	f001 fa70 	bl	8019554 <__aeabi_uldivmod>
 8018074:	4602      	mov	r2, r0
 8018076:	460b      	mov	r3, r1
 8018078:	4611      	mov	r1, r2
 801807a:	4b3b      	ldr	r3, [pc, #236]	; (8018168 <UART_SetConfig+0x2d2>)
 801807c:	fba3 2301 	umull	r2, r3, r3, r1
 8018080:	095b      	lsrs	r3, r3, #5
 8018082:	2264      	movs	r2, #100	; 0x64
 8018084:	fb02 f303 	mul.w	r3, r2, r3
 8018088:	1acb      	subs	r3, r1, r3
 801808a:	00db      	lsls	r3, r3, #3
 801808c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8018090:	4b35      	ldr	r3, [pc, #212]	; (8018168 <UART_SetConfig+0x2d2>)
 8018092:	fba3 2302 	umull	r2, r3, r3, r2
 8018096:	095b      	lsrs	r3, r3, #5
 8018098:	005b      	lsls	r3, r3, #1
 801809a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801809e:	441c      	add	r4, r3
 80180a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80180a4:	2200      	movs	r2, #0
 80180a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80180aa:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80180ae:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80180b2:	4642      	mov	r2, r8
 80180b4:	464b      	mov	r3, r9
 80180b6:	1891      	adds	r1, r2, r2
 80180b8:	63b9      	str	r1, [r7, #56]	; 0x38
 80180ba:	415b      	adcs	r3, r3
 80180bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80180be:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80180c2:	4641      	mov	r1, r8
 80180c4:	1851      	adds	r1, r2, r1
 80180c6:	6339      	str	r1, [r7, #48]	; 0x30
 80180c8:	4649      	mov	r1, r9
 80180ca:	414b      	adcs	r3, r1
 80180cc:	637b      	str	r3, [r7, #52]	; 0x34
 80180ce:	f04f 0200 	mov.w	r2, #0
 80180d2:	f04f 0300 	mov.w	r3, #0
 80180d6:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80180da:	4659      	mov	r1, fp
 80180dc:	00cb      	lsls	r3, r1, #3
 80180de:	4651      	mov	r1, sl
 80180e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80180e4:	4651      	mov	r1, sl
 80180e6:	00ca      	lsls	r2, r1, #3
 80180e8:	4610      	mov	r0, r2
 80180ea:	4619      	mov	r1, r3
 80180ec:	4603      	mov	r3, r0
 80180ee:	4642      	mov	r2, r8
 80180f0:	189b      	adds	r3, r3, r2
 80180f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80180f6:	464b      	mov	r3, r9
 80180f8:	460a      	mov	r2, r1
 80180fa:	eb42 0303 	adc.w	r3, r2, r3
 80180fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8018102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018106:	685b      	ldr	r3, [r3, #4]
 8018108:	2200      	movs	r2, #0
 801810a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801810e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8018112:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8018116:	460b      	mov	r3, r1
 8018118:	18db      	adds	r3, r3, r3
 801811a:	62bb      	str	r3, [r7, #40]	; 0x28
 801811c:	4613      	mov	r3, r2
 801811e:	eb42 0303 	adc.w	r3, r2, r3
 8018122:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018124:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8018128:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 801812c:	f001 fa12 	bl	8019554 <__aeabi_uldivmod>
 8018130:	4602      	mov	r2, r0
 8018132:	460b      	mov	r3, r1
 8018134:	4b0c      	ldr	r3, [pc, #48]	; (8018168 <UART_SetConfig+0x2d2>)
 8018136:	fba3 1302 	umull	r1, r3, r3, r2
 801813a:	095b      	lsrs	r3, r3, #5
 801813c:	2164      	movs	r1, #100	; 0x64
 801813e:	fb01 f303 	mul.w	r3, r1, r3
 8018142:	1ad3      	subs	r3, r2, r3
 8018144:	00db      	lsls	r3, r3, #3
 8018146:	3332      	adds	r3, #50	; 0x32
 8018148:	4a07      	ldr	r2, [pc, #28]	; (8018168 <UART_SetConfig+0x2d2>)
 801814a:	fba2 2303 	umull	r2, r3, r2, r3
 801814e:	095b      	lsrs	r3, r3, #5
 8018150:	f003 0207 	and.w	r2, r3, #7
 8018154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018158:	681b      	ldr	r3, [r3, #0]
 801815a:	4422      	add	r2, r4
 801815c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 801815e:	e104      	b.n	801836a <UART_SetConfig+0x4d4>
 8018160:	40011000 	.word	0x40011000
 8018164:	40011400 	.word	0x40011400
 8018168:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801816c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8018170:	2200      	movs	r2, #0
 8018172:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8018176:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801817a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 801817e:	4642      	mov	r2, r8
 8018180:	464b      	mov	r3, r9
 8018182:	1891      	adds	r1, r2, r2
 8018184:	6239      	str	r1, [r7, #32]
 8018186:	415b      	adcs	r3, r3
 8018188:	627b      	str	r3, [r7, #36]	; 0x24
 801818a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801818e:	4641      	mov	r1, r8
 8018190:	1854      	adds	r4, r2, r1
 8018192:	4649      	mov	r1, r9
 8018194:	eb43 0501 	adc.w	r5, r3, r1
 8018198:	f04f 0200 	mov.w	r2, #0
 801819c:	f04f 0300 	mov.w	r3, #0
 80181a0:	00eb      	lsls	r3, r5, #3
 80181a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80181a6:	00e2      	lsls	r2, r4, #3
 80181a8:	4614      	mov	r4, r2
 80181aa:	461d      	mov	r5, r3
 80181ac:	4643      	mov	r3, r8
 80181ae:	18e3      	adds	r3, r4, r3
 80181b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80181b4:	464b      	mov	r3, r9
 80181b6:	eb45 0303 	adc.w	r3, r5, r3
 80181ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80181be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80181c2:	685b      	ldr	r3, [r3, #4]
 80181c4:	2200      	movs	r2, #0
 80181c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80181ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80181ce:	f04f 0200 	mov.w	r2, #0
 80181d2:	f04f 0300 	mov.w	r3, #0
 80181d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80181da:	4629      	mov	r1, r5
 80181dc:	008b      	lsls	r3, r1, #2
 80181de:	4621      	mov	r1, r4
 80181e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80181e4:	4621      	mov	r1, r4
 80181e6:	008a      	lsls	r2, r1, #2
 80181e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80181ec:	f001 f9b2 	bl	8019554 <__aeabi_uldivmod>
 80181f0:	4602      	mov	r2, r0
 80181f2:	460b      	mov	r3, r1
 80181f4:	4b60      	ldr	r3, [pc, #384]	; (8018378 <UART_SetConfig+0x4e2>)
 80181f6:	fba3 2302 	umull	r2, r3, r3, r2
 80181fa:	095b      	lsrs	r3, r3, #5
 80181fc:	011c      	lsls	r4, r3, #4
 80181fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8018202:	2200      	movs	r2, #0
 8018204:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8018208:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801820c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8018210:	4642      	mov	r2, r8
 8018212:	464b      	mov	r3, r9
 8018214:	1891      	adds	r1, r2, r2
 8018216:	61b9      	str	r1, [r7, #24]
 8018218:	415b      	adcs	r3, r3
 801821a:	61fb      	str	r3, [r7, #28]
 801821c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8018220:	4641      	mov	r1, r8
 8018222:	1851      	adds	r1, r2, r1
 8018224:	6139      	str	r1, [r7, #16]
 8018226:	4649      	mov	r1, r9
 8018228:	414b      	adcs	r3, r1
 801822a:	617b      	str	r3, [r7, #20]
 801822c:	f04f 0200 	mov.w	r2, #0
 8018230:	f04f 0300 	mov.w	r3, #0
 8018234:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8018238:	4659      	mov	r1, fp
 801823a:	00cb      	lsls	r3, r1, #3
 801823c:	4651      	mov	r1, sl
 801823e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8018242:	4651      	mov	r1, sl
 8018244:	00ca      	lsls	r2, r1, #3
 8018246:	4610      	mov	r0, r2
 8018248:	4619      	mov	r1, r3
 801824a:	4603      	mov	r3, r0
 801824c:	4642      	mov	r2, r8
 801824e:	189b      	adds	r3, r3, r2
 8018250:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8018254:	464b      	mov	r3, r9
 8018256:	460a      	mov	r2, r1
 8018258:	eb42 0303 	adc.w	r3, r2, r3
 801825c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8018260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018264:	685b      	ldr	r3, [r3, #4]
 8018266:	2200      	movs	r2, #0
 8018268:	67bb      	str	r3, [r7, #120]	; 0x78
 801826a:	67fa      	str	r2, [r7, #124]	; 0x7c
 801826c:	f04f 0200 	mov.w	r2, #0
 8018270:	f04f 0300 	mov.w	r3, #0
 8018274:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8018278:	4649      	mov	r1, r9
 801827a:	008b      	lsls	r3, r1, #2
 801827c:	4641      	mov	r1, r8
 801827e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8018282:	4641      	mov	r1, r8
 8018284:	008a      	lsls	r2, r1, #2
 8018286:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 801828a:	f001 f963 	bl	8019554 <__aeabi_uldivmod>
 801828e:	4602      	mov	r2, r0
 8018290:	460b      	mov	r3, r1
 8018292:	4b39      	ldr	r3, [pc, #228]	; (8018378 <UART_SetConfig+0x4e2>)
 8018294:	fba3 1302 	umull	r1, r3, r3, r2
 8018298:	095b      	lsrs	r3, r3, #5
 801829a:	2164      	movs	r1, #100	; 0x64
 801829c:	fb01 f303 	mul.w	r3, r1, r3
 80182a0:	1ad3      	subs	r3, r2, r3
 80182a2:	011b      	lsls	r3, r3, #4
 80182a4:	3332      	adds	r3, #50	; 0x32
 80182a6:	4a34      	ldr	r2, [pc, #208]	; (8018378 <UART_SetConfig+0x4e2>)
 80182a8:	fba2 2303 	umull	r2, r3, r2, r3
 80182ac:	095b      	lsrs	r3, r3, #5
 80182ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80182b2:	441c      	add	r4, r3
 80182b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80182b8:	2200      	movs	r2, #0
 80182ba:	673b      	str	r3, [r7, #112]	; 0x70
 80182bc:	677a      	str	r2, [r7, #116]	; 0x74
 80182be:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80182c2:	4642      	mov	r2, r8
 80182c4:	464b      	mov	r3, r9
 80182c6:	1891      	adds	r1, r2, r2
 80182c8:	60b9      	str	r1, [r7, #8]
 80182ca:	415b      	adcs	r3, r3
 80182cc:	60fb      	str	r3, [r7, #12]
 80182ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80182d2:	4641      	mov	r1, r8
 80182d4:	1851      	adds	r1, r2, r1
 80182d6:	6039      	str	r1, [r7, #0]
 80182d8:	4649      	mov	r1, r9
 80182da:	414b      	adcs	r3, r1
 80182dc:	607b      	str	r3, [r7, #4]
 80182de:	f04f 0200 	mov.w	r2, #0
 80182e2:	f04f 0300 	mov.w	r3, #0
 80182e6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80182ea:	4659      	mov	r1, fp
 80182ec:	00cb      	lsls	r3, r1, #3
 80182ee:	4651      	mov	r1, sl
 80182f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80182f4:	4651      	mov	r1, sl
 80182f6:	00ca      	lsls	r2, r1, #3
 80182f8:	4610      	mov	r0, r2
 80182fa:	4619      	mov	r1, r3
 80182fc:	4603      	mov	r3, r0
 80182fe:	4642      	mov	r2, r8
 8018300:	189b      	adds	r3, r3, r2
 8018302:	66bb      	str	r3, [r7, #104]	; 0x68
 8018304:	464b      	mov	r3, r9
 8018306:	460a      	mov	r2, r1
 8018308:	eb42 0303 	adc.w	r3, r2, r3
 801830c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801830e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018312:	685b      	ldr	r3, [r3, #4]
 8018314:	2200      	movs	r2, #0
 8018316:	663b      	str	r3, [r7, #96]	; 0x60
 8018318:	667a      	str	r2, [r7, #100]	; 0x64
 801831a:	f04f 0200 	mov.w	r2, #0
 801831e:	f04f 0300 	mov.w	r3, #0
 8018322:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8018326:	4649      	mov	r1, r9
 8018328:	008b      	lsls	r3, r1, #2
 801832a:	4641      	mov	r1, r8
 801832c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8018330:	4641      	mov	r1, r8
 8018332:	008a      	lsls	r2, r1, #2
 8018334:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8018338:	f001 f90c 	bl	8019554 <__aeabi_uldivmod>
 801833c:	4602      	mov	r2, r0
 801833e:	460b      	mov	r3, r1
 8018340:	4b0d      	ldr	r3, [pc, #52]	; (8018378 <UART_SetConfig+0x4e2>)
 8018342:	fba3 1302 	umull	r1, r3, r3, r2
 8018346:	095b      	lsrs	r3, r3, #5
 8018348:	2164      	movs	r1, #100	; 0x64
 801834a:	fb01 f303 	mul.w	r3, r1, r3
 801834e:	1ad3      	subs	r3, r2, r3
 8018350:	011b      	lsls	r3, r3, #4
 8018352:	3332      	adds	r3, #50	; 0x32
 8018354:	4a08      	ldr	r2, [pc, #32]	; (8018378 <UART_SetConfig+0x4e2>)
 8018356:	fba2 2303 	umull	r2, r3, r2, r3
 801835a:	095b      	lsrs	r3, r3, #5
 801835c:	f003 020f 	and.w	r2, r3, #15
 8018360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018364:	681b      	ldr	r3, [r3, #0]
 8018366:	4422      	add	r2, r4
 8018368:	609a      	str	r2, [r3, #8]
}
 801836a:	bf00      	nop
 801836c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8018370:	46bd      	mov	sp, r7
 8018372:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8018376:	bf00      	nop
 8018378:	51eb851f 	.word	0x51eb851f

0801837c <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 801837c:	b480      	push	{r7}
 801837e:	b085      	sub	sp, #20
 8018380:	af00      	add	r7, sp, #0
 8018382:	6078      	str	r0, [r7, #4]
 8018384:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8018386:	2300      	movs	r3, #0
 8018388:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 801838a:	683b      	ldr	r3, [r7, #0]
 801838c:	681a      	ldr	r2, [r3, #0]
 801838e:	687b      	ldr	r3, [r7, #4]
 8018390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018394:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8018396:	68fa      	ldr	r2, [r7, #12]
 8018398:	4b20      	ldr	r3, [pc, #128]	; (801841c <FSMC_NORSRAM_Init+0xa0>)
 801839a:	4013      	ands	r3, r2
 801839c:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 801839e:	683b      	ldr	r3, [r7, #0]
 80183a0:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80183a2:	683b      	ldr	r3, [r7, #0]
 80183a4:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80183a6:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80183a8:	683b      	ldr	r3, [r7, #0]
 80183aa:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80183ac:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80183ae:	683b      	ldr	r3, [r7, #0]
 80183b0:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80183b2:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80183b4:	683b      	ldr	r3, [r7, #0]
 80183b6:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80183b8:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 80183ba:	683b      	ldr	r3, [r7, #0]
 80183bc:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 80183be:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80183c0:	683b      	ldr	r3, [r7, #0]
 80183c2:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 80183c4:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80183c6:	683b      	ldr	r3, [r7, #0]
 80183c8:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80183ca:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80183cc:	683b      	ldr	r3, [r7, #0]
 80183ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 80183d0:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80183d2:	683b      	ldr	r3, [r7, #0]
 80183d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 80183d6:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80183d8:	683b      	ldr	r3, [r7, #0]
 80183da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 80183dc:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80183de:	683b      	ldr	r3, [r7, #0]
 80183e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 80183e2:	431a      	orrs	r2, r3
                     Init->WriteBurst
 80183e4:	683b      	ldr	r3, [r7, #0]
 80183e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 80183e8:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80183ea:	68fa      	ldr	r2, [r7, #12]
 80183ec:	4313      	orrs	r3, r2
 80183ee:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80183f0:	683b      	ldr	r3, [r7, #0]
 80183f2:	689b      	ldr	r3, [r3, #8]
 80183f4:	2b08      	cmp	r3, #8
 80183f6:	d103      	bne.n	8018400 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80183f8:	68fb      	ldr	r3, [r7, #12]
 80183fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80183fe:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8018400:	683b      	ldr	r3, [r7, #0]
 8018402:	681a      	ldr	r2, [r3, #0]
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	68f9      	ldr	r1, [r7, #12]
 8018408:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 801840c:	2300      	movs	r3, #0
}
 801840e:	4618      	mov	r0, r3
 8018410:	3714      	adds	r7, #20
 8018412:	46bd      	mov	sp, r7
 8018414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018418:	4770      	bx	lr
 801841a:	bf00      	nop
 801841c:	fff00080 	.word	0xfff00080

08018420 <FSMC_NORSRAM_DeInit>:
  * @param  ExDevice Pointer to NORSRAM extended mode device instance  
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_DeInit(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_EXTENDED_TypeDef *ExDevice, uint32_t Bank)
{
 8018420:	b480      	push	{r7}
 8018422:	b085      	sub	sp, #20
 8018424:	af00      	add	r7, sp, #0
 8018426:	60f8      	str	r0, [r7, #12]
 8018428:	60b9      	str	r1, [r7, #8]
 801842a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_NORSRAM_DEVICE(Device));
  assert_param(IS_FSMC_NORSRAM_EXTENDED_DEVICE(ExDevice));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Disable the FSMC_NORSRAM device */
  __FSMC_NORSRAM_DISABLE(Device, Bank);
 801842c:	68fb      	ldr	r3, [r7, #12]
 801842e:	687a      	ldr	r2, [r7, #4]
 8018430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018434:	f023 0101 	bic.w	r1, r3, #1
 8018438:	68fb      	ldr	r3, [r7, #12]
 801843a:	687a      	ldr	r2, [r7, #4]
 801843c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  /* De-initialize the FSMC_NORSRAM device */
  /* FSMC_NORSRAM_BANK1 */
  if(Bank == FSMC_NORSRAM_BANK1)
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	2b00      	cmp	r3, #0
 8018444:	d106      	bne.n	8018454 <FSMC_NORSRAM_DeInit+0x34>
  {
    Device->BTCR[Bank] = 0x000030DBU;    
 8018446:	68fb      	ldr	r3, [r7, #12]
 8018448:	687a      	ldr	r2, [r7, #4]
 801844a:	f243 01db 	movw	r1, #12507	; 0x30db
 801844e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8018452:	e005      	b.n	8018460 <FSMC_NORSRAM_DeInit+0x40>
  }
  /* FSMC_NORSRAM_BANK2, FSMC_NORSRAM_BANK3 or FSMC_NORSRAM_BANK4 */
  else
  {   
    Device->BTCR[Bank] = 0x000030D2U; 
 8018454:	68fb      	ldr	r3, [r7, #12]
 8018456:	687a      	ldr	r2, [r7, #4]
 8018458:	f243 01d2 	movw	r1, #12498	; 0x30d2
 801845c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  
  Device->BTCR[Bank + 1U] = 0x0FFFFFFFU;
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	1c5a      	adds	r2, r3, #1
 8018464:	68fb      	ldr	r3, [r7, #12]
 8018466:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 801846a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  ExDevice->BWTR[Bank]    = 0x0FFFFFFFU;
 801846e:	68bb      	ldr	r3, [r7, #8]
 8018470:	687a      	ldr	r2, [r7, #4]
 8018472:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8018476:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   
  return HAL_OK;
 801847a:	2300      	movs	r3, #0
}
 801847c:	4618      	mov	r0, r3
 801847e:	3714      	adds	r7, #20
 8018480:	46bd      	mov	sp, r7
 8018482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018486:	4770      	bx	lr

08018488 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8018488:	b480      	push	{r7}
 801848a:	b087      	sub	sp, #28
 801848c:	af00      	add	r7, sp, #0
 801848e:	60f8      	str	r0, [r7, #12]
 8018490:	60b9      	str	r1, [r7, #8]
 8018492:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8018494:	2300      	movs	r3, #0
 8018496:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	1c5a      	adds	r2, r3, #1
 801849c:	68fb      	ldr	r3, [r7, #12]
 801849e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80184a2:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80184a4:	697b      	ldr	r3, [r7, #20]
 80184a6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80184aa:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80184ac:	68bb      	ldr	r3, [r7, #8]
 80184ae:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80184b0:	68bb      	ldr	r3, [r7, #8]
 80184b2:	685b      	ldr	r3, [r3, #4]
 80184b4:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80184b6:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80184b8:	68bb      	ldr	r3, [r7, #8]
 80184ba:	689b      	ldr	r3, [r3, #8]
 80184bc:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80184be:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80184c0:	68bb      	ldr	r3, [r7, #8]
 80184c2:	68db      	ldr	r3, [r3, #12]
 80184c4:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80184c6:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80184c8:	68bb      	ldr	r3, [r7, #8]
 80184ca:	691b      	ldr	r3, [r3, #16]
 80184cc:	3b01      	subs	r3, #1
 80184ce:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80184d0:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80184d2:	68bb      	ldr	r3, [r7, #8]
 80184d4:	695b      	ldr	r3, [r3, #20]
 80184d6:	3b02      	subs	r3, #2
 80184d8:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80184da:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80184dc:	68bb      	ldr	r3, [r7, #8]
 80184de:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80184e0:	4313      	orrs	r3, r2
 80184e2:	697a      	ldr	r2, [r7, #20]
 80184e4:	4313      	orrs	r3, r2
 80184e6:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80184e8:	687b      	ldr	r3, [r7, #4]
 80184ea:	1c5a      	adds	r2, r3, #1
 80184ec:	68fb      	ldr	r3, [r7, #12]
 80184ee:	6979      	ldr	r1, [r7, #20]
 80184f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80184f4:	2300      	movs	r3, #0
}
 80184f6:	4618      	mov	r0, r3
 80184f8:	371c      	adds	r7, #28
 80184fa:	46bd      	mov	sp, r7
 80184fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018500:	4770      	bx	lr

08018502 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8018502:	b480      	push	{r7}
 8018504:	b087      	sub	sp, #28
 8018506:	af00      	add	r7, sp, #0
 8018508:	60f8      	str	r0, [r7, #12]
 801850a:	60b9      	str	r1, [r7, #8]
 801850c:	607a      	str	r2, [r7, #4]
 801850e:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8018510:	2300      	movs	r3, #0
 8018512:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8018514:	683b      	ldr	r3, [r7, #0]
 8018516:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801851a:	d122      	bne.n	8018562 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 801851c:	68fb      	ldr	r3, [r7, #12]
 801851e:	687a      	ldr	r2, [r7, #4]
 8018520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018524:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8018526:	697a      	ldr	r2, [r7, #20]
 8018528:	4b14      	ldr	r3, [pc, #80]	; (801857c <FSMC_NORSRAM_Extended_Timing_Init+0x7a>)
 801852a:	4013      	ands	r3, r2
 801852c:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 801852e:	68bb      	ldr	r3, [r7, #8]
 8018530:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8018532:	68bb      	ldr	r3, [r7, #8]
 8018534:	685b      	ldr	r3, [r3, #4]
 8018536:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8018538:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 801853a:	68bb      	ldr	r3, [r7, #8]
 801853c:	689b      	ldr	r3, [r3, #8]
 801853e:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8018540:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8018542:	68bb      	ldr	r3, [r7, #8]
 8018544:	68db      	ldr	r3, [r3, #12]
 8018546:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8018548:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 801854a:	68bb      	ldr	r3, [r7, #8]
 801854c:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 801854e:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8018550:	697a      	ldr	r2, [r7, #20]
 8018552:	4313      	orrs	r3, r2
 8018554:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8018556:	68fb      	ldr	r3, [r7, #12]
 8018558:	687a      	ldr	r2, [r7, #4]
 801855a:	6979      	ldr	r1, [r7, #20]
 801855c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8018560:	e005      	b.n	801856e <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8018562:	68fb      	ldr	r3, [r7, #12]
 8018564:	687a      	ldr	r2, [r7, #4]
 8018566:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 801856a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 801856e:	2300      	movs	r3, #0
}
 8018570:	4618      	mov	r0, r3
 8018572:	371c      	adds	r7, #28
 8018574:	46bd      	mov	sp, r7
 8018576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801857a:	4770      	bx	lr
 801857c:	cff00000 	.word	0xcff00000

08018580 <FSMC_NORSRAM_WriteOperation_Enable>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Bank NORSRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_WriteOperation_Enable(FSMC_NORSRAM_TypeDef *Device, uint32_t Bank)
{
 8018580:	b480      	push	{r7}
 8018582:	b083      	sub	sp, #12
 8018584:	af00      	add	r7, sp, #0
 8018586:	6078      	str	r0, [r7, #4]
 8018588:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_NORSRAM_DEVICE(Device));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Enable write operation */
  Device->BTCR[Bank] |= FSMC_WRITE_OPERATION_ENABLE; 
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	683a      	ldr	r2, [r7, #0]
 801858e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018592:	f443 5180 	orr.w	r1, r3, #4096	; 0x1000
 8018596:	687b      	ldr	r3, [r7, #4]
 8018598:	683a      	ldr	r2, [r7, #0]
 801859a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  return HAL_OK;  
 801859e:	2300      	movs	r3, #0
}
 80185a0:	4618      	mov	r0, r3
 80185a2:	370c      	adds	r7, #12
 80185a4:	46bd      	mov	sp, r7
 80185a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185aa:	4770      	bx	lr

080185ac <FSMC_NORSRAM_WriteOperation_Disable>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Bank NORSRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_WriteOperation_Disable(FSMC_NORSRAM_TypeDef *Device, uint32_t Bank)
{
 80185ac:	b480      	push	{r7}
 80185ae:	b083      	sub	sp, #12
 80185b0:	af00      	add	r7, sp, #0
 80185b2:	6078      	str	r0, [r7, #4]
 80185b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_NORSRAM_DEVICE(Device));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Disable write operation */
  Device->BTCR[Bank] &= ~FSMC_WRITE_OPERATION_ENABLE; 
 80185b6:	687b      	ldr	r3, [r7, #4]
 80185b8:	683a      	ldr	r2, [r7, #0]
 80185ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80185be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80185c2:	687b      	ldr	r3, [r7, #4]
 80185c4:	683a      	ldr	r2, [r7, #0]
 80185c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  return HAL_OK;  
 80185ca:	2300      	movs	r3, #0
}
 80185cc:	4618      	mov	r0, r3
 80185ce:	370c      	adds	r7, #12
 80185d0:	46bd      	mov	sp, r7
 80185d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185d6:	4770      	bx	lr

080185d8 <FSMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_InitTypeDef *Init)
{
 80185d8:	b480      	push	{r7}
 80185da:	b085      	sub	sp, #20
 80185dc:	af00      	add	r7, sp, #0
 80185de:	6078      	str	r0, [r7, #4]
 80185e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr  = 0U; 
 80185e2:	2300      	movs	r3, #0
 80185e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_ECC_STATE(Init->EccComputation));
  assert_param(IS_FSMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));   

    if(Init->NandBank == FSMC_NAND_BANK2)
 80185e6:	683b      	ldr	r3, [r7, #0]
 80185e8:	681b      	ldr	r3, [r3, #0]
 80185ea:	2b10      	cmp	r3, #16
 80185ec:	d103      	bne.n	80185f6 <FSMC_NAND_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PCR2;
 80185ee:	687b      	ldr	r3, [r7, #4]
 80185f0:	681b      	ldr	r3, [r3, #0]
 80185f2:	60fb      	str	r3, [r7, #12]
 80185f4:	e002      	b.n	80185fc <FSMC_NAND_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PCR3;
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	6a1b      	ldr	r3, [r3, #32]
 80185fa:	60fb      	str	r3, [r7, #12]
  }
  
  /* Clear PWAITEN, PBKEN, PTYP, PWID, ECCEN, TCLR, TAR and ECCPS bits */
  tmpr &= ((uint32_t)~(FSMC_PCR2_PWAITEN  | FSMC_PCR2_PBKEN | FSMC_PCR2_PTYP | \
 80185fc:	68fa      	ldr	r2, [r7, #12]
 80185fe:	4b16      	ldr	r3, [pc, #88]	; (8018658 <FSMC_NAND_Init+0x80>)
 8018600:	4013      	ands	r3, r2
 8018602:	60fb      	str	r3, [r7, #12]
                       FSMC_PCR2_PWID | FSMC_PCR2_ECCEN | FSMC_PCR2_TCLR | \
                       FSMC_PCR2_TAR | FSMC_PCR2_ECCPS));  
  
  /* Set NAND device control parameters */
  tmpr |= (uint32_t)(Init->Waitfeature                |\
 8018604:	683b      	ldr	r3, [r7, #0]
 8018606:	685a      	ldr	r2, [r3, #4]
                     FSMC_PCR_MEMORY_TYPE_NAND        |\
                     Init->MemoryDataWidth            |\
 8018608:	683b      	ldr	r3, [r7, #0]
 801860a:	689b      	ldr	r3, [r3, #8]
                     FSMC_PCR_MEMORY_TYPE_NAND        |\
 801860c:	431a      	orrs	r2, r3
                     Init->EccComputation             |\
 801860e:	683b      	ldr	r3, [r7, #0]
 8018610:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryDataWidth            |\
 8018612:	431a      	orrs	r2, r3
                     Init->ECCPageSize                |\
 8018614:	683b      	ldr	r3, [r7, #0]
 8018616:	691b      	ldr	r3, [r3, #16]
                     Init->EccComputation             |\
 8018618:	431a      	orrs	r2, r3
                     ((Init->TCLRSetupTime) << 9U)    |\
 801861a:	683b      	ldr	r3, [r7, #0]
 801861c:	695b      	ldr	r3, [r3, #20]
 801861e:	025b      	lsls	r3, r3, #9
                     Init->ECCPageSize                |\
 8018620:	431a      	orrs	r2, r3
                     ((Init->TARSetupTime) << 13U));   
 8018622:	683b      	ldr	r3, [r7, #0]
 8018624:	699b      	ldr	r3, [r3, #24]
 8018626:	035b      	lsls	r3, r3, #13
  tmpr |= (uint32_t)(Init->Waitfeature                |\
 8018628:	431a      	orrs	r2, r3
 801862a:	68fb      	ldr	r3, [r7, #12]
 801862c:	4313      	orrs	r3, r2
 801862e:	f043 0308 	orr.w	r3, r3, #8
 8018632:	60fb      	str	r3, [r7, #12]
  
  if(Init->NandBank == FSMC_NAND_BANK2)
 8018634:	683b      	ldr	r3, [r7, #0]
 8018636:	681b      	ldr	r3, [r3, #0]
 8018638:	2b10      	cmp	r3, #16
 801863a:	d103      	bne.n	8018644 <FSMC_NAND_Init+0x6c>
  {
    /* NAND bank 2 registers configuration */
    Device->PCR2  = tmpr;
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	68fa      	ldr	r2, [r7, #12]
 8018640:	601a      	str	r2, [r3, #0]
 8018642:	e002      	b.n	801864a <FSMC_NAND_Init+0x72>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PCR3  = tmpr;
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	68fa      	ldr	r2, [r7, #12]
 8018648:	621a      	str	r2, [r3, #32]
  }
  
  return HAL_OK;
 801864a:	2300      	movs	r3, #0
}
 801864c:	4618      	mov	r0, r3
 801864e:	3714      	adds	r7, #20
 8018650:	46bd      	mov	sp, r7
 8018652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018656:	4770      	bx	lr
 8018658:	fff00181 	.word	0xfff00181

0801865c <FSMC_NAND_CommonSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_CommonSpace_Timing_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 801865c:	b480      	push	{r7}
 801865e:	b087      	sub	sp, #28
 8018660:	af00      	add	r7, sp, #0
 8018662:	60f8      	str	r0, [r7, #12]
 8018664:	60b9      	str	r1, [r7, #8]
 8018666:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;  
 8018668:	2300      	movs	r3, #0
 801866a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_SETUP_TIME(Timing->SetupTime));
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  
  if(Bank == FSMC_NAND_BANK2)
 801866c:	687b      	ldr	r3, [r7, #4]
 801866e:	2b10      	cmp	r3, #16
 8018670:	d103      	bne.n	801867a <FSMC_NAND_CommonSpace_Timing_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PMEM2;
 8018672:	68fb      	ldr	r3, [r7, #12]
 8018674:	689b      	ldr	r3, [r3, #8]
 8018676:	617b      	str	r3, [r7, #20]
 8018678:	e002      	b.n	8018680 <FSMC_NAND_CommonSpace_Timing_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PMEM3;
 801867a:	68fb      	ldr	r3, [r7, #12]
 801867c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801867e:	617b      	str	r3, [r7, #20]
  } 
  
  /* Clear MEMSETx, MEMWAITx, MEMHOLDx and MEMHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PMEM2_MEMSET2  | FSMC_PMEM2_MEMWAIT2 | FSMC_PMEM2_MEMHOLD2 | \
 8018680:	2300      	movs	r3, #0
 8018682:	617b      	str	r3, [r7, #20]
                       FSMC_PMEM2_MEMHIZ2));
  
  /* Set FSMC_NAND device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8018684:	68bb      	ldr	r3, [r7, #8]
 8018686:	681a      	ldr	r2, [r3, #0]
                       ((Timing->WaitSetupTime) << 8U)     |\
 8018688:	68bb      	ldr	r3, [r7, #8]
 801868a:	685b      	ldr	r3, [r3, #4]
 801868c:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 801868e:	431a      	orrs	r2, r3
                       ((Timing->HoldSetupTime) << 16U)    |\
 8018690:	68bb      	ldr	r3, [r7, #8]
 8018692:	689b      	ldr	r3, [r3, #8]
 8018694:	041b      	lsls	r3, r3, #16
                       ((Timing->WaitSetupTime) << 8U)     |\
 8018696:	431a      	orrs	r2, r3
                       ((Timing->HiZSetupTime) << 24U)
 8018698:	68bb      	ldr	r3, [r7, #8]
 801869a:	68db      	ldr	r3, [r3, #12]
 801869c:	061b      	lsls	r3, r3, #24
                       ((Timing->HoldSetupTime) << 16U)    |\
 801869e:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 80186a0:	697a      	ldr	r2, [r7, #20]
 80186a2:	4313      	orrs	r3, r2
 80186a4:	617b      	str	r3, [r7, #20]
                       );
                            
  if(Bank == FSMC_NAND_BANK2)
 80186a6:	687b      	ldr	r3, [r7, #4]
 80186a8:	2b10      	cmp	r3, #16
 80186aa:	d103      	bne.n	80186b4 <FSMC_NAND_CommonSpace_Timing_Init+0x58>
  {
    /* NAND bank 2 registers configuration */
    Device->PMEM2 = tmpr;
 80186ac:	68fb      	ldr	r3, [r7, #12]
 80186ae:	697a      	ldr	r2, [r7, #20]
 80186b0:	609a      	str	r2, [r3, #8]
 80186b2:	e002      	b.n	80186ba <FSMC_NAND_CommonSpace_Timing_Init+0x5e>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PMEM3 = tmpr;
 80186b4:	68fb      	ldr	r3, [r7, #12]
 80186b6:	697a      	ldr	r2, [r7, #20]
 80186b8:	629a      	str	r2, [r3, #40]	; 0x28
  }  
  
  return HAL_OK;  
 80186ba:	2300      	movs	r3, #0
}
 80186bc:	4618      	mov	r0, r3
 80186be:	371c      	adds	r7, #28
 80186c0:	46bd      	mov	sp, r7
 80186c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186c6:	4770      	bx	lr

080186c8 <FSMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number 
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_AttributeSpace_Timing_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 80186c8:	b480      	push	{r7}
 80186ca:	b087      	sub	sp, #28
 80186cc:	af00      	add	r7, sp, #0
 80186ce:	60f8      	str	r0, [r7, #12]
 80186d0:	60b9      	str	r1, [r7, #8]
 80186d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;  
 80186d4:	2300      	movs	r3, #0
 80186d6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_SETUP_TIME(Timing->SetupTime));
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  
  if(Bank == FSMC_NAND_BANK2)
 80186d8:	687b      	ldr	r3, [r7, #4]
 80186da:	2b10      	cmp	r3, #16
 80186dc:	d103      	bne.n	80186e6 <FSMC_NAND_AttributeSpace_Timing_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PATT2;
 80186de:	68fb      	ldr	r3, [r7, #12]
 80186e0:	68db      	ldr	r3, [r3, #12]
 80186e2:	617b      	str	r3, [r7, #20]
 80186e4:	e002      	b.n	80186ec <FSMC_NAND_AttributeSpace_Timing_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PATT3;
 80186e6:	68fb      	ldr	r3, [r7, #12]
 80186e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80186ea:	617b      	str	r3, [r7, #20]
  } 
  
  /* Clear ATTSETx, ATTWAITx, ATTHOLDx and ATTHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PATT2_ATTSET2  | FSMC_PATT2_ATTWAIT2 | FSMC_PATT2_ATTHOLD2 | \
 80186ec:	2300      	movs	r3, #0
 80186ee:	617b      	str	r3, [r7, #20]
                       FSMC_PATT2_ATTHIZ2));
  
  /* Set FSMC_NAND device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 80186f0:	68bb      	ldr	r3, [r7, #8]
 80186f2:	681a      	ldr	r2, [r3, #0]
                       ((Timing->WaitSetupTime) << 8U)     |\
 80186f4:	68bb      	ldr	r3, [r7, #8]
 80186f6:	685b      	ldr	r3, [r3, #4]
 80186f8:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 80186fa:	431a      	orrs	r2, r3
                       ((Timing->HoldSetupTime) << 16U)    |\
 80186fc:	68bb      	ldr	r3, [r7, #8]
 80186fe:	689b      	ldr	r3, [r3, #8]
 8018700:	041b      	lsls	r3, r3, #16
                       ((Timing->WaitSetupTime) << 8U)     |\
 8018702:	431a      	orrs	r2, r3
                       ((Timing->HiZSetupTime) << 24U)
 8018704:	68bb      	ldr	r3, [r7, #8]
 8018706:	68db      	ldr	r3, [r3, #12]
 8018708:	061b      	lsls	r3, r3, #24
                       ((Timing->HoldSetupTime) << 16U)    |\
 801870a:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 801870c:	697a      	ldr	r2, [r7, #20]
 801870e:	4313      	orrs	r3, r2
 8018710:	617b      	str	r3, [r7, #20]
                       );
                       
  if(Bank == FSMC_NAND_BANK2)
 8018712:	687b      	ldr	r3, [r7, #4]
 8018714:	2b10      	cmp	r3, #16
 8018716:	d103      	bne.n	8018720 <FSMC_NAND_AttributeSpace_Timing_Init+0x58>
  {
    /* NAND bank 2 registers configuration */
    Device->PATT2 = tmpr;
 8018718:	68fb      	ldr	r3, [r7, #12]
 801871a:	697a      	ldr	r2, [r7, #20]
 801871c:	60da      	str	r2, [r3, #12]
 801871e:	e002      	b.n	8018726 <FSMC_NAND_AttributeSpace_Timing_Init+0x5e>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PATT3 = tmpr;
 8018720:	68fb      	ldr	r3, [r7, #12]
 8018722:	697a      	ldr	r2, [r7, #20]
 8018724:	62da      	str	r2, [r3, #44]	; 0x2c
  }   
  
  return HAL_OK;
 8018726:	2300      	movs	r3, #0
}
 8018728:	4618      	mov	r0, r3
 801872a:	371c      	adds	r7, #28
 801872c:	46bd      	mov	sp, r7
 801872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018732:	4770      	bx	lr

08018734 <FSMC_NAND_DeInit>:
  * @param  Device Pointer to NAND device instance
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_DeInit(FSMC_NAND_TypeDef *Device, uint32_t Bank)
{
 8018734:	b480      	push	{r7}
 8018736:	b083      	sub	sp, #12
 8018738:	af00      	add	r7, sp, #0
 801873a:	6078      	str	r0, [r7, #4]
 801873c:	6039      	str	r1, [r7, #0]
  /* Disable the NAND Bank */
  __FSMC_NAND_DISABLE(Device, Bank);
 801873e:	683b      	ldr	r3, [r7, #0]
 8018740:	2b10      	cmp	r3, #16
 8018742:	d106      	bne.n	8018752 <FSMC_NAND_DeInit+0x1e>
 8018744:	687b      	ldr	r3, [r7, #4]
 8018746:	681b      	ldr	r3, [r3, #0]
 8018748:	f023 0204 	bic.w	r2, r3, #4
 801874c:	687b      	ldr	r3, [r7, #4]
 801874e:	601a      	str	r2, [r3, #0]
 8018750:	e005      	b.n	801875e <FSMC_NAND_DeInit+0x2a>
 8018752:	687b      	ldr	r3, [r7, #4]
 8018754:	6a1b      	ldr	r3, [r3, #32]
 8018756:	f023 0204 	bic.w	r2, r3, #4
 801875a:	687b      	ldr	r3, [r7, #4]
 801875c:	621a      	str	r2, [r3, #32]
 
  /* De-initialize the NAND Bank */
  if(Bank == FSMC_NAND_BANK2)
 801875e:	683b      	ldr	r3, [r7, #0]
 8018760:	2b10      	cmp	r3, #16
 8018762:	d10e      	bne.n	8018782 <FSMC_NAND_DeInit+0x4e>
  {
    /* Set the FSMC_NAND_BANK2 registers to their reset values */
    Device->PCR2  = 0x00000018U;
 8018764:	687b      	ldr	r3, [r7, #4]
 8018766:	2218      	movs	r2, #24
 8018768:	601a      	str	r2, [r3, #0]
    Device->SR2   = 0x00000040U;
 801876a:	687b      	ldr	r3, [r7, #4]
 801876c:	2240      	movs	r2, #64	; 0x40
 801876e:	605a      	str	r2, [r3, #4]
    Device->PMEM2 = 0xFCFCFCFCU;
 8018770:	687b      	ldr	r3, [r7, #4]
 8018772:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8018776:	609a      	str	r2, [r3, #8]
    Device->PATT2 = 0xFCFCFCFCU;  
 8018778:	687b      	ldr	r3, [r7, #4]
 801877a:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 801877e:	60da      	str	r2, [r3, #12]
 8018780:	e00d      	b.n	801879e <FSMC_NAND_DeInit+0x6a>
  }
  /* FSMC_Bank3_NAND */  
  else
  {
    /* Set the FSMC_NAND_BANK3 registers to their reset values */
    Device->PCR3  = 0x00000018U;
 8018782:	687b      	ldr	r3, [r7, #4]
 8018784:	2218      	movs	r2, #24
 8018786:	621a      	str	r2, [r3, #32]
    Device->SR3   = 0x00000040U;
 8018788:	687b      	ldr	r3, [r7, #4]
 801878a:	2240      	movs	r2, #64	; 0x40
 801878c:	625a      	str	r2, [r3, #36]	; 0x24
    Device->PMEM3 = 0xFCFCFCFCU;
 801878e:	687b      	ldr	r3, [r7, #4]
 8018790:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8018794:	629a      	str	r2, [r3, #40]	; 0x28
    Device->PATT3 = 0xFCFCFCFCU; 
 8018796:	687b      	ldr	r3, [r7, #4]
 8018798:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 801879c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;
 801879e:	2300      	movs	r3, #0
}
 80187a0:	4618      	mov	r0, r3
 80187a2:	370c      	adds	r7, #12
 80187a4:	46bd      	mov	sp, r7
 80187a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187aa:	4770      	bx	lr

080187ac <FSMC_NAND_ECC_Enable>:
  * @param  Device Pointer to NAND device instance
  * @param  Bank NAND bank number
  * @retval HAL status
  */    
HAL_StatusTypeDef  FSMC_NAND_ECC_Enable(FSMC_NAND_TypeDef *Device, uint32_t Bank)
{
 80187ac:	b480      	push	{r7}
 80187ae:	b083      	sub	sp, #12
 80187b0:	af00      	add	r7, sp, #0
 80187b2:	6078      	str	r0, [r7, #4]
 80187b4:	6039      	str	r1, [r7, #0]
  /* Enable ECC feature */
  if(Bank == FSMC_NAND_BANK2)
 80187b6:	683b      	ldr	r3, [r7, #0]
 80187b8:	2b10      	cmp	r3, #16
 80187ba:	d106      	bne.n	80187ca <FSMC_NAND_ECC_Enable+0x1e>
  {
    Device->PCR2 |= FSMC_PCR2_ECCEN;
 80187bc:	687b      	ldr	r3, [r7, #4]
 80187be:	681b      	ldr	r3, [r3, #0]
 80187c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	601a      	str	r2, [r3, #0]
 80187c8:	e005      	b.n	80187d6 <FSMC_NAND_ECC_Enable+0x2a>
  }
  else
  {
    Device->PCR3 |= FSMC_PCR3_ECCEN;
 80187ca:	687b      	ldr	r3, [r7, #4]
 80187cc:	6a1b      	ldr	r3, [r3, #32]
 80187ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80187d2:	687b      	ldr	r3, [r7, #4]
 80187d4:	621a      	str	r2, [r3, #32]
  } 
  
  return HAL_OK;  
 80187d6:	2300      	movs	r3, #0
}
 80187d8:	4618      	mov	r0, r3
 80187da:	370c      	adds	r7, #12
 80187dc:	46bd      	mov	sp, r7
 80187de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187e2:	4770      	bx	lr

080187e4 <FSMC_NAND_ECC_Disable>:
  * @param  Device Pointer to NAND device instance
  * @param  Bank NAND bank number
  * @retval HAL status
  */  
HAL_StatusTypeDef FSMC_NAND_ECC_Disable(FSMC_NAND_TypeDef *Device, uint32_t Bank)  
{  
 80187e4:	b480      	push	{r7}
 80187e6:	b083      	sub	sp, #12
 80187e8:	af00      	add	r7, sp, #0
 80187ea:	6078      	str	r0, [r7, #4]
 80187ec:	6039      	str	r1, [r7, #0]
  /* Disable ECC feature */
  if(Bank == FSMC_NAND_BANK2)
 80187ee:	683b      	ldr	r3, [r7, #0]
 80187f0:	2b10      	cmp	r3, #16
 80187f2:	d106      	bne.n	8018802 <FSMC_NAND_ECC_Disable+0x1e>
  {
    Device->PCR2 &= ~FSMC_PCR2_ECCEN;
 80187f4:	687b      	ldr	r3, [r7, #4]
 80187f6:	681b      	ldr	r3, [r3, #0]
 80187f8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	601a      	str	r2, [r3, #0]
 8018800:	e005      	b.n	801880e <FSMC_NAND_ECC_Disable+0x2a>
  }
  else
  {
    Device->PCR3 &= ~FSMC_PCR3_ECCEN;
 8018802:	687b      	ldr	r3, [r7, #4]
 8018804:	6a1b      	ldr	r3, [r3, #32]
 8018806:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 801880a:	687b      	ldr	r3, [r7, #4]
 801880c:	621a      	str	r2, [r3, #32]
  } 

  return HAL_OK;  
 801880e:	2300      	movs	r3, #0
}
 8018810:	4618      	mov	r0, r3
 8018812:	370c      	adds	r7, #12
 8018814:	46bd      	mov	sp, r7
 8018816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801881a:	4770      	bx	lr

0801881c <FSMC_NAND_GetECC>:
  * @param  Bank NAND bank number
  * @param  Timeout Timeout wait value  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_GetECC(FSMC_NAND_TypeDef *Device, uint32_t *ECCval, uint32_t Bank, uint32_t Timeout)
{
 801881c:	b580      	push	{r7, lr}
 801881e:	b086      	sub	sp, #24
 8018820:	af00      	add	r7, sp, #0
 8018822:	60f8      	str	r0, [r7, #12]
 8018824:	60b9      	str	r1, [r7, #8]
 8018826:	607a      	str	r2, [r7, #4]
 8018828:	603b      	str	r3, [r7, #0]
  uint32_t tickstart = 0U;
 801882a:	2300      	movs	r3, #0
 801882c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */ 
  assert_param(IS_FSMC_NAND_DEVICE(Device)); 
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Get tick */ 
  tickstart = HAL_GetTick();
 801882e:	f7ee f825 	bl	800687c <HAL_GetTick>
 8018832:	6178      	str	r0, [r7, #20]

  /* Wait until FIFO is empty */
  while(__FSMC_NAND_GET_FLAG(Device, Bank, FSMC_FLAG_FEMPT) == RESET)
 8018834:	e010      	b.n	8018858 <FSMC_NAND_GetECC+0x3c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8018836:	683b      	ldr	r3, [r7, #0]
 8018838:	f1b3 3fff 	cmp.w	r3, #4294967295
 801883c:	d00c      	beq.n	8018858 <FSMC_NAND_GetECC+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 801883e:	683b      	ldr	r3, [r7, #0]
 8018840:	2b00      	cmp	r3, #0
 8018842:	d007      	beq.n	8018854 <FSMC_NAND_GetECC+0x38>
 8018844:	f7ee f81a 	bl	800687c <HAL_GetTick>
 8018848:	4602      	mov	r2, r0
 801884a:	697b      	ldr	r3, [r7, #20]
 801884c:	1ad3      	subs	r3, r2, r3
 801884e:	683a      	ldr	r2, [r7, #0]
 8018850:	429a      	cmp	r2, r3
 8018852:	d201      	bcs.n	8018858 <FSMC_NAND_GetECC+0x3c>
      {
        return HAL_TIMEOUT;
 8018854:	2303      	movs	r3, #3
 8018856:	e024      	b.n	80188a2 <FSMC_NAND_GetECC+0x86>
  while(__FSMC_NAND_GET_FLAG(Device, Bank, FSMC_FLAG_FEMPT) == RESET)
 8018858:	687b      	ldr	r3, [r7, #4]
 801885a:	2b10      	cmp	r3, #16
 801885c:	d109      	bne.n	8018872 <FSMC_NAND_GetECC+0x56>
 801885e:	68fb      	ldr	r3, [r7, #12]
 8018860:	685b      	ldr	r3, [r3, #4]
 8018862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018866:	2b40      	cmp	r3, #64	; 0x40
 8018868:	bf14      	ite	ne
 801886a:	2301      	movne	r3, #1
 801886c:	2300      	moveq	r3, #0
 801886e:	b2db      	uxtb	r3, r3
 8018870:	e008      	b.n	8018884 <FSMC_NAND_GetECC+0x68>
 8018872:	68fb      	ldr	r3, [r7, #12]
 8018874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801887a:	2b40      	cmp	r3, #64	; 0x40
 801887c:	bf14      	ite	ne
 801887e:	2301      	movne	r3, #1
 8018880:	2300      	moveq	r3, #0
 8018882:	b2db      	uxtb	r3, r3
 8018884:	2b00      	cmp	r3, #0
 8018886:	d1d6      	bne.n	8018836 <FSMC_NAND_GetECC+0x1a>
      }
    }   
  }
     
  if(Bank == FSMC_NAND_BANK2)
 8018888:	687b      	ldr	r3, [r7, #4]
 801888a:	2b10      	cmp	r3, #16
 801888c:	d104      	bne.n	8018898 <FSMC_NAND_GetECC+0x7c>
  {    
    /* Get the ECCR2 register value */
    *ECCval = (uint32_t)Device->ECCR2;
 801888e:	68fb      	ldr	r3, [r7, #12]
 8018890:	695a      	ldr	r2, [r3, #20]
 8018892:	68bb      	ldr	r3, [r7, #8]
 8018894:	601a      	str	r2, [r3, #0]
 8018896:	e003      	b.n	80188a0 <FSMC_NAND_GetECC+0x84>
  }
  else
  {    
    /* Get the ECCR3 register value */
    *ECCval = (uint32_t)Device->ECCR3;
 8018898:	68fb      	ldr	r3, [r7, #12]
 801889a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801889c:	68bb      	ldr	r3, [r7, #8]
 801889e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;  
 80188a0:	2300      	movs	r3, #0
}
 80188a2:	4618      	mov	r0, r3
 80188a4:	3718      	adds	r7, #24
 80188a6:	46bd      	mov	sp, r7
 80188a8:	bd80      	pop	{r7, pc}

080188aa <FSMC_PCCARD_Init>:
  * @param  Device Pointer to PCCARD device instance
  * @param  Init Pointer to PCCARD Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_PCCARD_Init(FSMC_PCCARD_TypeDef *Device, FSMC_PCCARD_InitTypeDef *Init)
{
 80188aa:	b480      	push	{r7}
 80188ac:	b085      	sub	sp, #20
 80188ae:	af00      	add	r7, sp, #0
 80188b0:	6078      	str	r0, [r7, #4]
 80188b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80188b4:	2300      	movs	r3, #0
 80188b6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WAIT_FEATURE(Init->Waitfeature));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));     
  
  /* Get PCCARD control register value */
  tmpr = Device->PCR4;
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	681b      	ldr	r3, [r3, #0]
 80188bc:	60fb      	str	r3, [r7, #12]
  
  /* Clear TAR, TCLR, PWAITEN and PWID bits */
  tmpr &= ((uint32_t)~(FSMC_PCR4_TAR  | FSMC_PCR4_TCLR | FSMC_PCR4_PWAITEN | \
 80188be:	68fb      	ldr	r3, [r7, #12]
 80188c0:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 80188c4:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80188c8:	60fb      	str	r3, [r7, #12]
                       FSMC_PCR4_PWID | FSMC_PCR4_PTYP));
  
  /* Set FSMC_PCCARD device control parameters */
  tmpr |= (uint32_t)(Init->Waitfeature               |\
 80188ca:	683b      	ldr	r3, [r7, #0]
 80188cc:	681a      	ldr	r2, [r3, #0]
                     FSMC_NAND_PCC_MEM_BUS_WIDTH_16  |\
                     (Init->TCLRSetupTime << 9U)     |\
 80188ce:	683b      	ldr	r3, [r7, #0]
 80188d0:	685b      	ldr	r3, [r3, #4]
 80188d2:	025b      	lsls	r3, r3, #9
                     FSMC_NAND_PCC_MEM_BUS_WIDTH_16  |\
 80188d4:	431a      	orrs	r2, r3
                     (Init->TARSetupTime << 13U));
 80188d6:	683b      	ldr	r3, [r7, #0]
 80188d8:	689b      	ldr	r3, [r3, #8]
 80188da:	035b      	lsls	r3, r3, #13
  tmpr |= (uint32_t)(Init->Waitfeature               |\
 80188dc:	431a      	orrs	r2, r3
 80188de:	68fb      	ldr	r3, [r7, #12]
 80188e0:	4313      	orrs	r3, r2
 80188e2:	f043 0310 	orr.w	r3, r3, #16
 80188e6:	60fb      	str	r3, [r7, #12]
  
  Device->PCR4 = tmpr;
 80188e8:	687b      	ldr	r3, [r7, #4]
 80188ea:	68fa      	ldr	r2, [r7, #12]
 80188ec:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 80188ee:	2300      	movs	r3, #0
}
 80188f0:	4618      	mov	r0, r3
 80188f2:	3714      	adds	r7, #20
 80188f4:	46bd      	mov	sp, r7
 80188f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188fa:	4770      	bx	lr

080188fc <FSMC_PCCARD_CommonSpace_Timing_Init>:
  * @param  Device Pointer to PCCARD device instance
  * @param  Timing Pointer to PCCARD timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_PCCARD_CommonSpace_Timing_Init(FSMC_PCCARD_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing)
{
 80188fc:	b480      	push	{r7}
 80188fe:	b085      	sub	sp, #20
 8018900:	af00      	add	r7, sp, #0
 8018902:	6078      	str	r0, [r7, #4]
 8018904:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8018906:	2300      	movs	r3, #0
 8018908:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));

  /* Get PCCARD common space timing register value */
  tmpr = Device->PMEM4;
 801890a:	687b      	ldr	r3, [r7, #4]
 801890c:	689b      	ldr	r3, [r3, #8]
 801890e:	60fb      	str	r3, [r7, #12]
  
  /* Clear MEMSETx, MEMWAITx, MEMHOLDx and MEMHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PMEM4_MEMSET4  | FSMC_PMEM4_MEMWAIT4 | FSMC_PMEM4_MEMHOLD4 | \
 8018910:	2300      	movs	r3, #0
 8018912:	60fb      	str	r3, [r7, #12]
                       FSMC_PMEM4_MEMHIZ4));
  /* Set PCCARD timing parameters */
  tmpr |= (uint32_t)((Timing->SetupTime                 |\
 8018914:	683b      	ldr	r3, [r7, #0]
 8018916:	681a      	ldr	r2, [r3, #0]
                    ((Timing->WaitSetupTime) << 8U)     |\
 8018918:	683b      	ldr	r3, [r7, #0]
 801891a:	685b      	ldr	r3, [r3, #4]
 801891c:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)((Timing->SetupTime                 |\
 801891e:	431a      	orrs	r2, r3
                    (Timing->HoldSetupTime) << 16U)     |\
 8018920:	683b      	ldr	r3, [r7, #0]
 8018922:	689b      	ldr	r3, [r3, #8]
 8018924:	041b      	lsls	r3, r3, #16
                    ((Timing->WaitSetupTime) << 8U)     |\
 8018926:	431a      	orrs	r2, r3
                    ((Timing->HiZSetupTime) << 24U));
 8018928:	683b      	ldr	r3, [r7, #0]
 801892a:	68db      	ldr	r3, [r3, #12]
 801892c:	061b      	lsls	r3, r3, #24
                    (Timing->HoldSetupTime) << 16U)     |\
 801892e:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)((Timing->SetupTime                 |\
 8018930:	68fa      	ldr	r2, [r7, #12]
 8018932:	4313      	orrs	r3, r2
 8018934:	60fb      	str	r3, [r7, #12]
  
  Device->PMEM4 = tmpr;
 8018936:	687b      	ldr	r3, [r7, #4]
 8018938:	68fa      	ldr	r2, [r7, #12]
 801893a:	609a      	str	r2, [r3, #8]
  
  return HAL_OK;  
 801893c:	2300      	movs	r3, #0
}
 801893e:	4618      	mov	r0, r3
 8018940:	3714      	adds	r7, #20
 8018942:	46bd      	mov	sp, r7
 8018944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018948:	4770      	bx	lr

0801894a <FSMC_PCCARD_AttributeSpace_Timing_Init>:
  * @param  Device Pointer to PCCARD device instance
  * @param  Timing Pointer to PCCARD timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_PCCARD_AttributeSpace_Timing_Init(FSMC_PCCARD_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing)
{
 801894a:	b480      	push	{r7}
 801894c:	b085      	sub	sp, #20
 801894e:	af00      	add	r7, sp, #0
 8018950:	6078      	str	r0, [r7, #4]
 8018952:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8018954:	2300      	movs	r3, #0
 8018956:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));

  /* Get PCCARD timing parameters */
  tmpr = Device->PATT4;
 8018958:	687b      	ldr	r3, [r7, #4]
 801895a:	68db      	ldr	r3, [r3, #12]
 801895c:	60fb      	str	r3, [r7, #12]

  /* Clear ATTSETx, ATTWAITx, ATTHOLDx and ATTHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PATT4_ATTSET4  | FSMC_PATT4_ATTWAIT4 | FSMC_PATT4_ATTHOLD4 | \
 801895e:	2300      	movs	r3, #0
 8018960:	60fb      	str	r3, [r7, #12]
                       FSMC_PATT4_ATTHIZ4));
  
  /* Set PCCARD timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                 |\
 8018962:	683b      	ldr	r3, [r7, #0]
 8018964:	681a      	ldr	r2, [r3, #0]
                   ((Timing->WaitSetupTime) << 8U)     |\
 8018966:	683b      	ldr	r3, [r7, #0]
 8018968:	685b      	ldr	r3, [r3, #4]
 801896a:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                 |\
 801896c:	431a      	orrs	r2, r3
                   ((Timing->HoldSetupTime) << 16U)    |\
 801896e:	683b      	ldr	r3, [r7, #0]
 8018970:	689b      	ldr	r3, [r3, #8]
 8018972:	041b      	lsls	r3, r3, #16
                   ((Timing->WaitSetupTime) << 8U)     |\
 8018974:	431a      	orrs	r2, r3
                   ((Timing->HiZSetupTime) << 24U));
 8018976:	683b      	ldr	r3, [r7, #0]
 8018978:	68db      	ldr	r3, [r3, #12]
 801897a:	061b      	lsls	r3, r3, #24
                   ((Timing->HoldSetupTime) << 16U)    |\
 801897c:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                 |\
 801897e:	68fa      	ldr	r2, [r7, #12]
 8018980:	4313      	orrs	r3, r2
 8018982:	60fb      	str	r3, [r7, #12]
  Device->PATT4 = tmpr; 
 8018984:	687b      	ldr	r3, [r7, #4]
 8018986:	68fa      	ldr	r2, [r7, #12]
 8018988:	60da      	str	r2, [r3, #12]
                                        
  return HAL_OK;
 801898a:	2300      	movs	r3, #0
}
 801898c:	4618      	mov	r0, r3
 801898e:	3714      	adds	r7, #20
 8018990:	46bd      	mov	sp, r7
 8018992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018996:	4770      	bx	lr

08018998 <FSMC_PCCARD_IOSpace_Timing_Init>:
  * @param  Device Pointer to PCCARD device instance
  * @param  Timing Pointer to PCCARD timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_PCCARD_IOSpace_Timing_Init(FSMC_PCCARD_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing)
{
 8018998:	b480      	push	{r7}
 801899a:	b085      	sub	sp, #20
 801899c:	af00      	add	r7, sp, #0
 801899e:	6078      	str	r0, [r7, #4]
 80189a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80189a2:	2300      	movs	r3, #0
 80189a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));

  /* Get FSMC_PCCARD device timing parameters */
  tmpr = Device->PIO4;
 80189a6:	687b      	ldr	r3, [r7, #4]
 80189a8:	691b      	ldr	r3, [r3, #16]
 80189aa:	60fb      	str	r3, [r7, #12]

  /* Clear IOSET4, IOWAIT4, IOHOLD4 and IOHIZ4 bits */
  tmpr &= ((uint32_t)~(FSMC_PIO4_IOSET4  | FSMC_PIO4_IOWAIT4 | FSMC_PIO4_IOHOLD4 | \
 80189ac:	2300      	movs	r3, #0
 80189ae:	60fb      	str	r3, [r7, #12]
                       FSMC_PIO4_IOHIZ4));
  
  /* Set FSMC_PCCARD device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                   |\
 80189b0:	683b      	ldr	r3, [r7, #0]
 80189b2:	681a      	ldr	r2, [r3, #0]
                     ((Timing->WaitSetupTime) << 8U)     |\
 80189b4:	683b      	ldr	r3, [r7, #0]
 80189b6:	685b      	ldr	r3, [r3, #4]
 80189b8:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                   |\
 80189ba:	431a      	orrs	r2, r3
                     ((Timing->HoldSetupTime) << 16U)    |\
 80189bc:	683b      	ldr	r3, [r7, #0]
 80189be:	689b      	ldr	r3, [r3, #8]
 80189c0:	041b      	lsls	r3, r3, #16
                     ((Timing->WaitSetupTime) << 8U)     |\
 80189c2:	431a      	orrs	r2, r3
                     ((Timing->HiZSetupTime) << 24U));   
 80189c4:	683b      	ldr	r3, [r7, #0]
 80189c6:	68db      	ldr	r3, [r3, #12]
 80189c8:	061b      	lsls	r3, r3, #24
                     ((Timing->HoldSetupTime) << 16U)    |\
 80189ca:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                   |\
 80189cc:	68fa      	ldr	r2, [r7, #12]
 80189ce:	4313      	orrs	r3, r2
 80189d0:	60fb      	str	r3, [r7, #12]
  
  Device->PIO4 = tmpr;
 80189d2:	687b      	ldr	r3, [r7, #4]
 80189d4:	68fa      	ldr	r2, [r7, #12]
 80189d6:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;
 80189d8:	2300      	movs	r3, #0
}
 80189da:	4618      	mov	r0, r3
 80189dc:	3714      	adds	r7, #20
 80189de:	46bd      	mov	sp, r7
 80189e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189e4:	4770      	bx	lr

080189e6 <FSMC_PCCARD_DeInit>:
  * @brief  DeInitializes the FSMC_PCCARD device 
  * @param  Device Pointer to PCCARD device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_PCCARD_DeInit(FSMC_PCCARD_TypeDef *Device)
{
 80189e6:	b480      	push	{r7}
 80189e8:	b083      	sub	sp, #12
 80189ea:	af00      	add	r7, sp, #0
 80189ec:	6078      	str	r0, [r7, #4]
  /* Disable the FSMC_PCCARD device */
  __FSMC_PCCARD_DISABLE(Device);
 80189ee:	687b      	ldr	r3, [r7, #4]
 80189f0:	681b      	ldr	r3, [r3, #0]
 80189f2:	f023 0204 	bic.w	r2, r3, #4
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	601a      	str	r2, [r3, #0]
  
  /* De-initialize the FSMC_PCCARD device */
  Device->PCR4    = 0x00000018U; 
 80189fa:	687b      	ldr	r3, [r7, #4]
 80189fc:	2218      	movs	r2, #24
 80189fe:	601a      	str	r2, [r3, #0]
  Device->SR4     = 0x00000000U;	
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	2200      	movs	r2, #0
 8018a04:	605a      	str	r2, [r3, #4]
  Device->PMEM4   = 0xFCFCFCFCU;
 8018a06:	687b      	ldr	r3, [r7, #4]
 8018a08:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8018a0c:	609a      	str	r2, [r3, #8]
  Device->PATT4   = 0xFCFCFCFCU;
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8018a14:	60da      	str	r2, [r3, #12]
  Device->PIO4    = 0xFCFCFCFCU;
 8018a16:	687b      	ldr	r3, [r7, #4]
 8018a18:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8018a1c:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;
 8018a1e:	2300      	movs	r3, #0
}
 8018a20:	4618      	mov	r0, r3
 8018a22:	370c      	adds	r7, #12
 8018a24:	46bd      	mov	sp, r7
 8018a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a2a:	4770      	bx	lr

08018a2c <strlen>:
 8018a2c:	4603      	mov	r3, r0
 8018a2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018a32:	2a00      	cmp	r2, #0
 8018a34:	d1fb      	bne.n	8018a2e <strlen+0x2>
 8018a36:	1a18      	subs	r0, r3, r0
 8018a38:	3801      	subs	r0, #1
 8018a3a:	4770      	bx	lr
 8018a3c:	0000      	movs	r0, r0
	...

08018a40 <memchr>:
 8018a40:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8018a44:	2a10      	cmp	r2, #16
 8018a46:	db2b      	blt.n	8018aa0 <memchr+0x60>
 8018a48:	f010 0f07 	tst.w	r0, #7
 8018a4c:	d008      	beq.n	8018a60 <memchr+0x20>
 8018a4e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8018a52:	3a01      	subs	r2, #1
 8018a54:	428b      	cmp	r3, r1
 8018a56:	d02d      	beq.n	8018ab4 <memchr+0x74>
 8018a58:	f010 0f07 	tst.w	r0, #7
 8018a5c:	b342      	cbz	r2, 8018ab0 <memchr+0x70>
 8018a5e:	d1f6      	bne.n	8018a4e <memchr+0xe>
 8018a60:	b4f0      	push	{r4, r5, r6, r7}
 8018a62:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8018a66:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8018a6a:	f022 0407 	bic.w	r4, r2, #7
 8018a6e:	f07f 0700 	mvns.w	r7, #0
 8018a72:	2300      	movs	r3, #0
 8018a74:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8018a78:	3c08      	subs	r4, #8
 8018a7a:	ea85 0501 	eor.w	r5, r5, r1
 8018a7e:	ea86 0601 	eor.w	r6, r6, r1
 8018a82:	fa85 f547 	uadd8	r5, r5, r7
 8018a86:	faa3 f587 	sel	r5, r3, r7
 8018a8a:	fa86 f647 	uadd8	r6, r6, r7
 8018a8e:	faa5 f687 	sel	r6, r5, r7
 8018a92:	b98e      	cbnz	r6, 8018ab8 <memchr+0x78>
 8018a94:	d1ee      	bne.n	8018a74 <memchr+0x34>
 8018a96:	bcf0      	pop	{r4, r5, r6, r7}
 8018a98:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8018a9c:	f002 0207 	and.w	r2, r2, #7
 8018aa0:	b132      	cbz	r2, 8018ab0 <memchr+0x70>
 8018aa2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8018aa6:	3a01      	subs	r2, #1
 8018aa8:	ea83 0301 	eor.w	r3, r3, r1
 8018aac:	b113      	cbz	r3, 8018ab4 <memchr+0x74>
 8018aae:	d1f8      	bne.n	8018aa2 <memchr+0x62>
 8018ab0:	2000      	movs	r0, #0
 8018ab2:	4770      	bx	lr
 8018ab4:	3801      	subs	r0, #1
 8018ab6:	4770      	bx	lr
 8018ab8:	2d00      	cmp	r5, #0
 8018aba:	bf06      	itte	eq
 8018abc:	4635      	moveq	r5, r6
 8018abe:	3803      	subeq	r0, #3
 8018ac0:	3807      	subne	r0, #7
 8018ac2:	f015 0f01 	tst.w	r5, #1
 8018ac6:	d107      	bne.n	8018ad8 <memchr+0x98>
 8018ac8:	3001      	adds	r0, #1
 8018aca:	f415 7f80 	tst.w	r5, #256	; 0x100
 8018ace:	bf02      	ittt	eq
 8018ad0:	3001      	addeq	r0, #1
 8018ad2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8018ad6:	3001      	addeq	r0, #1
 8018ad8:	bcf0      	pop	{r4, r5, r6, r7}
 8018ada:	3801      	subs	r0, #1
 8018adc:	4770      	bx	lr
 8018ade:	bf00      	nop

08018ae0 <__aeabi_drsub>:
 8018ae0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8018ae4:	e002      	b.n	8018aec <__adddf3>
 8018ae6:	bf00      	nop

08018ae8 <__aeabi_dsub>:
 8018ae8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08018aec <__adddf3>:
 8018aec:	b530      	push	{r4, r5, lr}
 8018aee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8018af2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8018af6:	ea94 0f05 	teq	r4, r5
 8018afa:	bf08      	it	eq
 8018afc:	ea90 0f02 	teqeq	r0, r2
 8018b00:	bf1f      	itttt	ne
 8018b02:	ea54 0c00 	orrsne.w	ip, r4, r0
 8018b06:	ea55 0c02 	orrsne.w	ip, r5, r2
 8018b0a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8018b0e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8018b12:	f000 80e2 	beq.w	8018cda <__adddf3+0x1ee>
 8018b16:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8018b1a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8018b1e:	bfb8      	it	lt
 8018b20:	426d      	neglt	r5, r5
 8018b22:	dd0c      	ble.n	8018b3e <__adddf3+0x52>
 8018b24:	442c      	add	r4, r5
 8018b26:	ea80 0202 	eor.w	r2, r0, r2
 8018b2a:	ea81 0303 	eor.w	r3, r1, r3
 8018b2e:	ea82 0000 	eor.w	r0, r2, r0
 8018b32:	ea83 0101 	eor.w	r1, r3, r1
 8018b36:	ea80 0202 	eor.w	r2, r0, r2
 8018b3a:	ea81 0303 	eor.w	r3, r1, r3
 8018b3e:	2d36      	cmp	r5, #54	; 0x36
 8018b40:	bf88      	it	hi
 8018b42:	bd30      	pophi	{r4, r5, pc}
 8018b44:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8018b48:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8018b4c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8018b50:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8018b54:	d002      	beq.n	8018b5c <__adddf3+0x70>
 8018b56:	4240      	negs	r0, r0
 8018b58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8018b5c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8018b60:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8018b64:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8018b68:	d002      	beq.n	8018b70 <__adddf3+0x84>
 8018b6a:	4252      	negs	r2, r2
 8018b6c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8018b70:	ea94 0f05 	teq	r4, r5
 8018b74:	f000 80a7 	beq.w	8018cc6 <__adddf3+0x1da>
 8018b78:	f1a4 0401 	sub.w	r4, r4, #1
 8018b7c:	f1d5 0e20 	rsbs	lr, r5, #32
 8018b80:	db0d      	blt.n	8018b9e <__adddf3+0xb2>
 8018b82:	fa02 fc0e 	lsl.w	ip, r2, lr
 8018b86:	fa22 f205 	lsr.w	r2, r2, r5
 8018b8a:	1880      	adds	r0, r0, r2
 8018b8c:	f141 0100 	adc.w	r1, r1, #0
 8018b90:	fa03 f20e 	lsl.w	r2, r3, lr
 8018b94:	1880      	adds	r0, r0, r2
 8018b96:	fa43 f305 	asr.w	r3, r3, r5
 8018b9a:	4159      	adcs	r1, r3
 8018b9c:	e00e      	b.n	8018bbc <__adddf3+0xd0>
 8018b9e:	f1a5 0520 	sub.w	r5, r5, #32
 8018ba2:	f10e 0e20 	add.w	lr, lr, #32
 8018ba6:	2a01      	cmp	r2, #1
 8018ba8:	fa03 fc0e 	lsl.w	ip, r3, lr
 8018bac:	bf28      	it	cs
 8018bae:	f04c 0c02 	orrcs.w	ip, ip, #2
 8018bb2:	fa43 f305 	asr.w	r3, r3, r5
 8018bb6:	18c0      	adds	r0, r0, r3
 8018bb8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8018bbc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8018bc0:	d507      	bpl.n	8018bd2 <__adddf3+0xe6>
 8018bc2:	f04f 0e00 	mov.w	lr, #0
 8018bc6:	f1dc 0c00 	rsbs	ip, ip, #0
 8018bca:	eb7e 0000 	sbcs.w	r0, lr, r0
 8018bce:	eb6e 0101 	sbc.w	r1, lr, r1
 8018bd2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8018bd6:	d31b      	bcc.n	8018c10 <__adddf3+0x124>
 8018bd8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8018bdc:	d30c      	bcc.n	8018bf8 <__adddf3+0x10c>
 8018bde:	0849      	lsrs	r1, r1, #1
 8018be0:	ea5f 0030 	movs.w	r0, r0, rrx
 8018be4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8018be8:	f104 0401 	add.w	r4, r4, #1
 8018bec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8018bf0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8018bf4:	f080 809a 	bcs.w	8018d2c <__adddf3+0x240>
 8018bf8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8018bfc:	bf08      	it	eq
 8018bfe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8018c02:	f150 0000 	adcs.w	r0, r0, #0
 8018c06:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8018c0a:	ea41 0105 	orr.w	r1, r1, r5
 8018c0e:	bd30      	pop	{r4, r5, pc}
 8018c10:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8018c14:	4140      	adcs	r0, r0
 8018c16:	eb41 0101 	adc.w	r1, r1, r1
 8018c1a:	3c01      	subs	r4, #1
 8018c1c:	bf28      	it	cs
 8018c1e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8018c22:	d2e9      	bcs.n	8018bf8 <__adddf3+0x10c>
 8018c24:	f091 0f00 	teq	r1, #0
 8018c28:	bf04      	itt	eq
 8018c2a:	4601      	moveq	r1, r0
 8018c2c:	2000      	moveq	r0, #0
 8018c2e:	fab1 f381 	clz	r3, r1
 8018c32:	bf08      	it	eq
 8018c34:	3320      	addeq	r3, #32
 8018c36:	f1a3 030b 	sub.w	r3, r3, #11
 8018c3a:	f1b3 0220 	subs.w	r2, r3, #32
 8018c3e:	da0c      	bge.n	8018c5a <__adddf3+0x16e>
 8018c40:	320c      	adds	r2, #12
 8018c42:	dd08      	ble.n	8018c56 <__adddf3+0x16a>
 8018c44:	f102 0c14 	add.w	ip, r2, #20
 8018c48:	f1c2 020c 	rsb	r2, r2, #12
 8018c4c:	fa01 f00c 	lsl.w	r0, r1, ip
 8018c50:	fa21 f102 	lsr.w	r1, r1, r2
 8018c54:	e00c      	b.n	8018c70 <__adddf3+0x184>
 8018c56:	f102 0214 	add.w	r2, r2, #20
 8018c5a:	bfd8      	it	le
 8018c5c:	f1c2 0c20 	rsble	ip, r2, #32
 8018c60:	fa01 f102 	lsl.w	r1, r1, r2
 8018c64:	fa20 fc0c 	lsr.w	ip, r0, ip
 8018c68:	bfdc      	itt	le
 8018c6a:	ea41 010c 	orrle.w	r1, r1, ip
 8018c6e:	4090      	lslle	r0, r2
 8018c70:	1ae4      	subs	r4, r4, r3
 8018c72:	bfa2      	ittt	ge
 8018c74:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8018c78:	4329      	orrge	r1, r5
 8018c7a:	bd30      	popge	{r4, r5, pc}
 8018c7c:	ea6f 0404 	mvn.w	r4, r4
 8018c80:	3c1f      	subs	r4, #31
 8018c82:	da1c      	bge.n	8018cbe <__adddf3+0x1d2>
 8018c84:	340c      	adds	r4, #12
 8018c86:	dc0e      	bgt.n	8018ca6 <__adddf3+0x1ba>
 8018c88:	f104 0414 	add.w	r4, r4, #20
 8018c8c:	f1c4 0220 	rsb	r2, r4, #32
 8018c90:	fa20 f004 	lsr.w	r0, r0, r4
 8018c94:	fa01 f302 	lsl.w	r3, r1, r2
 8018c98:	ea40 0003 	orr.w	r0, r0, r3
 8018c9c:	fa21 f304 	lsr.w	r3, r1, r4
 8018ca0:	ea45 0103 	orr.w	r1, r5, r3
 8018ca4:	bd30      	pop	{r4, r5, pc}
 8018ca6:	f1c4 040c 	rsb	r4, r4, #12
 8018caa:	f1c4 0220 	rsb	r2, r4, #32
 8018cae:	fa20 f002 	lsr.w	r0, r0, r2
 8018cb2:	fa01 f304 	lsl.w	r3, r1, r4
 8018cb6:	ea40 0003 	orr.w	r0, r0, r3
 8018cba:	4629      	mov	r1, r5
 8018cbc:	bd30      	pop	{r4, r5, pc}
 8018cbe:	fa21 f004 	lsr.w	r0, r1, r4
 8018cc2:	4629      	mov	r1, r5
 8018cc4:	bd30      	pop	{r4, r5, pc}
 8018cc6:	f094 0f00 	teq	r4, #0
 8018cca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8018cce:	bf06      	itte	eq
 8018cd0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8018cd4:	3401      	addeq	r4, #1
 8018cd6:	3d01      	subne	r5, #1
 8018cd8:	e74e      	b.n	8018b78 <__adddf3+0x8c>
 8018cda:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8018cde:	bf18      	it	ne
 8018ce0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8018ce4:	d029      	beq.n	8018d3a <__adddf3+0x24e>
 8018ce6:	ea94 0f05 	teq	r4, r5
 8018cea:	bf08      	it	eq
 8018cec:	ea90 0f02 	teqeq	r0, r2
 8018cf0:	d005      	beq.n	8018cfe <__adddf3+0x212>
 8018cf2:	ea54 0c00 	orrs.w	ip, r4, r0
 8018cf6:	bf04      	itt	eq
 8018cf8:	4619      	moveq	r1, r3
 8018cfa:	4610      	moveq	r0, r2
 8018cfc:	bd30      	pop	{r4, r5, pc}
 8018cfe:	ea91 0f03 	teq	r1, r3
 8018d02:	bf1e      	ittt	ne
 8018d04:	2100      	movne	r1, #0
 8018d06:	2000      	movne	r0, #0
 8018d08:	bd30      	popne	{r4, r5, pc}
 8018d0a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8018d0e:	d105      	bne.n	8018d1c <__adddf3+0x230>
 8018d10:	0040      	lsls	r0, r0, #1
 8018d12:	4149      	adcs	r1, r1
 8018d14:	bf28      	it	cs
 8018d16:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8018d1a:	bd30      	pop	{r4, r5, pc}
 8018d1c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8018d20:	bf3c      	itt	cc
 8018d22:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8018d26:	bd30      	popcc	{r4, r5, pc}
 8018d28:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8018d2c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8018d30:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8018d34:	f04f 0000 	mov.w	r0, #0
 8018d38:	bd30      	pop	{r4, r5, pc}
 8018d3a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8018d3e:	bf1a      	itte	ne
 8018d40:	4619      	movne	r1, r3
 8018d42:	4610      	movne	r0, r2
 8018d44:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8018d48:	bf1c      	itt	ne
 8018d4a:	460b      	movne	r3, r1
 8018d4c:	4602      	movne	r2, r0
 8018d4e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8018d52:	bf06      	itte	eq
 8018d54:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8018d58:	ea91 0f03 	teqeq	r1, r3
 8018d5c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8018d60:	bd30      	pop	{r4, r5, pc}
 8018d62:	bf00      	nop

08018d64 <__aeabi_ui2d>:
 8018d64:	f090 0f00 	teq	r0, #0
 8018d68:	bf04      	itt	eq
 8018d6a:	2100      	moveq	r1, #0
 8018d6c:	4770      	bxeq	lr
 8018d6e:	b530      	push	{r4, r5, lr}
 8018d70:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8018d74:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8018d78:	f04f 0500 	mov.w	r5, #0
 8018d7c:	f04f 0100 	mov.w	r1, #0
 8018d80:	e750      	b.n	8018c24 <__adddf3+0x138>
 8018d82:	bf00      	nop

08018d84 <__aeabi_i2d>:
 8018d84:	f090 0f00 	teq	r0, #0
 8018d88:	bf04      	itt	eq
 8018d8a:	2100      	moveq	r1, #0
 8018d8c:	4770      	bxeq	lr
 8018d8e:	b530      	push	{r4, r5, lr}
 8018d90:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8018d94:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8018d98:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8018d9c:	bf48      	it	mi
 8018d9e:	4240      	negmi	r0, r0
 8018da0:	f04f 0100 	mov.w	r1, #0
 8018da4:	e73e      	b.n	8018c24 <__adddf3+0x138>
 8018da6:	bf00      	nop

08018da8 <__aeabi_f2d>:
 8018da8:	0042      	lsls	r2, r0, #1
 8018daa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8018dae:	ea4f 0131 	mov.w	r1, r1, rrx
 8018db2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8018db6:	bf1f      	itttt	ne
 8018db8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8018dbc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8018dc0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8018dc4:	4770      	bxne	lr
 8018dc6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8018dca:	bf08      	it	eq
 8018dcc:	4770      	bxeq	lr
 8018dce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8018dd2:	bf04      	itt	eq
 8018dd4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8018dd8:	4770      	bxeq	lr
 8018dda:	b530      	push	{r4, r5, lr}
 8018ddc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8018de0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8018de4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8018de8:	e71c      	b.n	8018c24 <__adddf3+0x138>
 8018dea:	bf00      	nop

08018dec <__aeabi_ul2d>:
 8018dec:	ea50 0201 	orrs.w	r2, r0, r1
 8018df0:	bf08      	it	eq
 8018df2:	4770      	bxeq	lr
 8018df4:	b530      	push	{r4, r5, lr}
 8018df6:	f04f 0500 	mov.w	r5, #0
 8018dfa:	e00a      	b.n	8018e12 <__aeabi_l2d+0x16>

08018dfc <__aeabi_l2d>:
 8018dfc:	ea50 0201 	orrs.w	r2, r0, r1
 8018e00:	bf08      	it	eq
 8018e02:	4770      	bxeq	lr
 8018e04:	b530      	push	{r4, r5, lr}
 8018e06:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8018e0a:	d502      	bpl.n	8018e12 <__aeabi_l2d+0x16>
 8018e0c:	4240      	negs	r0, r0
 8018e0e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8018e12:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8018e16:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8018e1a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8018e1e:	f43f aed8 	beq.w	8018bd2 <__adddf3+0xe6>
 8018e22:	f04f 0203 	mov.w	r2, #3
 8018e26:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8018e2a:	bf18      	it	ne
 8018e2c:	3203      	addne	r2, #3
 8018e2e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8018e32:	bf18      	it	ne
 8018e34:	3203      	addne	r2, #3
 8018e36:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8018e3a:	f1c2 0320 	rsb	r3, r2, #32
 8018e3e:	fa00 fc03 	lsl.w	ip, r0, r3
 8018e42:	fa20 f002 	lsr.w	r0, r0, r2
 8018e46:	fa01 fe03 	lsl.w	lr, r1, r3
 8018e4a:	ea40 000e 	orr.w	r0, r0, lr
 8018e4e:	fa21 f102 	lsr.w	r1, r1, r2
 8018e52:	4414      	add	r4, r2
 8018e54:	e6bd      	b.n	8018bd2 <__adddf3+0xe6>
 8018e56:	bf00      	nop

08018e58 <__aeabi_dmul>:
 8018e58:	b570      	push	{r4, r5, r6, lr}
 8018e5a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8018e5e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8018e62:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8018e66:	bf1d      	ittte	ne
 8018e68:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8018e6c:	ea94 0f0c 	teqne	r4, ip
 8018e70:	ea95 0f0c 	teqne	r5, ip
 8018e74:	f000 f8de 	bleq	8019034 <__aeabi_dmul+0x1dc>
 8018e78:	442c      	add	r4, r5
 8018e7a:	ea81 0603 	eor.w	r6, r1, r3
 8018e7e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8018e82:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8018e86:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8018e8a:	bf18      	it	ne
 8018e8c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8018e90:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8018e94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018e98:	d038      	beq.n	8018f0c <__aeabi_dmul+0xb4>
 8018e9a:	fba0 ce02 	umull	ip, lr, r0, r2
 8018e9e:	f04f 0500 	mov.w	r5, #0
 8018ea2:	fbe1 e502 	umlal	lr, r5, r1, r2
 8018ea6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8018eaa:	fbe0 e503 	umlal	lr, r5, r0, r3
 8018eae:	f04f 0600 	mov.w	r6, #0
 8018eb2:	fbe1 5603 	umlal	r5, r6, r1, r3
 8018eb6:	f09c 0f00 	teq	ip, #0
 8018eba:	bf18      	it	ne
 8018ebc:	f04e 0e01 	orrne.w	lr, lr, #1
 8018ec0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8018ec4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8018ec8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8018ecc:	d204      	bcs.n	8018ed8 <__aeabi_dmul+0x80>
 8018ece:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8018ed2:	416d      	adcs	r5, r5
 8018ed4:	eb46 0606 	adc.w	r6, r6, r6
 8018ed8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8018edc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8018ee0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8018ee4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8018ee8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8018eec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8018ef0:	bf88      	it	hi
 8018ef2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8018ef6:	d81e      	bhi.n	8018f36 <__aeabi_dmul+0xde>
 8018ef8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8018efc:	bf08      	it	eq
 8018efe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8018f02:	f150 0000 	adcs.w	r0, r0, #0
 8018f06:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8018f0a:	bd70      	pop	{r4, r5, r6, pc}
 8018f0c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8018f10:	ea46 0101 	orr.w	r1, r6, r1
 8018f14:	ea40 0002 	orr.w	r0, r0, r2
 8018f18:	ea81 0103 	eor.w	r1, r1, r3
 8018f1c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8018f20:	bfc2      	ittt	gt
 8018f22:	ebd4 050c 	rsbsgt	r5, r4, ip
 8018f26:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8018f2a:	bd70      	popgt	{r4, r5, r6, pc}
 8018f2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8018f30:	f04f 0e00 	mov.w	lr, #0
 8018f34:	3c01      	subs	r4, #1
 8018f36:	f300 80ab 	bgt.w	8019090 <__aeabi_dmul+0x238>
 8018f3a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8018f3e:	bfde      	ittt	le
 8018f40:	2000      	movle	r0, #0
 8018f42:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8018f46:	bd70      	pople	{r4, r5, r6, pc}
 8018f48:	f1c4 0400 	rsb	r4, r4, #0
 8018f4c:	3c20      	subs	r4, #32
 8018f4e:	da35      	bge.n	8018fbc <__aeabi_dmul+0x164>
 8018f50:	340c      	adds	r4, #12
 8018f52:	dc1b      	bgt.n	8018f8c <__aeabi_dmul+0x134>
 8018f54:	f104 0414 	add.w	r4, r4, #20
 8018f58:	f1c4 0520 	rsb	r5, r4, #32
 8018f5c:	fa00 f305 	lsl.w	r3, r0, r5
 8018f60:	fa20 f004 	lsr.w	r0, r0, r4
 8018f64:	fa01 f205 	lsl.w	r2, r1, r5
 8018f68:	ea40 0002 	orr.w	r0, r0, r2
 8018f6c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8018f70:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8018f74:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8018f78:	fa21 f604 	lsr.w	r6, r1, r4
 8018f7c:	eb42 0106 	adc.w	r1, r2, r6
 8018f80:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8018f84:	bf08      	it	eq
 8018f86:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8018f8a:	bd70      	pop	{r4, r5, r6, pc}
 8018f8c:	f1c4 040c 	rsb	r4, r4, #12
 8018f90:	f1c4 0520 	rsb	r5, r4, #32
 8018f94:	fa00 f304 	lsl.w	r3, r0, r4
 8018f98:	fa20 f005 	lsr.w	r0, r0, r5
 8018f9c:	fa01 f204 	lsl.w	r2, r1, r4
 8018fa0:	ea40 0002 	orr.w	r0, r0, r2
 8018fa4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8018fa8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8018fac:	f141 0100 	adc.w	r1, r1, #0
 8018fb0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8018fb4:	bf08      	it	eq
 8018fb6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8018fba:	bd70      	pop	{r4, r5, r6, pc}
 8018fbc:	f1c4 0520 	rsb	r5, r4, #32
 8018fc0:	fa00 f205 	lsl.w	r2, r0, r5
 8018fc4:	ea4e 0e02 	orr.w	lr, lr, r2
 8018fc8:	fa20 f304 	lsr.w	r3, r0, r4
 8018fcc:	fa01 f205 	lsl.w	r2, r1, r5
 8018fd0:	ea43 0302 	orr.w	r3, r3, r2
 8018fd4:	fa21 f004 	lsr.w	r0, r1, r4
 8018fd8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8018fdc:	fa21 f204 	lsr.w	r2, r1, r4
 8018fe0:	ea20 0002 	bic.w	r0, r0, r2
 8018fe4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8018fe8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8018fec:	bf08      	it	eq
 8018fee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8018ff2:	bd70      	pop	{r4, r5, r6, pc}
 8018ff4:	f094 0f00 	teq	r4, #0
 8018ff8:	d10f      	bne.n	801901a <__aeabi_dmul+0x1c2>
 8018ffa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8018ffe:	0040      	lsls	r0, r0, #1
 8019000:	eb41 0101 	adc.w	r1, r1, r1
 8019004:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8019008:	bf08      	it	eq
 801900a:	3c01      	subeq	r4, #1
 801900c:	d0f7      	beq.n	8018ffe <__aeabi_dmul+0x1a6>
 801900e:	ea41 0106 	orr.w	r1, r1, r6
 8019012:	f095 0f00 	teq	r5, #0
 8019016:	bf18      	it	ne
 8019018:	4770      	bxne	lr
 801901a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 801901e:	0052      	lsls	r2, r2, #1
 8019020:	eb43 0303 	adc.w	r3, r3, r3
 8019024:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8019028:	bf08      	it	eq
 801902a:	3d01      	subeq	r5, #1
 801902c:	d0f7      	beq.n	801901e <__aeabi_dmul+0x1c6>
 801902e:	ea43 0306 	orr.w	r3, r3, r6
 8019032:	4770      	bx	lr
 8019034:	ea94 0f0c 	teq	r4, ip
 8019038:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 801903c:	bf18      	it	ne
 801903e:	ea95 0f0c 	teqne	r5, ip
 8019042:	d00c      	beq.n	801905e <__aeabi_dmul+0x206>
 8019044:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8019048:	bf18      	it	ne
 801904a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801904e:	d1d1      	bne.n	8018ff4 <__aeabi_dmul+0x19c>
 8019050:	ea81 0103 	eor.w	r1, r1, r3
 8019054:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8019058:	f04f 0000 	mov.w	r0, #0
 801905c:	bd70      	pop	{r4, r5, r6, pc}
 801905e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8019062:	bf06      	itte	eq
 8019064:	4610      	moveq	r0, r2
 8019066:	4619      	moveq	r1, r3
 8019068:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801906c:	d019      	beq.n	80190a2 <__aeabi_dmul+0x24a>
 801906e:	ea94 0f0c 	teq	r4, ip
 8019072:	d102      	bne.n	801907a <__aeabi_dmul+0x222>
 8019074:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8019078:	d113      	bne.n	80190a2 <__aeabi_dmul+0x24a>
 801907a:	ea95 0f0c 	teq	r5, ip
 801907e:	d105      	bne.n	801908c <__aeabi_dmul+0x234>
 8019080:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8019084:	bf1c      	itt	ne
 8019086:	4610      	movne	r0, r2
 8019088:	4619      	movne	r1, r3
 801908a:	d10a      	bne.n	80190a2 <__aeabi_dmul+0x24a>
 801908c:	ea81 0103 	eor.w	r1, r1, r3
 8019090:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8019094:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8019098:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801909c:	f04f 0000 	mov.w	r0, #0
 80190a0:	bd70      	pop	{r4, r5, r6, pc}
 80190a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80190a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80190aa:	bd70      	pop	{r4, r5, r6, pc}

080190ac <__aeabi_ddiv>:
 80190ac:	b570      	push	{r4, r5, r6, lr}
 80190ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80190b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80190b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80190ba:	bf1d      	ittte	ne
 80190bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80190c0:	ea94 0f0c 	teqne	r4, ip
 80190c4:	ea95 0f0c 	teqne	r5, ip
 80190c8:	f000 f8a7 	bleq	801921a <__aeabi_ddiv+0x16e>
 80190cc:	eba4 0405 	sub.w	r4, r4, r5
 80190d0:	ea81 0e03 	eor.w	lr, r1, r3
 80190d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80190d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80190dc:	f000 8088 	beq.w	80191f0 <__aeabi_ddiv+0x144>
 80190e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80190e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80190e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80190ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80190f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80190f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80190f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80190fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8019100:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8019104:	429d      	cmp	r5, r3
 8019106:	bf08      	it	eq
 8019108:	4296      	cmpeq	r6, r2
 801910a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 801910e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8019112:	d202      	bcs.n	801911a <__aeabi_ddiv+0x6e>
 8019114:	085b      	lsrs	r3, r3, #1
 8019116:	ea4f 0232 	mov.w	r2, r2, rrx
 801911a:	1ab6      	subs	r6, r6, r2
 801911c:	eb65 0503 	sbc.w	r5, r5, r3
 8019120:	085b      	lsrs	r3, r3, #1
 8019122:	ea4f 0232 	mov.w	r2, r2, rrx
 8019126:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 801912a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 801912e:	ebb6 0e02 	subs.w	lr, r6, r2
 8019132:	eb75 0e03 	sbcs.w	lr, r5, r3
 8019136:	bf22      	ittt	cs
 8019138:	1ab6      	subcs	r6, r6, r2
 801913a:	4675      	movcs	r5, lr
 801913c:	ea40 000c 	orrcs.w	r0, r0, ip
 8019140:	085b      	lsrs	r3, r3, #1
 8019142:	ea4f 0232 	mov.w	r2, r2, rrx
 8019146:	ebb6 0e02 	subs.w	lr, r6, r2
 801914a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801914e:	bf22      	ittt	cs
 8019150:	1ab6      	subcs	r6, r6, r2
 8019152:	4675      	movcs	r5, lr
 8019154:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8019158:	085b      	lsrs	r3, r3, #1
 801915a:	ea4f 0232 	mov.w	r2, r2, rrx
 801915e:	ebb6 0e02 	subs.w	lr, r6, r2
 8019162:	eb75 0e03 	sbcs.w	lr, r5, r3
 8019166:	bf22      	ittt	cs
 8019168:	1ab6      	subcs	r6, r6, r2
 801916a:	4675      	movcs	r5, lr
 801916c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8019170:	085b      	lsrs	r3, r3, #1
 8019172:	ea4f 0232 	mov.w	r2, r2, rrx
 8019176:	ebb6 0e02 	subs.w	lr, r6, r2
 801917a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801917e:	bf22      	ittt	cs
 8019180:	1ab6      	subcs	r6, r6, r2
 8019182:	4675      	movcs	r5, lr
 8019184:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8019188:	ea55 0e06 	orrs.w	lr, r5, r6
 801918c:	d018      	beq.n	80191c0 <__aeabi_ddiv+0x114>
 801918e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8019192:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8019196:	ea4f 1606 	mov.w	r6, r6, lsl #4
 801919a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801919e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80191a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80191a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80191aa:	d1c0      	bne.n	801912e <__aeabi_ddiv+0x82>
 80191ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80191b0:	d10b      	bne.n	80191ca <__aeabi_ddiv+0x11e>
 80191b2:	ea41 0100 	orr.w	r1, r1, r0
 80191b6:	f04f 0000 	mov.w	r0, #0
 80191ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80191be:	e7b6      	b.n	801912e <__aeabi_ddiv+0x82>
 80191c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80191c4:	bf04      	itt	eq
 80191c6:	4301      	orreq	r1, r0
 80191c8:	2000      	moveq	r0, #0
 80191ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80191ce:	bf88      	it	hi
 80191d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80191d4:	f63f aeaf 	bhi.w	8018f36 <__aeabi_dmul+0xde>
 80191d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80191dc:	bf04      	itt	eq
 80191de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80191e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80191e6:	f150 0000 	adcs.w	r0, r0, #0
 80191ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80191ee:	bd70      	pop	{r4, r5, r6, pc}
 80191f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80191f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80191f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80191fc:	bfc2      	ittt	gt
 80191fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8019202:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8019206:	bd70      	popgt	{r4, r5, r6, pc}
 8019208:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801920c:	f04f 0e00 	mov.w	lr, #0
 8019210:	3c01      	subs	r4, #1
 8019212:	e690      	b.n	8018f36 <__aeabi_dmul+0xde>
 8019214:	ea45 0e06 	orr.w	lr, r5, r6
 8019218:	e68d      	b.n	8018f36 <__aeabi_dmul+0xde>
 801921a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 801921e:	ea94 0f0c 	teq	r4, ip
 8019222:	bf08      	it	eq
 8019224:	ea95 0f0c 	teqeq	r5, ip
 8019228:	f43f af3b 	beq.w	80190a2 <__aeabi_dmul+0x24a>
 801922c:	ea94 0f0c 	teq	r4, ip
 8019230:	d10a      	bne.n	8019248 <__aeabi_ddiv+0x19c>
 8019232:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8019236:	f47f af34 	bne.w	80190a2 <__aeabi_dmul+0x24a>
 801923a:	ea95 0f0c 	teq	r5, ip
 801923e:	f47f af25 	bne.w	801908c <__aeabi_dmul+0x234>
 8019242:	4610      	mov	r0, r2
 8019244:	4619      	mov	r1, r3
 8019246:	e72c      	b.n	80190a2 <__aeabi_dmul+0x24a>
 8019248:	ea95 0f0c 	teq	r5, ip
 801924c:	d106      	bne.n	801925c <__aeabi_ddiv+0x1b0>
 801924e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8019252:	f43f aefd 	beq.w	8019050 <__aeabi_dmul+0x1f8>
 8019256:	4610      	mov	r0, r2
 8019258:	4619      	mov	r1, r3
 801925a:	e722      	b.n	80190a2 <__aeabi_dmul+0x24a>
 801925c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8019260:	bf18      	it	ne
 8019262:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8019266:	f47f aec5 	bne.w	8018ff4 <__aeabi_dmul+0x19c>
 801926a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 801926e:	f47f af0d 	bne.w	801908c <__aeabi_dmul+0x234>
 8019272:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8019276:	f47f aeeb 	bne.w	8019050 <__aeabi_dmul+0x1f8>
 801927a:	e712      	b.n	80190a2 <__aeabi_dmul+0x24a>

0801927c <__gedf2>:
 801927c:	f04f 3cff 	mov.w	ip, #4294967295
 8019280:	e006      	b.n	8019290 <__cmpdf2+0x4>
 8019282:	bf00      	nop

08019284 <__ledf2>:
 8019284:	f04f 0c01 	mov.w	ip, #1
 8019288:	e002      	b.n	8019290 <__cmpdf2+0x4>
 801928a:	bf00      	nop

0801928c <__cmpdf2>:
 801928c:	f04f 0c01 	mov.w	ip, #1
 8019290:	f84d cd04 	str.w	ip, [sp, #-4]!
 8019294:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8019298:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 801929c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80192a0:	bf18      	it	ne
 80192a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80192a6:	d01b      	beq.n	80192e0 <__cmpdf2+0x54>
 80192a8:	b001      	add	sp, #4
 80192aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80192ae:	bf0c      	ite	eq
 80192b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80192b4:	ea91 0f03 	teqne	r1, r3
 80192b8:	bf02      	ittt	eq
 80192ba:	ea90 0f02 	teqeq	r0, r2
 80192be:	2000      	moveq	r0, #0
 80192c0:	4770      	bxeq	lr
 80192c2:	f110 0f00 	cmn.w	r0, #0
 80192c6:	ea91 0f03 	teq	r1, r3
 80192ca:	bf58      	it	pl
 80192cc:	4299      	cmppl	r1, r3
 80192ce:	bf08      	it	eq
 80192d0:	4290      	cmpeq	r0, r2
 80192d2:	bf2c      	ite	cs
 80192d4:	17d8      	asrcs	r0, r3, #31
 80192d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80192da:	f040 0001 	orr.w	r0, r0, #1
 80192de:	4770      	bx	lr
 80192e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80192e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80192e8:	d102      	bne.n	80192f0 <__cmpdf2+0x64>
 80192ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80192ee:	d107      	bne.n	8019300 <__cmpdf2+0x74>
 80192f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80192f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80192f8:	d1d6      	bne.n	80192a8 <__cmpdf2+0x1c>
 80192fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80192fe:	d0d3      	beq.n	80192a8 <__cmpdf2+0x1c>
 8019300:	f85d 0b04 	ldr.w	r0, [sp], #4
 8019304:	4770      	bx	lr
 8019306:	bf00      	nop

08019308 <__aeabi_cdrcmple>:
 8019308:	4684      	mov	ip, r0
 801930a:	4610      	mov	r0, r2
 801930c:	4662      	mov	r2, ip
 801930e:	468c      	mov	ip, r1
 8019310:	4619      	mov	r1, r3
 8019312:	4663      	mov	r3, ip
 8019314:	e000      	b.n	8019318 <__aeabi_cdcmpeq>
 8019316:	bf00      	nop

08019318 <__aeabi_cdcmpeq>:
 8019318:	b501      	push	{r0, lr}
 801931a:	f7ff ffb7 	bl	801928c <__cmpdf2>
 801931e:	2800      	cmp	r0, #0
 8019320:	bf48      	it	mi
 8019322:	f110 0f00 	cmnmi.w	r0, #0
 8019326:	bd01      	pop	{r0, pc}

08019328 <__aeabi_dcmpeq>:
 8019328:	f84d ed08 	str.w	lr, [sp, #-8]!
 801932c:	f7ff fff4 	bl	8019318 <__aeabi_cdcmpeq>
 8019330:	bf0c      	ite	eq
 8019332:	2001      	moveq	r0, #1
 8019334:	2000      	movne	r0, #0
 8019336:	f85d fb08 	ldr.w	pc, [sp], #8
 801933a:	bf00      	nop

0801933c <__aeabi_dcmplt>:
 801933c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8019340:	f7ff ffea 	bl	8019318 <__aeabi_cdcmpeq>
 8019344:	bf34      	ite	cc
 8019346:	2001      	movcc	r0, #1
 8019348:	2000      	movcs	r0, #0
 801934a:	f85d fb08 	ldr.w	pc, [sp], #8
 801934e:	bf00      	nop

08019350 <__aeabi_dcmple>:
 8019350:	f84d ed08 	str.w	lr, [sp, #-8]!
 8019354:	f7ff ffe0 	bl	8019318 <__aeabi_cdcmpeq>
 8019358:	bf94      	ite	ls
 801935a:	2001      	movls	r0, #1
 801935c:	2000      	movhi	r0, #0
 801935e:	f85d fb08 	ldr.w	pc, [sp], #8
 8019362:	bf00      	nop

08019364 <__aeabi_dcmpge>:
 8019364:	f84d ed08 	str.w	lr, [sp, #-8]!
 8019368:	f7ff ffce 	bl	8019308 <__aeabi_cdrcmple>
 801936c:	bf94      	ite	ls
 801936e:	2001      	movls	r0, #1
 8019370:	2000      	movhi	r0, #0
 8019372:	f85d fb08 	ldr.w	pc, [sp], #8
 8019376:	bf00      	nop

08019378 <__aeabi_dcmpgt>:
 8019378:	f84d ed08 	str.w	lr, [sp, #-8]!
 801937c:	f7ff ffc4 	bl	8019308 <__aeabi_cdrcmple>
 8019380:	bf34      	ite	cc
 8019382:	2001      	movcc	r0, #1
 8019384:	2000      	movcs	r0, #0
 8019386:	f85d fb08 	ldr.w	pc, [sp], #8
 801938a:	bf00      	nop

0801938c <__aeabi_dcmpun>:
 801938c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8019390:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8019394:	d102      	bne.n	801939c <__aeabi_dcmpun+0x10>
 8019396:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 801939a:	d10a      	bne.n	80193b2 <__aeabi_dcmpun+0x26>
 801939c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80193a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80193a4:	d102      	bne.n	80193ac <__aeabi_dcmpun+0x20>
 80193a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80193aa:	d102      	bne.n	80193b2 <__aeabi_dcmpun+0x26>
 80193ac:	f04f 0000 	mov.w	r0, #0
 80193b0:	4770      	bx	lr
 80193b2:	f04f 0001 	mov.w	r0, #1
 80193b6:	4770      	bx	lr

080193b8 <__aeabi_d2iz>:
 80193b8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80193bc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80193c0:	d215      	bcs.n	80193ee <__aeabi_d2iz+0x36>
 80193c2:	d511      	bpl.n	80193e8 <__aeabi_d2iz+0x30>
 80193c4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80193c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80193cc:	d912      	bls.n	80193f4 <__aeabi_d2iz+0x3c>
 80193ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80193d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80193d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80193da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80193de:	fa23 f002 	lsr.w	r0, r3, r2
 80193e2:	bf18      	it	ne
 80193e4:	4240      	negne	r0, r0
 80193e6:	4770      	bx	lr
 80193e8:	f04f 0000 	mov.w	r0, #0
 80193ec:	4770      	bx	lr
 80193ee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80193f2:	d105      	bne.n	8019400 <__aeabi_d2iz+0x48>
 80193f4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80193f8:	bf08      	it	eq
 80193fa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80193fe:	4770      	bx	lr
 8019400:	f04f 0000 	mov.w	r0, #0
 8019404:	4770      	bx	lr
 8019406:	bf00      	nop

08019408 <__aeabi_d2uiz>:
 8019408:	004a      	lsls	r2, r1, #1
 801940a:	d211      	bcs.n	8019430 <__aeabi_d2uiz+0x28>
 801940c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8019410:	d211      	bcs.n	8019436 <__aeabi_d2uiz+0x2e>
 8019412:	d50d      	bpl.n	8019430 <__aeabi_d2uiz+0x28>
 8019414:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8019418:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 801941c:	d40e      	bmi.n	801943c <__aeabi_d2uiz+0x34>
 801941e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8019422:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8019426:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 801942a:	fa23 f002 	lsr.w	r0, r3, r2
 801942e:	4770      	bx	lr
 8019430:	f04f 0000 	mov.w	r0, #0
 8019434:	4770      	bx	lr
 8019436:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 801943a:	d102      	bne.n	8019442 <__aeabi_d2uiz+0x3a>
 801943c:	f04f 30ff 	mov.w	r0, #4294967295
 8019440:	4770      	bx	lr
 8019442:	f04f 0000 	mov.w	r0, #0
 8019446:	4770      	bx	lr

08019448 <__aeabi_d2f>:
 8019448:	ea4f 0241 	mov.w	r2, r1, lsl #1
 801944c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8019450:	bf24      	itt	cs
 8019452:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8019456:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 801945a:	d90d      	bls.n	8019478 <__aeabi_d2f+0x30>
 801945c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8019460:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8019464:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8019468:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 801946c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8019470:	bf08      	it	eq
 8019472:	f020 0001 	biceq.w	r0, r0, #1
 8019476:	4770      	bx	lr
 8019478:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 801947c:	d121      	bne.n	80194c2 <__aeabi_d2f+0x7a>
 801947e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8019482:	bfbc      	itt	lt
 8019484:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8019488:	4770      	bxlt	lr
 801948a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801948e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8019492:	f1c2 0218 	rsb	r2, r2, #24
 8019496:	f1c2 0c20 	rsb	ip, r2, #32
 801949a:	fa10 f30c 	lsls.w	r3, r0, ip
 801949e:	fa20 f002 	lsr.w	r0, r0, r2
 80194a2:	bf18      	it	ne
 80194a4:	f040 0001 	orrne.w	r0, r0, #1
 80194a8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80194ac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80194b0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80194b4:	ea40 000c 	orr.w	r0, r0, ip
 80194b8:	fa23 f302 	lsr.w	r3, r3, r2
 80194bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80194c0:	e7cc      	b.n	801945c <__aeabi_d2f+0x14>
 80194c2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80194c6:	d107      	bne.n	80194d8 <__aeabi_d2f+0x90>
 80194c8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80194cc:	bf1e      	ittt	ne
 80194ce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80194d2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80194d6:	4770      	bxne	lr
 80194d8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80194dc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80194e0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80194e4:	4770      	bx	lr
 80194e6:	bf00      	nop

080194e8 <__aeabi_d2lz>:
 80194e8:	b538      	push	{r3, r4, r5, lr}
 80194ea:	2200      	movs	r2, #0
 80194ec:	2300      	movs	r3, #0
 80194ee:	4604      	mov	r4, r0
 80194f0:	460d      	mov	r5, r1
 80194f2:	f7ff ff23 	bl	801933c <__aeabi_dcmplt>
 80194f6:	b928      	cbnz	r0, 8019504 <__aeabi_d2lz+0x1c>
 80194f8:	4620      	mov	r0, r4
 80194fa:	4629      	mov	r1, r5
 80194fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019500:	f000 b80a 	b.w	8019518 <__aeabi_d2ulz>
 8019504:	4620      	mov	r0, r4
 8019506:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 801950a:	f000 f805 	bl	8019518 <__aeabi_d2ulz>
 801950e:	4240      	negs	r0, r0
 8019510:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8019514:	bd38      	pop	{r3, r4, r5, pc}
 8019516:	bf00      	nop

08019518 <__aeabi_d2ulz>:
 8019518:	b5d0      	push	{r4, r6, r7, lr}
 801951a:	4b0c      	ldr	r3, [pc, #48]	; (801954c <__aeabi_d2ulz+0x34>)
 801951c:	2200      	movs	r2, #0
 801951e:	4606      	mov	r6, r0
 8019520:	460f      	mov	r7, r1
 8019522:	f7ff fc99 	bl	8018e58 <__aeabi_dmul>
 8019526:	f7ff ff6f 	bl	8019408 <__aeabi_d2uiz>
 801952a:	4604      	mov	r4, r0
 801952c:	f7ff fc1a 	bl	8018d64 <__aeabi_ui2d>
 8019530:	4b07      	ldr	r3, [pc, #28]	; (8019550 <__aeabi_d2ulz+0x38>)
 8019532:	2200      	movs	r2, #0
 8019534:	f7ff fc90 	bl	8018e58 <__aeabi_dmul>
 8019538:	4602      	mov	r2, r0
 801953a:	460b      	mov	r3, r1
 801953c:	4630      	mov	r0, r6
 801953e:	4639      	mov	r1, r7
 8019540:	f7ff fad2 	bl	8018ae8 <__aeabi_dsub>
 8019544:	f7ff ff60 	bl	8019408 <__aeabi_d2uiz>
 8019548:	4621      	mov	r1, r4
 801954a:	bdd0      	pop	{r4, r6, r7, pc}
 801954c:	3df00000 	.word	0x3df00000
 8019550:	41f00000 	.word	0x41f00000

08019554 <__aeabi_uldivmod>:
 8019554:	b953      	cbnz	r3, 801956c <__aeabi_uldivmod+0x18>
 8019556:	b94a      	cbnz	r2, 801956c <__aeabi_uldivmod+0x18>
 8019558:	2900      	cmp	r1, #0
 801955a:	bf08      	it	eq
 801955c:	2800      	cmpeq	r0, #0
 801955e:	bf1c      	itt	ne
 8019560:	f04f 31ff 	movne.w	r1, #4294967295
 8019564:	f04f 30ff 	movne.w	r0, #4294967295
 8019568:	f000 b974 	b.w	8019854 <__aeabi_idiv0>
 801956c:	f1ad 0c08 	sub.w	ip, sp, #8
 8019570:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8019574:	f000 f806 	bl	8019584 <__udivmoddi4>
 8019578:	f8dd e004 	ldr.w	lr, [sp, #4]
 801957c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019580:	b004      	add	sp, #16
 8019582:	4770      	bx	lr

08019584 <__udivmoddi4>:
 8019584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019588:	9d08      	ldr	r5, [sp, #32]
 801958a:	4604      	mov	r4, r0
 801958c:	468e      	mov	lr, r1
 801958e:	2b00      	cmp	r3, #0
 8019590:	d14d      	bne.n	801962e <__udivmoddi4+0xaa>
 8019592:	428a      	cmp	r2, r1
 8019594:	4694      	mov	ip, r2
 8019596:	d969      	bls.n	801966c <__udivmoddi4+0xe8>
 8019598:	fab2 f282 	clz	r2, r2
 801959c:	b152      	cbz	r2, 80195b4 <__udivmoddi4+0x30>
 801959e:	fa01 f302 	lsl.w	r3, r1, r2
 80195a2:	f1c2 0120 	rsb	r1, r2, #32
 80195a6:	fa20 f101 	lsr.w	r1, r0, r1
 80195aa:	fa0c fc02 	lsl.w	ip, ip, r2
 80195ae:	ea41 0e03 	orr.w	lr, r1, r3
 80195b2:	4094      	lsls	r4, r2
 80195b4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80195b8:	0c21      	lsrs	r1, r4, #16
 80195ba:	fbbe f6f8 	udiv	r6, lr, r8
 80195be:	fa1f f78c 	uxth.w	r7, ip
 80195c2:	fb08 e316 	mls	r3, r8, r6, lr
 80195c6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80195ca:	fb06 f107 	mul.w	r1, r6, r7
 80195ce:	4299      	cmp	r1, r3
 80195d0:	d90a      	bls.n	80195e8 <__udivmoddi4+0x64>
 80195d2:	eb1c 0303 	adds.w	r3, ip, r3
 80195d6:	f106 30ff 	add.w	r0, r6, #4294967295
 80195da:	f080 811f 	bcs.w	801981c <__udivmoddi4+0x298>
 80195de:	4299      	cmp	r1, r3
 80195e0:	f240 811c 	bls.w	801981c <__udivmoddi4+0x298>
 80195e4:	3e02      	subs	r6, #2
 80195e6:	4463      	add	r3, ip
 80195e8:	1a5b      	subs	r3, r3, r1
 80195ea:	b2a4      	uxth	r4, r4
 80195ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80195f0:	fb08 3310 	mls	r3, r8, r0, r3
 80195f4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80195f8:	fb00 f707 	mul.w	r7, r0, r7
 80195fc:	42a7      	cmp	r7, r4
 80195fe:	d90a      	bls.n	8019616 <__udivmoddi4+0x92>
 8019600:	eb1c 0404 	adds.w	r4, ip, r4
 8019604:	f100 33ff 	add.w	r3, r0, #4294967295
 8019608:	f080 810a 	bcs.w	8019820 <__udivmoddi4+0x29c>
 801960c:	42a7      	cmp	r7, r4
 801960e:	f240 8107 	bls.w	8019820 <__udivmoddi4+0x29c>
 8019612:	4464      	add	r4, ip
 8019614:	3802      	subs	r0, #2
 8019616:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 801961a:	1be4      	subs	r4, r4, r7
 801961c:	2600      	movs	r6, #0
 801961e:	b11d      	cbz	r5, 8019628 <__udivmoddi4+0xa4>
 8019620:	40d4      	lsrs	r4, r2
 8019622:	2300      	movs	r3, #0
 8019624:	e9c5 4300 	strd	r4, r3, [r5]
 8019628:	4631      	mov	r1, r6
 801962a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801962e:	428b      	cmp	r3, r1
 8019630:	d909      	bls.n	8019646 <__udivmoddi4+0xc2>
 8019632:	2d00      	cmp	r5, #0
 8019634:	f000 80ef 	beq.w	8019816 <__udivmoddi4+0x292>
 8019638:	2600      	movs	r6, #0
 801963a:	e9c5 0100 	strd	r0, r1, [r5]
 801963e:	4630      	mov	r0, r6
 8019640:	4631      	mov	r1, r6
 8019642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019646:	fab3 f683 	clz	r6, r3
 801964a:	2e00      	cmp	r6, #0
 801964c:	d14a      	bne.n	80196e4 <__udivmoddi4+0x160>
 801964e:	428b      	cmp	r3, r1
 8019650:	d302      	bcc.n	8019658 <__udivmoddi4+0xd4>
 8019652:	4282      	cmp	r2, r0
 8019654:	f200 80f9 	bhi.w	801984a <__udivmoddi4+0x2c6>
 8019658:	1a84      	subs	r4, r0, r2
 801965a:	eb61 0303 	sbc.w	r3, r1, r3
 801965e:	2001      	movs	r0, #1
 8019660:	469e      	mov	lr, r3
 8019662:	2d00      	cmp	r5, #0
 8019664:	d0e0      	beq.n	8019628 <__udivmoddi4+0xa4>
 8019666:	e9c5 4e00 	strd	r4, lr, [r5]
 801966a:	e7dd      	b.n	8019628 <__udivmoddi4+0xa4>
 801966c:	b902      	cbnz	r2, 8019670 <__udivmoddi4+0xec>
 801966e:	deff      	udf	#255	; 0xff
 8019670:	fab2 f282 	clz	r2, r2
 8019674:	2a00      	cmp	r2, #0
 8019676:	f040 8092 	bne.w	801979e <__udivmoddi4+0x21a>
 801967a:	eba1 010c 	sub.w	r1, r1, ip
 801967e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8019682:	fa1f fe8c 	uxth.w	lr, ip
 8019686:	2601      	movs	r6, #1
 8019688:	0c20      	lsrs	r0, r4, #16
 801968a:	fbb1 f3f7 	udiv	r3, r1, r7
 801968e:	fb07 1113 	mls	r1, r7, r3, r1
 8019692:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8019696:	fb0e f003 	mul.w	r0, lr, r3
 801969a:	4288      	cmp	r0, r1
 801969c:	d908      	bls.n	80196b0 <__udivmoddi4+0x12c>
 801969e:	eb1c 0101 	adds.w	r1, ip, r1
 80196a2:	f103 38ff 	add.w	r8, r3, #4294967295
 80196a6:	d202      	bcs.n	80196ae <__udivmoddi4+0x12a>
 80196a8:	4288      	cmp	r0, r1
 80196aa:	f200 80cb 	bhi.w	8019844 <__udivmoddi4+0x2c0>
 80196ae:	4643      	mov	r3, r8
 80196b0:	1a09      	subs	r1, r1, r0
 80196b2:	b2a4      	uxth	r4, r4
 80196b4:	fbb1 f0f7 	udiv	r0, r1, r7
 80196b8:	fb07 1110 	mls	r1, r7, r0, r1
 80196bc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80196c0:	fb0e fe00 	mul.w	lr, lr, r0
 80196c4:	45a6      	cmp	lr, r4
 80196c6:	d908      	bls.n	80196da <__udivmoddi4+0x156>
 80196c8:	eb1c 0404 	adds.w	r4, ip, r4
 80196cc:	f100 31ff 	add.w	r1, r0, #4294967295
 80196d0:	d202      	bcs.n	80196d8 <__udivmoddi4+0x154>
 80196d2:	45a6      	cmp	lr, r4
 80196d4:	f200 80bb 	bhi.w	801984e <__udivmoddi4+0x2ca>
 80196d8:	4608      	mov	r0, r1
 80196da:	eba4 040e 	sub.w	r4, r4, lr
 80196de:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80196e2:	e79c      	b.n	801961e <__udivmoddi4+0x9a>
 80196e4:	f1c6 0720 	rsb	r7, r6, #32
 80196e8:	40b3      	lsls	r3, r6
 80196ea:	fa22 fc07 	lsr.w	ip, r2, r7
 80196ee:	ea4c 0c03 	orr.w	ip, ip, r3
 80196f2:	fa20 f407 	lsr.w	r4, r0, r7
 80196f6:	fa01 f306 	lsl.w	r3, r1, r6
 80196fa:	431c      	orrs	r4, r3
 80196fc:	40f9      	lsrs	r1, r7
 80196fe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8019702:	fa00 f306 	lsl.w	r3, r0, r6
 8019706:	fbb1 f8f9 	udiv	r8, r1, r9
 801970a:	0c20      	lsrs	r0, r4, #16
 801970c:	fa1f fe8c 	uxth.w	lr, ip
 8019710:	fb09 1118 	mls	r1, r9, r8, r1
 8019714:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8019718:	fb08 f00e 	mul.w	r0, r8, lr
 801971c:	4288      	cmp	r0, r1
 801971e:	fa02 f206 	lsl.w	r2, r2, r6
 8019722:	d90b      	bls.n	801973c <__udivmoddi4+0x1b8>
 8019724:	eb1c 0101 	adds.w	r1, ip, r1
 8019728:	f108 3aff 	add.w	sl, r8, #4294967295
 801972c:	f080 8088 	bcs.w	8019840 <__udivmoddi4+0x2bc>
 8019730:	4288      	cmp	r0, r1
 8019732:	f240 8085 	bls.w	8019840 <__udivmoddi4+0x2bc>
 8019736:	f1a8 0802 	sub.w	r8, r8, #2
 801973a:	4461      	add	r1, ip
 801973c:	1a09      	subs	r1, r1, r0
 801973e:	b2a4      	uxth	r4, r4
 8019740:	fbb1 f0f9 	udiv	r0, r1, r9
 8019744:	fb09 1110 	mls	r1, r9, r0, r1
 8019748:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 801974c:	fb00 fe0e 	mul.w	lr, r0, lr
 8019750:	458e      	cmp	lr, r1
 8019752:	d908      	bls.n	8019766 <__udivmoddi4+0x1e2>
 8019754:	eb1c 0101 	adds.w	r1, ip, r1
 8019758:	f100 34ff 	add.w	r4, r0, #4294967295
 801975c:	d26c      	bcs.n	8019838 <__udivmoddi4+0x2b4>
 801975e:	458e      	cmp	lr, r1
 8019760:	d96a      	bls.n	8019838 <__udivmoddi4+0x2b4>
 8019762:	3802      	subs	r0, #2
 8019764:	4461      	add	r1, ip
 8019766:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 801976a:	fba0 9402 	umull	r9, r4, r0, r2
 801976e:	eba1 010e 	sub.w	r1, r1, lr
 8019772:	42a1      	cmp	r1, r4
 8019774:	46c8      	mov	r8, r9
 8019776:	46a6      	mov	lr, r4
 8019778:	d356      	bcc.n	8019828 <__udivmoddi4+0x2a4>
 801977a:	d053      	beq.n	8019824 <__udivmoddi4+0x2a0>
 801977c:	b15d      	cbz	r5, 8019796 <__udivmoddi4+0x212>
 801977e:	ebb3 0208 	subs.w	r2, r3, r8
 8019782:	eb61 010e 	sbc.w	r1, r1, lr
 8019786:	fa01 f707 	lsl.w	r7, r1, r7
 801978a:	fa22 f306 	lsr.w	r3, r2, r6
 801978e:	40f1      	lsrs	r1, r6
 8019790:	431f      	orrs	r7, r3
 8019792:	e9c5 7100 	strd	r7, r1, [r5]
 8019796:	2600      	movs	r6, #0
 8019798:	4631      	mov	r1, r6
 801979a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801979e:	f1c2 0320 	rsb	r3, r2, #32
 80197a2:	40d8      	lsrs	r0, r3
 80197a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80197a8:	fa21 f303 	lsr.w	r3, r1, r3
 80197ac:	4091      	lsls	r1, r2
 80197ae:	4301      	orrs	r1, r0
 80197b0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80197b4:	fa1f fe8c 	uxth.w	lr, ip
 80197b8:	fbb3 f0f7 	udiv	r0, r3, r7
 80197bc:	fb07 3610 	mls	r6, r7, r0, r3
 80197c0:	0c0b      	lsrs	r3, r1, #16
 80197c2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80197c6:	fb00 f60e 	mul.w	r6, r0, lr
 80197ca:	429e      	cmp	r6, r3
 80197cc:	fa04 f402 	lsl.w	r4, r4, r2
 80197d0:	d908      	bls.n	80197e4 <__udivmoddi4+0x260>
 80197d2:	eb1c 0303 	adds.w	r3, ip, r3
 80197d6:	f100 38ff 	add.w	r8, r0, #4294967295
 80197da:	d22f      	bcs.n	801983c <__udivmoddi4+0x2b8>
 80197dc:	429e      	cmp	r6, r3
 80197de:	d92d      	bls.n	801983c <__udivmoddi4+0x2b8>
 80197e0:	3802      	subs	r0, #2
 80197e2:	4463      	add	r3, ip
 80197e4:	1b9b      	subs	r3, r3, r6
 80197e6:	b289      	uxth	r1, r1
 80197e8:	fbb3 f6f7 	udiv	r6, r3, r7
 80197ec:	fb07 3316 	mls	r3, r7, r6, r3
 80197f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80197f4:	fb06 f30e 	mul.w	r3, r6, lr
 80197f8:	428b      	cmp	r3, r1
 80197fa:	d908      	bls.n	801980e <__udivmoddi4+0x28a>
 80197fc:	eb1c 0101 	adds.w	r1, ip, r1
 8019800:	f106 38ff 	add.w	r8, r6, #4294967295
 8019804:	d216      	bcs.n	8019834 <__udivmoddi4+0x2b0>
 8019806:	428b      	cmp	r3, r1
 8019808:	d914      	bls.n	8019834 <__udivmoddi4+0x2b0>
 801980a:	3e02      	subs	r6, #2
 801980c:	4461      	add	r1, ip
 801980e:	1ac9      	subs	r1, r1, r3
 8019810:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8019814:	e738      	b.n	8019688 <__udivmoddi4+0x104>
 8019816:	462e      	mov	r6, r5
 8019818:	4628      	mov	r0, r5
 801981a:	e705      	b.n	8019628 <__udivmoddi4+0xa4>
 801981c:	4606      	mov	r6, r0
 801981e:	e6e3      	b.n	80195e8 <__udivmoddi4+0x64>
 8019820:	4618      	mov	r0, r3
 8019822:	e6f8      	b.n	8019616 <__udivmoddi4+0x92>
 8019824:	454b      	cmp	r3, r9
 8019826:	d2a9      	bcs.n	801977c <__udivmoddi4+0x1f8>
 8019828:	ebb9 0802 	subs.w	r8, r9, r2
 801982c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8019830:	3801      	subs	r0, #1
 8019832:	e7a3      	b.n	801977c <__udivmoddi4+0x1f8>
 8019834:	4646      	mov	r6, r8
 8019836:	e7ea      	b.n	801980e <__udivmoddi4+0x28a>
 8019838:	4620      	mov	r0, r4
 801983a:	e794      	b.n	8019766 <__udivmoddi4+0x1e2>
 801983c:	4640      	mov	r0, r8
 801983e:	e7d1      	b.n	80197e4 <__udivmoddi4+0x260>
 8019840:	46d0      	mov	r8, sl
 8019842:	e77b      	b.n	801973c <__udivmoddi4+0x1b8>
 8019844:	3b02      	subs	r3, #2
 8019846:	4461      	add	r1, ip
 8019848:	e732      	b.n	80196b0 <__udivmoddi4+0x12c>
 801984a:	4630      	mov	r0, r6
 801984c:	e709      	b.n	8019662 <__udivmoddi4+0xde>
 801984e:	4464      	add	r4, ip
 8019850:	3802      	subs	r0, #2
 8019852:	e742      	b.n	80196da <__udivmoddi4+0x156>

08019854 <__aeabi_idiv0>:
 8019854:	4770      	bx	lr
 8019856:	bf00      	nop

08019858 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8019858:	f8df d034 	ldr.w	sp, [pc, #52]	; 8019890 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 801985c:	480d      	ldr	r0, [pc, #52]	; (8019894 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 801985e:	490e      	ldr	r1, [pc, #56]	; (8019898 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8019860:	4a0e      	ldr	r2, [pc, #56]	; (801989c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8019862:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8019864:	e002      	b.n	801986c <LoopCopyDataInit>

08019866 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8019866:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8019868:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801986a:	3304      	adds	r3, #4

0801986c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801986c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801986e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8019870:	d3f9      	bcc.n	8019866 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8019872:	4a0b      	ldr	r2, [pc, #44]	; (80198a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8019874:	4c0b      	ldr	r4, [pc, #44]	; (80198a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8019876:	2300      	movs	r3, #0
  b LoopFillZerobss
 8019878:	e001      	b.n	801987e <LoopFillZerobss>

0801987a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801987a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801987c:	3204      	adds	r2, #4

0801987e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801987e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8019880:	d3fb      	bcc.n	801987a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8019882:	f7ec fcfd 	bl	8006280 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8019886:	f000 f81b 	bl	80198c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801988a:	f7e8 f865 	bl	8001958 <main>
  bx  lr    
 801988e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8019890:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8019894:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8019898:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 801989c:	080526f8 	.word	0x080526f8
  ldr r2, =_sbss
 80198a0:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 80198a4:	20000dcc 	.word	0x20000dcc

080198a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80198a8:	e7fe      	b.n	80198a8 <ADC_IRQHandler>

080198aa <atoi>:
 80198aa:	220a      	movs	r2, #10
 80198ac:	2100      	movs	r1, #0
 80198ae:	f001 bd7f 	b.w	801b3b0 <strtol>
	...

080198b4 <__errno>:
 80198b4:	4b01      	ldr	r3, [pc, #4]	; (80198bc <__errno+0x8>)
 80198b6:	6818      	ldr	r0, [r3, #0]
 80198b8:	4770      	bx	lr
 80198ba:	bf00      	nop
 80198bc:	20000064 	.word	0x20000064

080198c0 <__libc_init_array>:
 80198c0:	b570      	push	{r4, r5, r6, lr}
 80198c2:	4d0d      	ldr	r5, [pc, #52]	; (80198f8 <__libc_init_array+0x38>)
 80198c4:	4c0d      	ldr	r4, [pc, #52]	; (80198fc <__libc_init_array+0x3c>)
 80198c6:	1b64      	subs	r4, r4, r5
 80198c8:	10a4      	asrs	r4, r4, #2
 80198ca:	2600      	movs	r6, #0
 80198cc:	42a6      	cmp	r6, r4
 80198ce:	d109      	bne.n	80198e4 <__libc_init_array+0x24>
 80198d0:	4d0b      	ldr	r5, [pc, #44]	; (8019900 <__libc_init_array+0x40>)
 80198d2:	4c0c      	ldr	r4, [pc, #48]	; (8019904 <__libc_init_array+0x44>)
 80198d4:	f005 fc46 	bl	801f164 <_init>
 80198d8:	1b64      	subs	r4, r4, r5
 80198da:	10a4      	asrs	r4, r4, #2
 80198dc:	2600      	movs	r6, #0
 80198de:	42a6      	cmp	r6, r4
 80198e0:	d105      	bne.n	80198ee <__libc_init_array+0x2e>
 80198e2:	bd70      	pop	{r4, r5, r6, pc}
 80198e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80198e8:	4798      	blx	r3
 80198ea:	3601      	adds	r6, #1
 80198ec:	e7ee      	b.n	80198cc <__libc_init_array+0xc>
 80198ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80198f2:	4798      	blx	r3
 80198f4:	3601      	adds	r6, #1
 80198f6:	e7f2      	b.n	80198de <__libc_init_array+0x1e>
 80198f8:	080526f0 	.word	0x080526f0
 80198fc:	080526f0 	.word	0x080526f0
 8019900:	080526f0 	.word	0x080526f0
 8019904:	080526f4 	.word	0x080526f4

08019908 <memset>:
 8019908:	4402      	add	r2, r0
 801990a:	4603      	mov	r3, r0
 801990c:	4293      	cmp	r3, r2
 801990e:	d100      	bne.n	8019912 <memset+0xa>
 8019910:	4770      	bx	lr
 8019912:	f803 1b01 	strb.w	r1, [r3], #1
 8019916:	e7f9      	b.n	801990c <memset+0x4>

08019918 <__cvt>:
 8019918:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801991c:	ec55 4b10 	vmov	r4, r5, d0
 8019920:	2d00      	cmp	r5, #0
 8019922:	460e      	mov	r6, r1
 8019924:	4619      	mov	r1, r3
 8019926:	462b      	mov	r3, r5
 8019928:	bfbb      	ittet	lt
 801992a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801992e:	461d      	movlt	r5, r3
 8019930:	2300      	movge	r3, #0
 8019932:	232d      	movlt	r3, #45	; 0x2d
 8019934:	700b      	strb	r3, [r1, #0]
 8019936:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019938:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801993c:	4691      	mov	r9, r2
 801993e:	f023 0820 	bic.w	r8, r3, #32
 8019942:	bfbc      	itt	lt
 8019944:	4622      	movlt	r2, r4
 8019946:	4614      	movlt	r4, r2
 8019948:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801994c:	d005      	beq.n	801995a <__cvt+0x42>
 801994e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8019952:	d100      	bne.n	8019956 <__cvt+0x3e>
 8019954:	3601      	adds	r6, #1
 8019956:	2102      	movs	r1, #2
 8019958:	e000      	b.n	801995c <__cvt+0x44>
 801995a:	2103      	movs	r1, #3
 801995c:	ab03      	add	r3, sp, #12
 801995e:	9301      	str	r3, [sp, #4]
 8019960:	ab02      	add	r3, sp, #8
 8019962:	9300      	str	r3, [sp, #0]
 8019964:	ec45 4b10 	vmov	d0, r4, r5
 8019968:	4653      	mov	r3, sl
 801996a:	4632      	mov	r2, r6
 801996c:	f001 fdb8 	bl	801b4e0 <_dtoa_r>
 8019970:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8019974:	4607      	mov	r7, r0
 8019976:	d102      	bne.n	801997e <__cvt+0x66>
 8019978:	f019 0f01 	tst.w	r9, #1
 801997c:	d022      	beq.n	80199c4 <__cvt+0xac>
 801997e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019982:	eb07 0906 	add.w	r9, r7, r6
 8019986:	d110      	bne.n	80199aa <__cvt+0x92>
 8019988:	783b      	ldrb	r3, [r7, #0]
 801998a:	2b30      	cmp	r3, #48	; 0x30
 801998c:	d10a      	bne.n	80199a4 <__cvt+0x8c>
 801998e:	2200      	movs	r2, #0
 8019990:	2300      	movs	r3, #0
 8019992:	4620      	mov	r0, r4
 8019994:	4629      	mov	r1, r5
 8019996:	f7ff fcc7 	bl	8019328 <__aeabi_dcmpeq>
 801999a:	b918      	cbnz	r0, 80199a4 <__cvt+0x8c>
 801999c:	f1c6 0601 	rsb	r6, r6, #1
 80199a0:	f8ca 6000 	str.w	r6, [sl]
 80199a4:	f8da 3000 	ldr.w	r3, [sl]
 80199a8:	4499      	add	r9, r3
 80199aa:	2200      	movs	r2, #0
 80199ac:	2300      	movs	r3, #0
 80199ae:	4620      	mov	r0, r4
 80199b0:	4629      	mov	r1, r5
 80199b2:	f7ff fcb9 	bl	8019328 <__aeabi_dcmpeq>
 80199b6:	b108      	cbz	r0, 80199bc <__cvt+0xa4>
 80199b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80199bc:	2230      	movs	r2, #48	; 0x30
 80199be:	9b03      	ldr	r3, [sp, #12]
 80199c0:	454b      	cmp	r3, r9
 80199c2:	d307      	bcc.n	80199d4 <__cvt+0xbc>
 80199c4:	9b03      	ldr	r3, [sp, #12]
 80199c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80199c8:	1bdb      	subs	r3, r3, r7
 80199ca:	4638      	mov	r0, r7
 80199cc:	6013      	str	r3, [r2, #0]
 80199ce:	b004      	add	sp, #16
 80199d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80199d4:	1c59      	adds	r1, r3, #1
 80199d6:	9103      	str	r1, [sp, #12]
 80199d8:	701a      	strb	r2, [r3, #0]
 80199da:	e7f0      	b.n	80199be <__cvt+0xa6>

080199dc <__exponent>:
 80199dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80199de:	4603      	mov	r3, r0
 80199e0:	2900      	cmp	r1, #0
 80199e2:	bfb8      	it	lt
 80199e4:	4249      	neglt	r1, r1
 80199e6:	f803 2b02 	strb.w	r2, [r3], #2
 80199ea:	bfb4      	ite	lt
 80199ec:	222d      	movlt	r2, #45	; 0x2d
 80199ee:	222b      	movge	r2, #43	; 0x2b
 80199f0:	2909      	cmp	r1, #9
 80199f2:	7042      	strb	r2, [r0, #1]
 80199f4:	dd2a      	ble.n	8019a4c <__exponent+0x70>
 80199f6:	f10d 0407 	add.w	r4, sp, #7
 80199fa:	46a4      	mov	ip, r4
 80199fc:	270a      	movs	r7, #10
 80199fe:	46a6      	mov	lr, r4
 8019a00:	460a      	mov	r2, r1
 8019a02:	fb91 f6f7 	sdiv	r6, r1, r7
 8019a06:	fb07 1516 	mls	r5, r7, r6, r1
 8019a0a:	3530      	adds	r5, #48	; 0x30
 8019a0c:	2a63      	cmp	r2, #99	; 0x63
 8019a0e:	f104 34ff 	add.w	r4, r4, #4294967295
 8019a12:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8019a16:	4631      	mov	r1, r6
 8019a18:	dcf1      	bgt.n	80199fe <__exponent+0x22>
 8019a1a:	3130      	adds	r1, #48	; 0x30
 8019a1c:	f1ae 0502 	sub.w	r5, lr, #2
 8019a20:	f804 1c01 	strb.w	r1, [r4, #-1]
 8019a24:	1c44      	adds	r4, r0, #1
 8019a26:	4629      	mov	r1, r5
 8019a28:	4561      	cmp	r1, ip
 8019a2a:	d30a      	bcc.n	8019a42 <__exponent+0x66>
 8019a2c:	f10d 0209 	add.w	r2, sp, #9
 8019a30:	eba2 020e 	sub.w	r2, r2, lr
 8019a34:	4565      	cmp	r5, ip
 8019a36:	bf88      	it	hi
 8019a38:	2200      	movhi	r2, #0
 8019a3a:	4413      	add	r3, r2
 8019a3c:	1a18      	subs	r0, r3, r0
 8019a3e:	b003      	add	sp, #12
 8019a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019a42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019a46:	f804 2f01 	strb.w	r2, [r4, #1]!
 8019a4a:	e7ed      	b.n	8019a28 <__exponent+0x4c>
 8019a4c:	2330      	movs	r3, #48	; 0x30
 8019a4e:	3130      	adds	r1, #48	; 0x30
 8019a50:	7083      	strb	r3, [r0, #2]
 8019a52:	70c1      	strb	r1, [r0, #3]
 8019a54:	1d03      	adds	r3, r0, #4
 8019a56:	e7f1      	b.n	8019a3c <__exponent+0x60>

08019a58 <_printf_float>:
 8019a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a5c:	ed2d 8b02 	vpush	{d8}
 8019a60:	b08d      	sub	sp, #52	; 0x34
 8019a62:	460c      	mov	r4, r1
 8019a64:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8019a68:	4616      	mov	r6, r2
 8019a6a:	461f      	mov	r7, r3
 8019a6c:	4605      	mov	r5, r0
 8019a6e:	f002 fe95 	bl	801c79c <_localeconv_r>
 8019a72:	f8d0 a000 	ldr.w	sl, [r0]
 8019a76:	4650      	mov	r0, sl
 8019a78:	f7fe ffd8 	bl	8018a2c <strlen>
 8019a7c:	2300      	movs	r3, #0
 8019a7e:	930a      	str	r3, [sp, #40]	; 0x28
 8019a80:	6823      	ldr	r3, [r4, #0]
 8019a82:	9305      	str	r3, [sp, #20]
 8019a84:	f8d8 3000 	ldr.w	r3, [r8]
 8019a88:	f894 b018 	ldrb.w	fp, [r4, #24]
 8019a8c:	3307      	adds	r3, #7
 8019a8e:	f023 0307 	bic.w	r3, r3, #7
 8019a92:	f103 0208 	add.w	r2, r3, #8
 8019a96:	f8c8 2000 	str.w	r2, [r8]
 8019a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a9e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8019aa2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8019aa6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019aaa:	9307      	str	r3, [sp, #28]
 8019aac:	f8cd 8018 	str.w	r8, [sp, #24]
 8019ab0:	ee08 0a10 	vmov	s16, r0
 8019ab4:	4b9f      	ldr	r3, [pc, #636]	; (8019d34 <_printf_float+0x2dc>)
 8019ab6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019aba:	f04f 32ff 	mov.w	r2, #4294967295
 8019abe:	f7ff fc65 	bl	801938c <__aeabi_dcmpun>
 8019ac2:	bb88      	cbnz	r0, 8019b28 <_printf_float+0xd0>
 8019ac4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019ac8:	4b9a      	ldr	r3, [pc, #616]	; (8019d34 <_printf_float+0x2dc>)
 8019aca:	f04f 32ff 	mov.w	r2, #4294967295
 8019ace:	f7ff fc3f 	bl	8019350 <__aeabi_dcmple>
 8019ad2:	bb48      	cbnz	r0, 8019b28 <_printf_float+0xd0>
 8019ad4:	2200      	movs	r2, #0
 8019ad6:	2300      	movs	r3, #0
 8019ad8:	4640      	mov	r0, r8
 8019ada:	4649      	mov	r1, r9
 8019adc:	f7ff fc2e 	bl	801933c <__aeabi_dcmplt>
 8019ae0:	b110      	cbz	r0, 8019ae8 <_printf_float+0x90>
 8019ae2:	232d      	movs	r3, #45	; 0x2d
 8019ae4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019ae8:	4b93      	ldr	r3, [pc, #588]	; (8019d38 <_printf_float+0x2e0>)
 8019aea:	4894      	ldr	r0, [pc, #592]	; (8019d3c <_printf_float+0x2e4>)
 8019aec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8019af0:	bf94      	ite	ls
 8019af2:	4698      	movls	r8, r3
 8019af4:	4680      	movhi	r8, r0
 8019af6:	2303      	movs	r3, #3
 8019af8:	6123      	str	r3, [r4, #16]
 8019afa:	9b05      	ldr	r3, [sp, #20]
 8019afc:	f023 0204 	bic.w	r2, r3, #4
 8019b00:	6022      	str	r2, [r4, #0]
 8019b02:	f04f 0900 	mov.w	r9, #0
 8019b06:	9700      	str	r7, [sp, #0]
 8019b08:	4633      	mov	r3, r6
 8019b0a:	aa0b      	add	r2, sp, #44	; 0x2c
 8019b0c:	4621      	mov	r1, r4
 8019b0e:	4628      	mov	r0, r5
 8019b10:	f000 f9d8 	bl	8019ec4 <_printf_common>
 8019b14:	3001      	adds	r0, #1
 8019b16:	f040 8090 	bne.w	8019c3a <_printf_float+0x1e2>
 8019b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8019b1e:	b00d      	add	sp, #52	; 0x34
 8019b20:	ecbd 8b02 	vpop	{d8}
 8019b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b28:	4642      	mov	r2, r8
 8019b2a:	464b      	mov	r3, r9
 8019b2c:	4640      	mov	r0, r8
 8019b2e:	4649      	mov	r1, r9
 8019b30:	f7ff fc2c 	bl	801938c <__aeabi_dcmpun>
 8019b34:	b140      	cbz	r0, 8019b48 <_printf_float+0xf0>
 8019b36:	464b      	mov	r3, r9
 8019b38:	2b00      	cmp	r3, #0
 8019b3a:	bfbc      	itt	lt
 8019b3c:	232d      	movlt	r3, #45	; 0x2d
 8019b3e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8019b42:	487f      	ldr	r0, [pc, #508]	; (8019d40 <_printf_float+0x2e8>)
 8019b44:	4b7f      	ldr	r3, [pc, #508]	; (8019d44 <_printf_float+0x2ec>)
 8019b46:	e7d1      	b.n	8019aec <_printf_float+0x94>
 8019b48:	6863      	ldr	r3, [r4, #4]
 8019b4a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8019b4e:	9206      	str	r2, [sp, #24]
 8019b50:	1c5a      	adds	r2, r3, #1
 8019b52:	d13f      	bne.n	8019bd4 <_printf_float+0x17c>
 8019b54:	2306      	movs	r3, #6
 8019b56:	6063      	str	r3, [r4, #4]
 8019b58:	9b05      	ldr	r3, [sp, #20]
 8019b5a:	6861      	ldr	r1, [r4, #4]
 8019b5c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8019b60:	2300      	movs	r3, #0
 8019b62:	9303      	str	r3, [sp, #12]
 8019b64:	ab0a      	add	r3, sp, #40	; 0x28
 8019b66:	e9cd b301 	strd	fp, r3, [sp, #4]
 8019b6a:	ab09      	add	r3, sp, #36	; 0x24
 8019b6c:	ec49 8b10 	vmov	d0, r8, r9
 8019b70:	9300      	str	r3, [sp, #0]
 8019b72:	6022      	str	r2, [r4, #0]
 8019b74:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8019b78:	4628      	mov	r0, r5
 8019b7a:	f7ff fecd 	bl	8019918 <__cvt>
 8019b7e:	9b06      	ldr	r3, [sp, #24]
 8019b80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019b82:	2b47      	cmp	r3, #71	; 0x47
 8019b84:	4680      	mov	r8, r0
 8019b86:	d108      	bne.n	8019b9a <_printf_float+0x142>
 8019b88:	1cc8      	adds	r0, r1, #3
 8019b8a:	db02      	blt.n	8019b92 <_printf_float+0x13a>
 8019b8c:	6863      	ldr	r3, [r4, #4]
 8019b8e:	4299      	cmp	r1, r3
 8019b90:	dd41      	ble.n	8019c16 <_printf_float+0x1be>
 8019b92:	f1ab 0b02 	sub.w	fp, fp, #2
 8019b96:	fa5f fb8b 	uxtb.w	fp, fp
 8019b9a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8019b9e:	d820      	bhi.n	8019be2 <_printf_float+0x18a>
 8019ba0:	3901      	subs	r1, #1
 8019ba2:	465a      	mov	r2, fp
 8019ba4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8019ba8:	9109      	str	r1, [sp, #36]	; 0x24
 8019baa:	f7ff ff17 	bl	80199dc <__exponent>
 8019bae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019bb0:	1813      	adds	r3, r2, r0
 8019bb2:	2a01      	cmp	r2, #1
 8019bb4:	4681      	mov	r9, r0
 8019bb6:	6123      	str	r3, [r4, #16]
 8019bb8:	dc02      	bgt.n	8019bc0 <_printf_float+0x168>
 8019bba:	6822      	ldr	r2, [r4, #0]
 8019bbc:	07d2      	lsls	r2, r2, #31
 8019bbe:	d501      	bpl.n	8019bc4 <_printf_float+0x16c>
 8019bc0:	3301      	adds	r3, #1
 8019bc2:	6123      	str	r3, [r4, #16]
 8019bc4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8019bc8:	2b00      	cmp	r3, #0
 8019bca:	d09c      	beq.n	8019b06 <_printf_float+0xae>
 8019bcc:	232d      	movs	r3, #45	; 0x2d
 8019bce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019bd2:	e798      	b.n	8019b06 <_printf_float+0xae>
 8019bd4:	9a06      	ldr	r2, [sp, #24]
 8019bd6:	2a47      	cmp	r2, #71	; 0x47
 8019bd8:	d1be      	bne.n	8019b58 <_printf_float+0x100>
 8019bda:	2b00      	cmp	r3, #0
 8019bdc:	d1bc      	bne.n	8019b58 <_printf_float+0x100>
 8019bde:	2301      	movs	r3, #1
 8019be0:	e7b9      	b.n	8019b56 <_printf_float+0xfe>
 8019be2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8019be6:	d118      	bne.n	8019c1a <_printf_float+0x1c2>
 8019be8:	2900      	cmp	r1, #0
 8019bea:	6863      	ldr	r3, [r4, #4]
 8019bec:	dd0b      	ble.n	8019c06 <_printf_float+0x1ae>
 8019bee:	6121      	str	r1, [r4, #16]
 8019bf0:	b913      	cbnz	r3, 8019bf8 <_printf_float+0x1a0>
 8019bf2:	6822      	ldr	r2, [r4, #0]
 8019bf4:	07d0      	lsls	r0, r2, #31
 8019bf6:	d502      	bpl.n	8019bfe <_printf_float+0x1a6>
 8019bf8:	3301      	adds	r3, #1
 8019bfa:	440b      	add	r3, r1
 8019bfc:	6123      	str	r3, [r4, #16]
 8019bfe:	65a1      	str	r1, [r4, #88]	; 0x58
 8019c00:	f04f 0900 	mov.w	r9, #0
 8019c04:	e7de      	b.n	8019bc4 <_printf_float+0x16c>
 8019c06:	b913      	cbnz	r3, 8019c0e <_printf_float+0x1b6>
 8019c08:	6822      	ldr	r2, [r4, #0]
 8019c0a:	07d2      	lsls	r2, r2, #31
 8019c0c:	d501      	bpl.n	8019c12 <_printf_float+0x1ba>
 8019c0e:	3302      	adds	r3, #2
 8019c10:	e7f4      	b.n	8019bfc <_printf_float+0x1a4>
 8019c12:	2301      	movs	r3, #1
 8019c14:	e7f2      	b.n	8019bfc <_printf_float+0x1a4>
 8019c16:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8019c1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019c1c:	4299      	cmp	r1, r3
 8019c1e:	db05      	blt.n	8019c2c <_printf_float+0x1d4>
 8019c20:	6823      	ldr	r3, [r4, #0]
 8019c22:	6121      	str	r1, [r4, #16]
 8019c24:	07d8      	lsls	r0, r3, #31
 8019c26:	d5ea      	bpl.n	8019bfe <_printf_float+0x1a6>
 8019c28:	1c4b      	adds	r3, r1, #1
 8019c2a:	e7e7      	b.n	8019bfc <_printf_float+0x1a4>
 8019c2c:	2900      	cmp	r1, #0
 8019c2e:	bfd4      	ite	le
 8019c30:	f1c1 0202 	rsble	r2, r1, #2
 8019c34:	2201      	movgt	r2, #1
 8019c36:	4413      	add	r3, r2
 8019c38:	e7e0      	b.n	8019bfc <_printf_float+0x1a4>
 8019c3a:	6823      	ldr	r3, [r4, #0]
 8019c3c:	055a      	lsls	r2, r3, #21
 8019c3e:	d407      	bmi.n	8019c50 <_printf_float+0x1f8>
 8019c40:	6923      	ldr	r3, [r4, #16]
 8019c42:	4642      	mov	r2, r8
 8019c44:	4631      	mov	r1, r6
 8019c46:	4628      	mov	r0, r5
 8019c48:	47b8      	blx	r7
 8019c4a:	3001      	adds	r0, #1
 8019c4c:	d12c      	bne.n	8019ca8 <_printf_float+0x250>
 8019c4e:	e764      	b.n	8019b1a <_printf_float+0xc2>
 8019c50:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8019c54:	f240 80e0 	bls.w	8019e18 <_printf_float+0x3c0>
 8019c58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019c5c:	2200      	movs	r2, #0
 8019c5e:	2300      	movs	r3, #0
 8019c60:	f7ff fb62 	bl	8019328 <__aeabi_dcmpeq>
 8019c64:	2800      	cmp	r0, #0
 8019c66:	d034      	beq.n	8019cd2 <_printf_float+0x27a>
 8019c68:	4a37      	ldr	r2, [pc, #220]	; (8019d48 <_printf_float+0x2f0>)
 8019c6a:	2301      	movs	r3, #1
 8019c6c:	4631      	mov	r1, r6
 8019c6e:	4628      	mov	r0, r5
 8019c70:	47b8      	blx	r7
 8019c72:	3001      	adds	r0, #1
 8019c74:	f43f af51 	beq.w	8019b1a <_printf_float+0xc2>
 8019c78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019c7c:	429a      	cmp	r2, r3
 8019c7e:	db02      	blt.n	8019c86 <_printf_float+0x22e>
 8019c80:	6823      	ldr	r3, [r4, #0]
 8019c82:	07d8      	lsls	r0, r3, #31
 8019c84:	d510      	bpl.n	8019ca8 <_printf_float+0x250>
 8019c86:	ee18 3a10 	vmov	r3, s16
 8019c8a:	4652      	mov	r2, sl
 8019c8c:	4631      	mov	r1, r6
 8019c8e:	4628      	mov	r0, r5
 8019c90:	47b8      	blx	r7
 8019c92:	3001      	adds	r0, #1
 8019c94:	f43f af41 	beq.w	8019b1a <_printf_float+0xc2>
 8019c98:	f04f 0800 	mov.w	r8, #0
 8019c9c:	f104 091a 	add.w	r9, r4, #26
 8019ca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019ca2:	3b01      	subs	r3, #1
 8019ca4:	4543      	cmp	r3, r8
 8019ca6:	dc09      	bgt.n	8019cbc <_printf_float+0x264>
 8019ca8:	6823      	ldr	r3, [r4, #0]
 8019caa:	079b      	lsls	r3, r3, #30
 8019cac:	f100 8105 	bmi.w	8019eba <_printf_float+0x462>
 8019cb0:	68e0      	ldr	r0, [r4, #12]
 8019cb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019cb4:	4298      	cmp	r0, r3
 8019cb6:	bfb8      	it	lt
 8019cb8:	4618      	movlt	r0, r3
 8019cba:	e730      	b.n	8019b1e <_printf_float+0xc6>
 8019cbc:	2301      	movs	r3, #1
 8019cbe:	464a      	mov	r2, r9
 8019cc0:	4631      	mov	r1, r6
 8019cc2:	4628      	mov	r0, r5
 8019cc4:	47b8      	blx	r7
 8019cc6:	3001      	adds	r0, #1
 8019cc8:	f43f af27 	beq.w	8019b1a <_printf_float+0xc2>
 8019ccc:	f108 0801 	add.w	r8, r8, #1
 8019cd0:	e7e6      	b.n	8019ca0 <_printf_float+0x248>
 8019cd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019cd4:	2b00      	cmp	r3, #0
 8019cd6:	dc39      	bgt.n	8019d4c <_printf_float+0x2f4>
 8019cd8:	4a1b      	ldr	r2, [pc, #108]	; (8019d48 <_printf_float+0x2f0>)
 8019cda:	2301      	movs	r3, #1
 8019cdc:	4631      	mov	r1, r6
 8019cde:	4628      	mov	r0, r5
 8019ce0:	47b8      	blx	r7
 8019ce2:	3001      	adds	r0, #1
 8019ce4:	f43f af19 	beq.w	8019b1a <_printf_float+0xc2>
 8019ce8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019cec:	4313      	orrs	r3, r2
 8019cee:	d102      	bne.n	8019cf6 <_printf_float+0x29e>
 8019cf0:	6823      	ldr	r3, [r4, #0]
 8019cf2:	07d9      	lsls	r1, r3, #31
 8019cf4:	d5d8      	bpl.n	8019ca8 <_printf_float+0x250>
 8019cf6:	ee18 3a10 	vmov	r3, s16
 8019cfa:	4652      	mov	r2, sl
 8019cfc:	4631      	mov	r1, r6
 8019cfe:	4628      	mov	r0, r5
 8019d00:	47b8      	blx	r7
 8019d02:	3001      	adds	r0, #1
 8019d04:	f43f af09 	beq.w	8019b1a <_printf_float+0xc2>
 8019d08:	f04f 0900 	mov.w	r9, #0
 8019d0c:	f104 0a1a 	add.w	sl, r4, #26
 8019d10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019d12:	425b      	negs	r3, r3
 8019d14:	454b      	cmp	r3, r9
 8019d16:	dc01      	bgt.n	8019d1c <_printf_float+0x2c4>
 8019d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019d1a:	e792      	b.n	8019c42 <_printf_float+0x1ea>
 8019d1c:	2301      	movs	r3, #1
 8019d1e:	4652      	mov	r2, sl
 8019d20:	4631      	mov	r1, r6
 8019d22:	4628      	mov	r0, r5
 8019d24:	47b8      	blx	r7
 8019d26:	3001      	adds	r0, #1
 8019d28:	f43f aef7 	beq.w	8019b1a <_printf_float+0xc2>
 8019d2c:	f109 0901 	add.w	r9, r9, #1
 8019d30:	e7ee      	b.n	8019d10 <_printf_float+0x2b8>
 8019d32:	bf00      	nop
 8019d34:	7fefffff 	.word	0x7fefffff
 8019d38:	08052214 	.word	0x08052214
 8019d3c:	08052218 	.word	0x08052218
 8019d40:	08052220 	.word	0x08052220
 8019d44:	0805221c 	.word	0x0805221c
 8019d48:	08052224 	.word	0x08052224
 8019d4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019d4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019d50:	429a      	cmp	r2, r3
 8019d52:	bfa8      	it	ge
 8019d54:	461a      	movge	r2, r3
 8019d56:	2a00      	cmp	r2, #0
 8019d58:	4691      	mov	r9, r2
 8019d5a:	dc37      	bgt.n	8019dcc <_printf_float+0x374>
 8019d5c:	f04f 0b00 	mov.w	fp, #0
 8019d60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019d64:	f104 021a 	add.w	r2, r4, #26
 8019d68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019d6a:	9305      	str	r3, [sp, #20]
 8019d6c:	eba3 0309 	sub.w	r3, r3, r9
 8019d70:	455b      	cmp	r3, fp
 8019d72:	dc33      	bgt.n	8019ddc <_printf_float+0x384>
 8019d74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019d78:	429a      	cmp	r2, r3
 8019d7a:	db3b      	blt.n	8019df4 <_printf_float+0x39c>
 8019d7c:	6823      	ldr	r3, [r4, #0]
 8019d7e:	07da      	lsls	r2, r3, #31
 8019d80:	d438      	bmi.n	8019df4 <_printf_float+0x39c>
 8019d82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019d84:	9a05      	ldr	r2, [sp, #20]
 8019d86:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019d88:	1a9a      	subs	r2, r3, r2
 8019d8a:	eba3 0901 	sub.w	r9, r3, r1
 8019d8e:	4591      	cmp	r9, r2
 8019d90:	bfa8      	it	ge
 8019d92:	4691      	movge	r9, r2
 8019d94:	f1b9 0f00 	cmp.w	r9, #0
 8019d98:	dc35      	bgt.n	8019e06 <_printf_float+0x3ae>
 8019d9a:	f04f 0800 	mov.w	r8, #0
 8019d9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019da2:	f104 0a1a 	add.w	sl, r4, #26
 8019da6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019daa:	1a9b      	subs	r3, r3, r2
 8019dac:	eba3 0309 	sub.w	r3, r3, r9
 8019db0:	4543      	cmp	r3, r8
 8019db2:	f77f af79 	ble.w	8019ca8 <_printf_float+0x250>
 8019db6:	2301      	movs	r3, #1
 8019db8:	4652      	mov	r2, sl
 8019dba:	4631      	mov	r1, r6
 8019dbc:	4628      	mov	r0, r5
 8019dbe:	47b8      	blx	r7
 8019dc0:	3001      	adds	r0, #1
 8019dc2:	f43f aeaa 	beq.w	8019b1a <_printf_float+0xc2>
 8019dc6:	f108 0801 	add.w	r8, r8, #1
 8019dca:	e7ec      	b.n	8019da6 <_printf_float+0x34e>
 8019dcc:	4613      	mov	r3, r2
 8019dce:	4631      	mov	r1, r6
 8019dd0:	4642      	mov	r2, r8
 8019dd2:	4628      	mov	r0, r5
 8019dd4:	47b8      	blx	r7
 8019dd6:	3001      	adds	r0, #1
 8019dd8:	d1c0      	bne.n	8019d5c <_printf_float+0x304>
 8019dda:	e69e      	b.n	8019b1a <_printf_float+0xc2>
 8019ddc:	2301      	movs	r3, #1
 8019dde:	4631      	mov	r1, r6
 8019de0:	4628      	mov	r0, r5
 8019de2:	9205      	str	r2, [sp, #20]
 8019de4:	47b8      	blx	r7
 8019de6:	3001      	adds	r0, #1
 8019de8:	f43f ae97 	beq.w	8019b1a <_printf_float+0xc2>
 8019dec:	9a05      	ldr	r2, [sp, #20]
 8019dee:	f10b 0b01 	add.w	fp, fp, #1
 8019df2:	e7b9      	b.n	8019d68 <_printf_float+0x310>
 8019df4:	ee18 3a10 	vmov	r3, s16
 8019df8:	4652      	mov	r2, sl
 8019dfa:	4631      	mov	r1, r6
 8019dfc:	4628      	mov	r0, r5
 8019dfe:	47b8      	blx	r7
 8019e00:	3001      	adds	r0, #1
 8019e02:	d1be      	bne.n	8019d82 <_printf_float+0x32a>
 8019e04:	e689      	b.n	8019b1a <_printf_float+0xc2>
 8019e06:	9a05      	ldr	r2, [sp, #20]
 8019e08:	464b      	mov	r3, r9
 8019e0a:	4442      	add	r2, r8
 8019e0c:	4631      	mov	r1, r6
 8019e0e:	4628      	mov	r0, r5
 8019e10:	47b8      	blx	r7
 8019e12:	3001      	adds	r0, #1
 8019e14:	d1c1      	bne.n	8019d9a <_printf_float+0x342>
 8019e16:	e680      	b.n	8019b1a <_printf_float+0xc2>
 8019e18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019e1a:	2a01      	cmp	r2, #1
 8019e1c:	dc01      	bgt.n	8019e22 <_printf_float+0x3ca>
 8019e1e:	07db      	lsls	r3, r3, #31
 8019e20:	d538      	bpl.n	8019e94 <_printf_float+0x43c>
 8019e22:	2301      	movs	r3, #1
 8019e24:	4642      	mov	r2, r8
 8019e26:	4631      	mov	r1, r6
 8019e28:	4628      	mov	r0, r5
 8019e2a:	47b8      	blx	r7
 8019e2c:	3001      	adds	r0, #1
 8019e2e:	f43f ae74 	beq.w	8019b1a <_printf_float+0xc2>
 8019e32:	ee18 3a10 	vmov	r3, s16
 8019e36:	4652      	mov	r2, sl
 8019e38:	4631      	mov	r1, r6
 8019e3a:	4628      	mov	r0, r5
 8019e3c:	47b8      	blx	r7
 8019e3e:	3001      	adds	r0, #1
 8019e40:	f43f ae6b 	beq.w	8019b1a <_printf_float+0xc2>
 8019e44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019e48:	2200      	movs	r2, #0
 8019e4a:	2300      	movs	r3, #0
 8019e4c:	f7ff fa6c 	bl	8019328 <__aeabi_dcmpeq>
 8019e50:	b9d8      	cbnz	r0, 8019e8a <_printf_float+0x432>
 8019e52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019e54:	f108 0201 	add.w	r2, r8, #1
 8019e58:	3b01      	subs	r3, #1
 8019e5a:	4631      	mov	r1, r6
 8019e5c:	4628      	mov	r0, r5
 8019e5e:	47b8      	blx	r7
 8019e60:	3001      	adds	r0, #1
 8019e62:	d10e      	bne.n	8019e82 <_printf_float+0x42a>
 8019e64:	e659      	b.n	8019b1a <_printf_float+0xc2>
 8019e66:	2301      	movs	r3, #1
 8019e68:	4652      	mov	r2, sl
 8019e6a:	4631      	mov	r1, r6
 8019e6c:	4628      	mov	r0, r5
 8019e6e:	47b8      	blx	r7
 8019e70:	3001      	adds	r0, #1
 8019e72:	f43f ae52 	beq.w	8019b1a <_printf_float+0xc2>
 8019e76:	f108 0801 	add.w	r8, r8, #1
 8019e7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019e7c:	3b01      	subs	r3, #1
 8019e7e:	4543      	cmp	r3, r8
 8019e80:	dcf1      	bgt.n	8019e66 <_printf_float+0x40e>
 8019e82:	464b      	mov	r3, r9
 8019e84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8019e88:	e6dc      	b.n	8019c44 <_printf_float+0x1ec>
 8019e8a:	f04f 0800 	mov.w	r8, #0
 8019e8e:	f104 0a1a 	add.w	sl, r4, #26
 8019e92:	e7f2      	b.n	8019e7a <_printf_float+0x422>
 8019e94:	2301      	movs	r3, #1
 8019e96:	4642      	mov	r2, r8
 8019e98:	e7df      	b.n	8019e5a <_printf_float+0x402>
 8019e9a:	2301      	movs	r3, #1
 8019e9c:	464a      	mov	r2, r9
 8019e9e:	4631      	mov	r1, r6
 8019ea0:	4628      	mov	r0, r5
 8019ea2:	47b8      	blx	r7
 8019ea4:	3001      	adds	r0, #1
 8019ea6:	f43f ae38 	beq.w	8019b1a <_printf_float+0xc2>
 8019eaa:	f108 0801 	add.w	r8, r8, #1
 8019eae:	68e3      	ldr	r3, [r4, #12]
 8019eb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019eb2:	1a5b      	subs	r3, r3, r1
 8019eb4:	4543      	cmp	r3, r8
 8019eb6:	dcf0      	bgt.n	8019e9a <_printf_float+0x442>
 8019eb8:	e6fa      	b.n	8019cb0 <_printf_float+0x258>
 8019eba:	f04f 0800 	mov.w	r8, #0
 8019ebe:	f104 0919 	add.w	r9, r4, #25
 8019ec2:	e7f4      	b.n	8019eae <_printf_float+0x456>

08019ec4 <_printf_common>:
 8019ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019ec8:	4616      	mov	r6, r2
 8019eca:	4699      	mov	r9, r3
 8019ecc:	688a      	ldr	r2, [r1, #8]
 8019ece:	690b      	ldr	r3, [r1, #16]
 8019ed0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019ed4:	4293      	cmp	r3, r2
 8019ed6:	bfb8      	it	lt
 8019ed8:	4613      	movlt	r3, r2
 8019eda:	6033      	str	r3, [r6, #0]
 8019edc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019ee0:	4607      	mov	r7, r0
 8019ee2:	460c      	mov	r4, r1
 8019ee4:	b10a      	cbz	r2, 8019eea <_printf_common+0x26>
 8019ee6:	3301      	adds	r3, #1
 8019ee8:	6033      	str	r3, [r6, #0]
 8019eea:	6823      	ldr	r3, [r4, #0]
 8019eec:	0699      	lsls	r1, r3, #26
 8019eee:	bf42      	ittt	mi
 8019ef0:	6833      	ldrmi	r3, [r6, #0]
 8019ef2:	3302      	addmi	r3, #2
 8019ef4:	6033      	strmi	r3, [r6, #0]
 8019ef6:	6825      	ldr	r5, [r4, #0]
 8019ef8:	f015 0506 	ands.w	r5, r5, #6
 8019efc:	d106      	bne.n	8019f0c <_printf_common+0x48>
 8019efe:	f104 0a19 	add.w	sl, r4, #25
 8019f02:	68e3      	ldr	r3, [r4, #12]
 8019f04:	6832      	ldr	r2, [r6, #0]
 8019f06:	1a9b      	subs	r3, r3, r2
 8019f08:	42ab      	cmp	r3, r5
 8019f0a:	dc26      	bgt.n	8019f5a <_printf_common+0x96>
 8019f0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019f10:	1e13      	subs	r3, r2, #0
 8019f12:	6822      	ldr	r2, [r4, #0]
 8019f14:	bf18      	it	ne
 8019f16:	2301      	movne	r3, #1
 8019f18:	0692      	lsls	r2, r2, #26
 8019f1a:	d42b      	bmi.n	8019f74 <_printf_common+0xb0>
 8019f1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019f20:	4649      	mov	r1, r9
 8019f22:	4638      	mov	r0, r7
 8019f24:	47c0      	blx	r8
 8019f26:	3001      	adds	r0, #1
 8019f28:	d01e      	beq.n	8019f68 <_printf_common+0xa4>
 8019f2a:	6823      	ldr	r3, [r4, #0]
 8019f2c:	68e5      	ldr	r5, [r4, #12]
 8019f2e:	6832      	ldr	r2, [r6, #0]
 8019f30:	f003 0306 	and.w	r3, r3, #6
 8019f34:	2b04      	cmp	r3, #4
 8019f36:	bf08      	it	eq
 8019f38:	1aad      	subeq	r5, r5, r2
 8019f3a:	68a3      	ldr	r3, [r4, #8]
 8019f3c:	6922      	ldr	r2, [r4, #16]
 8019f3e:	bf0c      	ite	eq
 8019f40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019f44:	2500      	movne	r5, #0
 8019f46:	4293      	cmp	r3, r2
 8019f48:	bfc4      	itt	gt
 8019f4a:	1a9b      	subgt	r3, r3, r2
 8019f4c:	18ed      	addgt	r5, r5, r3
 8019f4e:	2600      	movs	r6, #0
 8019f50:	341a      	adds	r4, #26
 8019f52:	42b5      	cmp	r5, r6
 8019f54:	d11a      	bne.n	8019f8c <_printf_common+0xc8>
 8019f56:	2000      	movs	r0, #0
 8019f58:	e008      	b.n	8019f6c <_printf_common+0xa8>
 8019f5a:	2301      	movs	r3, #1
 8019f5c:	4652      	mov	r2, sl
 8019f5e:	4649      	mov	r1, r9
 8019f60:	4638      	mov	r0, r7
 8019f62:	47c0      	blx	r8
 8019f64:	3001      	adds	r0, #1
 8019f66:	d103      	bne.n	8019f70 <_printf_common+0xac>
 8019f68:	f04f 30ff 	mov.w	r0, #4294967295
 8019f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019f70:	3501      	adds	r5, #1
 8019f72:	e7c6      	b.n	8019f02 <_printf_common+0x3e>
 8019f74:	18e1      	adds	r1, r4, r3
 8019f76:	1c5a      	adds	r2, r3, #1
 8019f78:	2030      	movs	r0, #48	; 0x30
 8019f7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019f7e:	4422      	add	r2, r4
 8019f80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019f84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019f88:	3302      	adds	r3, #2
 8019f8a:	e7c7      	b.n	8019f1c <_printf_common+0x58>
 8019f8c:	2301      	movs	r3, #1
 8019f8e:	4622      	mov	r2, r4
 8019f90:	4649      	mov	r1, r9
 8019f92:	4638      	mov	r0, r7
 8019f94:	47c0      	blx	r8
 8019f96:	3001      	adds	r0, #1
 8019f98:	d0e6      	beq.n	8019f68 <_printf_common+0xa4>
 8019f9a:	3601      	adds	r6, #1
 8019f9c:	e7d9      	b.n	8019f52 <_printf_common+0x8e>
	...

08019fa0 <_printf_i>:
 8019fa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019fa4:	7e0f      	ldrb	r7, [r1, #24]
 8019fa6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019fa8:	2f78      	cmp	r7, #120	; 0x78
 8019faa:	4691      	mov	r9, r2
 8019fac:	4680      	mov	r8, r0
 8019fae:	460c      	mov	r4, r1
 8019fb0:	469a      	mov	sl, r3
 8019fb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8019fb6:	d807      	bhi.n	8019fc8 <_printf_i+0x28>
 8019fb8:	2f62      	cmp	r7, #98	; 0x62
 8019fba:	d80a      	bhi.n	8019fd2 <_printf_i+0x32>
 8019fbc:	2f00      	cmp	r7, #0
 8019fbe:	f000 80d8 	beq.w	801a172 <_printf_i+0x1d2>
 8019fc2:	2f58      	cmp	r7, #88	; 0x58
 8019fc4:	f000 80a3 	beq.w	801a10e <_printf_i+0x16e>
 8019fc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019fcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019fd0:	e03a      	b.n	801a048 <_printf_i+0xa8>
 8019fd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019fd6:	2b15      	cmp	r3, #21
 8019fd8:	d8f6      	bhi.n	8019fc8 <_printf_i+0x28>
 8019fda:	a101      	add	r1, pc, #4	; (adr r1, 8019fe0 <_printf_i+0x40>)
 8019fdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019fe0:	0801a039 	.word	0x0801a039
 8019fe4:	0801a04d 	.word	0x0801a04d
 8019fe8:	08019fc9 	.word	0x08019fc9
 8019fec:	08019fc9 	.word	0x08019fc9
 8019ff0:	08019fc9 	.word	0x08019fc9
 8019ff4:	08019fc9 	.word	0x08019fc9
 8019ff8:	0801a04d 	.word	0x0801a04d
 8019ffc:	08019fc9 	.word	0x08019fc9
 801a000:	08019fc9 	.word	0x08019fc9
 801a004:	08019fc9 	.word	0x08019fc9
 801a008:	08019fc9 	.word	0x08019fc9
 801a00c:	0801a159 	.word	0x0801a159
 801a010:	0801a07d 	.word	0x0801a07d
 801a014:	0801a13b 	.word	0x0801a13b
 801a018:	08019fc9 	.word	0x08019fc9
 801a01c:	08019fc9 	.word	0x08019fc9
 801a020:	0801a17b 	.word	0x0801a17b
 801a024:	08019fc9 	.word	0x08019fc9
 801a028:	0801a07d 	.word	0x0801a07d
 801a02c:	08019fc9 	.word	0x08019fc9
 801a030:	08019fc9 	.word	0x08019fc9
 801a034:	0801a143 	.word	0x0801a143
 801a038:	682b      	ldr	r3, [r5, #0]
 801a03a:	1d1a      	adds	r2, r3, #4
 801a03c:	681b      	ldr	r3, [r3, #0]
 801a03e:	602a      	str	r2, [r5, #0]
 801a040:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a044:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a048:	2301      	movs	r3, #1
 801a04a:	e0a3      	b.n	801a194 <_printf_i+0x1f4>
 801a04c:	6820      	ldr	r0, [r4, #0]
 801a04e:	6829      	ldr	r1, [r5, #0]
 801a050:	0606      	lsls	r6, r0, #24
 801a052:	f101 0304 	add.w	r3, r1, #4
 801a056:	d50a      	bpl.n	801a06e <_printf_i+0xce>
 801a058:	680e      	ldr	r6, [r1, #0]
 801a05a:	602b      	str	r3, [r5, #0]
 801a05c:	2e00      	cmp	r6, #0
 801a05e:	da03      	bge.n	801a068 <_printf_i+0xc8>
 801a060:	232d      	movs	r3, #45	; 0x2d
 801a062:	4276      	negs	r6, r6
 801a064:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a068:	485e      	ldr	r0, [pc, #376]	; (801a1e4 <_printf_i+0x244>)
 801a06a:	230a      	movs	r3, #10
 801a06c:	e019      	b.n	801a0a2 <_printf_i+0x102>
 801a06e:	680e      	ldr	r6, [r1, #0]
 801a070:	602b      	str	r3, [r5, #0]
 801a072:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a076:	bf18      	it	ne
 801a078:	b236      	sxthne	r6, r6
 801a07a:	e7ef      	b.n	801a05c <_printf_i+0xbc>
 801a07c:	682b      	ldr	r3, [r5, #0]
 801a07e:	6820      	ldr	r0, [r4, #0]
 801a080:	1d19      	adds	r1, r3, #4
 801a082:	6029      	str	r1, [r5, #0]
 801a084:	0601      	lsls	r1, r0, #24
 801a086:	d501      	bpl.n	801a08c <_printf_i+0xec>
 801a088:	681e      	ldr	r6, [r3, #0]
 801a08a:	e002      	b.n	801a092 <_printf_i+0xf2>
 801a08c:	0646      	lsls	r6, r0, #25
 801a08e:	d5fb      	bpl.n	801a088 <_printf_i+0xe8>
 801a090:	881e      	ldrh	r6, [r3, #0]
 801a092:	4854      	ldr	r0, [pc, #336]	; (801a1e4 <_printf_i+0x244>)
 801a094:	2f6f      	cmp	r7, #111	; 0x6f
 801a096:	bf0c      	ite	eq
 801a098:	2308      	moveq	r3, #8
 801a09a:	230a      	movne	r3, #10
 801a09c:	2100      	movs	r1, #0
 801a09e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a0a2:	6865      	ldr	r5, [r4, #4]
 801a0a4:	60a5      	str	r5, [r4, #8]
 801a0a6:	2d00      	cmp	r5, #0
 801a0a8:	bfa2      	ittt	ge
 801a0aa:	6821      	ldrge	r1, [r4, #0]
 801a0ac:	f021 0104 	bicge.w	r1, r1, #4
 801a0b0:	6021      	strge	r1, [r4, #0]
 801a0b2:	b90e      	cbnz	r6, 801a0b8 <_printf_i+0x118>
 801a0b4:	2d00      	cmp	r5, #0
 801a0b6:	d04d      	beq.n	801a154 <_printf_i+0x1b4>
 801a0b8:	4615      	mov	r5, r2
 801a0ba:	fbb6 f1f3 	udiv	r1, r6, r3
 801a0be:	fb03 6711 	mls	r7, r3, r1, r6
 801a0c2:	5dc7      	ldrb	r7, [r0, r7]
 801a0c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801a0c8:	4637      	mov	r7, r6
 801a0ca:	42bb      	cmp	r3, r7
 801a0cc:	460e      	mov	r6, r1
 801a0ce:	d9f4      	bls.n	801a0ba <_printf_i+0x11a>
 801a0d0:	2b08      	cmp	r3, #8
 801a0d2:	d10b      	bne.n	801a0ec <_printf_i+0x14c>
 801a0d4:	6823      	ldr	r3, [r4, #0]
 801a0d6:	07de      	lsls	r6, r3, #31
 801a0d8:	d508      	bpl.n	801a0ec <_printf_i+0x14c>
 801a0da:	6923      	ldr	r3, [r4, #16]
 801a0dc:	6861      	ldr	r1, [r4, #4]
 801a0de:	4299      	cmp	r1, r3
 801a0e0:	bfde      	ittt	le
 801a0e2:	2330      	movle	r3, #48	; 0x30
 801a0e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a0e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a0ec:	1b52      	subs	r2, r2, r5
 801a0ee:	6122      	str	r2, [r4, #16]
 801a0f0:	f8cd a000 	str.w	sl, [sp]
 801a0f4:	464b      	mov	r3, r9
 801a0f6:	aa03      	add	r2, sp, #12
 801a0f8:	4621      	mov	r1, r4
 801a0fa:	4640      	mov	r0, r8
 801a0fc:	f7ff fee2 	bl	8019ec4 <_printf_common>
 801a100:	3001      	adds	r0, #1
 801a102:	d14c      	bne.n	801a19e <_printf_i+0x1fe>
 801a104:	f04f 30ff 	mov.w	r0, #4294967295
 801a108:	b004      	add	sp, #16
 801a10a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a10e:	4835      	ldr	r0, [pc, #212]	; (801a1e4 <_printf_i+0x244>)
 801a110:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801a114:	6829      	ldr	r1, [r5, #0]
 801a116:	6823      	ldr	r3, [r4, #0]
 801a118:	f851 6b04 	ldr.w	r6, [r1], #4
 801a11c:	6029      	str	r1, [r5, #0]
 801a11e:	061d      	lsls	r5, r3, #24
 801a120:	d514      	bpl.n	801a14c <_printf_i+0x1ac>
 801a122:	07df      	lsls	r7, r3, #31
 801a124:	bf44      	itt	mi
 801a126:	f043 0320 	orrmi.w	r3, r3, #32
 801a12a:	6023      	strmi	r3, [r4, #0]
 801a12c:	b91e      	cbnz	r6, 801a136 <_printf_i+0x196>
 801a12e:	6823      	ldr	r3, [r4, #0]
 801a130:	f023 0320 	bic.w	r3, r3, #32
 801a134:	6023      	str	r3, [r4, #0]
 801a136:	2310      	movs	r3, #16
 801a138:	e7b0      	b.n	801a09c <_printf_i+0xfc>
 801a13a:	6823      	ldr	r3, [r4, #0]
 801a13c:	f043 0320 	orr.w	r3, r3, #32
 801a140:	6023      	str	r3, [r4, #0]
 801a142:	2378      	movs	r3, #120	; 0x78
 801a144:	4828      	ldr	r0, [pc, #160]	; (801a1e8 <_printf_i+0x248>)
 801a146:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a14a:	e7e3      	b.n	801a114 <_printf_i+0x174>
 801a14c:	0659      	lsls	r1, r3, #25
 801a14e:	bf48      	it	mi
 801a150:	b2b6      	uxthmi	r6, r6
 801a152:	e7e6      	b.n	801a122 <_printf_i+0x182>
 801a154:	4615      	mov	r5, r2
 801a156:	e7bb      	b.n	801a0d0 <_printf_i+0x130>
 801a158:	682b      	ldr	r3, [r5, #0]
 801a15a:	6826      	ldr	r6, [r4, #0]
 801a15c:	6961      	ldr	r1, [r4, #20]
 801a15e:	1d18      	adds	r0, r3, #4
 801a160:	6028      	str	r0, [r5, #0]
 801a162:	0635      	lsls	r5, r6, #24
 801a164:	681b      	ldr	r3, [r3, #0]
 801a166:	d501      	bpl.n	801a16c <_printf_i+0x1cc>
 801a168:	6019      	str	r1, [r3, #0]
 801a16a:	e002      	b.n	801a172 <_printf_i+0x1d2>
 801a16c:	0670      	lsls	r0, r6, #25
 801a16e:	d5fb      	bpl.n	801a168 <_printf_i+0x1c8>
 801a170:	8019      	strh	r1, [r3, #0]
 801a172:	2300      	movs	r3, #0
 801a174:	6123      	str	r3, [r4, #16]
 801a176:	4615      	mov	r5, r2
 801a178:	e7ba      	b.n	801a0f0 <_printf_i+0x150>
 801a17a:	682b      	ldr	r3, [r5, #0]
 801a17c:	1d1a      	adds	r2, r3, #4
 801a17e:	602a      	str	r2, [r5, #0]
 801a180:	681d      	ldr	r5, [r3, #0]
 801a182:	6862      	ldr	r2, [r4, #4]
 801a184:	2100      	movs	r1, #0
 801a186:	4628      	mov	r0, r5
 801a188:	f7fe fc5a 	bl	8018a40 <memchr>
 801a18c:	b108      	cbz	r0, 801a192 <_printf_i+0x1f2>
 801a18e:	1b40      	subs	r0, r0, r5
 801a190:	6060      	str	r0, [r4, #4]
 801a192:	6863      	ldr	r3, [r4, #4]
 801a194:	6123      	str	r3, [r4, #16]
 801a196:	2300      	movs	r3, #0
 801a198:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a19c:	e7a8      	b.n	801a0f0 <_printf_i+0x150>
 801a19e:	6923      	ldr	r3, [r4, #16]
 801a1a0:	462a      	mov	r2, r5
 801a1a2:	4649      	mov	r1, r9
 801a1a4:	4640      	mov	r0, r8
 801a1a6:	47d0      	blx	sl
 801a1a8:	3001      	adds	r0, #1
 801a1aa:	d0ab      	beq.n	801a104 <_printf_i+0x164>
 801a1ac:	6823      	ldr	r3, [r4, #0]
 801a1ae:	079b      	lsls	r3, r3, #30
 801a1b0:	d413      	bmi.n	801a1da <_printf_i+0x23a>
 801a1b2:	68e0      	ldr	r0, [r4, #12]
 801a1b4:	9b03      	ldr	r3, [sp, #12]
 801a1b6:	4298      	cmp	r0, r3
 801a1b8:	bfb8      	it	lt
 801a1ba:	4618      	movlt	r0, r3
 801a1bc:	e7a4      	b.n	801a108 <_printf_i+0x168>
 801a1be:	2301      	movs	r3, #1
 801a1c0:	4632      	mov	r2, r6
 801a1c2:	4649      	mov	r1, r9
 801a1c4:	4640      	mov	r0, r8
 801a1c6:	47d0      	blx	sl
 801a1c8:	3001      	adds	r0, #1
 801a1ca:	d09b      	beq.n	801a104 <_printf_i+0x164>
 801a1cc:	3501      	adds	r5, #1
 801a1ce:	68e3      	ldr	r3, [r4, #12]
 801a1d0:	9903      	ldr	r1, [sp, #12]
 801a1d2:	1a5b      	subs	r3, r3, r1
 801a1d4:	42ab      	cmp	r3, r5
 801a1d6:	dcf2      	bgt.n	801a1be <_printf_i+0x21e>
 801a1d8:	e7eb      	b.n	801a1b2 <_printf_i+0x212>
 801a1da:	2500      	movs	r5, #0
 801a1dc:	f104 0619 	add.w	r6, r4, #25
 801a1e0:	e7f5      	b.n	801a1ce <_printf_i+0x22e>
 801a1e2:	bf00      	nop
 801a1e4:	08052226 	.word	0x08052226
 801a1e8:	08052237 	.word	0x08052237

0801a1ec <_scanf_float>:
 801a1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1f0:	b087      	sub	sp, #28
 801a1f2:	4617      	mov	r7, r2
 801a1f4:	9303      	str	r3, [sp, #12]
 801a1f6:	688b      	ldr	r3, [r1, #8]
 801a1f8:	1e5a      	subs	r2, r3, #1
 801a1fa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801a1fe:	bf83      	ittte	hi
 801a200:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801a204:	195b      	addhi	r3, r3, r5
 801a206:	9302      	strhi	r3, [sp, #8]
 801a208:	2300      	movls	r3, #0
 801a20a:	bf86      	itte	hi
 801a20c:	f240 135d 	movwhi	r3, #349	; 0x15d
 801a210:	608b      	strhi	r3, [r1, #8]
 801a212:	9302      	strls	r3, [sp, #8]
 801a214:	680b      	ldr	r3, [r1, #0]
 801a216:	468b      	mov	fp, r1
 801a218:	2500      	movs	r5, #0
 801a21a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801a21e:	f84b 3b1c 	str.w	r3, [fp], #28
 801a222:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801a226:	4680      	mov	r8, r0
 801a228:	460c      	mov	r4, r1
 801a22a:	465e      	mov	r6, fp
 801a22c:	46aa      	mov	sl, r5
 801a22e:	46a9      	mov	r9, r5
 801a230:	9501      	str	r5, [sp, #4]
 801a232:	68a2      	ldr	r2, [r4, #8]
 801a234:	b152      	cbz	r2, 801a24c <_scanf_float+0x60>
 801a236:	683b      	ldr	r3, [r7, #0]
 801a238:	781b      	ldrb	r3, [r3, #0]
 801a23a:	2b4e      	cmp	r3, #78	; 0x4e
 801a23c:	d864      	bhi.n	801a308 <_scanf_float+0x11c>
 801a23e:	2b40      	cmp	r3, #64	; 0x40
 801a240:	d83c      	bhi.n	801a2bc <_scanf_float+0xd0>
 801a242:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801a246:	b2c8      	uxtb	r0, r1
 801a248:	280e      	cmp	r0, #14
 801a24a:	d93a      	bls.n	801a2c2 <_scanf_float+0xd6>
 801a24c:	f1b9 0f00 	cmp.w	r9, #0
 801a250:	d003      	beq.n	801a25a <_scanf_float+0x6e>
 801a252:	6823      	ldr	r3, [r4, #0]
 801a254:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801a258:	6023      	str	r3, [r4, #0]
 801a25a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a25e:	f1ba 0f01 	cmp.w	sl, #1
 801a262:	f200 8113 	bhi.w	801a48c <_scanf_float+0x2a0>
 801a266:	455e      	cmp	r6, fp
 801a268:	f200 8105 	bhi.w	801a476 <_scanf_float+0x28a>
 801a26c:	2501      	movs	r5, #1
 801a26e:	4628      	mov	r0, r5
 801a270:	b007      	add	sp, #28
 801a272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a276:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801a27a:	2a0d      	cmp	r2, #13
 801a27c:	d8e6      	bhi.n	801a24c <_scanf_float+0x60>
 801a27e:	a101      	add	r1, pc, #4	; (adr r1, 801a284 <_scanf_float+0x98>)
 801a280:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801a284:	0801a3c3 	.word	0x0801a3c3
 801a288:	0801a24d 	.word	0x0801a24d
 801a28c:	0801a24d 	.word	0x0801a24d
 801a290:	0801a24d 	.word	0x0801a24d
 801a294:	0801a423 	.word	0x0801a423
 801a298:	0801a3fb 	.word	0x0801a3fb
 801a29c:	0801a24d 	.word	0x0801a24d
 801a2a0:	0801a24d 	.word	0x0801a24d
 801a2a4:	0801a3d1 	.word	0x0801a3d1
 801a2a8:	0801a24d 	.word	0x0801a24d
 801a2ac:	0801a24d 	.word	0x0801a24d
 801a2b0:	0801a24d 	.word	0x0801a24d
 801a2b4:	0801a24d 	.word	0x0801a24d
 801a2b8:	0801a389 	.word	0x0801a389
 801a2bc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801a2c0:	e7db      	b.n	801a27a <_scanf_float+0x8e>
 801a2c2:	290e      	cmp	r1, #14
 801a2c4:	d8c2      	bhi.n	801a24c <_scanf_float+0x60>
 801a2c6:	a001      	add	r0, pc, #4	; (adr r0, 801a2cc <_scanf_float+0xe0>)
 801a2c8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801a2cc:	0801a37b 	.word	0x0801a37b
 801a2d0:	0801a24d 	.word	0x0801a24d
 801a2d4:	0801a37b 	.word	0x0801a37b
 801a2d8:	0801a40f 	.word	0x0801a40f
 801a2dc:	0801a24d 	.word	0x0801a24d
 801a2e0:	0801a329 	.word	0x0801a329
 801a2e4:	0801a365 	.word	0x0801a365
 801a2e8:	0801a365 	.word	0x0801a365
 801a2ec:	0801a365 	.word	0x0801a365
 801a2f0:	0801a365 	.word	0x0801a365
 801a2f4:	0801a365 	.word	0x0801a365
 801a2f8:	0801a365 	.word	0x0801a365
 801a2fc:	0801a365 	.word	0x0801a365
 801a300:	0801a365 	.word	0x0801a365
 801a304:	0801a365 	.word	0x0801a365
 801a308:	2b6e      	cmp	r3, #110	; 0x6e
 801a30a:	d809      	bhi.n	801a320 <_scanf_float+0x134>
 801a30c:	2b60      	cmp	r3, #96	; 0x60
 801a30e:	d8b2      	bhi.n	801a276 <_scanf_float+0x8a>
 801a310:	2b54      	cmp	r3, #84	; 0x54
 801a312:	d077      	beq.n	801a404 <_scanf_float+0x218>
 801a314:	2b59      	cmp	r3, #89	; 0x59
 801a316:	d199      	bne.n	801a24c <_scanf_float+0x60>
 801a318:	2d07      	cmp	r5, #7
 801a31a:	d197      	bne.n	801a24c <_scanf_float+0x60>
 801a31c:	2508      	movs	r5, #8
 801a31e:	e029      	b.n	801a374 <_scanf_float+0x188>
 801a320:	2b74      	cmp	r3, #116	; 0x74
 801a322:	d06f      	beq.n	801a404 <_scanf_float+0x218>
 801a324:	2b79      	cmp	r3, #121	; 0x79
 801a326:	e7f6      	b.n	801a316 <_scanf_float+0x12a>
 801a328:	6821      	ldr	r1, [r4, #0]
 801a32a:	05c8      	lsls	r0, r1, #23
 801a32c:	d51a      	bpl.n	801a364 <_scanf_float+0x178>
 801a32e:	9b02      	ldr	r3, [sp, #8]
 801a330:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801a334:	6021      	str	r1, [r4, #0]
 801a336:	f109 0901 	add.w	r9, r9, #1
 801a33a:	b11b      	cbz	r3, 801a344 <_scanf_float+0x158>
 801a33c:	3b01      	subs	r3, #1
 801a33e:	3201      	adds	r2, #1
 801a340:	9302      	str	r3, [sp, #8]
 801a342:	60a2      	str	r2, [r4, #8]
 801a344:	68a3      	ldr	r3, [r4, #8]
 801a346:	3b01      	subs	r3, #1
 801a348:	60a3      	str	r3, [r4, #8]
 801a34a:	6923      	ldr	r3, [r4, #16]
 801a34c:	3301      	adds	r3, #1
 801a34e:	6123      	str	r3, [r4, #16]
 801a350:	687b      	ldr	r3, [r7, #4]
 801a352:	3b01      	subs	r3, #1
 801a354:	2b00      	cmp	r3, #0
 801a356:	607b      	str	r3, [r7, #4]
 801a358:	f340 8084 	ble.w	801a464 <_scanf_float+0x278>
 801a35c:	683b      	ldr	r3, [r7, #0]
 801a35e:	3301      	adds	r3, #1
 801a360:	603b      	str	r3, [r7, #0]
 801a362:	e766      	b.n	801a232 <_scanf_float+0x46>
 801a364:	eb1a 0f05 	cmn.w	sl, r5
 801a368:	f47f af70 	bne.w	801a24c <_scanf_float+0x60>
 801a36c:	6822      	ldr	r2, [r4, #0]
 801a36e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801a372:	6022      	str	r2, [r4, #0]
 801a374:	f806 3b01 	strb.w	r3, [r6], #1
 801a378:	e7e4      	b.n	801a344 <_scanf_float+0x158>
 801a37a:	6822      	ldr	r2, [r4, #0]
 801a37c:	0610      	lsls	r0, r2, #24
 801a37e:	f57f af65 	bpl.w	801a24c <_scanf_float+0x60>
 801a382:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801a386:	e7f4      	b.n	801a372 <_scanf_float+0x186>
 801a388:	f1ba 0f00 	cmp.w	sl, #0
 801a38c:	d10e      	bne.n	801a3ac <_scanf_float+0x1c0>
 801a38e:	f1b9 0f00 	cmp.w	r9, #0
 801a392:	d10e      	bne.n	801a3b2 <_scanf_float+0x1c6>
 801a394:	6822      	ldr	r2, [r4, #0]
 801a396:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801a39a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801a39e:	d108      	bne.n	801a3b2 <_scanf_float+0x1c6>
 801a3a0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a3a4:	6022      	str	r2, [r4, #0]
 801a3a6:	f04f 0a01 	mov.w	sl, #1
 801a3aa:	e7e3      	b.n	801a374 <_scanf_float+0x188>
 801a3ac:	f1ba 0f02 	cmp.w	sl, #2
 801a3b0:	d055      	beq.n	801a45e <_scanf_float+0x272>
 801a3b2:	2d01      	cmp	r5, #1
 801a3b4:	d002      	beq.n	801a3bc <_scanf_float+0x1d0>
 801a3b6:	2d04      	cmp	r5, #4
 801a3b8:	f47f af48 	bne.w	801a24c <_scanf_float+0x60>
 801a3bc:	3501      	adds	r5, #1
 801a3be:	b2ed      	uxtb	r5, r5
 801a3c0:	e7d8      	b.n	801a374 <_scanf_float+0x188>
 801a3c2:	f1ba 0f01 	cmp.w	sl, #1
 801a3c6:	f47f af41 	bne.w	801a24c <_scanf_float+0x60>
 801a3ca:	f04f 0a02 	mov.w	sl, #2
 801a3ce:	e7d1      	b.n	801a374 <_scanf_float+0x188>
 801a3d0:	b97d      	cbnz	r5, 801a3f2 <_scanf_float+0x206>
 801a3d2:	f1b9 0f00 	cmp.w	r9, #0
 801a3d6:	f47f af3c 	bne.w	801a252 <_scanf_float+0x66>
 801a3da:	6822      	ldr	r2, [r4, #0]
 801a3dc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801a3e0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801a3e4:	f47f af39 	bne.w	801a25a <_scanf_float+0x6e>
 801a3e8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a3ec:	6022      	str	r2, [r4, #0]
 801a3ee:	2501      	movs	r5, #1
 801a3f0:	e7c0      	b.n	801a374 <_scanf_float+0x188>
 801a3f2:	2d03      	cmp	r5, #3
 801a3f4:	d0e2      	beq.n	801a3bc <_scanf_float+0x1d0>
 801a3f6:	2d05      	cmp	r5, #5
 801a3f8:	e7de      	b.n	801a3b8 <_scanf_float+0x1cc>
 801a3fa:	2d02      	cmp	r5, #2
 801a3fc:	f47f af26 	bne.w	801a24c <_scanf_float+0x60>
 801a400:	2503      	movs	r5, #3
 801a402:	e7b7      	b.n	801a374 <_scanf_float+0x188>
 801a404:	2d06      	cmp	r5, #6
 801a406:	f47f af21 	bne.w	801a24c <_scanf_float+0x60>
 801a40a:	2507      	movs	r5, #7
 801a40c:	e7b2      	b.n	801a374 <_scanf_float+0x188>
 801a40e:	6822      	ldr	r2, [r4, #0]
 801a410:	0591      	lsls	r1, r2, #22
 801a412:	f57f af1b 	bpl.w	801a24c <_scanf_float+0x60>
 801a416:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801a41a:	6022      	str	r2, [r4, #0]
 801a41c:	f8cd 9004 	str.w	r9, [sp, #4]
 801a420:	e7a8      	b.n	801a374 <_scanf_float+0x188>
 801a422:	6822      	ldr	r2, [r4, #0]
 801a424:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801a428:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801a42c:	d006      	beq.n	801a43c <_scanf_float+0x250>
 801a42e:	0550      	lsls	r0, r2, #21
 801a430:	f57f af0c 	bpl.w	801a24c <_scanf_float+0x60>
 801a434:	f1b9 0f00 	cmp.w	r9, #0
 801a438:	f43f af0f 	beq.w	801a25a <_scanf_float+0x6e>
 801a43c:	0591      	lsls	r1, r2, #22
 801a43e:	bf58      	it	pl
 801a440:	9901      	ldrpl	r1, [sp, #4]
 801a442:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a446:	bf58      	it	pl
 801a448:	eba9 0101 	subpl.w	r1, r9, r1
 801a44c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801a450:	bf58      	it	pl
 801a452:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801a456:	6022      	str	r2, [r4, #0]
 801a458:	f04f 0900 	mov.w	r9, #0
 801a45c:	e78a      	b.n	801a374 <_scanf_float+0x188>
 801a45e:	f04f 0a03 	mov.w	sl, #3
 801a462:	e787      	b.n	801a374 <_scanf_float+0x188>
 801a464:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801a468:	4639      	mov	r1, r7
 801a46a:	4640      	mov	r0, r8
 801a46c:	4798      	blx	r3
 801a46e:	2800      	cmp	r0, #0
 801a470:	f43f aedf 	beq.w	801a232 <_scanf_float+0x46>
 801a474:	e6ea      	b.n	801a24c <_scanf_float+0x60>
 801a476:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a47a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a47e:	463a      	mov	r2, r7
 801a480:	4640      	mov	r0, r8
 801a482:	4798      	blx	r3
 801a484:	6923      	ldr	r3, [r4, #16]
 801a486:	3b01      	subs	r3, #1
 801a488:	6123      	str	r3, [r4, #16]
 801a48a:	e6ec      	b.n	801a266 <_scanf_float+0x7a>
 801a48c:	1e6b      	subs	r3, r5, #1
 801a48e:	2b06      	cmp	r3, #6
 801a490:	d825      	bhi.n	801a4de <_scanf_float+0x2f2>
 801a492:	2d02      	cmp	r5, #2
 801a494:	d836      	bhi.n	801a504 <_scanf_float+0x318>
 801a496:	455e      	cmp	r6, fp
 801a498:	f67f aee8 	bls.w	801a26c <_scanf_float+0x80>
 801a49c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a4a0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a4a4:	463a      	mov	r2, r7
 801a4a6:	4640      	mov	r0, r8
 801a4a8:	4798      	blx	r3
 801a4aa:	6923      	ldr	r3, [r4, #16]
 801a4ac:	3b01      	subs	r3, #1
 801a4ae:	6123      	str	r3, [r4, #16]
 801a4b0:	e7f1      	b.n	801a496 <_scanf_float+0x2aa>
 801a4b2:	9802      	ldr	r0, [sp, #8]
 801a4b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a4b8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801a4bc:	9002      	str	r0, [sp, #8]
 801a4be:	463a      	mov	r2, r7
 801a4c0:	4640      	mov	r0, r8
 801a4c2:	4798      	blx	r3
 801a4c4:	6923      	ldr	r3, [r4, #16]
 801a4c6:	3b01      	subs	r3, #1
 801a4c8:	6123      	str	r3, [r4, #16]
 801a4ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a4ce:	fa5f fa8a 	uxtb.w	sl, sl
 801a4d2:	f1ba 0f02 	cmp.w	sl, #2
 801a4d6:	d1ec      	bne.n	801a4b2 <_scanf_float+0x2c6>
 801a4d8:	3d03      	subs	r5, #3
 801a4da:	b2ed      	uxtb	r5, r5
 801a4dc:	1b76      	subs	r6, r6, r5
 801a4de:	6823      	ldr	r3, [r4, #0]
 801a4e0:	05da      	lsls	r2, r3, #23
 801a4e2:	d52f      	bpl.n	801a544 <_scanf_float+0x358>
 801a4e4:	055b      	lsls	r3, r3, #21
 801a4e6:	d510      	bpl.n	801a50a <_scanf_float+0x31e>
 801a4e8:	455e      	cmp	r6, fp
 801a4ea:	f67f aebf 	bls.w	801a26c <_scanf_float+0x80>
 801a4ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a4f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a4f6:	463a      	mov	r2, r7
 801a4f8:	4640      	mov	r0, r8
 801a4fa:	4798      	blx	r3
 801a4fc:	6923      	ldr	r3, [r4, #16]
 801a4fe:	3b01      	subs	r3, #1
 801a500:	6123      	str	r3, [r4, #16]
 801a502:	e7f1      	b.n	801a4e8 <_scanf_float+0x2fc>
 801a504:	46aa      	mov	sl, r5
 801a506:	9602      	str	r6, [sp, #8]
 801a508:	e7df      	b.n	801a4ca <_scanf_float+0x2de>
 801a50a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801a50e:	6923      	ldr	r3, [r4, #16]
 801a510:	2965      	cmp	r1, #101	; 0x65
 801a512:	f103 33ff 	add.w	r3, r3, #4294967295
 801a516:	f106 35ff 	add.w	r5, r6, #4294967295
 801a51a:	6123      	str	r3, [r4, #16]
 801a51c:	d00c      	beq.n	801a538 <_scanf_float+0x34c>
 801a51e:	2945      	cmp	r1, #69	; 0x45
 801a520:	d00a      	beq.n	801a538 <_scanf_float+0x34c>
 801a522:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a526:	463a      	mov	r2, r7
 801a528:	4640      	mov	r0, r8
 801a52a:	4798      	blx	r3
 801a52c:	6923      	ldr	r3, [r4, #16]
 801a52e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801a532:	3b01      	subs	r3, #1
 801a534:	1eb5      	subs	r5, r6, #2
 801a536:	6123      	str	r3, [r4, #16]
 801a538:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a53c:	463a      	mov	r2, r7
 801a53e:	4640      	mov	r0, r8
 801a540:	4798      	blx	r3
 801a542:	462e      	mov	r6, r5
 801a544:	6825      	ldr	r5, [r4, #0]
 801a546:	f015 0510 	ands.w	r5, r5, #16
 801a54a:	d159      	bne.n	801a600 <_scanf_float+0x414>
 801a54c:	7035      	strb	r5, [r6, #0]
 801a54e:	6823      	ldr	r3, [r4, #0]
 801a550:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801a554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a558:	d11b      	bne.n	801a592 <_scanf_float+0x3a6>
 801a55a:	9b01      	ldr	r3, [sp, #4]
 801a55c:	454b      	cmp	r3, r9
 801a55e:	eba3 0209 	sub.w	r2, r3, r9
 801a562:	d123      	bne.n	801a5ac <_scanf_float+0x3c0>
 801a564:	2200      	movs	r2, #0
 801a566:	4659      	mov	r1, fp
 801a568:	4640      	mov	r0, r8
 801a56a:	f000 fe97 	bl	801b29c <_strtod_r>
 801a56e:	6822      	ldr	r2, [r4, #0]
 801a570:	9b03      	ldr	r3, [sp, #12]
 801a572:	f012 0f02 	tst.w	r2, #2
 801a576:	ec57 6b10 	vmov	r6, r7, d0
 801a57a:	681b      	ldr	r3, [r3, #0]
 801a57c:	d021      	beq.n	801a5c2 <_scanf_float+0x3d6>
 801a57e:	9903      	ldr	r1, [sp, #12]
 801a580:	1d1a      	adds	r2, r3, #4
 801a582:	600a      	str	r2, [r1, #0]
 801a584:	681b      	ldr	r3, [r3, #0]
 801a586:	e9c3 6700 	strd	r6, r7, [r3]
 801a58a:	68e3      	ldr	r3, [r4, #12]
 801a58c:	3301      	adds	r3, #1
 801a58e:	60e3      	str	r3, [r4, #12]
 801a590:	e66d      	b.n	801a26e <_scanf_float+0x82>
 801a592:	9b04      	ldr	r3, [sp, #16]
 801a594:	2b00      	cmp	r3, #0
 801a596:	d0e5      	beq.n	801a564 <_scanf_float+0x378>
 801a598:	9905      	ldr	r1, [sp, #20]
 801a59a:	230a      	movs	r3, #10
 801a59c:	462a      	mov	r2, r5
 801a59e:	3101      	adds	r1, #1
 801a5a0:	4640      	mov	r0, r8
 801a5a2:	f000 ff03 	bl	801b3ac <_strtol_r>
 801a5a6:	9b04      	ldr	r3, [sp, #16]
 801a5a8:	9e05      	ldr	r6, [sp, #20]
 801a5aa:	1ac2      	subs	r2, r0, r3
 801a5ac:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801a5b0:	429e      	cmp	r6, r3
 801a5b2:	bf28      	it	cs
 801a5b4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801a5b8:	4912      	ldr	r1, [pc, #72]	; (801a604 <_scanf_float+0x418>)
 801a5ba:	4630      	mov	r0, r6
 801a5bc:	f000 f82c 	bl	801a618 <siprintf>
 801a5c0:	e7d0      	b.n	801a564 <_scanf_float+0x378>
 801a5c2:	9903      	ldr	r1, [sp, #12]
 801a5c4:	f012 0f04 	tst.w	r2, #4
 801a5c8:	f103 0204 	add.w	r2, r3, #4
 801a5cc:	600a      	str	r2, [r1, #0]
 801a5ce:	d1d9      	bne.n	801a584 <_scanf_float+0x398>
 801a5d0:	f8d3 8000 	ldr.w	r8, [r3]
 801a5d4:	ee10 2a10 	vmov	r2, s0
 801a5d8:	ee10 0a10 	vmov	r0, s0
 801a5dc:	463b      	mov	r3, r7
 801a5de:	4639      	mov	r1, r7
 801a5e0:	f7fe fed4 	bl	801938c <__aeabi_dcmpun>
 801a5e4:	b128      	cbz	r0, 801a5f2 <_scanf_float+0x406>
 801a5e6:	4808      	ldr	r0, [pc, #32]	; (801a608 <_scanf_float+0x41c>)
 801a5e8:	f000 f810 	bl	801a60c <nanf>
 801a5ec:	ed88 0a00 	vstr	s0, [r8]
 801a5f0:	e7cb      	b.n	801a58a <_scanf_float+0x39e>
 801a5f2:	4630      	mov	r0, r6
 801a5f4:	4639      	mov	r1, r7
 801a5f6:	f7fe ff27 	bl	8019448 <__aeabi_d2f>
 801a5fa:	f8c8 0000 	str.w	r0, [r8]
 801a5fe:	e7c4      	b.n	801a58a <_scanf_float+0x39e>
 801a600:	2500      	movs	r5, #0
 801a602:	e634      	b.n	801a26e <_scanf_float+0x82>
 801a604:	08052248 	.word	0x08052248
 801a608:	08052650 	.word	0x08052650

0801a60c <nanf>:
 801a60c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a614 <nanf+0x8>
 801a610:	4770      	bx	lr
 801a612:	bf00      	nop
 801a614:	7fc00000 	.word	0x7fc00000

0801a618 <siprintf>:
 801a618:	b40e      	push	{r1, r2, r3}
 801a61a:	b500      	push	{lr}
 801a61c:	b09c      	sub	sp, #112	; 0x70
 801a61e:	ab1d      	add	r3, sp, #116	; 0x74
 801a620:	9002      	str	r0, [sp, #8]
 801a622:	9006      	str	r0, [sp, #24]
 801a624:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a628:	4809      	ldr	r0, [pc, #36]	; (801a650 <siprintf+0x38>)
 801a62a:	9107      	str	r1, [sp, #28]
 801a62c:	9104      	str	r1, [sp, #16]
 801a62e:	4909      	ldr	r1, [pc, #36]	; (801a654 <siprintf+0x3c>)
 801a630:	f853 2b04 	ldr.w	r2, [r3], #4
 801a634:	9105      	str	r1, [sp, #20]
 801a636:	6800      	ldr	r0, [r0, #0]
 801a638:	9301      	str	r3, [sp, #4]
 801a63a:	a902      	add	r1, sp, #8
 801a63c:	f002 feee 	bl	801d41c <_svfiprintf_r>
 801a640:	9b02      	ldr	r3, [sp, #8]
 801a642:	2200      	movs	r2, #0
 801a644:	701a      	strb	r2, [r3, #0]
 801a646:	b01c      	add	sp, #112	; 0x70
 801a648:	f85d eb04 	ldr.w	lr, [sp], #4
 801a64c:	b003      	add	sp, #12
 801a64e:	4770      	bx	lr
 801a650:	20000064 	.word	0x20000064
 801a654:	ffff0208 	.word	0xffff0208

0801a658 <sulp>:
 801a658:	b570      	push	{r4, r5, r6, lr}
 801a65a:	4604      	mov	r4, r0
 801a65c:	460d      	mov	r5, r1
 801a65e:	ec45 4b10 	vmov	d0, r4, r5
 801a662:	4616      	mov	r6, r2
 801a664:	f002 fc38 	bl	801ced8 <__ulp>
 801a668:	ec51 0b10 	vmov	r0, r1, d0
 801a66c:	b17e      	cbz	r6, 801a68e <sulp+0x36>
 801a66e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801a672:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801a676:	2b00      	cmp	r3, #0
 801a678:	dd09      	ble.n	801a68e <sulp+0x36>
 801a67a:	051b      	lsls	r3, r3, #20
 801a67c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801a680:	2400      	movs	r4, #0
 801a682:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801a686:	4622      	mov	r2, r4
 801a688:	462b      	mov	r3, r5
 801a68a:	f7fe fbe5 	bl	8018e58 <__aeabi_dmul>
 801a68e:	bd70      	pop	{r4, r5, r6, pc}

0801a690 <_strtod_l>:
 801a690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a694:	ed2d 8b02 	vpush	{d8}
 801a698:	b09d      	sub	sp, #116	; 0x74
 801a69a:	461f      	mov	r7, r3
 801a69c:	2300      	movs	r3, #0
 801a69e:	9318      	str	r3, [sp, #96]	; 0x60
 801a6a0:	4ba2      	ldr	r3, [pc, #648]	; (801a92c <_strtod_l+0x29c>)
 801a6a2:	9213      	str	r2, [sp, #76]	; 0x4c
 801a6a4:	681b      	ldr	r3, [r3, #0]
 801a6a6:	9305      	str	r3, [sp, #20]
 801a6a8:	4604      	mov	r4, r0
 801a6aa:	4618      	mov	r0, r3
 801a6ac:	4688      	mov	r8, r1
 801a6ae:	f7fe f9bd 	bl	8018a2c <strlen>
 801a6b2:	f04f 0a00 	mov.w	sl, #0
 801a6b6:	4605      	mov	r5, r0
 801a6b8:	f04f 0b00 	mov.w	fp, #0
 801a6bc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801a6c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a6c2:	781a      	ldrb	r2, [r3, #0]
 801a6c4:	2a2b      	cmp	r2, #43	; 0x2b
 801a6c6:	d04e      	beq.n	801a766 <_strtod_l+0xd6>
 801a6c8:	d83b      	bhi.n	801a742 <_strtod_l+0xb2>
 801a6ca:	2a0d      	cmp	r2, #13
 801a6cc:	d834      	bhi.n	801a738 <_strtod_l+0xa8>
 801a6ce:	2a08      	cmp	r2, #8
 801a6d0:	d834      	bhi.n	801a73c <_strtod_l+0xac>
 801a6d2:	2a00      	cmp	r2, #0
 801a6d4:	d03e      	beq.n	801a754 <_strtod_l+0xc4>
 801a6d6:	2300      	movs	r3, #0
 801a6d8:	930a      	str	r3, [sp, #40]	; 0x28
 801a6da:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801a6dc:	7833      	ldrb	r3, [r6, #0]
 801a6de:	2b30      	cmp	r3, #48	; 0x30
 801a6e0:	f040 80b0 	bne.w	801a844 <_strtod_l+0x1b4>
 801a6e4:	7873      	ldrb	r3, [r6, #1]
 801a6e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801a6ea:	2b58      	cmp	r3, #88	; 0x58
 801a6ec:	d168      	bne.n	801a7c0 <_strtod_l+0x130>
 801a6ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a6f0:	9301      	str	r3, [sp, #4]
 801a6f2:	ab18      	add	r3, sp, #96	; 0x60
 801a6f4:	9702      	str	r7, [sp, #8]
 801a6f6:	9300      	str	r3, [sp, #0]
 801a6f8:	4a8d      	ldr	r2, [pc, #564]	; (801a930 <_strtod_l+0x2a0>)
 801a6fa:	ab19      	add	r3, sp, #100	; 0x64
 801a6fc:	a917      	add	r1, sp, #92	; 0x5c
 801a6fe:	4620      	mov	r0, r4
 801a700:	f001 fd44 	bl	801c18c <__gethex>
 801a704:	f010 0707 	ands.w	r7, r0, #7
 801a708:	4605      	mov	r5, r0
 801a70a:	d005      	beq.n	801a718 <_strtod_l+0x88>
 801a70c:	2f06      	cmp	r7, #6
 801a70e:	d12c      	bne.n	801a76a <_strtod_l+0xda>
 801a710:	3601      	adds	r6, #1
 801a712:	2300      	movs	r3, #0
 801a714:	9617      	str	r6, [sp, #92]	; 0x5c
 801a716:	930a      	str	r3, [sp, #40]	; 0x28
 801a718:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a71a:	2b00      	cmp	r3, #0
 801a71c:	f040 8590 	bne.w	801b240 <_strtod_l+0xbb0>
 801a720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a722:	b1eb      	cbz	r3, 801a760 <_strtod_l+0xd0>
 801a724:	4652      	mov	r2, sl
 801a726:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801a72a:	ec43 2b10 	vmov	d0, r2, r3
 801a72e:	b01d      	add	sp, #116	; 0x74
 801a730:	ecbd 8b02 	vpop	{d8}
 801a734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a738:	2a20      	cmp	r2, #32
 801a73a:	d1cc      	bne.n	801a6d6 <_strtod_l+0x46>
 801a73c:	3301      	adds	r3, #1
 801a73e:	9317      	str	r3, [sp, #92]	; 0x5c
 801a740:	e7be      	b.n	801a6c0 <_strtod_l+0x30>
 801a742:	2a2d      	cmp	r2, #45	; 0x2d
 801a744:	d1c7      	bne.n	801a6d6 <_strtod_l+0x46>
 801a746:	2201      	movs	r2, #1
 801a748:	920a      	str	r2, [sp, #40]	; 0x28
 801a74a:	1c5a      	adds	r2, r3, #1
 801a74c:	9217      	str	r2, [sp, #92]	; 0x5c
 801a74e:	785b      	ldrb	r3, [r3, #1]
 801a750:	2b00      	cmp	r3, #0
 801a752:	d1c2      	bne.n	801a6da <_strtod_l+0x4a>
 801a754:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a756:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801a75a:	2b00      	cmp	r3, #0
 801a75c:	f040 856e 	bne.w	801b23c <_strtod_l+0xbac>
 801a760:	4652      	mov	r2, sl
 801a762:	465b      	mov	r3, fp
 801a764:	e7e1      	b.n	801a72a <_strtod_l+0x9a>
 801a766:	2200      	movs	r2, #0
 801a768:	e7ee      	b.n	801a748 <_strtod_l+0xb8>
 801a76a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801a76c:	b13a      	cbz	r2, 801a77e <_strtod_l+0xee>
 801a76e:	2135      	movs	r1, #53	; 0x35
 801a770:	a81a      	add	r0, sp, #104	; 0x68
 801a772:	f002 fcbc 	bl	801d0ee <__copybits>
 801a776:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a778:	4620      	mov	r0, r4
 801a77a:	f002 f87b 	bl	801c874 <_Bfree>
 801a77e:	3f01      	subs	r7, #1
 801a780:	2f04      	cmp	r7, #4
 801a782:	d806      	bhi.n	801a792 <_strtod_l+0x102>
 801a784:	e8df f007 	tbb	[pc, r7]
 801a788:	1714030a 	.word	0x1714030a
 801a78c:	0a          	.byte	0x0a
 801a78d:	00          	.byte	0x00
 801a78e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801a792:	0728      	lsls	r0, r5, #28
 801a794:	d5c0      	bpl.n	801a718 <_strtod_l+0x88>
 801a796:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801a79a:	e7bd      	b.n	801a718 <_strtod_l+0x88>
 801a79c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 801a7a0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801a7a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801a7a6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801a7aa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801a7ae:	e7f0      	b.n	801a792 <_strtod_l+0x102>
 801a7b0:	f8df b180 	ldr.w	fp, [pc, #384]	; 801a934 <_strtod_l+0x2a4>
 801a7b4:	e7ed      	b.n	801a792 <_strtod_l+0x102>
 801a7b6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801a7ba:	f04f 3aff 	mov.w	sl, #4294967295
 801a7be:	e7e8      	b.n	801a792 <_strtod_l+0x102>
 801a7c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a7c2:	1c5a      	adds	r2, r3, #1
 801a7c4:	9217      	str	r2, [sp, #92]	; 0x5c
 801a7c6:	785b      	ldrb	r3, [r3, #1]
 801a7c8:	2b30      	cmp	r3, #48	; 0x30
 801a7ca:	d0f9      	beq.n	801a7c0 <_strtod_l+0x130>
 801a7cc:	2b00      	cmp	r3, #0
 801a7ce:	d0a3      	beq.n	801a718 <_strtod_l+0x88>
 801a7d0:	2301      	movs	r3, #1
 801a7d2:	f04f 0900 	mov.w	r9, #0
 801a7d6:	9304      	str	r3, [sp, #16]
 801a7d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a7da:	9308      	str	r3, [sp, #32]
 801a7dc:	f8cd 901c 	str.w	r9, [sp, #28]
 801a7e0:	464f      	mov	r7, r9
 801a7e2:	220a      	movs	r2, #10
 801a7e4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801a7e6:	7806      	ldrb	r6, [r0, #0]
 801a7e8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801a7ec:	b2d9      	uxtb	r1, r3
 801a7ee:	2909      	cmp	r1, #9
 801a7f0:	d92a      	bls.n	801a848 <_strtod_l+0x1b8>
 801a7f2:	9905      	ldr	r1, [sp, #20]
 801a7f4:	462a      	mov	r2, r5
 801a7f6:	f002 ff2b 	bl	801d650 <strncmp>
 801a7fa:	b398      	cbz	r0, 801a864 <_strtod_l+0x1d4>
 801a7fc:	2000      	movs	r0, #0
 801a7fe:	4632      	mov	r2, r6
 801a800:	463d      	mov	r5, r7
 801a802:	9005      	str	r0, [sp, #20]
 801a804:	4603      	mov	r3, r0
 801a806:	2a65      	cmp	r2, #101	; 0x65
 801a808:	d001      	beq.n	801a80e <_strtod_l+0x17e>
 801a80a:	2a45      	cmp	r2, #69	; 0x45
 801a80c:	d118      	bne.n	801a840 <_strtod_l+0x1b0>
 801a80e:	b91d      	cbnz	r5, 801a818 <_strtod_l+0x188>
 801a810:	9a04      	ldr	r2, [sp, #16]
 801a812:	4302      	orrs	r2, r0
 801a814:	d09e      	beq.n	801a754 <_strtod_l+0xc4>
 801a816:	2500      	movs	r5, #0
 801a818:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801a81c:	f108 0201 	add.w	r2, r8, #1
 801a820:	9217      	str	r2, [sp, #92]	; 0x5c
 801a822:	f898 2001 	ldrb.w	r2, [r8, #1]
 801a826:	2a2b      	cmp	r2, #43	; 0x2b
 801a828:	d075      	beq.n	801a916 <_strtod_l+0x286>
 801a82a:	2a2d      	cmp	r2, #45	; 0x2d
 801a82c:	d07b      	beq.n	801a926 <_strtod_l+0x296>
 801a82e:	f04f 0c00 	mov.w	ip, #0
 801a832:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801a836:	2909      	cmp	r1, #9
 801a838:	f240 8082 	bls.w	801a940 <_strtod_l+0x2b0>
 801a83c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801a840:	2600      	movs	r6, #0
 801a842:	e09d      	b.n	801a980 <_strtod_l+0x2f0>
 801a844:	2300      	movs	r3, #0
 801a846:	e7c4      	b.n	801a7d2 <_strtod_l+0x142>
 801a848:	2f08      	cmp	r7, #8
 801a84a:	bfd8      	it	le
 801a84c:	9907      	ldrle	r1, [sp, #28]
 801a84e:	f100 0001 	add.w	r0, r0, #1
 801a852:	bfda      	itte	le
 801a854:	fb02 3301 	mlale	r3, r2, r1, r3
 801a858:	9307      	strle	r3, [sp, #28]
 801a85a:	fb02 3909 	mlagt	r9, r2, r9, r3
 801a85e:	3701      	adds	r7, #1
 801a860:	9017      	str	r0, [sp, #92]	; 0x5c
 801a862:	e7bf      	b.n	801a7e4 <_strtod_l+0x154>
 801a864:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a866:	195a      	adds	r2, r3, r5
 801a868:	9217      	str	r2, [sp, #92]	; 0x5c
 801a86a:	5d5a      	ldrb	r2, [r3, r5]
 801a86c:	2f00      	cmp	r7, #0
 801a86e:	d037      	beq.n	801a8e0 <_strtod_l+0x250>
 801a870:	9005      	str	r0, [sp, #20]
 801a872:	463d      	mov	r5, r7
 801a874:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801a878:	2b09      	cmp	r3, #9
 801a87a:	d912      	bls.n	801a8a2 <_strtod_l+0x212>
 801a87c:	2301      	movs	r3, #1
 801a87e:	e7c2      	b.n	801a806 <_strtod_l+0x176>
 801a880:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a882:	1c5a      	adds	r2, r3, #1
 801a884:	9217      	str	r2, [sp, #92]	; 0x5c
 801a886:	785a      	ldrb	r2, [r3, #1]
 801a888:	3001      	adds	r0, #1
 801a88a:	2a30      	cmp	r2, #48	; 0x30
 801a88c:	d0f8      	beq.n	801a880 <_strtod_l+0x1f0>
 801a88e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801a892:	2b08      	cmp	r3, #8
 801a894:	f200 84d9 	bhi.w	801b24a <_strtod_l+0xbba>
 801a898:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a89a:	9005      	str	r0, [sp, #20]
 801a89c:	2000      	movs	r0, #0
 801a89e:	9308      	str	r3, [sp, #32]
 801a8a0:	4605      	mov	r5, r0
 801a8a2:	3a30      	subs	r2, #48	; 0x30
 801a8a4:	f100 0301 	add.w	r3, r0, #1
 801a8a8:	d014      	beq.n	801a8d4 <_strtod_l+0x244>
 801a8aa:	9905      	ldr	r1, [sp, #20]
 801a8ac:	4419      	add	r1, r3
 801a8ae:	9105      	str	r1, [sp, #20]
 801a8b0:	462b      	mov	r3, r5
 801a8b2:	eb00 0e05 	add.w	lr, r0, r5
 801a8b6:	210a      	movs	r1, #10
 801a8b8:	4573      	cmp	r3, lr
 801a8ba:	d113      	bne.n	801a8e4 <_strtod_l+0x254>
 801a8bc:	182b      	adds	r3, r5, r0
 801a8be:	2b08      	cmp	r3, #8
 801a8c0:	f105 0501 	add.w	r5, r5, #1
 801a8c4:	4405      	add	r5, r0
 801a8c6:	dc1c      	bgt.n	801a902 <_strtod_l+0x272>
 801a8c8:	9907      	ldr	r1, [sp, #28]
 801a8ca:	230a      	movs	r3, #10
 801a8cc:	fb03 2301 	mla	r3, r3, r1, r2
 801a8d0:	9307      	str	r3, [sp, #28]
 801a8d2:	2300      	movs	r3, #0
 801a8d4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a8d6:	1c51      	adds	r1, r2, #1
 801a8d8:	9117      	str	r1, [sp, #92]	; 0x5c
 801a8da:	7852      	ldrb	r2, [r2, #1]
 801a8dc:	4618      	mov	r0, r3
 801a8de:	e7c9      	b.n	801a874 <_strtod_l+0x1e4>
 801a8e0:	4638      	mov	r0, r7
 801a8e2:	e7d2      	b.n	801a88a <_strtod_l+0x1fa>
 801a8e4:	2b08      	cmp	r3, #8
 801a8e6:	dc04      	bgt.n	801a8f2 <_strtod_l+0x262>
 801a8e8:	9e07      	ldr	r6, [sp, #28]
 801a8ea:	434e      	muls	r6, r1
 801a8ec:	9607      	str	r6, [sp, #28]
 801a8ee:	3301      	adds	r3, #1
 801a8f0:	e7e2      	b.n	801a8b8 <_strtod_l+0x228>
 801a8f2:	f103 0c01 	add.w	ip, r3, #1
 801a8f6:	f1bc 0f10 	cmp.w	ip, #16
 801a8fa:	bfd8      	it	le
 801a8fc:	fb01 f909 	mulle.w	r9, r1, r9
 801a900:	e7f5      	b.n	801a8ee <_strtod_l+0x25e>
 801a902:	2d10      	cmp	r5, #16
 801a904:	bfdc      	itt	le
 801a906:	230a      	movle	r3, #10
 801a908:	fb03 2909 	mlale	r9, r3, r9, r2
 801a90c:	e7e1      	b.n	801a8d2 <_strtod_l+0x242>
 801a90e:	2300      	movs	r3, #0
 801a910:	9305      	str	r3, [sp, #20]
 801a912:	2301      	movs	r3, #1
 801a914:	e77c      	b.n	801a810 <_strtod_l+0x180>
 801a916:	f04f 0c00 	mov.w	ip, #0
 801a91a:	f108 0202 	add.w	r2, r8, #2
 801a91e:	9217      	str	r2, [sp, #92]	; 0x5c
 801a920:	f898 2002 	ldrb.w	r2, [r8, #2]
 801a924:	e785      	b.n	801a832 <_strtod_l+0x1a2>
 801a926:	f04f 0c01 	mov.w	ip, #1
 801a92a:	e7f6      	b.n	801a91a <_strtod_l+0x28a>
 801a92c:	08052498 	.word	0x08052498
 801a930:	08052250 	.word	0x08052250
 801a934:	7ff00000 	.word	0x7ff00000
 801a938:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a93a:	1c51      	adds	r1, r2, #1
 801a93c:	9117      	str	r1, [sp, #92]	; 0x5c
 801a93e:	7852      	ldrb	r2, [r2, #1]
 801a940:	2a30      	cmp	r2, #48	; 0x30
 801a942:	d0f9      	beq.n	801a938 <_strtod_l+0x2a8>
 801a944:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801a948:	2908      	cmp	r1, #8
 801a94a:	f63f af79 	bhi.w	801a840 <_strtod_l+0x1b0>
 801a94e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801a952:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a954:	9206      	str	r2, [sp, #24]
 801a956:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a958:	1c51      	adds	r1, r2, #1
 801a95a:	9117      	str	r1, [sp, #92]	; 0x5c
 801a95c:	7852      	ldrb	r2, [r2, #1]
 801a95e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801a962:	2e09      	cmp	r6, #9
 801a964:	d937      	bls.n	801a9d6 <_strtod_l+0x346>
 801a966:	9e06      	ldr	r6, [sp, #24]
 801a968:	1b89      	subs	r1, r1, r6
 801a96a:	2908      	cmp	r1, #8
 801a96c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801a970:	dc02      	bgt.n	801a978 <_strtod_l+0x2e8>
 801a972:	4576      	cmp	r6, lr
 801a974:	bfa8      	it	ge
 801a976:	4676      	movge	r6, lr
 801a978:	f1bc 0f00 	cmp.w	ip, #0
 801a97c:	d000      	beq.n	801a980 <_strtod_l+0x2f0>
 801a97e:	4276      	negs	r6, r6
 801a980:	2d00      	cmp	r5, #0
 801a982:	d14d      	bne.n	801aa20 <_strtod_l+0x390>
 801a984:	9904      	ldr	r1, [sp, #16]
 801a986:	4301      	orrs	r1, r0
 801a988:	f47f aec6 	bne.w	801a718 <_strtod_l+0x88>
 801a98c:	2b00      	cmp	r3, #0
 801a98e:	f47f aee1 	bne.w	801a754 <_strtod_l+0xc4>
 801a992:	2a69      	cmp	r2, #105	; 0x69
 801a994:	d027      	beq.n	801a9e6 <_strtod_l+0x356>
 801a996:	dc24      	bgt.n	801a9e2 <_strtod_l+0x352>
 801a998:	2a49      	cmp	r2, #73	; 0x49
 801a99a:	d024      	beq.n	801a9e6 <_strtod_l+0x356>
 801a99c:	2a4e      	cmp	r2, #78	; 0x4e
 801a99e:	f47f aed9 	bne.w	801a754 <_strtod_l+0xc4>
 801a9a2:	499f      	ldr	r1, [pc, #636]	; (801ac20 <_strtod_l+0x590>)
 801a9a4:	a817      	add	r0, sp, #92	; 0x5c
 801a9a6:	f001 fe49 	bl	801c63c <__match>
 801a9aa:	2800      	cmp	r0, #0
 801a9ac:	f43f aed2 	beq.w	801a754 <_strtod_l+0xc4>
 801a9b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a9b2:	781b      	ldrb	r3, [r3, #0]
 801a9b4:	2b28      	cmp	r3, #40	; 0x28
 801a9b6:	d12d      	bne.n	801aa14 <_strtod_l+0x384>
 801a9b8:	499a      	ldr	r1, [pc, #616]	; (801ac24 <_strtod_l+0x594>)
 801a9ba:	aa1a      	add	r2, sp, #104	; 0x68
 801a9bc:	a817      	add	r0, sp, #92	; 0x5c
 801a9be:	f001 fe51 	bl	801c664 <__hexnan>
 801a9c2:	2805      	cmp	r0, #5
 801a9c4:	d126      	bne.n	801aa14 <_strtod_l+0x384>
 801a9c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a9c8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801a9cc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801a9d0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801a9d4:	e6a0      	b.n	801a718 <_strtod_l+0x88>
 801a9d6:	210a      	movs	r1, #10
 801a9d8:	fb01 2e0e 	mla	lr, r1, lr, r2
 801a9dc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801a9e0:	e7b9      	b.n	801a956 <_strtod_l+0x2c6>
 801a9e2:	2a6e      	cmp	r2, #110	; 0x6e
 801a9e4:	e7db      	b.n	801a99e <_strtod_l+0x30e>
 801a9e6:	4990      	ldr	r1, [pc, #576]	; (801ac28 <_strtod_l+0x598>)
 801a9e8:	a817      	add	r0, sp, #92	; 0x5c
 801a9ea:	f001 fe27 	bl	801c63c <__match>
 801a9ee:	2800      	cmp	r0, #0
 801a9f0:	f43f aeb0 	beq.w	801a754 <_strtod_l+0xc4>
 801a9f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a9f6:	498d      	ldr	r1, [pc, #564]	; (801ac2c <_strtod_l+0x59c>)
 801a9f8:	3b01      	subs	r3, #1
 801a9fa:	a817      	add	r0, sp, #92	; 0x5c
 801a9fc:	9317      	str	r3, [sp, #92]	; 0x5c
 801a9fe:	f001 fe1d 	bl	801c63c <__match>
 801aa02:	b910      	cbnz	r0, 801aa0a <_strtod_l+0x37a>
 801aa04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801aa06:	3301      	adds	r3, #1
 801aa08:	9317      	str	r3, [sp, #92]	; 0x5c
 801aa0a:	f8df b230 	ldr.w	fp, [pc, #560]	; 801ac3c <_strtod_l+0x5ac>
 801aa0e:	f04f 0a00 	mov.w	sl, #0
 801aa12:	e681      	b.n	801a718 <_strtod_l+0x88>
 801aa14:	4886      	ldr	r0, [pc, #536]	; (801ac30 <_strtod_l+0x5a0>)
 801aa16:	f002 fe03 	bl	801d620 <nan>
 801aa1a:	ec5b ab10 	vmov	sl, fp, d0
 801aa1e:	e67b      	b.n	801a718 <_strtod_l+0x88>
 801aa20:	9b05      	ldr	r3, [sp, #20]
 801aa22:	9807      	ldr	r0, [sp, #28]
 801aa24:	1af3      	subs	r3, r6, r3
 801aa26:	2f00      	cmp	r7, #0
 801aa28:	bf08      	it	eq
 801aa2a:	462f      	moveq	r7, r5
 801aa2c:	2d10      	cmp	r5, #16
 801aa2e:	9306      	str	r3, [sp, #24]
 801aa30:	46a8      	mov	r8, r5
 801aa32:	bfa8      	it	ge
 801aa34:	f04f 0810 	movge.w	r8, #16
 801aa38:	f7fe f994 	bl	8018d64 <__aeabi_ui2d>
 801aa3c:	2d09      	cmp	r5, #9
 801aa3e:	4682      	mov	sl, r0
 801aa40:	468b      	mov	fp, r1
 801aa42:	dd13      	ble.n	801aa6c <_strtod_l+0x3dc>
 801aa44:	4b7b      	ldr	r3, [pc, #492]	; (801ac34 <_strtod_l+0x5a4>)
 801aa46:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801aa4a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801aa4e:	f7fe fa03 	bl	8018e58 <__aeabi_dmul>
 801aa52:	4682      	mov	sl, r0
 801aa54:	4648      	mov	r0, r9
 801aa56:	468b      	mov	fp, r1
 801aa58:	f7fe f984 	bl	8018d64 <__aeabi_ui2d>
 801aa5c:	4602      	mov	r2, r0
 801aa5e:	460b      	mov	r3, r1
 801aa60:	4650      	mov	r0, sl
 801aa62:	4659      	mov	r1, fp
 801aa64:	f7fe f842 	bl	8018aec <__adddf3>
 801aa68:	4682      	mov	sl, r0
 801aa6a:	468b      	mov	fp, r1
 801aa6c:	2d0f      	cmp	r5, #15
 801aa6e:	dc38      	bgt.n	801aae2 <_strtod_l+0x452>
 801aa70:	9b06      	ldr	r3, [sp, #24]
 801aa72:	2b00      	cmp	r3, #0
 801aa74:	f43f ae50 	beq.w	801a718 <_strtod_l+0x88>
 801aa78:	dd24      	ble.n	801aac4 <_strtod_l+0x434>
 801aa7a:	2b16      	cmp	r3, #22
 801aa7c:	dc0b      	bgt.n	801aa96 <_strtod_l+0x406>
 801aa7e:	496d      	ldr	r1, [pc, #436]	; (801ac34 <_strtod_l+0x5a4>)
 801aa80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801aa84:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aa88:	4652      	mov	r2, sl
 801aa8a:	465b      	mov	r3, fp
 801aa8c:	f7fe f9e4 	bl	8018e58 <__aeabi_dmul>
 801aa90:	4682      	mov	sl, r0
 801aa92:	468b      	mov	fp, r1
 801aa94:	e640      	b.n	801a718 <_strtod_l+0x88>
 801aa96:	9a06      	ldr	r2, [sp, #24]
 801aa98:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801aa9c:	4293      	cmp	r3, r2
 801aa9e:	db20      	blt.n	801aae2 <_strtod_l+0x452>
 801aaa0:	4c64      	ldr	r4, [pc, #400]	; (801ac34 <_strtod_l+0x5a4>)
 801aaa2:	f1c5 050f 	rsb	r5, r5, #15
 801aaa6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801aaaa:	4652      	mov	r2, sl
 801aaac:	465b      	mov	r3, fp
 801aaae:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aab2:	f7fe f9d1 	bl	8018e58 <__aeabi_dmul>
 801aab6:	9b06      	ldr	r3, [sp, #24]
 801aab8:	1b5d      	subs	r5, r3, r5
 801aaba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801aabe:	e9d4 2300 	ldrd	r2, r3, [r4]
 801aac2:	e7e3      	b.n	801aa8c <_strtod_l+0x3fc>
 801aac4:	9b06      	ldr	r3, [sp, #24]
 801aac6:	3316      	adds	r3, #22
 801aac8:	db0b      	blt.n	801aae2 <_strtod_l+0x452>
 801aaca:	9b05      	ldr	r3, [sp, #20]
 801aacc:	1b9e      	subs	r6, r3, r6
 801aace:	4b59      	ldr	r3, [pc, #356]	; (801ac34 <_strtod_l+0x5a4>)
 801aad0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801aad4:	e9d6 2300 	ldrd	r2, r3, [r6]
 801aad8:	4650      	mov	r0, sl
 801aada:	4659      	mov	r1, fp
 801aadc:	f7fe fae6 	bl	80190ac <__aeabi_ddiv>
 801aae0:	e7d6      	b.n	801aa90 <_strtod_l+0x400>
 801aae2:	9b06      	ldr	r3, [sp, #24]
 801aae4:	eba5 0808 	sub.w	r8, r5, r8
 801aae8:	4498      	add	r8, r3
 801aaea:	f1b8 0f00 	cmp.w	r8, #0
 801aaee:	dd74      	ble.n	801abda <_strtod_l+0x54a>
 801aaf0:	f018 030f 	ands.w	r3, r8, #15
 801aaf4:	d00a      	beq.n	801ab0c <_strtod_l+0x47c>
 801aaf6:	494f      	ldr	r1, [pc, #316]	; (801ac34 <_strtod_l+0x5a4>)
 801aaf8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801aafc:	4652      	mov	r2, sl
 801aafe:	465b      	mov	r3, fp
 801ab00:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ab04:	f7fe f9a8 	bl	8018e58 <__aeabi_dmul>
 801ab08:	4682      	mov	sl, r0
 801ab0a:	468b      	mov	fp, r1
 801ab0c:	f038 080f 	bics.w	r8, r8, #15
 801ab10:	d04f      	beq.n	801abb2 <_strtod_l+0x522>
 801ab12:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801ab16:	dd22      	ble.n	801ab5e <_strtod_l+0x4ce>
 801ab18:	2500      	movs	r5, #0
 801ab1a:	462e      	mov	r6, r5
 801ab1c:	9507      	str	r5, [sp, #28]
 801ab1e:	9505      	str	r5, [sp, #20]
 801ab20:	2322      	movs	r3, #34	; 0x22
 801ab22:	f8df b118 	ldr.w	fp, [pc, #280]	; 801ac3c <_strtod_l+0x5ac>
 801ab26:	6023      	str	r3, [r4, #0]
 801ab28:	f04f 0a00 	mov.w	sl, #0
 801ab2c:	9b07      	ldr	r3, [sp, #28]
 801ab2e:	2b00      	cmp	r3, #0
 801ab30:	f43f adf2 	beq.w	801a718 <_strtod_l+0x88>
 801ab34:	9918      	ldr	r1, [sp, #96]	; 0x60
 801ab36:	4620      	mov	r0, r4
 801ab38:	f001 fe9c 	bl	801c874 <_Bfree>
 801ab3c:	9905      	ldr	r1, [sp, #20]
 801ab3e:	4620      	mov	r0, r4
 801ab40:	f001 fe98 	bl	801c874 <_Bfree>
 801ab44:	4631      	mov	r1, r6
 801ab46:	4620      	mov	r0, r4
 801ab48:	f001 fe94 	bl	801c874 <_Bfree>
 801ab4c:	9907      	ldr	r1, [sp, #28]
 801ab4e:	4620      	mov	r0, r4
 801ab50:	f001 fe90 	bl	801c874 <_Bfree>
 801ab54:	4629      	mov	r1, r5
 801ab56:	4620      	mov	r0, r4
 801ab58:	f001 fe8c 	bl	801c874 <_Bfree>
 801ab5c:	e5dc      	b.n	801a718 <_strtod_l+0x88>
 801ab5e:	4b36      	ldr	r3, [pc, #216]	; (801ac38 <_strtod_l+0x5a8>)
 801ab60:	9304      	str	r3, [sp, #16]
 801ab62:	2300      	movs	r3, #0
 801ab64:	ea4f 1828 	mov.w	r8, r8, asr #4
 801ab68:	4650      	mov	r0, sl
 801ab6a:	4659      	mov	r1, fp
 801ab6c:	4699      	mov	r9, r3
 801ab6e:	f1b8 0f01 	cmp.w	r8, #1
 801ab72:	dc21      	bgt.n	801abb8 <_strtod_l+0x528>
 801ab74:	b10b      	cbz	r3, 801ab7a <_strtod_l+0x4ea>
 801ab76:	4682      	mov	sl, r0
 801ab78:	468b      	mov	fp, r1
 801ab7a:	4b2f      	ldr	r3, [pc, #188]	; (801ac38 <_strtod_l+0x5a8>)
 801ab7c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801ab80:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801ab84:	4652      	mov	r2, sl
 801ab86:	465b      	mov	r3, fp
 801ab88:	e9d9 0100 	ldrd	r0, r1, [r9]
 801ab8c:	f7fe f964 	bl	8018e58 <__aeabi_dmul>
 801ab90:	4b2a      	ldr	r3, [pc, #168]	; (801ac3c <_strtod_l+0x5ac>)
 801ab92:	460a      	mov	r2, r1
 801ab94:	400b      	ands	r3, r1
 801ab96:	492a      	ldr	r1, [pc, #168]	; (801ac40 <_strtod_l+0x5b0>)
 801ab98:	428b      	cmp	r3, r1
 801ab9a:	4682      	mov	sl, r0
 801ab9c:	d8bc      	bhi.n	801ab18 <_strtod_l+0x488>
 801ab9e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801aba2:	428b      	cmp	r3, r1
 801aba4:	bf86      	itte	hi
 801aba6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801ac44 <_strtod_l+0x5b4>
 801abaa:	f04f 3aff 	movhi.w	sl, #4294967295
 801abae:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801abb2:	2300      	movs	r3, #0
 801abb4:	9304      	str	r3, [sp, #16]
 801abb6:	e084      	b.n	801acc2 <_strtod_l+0x632>
 801abb8:	f018 0f01 	tst.w	r8, #1
 801abbc:	d005      	beq.n	801abca <_strtod_l+0x53a>
 801abbe:	9b04      	ldr	r3, [sp, #16]
 801abc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abc4:	f7fe f948 	bl	8018e58 <__aeabi_dmul>
 801abc8:	2301      	movs	r3, #1
 801abca:	9a04      	ldr	r2, [sp, #16]
 801abcc:	3208      	adds	r2, #8
 801abce:	f109 0901 	add.w	r9, r9, #1
 801abd2:	ea4f 0868 	mov.w	r8, r8, asr #1
 801abd6:	9204      	str	r2, [sp, #16]
 801abd8:	e7c9      	b.n	801ab6e <_strtod_l+0x4de>
 801abda:	d0ea      	beq.n	801abb2 <_strtod_l+0x522>
 801abdc:	f1c8 0800 	rsb	r8, r8, #0
 801abe0:	f018 020f 	ands.w	r2, r8, #15
 801abe4:	d00a      	beq.n	801abfc <_strtod_l+0x56c>
 801abe6:	4b13      	ldr	r3, [pc, #76]	; (801ac34 <_strtod_l+0x5a4>)
 801abe8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801abec:	4650      	mov	r0, sl
 801abee:	4659      	mov	r1, fp
 801abf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abf4:	f7fe fa5a 	bl	80190ac <__aeabi_ddiv>
 801abf8:	4682      	mov	sl, r0
 801abfa:	468b      	mov	fp, r1
 801abfc:	ea5f 1828 	movs.w	r8, r8, asr #4
 801ac00:	d0d7      	beq.n	801abb2 <_strtod_l+0x522>
 801ac02:	f1b8 0f1f 	cmp.w	r8, #31
 801ac06:	dd1f      	ble.n	801ac48 <_strtod_l+0x5b8>
 801ac08:	2500      	movs	r5, #0
 801ac0a:	462e      	mov	r6, r5
 801ac0c:	9507      	str	r5, [sp, #28]
 801ac0e:	9505      	str	r5, [sp, #20]
 801ac10:	2322      	movs	r3, #34	; 0x22
 801ac12:	f04f 0a00 	mov.w	sl, #0
 801ac16:	f04f 0b00 	mov.w	fp, #0
 801ac1a:	6023      	str	r3, [r4, #0]
 801ac1c:	e786      	b.n	801ab2c <_strtod_l+0x49c>
 801ac1e:	bf00      	nop
 801ac20:	08052221 	.word	0x08052221
 801ac24:	08052264 	.word	0x08052264
 801ac28:	08052219 	.word	0x08052219
 801ac2c:	080523a4 	.word	0x080523a4
 801ac30:	08052650 	.word	0x08052650
 801ac34:	08052530 	.word	0x08052530
 801ac38:	08052508 	.word	0x08052508
 801ac3c:	7ff00000 	.word	0x7ff00000
 801ac40:	7ca00000 	.word	0x7ca00000
 801ac44:	7fefffff 	.word	0x7fefffff
 801ac48:	f018 0310 	ands.w	r3, r8, #16
 801ac4c:	bf18      	it	ne
 801ac4e:	236a      	movne	r3, #106	; 0x6a
 801ac50:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 801b000 <_strtod_l+0x970>
 801ac54:	9304      	str	r3, [sp, #16]
 801ac56:	4650      	mov	r0, sl
 801ac58:	4659      	mov	r1, fp
 801ac5a:	2300      	movs	r3, #0
 801ac5c:	f018 0f01 	tst.w	r8, #1
 801ac60:	d004      	beq.n	801ac6c <_strtod_l+0x5dc>
 801ac62:	e9d9 2300 	ldrd	r2, r3, [r9]
 801ac66:	f7fe f8f7 	bl	8018e58 <__aeabi_dmul>
 801ac6a:	2301      	movs	r3, #1
 801ac6c:	ea5f 0868 	movs.w	r8, r8, asr #1
 801ac70:	f109 0908 	add.w	r9, r9, #8
 801ac74:	d1f2      	bne.n	801ac5c <_strtod_l+0x5cc>
 801ac76:	b10b      	cbz	r3, 801ac7c <_strtod_l+0x5ec>
 801ac78:	4682      	mov	sl, r0
 801ac7a:	468b      	mov	fp, r1
 801ac7c:	9b04      	ldr	r3, [sp, #16]
 801ac7e:	b1c3      	cbz	r3, 801acb2 <_strtod_l+0x622>
 801ac80:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801ac84:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801ac88:	2b00      	cmp	r3, #0
 801ac8a:	4659      	mov	r1, fp
 801ac8c:	dd11      	ble.n	801acb2 <_strtod_l+0x622>
 801ac8e:	2b1f      	cmp	r3, #31
 801ac90:	f340 8124 	ble.w	801aedc <_strtod_l+0x84c>
 801ac94:	2b34      	cmp	r3, #52	; 0x34
 801ac96:	bfde      	ittt	le
 801ac98:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801ac9c:	f04f 33ff 	movle.w	r3, #4294967295
 801aca0:	fa03 f202 	lslle.w	r2, r3, r2
 801aca4:	f04f 0a00 	mov.w	sl, #0
 801aca8:	bfcc      	ite	gt
 801acaa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801acae:	ea02 0b01 	andle.w	fp, r2, r1
 801acb2:	2200      	movs	r2, #0
 801acb4:	2300      	movs	r3, #0
 801acb6:	4650      	mov	r0, sl
 801acb8:	4659      	mov	r1, fp
 801acba:	f7fe fb35 	bl	8019328 <__aeabi_dcmpeq>
 801acbe:	2800      	cmp	r0, #0
 801acc0:	d1a2      	bne.n	801ac08 <_strtod_l+0x578>
 801acc2:	9b07      	ldr	r3, [sp, #28]
 801acc4:	9300      	str	r3, [sp, #0]
 801acc6:	9908      	ldr	r1, [sp, #32]
 801acc8:	462b      	mov	r3, r5
 801acca:	463a      	mov	r2, r7
 801accc:	4620      	mov	r0, r4
 801acce:	f001 fe39 	bl	801c944 <__s2b>
 801acd2:	9007      	str	r0, [sp, #28]
 801acd4:	2800      	cmp	r0, #0
 801acd6:	f43f af1f 	beq.w	801ab18 <_strtod_l+0x488>
 801acda:	9b05      	ldr	r3, [sp, #20]
 801acdc:	1b9e      	subs	r6, r3, r6
 801acde:	9b06      	ldr	r3, [sp, #24]
 801ace0:	2b00      	cmp	r3, #0
 801ace2:	bfb4      	ite	lt
 801ace4:	4633      	movlt	r3, r6
 801ace6:	2300      	movge	r3, #0
 801ace8:	930c      	str	r3, [sp, #48]	; 0x30
 801acea:	9b06      	ldr	r3, [sp, #24]
 801acec:	2500      	movs	r5, #0
 801acee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801acf2:	9312      	str	r3, [sp, #72]	; 0x48
 801acf4:	462e      	mov	r6, r5
 801acf6:	9b07      	ldr	r3, [sp, #28]
 801acf8:	4620      	mov	r0, r4
 801acfa:	6859      	ldr	r1, [r3, #4]
 801acfc:	f001 fd7a 	bl	801c7f4 <_Balloc>
 801ad00:	9005      	str	r0, [sp, #20]
 801ad02:	2800      	cmp	r0, #0
 801ad04:	f43f af0c 	beq.w	801ab20 <_strtod_l+0x490>
 801ad08:	9b07      	ldr	r3, [sp, #28]
 801ad0a:	691a      	ldr	r2, [r3, #16]
 801ad0c:	3202      	adds	r2, #2
 801ad0e:	f103 010c 	add.w	r1, r3, #12
 801ad12:	0092      	lsls	r2, r2, #2
 801ad14:	300c      	adds	r0, #12
 801ad16:	f001 fd5f 	bl	801c7d8 <memcpy>
 801ad1a:	ec4b ab10 	vmov	d0, sl, fp
 801ad1e:	aa1a      	add	r2, sp, #104	; 0x68
 801ad20:	a919      	add	r1, sp, #100	; 0x64
 801ad22:	4620      	mov	r0, r4
 801ad24:	f002 f954 	bl	801cfd0 <__d2b>
 801ad28:	ec4b ab18 	vmov	d8, sl, fp
 801ad2c:	9018      	str	r0, [sp, #96]	; 0x60
 801ad2e:	2800      	cmp	r0, #0
 801ad30:	f43f aef6 	beq.w	801ab20 <_strtod_l+0x490>
 801ad34:	2101      	movs	r1, #1
 801ad36:	4620      	mov	r0, r4
 801ad38:	f001 fe9e 	bl	801ca78 <__i2b>
 801ad3c:	4606      	mov	r6, r0
 801ad3e:	2800      	cmp	r0, #0
 801ad40:	f43f aeee 	beq.w	801ab20 <_strtod_l+0x490>
 801ad44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801ad46:	9904      	ldr	r1, [sp, #16]
 801ad48:	2b00      	cmp	r3, #0
 801ad4a:	bfab      	itete	ge
 801ad4c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801ad4e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 801ad50:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801ad52:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801ad56:	bfac      	ite	ge
 801ad58:	eb03 0902 	addge.w	r9, r3, r2
 801ad5c:	1ad7      	sublt	r7, r2, r3
 801ad5e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801ad60:	eba3 0801 	sub.w	r8, r3, r1
 801ad64:	4490      	add	r8, r2
 801ad66:	4ba1      	ldr	r3, [pc, #644]	; (801afec <_strtod_l+0x95c>)
 801ad68:	f108 38ff 	add.w	r8, r8, #4294967295
 801ad6c:	4598      	cmp	r8, r3
 801ad6e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801ad72:	f280 80c7 	bge.w	801af04 <_strtod_l+0x874>
 801ad76:	eba3 0308 	sub.w	r3, r3, r8
 801ad7a:	2b1f      	cmp	r3, #31
 801ad7c:	eba2 0203 	sub.w	r2, r2, r3
 801ad80:	f04f 0101 	mov.w	r1, #1
 801ad84:	f300 80b1 	bgt.w	801aeea <_strtod_l+0x85a>
 801ad88:	fa01 f303 	lsl.w	r3, r1, r3
 801ad8c:	930d      	str	r3, [sp, #52]	; 0x34
 801ad8e:	2300      	movs	r3, #0
 801ad90:	9308      	str	r3, [sp, #32]
 801ad92:	eb09 0802 	add.w	r8, r9, r2
 801ad96:	9b04      	ldr	r3, [sp, #16]
 801ad98:	45c1      	cmp	r9, r8
 801ad9a:	4417      	add	r7, r2
 801ad9c:	441f      	add	r7, r3
 801ad9e:	464b      	mov	r3, r9
 801ada0:	bfa8      	it	ge
 801ada2:	4643      	movge	r3, r8
 801ada4:	42bb      	cmp	r3, r7
 801ada6:	bfa8      	it	ge
 801ada8:	463b      	movge	r3, r7
 801adaa:	2b00      	cmp	r3, #0
 801adac:	bfc2      	ittt	gt
 801adae:	eba8 0803 	subgt.w	r8, r8, r3
 801adb2:	1aff      	subgt	r7, r7, r3
 801adb4:	eba9 0903 	subgt.w	r9, r9, r3
 801adb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801adba:	2b00      	cmp	r3, #0
 801adbc:	dd17      	ble.n	801adee <_strtod_l+0x75e>
 801adbe:	4631      	mov	r1, r6
 801adc0:	461a      	mov	r2, r3
 801adc2:	4620      	mov	r0, r4
 801adc4:	f001 ff18 	bl	801cbf8 <__pow5mult>
 801adc8:	4606      	mov	r6, r0
 801adca:	2800      	cmp	r0, #0
 801adcc:	f43f aea8 	beq.w	801ab20 <_strtod_l+0x490>
 801add0:	4601      	mov	r1, r0
 801add2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801add4:	4620      	mov	r0, r4
 801add6:	f001 fe65 	bl	801caa4 <__multiply>
 801adda:	900b      	str	r0, [sp, #44]	; 0x2c
 801addc:	2800      	cmp	r0, #0
 801adde:	f43f ae9f 	beq.w	801ab20 <_strtod_l+0x490>
 801ade2:	9918      	ldr	r1, [sp, #96]	; 0x60
 801ade4:	4620      	mov	r0, r4
 801ade6:	f001 fd45 	bl	801c874 <_Bfree>
 801adea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801adec:	9318      	str	r3, [sp, #96]	; 0x60
 801adee:	f1b8 0f00 	cmp.w	r8, #0
 801adf2:	f300 808c 	bgt.w	801af0e <_strtod_l+0x87e>
 801adf6:	9b06      	ldr	r3, [sp, #24]
 801adf8:	2b00      	cmp	r3, #0
 801adfa:	dd08      	ble.n	801ae0e <_strtod_l+0x77e>
 801adfc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801adfe:	9905      	ldr	r1, [sp, #20]
 801ae00:	4620      	mov	r0, r4
 801ae02:	f001 fef9 	bl	801cbf8 <__pow5mult>
 801ae06:	9005      	str	r0, [sp, #20]
 801ae08:	2800      	cmp	r0, #0
 801ae0a:	f43f ae89 	beq.w	801ab20 <_strtod_l+0x490>
 801ae0e:	2f00      	cmp	r7, #0
 801ae10:	dd08      	ble.n	801ae24 <_strtod_l+0x794>
 801ae12:	9905      	ldr	r1, [sp, #20]
 801ae14:	463a      	mov	r2, r7
 801ae16:	4620      	mov	r0, r4
 801ae18:	f001 ff48 	bl	801ccac <__lshift>
 801ae1c:	9005      	str	r0, [sp, #20]
 801ae1e:	2800      	cmp	r0, #0
 801ae20:	f43f ae7e 	beq.w	801ab20 <_strtod_l+0x490>
 801ae24:	f1b9 0f00 	cmp.w	r9, #0
 801ae28:	dd08      	ble.n	801ae3c <_strtod_l+0x7ac>
 801ae2a:	4631      	mov	r1, r6
 801ae2c:	464a      	mov	r2, r9
 801ae2e:	4620      	mov	r0, r4
 801ae30:	f001 ff3c 	bl	801ccac <__lshift>
 801ae34:	4606      	mov	r6, r0
 801ae36:	2800      	cmp	r0, #0
 801ae38:	f43f ae72 	beq.w	801ab20 <_strtod_l+0x490>
 801ae3c:	9a05      	ldr	r2, [sp, #20]
 801ae3e:	9918      	ldr	r1, [sp, #96]	; 0x60
 801ae40:	4620      	mov	r0, r4
 801ae42:	f001 ffbf 	bl	801cdc4 <__mdiff>
 801ae46:	4605      	mov	r5, r0
 801ae48:	2800      	cmp	r0, #0
 801ae4a:	f43f ae69 	beq.w	801ab20 <_strtod_l+0x490>
 801ae4e:	68c3      	ldr	r3, [r0, #12]
 801ae50:	930b      	str	r3, [sp, #44]	; 0x2c
 801ae52:	2300      	movs	r3, #0
 801ae54:	60c3      	str	r3, [r0, #12]
 801ae56:	4631      	mov	r1, r6
 801ae58:	f001 ff98 	bl	801cd8c <__mcmp>
 801ae5c:	2800      	cmp	r0, #0
 801ae5e:	da60      	bge.n	801af22 <_strtod_l+0x892>
 801ae60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ae62:	ea53 030a 	orrs.w	r3, r3, sl
 801ae66:	f040 8082 	bne.w	801af6e <_strtod_l+0x8de>
 801ae6a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ae6e:	2b00      	cmp	r3, #0
 801ae70:	d17d      	bne.n	801af6e <_strtod_l+0x8de>
 801ae72:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801ae76:	0d1b      	lsrs	r3, r3, #20
 801ae78:	051b      	lsls	r3, r3, #20
 801ae7a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801ae7e:	d976      	bls.n	801af6e <_strtod_l+0x8de>
 801ae80:	696b      	ldr	r3, [r5, #20]
 801ae82:	b913      	cbnz	r3, 801ae8a <_strtod_l+0x7fa>
 801ae84:	692b      	ldr	r3, [r5, #16]
 801ae86:	2b01      	cmp	r3, #1
 801ae88:	dd71      	ble.n	801af6e <_strtod_l+0x8de>
 801ae8a:	4629      	mov	r1, r5
 801ae8c:	2201      	movs	r2, #1
 801ae8e:	4620      	mov	r0, r4
 801ae90:	f001 ff0c 	bl	801ccac <__lshift>
 801ae94:	4631      	mov	r1, r6
 801ae96:	4605      	mov	r5, r0
 801ae98:	f001 ff78 	bl	801cd8c <__mcmp>
 801ae9c:	2800      	cmp	r0, #0
 801ae9e:	dd66      	ble.n	801af6e <_strtod_l+0x8de>
 801aea0:	9904      	ldr	r1, [sp, #16]
 801aea2:	4a53      	ldr	r2, [pc, #332]	; (801aff0 <_strtod_l+0x960>)
 801aea4:	465b      	mov	r3, fp
 801aea6:	2900      	cmp	r1, #0
 801aea8:	f000 8081 	beq.w	801afae <_strtod_l+0x91e>
 801aeac:	ea02 010b 	and.w	r1, r2, fp
 801aeb0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801aeb4:	dc7b      	bgt.n	801afae <_strtod_l+0x91e>
 801aeb6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801aeba:	f77f aea9 	ble.w	801ac10 <_strtod_l+0x580>
 801aebe:	4b4d      	ldr	r3, [pc, #308]	; (801aff4 <_strtod_l+0x964>)
 801aec0:	4650      	mov	r0, sl
 801aec2:	4659      	mov	r1, fp
 801aec4:	2200      	movs	r2, #0
 801aec6:	f7fd ffc7 	bl	8018e58 <__aeabi_dmul>
 801aeca:	460b      	mov	r3, r1
 801aecc:	4303      	orrs	r3, r0
 801aece:	bf08      	it	eq
 801aed0:	2322      	moveq	r3, #34	; 0x22
 801aed2:	4682      	mov	sl, r0
 801aed4:	468b      	mov	fp, r1
 801aed6:	bf08      	it	eq
 801aed8:	6023      	streq	r3, [r4, #0]
 801aeda:	e62b      	b.n	801ab34 <_strtod_l+0x4a4>
 801aedc:	f04f 32ff 	mov.w	r2, #4294967295
 801aee0:	fa02 f303 	lsl.w	r3, r2, r3
 801aee4:	ea03 0a0a 	and.w	sl, r3, sl
 801aee8:	e6e3      	b.n	801acb2 <_strtod_l+0x622>
 801aeea:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801aeee:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801aef2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801aef6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801aefa:	fa01 f308 	lsl.w	r3, r1, r8
 801aefe:	9308      	str	r3, [sp, #32]
 801af00:	910d      	str	r1, [sp, #52]	; 0x34
 801af02:	e746      	b.n	801ad92 <_strtod_l+0x702>
 801af04:	2300      	movs	r3, #0
 801af06:	9308      	str	r3, [sp, #32]
 801af08:	2301      	movs	r3, #1
 801af0a:	930d      	str	r3, [sp, #52]	; 0x34
 801af0c:	e741      	b.n	801ad92 <_strtod_l+0x702>
 801af0e:	9918      	ldr	r1, [sp, #96]	; 0x60
 801af10:	4642      	mov	r2, r8
 801af12:	4620      	mov	r0, r4
 801af14:	f001 feca 	bl	801ccac <__lshift>
 801af18:	9018      	str	r0, [sp, #96]	; 0x60
 801af1a:	2800      	cmp	r0, #0
 801af1c:	f47f af6b 	bne.w	801adf6 <_strtod_l+0x766>
 801af20:	e5fe      	b.n	801ab20 <_strtod_l+0x490>
 801af22:	465f      	mov	r7, fp
 801af24:	d16e      	bne.n	801b004 <_strtod_l+0x974>
 801af26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801af28:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801af2c:	b342      	cbz	r2, 801af80 <_strtod_l+0x8f0>
 801af2e:	4a32      	ldr	r2, [pc, #200]	; (801aff8 <_strtod_l+0x968>)
 801af30:	4293      	cmp	r3, r2
 801af32:	d128      	bne.n	801af86 <_strtod_l+0x8f6>
 801af34:	9b04      	ldr	r3, [sp, #16]
 801af36:	4651      	mov	r1, sl
 801af38:	b1eb      	cbz	r3, 801af76 <_strtod_l+0x8e6>
 801af3a:	4b2d      	ldr	r3, [pc, #180]	; (801aff0 <_strtod_l+0x960>)
 801af3c:	403b      	ands	r3, r7
 801af3e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801af42:	f04f 32ff 	mov.w	r2, #4294967295
 801af46:	d819      	bhi.n	801af7c <_strtod_l+0x8ec>
 801af48:	0d1b      	lsrs	r3, r3, #20
 801af4a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801af4e:	fa02 f303 	lsl.w	r3, r2, r3
 801af52:	4299      	cmp	r1, r3
 801af54:	d117      	bne.n	801af86 <_strtod_l+0x8f6>
 801af56:	4b29      	ldr	r3, [pc, #164]	; (801affc <_strtod_l+0x96c>)
 801af58:	429f      	cmp	r7, r3
 801af5a:	d102      	bne.n	801af62 <_strtod_l+0x8d2>
 801af5c:	3101      	adds	r1, #1
 801af5e:	f43f addf 	beq.w	801ab20 <_strtod_l+0x490>
 801af62:	4b23      	ldr	r3, [pc, #140]	; (801aff0 <_strtod_l+0x960>)
 801af64:	403b      	ands	r3, r7
 801af66:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801af6a:	f04f 0a00 	mov.w	sl, #0
 801af6e:	9b04      	ldr	r3, [sp, #16]
 801af70:	2b00      	cmp	r3, #0
 801af72:	d1a4      	bne.n	801aebe <_strtod_l+0x82e>
 801af74:	e5de      	b.n	801ab34 <_strtod_l+0x4a4>
 801af76:	f04f 33ff 	mov.w	r3, #4294967295
 801af7a:	e7ea      	b.n	801af52 <_strtod_l+0x8c2>
 801af7c:	4613      	mov	r3, r2
 801af7e:	e7e8      	b.n	801af52 <_strtod_l+0x8c2>
 801af80:	ea53 030a 	orrs.w	r3, r3, sl
 801af84:	d08c      	beq.n	801aea0 <_strtod_l+0x810>
 801af86:	9b08      	ldr	r3, [sp, #32]
 801af88:	b1db      	cbz	r3, 801afc2 <_strtod_l+0x932>
 801af8a:	423b      	tst	r3, r7
 801af8c:	d0ef      	beq.n	801af6e <_strtod_l+0x8de>
 801af8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801af90:	9a04      	ldr	r2, [sp, #16]
 801af92:	4650      	mov	r0, sl
 801af94:	4659      	mov	r1, fp
 801af96:	b1c3      	cbz	r3, 801afca <_strtod_l+0x93a>
 801af98:	f7ff fb5e 	bl	801a658 <sulp>
 801af9c:	4602      	mov	r2, r0
 801af9e:	460b      	mov	r3, r1
 801afa0:	ec51 0b18 	vmov	r0, r1, d8
 801afa4:	f7fd fda2 	bl	8018aec <__adddf3>
 801afa8:	4682      	mov	sl, r0
 801afaa:	468b      	mov	fp, r1
 801afac:	e7df      	b.n	801af6e <_strtod_l+0x8de>
 801afae:	4013      	ands	r3, r2
 801afb0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801afb4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801afb8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801afbc:	f04f 3aff 	mov.w	sl, #4294967295
 801afc0:	e7d5      	b.n	801af6e <_strtod_l+0x8de>
 801afc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801afc4:	ea13 0f0a 	tst.w	r3, sl
 801afc8:	e7e0      	b.n	801af8c <_strtod_l+0x8fc>
 801afca:	f7ff fb45 	bl	801a658 <sulp>
 801afce:	4602      	mov	r2, r0
 801afd0:	460b      	mov	r3, r1
 801afd2:	ec51 0b18 	vmov	r0, r1, d8
 801afd6:	f7fd fd87 	bl	8018ae8 <__aeabi_dsub>
 801afda:	2200      	movs	r2, #0
 801afdc:	2300      	movs	r3, #0
 801afde:	4682      	mov	sl, r0
 801afe0:	468b      	mov	fp, r1
 801afe2:	f7fe f9a1 	bl	8019328 <__aeabi_dcmpeq>
 801afe6:	2800      	cmp	r0, #0
 801afe8:	d0c1      	beq.n	801af6e <_strtod_l+0x8de>
 801afea:	e611      	b.n	801ac10 <_strtod_l+0x580>
 801afec:	fffffc02 	.word	0xfffffc02
 801aff0:	7ff00000 	.word	0x7ff00000
 801aff4:	39500000 	.word	0x39500000
 801aff8:	000fffff 	.word	0x000fffff
 801affc:	7fefffff 	.word	0x7fefffff
 801b000:	08052278 	.word	0x08052278
 801b004:	4631      	mov	r1, r6
 801b006:	4628      	mov	r0, r5
 801b008:	f002 f83e 	bl	801d088 <__ratio>
 801b00c:	ec59 8b10 	vmov	r8, r9, d0
 801b010:	ee10 0a10 	vmov	r0, s0
 801b014:	2200      	movs	r2, #0
 801b016:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b01a:	4649      	mov	r1, r9
 801b01c:	f7fe f998 	bl	8019350 <__aeabi_dcmple>
 801b020:	2800      	cmp	r0, #0
 801b022:	d07a      	beq.n	801b11a <_strtod_l+0xa8a>
 801b024:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b026:	2b00      	cmp	r3, #0
 801b028:	d04a      	beq.n	801b0c0 <_strtod_l+0xa30>
 801b02a:	4b95      	ldr	r3, [pc, #596]	; (801b280 <_strtod_l+0xbf0>)
 801b02c:	2200      	movs	r2, #0
 801b02e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b032:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801b280 <_strtod_l+0xbf0>
 801b036:	f04f 0800 	mov.w	r8, #0
 801b03a:	4b92      	ldr	r3, [pc, #584]	; (801b284 <_strtod_l+0xbf4>)
 801b03c:	403b      	ands	r3, r7
 801b03e:	930d      	str	r3, [sp, #52]	; 0x34
 801b040:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b042:	4b91      	ldr	r3, [pc, #580]	; (801b288 <_strtod_l+0xbf8>)
 801b044:	429a      	cmp	r2, r3
 801b046:	f040 80b0 	bne.w	801b1aa <_strtod_l+0xb1a>
 801b04a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b04e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801b052:	ec4b ab10 	vmov	d0, sl, fp
 801b056:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b05a:	f001 ff3d 	bl	801ced8 <__ulp>
 801b05e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b062:	ec53 2b10 	vmov	r2, r3, d0
 801b066:	f7fd fef7 	bl	8018e58 <__aeabi_dmul>
 801b06a:	4652      	mov	r2, sl
 801b06c:	465b      	mov	r3, fp
 801b06e:	f7fd fd3d 	bl	8018aec <__adddf3>
 801b072:	460b      	mov	r3, r1
 801b074:	4983      	ldr	r1, [pc, #524]	; (801b284 <_strtod_l+0xbf4>)
 801b076:	4a85      	ldr	r2, [pc, #532]	; (801b28c <_strtod_l+0xbfc>)
 801b078:	4019      	ands	r1, r3
 801b07a:	4291      	cmp	r1, r2
 801b07c:	4682      	mov	sl, r0
 801b07e:	d960      	bls.n	801b142 <_strtod_l+0xab2>
 801b080:	ee18 3a90 	vmov	r3, s17
 801b084:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801b088:	4293      	cmp	r3, r2
 801b08a:	d104      	bne.n	801b096 <_strtod_l+0xa06>
 801b08c:	ee18 3a10 	vmov	r3, s16
 801b090:	3301      	adds	r3, #1
 801b092:	f43f ad45 	beq.w	801ab20 <_strtod_l+0x490>
 801b096:	f8df b200 	ldr.w	fp, [pc, #512]	; 801b298 <_strtod_l+0xc08>
 801b09a:	f04f 3aff 	mov.w	sl, #4294967295
 801b09e:	9918      	ldr	r1, [sp, #96]	; 0x60
 801b0a0:	4620      	mov	r0, r4
 801b0a2:	f001 fbe7 	bl	801c874 <_Bfree>
 801b0a6:	9905      	ldr	r1, [sp, #20]
 801b0a8:	4620      	mov	r0, r4
 801b0aa:	f001 fbe3 	bl	801c874 <_Bfree>
 801b0ae:	4631      	mov	r1, r6
 801b0b0:	4620      	mov	r0, r4
 801b0b2:	f001 fbdf 	bl	801c874 <_Bfree>
 801b0b6:	4629      	mov	r1, r5
 801b0b8:	4620      	mov	r0, r4
 801b0ba:	f001 fbdb 	bl	801c874 <_Bfree>
 801b0be:	e61a      	b.n	801acf6 <_strtod_l+0x666>
 801b0c0:	f1ba 0f00 	cmp.w	sl, #0
 801b0c4:	d11b      	bne.n	801b0fe <_strtod_l+0xa6e>
 801b0c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b0ca:	b9f3      	cbnz	r3, 801b10a <_strtod_l+0xa7a>
 801b0cc:	4b6c      	ldr	r3, [pc, #432]	; (801b280 <_strtod_l+0xbf0>)
 801b0ce:	2200      	movs	r2, #0
 801b0d0:	4640      	mov	r0, r8
 801b0d2:	4649      	mov	r1, r9
 801b0d4:	f7fe f932 	bl	801933c <__aeabi_dcmplt>
 801b0d8:	b9d0      	cbnz	r0, 801b110 <_strtod_l+0xa80>
 801b0da:	4640      	mov	r0, r8
 801b0dc:	4649      	mov	r1, r9
 801b0de:	4b6c      	ldr	r3, [pc, #432]	; (801b290 <_strtod_l+0xc00>)
 801b0e0:	2200      	movs	r2, #0
 801b0e2:	f7fd feb9 	bl	8018e58 <__aeabi_dmul>
 801b0e6:	4680      	mov	r8, r0
 801b0e8:	4689      	mov	r9, r1
 801b0ea:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801b0ee:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801b0f2:	9315      	str	r3, [sp, #84]	; 0x54
 801b0f4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801b0f8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b0fc:	e79d      	b.n	801b03a <_strtod_l+0x9aa>
 801b0fe:	f1ba 0f01 	cmp.w	sl, #1
 801b102:	d102      	bne.n	801b10a <_strtod_l+0xa7a>
 801b104:	2f00      	cmp	r7, #0
 801b106:	f43f ad83 	beq.w	801ac10 <_strtod_l+0x580>
 801b10a:	4b62      	ldr	r3, [pc, #392]	; (801b294 <_strtod_l+0xc04>)
 801b10c:	2200      	movs	r2, #0
 801b10e:	e78e      	b.n	801b02e <_strtod_l+0x99e>
 801b110:	f8df 917c 	ldr.w	r9, [pc, #380]	; 801b290 <_strtod_l+0xc00>
 801b114:	f04f 0800 	mov.w	r8, #0
 801b118:	e7e7      	b.n	801b0ea <_strtod_l+0xa5a>
 801b11a:	4b5d      	ldr	r3, [pc, #372]	; (801b290 <_strtod_l+0xc00>)
 801b11c:	4640      	mov	r0, r8
 801b11e:	4649      	mov	r1, r9
 801b120:	2200      	movs	r2, #0
 801b122:	f7fd fe99 	bl	8018e58 <__aeabi_dmul>
 801b126:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b128:	4680      	mov	r8, r0
 801b12a:	4689      	mov	r9, r1
 801b12c:	b933      	cbnz	r3, 801b13c <_strtod_l+0xaac>
 801b12e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b132:	900e      	str	r0, [sp, #56]	; 0x38
 801b134:	930f      	str	r3, [sp, #60]	; 0x3c
 801b136:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801b13a:	e7dd      	b.n	801b0f8 <_strtod_l+0xa68>
 801b13c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 801b140:	e7f9      	b.n	801b136 <_strtod_l+0xaa6>
 801b142:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801b146:	9b04      	ldr	r3, [sp, #16]
 801b148:	2b00      	cmp	r3, #0
 801b14a:	d1a8      	bne.n	801b09e <_strtod_l+0xa0e>
 801b14c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b150:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b152:	0d1b      	lsrs	r3, r3, #20
 801b154:	051b      	lsls	r3, r3, #20
 801b156:	429a      	cmp	r2, r3
 801b158:	d1a1      	bne.n	801b09e <_strtod_l+0xa0e>
 801b15a:	4640      	mov	r0, r8
 801b15c:	4649      	mov	r1, r9
 801b15e:	f7fe f9c3 	bl	80194e8 <__aeabi_d2lz>
 801b162:	f7fd fe4b 	bl	8018dfc <__aeabi_l2d>
 801b166:	4602      	mov	r2, r0
 801b168:	460b      	mov	r3, r1
 801b16a:	4640      	mov	r0, r8
 801b16c:	4649      	mov	r1, r9
 801b16e:	f7fd fcbb 	bl	8018ae8 <__aeabi_dsub>
 801b172:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b174:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b178:	ea43 030a 	orr.w	r3, r3, sl
 801b17c:	4313      	orrs	r3, r2
 801b17e:	4680      	mov	r8, r0
 801b180:	4689      	mov	r9, r1
 801b182:	d055      	beq.n	801b230 <_strtod_l+0xba0>
 801b184:	a336      	add	r3, pc, #216	; (adr r3, 801b260 <_strtod_l+0xbd0>)
 801b186:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b18a:	f7fe f8d7 	bl	801933c <__aeabi_dcmplt>
 801b18e:	2800      	cmp	r0, #0
 801b190:	f47f acd0 	bne.w	801ab34 <_strtod_l+0x4a4>
 801b194:	a334      	add	r3, pc, #208	; (adr r3, 801b268 <_strtod_l+0xbd8>)
 801b196:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b19a:	4640      	mov	r0, r8
 801b19c:	4649      	mov	r1, r9
 801b19e:	f7fe f8eb 	bl	8019378 <__aeabi_dcmpgt>
 801b1a2:	2800      	cmp	r0, #0
 801b1a4:	f43f af7b 	beq.w	801b09e <_strtod_l+0xa0e>
 801b1a8:	e4c4      	b.n	801ab34 <_strtod_l+0x4a4>
 801b1aa:	9b04      	ldr	r3, [sp, #16]
 801b1ac:	b333      	cbz	r3, 801b1fc <_strtod_l+0xb6c>
 801b1ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b1b0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801b1b4:	d822      	bhi.n	801b1fc <_strtod_l+0xb6c>
 801b1b6:	a32e      	add	r3, pc, #184	; (adr r3, 801b270 <_strtod_l+0xbe0>)
 801b1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1bc:	4640      	mov	r0, r8
 801b1be:	4649      	mov	r1, r9
 801b1c0:	f7fe f8c6 	bl	8019350 <__aeabi_dcmple>
 801b1c4:	b1a0      	cbz	r0, 801b1f0 <_strtod_l+0xb60>
 801b1c6:	4649      	mov	r1, r9
 801b1c8:	4640      	mov	r0, r8
 801b1ca:	f7fe f91d 	bl	8019408 <__aeabi_d2uiz>
 801b1ce:	2801      	cmp	r0, #1
 801b1d0:	bf38      	it	cc
 801b1d2:	2001      	movcc	r0, #1
 801b1d4:	f7fd fdc6 	bl	8018d64 <__aeabi_ui2d>
 801b1d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b1da:	4680      	mov	r8, r0
 801b1dc:	4689      	mov	r9, r1
 801b1de:	bb23      	cbnz	r3, 801b22a <_strtod_l+0xb9a>
 801b1e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b1e4:	9010      	str	r0, [sp, #64]	; 0x40
 801b1e6:	9311      	str	r3, [sp, #68]	; 0x44
 801b1e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801b1ec:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b1f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b1f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b1f4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801b1f8:	1a9b      	subs	r3, r3, r2
 801b1fa:	9309      	str	r3, [sp, #36]	; 0x24
 801b1fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b200:	eeb0 0a48 	vmov.f32	s0, s16
 801b204:	eef0 0a68 	vmov.f32	s1, s17
 801b208:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b20c:	f001 fe64 	bl	801ced8 <__ulp>
 801b210:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b214:	ec53 2b10 	vmov	r2, r3, d0
 801b218:	f7fd fe1e 	bl	8018e58 <__aeabi_dmul>
 801b21c:	ec53 2b18 	vmov	r2, r3, d8
 801b220:	f7fd fc64 	bl	8018aec <__adddf3>
 801b224:	4682      	mov	sl, r0
 801b226:	468b      	mov	fp, r1
 801b228:	e78d      	b.n	801b146 <_strtod_l+0xab6>
 801b22a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801b22e:	e7db      	b.n	801b1e8 <_strtod_l+0xb58>
 801b230:	a311      	add	r3, pc, #68	; (adr r3, 801b278 <_strtod_l+0xbe8>)
 801b232:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b236:	f7fe f881 	bl	801933c <__aeabi_dcmplt>
 801b23a:	e7b2      	b.n	801b1a2 <_strtod_l+0xb12>
 801b23c:	2300      	movs	r3, #0
 801b23e:	930a      	str	r3, [sp, #40]	; 0x28
 801b240:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b242:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b244:	6013      	str	r3, [r2, #0]
 801b246:	f7ff ba6b 	b.w	801a720 <_strtod_l+0x90>
 801b24a:	2a65      	cmp	r2, #101	; 0x65
 801b24c:	f43f ab5f 	beq.w	801a90e <_strtod_l+0x27e>
 801b250:	2a45      	cmp	r2, #69	; 0x45
 801b252:	f43f ab5c 	beq.w	801a90e <_strtod_l+0x27e>
 801b256:	2301      	movs	r3, #1
 801b258:	f7ff bb94 	b.w	801a984 <_strtod_l+0x2f4>
 801b25c:	f3af 8000 	nop.w
 801b260:	94a03595 	.word	0x94a03595
 801b264:	3fdfffff 	.word	0x3fdfffff
 801b268:	35afe535 	.word	0x35afe535
 801b26c:	3fe00000 	.word	0x3fe00000
 801b270:	ffc00000 	.word	0xffc00000
 801b274:	41dfffff 	.word	0x41dfffff
 801b278:	94a03595 	.word	0x94a03595
 801b27c:	3fcfffff 	.word	0x3fcfffff
 801b280:	3ff00000 	.word	0x3ff00000
 801b284:	7ff00000 	.word	0x7ff00000
 801b288:	7fe00000 	.word	0x7fe00000
 801b28c:	7c9fffff 	.word	0x7c9fffff
 801b290:	3fe00000 	.word	0x3fe00000
 801b294:	bff00000 	.word	0xbff00000
 801b298:	7fefffff 	.word	0x7fefffff

0801b29c <_strtod_r>:
 801b29c:	4b01      	ldr	r3, [pc, #4]	; (801b2a4 <_strtod_r+0x8>)
 801b29e:	f7ff b9f7 	b.w	801a690 <_strtod_l>
 801b2a2:	bf00      	nop
 801b2a4:	200000cc 	.word	0x200000cc

0801b2a8 <_strtol_l.constprop.0>:
 801b2a8:	2b01      	cmp	r3, #1
 801b2aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b2ae:	d001      	beq.n	801b2b4 <_strtol_l.constprop.0+0xc>
 801b2b0:	2b24      	cmp	r3, #36	; 0x24
 801b2b2:	d906      	bls.n	801b2c2 <_strtol_l.constprop.0+0x1a>
 801b2b4:	f7fe fafe 	bl	80198b4 <__errno>
 801b2b8:	2316      	movs	r3, #22
 801b2ba:	6003      	str	r3, [r0, #0]
 801b2bc:	2000      	movs	r0, #0
 801b2be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b2c2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801b3a8 <_strtol_l.constprop.0+0x100>
 801b2c6:	460d      	mov	r5, r1
 801b2c8:	462e      	mov	r6, r5
 801b2ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b2ce:	f814 700c 	ldrb.w	r7, [r4, ip]
 801b2d2:	f017 0708 	ands.w	r7, r7, #8
 801b2d6:	d1f7      	bne.n	801b2c8 <_strtol_l.constprop.0+0x20>
 801b2d8:	2c2d      	cmp	r4, #45	; 0x2d
 801b2da:	d132      	bne.n	801b342 <_strtol_l.constprop.0+0x9a>
 801b2dc:	782c      	ldrb	r4, [r5, #0]
 801b2de:	2701      	movs	r7, #1
 801b2e0:	1cb5      	adds	r5, r6, #2
 801b2e2:	2b00      	cmp	r3, #0
 801b2e4:	d05b      	beq.n	801b39e <_strtol_l.constprop.0+0xf6>
 801b2e6:	2b10      	cmp	r3, #16
 801b2e8:	d109      	bne.n	801b2fe <_strtol_l.constprop.0+0x56>
 801b2ea:	2c30      	cmp	r4, #48	; 0x30
 801b2ec:	d107      	bne.n	801b2fe <_strtol_l.constprop.0+0x56>
 801b2ee:	782c      	ldrb	r4, [r5, #0]
 801b2f0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801b2f4:	2c58      	cmp	r4, #88	; 0x58
 801b2f6:	d14d      	bne.n	801b394 <_strtol_l.constprop.0+0xec>
 801b2f8:	786c      	ldrb	r4, [r5, #1]
 801b2fa:	2310      	movs	r3, #16
 801b2fc:	3502      	adds	r5, #2
 801b2fe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801b302:	f108 38ff 	add.w	r8, r8, #4294967295
 801b306:	f04f 0c00 	mov.w	ip, #0
 801b30a:	fbb8 f9f3 	udiv	r9, r8, r3
 801b30e:	4666      	mov	r6, ip
 801b310:	fb03 8a19 	mls	sl, r3, r9, r8
 801b314:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801b318:	f1be 0f09 	cmp.w	lr, #9
 801b31c:	d816      	bhi.n	801b34c <_strtol_l.constprop.0+0xa4>
 801b31e:	4674      	mov	r4, lr
 801b320:	42a3      	cmp	r3, r4
 801b322:	dd24      	ble.n	801b36e <_strtol_l.constprop.0+0xc6>
 801b324:	f1bc 0f00 	cmp.w	ip, #0
 801b328:	db1e      	blt.n	801b368 <_strtol_l.constprop.0+0xc0>
 801b32a:	45b1      	cmp	r9, r6
 801b32c:	d31c      	bcc.n	801b368 <_strtol_l.constprop.0+0xc0>
 801b32e:	d101      	bne.n	801b334 <_strtol_l.constprop.0+0x8c>
 801b330:	45a2      	cmp	sl, r4
 801b332:	db19      	blt.n	801b368 <_strtol_l.constprop.0+0xc0>
 801b334:	fb06 4603 	mla	r6, r6, r3, r4
 801b338:	f04f 0c01 	mov.w	ip, #1
 801b33c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b340:	e7e8      	b.n	801b314 <_strtol_l.constprop.0+0x6c>
 801b342:	2c2b      	cmp	r4, #43	; 0x2b
 801b344:	bf04      	itt	eq
 801b346:	782c      	ldrbeq	r4, [r5, #0]
 801b348:	1cb5      	addeq	r5, r6, #2
 801b34a:	e7ca      	b.n	801b2e2 <_strtol_l.constprop.0+0x3a>
 801b34c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801b350:	f1be 0f19 	cmp.w	lr, #25
 801b354:	d801      	bhi.n	801b35a <_strtol_l.constprop.0+0xb2>
 801b356:	3c37      	subs	r4, #55	; 0x37
 801b358:	e7e2      	b.n	801b320 <_strtol_l.constprop.0+0x78>
 801b35a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801b35e:	f1be 0f19 	cmp.w	lr, #25
 801b362:	d804      	bhi.n	801b36e <_strtol_l.constprop.0+0xc6>
 801b364:	3c57      	subs	r4, #87	; 0x57
 801b366:	e7db      	b.n	801b320 <_strtol_l.constprop.0+0x78>
 801b368:	f04f 3cff 	mov.w	ip, #4294967295
 801b36c:	e7e6      	b.n	801b33c <_strtol_l.constprop.0+0x94>
 801b36e:	f1bc 0f00 	cmp.w	ip, #0
 801b372:	da05      	bge.n	801b380 <_strtol_l.constprop.0+0xd8>
 801b374:	2322      	movs	r3, #34	; 0x22
 801b376:	6003      	str	r3, [r0, #0]
 801b378:	4646      	mov	r6, r8
 801b37a:	b942      	cbnz	r2, 801b38e <_strtol_l.constprop.0+0xe6>
 801b37c:	4630      	mov	r0, r6
 801b37e:	e79e      	b.n	801b2be <_strtol_l.constprop.0+0x16>
 801b380:	b107      	cbz	r7, 801b384 <_strtol_l.constprop.0+0xdc>
 801b382:	4276      	negs	r6, r6
 801b384:	2a00      	cmp	r2, #0
 801b386:	d0f9      	beq.n	801b37c <_strtol_l.constprop.0+0xd4>
 801b388:	f1bc 0f00 	cmp.w	ip, #0
 801b38c:	d000      	beq.n	801b390 <_strtol_l.constprop.0+0xe8>
 801b38e:	1e69      	subs	r1, r5, #1
 801b390:	6011      	str	r1, [r2, #0]
 801b392:	e7f3      	b.n	801b37c <_strtol_l.constprop.0+0xd4>
 801b394:	2430      	movs	r4, #48	; 0x30
 801b396:	2b00      	cmp	r3, #0
 801b398:	d1b1      	bne.n	801b2fe <_strtol_l.constprop.0+0x56>
 801b39a:	2308      	movs	r3, #8
 801b39c:	e7af      	b.n	801b2fe <_strtol_l.constprop.0+0x56>
 801b39e:	2c30      	cmp	r4, #48	; 0x30
 801b3a0:	d0a5      	beq.n	801b2ee <_strtol_l.constprop.0+0x46>
 801b3a2:	230a      	movs	r3, #10
 801b3a4:	e7ab      	b.n	801b2fe <_strtol_l.constprop.0+0x56>
 801b3a6:	bf00      	nop
 801b3a8:	080522a1 	.word	0x080522a1

0801b3ac <_strtol_r>:
 801b3ac:	f7ff bf7c 	b.w	801b2a8 <_strtol_l.constprop.0>

0801b3b0 <strtol>:
 801b3b0:	4613      	mov	r3, r2
 801b3b2:	460a      	mov	r2, r1
 801b3b4:	4601      	mov	r1, r0
 801b3b6:	4802      	ldr	r0, [pc, #8]	; (801b3c0 <strtol+0x10>)
 801b3b8:	6800      	ldr	r0, [r0, #0]
 801b3ba:	f7ff bf75 	b.w	801b2a8 <_strtol_l.constprop.0>
 801b3be:	bf00      	nop
 801b3c0:	20000064 	.word	0x20000064

0801b3c4 <quorem>:
 801b3c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3c8:	6903      	ldr	r3, [r0, #16]
 801b3ca:	690c      	ldr	r4, [r1, #16]
 801b3cc:	42a3      	cmp	r3, r4
 801b3ce:	4607      	mov	r7, r0
 801b3d0:	f2c0 8081 	blt.w	801b4d6 <quorem+0x112>
 801b3d4:	3c01      	subs	r4, #1
 801b3d6:	f101 0814 	add.w	r8, r1, #20
 801b3da:	f100 0514 	add.w	r5, r0, #20
 801b3de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b3e2:	9301      	str	r3, [sp, #4]
 801b3e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801b3e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b3ec:	3301      	adds	r3, #1
 801b3ee:	429a      	cmp	r2, r3
 801b3f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801b3f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801b3f8:	fbb2 f6f3 	udiv	r6, r2, r3
 801b3fc:	d331      	bcc.n	801b462 <quorem+0x9e>
 801b3fe:	f04f 0e00 	mov.w	lr, #0
 801b402:	4640      	mov	r0, r8
 801b404:	46ac      	mov	ip, r5
 801b406:	46f2      	mov	sl, lr
 801b408:	f850 2b04 	ldr.w	r2, [r0], #4
 801b40c:	b293      	uxth	r3, r2
 801b40e:	fb06 e303 	mla	r3, r6, r3, lr
 801b412:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801b416:	b29b      	uxth	r3, r3
 801b418:	ebaa 0303 	sub.w	r3, sl, r3
 801b41c:	f8dc a000 	ldr.w	sl, [ip]
 801b420:	0c12      	lsrs	r2, r2, #16
 801b422:	fa13 f38a 	uxtah	r3, r3, sl
 801b426:	fb06 e202 	mla	r2, r6, r2, lr
 801b42a:	9300      	str	r3, [sp, #0]
 801b42c:	9b00      	ldr	r3, [sp, #0]
 801b42e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801b432:	b292      	uxth	r2, r2
 801b434:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801b438:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b43c:	f8bd 3000 	ldrh.w	r3, [sp]
 801b440:	4581      	cmp	r9, r0
 801b442:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b446:	f84c 3b04 	str.w	r3, [ip], #4
 801b44a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801b44e:	d2db      	bcs.n	801b408 <quorem+0x44>
 801b450:	f855 300b 	ldr.w	r3, [r5, fp]
 801b454:	b92b      	cbnz	r3, 801b462 <quorem+0x9e>
 801b456:	9b01      	ldr	r3, [sp, #4]
 801b458:	3b04      	subs	r3, #4
 801b45a:	429d      	cmp	r5, r3
 801b45c:	461a      	mov	r2, r3
 801b45e:	d32e      	bcc.n	801b4be <quorem+0xfa>
 801b460:	613c      	str	r4, [r7, #16]
 801b462:	4638      	mov	r0, r7
 801b464:	f001 fc92 	bl	801cd8c <__mcmp>
 801b468:	2800      	cmp	r0, #0
 801b46a:	db24      	blt.n	801b4b6 <quorem+0xf2>
 801b46c:	3601      	adds	r6, #1
 801b46e:	4628      	mov	r0, r5
 801b470:	f04f 0c00 	mov.w	ip, #0
 801b474:	f858 2b04 	ldr.w	r2, [r8], #4
 801b478:	f8d0 e000 	ldr.w	lr, [r0]
 801b47c:	b293      	uxth	r3, r2
 801b47e:	ebac 0303 	sub.w	r3, ip, r3
 801b482:	0c12      	lsrs	r2, r2, #16
 801b484:	fa13 f38e 	uxtah	r3, r3, lr
 801b488:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801b48c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b490:	b29b      	uxth	r3, r3
 801b492:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b496:	45c1      	cmp	r9, r8
 801b498:	f840 3b04 	str.w	r3, [r0], #4
 801b49c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801b4a0:	d2e8      	bcs.n	801b474 <quorem+0xb0>
 801b4a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b4a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b4aa:	b922      	cbnz	r2, 801b4b6 <quorem+0xf2>
 801b4ac:	3b04      	subs	r3, #4
 801b4ae:	429d      	cmp	r5, r3
 801b4b0:	461a      	mov	r2, r3
 801b4b2:	d30a      	bcc.n	801b4ca <quorem+0x106>
 801b4b4:	613c      	str	r4, [r7, #16]
 801b4b6:	4630      	mov	r0, r6
 801b4b8:	b003      	add	sp, #12
 801b4ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b4be:	6812      	ldr	r2, [r2, #0]
 801b4c0:	3b04      	subs	r3, #4
 801b4c2:	2a00      	cmp	r2, #0
 801b4c4:	d1cc      	bne.n	801b460 <quorem+0x9c>
 801b4c6:	3c01      	subs	r4, #1
 801b4c8:	e7c7      	b.n	801b45a <quorem+0x96>
 801b4ca:	6812      	ldr	r2, [r2, #0]
 801b4cc:	3b04      	subs	r3, #4
 801b4ce:	2a00      	cmp	r2, #0
 801b4d0:	d1f0      	bne.n	801b4b4 <quorem+0xf0>
 801b4d2:	3c01      	subs	r4, #1
 801b4d4:	e7eb      	b.n	801b4ae <quorem+0xea>
 801b4d6:	2000      	movs	r0, #0
 801b4d8:	e7ee      	b.n	801b4b8 <quorem+0xf4>
 801b4da:	0000      	movs	r0, r0
 801b4dc:	0000      	movs	r0, r0
	...

0801b4e0 <_dtoa_r>:
 801b4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4e4:	ed2d 8b04 	vpush	{d8-d9}
 801b4e8:	ec57 6b10 	vmov	r6, r7, d0
 801b4ec:	b093      	sub	sp, #76	; 0x4c
 801b4ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801b4f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801b4f4:	9106      	str	r1, [sp, #24]
 801b4f6:	ee10 aa10 	vmov	sl, s0
 801b4fa:	4604      	mov	r4, r0
 801b4fc:	9209      	str	r2, [sp, #36]	; 0x24
 801b4fe:	930c      	str	r3, [sp, #48]	; 0x30
 801b500:	46bb      	mov	fp, r7
 801b502:	b975      	cbnz	r5, 801b522 <_dtoa_r+0x42>
 801b504:	2010      	movs	r0, #16
 801b506:	f001 f94d 	bl	801c7a4 <malloc>
 801b50a:	4602      	mov	r2, r0
 801b50c:	6260      	str	r0, [r4, #36]	; 0x24
 801b50e:	b920      	cbnz	r0, 801b51a <_dtoa_r+0x3a>
 801b510:	4ba7      	ldr	r3, [pc, #668]	; (801b7b0 <_dtoa_r+0x2d0>)
 801b512:	21ea      	movs	r1, #234	; 0xea
 801b514:	48a7      	ldr	r0, [pc, #668]	; (801b7b4 <_dtoa_r+0x2d4>)
 801b516:	f002 f8bd 	bl	801d694 <__assert_func>
 801b51a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801b51e:	6005      	str	r5, [r0, #0]
 801b520:	60c5      	str	r5, [r0, #12]
 801b522:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b524:	6819      	ldr	r1, [r3, #0]
 801b526:	b151      	cbz	r1, 801b53e <_dtoa_r+0x5e>
 801b528:	685a      	ldr	r2, [r3, #4]
 801b52a:	604a      	str	r2, [r1, #4]
 801b52c:	2301      	movs	r3, #1
 801b52e:	4093      	lsls	r3, r2
 801b530:	608b      	str	r3, [r1, #8]
 801b532:	4620      	mov	r0, r4
 801b534:	f001 f99e 	bl	801c874 <_Bfree>
 801b538:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b53a:	2200      	movs	r2, #0
 801b53c:	601a      	str	r2, [r3, #0]
 801b53e:	1e3b      	subs	r3, r7, #0
 801b540:	bfaa      	itet	ge
 801b542:	2300      	movge	r3, #0
 801b544:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801b548:	f8c8 3000 	strge.w	r3, [r8]
 801b54c:	4b9a      	ldr	r3, [pc, #616]	; (801b7b8 <_dtoa_r+0x2d8>)
 801b54e:	bfbc      	itt	lt
 801b550:	2201      	movlt	r2, #1
 801b552:	f8c8 2000 	strlt.w	r2, [r8]
 801b556:	ea33 030b 	bics.w	r3, r3, fp
 801b55a:	d11b      	bne.n	801b594 <_dtoa_r+0xb4>
 801b55c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b55e:	f242 730f 	movw	r3, #9999	; 0x270f
 801b562:	6013      	str	r3, [r2, #0]
 801b564:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b568:	4333      	orrs	r3, r6
 801b56a:	f000 8592 	beq.w	801c092 <_dtoa_r+0xbb2>
 801b56e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b570:	b963      	cbnz	r3, 801b58c <_dtoa_r+0xac>
 801b572:	4b92      	ldr	r3, [pc, #584]	; (801b7bc <_dtoa_r+0x2dc>)
 801b574:	e022      	b.n	801b5bc <_dtoa_r+0xdc>
 801b576:	4b92      	ldr	r3, [pc, #584]	; (801b7c0 <_dtoa_r+0x2e0>)
 801b578:	9301      	str	r3, [sp, #4]
 801b57a:	3308      	adds	r3, #8
 801b57c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801b57e:	6013      	str	r3, [r2, #0]
 801b580:	9801      	ldr	r0, [sp, #4]
 801b582:	b013      	add	sp, #76	; 0x4c
 801b584:	ecbd 8b04 	vpop	{d8-d9}
 801b588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b58c:	4b8b      	ldr	r3, [pc, #556]	; (801b7bc <_dtoa_r+0x2dc>)
 801b58e:	9301      	str	r3, [sp, #4]
 801b590:	3303      	adds	r3, #3
 801b592:	e7f3      	b.n	801b57c <_dtoa_r+0x9c>
 801b594:	2200      	movs	r2, #0
 801b596:	2300      	movs	r3, #0
 801b598:	4650      	mov	r0, sl
 801b59a:	4659      	mov	r1, fp
 801b59c:	f7fd fec4 	bl	8019328 <__aeabi_dcmpeq>
 801b5a0:	ec4b ab19 	vmov	d9, sl, fp
 801b5a4:	4680      	mov	r8, r0
 801b5a6:	b158      	cbz	r0, 801b5c0 <_dtoa_r+0xe0>
 801b5a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b5aa:	2301      	movs	r3, #1
 801b5ac:	6013      	str	r3, [r2, #0]
 801b5ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b5b0:	2b00      	cmp	r3, #0
 801b5b2:	f000 856b 	beq.w	801c08c <_dtoa_r+0xbac>
 801b5b6:	4883      	ldr	r0, [pc, #524]	; (801b7c4 <_dtoa_r+0x2e4>)
 801b5b8:	6018      	str	r0, [r3, #0]
 801b5ba:	1e43      	subs	r3, r0, #1
 801b5bc:	9301      	str	r3, [sp, #4]
 801b5be:	e7df      	b.n	801b580 <_dtoa_r+0xa0>
 801b5c0:	ec4b ab10 	vmov	d0, sl, fp
 801b5c4:	aa10      	add	r2, sp, #64	; 0x40
 801b5c6:	a911      	add	r1, sp, #68	; 0x44
 801b5c8:	4620      	mov	r0, r4
 801b5ca:	f001 fd01 	bl	801cfd0 <__d2b>
 801b5ce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801b5d2:	ee08 0a10 	vmov	s16, r0
 801b5d6:	2d00      	cmp	r5, #0
 801b5d8:	f000 8084 	beq.w	801b6e4 <_dtoa_r+0x204>
 801b5dc:	ee19 3a90 	vmov	r3, s19
 801b5e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b5e4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801b5e8:	4656      	mov	r6, sl
 801b5ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801b5ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801b5f2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801b5f6:	4b74      	ldr	r3, [pc, #464]	; (801b7c8 <_dtoa_r+0x2e8>)
 801b5f8:	2200      	movs	r2, #0
 801b5fa:	4630      	mov	r0, r6
 801b5fc:	4639      	mov	r1, r7
 801b5fe:	f7fd fa73 	bl	8018ae8 <__aeabi_dsub>
 801b602:	a365      	add	r3, pc, #404	; (adr r3, 801b798 <_dtoa_r+0x2b8>)
 801b604:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b608:	f7fd fc26 	bl	8018e58 <__aeabi_dmul>
 801b60c:	a364      	add	r3, pc, #400	; (adr r3, 801b7a0 <_dtoa_r+0x2c0>)
 801b60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b612:	f7fd fa6b 	bl	8018aec <__adddf3>
 801b616:	4606      	mov	r6, r0
 801b618:	4628      	mov	r0, r5
 801b61a:	460f      	mov	r7, r1
 801b61c:	f7fd fbb2 	bl	8018d84 <__aeabi_i2d>
 801b620:	a361      	add	r3, pc, #388	; (adr r3, 801b7a8 <_dtoa_r+0x2c8>)
 801b622:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b626:	f7fd fc17 	bl	8018e58 <__aeabi_dmul>
 801b62a:	4602      	mov	r2, r0
 801b62c:	460b      	mov	r3, r1
 801b62e:	4630      	mov	r0, r6
 801b630:	4639      	mov	r1, r7
 801b632:	f7fd fa5b 	bl	8018aec <__adddf3>
 801b636:	4606      	mov	r6, r0
 801b638:	460f      	mov	r7, r1
 801b63a:	f7fd febd 	bl	80193b8 <__aeabi_d2iz>
 801b63e:	2200      	movs	r2, #0
 801b640:	9000      	str	r0, [sp, #0]
 801b642:	2300      	movs	r3, #0
 801b644:	4630      	mov	r0, r6
 801b646:	4639      	mov	r1, r7
 801b648:	f7fd fe78 	bl	801933c <__aeabi_dcmplt>
 801b64c:	b150      	cbz	r0, 801b664 <_dtoa_r+0x184>
 801b64e:	9800      	ldr	r0, [sp, #0]
 801b650:	f7fd fb98 	bl	8018d84 <__aeabi_i2d>
 801b654:	4632      	mov	r2, r6
 801b656:	463b      	mov	r3, r7
 801b658:	f7fd fe66 	bl	8019328 <__aeabi_dcmpeq>
 801b65c:	b910      	cbnz	r0, 801b664 <_dtoa_r+0x184>
 801b65e:	9b00      	ldr	r3, [sp, #0]
 801b660:	3b01      	subs	r3, #1
 801b662:	9300      	str	r3, [sp, #0]
 801b664:	9b00      	ldr	r3, [sp, #0]
 801b666:	2b16      	cmp	r3, #22
 801b668:	d85a      	bhi.n	801b720 <_dtoa_r+0x240>
 801b66a:	9a00      	ldr	r2, [sp, #0]
 801b66c:	4b57      	ldr	r3, [pc, #348]	; (801b7cc <_dtoa_r+0x2ec>)
 801b66e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b672:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b676:	ec51 0b19 	vmov	r0, r1, d9
 801b67a:	f7fd fe5f 	bl	801933c <__aeabi_dcmplt>
 801b67e:	2800      	cmp	r0, #0
 801b680:	d050      	beq.n	801b724 <_dtoa_r+0x244>
 801b682:	9b00      	ldr	r3, [sp, #0]
 801b684:	3b01      	subs	r3, #1
 801b686:	9300      	str	r3, [sp, #0]
 801b688:	2300      	movs	r3, #0
 801b68a:	930b      	str	r3, [sp, #44]	; 0x2c
 801b68c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b68e:	1b5d      	subs	r5, r3, r5
 801b690:	1e6b      	subs	r3, r5, #1
 801b692:	9305      	str	r3, [sp, #20]
 801b694:	bf45      	ittet	mi
 801b696:	f1c5 0301 	rsbmi	r3, r5, #1
 801b69a:	9304      	strmi	r3, [sp, #16]
 801b69c:	2300      	movpl	r3, #0
 801b69e:	2300      	movmi	r3, #0
 801b6a0:	bf4c      	ite	mi
 801b6a2:	9305      	strmi	r3, [sp, #20]
 801b6a4:	9304      	strpl	r3, [sp, #16]
 801b6a6:	9b00      	ldr	r3, [sp, #0]
 801b6a8:	2b00      	cmp	r3, #0
 801b6aa:	db3d      	blt.n	801b728 <_dtoa_r+0x248>
 801b6ac:	9b05      	ldr	r3, [sp, #20]
 801b6ae:	9a00      	ldr	r2, [sp, #0]
 801b6b0:	920a      	str	r2, [sp, #40]	; 0x28
 801b6b2:	4413      	add	r3, r2
 801b6b4:	9305      	str	r3, [sp, #20]
 801b6b6:	2300      	movs	r3, #0
 801b6b8:	9307      	str	r3, [sp, #28]
 801b6ba:	9b06      	ldr	r3, [sp, #24]
 801b6bc:	2b09      	cmp	r3, #9
 801b6be:	f200 8089 	bhi.w	801b7d4 <_dtoa_r+0x2f4>
 801b6c2:	2b05      	cmp	r3, #5
 801b6c4:	bfc4      	itt	gt
 801b6c6:	3b04      	subgt	r3, #4
 801b6c8:	9306      	strgt	r3, [sp, #24]
 801b6ca:	9b06      	ldr	r3, [sp, #24]
 801b6cc:	f1a3 0302 	sub.w	r3, r3, #2
 801b6d0:	bfcc      	ite	gt
 801b6d2:	2500      	movgt	r5, #0
 801b6d4:	2501      	movle	r5, #1
 801b6d6:	2b03      	cmp	r3, #3
 801b6d8:	f200 8087 	bhi.w	801b7ea <_dtoa_r+0x30a>
 801b6dc:	e8df f003 	tbb	[pc, r3]
 801b6e0:	59383a2d 	.word	0x59383a2d
 801b6e4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801b6e8:	441d      	add	r5, r3
 801b6ea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801b6ee:	2b20      	cmp	r3, #32
 801b6f0:	bfc1      	itttt	gt
 801b6f2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801b6f6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801b6fa:	fa0b f303 	lslgt.w	r3, fp, r3
 801b6fe:	fa26 f000 	lsrgt.w	r0, r6, r0
 801b702:	bfda      	itte	le
 801b704:	f1c3 0320 	rsble	r3, r3, #32
 801b708:	fa06 f003 	lslle.w	r0, r6, r3
 801b70c:	4318      	orrgt	r0, r3
 801b70e:	f7fd fb29 	bl	8018d64 <__aeabi_ui2d>
 801b712:	2301      	movs	r3, #1
 801b714:	4606      	mov	r6, r0
 801b716:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801b71a:	3d01      	subs	r5, #1
 801b71c:	930e      	str	r3, [sp, #56]	; 0x38
 801b71e:	e76a      	b.n	801b5f6 <_dtoa_r+0x116>
 801b720:	2301      	movs	r3, #1
 801b722:	e7b2      	b.n	801b68a <_dtoa_r+0x1aa>
 801b724:	900b      	str	r0, [sp, #44]	; 0x2c
 801b726:	e7b1      	b.n	801b68c <_dtoa_r+0x1ac>
 801b728:	9b04      	ldr	r3, [sp, #16]
 801b72a:	9a00      	ldr	r2, [sp, #0]
 801b72c:	1a9b      	subs	r3, r3, r2
 801b72e:	9304      	str	r3, [sp, #16]
 801b730:	4253      	negs	r3, r2
 801b732:	9307      	str	r3, [sp, #28]
 801b734:	2300      	movs	r3, #0
 801b736:	930a      	str	r3, [sp, #40]	; 0x28
 801b738:	e7bf      	b.n	801b6ba <_dtoa_r+0x1da>
 801b73a:	2300      	movs	r3, #0
 801b73c:	9308      	str	r3, [sp, #32]
 801b73e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b740:	2b00      	cmp	r3, #0
 801b742:	dc55      	bgt.n	801b7f0 <_dtoa_r+0x310>
 801b744:	2301      	movs	r3, #1
 801b746:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801b74a:	461a      	mov	r2, r3
 801b74c:	9209      	str	r2, [sp, #36]	; 0x24
 801b74e:	e00c      	b.n	801b76a <_dtoa_r+0x28a>
 801b750:	2301      	movs	r3, #1
 801b752:	e7f3      	b.n	801b73c <_dtoa_r+0x25c>
 801b754:	2300      	movs	r3, #0
 801b756:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b758:	9308      	str	r3, [sp, #32]
 801b75a:	9b00      	ldr	r3, [sp, #0]
 801b75c:	4413      	add	r3, r2
 801b75e:	9302      	str	r3, [sp, #8]
 801b760:	3301      	adds	r3, #1
 801b762:	2b01      	cmp	r3, #1
 801b764:	9303      	str	r3, [sp, #12]
 801b766:	bfb8      	it	lt
 801b768:	2301      	movlt	r3, #1
 801b76a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801b76c:	2200      	movs	r2, #0
 801b76e:	6042      	str	r2, [r0, #4]
 801b770:	2204      	movs	r2, #4
 801b772:	f102 0614 	add.w	r6, r2, #20
 801b776:	429e      	cmp	r6, r3
 801b778:	6841      	ldr	r1, [r0, #4]
 801b77a:	d93d      	bls.n	801b7f8 <_dtoa_r+0x318>
 801b77c:	4620      	mov	r0, r4
 801b77e:	f001 f839 	bl	801c7f4 <_Balloc>
 801b782:	9001      	str	r0, [sp, #4]
 801b784:	2800      	cmp	r0, #0
 801b786:	d13b      	bne.n	801b800 <_dtoa_r+0x320>
 801b788:	4b11      	ldr	r3, [pc, #68]	; (801b7d0 <_dtoa_r+0x2f0>)
 801b78a:	4602      	mov	r2, r0
 801b78c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801b790:	e6c0      	b.n	801b514 <_dtoa_r+0x34>
 801b792:	2301      	movs	r3, #1
 801b794:	e7df      	b.n	801b756 <_dtoa_r+0x276>
 801b796:	bf00      	nop
 801b798:	636f4361 	.word	0x636f4361
 801b79c:	3fd287a7 	.word	0x3fd287a7
 801b7a0:	8b60c8b3 	.word	0x8b60c8b3
 801b7a4:	3fc68a28 	.word	0x3fc68a28
 801b7a8:	509f79fb 	.word	0x509f79fb
 801b7ac:	3fd34413 	.word	0x3fd34413
 801b7b0:	080523ae 	.word	0x080523ae
 801b7b4:	080523c5 	.word	0x080523c5
 801b7b8:	7ff00000 	.word	0x7ff00000
 801b7bc:	080523aa 	.word	0x080523aa
 801b7c0:	080523a1 	.word	0x080523a1
 801b7c4:	08052225 	.word	0x08052225
 801b7c8:	3ff80000 	.word	0x3ff80000
 801b7cc:	08052530 	.word	0x08052530
 801b7d0:	08052420 	.word	0x08052420
 801b7d4:	2501      	movs	r5, #1
 801b7d6:	2300      	movs	r3, #0
 801b7d8:	9306      	str	r3, [sp, #24]
 801b7da:	9508      	str	r5, [sp, #32]
 801b7dc:	f04f 33ff 	mov.w	r3, #4294967295
 801b7e0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801b7e4:	2200      	movs	r2, #0
 801b7e6:	2312      	movs	r3, #18
 801b7e8:	e7b0      	b.n	801b74c <_dtoa_r+0x26c>
 801b7ea:	2301      	movs	r3, #1
 801b7ec:	9308      	str	r3, [sp, #32]
 801b7ee:	e7f5      	b.n	801b7dc <_dtoa_r+0x2fc>
 801b7f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b7f2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801b7f6:	e7b8      	b.n	801b76a <_dtoa_r+0x28a>
 801b7f8:	3101      	adds	r1, #1
 801b7fa:	6041      	str	r1, [r0, #4]
 801b7fc:	0052      	lsls	r2, r2, #1
 801b7fe:	e7b8      	b.n	801b772 <_dtoa_r+0x292>
 801b800:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b802:	9a01      	ldr	r2, [sp, #4]
 801b804:	601a      	str	r2, [r3, #0]
 801b806:	9b03      	ldr	r3, [sp, #12]
 801b808:	2b0e      	cmp	r3, #14
 801b80a:	f200 809d 	bhi.w	801b948 <_dtoa_r+0x468>
 801b80e:	2d00      	cmp	r5, #0
 801b810:	f000 809a 	beq.w	801b948 <_dtoa_r+0x468>
 801b814:	9b00      	ldr	r3, [sp, #0]
 801b816:	2b00      	cmp	r3, #0
 801b818:	dd32      	ble.n	801b880 <_dtoa_r+0x3a0>
 801b81a:	4ab7      	ldr	r2, [pc, #732]	; (801baf8 <_dtoa_r+0x618>)
 801b81c:	f003 030f 	and.w	r3, r3, #15
 801b820:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801b824:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b828:	9b00      	ldr	r3, [sp, #0]
 801b82a:	05d8      	lsls	r0, r3, #23
 801b82c:	ea4f 1723 	mov.w	r7, r3, asr #4
 801b830:	d516      	bpl.n	801b860 <_dtoa_r+0x380>
 801b832:	4bb2      	ldr	r3, [pc, #712]	; (801bafc <_dtoa_r+0x61c>)
 801b834:	ec51 0b19 	vmov	r0, r1, d9
 801b838:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801b83c:	f7fd fc36 	bl	80190ac <__aeabi_ddiv>
 801b840:	f007 070f 	and.w	r7, r7, #15
 801b844:	4682      	mov	sl, r0
 801b846:	468b      	mov	fp, r1
 801b848:	2503      	movs	r5, #3
 801b84a:	4eac      	ldr	r6, [pc, #688]	; (801bafc <_dtoa_r+0x61c>)
 801b84c:	b957      	cbnz	r7, 801b864 <_dtoa_r+0x384>
 801b84e:	4642      	mov	r2, r8
 801b850:	464b      	mov	r3, r9
 801b852:	4650      	mov	r0, sl
 801b854:	4659      	mov	r1, fp
 801b856:	f7fd fc29 	bl	80190ac <__aeabi_ddiv>
 801b85a:	4682      	mov	sl, r0
 801b85c:	468b      	mov	fp, r1
 801b85e:	e028      	b.n	801b8b2 <_dtoa_r+0x3d2>
 801b860:	2502      	movs	r5, #2
 801b862:	e7f2      	b.n	801b84a <_dtoa_r+0x36a>
 801b864:	07f9      	lsls	r1, r7, #31
 801b866:	d508      	bpl.n	801b87a <_dtoa_r+0x39a>
 801b868:	4640      	mov	r0, r8
 801b86a:	4649      	mov	r1, r9
 801b86c:	e9d6 2300 	ldrd	r2, r3, [r6]
 801b870:	f7fd faf2 	bl	8018e58 <__aeabi_dmul>
 801b874:	3501      	adds	r5, #1
 801b876:	4680      	mov	r8, r0
 801b878:	4689      	mov	r9, r1
 801b87a:	107f      	asrs	r7, r7, #1
 801b87c:	3608      	adds	r6, #8
 801b87e:	e7e5      	b.n	801b84c <_dtoa_r+0x36c>
 801b880:	f000 809b 	beq.w	801b9ba <_dtoa_r+0x4da>
 801b884:	9b00      	ldr	r3, [sp, #0]
 801b886:	4f9d      	ldr	r7, [pc, #628]	; (801bafc <_dtoa_r+0x61c>)
 801b888:	425e      	negs	r6, r3
 801b88a:	4b9b      	ldr	r3, [pc, #620]	; (801baf8 <_dtoa_r+0x618>)
 801b88c:	f006 020f 	and.w	r2, r6, #15
 801b890:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b894:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b898:	ec51 0b19 	vmov	r0, r1, d9
 801b89c:	f7fd fadc 	bl	8018e58 <__aeabi_dmul>
 801b8a0:	1136      	asrs	r6, r6, #4
 801b8a2:	4682      	mov	sl, r0
 801b8a4:	468b      	mov	fp, r1
 801b8a6:	2300      	movs	r3, #0
 801b8a8:	2502      	movs	r5, #2
 801b8aa:	2e00      	cmp	r6, #0
 801b8ac:	d17a      	bne.n	801b9a4 <_dtoa_r+0x4c4>
 801b8ae:	2b00      	cmp	r3, #0
 801b8b0:	d1d3      	bne.n	801b85a <_dtoa_r+0x37a>
 801b8b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b8b4:	2b00      	cmp	r3, #0
 801b8b6:	f000 8082 	beq.w	801b9be <_dtoa_r+0x4de>
 801b8ba:	4b91      	ldr	r3, [pc, #580]	; (801bb00 <_dtoa_r+0x620>)
 801b8bc:	2200      	movs	r2, #0
 801b8be:	4650      	mov	r0, sl
 801b8c0:	4659      	mov	r1, fp
 801b8c2:	f7fd fd3b 	bl	801933c <__aeabi_dcmplt>
 801b8c6:	2800      	cmp	r0, #0
 801b8c8:	d079      	beq.n	801b9be <_dtoa_r+0x4de>
 801b8ca:	9b03      	ldr	r3, [sp, #12]
 801b8cc:	2b00      	cmp	r3, #0
 801b8ce:	d076      	beq.n	801b9be <_dtoa_r+0x4de>
 801b8d0:	9b02      	ldr	r3, [sp, #8]
 801b8d2:	2b00      	cmp	r3, #0
 801b8d4:	dd36      	ble.n	801b944 <_dtoa_r+0x464>
 801b8d6:	9b00      	ldr	r3, [sp, #0]
 801b8d8:	4650      	mov	r0, sl
 801b8da:	4659      	mov	r1, fp
 801b8dc:	1e5f      	subs	r7, r3, #1
 801b8de:	2200      	movs	r2, #0
 801b8e0:	4b88      	ldr	r3, [pc, #544]	; (801bb04 <_dtoa_r+0x624>)
 801b8e2:	f7fd fab9 	bl	8018e58 <__aeabi_dmul>
 801b8e6:	9e02      	ldr	r6, [sp, #8]
 801b8e8:	4682      	mov	sl, r0
 801b8ea:	468b      	mov	fp, r1
 801b8ec:	3501      	adds	r5, #1
 801b8ee:	4628      	mov	r0, r5
 801b8f0:	f7fd fa48 	bl	8018d84 <__aeabi_i2d>
 801b8f4:	4652      	mov	r2, sl
 801b8f6:	465b      	mov	r3, fp
 801b8f8:	f7fd faae 	bl	8018e58 <__aeabi_dmul>
 801b8fc:	4b82      	ldr	r3, [pc, #520]	; (801bb08 <_dtoa_r+0x628>)
 801b8fe:	2200      	movs	r2, #0
 801b900:	f7fd f8f4 	bl	8018aec <__adddf3>
 801b904:	46d0      	mov	r8, sl
 801b906:	46d9      	mov	r9, fp
 801b908:	4682      	mov	sl, r0
 801b90a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801b90e:	2e00      	cmp	r6, #0
 801b910:	d158      	bne.n	801b9c4 <_dtoa_r+0x4e4>
 801b912:	4b7e      	ldr	r3, [pc, #504]	; (801bb0c <_dtoa_r+0x62c>)
 801b914:	2200      	movs	r2, #0
 801b916:	4640      	mov	r0, r8
 801b918:	4649      	mov	r1, r9
 801b91a:	f7fd f8e5 	bl	8018ae8 <__aeabi_dsub>
 801b91e:	4652      	mov	r2, sl
 801b920:	465b      	mov	r3, fp
 801b922:	4680      	mov	r8, r0
 801b924:	4689      	mov	r9, r1
 801b926:	f7fd fd27 	bl	8019378 <__aeabi_dcmpgt>
 801b92a:	2800      	cmp	r0, #0
 801b92c:	f040 8295 	bne.w	801be5a <_dtoa_r+0x97a>
 801b930:	4652      	mov	r2, sl
 801b932:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801b936:	4640      	mov	r0, r8
 801b938:	4649      	mov	r1, r9
 801b93a:	f7fd fcff 	bl	801933c <__aeabi_dcmplt>
 801b93e:	2800      	cmp	r0, #0
 801b940:	f040 8289 	bne.w	801be56 <_dtoa_r+0x976>
 801b944:	ec5b ab19 	vmov	sl, fp, d9
 801b948:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b94a:	2b00      	cmp	r3, #0
 801b94c:	f2c0 8148 	blt.w	801bbe0 <_dtoa_r+0x700>
 801b950:	9a00      	ldr	r2, [sp, #0]
 801b952:	2a0e      	cmp	r2, #14
 801b954:	f300 8144 	bgt.w	801bbe0 <_dtoa_r+0x700>
 801b958:	4b67      	ldr	r3, [pc, #412]	; (801baf8 <_dtoa_r+0x618>)
 801b95a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b95e:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b964:	2b00      	cmp	r3, #0
 801b966:	f280 80d5 	bge.w	801bb14 <_dtoa_r+0x634>
 801b96a:	9b03      	ldr	r3, [sp, #12]
 801b96c:	2b00      	cmp	r3, #0
 801b96e:	f300 80d1 	bgt.w	801bb14 <_dtoa_r+0x634>
 801b972:	f040 826f 	bne.w	801be54 <_dtoa_r+0x974>
 801b976:	4b65      	ldr	r3, [pc, #404]	; (801bb0c <_dtoa_r+0x62c>)
 801b978:	2200      	movs	r2, #0
 801b97a:	4640      	mov	r0, r8
 801b97c:	4649      	mov	r1, r9
 801b97e:	f7fd fa6b 	bl	8018e58 <__aeabi_dmul>
 801b982:	4652      	mov	r2, sl
 801b984:	465b      	mov	r3, fp
 801b986:	f7fd fced 	bl	8019364 <__aeabi_dcmpge>
 801b98a:	9e03      	ldr	r6, [sp, #12]
 801b98c:	4637      	mov	r7, r6
 801b98e:	2800      	cmp	r0, #0
 801b990:	f040 8245 	bne.w	801be1e <_dtoa_r+0x93e>
 801b994:	9d01      	ldr	r5, [sp, #4]
 801b996:	2331      	movs	r3, #49	; 0x31
 801b998:	f805 3b01 	strb.w	r3, [r5], #1
 801b99c:	9b00      	ldr	r3, [sp, #0]
 801b99e:	3301      	adds	r3, #1
 801b9a0:	9300      	str	r3, [sp, #0]
 801b9a2:	e240      	b.n	801be26 <_dtoa_r+0x946>
 801b9a4:	07f2      	lsls	r2, r6, #31
 801b9a6:	d505      	bpl.n	801b9b4 <_dtoa_r+0x4d4>
 801b9a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b9ac:	f7fd fa54 	bl	8018e58 <__aeabi_dmul>
 801b9b0:	3501      	adds	r5, #1
 801b9b2:	2301      	movs	r3, #1
 801b9b4:	1076      	asrs	r6, r6, #1
 801b9b6:	3708      	adds	r7, #8
 801b9b8:	e777      	b.n	801b8aa <_dtoa_r+0x3ca>
 801b9ba:	2502      	movs	r5, #2
 801b9bc:	e779      	b.n	801b8b2 <_dtoa_r+0x3d2>
 801b9be:	9f00      	ldr	r7, [sp, #0]
 801b9c0:	9e03      	ldr	r6, [sp, #12]
 801b9c2:	e794      	b.n	801b8ee <_dtoa_r+0x40e>
 801b9c4:	9901      	ldr	r1, [sp, #4]
 801b9c6:	4b4c      	ldr	r3, [pc, #304]	; (801baf8 <_dtoa_r+0x618>)
 801b9c8:	4431      	add	r1, r6
 801b9ca:	910d      	str	r1, [sp, #52]	; 0x34
 801b9cc:	9908      	ldr	r1, [sp, #32]
 801b9ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801b9d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801b9d6:	2900      	cmp	r1, #0
 801b9d8:	d043      	beq.n	801ba62 <_dtoa_r+0x582>
 801b9da:	494d      	ldr	r1, [pc, #308]	; (801bb10 <_dtoa_r+0x630>)
 801b9dc:	2000      	movs	r0, #0
 801b9de:	f7fd fb65 	bl	80190ac <__aeabi_ddiv>
 801b9e2:	4652      	mov	r2, sl
 801b9e4:	465b      	mov	r3, fp
 801b9e6:	f7fd f87f 	bl	8018ae8 <__aeabi_dsub>
 801b9ea:	9d01      	ldr	r5, [sp, #4]
 801b9ec:	4682      	mov	sl, r0
 801b9ee:	468b      	mov	fp, r1
 801b9f0:	4649      	mov	r1, r9
 801b9f2:	4640      	mov	r0, r8
 801b9f4:	f7fd fce0 	bl	80193b8 <__aeabi_d2iz>
 801b9f8:	4606      	mov	r6, r0
 801b9fa:	f7fd f9c3 	bl	8018d84 <__aeabi_i2d>
 801b9fe:	4602      	mov	r2, r0
 801ba00:	460b      	mov	r3, r1
 801ba02:	4640      	mov	r0, r8
 801ba04:	4649      	mov	r1, r9
 801ba06:	f7fd f86f 	bl	8018ae8 <__aeabi_dsub>
 801ba0a:	3630      	adds	r6, #48	; 0x30
 801ba0c:	f805 6b01 	strb.w	r6, [r5], #1
 801ba10:	4652      	mov	r2, sl
 801ba12:	465b      	mov	r3, fp
 801ba14:	4680      	mov	r8, r0
 801ba16:	4689      	mov	r9, r1
 801ba18:	f7fd fc90 	bl	801933c <__aeabi_dcmplt>
 801ba1c:	2800      	cmp	r0, #0
 801ba1e:	d163      	bne.n	801bae8 <_dtoa_r+0x608>
 801ba20:	4642      	mov	r2, r8
 801ba22:	464b      	mov	r3, r9
 801ba24:	4936      	ldr	r1, [pc, #216]	; (801bb00 <_dtoa_r+0x620>)
 801ba26:	2000      	movs	r0, #0
 801ba28:	f7fd f85e 	bl	8018ae8 <__aeabi_dsub>
 801ba2c:	4652      	mov	r2, sl
 801ba2e:	465b      	mov	r3, fp
 801ba30:	f7fd fc84 	bl	801933c <__aeabi_dcmplt>
 801ba34:	2800      	cmp	r0, #0
 801ba36:	f040 80b5 	bne.w	801bba4 <_dtoa_r+0x6c4>
 801ba3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ba3c:	429d      	cmp	r5, r3
 801ba3e:	d081      	beq.n	801b944 <_dtoa_r+0x464>
 801ba40:	4b30      	ldr	r3, [pc, #192]	; (801bb04 <_dtoa_r+0x624>)
 801ba42:	2200      	movs	r2, #0
 801ba44:	4650      	mov	r0, sl
 801ba46:	4659      	mov	r1, fp
 801ba48:	f7fd fa06 	bl	8018e58 <__aeabi_dmul>
 801ba4c:	4b2d      	ldr	r3, [pc, #180]	; (801bb04 <_dtoa_r+0x624>)
 801ba4e:	4682      	mov	sl, r0
 801ba50:	468b      	mov	fp, r1
 801ba52:	4640      	mov	r0, r8
 801ba54:	4649      	mov	r1, r9
 801ba56:	2200      	movs	r2, #0
 801ba58:	f7fd f9fe 	bl	8018e58 <__aeabi_dmul>
 801ba5c:	4680      	mov	r8, r0
 801ba5e:	4689      	mov	r9, r1
 801ba60:	e7c6      	b.n	801b9f0 <_dtoa_r+0x510>
 801ba62:	4650      	mov	r0, sl
 801ba64:	4659      	mov	r1, fp
 801ba66:	f7fd f9f7 	bl	8018e58 <__aeabi_dmul>
 801ba6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ba6c:	9d01      	ldr	r5, [sp, #4]
 801ba6e:	930f      	str	r3, [sp, #60]	; 0x3c
 801ba70:	4682      	mov	sl, r0
 801ba72:	468b      	mov	fp, r1
 801ba74:	4649      	mov	r1, r9
 801ba76:	4640      	mov	r0, r8
 801ba78:	f7fd fc9e 	bl	80193b8 <__aeabi_d2iz>
 801ba7c:	4606      	mov	r6, r0
 801ba7e:	f7fd f981 	bl	8018d84 <__aeabi_i2d>
 801ba82:	3630      	adds	r6, #48	; 0x30
 801ba84:	4602      	mov	r2, r0
 801ba86:	460b      	mov	r3, r1
 801ba88:	4640      	mov	r0, r8
 801ba8a:	4649      	mov	r1, r9
 801ba8c:	f7fd f82c 	bl	8018ae8 <__aeabi_dsub>
 801ba90:	f805 6b01 	strb.w	r6, [r5], #1
 801ba94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ba96:	429d      	cmp	r5, r3
 801ba98:	4680      	mov	r8, r0
 801ba9a:	4689      	mov	r9, r1
 801ba9c:	f04f 0200 	mov.w	r2, #0
 801baa0:	d124      	bne.n	801baec <_dtoa_r+0x60c>
 801baa2:	4b1b      	ldr	r3, [pc, #108]	; (801bb10 <_dtoa_r+0x630>)
 801baa4:	4650      	mov	r0, sl
 801baa6:	4659      	mov	r1, fp
 801baa8:	f7fd f820 	bl	8018aec <__adddf3>
 801baac:	4602      	mov	r2, r0
 801baae:	460b      	mov	r3, r1
 801bab0:	4640      	mov	r0, r8
 801bab2:	4649      	mov	r1, r9
 801bab4:	f7fd fc60 	bl	8019378 <__aeabi_dcmpgt>
 801bab8:	2800      	cmp	r0, #0
 801baba:	d173      	bne.n	801bba4 <_dtoa_r+0x6c4>
 801babc:	4652      	mov	r2, sl
 801babe:	465b      	mov	r3, fp
 801bac0:	4913      	ldr	r1, [pc, #76]	; (801bb10 <_dtoa_r+0x630>)
 801bac2:	2000      	movs	r0, #0
 801bac4:	f7fd f810 	bl	8018ae8 <__aeabi_dsub>
 801bac8:	4602      	mov	r2, r0
 801baca:	460b      	mov	r3, r1
 801bacc:	4640      	mov	r0, r8
 801bace:	4649      	mov	r1, r9
 801bad0:	f7fd fc34 	bl	801933c <__aeabi_dcmplt>
 801bad4:	2800      	cmp	r0, #0
 801bad6:	f43f af35 	beq.w	801b944 <_dtoa_r+0x464>
 801bada:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801badc:	1e6b      	subs	r3, r5, #1
 801bade:	930f      	str	r3, [sp, #60]	; 0x3c
 801bae0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801bae4:	2b30      	cmp	r3, #48	; 0x30
 801bae6:	d0f8      	beq.n	801bada <_dtoa_r+0x5fa>
 801bae8:	9700      	str	r7, [sp, #0]
 801baea:	e049      	b.n	801bb80 <_dtoa_r+0x6a0>
 801baec:	4b05      	ldr	r3, [pc, #20]	; (801bb04 <_dtoa_r+0x624>)
 801baee:	f7fd f9b3 	bl	8018e58 <__aeabi_dmul>
 801baf2:	4680      	mov	r8, r0
 801baf4:	4689      	mov	r9, r1
 801baf6:	e7bd      	b.n	801ba74 <_dtoa_r+0x594>
 801baf8:	08052530 	.word	0x08052530
 801bafc:	08052508 	.word	0x08052508
 801bb00:	3ff00000 	.word	0x3ff00000
 801bb04:	40240000 	.word	0x40240000
 801bb08:	401c0000 	.word	0x401c0000
 801bb0c:	40140000 	.word	0x40140000
 801bb10:	3fe00000 	.word	0x3fe00000
 801bb14:	9d01      	ldr	r5, [sp, #4]
 801bb16:	4656      	mov	r6, sl
 801bb18:	465f      	mov	r7, fp
 801bb1a:	4642      	mov	r2, r8
 801bb1c:	464b      	mov	r3, r9
 801bb1e:	4630      	mov	r0, r6
 801bb20:	4639      	mov	r1, r7
 801bb22:	f7fd fac3 	bl	80190ac <__aeabi_ddiv>
 801bb26:	f7fd fc47 	bl	80193b8 <__aeabi_d2iz>
 801bb2a:	4682      	mov	sl, r0
 801bb2c:	f7fd f92a 	bl	8018d84 <__aeabi_i2d>
 801bb30:	4642      	mov	r2, r8
 801bb32:	464b      	mov	r3, r9
 801bb34:	f7fd f990 	bl	8018e58 <__aeabi_dmul>
 801bb38:	4602      	mov	r2, r0
 801bb3a:	460b      	mov	r3, r1
 801bb3c:	4630      	mov	r0, r6
 801bb3e:	4639      	mov	r1, r7
 801bb40:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801bb44:	f7fc ffd0 	bl	8018ae8 <__aeabi_dsub>
 801bb48:	f805 6b01 	strb.w	r6, [r5], #1
 801bb4c:	9e01      	ldr	r6, [sp, #4]
 801bb4e:	9f03      	ldr	r7, [sp, #12]
 801bb50:	1bae      	subs	r6, r5, r6
 801bb52:	42b7      	cmp	r7, r6
 801bb54:	4602      	mov	r2, r0
 801bb56:	460b      	mov	r3, r1
 801bb58:	d135      	bne.n	801bbc6 <_dtoa_r+0x6e6>
 801bb5a:	f7fc ffc7 	bl	8018aec <__adddf3>
 801bb5e:	4642      	mov	r2, r8
 801bb60:	464b      	mov	r3, r9
 801bb62:	4606      	mov	r6, r0
 801bb64:	460f      	mov	r7, r1
 801bb66:	f7fd fc07 	bl	8019378 <__aeabi_dcmpgt>
 801bb6a:	b9d0      	cbnz	r0, 801bba2 <_dtoa_r+0x6c2>
 801bb6c:	4642      	mov	r2, r8
 801bb6e:	464b      	mov	r3, r9
 801bb70:	4630      	mov	r0, r6
 801bb72:	4639      	mov	r1, r7
 801bb74:	f7fd fbd8 	bl	8019328 <__aeabi_dcmpeq>
 801bb78:	b110      	cbz	r0, 801bb80 <_dtoa_r+0x6a0>
 801bb7a:	f01a 0f01 	tst.w	sl, #1
 801bb7e:	d110      	bne.n	801bba2 <_dtoa_r+0x6c2>
 801bb80:	4620      	mov	r0, r4
 801bb82:	ee18 1a10 	vmov	r1, s16
 801bb86:	f000 fe75 	bl	801c874 <_Bfree>
 801bb8a:	2300      	movs	r3, #0
 801bb8c:	9800      	ldr	r0, [sp, #0]
 801bb8e:	702b      	strb	r3, [r5, #0]
 801bb90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bb92:	3001      	adds	r0, #1
 801bb94:	6018      	str	r0, [r3, #0]
 801bb96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bb98:	2b00      	cmp	r3, #0
 801bb9a:	f43f acf1 	beq.w	801b580 <_dtoa_r+0xa0>
 801bb9e:	601d      	str	r5, [r3, #0]
 801bba0:	e4ee      	b.n	801b580 <_dtoa_r+0xa0>
 801bba2:	9f00      	ldr	r7, [sp, #0]
 801bba4:	462b      	mov	r3, r5
 801bba6:	461d      	mov	r5, r3
 801bba8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801bbac:	2a39      	cmp	r2, #57	; 0x39
 801bbae:	d106      	bne.n	801bbbe <_dtoa_r+0x6de>
 801bbb0:	9a01      	ldr	r2, [sp, #4]
 801bbb2:	429a      	cmp	r2, r3
 801bbb4:	d1f7      	bne.n	801bba6 <_dtoa_r+0x6c6>
 801bbb6:	9901      	ldr	r1, [sp, #4]
 801bbb8:	2230      	movs	r2, #48	; 0x30
 801bbba:	3701      	adds	r7, #1
 801bbbc:	700a      	strb	r2, [r1, #0]
 801bbbe:	781a      	ldrb	r2, [r3, #0]
 801bbc0:	3201      	adds	r2, #1
 801bbc2:	701a      	strb	r2, [r3, #0]
 801bbc4:	e790      	b.n	801bae8 <_dtoa_r+0x608>
 801bbc6:	4ba6      	ldr	r3, [pc, #664]	; (801be60 <_dtoa_r+0x980>)
 801bbc8:	2200      	movs	r2, #0
 801bbca:	f7fd f945 	bl	8018e58 <__aeabi_dmul>
 801bbce:	2200      	movs	r2, #0
 801bbd0:	2300      	movs	r3, #0
 801bbd2:	4606      	mov	r6, r0
 801bbd4:	460f      	mov	r7, r1
 801bbd6:	f7fd fba7 	bl	8019328 <__aeabi_dcmpeq>
 801bbda:	2800      	cmp	r0, #0
 801bbdc:	d09d      	beq.n	801bb1a <_dtoa_r+0x63a>
 801bbde:	e7cf      	b.n	801bb80 <_dtoa_r+0x6a0>
 801bbe0:	9a08      	ldr	r2, [sp, #32]
 801bbe2:	2a00      	cmp	r2, #0
 801bbe4:	f000 80d7 	beq.w	801bd96 <_dtoa_r+0x8b6>
 801bbe8:	9a06      	ldr	r2, [sp, #24]
 801bbea:	2a01      	cmp	r2, #1
 801bbec:	f300 80ba 	bgt.w	801bd64 <_dtoa_r+0x884>
 801bbf0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bbf2:	2a00      	cmp	r2, #0
 801bbf4:	f000 80b2 	beq.w	801bd5c <_dtoa_r+0x87c>
 801bbf8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801bbfc:	9e07      	ldr	r6, [sp, #28]
 801bbfe:	9d04      	ldr	r5, [sp, #16]
 801bc00:	9a04      	ldr	r2, [sp, #16]
 801bc02:	441a      	add	r2, r3
 801bc04:	9204      	str	r2, [sp, #16]
 801bc06:	9a05      	ldr	r2, [sp, #20]
 801bc08:	2101      	movs	r1, #1
 801bc0a:	441a      	add	r2, r3
 801bc0c:	4620      	mov	r0, r4
 801bc0e:	9205      	str	r2, [sp, #20]
 801bc10:	f000 ff32 	bl	801ca78 <__i2b>
 801bc14:	4607      	mov	r7, r0
 801bc16:	2d00      	cmp	r5, #0
 801bc18:	dd0c      	ble.n	801bc34 <_dtoa_r+0x754>
 801bc1a:	9b05      	ldr	r3, [sp, #20]
 801bc1c:	2b00      	cmp	r3, #0
 801bc1e:	dd09      	ble.n	801bc34 <_dtoa_r+0x754>
 801bc20:	42ab      	cmp	r3, r5
 801bc22:	9a04      	ldr	r2, [sp, #16]
 801bc24:	bfa8      	it	ge
 801bc26:	462b      	movge	r3, r5
 801bc28:	1ad2      	subs	r2, r2, r3
 801bc2a:	9204      	str	r2, [sp, #16]
 801bc2c:	9a05      	ldr	r2, [sp, #20]
 801bc2e:	1aed      	subs	r5, r5, r3
 801bc30:	1ad3      	subs	r3, r2, r3
 801bc32:	9305      	str	r3, [sp, #20]
 801bc34:	9b07      	ldr	r3, [sp, #28]
 801bc36:	b31b      	cbz	r3, 801bc80 <_dtoa_r+0x7a0>
 801bc38:	9b08      	ldr	r3, [sp, #32]
 801bc3a:	2b00      	cmp	r3, #0
 801bc3c:	f000 80af 	beq.w	801bd9e <_dtoa_r+0x8be>
 801bc40:	2e00      	cmp	r6, #0
 801bc42:	dd13      	ble.n	801bc6c <_dtoa_r+0x78c>
 801bc44:	4639      	mov	r1, r7
 801bc46:	4632      	mov	r2, r6
 801bc48:	4620      	mov	r0, r4
 801bc4a:	f000 ffd5 	bl	801cbf8 <__pow5mult>
 801bc4e:	ee18 2a10 	vmov	r2, s16
 801bc52:	4601      	mov	r1, r0
 801bc54:	4607      	mov	r7, r0
 801bc56:	4620      	mov	r0, r4
 801bc58:	f000 ff24 	bl	801caa4 <__multiply>
 801bc5c:	ee18 1a10 	vmov	r1, s16
 801bc60:	4680      	mov	r8, r0
 801bc62:	4620      	mov	r0, r4
 801bc64:	f000 fe06 	bl	801c874 <_Bfree>
 801bc68:	ee08 8a10 	vmov	s16, r8
 801bc6c:	9b07      	ldr	r3, [sp, #28]
 801bc6e:	1b9a      	subs	r2, r3, r6
 801bc70:	d006      	beq.n	801bc80 <_dtoa_r+0x7a0>
 801bc72:	ee18 1a10 	vmov	r1, s16
 801bc76:	4620      	mov	r0, r4
 801bc78:	f000 ffbe 	bl	801cbf8 <__pow5mult>
 801bc7c:	ee08 0a10 	vmov	s16, r0
 801bc80:	2101      	movs	r1, #1
 801bc82:	4620      	mov	r0, r4
 801bc84:	f000 fef8 	bl	801ca78 <__i2b>
 801bc88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bc8a:	2b00      	cmp	r3, #0
 801bc8c:	4606      	mov	r6, r0
 801bc8e:	f340 8088 	ble.w	801bda2 <_dtoa_r+0x8c2>
 801bc92:	461a      	mov	r2, r3
 801bc94:	4601      	mov	r1, r0
 801bc96:	4620      	mov	r0, r4
 801bc98:	f000 ffae 	bl	801cbf8 <__pow5mult>
 801bc9c:	9b06      	ldr	r3, [sp, #24]
 801bc9e:	2b01      	cmp	r3, #1
 801bca0:	4606      	mov	r6, r0
 801bca2:	f340 8081 	ble.w	801bda8 <_dtoa_r+0x8c8>
 801bca6:	f04f 0800 	mov.w	r8, #0
 801bcaa:	6933      	ldr	r3, [r6, #16]
 801bcac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801bcb0:	6918      	ldr	r0, [r3, #16]
 801bcb2:	f000 fe91 	bl	801c9d8 <__hi0bits>
 801bcb6:	f1c0 0020 	rsb	r0, r0, #32
 801bcba:	9b05      	ldr	r3, [sp, #20]
 801bcbc:	4418      	add	r0, r3
 801bcbe:	f010 001f 	ands.w	r0, r0, #31
 801bcc2:	f000 8092 	beq.w	801bdea <_dtoa_r+0x90a>
 801bcc6:	f1c0 0320 	rsb	r3, r0, #32
 801bcca:	2b04      	cmp	r3, #4
 801bccc:	f340 808a 	ble.w	801bde4 <_dtoa_r+0x904>
 801bcd0:	f1c0 001c 	rsb	r0, r0, #28
 801bcd4:	9b04      	ldr	r3, [sp, #16]
 801bcd6:	4403      	add	r3, r0
 801bcd8:	9304      	str	r3, [sp, #16]
 801bcda:	9b05      	ldr	r3, [sp, #20]
 801bcdc:	4403      	add	r3, r0
 801bcde:	4405      	add	r5, r0
 801bce0:	9305      	str	r3, [sp, #20]
 801bce2:	9b04      	ldr	r3, [sp, #16]
 801bce4:	2b00      	cmp	r3, #0
 801bce6:	dd07      	ble.n	801bcf8 <_dtoa_r+0x818>
 801bce8:	ee18 1a10 	vmov	r1, s16
 801bcec:	461a      	mov	r2, r3
 801bcee:	4620      	mov	r0, r4
 801bcf0:	f000 ffdc 	bl	801ccac <__lshift>
 801bcf4:	ee08 0a10 	vmov	s16, r0
 801bcf8:	9b05      	ldr	r3, [sp, #20]
 801bcfa:	2b00      	cmp	r3, #0
 801bcfc:	dd05      	ble.n	801bd0a <_dtoa_r+0x82a>
 801bcfe:	4631      	mov	r1, r6
 801bd00:	461a      	mov	r2, r3
 801bd02:	4620      	mov	r0, r4
 801bd04:	f000 ffd2 	bl	801ccac <__lshift>
 801bd08:	4606      	mov	r6, r0
 801bd0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bd0c:	2b00      	cmp	r3, #0
 801bd0e:	d06e      	beq.n	801bdee <_dtoa_r+0x90e>
 801bd10:	ee18 0a10 	vmov	r0, s16
 801bd14:	4631      	mov	r1, r6
 801bd16:	f001 f839 	bl	801cd8c <__mcmp>
 801bd1a:	2800      	cmp	r0, #0
 801bd1c:	da67      	bge.n	801bdee <_dtoa_r+0x90e>
 801bd1e:	9b00      	ldr	r3, [sp, #0]
 801bd20:	3b01      	subs	r3, #1
 801bd22:	ee18 1a10 	vmov	r1, s16
 801bd26:	9300      	str	r3, [sp, #0]
 801bd28:	220a      	movs	r2, #10
 801bd2a:	2300      	movs	r3, #0
 801bd2c:	4620      	mov	r0, r4
 801bd2e:	f000 fdc3 	bl	801c8b8 <__multadd>
 801bd32:	9b08      	ldr	r3, [sp, #32]
 801bd34:	ee08 0a10 	vmov	s16, r0
 801bd38:	2b00      	cmp	r3, #0
 801bd3a:	f000 81b1 	beq.w	801c0a0 <_dtoa_r+0xbc0>
 801bd3e:	2300      	movs	r3, #0
 801bd40:	4639      	mov	r1, r7
 801bd42:	220a      	movs	r2, #10
 801bd44:	4620      	mov	r0, r4
 801bd46:	f000 fdb7 	bl	801c8b8 <__multadd>
 801bd4a:	9b02      	ldr	r3, [sp, #8]
 801bd4c:	2b00      	cmp	r3, #0
 801bd4e:	4607      	mov	r7, r0
 801bd50:	f300 808e 	bgt.w	801be70 <_dtoa_r+0x990>
 801bd54:	9b06      	ldr	r3, [sp, #24]
 801bd56:	2b02      	cmp	r3, #2
 801bd58:	dc51      	bgt.n	801bdfe <_dtoa_r+0x91e>
 801bd5a:	e089      	b.n	801be70 <_dtoa_r+0x990>
 801bd5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bd5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801bd62:	e74b      	b.n	801bbfc <_dtoa_r+0x71c>
 801bd64:	9b03      	ldr	r3, [sp, #12]
 801bd66:	1e5e      	subs	r6, r3, #1
 801bd68:	9b07      	ldr	r3, [sp, #28]
 801bd6a:	42b3      	cmp	r3, r6
 801bd6c:	bfbf      	itttt	lt
 801bd6e:	9b07      	ldrlt	r3, [sp, #28]
 801bd70:	9607      	strlt	r6, [sp, #28]
 801bd72:	1af2      	sublt	r2, r6, r3
 801bd74:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801bd76:	bfb6      	itet	lt
 801bd78:	189b      	addlt	r3, r3, r2
 801bd7a:	1b9e      	subge	r6, r3, r6
 801bd7c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801bd7e:	9b03      	ldr	r3, [sp, #12]
 801bd80:	bfb8      	it	lt
 801bd82:	2600      	movlt	r6, #0
 801bd84:	2b00      	cmp	r3, #0
 801bd86:	bfb7      	itett	lt
 801bd88:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801bd8c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801bd90:	1a9d      	sublt	r5, r3, r2
 801bd92:	2300      	movlt	r3, #0
 801bd94:	e734      	b.n	801bc00 <_dtoa_r+0x720>
 801bd96:	9e07      	ldr	r6, [sp, #28]
 801bd98:	9d04      	ldr	r5, [sp, #16]
 801bd9a:	9f08      	ldr	r7, [sp, #32]
 801bd9c:	e73b      	b.n	801bc16 <_dtoa_r+0x736>
 801bd9e:	9a07      	ldr	r2, [sp, #28]
 801bda0:	e767      	b.n	801bc72 <_dtoa_r+0x792>
 801bda2:	9b06      	ldr	r3, [sp, #24]
 801bda4:	2b01      	cmp	r3, #1
 801bda6:	dc18      	bgt.n	801bdda <_dtoa_r+0x8fa>
 801bda8:	f1ba 0f00 	cmp.w	sl, #0
 801bdac:	d115      	bne.n	801bdda <_dtoa_r+0x8fa>
 801bdae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801bdb2:	b993      	cbnz	r3, 801bdda <_dtoa_r+0x8fa>
 801bdb4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801bdb8:	0d1b      	lsrs	r3, r3, #20
 801bdba:	051b      	lsls	r3, r3, #20
 801bdbc:	b183      	cbz	r3, 801bde0 <_dtoa_r+0x900>
 801bdbe:	9b04      	ldr	r3, [sp, #16]
 801bdc0:	3301      	adds	r3, #1
 801bdc2:	9304      	str	r3, [sp, #16]
 801bdc4:	9b05      	ldr	r3, [sp, #20]
 801bdc6:	3301      	adds	r3, #1
 801bdc8:	9305      	str	r3, [sp, #20]
 801bdca:	f04f 0801 	mov.w	r8, #1
 801bdce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bdd0:	2b00      	cmp	r3, #0
 801bdd2:	f47f af6a 	bne.w	801bcaa <_dtoa_r+0x7ca>
 801bdd6:	2001      	movs	r0, #1
 801bdd8:	e76f      	b.n	801bcba <_dtoa_r+0x7da>
 801bdda:	f04f 0800 	mov.w	r8, #0
 801bdde:	e7f6      	b.n	801bdce <_dtoa_r+0x8ee>
 801bde0:	4698      	mov	r8, r3
 801bde2:	e7f4      	b.n	801bdce <_dtoa_r+0x8ee>
 801bde4:	f43f af7d 	beq.w	801bce2 <_dtoa_r+0x802>
 801bde8:	4618      	mov	r0, r3
 801bdea:	301c      	adds	r0, #28
 801bdec:	e772      	b.n	801bcd4 <_dtoa_r+0x7f4>
 801bdee:	9b03      	ldr	r3, [sp, #12]
 801bdf0:	2b00      	cmp	r3, #0
 801bdf2:	dc37      	bgt.n	801be64 <_dtoa_r+0x984>
 801bdf4:	9b06      	ldr	r3, [sp, #24]
 801bdf6:	2b02      	cmp	r3, #2
 801bdf8:	dd34      	ble.n	801be64 <_dtoa_r+0x984>
 801bdfa:	9b03      	ldr	r3, [sp, #12]
 801bdfc:	9302      	str	r3, [sp, #8]
 801bdfe:	9b02      	ldr	r3, [sp, #8]
 801be00:	b96b      	cbnz	r3, 801be1e <_dtoa_r+0x93e>
 801be02:	4631      	mov	r1, r6
 801be04:	2205      	movs	r2, #5
 801be06:	4620      	mov	r0, r4
 801be08:	f000 fd56 	bl	801c8b8 <__multadd>
 801be0c:	4601      	mov	r1, r0
 801be0e:	4606      	mov	r6, r0
 801be10:	ee18 0a10 	vmov	r0, s16
 801be14:	f000 ffba 	bl	801cd8c <__mcmp>
 801be18:	2800      	cmp	r0, #0
 801be1a:	f73f adbb 	bgt.w	801b994 <_dtoa_r+0x4b4>
 801be1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801be20:	9d01      	ldr	r5, [sp, #4]
 801be22:	43db      	mvns	r3, r3
 801be24:	9300      	str	r3, [sp, #0]
 801be26:	f04f 0800 	mov.w	r8, #0
 801be2a:	4631      	mov	r1, r6
 801be2c:	4620      	mov	r0, r4
 801be2e:	f000 fd21 	bl	801c874 <_Bfree>
 801be32:	2f00      	cmp	r7, #0
 801be34:	f43f aea4 	beq.w	801bb80 <_dtoa_r+0x6a0>
 801be38:	f1b8 0f00 	cmp.w	r8, #0
 801be3c:	d005      	beq.n	801be4a <_dtoa_r+0x96a>
 801be3e:	45b8      	cmp	r8, r7
 801be40:	d003      	beq.n	801be4a <_dtoa_r+0x96a>
 801be42:	4641      	mov	r1, r8
 801be44:	4620      	mov	r0, r4
 801be46:	f000 fd15 	bl	801c874 <_Bfree>
 801be4a:	4639      	mov	r1, r7
 801be4c:	4620      	mov	r0, r4
 801be4e:	f000 fd11 	bl	801c874 <_Bfree>
 801be52:	e695      	b.n	801bb80 <_dtoa_r+0x6a0>
 801be54:	2600      	movs	r6, #0
 801be56:	4637      	mov	r7, r6
 801be58:	e7e1      	b.n	801be1e <_dtoa_r+0x93e>
 801be5a:	9700      	str	r7, [sp, #0]
 801be5c:	4637      	mov	r7, r6
 801be5e:	e599      	b.n	801b994 <_dtoa_r+0x4b4>
 801be60:	40240000 	.word	0x40240000
 801be64:	9b08      	ldr	r3, [sp, #32]
 801be66:	2b00      	cmp	r3, #0
 801be68:	f000 80ca 	beq.w	801c000 <_dtoa_r+0xb20>
 801be6c:	9b03      	ldr	r3, [sp, #12]
 801be6e:	9302      	str	r3, [sp, #8]
 801be70:	2d00      	cmp	r5, #0
 801be72:	dd05      	ble.n	801be80 <_dtoa_r+0x9a0>
 801be74:	4639      	mov	r1, r7
 801be76:	462a      	mov	r2, r5
 801be78:	4620      	mov	r0, r4
 801be7a:	f000 ff17 	bl	801ccac <__lshift>
 801be7e:	4607      	mov	r7, r0
 801be80:	f1b8 0f00 	cmp.w	r8, #0
 801be84:	d05b      	beq.n	801bf3e <_dtoa_r+0xa5e>
 801be86:	6879      	ldr	r1, [r7, #4]
 801be88:	4620      	mov	r0, r4
 801be8a:	f000 fcb3 	bl	801c7f4 <_Balloc>
 801be8e:	4605      	mov	r5, r0
 801be90:	b928      	cbnz	r0, 801be9e <_dtoa_r+0x9be>
 801be92:	4b87      	ldr	r3, [pc, #540]	; (801c0b0 <_dtoa_r+0xbd0>)
 801be94:	4602      	mov	r2, r0
 801be96:	f240 21ea 	movw	r1, #746	; 0x2ea
 801be9a:	f7ff bb3b 	b.w	801b514 <_dtoa_r+0x34>
 801be9e:	693a      	ldr	r2, [r7, #16]
 801bea0:	3202      	adds	r2, #2
 801bea2:	0092      	lsls	r2, r2, #2
 801bea4:	f107 010c 	add.w	r1, r7, #12
 801bea8:	300c      	adds	r0, #12
 801beaa:	f000 fc95 	bl	801c7d8 <memcpy>
 801beae:	2201      	movs	r2, #1
 801beb0:	4629      	mov	r1, r5
 801beb2:	4620      	mov	r0, r4
 801beb4:	f000 fefa 	bl	801ccac <__lshift>
 801beb8:	9b01      	ldr	r3, [sp, #4]
 801beba:	f103 0901 	add.w	r9, r3, #1
 801bebe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801bec2:	4413      	add	r3, r2
 801bec4:	9305      	str	r3, [sp, #20]
 801bec6:	f00a 0301 	and.w	r3, sl, #1
 801beca:	46b8      	mov	r8, r7
 801becc:	9304      	str	r3, [sp, #16]
 801bece:	4607      	mov	r7, r0
 801bed0:	4631      	mov	r1, r6
 801bed2:	ee18 0a10 	vmov	r0, s16
 801bed6:	f7ff fa75 	bl	801b3c4 <quorem>
 801beda:	4641      	mov	r1, r8
 801bedc:	9002      	str	r0, [sp, #8]
 801bede:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801bee2:	ee18 0a10 	vmov	r0, s16
 801bee6:	f000 ff51 	bl	801cd8c <__mcmp>
 801beea:	463a      	mov	r2, r7
 801beec:	9003      	str	r0, [sp, #12]
 801beee:	4631      	mov	r1, r6
 801bef0:	4620      	mov	r0, r4
 801bef2:	f000 ff67 	bl	801cdc4 <__mdiff>
 801bef6:	68c2      	ldr	r2, [r0, #12]
 801bef8:	f109 3bff 	add.w	fp, r9, #4294967295
 801befc:	4605      	mov	r5, r0
 801befe:	bb02      	cbnz	r2, 801bf42 <_dtoa_r+0xa62>
 801bf00:	4601      	mov	r1, r0
 801bf02:	ee18 0a10 	vmov	r0, s16
 801bf06:	f000 ff41 	bl	801cd8c <__mcmp>
 801bf0a:	4602      	mov	r2, r0
 801bf0c:	4629      	mov	r1, r5
 801bf0e:	4620      	mov	r0, r4
 801bf10:	9207      	str	r2, [sp, #28]
 801bf12:	f000 fcaf 	bl	801c874 <_Bfree>
 801bf16:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801bf1a:	ea43 0102 	orr.w	r1, r3, r2
 801bf1e:	9b04      	ldr	r3, [sp, #16]
 801bf20:	430b      	orrs	r3, r1
 801bf22:	464d      	mov	r5, r9
 801bf24:	d10f      	bne.n	801bf46 <_dtoa_r+0xa66>
 801bf26:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801bf2a:	d02a      	beq.n	801bf82 <_dtoa_r+0xaa2>
 801bf2c:	9b03      	ldr	r3, [sp, #12]
 801bf2e:	2b00      	cmp	r3, #0
 801bf30:	dd02      	ble.n	801bf38 <_dtoa_r+0xa58>
 801bf32:	9b02      	ldr	r3, [sp, #8]
 801bf34:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801bf38:	f88b a000 	strb.w	sl, [fp]
 801bf3c:	e775      	b.n	801be2a <_dtoa_r+0x94a>
 801bf3e:	4638      	mov	r0, r7
 801bf40:	e7ba      	b.n	801beb8 <_dtoa_r+0x9d8>
 801bf42:	2201      	movs	r2, #1
 801bf44:	e7e2      	b.n	801bf0c <_dtoa_r+0xa2c>
 801bf46:	9b03      	ldr	r3, [sp, #12]
 801bf48:	2b00      	cmp	r3, #0
 801bf4a:	db04      	blt.n	801bf56 <_dtoa_r+0xa76>
 801bf4c:	9906      	ldr	r1, [sp, #24]
 801bf4e:	430b      	orrs	r3, r1
 801bf50:	9904      	ldr	r1, [sp, #16]
 801bf52:	430b      	orrs	r3, r1
 801bf54:	d122      	bne.n	801bf9c <_dtoa_r+0xabc>
 801bf56:	2a00      	cmp	r2, #0
 801bf58:	ddee      	ble.n	801bf38 <_dtoa_r+0xa58>
 801bf5a:	ee18 1a10 	vmov	r1, s16
 801bf5e:	2201      	movs	r2, #1
 801bf60:	4620      	mov	r0, r4
 801bf62:	f000 fea3 	bl	801ccac <__lshift>
 801bf66:	4631      	mov	r1, r6
 801bf68:	ee08 0a10 	vmov	s16, r0
 801bf6c:	f000 ff0e 	bl	801cd8c <__mcmp>
 801bf70:	2800      	cmp	r0, #0
 801bf72:	dc03      	bgt.n	801bf7c <_dtoa_r+0xa9c>
 801bf74:	d1e0      	bne.n	801bf38 <_dtoa_r+0xa58>
 801bf76:	f01a 0f01 	tst.w	sl, #1
 801bf7a:	d0dd      	beq.n	801bf38 <_dtoa_r+0xa58>
 801bf7c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801bf80:	d1d7      	bne.n	801bf32 <_dtoa_r+0xa52>
 801bf82:	2339      	movs	r3, #57	; 0x39
 801bf84:	f88b 3000 	strb.w	r3, [fp]
 801bf88:	462b      	mov	r3, r5
 801bf8a:	461d      	mov	r5, r3
 801bf8c:	3b01      	subs	r3, #1
 801bf8e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801bf92:	2a39      	cmp	r2, #57	; 0x39
 801bf94:	d071      	beq.n	801c07a <_dtoa_r+0xb9a>
 801bf96:	3201      	adds	r2, #1
 801bf98:	701a      	strb	r2, [r3, #0]
 801bf9a:	e746      	b.n	801be2a <_dtoa_r+0x94a>
 801bf9c:	2a00      	cmp	r2, #0
 801bf9e:	dd07      	ble.n	801bfb0 <_dtoa_r+0xad0>
 801bfa0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801bfa4:	d0ed      	beq.n	801bf82 <_dtoa_r+0xaa2>
 801bfa6:	f10a 0301 	add.w	r3, sl, #1
 801bfaa:	f88b 3000 	strb.w	r3, [fp]
 801bfae:	e73c      	b.n	801be2a <_dtoa_r+0x94a>
 801bfb0:	9b05      	ldr	r3, [sp, #20]
 801bfb2:	f809 ac01 	strb.w	sl, [r9, #-1]
 801bfb6:	4599      	cmp	r9, r3
 801bfb8:	d047      	beq.n	801c04a <_dtoa_r+0xb6a>
 801bfba:	ee18 1a10 	vmov	r1, s16
 801bfbe:	2300      	movs	r3, #0
 801bfc0:	220a      	movs	r2, #10
 801bfc2:	4620      	mov	r0, r4
 801bfc4:	f000 fc78 	bl	801c8b8 <__multadd>
 801bfc8:	45b8      	cmp	r8, r7
 801bfca:	ee08 0a10 	vmov	s16, r0
 801bfce:	f04f 0300 	mov.w	r3, #0
 801bfd2:	f04f 020a 	mov.w	r2, #10
 801bfd6:	4641      	mov	r1, r8
 801bfd8:	4620      	mov	r0, r4
 801bfda:	d106      	bne.n	801bfea <_dtoa_r+0xb0a>
 801bfdc:	f000 fc6c 	bl	801c8b8 <__multadd>
 801bfe0:	4680      	mov	r8, r0
 801bfe2:	4607      	mov	r7, r0
 801bfe4:	f109 0901 	add.w	r9, r9, #1
 801bfe8:	e772      	b.n	801bed0 <_dtoa_r+0x9f0>
 801bfea:	f000 fc65 	bl	801c8b8 <__multadd>
 801bfee:	4639      	mov	r1, r7
 801bff0:	4680      	mov	r8, r0
 801bff2:	2300      	movs	r3, #0
 801bff4:	220a      	movs	r2, #10
 801bff6:	4620      	mov	r0, r4
 801bff8:	f000 fc5e 	bl	801c8b8 <__multadd>
 801bffc:	4607      	mov	r7, r0
 801bffe:	e7f1      	b.n	801bfe4 <_dtoa_r+0xb04>
 801c000:	9b03      	ldr	r3, [sp, #12]
 801c002:	9302      	str	r3, [sp, #8]
 801c004:	9d01      	ldr	r5, [sp, #4]
 801c006:	ee18 0a10 	vmov	r0, s16
 801c00a:	4631      	mov	r1, r6
 801c00c:	f7ff f9da 	bl	801b3c4 <quorem>
 801c010:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801c014:	9b01      	ldr	r3, [sp, #4]
 801c016:	f805 ab01 	strb.w	sl, [r5], #1
 801c01a:	1aea      	subs	r2, r5, r3
 801c01c:	9b02      	ldr	r3, [sp, #8]
 801c01e:	4293      	cmp	r3, r2
 801c020:	dd09      	ble.n	801c036 <_dtoa_r+0xb56>
 801c022:	ee18 1a10 	vmov	r1, s16
 801c026:	2300      	movs	r3, #0
 801c028:	220a      	movs	r2, #10
 801c02a:	4620      	mov	r0, r4
 801c02c:	f000 fc44 	bl	801c8b8 <__multadd>
 801c030:	ee08 0a10 	vmov	s16, r0
 801c034:	e7e7      	b.n	801c006 <_dtoa_r+0xb26>
 801c036:	9b02      	ldr	r3, [sp, #8]
 801c038:	2b00      	cmp	r3, #0
 801c03a:	bfc8      	it	gt
 801c03c:	461d      	movgt	r5, r3
 801c03e:	9b01      	ldr	r3, [sp, #4]
 801c040:	bfd8      	it	le
 801c042:	2501      	movle	r5, #1
 801c044:	441d      	add	r5, r3
 801c046:	f04f 0800 	mov.w	r8, #0
 801c04a:	ee18 1a10 	vmov	r1, s16
 801c04e:	2201      	movs	r2, #1
 801c050:	4620      	mov	r0, r4
 801c052:	f000 fe2b 	bl	801ccac <__lshift>
 801c056:	4631      	mov	r1, r6
 801c058:	ee08 0a10 	vmov	s16, r0
 801c05c:	f000 fe96 	bl	801cd8c <__mcmp>
 801c060:	2800      	cmp	r0, #0
 801c062:	dc91      	bgt.n	801bf88 <_dtoa_r+0xaa8>
 801c064:	d102      	bne.n	801c06c <_dtoa_r+0xb8c>
 801c066:	f01a 0f01 	tst.w	sl, #1
 801c06a:	d18d      	bne.n	801bf88 <_dtoa_r+0xaa8>
 801c06c:	462b      	mov	r3, r5
 801c06e:	461d      	mov	r5, r3
 801c070:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c074:	2a30      	cmp	r2, #48	; 0x30
 801c076:	d0fa      	beq.n	801c06e <_dtoa_r+0xb8e>
 801c078:	e6d7      	b.n	801be2a <_dtoa_r+0x94a>
 801c07a:	9a01      	ldr	r2, [sp, #4]
 801c07c:	429a      	cmp	r2, r3
 801c07e:	d184      	bne.n	801bf8a <_dtoa_r+0xaaa>
 801c080:	9b00      	ldr	r3, [sp, #0]
 801c082:	3301      	adds	r3, #1
 801c084:	9300      	str	r3, [sp, #0]
 801c086:	2331      	movs	r3, #49	; 0x31
 801c088:	7013      	strb	r3, [r2, #0]
 801c08a:	e6ce      	b.n	801be2a <_dtoa_r+0x94a>
 801c08c:	4b09      	ldr	r3, [pc, #36]	; (801c0b4 <_dtoa_r+0xbd4>)
 801c08e:	f7ff ba95 	b.w	801b5bc <_dtoa_r+0xdc>
 801c092:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c094:	2b00      	cmp	r3, #0
 801c096:	f47f aa6e 	bne.w	801b576 <_dtoa_r+0x96>
 801c09a:	4b07      	ldr	r3, [pc, #28]	; (801c0b8 <_dtoa_r+0xbd8>)
 801c09c:	f7ff ba8e 	b.w	801b5bc <_dtoa_r+0xdc>
 801c0a0:	9b02      	ldr	r3, [sp, #8]
 801c0a2:	2b00      	cmp	r3, #0
 801c0a4:	dcae      	bgt.n	801c004 <_dtoa_r+0xb24>
 801c0a6:	9b06      	ldr	r3, [sp, #24]
 801c0a8:	2b02      	cmp	r3, #2
 801c0aa:	f73f aea8 	bgt.w	801bdfe <_dtoa_r+0x91e>
 801c0ae:	e7a9      	b.n	801c004 <_dtoa_r+0xb24>
 801c0b0:	08052420 	.word	0x08052420
 801c0b4:	08052224 	.word	0x08052224
 801c0b8:	080523a1 	.word	0x080523a1

0801c0bc <rshift>:
 801c0bc:	6903      	ldr	r3, [r0, #16]
 801c0be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801c0c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c0c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 801c0ca:	f100 0414 	add.w	r4, r0, #20
 801c0ce:	dd45      	ble.n	801c15c <rshift+0xa0>
 801c0d0:	f011 011f 	ands.w	r1, r1, #31
 801c0d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801c0d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801c0dc:	d10c      	bne.n	801c0f8 <rshift+0x3c>
 801c0de:	f100 0710 	add.w	r7, r0, #16
 801c0e2:	4629      	mov	r1, r5
 801c0e4:	42b1      	cmp	r1, r6
 801c0e6:	d334      	bcc.n	801c152 <rshift+0x96>
 801c0e8:	1a9b      	subs	r3, r3, r2
 801c0ea:	009b      	lsls	r3, r3, #2
 801c0ec:	1eea      	subs	r2, r5, #3
 801c0ee:	4296      	cmp	r6, r2
 801c0f0:	bf38      	it	cc
 801c0f2:	2300      	movcc	r3, #0
 801c0f4:	4423      	add	r3, r4
 801c0f6:	e015      	b.n	801c124 <rshift+0x68>
 801c0f8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801c0fc:	f1c1 0820 	rsb	r8, r1, #32
 801c100:	40cf      	lsrs	r7, r1
 801c102:	f105 0e04 	add.w	lr, r5, #4
 801c106:	46a1      	mov	r9, r4
 801c108:	4576      	cmp	r6, lr
 801c10a:	46f4      	mov	ip, lr
 801c10c:	d815      	bhi.n	801c13a <rshift+0x7e>
 801c10e:	1a9a      	subs	r2, r3, r2
 801c110:	0092      	lsls	r2, r2, #2
 801c112:	3a04      	subs	r2, #4
 801c114:	3501      	adds	r5, #1
 801c116:	42ae      	cmp	r6, r5
 801c118:	bf38      	it	cc
 801c11a:	2200      	movcc	r2, #0
 801c11c:	18a3      	adds	r3, r4, r2
 801c11e:	50a7      	str	r7, [r4, r2]
 801c120:	b107      	cbz	r7, 801c124 <rshift+0x68>
 801c122:	3304      	adds	r3, #4
 801c124:	1b1a      	subs	r2, r3, r4
 801c126:	42a3      	cmp	r3, r4
 801c128:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801c12c:	bf08      	it	eq
 801c12e:	2300      	moveq	r3, #0
 801c130:	6102      	str	r2, [r0, #16]
 801c132:	bf08      	it	eq
 801c134:	6143      	streq	r3, [r0, #20]
 801c136:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c13a:	f8dc c000 	ldr.w	ip, [ip]
 801c13e:	fa0c fc08 	lsl.w	ip, ip, r8
 801c142:	ea4c 0707 	orr.w	r7, ip, r7
 801c146:	f849 7b04 	str.w	r7, [r9], #4
 801c14a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801c14e:	40cf      	lsrs	r7, r1
 801c150:	e7da      	b.n	801c108 <rshift+0x4c>
 801c152:	f851 cb04 	ldr.w	ip, [r1], #4
 801c156:	f847 cf04 	str.w	ip, [r7, #4]!
 801c15a:	e7c3      	b.n	801c0e4 <rshift+0x28>
 801c15c:	4623      	mov	r3, r4
 801c15e:	e7e1      	b.n	801c124 <rshift+0x68>

0801c160 <__hexdig_fun>:
 801c160:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801c164:	2b09      	cmp	r3, #9
 801c166:	d802      	bhi.n	801c16e <__hexdig_fun+0xe>
 801c168:	3820      	subs	r0, #32
 801c16a:	b2c0      	uxtb	r0, r0
 801c16c:	4770      	bx	lr
 801c16e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801c172:	2b05      	cmp	r3, #5
 801c174:	d801      	bhi.n	801c17a <__hexdig_fun+0x1a>
 801c176:	3847      	subs	r0, #71	; 0x47
 801c178:	e7f7      	b.n	801c16a <__hexdig_fun+0xa>
 801c17a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801c17e:	2b05      	cmp	r3, #5
 801c180:	d801      	bhi.n	801c186 <__hexdig_fun+0x26>
 801c182:	3827      	subs	r0, #39	; 0x27
 801c184:	e7f1      	b.n	801c16a <__hexdig_fun+0xa>
 801c186:	2000      	movs	r0, #0
 801c188:	4770      	bx	lr
	...

0801c18c <__gethex>:
 801c18c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c190:	ed2d 8b02 	vpush	{d8}
 801c194:	b089      	sub	sp, #36	; 0x24
 801c196:	ee08 0a10 	vmov	s16, r0
 801c19a:	9304      	str	r3, [sp, #16]
 801c19c:	4bb4      	ldr	r3, [pc, #720]	; (801c470 <__gethex+0x2e4>)
 801c19e:	681b      	ldr	r3, [r3, #0]
 801c1a0:	9301      	str	r3, [sp, #4]
 801c1a2:	4618      	mov	r0, r3
 801c1a4:	468b      	mov	fp, r1
 801c1a6:	4690      	mov	r8, r2
 801c1a8:	f7fc fc40 	bl	8018a2c <strlen>
 801c1ac:	9b01      	ldr	r3, [sp, #4]
 801c1ae:	f8db 2000 	ldr.w	r2, [fp]
 801c1b2:	4403      	add	r3, r0
 801c1b4:	4682      	mov	sl, r0
 801c1b6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801c1ba:	9305      	str	r3, [sp, #20]
 801c1bc:	1c93      	adds	r3, r2, #2
 801c1be:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801c1c2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801c1c6:	32fe      	adds	r2, #254	; 0xfe
 801c1c8:	18d1      	adds	r1, r2, r3
 801c1ca:	461f      	mov	r7, r3
 801c1cc:	f813 0b01 	ldrb.w	r0, [r3], #1
 801c1d0:	9100      	str	r1, [sp, #0]
 801c1d2:	2830      	cmp	r0, #48	; 0x30
 801c1d4:	d0f8      	beq.n	801c1c8 <__gethex+0x3c>
 801c1d6:	f7ff ffc3 	bl	801c160 <__hexdig_fun>
 801c1da:	4604      	mov	r4, r0
 801c1dc:	2800      	cmp	r0, #0
 801c1de:	d13a      	bne.n	801c256 <__gethex+0xca>
 801c1e0:	9901      	ldr	r1, [sp, #4]
 801c1e2:	4652      	mov	r2, sl
 801c1e4:	4638      	mov	r0, r7
 801c1e6:	f001 fa33 	bl	801d650 <strncmp>
 801c1ea:	4605      	mov	r5, r0
 801c1ec:	2800      	cmp	r0, #0
 801c1ee:	d168      	bne.n	801c2c2 <__gethex+0x136>
 801c1f0:	f817 000a 	ldrb.w	r0, [r7, sl]
 801c1f4:	eb07 060a 	add.w	r6, r7, sl
 801c1f8:	f7ff ffb2 	bl	801c160 <__hexdig_fun>
 801c1fc:	2800      	cmp	r0, #0
 801c1fe:	d062      	beq.n	801c2c6 <__gethex+0x13a>
 801c200:	4633      	mov	r3, r6
 801c202:	7818      	ldrb	r0, [r3, #0]
 801c204:	2830      	cmp	r0, #48	; 0x30
 801c206:	461f      	mov	r7, r3
 801c208:	f103 0301 	add.w	r3, r3, #1
 801c20c:	d0f9      	beq.n	801c202 <__gethex+0x76>
 801c20e:	f7ff ffa7 	bl	801c160 <__hexdig_fun>
 801c212:	2301      	movs	r3, #1
 801c214:	fab0 f480 	clz	r4, r0
 801c218:	0964      	lsrs	r4, r4, #5
 801c21a:	4635      	mov	r5, r6
 801c21c:	9300      	str	r3, [sp, #0]
 801c21e:	463a      	mov	r2, r7
 801c220:	4616      	mov	r6, r2
 801c222:	3201      	adds	r2, #1
 801c224:	7830      	ldrb	r0, [r6, #0]
 801c226:	f7ff ff9b 	bl	801c160 <__hexdig_fun>
 801c22a:	2800      	cmp	r0, #0
 801c22c:	d1f8      	bne.n	801c220 <__gethex+0x94>
 801c22e:	9901      	ldr	r1, [sp, #4]
 801c230:	4652      	mov	r2, sl
 801c232:	4630      	mov	r0, r6
 801c234:	f001 fa0c 	bl	801d650 <strncmp>
 801c238:	b980      	cbnz	r0, 801c25c <__gethex+0xd0>
 801c23a:	b94d      	cbnz	r5, 801c250 <__gethex+0xc4>
 801c23c:	eb06 050a 	add.w	r5, r6, sl
 801c240:	462a      	mov	r2, r5
 801c242:	4616      	mov	r6, r2
 801c244:	3201      	adds	r2, #1
 801c246:	7830      	ldrb	r0, [r6, #0]
 801c248:	f7ff ff8a 	bl	801c160 <__hexdig_fun>
 801c24c:	2800      	cmp	r0, #0
 801c24e:	d1f8      	bne.n	801c242 <__gethex+0xb6>
 801c250:	1bad      	subs	r5, r5, r6
 801c252:	00ad      	lsls	r5, r5, #2
 801c254:	e004      	b.n	801c260 <__gethex+0xd4>
 801c256:	2400      	movs	r4, #0
 801c258:	4625      	mov	r5, r4
 801c25a:	e7e0      	b.n	801c21e <__gethex+0x92>
 801c25c:	2d00      	cmp	r5, #0
 801c25e:	d1f7      	bne.n	801c250 <__gethex+0xc4>
 801c260:	7833      	ldrb	r3, [r6, #0]
 801c262:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801c266:	2b50      	cmp	r3, #80	; 0x50
 801c268:	d13b      	bne.n	801c2e2 <__gethex+0x156>
 801c26a:	7873      	ldrb	r3, [r6, #1]
 801c26c:	2b2b      	cmp	r3, #43	; 0x2b
 801c26e:	d02c      	beq.n	801c2ca <__gethex+0x13e>
 801c270:	2b2d      	cmp	r3, #45	; 0x2d
 801c272:	d02e      	beq.n	801c2d2 <__gethex+0x146>
 801c274:	1c71      	adds	r1, r6, #1
 801c276:	f04f 0900 	mov.w	r9, #0
 801c27a:	7808      	ldrb	r0, [r1, #0]
 801c27c:	f7ff ff70 	bl	801c160 <__hexdig_fun>
 801c280:	1e43      	subs	r3, r0, #1
 801c282:	b2db      	uxtb	r3, r3
 801c284:	2b18      	cmp	r3, #24
 801c286:	d82c      	bhi.n	801c2e2 <__gethex+0x156>
 801c288:	f1a0 0210 	sub.w	r2, r0, #16
 801c28c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801c290:	f7ff ff66 	bl	801c160 <__hexdig_fun>
 801c294:	1e43      	subs	r3, r0, #1
 801c296:	b2db      	uxtb	r3, r3
 801c298:	2b18      	cmp	r3, #24
 801c29a:	d91d      	bls.n	801c2d8 <__gethex+0x14c>
 801c29c:	f1b9 0f00 	cmp.w	r9, #0
 801c2a0:	d000      	beq.n	801c2a4 <__gethex+0x118>
 801c2a2:	4252      	negs	r2, r2
 801c2a4:	4415      	add	r5, r2
 801c2a6:	f8cb 1000 	str.w	r1, [fp]
 801c2aa:	b1e4      	cbz	r4, 801c2e6 <__gethex+0x15a>
 801c2ac:	9b00      	ldr	r3, [sp, #0]
 801c2ae:	2b00      	cmp	r3, #0
 801c2b0:	bf14      	ite	ne
 801c2b2:	2700      	movne	r7, #0
 801c2b4:	2706      	moveq	r7, #6
 801c2b6:	4638      	mov	r0, r7
 801c2b8:	b009      	add	sp, #36	; 0x24
 801c2ba:	ecbd 8b02 	vpop	{d8}
 801c2be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c2c2:	463e      	mov	r6, r7
 801c2c4:	4625      	mov	r5, r4
 801c2c6:	2401      	movs	r4, #1
 801c2c8:	e7ca      	b.n	801c260 <__gethex+0xd4>
 801c2ca:	f04f 0900 	mov.w	r9, #0
 801c2ce:	1cb1      	adds	r1, r6, #2
 801c2d0:	e7d3      	b.n	801c27a <__gethex+0xee>
 801c2d2:	f04f 0901 	mov.w	r9, #1
 801c2d6:	e7fa      	b.n	801c2ce <__gethex+0x142>
 801c2d8:	230a      	movs	r3, #10
 801c2da:	fb03 0202 	mla	r2, r3, r2, r0
 801c2de:	3a10      	subs	r2, #16
 801c2e0:	e7d4      	b.n	801c28c <__gethex+0x100>
 801c2e2:	4631      	mov	r1, r6
 801c2e4:	e7df      	b.n	801c2a6 <__gethex+0x11a>
 801c2e6:	1bf3      	subs	r3, r6, r7
 801c2e8:	3b01      	subs	r3, #1
 801c2ea:	4621      	mov	r1, r4
 801c2ec:	2b07      	cmp	r3, #7
 801c2ee:	dc0b      	bgt.n	801c308 <__gethex+0x17c>
 801c2f0:	ee18 0a10 	vmov	r0, s16
 801c2f4:	f000 fa7e 	bl	801c7f4 <_Balloc>
 801c2f8:	4604      	mov	r4, r0
 801c2fa:	b940      	cbnz	r0, 801c30e <__gethex+0x182>
 801c2fc:	4b5d      	ldr	r3, [pc, #372]	; (801c474 <__gethex+0x2e8>)
 801c2fe:	4602      	mov	r2, r0
 801c300:	21de      	movs	r1, #222	; 0xde
 801c302:	485d      	ldr	r0, [pc, #372]	; (801c478 <__gethex+0x2ec>)
 801c304:	f001 f9c6 	bl	801d694 <__assert_func>
 801c308:	3101      	adds	r1, #1
 801c30a:	105b      	asrs	r3, r3, #1
 801c30c:	e7ee      	b.n	801c2ec <__gethex+0x160>
 801c30e:	f100 0914 	add.w	r9, r0, #20
 801c312:	f04f 0b00 	mov.w	fp, #0
 801c316:	f1ca 0301 	rsb	r3, sl, #1
 801c31a:	f8cd 9008 	str.w	r9, [sp, #8]
 801c31e:	f8cd b000 	str.w	fp, [sp]
 801c322:	9306      	str	r3, [sp, #24]
 801c324:	42b7      	cmp	r7, r6
 801c326:	d340      	bcc.n	801c3aa <__gethex+0x21e>
 801c328:	9802      	ldr	r0, [sp, #8]
 801c32a:	9b00      	ldr	r3, [sp, #0]
 801c32c:	f840 3b04 	str.w	r3, [r0], #4
 801c330:	eba0 0009 	sub.w	r0, r0, r9
 801c334:	1080      	asrs	r0, r0, #2
 801c336:	0146      	lsls	r6, r0, #5
 801c338:	6120      	str	r0, [r4, #16]
 801c33a:	4618      	mov	r0, r3
 801c33c:	f000 fb4c 	bl	801c9d8 <__hi0bits>
 801c340:	1a30      	subs	r0, r6, r0
 801c342:	f8d8 6000 	ldr.w	r6, [r8]
 801c346:	42b0      	cmp	r0, r6
 801c348:	dd63      	ble.n	801c412 <__gethex+0x286>
 801c34a:	1b87      	subs	r7, r0, r6
 801c34c:	4639      	mov	r1, r7
 801c34e:	4620      	mov	r0, r4
 801c350:	f000 fef0 	bl	801d134 <__any_on>
 801c354:	4682      	mov	sl, r0
 801c356:	b1a8      	cbz	r0, 801c384 <__gethex+0x1f8>
 801c358:	1e7b      	subs	r3, r7, #1
 801c35a:	1159      	asrs	r1, r3, #5
 801c35c:	f003 021f 	and.w	r2, r3, #31
 801c360:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801c364:	f04f 0a01 	mov.w	sl, #1
 801c368:	fa0a f202 	lsl.w	r2, sl, r2
 801c36c:	420a      	tst	r2, r1
 801c36e:	d009      	beq.n	801c384 <__gethex+0x1f8>
 801c370:	4553      	cmp	r3, sl
 801c372:	dd05      	ble.n	801c380 <__gethex+0x1f4>
 801c374:	1eb9      	subs	r1, r7, #2
 801c376:	4620      	mov	r0, r4
 801c378:	f000 fedc 	bl	801d134 <__any_on>
 801c37c:	2800      	cmp	r0, #0
 801c37e:	d145      	bne.n	801c40c <__gethex+0x280>
 801c380:	f04f 0a02 	mov.w	sl, #2
 801c384:	4639      	mov	r1, r7
 801c386:	4620      	mov	r0, r4
 801c388:	f7ff fe98 	bl	801c0bc <rshift>
 801c38c:	443d      	add	r5, r7
 801c38e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c392:	42ab      	cmp	r3, r5
 801c394:	da4c      	bge.n	801c430 <__gethex+0x2a4>
 801c396:	ee18 0a10 	vmov	r0, s16
 801c39a:	4621      	mov	r1, r4
 801c39c:	f000 fa6a 	bl	801c874 <_Bfree>
 801c3a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c3a2:	2300      	movs	r3, #0
 801c3a4:	6013      	str	r3, [r2, #0]
 801c3a6:	27a3      	movs	r7, #163	; 0xa3
 801c3a8:	e785      	b.n	801c2b6 <__gethex+0x12a>
 801c3aa:	1e73      	subs	r3, r6, #1
 801c3ac:	9a05      	ldr	r2, [sp, #20]
 801c3ae:	9303      	str	r3, [sp, #12]
 801c3b0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801c3b4:	4293      	cmp	r3, r2
 801c3b6:	d019      	beq.n	801c3ec <__gethex+0x260>
 801c3b8:	f1bb 0f20 	cmp.w	fp, #32
 801c3bc:	d107      	bne.n	801c3ce <__gethex+0x242>
 801c3be:	9b02      	ldr	r3, [sp, #8]
 801c3c0:	9a00      	ldr	r2, [sp, #0]
 801c3c2:	f843 2b04 	str.w	r2, [r3], #4
 801c3c6:	9302      	str	r3, [sp, #8]
 801c3c8:	2300      	movs	r3, #0
 801c3ca:	9300      	str	r3, [sp, #0]
 801c3cc:	469b      	mov	fp, r3
 801c3ce:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801c3d2:	f7ff fec5 	bl	801c160 <__hexdig_fun>
 801c3d6:	9b00      	ldr	r3, [sp, #0]
 801c3d8:	f000 000f 	and.w	r0, r0, #15
 801c3dc:	fa00 f00b 	lsl.w	r0, r0, fp
 801c3e0:	4303      	orrs	r3, r0
 801c3e2:	9300      	str	r3, [sp, #0]
 801c3e4:	f10b 0b04 	add.w	fp, fp, #4
 801c3e8:	9b03      	ldr	r3, [sp, #12]
 801c3ea:	e00d      	b.n	801c408 <__gethex+0x27c>
 801c3ec:	9b03      	ldr	r3, [sp, #12]
 801c3ee:	9a06      	ldr	r2, [sp, #24]
 801c3f0:	4413      	add	r3, r2
 801c3f2:	42bb      	cmp	r3, r7
 801c3f4:	d3e0      	bcc.n	801c3b8 <__gethex+0x22c>
 801c3f6:	4618      	mov	r0, r3
 801c3f8:	9901      	ldr	r1, [sp, #4]
 801c3fa:	9307      	str	r3, [sp, #28]
 801c3fc:	4652      	mov	r2, sl
 801c3fe:	f001 f927 	bl	801d650 <strncmp>
 801c402:	9b07      	ldr	r3, [sp, #28]
 801c404:	2800      	cmp	r0, #0
 801c406:	d1d7      	bne.n	801c3b8 <__gethex+0x22c>
 801c408:	461e      	mov	r6, r3
 801c40a:	e78b      	b.n	801c324 <__gethex+0x198>
 801c40c:	f04f 0a03 	mov.w	sl, #3
 801c410:	e7b8      	b.n	801c384 <__gethex+0x1f8>
 801c412:	da0a      	bge.n	801c42a <__gethex+0x29e>
 801c414:	1a37      	subs	r7, r6, r0
 801c416:	4621      	mov	r1, r4
 801c418:	ee18 0a10 	vmov	r0, s16
 801c41c:	463a      	mov	r2, r7
 801c41e:	f000 fc45 	bl	801ccac <__lshift>
 801c422:	1bed      	subs	r5, r5, r7
 801c424:	4604      	mov	r4, r0
 801c426:	f100 0914 	add.w	r9, r0, #20
 801c42a:	f04f 0a00 	mov.w	sl, #0
 801c42e:	e7ae      	b.n	801c38e <__gethex+0x202>
 801c430:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801c434:	42a8      	cmp	r0, r5
 801c436:	dd72      	ble.n	801c51e <__gethex+0x392>
 801c438:	1b45      	subs	r5, r0, r5
 801c43a:	42ae      	cmp	r6, r5
 801c43c:	dc36      	bgt.n	801c4ac <__gethex+0x320>
 801c43e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c442:	2b02      	cmp	r3, #2
 801c444:	d02a      	beq.n	801c49c <__gethex+0x310>
 801c446:	2b03      	cmp	r3, #3
 801c448:	d02c      	beq.n	801c4a4 <__gethex+0x318>
 801c44a:	2b01      	cmp	r3, #1
 801c44c:	d11c      	bne.n	801c488 <__gethex+0x2fc>
 801c44e:	42ae      	cmp	r6, r5
 801c450:	d11a      	bne.n	801c488 <__gethex+0x2fc>
 801c452:	2e01      	cmp	r6, #1
 801c454:	d112      	bne.n	801c47c <__gethex+0x2f0>
 801c456:	9a04      	ldr	r2, [sp, #16]
 801c458:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801c45c:	6013      	str	r3, [r2, #0]
 801c45e:	2301      	movs	r3, #1
 801c460:	6123      	str	r3, [r4, #16]
 801c462:	f8c9 3000 	str.w	r3, [r9]
 801c466:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c468:	2762      	movs	r7, #98	; 0x62
 801c46a:	601c      	str	r4, [r3, #0]
 801c46c:	e723      	b.n	801c2b6 <__gethex+0x12a>
 801c46e:	bf00      	nop
 801c470:	08052498 	.word	0x08052498
 801c474:	08052420 	.word	0x08052420
 801c478:	08052431 	.word	0x08052431
 801c47c:	1e71      	subs	r1, r6, #1
 801c47e:	4620      	mov	r0, r4
 801c480:	f000 fe58 	bl	801d134 <__any_on>
 801c484:	2800      	cmp	r0, #0
 801c486:	d1e6      	bne.n	801c456 <__gethex+0x2ca>
 801c488:	ee18 0a10 	vmov	r0, s16
 801c48c:	4621      	mov	r1, r4
 801c48e:	f000 f9f1 	bl	801c874 <_Bfree>
 801c492:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c494:	2300      	movs	r3, #0
 801c496:	6013      	str	r3, [r2, #0]
 801c498:	2750      	movs	r7, #80	; 0x50
 801c49a:	e70c      	b.n	801c2b6 <__gethex+0x12a>
 801c49c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c49e:	2b00      	cmp	r3, #0
 801c4a0:	d1f2      	bne.n	801c488 <__gethex+0x2fc>
 801c4a2:	e7d8      	b.n	801c456 <__gethex+0x2ca>
 801c4a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c4a6:	2b00      	cmp	r3, #0
 801c4a8:	d1d5      	bne.n	801c456 <__gethex+0x2ca>
 801c4aa:	e7ed      	b.n	801c488 <__gethex+0x2fc>
 801c4ac:	1e6f      	subs	r7, r5, #1
 801c4ae:	f1ba 0f00 	cmp.w	sl, #0
 801c4b2:	d131      	bne.n	801c518 <__gethex+0x38c>
 801c4b4:	b127      	cbz	r7, 801c4c0 <__gethex+0x334>
 801c4b6:	4639      	mov	r1, r7
 801c4b8:	4620      	mov	r0, r4
 801c4ba:	f000 fe3b 	bl	801d134 <__any_on>
 801c4be:	4682      	mov	sl, r0
 801c4c0:	117b      	asrs	r3, r7, #5
 801c4c2:	2101      	movs	r1, #1
 801c4c4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801c4c8:	f007 071f 	and.w	r7, r7, #31
 801c4cc:	fa01 f707 	lsl.w	r7, r1, r7
 801c4d0:	421f      	tst	r7, r3
 801c4d2:	4629      	mov	r1, r5
 801c4d4:	4620      	mov	r0, r4
 801c4d6:	bf18      	it	ne
 801c4d8:	f04a 0a02 	orrne.w	sl, sl, #2
 801c4dc:	1b76      	subs	r6, r6, r5
 801c4de:	f7ff fded 	bl	801c0bc <rshift>
 801c4e2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801c4e6:	2702      	movs	r7, #2
 801c4e8:	f1ba 0f00 	cmp.w	sl, #0
 801c4ec:	d048      	beq.n	801c580 <__gethex+0x3f4>
 801c4ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c4f2:	2b02      	cmp	r3, #2
 801c4f4:	d015      	beq.n	801c522 <__gethex+0x396>
 801c4f6:	2b03      	cmp	r3, #3
 801c4f8:	d017      	beq.n	801c52a <__gethex+0x39e>
 801c4fa:	2b01      	cmp	r3, #1
 801c4fc:	d109      	bne.n	801c512 <__gethex+0x386>
 801c4fe:	f01a 0f02 	tst.w	sl, #2
 801c502:	d006      	beq.n	801c512 <__gethex+0x386>
 801c504:	f8d9 0000 	ldr.w	r0, [r9]
 801c508:	ea4a 0a00 	orr.w	sl, sl, r0
 801c50c:	f01a 0f01 	tst.w	sl, #1
 801c510:	d10e      	bne.n	801c530 <__gethex+0x3a4>
 801c512:	f047 0710 	orr.w	r7, r7, #16
 801c516:	e033      	b.n	801c580 <__gethex+0x3f4>
 801c518:	f04f 0a01 	mov.w	sl, #1
 801c51c:	e7d0      	b.n	801c4c0 <__gethex+0x334>
 801c51e:	2701      	movs	r7, #1
 801c520:	e7e2      	b.n	801c4e8 <__gethex+0x35c>
 801c522:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c524:	f1c3 0301 	rsb	r3, r3, #1
 801c528:	9315      	str	r3, [sp, #84]	; 0x54
 801c52a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c52c:	2b00      	cmp	r3, #0
 801c52e:	d0f0      	beq.n	801c512 <__gethex+0x386>
 801c530:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801c534:	f104 0314 	add.w	r3, r4, #20
 801c538:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801c53c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801c540:	f04f 0c00 	mov.w	ip, #0
 801c544:	4618      	mov	r0, r3
 801c546:	f853 2b04 	ldr.w	r2, [r3], #4
 801c54a:	f1b2 3fff 	cmp.w	r2, #4294967295
 801c54e:	d01c      	beq.n	801c58a <__gethex+0x3fe>
 801c550:	3201      	adds	r2, #1
 801c552:	6002      	str	r2, [r0, #0]
 801c554:	2f02      	cmp	r7, #2
 801c556:	f104 0314 	add.w	r3, r4, #20
 801c55a:	d13f      	bne.n	801c5dc <__gethex+0x450>
 801c55c:	f8d8 2000 	ldr.w	r2, [r8]
 801c560:	3a01      	subs	r2, #1
 801c562:	42b2      	cmp	r2, r6
 801c564:	d10a      	bne.n	801c57c <__gethex+0x3f0>
 801c566:	1171      	asrs	r1, r6, #5
 801c568:	2201      	movs	r2, #1
 801c56a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801c56e:	f006 061f 	and.w	r6, r6, #31
 801c572:	fa02 f606 	lsl.w	r6, r2, r6
 801c576:	421e      	tst	r6, r3
 801c578:	bf18      	it	ne
 801c57a:	4617      	movne	r7, r2
 801c57c:	f047 0720 	orr.w	r7, r7, #32
 801c580:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c582:	601c      	str	r4, [r3, #0]
 801c584:	9b04      	ldr	r3, [sp, #16]
 801c586:	601d      	str	r5, [r3, #0]
 801c588:	e695      	b.n	801c2b6 <__gethex+0x12a>
 801c58a:	4299      	cmp	r1, r3
 801c58c:	f843 cc04 	str.w	ip, [r3, #-4]
 801c590:	d8d8      	bhi.n	801c544 <__gethex+0x3b8>
 801c592:	68a3      	ldr	r3, [r4, #8]
 801c594:	459b      	cmp	fp, r3
 801c596:	db19      	blt.n	801c5cc <__gethex+0x440>
 801c598:	6861      	ldr	r1, [r4, #4]
 801c59a:	ee18 0a10 	vmov	r0, s16
 801c59e:	3101      	adds	r1, #1
 801c5a0:	f000 f928 	bl	801c7f4 <_Balloc>
 801c5a4:	4681      	mov	r9, r0
 801c5a6:	b918      	cbnz	r0, 801c5b0 <__gethex+0x424>
 801c5a8:	4b1a      	ldr	r3, [pc, #104]	; (801c614 <__gethex+0x488>)
 801c5aa:	4602      	mov	r2, r0
 801c5ac:	2184      	movs	r1, #132	; 0x84
 801c5ae:	e6a8      	b.n	801c302 <__gethex+0x176>
 801c5b0:	6922      	ldr	r2, [r4, #16]
 801c5b2:	3202      	adds	r2, #2
 801c5b4:	f104 010c 	add.w	r1, r4, #12
 801c5b8:	0092      	lsls	r2, r2, #2
 801c5ba:	300c      	adds	r0, #12
 801c5bc:	f000 f90c 	bl	801c7d8 <memcpy>
 801c5c0:	4621      	mov	r1, r4
 801c5c2:	ee18 0a10 	vmov	r0, s16
 801c5c6:	f000 f955 	bl	801c874 <_Bfree>
 801c5ca:	464c      	mov	r4, r9
 801c5cc:	6923      	ldr	r3, [r4, #16]
 801c5ce:	1c5a      	adds	r2, r3, #1
 801c5d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801c5d4:	6122      	str	r2, [r4, #16]
 801c5d6:	2201      	movs	r2, #1
 801c5d8:	615a      	str	r2, [r3, #20]
 801c5da:	e7bb      	b.n	801c554 <__gethex+0x3c8>
 801c5dc:	6922      	ldr	r2, [r4, #16]
 801c5de:	455a      	cmp	r2, fp
 801c5e0:	dd0b      	ble.n	801c5fa <__gethex+0x46e>
 801c5e2:	2101      	movs	r1, #1
 801c5e4:	4620      	mov	r0, r4
 801c5e6:	f7ff fd69 	bl	801c0bc <rshift>
 801c5ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c5ee:	3501      	adds	r5, #1
 801c5f0:	42ab      	cmp	r3, r5
 801c5f2:	f6ff aed0 	blt.w	801c396 <__gethex+0x20a>
 801c5f6:	2701      	movs	r7, #1
 801c5f8:	e7c0      	b.n	801c57c <__gethex+0x3f0>
 801c5fa:	f016 061f 	ands.w	r6, r6, #31
 801c5fe:	d0fa      	beq.n	801c5f6 <__gethex+0x46a>
 801c600:	4453      	add	r3, sl
 801c602:	f1c6 0620 	rsb	r6, r6, #32
 801c606:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801c60a:	f000 f9e5 	bl	801c9d8 <__hi0bits>
 801c60e:	42b0      	cmp	r0, r6
 801c610:	dbe7      	blt.n	801c5e2 <__gethex+0x456>
 801c612:	e7f0      	b.n	801c5f6 <__gethex+0x46a>
 801c614:	08052420 	.word	0x08052420

0801c618 <L_shift>:
 801c618:	f1c2 0208 	rsb	r2, r2, #8
 801c61c:	0092      	lsls	r2, r2, #2
 801c61e:	b570      	push	{r4, r5, r6, lr}
 801c620:	f1c2 0620 	rsb	r6, r2, #32
 801c624:	6843      	ldr	r3, [r0, #4]
 801c626:	6804      	ldr	r4, [r0, #0]
 801c628:	fa03 f506 	lsl.w	r5, r3, r6
 801c62c:	432c      	orrs	r4, r5
 801c62e:	40d3      	lsrs	r3, r2
 801c630:	6004      	str	r4, [r0, #0]
 801c632:	f840 3f04 	str.w	r3, [r0, #4]!
 801c636:	4288      	cmp	r0, r1
 801c638:	d3f4      	bcc.n	801c624 <L_shift+0xc>
 801c63a:	bd70      	pop	{r4, r5, r6, pc}

0801c63c <__match>:
 801c63c:	b530      	push	{r4, r5, lr}
 801c63e:	6803      	ldr	r3, [r0, #0]
 801c640:	3301      	adds	r3, #1
 801c642:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c646:	b914      	cbnz	r4, 801c64e <__match+0x12>
 801c648:	6003      	str	r3, [r0, #0]
 801c64a:	2001      	movs	r0, #1
 801c64c:	bd30      	pop	{r4, r5, pc}
 801c64e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c652:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801c656:	2d19      	cmp	r5, #25
 801c658:	bf98      	it	ls
 801c65a:	3220      	addls	r2, #32
 801c65c:	42a2      	cmp	r2, r4
 801c65e:	d0f0      	beq.n	801c642 <__match+0x6>
 801c660:	2000      	movs	r0, #0
 801c662:	e7f3      	b.n	801c64c <__match+0x10>

0801c664 <__hexnan>:
 801c664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c668:	680b      	ldr	r3, [r1, #0]
 801c66a:	115e      	asrs	r6, r3, #5
 801c66c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801c670:	f013 031f 	ands.w	r3, r3, #31
 801c674:	b087      	sub	sp, #28
 801c676:	bf18      	it	ne
 801c678:	3604      	addne	r6, #4
 801c67a:	2500      	movs	r5, #0
 801c67c:	1f37      	subs	r7, r6, #4
 801c67e:	4690      	mov	r8, r2
 801c680:	6802      	ldr	r2, [r0, #0]
 801c682:	9301      	str	r3, [sp, #4]
 801c684:	4682      	mov	sl, r0
 801c686:	f846 5c04 	str.w	r5, [r6, #-4]
 801c68a:	46b9      	mov	r9, r7
 801c68c:	463c      	mov	r4, r7
 801c68e:	9502      	str	r5, [sp, #8]
 801c690:	46ab      	mov	fp, r5
 801c692:	7851      	ldrb	r1, [r2, #1]
 801c694:	1c53      	adds	r3, r2, #1
 801c696:	9303      	str	r3, [sp, #12]
 801c698:	b341      	cbz	r1, 801c6ec <__hexnan+0x88>
 801c69a:	4608      	mov	r0, r1
 801c69c:	9205      	str	r2, [sp, #20]
 801c69e:	9104      	str	r1, [sp, #16]
 801c6a0:	f7ff fd5e 	bl	801c160 <__hexdig_fun>
 801c6a4:	2800      	cmp	r0, #0
 801c6a6:	d14f      	bne.n	801c748 <__hexnan+0xe4>
 801c6a8:	9904      	ldr	r1, [sp, #16]
 801c6aa:	9a05      	ldr	r2, [sp, #20]
 801c6ac:	2920      	cmp	r1, #32
 801c6ae:	d818      	bhi.n	801c6e2 <__hexnan+0x7e>
 801c6b0:	9b02      	ldr	r3, [sp, #8]
 801c6b2:	459b      	cmp	fp, r3
 801c6b4:	dd13      	ble.n	801c6de <__hexnan+0x7a>
 801c6b6:	454c      	cmp	r4, r9
 801c6b8:	d206      	bcs.n	801c6c8 <__hexnan+0x64>
 801c6ba:	2d07      	cmp	r5, #7
 801c6bc:	dc04      	bgt.n	801c6c8 <__hexnan+0x64>
 801c6be:	462a      	mov	r2, r5
 801c6c0:	4649      	mov	r1, r9
 801c6c2:	4620      	mov	r0, r4
 801c6c4:	f7ff ffa8 	bl	801c618 <L_shift>
 801c6c8:	4544      	cmp	r4, r8
 801c6ca:	d950      	bls.n	801c76e <__hexnan+0x10a>
 801c6cc:	2300      	movs	r3, #0
 801c6ce:	f1a4 0904 	sub.w	r9, r4, #4
 801c6d2:	f844 3c04 	str.w	r3, [r4, #-4]
 801c6d6:	f8cd b008 	str.w	fp, [sp, #8]
 801c6da:	464c      	mov	r4, r9
 801c6dc:	461d      	mov	r5, r3
 801c6de:	9a03      	ldr	r2, [sp, #12]
 801c6e0:	e7d7      	b.n	801c692 <__hexnan+0x2e>
 801c6e2:	2929      	cmp	r1, #41	; 0x29
 801c6e4:	d156      	bne.n	801c794 <__hexnan+0x130>
 801c6e6:	3202      	adds	r2, #2
 801c6e8:	f8ca 2000 	str.w	r2, [sl]
 801c6ec:	f1bb 0f00 	cmp.w	fp, #0
 801c6f0:	d050      	beq.n	801c794 <__hexnan+0x130>
 801c6f2:	454c      	cmp	r4, r9
 801c6f4:	d206      	bcs.n	801c704 <__hexnan+0xa0>
 801c6f6:	2d07      	cmp	r5, #7
 801c6f8:	dc04      	bgt.n	801c704 <__hexnan+0xa0>
 801c6fa:	462a      	mov	r2, r5
 801c6fc:	4649      	mov	r1, r9
 801c6fe:	4620      	mov	r0, r4
 801c700:	f7ff ff8a 	bl	801c618 <L_shift>
 801c704:	4544      	cmp	r4, r8
 801c706:	d934      	bls.n	801c772 <__hexnan+0x10e>
 801c708:	f1a8 0204 	sub.w	r2, r8, #4
 801c70c:	4623      	mov	r3, r4
 801c70e:	f853 1b04 	ldr.w	r1, [r3], #4
 801c712:	f842 1f04 	str.w	r1, [r2, #4]!
 801c716:	429f      	cmp	r7, r3
 801c718:	d2f9      	bcs.n	801c70e <__hexnan+0xaa>
 801c71a:	1b3b      	subs	r3, r7, r4
 801c71c:	f023 0303 	bic.w	r3, r3, #3
 801c720:	3304      	adds	r3, #4
 801c722:	3401      	adds	r4, #1
 801c724:	3e03      	subs	r6, #3
 801c726:	42b4      	cmp	r4, r6
 801c728:	bf88      	it	hi
 801c72a:	2304      	movhi	r3, #4
 801c72c:	4443      	add	r3, r8
 801c72e:	2200      	movs	r2, #0
 801c730:	f843 2b04 	str.w	r2, [r3], #4
 801c734:	429f      	cmp	r7, r3
 801c736:	d2fb      	bcs.n	801c730 <__hexnan+0xcc>
 801c738:	683b      	ldr	r3, [r7, #0]
 801c73a:	b91b      	cbnz	r3, 801c744 <__hexnan+0xe0>
 801c73c:	4547      	cmp	r7, r8
 801c73e:	d127      	bne.n	801c790 <__hexnan+0x12c>
 801c740:	2301      	movs	r3, #1
 801c742:	603b      	str	r3, [r7, #0]
 801c744:	2005      	movs	r0, #5
 801c746:	e026      	b.n	801c796 <__hexnan+0x132>
 801c748:	3501      	adds	r5, #1
 801c74a:	2d08      	cmp	r5, #8
 801c74c:	f10b 0b01 	add.w	fp, fp, #1
 801c750:	dd06      	ble.n	801c760 <__hexnan+0xfc>
 801c752:	4544      	cmp	r4, r8
 801c754:	d9c3      	bls.n	801c6de <__hexnan+0x7a>
 801c756:	2300      	movs	r3, #0
 801c758:	f844 3c04 	str.w	r3, [r4, #-4]
 801c75c:	2501      	movs	r5, #1
 801c75e:	3c04      	subs	r4, #4
 801c760:	6822      	ldr	r2, [r4, #0]
 801c762:	f000 000f 	and.w	r0, r0, #15
 801c766:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801c76a:	6022      	str	r2, [r4, #0]
 801c76c:	e7b7      	b.n	801c6de <__hexnan+0x7a>
 801c76e:	2508      	movs	r5, #8
 801c770:	e7b5      	b.n	801c6de <__hexnan+0x7a>
 801c772:	9b01      	ldr	r3, [sp, #4]
 801c774:	2b00      	cmp	r3, #0
 801c776:	d0df      	beq.n	801c738 <__hexnan+0xd4>
 801c778:	f04f 32ff 	mov.w	r2, #4294967295
 801c77c:	f1c3 0320 	rsb	r3, r3, #32
 801c780:	fa22 f303 	lsr.w	r3, r2, r3
 801c784:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801c788:	401a      	ands	r2, r3
 801c78a:	f846 2c04 	str.w	r2, [r6, #-4]
 801c78e:	e7d3      	b.n	801c738 <__hexnan+0xd4>
 801c790:	3f04      	subs	r7, #4
 801c792:	e7d1      	b.n	801c738 <__hexnan+0xd4>
 801c794:	2004      	movs	r0, #4
 801c796:	b007      	add	sp, #28
 801c798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c79c <_localeconv_r>:
 801c79c:	4800      	ldr	r0, [pc, #0]	; (801c7a0 <_localeconv_r+0x4>)
 801c79e:	4770      	bx	lr
 801c7a0:	200001bc 	.word	0x200001bc

0801c7a4 <malloc>:
 801c7a4:	4b02      	ldr	r3, [pc, #8]	; (801c7b0 <malloc+0xc>)
 801c7a6:	4601      	mov	r1, r0
 801c7a8:	6818      	ldr	r0, [r3, #0]
 801c7aa:	f000 bd67 	b.w	801d27c <_malloc_r>
 801c7ae:	bf00      	nop
 801c7b0:	20000064 	.word	0x20000064

0801c7b4 <__ascii_mbtowc>:
 801c7b4:	b082      	sub	sp, #8
 801c7b6:	b901      	cbnz	r1, 801c7ba <__ascii_mbtowc+0x6>
 801c7b8:	a901      	add	r1, sp, #4
 801c7ba:	b142      	cbz	r2, 801c7ce <__ascii_mbtowc+0x1a>
 801c7bc:	b14b      	cbz	r3, 801c7d2 <__ascii_mbtowc+0x1e>
 801c7be:	7813      	ldrb	r3, [r2, #0]
 801c7c0:	600b      	str	r3, [r1, #0]
 801c7c2:	7812      	ldrb	r2, [r2, #0]
 801c7c4:	1e10      	subs	r0, r2, #0
 801c7c6:	bf18      	it	ne
 801c7c8:	2001      	movne	r0, #1
 801c7ca:	b002      	add	sp, #8
 801c7cc:	4770      	bx	lr
 801c7ce:	4610      	mov	r0, r2
 801c7d0:	e7fb      	b.n	801c7ca <__ascii_mbtowc+0x16>
 801c7d2:	f06f 0001 	mvn.w	r0, #1
 801c7d6:	e7f8      	b.n	801c7ca <__ascii_mbtowc+0x16>

0801c7d8 <memcpy>:
 801c7d8:	440a      	add	r2, r1
 801c7da:	4291      	cmp	r1, r2
 801c7dc:	f100 33ff 	add.w	r3, r0, #4294967295
 801c7e0:	d100      	bne.n	801c7e4 <memcpy+0xc>
 801c7e2:	4770      	bx	lr
 801c7e4:	b510      	push	{r4, lr}
 801c7e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c7ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c7ee:	4291      	cmp	r1, r2
 801c7f0:	d1f9      	bne.n	801c7e6 <memcpy+0xe>
 801c7f2:	bd10      	pop	{r4, pc}

0801c7f4 <_Balloc>:
 801c7f4:	b570      	push	{r4, r5, r6, lr}
 801c7f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801c7f8:	4604      	mov	r4, r0
 801c7fa:	460d      	mov	r5, r1
 801c7fc:	b976      	cbnz	r6, 801c81c <_Balloc+0x28>
 801c7fe:	2010      	movs	r0, #16
 801c800:	f7ff ffd0 	bl	801c7a4 <malloc>
 801c804:	4602      	mov	r2, r0
 801c806:	6260      	str	r0, [r4, #36]	; 0x24
 801c808:	b920      	cbnz	r0, 801c814 <_Balloc+0x20>
 801c80a:	4b18      	ldr	r3, [pc, #96]	; (801c86c <_Balloc+0x78>)
 801c80c:	4818      	ldr	r0, [pc, #96]	; (801c870 <_Balloc+0x7c>)
 801c80e:	2166      	movs	r1, #102	; 0x66
 801c810:	f000 ff40 	bl	801d694 <__assert_func>
 801c814:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c818:	6006      	str	r6, [r0, #0]
 801c81a:	60c6      	str	r6, [r0, #12]
 801c81c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801c81e:	68f3      	ldr	r3, [r6, #12]
 801c820:	b183      	cbz	r3, 801c844 <_Balloc+0x50>
 801c822:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c824:	68db      	ldr	r3, [r3, #12]
 801c826:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801c82a:	b9b8      	cbnz	r0, 801c85c <_Balloc+0x68>
 801c82c:	2101      	movs	r1, #1
 801c82e:	fa01 f605 	lsl.w	r6, r1, r5
 801c832:	1d72      	adds	r2, r6, #5
 801c834:	0092      	lsls	r2, r2, #2
 801c836:	4620      	mov	r0, r4
 801c838:	f000 fc9d 	bl	801d176 <_calloc_r>
 801c83c:	b160      	cbz	r0, 801c858 <_Balloc+0x64>
 801c83e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801c842:	e00e      	b.n	801c862 <_Balloc+0x6e>
 801c844:	2221      	movs	r2, #33	; 0x21
 801c846:	2104      	movs	r1, #4
 801c848:	4620      	mov	r0, r4
 801c84a:	f000 fc94 	bl	801d176 <_calloc_r>
 801c84e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c850:	60f0      	str	r0, [r6, #12]
 801c852:	68db      	ldr	r3, [r3, #12]
 801c854:	2b00      	cmp	r3, #0
 801c856:	d1e4      	bne.n	801c822 <_Balloc+0x2e>
 801c858:	2000      	movs	r0, #0
 801c85a:	bd70      	pop	{r4, r5, r6, pc}
 801c85c:	6802      	ldr	r2, [r0, #0]
 801c85e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c862:	2300      	movs	r3, #0
 801c864:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801c868:	e7f7      	b.n	801c85a <_Balloc+0x66>
 801c86a:	bf00      	nop
 801c86c:	080523ae 	.word	0x080523ae
 801c870:	080524ac 	.word	0x080524ac

0801c874 <_Bfree>:
 801c874:	b570      	push	{r4, r5, r6, lr}
 801c876:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801c878:	4605      	mov	r5, r0
 801c87a:	460c      	mov	r4, r1
 801c87c:	b976      	cbnz	r6, 801c89c <_Bfree+0x28>
 801c87e:	2010      	movs	r0, #16
 801c880:	f7ff ff90 	bl	801c7a4 <malloc>
 801c884:	4602      	mov	r2, r0
 801c886:	6268      	str	r0, [r5, #36]	; 0x24
 801c888:	b920      	cbnz	r0, 801c894 <_Bfree+0x20>
 801c88a:	4b09      	ldr	r3, [pc, #36]	; (801c8b0 <_Bfree+0x3c>)
 801c88c:	4809      	ldr	r0, [pc, #36]	; (801c8b4 <_Bfree+0x40>)
 801c88e:	218a      	movs	r1, #138	; 0x8a
 801c890:	f000 ff00 	bl	801d694 <__assert_func>
 801c894:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c898:	6006      	str	r6, [r0, #0]
 801c89a:	60c6      	str	r6, [r0, #12]
 801c89c:	b13c      	cbz	r4, 801c8ae <_Bfree+0x3a>
 801c89e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801c8a0:	6862      	ldr	r2, [r4, #4]
 801c8a2:	68db      	ldr	r3, [r3, #12]
 801c8a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801c8a8:	6021      	str	r1, [r4, #0]
 801c8aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801c8ae:	bd70      	pop	{r4, r5, r6, pc}
 801c8b0:	080523ae 	.word	0x080523ae
 801c8b4:	080524ac 	.word	0x080524ac

0801c8b8 <__multadd>:
 801c8b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c8bc:	690d      	ldr	r5, [r1, #16]
 801c8be:	4607      	mov	r7, r0
 801c8c0:	460c      	mov	r4, r1
 801c8c2:	461e      	mov	r6, r3
 801c8c4:	f101 0c14 	add.w	ip, r1, #20
 801c8c8:	2000      	movs	r0, #0
 801c8ca:	f8dc 3000 	ldr.w	r3, [ip]
 801c8ce:	b299      	uxth	r1, r3
 801c8d0:	fb02 6101 	mla	r1, r2, r1, r6
 801c8d4:	0c1e      	lsrs	r6, r3, #16
 801c8d6:	0c0b      	lsrs	r3, r1, #16
 801c8d8:	fb02 3306 	mla	r3, r2, r6, r3
 801c8dc:	b289      	uxth	r1, r1
 801c8de:	3001      	adds	r0, #1
 801c8e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801c8e4:	4285      	cmp	r5, r0
 801c8e6:	f84c 1b04 	str.w	r1, [ip], #4
 801c8ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801c8ee:	dcec      	bgt.n	801c8ca <__multadd+0x12>
 801c8f0:	b30e      	cbz	r6, 801c936 <__multadd+0x7e>
 801c8f2:	68a3      	ldr	r3, [r4, #8]
 801c8f4:	42ab      	cmp	r3, r5
 801c8f6:	dc19      	bgt.n	801c92c <__multadd+0x74>
 801c8f8:	6861      	ldr	r1, [r4, #4]
 801c8fa:	4638      	mov	r0, r7
 801c8fc:	3101      	adds	r1, #1
 801c8fe:	f7ff ff79 	bl	801c7f4 <_Balloc>
 801c902:	4680      	mov	r8, r0
 801c904:	b928      	cbnz	r0, 801c912 <__multadd+0x5a>
 801c906:	4602      	mov	r2, r0
 801c908:	4b0c      	ldr	r3, [pc, #48]	; (801c93c <__multadd+0x84>)
 801c90a:	480d      	ldr	r0, [pc, #52]	; (801c940 <__multadd+0x88>)
 801c90c:	21b5      	movs	r1, #181	; 0xb5
 801c90e:	f000 fec1 	bl	801d694 <__assert_func>
 801c912:	6922      	ldr	r2, [r4, #16]
 801c914:	3202      	adds	r2, #2
 801c916:	f104 010c 	add.w	r1, r4, #12
 801c91a:	0092      	lsls	r2, r2, #2
 801c91c:	300c      	adds	r0, #12
 801c91e:	f7ff ff5b 	bl	801c7d8 <memcpy>
 801c922:	4621      	mov	r1, r4
 801c924:	4638      	mov	r0, r7
 801c926:	f7ff ffa5 	bl	801c874 <_Bfree>
 801c92a:	4644      	mov	r4, r8
 801c92c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801c930:	3501      	adds	r5, #1
 801c932:	615e      	str	r6, [r3, #20]
 801c934:	6125      	str	r5, [r4, #16]
 801c936:	4620      	mov	r0, r4
 801c938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c93c:	08052420 	.word	0x08052420
 801c940:	080524ac 	.word	0x080524ac

0801c944 <__s2b>:
 801c944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c948:	460c      	mov	r4, r1
 801c94a:	4615      	mov	r5, r2
 801c94c:	461f      	mov	r7, r3
 801c94e:	2209      	movs	r2, #9
 801c950:	3308      	adds	r3, #8
 801c952:	4606      	mov	r6, r0
 801c954:	fb93 f3f2 	sdiv	r3, r3, r2
 801c958:	2100      	movs	r1, #0
 801c95a:	2201      	movs	r2, #1
 801c95c:	429a      	cmp	r2, r3
 801c95e:	db09      	blt.n	801c974 <__s2b+0x30>
 801c960:	4630      	mov	r0, r6
 801c962:	f7ff ff47 	bl	801c7f4 <_Balloc>
 801c966:	b940      	cbnz	r0, 801c97a <__s2b+0x36>
 801c968:	4602      	mov	r2, r0
 801c96a:	4b19      	ldr	r3, [pc, #100]	; (801c9d0 <__s2b+0x8c>)
 801c96c:	4819      	ldr	r0, [pc, #100]	; (801c9d4 <__s2b+0x90>)
 801c96e:	21ce      	movs	r1, #206	; 0xce
 801c970:	f000 fe90 	bl	801d694 <__assert_func>
 801c974:	0052      	lsls	r2, r2, #1
 801c976:	3101      	adds	r1, #1
 801c978:	e7f0      	b.n	801c95c <__s2b+0x18>
 801c97a:	9b08      	ldr	r3, [sp, #32]
 801c97c:	6143      	str	r3, [r0, #20]
 801c97e:	2d09      	cmp	r5, #9
 801c980:	f04f 0301 	mov.w	r3, #1
 801c984:	6103      	str	r3, [r0, #16]
 801c986:	dd16      	ble.n	801c9b6 <__s2b+0x72>
 801c988:	f104 0909 	add.w	r9, r4, #9
 801c98c:	46c8      	mov	r8, r9
 801c98e:	442c      	add	r4, r5
 801c990:	f818 3b01 	ldrb.w	r3, [r8], #1
 801c994:	4601      	mov	r1, r0
 801c996:	3b30      	subs	r3, #48	; 0x30
 801c998:	220a      	movs	r2, #10
 801c99a:	4630      	mov	r0, r6
 801c99c:	f7ff ff8c 	bl	801c8b8 <__multadd>
 801c9a0:	45a0      	cmp	r8, r4
 801c9a2:	d1f5      	bne.n	801c990 <__s2b+0x4c>
 801c9a4:	f1a5 0408 	sub.w	r4, r5, #8
 801c9a8:	444c      	add	r4, r9
 801c9aa:	1b2d      	subs	r5, r5, r4
 801c9ac:	1963      	adds	r3, r4, r5
 801c9ae:	42bb      	cmp	r3, r7
 801c9b0:	db04      	blt.n	801c9bc <__s2b+0x78>
 801c9b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c9b6:	340a      	adds	r4, #10
 801c9b8:	2509      	movs	r5, #9
 801c9ba:	e7f6      	b.n	801c9aa <__s2b+0x66>
 801c9bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 801c9c0:	4601      	mov	r1, r0
 801c9c2:	3b30      	subs	r3, #48	; 0x30
 801c9c4:	220a      	movs	r2, #10
 801c9c6:	4630      	mov	r0, r6
 801c9c8:	f7ff ff76 	bl	801c8b8 <__multadd>
 801c9cc:	e7ee      	b.n	801c9ac <__s2b+0x68>
 801c9ce:	bf00      	nop
 801c9d0:	08052420 	.word	0x08052420
 801c9d4:	080524ac 	.word	0x080524ac

0801c9d8 <__hi0bits>:
 801c9d8:	0c03      	lsrs	r3, r0, #16
 801c9da:	041b      	lsls	r3, r3, #16
 801c9dc:	b9d3      	cbnz	r3, 801ca14 <__hi0bits+0x3c>
 801c9de:	0400      	lsls	r0, r0, #16
 801c9e0:	2310      	movs	r3, #16
 801c9e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801c9e6:	bf04      	itt	eq
 801c9e8:	0200      	lsleq	r0, r0, #8
 801c9ea:	3308      	addeq	r3, #8
 801c9ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801c9f0:	bf04      	itt	eq
 801c9f2:	0100      	lsleq	r0, r0, #4
 801c9f4:	3304      	addeq	r3, #4
 801c9f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801c9fa:	bf04      	itt	eq
 801c9fc:	0080      	lsleq	r0, r0, #2
 801c9fe:	3302      	addeq	r3, #2
 801ca00:	2800      	cmp	r0, #0
 801ca02:	db05      	blt.n	801ca10 <__hi0bits+0x38>
 801ca04:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801ca08:	f103 0301 	add.w	r3, r3, #1
 801ca0c:	bf08      	it	eq
 801ca0e:	2320      	moveq	r3, #32
 801ca10:	4618      	mov	r0, r3
 801ca12:	4770      	bx	lr
 801ca14:	2300      	movs	r3, #0
 801ca16:	e7e4      	b.n	801c9e2 <__hi0bits+0xa>

0801ca18 <__lo0bits>:
 801ca18:	6803      	ldr	r3, [r0, #0]
 801ca1a:	f013 0207 	ands.w	r2, r3, #7
 801ca1e:	4601      	mov	r1, r0
 801ca20:	d00b      	beq.n	801ca3a <__lo0bits+0x22>
 801ca22:	07da      	lsls	r2, r3, #31
 801ca24:	d423      	bmi.n	801ca6e <__lo0bits+0x56>
 801ca26:	0798      	lsls	r0, r3, #30
 801ca28:	bf49      	itett	mi
 801ca2a:	085b      	lsrmi	r3, r3, #1
 801ca2c:	089b      	lsrpl	r3, r3, #2
 801ca2e:	2001      	movmi	r0, #1
 801ca30:	600b      	strmi	r3, [r1, #0]
 801ca32:	bf5c      	itt	pl
 801ca34:	600b      	strpl	r3, [r1, #0]
 801ca36:	2002      	movpl	r0, #2
 801ca38:	4770      	bx	lr
 801ca3a:	b298      	uxth	r0, r3
 801ca3c:	b9a8      	cbnz	r0, 801ca6a <__lo0bits+0x52>
 801ca3e:	0c1b      	lsrs	r3, r3, #16
 801ca40:	2010      	movs	r0, #16
 801ca42:	b2da      	uxtb	r2, r3
 801ca44:	b90a      	cbnz	r2, 801ca4a <__lo0bits+0x32>
 801ca46:	3008      	adds	r0, #8
 801ca48:	0a1b      	lsrs	r3, r3, #8
 801ca4a:	071a      	lsls	r2, r3, #28
 801ca4c:	bf04      	itt	eq
 801ca4e:	091b      	lsreq	r3, r3, #4
 801ca50:	3004      	addeq	r0, #4
 801ca52:	079a      	lsls	r2, r3, #30
 801ca54:	bf04      	itt	eq
 801ca56:	089b      	lsreq	r3, r3, #2
 801ca58:	3002      	addeq	r0, #2
 801ca5a:	07da      	lsls	r2, r3, #31
 801ca5c:	d403      	bmi.n	801ca66 <__lo0bits+0x4e>
 801ca5e:	085b      	lsrs	r3, r3, #1
 801ca60:	f100 0001 	add.w	r0, r0, #1
 801ca64:	d005      	beq.n	801ca72 <__lo0bits+0x5a>
 801ca66:	600b      	str	r3, [r1, #0]
 801ca68:	4770      	bx	lr
 801ca6a:	4610      	mov	r0, r2
 801ca6c:	e7e9      	b.n	801ca42 <__lo0bits+0x2a>
 801ca6e:	2000      	movs	r0, #0
 801ca70:	4770      	bx	lr
 801ca72:	2020      	movs	r0, #32
 801ca74:	4770      	bx	lr
	...

0801ca78 <__i2b>:
 801ca78:	b510      	push	{r4, lr}
 801ca7a:	460c      	mov	r4, r1
 801ca7c:	2101      	movs	r1, #1
 801ca7e:	f7ff feb9 	bl	801c7f4 <_Balloc>
 801ca82:	4602      	mov	r2, r0
 801ca84:	b928      	cbnz	r0, 801ca92 <__i2b+0x1a>
 801ca86:	4b05      	ldr	r3, [pc, #20]	; (801ca9c <__i2b+0x24>)
 801ca88:	4805      	ldr	r0, [pc, #20]	; (801caa0 <__i2b+0x28>)
 801ca8a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801ca8e:	f000 fe01 	bl	801d694 <__assert_func>
 801ca92:	2301      	movs	r3, #1
 801ca94:	6144      	str	r4, [r0, #20]
 801ca96:	6103      	str	r3, [r0, #16]
 801ca98:	bd10      	pop	{r4, pc}
 801ca9a:	bf00      	nop
 801ca9c:	08052420 	.word	0x08052420
 801caa0:	080524ac 	.word	0x080524ac

0801caa4 <__multiply>:
 801caa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801caa8:	4691      	mov	r9, r2
 801caaa:	690a      	ldr	r2, [r1, #16]
 801caac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801cab0:	429a      	cmp	r2, r3
 801cab2:	bfb8      	it	lt
 801cab4:	460b      	movlt	r3, r1
 801cab6:	460c      	mov	r4, r1
 801cab8:	bfbc      	itt	lt
 801caba:	464c      	movlt	r4, r9
 801cabc:	4699      	movlt	r9, r3
 801cabe:	6927      	ldr	r7, [r4, #16]
 801cac0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801cac4:	68a3      	ldr	r3, [r4, #8]
 801cac6:	6861      	ldr	r1, [r4, #4]
 801cac8:	eb07 060a 	add.w	r6, r7, sl
 801cacc:	42b3      	cmp	r3, r6
 801cace:	b085      	sub	sp, #20
 801cad0:	bfb8      	it	lt
 801cad2:	3101      	addlt	r1, #1
 801cad4:	f7ff fe8e 	bl	801c7f4 <_Balloc>
 801cad8:	b930      	cbnz	r0, 801cae8 <__multiply+0x44>
 801cada:	4602      	mov	r2, r0
 801cadc:	4b44      	ldr	r3, [pc, #272]	; (801cbf0 <__multiply+0x14c>)
 801cade:	4845      	ldr	r0, [pc, #276]	; (801cbf4 <__multiply+0x150>)
 801cae0:	f240 115d 	movw	r1, #349	; 0x15d
 801cae4:	f000 fdd6 	bl	801d694 <__assert_func>
 801cae8:	f100 0514 	add.w	r5, r0, #20
 801caec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801caf0:	462b      	mov	r3, r5
 801caf2:	2200      	movs	r2, #0
 801caf4:	4543      	cmp	r3, r8
 801caf6:	d321      	bcc.n	801cb3c <__multiply+0x98>
 801caf8:	f104 0314 	add.w	r3, r4, #20
 801cafc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801cb00:	f109 0314 	add.w	r3, r9, #20
 801cb04:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801cb08:	9202      	str	r2, [sp, #8]
 801cb0a:	1b3a      	subs	r2, r7, r4
 801cb0c:	3a15      	subs	r2, #21
 801cb0e:	f022 0203 	bic.w	r2, r2, #3
 801cb12:	3204      	adds	r2, #4
 801cb14:	f104 0115 	add.w	r1, r4, #21
 801cb18:	428f      	cmp	r7, r1
 801cb1a:	bf38      	it	cc
 801cb1c:	2204      	movcc	r2, #4
 801cb1e:	9201      	str	r2, [sp, #4]
 801cb20:	9a02      	ldr	r2, [sp, #8]
 801cb22:	9303      	str	r3, [sp, #12]
 801cb24:	429a      	cmp	r2, r3
 801cb26:	d80c      	bhi.n	801cb42 <__multiply+0x9e>
 801cb28:	2e00      	cmp	r6, #0
 801cb2a:	dd03      	ble.n	801cb34 <__multiply+0x90>
 801cb2c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801cb30:	2b00      	cmp	r3, #0
 801cb32:	d05a      	beq.n	801cbea <__multiply+0x146>
 801cb34:	6106      	str	r6, [r0, #16]
 801cb36:	b005      	add	sp, #20
 801cb38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb3c:	f843 2b04 	str.w	r2, [r3], #4
 801cb40:	e7d8      	b.n	801caf4 <__multiply+0x50>
 801cb42:	f8b3 a000 	ldrh.w	sl, [r3]
 801cb46:	f1ba 0f00 	cmp.w	sl, #0
 801cb4a:	d024      	beq.n	801cb96 <__multiply+0xf2>
 801cb4c:	f104 0e14 	add.w	lr, r4, #20
 801cb50:	46a9      	mov	r9, r5
 801cb52:	f04f 0c00 	mov.w	ip, #0
 801cb56:	f85e 2b04 	ldr.w	r2, [lr], #4
 801cb5a:	f8d9 1000 	ldr.w	r1, [r9]
 801cb5e:	fa1f fb82 	uxth.w	fp, r2
 801cb62:	b289      	uxth	r1, r1
 801cb64:	fb0a 110b 	mla	r1, sl, fp, r1
 801cb68:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801cb6c:	f8d9 2000 	ldr.w	r2, [r9]
 801cb70:	4461      	add	r1, ip
 801cb72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801cb76:	fb0a c20b 	mla	r2, sl, fp, ip
 801cb7a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801cb7e:	b289      	uxth	r1, r1
 801cb80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801cb84:	4577      	cmp	r7, lr
 801cb86:	f849 1b04 	str.w	r1, [r9], #4
 801cb8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801cb8e:	d8e2      	bhi.n	801cb56 <__multiply+0xb2>
 801cb90:	9a01      	ldr	r2, [sp, #4]
 801cb92:	f845 c002 	str.w	ip, [r5, r2]
 801cb96:	9a03      	ldr	r2, [sp, #12]
 801cb98:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801cb9c:	3304      	adds	r3, #4
 801cb9e:	f1b9 0f00 	cmp.w	r9, #0
 801cba2:	d020      	beq.n	801cbe6 <__multiply+0x142>
 801cba4:	6829      	ldr	r1, [r5, #0]
 801cba6:	f104 0c14 	add.w	ip, r4, #20
 801cbaa:	46ae      	mov	lr, r5
 801cbac:	f04f 0a00 	mov.w	sl, #0
 801cbb0:	f8bc b000 	ldrh.w	fp, [ip]
 801cbb4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801cbb8:	fb09 220b 	mla	r2, r9, fp, r2
 801cbbc:	4492      	add	sl, r2
 801cbbe:	b289      	uxth	r1, r1
 801cbc0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801cbc4:	f84e 1b04 	str.w	r1, [lr], #4
 801cbc8:	f85c 2b04 	ldr.w	r2, [ip], #4
 801cbcc:	f8be 1000 	ldrh.w	r1, [lr]
 801cbd0:	0c12      	lsrs	r2, r2, #16
 801cbd2:	fb09 1102 	mla	r1, r9, r2, r1
 801cbd6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801cbda:	4567      	cmp	r7, ip
 801cbdc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801cbe0:	d8e6      	bhi.n	801cbb0 <__multiply+0x10c>
 801cbe2:	9a01      	ldr	r2, [sp, #4]
 801cbe4:	50a9      	str	r1, [r5, r2]
 801cbe6:	3504      	adds	r5, #4
 801cbe8:	e79a      	b.n	801cb20 <__multiply+0x7c>
 801cbea:	3e01      	subs	r6, #1
 801cbec:	e79c      	b.n	801cb28 <__multiply+0x84>
 801cbee:	bf00      	nop
 801cbf0:	08052420 	.word	0x08052420
 801cbf4:	080524ac 	.word	0x080524ac

0801cbf8 <__pow5mult>:
 801cbf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cbfc:	4615      	mov	r5, r2
 801cbfe:	f012 0203 	ands.w	r2, r2, #3
 801cc02:	4606      	mov	r6, r0
 801cc04:	460f      	mov	r7, r1
 801cc06:	d007      	beq.n	801cc18 <__pow5mult+0x20>
 801cc08:	4c25      	ldr	r4, [pc, #148]	; (801cca0 <__pow5mult+0xa8>)
 801cc0a:	3a01      	subs	r2, #1
 801cc0c:	2300      	movs	r3, #0
 801cc0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801cc12:	f7ff fe51 	bl	801c8b8 <__multadd>
 801cc16:	4607      	mov	r7, r0
 801cc18:	10ad      	asrs	r5, r5, #2
 801cc1a:	d03d      	beq.n	801cc98 <__pow5mult+0xa0>
 801cc1c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801cc1e:	b97c      	cbnz	r4, 801cc40 <__pow5mult+0x48>
 801cc20:	2010      	movs	r0, #16
 801cc22:	f7ff fdbf 	bl	801c7a4 <malloc>
 801cc26:	4602      	mov	r2, r0
 801cc28:	6270      	str	r0, [r6, #36]	; 0x24
 801cc2a:	b928      	cbnz	r0, 801cc38 <__pow5mult+0x40>
 801cc2c:	4b1d      	ldr	r3, [pc, #116]	; (801cca4 <__pow5mult+0xac>)
 801cc2e:	481e      	ldr	r0, [pc, #120]	; (801cca8 <__pow5mult+0xb0>)
 801cc30:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801cc34:	f000 fd2e 	bl	801d694 <__assert_func>
 801cc38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801cc3c:	6004      	str	r4, [r0, #0]
 801cc3e:	60c4      	str	r4, [r0, #12]
 801cc40:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801cc44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801cc48:	b94c      	cbnz	r4, 801cc5e <__pow5mult+0x66>
 801cc4a:	f240 2171 	movw	r1, #625	; 0x271
 801cc4e:	4630      	mov	r0, r6
 801cc50:	f7ff ff12 	bl	801ca78 <__i2b>
 801cc54:	2300      	movs	r3, #0
 801cc56:	f8c8 0008 	str.w	r0, [r8, #8]
 801cc5a:	4604      	mov	r4, r0
 801cc5c:	6003      	str	r3, [r0, #0]
 801cc5e:	f04f 0900 	mov.w	r9, #0
 801cc62:	07eb      	lsls	r3, r5, #31
 801cc64:	d50a      	bpl.n	801cc7c <__pow5mult+0x84>
 801cc66:	4639      	mov	r1, r7
 801cc68:	4622      	mov	r2, r4
 801cc6a:	4630      	mov	r0, r6
 801cc6c:	f7ff ff1a 	bl	801caa4 <__multiply>
 801cc70:	4639      	mov	r1, r7
 801cc72:	4680      	mov	r8, r0
 801cc74:	4630      	mov	r0, r6
 801cc76:	f7ff fdfd 	bl	801c874 <_Bfree>
 801cc7a:	4647      	mov	r7, r8
 801cc7c:	106d      	asrs	r5, r5, #1
 801cc7e:	d00b      	beq.n	801cc98 <__pow5mult+0xa0>
 801cc80:	6820      	ldr	r0, [r4, #0]
 801cc82:	b938      	cbnz	r0, 801cc94 <__pow5mult+0x9c>
 801cc84:	4622      	mov	r2, r4
 801cc86:	4621      	mov	r1, r4
 801cc88:	4630      	mov	r0, r6
 801cc8a:	f7ff ff0b 	bl	801caa4 <__multiply>
 801cc8e:	6020      	str	r0, [r4, #0]
 801cc90:	f8c0 9000 	str.w	r9, [r0]
 801cc94:	4604      	mov	r4, r0
 801cc96:	e7e4      	b.n	801cc62 <__pow5mult+0x6a>
 801cc98:	4638      	mov	r0, r7
 801cc9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cc9e:	bf00      	nop
 801cca0:	080525f8 	.word	0x080525f8
 801cca4:	080523ae 	.word	0x080523ae
 801cca8:	080524ac 	.word	0x080524ac

0801ccac <__lshift>:
 801ccac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ccb0:	460c      	mov	r4, r1
 801ccb2:	6849      	ldr	r1, [r1, #4]
 801ccb4:	6923      	ldr	r3, [r4, #16]
 801ccb6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801ccba:	68a3      	ldr	r3, [r4, #8]
 801ccbc:	4607      	mov	r7, r0
 801ccbe:	4691      	mov	r9, r2
 801ccc0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801ccc4:	f108 0601 	add.w	r6, r8, #1
 801ccc8:	42b3      	cmp	r3, r6
 801ccca:	db0b      	blt.n	801cce4 <__lshift+0x38>
 801cccc:	4638      	mov	r0, r7
 801ccce:	f7ff fd91 	bl	801c7f4 <_Balloc>
 801ccd2:	4605      	mov	r5, r0
 801ccd4:	b948      	cbnz	r0, 801ccea <__lshift+0x3e>
 801ccd6:	4602      	mov	r2, r0
 801ccd8:	4b2a      	ldr	r3, [pc, #168]	; (801cd84 <__lshift+0xd8>)
 801ccda:	482b      	ldr	r0, [pc, #172]	; (801cd88 <__lshift+0xdc>)
 801ccdc:	f240 11d9 	movw	r1, #473	; 0x1d9
 801cce0:	f000 fcd8 	bl	801d694 <__assert_func>
 801cce4:	3101      	adds	r1, #1
 801cce6:	005b      	lsls	r3, r3, #1
 801cce8:	e7ee      	b.n	801ccc8 <__lshift+0x1c>
 801ccea:	2300      	movs	r3, #0
 801ccec:	f100 0114 	add.w	r1, r0, #20
 801ccf0:	f100 0210 	add.w	r2, r0, #16
 801ccf4:	4618      	mov	r0, r3
 801ccf6:	4553      	cmp	r3, sl
 801ccf8:	db37      	blt.n	801cd6a <__lshift+0xbe>
 801ccfa:	6920      	ldr	r0, [r4, #16]
 801ccfc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801cd00:	f104 0314 	add.w	r3, r4, #20
 801cd04:	f019 091f 	ands.w	r9, r9, #31
 801cd08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801cd0c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801cd10:	d02f      	beq.n	801cd72 <__lshift+0xc6>
 801cd12:	f1c9 0e20 	rsb	lr, r9, #32
 801cd16:	468a      	mov	sl, r1
 801cd18:	f04f 0c00 	mov.w	ip, #0
 801cd1c:	681a      	ldr	r2, [r3, #0]
 801cd1e:	fa02 f209 	lsl.w	r2, r2, r9
 801cd22:	ea42 020c 	orr.w	r2, r2, ip
 801cd26:	f84a 2b04 	str.w	r2, [sl], #4
 801cd2a:	f853 2b04 	ldr.w	r2, [r3], #4
 801cd2e:	4298      	cmp	r0, r3
 801cd30:	fa22 fc0e 	lsr.w	ip, r2, lr
 801cd34:	d8f2      	bhi.n	801cd1c <__lshift+0x70>
 801cd36:	1b03      	subs	r3, r0, r4
 801cd38:	3b15      	subs	r3, #21
 801cd3a:	f023 0303 	bic.w	r3, r3, #3
 801cd3e:	3304      	adds	r3, #4
 801cd40:	f104 0215 	add.w	r2, r4, #21
 801cd44:	4290      	cmp	r0, r2
 801cd46:	bf38      	it	cc
 801cd48:	2304      	movcc	r3, #4
 801cd4a:	f841 c003 	str.w	ip, [r1, r3]
 801cd4e:	f1bc 0f00 	cmp.w	ip, #0
 801cd52:	d001      	beq.n	801cd58 <__lshift+0xac>
 801cd54:	f108 0602 	add.w	r6, r8, #2
 801cd58:	3e01      	subs	r6, #1
 801cd5a:	4638      	mov	r0, r7
 801cd5c:	612e      	str	r6, [r5, #16]
 801cd5e:	4621      	mov	r1, r4
 801cd60:	f7ff fd88 	bl	801c874 <_Bfree>
 801cd64:	4628      	mov	r0, r5
 801cd66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cd6a:	f842 0f04 	str.w	r0, [r2, #4]!
 801cd6e:	3301      	adds	r3, #1
 801cd70:	e7c1      	b.n	801ccf6 <__lshift+0x4a>
 801cd72:	3904      	subs	r1, #4
 801cd74:	f853 2b04 	ldr.w	r2, [r3], #4
 801cd78:	f841 2f04 	str.w	r2, [r1, #4]!
 801cd7c:	4298      	cmp	r0, r3
 801cd7e:	d8f9      	bhi.n	801cd74 <__lshift+0xc8>
 801cd80:	e7ea      	b.n	801cd58 <__lshift+0xac>
 801cd82:	bf00      	nop
 801cd84:	08052420 	.word	0x08052420
 801cd88:	080524ac 	.word	0x080524ac

0801cd8c <__mcmp>:
 801cd8c:	b530      	push	{r4, r5, lr}
 801cd8e:	6902      	ldr	r2, [r0, #16]
 801cd90:	690c      	ldr	r4, [r1, #16]
 801cd92:	1b12      	subs	r2, r2, r4
 801cd94:	d10e      	bne.n	801cdb4 <__mcmp+0x28>
 801cd96:	f100 0314 	add.w	r3, r0, #20
 801cd9a:	3114      	adds	r1, #20
 801cd9c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801cda0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801cda4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801cda8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801cdac:	42a5      	cmp	r5, r4
 801cdae:	d003      	beq.n	801cdb8 <__mcmp+0x2c>
 801cdb0:	d305      	bcc.n	801cdbe <__mcmp+0x32>
 801cdb2:	2201      	movs	r2, #1
 801cdb4:	4610      	mov	r0, r2
 801cdb6:	bd30      	pop	{r4, r5, pc}
 801cdb8:	4283      	cmp	r3, r0
 801cdba:	d3f3      	bcc.n	801cda4 <__mcmp+0x18>
 801cdbc:	e7fa      	b.n	801cdb4 <__mcmp+0x28>
 801cdbe:	f04f 32ff 	mov.w	r2, #4294967295
 801cdc2:	e7f7      	b.n	801cdb4 <__mcmp+0x28>

0801cdc4 <__mdiff>:
 801cdc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cdc8:	460c      	mov	r4, r1
 801cdca:	4606      	mov	r6, r0
 801cdcc:	4611      	mov	r1, r2
 801cdce:	4620      	mov	r0, r4
 801cdd0:	4690      	mov	r8, r2
 801cdd2:	f7ff ffdb 	bl	801cd8c <__mcmp>
 801cdd6:	1e05      	subs	r5, r0, #0
 801cdd8:	d110      	bne.n	801cdfc <__mdiff+0x38>
 801cdda:	4629      	mov	r1, r5
 801cddc:	4630      	mov	r0, r6
 801cdde:	f7ff fd09 	bl	801c7f4 <_Balloc>
 801cde2:	b930      	cbnz	r0, 801cdf2 <__mdiff+0x2e>
 801cde4:	4b3a      	ldr	r3, [pc, #232]	; (801ced0 <__mdiff+0x10c>)
 801cde6:	4602      	mov	r2, r0
 801cde8:	f240 2132 	movw	r1, #562	; 0x232
 801cdec:	4839      	ldr	r0, [pc, #228]	; (801ced4 <__mdiff+0x110>)
 801cdee:	f000 fc51 	bl	801d694 <__assert_func>
 801cdf2:	2301      	movs	r3, #1
 801cdf4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801cdf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cdfc:	bfa4      	itt	ge
 801cdfe:	4643      	movge	r3, r8
 801ce00:	46a0      	movge	r8, r4
 801ce02:	4630      	mov	r0, r6
 801ce04:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801ce08:	bfa6      	itte	ge
 801ce0a:	461c      	movge	r4, r3
 801ce0c:	2500      	movge	r5, #0
 801ce0e:	2501      	movlt	r5, #1
 801ce10:	f7ff fcf0 	bl	801c7f4 <_Balloc>
 801ce14:	b920      	cbnz	r0, 801ce20 <__mdiff+0x5c>
 801ce16:	4b2e      	ldr	r3, [pc, #184]	; (801ced0 <__mdiff+0x10c>)
 801ce18:	4602      	mov	r2, r0
 801ce1a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801ce1e:	e7e5      	b.n	801cdec <__mdiff+0x28>
 801ce20:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801ce24:	6926      	ldr	r6, [r4, #16]
 801ce26:	60c5      	str	r5, [r0, #12]
 801ce28:	f104 0914 	add.w	r9, r4, #20
 801ce2c:	f108 0514 	add.w	r5, r8, #20
 801ce30:	f100 0e14 	add.w	lr, r0, #20
 801ce34:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801ce38:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801ce3c:	f108 0210 	add.w	r2, r8, #16
 801ce40:	46f2      	mov	sl, lr
 801ce42:	2100      	movs	r1, #0
 801ce44:	f859 3b04 	ldr.w	r3, [r9], #4
 801ce48:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801ce4c:	fa1f f883 	uxth.w	r8, r3
 801ce50:	fa11 f18b 	uxtah	r1, r1, fp
 801ce54:	0c1b      	lsrs	r3, r3, #16
 801ce56:	eba1 0808 	sub.w	r8, r1, r8
 801ce5a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801ce5e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801ce62:	fa1f f888 	uxth.w	r8, r8
 801ce66:	1419      	asrs	r1, r3, #16
 801ce68:	454e      	cmp	r6, r9
 801ce6a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801ce6e:	f84a 3b04 	str.w	r3, [sl], #4
 801ce72:	d8e7      	bhi.n	801ce44 <__mdiff+0x80>
 801ce74:	1b33      	subs	r3, r6, r4
 801ce76:	3b15      	subs	r3, #21
 801ce78:	f023 0303 	bic.w	r3, r3, #3
 801ce7c:	3304      	adds	r3, #4
 801ce7e:	3415      	adds	r4, #21
 801ce80:	42a6      	cmp	r6, r4
 801ce82:	bf38      	it	cc
 801ce84:	2304      	movcc	r3, #4
 801ce86:	441d      	add	r5, r3
 801ce88:	4473      	add	r3, lr
 801ce8a:	469e      	mov	lr, r3
 801ce8c:	462e      	mov	r6, r5
 801ce8e:	4566      	cmp	r6, ip
 801ce90:	d30e      	bcc.n	801ceb0 <__mdiff+0xec>
 801ce92:	f10c 0203 	add.w	r2, ip, #3
 801ce96:	1b52      	subs	r2, r2, r5
 801ce98:	f022 0203 	bic.w	r2, r2, #3
 801ce9c:	3d03      	subs	r5, #3
 801ce9e:	45ac      	cmp	ip, r5
 801cea0:	bf38      	it	cc
 801cea2:	2200      	movcc	r2, #0
 801cea4:	441a      	add	r2, r3
 801cea6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801ceaa:	b17b      	cbz	r3, 801cecc <__mdiff+0x108>
 801ceac:	6107      	str	r7, [r0, #16]
 801ceae:	e7a3      	b.n	801cdf8 <__mdiff+0x34>
 801ceb0:	f856 8b04 	ldr.w	r8, [r6], #4
 801ceb4:	fa11 f288 	uxtah	r2, r1, r8
 801ceb8:	1414      	asrs	r4, r2, #16
 801ceba:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801cebe:	b292      	uxth	r2, r2
 801cec0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801cec4:	f84e 2b04 	str.w	r2, [lr], #4
 801cec8:	1421      	asrs	r1, r4, #16
 801ceca:	e7e0      	b.n	801ce8e <__mdiff+0xca>
 801cecc:	3f01      	subs	r7, #1
 801cece:	e7ea      	b.n	801cea6 <__mdiff+0xe2>
 801ced0:	08052420 	.word	0x08052420
 801ced4:	080524ac 	.word	0x080524ac

0801ced8 <__ulp>:
 801ced8:	b082      	sub	sp, #8
 801ceda:	ed8d 0b00 	vstr	d0, [sp]
 801cede:	9b01      	ldr	r3, [sp, #4]
 801cee0:	4912      	ldr	r1, [pc, #72]	; (801cf2c <__ulp+0x54>)
 801cee2:	4019      	ands	r1, r3
 801cee4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801cee8:	2900      	cmp	r1, #0
 801ceea:	dd05      	ble.n	801cef8 <__ulp+0x20>
 801ceec:	2200      	movs	r2, #0
 801ceee:	460b      	mov	r3, r1
 801cef0:	ec43 2b10 	vmov	d0, r2, r3
 801cef4:	b002      	add	sp, #8
 801cef6:	4770      	bx	lr
 801cef8:	4249      	negs	r1, r1
 801cefa:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801cefe:	ea4f 5021 	mov.w	r0, r1, asr #20
 801cf02:	f04f 0200 	mov.w	r2, #0
 801cf06:	f04f 0300 	mov.w	r3, #0
 801cf0a:	da04      	bge.n	801cf16 <__ulp+0x3e>
 801cf0c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801cf10:	fa41 f300 	asr.w	r3, r1, r0
 801cf14:	e7ec      	b.n	801cef0 <__ulp+0x18>
 801cf16:	f1a0 0114 	sub.w	r1, r0, #20
 801cf1a:	291e      	cmp	r1, #30
 801cf1c:	bfda      	itte	le
 801cf1e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801cf22:	fa20 f101 	lsrle.w	r1, r0, r1
 801cf26:	2101      	movgt	r1, #1
 801cf28:	460a      	mov	r2, r1
 801cf2a:	e7e1      	b.n	801cef0 <__ulp+0x18>
 801cf2c:	7ff00000 	.word	0x7ff00000

0801cf30 <__b2d>:
 801cf30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cf32:	6905      	ldr	r5, [r0, #16]
 801cf34:	f100 0714 	add.w	r7, r0, #20
 801cf38:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801cf3c:	1f2e      	subs	r6, r5, #4
 801cf3e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801cf42:	4620      	mov	r0, r4
 801cf44:	f7ff fd48 	bl	801c9d8 <__hi0bits>
 801cf48:	f1c0 0320 	rsb	r3, r0, #32
 801cf4c:	280a      	cmp	r0, #10
 801cf4e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801cfcc <__b2d+0x9c>
 801cf52:	600b      	str	r3, [r1, #0]
 801cf54:	dc14      	bgt.n	801cf80 <__b2d+0x50>
 801cf56:	f1c0 0e0b 	rsb	lr, r0, #11
 801cf5a:	fa24 f10e 	lsr.w	r1, r4, lr
 801cf5e:	42b7      	cmp	r7, r6
 801cf60:	ea41 030c 	orr.w	r3, r1, ip
 801cf64:	bf34      	ite	cc
 801cf66:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801cf6a:	2100      	movcs	r1, #0
 801cf6c:	3015      	adds	r0, #21
 801cf6e:	fa04 f000 	lsl.w	r0, r4, r0
 801cf72:	fa21 f10e 	lsr.w	r1, r1, lr
 801cf76:	ea40 0201 	orr.w	r2, r0, r1
 801cf7a:	ec43 2b10 	vmov	d0, r2, r3
 801cf7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cf80:	42b7      	cmp	r7, r6
 801cf82:	bf3a      	itte	cc
 801cf84:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801cf88:	f1a5 0608 	subcc.w	r6, r5, #8
 801cf8c:	2100      	movcs	r1, #0
 801cf8e:	380b      	subs	r0, #11
 801cf90:	d017      	beq.n	801cfc2 <__b2d+0x92>
 801cf92:	f1c0 0c20 	rsb	ip, r0, #32
 801cf96:	fa04 f500 	lsl.w	r5, r4, r0
 801cf9a:	42be      	cmp	r6, r7
 801cf9c:	fa21 f40c 	lsr.w	r4, r1, ip
 801cfa0:	ea45 0504 	orr.w	r5, r5, r4
 801cfa4:	bf8c      	ite	hi
 801cfa6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801cfaa:	2400      	movls	r4, #0
 801cfac:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801cfb0:	fa01 f000 	lsl.w	r0, r1, r0
 801cfb4:	fa24 f40c 	lsr.w	r4, r4, ip
 801cfb8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801cfbc:	ea40 0204 	orr.w	r2, r0, r4
 801cfc0:	e7db      	b.n	801cf7a <__b2d+0x4a>
 801cfc2:	ea44 030c 	orr.w	r3, r4, ip
 801cfc6:	460a      	mov	r2, r1
 801cfc8:	e7d7      	b.n	801cf7a <__b2d+0x4a>
 801cfca:	bf00      	nop
 801cfcc:	3ff00000 	.word	0x3ff00000

0801cfd0 <__d2b>:
 801cfd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801cfd4:	4689      	mov	r9, r1
 801cfd6:	2101      	movs	r1, #1
 801cfd8:	ec57 6b10 	vmov	r6, r7, d0
 801cfdc:	4690      	mov	r8, r2
 801cfde:	f7ff fc09 	bl	801c7f4 <_Balloc>
 801cfe2:	4604      	mov	r4, r0
 801cfe4:	b930      	cbnz	r0, 801cff4 <__d2b+0x24>
 801cfe6:	4602      	mov	r2, r0
 801cfe8:	4b25      	ldr	r3, [pc, #148]	; (801d080 <__d2b+0xb0>)
 801cfea:	4826      	ldr	r0, [pc, #152]	; (801d084 <__d2b+0xb4>)
 801cfec:	f240 310a 	movw	r1, #778	; 0x30a
 801cff0:	f000 fb50 	bl	801d694 <__assert_func>
 801cff4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801cff8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801cffc:	bb35      	cbnz	r5, 801d04c <__d2b+0x7c>
 801cffe:	2e00      	cmp	r6, #0
 801d000:	9301      	str	r3, [sp, #4]
 801d002:	d028      	beq.n	801d056 <__d2b+0x86>
 801d004:	4668      	mov	r0, sp
 801d006:	9600      	str	r6, [sp, #0]
 801d008:	f7ff fd06 	bl	801ca18 <__lo0bits>
 801d00c:	9900      	ldr	r1, [sp, #0]
 801d00e:	b300      	cbz	r0, 801d052 <__d2b+0x82>
 801d010:	9a01      	ldr	r2, [sp, #4]
 801d012:	f1c0 0320 	rsb	r3, r0, #32
 801d016:	fa02 f303 	lsl.w	r3, r2, r3
 801d01a:	430b      	orrs	r3, r1
 801d01c:	40c2      	lsrs	r2, r0
 801d01e:	6163      	str	r3, [r4, #20]
 801d020:	9201      	str	r2, [sp, #4]
 801d022:	9b01      	ldr	r3, [sp, #4]
 801d024:	61a3      	str	r3, [r4, #24]
 801d026:	2b00      	cmp	r3, #0
 801d028:	bf14      	ite	ne
 801d02a:	2202      	movne	r2, #2
 801d02c:	2201      	moveq	r2, #1
 801d02e:	6122      	str	r2, [r4, #16]
 801d030:	b1d5      	cbz	r5, 801d068 <__d2b+0x98>
 801d032:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801d036:	4405      	add	r5, r0
 801d038:	f8c9 5000 	str.w	r5, [r9]
 801d03c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801d040:	f8c8 0000 	str.w	r0, [r8]
 801d044:	4620      	mov	r0, r4
 801d046:	b003      	add	sp, #12
 801d048:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d04c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d050:	e7d5      	b.n	801cffe <__d2b+0x2e>
 801d052:	6161      	str	r1, [r4, #20]
 801d054:	e7e5      	b.n	801d022 <__d2b+0x52>
 801d056:	a801      	add	r0, sp, #4
 801d058:	f7ff fcde 	bl	801ca18 <__lo0bits>
 801d05c:	9b01      	ldr	r3, [sp, #4]
 801d05e:	6163      	str	r3, [r4, #20]
 801d060:	2201      	movs	r2, #1
 801d062:	6122      	str	r2, [r4, #16]
 801d064:	3020      	adds	r0, #32
 801d066:	e7e3      	b.n	801d030 <__d2b+0x60>
 801d068:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d06c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801d070:	f8c9 0000 	str.w	r0, [r9]
 801d074:	6918      	ldr	r0, [r3, #16]
 801d076:	f7ff fcaf 	bl	801c9d8 <__hi0bits>
 801d07a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d07e:	e7df      	b.n	801d040 <__d2b+0x70>
 801d080:	08052420 	.word	0x08052420
 801d084:	080524ac 	.word	0x080524ac

0801d088 <__ratio>:
 801d088:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d08c:	4688      	mov	r8, r1
 801d08e:	4669      	mov	r1, sp
 801d090:	4681      	mov	r9, r0
 801d092:	f7ff ff4d 	bl	801cf30 <__b2d>
 801d096:	a901      	add	r1, sp, #4
 801d098:	4640      	mov	r0, r8
 801d09a:	ec55 4b10 	vmov	r4, r5, d0
 801d09e:	f7ff ff47 	bl	801cf30 <__b2d>
 801d0a2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d0a6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801d0aa:	eba3 0c02 	sub.w	ip, r3, r2
 801d0ae:	e9dd 3200 	ldrd	r3, r2, [sp]
 801d0b2:	1a9b      	subs	r3, r3, r2
 801d0b4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801d0b8:	ec51 0b10 	vmov	r0, r1, d0
 801d0bc:	2b00      	cmp	r3, #0
 801d0be:	bfd6      	itet	le
 801d0c0:	460a      	movle	r2, r1
 801d0c2:	462a      	movgt	r2, r5
 801d0c4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801d0c8:	468b      	mov	fp, r1
 801d0ca:	462f      	mov	r7, r5
 801d0cc:	bfd4      	ite	le
 801d0ce:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801d0d2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801d0d6:	4620      	mov	r0, r4
 801d0d8:	ee10 2a10 	vmov	r2, s0
 801d0dc:	465b      	mov	r3, fp
 801d0de:	4639      	mov	r1, r7
 801d0e0:	f7fb ffe4 	bl	80190ac <__aeabi_ddiv>
 801d0e4:	ec41 0b10 	vmov	d0, r0, r1
 801d0e8:	b003      	add	sp, #12
 801d0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d0ee <__copybits>:
 801d0ee:	3901      	subs	r1, #1
 801d0f0:	b570      	push	{r4, r5, r6, lr}
 801d0f2:	1149      	asrs	r1, r1, #5
 801d0f4:	6914      	ldr	r4, [r2, #16]
 801d0f6:	3101      	adds	r1, #1
 801d0f8:	f102 0314 	add.w	r3, r2, #20
 801d0fc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801d100:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801d104:	1f05      	subs	r5, r0, #4
 801d106:	42a3      	cmp	r3, r4
 801d108:	d30c      	bcc.n	801d124 <__copybits+0x36>
 801d10a:	1aa3      	subs	r3, r4, r2
 801d10c:	3b11      	subs	r3, #17
 801d10e:	f023 0303 	bic.w	r3, r3, #3
 801d112:	3211      	adds	r2, #17
 801d114:	42a2      	cmp	r2, r4
 801d116:	bf88      	it	hi
 801d118:	2300      	movhi	r3, #0
 801d11a:	4418      	add	r0, r3
 801d11c:	2300      	movs	r3, #0
 801d11e:	4288      	cmp	r0, r1
 801d120:	d305      	bcc.n	801d12e <__copybits+0x40>
 801d122:	bd70      	pop	{r4, r5, r6, pc}
 801d124:	f853 6b04 	ldr.w	r6, [r3], #4
 801d128:	f845 6f04 	str.w	r6, [r5, #4]!
 801d12c:	e7eb      	b.n	801d106 <__copybits+0x18>
 801d12e:	f840 3b04 	str.w	r3, [r0], #4
 801d132:	e7f4      	b.n	801d11e <__copybits+0x30>

0801d134 <__any_on>:
 801d134:	f100 0214 	add.w	r2, r0, #20
 801d138:	6900      	ldr	r0, [r0, #16]
 801d13a:	114b      	asrs	r3, r1, #5
 801d13c:	4298      	cmp	r0, r3
 801d13e:	b510      	push	{r4, lr}
 801d140:	db11      	blt.n	801d166 <__any_on+0x32>
 801d142:	dd0a      	ble.n	801d15a <__any_on+0x26>
 801d144:	f011 011f 	ands.w	r1, r1, #31
 801d148:	d007      	beq.n	801d15a <__any_on+0x26>
 801d14a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801d14e:	fa24 f001 	lsr.w	r0, r4, r1
 801d152:	fa00 f101 	lsl.w	r1, r0, r1
 801d156:	428c      	cmp	r4, r1
 801d158:	d10b      	bne.n	801d172 <__any_on+0x3e>
 801d15a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d15e:	4293      	cmp	r3, r2
 801d160:	d803      	bhi.n	801d16a <__any_on+0x36>
 801d162:	2000      	movs	r0, #0
 801d164:	bd10      	pop	{r4, pc}
 801d166:	4603      	mov	r3, r0
 801d168:	e7f7      	b.n	801d15a <__any_on+0x26>
 801d16a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d16e:	2900      	cmp	r1, #0
 801d170:	d0f5      	beq.n	801d15e <__any_on+0x2a>
 801d172:	2001      	movs	r0, #1
 801d174:	e7f6      	b.n	801d164 <__any_on+0x30>

0801d176 <_calloc_r>:
 801d176:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d178:	fba1 2402 	umull	r2, r4, r1, r2
 801d17c:	b94c      	cbnz	r4, 801d192 <_calloc_r+0x1c>
 801d17e:	4611      	mov	r1, r2
 801d180:	9201      	str	r2, [sp, #4]
 801d182:	f000 f87b 	bl	801d27c <_malloc_r>
 801d186:	9a01      	ldr	r2, [sp, #4]
 801d188:	4605      	mov	r5, r0
 801d18a:	b930      	cbnz	r0, 801d19a <_calloc_r+0x24>
 801d18c:	4628      	mov	r0, r5
 801d18e:	b003      	add	sp, #12
 801d190:	bd30      	pop	{r4, r5, pc}
 801d192:	220c      	movs	r2, #12
 801d194:	6002      	str	r2, [r0, #0]
 801d196:	2500      	movs	r5, #0
 801d198:	e7f8      	b.n	801d18c <_calloc_r+0x16>
 801d19a:	4621      	mov	r1, r4
 801d19c:	f7fc fbb4 	bl	8019908 <memset>
 801d1a0:	e7f4      	b.n	801d18c <_calloc_r+0x16>
	...

0801d1a4 <_free_r>:
 801d1a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d1a6:	2900      	cmp	r1, #0
 801d1a8:	d044      	beq.n	801d234 <_free_r+0x90>
 801d1aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d1ae:	9001      	str	r0, [sp, #4]
 801d1b0:	2b00      	cmp	r3, #0
 801d1b2:	f1a1 0404 	sub.w	r4, r1, #4
 801d1b6:	bfb8      	it	lt
 801d1b8:	18e4      	addlt	r4, r4, r3
 801d1ba:	f000 fab5 	bl	801d728 <__malloc_lock>
 801d1be:	4a1e      	ldr	r2, [pc, #120]	; (801d238 <_free_r+0x94>)
 801d1c0:	9801      	ldr	r0, [sp, #4]
 801d1c2:	6813      	ldr	r3, [r2, #0]
 801d1c4:	b933      	cbnz	r3, 801d1d4 <_free_r+0x30>
 801d1c6:	6063      	str	r3, [r4, #4]
 801d1c8:	6014      	str	r4, [r2, #0]
 801d1ca:	b003      	add	sp, #12
 801d1cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d1d0:	f000 bab0 	b.w	801d734 <__malloc_unlock>
 801d1d4:	42a3      	cmp	r3, r4
 801d1d6:	d908      	bls.n	801d1ea <_free_r+0x46>
 801d1d8:	6825      	ldr	r5, [r4, #0]
 801d1da:	1961      	adds	r1, r4, r5
 801d1dc:	428b      	cmp	r3, r1
 801d1de:	bf01      	itttt	eq
 801d1e0:	6819      	ldreq	r1, [r3, #0]
 801d1e2:	685b      	ldreq	r3, [r3, #4]
 801d1e4:	1949      	addeq	r1, r1, r5
 801d1e6:	6021      	streq	r1, [r4, #0]
 801d1e8:	e7ed      	b.n	801d1c6 <_free_r+0x22>
 801d1ea:	461a      	mov	r2, r3
 801d1ec:	685b      	ldr	r3, [r3, #4]
 801d1ee:	b10b      	cbz	r3, 801d1f4 <_free_r+0x50>
 801d1f0:	42a3      	cmp	r3, r4
 801d1f2:	d9fa      	bls.n	801d1ea <_free_r+0x46>
 801d1f4:	6811      	ldr	r1, [r2, #0]
 801d1f6:	1855      	adds	r5, r2, r1
 801d1f8:	42a5      	cmp	r5, r4
 801d1fa:	d10b      	bne.n	801d214 <_free_r+0x70>
 801d1fc:	6824      	ldr	r4, [r4, #0]
 801d1fe:	4421      	add	r1, r4
 801d200:	1854      	adds	r4, r2, r1
 801d202:	42a3      	cmp	r3, r4
 801d204:	6011      	str	r1, [r2, #0]
 801d206:	d1e0      	bne.n	801d1ca <_free_r+0x26>
 801d208:	681c      	ldr	r4, [r3, #0]
 801d20a:	685b      	ldr	r3, [r3, #4]
 801d20c:	6053      	str	r3, [r2, #4]
 801d20e:	4421      	add	r1, r4
 801d210:	6011      	str	r1, [r2, #0]
 801d212:	e7da      	b.n	801d1ca <_free_r+0x26>
 801d214:	d902      	bls.n	801d21c <_free_r+0x78>
 801d216:	230c      	movs	r3, #12
 801d218:	6003      	str	r3, [r0, #0]
 801d21a:	e7d6      	b.n	801d1ca <_free_r+0x26>
 801d21c:	6825      	ldr	r5, [r4, #0]
 801d21e:	1961      	adds	r1, r4, r5
 801d220:	428b      	cmp	r3, r1
 801d222:	bf04      	itt	eq
 801d224:	6819      	ldreq	r1, [r3, #0]
 801d226:	685b      	ldreq	r3, [r3, #4]
 801d228:	6063      	str	r3, [r4, #4]
 801d22a:	bf04      	itt	eq
 801d22c:	1949      	addeq	r1, r1, r5
 801d22e:	6021      	streq	r1, [r4, #0]
 801d230:	6054      	str	r4, [r2, #4]
 801d232:	e7ca      	b.n	801d1ca <_free_r+0x26>
 801d234:	b003      	add	sp, #12
 801d236:	bd30      	pop	{r4, r5, pc}
 801d238:	20000dbc 	.word	0x20000dbc

0801d23c <sbrk_aligned>:
 801d23c:	b570      	push	{r4, r5, r6, lr}
 801d23e:	4e0e      	ldr	r6, [pc, #56]	; (801d278 <sbrk_aligned+0x3c>)
 801d240:	460c      	mov	r4, r1
 801d242:	6831      	ldr	r1, [r6, #0]
 801d244:	4605      	mov	r5, r0
 801d246:	b911      	cbnz	r1, 801d24e <sbrk_aligned+0x12>
 801d248:	f000 f9f2 	bl	801d630 <_sbrk_r>
 801d24c:	6030      	str	r0, [r6, #0]
 801d24e:	4621      	mov	r1, r4
 801d250:	4628      	mov	r0, r5
 801d252:	f000 f9ed 	bl	801d630 <_sbrk_r>
 801d256:	1c43      	adds	r3, r0, #1
 801d258:	d00a      	beq.n	801d270 <sbrk_aligned+0x34>
 801d25a:	1cc4      	adds	r4, r0, #3
 801d25c:	f024 0403 	bic.w	r4, r4, #3
 801d260:	42a0      	cmp	r0, r4
 801d262:	d007      	beq.n	801d274 <sbrk_aligned+0x38>
 801d264:	1a21      	subs	r1, r4, r0
 801d266:	4628      	mov	r0, r5
 801d268:	f000 f9e2 	bl	801d630 <_sbrk_r>
 801d26c:	3001      	adds	r0, #1
 801d26e:	d101      	bne.n	801d274 <sbrk_aligned+0x38>
 801d270:	f04f 34ff 	mov.w	r4, #4294967295
 801d274:	4620      	mov	r0, r4
 801d276:	bd70      	pop	{r4, r5, r6, pc}
 801d278:	20000dc0 	.word	0x20000dc0

0801d27c <_malloc_r>:
 801d27c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d280:	1ccd      	adds	r5, r1, #3
 801d282:	f025 0503 	bic.w	r5, r5, #3
 801d286:	3508      	adds	r5, #8
 801d288:	2d0c      	cmp	r5, #12
 801d28a:	bf38      	it	cc
 801d28c:	250c      	movcc	r5, #12
 801d28e:	2d00      	cmp	r5, #0
 801d290:	4607      	mov	r7, r0
 801d292:	db01      	blt.n	801d298 <_malloc_r+0x1c>
 801d294:	42a9      	cmp	r1, r5
 801d296:	d905      	bls.n	801d2a4 <_malloc_r+0x28>
 801d298:	230c      	movs	r3, #12
 801d29a:	603b      	str	r3, [r7, #0]
 801d29c:	2600      	movs	r6, #0
 801d29e:	4630      	mov	r0, r6
 801d2a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d2a4:	4e2e      	ldr	r6, [pc, #184]	; (801d360 <_malloc_r+0xe4>)
 801d2a6:	f000 fa3f 	bl	801d728 <__malloc_lock>
 801d2aa:	6833      	ldr	r3, [r6, #0]
 801d2ac:	461c      	mov	r4, r3
 801d2ae:	bb34      	cbnz	r4, 801d2fe <_malloc_r+0x82>
 801d2b0:	4629      	mov	r1, r5
 801d2b2:	4638      	mov	r0, r7
 801d2b4:	f7ff ffc2 	bl	801d23c <sbrk_aligned>
 801d2b8:	1c43      	adds	r3, r0, #1
 801d2ba:	4604      	mov	r4, r0
 801d2bc:	d14d      	bne.n	801d35a <_malloc_r+0xde>
 801d2be:	6834      	ldr	r4, [r6, #0]
 801d2c0:	4626      	mov	r6, r4
 801d2c2:	2e00      	cmp	r6, #0
 801d2c4:	d140      	bne.n	801d348 <_malloc_r+0xcc>
 801d2c6:	6823      	ldr	r3, [r4, #0]
 801d2c8:	4631      	mov	r1, r6
 801d2ca:	4638      	mov	r0, r7
 801d2cc:	eb04 0803 	add.w	r8, r4, r3
 801d2d0:	f000 f9ae 	bl	801d630 <_sbrk_r>
 801d2d4:	4580      	cmp	r8, r0
 801d2d6:	d13a      	bne.n	801d34e <_malloc_r+0xd2>
 801d2d8:	6821      	ldr	r1, [r4, #0]
 801d2da:	3503      	adds	r5, #3
 801d2dc:	1a6d      	subs	r5, r5, r1
 801d2de:	f025 0503 	bic.w	r5, r5, #3
 801d2e2:	3508      	adds	r5, #8
 801d2e4:	2d0c      	cmp	r5, #12
 801d2e6:	bf38      	it	cc
 801d2e8:	250c      	movcc	r5, #12
 801d2ea:	4629      	mov	r1, r5
 801d2ec:	4638      	mov	r0, r7
 801d2ee:	f7ff ffa5 	bl	801d23c <sbrk_aligned>
 801d2f2:	3001      	adds	r0, #1
 801d2f4:	d02b      	beq.n	801d34e <_malloc_r+0xd2>
 801d2f6:	6823      	ldr	r3, [r4, #0]
 801d2f8:	442b      	add	r3, r5
 801d2fa:	6023      	str	r3, [r4, #0]
 801d2fc:	e00e      	b.n	801d31c <_malloc_r+0xa0>
 801d2fe:	6822      	ldr	r2, [r4, #0]
 801d300:	1b52      	subs	r2, r2, r5
 801d302:	d41e      	bmi.n	801d342 <_malloc_r+0xc6>
 801d304:	2a0b      	cmp	r2, #11
 801d306:	d916      	bls.n	801d336 <_malloc_r+0xba>
 801d308:	1961      	adds	r1, r4, r5
 801d30a:	42a3      	cmp	r3, r4
 801d30c:	6025      	str	r5, [r4, #0]
 801d30e:	bf18      	it	ne
 801d310:	6059      	strne	r1, [r3, #4]
 801d312:	6863      	ldr	r3, [r4, #4]
 801d314:	bf08      	it	eq
 801d316:	6031      	streq	r1, [r6, #0]
 801d318:	5162      	str	r2, [r4, r5]
 801d31a:	604b      	str	r3, [r1, #4]
 801d31c:	4638      	mov	r0, r7
 801d31e:	f104 060b 	add.w	r6, r4, #11
 801d322:	f000 fa07 	bl	801d734 <__malloc_unlock>
 801d326:	f026 0607 	bic.w	r6, r6, #7
 801d32a:	1d23      	adds	r3, r4, #4
 801d32c:	1af2      	subs	r2, r6, r3
 801d32e:	d0b6      	beq.n	801d29e <_malloc_r+0x22>
 801d330:	1b9b      	subs	r3, r3, r6
 801d332:	50a3      	str	r3, [r4, r2]
 801d334:	e7b3      	b.n	801d29e <_malloc_r+0x22>
 801d336:	6862      	ldr	r2, [r4, #4]
 801d338:	42a3      	cmp	r3, r4
 801d33a:	bf0c      	ite	eq
 801d33c:	6032      	streq	r2, [r6, #0]
 801d33e:	605a      	strne	r2, [r3, #4]
 801d340:	e7ec      	b.n	801d31c <_malloc_r+0xa0>
 801d342:	4623      	mov	r3, r4
 801d344:	6864      	ldr	r4, [r4, #4]
 801d346:	e7b2      	b.n	801d2ae <_malloc_r+0x32>
 801d348:	4634      	mov	r4, r6
 801d34a:	6876      	ldr	r6, [r6, #4]
 801d34c:	e7b9      	b.n	801d2c2 <_malloc_r+0x46>
 801d34e:	230c      	movs	r3, #12
 801d350:	603b      	str	r3, [r7, #0]
 801d352:	4638      	mov	r0, r7
 801d354:	f000 f9ee 	bl	801d734 <__malloc_unlock>
 801d358:	e7a1      	b.n	801d29e <_malloc_r+0x22>
 801d35a:	6025      	str	r5, [r4, #0]
 801d35c:	e7de      	b.n	801d31c <_malloc_r+0xa0>
 801d35e:	bf00      	nop
 801d360:	20000dbc 	.word	0x20000dbc

0801d364 <__ssputs_r>:
 801d364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d368:	688e      	ldr	r6, [r1, #8]
 801d36a:	429e      	cmp	r6, r3
 801d36c:	4682      	mov	sl, r0
 801d36e:	460c      	mov	r4, r1
 801d370:	4690      	mov	r8, r2
 801d372:	461f      	mov	r7, r3
 801d374:	d838      	bhi.n	801d3e8 <__ssputs_r+0x84>
 801d376:	898a      	ldrh	r2, [r1, #12]
 801d378:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801d37c:	d032      	beq.n	801d3e4 <__ssputs_r+0x80>
 801d37e:	6825      	ldr	r5, [r4, #0]
 801d380:	6909      	ldr	r1, [r1, #16]
 801d382:	eba5 0901 	sub.w	r9, r5, r1
 801d386:	6965      	ldr	r5, [r4, #20]
 801d388:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d38c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d390:	3301      	adds	r3, #1
 801d392:	444b      	add	r3, r9
 801d394:	106d      	asrs	r5, r5, #1
 801d396:	429d      	cmp	r5, r3
 801d398:	bf38      	it	cc
 801d39a:	461d      	movcc	r5, r3
 801d39c:	0553      	lsls	r3, r2, #21
 801d39e:	d531      	bpl.n	801d404 <__ssputs_r+0xa0>
 801d3a0:	4629      	mov	r1, r5
 801d3a2:	f7ff ff6b 	bl	801d27c <_malloc_r>
 801d3a6:	4606      	mov	r6, r0
 801d3a8:	b950      	cbnz	r0, 801d3c0 <__ssputs_r+0x5c>
 801d3aa:	230c      	movs	r3, #12
 801d3ac:	f8ca 3000 	str.w	r3, [sl]
 801d3b0:	89a3      	ldrh	r3, [r4, #12]
 801d3b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d3b6:	81a3      	strh	r3, [r4, #12]
 801d3b8:	f04f 30ff 	mov.w	r0, #4294967295
 801d3bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d3c0:	6921      	ldr	r1, [r4, #16]
 801d3c2:	464a      	mov	r2, r9
 801d3c4:	f7ff fa08 	bl	801c7d8 <memcpy>
 801d3c8:	89a3      	ldrh	r3, [r4, #12]
 801d3ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801d3ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d3d2:	81a3      	strh	r3, [r4, #12]
 801d3d4:	6126      	str	r6, [r4, #16]
 801d3d6:	6165      	str	r5, [r4, #20]
 801d3d8:	444e      	add	r6, r9
 801d3da:	eba5 0509 	sub.w	r5, r5, r9
 801d3de:	6026      	str	r6, [r4, #0]
 801d3e0:	60a5      	str	r5, [r4, #8]
 801d3e2:	463e      	mov	r6, r7
 801d3e4:	42be      	cmp	r6, r7
 801d3e6:	d900      	bls.n	801d3ea <__ssputs_r+0x86>
 801d3e8:	463e      	mov	r6, r7
 801d3ea:	6820      	ldr	r0, [r4, #0]
 801d3ec:	4632      	mov	r2, r6
 801d3ee:	4641      	mov	r1, r8
 801d3f0:	f000 f980 	bl	801d6f4 <memmove>
 801d3f4:	68a3      	ldr	r3, [r4, #8]
 801d3f6:	1b9b      	subs	r3, r3, r6
 801d3f8:	60a3      	str	r3, [r4, #8]
 801d3fa:	6823      	ldr	r3, [r4, #0]
 801d3fc:	4433      	add	r3, r6
 801d3fe:	6023      	str	r3, [r4, #0]
 801d400:	2000      	movs	r0, #0
 801d402:	e7db      	b.n	801d3bc <__ssputs_r+0x58>
 801d404:	462a      	mov	r2, r5
 801d406:	f000 f99b 	bl	801d740 <_realloc_r>
 801d40a:	4606      	mov	r6, r0
 801d40c:	2800      	cmp	r0, #0
 801d40e:	d1e1      	bne.n	801d3d4 <__ssputs_r+0x70>
 801d410:	6921      	ldr	r1, [r4, #16]
 801d412:	4650      	mov	r0, sl
 801d414:	f7ff fec6 	bl	801d1a4 <_free_r>
 801d418:	e7c7      	b.n	801d3aa <__ssputs_r+0x46>
	...

0801d41c <_svfiprintf_r>:
 801d41c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d420:	4698      	mov	r8, r3
 801d422:	898b      	ldrh	r3, [r1, #12]
 801d424:	061b      	lsls	r3, r3, #24
 801d426:	b09d      	sub	sp, #116	; 0x74
 801d428:	4607      	mov	r7, r0
 801d42a:	460d      	mov	r5, r1
 801d42c:	4614      	mov	r4, r2
 801d42e:	d50e      	bpl.n	801d44e <_svfiprintf_r+0x32>
 801d430:	690b      	ldr	r3, [r1, #16]
 801d432:	b963      	cbnz	r3, 801d44e <_svfiprintf_r+0x32>
 801d434:	2140      	movs	r1, #64	; 0x40
 801d436:	f7ff ff21 	bl	801d27c <_malloc_r>
 801d43a:	6028      	str	r0, [r5, #0]
 801d43c:	6128      	str	r0, [r5, #16]
 801d43e:	b920      	cbnz	r0, 801d44a <_svfiprintf_r+0x2e>
 801d440:	230c      	movs	r3, #12
 801d442:	603b      	str	r3, [r7, #0]
 801d444:	f04f 30ff 	mov.w	r0, #4294967295
 801d448:	e0d1      	b.n	801d5ee <_svfiprintf_r+0x1d2>
 801d44a:	2340      	movs	r3, #64	; 0x40
 801d44c:	616b      	str	r3, [r5, #20]
 801d44e:	2300      	movs	r3, #0
 801d450:	9309      	str	r3, [sp, #36]	; 0x24
 801d452:	2320      	movs	r3, #32
 801d454:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d458:	f8cd 800c 	str.w	r8, [sp, #12]
 801d45c:	2330      	movs	r3, #48	; 0x30
 801d45e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801d608 <_svfiprintf_r+0x1ec>
 801d462:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d466:	f04f 0901 	mov.w	r9, #1
 801d46a:	4623      	mov	r3, r4
 801d46c:	469a      	mov	sl, r3
 801d46e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d472:	b10a      	cbz	r2, 801d478 <_svfiprintf_r+0x5c>
 801d474:	2a25      	cmp	r2, #37	; 0x25
 801d476:	d1f9      	bne.n	801d46c <_svfiprintf_r+0x50>
 801d478:	ebba 0b04 	subs.w	fp, sl, r4
 801d47c:	d00b      	beq.n	801d496 <_svfiprintf_r+0x7a>
 801d47e:	465b      	mov	r3, fp
 801d480:	4622      	mov	r2, r4
 801d482:	4629      	mov	r1, r5
 801d484:	4638      	mov	r0, r7
 801d486:	f7ff ff6d 	bl	801d364 <__ssputs_r>
 801d48a:	3001      	adds	r0, #1
 801d48c:	f000 80aa 	beq.w	801d5e4 <_svfiprintf_r+0x1c8>
 801d490:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d492:	445a      	add	r2, fp
 801d494:	9209      	str	r2, [sp, #36]	; 0x24
 801d496:	f89a 3000 	ldrb.w	r3, [sl]
 801d49a:	2b00      	cmp	r3, #0
 801d49c:	f000 80a2 	beq.w	801d5e4 <_svfiprintf_r+0x1c8>
 801d4a0:	2300      	movs	r3, #0
 801d4a2:	f04f 32ff 	mov.w	r2, #4294967295
 801d4a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d4aa:	f10a 0a01 	add.w	sl, sl, #1
 801d4ae:	9304      	str	r3, [sp, #16]
 801d4b0:	9307      	str	r3, [sp, #28]
 801d4b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d4b6:	931a      	str	r3, [sp, #104]	; 0x68
 801d4b8:	4654      	mov	r4, sl
 801d4ba:	2205      	movs	r2, #5
 801d4bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d4c0:	4851      	ldr	r0, [pc, #324]	; (801d608 <_svfiprintf_r+0x1ec>)
 801d4c2:	f7fb fabd 	bl	8018a40 <memchr>
 801d4c6:	9a04      	ldr	r2, [sp, #16]
 801d4c8:	b9d8      	cbnz	r0, 801d502 <_svfiprintf_r+0xe6>
 801d4ca:	06d0      	lsls	r0, r2, #27
 801d4cc:	bf44      	itt	mi
 801d4ce:	2320      	movmi	r3, #32
 801d4d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d4d4:	0711      	lsls	r1, r2, #28
 801d4d6:	bf44      	itt	mi
 801d4d8:	232b      	movmi	r3, #43	; 0x2b
 801d4da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d4de:	f89a 3000 	ldrb.w	r3, [sl]
 801d4e2:	2b2a      	cmp	r3, #42	; 0x2a
 801d4e4:	d015      	beq.n	801d512 <_svfiprintf_r+0xf6>
 801d4e6:	9a07      	ldr	r2, [sp, #28]
 801d4e8:	4654      	mov	r4, sl
 801d4ea:	2000      	movs	r0, #0
 801d4ec:	f04f 0c0a 	mov.w	ip, #10
 801d4f0:	4621      	mov	r1, r4
 801d4f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d4f6:	3b30      	subs	r3, #48	; 0x30
 801d4f8:	2b09      	cmp	r3, #9
 801d4fa:	d94e      	bls.n	801d59a <_svfiprintf_r+0x17e>
 801d4fc:	b1b0      	cbz	r0, 801d52c <_svfiprintf_r+0x110>
 801d4fe:	9207      	str	r2, [sp, #28]
 801d500:	e014      	b.n	801d52c <_svfiprintf_r+0x110>
 801d502:	eba0 0308 	sub.w	r3, r0, r8
 801d506:	fa09 f303 	lsl.w	r3, r9, r3
 801d50a:	4313      	orrs	r3, r2
 801d50c:	9304      	str	r3, [sp, #16]
 801d50e:	46a2      	mov	sl, r4
 801d510:	e7d2      	b.n	801d4b8 <_svfiprintf_r+0x9c>
 801d512:	9b03      	ldr	r3, [sp, #12]
 801d514:	1d19      	adds	r1, r3, #4
 801d516:	681b      	ldr	r3, [r3, #0]
 801d518:	9103      	str	r1, [sp, #12]
 801d51a:	2b00      	cmp	r3, #0
 801d51c:	bfbb      	ittet	lt
 801d51e:	425b      	neglt	r3, r3
 801d520:	f042 0202 	orrlt.w	r2, r2, #2
 801d524:	9307      	strge	r3, [sp, #28]
 801d526:	9307      	strlt	r3, [sp, #28]
 801d528:	bfb8      	it	lt
 801d52a:	9204      	strlt	r2, [sp, #16]
 801d52c:	7823      	ldrb	r3, [r4, #0]
 801d52e:	2b2e      	cmp	r3, #46	; 0x2e
 801d530:	d10c      	bne.n	801d54c <_svfiprintf_r+0x130>
 801d532:	7863      	ldrb	r3, [r4, #1]
 801d534:	2b2a      	cmp	r3, #42	; 0x2a
 801d536:	d135      	bne.n	801d5a4 <_svfiprintf_r+0x188>
 801d538:	9b03      	ldr	r3, [sp, #12]
 801d53a:	1d1a      	adds	r2, r3, #4
 801d53c:	681b      	ldr	r3, [r3, #0]
 801d53e:	9203      	str	r2, [sp, #12]
 801d540:	2b00      	cmp	r3, #0
 801d542:	bfb8      	it	lt
 801d544:	f04f 33ff 	movlt.w	r3, #4294967295
 801d548:	3402      	adds	r4, #2
 801d54a:	9305      	str	r3, [sp, #20]
 801d54c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801d618 <_svfiprintf_r+0x1fc>
 801d550:	7821      	ldrb	r1, [r4, #0]
 801d552:	2203      	movs	r2, #3
 801d554:	4650      	mov	r0, sl
 801d556:	f7fb fa73 	bl	8018a40 <memchr>
 801d55a:	b140      	cbz	r0, 801d56e <_svfiprintf_r+0x152>
 801d55c:	2340      	movs	r3, #64	; 0x40
 801d55e:	eba0 000a 	sub.w	r0, r0, sl
 801d562:	fa03 f000 	lsl.w	r0, r3, r0
 801d566:	9b04      	ldr	r3, [sp, #16]
 801d568:	4303      	orrs	r3, r0
 801d56a:	3401      	adds	r4, #1
 801d56c:	9304      	str	r3, [sp, #16]
 801d56e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d572:	4826      	ldr	r0, [pc, #152]	; (801d60c <_svfiprintf_r+0x1f0>)
 801d574:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d578:	2206      	movs	r2, #6
 801d57a:	f7fb fa61 	bl	8018a40 <memchr>
 801d57e:	2800      	cmp	r0, #0
 801d580:	d038      	beq.n	801d5f4 <_svfiprintf_r+0x1d8>
 801d582:	4b23      	ldr	r3, [pc, #140]	; (801d610 <_svfiprintf_r+0x1f4>)
 801d584:	bb1b      	cbnz	r3, 801d5ce <_svfiprintf_r+0x1b2>
 801d586:	9b03      	ldr	r3, [sp, #12]
 801d588:	3307      	adds	r3, #7
 801d58a:	f023 0307 	bic.w	r3, r3, #7
 801d58e:	3308      	adds	r3, #8
 801d590:	9303      	str	r3, [sp, #12]
 801d592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d594:	4433      	add	r3, r6
 801d596:	9309      	str	r3, [sp, #36]	; 0x24
 801d598:	e767      	b.n	801d46a <_svfiprintf_r+0x4e>
 801d59a:	fb0c 3202 	mla	r2, ip, r2, r3
 801d59e:	460c      	mov	r4, r1
 801d5a0:	2001      	movs	r0, #1
 801d5a2:	e7a5      	b.n	801d4f0 <_svfiprintf_r+0xd4>
 801d5a4:	2300      	movs	r3, #0
 801d5a6:	3401      	adds	r4, #1
 801d5a8:	9305      	str	r3, [sp, #20]
 801d5aa:	4619      	mov	r1, r3
 801d5ac:	f04f 0c0a 	mov.w	ip, #10
 801d5b0:	4620      	mov	r0, r4
 801d5b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d5b6:	3a30      	subs	r2, #48	; 0x30
 801d5b8:	2a09      	cmp	r2, #9
 801d5ba:	d903      	bls.n	801d5c4 <_svfiprintf_r+0x1a8>
 801d5bc:	2b00      	cmp	r3, #0
 801d5be:	d0c5      	beq.n	801d54c <_svfiprintf_r+0x130>
 801d5c0:	9105      	str	r1, [sp, #20]
 801d5c2:	e7c3      	b.n	801d54c <_svfiprintf_r+0x130>
 801d5c4:	fb0c 2101 	mla	r1, ip, r1, r2
 801d5c8:	4604      	mov	r4, r0
 801d5ca:	2301      	movs	r3, #1
 801d5cc:	e7f0      	b.n	801d5b0 <_svfiprintf_r+0x194>
 801d5ce:	ab03      	add	r3, sp, #12
 801d5d0:	9300      	str	r3, [sp, #0]
 801d5d2:	462a      	mov	r2, r5
 801d5d4:	4b0f      	ldr	r3, [pc, #60]	; (801d614 <_svfiprintf_r+0x1f8>)
 801d5d6:	a904      	add	r1, sp, #16
 801d5d8:	4638      	mov	r0, r7
 801d5da:	f7fc fa3d 	bl	8019a58 <_printf_float>
 801d5de:	1c42      	adds	r2, r0, #1
 801d5e0:	4606      	mov	r6, r0
 801d5e2:	d1d6      	bne.n	801d592 <_svfiprintf_r+0x176>
 801d5e4:	89ab      	ldrh	r3, [r5, #12]
 801d5e6:	065b      	lsls	r3, r3, #25
 801d5e8:	f53f af2c 	bmi.w	801d444 <_svfiprintf_r+0x28>
 801d5ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d5ee:	b01d      	add	sp, #116	; 0x74
 801d5f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d5f4:	ab03      	add	r3, sp, #12
 801d5f6:	9300      	str	r3, [sp, #0]
 801d5f8:	462a      	mov	r2, r5
 801d5fa:	4b06      	ldr	r3, [pc, #24]	; (801d614 <_svfiprintf_r+0x1f8>)
 801d5fc:	a904      	add	r1, sp, #16
 801d5fe:	4638      	mov	r0, r7
 801d600:	f7fc fcce 	bl	8019fa0 <_printf_i>
 801d604:	e7eb      	b.n	801d5de <_svfiprintf_r+0x1c2>
 801d606:	bf00      	nop
 801d608:	08052604 	.word	0x08052604
 801d60c:	0805260e 	.word	0x0805260e
 801d610:	08019a59 	.word	0x08019a59
 801d614:	0801d365 	.word	0x0801d365
 801d618:	0805260a 	.word	0x0805260a
 801d61c:	00000000 	.word	0x00000000

0801d620 <nan>:
 801d620:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801d628 <nan+0x8>
 801d624:	4770      	bx	lr
 801d626:	bf00      	nop
 801d628:	00000000 	.word	0x00000000
 801d62c:	7ff80000 	.word	0x7ff80000

0801d630 <_sbrk_r>:
 801d630:	b538      	push	{r3, r4, r5, lr}
 801d632:	4d06      	ldr	r5, [pc, #24]	; (801d64c <_sbrk_r+0x1c>)
 801d634:	2300      	movs	r3, #0
 801d636:	4604      	mov	r4, r0
 801d638:	4608      	mov	r0, r1
 801d63a:	602b      	str	r3, [r5, #0]
 801d63c:	f7e8 fdea 	bl	8006214 <_sbrk>
 801d640:	1c43      	adds	r3, r0, #1
 801d642:	d102      	bne.n	801d64a <_sbrk_r+0x1a>
 801d644:	682b      	ldr	r3, [r5, #0]
 801d646:	b103      	cbz	r3, 801d64a <_sbrk_r+0x1a>
 801d648:	6023      	str	r3, [r4, #0]
 801d64a:	bd38      	pop	{r3, r4, r5, pc}
 801d64c:	20000dc4 	.word	0x20000dc4

0801d650 <strncmp>:
 801d650:	b510      	push	{r4, lr}
 801d652:	b17a      	cbz	r2, 801d674 <strncmp+0x24>
 801d654:	4603      	mov	r3, r0
 801d656:	3901      	subs	r1, #1
 801d658:	1884      	adds	r4, r0, r2
 801d65a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801d65e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801d662:	4290      	cmp	r0, r2
 801d664:	d101      	bne.n	801d66a <strncmp+0x1a>
 801d666:	42a3      	cmp	r3, r4
 801d668:	d101      	bne.n	801d66e <strncmp+0x1e>
 801d66a:	1a80      	subs	r0, r0, r2
 801d66c:	bd10      	pop	{r4, pc}
 801d66e:	2800      	cmp	r0, #0
 801d670:	d1f3      	bne.n	801d65a <strncmp+0xa>
 801d672:	e7fa      	b.n	801d66a <strncmp+0x1a>
 801d674:	4610      	mov	r0, r2
 801d676:	e7f9      	b.n	801d66c <strncmp+0x1c>

0801d678 <__ascii_wctomb>:
 801d678:	b149      	cbz	r1, 801d68e <__ascii_wctomb+0x16>
 801d67a:	2aff      	cmp	r2, #255	; 0xff
 801d67c:	bf85      	ittet	hi
 801d67e:	238a      	movhi	r3, #138	; 0x8a
 801d680:	6003      	strhi	r3, [r0, #0]
 801d682:	700a      	strbls	r2, [r1, #0]
 801d684:	f04f 30ff 	movhi.w	r0, #4294967295
 801d688:	bf98      	it	ls
 801d68a:	2001      	movls	r0, #1
 801d68c:	4770      	bx	lr
 801d68e:	4608      	mov	r0, r1
 801d690:	4770      	bx	lr
	...

0801d694 <__assert_func>:
 801d694:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d696:	4614      	mov	r4, r2
 801d698:	461a      	mov	r2, r3
 801d69a:	4b09      	ldr	r3, [pc, #36]	; (801d6c0 <__assert_func+0x2c>)
 801d69c:	681b      	ldr	r3, [r3, #0]
 801d69e:	4605      	mov	r5, r0
 801d6a0:	68d8      	ldr	r0, [r3, #12]
 801d6a2:	b14c      	cbz	r4, 801d6b8 <__assert_func+0x24>
 801d6a4:	4b07      	ldr	r3, [pc, #28]	; (801d6c4 <__assert_func+0x30>)
 801d6a6:	9100      	str	r1, [sp, #0]
 801d6a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d6ac:	4906      	ldr	r1, [pc, #24]	; (801d6c8 <__assert_func+0x34>)
 801d6ae:	462b      	mov	r3, r5
 801d6b0:	f000 f80e 	bl	801d6d0 <fiprintf>
 801d6b4:	f000 fa8c 	bl	801dbd0 <abort>
 801d6b8:	4b04      	ldr	r3, [pc, #16]	; (801d6cc <__assert_func+0x38>)
 801d6ba:	461c      	mov	r4, r3
 801d6bc:	e7f3      	b.n	801d6a6 <__assert_func+0x12>
 801d6be:	bf00      	nop
 801d6c0:	20000064 	.word	0x20000064
 801d6c4:	08052615 	.word	0x08052615
 801d6c8:	08052622 	.word	0x08052622
 801d6cc:	08052650 	.word	0x08052650

0801d6d0 <fiprintf>:
 801d6d0:	b40e      	push	{r1, r2, r3}
 801d6d2:	b503      	push	{r0, r1, lr}
 801d6d4:	4601      	mov	r1, r0
 801d6d6:	ab03      	add	r3, sp, #12
 801d6d8:	4805      	ldr	r0, [pc, #20]	; (801d6f0 <fiprintf+0x20>)
 801d6da:	f853 2b04 	ldr.w	r2, [r3], #4
 801d6de:	6800      	ldr	r0, [r0, #0]
 801d6e0:	9301      	str	r3, [sp, #4]
 801d6e2:	f000 f885 	bl	801d7f0 <_vfiprintf_r>
 801d6e6:	b002      	add	sp, #8
 801d6e8:	f85d eb04 	ldr.w	lr, [sp], #4
 801d6ec:	b003      	add	sp, #12
 801d6ee:	4770      	bx	lr
 801d6f0:	20000064 	.word	0x20000064

0801d6f4 <memmove>:
 801d6f4:	4288      	cmp	r0, r1
 801d6f6:	b510      	push	{r4, lr}
 801d6f8:	eb01 0402 	add.w	r4, r1, r2
 801d6fc:	d902      	bls.n	801d704 <memmove+0x10>
 801d6fe:	4284      	cmp	r4, r0
 801d700:	4623      	mov	r3, r4
 801d702:	d807      	bhi.n	801d714 <memmove+0x20>
 801d704:	1e43      	subs	r3, r0, #1
 801d706:	42a1      	cmp	r1, r4
 801d708:	d008      	beq.n	801d71c <memmove+0x28>
 801d70a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d70e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d712:	e7f8      	b.n	801d706 <memmove+0x12>
 801d714:	4402      	add	r2, r0
 801d716:	4601      	mov	r1, r0
 801d718:	428a      	cmp	r2, r1
 801d71a:	d100      	bne.n	801d71e <memmove+0x2a>
 801d71c:	bd10      	pop	{r4, pc}
 801d71e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d722:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d726:	e7f7      	b.n	801d718 <memmove+0x24>

0801d728 <__malloc_lock>:
 801d728:	4801      	ldr	r0, [pc, #4]	; (801d730 <__malloc_lock+0x8>)
 801d72a:	f000 bc11 	b.w	801df50 <__retarget_lock_acquire_recursive>
 801d72e:	bf00      	nop
 801d730:	20000dc8 	.word	0x20000dc8

0801d734 <__malloc_unlock>:
 801d734:	4801      	ldr	r0, [pc, #4]	; (801d73c <__malloc_unlock+0x8>)
 801d736:	f000 bc0c 	b.w	801df52 <__retarget_lock_release_recursive>
 801d73a:	bf00      	nop
 801d73c:	20000dc8 	.word	0x20000dc8

0801d740 <_realloc_r>:
 801d740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d744:	4680      	mov	r8, r0
 801d746:	4614      	mov	r4, r2
 801d748:	460e      	mov	r6, r1
 801d74a:	b921      	cbnz	r1, 801d756 <_realloc_r+0x16>
 801d74c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d750:	4611      	mov	r1, r2
 801d752:	f7ff bd93 	b.w	801d27c <_malloc_r>
 801d756:	b92a      	cbnz	r2, 801d764 <_realloc_r+0x24>
 801d758:	f7ff fd24 	bl	801d1a4 <_free_r>
 801d75c:	4625      	mov	r5, r4
 801d75e:	4628      	mov	r0, r5
 801d760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d764:	f000 fc5c 	bl	801e020 <_malloc_usable_size_r>
 801d768:	4284      	cmp	r4, r0
 801d76a:	4607      	mov	r7, r0
 801d76c:	d802      	bhi.n	801d774 <_realloc_r+0x34>
 801d76e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801d772:	d812      	bhi.n	801d79a <_realloc_r+0x5a>
 801d774:	4621      	mov	r1, r4
 801d776:	4640      	mov	r0, r8
 801d778:	f7ff fd80 	bl	801d27c <_malloc_r>
 801d77c:	4605      	mov	r5, r0
 801d77e:	2800      	cmp	r0, #0
 801d780:	d0ed      	beq.n	801d75e <_realloc_r+0x1e>
 801d782:	42bc      	cmp	r4, r7
 801d784:	4622      	mov	r2, r4
 801d786:	4631      	mov	r1, r6
 801d788:	bf28      	it	cs
 801d78a:	463a      	movcs	r2, r7
 801d78c:	f7ff f824 	bl	801c7d8 <memcpy>
 801d790:	4631      	mov	r1, r6
 801d792:	4640      	mov	r0, r8
 801d794:	f7ff fd06 	bl	801d1a4 <_free_r>
 801d798:	e7e1      	b.n	801d75e <_realloc_r+0x1e>
 801d79a:	4635      	mov	r5, r6
 801d79c:	e7df      	b.n	801d75e <_realloc_r+0x1e>

0801d79e <__sfputc_r>:
 801d79e:	6893      	ldr	r3, [r2, #8]
 801d7a0:	3b01      	subs	r3, #1
 801d7a2:	2b00      	cmp	r3, #0
 801d7a4:	b410      	push	{r4}
 801d7a6:	6093      	str	r3, [r2, #8]
 801d7a8:	da08      	bge.n	801d7bc <__sfputc_r+0x1e>
 801d7aa:	6994      	ldr	r4, [r2, #24]
 801d7ac:	42a3      	cmp	r3, r4
 801d7ae:	db01      	blt.n	801d7b4 <__sfputc_r+0x16>
 801d7b0:	290a      	cmp	r1, #10
 801d7b2:	d103      	bne.n	801d7bc <__sfputc_r+0x1e>
 801d7b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d7b8:	f000 b94a 	b.w	801da50 <__swbuf_r>
 801d7bc:	6813      	ldr	r3, [r2, #0]
 801d7be:	1c58      	adds	r0, r3, #1
 801d7c0:	6010      	str	r0, [r2, #0]
 801d7c2:	7019      	strb	r1, [r3, #0]
 801d7c4:	4608      	mov	r0, r1
 801d7c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d7ca:	4770      	bx	lr

0801d7cc <__sfputs_r>:
 801d7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d7ce:	4606      	mov	r6, r0
 801d7d0:	460f      	mov	r7, r1
 801d7d2:	4614      	mov	r4, r2
 801d7d4:	18d5      	adds	r5, r2, r3
 801d7d6:	42ac      	cmp	r4, r5
 801d7d8:	d101      	bne.n	801d7de <__sfputs_r+0x12>
 801d7da:	2000      	movs	r0, #0
 801d7dc:	e007      	b.n	801d7ee <__sfputs_r+0x22>
 801d7de:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d7e2:	463a      	mov	r2, r7
 801d7e4:	4630      	mov	r0, r6
 801d7e6:	f7ff ffda 	bl	801d79e <__sfputc_r>
 801d7ea:	1c43      	adds	r3, r0, #1
 801d7ec:	d1f3      	bne.n	801d7d6 <__sfputs_r+0xa>
 801d7ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801d7f0 <_vfiprintf_r>:
 801d7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7f4:	460d      	mov	r5, r1
 801d7f6:	b09d      	sub	sp, #116	; 0x74
 801d7f8:	4614      	mov	r4, r2
 801d7fa:	4698      	mov	r8, r3
 801d7fc:	4606      	mov	r6, r0
 801d7fe:	b118      	cbz	r0, 801d808 <_vfiprintf_r+0x18>
 801d800:	6983      	ldr	r3, [r0, #24]
 801d802:	b90b      	cbnz	r3, 801d808 <_vfiprintf_r+0x18>
 801d804:	f000 fb06 	bl	801de14 <__sinit>
 801d808:	4b89      	ldr	r3, [pc, #548]	; (801da30 <_vfiprintf_r+0x240>)
 801d80a:	429d      	cmp	r5, r3
 801d80c:	d11b      	bne.n	801d846 <_vfiprintf_r+0x56>
 801d80e:	6875      	ldr	r5, [r6, #4]
 801d810:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d812:	07d9      	lsls	r1, r3, #31
 801d814:	d405      	bmi.n	801d822 <_vfiprintf_r+0x32>
 801d816:	89ab      	ldrh	r3, [r5, #12]
 801d818:	059a      	lsls	r2, r3, #22
 801d81a:	d402      	bmi.n	801d822 <_vfiprintf_r+0x32>
 801d81c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d81e:	f000 fb97 	bl	801df50 <__retarget_lock_acquire_recursive>
 801d822:	89ab      	ldrh	r3, [r5, #12]
 801d824:	071b      	lsls	r3, r3, #28
 801d826:	d501      	bpl.n	801d82c <_vfiprintf_r+0x3c>
 801d828:	692b      	ldr	r3, [r5, #16]
 801d82a:	b9eb      	cbnz	r3, 801d868 <_vfiprintf_r+0x78>
 801d82c:	4629      	mov	r1, r5
 801d82e:	4630      	mov	r0, r6
 801d830:	f000 f960 	bl	801daf4 <__swsetup_r>
 801d834:	b1c0      	cbz	r0, 801d868 <_vfiprintf_r+0x78>
 801d836:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d838:	07dc      	lsls	r4, r3, #31
 801d83a:	d50e      	bpl.n	801d85a <_vfiprintf_r+0x6a>
 801d83c:	f04f 30ff 	mov.w	r0, #4294967295
 801d840:	b01d      	add	sp, #116	; 0x74
 801d842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d846:	4b7b      	ldr	r3, [pc, #492]	; (801da34 <_vfiprintf_r+0x244>)
 801d848:	429d      	cmp	r5, r3
 801d84a:	d101      	bne.n	801d850 <_vfiprintf_r+0x60>
 801d84c:	68b5      	ldr	r5, [r6, #8]
 801d84e:	e7df      	b.n	801d810 <_vfiprintf_r+0x20>
 801d850:	4b79      	ldr	r3, [pc, #484]	; (801da38 <_vfiprintf_r+0x248>)
 801d852:	429d      	cmp	r5, r3
 801d854:	bf08      	it	eq
 801d856:	68f5      	ldreq	r5, [r6, #12]
 801d858:	e7da      	b.n	801d810 <_vfiprintf_r+0x20>
 801d85a:	89ab      	ldrh	r3, [r5, #12]
 801d85c:	0598      	lsls	r0, r3, #22
 801d85e:	d4ed      	bmi.n	801d83c <_vfiprintf_r+0x4c>
 801d860:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d862:	f000 fb76 	bl	801df52 <__retarget_lock_release_recursive>
 801d866:	e7e9      	b.n	801d83c <_vfiprintf_r+0x4c>
 801d868:	2300      	movs	r3, #0
 801d86a:	9309      	str	r3, [sp, #36]	; 0x24
 801d86c:	2320      	movs	r3, #32
 801d86e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d872:	f8cd 800c 	str.w	r8, [sp, #12]
 801d876:	2330      	movs	r3, #48	; 0x30
 801d878:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801da3c <_vfiprintf_r+0x24c>
 801d87c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d880:	f04f 0901 	mov.w	r9, #1
 801d884:	4623      	mov	r3, r4
 801d886:	469a      	mov	sl, r3
 801d888:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d88c:	b10a      	cbz	r2, 801d892 <_vfiprintf_r+0xa2>
 801d88e:	2a25      	cmp	r2, #37	; 0x25
 801d890:	d1f9      	bne.n	801d886 <_vfiprintf_r+0x96>
 801d892:	ebba 0b04 	subs.w	fp, sl, r4
 801d896:	d00b      	beq.n	801d8b0 <_vfiprintf_r+0xc0>
 801d898:	465b      	mov	r3, fp
 801d89a:	4622      	mov	r2, r4
 801d89c:	4629      	mov	r1, r5
 801d89e:	4630      	mov	r0, r6
 801d8a0:	f7ff ff94 	bl	801d7cc <__sfputs_r>
 801d8a4:	3001      	adds	r0, #1
 801d8a6:	f000 80aa 	beq.w	801d9fe <_vfiprintf_r+0x20e>
 801d8aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d8ac:	445a      	add	r2, fp
 801d8ae:	9209      	str	r2, [sp, #36]	; 0x24
 801d8b0:	f89a 3000 	ldrb.w	r3, [sl]
 801d8b4:	2b00      	cmp	r3, #0
 801d8b6:	f000 80a2 	beq.w	801d9fe <_vfiprintf_r+0x20e>
 801d8ba:	2300      	movs	r3, #0
 801d8bc:	f04f 32ff 	mov.w	r2, #4294967295
 801d8c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d8c4:	f10a 0a01 	add.w	sl, sl, #1
 801d8c8:	9304      	str	r3, [sp, #16]
 801d8ca:	9307      	str	r3, [sp, #28]
 801d8cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d8d0:	931a      	str	r3, [sp, #104]	; 0x68
 801d8d2:	4654      	mov	r4, sl
 801d8d4:	2205      	movs	r2, #5
 801d8d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d8da:	4858      	ldr	r0, [pc, #352]	; (801da3c <_vfiprintf_r+0x24c>)
 801d8dc:	f7fb f8b0 	bl	8018a40 <memchr>
 801d8e0:	9a04      	ldr	r2, [sp, #16]
 801d8e2:	b9d8      	cbnz	r0, 801d91c <_vfiprintf_r+0x12c>
 801d8e4:	06d1      	lsls	r1, r2, #27
 801d8e6:	bf44      	itt	mi
 801d8e8:	2320      	movmi	r3, #32
 801d8ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d8ee:	0713      	lsls	r3, r2, #28
 801d8f0:	bf44      	itt	mi
 801d8f2:	232b      	movmi	r3, #43	; 0x2b
 801d8f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d8f8:	f89a 3000 	ldrb.w	r3, [sl]
 801d8fc:	2b2a      	cmp	r3, #42	; 0x2a
 801d8fe:	d015      	beq.n	801d92c <_vfiprintf_r+0x13c>
 801d900:	9a07      	ldr	r2, [sp, #28]
 801d902:	4654      	mov	r4, sl
 801d904:	2000      	movs	r0, #0
 801d906:	f04f 0c0a 	mov.w	ip, #10
 801d90a:	4621      	mov	r1, r4
 801d90c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d910:	3b30      	subs	r3, #48	; 0x30
 801d912:	2b09      	cmp	r3, #9
 801d914:	d94e      	bls.n	801d9b4 <_vfiprintf_r+0x1c4>
 801d916:	b1b0      	cbz	r0, 801d946 <_vfiprintf_r+0x156>
 801d918:	9207      	str	r2, [sp, #28]
 801d91a:	e014      	b.n	801d946 <_vfiprintf_r+0x156>
 801d91c:	eba0 0308 	sub.w	r3, r0, r8
 801d920:	fa09 f303 	lsl.w	r3, r9, r3
 801d924:	4313      	orrs	r3, r2
 801d926:	9304      	str	r3, [sp, #16]
 801d928:	46a2      	mov	sl, r4
 801d92a:	e7d2      	b.n	801d8d2 <_vfiprintf_r+0xe2>
 801d92c:	9b03      	ldr	r3, [sp, #12]
 801d92e:	1d19      	adds	r1, r3, #4
 801d930:	681b      	ldr	r3, [r3, #0]
 801d932:	9103      	str	r1, [sp, #12]
 801d934:	2b00      	cmp	r3, #0
 801d936:	bfbb      	ittet	lt
 801d938:	425b      	neglt	r3, r3
 801d93a:	f042 0202 	orrlt.w	r2, r2, #2
 801d93e:	9307      	strge	r3, [sp, #28]
 801d940:	9307      	strlt	r3, [sp, #28]
 801d942:	bfb8      	it	lt
 801d944:	9204      	strlt	r2, [sp, #16]
 801d946:	7823      	ldrb	r3, [r4, #0]
 801d948:	2b2e      	cmp	r3, #46	; 0x2e
 801d94a:	d10c      	bne.n	801d966 <_vfiprintf_r+0x176>
 801d94c:	7863      	ldrb	r3, [r4, #1]
 801d94e:	2b2a      	cmp	r3, #42	; 0x2a
 801d950:	d135      	bne.n	801d9be <_vfiprintf_r+0x1ce>
 801d952:	9b03      	ldr	r3, [sp, #12]
 801d954:	1d1a      	adds	r2, r3, #4
 801d956:	681b      	ldr	r3, [r3, #0]
 801d958:	9203      	str	r2, [sp, #12]
 801d95a:	2b00      	cmp	r3, #0
 801d95c:	bfb8      	it	lt
 801d95e:	f04f 33ff 	movlt.w	r3, #4294967295
 801d962:	3402      	adds	r4, #2
 801d964:	9305      	str	r3, [sp, #20]
 801d966:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801da4c <_vfiprintf_r+0x25c>
 801d96a:	7821      	ldrb	r1, [r4, #0]
 801d96c:	2203      	movs	r2, #3
 801d96e:	4650      	mov	r0, sl
 801d970:	f7fb f866 	bl	8018a40 <memchr>
 801d974:	b140      	cbz	r0, 801d988 <_vfiprintf_r+0x198>
 801d976:	2340      	movs	r3, #64	; 0x40
 801d978:	eba0 000a 	sub.w	r0, r0, sl
 801d97c:	fa03 f000 	lsl.w	r0, r3, r0
 801d980:	9b04      	ldr	r3, [sp, #16]
 801d982:	4303      	orrs	r3, r0
 801d984:	3401      	adds	r4, #1
 801d986:	9304      	str	r3, [sp, #16]
 801d988:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d98c:	482c      	ldr	r0, [pc, #176]	; (801da40 <_vfiprintf_r+0x250>)
 801d98e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d992:	2206      	movs	r2, #6
 801d994:	f7fb f854 	bl	8018a40 <memchr>
 801d998:	2800      	cmp	r0, #0
 801d99a:	d03f      	beq.n	801da1c <_vfiprintf_r+0x22c>
 801d99c:	4b29      	ldr	r3, [pc, #164]	; (801da44 <_vfiprintf_r+0x254>)
 801d99e:	bb1b      	cbnz	r3, 801d9e8 <_vfiprintf_r+0x1f8>
 801d9a0:	9b03      	ldr	r3, [sp, #12]
 801d9a2:	3307      	adds	r3, #7
 801d9a4:	f023 0307 	bic.w	r3, r3, #7
 801d9a8:	3308      	adds	r3, #8
 801d9aa:	9303      	str	r3, [sp, #12]
 801d9ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d9ae:	443b      	add	r3, r7
 801d9b0:	9309      	str	r3, [sp, #36]	; 0x24
 801d9b2:	e767      	b.n	801d884 <_vfiprintf_r+0x94>
 801d9b4:	fb0c 3202 	mla	r2, ip, r2, r3
 801d9b8:	460c      	mov	r4, r1
 801d9ba:	2001      	movs	r0, #1
 801d9bc:	e7a5      	b.n	801d90a <_vfiprintf_r+0x11a>
 801d9be:	2300      	movs	r3, #0
 801d9c0:	3401      	adds	r4, #1
 801d9c2:	9305      	str	r3, [sp, #20]
 801d9c4:	4619      	mov	r1, r3
 801d9c6:	f04f 0c0a 	mov.w	ip, #10
 801d9ca:	4620      	mov	r0, r4
 801d9cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d9d0:	3a30      	subs	r2, #48	; 0x30
 801d9d2:	2a09      	cmp	r2, #9
 801d9d4:	d903      	bls.n	801d9de <_vfiprintf_r+0x1ee>
 801d9d6:	2b00      	cmp	r3, #0
 801d9d8:	d0c5      	beq.n	801d966 <_vfiprintf_r+0x176>
 801d9da:	9105      	str	r1, [sp, #20]
 801d9dc:	e7c3      	b.n	801d966 <_vfiprintf_r+0x176>
 801d9de:	fb0c 2101 	mla	r1, ip, r1, r2
 801d9e2:	4604      	mov	r4, r0
 801d9e4:	2301      	movs	r3, #1
 801d9e6:	e7f0      	b.n	801d9ca <_vfiprintf_r+0x1da>
 801d9e8:	ab03      	add	r3, sp, #12
 801d9ea:	9300      	str	r3, [sp, #0]
 801d9ec:	462a      	mov	r2, r5
 801d9ee:	4b16      	ldr	r3, [pc, #88]	; (801da48 <_vfiprintf_r+0x258>)
 801d9f0:	a904      	add	r1, sp, #16
 801d9f2:	4630      	mov	r0, r6
 801d9f4:	f7fc f830 	bl	8019a58 <_printf_float>
 801d9f8:	4607      	mov	r7, r0
 801d9fa:	1c78      	adds	r0, r7, #1
 801d9fc:	d1d6      	bne.n	801d9ac <_vfiprintf_r+0x1bc>
 801d9fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801da00:	07d9      	lsls	r1, r3, #31
 801da02:	d405      	bmi.n	801da10 <_vfiprintf_r+0x220>
 801da04:	89ab      	ldrh	r3, [r5, #12]
 801da06:	059a      	lsls	r2, r3, #22
 801da08:	d402      	bmi.n	801da10 <_vfiprintf_r+0x220>
 801da0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801da0c:	f000 faa1 	bl	801df52 <__retarget_lock_release_recursive>
 801da10:	89ab      	ldrh	r3, [r5, #12]
 801da12:	065b      	lsls	r3, r3, #25
 801da14:	f53f af12 	bmi.w	801d83c <_vfiprintf_r+0x4c>
 801da18:	9809      	ldr	r0, [sp, #36]	; 0x24
 801da1a:	e711      	b.n	801d840 <_vfiprintf_r+0x50>
 801da1c:	ab03      	add	r3, sp, #12
 801da1e:	9300      	str	r3, [sp, #0]
 801da20:	462a      	mov	r2, r5
 801da22:	4b09      	ldr	r3, [pc, #36]	; (801da48 <_vfiprintf_r+0x258>)
 801da24:	a904      	add	r1, sp, #16
 801da26:	4630      	mov	r0, r6
 801da28:	f7fc faba 	bl	8019fa0 <_printf_i>
 801da2c:	e7e4      	b.n	801d9f8 <_vfiprintf_r+0x208>
 801da2e:	bf00      	nop
 801da30:	08052674 	.word	0x08052674
 801da34:	08052694 	.word	0x08052694
 801da38:	08052654 	.word	0x08052654
 801da3c:	08052604 	.word	0x08052604
 801da40:	0805260e 	.word	0x0805260e
 801da44:	08019a59 	.word	0x08019a59
 801da48:	0801d7cd 	.word	0x0801d7cd
 801da4c:	0805260a 	.word	0x0805260a

0801da50 <__swbuf_r>:
 801da50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801da52:	460e      	mov	r6, r1
 801da54:	4614      	mov	r4, r2
 801da56:	4605      	mov	r5, r0
 801da58:	b118      	cbz	r0, 801da62 <__swbuf_r+0x12>
 801da5a:	6983      	ldr	r3, [r0, #24]
 801da5c:	b90b      	cbnz	r3, 801da62 <__swbuf_r+0x12>
 801da5e:	f000 f9d9 	bl	801de14 <__sinit>
 801da62:	4b21      	ldr	r3, [pc, #132]	; (801dae8 <__swbuf_r+0x98>)
 801da64:	429c      	cmp	r4, r3
 801da66:	d12b      	bne.n	801dac0 <__swbuf_r+0x70>
 801da68:	686c      	ldr	r4, [r5, #4]
 801da6a:	69a3      	ldr	r3, [r4, #24]
 801da6c:	60a3      	str	r3, [r4, #8]
 801da6e:	89a3      	ldrh	r3, [r4, #12]
 801da70:	071a      	lsls	r2, r3, #28
 801da72:	d52f      	bpl.n	801dad4 <__swbuf_r+0x84>
 801da74:	6923      	ldr	r3, [r4, #16]
 801da76:	b36b      	cbz	r3, 801dad4 <__swbuf_r+0x84>
 801da78:	6923      	ldr	r3, [r4, #16]
 801da7a:	6820      	ldr	r0, [r4, #0]
 801da7c:	1ac0      	subs	r0, r0, r3
 801da7e:	6963      	ldr	r3, [r4, #20]
 801da80:	b2f6      	uxtb	r6, r6
 801da82:	4283      	cmp	r3, r0
 801da84:	4637      	mov	r7, r6
 801da86:	dc04      	bgt.n	801da92 <__swbuf_r+0x42>
 801da88:	4621      	mov	r1, r4
 801da8a:	4628      	mov	r0, r5
 801da8c:	f000 f92e 	bl	801dcec <_fflush_r>
 801da90:	bb30      	cbnz	r0, 801dae0 <__swbuf_r+0x90>
 801da92:	68a3      	ldr	r3, [r4, #8]
 801da94:	3b01      	subs	r3, #1
 801da96:	60a3      	str	r3, [r4, #8]
 801da98:	6823      	ldr	r3, [r4, #0]
 801da9a:	1c5a      	adds	r2, r3, #1
 801da9c:	6022      	str	r2, [r4, #0]
 801da9e:	701e      	strb	r6, [r3, #0]
 801daa0:	6963      	ldr	r3, [r4, #20]
 801daa2:	3001      	adds	r0, #1
 801daa4:	4283      	cmp	r3, r0
 801daa6:	d004      	beq.n	801dab2 <__swbuf_r+0x62>
 801daa8:	89a3      	ldrh	r3, [r4, #12]
 801daaa:	07db      	lsls	r3, r3, #31
 801daac:	d506      	bpl.n	801dabc <__swbuf_r+0x6c>
 801daae:	2e0a      	cmp	r6, #10
 801dab0:	d104      	bne.n	801dabc <__swbuf_r+0x6c>
 801dab2:	4621      	mov	r1, r4
 801dab4:	4628      	mov	r0, r5
 801dab6:	f000 f919 	bl	801dcec <_fflush_r>
 801daba:	b988      	cbnz	r0, 801dae0 <__swbuf_r+0x90>
 801dabc:	4638      	mov	r0, r7
 801dabe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dac0:	4b0a      	ldr	r3, [pc, #40]	; (801daec <__swbuf_r+0x9c>)
 801dac2:	429c      	cmp	r4, r3
 801dac4:	d101      	bne.n	801daca <__swbuf_r+0x7a>
 801dac6:	68ac      	ldr	r4, [r5, #8]
 801dac8:	e7cf      	b.n	801da6a <__swbuf_r+0x1a>
 801daca:	4b09      	ldr	r3, [pc, #36]	; (801daf0 <__swbuf_r+0xa0>)
 801dacc:	429c      	cmp	r4, r3
 801dace:	bf08      	it	eq
 801dad0:	68ec      	ldreq	r4, [r5, #12]
 801dad2:	e7ca      	b.n	801da6a <__swbuf_r+0x1a>
 801dad4:	4621      	mov	r1, r4
 801dad6:	4628      	mov	r0, r5
 801dad8:	f000 f80c 	bl	801daf4 <__swsetup_r>
 801dadc:	2800      	cmp	r0, #0
 801dade:	d0cb      	beq.n	801da78 <__swbuf_r+0x28>
 801dae0:	f04f 37ff 	mov.w	r7, #4294967295
 801dae4:	e7ea      	b.n	801dabc <__swbuf_r+0x6c>
 801dae6:	bf00      	nop
 801dae8:	08052674 	.word	0x08052674
 801daec:	08052694 	.word	0x08052694
 801daf0:	08052654 	.word	0x08052654

0801daf4 <__swsetup_r>:
 801daf4:	4b32      	ldr	r3, [pc, #200]	; (801dbc0 <__swsetup_r+0xcc>)
 801daf6:	b570      	push	{r4, r5, r6, lr}
 801daf8:	681d      	ldr	r5, [r3, #0]
 801dafa:	4606      	mov	r6, r0
 801dafc:	460c      	mov	r4, r1
 801dafe:	b125      	cbz	r5, 801db0a <__swsetup_r+0x16>
 801db00:	69ab      	ldr	r3, [r5, #24]
 801db02:	b913      	cbnz	r3, 801db0a <__swsetup_r+0x16>
 801db04:	4628      	mov	r0, r5
 801db06:	f000 f985 	bl	801de14 <__sinit>
 801db0a:	4b2e      	ldr	r3, [pc, #184]	; (801dbc4 <__swsetup_r+0xd0>)
 801db0c:	429c      	cmp	r4, r3
 801db0e:	d10f      	bne.n	801db30 <__swsetup_r+0x3c>
 801db10:	686c      	ldr	r4, [r5, #4]
 801db12:	89a3      	ldrh	r3, [r4, #12]
 801db14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801db18:	0719      	lsls	r1, r3, #28
 801db1a:	d42c      	bmi.n	801db76 <__swsetup_r+0x82>
 801db1c:	06dd      	lsls	r5, r3, #27
 801db1e:	d411      	bmi.n	801db44 <__swsetup_r+0x50>
 801db20:	2309      	movs	r3, #9
 801db22:	6033      	str	r3, [r6, #0]
 801db24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801db28:	81a3      	strh	r3, [r4, #12]
 801db2a:	f04f 30ff 	mov.w	r0, #4294967295
 801db2e:	e03e      	b.n	801dbae <__swsetup_r+0xba>
 801db30:	4b25      	ldr	r3, [pc, #148]	; (801dbc8 <__swsetup_r+0xd4>)
 801db32:	429c      	cmp	r4, r3
 801db34:	d101      	bne.n	801db3a <__swsetup_r+0x46>
 801db36:	68ac      	ldr	r4, [r5, #8]
 801db38:	e7eb      	b.n	801db12 <__swsetup_r+0x1e>
 801db3a:	4b24      	ldr	r3, [pc, #144]	; (801dbcc <__swsetup_r+0xd8>)
 801db3c:	429c      	cmp	r4, r3
 801db3e:	bf08      	it	eq
 801db40:	68ec      	ldreq	r4, [r5, #12]
 801db42:	e7e6      	b.n	801db12 <__swsetup_r+0x1e>
 801db44:	0758      	lsls	r0, r3, #29
 801db46:	d512      	bpl.n	801db6e <__swsetup_r+0x7a>
 801db48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801db4a:	b141      	cbz	r1, 801db5e <__swsetup_r+0x6a>
 801db4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801db50:	4299      	cmp	r1, r3
 801db52:	d002      	beq.n	801db5a <__swsetup_r+0x66>
 801db54:	4630      	mov	r0, r6
 801db56:	f7ff fb25 	bl	801d1a4 <_free_r>
 801db5a:	2300      	movs	r3, #0
 801db5c:	6363      	str	r3, [r4, #52]	; 0x34
 801db5e:	89a3      	ldrh	r3, [r4, #12]
 801db60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801db64:	81a3      	strh	r3, [r4, #12]
 801db66:	2300      	movs	r3, #0
 801db68:	6063      	str	r3, [r4, #4]
 801db6a:	6923      	ldr	r3, [r4, #16]
 801db6c:	6023      	str	r3, [r4, #0]
 801db6e:	89a3      	ldrh	r3, [r4, #12]
 801db70:	f043 0308 	orr.w	r3, r3, #8
 801db74:	81a3      	strh	r3, [r4, #12]
 801db76:	6923      	ldr	r3, [r4, #16]
 801db78:	b94b      	cbnz	r3, 801db8e <__swsetup_r+0x9a>
 801db7a:	89a3      	ldrh	r3, [r4, #12]
 801db7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801db80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801db84:	d003      	beq.n	801db8e <__swsetup_r+0x9a>
 801db86:	4621      	mov	r1, r4
 801db88:	4630      	mov	r0, r6
 801db8a:	f000 fa09 	bl	801dfa0 <__smakebuf_r>
 801db8e:	89a0      	ldrh	r0, [r4, #12]
 801db90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801db94:	f010 0301 	ands.w	r3, r0, #1
 801db98:	d00a      	beq.n	801dbb0 <__swsetup_r+0xbc>
 801db9a:	2300      	movs	r3, #0
 801db9c:	60a3      	str	r3, [r4, #8]
 801db9e:	6963      	ldr	r3, [r4, #20]
 801dba0:	425b      	negs	r3, r3
 801dba2:	61a3      	str	r3, [r4, #24]
 801dba4:	6923      	ldr	r3, [r4, #16]
 801dba6:	b943      	cbnz	r3, 801dbba <__swsetup_r+0xc6>
 801dba8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801dbac:	d1ba      	bne.n	801db24 <__swsetup_r+0x30>
 801dbae:	bd70      	pop	{r4, r5, r6, pc}
 801dbb0:	0781      	lsls	r1, r0, #30
 801dbb2:	bf58      	it	pl
 801dbb4:	6963      	ldrpl	r3, [r4, #20]
 801dbb6:	60a3      	str	r3, [r4, #8]
 801dbb8:	e7f4      	b.n	801dba4 <__swsetup_r+0xb0>
 801dbba:	2000      	movs	r0, #0
 801dbbc:	e7f7      	b.n	801dbae <__swsetup_r+0xba>
 801dbbe:	bf00      	nop
 801dbc0:	20000064 	.word	0x20000064
 801dbc4:	08052674 	.word	0x08052674
 801dbc8:	08052694 	.word	0x08052694
 801dbcc:	08052654 	.word	0x08052654

0801dbd0 <abort>:
 801dbd0:	b508      	push	{r3, lr}
 801dbd2:	2006      	movs	r0, #6
 801dbd4:	f000 fa54 	bl	801e080 <raise>
 801dbd8:	2001      	movs	r0, #1
 801dbda:	f7e8 fa30 	bl	800603e <_exit>
	...

0801dbe0 <__sflush_r>:
 801dbe0:	898a      	ldrh	r2, [r1, #12]
 801dbe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dbe6:	4605      	mov	r5, r0
 801dbe8:	0710      	lsls	r0, r2, #28
 801dbea:	460c      	mov	r4, r1
 801dbec:	d458      	bmi.n	801dca0 <__sflush_r+0xc0>
 801dbee:	684b      	ldr	r3, [r1, #4]
 801dbf0:	2b00      	cmp	r3, #0
 801dbf2:	dc05      	bgt.n	801dc00 <__sflush_r+0x20>
 801dbf4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801dbf6:	2b00      	cmp	r3, #0
 801dbf8:	dc02      	bgt.n	801dc00 <__sflush_r+0x20>
 801dbfa:	2000      	movs	r0, #0
 801dbfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dc00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dc02:	2e00      	cmp	r6, #0
 801dc04:	d0f9      	beq.n	801dbfa <__sflush_r+0x1a>
 801dc06:	2300      	movs	r3, #0
 801dc08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801dc0c:	682f      	ldr	r7, [r5, #0]
 801dc0e:	602b      	str	r3, [r5, #0]
 801dc10:	d032      	beq.n	801dc78 <__sflush_r+0x98>
 801dc12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801dc14:	89a3      	ldrh	r3, [r4, #12]
 801dc16:	075a      	lsls	r2, r3, #29
 801dc18:	d505      	bpl.n	801dc26 <__sflush_r+0x46>
 801dc1a:	6863      	ldr	r3, [r4, #4]
 801dc1c:	1ac0      	subs	r0, r0, r3
 801dc1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801dc20:	b10b      	cbz	r3, 801dc26 <__sflush_r+0x46>
 801dc22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801dc24:	1ac0      	subs	r0, r0, r3
 801dc26:	2300      	movs	r3, #0
 801dc28:	4602      	mov	r2, r0
 801dc2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dc2c:	6a21      	ldr	r1, [r4, #32]
 801dc2e:	4628      	mov	r0, r5
 801dc30:	47b0      	blx	r6
 801dc32:	1c43      	adds	r3, r0, #1
 801dc34:	89a3      	ldrh	r3, [r4, #12]
 801dc36:	d106      	bne.n	801dc46 <__sflush_r+0x66>
 801dc38:	6829      	ldr	r1, [r5, #0]
 801dc3a:	291d      	cmp	r1, #29
 801dc3c:	d82c      	bhi.n	801dc98 <__sflush_r+0xb8>
 801dc3e:	4a2a      	ldr	r2, [pc, #168]	; (801dce8 <__sflush_r+0x108>)
 801dc40:	40ca      	lsrs	r2, r1
 801dc42:	07d6      	lsls	r6, r2, #31
 801dc44:	d528      	bpl.n	801dc98 <__sflush_r+0xb8>
 801dc46:	2200      	movs	r2, #0
 801dc48:	6062      	str	r2, [r4, #4]
 801dc4a:	04d9      	lsls	r1, r3, #19
 801dc4c:	6922      	ldr	r2, [r4, #16]
 801dc4e:	6022      	str	r2, [r4, #0]
 801dc50:	d504      	bpl.n	801dc5c <__sflush_r+0x7c>
 801dc52:	1c42      	adds	r2, r0, #1
 801dc54:	d101      	bne.n	801dc5a <__sflush_r+0x7a>
 801dc56:	682b      	ldr	r3, [r5, #0]
 801dc58:	b903      	cbnz	r3, 801dc5c <__sflush_r+0x7c>
 801dc5a:	6560      	str	r0, [r4, #84]	; 0x54
 801dc5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801dc5e:	602f      	str	r7, [r5, #0]
 801dc60:	2900      	cmp	r1, #0
 801dc62:	d0ca      	beq.n	801dbfa <__sflush_r+0x1a>
 801dc64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801dc68:	4299      	cmp	r1, r3
 801dc6a:	d002      	beq.n	801dc72 <__sflush_r+0x92>
 801dc6c:	4628      	mov	r0, r5
 801dc6e:	f7ff fa99 	bl	801d1a4 <_free_r>
 801dc72:	2000      	movs	r0, #0
 801dc74:	6360      	str	r0, [r4, #52]	; 0x34
 801dc76:	e7c1      	b.n	801dbfc <__sflush_r+0x1c>
 801dc78:	6a21      	ldr	r1, [r4, #32]
 801dc7a:	2301      	movs	r3, #1
 801dc7c:	4628      	mov	r0, r5
 801dc7e:	47b0      	blx	r6
 801dc80:	1c41      	adds	r1, r0, #1
 801dc82:	d1c7      	bne.n	801dc14 <__sflush_r+0x34>
 801dc84:	682b      	ldr	r3, [r5, #0]
 801dc86:	2b00      	cmp	r3, #0
 801dc88:	d0c4      	beq.n	801dc14 <__sflush_r+0x34>
 801dc8a:	2b1d      	cmp	r3, #29
 801dc8c:	d001      	beq.n	801dc92 <__sflush_r+0xb2>
 801dc8e:	2b16      	cmp	r3, #22
 801dc90:	d101      	bne.n	801dc96 <__sflush_r+0xb6>
 801dc92:	602f      	str	r7, [r5, #0]
 801dc94:	e7b1      	b.n	801dbfa <__sflush_r+0x1a>
 801dc96:	89a3      	ldrh	r3, [r4, #12]
 801dc98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dc9c:	81a3      	strh	r3, [r4, #12]
 801dc9e:	e7ad      	b.n	801dbfc <__sflush_r+0x1c>
 801dca0:	690f      	ldr	r7, [r1, #16]
 801dca2:	2f00      	cmp	r7, #0
 801dca4:	d0a9      	beq.n	801dbfa <__sflush_r+0x1a>
 801dca6:	0793      	lsls	r3, r2, #30
 801dca8:	680e      	ldr	r6, [r1, #0]
 801dcaa:	bf08      	it	eq
 801dcac:	694b      	ldreq	r3, [r1, #20]
 801dcae:	600f      	str	r7, [r1, #0]
 801dcb0:	bf18      	it	ne
 801dcb2:	2300      	movne	r3, #0
 801dcb4:	eba6 0807 	sub.w	r8, r6, r7
 801dcb8:	608b      	str	r3, [r1, #8]
 801dcba:	f1b8 0f00 	cmp.w	r8, #0
 801dcbe:	dd9c      	ble.n	801dbfa <__sflush_r+0x1a>
 801dcc0:	6a21      	ldr	r1, [r4, #32]
 801dcc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801dcc4:	4643      	mov	r3, r8
 801dcc6:	463a      	mov	r2, r7
 801dcc8:	4628      	mov	r0, r5
 801dcca:	47b0      	blx	r6
 801dccc:	2800      	cmp	r0, #0
 801dcce:	dc06      	bgt.n	801dcde <__sflush_r+0xfe>
 801dcd0:	89a3      	ldrh	r3, [r4, #12]
 801dcd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dcd6:	81a3      	strh	r3, [r4, #12]
 801dcd8:	f04f 30ff 	mov.w	r0, #4294967295
 801dcdc:	e78e      	b.n	801dbfc <__sflush_r+0x1c>
 801dcde:	4407      	add	r7, r0
 801dce0:	eba8 0800 	sub.w	r8, r8, r0
 801dce4:	e7e9      	b.n	801dcba <__sflush_r+0xda>
 801dce6:	bf00      	nop
 801dce8:	20400001 	.word	0x20400001

0801dcec <_fflush_r>:
 801dcec:	b538      	push	{r3, r4, r5, lr}
 801dcee:	690b      	ldr	r3, [r1, #16]
 801dcf0:	4605      	mov	r5, r0
 801dcf2:	460c      	mov	r4, r1
 801dcf4:	b913      	cbnz	r3, 801dcfc <_fflush_r+0x10>
 801dcf6:	2500      	movs	r5, #0
 801dcf8:	4628      	mov	r0, r5
 801dcfa:	bd38      	pop	{r3, r4, r5, pc}
 801dcfc:	b118      	cbz	r0, 801dd06 <_fflush_r+0x1a>
 801dcfe:	6983      	ldr	r3, [r0, #24]
 801dd00:	b90b      	cbnz	r3, 801dd06 <_fflush_r+0x1a>
 801dd02:	f000 f887 	bl	801de14 <__sinit>
 801dd06:	4b14      	ldr	r3, [pc, #80]	; (801dd58 <_fflush_r+0x6c>)
 801dd08:	429c      	cmp	r4, r3
 801dd0a:	d11b      	bne.n	801dd44 <_fflush_r+0x58>
 801dd0c:	686c      	ldr	r4, [r5, #4]
 801dd0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dd12:	2b00      	cmp	r3, #0
 801dd14:	d0ef      	beq.n	801dcf6 <_fflush_r+0xa>
 801dd16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801dd18:	07d0      	lsls	r0, r2, #31
 801dd1a:	d404      	bmi.n	801dd26 <_fflush_r+0x3a>
 801dd1c:	0599      	lsls	r1, r3, #22
 801dd1e:	d402      	bmi.n	801dd26 <_fflush_r+0x3a>
 801dd20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dd22:	f000 f915 	bl	801df50 <__retarget_lock_acquire_recursive>
 801dd26:	4628      	mov	r0, r5
 801dd28:	4621      	mov	r1, r4
 801dd2a:	f7ff ff59 	bl	801dbe0 <__sflush_r>
 801dd2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801dd30:	07da      	lsls	r2, r3, #31
 801dd32:	4605      	mov	r5, r0
 801dd34:	d4e0      	bmi.n	801dcf8 <_fflush_r+0xc>
 801dd36:	89a3      	ldrh	r3, [r4, #12]
 801dd38:	059b      	lsls	r3, r3, #22
 801dd3a:	d4dd      	bmi.n	801dcf8 <_fflush_r+0xc>
 801dd3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dd3e:	f000 f908 	bl	801df52 <__retarget_lock_release_recursive>
 801dd42:	e7d9      	b.n	801dcf8 <_fflush_r+0xc>
 801dd44:	4b05      	ldr	r3, [pc, #20]	; (801dd5c <_fflush_r+0x70>)
 801dd46:	429c      	cmp	r4, r3
 801dd48:	d101      	bne.n	801dd4e <_fflush_r+0x62>
 801dd4a:	68ac      	ldr	r4, [r5, #8]
 801dd4c:	e7df      	b.n	801dd0e <_fflush_r+0x22>
 801dd4e:	4b04      	ldr	r3, [pc, #16]	; (801dd60 <_fflush_r+0x74>)
 801dd50:	429c      	cmp	r4, r3
 801dd52:	bf08      	it	eq
 801dd54:	68ec      	ldreq	r4, [r5, #12]
 801dd56:	e7da      	b.n	801dd0e <_fflush_r+0x22>
 801dd58:	08052674 	.word	0x08052674
 801dd5c:	08052694 	.word	0x08052694
 801dd60:	08052654 	.word	0x08052654

0801dd64 <std>:
 801dd64:	2300      	movs	r3, #0
 801dd66:	b510      	push	{r4, lr}
 801dd68:	4604      	mov	r4, r0
 801dd6a:	e9c0 3300 	strd	r3, r3, [r0]
 801dd6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801dd72:	6083      	str	r3, [r0, #8]
 801dd74:	8181      	strh	r1, [r0, #12]
 801dd76:	6643      	str	r3, [r0, #100]	; 0x64
 801dd78:	81c2      	strh	r2, [r0, #14]
 801dd7a:	6183      	str	r3, [r0, #24]
 801dd7c:	4619      	mov	r1, r3
 801dd7e:	2208      	movs	r2, #8
 801dd80:	305c      	adds	r0, #92	; 0x5c
 801dd82:	f7fb fdc1 	bl	8019908 <memset>
 801dd86:	4b05      	ldr	r3, [pc, #20]	; (801dd9c <std+0x38>)
 801dd88:	6263      	str	r3, [r4, #36]	; 0x24
 801dd8a:	4b05      	ldr	r3, [pc, #20]	; (801dda0 <std+0x3c>)
 801dd8c:	62a3      	str	r3, [r4, #40]	; 0x28
 801dd8e:	4b05      	ldr	r3, [pc, #20]	; (801dda4 <std+0x40>)
 801dd90:	62e3      	str	r3, [r4, #44]	; 0x2c
 801dd92:	4b05      	ldr	r3, [pc, #20]	; (801dda8 <std+0x44>)
 801dd94:	6224      	str	r4, [r4, #32]
 801dd96:	6323      	str	r3, [r4, #48]	; 0x30
 801dd98:	bd10      	pop	{r4, pc}
 801dd9a:	bf00      	nop
 801dd9c:	0801e0b9 	.word	0x0801e0b9
 801dda0:	0801e0db 	.word	0x0801e0db
 801dda4:	0801e113 	.word	0x0801e113
 801dda8:	0801e137 	.word	0x0801e137

0801ddac <_cleanup_r>:
 801ddac:	4901      	ldr	r1, [pc, #4]	; (801ddb4 <_cleanup_r+0x8>)
 801ddae:	f000 b8af 	b.w	801df10 <_fwalk_reent>
 801ddb2:	bf00      	nop
 801ddb4:	0801dced 	.word	0x0801dced

0801ddb8 <__sfmoreglue>:
 801ddb8:	b570      	push	{r4, r5, r6, lr}
 801ddba:	2268      	movs	r2, #104	; 0x68
 801ddbc:	1e4d      	subs	r5, r1, #1
 801ddbe:	4355      	muls	r5, r2
 801ddc0:	460e      	mov	r6, r1
 801ddc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801ddc6:	f7ff fa59 	bl	801d27c <_malloc_r>
 801ddca:	4604      	mov	r4, r0
 801ddcc:	b140      	cbz	r0, 801dde0 <__sfmoreglue+0x28>
 801ddce:	2100      	movs	r1, #0
 801ddd0:	e9c0 1600 	strd	r1, r6, [r0]
 801ddd4:	300c      	adds	r0, #12
 801ddd6:	60a0      	str	r0, [r4, #8]
 801ddd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801dddc:	f7fb fd94 	bl	8019908 <memset>
 801dde0:	4620      	mov	r0, r4
 801dde2:	bd70      	pop	{r4, r5, r6, pc}

0801dde4 <__sfp_lock_acquire>:
 801dde4:	4801      	ldr	r0, [pc, #4]	; (801ddec <__sfp_lock_acquire+0x8>)
 801dde6:	f000 b8b3 	b.w	801df50 <__retarget_lock_acquire_recursive>
 801ddea:	bf00      	nop
 801ddec:	20000dc9 	.word	0x20000dc9

0801ddf0 <__sfp_lock_release>:
 801ddf0:	4801      	ldr	r0, [pc, #4]	; (801ddf8 <__sfp_lock_release+0x8>)
 801ddf2:	f000 b8ae 	b.w	801df52 <__retarget_lock_release_recursive>
 801ddf6:	bf00      	nop
 801ddf8:	20000dc9 	.word	0x20000dc9

0801ddfc <__sinit_lock_acquire>:
 801ddfc:	4801      	ldr	r0, [pc, #4]	; (801de04 <__sinit_lock_acquire+0x8>)
 801ddfe:	f000 b8a7 	b.w	801df50 <__retarget_lock_acquire_recursive>
 801de02:	bf00      	nop
 801de04:	20000dca 	.word	0x20000dca

0801de08 <__sinit_lock_release>:
 801de08:	4801      	ldr	r0, [pc, #4]	; (801de10 <__sinit_lock_release+0x8>)
 801de0a:	f000 b8a2 	b.w	801df52 <__retarget_lock_release_recursive>
 801de0e:	bf00      	nop
 801de10:	20000dca 	.word	0x20000dca

0801de14 <__sinit>:
 801de14:	b510      	push	{r4, lr}
 801de16:	4604      	mov	r4, r0
 801de18:	f7ff fff0 	bl	801ddfc <__sinit_lock_acquire>
 801de1c:	69a3      	ldr	r3, [r4, #24]
 801de1e:	b11b      	cbz	r3, 801de28 <__sinit+0x14>
 801de20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801de24:	f7ff bff0 	b.w	801de08 <__sinit_lock_release>
 801de28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801de2c:	6523      	str	r3, [r4, #80]	; 0x50
 801de2e:	4b13      	ldr	r3, [pc, #76]	; (801de7c <__sinit+0x68>)
 801de30:	4a13      	ldr	r2, [pc, #76]	; (801de80 <__sinit+0x6c>)
 801de32:	681b      	ldr	r3, [r3, #0]
 801de34:	62a2      	str	r2, [r4, #40]	; 0x28
 801de36:	42a3      	cmp	r3, r4
 801de38:	bf04      	itt	eq
 801de3a:	2301      	moveq	r3, #1
 801de3c:	61a3      	streq	r3, [r4, #24]
 801de3e:	4620      	mov	r0, r4
 801de40:	f000 f820 	bl	801de84 <__sfp>
 801de44:	6060      	str	r0, [r4, #4]
 801de46:	4620      	mov	r0, r4
 801de48:	f000 f81c 	bl	801de84 <__sfp>
 801de4c:	60a0      	str	r0, [r4, #8]
 801de4e:	4620      	mov	r0, r4
 801de50:	f000 f818 	bl	801de84 <__sfp>
 801de54:	2200      	movs	r2, #0
 801de56:	60e0      	str	r0, [r4, #12]
 801de58:	2104      	movs	r1, #4
 801de5a:	6860      	ldr	r0, [r4, #4]
 801de5c:	f7ff ff82 	bl	801dd64 <std>
 801de60:	68a0      	ldr	r0, [r4, #8]
 801de62:	2201      	movs	r2, #1
 801de64:	2109      	movs	r1, #9
 801de66:	f7ff ff7d 	bl	801dd64 <std>
 801de6a:	68e0      	ldr	r0, [r4, #12]
 801de6c:	2202      	movs	r2, #2
 801de6e:	2112      	movs	r1, #18
 801de70:	f7ff ff78 	bl	801dd64 <std>
 801de74:	2301      	movs	r3, #1
 801de76:	61a3      	str	r3, [r4, #24]
 801de78:	e7d2      	b.n	801de20 <__sinit+0xc>
 801de7a:	bf00      	nop
 801de7c:	08052210 	.word	0x08052210
 801de80:	0801ddad 	.word	0x0801ddad

0801de84 <__sfp>:
 801de84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801de86:	4607      	mov	r7, r0
 801de88:	f7ff ffac 	bl	801dde4 <__sfp_lock_acquire>
 801de8c:	4b1e      	ldr	r3, [pc, #120]	; (801df08 <__sfp+0x84>)
 801de8e:	681e      	ldr	r6, [r3, #0]
 801de90:	69b3      	ldr	r3, [r6, #24]
 801de92:	b913      	cbnz	r3, 801de9a <__sfp+0x16>
 801de94:	4630      	mov	r0, r6
 801de96:	f7ff ffbd 	bl	801de14 <__sinit>
 801de9a:	3648      	adds	r6, #72	; 0x48
 801de9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801dea0:	3b01      	subs	r3, #1
 801dea2:	d503      	bpl.n	801deac <__sfp+0x28>
 801dea4:	6833      	ldr	r3, [r6, #0]
 801dea6:	b30b      	cbz	r3, 801deec <__sfp+0x68>
 801dea8:	6836      	ldr	r6, [r6, #0]
 801deaa:	e7f7      	b.n	801de9c <__sfp+0x18>
 801deac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801deb0:	b9d5      	cbnz	r5, 801dee8 <__sfp+0x64>
 801deb2:	4b16      	ldr	r3, [pc, #88]	; (801df0c <__sfp+0x88>)
 801deb4:	60e3      	str	r3, [r4, #12]
 801deb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801deba:	6665      	str	r5, [r4, #100]	; 0x64
 801debc:	f000 f847 	bl	801df4e <__retarget_lock_init_recursive>
 801dec0:	f7ff ff96 	bl	801ddf0 <__sfp_lock_release>
 801dec4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801dec8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801decc:	6025      	str	r5, [r4, #0]
 801dece:	61a5      	str	r5, [r4, #24]
 801ded0:	2208      	movs	r2, #8
 801ded2:	4629      	mov	r1, r5
 801ded4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801ded8:	f7fb fd16 	bl	8019908 <memset>
 801dedc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801dee0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801dee4:	4620      	mov	r0, r4
 801dee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dee8:	3468      	adds	r4, #104	; 0x68
 801deea:	e7d9      	b.n	801dea0 <__sfp+0x1c>
 801deec:	2104      	movs	r1, #4
 801deee:	4638      	mov	r0, r7
 801def0:	f7ff ff62 	bl	801ddb8 <__sfmoreglue>
 801def4:	4604      	mov	r4, r0
 801def6:	6030      	str	r0, [r6, #0]
 801def8:	2800      	cmp	r0, #0
 801defa:	d1d5      	bne.n	801dea8 <__sfp+0x24>
 801defc:	f7ff ff78 	bl	801ddf0 <__sfp_lock_release>
 801df00:	230c      	movs	r3, #12
 801df02:	603b      	str	r3, [r7, #0]
 801df04:	e7ee      	b.n	801dee4 <__sfp+0x60>
 801df06:	bf00      	nop
 801df08:	08052210 	.word	0x08052210
 801df0c:	ffff0001 	.word	0xffff0001

0801df10 <_fwalk_reent>:
 801df10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801df14:	4606      	mov	r6, r0
 801df16:	4688      	mov	r8, r1
 801df18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801df1c:	2700      	movs	r7, #0
 801df1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801df22:	f1b9 0901 	subs.w	r9, r9, #1
 801df26:	d505      	bpl.n	801df34 <_fwalk_reent+0x24>
 801df28:	6824      	ldr	r4, [r4, #0]
 801df2a:	2c00      	cmp	r4, #0
 801df2c:	d1f7      	bne.n	801df1e <_fwalk_reent+0xe>
 801df2e:	4638      	mov	r0, r7
 801df30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801df34:	89ab      	ldrh	r3, [r5, #12]
 801df36:	2b01      	cmp	r3, #1
 801df38:	d907      	bls.n	801df4a <_fwalk_reent+0x3a>
 801df3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801df3e:	3301      	adds	r3, #1
 801df40:	d003      	beq.n	801df4a <_fwalk_reent+0x3a>
 801df42:	4629      	mov	r1, r5
 801df44:	4630      	mov	r0, r6
 801df46:	47c0      	blx	r8
 801df48:	4307      	orrs	r7, r0
 801df4a:	3568      	adds	r5, #104	; 0x68
 801df4c:	e7e9      	b.n	801df22 <_fwalk_reent+0x12>

0801df4e <__retarget_lock_init_recursive>:
 801df4e:	4770      	bx	lr

0801df50 <__retarget_lock_acquire_recursive>:
 801df50:	4770      	bx	lr

0801df52 <__retarget_lock_release_recursive>:
 801df52:	4770      	bx	lr

0801df54 <__swhatbuf_r>:
 801df54:	b570      	push	{r4, r5, r6, lr}
 801df56:	460e      	mov	r6, r1
 801df58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801df5c:	2900      	cmp	r1, #0
 801df5e:	b096      	sub	sp, #88	; 0x58
 801df60:	4614      	mov	r4, r2
 801df62:	461d      	mov	r5, r3
 801df64:	da08      	bge.n	801df78 <__swhatbuf_r+0x24>
 801df66:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801df6a:	2200      	movs	r2, #0
 801df6c:	602a      	str	r2, [r5, #0]
 801df6e:	061a      	lsls	r2, r3, #24
 801df70:	d410      	bmi.n	801df94 <__swhatbuf_r+0x40>
 801df72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801df76:	e00e      	b.n	801df96 <__swhatbuf_r+0x42>
 801df78:	466a      	mov	r2, sp
 801df7a:	f000 f903 	bl	801e184 <_fstat_r>
 801df7e:	2800      	cmp	r0, #0
 801df80:	dbf1      	blt.n	801df66 <__swhatbuf_r+0x12>
 801df82:	9a01      	ldr	r2, [sp, #4]
 801df84:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801df88:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801df8c:	425a      	negs	r2, r3
 801df8e:	415a      	adcs	r2, r3
 801df90:	602a      	str	r2, [r5, #0]
 801df92:	e7ee      	b.n	801df72 <__swhatbuf_r+0x1e>
 801df94:	2340      	movs	r3, #64	; 0x40
 801df96:	2000      	movs	r0, #0
 801df98:	6023      	str	r3, [r4, #0]
 801df9a:	b016      	add	sp, #88	; 0x58
 801df9c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801dfa0 <__smakebuf_r>:
 801dfa0:	898b      	ldrh	r3, [r1, #12]
 801dfa2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801dfa4:	079d      	lsls	r5, r3, #30
 801dfa6:	4606      	mov	r6, r0
 801dfa8:	460c      	mov	r4, r1
 801dfaa:	d507      	bpl.n	801dfbc <__smakebuf_r+0x1c>
 801dfac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801dfb0:	6023      	str	r3, [r4, #0]
 801dfb2:	6123      	str	r3, [r4, #16]
 801dfb4:	2301      	movs	r3, #1
 801dfb6:	6163      	str	r3, [r4, #20]
 801dfb8:	b002      	add	sp, #8
 801dfba:	bd70      	pop	{r4, r5, r6, pc}
 801dfbc:	ab01      	add	r3, sp, #4
 801dfbe:	466a      	mov	r2, sp
 801dfc0:	f7ff ffc8 	bl	801df54 <__swhatbuf_r>
 801dfc4:	9900      	ldr	r1, [sp, #0]
 801dfc6:	4605      	mov	r5, r0
 801dfc8:	4630      	mov	r0, r6
 801dfca:	f7ff f957 	bl	801d27c <_malloc_r>
 801dfce:	b948      	cbnz	r0, 801dfe4 <__smakebuf_r+0x44>
 801dfd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dfd4:	059a      	lsls	r2, r3, #22
 801dfd6:	d4ef      	bmi.n	801dfb8 <__smakebuf_r+0x18>
 801dfd8:	f023 0303 	bic.w	r3, r3, #3
 801dfdc:	f043 0302 	orr.w	r3, r3, #2
 801dfe0:	81a3      	strh	r3, [r4, #12]
 801dfe2:	e7e3      	b.n	801dfac <__smakebuf_r+0xc>
 801dfe4:	4b0d      	ldr	r3, [pc, #52]	; (801e01c <__smakebuf_r+0x7c>)
 801dfe6:	62b3      	str	r3, [r6, #40]	; 0x28
 801dfe8:	89a3      	ldrh	r3, [r4, #12]
 801dfea:	6020      	str	r0, [r4, #0]
 801dfec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801dff0:	81a3      	strh	r3, [r4, #12]
 801dff2:	9b00      	ldr	r3, [sp, #0]
 801dff4:	6163      	str	r3, [r4, #20]
 801dff6:	9b01      	ldr	r3, [sp, #4]
 801dff8:	6120      	str	r0, [r4, #16]
 801dffa:	b15b      	cbz	r3, 801e014 <__smakebuf_r+0x74>
 801dffc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e000:	4630      	mov	r0, r6
 801e002:	f000 f8d1 	bl	801e1a8 <_isatty_r>
 801e006:	b128      	cbz	r0, 801e014 <__smakebuf_r+0x74>
 801e008:	89a3      	ldrh	r3, [r4, #12]
 801e00a:	f023 0303 	bic.w	r3, r3, #3
 801e00e:	f043 0301 	orr.w	r3, r3, #1
 801e012:	81a3      	strh	r3, [r4, #12]
 801e014:	89a0      	ldrh	r0, [r4, #12]
 801e016:	4305      	orrs	r5, r0
 801e018:	81a5      	strh	r5, [r4, #12]
 801e01a:	e7cd      	b.n	801dfb8 <__smakebuf_r+0x18>
 801e01c:	0801ddad 	.word	0x0801ddad

0801e020 <_malloc_usable_size_r>:
 801e020:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e024:	1f18      	subs	r0, r3, #4
 801e026:	2b00      	cmp	r3, #0
 801e028:	bfbc      	itt	lt
 801e02a:	580b      	ldrlt	r3, [r1, r0]
 801e02c:	18c0      	addlt	r0, r0, r3
 801e02e:	4770      	bx	lr

0801e030 <_raise_r>:
 801e030:	291f      	cmp	r1, #31
 801e032:	b538      	push	{r3, r4, r5, lr}
 801e034:	4604      	mov	r4, r0
 801e036:	460d      	mov	r5, r1
 801e038:	d904      	bls.n	801e044 <_raise_r+0x14>
 801e03a:	2316      	movs	r3, #22
 801e03c:	6003      	str	r3, [r0, #0]
 801e03e:	f04f 30ff 	mov.w	r0, #4294967295
 801e042:	bd38      	pop	{r3, r4, r5, pc}
 801e044:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801e046:	b112      	cbz	r2, 801e04e <_raise_r+0x1e>
 801e048:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e04c:	b94b      	cbnz	r3, 801e062 <_raise_r+0x32>
 801e04e:	4620      	mov	r0, r4
 801e050:	f000 f830 	bl	801e0b4 <_getpid_r>
 801e054:	462a      	mov	r2, r5
 801e056:	4601      	mov	r1, r0
 801e058:	4620      	mov	r0, r4
 801e05a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e05e:	f000 b817 	b.w	801e090 <_kill_r>
 801e062:	2b01      	cmp	r3, #1
 801e064:	d00a      	beq.n	801e07c <_raise_r+0x4c>
 801e066:	1c59      	adds	r1, r3, #1
 801e068:	d103      	bne.n	801e072 <_raise_r+0x42>
 801e06a:	2316      	movs	r3, #22
 801e06c:	6003      	str	r3, [r0, #0]
 801e06e:	2001      	movs	r0, #1
 801e070:	e7e7      	b.n	801e042 <_raise_r+0x12>
 801e072:	2400      	movs	r4, #0
 801e074:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801e078:	4628      	mov	r0, r5
 801e07a:	4798      	blx	r3
 801e07c:	2000      	movs	r0, #0
 801e07e:	e7e0      	b.n	801e042 <_raise_r+0x12>

0801e080 <raise>:
 801e080:	4b02      	ldr	r3, [pc, #8]	; (801e08c <raise+0xc>)
 801e082:	4601      	mov	r1, r0
 801e084:	6818      	ldr	r0, [r3, #0]
 801e086:	f7ff bfd3 	b.w	801e030 <_raise_r>
 801e08a:	bf00      	nop
 801e08c:	20000064 	.word	0x20000064

0801e090 <_kill_r>:
 801e090:	b538      	push	{r3, r4, r5, lr}
 801e092:	4d07      	ldr	r5, [pc, #28]	; (801e0b0 <_kill_r+0x20>)
 801e094:	2300      	movs	r3, #0
 801e096:	4604      	mov	r4, r0
 801e098:	4608      	mov	r0, r1
 801e09a:	4611      	mov	r1, r2
 801e09c:	602b      	str	r3, [r5, #0]
 801e09e:	f7e7 ffbe 	bl	800601e <_kill>
 801e0a2:	1c43      	adds	r3, r0, #1
 801e0a4:	d102      	bne.n	801e0ac <_kill_r+0x1c>
 801e0a6:	682b      	ldr	r3, [r5, #0]
 801e0a8:	b103      	cbz	r3, 801e0ac <_kill_r+0x1c>
 801e0aa:	6023      	str	r3, [r4, #0]
 801e0ac:	bd38      	pop	{r3, r4, r5, pc}
 801e0ae:	bf00      	nop
 801e0b0:	20000dc4 	.word	0x20000dc4

0801e0b4 <_getpid_r>:
 801e0b4:	f7e7 bfab 	b.w	800600e <_getpid>

0801e0b8 <__sread>:
 801e0b8:	b510      	push	{r4, lr}
 801e0ba:	460c      	mov	r4, r1
 801e0bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e0c0:	f000 f894 	bl	801e1ec <_read_r>
 801e0c4:	2800      	cmp	r0, #0
 801e0c6:	bfab      	itete	ge
 801e0c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801e0ca:	89a3      	ldrhlt	r3, [r4, #12]
 801e0cc:	181b      	addge	r3, r3, r0
 801e0ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801e0d2:	bfac      	ite	ge
 801e0d4:	6563      	strge	r3, [r4, #84]	; 0x54
 801e0d6:	81a3      	strhlt	r3, [r4, #12]
 801e0d8:	bd10      	pop	{r4, pc}

0801e0da <__swrite>:
 801e0da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e0de:	461f      	mov	r7, r3
 801e0e0:	898b      	ldrh	r3, [r1, #12]
 801e0e2:	05db      	lsls	r3, r3, #23
 801e0e4:	4605      	mov	r5, r0
 801e0e6:	460c      	mov	r4, r1
 801e0e8:	4616      	mov	r6, r2
 801e0ea:	d505      	bpl.n	801e0f8 <__swrite+0x1e>
 801e0ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e0f0:	2302      	movs	r3, #2
 801e0f2:	2200      	movs	r2, #0
 801e0f4:	f000 f868 	bl	801e1c8 <_lseek_r>
 801e0f8:	89a3      	ldrh	r3, [r4, #12]
 801e0fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e0fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801e102:	81a3      	strh	r3, [r4, #12]
 801e104:	4632      	mov	r2, r6
 801e106:	463b      	mov	r3, r7
 801e108:	4628      	mov	r0, r5
 801e10a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e10e:	f000 b817 	b.w	801e140 <_write_r>

0801e112 <__sseek>:
 801e112:	b510      	push	{r4, lr}
 801e114:	460c      	mov	r4, r1
 801e116:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e11a:	f000 f855 	bl	801e1c8 <_lseek_r>
 801e11e:	1c43      	adds	r3, r0, #1
 801e120:	89a3      	ldrh	r3, [r4, #12]
 801e122:	bf15      	itete	ne
 801e124:	6560      	strne	r0, [r4, #84]	; 0x54
 801e126:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801e12a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801e12e:	81a3      	strheq	r3, [r4, #12]
 801e130:	bf18      	it	ne
 801e132:	81a3      	strhne	r3, [r4, #12]
 801e134:	bd10      	pop	{r4, pc}

0801e136 <__sclose>:
 801e136:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e13a:	f000 b813 	b.w	801e164 <_close_r>
	...

0801e140 <_write_r>:
 801e140:	b538      	push	{r3, r4, r5, lr}
 801e142:	4d07      	ldr	r5, [pc, #28]	; (801e160 <_write_r+0x20>)
 801e144:	4604      	mov	r4, r0
 801e146:	4608      	mov	r0, r1
 801e148:	4611      	mov	r1, r2
 801e14a:	2200      	movs	r2, #0
 801e14c:	602a      	str	r2, [r5, #0]
 801e14e:	461a      	mov	r2, r3
 801e150:	f7e7 ff9c 	bl	800608c <_write>
 801e154:	1c43      	adds	r3, r0, #1
 801e156:	d102      	bne.n	801e15e <_write_r+0x1e>
 801e158:	682b      	ldr	r3, [r5, #0]
 801e15a:	b103      	cbz	r3, 801e15e <_write_r+0x1e>
 801e15c:	6023      	str	r3, [r4, #0]
 801e15e:	bd38      	pop	{r3, r4, r5, pc}
 801e160:	20000dc4 	.word	0x20000dc4

0801e164 <_close_r>:
 801e164:	b538      	push	{r3, r4, r5, lr}
 801e166:	4d06      	ldr	r5, [pc, #24]	; (801e180 <_close_r+0x1c>)
 801e168:	2300      	movs	r3, #0
 801e16a:	4604      	mov	r4, r0
 801e16c:	4608      	mov	r0, r1
 801e16e:	602b      	str	r3, [r5, #0]
 801e170:	f7e7 ffa8 	bl	80060c4 <_close>
 801e174:	1c43      	adds	r3, r0, #1
 801e176:	d102      	bne.n	801e17e <_close_r+0x1a>
 801e178:	682b      	ldr	r3, [r5, #0]
 801e17a:	b103      	cbz	r3, 801e17e <_close_r+0x1a>
 801e17c:	6023      	str	r3, [r4, #0]
 801e17e:	bd38      	pop	{r3, r4, r5, pc}
 801e180:	20000dc4 	.word	0x20000dc4

0801e184 <_fstat_r>:
 801e184:	b538      	push	{r3, r4, r5, lr}
 801e186:	4d07      	ldr	r5, [pc, #28]	; (801e1a4 <_fstat_r+0x20>)
 801e188:	2300      	movs	r3, #0
 801e18a:	4604      	mov	r4, r0
 801e18c:	4608      	mov	r0, r1
 801e18e:	4611      	mov	r1, r2
 801e190:	602b      	str	r3, [r5, #0]
 801e192:	f7e7 ffa3 	bl	80060dc <_fstat>
 801e196:	1c43      	adds	r3, r0, #1
 801e198:	d102      	bne.n	801e1a0 <_fstat_r+0x1c>
 801e19a:	682b      	ldr	r3, [r5, #0]
 801e19c:	b103      	cbz	r3, 801e1a0 <_fstat_r+0x1c>
 801e19e:	6023      	str	r3, [r4, #0]
 801e1a0:	bd38      	pop	{r3, r4, r5, pc}
 801e1a2:	bf00      	nop
 801e1a4:	20000dc4 	.word	0x20000dc4

0801e1a8 <_isatty_r>:
 801e1a8:	b538      	push	{r3, r4, r5, lr}
 801e1aa:	4d06      	ldr	r5, [pc, #24]	; (801e1c4 <_isatty_r+0x1c>)
 801e1ac:	2300      	movs	r3, #0
 801e1ae:	4604      	mov	r4, r0
 801e1b0:	4608      	mov	r0, r1
 801e1b2:	602b      	str	r3, [r5, #0]
 801e1b4:	f7e7 ffa2 	bl	80060fc <_isatty>
 801e1b8:	1c43      	adds	r3, r0, #1
 801e1ba:	d102      	bne.n	801e1c2 <_isatty_r+0x1a>
 801e1bc:	682b      	ldr	r3, [r5, #0]
 801e1be:	b103      	cbz	r3, 801e1c2 <_isatty_r+0x1a>
 801e1c0:	6023      	str	r3, [r4, #0]
 801e1c2:	bd38      	pop	{r3, r4, r5, pc}
 801e1c4:	20000dc4 	.word	0x20000dc4

0801e1c8 <_lseek_r>:
 801e1c8:	b538      	push	{r3, r4, r5, lr}
 801e1ca:	4d07      	ldr	r5, [pc, #28]	; (801e1e8 <_lseek_r+0x20>)
 801e1cc:	4604      	mov	r4, r0
 801e1ce:	4608      	mov	r0, r1
 801e1d0:	4611      	mov	r1, r2
 801e1d2:	2200      	movs	r2, #0
 801e1d4:	602a      	str	r2, [r5, #0]
 801e1d6:	461a      	mov	r2, r3
 801e1d8:	f7e7 ff9b 	bl	8006112 <_lseek>
 801e1dc:	1c43      	adds	r3, r0, #1
 801e1de:	d102      	bne.n	801e1e6 <_lseek_r+0x1e>
 801e1e0:	682b      	ldr	r3, [r5, #0]
 801e1e2:	b103      	cbz	r3, 801e1e6 <_lseek_r+0x1e>
 801e1e4:	6023      	str	r3, [r4, #0]
 801e1e6:	bd38      	pop	{r3, r4, r5, pc}
 801e1e8:	20000dc4 	.word	0x20000dc4

0801e1ec <_read_r>:
 801e1ec:	b538      	push	{r3, r4, r5, lr}
 801e1ee:	4d07      	ldr	r5, [pc, #28]	; (801e20c <_read_r+0x20>)
 801e1f0:	4604      	mov	r4, r0
 801e1f2:	4608      	mov	r0, r1
 801e1f4:	4611      	mov	r1, r2
 801e1f6:	2200      	movs	r2, #0
 801e1f8:	602a      	str	r2, [r5, #0]
 801e1fa:	461a      	mov	r2, r3
 801e1fc:	f7e7 ff29 	bl	8006052 <_read>
 801e200:	1c43      	adds	r3, r0, #1
 801e202:	d102      	bne.n	801e20a <_read_r+0x1e>
 801e204:	682b      	ldr	r3, [r5, #0]
 801e206:	b103      	cbz	r3, 801e20a <_read_r+0x1e>
 801e208:	6023      	str	r3, [r4, #0]
 801e20a:	bd38      	pop	{r3, r4, r5, pc}
 801e20c:	20000dc4 	.word	0x20000dc4

0801e210 <memcmp>:
 801e210:	b510      	push	{r4, lr}
 801e212:	3901      	subs	r1, #1
 801e214:	4402      	add	r2, r0
 801e216:	4290      	cmp	r0, r2
 801e218:	d101      	bne.n	801e21e <memcmp+0xe>
 801e21a:	2000      	movs	r0, #0
 801e21c:	e005      	b.n	801e22a <memcmp+0x1a>
 801e21e:	7803      	ldrb	r3, [r0, #0]
 801e220:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801e224:	42a3      	cmp	r3, r4
 801e226:	d001      	beq.n	801e22c <memcmp+0x1c>
 801e228:	1b18      	subs	r0, r3, r4
 801e22a:	bd10      	pop	{r4, pc}
 801e22c:	3001      	adds	r0, #1
 801e22e:	e7f2      	b.n	801e216 <memcmp+0x6>

0801e230 <floor>:
 801e230:	ec51 0b10 	vmov	r0, r1, d0
 801e234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e238:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801e23c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801e240:	2e13      	cmp	r6, #19
 801e242:	ee10 5a10 	vmov	r5, s0
 801e246:	ee10 8a10 	vmov	r8, s0
 801e24a:	460c      	mov	r4, r1
 801e24c:	dc32      	bgt.n	801e2b4 <floor+0x84>
 801e24e:	2e00      	cmp	r6, #0
 801e250:	da14      	bge.n	801e27c <floor+0x4c>
 801e252:	a333      	add	r3, pc, #204	; (adr r3, 801e320 <floor+0xf0>)
 801e254:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e258:	f7fa fc48 	bl	8018aec <__adddf3>
 801e25c:	2200      	movs	r2, #0
 801e25e:	2300      	movs	r3, #0
 801e260:	f7fb f88a 	bl	8019378 <__aeabi_dcmpgt>
 801e264:	b138      	cbz	r0, 801e276 <floor+0x46>
 801e266:	2c00      	cmp	r4, #0
 801e268:	da57      	bge.n	801e31a <floor+0xea>
 801e26a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801e26e:	431d      	orrs	r5, r3
 801e270:	d001      	beq.n	801e276 <floor+0x46>
 801e272:	4c2d      	ldr	r4, [pc, #180]	; (801e328 <floor+0xf8>)
 801e274:	2500      	movs	r5, #0
 801e276:	4621      	mov	r1, r4
 801e278:	4628      	mov	r0, r5
 801e27a:	e025      	b.n	801e2c8 <floor+0x98>
 801e27c:	4f2b      	ldr	r7, [pc, #172]	; (801e32c <floor+0xfc>)
 801e27e:	4137      	asrs	r7, r6
 801e280:	ea01 0307 	and.w	r3, r1, r7
 801e284:	4303      	orrs	r3, r0
 801e286:	d01f      	beq.n	801e2c8 <floor+0x98>
 801e288:	a325      	add	r3, pc, #148	; (adr r3, 801e320 <floor+0xf0>)
 801e28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e28e:	f7fa fc2d 	bl	8018aec <__adddf3>
 801e292:	2200      	movs	r2, #0
 801e294:	2300      	movs	r3, #0
 801e296:	f7fb f86f 	bl	8019378 <__aeabi_dcmpgt>
 801e29a:	2800      	cmp	r0, #0
 801e29c:	d0eb      	beq.n	801e276 <floor+0x46>
 801e29e:	2c00      	cmp	r4, #0
 801e2a0:	bfbe      	ittt	lt
 801e2a2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801e2a6:	fa43 f606 	asrlt.w	r6, r3, r6
 801e2aa:	19a4      	addlt	r4, r4, r6
 801e2ac:	ea24 0407 	bic.w	r4, r4, r7
 801e2b0:	2500      	movs	r5, #0
 801e2b2:	e7e0      	b.n	801e276 <floor+0x46>
 801e2b4:	2e33      	cmp	r6, #51	; 0x33
 801e2b6:	dd0b      	ble.n	801e2d0 <floor+0xa0>
 801e2b8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801e2bc:	d104      	bne.n	801e2c8 <floor+0x98>
 801e2be:	ee10 2a10 	vmov	r2, s0
 801e2c2:	460b      	mov	r3, r1
 801e2c4:	f7fa fc12 	bl	8018aec <__adddf3>
 801e2c8:	ec41 0b10 	vmov	d0, r0, r1
 801e2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e2d0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801e2d4:	f04f 33ff 	mov.w	r3, #4294967295
 801e2d8:	fa23 f707 	lsr.w	r7, r3, r7
 801e2dc:	4207      	tst	r7, r0
 801e2de:	d0f3      	beq.n	801e2c8 <floor+0x98>
 801e2e0:	a30f      	add	r3, pc, #60	; (adr r3, 801e320 <floor+0xf0>)
 801e2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2e6:	f7fa fc01 	bl	8018aec <__adddf3>
 801e2ea:	2200      	movs	r2, #0
 801e2ec:	2300      	movs	r3, #0
 801e2ee:	f7fb f843 	bl	8019378 <__aeabi_dcmpgt>
 801e2f2:	2800      	cmp	r0, #0
 801e2f4:	d0bf      	beq.n	801e276 <floor+0x46>
 801e2f6:	2c00      	cmp	r4, #0
 801e2f8:	da02      	bge.n	801e300 <floor+0xd0>
 801e2fa:	2e14      	cmp	r6, #20
 801e2fc:	d103      	bne.n	801e306 <floor+0xd6>
 801e2fe:	3401      	adds	r4, #1
 801e300:	ea25 0507 	bic.w	r5, r5, r7
 801e304:	e7b7      	b.n	801e276 <floor+0x46>
 801e306:	2301      	movs	r3, #1
 801e308:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801e30c:	fa03 f606 	lsl.w	r6, r3, r6
 801e310:	4435      	add	r5, r6
 801e312:	4545      	cmp	r5, r8
 801e314:	bf38      	it	cc
 801e316:	18e4      	addcc	r4, r4, r3
 801e318:	e7f2      	b.n	801e300 <floor+0xd0>
 801e31a:	2500      	movs	r5, #0
 801e31c:	462c      	mov	r4, r5
 801e31e:	e7aa      	b.n	801e276 <floor+0x46>
 801e320:	8800759c 	.word	0x8800759c
 801e324:	7e37e43c 	.word	0x7e37e43c
 801e328:	bff00000 	.word	0xbff00000
 801e32c:	000fffff 	.word	0x000fffff

0801e330 <pow>:
 801e330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e332:	ed2d 8b02 	vpush	{d8}
 801e336:	eeb0 8a40 	vmov.f32	s16, s0
 801e33a:	eef0 8a60 	vmov.f32	s17, s1
 801e33e:	ec55 4b11 	vmov	r4, r5, d1
 801e342:	f000 f865 	bl	801e410 <__ieee754_pow>
 801e346:	4622      	mov	r2, r4
 801e348:	462b      	mov	r3, r5
 801e34a:	4620      	mov	r0, r4
 801e34c:	4629      	mov	r1, r5
 801e34e:	ec57 6b10 	vmov	r6, r7, d0
 801e352:	f7fb f81b 	bl	801938c <__aeabi_dcmpun>
 801e356:	2800      	cmp	r0, #0
 801e358:	d13b      	bne.n	801e3d2 <pow+0xa2>
 801e35a:	ec51 0b18 	vmov	r0, r1, d8
 801e35e:	2200      	movs	r2, #0
 801e360:	2300      	movs	r3, #0
 801e362:	f7fa ffe1 	bl	8019328 <__aeabi_dcmpeq>
 801e366:	b1b8      	cbz	r0, 801e398 <pow+0x68>
 801e368:	2200      	movs	r2, #0
 801e36a:	2300      	movs	r3, #0
 801e36c:	4620      	mov	r0, r4
 801e36e:	4629      	mov	r1, r5
 801e370:	f7fa ffda 	bl	8019328 <__aeabi_dcmpeq>
 801e374:	2800      	cmp	r0, #0
 801e376:	d146      	bne.n	801e406 <pow+0xd6>
 801e378:	ec45 4b10 	vmov	d0, r4, r5
 801e37c:	f000 fe61 	bl	801f042 <finite>
 801e380:	b338      	cbz	r0, 801e3d2 <pow+0xa2>
 801e382:	2200      	movs	r2, #0
 801e384:	2300      	movs	r3, #0
 801e386:	4620      	mov	r0, r4
 801e388:	4629      	mov	r1, r5
 801e38a:	f7fa ffd7 	bl	801933c <__aeabi_dcmplt>
 801e38e:	b300      	cbz	r0, 801e3d2 <pow+0xa2>
 801e390:	f7fb fa90 	bl	80198b4 <__errno>
 801e394:	2322      	movs	r3, #34	; 0x22
 801e396:	e01b      	b.n	801e3d0 <pow+0xa0>
 801e398:	ec47 6b10 	vmov	d0, r6, r7
 801e39c:	f000 fe51 	bl	801f042 <finite>
 801e3a0:	b9e0      	cbnz	r0, 801e3dc <pow+0xac>
 801e3a2:	eeb0 0a48 	vmov.f32	s0, s16
 801e3a6:	eef0 0a68 	vmov.f32	s1, s17
 801e3aa:	f000 fe4a 	bl	801f042 <finite>
 801e3ae:	b1a8      	cbz	r0, 801e3dc <pow+0xac>
 801e3b0:	ec45 4b10 	vmov	d0, r4, r5
 801e3b4:	f000 fe45 	bl	801f042 <finite>
 801e3b8:	b180      	cbz	r0, 801e3dc <pow+0xac>
 801e3ba:	4632      	mov	r2, r6
 801e3bc:	463b      	mov	r3, r7
 801e3be:	4630      	mov	r0, r6
 801e3c0:	4639      	mov	r1, r7
 801e3c2:	f7fa ffe3 	bl	801938c <__aeabi_dcmpun>
 801e3c6:	2800      	cmp	r0, #0
 801e3c8:	d0e2      	beq.n	801e390 <pow+0x60>
 801e3ca:	f7fb fa73 	bl	80198b4 <__errno>
 801e3ce:	2321      	movs	r3, #33	; 0x21
 801e3d0:	6003      	str	r3, [r0, #0]
 801e3d2:	ecbd 8b02 	vpop	{d8}
 801e3d6:	ec47 6b10 	vmov	d0, r6, r7
 801e3da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e3dc:	2200      	movs	r2, #0
 801e3de:	2300      	movs	r3, #0
 801e3e0:	4630      	mov	r0, r6
 801e3e2:	4639      	mov	r1, r7
 801e3e4:	f7fa ffa0 	bl	8019328 <__aeabi_dcmpeq>
 801e3e8:	2800      	cmp	r0, #0
 801e3ea:	d0f2      	beq.n	801e3d2 <pow+0xa2>
 801e3ec:	eeb0 0a48 	vmov.f32	s0, s16
 801e3f0:	eef0 0a68 	vmov.f32	s1, s17
 801e3f4:	f000 fe25 	bl	801f042 <finite>
 801e3f8:	2800      	cmp	r0, #0
 801e3fa:	d0ea      	beq.n	801e3d2 <pow+0xa2>
 801e3fc:	ec45 4b10 	vmov	d0, r4, r5
 801e400:	f000 fe1f 	bl	801f042 <finite>
 801e404:	e7c3      	b.n	801e38e <pow+0x5e>
 801e406:	4f01      	ldr	r7, [pc, #4]	; (801e40c <pow+0xdc>)
 801e408:	2600      	movs	r6, #0
 801e40a:	e7e2      	b.n	801e3d2 <pow+0xa2>
 801e40c:	3ff00000 	.word	0x3ff00000

0801e410 <__ieee754_pow>:
 801e410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e414:	ed2d 8b06 	vpush	{d8-d10}
 801e418:	b089      	sub	sp, #36	; 0x24
 801e41a:	ed8d 1b00 	vstr	d1, [sp]
 801e41e:	e9dd 2900 	ldrd	r2, r9, [sp]
 801e422:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801e426:	ea58 0102 	orrs.w	r1, r8, r2
 801e42a:	ec57 6b10 	vmov	r6, r7, d0
 801e42e:	d115      	bne.n	801e45c <__ieee754_pow+0x4c>
 801e430:	19b3      	adds	r3, r6, r6
 801e432:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801e436:	4152      	adcs	r2, r2
 801e438:	4299      	cmp	r1, r3
 801e43a:	4b89      	ldr	r3, [pc, #548]	; (801e660 <__ieee754_pow+0x250>)
 801e43c:	4193      	sbcs	r3, r2
 801e43e:	f080 84d2 	bcs.w	801ede6 <__ieee754_pow+0x9d6>
 801e442:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e446:	4630      	mov	r0, r6
 801e448:	4639      	mov	r1, r7
 801e44a:	f7fa fb4f 	bl	8018aec <__adddf3>
 801e44e:	ec41 0b10 	vmov	d0, r0, r1
 801e452:	b009      	add	sp, #36	; 0x24
 801e454:	ecbd 8b06 	vpop	{d8-d10}
 801e458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e45c:	4b81      	ldr	r3, [pc, #516]	; (801e664 <__ieee754_pow+0x254>)
 801e45e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801e462:	429c      	cmp	r4, r3
 801e464:	ee10 aa10 	vmov	sl, s0
 801e468:	463d      	mov	r5, r7
 801e46a:	dc06      	bgt.n	801e47a <__ieee754_pow+0x6a>
 801e46c:	d101      	bne.n	801e472 <__ieee754_pow+0x62>
 801e46e:	2e00      	cmp	r6, #0
 801e470:	d1e7      	bne.n	801e442 <__ieee754_pow+0x32>
 801e472:	4598      	cmp	r8, r3
 801e474:	dc01      	bgt.n	801e47a <__ieee754_pow+0x6a>
 801e476:	d10f      	bne.n	801e498 <__ieee754_pow+0x88>
 801e478:	b172      	cbz	r2, 801e498 <__ieee754_pow+0x88>
 801e47a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801e47e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801e482:	ea55 050a 	orrs.w	r5, r5, sl
 801e486:	d1dc      	bne.n	801e442 <__ieee754_pow+0x32>
 801e488:	e9dd 3200 	ldrd	r3, r2, [sp]
 801e48c:	18db      	adds	r3, r3, r3
 801e48e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801e492:	4152      	adcs	r2, r2
 801e494:	429d      	cmp	r5, r3
 801e496:	e7d0      	b.n	801e43a <__ieee754_pow+0x2a>
 801e498:	2d00      	cmp	r5, #0
 801e49a:	da3b      	bge.n	801e514 <__ieee754_pow+0x104>
 801e49c:	4b72      	ldr	r3, [pc, #456]	; (801e668 <__ieee754_pow+0x258>)
 801e49e:	4598      	cmp	r8, r3
 801e4a0:	dc51      	bgt.n	801e546 <__ieee754_pow+0x136>
 801e4a2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801e4a6:	4598      	cmp	r8, r3
 801e4a8:	f340 84ac 	ble.w	801ee04 <__ieee754_pow+0x9f4>
 801e4ac:	ea4f 5328 	mov.w	r3, r8, asr #20
 801e4b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801e4b4:	2b14      	cmp	r3, #20
 801e4b6:	dd0f      	ble.n	801e4d8 <__ieee754_pow+0xc8>
 801e4b8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801e4bc:	fa22 f103 	lsr.w	r1, r2, r3
 801e4c0:	fa01 f303 	lsl.w	r3, r1, r3
 801e4c4:	4293      	cmp	r3, r2
 801e4c6:	f040 849d 	bne.w	801ee04 <__ieee754_pow+0x9f4>
 801e4ca:	f001 0101 	and.w	r1, r1, #1
 801e4ce:	f1c1 0302 	rsb	r3, r1, #2
 801e4d2:	9304      	str	r3, [sp, #16]
 801e4d4:	b182      	cbz	r2, 801e4f8 <__ieee754_pow+0xe8>
 801e4d6:	e05f      	b.n	801e598 <__ieee754_pow+0x188>
 801e4d8:	2a00      	cmp	r2, #0
 801e4da:	d15b      	bne.n	801e594 <__ieee754_pow+0x184>
 801e4dc:	f1c3 0314 	rsb	r3, r3, #20
 801e4e0:	fa48 f103 	asr.w	r1, r8, r3
 801e4e4:	fa01 f303 	lsl.w	r3, r1, r3
 801e4e8:	4543      	cmp	r3, r8
 801e4ea:	f040 8488 	bne.w	801edfe <__ieee754_pow+0x9ee>
 801e4ee:	f001 0101 	and.w	r1, r1, #1
 801e4f2:	f1c1 0302 	rsb	r3, r1, #2
 801e4f6:	9304      	str	r3, [sp, #16]
 801e4f8:	4b5c      	ldr	r3, [pc, #368]	; (801e66c <__ieee754_pow+0x25c>)
 801e4fa:	4598      	cmp	r8, r3
 801e4fc:	d132      	bne.n	801e564 <__ieee754_pow+0x154>
 801e4fe:	f1b9 0f00 	cmp.w	r9, #0
 801e502:	f280 8478 	bge.w	801edf6 <__ieee754_pow+0x9e6>
 801e506:	4959      	ldr	r1, [pc, #356]	; (801e66c <__ieee754_pow+0x25c>)
 801e508:	4632      	mov	r2, r6
 801e50a:	463b      	mov	r3, r7
 801e50c:	2000      	movs	r0, #0
 801e50e:	f7fa fdcd 	bl	80190ac <__aeabi_ddiv>
 801e512:	e79c      	b.n	801e44e <__ieee754_pow+0x3e>
 801e514:	2300      	movs	r3, #0
 801e516:	9304      	str	r3, [sp, #16]
 801e518:	2a00      	cmp	r2, #0
 801e51a:	d13d      	bne.n	801e598 <__ieee754_pow+0x188>
 801e51c:	4b51      	ldr	r3, [pc, #324]	; (801e664 <__ieee754_pow+0x254>)
 801e51e:	4598      	cmp	r8, r3
 801e520:	d1ea      	bne.n	801e4f8 <__ieee754_pow+0xe8>
 801e522:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801e526:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801e52a:	ea53 030a 	orrs.w	r3, r3, sl
 801e52e:	f000 845a 	beq.w	801ede6 <__ieee754_pow+0x9d6>
 801e532:	4b4f      	ldr	r3, [pc, #316]	; (801e670 <__ieee754_pow+0x260>)
 801e534:	429c      	cmp	r4, r3
 801e536:	dd08      	ble.n	801e54a <__ieee754_pow+0x13a>
 801e538:	f1b9 0f00 	cmp.w	r9, #0
 801e53c:	f2c0 8457 	blt.w	801edee <__ieee754_pow+0x9de>
 801e540:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e544:	e783      	b.n	801e44e <__ieee754_pow+0x3e>
 801e546:	2302      	movs	r3, #2
 801e548:	e7e5      	b.n	801e516 <__ieee754_pow+0x106>
 801e54a:	f1b9 0f00 	cmp.w	r9, #0
 801e54e:	f04f 0000 	mov.w	r0, #0
 801e552:	f04f 0100 	mov.w	r1, #0
 801e556:	f6bf af7a 	bge.w	801e44e <__ieee754_pow+0x3e>
 801e55a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801e55e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801e562:	e774      	b.n	801e44e <__ieee754_pow+0x3e>
 801e564:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801e568:	d106      	bne.n	801e578 <__ieee754_pow+0x168>
 801e56a:	4632      	mov	r2, r6
 801e56c:	463b      	mov	r3, r7
 801e56e:	4630      	mov	r0, r6
 801e570:	4639      	mov	r1, r7
 801e572:	f7fa fc71 	bl	8018e58 <__aeabi_dmul>
 801e576:	e76a      	b.n	801e44e <__ieee754_pow+0x3e>
 801e578:	4b3e      	ldr	r3, [pc, #248]	; (801e674 <__ieee754_pow+0x264>)
 801e57a:	4599      	cmp	r9, r3
 801e57c:	d10c      	bne.n	801e598 <__ieee754_pow+0x188>
 801e57e:	2d00      	cmp	r5, #0
 801e580:	db0a      	blt.n	801e598 <__ieee754_pow+0x188>
 801e582:	ec47 6b10 	vmov	d0, r6, r7
 801e586:	b009      	add	sp, #36	; 0x24
 801e588:	ecbd 8b06 	vpop	{d8-d10}
 801e58c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e590:	f000 bc6c 	b.w	801ee6c <__ieee754_sqrt>
 801e594:	2300      	movs	r3, #0
 801e596:	9304      	str	r3, [sp, #16]
 801e598:	ec47 6b10 	vmov	d0, r6, r7
 801e59c:	f000 fd48 	bl	801f030 <fabs>
 801e5a0:	ec51 0b10 	vmov	r0, r1, d0
 801e5a4:	f1ba 0f00 	cmp.w	sl, #0
 801e5a8:	d129      	bne.n	801e5fe <__ieee754_pow+0x1ee>
 801e5aa:	b124      	cbz	r4, 801e5b6 <__ieee754_pow+0x1a6>
 801e5ac:	4b2f      	ldr	r3, [pc, #188]	; (801e66c <__ieee754_pow+0x25c>)
 801e5ae:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801e5b2:	429a      	cmp	r2, r3
 801e5b4:	d123      	bne.n	801e5fe <__ieee754_pow+0x1ee>
 801e5b6:	f1b9 0f00 	cmp.w	r9, #0
 801e5ba:	da05      	bge.n	801e5c8 <__ieee754_pow+0x1b8>
 801e5bc:	4602      	mov	r2, r0
 801e5be:	460b      	mov	r3, r1
 801e5c0:	2000      	movs	r0, #0
 801e5c2:	492a      	ldr	r1, [pc, #168]	; (801e66c <__ieee754_pow+0x25c>)
 801e5c4:	f7fa fd72 	bl	80190ac <__aeabi_ddiv>
 801e5c8:	2d00      	cmp	r5, #0
 801e5ca:	f6bf af40 	bge.w	801e44e <__ieee754_pow+0x3e>
 801e5ce:	9b04      	ldr	r3, [sp, #16]
 801e5d0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801e5d4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801e5d8:	4323      	orrs	r3, r4
 801e5da:	d108      	bne.n	801e5ee <__ieee754_pow+0x1de>
 801e5dc:	4602      	mov	r2, r0
 801e5de:	460b      	mov	r3, r1
 801e5e0:	4610      	mov	r0, r2
 801e5e2:	4619      	mov	r1, r3
 801e5e4:	f7fa fa80 	bl	8018ae8 <__aeabi_dsub>
 801e5e8:	4602      	mov	r2, r0
 801e5ea:	460b      	mov	r3, r1
 801e5ec:	e78f      	b.n	801e50e <__ieee754_pow+0xfe>
 801e5ee:	9b04      	ldr	r3, [sp, #16]
 801e5f0:	2b01      	cmp	r3, #1
 801e5f2:	f47f af2c 	bne.w	801e44e <__ieee754_pow+0x3e>
 801e5f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e5fa:	4619      	mov	r1, r3
 801e5fc:	e727      	b.n	801e44e <__ieee754_pow+0x3e>
 801e5fe:	0feb      	lsrs	r3, r5, #31
 801e600:	3b01      	subs	r3, #1
 801e602:	9306      	str	r3, [sp, #24]
 801e604:	9a06      	ldr	r2, [sp, #24]
 801e606:	9b04      	ldr	r3, [sp, #16]
 801e608:	4313      	orrs	r3, r2
 801e60a:	d102      	bne.n	801e612 <__ieee754_pow+0x202>
 801e60c:	4632      	mov	r2, r6
 801e60e:	463b      	mov	r3, r7
 801e610:	e7e6      	b.n	801e5e0 <__ieee754_pow+0x1d0>
 801e612:	4b19      	ldr	r3, [pc, #100]	; (801e678 <__ieee754_pow+0x268>)
 801e614:	4598      	cmp	r8, r3
 801e616:	f340 80fb 	ble.w	801e810 <__ieee754_pow+0x400>
 801e61a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801e61e:	4598      	cmp	r8, r3
 801e620:	4b13      	ldr	r3, [pc, #76]	; (801e670 <__ieee754_pow+0x260>)
 801e622:	dd0c      	ble.n	801e63e <__ieee754_pow+0x22e>
 801e624:	429c      	cmp	r4, r3
 801e626:	dc0f      	bgt.n	801e648 <__ieee754_pow+0x238>
 801e628:	f1b9 0f00 	cmp.w	r9, #0
 801e62c:	da0f      	bge.n	801e64e <__ieee754_pow+0x23e>
 801e62e:	2000      	movs	r0, #0
 801e630:	b009      	add	sp, #36	; 0x24
 801e632:	ecbd 8b06 	vpop	{d8-d10}
 801e636:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e63a:	f000 bcf0 	b.w	801f01e <__math_oflow>
 801e63e:	429c      	cmp	r4, r3
 801e640:	dbf2      	blt.n	801e628 <__ieee754_pow+0x218>
 801e642:	4b0a      	ldr	r3, [pc, #40]	; (801e66c <__ieee754_pow+0x25c>)
 801e644:	429c      	cmp	r4, r3
 801e646:	dd19      	ble.n	801e67c <__ieee754_pow+0x26c>
 801e648:	f1b9 0f00 	cmp.w	r9, #0
 801e64c:	dcef      	bgt.n	801e62e <__ieee754_pow+0x21e>
 801e64e:	2000      	movs	r0, #0
 801e650:	b009      	add	sp, #36	; 0x24
 801e652:	ecbd 8b06 	vpop	{d8-d10}
 801e656:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e65a:	f000 bcd7 	b.w	801f00c <__math_uflow>
 801e65e:	bf00      	nop
 801e660:	fff00000 	.word	0xfff00000
 801e664:	7ff00000 	.word	0x7ff00000
 801e668:	433fffff 	.word	0x433fffff
 801e66c:	3ff00000 	.word	0x3ff00000
 801e670:	3fefffff 	.word	0x3fefffff
 801e674:	3fe00000 	.word	0x3fe00000
 801e678:	41e00000 	.word	0x41e00000
 801e67c:	4b60      	ldr	r3, [pc, #384]	; (801e800 <__ieee754_pow+0x3f0>)
 801e67e:	2200      	movs	r2, #0
 801e680:	f7fa fa32 	bl	8018ae8 <__aeabi_dsub>
 801e684:	a354      	add	r3, pc, #336	; (adr r3, 801e7d8 <__ieee754_pow+0x3c8>)
 801e686:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e68a:	4604      	mov	r4, r0
 801e68c:	460d      	mov	r5, r1
 801e68e:	f7fa fbe3 	bl	8018e58 <__aeabi_dmul>
 801e692:	a353      	add	r3, pc, #332	; (adr r3, 801e7e0 <__ieee754_pow+0x3d0>)
 801e694:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e698:	4606      	mov	r6, r0
 801e69a:	460f      	mov	r7, r1
 801e69c:	4620      	mov	r0, r4
 801e69e:	4629      	mov	r1, r5
 801e6a0:	f7fa fbda 	bl	8018e58 <__aeabi_dmul>
 801e6a4:	4b57      	ldr	r3, [pc, #348]	; (801e804 <__ieee754_pow+0x3f4>)
 801e6a6:	4682      	mov	sl, r0
 801e6a8:	468b      	mov	fp, r1
 801e6aa:	2200      	movs	r2, #0
 801e6ac:	4620      	mov	r0, r4
 801e6ae:	4629      	mov	r1, r5
 801e6b0:	f7fa fbd2 	bl	8018e58 <__aeabi_dmul>
 801e6b4:	4602      	mov	r2, r0
 801e6b6:	460b      	mov	r3, r1
 801e6b8:	a14b      	add	r1, pc, #300	; (adr r1, 801e7e8 <__ieee754_pow+0x3d8>)
 801e6ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e6be:	f7fa fa13 	bl	8018ae8 <__aeabi_dsub>
 801e6c2:	4622      	mov	r2, r4
 801e6c4:	462b      	mov	r3, r5
 801e6c6:	f7fa fbc7 	bl	8018e58 <__aeabi_dmul>
 801e6ca:	4602      	mov	r2, r0
 801e6cc:	460b      	mov	r3, r1
 801e6ce:	2000      	movs	r0, #0
 801e6d0:	494d      	ldr	r1, [pc, #308]	; (801e808 <__ieee754_pow+0x3f8>)
 801e6d2:	f7fa fa09 	bl	8018ae8 <__aeabi_dsub>
 801e6d6:	4622      	mov	r2, r4
 801e6d8:	4680      	mov	r8, r0
 801e6da:	4689      	mov	r9, r1
 801e6dc:	462b      	mov	r3, r5
 801e6de:	4620      	mov	r0, r4
 801e6e0:	4629      	mov	r1, r5
 801e6e2:	f7fa fbb9 	bl	8018e58 <__aeabi_dmul>
 801e6e6:	4602      	mov	r2, r0
 801e6e8:	460b      	mov	r3, r1
 801e6ea:	4640      	mov	r0, r8
 801e6ec:	4649      	mov	r1, r9
 801e6ee:	f7fa fbb3 	bl	8018e58 <__aeabi_dmul>
 801e6f2:	a33f      	add	r3, pc, #252	; (adr r3, 801e7f0 <__ieee754_pow+0x3e0>)
 801e6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6f8:	f7fa fbae 	bl	8018e58 <__aeabi_dmul>
 801e6fc:	4602      	mov	r2, r0
 801e6fe:	460b      	mov	r3, r1
 801e700:	4650      	mov	r0, sl
 801e702:	4659      	mov	r1, fp
 801e704:	f7fa f9f0 	bl	8018ae8 <__aeabi_dsub>
 801e708:	4602      	mov	r2, r0
 801e70a:	460b      	mov	r3, r1
 801e70c:	4680      	mov	r8, r0
 801e70e:	4689      	mov	r9, r1
 801e710:	4630      	mov	r0, r6
 801e712:	4639      	mov	r1, r7
 801e714:	f7fa f9ea 	bl	8018aec <__adddf3>
 801e718:	2000      	movs	r0, #0
 801e71a:	4632      	mov	r2, r6
 801e71c:	463b      	mov	r3, r7
 801e71e:	4604      	mov	r4, r0
 801e720:	460d      	mov	r5, r1
 801e722:	f7fa f9e1 	bl	8018ae8 <__aeabi_dsub>
 801e726:	4602      	mov	r2, r0
 801e728:	460b      	mov	r3, r1
 801e72a:	4640      	mov	r0, r8
 801e72c:	4649      	mov	r1, r9
 801e72e:	f7fa f9db 	bl	8018ae8 <__aeabi_dsub>
 801e732:	9b04      	ldr	r3, [sp, #16]
 801e734:	9a06      	ldr	r2, [sp, #24]
 801e736:	3b01      	subs	r3, #1
 801e738:	4313      	orrs	r3, r2
 801e73a:	4682      	mov	sl, r0
 801e73c:	468b      	mov	fp, r1
 801e73e:	f040 81e7 	bne.w	801eb10 <__ieee754_pow+0x700>
 801e742:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 801e7f8 <__ieee754_pow+0x3e8>
 801e746:	eeb0 8a47 	vmov.f32	s16, s14
 801e74a:	eef0 8a67 	vmov.f32	s17, s15
 801e74e:	e9dd 6700 	ldrd	r6, r7, [sp]
 801e752:	2600      	movs	r6, #0
 801e754:	4632      	mov	r2, r6
 801e756:	463b      	mov	r3, r7
 801e758:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e75c:	f7fa f9c4 	bl	8018ae8 <__aeabi_dsub>
 801e760:	4622      	mov	r2, r4
 801e762:	462b      	mov	r3, r5
 801e764:	f7fa fb78 	bl	8018e58 <__aeabi_dmul>
 801e768:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e76c:	4680      	mov	r8, r0
 801e76e:	4689      	mov	r9, r1
 801e770:	4650      	mov	r0, sl
 801e772:	4659      	mov	r1, fp
 801e774:	f7fa fb70 	bl	8018e58 <__aeabi_dmul>
 801e778:	4602      	mov	r2, r0
 801e77a:	460b      	mov	r3, r1
 801e77c:	4640      	mov	r0, r8
 801e77e:	4649      	mov	r1, r9
 801e780:	f7fa f9b4 	bl	8018aec <__adddf3>
 801e784:	4632      	mov	r2, r6
 801e786:	463b      	mov	r3, r7
 801e788:	4680      	mov	r8, r0
 801e78a:	4689      	mov	r9, r1
 801e78c:	4620      	mov	r0, r4
 801e78e:	4629      	mov	r1, r5
 801e790:	f7fa fb62 	bl	8018e58 <__aeabi_dmul>
 801e794:	460b      	mov	r3, r1
 801e796:	4604      	mov	r4, r0
 801e798:	460d      	mov	r5, r1
 801e79a:	4602      	mov	r2, r0
 801e79c:	4649      	mov	r1, r9
 801e79e:	4640      	mov	r0, r8
 801e7a0:	f7fa f9a4 	bl	8018aec <__adddf3>
 801e7a4:	4b19      	ldr	r3, [pc, #100]	; (801e80c <__ieee754_pow+0x3fc>)
 801e7a6:	4299      	cmp	r1, r3
 801e7a8:	ec45 4b19 	vmov	d9, r4, r5
 801e7ac:	4606      	mov	r6, r0
 801e7ae:	460f      	mov	r7, r1
 801e7b0:	468b      	mov	fp, r1
 801e7b2:	f340 82f1 	ble.w	801ed98 <__ieee754_pow+0x988>
 801e7b6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801e7ba:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801e7be:	4303      	orrs	r3, r0
 801e7c0:	f000 81e4 	beq.w	801eb8c <__ieee754_pow+0x77c>
 801e7c4:	ec51 0b18 	vmov	r0, r1, d8
 801e7c8:	2200      	movs	r2, #0
 801e7ca:	2300      	movs	r3, #0
 801e7cc:	f7fa fdb6 	bl	801933c <__aeabi_dcmplt>
 801e7d0:	3800      	subs	r0, #0
 801e7d2:	bf18      	it	ne
 801e7d4:	2001      	movne	r0, #1
 801e7d6:	e72b      	b.n	801e630 <__ieee754_pow+0x220>
 801e7d8:	60000000 	.word	0x60000000
 801e7dc:	3ff71547 	.word	0x3ff71547
 801e7e0:	f85ddf44 	.word	0xf85ddf44
 801e7e4:	3e54ae0b 	.word	0x3e54ae0b
 801e7e8:	55555555 	.word	0x55555555
 801e7ec:	3fd55555 	.word	0x3fd55555
 801e7f0:	652b82fe 	.word	0x652b82fe
 801e7f4:	3ff71547 	.word	0x3ff71547
 801e7f8:	00000000 	.word	0x00000000
 801e7fc:	bff00000 	.word	0xbff00000
 801e800:	3ff00000 	.word	0x3ff00000
 801e804:	3fd00000 	.word	0x3fd00000
 801e808:	3fe00000 	.word	0x3fe00000
 801e80c:	408fffff 	.word	0x408fffff
 801e810:	4bd5      	ldr	r3, [pc, #852]	; (801eb68 <__ieee754_pow+0x758>)
 801e812:	402b      	ands	r3, r5
 801e814:	2200      	movs	r2, #0
 801e816:	b92b      	cbnz	r3, 801e824 <__ieee754_pow+0x414>
 801e818:	4bd4      	ldr	r3, [pc, #848]	; (801eb6c <__ieee754_pow+0x75c>)
 801e81a:	f7fa fb1d 	bl	8018e58 <__aeabi_dmul>
 801e81e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801e822:	460c      	mov	r4, r1
 801e824:	1523      	asrs	r3, r4, #20
 801e826:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801e82a:	4413      	add	r3, r2
 801e82c:	9305      	str	r3, [sp, #20]
 801e82e:	4bd0      	ldr	r3, [pc, #832]	; (801eb70 <__ieee754_pow+0x760>)
 801e830:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801e834:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801e838:	429c      	cmp	r4, r3
 801e83a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801e83e:	dd08      	ble.n	801e852 <__ieee754_pow+0x442>
 801e840:	4bcc      	ldr	r3, [pc, #816]	; (801eb74 <__ieee754_pow+0x764>)
 801e842:	429c      	cmp	r4, r3
 801e844:	f340 8162 	ble.w	801eb0c <__ieee754_pow+0x6fc>
 801e848:	9b05      	ldr	r3, [sp, #20]
 801e84a:	3301      	adds	r3, #1
 801e84c:	9305      	str	r3, [sp, #20]
 801e84e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801e852:	2400      	movs	r4, #0
 801e854:	00e3      	lsls	r3, r4, #3
 801e856:	9307      	str	r3, [sp, #28]
 801e858:	4bc7      	ldr	r3, [pc, #796]	; (801eb78 <__ieee754_pow+0x768>)
 801e85a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801e85e:	ed93 7b00 	vldr	d7, [r3]
 801e862:	4629      	mov	r1, r5
 801e864:	ec53 2b17 	vmov	r2, r3, d7
 801e868:	eeb0 9a47 	vmov.f32	s18, s14
 801e86c:	eef0 9a67 	vmov.f32	s19, s15
 801e870:	4682      	mov	sl, r0
 801e872:	f7fa f939 	bl	8018ae8 <__aeabi_dsub>
 801e876:	4652      	mov	r2, sl
 801e878:	4606      	mov	r6, r0
 801e87a:	460f      	mov	r7, r1
 801e87c:	462b      	mov	r3, r5
 801e87e:	ec51 0b19 	vmov	r0, r1, d9
 801e882:	f7fa f933 	bl	8018aec <__adddf3>
 801e886:	4602      	mov	r2, r0
 801e888:	460b      	mov	r3, r1
 801e88a:	2000      	movs	r0, #0
 801e88c:	49bb      	ldr	r1, [pc, #748]	; (801eb7c <__ieee754_pow+0x76c>)
 801e88e:	f7fa fc0d 	bl	80190ac <__aeabi_ddiv>
 801e892:	ec41 0b1a 	vmov	d10, r0, r1
 801e896:	4602      	mov	r2, r0
 801e898:	460b      	mov	r3, r1
 801e89a:	4630      	mov	r0, r6
 801e89c:	4639      	mov	r1, r7
 801e89e:	f7fa fadb 	bl	8018e58 <__aeabi_dmul>
 801e8a2:	2300      	movs	r3, #0
 801e8a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e8a8:	9302      	str	r3, [sp, #8]
 801e8aa:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801e8ae:	46ab      	mov	fp, r5
 801e8b0:	106d      	asrs	r5, r5, #1
 801e8b2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801e8b6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801e8ba:	ec41 0b18 	vmov	d8, r0, r1
 801e8be:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801e8c2:	2200      	movs	r2, #0
 801e8c4:	4640      	mov	r0, r8
 801e8c6:	4649      	mov	r1, r9
 801e8c8:	4614      	mov	r4, r2
 801e8ca:	461d      	mov	r5, r3
 801e8cc:	f7fa fac4 	bl	8018e58 <__aeabi_dmul>
 801e8d0:	4602      	mov	r2, r0
 801e8d2:	460b      	mov	r3, r1
 801e8d4:	4630      	mov	r0, r6
 801e8d6:	4639      	mov	r1, r7
 801e8d8:	f7fa f906 	bl	8018ae8 <__aeabi_dsub>
 801e8dc:	ec53 2b19 	vmov	r2, r3, d9
 801e8e0:	4606      	mov	r6, r0
 801e8e2:	460f      	mov	r7, r1
 801e8e4:	4620      	mov	r0, r4
 801e8e6:	4629      	mov	r1, r5
 801e8e8:	f7fa f8fe 	bl	8018ae8 <__aeabi_dsub>
 801e8ec:	4602      	mov	r2, r0
 801e8ee:	460b      	mov	r3, r1
 801e8f0:	4650      	mov	r0, sl
 801e8f2:	4659      	mov	r1, fp
 801e8f4:	f7fa f8f8 	bl	8018ae8 <__aeabi_dsub>
 801e8f8:	4642      	mov	r2, r8
 801e8fa:	464b      	mov	r3, r9
 801e8fc:	f7fa faac 	bl	8018e58 <__aeabi_dmul>
 801e900:	4602      	mov	r2, r0
 801e902:	460b      	mov	r3, r1
 801e904:	4630      	mov	r0, r6
 801e906:	4639      	mov	r1, r7
 801e908:	f7fa f8ee 	bl	8018ae8 <__aeabi_dsub>
 801e90c:	ec53 2b1a 	vmov	r2, r3, d10
 801e910:	f7fa faa2 	bl	8018e58 <__aeabi_dmul>
 801e914:	ec53 2b18 	vmov	r2, r3, d8
 801e918:	ec41 0b19 	vmov	d9, r0, r1
 801e91c:	ec51 0b18 	vmov	r0, r1, d8
 801e920:	f7fa fa9a 	bl	8018e58 <__aeabi_dmul>
 801e924:	a37c      	add	r3, pc, #496	; (adr r3, 801eb18 <__ieee754_pow+0x708>)
 801e926:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e92a:	4604      	mov	r4, r0
 801e92c:	460d      	mov	r5, r1
 801e92e:	f7fa fa93 	bl	8018e58 <__aeabi_dmul>
 801e932:	a37b      	add	r3, pc, #492	; (adr r3, 801eb20 <__ieee754_pow+0x710>)
 801e934:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e938:	f7fa f8d8 	bl	8018aec <__adddf3>
 801e93c:	4622      	mov	r2, r4
 801e93e:	462b      	mov	r3, r5
 801e940:	f7fa fa8a 	bl	8018e58 <__aeabi_dmul>
 801e944:	a378      	add	r3, pc, #480	; (adr r3, 801eb28 <__ieee754_pow+0x718>)
 801e946:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e94a:	f7fa f8cf 	bl	8018aec <__adddf3>
 801e94e:	4622      	mov	r2, r4
 801e950:	462b      	mov	r3, r5
 801e952:	f7fa fa81 	bl	8018e58 <__aeabi_dmul>
 801e956:	a376      	add	r3, pc, #472	; (adr r3, 801eb30 <__ieee754_pow+0x720>)
 801e958:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e95c:	f7fa f8c6 	bl	8018aec <__adddf3>
 801e960:	4622      	mov	r2, r4
 801e962:	462b      	mov	r3, r5
 801e964:	f7fa fa78 	bl	8018e58 <__aeabi_dmul>
 801e968:	a373      	add	r3, pc, #460	; (adr r3, 801eb38 <__ieee754_pow+0x728>)
 801e96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e96e:	f7fa f8bd 	bl	8018aec <__adddf3>
 801e972:	4622      	mov	r2, r4
 801e974:	462b      	mov	r3, r5
 801e976:	f7fa fa6f 	bl	8018e58 <__aeabi_dmul>
 801e97a:	a371      	add	r3, pc, #452	; (adr r3, 801eb40 <__ieee754_pow+0x730>)
 801e97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e980:	f7fa f8b4 	bl	8018aec <__adddf3>
 801e984:	4622      	mov	r2, r4
 801e986:	4606      	mov	r6, r0
 801e988:	460f      	mov	r7, r1
 801e98a:	462b      	mov	r3, r5
 801e98c:	4620      	mov	r0, r4
 801e98e:	4629      	mov	r1, r5
 801e990:	f7fa fa62 	bl	8018e58 <__aeabi_dmul>
 801e994:	4602      	mov	r2, r0
 801e996:	460b      	mov	r3, r1
 801e998:	4630      	mov	r0, r6
 801e99a:	4639      	mov	r1, r7
 801e99c:	f7fa fa5c 	bl	8018e58 <__aeabi_dmul>
 801e9a0:	4642      	mov	r2, r8
 801e9a2:	4604      	mov	r4, r0
 801e9a4:	460d      	mov	r5, r1
 801e9a6:	464b      	mov	r3, r9
 801e9a8:	ec51 0b18 	vmov	r0, r1, d8
 801e9ac:	f7fa f89e 	bl	8018aec <__adddf3>
 801e9b0:	ec53 2b19 	vmov	r2, r3, d9
 801e9b4:	f7fa fa50 	bl	8018e58 <__aeabi_dmul>
 801e9b8:	4622      	mov	r2, r4
 801e9ba:	462b      	mov	r3, r5
 801e9bc:	f7fa f896 	bl	8018aec <__adddf3>
 801e9c0:	4642      	mov	r2, r8
 801e9c2:	4682      	mov	sl, r0
 801e9c4:	468b      	mov	fp, r1
 801e9c6:	464b      	mov	r3, r9
 801e9c8:	4640      	mov	r0, r8
 801e9ca:	4649      	mov	r1, r9
 801e9cc:	f7fa fa44 	bl	8018e58 <__aeabi_dmul>
 801e9d0:	4b6b      	ldr	r3, [pc, #428]	; (801eb80 <__ieee754_pow+0x770>)
 801e9d2:	2200      	movs	r2, #0
 801e9d4:	4606      	mov	r6, r0
 801e9d6:	460f      	mov	r7, r1
 801e9d8:	f7fa f888 	bl	8018aec <__adddf3>
 801e9dc:	4652      	mov	r2, sl
 801e9de:	465b      	mov	r3, fp
 801e9e0:	f7fa f884 	bl	8018aec <__adddf3>
 801e9e4:	2000      	movs	r0, #0
 801e9e6:	4604      	mov	r4, r0
 801e9e8:	460d      	mov	r5, r1
 801e9ea:	4602      	mov	r2, r0
 801e9ec:	460b      	mov	r3, r1
 801e9ee:	4640      	mov	r0, r8
 801e9f0:	4649      	mov	r1, r9
 801e9f2:	f7fa fa31 	bl	8018e58 <__aeabi_dmul>
 801e9f6:	4b62      	ldr	r3, [pc, #392]	; (801eb80 <__ieee754_pow+0x770>)
 801e9f8:	4680      	mov	r8, r0
 801e9fa:	4689      	mov	r9, r1
 801e9fc:	2200      	movs	r2, #0
 801e9fe:	4620      	mov	r0, r4
 801ea00:	4629      	mov	r1, r5
 801ea02:	f7fa f871 	bl	8018ae8 <__aeabi_dsub>
 801ea06:	4632      	mov	r2, r6
 801ea08:	463b      	mov	r3, r7
 801ea0a:	f7fa f86d 	bl	8018ae8 <__aeabi_dsub>
 801ea0e:	4602      	mov	r2, r0
 801ea10:	460b      	mov	r3, r1
 801ea12:	4650      	mov	r0, sl
 801ea14:	4659      	mov	r1, fp
 801ea16:	f7fa f867 	bl	8018ae8 <__aeabi_dsub>
 801ea1a:	ec53 2b18 	vmov	r2, r3, d8
 801ea1e:	f7fa fa1b 	bl	8018e58 <__aeabi_dmul>
 801ea22:	4622      	mov	r2, r4
 801ea24:	4606      	mov	r6, r0
 801ea26:	460f      	mov	r7, r1
 801ea28:	462b      	mov	r3, r5
 801ea2a:	ec51 0b19 	vmov	r0, r1, d9
 801ea2e:	f7fa fa13 	bl	8018e58 <__aeabi_dmul>
 801ea32:	4602      	mov	r2, r0
 801ea34:	460b      	mov	r3, r1
 801ea36:	4630      	mov	r0, r6
 801ea38:	4639      	mov	r1, r7
 801ea3a:	f7fa f857 	bl	8018aec <__adddf3>
 801ea3e:	4606      	mov	r6, r0
 801ea40:	460f      	mov	r7, r1
 801ea42:	4602      	mov	r2, r0
 801ea44:	460b      	mov	r3, r1
 801ea46:	4640      	mov	r0, r8
 801ea48:	4649      	mov	r1, r9
 801ea4a:	f7fa f84f 	bl	8018aec <__adddf3>
 801ea4e:	a33e      	add	r3, pc, #248	; (adr r3, 801eb48 <__ieee754_pow+0x738>)
 801ea50:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea54:	2000      	movs	r0, #0
 801ea56:	4604      	mov	r4, r0
 801ea58:	460d      	mov	r5, r1
 801ea5a:	f7fa f9fd 	bl	8018e58 <__aeabi_dmul>
 801ea5e:	4642      	mov	r2, r8
 801ea60:	ec41 0b18 	vmov	d8, r0, r1
 801ea64:	464b      	mov	r3, r9
 801ea66:	4620      	mov	r0, r4
 801ea68:	4629      	mov	r1, r5
 801ea6a:	f7fa f83d 	bl	8018ae8 <__aeabi_dsub>
 801ea6e:	4602      	mov	r2, r0
 801ea70:	460b      	mov	r3, r1
 801ea72:	4630      	mov	r0, r6
 801ea74:	4639      	mov	r1, r7
 801ea76:	f7fa f837 	bl	8018ae8 <__aeabi_dsub>
 801ea7a:	a335      	add	r3, pc, #212	; (adr r3, 801eb50 <__ieee754_pow+0x740>)
 801ea7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea80:	f7fa f9ea 	bl	8018e58 <__aeabi_dmul>
 801ea84:	a334      	add	r3, pc, #208	; (adr r3, 801eb58 <__ieee754_pow+0x748>)
 801ea86:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea8a:	4606      	mov	r6, r0
 801ea8c:	460f      	mov	r7, r1
 801ea8e:	4620      	mov	r0, r4
 801ea90:	4629      	mov	r1, r5
 801ea92:	f7fa f9e1 	bl	8018e58 <__aeabi_dmul>
 801ea96:	4602      	mov	r2, r0
 801ea98:	460b      	mov	r3, r1
 801ea9a:	4630      	mov	r0, r6
 801ea9c:	4639      	mov	r1, r7
 801ea9e:	f7fa f825 	bl	8018aec <__adddf3>
 801eaa2:	9a07      	ldr	r2, [sp, #28]
 801eaa4:	4b37      	ldr	r3, [pc, #220]	; (801eb84 <__ieee754_pow+0x774>)
 801eaa6:	4413      	add	r3, r2
 801eaa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eaac:	f7fa f81e 	bl	8018aec <__adddf3>
 801eab0:	4682      	mov	sl, r0
 801eab2:	9805      	ldr	r0, [sp, #20]
 801eab4:	468b      	mov	fp, r1
 801eab6:	f7fa f965 	bl	8018d84 <__aeabi_i2d>
 801eaba:	9a07      	ldr	r2, [sp, #28]
 801eabc:	4b32      	ldr	r3, [pc, #200]	; (801eb88 <__ieee754_pow+0x778>)
 801eabe:	4413      	add	r3, r2
 801eac0:	e9d3 8900 	ldrd	r8, r9, [r3]
 801eac4:	4606      	mov	r6, r0
 801eac6:	460f      	mov	r7, r1
 801eac8:	4652      	mov	r2, sl
 801eaca:	465b      	mov	r3, fp
 801eacc:	ec51 0b18 	vmov	r0, r1, d8
 801ead0:	f7fa f80c 	bl	8018aec <__adddf3>
 801ead4:	4642      	mov	r2, r8
 801ead6:	464b      	mov	r3, r9
 801ead8:	f7fa f808 	bl	8018aec <__adddf3>
 801eadc:	4632      	mov	r2, r6
 801eade:	463b      	mov	r3, r7
 801eae0:	f7fa f804 	bl	8018aec <__adddf3>
 801eae4:	2000      	movs	r0, #0
 801eae6:	4632      	mov	r2, r6
 801eae8:	463b      	mov	r3, r7
 801eaea:	4604      	mov	r4, r0
 801eaec:	460d      	mov	r5, r1
 801eaee:	f7f9 fffb 	bl	8018ae8 <__aeabi_dsub>
 801eaf2:	4642      	mov	r2, r8
 801eaf4:	464b      	mov	r3, r9
 801eaf6:	f7f9 fff7 	bl	8018ae8 <__aeabi_dsub>
 801eafa:	ec53 2b18 	vmov	r2, r3, d8
 801eafe:	f7f9 fff3 	bl	8018ae8 <__aeabi_dsub>
 801eb02:	4602      	mov	r2, r0
 801eb04:	460b      	mov	r3, r1
 801eb06:	4650      	mov	r0, sl
 801eb08:	4659      	mov	r1, fp
 801eb0a:	e610      	b.n	801e72e <__ieee754_pow+0x31e>
 801eb0c:	2401      	movs	r4, #1
 801eb0e:	e6a1      	b.n	801e854 <__ieee754_pow+0x444>
 801eb10:	ed9f 7b13 	vldr	d7, [pc, #76]	; 801eb60 <__ieee754_pow+0x750>
 801eb14:	e617      	b.n	801e746 <__ieee754_pow+0x336>
 801eb16:	bf00      	nop
 801eb18:	4a454eef 	.word	0x4a454eef
 801eb1c:	3fca7e28 	.word	0x3fca7e28
 801eb20:	93c9db65 	.word	0x93c9db65
 801eb24:	3fcd864a 	.word	0x3fcd864a
 801eb28:	a91d4101 	.word	0xa91d4101
 801eb2c:	3fd17460 	.word	0x3fd17460
 801eb30:	518f264d 	.word	0x518f264d
 801eb34:	3fd55555 	.word	0x3fd55555
 801eb38:	db6fabff 	.word	0xdb6fabff
 801eb3c:	3fdb6db6 	.word	0x3fdb6db6
 801eb40:	33333303 	.word	0x33333303
 801eb44:	3fe33333 	.word	0x3fe33333
 801eb48:	e0000000 	.word	0xe0000000
 801eb4c:	3feec709 	.word	0x3feec709
 801eb50:	dc3a03fd 	.word	0xdc3a03fd
 801eb54:	3feec709 	.word	0x3feec709
 801eb58:	145b01f5 	.word	0x145b01f5
 801eb5c:	be3e2fe0 	.word	0xbe3e2fe0
 801eb60:	00000000 	.word	0x00000000
 801eb64:	3ff00000 	.word	0x3ff00000
 801eb68:	7ff00000 	.word	0x7ff00000
 801eb6c:	43400000 	.word	0x43400000
 801eb70:	0003988e 	.word	0x0003988e
 801eb74:	000bb679 	.word	0x000bb679
 801eb78:	080526b8 	.word	0x080526b8
 801eb7c:	3ff00000 	.word	0x3ff00000
 801eb80:	40080000 	.word	0x40080000
 801eb84:	080526d8 	.word	0x080526d8
 801eb88:	080526c8 	.word	0x080526c8
 801eb8c:	a3b5      	add	r3, pc, #724	; (adr r3, 801ee64 <__ieee754_pow+0xa54>)
 801eb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb92:	4640      	mov	r0, r8
 801eb94:	4649      	mov	r1, r9
 801eb96:	f7f9 ffa9 	bl	8018aec <__adddf3>
 801eb9a:	4622      	mov	r2, r4
 801eb9c:	ec41 0b1a 	vmov	d10, r0, r1
 801eba0:	462b      	mov	r3, r5
 801eba2:	4630      	mov	r0, r6
 801eba4:	4639      	mov	r1, r7
 801eba6:	f7f9 ff9f 	bl	8018ae8 <__aeabi_dsub>
 801ebaa:	4602      	mov	r2, r0
 801ebac:	460b      	mov	r3, r1
 801ebae:	ec51 0b1a 	vmov	r0, r1, d10
 801ebb2:	f7fa fbe1 	bl	8019378 <__aeabi_dcmpgt>
 801ebb6:	2800      	cmp	r0, #0
 801ebb8:	f47f ae04 	bne.w	801e7c4 <__ieee754_pow+0x3b4>
 801ebbc:	4aa4      	ldr	r2, [pc, #656]	; (801ee50 <__ieee754_pow+0xa40>)
 801ebbe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801ebc2:	4293      	cmp	r3, r2
 801ebc4:	f340 8108 	ble.w	801edd8 <__ieee754_pow+0x9c8>
 801ebc8:	151b      	asrs	r3, r3, #20
 801ebca:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801ebce:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801ebd2:	fa4a f303 	asr.w	r3, sl, r3
 801ebd6:	445b      	add	r3, fp
 801ebd8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801ebdc:	4e9d      	ldr	r6, [pc, #628]	; (801ee54 <__ieee754_pow+0xa44>)
 801ebde:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801ebe2:	4116      	asrs	r6, r2
 801ebe4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801ebe8:	2000      	movs	r0, #0
 801ebea:	ea23 0106 	bic.w	r1, r3, r6
 801ebee:	f1c2 0214 	rsb	r2, r2, #20
 801ebf2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801ebf6:	fa4a fa02 	asr.w	sl, sl, r2
 801ebfa:	f1bb 0f00 	cmp.w	fp, #0
 801ebfe:	4602      	mov	r2, r0
 801ec00:	460b      	mov	r3, r1
 801ec02:	4620      	mov	r0, r4
 801ec04:	4629      	mov	r1, r5
 801ec06:	bfb8      	it	lt
 801ec08:	f1ca 0a00 	rsblt	sl, sl, #0
 801ec0c:	f7f9 ff6c 	bl	8018ae8 <__aeabi_dsub>
 801ec10:	ec41 0b19 	vmov	d9, r0, r1
 801ec14:	4642      	mov	r2, r8
 801ec16:	464b      	mov	r3, r9
 801ec18:	ec51 0b19 	vmov	r0, r1, d9
 801ec1c:	f7f9 ff66 	bl	8018aec <__adddf3>
 801ec20:	a37b      	add	r3, pc, #492	; (adr r3, 801ee10 <__ieee754_pow+0xa00>)
 801ec22:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec26:	2000      	movs	r0, #0
 801ec28:	4604      	mov	r4, r0
 801ec2a:	460d      	mov	r5, r1
 801ec2c:	f7fa f914 	bl	8018e58 <__aeabi_dmul>
 801ec30:	ec53 2b19 	vmov	r2, r3, d9
 801ec34:	4606      	mov	r6, r0
 801ec36:	460f      	mov	r7, r1
 801ec38:	4620      	mov	r0, r4
 801ec3a:	4629      	mov	r1, r5
 801ec3c:	f7f9 ff54 	bl	8018ae8 <__aeabi_dsub>
 801ec40:	4602      	mov	r2, r0
 801ec42:	460b      	mov	r3, r1
 801ec44:	4640      	mov	r0, r8
 801ec46:	4649      	mov	r1, r9
 801ec48:	f7f9 ff4e 	bl	8018ae8 <__aeabi_dsub>
 801ec4c:	a372      	add	r3, pc, #456	; (adr r3, 801ee18 <__ieee754_pow+0xa08>)
 801ec4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec52:	f7fa f901 	bl	8018e58 <__aeabi_dmul>
 801ec56:	a372      	add	r3, pc, #456	; (adr r3, 801ee20 <__ieee754_pow+0xa10>)
 801ec58:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec5c:	4680      	mov	r8, r0
 801ec5e:	4689      	mov	r9, r1
 801ec60:	4620      	mov	r0, r4
 801ec62:	4629      	mov	r1, r5
 801ec64:	f7fa f8f8 	bl	8018e58 <__aeabi_dmul>
 801ec68:	4602      	mov	r2, r0
 801ec6a:	460b      	mov	r3, r1
 801ec6c:	4640      	mov	r0, r8
 801ec6e:	4649      	mov	r1, r9
 801ec70:	f7f9 ff3c 	bl	8018aec <__adddf3>
 801ec74:	4604      	mov	r4, r0
 801ec76:	460d      	mov	r5, r1
 801ec78:	4602      	mov	r2, r0
 801ec7a:	460b      	mov	r3, r1
 801ec7c:	4630      	mov	r0, r6
 801ec7e:	4639      	mov	r1, r7
 801ec80:	f7f9 ff34 	bl	8018aec <__adddf3>
 801ec84:	4632      	mov	r2, r6
 801ec86:	463b      	mov	r3, r7
 801ec88:	4680      	mov	r8, r0
 801ec8a:	4689      	mov	r9, r1
 801ec8c:	f7f9 ff2c 	bl	8018ae8 <__aeabi_dsub>
 801ec90:	4602      	mov	r2, r0
 801ec92:	460b      	mov	r3, r1
 801ec94:	4620      	mov	r0, r4
 801ec96:	4629      	mov	r1, r5
 801ec98:	f7f9 ff26 	bl	8018ae8 <__aeabi_dsub>
 801ec9c:	4642      	mov	r2, r8
 801ec9e:	4606      	mov	r6, r0
 801eca0:	460f      	mov	r7, r1
 801eca2:	464b      	mov	r3, r9
 801eca4:	4640      	mov	r0, r8
 801eca6:	4649      	mov	r1, r9
 801eca8:	f7fa f8d6 	bl	8018e58 <__aeabi_dmul>
 801ecac:	a35e      	add	r3, pc, #376	; (adr r3, 801ee28 <__ieee754_pow+0xa18>)
 801ecae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ecb2:	4604      	mov	r4, r0
 801ecb4:	460d      	mov	r5, r1
 801ecb6:	f7fa f8cf 	bl	8018e58 <__aeabi_dmul>
 801ecba:	a35d      	add	r3, pc, #372	; (adr r3, 801ee30 <__ieee754_pow+0xa20>)
 801ecbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ecc0:	f7f9 ff12 	bl	8018ae8 <__aeabi_dsub>
 801ecc4:	4622      	mov	r2, r4
 801ecc6:	462b      	mov	r3, r5
 801ecc8:	f7fa f8c6 	bl	8018e58 <__aeabi_dmul>
 801eccc:	a35a      	add	r3, pc, #360	; (adr r3, 801ee38 <__ieee754_pow+0xa28>)
 801ecce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ecd2:	f7f9 ff0b 	bl	8018aec <__adddf3>
 801ecd6:	4622      	mov	r2, r4
 801ecd8:	462b      	mov	r3, r5
 801ecda:	f7fa f8bd 	bl	8018e58 <__aeabi_dmul>
 801ecde:	a358      	add	r3, pc, #352	; (adr r3, 801ee40 <__ieee754_pow+0xa30>)
 801ece0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ece4:	f7f9 ff00 	bl	8018ae8 <__aeabi_dsub>
 801ece8:	4622      	mov	r2, r4
 801ecea:	462b      	mov	r3, r5
 801ecec:	f7fa f8b4 	bl	8018e58 <__aeabi_dmul>
 801ecf0:	a355      	add	r3, pc, #340	; (adr r3, 801ee48 <__ieee754_pow+0xa38>)
 801ecf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ecf6:	f7f9 fef9 	bl	8018aec <__adddf3>
 801ecfa:	4622      	mov	r2, r4
 801ecfc:	462b      	mov	r3, r5
 801ecfe:	f7fa f8ab 	bl	8018e58 <__aeabi_dmul>
 801ed02:	4602      	mov	r2, r0
 801ed04:	460b      	mov	r3, r1
 801ed06:	4640      	mov	r0, r8
 801ed08:	4649      	mov	r1, r9
 801ed0a:	f7f9 feed 	bl	8018ae8 <__aeabi_dsub>
 801ed0e:	4604      	mov	r4, r0
 801ed10:	460d      	mov	r5, r1
 801ed12:	4602      	mov	r2, r0
 801ed14:	460b      	mov	r3, r1
 801ed16:	4640      	mov	r0, r8
 801ed18:	4649      	mov	r1, r9
 801ed1a:	f7fa f89d 	bl	8018e58 <__aeabi_dmul>
 801ed1e:	2200      	movs	r2, #0
 801ed20:	ec41 0b19 	vmov	d9, r0, r1
 801ed24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801ed28:	4620      	mov	r0, r4
 801ed2a:	4629      	mov	r1, r5
 801ed2c:	f7f9 fedc 	bl	8018ae8 <__aeabi_dsub>
 801ed30:	4602      	mov	r2, r0
 801ed32:	460b      	mov	r3, r1
 801ed34:	ec51 0b19 	vmov	r0, r1, d9
 801ed38:	f7fa f9b8 	bl	80190ac <__aeabi_ddiv>
 801ed3c:	4632      	mov	r2, r6
 801ed3e:	4604      	mov	r4, r0
 801ed40:	460d      	mov	r5, r1
 801ed42:	463b      	mov	r3, r7
 801ed44:	4640      	mov	r0, r8
 801ed46:	4649      	mov	r1, r9
 801ed48:	f7fa f886 	bl	8018e58 <__aeabi_dmul>
 801ed4c:	4632      	mov	r2, r6
 801ed4e:	463b      	mov	r3, r7
 801ed50:	f7f9 fecc 	bl	8018aec <__adddf3>
 801ed54:	4602      	mov	r2, r0
 801ed56:	460b      	mov	r3, r1
 801ed58:	4620      	mov	r0, r4
 801ed5a:	4629      	mov	r1, r5
 801ed5c:	f7f9 fec4 	bl	8018ae8 <__aeabi_dsub>
 801ed60:	4642      	mov	r2, r8
 801ed62:	464b      	mov	r3, r9
 801ed64:	f7f9 fec0 	bl	8018ae8 <__aeabi_dsub>
 801ed68:	460b      	mov	r3, r1
 801ed6a:	4602      	mov	r2, r0
 801ed6c:	493a      	ldr	r1, [pc, #232]	; (801ee58 <__ieee754_pow+0xa48>)
 801ed6e:	2000      	movs	r0, #0
 801ed70:	f7f9 feba 	bl	8018ae8 <__aeabi_dsub>
 801ed74:	ec41 0b10 	vmov	d0, r0, r1
 801ed78:	ee10 3a90 	vmov	r3, s1
 801ed7c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801ed80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801ed84:	da2b      	bge.n	801edde <__ieee754_pow+0x9ce>
 801ed86:	4650      	mov	r0, sl
 801ed88:	f000 f966 	bl	801f058 <scalbn>
 801ed8c:	ec51 0b10 	vmov	r0, r1, d0
 801ed90:	ec53 2b18 	vmov	r2, r3, d8
 801ed94:	f7ff bbed 	b.w	801e572 <__ieee754_pow+0x162>
 801ed98:	4b30      	ldr	r3, [pc, #192]	; (801ee5c <__ieee754_pow+0xa4c>)
 801ed9a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801ed9e:	429e      	cmp	r6, r3
 801eda0:	f77f af0c 	ble.w	801ebbc <__ieee754_pow+0x7ac>
 801eda4:	4b2e      	ldr	r3, [pc, #184]	; (801ee60 <__ieee754_pow+0xa50>)
 801eda6:	440b      	add	r3, r1
 801eda8:	4303      	orrs	r3, r0
 801edaa:	d009      	beq.n	801edc0 <__ieee754_pow+0x9b0>
 801edac:	ec51 0b18 	vmov	r0, r1, d8
 801edb0:	2200      	movs	r2, #0
 801edb2:	2300      	movs	r3, #0
 801edb4:	f7fa fac2 	bl	801933c <__aeabi_dcmplt>
 801edb8:	3800      	subs	r0, #0
 801edba:	bf18      	it	ne
 801edbc:	2001      	movne	r0, #1
 801edbe:	e447      	b.n	801e650 <__ieee754_pow+0x240>
 801edc0:	4622      	mov	r2, r4
 801edc2:	462b      	mov	r3, r5
 801edc4:	f7f9 fe90 	bl	8018ae8 <__aeabi_dsub>
 801edc8:	4642      	mov	r2, r8
 801edca:	464b      	mov	r3, r9
 801edcc:	f7fa faca 	bl	8019364 <__aeabi_dcmpge>
 801edd0:	2800      	cmp	r0, #0
 801edd2:	f43f aef3 	beq.w	801ebbc <__ieee754_pow+0x7ac>
 801edd6:	e7e9      	b.n	801edac <__ieee754_pow+0x99c>
 801edd8:	f04f 0a00 	mov.w	sl, #0
 801eddc:	e71a      	b.n	801ec14 <__ieee754_pow+0x804>
 801edde:	ec51 0b10 	vmov	r0, r1, d0
 801ede2:	4619      	mov	r1, r3
 801ede4:	e7d4      	b.n	801ed90 <__ieee754_pow+0x980>
 801ede6:	491c      	ldr	r1, [pc, #112]	; (801ee58 <__ieee754_pow+0xa48>)
 801ede8:	2000      	movs	r0, #0
 801edea:	f7ff bb30 	b.w	801e44e <__ieee754_pow+0x3e>
 801edee:	2000      	movs	r0, #0
 801edf0:	2100      	movs	r1, #0
 801edf2:	f7ff bb2c 	b.w	801e44e <__ieee754_pow+0x3e>
 801edf6:	4630      	mov	r0, r6
 801edf8:	4639      	mov	r1, r7
 801edfa:	f7ff bb28 	b.w	801e44e <__ieee754_pow+0x3e>
 801edfe:	9204      	str	r2, [sp, #16]
 801ee00:	f7ff bb7a 	b.w	801e4f8 <__ieee754_pow+0xe8>
 801ee04:	2300      	movs	r3, #0
 801ee06:	f7ff bb64 	b.w	801e4d2 <__ieee754_pow+0xc2>
 801ee0a:	bf00      	nop
 801ee0c:	f3af 8000 	nop.w
 801ee10:	00000000 	.word	0x00000000
 801ee14:	3fe62e43 	.word	0x3fe62e43
 801ee18:	fefa39ef 	.word	0xfefa39ef
 801ee1c:	3fe62e42 	.word	0x3fe62e42
 801ee20:	0ca86c39 	.word	0x0ca86c39
 801ee24:	be205c61 	.word	0xbe205c61
 801ee28:	72bea4d0 	.word	0x72bea4d0
 801ee2c:	3e663769 	.word	0x3e663769
 801ee30:	c5d26bf1 	.word	0xc5d26bf1
 801ee34:	3ebbbd41 	.word	0x3ebbbd41
 801ee38:	af25de2c 	.word	0xaf25de2c
 801ee3c:	3f11566a 	.word	0x3f11566a
 801ee40:	16bebd93 	.word	0x16bebd93
 801ee44:	3f66c16c 	.word	0x3f66c16c
 801ee48:	5555553e 	.word	0x5555553e
 801ee4c:	3fc55555 	.word	0x3fc55555
 801ee50:	3fe00000 	.word	0x3fe00000
 801ee54:	000fffff 	.word	0x000fffff
 801ee58:	3ff00000 	.word	0x3ff00000
 801ee5c:	4090cbff 	.word	0x4090cbff
 801ee60:	3f6f3400 	.word	0x3f6f3400
 801ee64:	652b82fe 	.word	0x652b82fe
 801ee68:	3c971547 	.word	0x3c971547

0801ee6c <__ieee754_sqrt>:
 801ee6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ee70:	ec55 4b10 	vmov	r4, r5, d0
 801ee74:	4e55      	ldr	r6, [pc, #340]	; (801efcc <__ieee754_sqrt+0x160>)
 801ee76:	43ae      	bics	r6, r5
 801ee78:	ee10 0a10 	vmov	r0, s0
 801ee7c:	ee10 3a10 	vmov	r3, s0
 801ee80:	462a      	mov	r2, r5
 801ee82:	4629      	mov	r1, r5
 801ee84:	d110      	bne.n	801eea8 <__ieee754_sqrt+0x3c>
 801ee86:	ee10 2a10 	vmov	r2, s0
 801ee8a:	462b      	mov	r3, r5
 801ee8c:	f7f9 ffe4 	bl	8018e58 <__aeabi_dmul>
 801ee90:	4602      	mov	r2, r0
 801ee92:	460b      	mov	r3, r1
 801ee94:	4620      	mov	r0, r4
 801ee96:	4629      	mov	r1, r5
 801ee98:	f7f9 fe28 	bl	8018aec <__adddf3>
 801ee9c:	4604      	mov	r4, r0
 801ee9e:	460d      	mov	r5, r1
 801eea0:	ec45 4b10 	vmov	d0, r4, r5
 801eea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801eea8:	2d00      	cmp	r5, #0
 801eeaa:	dc10      	bgt.n	801eece <__ieee754_sqrt+0x62>
 801eeac:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801eeb0:	4330      	orrs	r0, r6
 801eeb2:	d0f5      	beq.n	801eea0 <__ieee754_sqrt+0x34>
 801eeb4:	b15d      	cbz	r5, 801eece <__ieee754_sqrt+0x62>
 801eeb6:	ee10 2a10 	vmov	r2, s0
 801eeba:	462b      	mov	r3, r5
 801eebc:	ee10 0a10 	vmov	r0, s0
 801eec0:	f7f9 fe12 	bl	8018ae8 <__aeabi_dsub>
 801eec4:	4602      	mov	r2, r0
 801eec6:	460b      	mov	r3, r1
 801eec8:	f7fa f8f0 	bl	80190ac <__aeabi_ddiv>
 801eecc:	e7e6      	b.n	801ee9c <__ieee754_sqrt+0x30>
 801eece:	1512      	asrs	r2, r2, #20
 801eed0:	d074      	beq.n	801efbc <__ieee754_sqrt+0x150>
 801eed2:	07d4      	lsls	r4, r2, #31
 801eed4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801eed8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801eedc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801eee0:	bf5e      	ittt	pl
 801eee2:	0fda      	lsrpl	r2, r3, #31
 801eee4:	005b      	lslpl	r3, r3, #1
 801eee6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801eeea:	2400      	movs	r4, #0
 801eeec:	0fda      	lsrs	r2, r3, #31
 801eeee:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801eef2:	107f      	asrs	r7, r7, #1
 801eef4:	005b      	lsls	r3, r3, #1
 801eef6:	2516      	movs	r5, #22
 801eef8:	4620      	mov	r0, r4
 801eefa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801eefe:	1886      	adds	r6, r0, r2
 801ef00:	428e      	cmp	r6, r1
 801ef02:	bfde      	ittt	le
 801ef04:	1b89      	suble	r1, r1, r6
 801ef06:	18b0      	addle	r0, r6, r2
 801ef08:	18a4      	addle	r4, r4, r2
 801ef0a:	0049      	lsls	r1, r1, #1
 801ef0c:	3d01      	subs	r5, #1
 801ef0e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801ef12:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801ef16:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801ef1a:	d1f0      	bne.n	801eefe <__ieee754_sqrt+0x92>
 801ef1c:	462a      	mov	r2, r5
 801ef1e:	f04f 0e20 	mov.w	lr, #32
 801ef22:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801ef26:	4281      	cmp	r1, r0
 801ef28:	eb06 0c05 	add.w	ip, r6, r5
 801ef2c:	dc02      	bgt.n	801ef34 <__ieee754_sqrt+0xc8>
 801ef2e:	d113      	bne.n	801ef58 <__ieee754_sqrt+0xec>
 801ef30:	459c      	cmp	ip, r3
 801ef32:	d811      	bhi.n	801ef58 <__ieee754_sqrt+0xec>
 801ef34:	f1bc 0f00 	cmp.w	ip, #0
 801ef38:	eb0c 0506 	add.w	r5, ip, r6
 801ef3c:	da43      	bge.n	801efc6 <__ieee754_sqrt+0x15a>
 801ef3e:	2d00      	cmp	r5, #0
 801ef40:	db41      	blt.n	801efc6 <__ieee754_sqrt+0x15a>
 801ef42:	f100 0801 	add.w	r8, r0, #1
 801ef46:	1a09      	subs	r1, r1, r0
 801ef48:	459c      	cmp	ip, r3
 801ef4a:	bf88      	it	hi
 801ef4c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 801ef50:	eba3 030c 	sub.w	r3, r3, ip
 801ef54:	4432      	add	r2, r6
 801ef56:	4640      	mov	r0, r8
 801ef58:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801ef5c:	f1be 0e01 	subs.w	lr, lr, #1
 801ef60:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801ef64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801ef68:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801ef6c:	d1db      	bne.n	801ef26 <__ieee754_sqrt+0xba>
 801ef6e:	430b      	orrs	r3, r1
 801ef70:	d006      	beq.n	801ef80 <__ieee754_sqrt+0x114>
 801ef72:	1c50      	adds	r0, r2, #1
 801ef74:	bf13      	iteet	ne
 801ef76:	3201      	addne	r2, #1
 801ef78:	3401      	addeq	r4, #1
 801ef7a:	4672      	moveq	r2, lr
 801ef7c:	f022 0201 	bicne.w	r2, r2, #1
 801ef80:	1063      	asrs	r3, r4, #1
 801ef82:	0852      	lsrs	r2, r2, #1
 801ef84:	07e1      	lsls	r1, r4, #31
 801ef86:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801ef8a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801ef8e:	bf48      	it	mi
 801ef90:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801ef94:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 801ef98:	4614      	mov	r4, r2
 801ef9a:	e781      	b.n	801eea0 <__ieee754_sqrt+0x34>
 801ef9c:	0ad9      	lsrs	r1, r3, #11
 801ef9e:	3815      	subs	r0, #21
 801efa0:	055b      	lsls	r3, r3, #21
 801efa2:	2900      	cmp	r1, #0
 801efa4:	d0fa      	beq.n	801ef9c <__ieee754_sqrt+0x130>
 801efa6:	02cd      	lsls	r5, r1, #11
 801efa8:	d50a      	bpl.n	801efc0 <__ieee754_sqrt+0x154>
 801efaa:	f1c2 0420 	rsb	r4, r2, #32
 801efae:	fa23 f404 	lsr.w	r4, r3, r4
 801efb2:	1e55      	subs	r5, r2, #1
 801efb4:	4093      	lsls	r3, r2
 801efb6:	4321      	orrs	r1, r4
 801efb8:	1b42      	subs	r2, r0, r5
 801efba:	e78a      	b.n	801eed2 <__ieee754_sqrt+0x66>
 801efbc:	4610      	mov	r0, r2
 801efbe:	e7f0      	b.n	801efa2 <__ieee754_sqrt+0x136>
 801efc0:	0049      	lsls	r1, r1, #1
 801efc2:	3201      	adds	r2, #1
 801efc4:	e7ef      	b.n	801efa6 <__ieee754_sqrt+0x13a>
 801efc6:	4680      	mov	r8, r0
 801efc8:	e7bd      	b.n	801ef46 <__ieee754_sqrt+0xda>
 801efca:	bf00      	nop
 801efcc:	7ff00000 	.word	0x7ff00000

0801efd0 <with_errno>:
 801efd0:	b570      	push	{r4, r5, r6, lr}
 801efd2:	4604      	mov	r4, r0
 801efd4:	460d      	mov	r5, r1
 801efd6:	4616      	mov	r6, r2
 801efd8:	f7fa fc6c 	bl	80198b4 <__errno>
 801efdc:	4629      	mov	r1, r5
 801efde:	6006      	str	r6, [r0, #0]
 801efe0:	4620      	mov	r0, r4
 801efe2:	bd70      	pop	{r4, r5, r6, pc}

0801efe4 <xflow>:
 801efe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801efe6:	4614      	mov	r4, r2
 801efe8:	461d      	mov	r5, r3
 801efea:	b108      	cbz	r0, 801eff0 <xflow+0xc>
 801efec:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801eff0:	e9cd 2300 	strd	r2, r3, [sp]
 801eff4:	e9dd 2300 	ldrd	r2, r3, [sp]
 801eff8:	4620      	mov	r0, r4
 801effa:	4629      	mov	r1, r5
 801effc:	f7f9 ff2c 	bl	8018e58 <__aeabi_dmul>
 801f000:	2222      	movs	r2, #34	; 0x22
 801f002:	b003      	add	sp, #12
 801f004:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f008:	f7ff bfe2 	b.w	801efd0 <with_errno>

0801f00c <__math_uflow>:
 801f00c:	b508      	push	{r3, lr}
 801f00e:	2200      	movs	r2, #0
 801f010:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801f014:	f7ff ffe6 	bl	801efe4 <xflow>
 801f018:	ec41 0b10 	vmov	d0, r0, r1
 801f01c:	bd08      	pop	{r3, pc}

0801f01e <__math_oflow>:
 801f01e:	b508      	push	{r3, lr}
 801f020:	2200      	movs	r2, #0
 801f022:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801f026:	f7ff ffdd 	bl	801efe4 <xflow>
 801f02a:	ec41 0b10 	vmov	d0, r0, r1
 801f02e:	bd08      	pop	{r3, pc}

0801f030 <fabs>:
 801f030:	ec51 0b10 	vmov	r0, r1, d0
 801f034:	ee10 2a10 	vmov	r2, s0
 801f038:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801f03c:	ec43 2b10 	vmov	d0, r2, r3
 801f040:	4770      	bx	lr

0801f042 <finite>:
 801f042:	b082      	sub	sp, #8
 801f044:	ed8d 0b00 	vstr	d0, [sp]
 801f048:	9801      	ldr	r0, [sp, #4]
 801f04a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801f04e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801f052:	0fc0      	lsrs	r0, r0, #31
 801f054:	b002      	add	sp, #8
 801f056:	4770      	bx	lr

0801f058 <scalbn>:
 801f058:	b570      	push	{r4, r5, r6, lr}
 801f05a:	ec55 4b10 	vmov	r4, r5, d0
 801f05e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801f062:	4606      	mov	r6, r0
 801f064:	462b      	mov	r3, r5
 801f066:	b99a      	cbnz	r2, 801f090 <scalbn+0x38>
 801f068:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801f06c:	4323      	orrs	r3, r4
 801f06e:	d036      	beq.n	801f0de <scalbn+0x86>
 801f070:	4b39      	ldr	r3, [pc, #228]	; (801f158 <scalbn+0x100>)
 801f072:	4629      	mov	r1, r5
 801f074:	ee10 0a10 	vmov	r0, s0
 801f078:	2200      	movs	r2, #0
 801f07a:	f7f9 feed 	bl	8018e58 <__aeabi_dmul>
 801f07e:	4b37      	ldr	r3, [pc, #220]	; (801f15c <scalbn+0x104>)
 801f080:	429e      	cmp	r6, r3
 801f082:	4604      	mov	r4, r0
 801f084:	460d      	mov	r5, r1
 801f086:	da10      	bge.n	801f0aa <scalbn+0x52>
 801f088:	a32b      	add	r3, pc, #172	; (adr r3, 801f138 <scalbn+0xe0>)
 801f08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f08e:	e03a      	b.n	801f106 <scalbn+0xae>
 801f090:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801f094:	428a      	cmp	r2, r1
 801f096:	d10c      	bne.n	801f0b2 <scalbn+0x5a>
 801f098:	ee10 2a10 	vmov	r2, s0
 801f09c:	4620      	mov	r0, r4
 801f09e:	4629      	mov	r1, r5
 801f0a0:	f7f9 fd24 	bl	8018aec <__adddf3>
 801f0a4:	4604      	mov	r4, r0
 801f0a6:	460d      	mov	r5, r1
 801f0a8:	e019      	b.n	801f0de <scalbn+0x86>
 801f0aa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801f0ae:	460b      	mov	r3, r1
 801f0b0:	3a36      	subs	r2, #54	; 0x36
 801f0b2:	4432      	add	r2, r6
 801f0b4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801f0b8:	428a      	cmp	r2, r1
 801f0ba:	dd08      	ble.n	801f0ce <scalbn+0x76>
 801f0bc:	2d00      	cmp	r5, #0
 801f0be:	a120      	add	r1, pc, #128	; (adr r1, 801f140 <scalbn+0xe8>)
 801f0c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f0c4:	da1c      	bge.n	801f100 <scalbn+0xa8>
 801f0c6:	a120      	add	r1, pc, #128	; (adr r1, 801f148 <scalbn+0xf0>)
 801f0c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f0cc:	e018      	b.n	801f100 <scalbn+0xa8>
 801f0ce:	2a00      	cmp	r2, #0
 801f0d0:	dd08      	ble.n	801f0e4 <scalbn+0x8c>
 801f0d2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801f0d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801f0da:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801f0de:	ec45 4b10 	vmov	d0, r4, r5
 801f0e2:	bd70      	pop	{r4, r5, r6, pc}
 801f0e4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801f0e8:	da19      	bge.n	801f11e <scalbn+0xc6>
 801f0ea:	f24c 3350 	movw	r3, #50000	; 0xc350
 801f0ee:	429e      	cmp	r6, r3
 801f0f0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801f0f4:	dd0a      	ble.n	801f10c <scalbn+0xb4>
 801f0f6:	a112      	add	r1, pc, #72	; (adr r1, 801f140 <scalbn+0xe8>)
 801f0f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f0fc:	2b00      	cmp	r3, #0
 801f0fe:	d1e2      	bne.n	801f0c6 <scalbn+0x6e>
 801f100:	a30f      	add	r3, pc, #60	; (adr r3, 801f140 <scalbn+0xe8>)
 801f102:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f106:	f7f9 fea7 	bl	8018e58 <__aeabi_dmul>
 801f10a:	e7cb      	b.n	801f0a4 <scalbn+0x4c>
 801f10c:	a10a      	add	r1, pc, #40	; (adr r1, 801f138 <scalbn+0xe0>)
 801f10e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f112:	2b00      	cmp	r3, #0
 801f114:	d0b8      	beq.n	801f088 <scalbn+0x30>
 801f116:	a10e      	add	r1, pc, #56	; (adr r1, 801f150 <scalbn+0xf8>)
 801f118:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f11c:	e7b4      	b.n	801f088 <scalbn+0x30>
 801f11e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801f122:	3236      	adds	r2, #54	; 0x36
 801f124:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801f128:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801f12c:	4620      	mov	r0, r4
 801f12e:	4b0c      	ldr	r3, [pc, #48]	; (801f160 <scalbn+0x108>)
 801f130:	2200      	movs	r2, #0
 801f132:	e7e8      	b.n	801f106 <scalbn+0xae>
 801f134:	f3af 8000 	nop.w
 801f138:	c2f8f359 	.word	0xc2f8f359
 801f13c:	01a56e1f 	.word	0x01a56e1f
 801f140:	8800759c 	.word	0x8800759c
 801f144:	7e37e43c 	.word	0x7e37e43c
 801f148:	8800759c 	.word	0x8800759c
 801f14c:	fe37e43c 	.word	0xfe37e43c
 801f150:	c2f8f359 	.word	0xc2f8f359
 801f154:	81a56e1f 	.word	0x81a56e1f
 801f158:	43500000 	.word	0x43500000
 801f15c:	ffff3cb0 	.word	0xffff3cb0
 801f160:	3c900000 	.word	0x3c900000

0801f164 <_init>:
 801f164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f166:	bf00      	nop
 801f168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f16a:	bc08      	pop	{r3}
 801f16c:	469e      	mov	lr, r3
 801f16e:	4770      	bx	lr

0801f170 <_fini>:
 801f170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f172:	bf00      	nop
 801f174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f176:	bc08      	pop	{r3}
 801f178:	469e      	mov	lr, r3
 801f17a:	4770      	bx	lr
